using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data.SqlClient;
using System.Data;
using System.Web.Services;
using System.Configuration;
using System.Security.Cryptography;
using System.Drawing;
using System.Text.RegularExpressions;
using AjaxControlToolkit;
using System.IO;
using System.Text;

public partial class Staff_Manager : System.Web.UI.Page
{
    string college = "";
    DataSet ds = new DataSet();
    DataSet dv = new DataSet();
    DataSet dp = new DataSet();
    DataSet dg = new DataSet();
    DAccess2 d2 = new DAccess2();
    DataView df = new DataView();
    DAccess2 da = new DAccess2();
    Hashtable hat = new Hashtable();
    Hashtable hat1 = new Hashtable();
    Hashtable hascount = new Hashtable();
    Hashtable hsave = new Hashtable();
    string semorg = "";
    string caption = "";
    string caption1 = "";
    string cap = "";
    bool check = false;
    string semcap = "";
    static ArrayList ItemList = new ArrayList();
    static ArrayList colord = new ArrayList();
    static ArrayList Itemindex = new ArrayList();
    static Hashtable newhash = new Hashtable();
    ArrayList holidaydate = new ArrayList();
    ArrayList leave = new ArrayList();
    string usercode = string.Empty;
    string collegecode1 = string.Empty;
    string collegecode = string.Empty;
    string singleuser = string.Empty;
    string group_user = string.Empty;
    string[] sarray2 = new string[5];
    string[] sarray5 = new string[5];
    FarPoint.Web.Spread.ComboBoxCellType cb1 = new FarPoint.Web.Spread.ComboBoxCellType();
    FarPoint.Web.Spread.ComboBoxCellType cb3 = new FarPoint.Web.Spread.ComboBoxCellType();
    FarPoint.Web.Spread.TextCellType txtcell = new FarPoint.Web.Spread.TextCellType();
    Boolean checkupdateapply = false;
    string sql = "";
    ArrayList ar = new ArrayList();
    Boolean Cellclick;
    Boolean cell;
    Boolean cellpm;
    Boolean cellac;
    static string collcode = string.Empty;
    Boolean flagmain = false;
    Boolean saveupate = false;
    string isstaff = string.Empty;
    SqlConnection con = new SqlConnection(ConfigurationManager.AppSettings["con"]);
    SqlConnection ssql = new SqlConnection(ConfigurationManager.AppSettings["LocalConn"].ToString());
    Boolean saveflag = false;

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            Page.MaintainScrollPositionOnPostBack = true;
            if (Session["collegecode"] == null)
                Response.Redirect("~/Default.aspx");
            usercode = Session["usercode"].ToString();
            collegecode1 = Session["collegecode"].ToString();
            singleuser = Session["single_user"].ToString();
            group_user = Session["group_code"].ToString();
            string groupCode = group_user;// group_user.Substring(0, group_user.Length - 1);
            if (groupCode.Contains(';'))
            {
                string[] group_semi = group_user.Split(';');
                groupCode = group_semi[0].ToString();
            }
            string tabrightsuser = string.Empty;

            if (singleuser.Trim().ToUpper() == "TRUE")//delsi1506
            {
                tabrightsuser = " and usercode='" + usercode.ToString() + "'";
            }
            else
            {
                tabrightsuser = " and group_code='" + groupCode.ToString() + "'";
            }
            string getval = string.Empty;
            string getprioval = d2.GetFunction("select value from Master_Settings where settings='HR_checkpriority' " + tabrightsuser + "");
            ViewState["checkpriority"] = Convert.ToString(getprioval);
            isstaff = d2.GetFunction("select is_staff from usermaster where User_code='" + usercode + "'");
            ViewState["isstaffcheck"] = Convert.ToString(isstaff);
            if (isstaff.ToUpper() == "TRUE" || isstaff.ToUpper() == "1")
            {
                btn_new.Visible = false;
                btn_aptnew.Visible = false;
            }
            if (!IsPostBack)
            {
                bindcollege();
                binddept();
                designation();
                stafftype();
                newhash.Clear();
                loadClgBank();
                if (ddlcollege.Items.Count > 0)
                    collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
                lstcolorder.Items.Clear();
                loadcolumns(sender, e);
                bool chkpanel = false;
                trStfType.Visible = false;
                txtStfType.Text = "";

                string value = d2.GetFunction("select value from Master_Settings where settings='SM Tab Rights' " + tabrightsuser + " ");//delsi2205
                if (value.Trim() != "")
                {
                    txtappstfapplcode.Visible = true;
                    string[] val = value.Split(',');
                    for (int i = 0; i < val.Length; i++)
                    {
                        if (val[i] == "1")
                        {
                            btn_application.Visible = true;
                            chkpanel = true;
                        }
                        if (val[i] == "2")
                            btn_cletter.Visible = true;
                        if (val[i] == "3")
                            btn_selection.Visible = true;
                        if (val[i] == "4")
                            btn_appointment.Visible = true;
                        if (val[i] == "5")
                            btn_transfer.Visible = true;
                        if (val[i] == "6")
                            btn_relieve.Visible = true;
                        if (val[i] == "7")
                            btn_appraisal.Visible = true;
                        if (val[i] == "8")
                            btn_promotion.Visible = true;
                        if (val[i] == "9")
                            btn_increment.Visible = true;
                        if (val[i] == "10")
                            btn_loan.Visible = true;
                    }
                }

                if (chkpanel == true && btn_application.Visible == true)
                    btn_application_OnClick(sender, e);

                txt_fdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txt_tdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txt_stfdate.Attributes.Add("readonly", "readonly");
                txt_stdate.Attributes.Add("readonly", "readonly");
                txt_adate.Attributes.Add("readonly", "readonly");
                txt_appdoj.Attributes.Add("readonly", "readonly");
                txt_popfd.Attributes.Add("readonly", "readonly");
                txt_poptd.Attributes.Add("readonly", "readonly");
                txt_retire.Attributes.Add("readonly", "readonly");
                txt_transdate.Attributes.Add("readonly", "readonly");
                txt_rldate.Attributes.Add("readonly", "readonly");
                txt_joindate.Attributes.Add("readonly", "readonly");
                txt_promodate.Attributes.Add("readonly", "readonly");
                txt_incrdate.Attributes.Add("readonly", "readonly");
                txt_apprjdate.Attributes.Add("readonly", "readonly");
                txt_dop.Attributes.Add("readonly", "readonly");
                txt_appdate.Attributes.Add("readonly", "readonly");
                txt_yofp.Attributes.Add("readonly", "readonly");
                txt_fromdate.Attributes.Add("readonly", "readonly");
                txt_todate.Attributes.Add("readonly", "readonly");
                txt_semfromdate.Attributes.Add("readonly", "readonly");
                txt_semtodate.Attributes.Add("readonly", "readonly");
                txt_orgfromdate.Attributes.Add("readonly", "readonly");
                txt_orgtodate.Attributes.Add("readonly", "readonly");
                txt_byear.Attributes.Add("readonly", "readonly");
                txt_eyear.Attributes.Add("readonly", "readonly");
                txt_ayear.Attributes.Add("readonly", "readonly");
                txt_projectfrom.Attributes.Add("readonly", "readonly");
                txt_projecto.Attributes.Add("readonly", "readonly");
                txt_pgyear.Attributes.Add("readonly", "readonly");
                txt_pgdate.Attributes.Add("readonly", "readonly");
                txt_pryear.Attributes.Add("readonly", "readonly");
                txt_prdate.Attributes.Add("readonly", "readonly");
                txt_prcerdate.Attributes.Add("readonly", "readonly");
                txt_gyear.Attributes.Add("readonly", "readonly");
                txt_jyear.Attributes.Add("readonly", "readonly");
                txt_amfromdate.Attributes.Add("readonly", "readonly");
                txt_amtodate.Attributes.Add("readonly", "readonly");
                txt_date.Attributes.Add("readonly", "readonly");
                txt_fdate.Attributes.Add("readonly", "readonly");
                txt_tdate.Attributes.Add("readonly", "readonly");
                txt_loandate.Attributes.Add("readonly", "readonly");
                txt_pdate.Attributes.Add("readonly", "readonly");
                txt_closeddate.Attributes.Add("readonly", "readonly");
                txt_popscode.Attributes.Add("readonly", "readonly");
                txt_popsname.Attributes.Add("readonly", "readonly");
                txt_applno.Attributes.Add("readonly", "readonly");
                txt_fname.Attributes.Add("readonly", "readonly");
                txt_mname.Attributes.Add("readonly", "readonly");
                txt_surname.Attributes.Add("readonly", "readonly");
                txt_dedamt.Attributes.Add("readonly", "readonly");
                txt_certdate.Attributes.Add("readonly", "readonly");
                txt_expdate.Attributes.Add("readonly", "readonly");

                txtLicRenewDt.Text = DateTime.Now.ToString("dd/MM/yyyy");

                ItemList.Clear();
                Itemindex.Clear();
                tbllabel.Visible = false;
                tbllabel1.Visible = false;
                sessionnull();

                string checkstf = Convert.ToString(ViewState["isstaffcheck"]);
                if (checkstf.ToUpper() == "TRUE" || checkstf.ToUpper() == "1")
                {

                    btn_new.Visible = false;
                    btn_aptnew.Visible = false;
                }

                #region DateRestrict
                CalendarExtender11.EndDate = DateTime.Now;
                CalendarExtender22.EndDate = DateTime.Now;
                CalendarExtender20.StartDate = DateTime.Now;   //Added By Jeyaprakash
                CalendarExtender18.EndDate = DateTime.Now;
                caldatestart0.EndDate = DateTime.Now.Date.AddDays(-1);
                CalendarExtender09.EndDate = DateTime.Now;
                CalendarExtender010.EndDate = DateTime.Now;
                CalendarExtender011.EndDate = DateTime.Now;
                CalendarExtender013.EndDate = DateTime.Now;
                CalendarExtender24.EndDate = DateTime.Now;
                CalendarExtender118.EndDate = DateTime.Now;
                CalendarExtender3.EndDate = DateTime.Now;
                CalendarExtender155.EndDate = DateTime.Now;
                CalendarExtender4.EndDate = DateTime.Now;
                CalendarExtender16.EndDate = DateTime.Now;
                CalendarExtender124.EndDate = DateTime.Now;
                CalendarExtender5.EndDate = DateTime.Now;
                CalendarExtender19.EndDate = DateTime.Now;
                CalendarExtender28.EndDate = DateTime.Now;
                caldatestart.EndDate = DateTime.Now;
                CalendarExtender0013.EndDate = DateTime.Now;
                CalendarExtender1.EndDate = DateTime.Now;
                CalendarExtender014.StartDate = DateTime.Now;
                #endregion
            }
            if (ddlcollege.Items.Count > 0)
                collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
            int_alert.Visible = false;
            lbl_tralert.Visible = false;
            lbl_trerr.Visible = false;
            lbl_trserr.Visible = false;
            lblMainStfErr.Visible = false;
            lblValStudRep.Visible = false;
        }
        catch (Exception ex) { }
    }

    public void bindcollege()
    {
        try
        {
            string group_code = Session["group_code"].ToString();
            string columnfield = "";
            if (group_code.Contains(';'))
            {
                string[] group_semi = group_code.Split(';');
                group_code = group_semi[0].ToString();
            }
            if ((group_code.ToString().Trim() != "") && (Session["single_user"].ToString() != "1" && Session["single_user"].ToString() != "true" && Session["single_user"].ToString() != "TRUE" && Session["single_user"].ToString() != "True"))
                columnfield = " and group_code='" + group_code + "'";
            else
                columnfield = " and user_code='" + Session["usercode"] + "'";
            hat.Clear();
            hat.Add("column_field", columnfield.ToString());
            ds = d2.select_method("bind_college", hat, "sp");
            ddlcollege.Items.Clear();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlcollege.Enabled = true;
                ddlcollege.DataSource = ds;
                ddlcollege.DataTextField = "collname";
                ddlcollege.DataValueField = "college_code";
                ddlcollege.DataBind();
            }
        }
        catch (Exception e) { }
    }

    protected void binddept()
    {
        try
        {
            ds.Clear();
            cbl_dept.Items.Clear();
            string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);
            string item = "select dept_code,dept_name from hrdept_master where college_code='" + newcollcode + "' order by dept_name";
            ds.Clear();
            string group_user = "";
            string cmd = "";
            string singleuser = Session["single_user"].ToString();
            if (singleuser == "True")
            {
                cmd = "SELECT DISTINCT hp.dept_code,dept_name from hr_privilege hp,hrdept_master hr  where user_code=" + Session["usercode"] + " and hr.dept_code=hp.dept_code  and hp.dept_code in (select dept_code from hrdept_master where college_code='" + newcollcode + "') order by dept_name";
            }
            else
            {
                group_user = Session["group_code"].ToString();
                if (group_user.Contains(';'))
                {
                    string[] group_semi = group_user.Split(';');
                    group_user = group_semi[0].ToString();
                }
                cmd = "SELECT DISTINCT hp.dept_code,dept_name from hr_privilege hp,hrdept_master hr  where group_code='" + group_user + "' and hr.dept_code=hp.dept_code  and hp.dept_code in (select dept_code from hrdept_master where college_code='" + newcollcode + "') order by dept_name";
            }

            ds = d2.select_method_wo_parameter(cmd, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_dept.DataSource = ds;
                cbl_dept.DataTextField = "dept_name";
                cbl_dept.DataValueField = "dept_code";
                cbl_dept.DataBind();
                if (cbl_dept.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_dept.Items.Count; i++)
                    {
                        cbl_dept.Items[i].Selected = true;
                    }
                    txt_dept.Text = "Department (" + cbl_dept.Items.Count + ")";
                    cb_dept.Checked = true;
                }
            }
            else
            {
                txt_dept.Text = "--Select--";
                cb_dept.Checked = false;
            }
        }
        catch { }
    }

    protected void designation()
    {

        try
        {
            cbl_desig.Items.Clear();
            txt_desig.Text = "--Select--";
            cb_desig.Checked = false;
            Dictionary<string, string> dicgetcode = new Dictionary<string, string>();
            dicgetcode.Clear();
            Dictionary<string, string> dicdescode = new Dictionary<string, string>();
            dicdescode.Clear();
            string collcode = Convert.ToString(ddlcollege.SelectedValue);
            if (cbl_dept.Items.Count > 0)
            {
                for (int ik = 0; ik < cbl_dept.Items.Count; ik++)
                {
                    if (cbl_dept.Items[ik].Selected == true)
                    {
                        if (!dicgetcode.ContainsKey(Convert.ToString(cbl_dept.Items[ik].Value)))
                        {
                            string selq = "select desig_code,desig_name from desig_master where ((dept_code like '" + Convert.ToString(cbl_dept.Items[ik].Value) + ";%') or (dept_code like '%;" + Convert.ToString(cbl_dept.Items[ik].Value) + "%') or (dept_code like '%" + Convert.ToString(cbl_dept.Items[ik].Value) + "') or (dept_code='" + Convert.ToString(cbl_dept.Items[ik].Value) + "'))";
                            ds.Clear();
                            ds = d2.select_method_wo_parameter(selq, "Text");
                            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                            {
                                for (int jk = 0; jk < ds.Tables[0].Rows.Count; jk++)
                                {
                                    if (!dicdescode.ContainsKey(Convert.ToString(ds.Tables[0].Rows[jk]["desig_code"])))
                                    {
                                        cbl_desig.Items.Add(new ListItem(Convert.ToString(ds.Tables[0].Rows[jk]["desig_name"]), Convert.ToString(ds.Tables[0].Rows[jk]["desig_code"])));
                                        dicdescode.Add(Convert.ToString(ds.Tables[0].Rows[jk]["desig_code"]), Convert.ToString(ds.Tables[0].Rows[jk]["desig_name"]));
                                    }
                                }
                            }
                            dicgetcode.Add(Convert.ToString(cbl_dept.Items[ik].Value), Convert.ToString(cbl_dept.Items[ik].Text));
                        }
                    }
                }
            }
            if (cbl_desig.Items.Count > 0)
            {
                for (int i = 0; i < cbl_desig.Items.Count; i++)
                {
                    cbl_desig.Items[i].Selected = true;
                }
                txt_desig.Text = "Designation (" + cbl_desig.Items.Count + ")";
                cb_desig.Checked = true;
            }

        }
        catch (Exception ex)
        {




        }


        //ds.Clear();
        //cbl_desig.Items.Clear();
        //string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);
        //string statequery = "select desig_code,desig_name from desig_master where collegeCode='" + newcollcode + "' order by desig_name";
        //ds = da.select_method_wo_parameter(statequery, "Text");
        //if (ds.Tables[0].Rows.Count > 0)
        //{
        //    cbl_desig.DataSource = ds;
        //    cbl_desig.DataTextField = "desig_name";
        //    cbl_desig.DataValueField = "desig_code";
        //    cbl_desig.DataBind();
        //    cbl_desig.Visible = true;
        //    if (cbl_desig.Items.Count > 0)
        //    {
        //        for (int i = 0; i < cbl_desig.Items.Count; i++)
        //        {
        //            cbl_desig.Items[i].Selected = true;
        //        }
        //        txt_desig.Text = "Designation(" + cbl_desig.Items.Count + ")";
        //        cb_desig.Checked = true;
        //    }
        //}
        //else
        //{
        //    txt_desig.Text = "--Select--";
        //    cb_desig.Checked = false;
        //}
    }

    protected void stafftype()   //Modified By Jeyaprakash on Jun 30th
    {
        try
        {
            ds.Clear();
            cbl_stype.Items.Clear();
            string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);
            string item = "select distinct staff_type from stafftrans t,staffmaster m,staff_appl_master sa where m.staff_code = t.staff_code and sa.appl_no=m.appl_no and staff_type is not null and staff_type<>'' and m.college_code = '" + newcollcode + "'";
            ds = d2.select_method_wo_parameter(item, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_stype.DataSource = ds;
                cbl_stype.DataTextField = "staff_type";
                cbl_stype.DataBind();
                if (cbl_stype.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_stype.Items.Count; i++)
                    {
                        cbl_stype.Items[i].Selected = true;
                    }
                    txt_stype.Text = "StaffType (" + cbl_stype.Items.Count + ")";
                    cb_stype.Checked = true;
                }
            }
            else
            {
                txt_stype.Text = "--Select--";
                cb_stype.Checked = false;
            }
        }
        catch { }
    }

    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetStaffName(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();
        if (!String.IsNullOrEmpty(prefixText.Trim()))
        {
            string query = "select staff_name  from staffmaster where (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and staff_name like  '" + prefixText + "%' and college_code='" + collcode + "'";
            name = ws.Getname(query);
        }
        return name;
    }

    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetStudAdmNo(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();
        if (!String.IsNullOrEmpty(prefixText.Trim()))
        {
            string query = "select Roll_Admit from Registration where CC=0 and DelFlag=0 and Exam_Flag<>'Debar' and Roll_Admit like  '" + prefixText + "%' and college_code='" + collcode + "'";
            name = ws.Getname(query);
        }
        return name;
    }

    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetStaffCode(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();
        if (!String.IsNullOrEmpty(prefixText.Trim()))
        {
            string query = "select staff_code from staffmaster where (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and staff_code like  '" + prefixText + "%' and college_code='" + collcode + "'";
            name = ws.Getname(query);
        }
        return name;
    }

    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetapplCode(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();
        if (!String.IsNullOrEmpty(prefixText.Trim()))
        {
            string query = "select appl_no from staff_appl_master where appl_no like  '" + prefixText + "%' and college_code='" + collcode + "'";
            name = ws.Getname(query);
        }
        return name;
    }

    protected void cb_dept_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cb_dept, cbl_dept, txt_dept, "Department");
        designation();
    }

    protected void cbl_dept_SelectedIndexChange(object sender, EventArgs e)
    {
        chklstchange(cb_dept, cbl_dept, txt_dept, "Department");
        designation();
    }

    protected void cb_desig_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cb_desig, cbl_desig, txt_desig, "Designation");
    }

    protected void cbl_desig_SelectedIndexChange(object sender, EventArgs e)
    {
        chklstchange(cb_desig, cbl_desig, txt_desig, "Designation");
    }

    protected void cb_stype_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cb_stype, cbl_stype, txt_stype, "StaffType");
    }

    protected void cbl_stype_SelectedIndexChange(object sender, EventArgs e)
    {
        chklstchange(cb_stype, cbl_stype, txt_stype, "StaffType");
    }

    protected void btn_trnasgo_Click(object sender, EventArgs e)
    {
        loadcolumns(sender, e);
        Fpspread4.Visible = true;
        string ft = txt_fdate.Text;
        string tt = txt_tdate.Text;
        string[] aa = ft.Split('/');
        DateTime dt2 = Convert.ToDateTime(aa[1] + "/" + aa[0] + "/" + aa[2]);
        string[] bb = tt.Split('/');
        DateTime dt3 = Convert.ToDateTime(bb[1] + "/" + bb[0] + "/" + bb[2]);
        Hashtable hsgetcol = new Hashtable();
        hsgetcol.Clear();

        string deptcode = "";
        string desigcode = "";
        string stafftype = "";

        deptcode = GetSelectedItemsValueAsString(cbl_dept);

        desigcode = GetSelectedItemsValueAsString(cbl_desig);

        stafftype = GetSelectedItemsValueAsString(cbl_stype);

        string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);

        sql = "  select TransferPK, sa.appl_no,appl_id,appl_name,father_name,m.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,stftype,CONVERT(varchar(20),dateofapply,103) as dateofapply,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,m.staff_code,from_dep_code,to_dep_code,from_dsg_code,to_dsg_code,newstaff_code,staff_name,Convert(varchar(10),transfer_date,103) as transfer_date,sa.dept_name,sa.desig_name,(select dept_Name from hrdept_master d where d.dept_code = t.from_dep_code) fromdept,(select dept_Name from hrdept_master d where d.dept_code = t.to_dep_code) TodeptName,(select desig_name from desig_master where desig_code =t.from_dsg_code and collegeCode ='" + newcollcode + "') as FromDesgName, (select desig_name from desig_master where desig_code =t.to_dsg_code and collegeCode ='" + newcollcode + "') as ToDesigName,(select collname from collinfo where college_code =t.college_code) as FromCollegeName ,(select collname from collinfo where college_code =t.to_col_code) as ToCollegeName from staff_transfer t,staffmaster m,staff_appl_master sa,stafftrans st where st.staff_code =m.staff_code and st.staff_code =t.newstaff_code and st.latestrec ='1' and st.dept_code =t.to_dep_code and st.desig_code =t.to_dsg_code  and t.newstaff_code = m.staff_code and sa.appl_no =m.appl_no";

        if (ddlsearchappstf.SelectedItem.Text == "Appl No" && txtappstfapplcode.Text.Trim() != "")
        {
            sql = sql + " and sa.appl_no='" + Convert.ToString(txtappstfapplcode.Text) + "'";
        }
        else if (ddlsearchappstf.SelectedItem.Text == "Staff Code" && txtappstfcode.Text.Trim() != "")
        {
            sql = sql + " and m.staff_code='" + Convert.ToString(txtappstfcode.Text) + "'";
        }
        else if (txtappstfname.Text.Trim() != "")
        {
            sql = sql + " and (m.staff_name='" + Convert.ToString(txtappstfname.Text) + "' or sa.appl_name='" + Convert.ToString(txtappstfname.Text) + "')";
        }
        else
        {
            if (searchbydate.Checked == true)
                sql = sql + " and t.transfer_date between '" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'";
            if (deptcode.Trim() != "")
                sql = sql + " and st.dept_code in('" + deptcode + "')";
            if (desigcode.Trim() != "")
                sql = sql + " and st.desig_code in('" + desigcode + "')";
            if (stafftype.Trim() != "")
                sql = sql + " and sa.Staff_Type in('','" + stafftype + "')";
        }
        sql = sql + " order by transfer_date";

        ds.Clear();
        ds = d2.select_method_wo_parameter(sql, "Text");

        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            Fpspread4.Sheets[0].AutoPostBack = true;
            Fpspread4.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread4.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread4.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread4.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread4.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread4.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread4.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread4.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread4.Sheets[0].RowHeader.Visible = false;
            Fpspread4.Visible = false;
            Fpspread4.Sheets[0].ColumnHeader.RowCount = 0;
            Fpspread4.Sheets[0].ColumnCount = 1;
            Fpspread4.Sheets[0].RowCount = 0;
            Fpspread4.Sheets[0].RowHeader.Visible = false;
            Fpspread4.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.Border.BorderSize = 0;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
            Fpspread4.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread4.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread4.Sheets[0].RowCount = 0;
            Fpspread4.Sheets[0].ColumnCount = 8;
            Fpspread4.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread4.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread4.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            Fpspread4.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
            Fpspread4.Sheets[0].ColumnHeader.Columns[0].Font.Name = "Book Antiqua";

            int cc = 0;
            int j = 0;
            for (j = 0; j < lstcolorder.Items.Count; j++)
            {
                cc++;
                Fpspread4.Sheets[0].ColumnCount = cc + 1;
                Fpspread4.Sheets[0].ColumnHeader.Cells[0, cc].Text = lstcolorder.Items[j].Text;
                Fpspread4.Sheets[0].ColumnHeader.Cells[0, cc].Font.Name = "Book Antiqua";
                Fpspread4.Columns[cc].Width = 200;

                if (!hsgetcol.ContainsKey(Convert.ToString(cc)))
                    hsgetcol.Add(Convert.ToString(cc), lstcolorder.Items[j].Text);
            }

            string getcolval = "";
            string applid = "";
            string graduation = "";
            string degree = "";
            string specialization = "";
            string qual = "";
            string bldgrp = "";
            string famsub = "";
            string frmdept = "";
            string todept = "";
            string frmdesig = "";
            string todesig = "";
            DataSet dsgetstaff = new DataSet();

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                qual = "";
                applid = Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]);
                Fpspread4.Sheets[0].RowCount++;
                Fpspread4.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                Fpspread4.Sheets[0].Cells[i, 0].Tag = ds.Tables[0].Rows[i]["appl_no"].ToString();
                Fpspread4.Sheets[0].Cells[i, 0].Note = ds.Tables[0].Rows[i]["TransferPK"].ToString();
                Fpspread4.Sheets[0].Cells[i, 0].Font.Name = "Book Antiqua";

                cc = 0;
                j = 0;
                for (j = 0; j < lstcolorder.Items.Count; j++)
                {
                    cc++;
                    getcolval = Convert.ToString(hsgetcol[Convert.ToString(cc)]);
                    if (getcolval.Trim() == "Qualifications")
                    {
                        string getstfdet = "select Graduation,Degree,Specialization from StaffDetails where Appl_ID='" + applid + "'";
                        dsgetstaff.Clear();
                        dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                        if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                        {
                            graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                            degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                            specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                        }
                        if (graduation == "0")
                            graduation = "";
                        if (degree == "0")
                            degree = "";
                        if (specialization == "0")
                            specialization = "";
                        if (graduation.Trim() != "")
                        {
                            if (qual == "")
                                qual = graduation;
                            else
                                qual = qual + " , " + graduation;
                        }
                        if (degree.Trim() != "")
                        {
                            if (qual == "")
                                qual = degree;
                            else
                                qual = qual + " , " + degree;
                        }
                        if (specialization.Trim() != "")
                        {
                            if (qual == "")
                                qual = specialization;
                            else
                                qual = qual + " , " + specialization;
                        }
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Text = qual;
                    }
                    else if (getcolval.Trim() == "Blood Group")
                    {
                        bldgrp = getqval(Convert.ToString(ds.Tables[0].Rows[i]["bldgrp"]));
                        if (bldgrp.Trim() == "0")
                            bldgrp = "";
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Text = bldgrp;
                    }
                    else if (getcolval.Trim() == "Familiar Subjects")
                    {
                        famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                        if (famsub.Trim() == "0")
                            famsub = "";
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Text = famsub;
                    }
                    else if (getcolval.Trim() == "Department Name")
                    {
                        todept = Convert.ToString(ds.Tables[0].Rows[i]["to_dep_code"]);
                        string todeptname = d2.GetFunction("select dept_name from hrdept_master where dept_code='" + todept + "' and college_code='" + newcollcode + "'");
                        if (todeptname.Trim() == "" || todeptname.Trim() == "0")
                            todeptname = "";
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Text = todeptname;
                    }
                    else if (getcolval.Trim() == "Designation Name")
                    {
                        todesig = Convert.ToString(ds.Tables[0].Rows[i]["to_dsg_code"]);
                        string todesigname = d2.GetFunction("select desig_name from desig_master where desig_code='" + todesig + "' and collegeCode='" + newcollcode + "'");
                        if (todesigname.Trim() == "" || todesigname.Trim() == "0")
                            todesigname = "";
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Text = todesigname;
                    }
                    else if (getcolval.Trim() == "From Dept")
                    {
                        frmdept = Convert.ToString(ds.Tables[0].Rows[i]["from_dep_code"]);
                        string frmdeptname = d2.GetFunction("select dept_name from hrdept_master where dept_code='" + frmdept + "' and college_code='" + newcollcode + "'");
                        if (frmdeptname.Trim() == "" || frmdeptname.Trim() == "0")
                            frmdeptname = "";
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Text = frmdeptname;
                    }
                    else if (getcolval.Trim() == "To Dept")
                    {
                        todept = Convert.ToString(ds.Tables[0].Rows[i]["to_dep_code"]);
                        string todeptname = d2.GetFunction("select dept_name from hrdept_master where dept_code='" + todept + "' and college_code='" + newcollcode + "'");
                        if (todeptname.Trim() == "" || todeptname.Trim() == "0")
                            todeptname = "";
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Text = todeptname;
                    }
                    else if (getcolval.Trim() == "From Design")
                    {
                        frmdesig = Convert.ToString(ds.Tables[0].Rows[i]["from_dsg_code"]);
                        string frmdesigname = d2.GetFunction("select desig_name from desig_master where desig_code='" + frmdesig + "' and collegeCode='" + newcollcode + "'");
                        if (frmdesigname.Trim() == "" || frmdesigname.Trim() == "0")
                            frmdesigname = "";
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Text = frmdesigname;
                    }
                    else if (getcolval.Trim() == "To Design")
                    {
                        todesig = Convert.ToString(ds.Tables[0].Rows[i]["to_dsg_code"]);
                        string todesigname = d2.GetFunction("select desig_name from desig_master where desig_code='" + todesig + "' and collegeCode='" + newcollcode + "'");
                        if (todesigname.Trim() == "" || todesigname.Trim() == "0")
                            todesigname = "";
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Text = todesigname;
                    }
                    else
                    {
                        if (getcolval.Trim().ToUpper() == "APPLICATION NO" || getcolval.Trim().ToUpper() == "STAFF CODE")
                            Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].CellType = txtcell;
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]);
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                        Fpspread4.Sheets[0].Cells[Fpspread4.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                    }
                }
            }
            lbl_err.Visible = false;
            Fpspread4.Visible = true;
            rptprint.Visible = true;
            txt_excelname.Text = "";
            Fpspread4.Sheets[0].PageSize = Fpspread4.Sheets[0].RowCount;
            Fpspread4.SaveChanges();
            txtappstfapplcode.Text = "";
            txtappstfcode.Text = "";
            txtappstfname.Text = "";
        }
        else
        {
            Fpspread4.Visible = false;
            rptprint.Visible = false;
            lbl_err.Visible = true;
            lbl_err.Text = " No Records Found";
        }
    }

    protected void btn_excel_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_validation.Visible = false;
            string reportname = txt_excelname.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread4, reportname);
            }
            else
            {
                lbl_validation.Text = "Please Enter Your Report Name";
                lbl_validation.Visible = true;
                txt_excelname.Focus();
            }
        }
        catch { }
    }

    protected void btn_printmaster_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff Manager";
            string pagename = "Staff_Manager.aspx";
            Printcontrol.loadspreaddetails(Fpspread4, pagename, degreedetails);
            Printcontrol.Visible = true;
        }
        catch { }
    }

    protected void btn_excel1_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_validation1.Visible = false;
            string reportname = txt_excelname1.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread7, reportname);
            }
            else
            {
                lbl_validation1.Text = "Please Enter Your Report Name";
                lbl_validation1.Visible = true;
                txt_excelname1.Focus();
            }
        }
        catch { }
    }

    protected void btn_printmaster1_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff Manager";
            string pagename = "Staff_Manager.aspx";
            Printmaster1.loadspreaddetails(Fpspread7, pagename, degreedetails);
            Printmaster1.Visible = true;
        }
        catch { }
    }

    protected void btn_excel14_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_validation14.Visible = false;
            string reportname = txt_excelname14.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread14, reportname);
            }
            else
            {
                lbl_validation14.Text = "Please Enter Your Report Name";
                lbl_validation14.Visible = true;
                txt_excelname14.Focus();
            }
        }
        catch { }
    }

    protected void btn_printmaster14_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff Manager";
            string pagename = "Staff_Manager.aspx";
            Printmaster6.loadspreaddetails(Fpspread14, pagename, degreedetails);
            Printmaster6.Visible = true;
        }
        catch { }
    }

    protected void btn_excel16_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_validation16.Visible = false;
            string reportname = txt_excelname16.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread16, reportname);
            }
            else
            {
                lbl_validation16.Text = "Please Enter Your Report Name";
                lbl_validation16.Visible = true;
                txt_excelname16.Focus();
            }
        }
        catch { }
    }

    protected void btn_printmaster16_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff Manager";
            string pagename = "Staff_Manager.aspx";
            Printmaster8.loadspreaddetails(Fpspread16, pagename, degreedetails);
            Printmaster8.Visible = true;
        }
        catch { }
    }

    protected void btn_excel17_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_validation17.Visible = false;
            string reportname = txt_excelname17.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread17, reportname);
            }
            else
            {
                lbl_validation17.Text = "Please Enter Your Report Name";
                lbl_validation17.Visible = true;
                txt_excelname17.Focus();
            }
        }
        catch { }
    }

    protected void btn_printmaster17_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff Manager";
            string pagename = "Staff_Manager.aspx";
            Printmaster9.loadspreaddetails(Fpspread17, pagename, degreedetails);
            Printmaster9.Visible = true;
        }
        catch { }
    }

    protected void btn_excel15_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_validation15.Visible = false;
            string reportname = txt_excelname15.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread15, reportname);
            }
            else
            {
                lbl_validation15.Text = "Please Enter Your Report Name";
                lbl_validation15.Visible = true;
                txt_excelname15.Focus();
            }
        }
        catch { }
    }

    protected void btn_printmaster15_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff Manager";
            string pagename = "Staff_Manager.aspx";
            Printmaster7.loadspreaddetails(Fpspread15, pagename, degreedetails);
            Printmaster7.Visible = true;
        }
        catch { }
    }

    protected void btn_excel10_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_validation10.Visible = false;
            string reportname = txt_excelname10.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread10, reportname);
            }
            else
            {
                lbl_validation10.Text = "Please Enter Your Report Name";
                lbl_validation10.Visible = true;
                txt_excelname10.Focus();
            }
        }
        catch { }
    }

    protected void btn_printmaster10_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff Manager";
            string pagename = "Staff_Manager.aspx";
            Printmaster2.loadspreaddetails(Fpspread10, pagename, degreedetails);
            Printmaster2.Visible = true;
        }
        catch { }
    }

    protected void btn_excel5_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_validation5.Visible = false;
            string reportname = txt_excelname5.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread5, reportname);
            }
            else
            {
                lbl_validation5.Text = "Please Enter Your Report Name";
                lbl_validation5.Visible = true;
                txt_excelname5.Focus();
            }
        }
        catch { }
    }

    protected void btn_printmaster5_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff Manager";
            string pagename = "Staff_Manager.aspx";
            Printmaster3.loadspreaddetails(Fpspread5, pagename, degreedetails);
            Printmaster3.Visible = true;
        }
        catch { }
    }

    protected void btn_excel6_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_validation6.Visible = false;
            string reportname = txt_excelname6.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread6, reportname);
            }
            else
            {
                lbl_validation6.Text = "Please Enter Your Report Name";
                lbl_validation6.Visible = true;
                txt_excelname6.Focus();
            }
        }
        catch { }
    }

    protected void btn_printmaster6_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff Manager";
            string pagename = "Staff_Manager.aspx";
            Printmaster4.loadspreaddetails(Fpspread6, pagename, degreedetails);
            Printmaster4.Visible = true;
        }
        catch { }
    }

    protected void btn_excel9_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_validation9.Visible = false;
            string reportname = txt_excelname9.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread9, reportname);
            }
            else
            {
                lbl_validation9.Text = "Please Enter Your Report Name";
                lbl_validation9.Visible = true;
                txt_excelname9.Focus();
            }
        }
        catch { }
    }

    protected void btn_printmaster9_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff Manager";
            string pagename = "Staff_Manager.aspx";
            Printmaster5.loadspreaddetails(Fpspread9, pagename, degreedetails);
            Printmaster5.Visible = true;
        }
        catch { }
    }

    protected void btn_promgo_OnClick(object sender, EventArgs e)
    {
        loadcolumns(sender, e);
        string ft = txt_fdate.Text;
        string tt = txt_tdate.Text;
        string[] aa = ft.Split('/');
        DateTime dt2 = Convert.ToDateTime(aa[1] + "/" + aa[0] + "/" + aa[2]);
        string[] bb = tt.Split('/');
        DateTime dt3 = Convert.ToDateTime(bb[1] + "/" + bb[0] + "/" + bb[2]);
        Hashtable hsgetcol = new Hashtable();
        hsgetcol.Clear();

        string deptcode = "";
        string desigcode = "";
        string stafftype = "";

        deptcode = GetSelectedItemsValueAsString(cbl_dept);

        desigcode = GetSelectedItemsValueAsString(cbl_desig);

        stafftype = GetSelectedItemsValueAsString(cbl_stype);

        string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);

        string sql = "";

        sql = "select sa.appl_no,appl_id,appl_name,t.desig_code,t.dept_code,father_name,s.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,stftype,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,s.staff_code,s.staff_name,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date,CONVERT(varchar(20),smdate,103) as smdate, CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email from staff_appl_master sa,staffmaster s,stafftrans t,hrdept_master h,desig_master d where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and d.desig_code =t.desig_code and h.dept_code =t.dept_code and s.college_code =d.collegeCode and h.college_code =s.college_code and h.college_code = d.collegeCode and (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and latestrec =1 and parea='2' and s.college_code='" + newcollcode + "'";

        if (ddlsearchappstf.SelectedItem.Text == "Appl No" && txtappstfapplcode.Text.Trim() != "")
        {
            sql = sql + " and sa.appl_no='" + Convert.ToString(txtappstfapplcode.Text) + "'";
        }
        else if (ddlsearchappstf.SelectedItem.Text == "Staff Code" && txtappstfcode.Text.Trim() != "")
        {
            sql = sql + " and s.staff_code='" + Convert.ToString(txtappstfcode.Text) + "'";
        }
        else if (txtappstfname.Text.Trim() != "")
        {
            sql = sql + " and (s.staff_name='" + Convert.ToString(txtappstfname.Text) + "' or sa.appl_name='" + Convert.ToString(txtappstfname.Text) + "')";
        }
        else
        {
            if (searchbydate.Checked == true)
                sql = sql + " and smdate between'" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'";
            if (deptcode.Trim() != "")
                sql = sql + " and t.dept_code in('" + deptcode + "')";
            if (desigcode.Trim() != "")
                sql = sql + " and t.desig_code in('" + desigcode + "')";
            if (stafftype.Trim() != "")
                sql = sql + " and sa.staff_type in('','" + stafftype + "')";
        }
        sql = sql + " order by case when PrintPriority is null then 1 else 0 end";

        ds.Clear();
        ds = d2.select_method_wo_parameter(sql, "Text");
        FarPoint.Web.Spread.CheckBoxCellType chkall = new FarPoint.Web.Spread.CheckBoxCellType();
        chkall.AutoPostBack = false;
        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            Fpspread16.Sheets[0].AutoPostBack = true;
            Fpspread16.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread16.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread16.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread16.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread16.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread16.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread16.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread16.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread16.Sheets[0].RowHeader.Visible = false;
            Fpspread16.Visible = false;
            Fpspread16.Sheets[0].ColumnHeader.RowCount = 0;
            Fpspread16.Sheets[0].ColumnCount = 0;
            Fpspread16.Sheets[0].RowCount = 0;
            Fpspread16.Sheets[0].RowHeader.Visible = false;
            Fpspread16.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.Border.BorderSize = 0;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
            Fpspread16.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread16.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread16.Sheets[0].RowCount = 0;
            Fpspread16.Sheets[0].ColumnCount = 1;
            Fpspread16.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread16.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread16.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            Fpspread16.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";

            int cc = 0;
            int j = 0;
            for (j = 0; j < lstcolorder.Items.Count; j++)
            {
                cc++;
                Fpspread16.Sheets[0].ColumnCount = cc + 1;
                Fpspread16.Sheets[0].ColumnHeader.Cells[0, cc].Text = lstcolorder.Items[j].Text;
                Fpspread16.Sheets[0].ColumnHeader.Cells[0, cc].Font.Name = "Book Antiqua";
                Fpspread16.Columns[cc].Width = 200;
                if (!hsgetcol.ContainsKey(Convert.ToString(cc)))
                    hsgetcol.Add(Convert.ToString(cc), lstcolorder.Items[j].Text);
            }
            string getcolval = "";
            string applid = "";
            string graduation = "";
            string degree = "";
            string specialization = "";
            string qual = "";
            string bldgrp = "";
            string famsub = "";
            DataSet dsgetstaff = new DataSet();

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                qual = "";
                applid = Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]);
                Fpspread16.Sheets[0].RowCount++;
                Fpspread16.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                Fpspread16.Sheets[0].Cells[i, 0].Tag = Convert.ToString(ds.Tables[0].Rows[i]["appl_no"]);

                cc = 0;
                j = 0;
                for (j = 0; j < lstcolorder.Items.Count; j++)
                {
                    cc++;
                    getcolval = Convert.ToString(hsgetcol[Convert.ToString(cc)]);
                    if (getcolval.Trim() == "Qualifications")
                    {
                        string getstfdet = "select Graduation,Degree,Specialization from StaffDetails where Appl_ID='" + applid + "'";
                        dsgetstaff.Clear();
                        dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                        if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                        {
                            graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                            degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                            specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                        }
                        if (graduation == "0")
                            graduation = "";
                        if (degree == "0")
                            degree = "";
                        if (specialization == "0")
                            specialization = "";
                        if (graduation.Trim() != "")
                        {
                            if (qual == "")
                                qual = graduation;
                            else
                                qual = qual + " , " + graduation;
                        }
                        if (degree.Trim() != "")
                        {
                            if (qual == "")
                                qual = degree;
                            else
                                qual = qual + " , " + degree;
                        }
                        if (specialization.Trim() != "")
                        {
                            if (qual == "")
                                qual = specialization;
                            else
                                qual = qual + " , " + specialization;
                        }
                        Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].Text = qual;
                    }
                    else if (getcolval.Trim() == "Blood Group")
                    {
                        bldgrp = getqval(Convert.ToString(ds.Tables[0].Rows[i]["bldgrp"]));
                        if (bldgrp.Trim() == "0")
                            bldgrp = "";
                        Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].Text = bldgrp;
                    }
                    else if (getcolval.Trim() == "Familiar Subjects")
                    {
                        famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                        if (famsub.Trim() == "0")
                            famsub = "";
                        Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].Text = famsub;
                    }
                    else if (getcolval.Trim() == "From Design")
                    {
                        string getdescode = d2.GetFunction("select top 1 d.desig_name  from stafftrans s,desig_master d where d.desig_code=s.desig_code and staff_code ='" + Convert.ToString(ds.Tables[0].Rows[i]["staff_code"]) + "' and latestrec ='0' order by smdate desc");
                        if (getdescode.Trim() != "" && getdescode.Trim() != "0")
                            Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].Text = getdescode;
                        else
                            Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].Text = "";
                    }
                    else if (getcolval.Trim() == "To Design")
                    {
                        string getdesname = d2.GetFunction("select desig_name from desig_master where desig_code='" + Convert.ToString(ds.Tables[0].Rows[i]["desig_code"]) + "' and collegeCode='" + newcollcode + "'");
                        if (getdesname.Trim() != "" && getdesname.Trim() != "0")
                            Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].Text = getdesname;
                        else
                            Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].Text = "";
                    }
                    else
                    {
                        if (getcolval.Trim().ToUpper() == "APPLICATION NO" || getcolval.Trim().ToUpper() == "STAFF CODE")
                            Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].CellType = txtcell;
                        Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]);
                        Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                        Fpspread16.Sheets[0].Cells[Fpspread16.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                    }
                }
            }
            Fpspread16.Visible = true;
            Fpspread16.Sheets[0].PageSize = Fpspread16.Sheets[0].RowCount;
            Fpspread16.SaveChanges();
            rptprint.Visible = true;
            txt_excelname.Text = "";
            lbl_err.Visible = false;
            txtappstfapplcode.Text = "";
            txtappstfcode.Text = "";
            txtappstfname.Text = "";
        }
        else
        {
            Fpspread16.Visible = false;
            rptprint.Visible = false;
            lbl_err.Visible = true;
            lbl_err.Text = " No Records Found";
        }
    }

    protected void btn_incrgo_OnClick(object sender, EventArgs e)
    {
        loadcolumns(sender, e);
        string ft = txt_fdate.Text;
        string tt = txt_tdate.Text;
        string[] aa = ft.Split('/');
        DateTime dt2 = Convert.ToDateTime(aa[1] + "/" + aa[0] + "/" + aa[2]);
        string[] bb = tt.Split('/');
        DateTime dt3 = Convert.ToDateTime(bb[1] + "/" + bb[0] + "/" + bb[2]);
        Hashtable hsgetcol = new Hashtable();
        hsgetcol.Clear();

        string deptcode = "";
        string desigcode = "";
        string stafftype = "";

        deptcode = GetSelectedItemsValueAsString(cbl_dept);

        desigcode = GetSelectedItemsValueAsString(cbl_desig);

        stafftype = GetSelectedItemsValueAsString(cbl_stype);

        string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);

        string sql = "";

        sql = "select sa.appl_no,appl_id,appl_name,t.desig_code,t.dept_code,father_name,s.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,s.staff_code from staff_appl_master sa,staffmaster s,stafftrans t,hrdept_master h,desig_master d where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and d.desig_code =t.desig_code and h.dept_code =t.dept_code and s.college_code =d.collegeCode and h.college_code =s.college_code and h.college_code = d.collegeCode and (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and latestrec =1 and parea='3' and sa.college_code='" + newcollcode + "'";

        if (ddlsearchappstf.SelectedItem.Text == "Appl No" && txtappstfapplcode.Text.Trim() != "")
        {
            sql = sql + " and sa.appl_no='" + Convert.ToString(txtappstfapplcode.Text) + "'";
        }
        else if (ddlsearchappstf.SelectedItem.Text == "Staff Code" && txtappstfcode.Text.Trim() != "")
        {
            sql = sql + " and s.staff_code='" + Convert.ToString(txtappstfcode.Text) + "'";
        }
        else if (txtappstfname.Text.Trim() != "")
        {
            sql = sql + " and (s.staff_name='" + Convert.ToString(txtappstfname.Text) + "' or sa.appl_name='" + Convert.ToString(txtappstfname.Text) + "')";
        }
        else
        {
            if (searchbydate.Checked == true)
                sql = sql + " and increment_date between'" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'";
            if (deptcode.Trim() != "")
                sql = sql + " and t.dept_code in('" + deptcode + "')";
            if (desigcode.Trim() != "")
                sql = sql + " and t.desig_code in('" + desigcode + "')";
            if (stafftype.Trim() != "")
                sql = sql + " and sa.staff_type in('','" + stafftype + "')";
        }
        sql = sql + " order by case when PrintPriority is null then 1 else 0 end, PrintPriority";

        ds.Clear();
        ds = d2.select_method_wo_parameter(sql, "Text");
        FarPoint.Web.Spread.CheckBoxCellType chkall = new FarPoint.Web.Spread.CheckBoxCellType();
        chkall.AutoPostBack = false;
        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            Fpspread17.Sheets[0].AutoPostBack = true;
            Fpspread17.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread17.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread17.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread17.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread17.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread17.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread17.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread17.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread17.Sheets[0].RowHeader.Visible = false;
            Fpspread17.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.Border.BorderSize = 0;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
            Fpspread17.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread17.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread17.Sheets[0].RowCount = 0;
            Fpspread17.Sheets[0].ColumnCount = 1;
            Fpspread17.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread17.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread17.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            Fpspread17.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
            int cc = 0;
            int j = 0;
            string getcolval = "";
            string applid = "";
            string graduation = "";
            string degree = "";
            string specialization = "";
            string qual = "";
            string bldgrp = "";
            string famsub = "";
            string year = "";
            DataSet dsgetstaff = new DataSet();

            for (j = 0; j < lstcolorder.Items.Count; j++)
            {
                cc++;
                Fpspread17.Sheets[0].ColumnCount = cc + 1;
                Fpspread17.Sheets[0].ColumnHeader.Cells[0, cc].Text = lstcolorder.Items[j].Text;
                Fpspread17.Sheets[0].ColumnHeader.Cells[0, cc].Font.Name = "Book Antiqua";
                Fpspread17.Columns[cc].Width = 200;
                if (!hsgetcol.ContainsKey(Convert.ToString(cc)))
                    hsgetcol.Add(Convert.ToString(cc), lstcolorder.Items[j].Text);
            }
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                qual = "";
                applid = Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]);
                Fpspread17.Sheets[0].RowCount++;
                Fpspread17.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                Fpspread17.Sheets[0].Cells[i, 0].Tag = Convert.ToString(ds.Tables[0].Rows[i]["appl_no"]);

                cc = 0;
                j = 0;
                for (j = 0; j < lstcolorder.Items.Count; j++)
                {
                    cc++;
                    getcolval = Convert.ToString(hsgetcol[Convert.ToString(cc)]);
                    if (getcolval.Trim() == "Qualifications")
                    {
                        string getstfdet = "select Graduation,Degree,Specialization,PassYear from StaffDetails where Appl_ID='" + applid + "'";
                        dsgetstaff.Clear();
                        dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                        if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                        {
                            graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                            degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                            specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                            year = Convert.ToString(dsgetstaff.Tables[0].Rows[0]["PassYear"]);
                        }
                        if (graduation == "0")
                            graduation = "";
                        if (degree == "0")
                            degree = "";
                        if (specialization == "0")
                            specialization = "";
                        if (graduation.Trim() != "")
                        {
                            if (qual == "")
                                qual = graduation;
                            else
                                qual = qual + " , " + graduation;
                        }
                        if (degree.Trim() != "")
                        {
                            if (qual == "")
                                qual = degree;
                            else
                                qual = qual + " , " + degree;
                        }
                        if (specialization.Trim() != "")
                        {
                            if (qual == "")
                                qual = specialization;
                            else
                                qual = qual + " , " + specialization;
                        }
                        if (year.Trim() != "")
                        {
                            if (qual == "")
                                qual = year;
                            else
                                qual = qual + " , " + year;
                        }
                        Fpspread17.Sheets[0].Cells[Fpspread17.Sheets[0].RowCount - 1, cc].Text = qual;
                    }
                    else if (getcolval.Trim() == "Blood Group")
                    {
                        bldgrp = getqval(Convert.ToString(ds.Tables[0].Rows[i]["bldgrp"]));
                        if (bldgrp.Trim() == "0")
                            bldgrp = "";
                        Fpspread17.Sheets[0].Cells[Fpspread17.Sheets[0].RowCount - 1, cc].Text = bldgrp;
                    }
                    else if (getcolval.Trim() == "Familiar Subjects")
                    {
                        famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                        if (famsub.Trim() == "0")
                            famsub = "";
                        Fpspread17.Sheets[0].Cells[Fpspread17.Sheets[0].RowCount - 1, cc].Text = famsub;
                    }
                    else
                    {
                        if (getcolval.Trim().ToUpper() == "APPLICATION NO" || getcolval.Trim().ToUpper() == "STAFF CODE")
                            Fpspread17.Sheets[0].Cells[Fpspread17.Sheets[0].RowCount - 1, cc].CellType = txtcell;
                        Fpspread17.Sheets[0].Cells[Fpspread17.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]);
                        Fpspread17.Sheets[0].Cells[Fpspread17.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                        Fpspread17.Sheets[0].Cells[Fpspread17.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                    }
                }
            }
            Fpspread17.Visible = true;
            lbl_err.Visible = false;
            Fpspread17.Sheets[0].PageSize = Fpspread17.Sheets[0].RowCount;
            Fpspread17.SaveChanges();
            rptprint.Visible = true;
            txt_excelname.Text = "";
            txtappstfapplcode.Text = "";
            txtappstfcode.Text = "";
            txtappstfname.Text = "";
        }
        else
        {
            Fpspread17.Visible = false;
            rptprint.Visible = false;
            lbl_err.Visible = true;
            lbl_err.Text = " No Records Found";
        }
    }

    protected void Cell17_Click(object sender, EventArgs e)
    {
        check = true;
        Increment.Visible = true;
    }

    protected void Fpspread17_OnPreRender(object sender, EventArgs e)
    {
        try
        {
            if (check == true)
            {
                incr_alert.Visible = false;
                string activerow = "";
                string activecol = "";
                string applno = "";
                btn_incrsave.Visible = false;
                btn_incrupdate.Visible = true;
                activerow = Fpspread17.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread17.ActiveSheetView.ActiveColumn.ToString();
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

                if (activerow.Trim() != "")
                {
                    applno = Convert.ToString(Fpspread17.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                }
                string scode = d2.GetFunction("select staff_code from staffmaster where appl_no='" + applno + "' and college_code='" + collcode + "'");

                string reldate = d2.GetFunction("select CONVERT(varchar(20),relieve_date ,103) as relieve_date from staffmaster where ((resign=1 and settled=1) or Discontinue=1) and appl_no='" + applno + "' and college_code='" + collcode + "'");

                string getquery = d2.GetFunction("select allowances from stafftrans where staff_code='" + scode + "' and latestrec='1'");

                string allow = d2.GetFunction("select AllowIncDet from stafftrans where staff_code='" + scode + "' and latestrec='1'");

                string basamnt = d2.GetFunction("select BasicInc from stafftrans where staff_code='" + scode + "' and latestrec='1'");

                string inctype = d2.GetFunction("select Isincrement from stafftrans where staff_code='" + scode + "' and latestrec='1'");

                if (basamnt.Trim() != "" && basamnt.Trim() != "0" && inctype.Trim() != "" && inctype.Trim() != "0")
                {
                    if (inctype == "1")
                    {
                        cb_basic.Enabled = true;
                        cb_basic.Checked = true;
                        rdb_amt.Enabled = true;
                        rdb_percent.Enabled = false;
                        rdb_amt.Checked = true;
                        rdb_percent.Checked = false;
                        txt_amt.Enabled = true;
                        txt_percent.Enabled = false;
                        txt_amt.Text = basamnt;
                        txt_percent.Text = "";
                    }
                    if (inctype == "2")
                    {
                        cb_basic.Enabled = true;
                        cb_basic.Checked = true;
                        rdb_amt.Enabled = false;
                        rdb_percent.Enabled = true;
                        rdb_amt.Checked = false;
                        rdb_percent.Checked = true;
                        txt_amt.Enabled = false;
                        txt_percent.Enabled = true;
                        txt_amt.Text = "";
                        txt_percent.Text = basamnt;
                    }
                }
                else
                {
                    cb_basic.Checked = false;
                    rdb_amt.Enabled = false;
                    rdb_percent.Enabled = false;
                    txt_amt.Enabled = false;
                    txt_percent.Enabled = false;
                    txt_amt.Text = "";
                    txt_percent.Text = "";
                }

                string prevdate = "";
                string prevdate1 = "select CONVERT(varchar(20),increment_date,103) as increment_date from stafftrans where staff_code='" + scode + "' and latestrec='1'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(prevdate1, "Text");

                string prevdate2 = ds.Tables[0].Rows[0]["increment_date"].ToString();
                string[] ndt = prevdate2.Split('/');
                DateTime newdt = new DateTime();
                if (ndt.Length > 1)
                {
                    newdt = Convert.ToDateTime(ndt[1] + "/" + ndt[0] + "/" + ndt[2]);
                    txt_incrdate.Text = newdt.ToString("dd/MM/yyyy");
                }
                else
                {
                    txt_incrdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                }

                Fpspread2.Visible = true;
                Fpspread2.CommandBar.Visible = false;

                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                darkstyle.Font.Name = "Book Antiqua";
                darkstyle.Font.Size = FontUnit.Medium;
                darkstyle.Font.Bold = true;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                darkstyle.VerticalAlign = VerticalAlign.Middle;
                Fpspread2.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
                Fpspread2.RowHeader.Visible = false;

                FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                darkstyle1.Font.Name = "Book Antiqua";
                darkstyle1.Font.Size = FontUnit.Medium;

                Fpspread2.Sheets[0].DefaultStyle = darkstyle1;
                Fpspread2.Sheets[0].RowCount = 0;
                Fpspread2.Sheets[0].ColumnCount = 7;
                Fpspread2.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread2.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                Fpspread2.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                Fpspread2.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
                Fpspread2.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                Fpspread2.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Allowances";
                Fpspread2.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Previous Date";
                Fpspread2.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Mode";
                Fpspread2.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Current Value";
                Fpspread2.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Value";

                Fpspread2.Sheets[0].ColumnHeader.Columns[1].Width = 75;
                Fpspread2.Sheets[0].ColumnHeader.Columns[2].Width = 150;
                Fpspread2.Sheets[0].ColumnHeader.Columns[3].Width = 150;
                Fpspread2.Sheets[0].ColumnHeader.Columns[4].Width = 125;
                Fpspread2.Sheets[0].ColumnHeader.Columns[5].Width = 125;
                Fpspread2.Sheets[0].ColumnHeader.Columns[6].Width = 125;

                ItemList.Clear();
                Itemindex.Clear();

                FarPoint.Web.Spread.CheckBoxCellType chkall = new FarPoint.Web.Spread.CheckBoxCellType();
                chkall.AutoPostBack = false;

                FarPoint.Web.Spread.DoubleCellType dblcell = new FarPoint.Web.Spread.DoubleCellType();
                dblcell.MaximumValue = 100000;
                dblcell.ErrorMessage = "Allow only Numerics & Allow upto only 1 lakh!";

                FarPoint.Web.Spread.DoubleCellType dblcell1 = new FarPoint.Web.Spread.DoubleCellType();
                dblcell1.MaximumValue = 100;
                dblcell1.ErrorMessage = "Allow only Numerics & Allow upto only 100!";

                if (getquery != "" || allow != "")
                {
                    string[] split1 = getquery.Split('\\');
                    string[] alsplit = allow.Split('\\');
                    string a = "";
                    string b1 = "";
                    string b2 = "";
                    string b = "";
                    if (split1.Length > 1 || alsplit.Length > 1)
                    {
                        for (int i = 0; i < split1.Length; i++)
                        {
                            a = split1[i];
                            if (a != "" && a != null)
                            {
                                string[] split2 = a.Split(';');
                                if (split2.GetUpperBound(0) > 0)
                                {
                                    b = split2[1];
                                    b1 = split2[0];
                                    b2 = split2[2];
                                }
                                Fpspread2.Sheets[0].RowCount++;
                                Fpspread2.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                                Fpspread2.Sheets[0].Cells[i, 0].Locked = true;
                                Fpspread2.Sheets[0].Cells[i, 1].CellType = chkall;
                                Fpspread2.Sheets[0].Cells[i, 1].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[i, 2].Text = b1;
                                Fpspread2.Sheets[0].Cells[i, 2].Tag = a;
                                Fpspread2.Sheets[0].Cells[i, 2].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[i, 2].Locked = true;
                                Fpspread2.Sheets[0].Cells[i, 3].Text = newdt.ToString("dd/MM/yyyy");
                                Fpspread2.Sheets[0].Cells[i, 3].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[i, 3].Locked = true;
                                Fpspread2.Sheets[0].Cells[i, 4].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[i, 4].Value = b;
                                Fpspread2.Sheets[0].Cells[i, 4].Locked = true;
                                Fpspread2.Sheets[0].Cells[i, 5].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[i, 5].Value = b2;
                                Fpspread2.Sheets[0].Cells[i, 5].Locked = true;
                                if (b == "Amount")
                                    Fpspread2.Sheets[0].Cells[i, 6].CellType = dblcell;
                                if (b == "Percent")
                                    Fpspread2.Sheets[0].Cells[i, 6].CellType = dblcell1;
                                Fpspread2.Sheets[0].Cells[i, 6].HorizontalAlign = HorizontalAlign.Center;
                            }

                            Fpspread2.Sheets[0].PageSize = Fpspread2.Sheets[0].RowCount;
                            Fpspread2.SaveChanges();
                            lbl_alert.Visible = false;
                        }
                    }
                    if (alsplit.Length > 1 && split1.Length == 1)
                    {
                        for (int i = 0; i <= alsplit.Length; i++)
                        {
                            a = alsplit[i];
                            if (a != "" && a != null)
                            {
                                string[] split2 = a.Split(';');
                                if (split2.GetUpperBound(0) > 0)
                                {
                                    b = split2[1];
                                    b1 = split2[0];
                                    b2 = split2[2];
                                }
                                Fpspread2.Sheets[0].RowCount++;
                                Fpspread2.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                                Fpspread2.Sheets[0].Cells[i, 0].Locked = true;
                                Fpspread2.Sheets[0].Cells[i, 1].CellType = chkall;
                                Fpspread2.Sheets[0].Cells[i, 1].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[i, 2].Text = b1;
                                Fpspread2.Sheets[0].Cells[i, 2].Tag = a;
                                Fpspread2.Sheets[0].Cells[i, 2].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[i, 2].Locked = true;
                                Fpspread2.Sheets[0].Cells[i, 3].Text = newdt.ToString("dd/MM/yyyy");
                                Fpspread2.Sheets[0].Cells[i, 3].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[i, 3].Locked = true;
                                Fpspread2.Sheets[0].Cells[i, 4].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[i, 4].Value = b;
                                Fpspread2.Sheets[0].Cells[i, 4].Locked = true;
                                Fpspread2.Sheets[0].Cells[i, 5].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[i, 5].Value = b2;
                                Fpspread2.Sheets[0].Cells[i, 5].Locked = true;
                                if (b == "Amount")
                                    Fpspread2.Sheets[0].Cells[i, 6].CellType = dblcell;
                                if (b == "Percent")
                                    Fpspread2.Sheets[0].Cells[i, 6].CellType = dblcell1;
                                Fpspread2.Sheets[0].Cells[i, 6].HorizontalAlign = HorizontalAlign.Center;
                            }

                            Fpspread2.Sheets[0].PageSize = Fpspread2.Sheets[0].RowCount;
                            Fpspread2.SaveChanges();
                            lbl_alert.Visible = false;
                        }
                    }
                }
                else
                {
                    Fpspread2.Sheets[0].RowCount = 3;
                    Fpspread2.Sheets[0].Cells[0, 0].Text = Convert.ToString(1);
                    Fpspread2.Sheets[0].Cells[0, 0].Locked = true;
                    Fpspread2.Sheets[0].Cells[0, 1].CellType = chkall;
                    Fpspread2.Sheets[0].Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[0, 2].Text = "DA";
                    Fpspread2.Sheets[0].Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[0, 2].Locked = true;
                    Fpspread2.Sheets[0].Cells[0, 3].Text = DateTime.Now.ToString("dd/MM/yyyy");
                    Fpspread2.Sheets[0].Cells[0, 3].Locked = true;
                    Fpspread2.Sheets[0].Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[0, 4].Text = "Amount";
                    Fpspread2.Sheets[0].Cells[0, 4].Locked = true;
                    Fpspread2.Sheets[0].Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[0, 5].Value = 0;
                    Fpspread2.Sheets[0].Cells[0, 5].Locked = true;
                    Fpspread2.Sheets[0].Cells[0, 6].Text = "";
                    Fpspread2.Sheets[0].Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;

                    Fpspread2.Sheets[0].Cells[1, 0].Text = Convert.ToString(2);
                    Fpspread2.Sheets[0].Cells[1, 0].Locked = true;
                    Fpspread2.Sheets[0].Cells[1, 1].CellType = chkall;
                    Fpspread2.Sheets[0].Cells[1, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[1, 2].Text = "HRA";
                    Fpspread2.Sheets[0].Cells[1, 2].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[1, 2].Locked = true;
                    Fpspread2.Sheets[0].Cells[1, 3].Text = DateTime.Now.ToString("dd/MM/yyyy");
                    Fpspread2.Sheets[0].Cells[1, 3].Locked = true;
                    Fpspread2.Sheets[0].Cells[1, 4].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[1, 4].Text = "Amount";
                    Fpspread2.Sheets[0].Cells[1, 4].Locked = true;
                    Fpspread2.Sheets[0].Cells[1, 5].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[1, 5].Value = 0;
                    Fpspread2.Sheets[0].Cells[1, 5].Locked = true;
                    Fpspread2.Sheets[0].Cells[1, 6].Text = "";
                    Fpspread2.Sheets[0].Cells[1, 6].HorizontalAlign = HorizontalAlign.Center;

                    Fpspread2.Sheets[0].Cells[2, 0].Text = Convert.ToString(3);
                    Fpspread2.Sheets[0].Cells[2, 0].Locked = true;
                    Fpspread2.Sheets[0].Cells[2, 1].CellType = chkall;
                    Fpspread2.Sheets[0].Cells[2, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[2, 2].Text = "CCA";
                    Fpspread2.Sheets[0].Cells[2, 2].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[2, 2].Locked = true;
                    Fpspread2.Sheets[0].Cells[2, 3].Text = DateTime.Now.ToString("dd/MM/yyyy");
                    Fpspread2.Sheets[0].Cells[2, 3].Locked = true;
                    Fpspread2.Sheets[0].Cells[2, 4].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[2, 4].Text = "Amount";
                    Fpspread2.Sheets[0].Cells[2, 4].Locked = true;
                    Fpspread2.Sheets[0].Cells[2, 5].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread2.Sheets[0].Cells[2, 5].Value = 0;
                    Fpspread2.Sheets[0].Cells[2, 5].Locked = true;
                    Fpspread2.Sheets[0].Cells[2, 6].Text = "";
                    Fpspread2.Sheets[0].Cells[2, 6].HorizontalAlign = HorizontalAlign.Center;

                    Fpspread2.Sheets[0].PageSize = Fpspread2.Sheets[0].RowCount;
                    Fpspread2.SaveChanges();
                    lbl_alert.Visible = false;
                }
            }
        }
        catch { }
    }

    protected void btn_aprgo_OnClick(object sender, EventArgs e)
    {
        try
        {
            loadcolumns(sender, e);
            Fpspread6.Visible = true;
            string ft = txt_fdate.Text;
            string tt = txt_tdate.Text;
            string[] aa = ft.Split('/');
            DateTime dt2 = Convert.ToDateTime(aa[1] + "/" + aa[0] + "/" + aa[2]);
            string[] bb = tt.Split('/');
            DateTime dt3 = Convert.ToDateTime(bb[1] + "/" + bb[0] + "/" + bb[2]);
            Hashtable hsgetcol = new Hashtable();
            hsgetcol.Clear();

            string deptcode = "";
            string desigcode = "";
            string stafftype = "";

            deptcode = GetSelectedItemsValueAsString(cbl_dept);

            desigcode = GetSelectedItemsValueAsString(cbl_desig);

            stafftype = GetSelectedItemsValueAsString(cbl_stype);

            string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);

            sql = "select distinct sam.appl_no,appl_id,sam.appl_name,staff_name,s.staff_code,sa.AppraisalPk,AppraisalFk,CONVERT(nvarchar(20),AppraisalDate,103) as AppraisalDate,h.dept_name ,d.desig_name ,staff_type,com_mobileno,bldgrp,email,sam.mid_name,father_name,sex,Convert(nvarchar(20),date_of_birth,103) as date_of_birth,sam.adharcardno from staffmaster s,StaffAppraisalMaster sa,StaffAppraisalDetails sd,staff_appl_master sam,hrdept_master h,desig_master d where sam.appl_no=s.appl_no and s.college_code=h.college_code and s.college_code=d.collegeCode and s.staff_code =sa.staff_code and sa.AppraisalPk =sd.AppraisalFk and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code  and s.college_code='" + newcollcode + "'";

            if (ddlsearchappstf.SelectedItem.Text == "Appl No" && txtappstfapplcode.Text.Trim() != "")
            {
                sql = sql + " and sam.appl_no='" + Convert.ToString(txtappstfapplcode.Text) + "'";
            }
            else if (ddlsearchappstf.SelectedItem.Text == "Staff Code" && txtappstfcode.Text.Trim() != "")
            {
                sql = sql + " and s.staff_code='" + Convert.ToString(txtappstfcode.Text) + "'";
            }
            else if (txtappstfname.Text.Trim() != "")
            {
                sql = sql + " and (s.staff_name='" + Convert.ToString(txtappstfname.Text) + "' or sam.appl_name='" + Convert.ToString(txtappstfname.Text) + "')";
            }
            else
            {
                if (searchbydate.Checked == true)
                    sql = sql + " and AppraisalDate between '" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'";
                if (deptcode.Trim() != "")
                    sql = sql + " and sam.dept_code in('" + deptcode + "')";
                if (desigcode.Trim() != "")
                    sql = sql + " and sam.desig_code in('" + desigcode + "')";
                if (stafftype.Trim() != "")
                    sql = sql + " and staff_type in('','" + stafftype + "')";
            }

            ds.Clear();
            ds = d2.select_method_wo_parameter(sql, "Text");

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                Fpspread6.Sheets[0].AutoPostBack = true;
                Fpspread6.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread6.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread6.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                Fpspread6.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread6.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread6.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
                Fpspread6.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread6.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread6.Sheets[0].RowHeader.Visible = false;
                Fpspread6.Sheets[0].ColumnHeader.RowCount = 0;
                Fpspread6.Sheets[0].ColumnCount = 0;
                Fpspread6.Sheets[0].RowCount = 0;
                Fpspread6.Sheets[0].RowHeader.Visible = false;
                Fpspread6.CommandBar.Visible = false;

                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                darkstyle.Font.Name = "Book Antiqua";
                darkstyle.Font.Size = FontUnit.Medium;
                darkstyle.Font.Bold = true;
                darkstyle.Border.BorderSize = 0;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                darkstyle.VerticalAlign = VerticalAlign.Middle;
                darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
                Fpspread6.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                darkstyle1.Font.Name = "Book Antiqua";
                darkstyle1.Font.Size = FontUnit.Medium;

                Fpspread6.Sheets[0].DefaultStyle = darkstyle1;
                Fpspread6.Sheets[0].RowCount = 0;
                Fpspread6.Sheets[0].ColumnCount = 1;
                Fpspread6.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread6.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                Fpspread6.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                Fpspread6.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
                Fpspread6.Sheets[0].SetColumnMerge(0, FarPoint.Web.Spread.Model.MergePolicy.Always);
                int cc = 0;
                int j = 0;
                for (j = 0; j < lstcolorder.Items.Count; j++)
                {
                    cc++;

                    Fpspread6.Sheets[0].ColumnCount = cc + 1;
                    Fpspread6.Sheets[0].ColumnHeader.Cells[0, cc].Text = lstcolorder.Items[j].Text;
                    Fpspread6.Sheets[0].ColumnHeader.Cells[0, cc].Font.Name = "Book Antiqua";
                    Fpspread6.Columns[cc].Width = 200;
                    Fpspread6.Sheets[0].SetColumnMerge(cc, FarPoint.Web.Spread.Model.MergePolicy.Always);
                    if (!hsgetcol.ContainsKey(Convert.ToString(cc)))
                        hsgetcol.Add(Convert.ToString(cc), lstcolorder.Items[j].Text);
                }
                Fpspread6.Sheets[0].ColumnCount = cc + 4;
                Fpspread6.Sheets[0].ColumnHeader.Cells[0, cc + 1].Text = "Question";
                Fpspread6.Sheets[0].ColumnHeader.Cells[0, cc + 2].Text = "Answer";
                Fpspread6.Sheets[0].ColumnHeader.Cells[0, cc + 3].Text = "Remarks";

                string getcolval = "";
                string applid = "";
                string graduation = "";
                string degree = "";
                string specialization = "";
                string qual = "";
                string bldgrp = "";
                string famsub = "";
                DataSet dsgetstaff = new DataSet();

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    qual = "";
                    applid = Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]);
                    Fpspread6.Sheets[0].RowCount++;
                    Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(i + 1);
                    Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 0].Tag = ds.Tables[0].Rows[i]["appl_no"].ToString();

                    cc = 0;
                    j = 0;
                    string aprfk = "";
                    for (j = 0; j < lstcolorder.Items.Count; j++)
                    {
                        cc++;
                        getcolval = Convert.ToString(hsgetcol[Convert.ToString(cc)]);
                        if (getcolval.Trim() == "Qualifications")
                        {
                            string getstfdet = "select Graduation,Degree,Specialization from StaffDetails where Appl_ID='" + applid + "'";
                            dsgetstaff.Clear();
                            dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                            if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                            {
                                graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                                degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                                specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                            }
                            if (graduation == "0")
                                graduation = "";
                            if (degree == "0")
                                degree = "";
                            if (specialization == "0")
                                specialization = "";
                            if (graduation.Trim() != "")
                            {
                                if (qual == "")
                                    qual = graduation;
                                else
                                    qual = qual + " , " + graduation;
                            }
                            if (degree.Trim() != "")
                            {
                                if (qual == "")
                                    qual = degree;
                                else
                                    qual = qual + " , " + degree;
                            }
                            if (specialization.Trim() != "")
                            {
                                if (qual == "")
                                    qual = specialization;
                                else
                                    qual = qual + " , " + specialization;
                            }
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, cc].Text = qual;
                        }
                        else if (getcolval.Trim() == "Blood Group")
                        {
                            bldgrp = getqval(Convert.ToString(ds.Tables[0].Rows[i]["bldgrp"]));
                            if (bldgrp.Trim() == "0")
                                bldgrp = "";
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, cc].Text = bldgrp;
                        }
                        else if (getcolval.Trim() == "Familiar Subjects")
                        {
                            famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                            if (famsub.Trim() == "0")
                                famsub = "";
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, cc].Text = famsub;
                        }
                        else
                        {
                            if (getcolval.Trim().ToUpper() == "STAFF CODE")
                                Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, cc].CellType = txtcell;
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]).Trim();
                            aprfk = Convert.ToString(ds.Tables[0].Rows[i]["AppraisalFk"].ToString());
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                        }
                    }

                    string aprdetquery = "select Questioncode,anscode,remarks from StaffAppraisalDetails where AppraisalFk ='" + aprfk + "'";
                    dv = d2.select_method_wo_parameter(aprdetquery, "Text");
                    if (dv.Tables[0].Rows.Count > 0)
                    {
                        for (int ar = 0; ar < dv.Tables[0].Rows.Count; ar++)
                        {
                            int colvalue = 0;
                            if (ar != 0)
                                colvalue = Fpspread6.Sheets[0].RowCount++;
                            else
                                colvalue = Fpspread6.Sheets[0].RowCount - 1;
                            string quest = dv.Tables[0].Rows[ar]["Questioncode"].ToString();
                            string ans = dv.Tables[0].Rows[ar]["anscode"].ToString();
                            string rmks = dv.Tables[0].Rows[ar]["remarks"].ToString();
                            string question = d2.GetFunction("select TextVal from TextValTable where TextCode='" + quest + "' and college_code='" + newcollcode + "'");
                            string answer = d2.GetFunction("select TextVal from TextValTable where TextCode='" + ans + "' and college_code='" + newcollcode + "'");
                            cc = 0;
                            for (j = 0; j < lstcolorder.Items.Count; j++)
                            {
                                cc++;
                                Fpspread6.Sheets[0].Cells[colvalue, 0].Text = Convert.ToString(i + 1);
                                Fpspread6.Sheets[0].Cells[colvalue, 0].Tag = ds.Tables[0].Rows[i]["appl_no"].ToString();
                                Fpspread6.Sheets[0].Cells[colvalue, cc].Text = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]).Trim();
                            }
                            Fpspread6.Sheets[0].Cells[colvalue, cc + 1].Text = question;
                            Fpspread6.Sheets[0].Cells[colvalue, cc + 2].Text = answer;
                            Fpspread6.Sheets[0].Cells[colvalue, cc + 3].Text = rmks;
                        }
                    }
                }
                Fpspread6.Visible = true;
                lbl_err.Visible = false;
                rptprint6.Visible = true;
                txt_excelname6.Text = "";
                Fpspread6.Sheets[0].PageSize = Fpspread6.Sheets[0].RowCount;
                Fpspread6.SaveChanges();
                txtappstfapplcode.Text = "";
                txtappstfcode.Text = "";
                txtappstfname.Text = "";
            }
            else
            {
                Fpspread6.Visible = false;
                lbl_err.Visible = true;
                rptprint6.Visible = false;
                lbl_err.Text = " No Records Found";
            }
        }
        catch { }
    }

    protected void btn_loango_OnClick(object sender, EventArgs e)
    {
        Hashtable hsgetmon = new Hashtable();
        hsgetmon.Clear();
        hsgetmon.Add("1", "January");
        hsgetmon.Add("2", "February");
        hsgetmon.Add("3", "March");
        hsgetmon.Add("4", "April");
        hsgetmon.Add("5", "May");
        hsgetmon.Add("6", "June");
        hsgetmon.Add("7", "July");
        hsgetmon.Add("8", "August");
        hsgetmon.Add("9", "September");
        hsgetmon.Add("10", "October");
        hsgetmon.Add("11", "November");
        hsgetmon.Add("12", "December");

        loadcolumns(sender, e);
        string ft = txt_fdate.Text;
        string tt = txt_tdate.Text;
        string[] aa = ft.Split('/');
        DateTime dt2 = Convert.ToDateTime(aa[1] + "/" + aa[0] + "/" + aa[2]);
        string[] bb = tt.Split('/');
        DateTime dt3 = Convert.ToDateTime(bb[1] + "/" + bb[0] + "/" + bb[2]);
        string scode = txt_scode.Text;
        string sname = txt_sname.Text;
        string policyno = txt_policyno.Text;
        string from = "";
        Hashtable hsgetcol = new Hashtable();
        hsgetcol.Clear();

        string deptcode = "";
        string desigcode = "";
        string stafftype = "";

        deptcode = GetSelectedItemsValueAsString(cbl_dept);

        desigcode = GetSelectedItemsValueAsString(cbl_desig);

        stafftype = GetSelectedItemsValueAsString(cbl_stype);

        if (rdb_bank.Checked == true)
            from = "0";
        if (rdb_college.Checked == true)
            from = "1";
        string type = "";
        if (rdb_loan.Checked == true)
            type = "0";
        if (rdb_policy.Checked == true)
            type = "1";
        string status = ddl_status.SelectedItem.Text;
        string sts = "";
        if (status == "All")
            sts = "0','1";
        if (status == "Active")
            sts = "1";
        if (status == "Close")
            sts = "0";

        string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);
        string sql = "";
        if (rdb_loan.Checked == true) /* deptcode added in query by poomalar 13.10.17*/
        {
            if (txt_scode.Text != "")
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth,IsClose from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and ld.staff_code='" + scode + "' and sa.college_code='" + newcollcode + "'  and sam.dept_code in('" + deptcode + "')";
            }
            else if (txt_sname.Text != "")
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth,IsClose,IsActive from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and staff_name='" + sname + "' and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";
                if (ddl_status.SelectedItem.Text == "Active")
                {
                    sql = sql + " and IsActive=1 and IsClose=0";

                }
                else if (ddl_status.SelectedItem.Text == "Close")
                {
                    sql = sql + " and (( IsActive=1 and IsClose=1)or ( IsActive=0 and IsClose=1))";

                }
            }
            else if (txt_policyno.Text != "")
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and PolicyNo='" + policyno + "' and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";
            }
            else if (searchbydate.Checked == true)
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and LoanDate between'" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'  and LoanType='" + type + "' and LoanFrom='" + from + "' and IsActive in('" + sts + "') and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";
            }
            else if (ddl_status.SelectedIndex != -1)
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,IsClose,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and LoanType='" + type + "' and LoanFrom='" + from + "' and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";

                if (ddl_status.SelectedItem.Text == "Active")
                {
                    sql = sql + " and IsActive=1 and IsClose=0";

                }
                else if (ddl_status.SelectedItem.Text == "Closed")
                {
                    sql = sql + " and (( IsActive=1 and IsClose=1)or ( IsActive=0 and IsClose=1))";

                }
            }
            else
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and LoanType='" + type + "' and LoanFrom='" + from + "' and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";
            }
        }
        if (rdb_policy.Checked == true)
        {
            if (txt_scode.Text != "")
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and ld.staff_code='" + scode + "' and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";
            }
            else if (txt_sname.Text != "")
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and staff_name='" + sname + "' and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";
            }
            else if (txt_policyno.Text != "")
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and PolicyNo='" + policyno + "' and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";
            }
            else if (searchbydate.Checked == true)
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and PolicyDate between'" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "' and LoanType='" + type + "' and LoanFrom='" + from + "' and IsActive in('" + sts + "') and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";
            }
            else if (ddl_status.SelectedIndex != -1)
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and LoanType='" + type + "' and LoanFrom='" + from + "' and IsActive in('" + sts + "') and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";
            }
            else
            {
                sql = "select sa.appl_no,appl_name,sam.desig_code,sam.dept_code,father_name,sa.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email,ld.staff_code,staff_name,LoanName,LoanAmount,CONVERT(varchar(20),LoanDate,103) as LoanDate,ld.LoanCode,PolicyName,PolicyAmt,CONVERT(varchar(20),PolicyDate,103) as PolicyDate,ld.Remarks,DedFromMonth from StaffLoanDet ld,staffmaster sa,staff_appl_master sam,hrdept_master h,desig_master d where sa.college_code=h.college_code and  sa.college_code = d.collegeCode and ld.Staff_Code=sa.staff_code and sa.appl_no=sam.appl_no and sam.dept_code=h.dept_code and sam.desig_code=d.desig_code and LoanType='" + type + "' and LoanFrom='" + from + "' and sa.college_code='" + newcollcode + "' and sam.dept_code in('" + deptcode + "')";
            }
        }

        ds.Clear();
        ds = d2.select_method_wo_parameter(sql, "Text");
        FarPoint.Web.Spread.CheckBoxCellType chkall = new FarPoint.Web.Spread.CheckBoxCellType();
        chkall.AutoPostBack = false;

        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            string getcolval = "";
            string applid = "";
            string graduation = "";
            string degree = "";
            string specialization = "";
            string qual = "";
            string bldgrp = "";
            string famsub = "";
            string loanname = "";
            string policyname = "";
            string loanmonth = "";
            DataSet dsgetstaff = new DataSet();

            Fpspread9.Sheets[0].AutoPostBack = true;
            Fpspread9.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread9.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread9.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread9.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread9.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread9.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread9.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread9.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread9.Sheets[0].RowHeader.Visible = false;
            Fpspread9.Visible = false;
            Fpspread9.Sheets[0].ColumnHeader.RowCount = 0;
            Fpspread9.Sheets[0].ColumnCount = 0;
            Fpspread9.Sheets[0].RowCount = 0;
            Fpspread9.Sheets[0].RowHeader.Visible = false;
            Fpspread9.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.Border.BorderSize = 0;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
            Fpspread9.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread9.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread9.Sheets[0].RowCount = 0;
            Fpspread9.Sheets[0].ColumnCount = 1;
            Fpspread9.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread9.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread9.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            Fpspread9.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";

            int cc = 0;
            int j = 0;
            for (j = 0; j < lstcolorder.Items.Count; j++)
            {
                cc++;
                Fpspread9.Sheets[0].ColumnCount = cc + 1;
                Fpspread9.Sheets[0].ColumnHeader.Cells[0, cc].Text = lstcolorder.Items[j].Text;
                Fpspread9.Sheets[0].ColumnHeader.Cells[0, cc].Font.Name = "Book Antiqua";
                Fpspread9.Columns[cc].Width = 200;

                if (!hsgetcol.ContainsKey(Convert.ToString(cc)))
                    hsgetcol.Add(Convert.ToString(cc), lstcolorder.Items[j].Text);
            }
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                string checking_closed = string.Empty;
                if (ddl_status.SelectedIndex != -1)
                {
                    checking_closed = Convert.ToString(ds.Tables[0].Rows[i]["IsClose"]);
                }

                Fpspread9.Sheets[0].RowCount++;
                if (checking_closed == "True" || checking_closed == "1")
                {

                    Fpspread9.Sheets[0].Cells[i, 0].BackColor = ColorTranslator.FromHtml("#27AE60 ");
                }

                Fpspread9.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                Fpspread9.Sheets[0].Cells[i, 0].Tag = Convert.ToString(ds.Tables[0].Rows[i]["appl_no"]);
                Fpspread9.Sheets[0].Cells[i, 0].Note = Convert.ToString(ds.Tables[0].Rows[i]["LoanCode"]);



                cc = 0;
                j = 0;
                for (j = 0; j < lstcolorder.Items.Count; j++)
                {
                    cc++;
                    getcolval = Convert.ToString(hsgetcol[Convert.ToString(cc)]);
                    if (getcolval.Trim() == "Qualifications")
                    {
                        string getstfdet = "select Graduation,Degree,Specialization from StaffDetails where Appl_ID='" + applid + "'";
                        dsgetstaff.Clear();
                        dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                        if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                        {
                            graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                            degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                            specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                        }
                        if (graduation == "0")
                            graduation = "";
                        if (degree == "0")
                            degree = "";
                        if (specialization == "0")
                            specialization = "";
                        if (graduation.Trim() != "")
                        {
                            if (qual == "")
                                qual = graduation;
                            else
                                qual = qual + " , " + graduation;
                        }
                        if (degree.Trim() != "")
                        {
                            if (qual == "")
                                qual = degree;
                            else
                                qual = qual + " , " + degree;
                        }
                        if (specialization.Trim() != "")
                        {
                            if (qual == "")
                                qual = specialization;
                            else
                                qual = qual + " , " + specialization;
                        }
                        if (checking_closed == "True" || checking_closed == "1")
                        {

                            Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].BackColor = ColorTranslator.FromHtml("#27AE60 ");
                        }

                        Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].Text = qual;
                    }
                    else if (getcolval.Trim() == "Blood Group")
                    {
                        bldgrp = getqval(Convert.ToString(ds.Tables[0].Rows[i]["bldgrp"]));
                        if (bldgrp.Trim() == "0")
                            bldgrp = "";
                        if (checking_closed == "True" || checking_closed == "1")
                        {

                            Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].BackColor = ColorTranslator.FromHtml("#27AE60 ");
                        }

                        Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].Text = bldgrp;
                    }
                    else if (getcolval.Trim() == "Familiar Subjects")
                    {
                        famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                        if (famsub.Trim() == "0")
                            famsub = "";

                        if (checking_closed == "True" || checking_closed == "1")
                        {

                            Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].BackColor = ColorTranslator.FromHtml("#27AE60 ");
                        }

                        Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].Text = famsub;
                    }
                    else if (getcolval.Trim() == "Loan Name")
                    {
                        loanname = d2.GetFunction("select TextVal from TextValTable where TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["LoanName"]) + "'");
                        if (loanname.Trim() == "" && loanname.Trim() == "0")
                            loanname = "";
                        if (checking_closed == "True" || checking_closed == "1")
                        {

                            Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].BackColor = ColorTranslator.FromHtml("#27AE60 ");
                        }

                        Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].Text = loanname;
                    }
                    else if (getcolval.Trim() == "Policy Name")
                    {
                        policyname = d2.GetFunction("select TextVal from TextValTable where TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["PolicyName"]) + "'");
                        if (policyname.Trim() == "" && policyname.Trim() == "0")
                            policyname = "";
                        if (checking_closed == "True" || checking_closed == "1")
                        {

                            Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].BackColor = ColorTranslator.FromHtml("#27AE60 ");
                        }

                        Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].Text = policyname;
                    }
                    else if (getcolval.Trim() == "Loan Month")
                    {
                        loanmonth = Convert.ToString(ds.Tables[0].Rows[i]["DedFromMonth"]);
                        if (loanmonth.Trim() != "")
                        {
                            string getmon = Convert.ToString(hsgetmon[loanmonth]);
                            if (checking_closed == "True" || checking_closed == "1")
                            {

                                Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].BackColor = ColorTranslator.FromHtml("#27AE60 ");
                            }

                            Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].Text = getmon;
                        }
                        else
                        {
                            if (checking_closed == "True" || checking_closed == "1")
                            {

                                Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].BackColor = ColorTranslator.FromHtml("#27AE60 ");
                            }

                            Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].Text = "";
                        }
                    }
                    else
                    {
                        if (getcolval.Trim().ToUpper() == "STAFF CODE" || getcolval.Trim().ToUpper() == "APPLICATION NO")
                            Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].CellType = txtcell;

                        if (checking_closed == "True" || checking_closed == "1")//delsi0504
                        {

                            Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].BackColor = ColorTranslator.FromHtml("#27AE60 ");
                        }

                        Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]);
                        Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                        Fpspread9.Sheets[0].Cells[Fpspread9.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                    }
                }
            }
            Fpspread9.Visible = true;
            Fpspread9.Sheets[0].PageSize = Fpspread9.Sheets[0].RowCount;
            Fpspread9.SaveChanges();
            rptprint9.Visible = true;
            txt_excelname9.Text = "";
            lbl_err.Visible = false;
            txtappstfapplcode.Text = "";
            txtappstfcode.Text = "";
            txtappstfname.Text = "";
        }
        else
        {
            Fpspread9.Visible = false;
            rptprint9.Visible = false;
            lbl_err.Visible = true;
            lbl_err.Text = " No Records Found";
        }
    }

    protected void btn_relgo_OnClick(object sender, EventArgs e)
    {
        loadcolumns(sender, e);
        string deptcode = "";
        string desigcode = "";
        string stafftype = "";
        Hashtable hsgetcol = new Hashtable();
        hsgetcol.Clear();

        deptcode = GetSelectedItemsValueAsString(cbl_dept);

        desigcode = GetSelectedItemsValueAsString(cbl_desig);

        stafftype = GetSelectedItemsValueAsString(cbl_stype);

        string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);

        Fpspread5.Visible = true;
        string ft = txt_fdate.Text;
        string tt = txt_tdate.Text;
        string[] aa = ft.Split('/');
        DateTime dt2 = Convert.ToDateTime(aa[1] + "/" + aa[0] + "/" + aa[2]);
        string[] bb = tt.Split('/');
        DateTime dt3 = Convert.ToDateTime(bb[1] + "/" + bb[0] + "/" + bb[2]);//staff_type

        sql = "select sa.appl_no,appl_id,appl_name,t.desig_code,t.dept_code,father_name,s.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,stftype,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,s.staff_name,s.staff_code,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date,CONVERT(varchar(20),relieve_date,103) as  relieve_date,Convert(varchar(10),Discontinue_Date,103) as Discontinue_Date,sa.adharcardno,subjects,qualification,email,s.college_code from staff_appl_master sa,staffmaster s,stafftrans t,hrdept_master h,desig_master d where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and d.desig_code =t.desig_code and h.dept_code =t.dept_code and s.college_code =d.collegeCode and h.college_code =s.college_code and h.college_code = d.collegeCode and latestrec=1 and s.college_code='" + newcollcode + "'";

        if (ddlsearchappstf.SelectedItem.Text == "Appl No" && txtappstfapplcode.Text.Trim() != "")
        {
            sql = sql + " and sa.appl_no='" + Convert.ToString(txtappstfapplcode.Text) + "'";
        }
        else if (ddlsearchappstf.SelectedItem.Text == "Staff Code" && txtappstfcode.Text.Trim() != "")
        {
            sql = sql + " and s.staff_code='" + Convert.ToString(txtappstfcode.Text) + "'";
        }
        else if (txtappstfname.Text.Trim() != "")
        {
            sql = sql + " and (s.staff_name='" + Convert.ToString(txtappstfname.Text) + "' or sa.appl_name='" + Convert.ToString(txtappstfname.Text) + "')";
        }
        else
        {
            if (searchbydate.Checked == true)
            {
                if (cb_relieve.Checked == true && cb_disc.Checked == true)
                    sql = sql + "  and (relieve_date between '" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "' or (Discontinue_Date between '" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'))";
                else if (cb_relieve.Checked == true && cb_disc.Checked == false)
                    sql = sql + " and relieve_date between '" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'";
                else if (cb_relieve.Checked == false && cb_disc.Checked == true)
                    sql = sql + " and Discontinue_Date between '" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'";
                else
                    sql = sql + "  and (relieve_date between '" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "' or (Discontinue_Date between '" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'))";
            }
            else
            {
                if (cb_relieve.Checked == true && cb_disc.Checked == true)
                    sql = sql + " and ((resign=1 and settled=1) or Discontinue=1)";
                else if (cb_relieve.Checked == true && cb_disc.Checked == false)
                    sql = sql + " and (resign=1 and settled=1)";
                else if (cb_relieve.Checked == false && cb_disc.Checked == true)
                    sql = sql + " and Discontinue=1";
                else
                    sql = sql + " and ((resign=1 and settled=1) or Discontinue=1)";
            }
            if (deptcode.Trim() != "")
                sql = sql + " and t.dept_code in('" + deptcode + "')";
            if (desigcode.Trim() != "")
                sql = sql + " and t.desig_code in('" + desigcode + "')";
            if (stafftype.Trim() != "")
                sql = sql + " and t.stftype in('','" + stafftype + "')";
        }

        ds.Clear();
        ds = d2.select_method_wo_parameter(sql, "Text");

        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            Fpspread5.Sheets[0].AutoPostBack = true;
            Fpspread5.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread5.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread5.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread5.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread5.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread5.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread5.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread5.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread5.Sheets[0].RowHeader.Visible = false;
            Fpspread5.Visible = false;
            Fpspread5.Sheets[0].ColumnHeader.RowCount = 0;
            Fpspread5.Sheets[0].ColumnCount = 0;
            Fpspread5.Sheets[0].RowCount = 0;
            Fpspread5.Sheets[0].RowHeader.Visible = false;
            Fpspread5.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.Border.BorderSize = 0;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
            Fpspread5.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread5.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread5.Sheets[0].RowCount = 0;
            Fpspread5.Sheets[0].ColumnCount = 1;
            Fpspread5.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread5.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread5.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            Fpspread5.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";

            int cc = 0;
            int j = 0;
            for (j = 0; j < lstcolorder.Items.Count; j++)
            {
                cc++;
                Fpspread5.Sheets[0].ColumnCount = cc + 1;
                Fpspread5.Sheets[0].ColumnHeader.Cells[0, cc].Text = lstcolorder.Items[j].Text;
                Fpspread5.Sheets[0].ColumnHeader.Cells[0, cc].Font.Name = "Book Antiqua";
                Fpspread5.Columns[cc].Width = 200;
                if (!hsgetcol.ContainsKey(Convert.ToString(cc)))
                    hsgetcol.Add(Convert.ToString(cc), lstcolorder.Items[j].Text);
            }

            string getcolval = "";
            string applid = "";
            string graduation = "";
            string degree = "";
            string specialization = "";
            string qual = "";
            string bldgrp = "";
            string famsub = "";
            DataSet dsgetstaff = new DataSet();

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                qual = "";
                applid = Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]);
                Fpspread5.Sheets[0].RowCount++;
                Fpspread5.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                Fpspread5.Sheets[0].Cells[i, 0].Tag = ds.Tables[0].Rows[i]["appl_no"].ToString();
                Fpspread5.Sheets[0].Cells[i, 0].Note = ds.Tables[0].Rows[i]["college_code"].ToString();

                cc = 0;
                j = 0;
                for (j = 0; j < lstcolorder.Items.Count; j++)
                {
                    cc++;
                    getcolval = Convert.ToString(hsgetcol[Convert.ToString(cc)]);
                    if (getcolval.Trim() == "Qualifications")
                    {
                        string getstfdet = "select Graduation,Degree,Specialization from StaffDetails where Appl_ID='" + applid + "'";
                        dsgetstaff.Clear();
                        dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                        if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                        {
                            graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                            degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                            specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                        }
                        if (graduation == "0")
                            graduation = "";
                        if (degree == "0")
                            degree = "";
                        if (specialization == "0")
                            specialization = "";
                        if (graduation.Trim() != "")
                        {
                            if (qual == "")
                                qual = graduation;
                            else
                                qual = qual + " , " + graduation;
                        }
                        if (degree.Trim() != "")
                        {
                            if (qual == "")
                                qual = degree;
                            else
                                qual = qual + " , " + degree;
                        }
                        if (specialization.Trim() != "")
                        {
                            if (qual == "")
                                qual = specialization;
                            else
                                qual = qual + " , " + specialization;
                        }
                        Fpspread5.Sheets[0].Cells[Fpspread5.Sheets[0].RowCount - 1, cc].Text = qual;
                    }
                    else if (getcolval.Trim() == "Blood Group")
                    {
                        bldgrp = getqval(Convert.ToString(ds.Tables[0].Rows[i]["bldgrp"]));
                        if (bldgrp.Trim() == "0")
                            bldgrp = "";
                        Fpspread5.Sheets[0].Cells[Fpspread5.Sheets[0].RowCount - 1, cc].Text = bldgrp;
                    }
                    else if (getcolval.Trim() == "Familiar Subjects")
                    {
                        famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                        if (famsub.Trim() == "0")
                            famsub = "";
                        Fpspread5.Sheets[0].Cells[Fpspread5.Sheets[0].RowCount - 1, cc].Text = famsub;
                    }
                    else
                    {
                        if (getcolval.Trim().ToUpper() == "STAFF CODE" || getcolval.Trim().ToUpper() == "APPLICATION NO")
                            Fpspread5.Sheets[0].Cells[Fpspread5.Sheets[0].RowCount - 1, cc].CellType = txtcell;

                        string textval = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]);
                        if (textval == "")
                        {
                            textval = "-";
                        }
                        Fpspread5.Sheets[0].Cells[Fpspread5.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(textval);

                        Fpspread5.Sheets[0].Cells[Fpspread5.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                        Fpspread5.Sheets[0].Cells[Fpspread5.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                    }
                }
            }
            lbl_err.Visible = false;
            rptprint5.Visible = true;
            txt_excelname5.Text = "";
            Fpspread5.Visible = true;
            Fpspread5.Sheets[0].PageSize = Fpspread5.Sheets[0].RowCount;
            Fpspread5.SaveChanges();
            txtappstfapplcode.Text = "";
            txtappstfcode.Text = "";
            txtappstfname.Text = "";
        }
        else
        {
            Fpspread5.Visible = false;
            lbl_err.Visible = true;
            rptprint5.Visible = false;
            lbl_err.Text = " No Records Found";
        }
    }

    private string getqval(string textcode)
    {
        string txtval = "";
        string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);
        try
        {
            txtval = d2.GetFunction("select TextVal from TextValTable where TextCode='" + textcode + "' and college_code='" + newcollcode + "'");
        }
        catch { }
        return txtval;
    }

    // Added By Jeyaprakash //
    public void bindaddstatus()
    {
        cbladdstatus.Items.Clear();
        cbladdstatus.Items.Add(new ListItem("Applied", "interviewstatus='applied'"));
        cbladdstatus.Items.Add(new ListItem("Selected", "interviewstatus='Selected'"));
        cbladdstatus.Items.Add(new ListItem("Waiting", "interviewstatus='Waiting'"));
        cbladdstatus.Items.Add(new ListItem("Rejected", "interviewstatus='Rejected'"));
        cbladdstatus.Items.Add(new ListItem("Appointed", "(interviewstatus='appointed' and (resign='0' and settled='0' and (Discontinue='0' or Discontinue is null)))"));
        cbladdstatus.Items.Add(new ListItem("Relieved", " (resign='1' and settled='1' or Discontinue='1')"));
        cbladdstatus.DataBind();

        for (int ik = 0; ik < cbladdstatus.Items.Count; ik++)
        {
            cbladdstatus.Items[ik].Selected = true;
        }
        cbaddstatus.Checked = true;
        txtaddstatus.Text = "Status(" + cbladdstatus.Items.Count + ")";
    }

    protected void cbaddstatus_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cbaddstatus, cbladdstatus, txtaddstatus, "Status");
    }

    protected void cbladdstatus_SelectedIndexChange(object sender, EventArgs e)
    {
        chklstchange(cbaddstatus, cbladdstatus, txtaddstatus, "Status");
    }

    protected void bindsearchstapp()
    {
        ddlsearchappstf.Items.Clear();
        ddlsearchappstf.Items.Add(new ListItem("Appl No", "0"));
        ddlsearchappstf.Items.Add(new ListItem("Staff Code", "1"));
        ddlsearchappstf.DataBind();
    }

    protected void bindsearchstapp1()
    {
        ddlsearchappstf.Items.Clear();
        ddlsearchappstf.Items.Add(new ListItem("Appl No", "0"));
        ddlsearchappstf.DataBind();
    }

    protected void bindexpcert()
    {
        try
        {
            ds.Clear();
            ddl_cname.Items.Clear();
            string selq = "select TextVal,TextCode from TextValTable where TextCriteria='ExpCe' and college_code='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' and TextVal<>'' and TextVal is not null";
            ds = d2.select_method_wo_parameter(selq, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddl_cname.DataSource = ds;
                ddl_cname.DataTextField = "TextVal";
                ddl_cname.DataValueField = "TextCode";
                ddl_cname.DataBind();
                ddl_cname.Items.Insert(0, "Select");
                ddl_cname.Items.Insert(ddl_cname.Items.Count, "Others");
            }
            else
            {
                ddl_cname.Items.Insert(0, "Select");
                ddl_cname.Items.Insert(ddl_cname.Items.Count, "Others");
            }
        }
        catch { }
    }

    protected void bindcertdegree()
    {
        try
        {
            ds.Clear();
            ddl_deg.Items.Clear();
            string selq = "select TextVal,TextCode from TextValTable where TextCriteria='DegCe' and college_code='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' and TextVal<>'' and TextVal is not null";
            ds = d2.select_method_wo_parameter(selq, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddl_deg.DataSource = ds;
                ddl_deg.DataTextField = "TextVal";
                ddl_deg.DataValueField = "TextCode";
                ddl_deg.DataBind();
                ddl_deg.Items.Insert(0, "Select");
                ddl_deg.Items.Insert(ddl_deg.Items.Count, "Others");
            }
            else
            {
                ddl_deg.Items.Insert(0, "Select");
                ddl_deg.Items.Insert(ddl_deg.Items.Count, "Others");
            }
        }
        catch { }
    }

    protected void bindcertname()
    {
        try
        {
            ds.Clear();
            ddl_certname.Items.Clear();
            string selq = "select TextVal,TextCode from TextValTable where TextCriteria='Cert' and college_code='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' and TextVal<>'' and TextVal is not null";
            ds = d2.select_method_wo_parameter(selq, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddl_certname.DataSource = ds;
                ddl_certname.DataTextField = "TextVal";
                ddl_certname.DataValueField = "TextCode";
                ddl_certname.DataBind();
                ddl_certname.Items.Insert(0, "Select");
                ddl_certname.Items.Insert(ddl_certname.Items.Count, "Others");
            }
            else
            {
                ddl_certname.Items.Insert(0, "Select");
                ddl_certname.Items.Insert(ddl_certname.Items.Count, "Others");
            }
        }
        catch { }
    }

    protected void ddlsearchappstf_change(object sender, EventArgs e)
    {
        if (ddlsearchappstf.SelectedItem.Text == "Appl No")
        {
            txtappstfapplcode.Visible = true;
            txtappstfcode.Visible = false;
        }
        if (ddlsearchappstf.SelectedItem.Text == "Staff Code")
        {
            txtappstfcode.Visible = true;
            txtappstfapplcode.Visible = false;
        }
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        txtappstfname.Text = "";
    }

    // Ended By Jeyaprakash  //

    protected void btn_appgo_Click(object sender, EventArgs e)
    {
        string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);
        try
        {
            loadcolumns(sender, e);
            string deptname = "";
            lbl_err.Text = "";
            string designame = "";
            Hashtable hsgetcol = new Hashtable();
            hsgetcol.Clear();

            string stafftype = "";
            string intviewstat = "";
            string resignstr = "";
            bool chkstr = false;
            string ft = txt_fdate.Text;
            string tt = txt_tdate.Text;
            string[] aa = ft.Split('/');
            DateTime dt2 = Convert.ToDateTime(aa[1] + "/" + aa[0] + "/" + aa[2]);
            string[] bb = tt.Split('/');
            DateTime dt3 = Convert.ToDateTime(bb[1] + "/" + bb[0] + "/" + bb[2]);
            int chkcount = 0;

            deptname = GetSelectedItemsValueAsString(cbl_dept);

            designame = GetSelectedItemsValueAsString(cbl_desig);

            stafftype = GetSelectedItemsValueAsString(cbl_stype);

            for (int ik = 0; ik < cbladdstatus.Items.Count; ik++)
            {
                if (cbladdstatus.Items[ik].Selected == true)
                {
                    chkcount++;
                    if (cbladdstatus.Items[ik].Text != "Relieved")
                    {
                        if (intviewstat.Trim() == "")
                            intviewstat = "(" + Convert.ToString(cbladdstatus.Items[ik].Value);
                        else
                            intviewstat = intviewstat + " or " + Convert.ToString(cbladdstatus.Items[ik].Value);
                    }
                    else
                    {
                        if (chkstr == false)
                        {
                            chkstr = true;
                            if (resignstr.Trim() == "")
                                resignstr = Convert.ToString(cbladdstatus.Items[ik].Value);
                        }
                    }
                }
            }

            if (chkcount == cbladdstatus.Items.Count)
            {
                intviewstat = "";
                resignstr = "";
            }

            string sql = "";

            sql = "select staff_appl_master.appl_no,appl_name,staff_appl_master.desig_code,staff_appl_master.dept_code,father_name,staff_appl_master.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,Desig_Master.desig_name,staff_appl_master.dept_name,yofexp,bldgrp,subjects,CONVERT(varchar(20),interviewdate,103) as interviewdate,interviewstatus,com_mobileno,qualification,email,appl_id,staffmaster.staff_code,staffmaster.resign,staffmaster.settled,staffmaster.Discontinue from staff_appl_master inner join Desig_Master on Desig_Master.desig_code = staff_appl_master.desig_code and desig_master.collegecode = staff_appl_master.college_code inner join hrdept_master on hrdept_master.dept_code = staff_appl_master.dept_code and hrdept_master.college_code = staff_appl_master.college_code left join StaffMaster on StaffMaster.appl_no = staff_appl_master.appl_no and StaffMaster.college_code = staff_appl_master.college_code where staff_appl_master.college_code='" + newcollcode + "' and staff_appl_master.college_code ='" + newcollcode + "' and desig_master.collegecode = '" + newcollcode + "'";
            string staffcheck = Convert.ToString(ViewState["isstaffcheck"]);//delsi2205
            if (staffcheck.ToUpper() == "TRUE" || staffcheck == "1")
            {

                string stfCode = d2.GetFunction("select staff_code from usermaster where User_code='" + usercode + "'");
                if (stfCode != "0" || stfCode != "")
                {
                    string applnumb = d2.GetFunction("select appl_no from staffmaster where staff_code='" + stfCode + "'");
                    sql = sql + "  and staff_appl_master.appl_no='" + applnumb + "'";
                }
            }
            else
            {
                if (ddlsearchappstf.SelectedItem.Text == "Appl No" && txtappstfapplcode.Text.Trim() != "")
                {
                    sql = sql + " and staff_appl_master.appl_no='" + Convert.ToString(txtappstfapplcode.Text) + "'";
                }
                else if (ddlsearchappstf.SelectedItem.Text == "Staff Code" && txtappstfcode.Text.Trim() != "")
                {
                    sql = sql + " and staffmaster.staff_code='" + Convert.ToString(txtappstfcode.Text) + "'";
                }
                else if (txtappstfname.Text.Trim() != "")
                {
                    sql = sql + " and (staffmaster.staff_name='" + Convert.ToString(txtappstfname.Text) + "' or staff_appl_master.appl_name='" + Convert.ToString(txtappstfname.Text) + "')";
                }
                else
                {
                    if (searchbydate.Checked == true)
                        sql = sql + " and staff_appl_master.dateofapply between'" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'";
                    if (deptname.Trim() != "")
                        sql = sql + " and staff_appl_master.dept_code in('" + deptname + "')";
                    if (designame.Trim() != "")
                        sql = sql + " and staff_appl_master.desig_code in('" + designame + "')";
                    if (stafftype.Trim() != "")
                        sql = sql + " and staff_type in('" + stafftype + "')";

                    if (intviewstat.Trim() != "")
                    {
                        if (resignstr.Trim() == "")
                            sql = sql + " and " + intviewstat + ")";
                        else
                            sql = sql + " and " + intviewstat + "";
                    }
                    if (resignstr.Trim() != "")
                    {
                        if (intviewstat.Trim() == "")
                            sql = sql + " and" + resignstr + "";
                        else
                            sql = sql + " or" + resignstr + ")";
                    }
                }
            }
            sql = sql + " order by len(staff_appl_master.appl_no),staff_appl_master.appl_no";

            ds.Clear();
            ds = d2.select_method_wo_parameter(sql, "Text");
            FarPoint.Web.Spread.CheckBoxCellType chkall = new FarPoint.Web.Spread.CheckBoxCellType();
            chkall.AutoPostBack = false;
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                int appliedcount = 0;
                int selectedcount = 0;
                int waitingcount = 0;
                int rejectedcount = 0;
                int appointcount = 0;
                int relievedcount = 0;

                Fpspread7.Sheets[0].AutoPostBack = true;
                Fpspread7.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread7.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread7.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                Fpspread7.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread7.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread7.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
                Fpspread7.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread7.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread7.Sheets[0].RowHeader.Visible = false;
                Fpspread7.Visible = false;
                Fpspread7.Sheets[0].ColumnHeader.RowCount = 0;
                Fpspread7.Sheets[0].ColumnCount = 0;
                Fpspread7.Sheets[0].RowCount = 0;
                Fpspread7.Sheets[0].RowHeader.Visible = false;
                Fpspread7.CommandBar.Visible = false;

                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                darkstyle.Font.Name = "Book Antiqua";
                darkstyle.Font.Size = FontUnit.Medium;
                darkstyle.Font.Bold = true;
                darkstyle.Border.BorderSize = 0;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                darkstyle.VerticalAlign = VerticalAlign.Middle;
                darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
                Fpspread7.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                darkstyle1.Font.Name = "Book Antiqua";
                darkstyle1.Font.Size = FontUnit.Medium;

                Fpspread7.Sheets[0].DefaultStyle = darkstyle1;
                Fpspread7.Sheets[0].RowCount = 0;
                Fpspread7.Sheets[0].ColumnCount = 1;
                Fpspread7.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread7.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                Fpspread7.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
                Fpspread7.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
                int cc = 0;
                int j = 0;
                string getcolval = "";
                string applid = "";
                string graduation = "";
                string degree = "";
                string specialization = "";
                string qual = "";
                string bldgrp = "";
                string famsub = "";
                string year = "";
                DataSet dsgetstaff = new DataSet();

                for (j = 0; j < lstcolorder.Items.Count; j++)
                {
                    cc++;
                    Fpspread7.Sheets[0].ColumnCount = cc + 1;
                    Fpspread7.Sheets[0].ColumnHeader.Cells[0, cc].Text = lstcolorder.Items[j].Text;
                    Fpspread7.Columns[cc].Width = 200;
                    if (!hsgetcol.ContainsKey(Convert.ToString(cc)))
                        hsgetcol.Add(Convert.ToString(cc), lstcolorder.Items[j].Text);
                }

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    qual = "";
                    Fpspread7.Sheets[0].RowCount++;
                    applid = Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]);
                    if (Convert.ToString(ds.Tables[0].Rows[i]["interviewstatus"]).Trim().ToUpper() == "APPLIED")
                    {
                        Fpspread7.Sheets[0].Rows[i].ForeColor = ColorTranslator.FromHtml("#0CA6CA");
                        appliedcount++;
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[i]["interviewstatus"]).Trim().ToUpper() == "SELECTED")
                    {
                        Fpspread7.Sheets[0].Rows[i].ForeColor = Color.DarkBlue;
                        selectedcount++;
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[i]["interviewstatus"]).Trim().ToUpper() == "WAITING")
                    {
                        Fpspread7.Sheets[0].Rows[i].ForeColor = Color.DarkViolet;
                        waitingcount++;
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[i]["interviewstatus"]).Trim().ToUpper() == "REJECTED")
                    {
                        Fpspread7.Sheets[0].Rows[i].ForeColor = Color.Red;
                        rejectedcount++;
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[i]["interviewstatus"]).Trim().ToUpper() == "APPOINTED" && (Convert.ToString(ds.Tables[0].Rows[i]["resign"]) == "False" && Convert.ToString(ds.Tables[0].Rows[i]["settled"]) == "False") || Convert.ToString(ds.Tables[0].Rows[i]["Discontinue"]) == "False")
                    {
                        Fpspread7.Sheets[0].Rows[i].ForeColor = Color.DarkGreen;
                        appointcount++;
                    }
                    if ((Convert.ToString(ds.Tables[0].Rows[i]["resign"]) == "True" || Convert.ToString(ds.Tables[0].Rows[i]["settled"]) == "True") || Convert.ToString(ds.Tables[0].Rows[i]["Discontinue"]) == "True")
                    {
                        Fpspread7.Sheets[0].Rows[i].ForeColor = Color.DarkRed;
                        relievedcount++;
                    }
                    Fpspread7.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                    Fpspread7.Sheets[0].Cells[i, 0].Tag = ds.Tables[0].Rows[i]["appl_no"].ToString();
                    Fpspread7.Sheets[0].Cells[i, 0].Note = ds.Tables[0].Rows[i]["staff_code"].ToString();

                    cc = 0;
                    j = 0;

                    for (j = 0; j < lstcolorder.Items.Count; j++)
                    {
                        cc++;
                        getcolval = Convert.ToString(hsgetcol[Convert.ToString(cc)]);
                        if (getcolval.Trim() == "Qualifications")
                        {
                            string getstfdet = "select Graduation,Degree,Specialization,PassYear from StaffDetails where Appl_ID='" + applid + "'";
                            dsgetstaff.Clear();
                            dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                            if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                            {
                                graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                                degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                                specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                                year = Convert.ToString(dsgetstaff.Tables[0].Rows[0]["PassYear"]);
                            }
                            if (graduation == "0")
                                graduation = "";
                            if (degree == "0")
                                degree = "";
                            if (specialization == "0")
                                specialization = "";
                            if (graduation.Trim() != "")
                            {
                                if (qual == "")
                                    qual = graduation;
                                else
                                    qual = qual + " , " + graduation;
                            }
                            if (degree.Trim() != "")
                            {
                                if (qual == "")
                                    qual = degree;
                                else
                                    qual = qual + " , " + degree;
                            }
                            if (specialization.Trim() != "")
                            {
                                if (qual == "")
                                    qual = specialization;
                                else
                                    qual = qual + " , " + specialization;
                            }
                            if (year.Trim() != "")
                            {
                                if (qual == "")
                                    qual = year;
                                else
                                    qual = qual + " , " + year;
                            }
                            Fpspread7.Sheets[0].Cells[Fpspread7.Sheets[0].RowCount - 1, cc].Text = qual;
                        }
                        else if (getcolval.Trim() == "Blood Group")
                        {
                            bldgrp = getqval(Convert.ToString(ds.Tables[0].Rows[i]["bldgrp"]));
                            if (bldgrp.Trim() == "0")
                                bldgrp = "";
                            Fpspread7.Sheets[0].Cells[Fpspread7.Sheets[0].RowCount - 1, cc].Text = bldgrp;
                        }
                        else if (getcolval.Trim() == "Familiar Subjects")
                        {
                            famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                            if (famsub.Trim() == "0")
                                famsub = "";
                            Fpspread7.Sheets[0].Cells[Fpspread7.Sheets[0].RowCount - 1, cc].Text = famsub;
                        }
                        else
                        {
                            if (getcolval.Trim().ToUpper() == "STAFF CODE" || getcolval.Trim().ToUpper() == "APPLICATION NO")
                                Fpspread7.Sheets[0].Cells[Fpspread7.Sheets[0].RowCount - 1, cc].CellType = txtcell;
                            if (Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]).Trim() != ";")
                            {
                                string getval = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]);
                                getval = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(getval);
                                Fpspread7.Sheets[0].Cells[Fpspread7.Sheets[0].RowCount - 1, cc].Text = getval;
                            }
                            else
                            {
                                Fpspread7.Sheets[0].Cells[Fpspread7.Sheets[0].RowCount - 1, cc].Text = "";
                            }
                        }
                        Fpspread7.Sheets[0].Cells[Fpspread7.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                    }
                }
                Fpspread7.Visible = true;
                Fpspread7.Sheets[0].PageSize = Fpspread7.Sheets[0].RowCount;
                Fpspread7.SaveChanges();
                rptprint1.Visible = true;
                tbllabel.Visible = true;
                tbllabel1.Visible = false;
                lblapplied.Visible = true;
                lblselected.Visible = true;
                lblwaiting.Visible = true;
                lblrejected.Visible = true;
                lblappointed.Visible = true;
                lblapplied.Text = "Applied : " + appliedcount;
                lblselected.Text = "Selected : " + selectedcount;
                lblwaiting.Text = "Waiting : " + waitingcount;
                lblrejected.Text = "Rejected : " + rejectedcount;
                lblappointed.Text = "Appointed : " + appointcount;
                lblrelieved.Text = "Relieved : " + relievedcount;
                txt_excelname1.Text = "";
                lbl_err.Visible = false;
                txtappstfapplcode.Text = "";
                txtappstfcode.Text = "";
                txtappstfname.Text = "";
            }
            else
            {
                tbllabel.Visible = false;
                tbllabel1.Visible = false;
                Fpspread7.Visible = false;
                rptprint1.Visible = false;
                lbl_err.Visible = true;
                lblapplied.Visible = false;
                lblselected.Visible = false;
                lblwaiting.Visible = false;
                lblrejected.Visible = false;
                lblappointed.Visible = false;
                lbl_err.Text = " No Records Found";
            }
        }
        catch (Exception ex) { }
    }

    protected void btn_intcallgo_Click(object sender, EventArgs e)     //modified By Jeyaprakash on June 15th
    {
        loadcolumns(sender, e);
        string deptname = "";
        lbl_err.Text = "";
        string designame = "";
        string stafftype = "";
        string ft = txt_fdate.Text;
        string tt = txt_tdate.Text;
        string[] aa = ft.Split('/');
        DateTime dt2 = Convert.ToDateTime(aa[1] + "/" + aa[0] + "/" + aa[2]);
        string[] bb = tt.Split('/');
        DateTime dt3 = Convert.ToDateTime(bb[1] + "/" + bb[0] + "/" + bb[2]);
        Hashtable hsgetcol = new Hashtable();
        hsgetcol.Clear();

        deptname = GetSelectedItemsValueAsString(cbl_dept);

        designame = GetSelectedItemsValueAsString(cbl_desig);

        stafftype = GetSelectedItemsValueAsString(cbl_stype);

        string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);

        if (deptname.Trim() == "")
        {
            lbl_err.Visible = true;
            lbl_err.Text = "Please Select Atleast One Department Name";
            Fpspread1.Visible = false;
            return;
        }

        string sql = "";
        sql = "select sa.appl_no,appl_id,appl_name,dm.desig_code,h.dept_code,father_name,mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,dm.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,interviewtime,com_mobileno,subjects,qualification,email,venue_name,Location from staff_appl_master sa,venue_det v,desig_master dm,hrdept_master h where sa.desig_code=dm.desig_code and sa.dept_code = h.dept_code and sa.college_code = dm.collegecode and sa.college_code = h.college_code and sa.college_code=v.college_code and dm.collegeCode=v.college_code and h.college_code=v.college_code and sa.appl_no=v.appl_no and interviewstatus ='Interviewcall' and sa.college_code='" + newcollcode + "'";

        if (ddlsearchappstf.SelectedItem.Text == "Appl No" && txtappstfapplcode.Text.Trim() != "")
        {
            sql = sql + " and sa.appl_no='" + Convert.ToString(txtappstfapplcode.Text) + "'";
        }
        else if (txtappstfname.Text.Trim() != "")
        {
            sql = sql + " sa.appl_name='" + Convert.ToString(txtappstfname.Text) + "')";
        }
        else
        {
            if (searchbydate.Checked == true)
                sql = sql + " and interviewdate between'" + dt2.ToString("dd/MM/yyyy") + "' and '" + dt3.ToString("dd/MM/yyyy") + "'";
            if (deptname.Trim() != "")
                sql = sql + " and sa.dept_code in('" + deptname + "')";
            if (designame.Trim() != "")
                sql = sql + " and sa.desig_code in('" + designame + "')";
            //if (stafftype.Trim() != "")
            //    sql = sql + " and staff_type in('','" + stafftype + "')";
        }

        ds.Clear();
        ds = d2.select_method_wo_parameter(sql, "Text");
        FarPoint.Web.Spread.CheckBoxCellType chkall = new FarPoint.Web.Spread.CheckBoxCellType();
        chkall.AutoPostBack = false;
        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            Fpspread14.Sheets[0].AutoPostBack = true;
            Fpspread14.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread14.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread14.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread14.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread14.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread14.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread14.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread14.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread14.Sheets[0].RowHeader.Visible = false;
            Fpspread14.Visible = false;
            Fpspread14.Sheets[0].ColumnHeader.RowCount = 0;
            Fpspread14.Sheets[0].ColumnCount = 0;
            Fpspread14.Sheets[0].RowCount = 0;
            Fpspread14.Sheets[0].RowHeader.Visible = false;
            Fpspread14.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.Border.BorderSize = 0;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
            Fpspread14.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread14.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread14.Sheets[0].RowCount = 0;
            Fpspread14.Sheets[0].ColumnCount = 6;
            Fpspread14.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread14.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread14.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
            Fpspread14.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";

            int cc = 0;
            int j = 0;
            for (j = 0; j < lstcolorder.Items.Count; j++)
            {
                cc++;
                Fpspread14.Sheets[0].ColumnCount = cc + 1;
                Fpspread14.Sheets[0].ColumnHeader.Cells[0, cc].Text = lstcolorder.Items[j].Text;
                Fpspread14.Columns[cc].Width = 200;
                if (!hsgetcol.ContainsKey(Convert.ToString(cc)))
                    hsgetcol.Add(Convert.ToString(cc), lstcolorder.Items[j].Text);
            }
            string getcolval = "";
            string applid = "";
            string graduation = "";
            string degree = "";
            string specialization = "";
            string qual = "";
            string bldgrp = "";
            string famsub = "";
            DataSet dsgetstaff = new DataSet();

            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                qual = "";
                applid = Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]);
                Fpspread14.Sheets[0].RowCount++;
                Fpspread14.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                Fpspread14.Sheets[0].Cells[i, 0].Tag = ds.Tables[0].Rows[i]["appl_no"].ToString();
                cc = 0;
                j = 0;
                for (j = 0; j < lstcolorder.Items.Count; j++)
                {
                    cc++;
                    getcolval = Convert.ToString(hsgetcol[Convert.ToString(cc)]);
                    if (getcolval.Trim() == "Qualifications")
                    {
                        string getstfdet = "select Graduation,Degree,Specialization from StaffDetails where Appl_ID='" + applid + "'";
                        dsgetstaff.Clear();
                        dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                        if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                        {
                            graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                            degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                            specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                        }
                        if (graduation == "0")
                            graduation = "";
                        if (degree == "0")
                            degree = "";
                        if (specialization == "0")
                            specialization = "";
                        if (graduation.Trim() != "")
                        {
                            if (qual == "")
                                qual = graduation;
                            else
                                qual = qual + " , " + graduation;
                        }
                        if (degree.Trim() != "")
                        {
                            if (qual == "")
                                qual = degree;
                            else
                                qual = qual + " , " + degree;
                        }
                        if (specialization.Trim() != "")
                        {
                            if (qual == "")
                                qual = specialization;
                            else
                                qual = qual + " , " + specialization;
                        }
                        Fpspread14.Sheets[0].Cells[Fpspread14.Sheets[0].RowCount - 1, cc].Text = qual;
                    }
                    else if (getcolval.Trim() == "Blood Group")
                    {
                        bldgrp = getqval(Convert.ToString(ds.Tables[0].Rows[i]["bldgrp"]));
                        if (bldgrp.Trim() == "0")
                            bldgrp = "";
                        Fpspread14.Sheets[0].Cells[Fpspread14.Sheets[0].RowCount - 1, cc].Text = bldgrp;
                    }
                    else if (getcolval.Trim() == "Familiar Subjects")
                    {
                        famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                        if (famsub.Trim() == "0")
                            famsub = "";
                        Fpspread14.Sheets[0].Cells[Fpspread14.Sheets[0].RowCount - 1, cc].Text = famsub;
                    }
                    else
                    {
                        if (getcolval.Trim().ToUpper() == "APPLICATION NO")
                            Fpspread14.Sheets[0].Cells[Fpspread14.Sheets[0].RowCount - 1, cc].CellType = txtcell;
                        if (Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]).Trim() != ";")
                            Fpspread14.Sheets[0].Cells[Fpspread14.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]);
                        else
                            Fpspread14.Sheets[0].Cells[Fpspread14.Sheets[0].RowCount - 1, cc].Text = "";
                        Fpspread14.Sheets[0].Cells[Fpspread14.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                    }
                }
            }
            Fpspread14.Visible = true;
            Fpspread14.Sheets[0].PageSize = Fpspread14.Sheets[0].RowCount;
            Fpspread14.SaveChanges();
            rptprint1.Visible = true;
            txt_excelname1.Text = "";
            lbl_err.Visible = false;
            txtappstfapplcode.Text = "";
            txtappstfcode.Text = "";
            txtappstfname.Text = "";
        }
        else
        {
            Fpspread14.Visible = false;
            rptprint1.Visible = false;
            lbl_err.Visible = true;
            lbl_err.Text = " No Records Found";
        }
    }

    protected void btn_selectgo_Click(object sender, EventArgs e)
    {
        try
        {
            loadcolumns(sender, e);
            string deptname = "";
            lbl_err.Text = "";
            string designame = "";
            string stafftype = "";
            string ft = txt_fdate.Text;
            string tt = txt_tdate.Text;
            string[] aa = ft.Split('/');
            DateTime dt2 = Convert.ToDateTime(aa[1] + "/" + aa[0] + "/" + aa[2]);
            string[] bb = tt.Split('/');
            DateTime dt3 = Convert.ToDateTime(bb[1] + "/" + bb[0] + "/" + bb[2]);
            Hashtable hsgetcol = new Hashtable();
            hsgetcol.Clear();

            deptname = GetSelectedItemsValueAsString(cbl_dept);

            designame = GetSelectedItemsValueAsString(cbl_desig);

            stafftype = GetSelectedItemsValueAsString(cbl_stype);

            string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);

            if (deptname.Trim() == "")
            {
                lbl_err.Visible = true;
                lbl_err.Text = "Please Select Atleast One Department Name";
                Fpspread1.Visible = false;
                return;
            }

            string sql = "";

            sql = "select distinct sa.appl_no,appl_id,appl_name,sa.desig_code,sa.dept_code,father_name,mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,sa.desig_name,sa.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,interviewtime,com_mobileno,subjects,qualification,email,venue_name,Location,interviewstatus from staff_appl_master sa,venue_det v,desig_master dm,hrdept_master h where sa.desig_code=dm.desig_code and sa.dept_code = h.dept_code and sa.college_code = dm.collegecode and sa.college_code = h.college_code and sa.appl_no=v.appl_no and interviewstatus in ('selected','waiting') and sa.college_code='" + newcollcode + "'";

            if (ddlsearchappstf.SelectedItem.Text == "Appl No" && txtappstfapplcode.Text.Trim() != "")
            {
                sql = sql + " and sa.appl_no='" + Convert.ToString(txtappstfapplcode.Text) + "'";
            }
            else if (txtappstfname.Text.Trim() != "")
            {
                sql = sql + " sa.appl_name='" + Convert.ToString(txtappstfname.Text) + "')";
            }
            else
            {
                if (searchbydate.Checked == true)
                    sql = sql + " and dateofapply between'" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'";
                if (deptname.Trim() != "")
                    sql = sql + " and sa.dept_code in('" + deptname + "')";
                if (designame.Trim() != "")
                    sql = sql + " and sa.desig_code in('" + designame + "')";
                //if (stafftype.Trim() != "")
                //    sql = sql + " and staff_type in('','" + stafftype + "')";
            }

            ds.Clear();
            ds = d2.select_method_wo_parameter(sql, "Text");
            FarPoint.Web.Spread.CheckBoxCellType chkall = new FarPoint.Web.Spread.CheckBoxCellType();
            chkall.AutoPostBack = false;
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                int selcount = 0;
                int waitcount = 0;

                Fpspread15.Sheets[0].AutoPostBack = true;
                Fpspread15.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread15.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread15.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                Fpspread15.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread15.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread15.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
                Fpspread15.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread15.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread15.Sheets[0].RowHeader.Visible = false;
                Fpspread15.CommandBar.Visible = false;

                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                darkstyle.Font.Name = "Book Antiqua";
                darkstyle.Font.Size = FontUnit.Medium;
                darkstyle.Font.Bold = true;
                darkstyle.Border.BorderSize = 0;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                darkstyle.VerticalAlign = VerticalAlign.Middle;
                darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
                Fpspread15.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                darkstyle1.Font.Name = "Book Antiqua";
                darkstyle1.Font.Size = FontUnit.Medium;

                Fpspread15.Sheets[0].DefaultStyle = darkstyle1;
                Fpspread15.Sheets[0].RowCount = 0;
                Fpspread15.Sheets[0].ColumnCount = 1;
                Fpspread15.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread15.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                Fpspread15.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                Fpspread15.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
                int cc = 0;
                int j = 0;
                for (j = 0; j < lstcolorder.Items.Count; j++)
                {
                    cc++;
                    Fpspread15.Sheets[0].ColumnCount = cc + 1;
                    Fpspread15.Sheets[0].ColumnHeader.Cells[0, cc].Text = lstcolorder.Items[j].Text;
                    Fpspread15.Columns[cc].Width = 200;
                    if (!hsgetcol.ContainsKey(Convert.ToString(cc)))
                        hsgetcol.Add(Convert.ToString(cc), lstcolorder.Items[j].Text);
                }
                string getcolval = "";
                string applid = "";
                string graduation = "";
                string degree = "";
                string specialization = "";
                string qual = "";
                string bldgrp = "";
                string famsub = "";
                DataSet dsgetstaff = new DataSet();

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    qual = "";
                    applid = Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]);
                    Fpspread15.Sheets[0].RowCount++;
                    if (Convert.ToString(ds.Tables[0].Rows[i]["interviewstatus"]).Trim().ToUpper() == "SELECTED")
                    {
                        Fpspread15.Sheets[0].Rows[i].ForeColor = Color.DarkBlue;
                        selcount++;
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[i]["interviewstatus"]).Trim().ToUpper() == "WAITING")
                    {
                        Fpspread15.Sheets[0].Rows[i].ForeColor = Color.DarkViolet;
                        waitcount++;
                    }
                    Fpspread15.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                    Fpspread15.Sheets[0].Cells[i, 0].Tag = ds.Tables[0].Rows[i]["appl_no"].ToString();
                    cc = 0;
                    j = 0;
                    for (j = 0; j < lstcolorder.Items.Count; j++)
                    {
                        cc++;
                        getcolval = Convert.ToString(hsgetcol[Convert.ToString(cc)]);
                        if (getcolval.Trim() == "Qualifications")
                        {
                            string getstfdet = "select Graduation,Degree,Specialization from StaffDetails where Appl_ID='" + applid + "'";
                            dsgetstaff.Clear();
                            dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                            if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                            {
                                graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                                degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                                specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                            }
                            if (graduation == "0")
                                graduation = "";
                            if (degree == "0")
                                degree = "";
                            if (specialization == "0")
                                specialization = "";
                            if (graduation.Trim() != "")
                            {
                                if (qual == "")
                                    qual = graduation;
                                else
                                    qual = qual + " , " + graduation;
                            }
                            if (degree.Trim() != "")
                            {
                                if (qual == "")
                                    qual = degree;
                                else
                                    qual = qual + " , " + degree;
                            }
                            if (specialization.Trim() != "")
                            {
                                if (qual == "")
                                    qual = specialization;
                                else
                                    qual = qual + " , " + specialization;
                            }
                            Fpspread15.Sheets[0].Cells[Fpspread15.Sheets[0].RowCount - 1, cc].Text = qual;
                        }
                        else if (getcolval.Trim() == "Blood Group")
                        {
                            bldgrp = getqval(Convert.ToString(ds.Tables[0].Rows[i]["bldgrp"]));
                            if (bldgrp.Trim() == "0")
                                bldgrp = "";
                            Fpspread15.Sheets[0].Cells[Fpspread15.Sheets[0].RowCount - 1, cc].Text = bldgrp;
                        }
                        else if (getcolval.Trim() == "Familiar Subjects")
                        {
                            famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                            if (famsub.Trim() == "0")
                                famsub = "";
                            Fpspread15.Sheets[0].Cells[Fpspread15.Sheets[0].RowCount - 1, cc].Text = famsub;
                        }
                        else
                        {
                            if (getcolval.Trim().ToUpper() == "APPLICATION NO")
                                Fpspread15.Sheets[0].Cells[Fpspread15.Sheets[0].RowCount - 1, cc].CellType = txtcell;
                            if (Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]).Trim() != ";")
                                Fpspread15.Sheets[0].Cells[Fpspread15.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]);
                            else
                                Fpspread15.Sheets[0].Cells[Fpspread15.Sheets[0].RowCount - 1, cc].Text = "";
                            Fpspread15.Sheets[0].Cells[Fpspread15.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                        }
                    }
                }
                Fpspread15.Visible = true;
                Fpspread15.Sheets[0].PageSize = Fpspread15.Sheets[0].RowCount;
                Fpspread15.SaveChanges();
                rptprint1.Visible = true;
                txt_excelname1.Text = "";
                tbllabel1.Visible = true;
                lblsel.Visible = true;
                lblwait.Visible = true;
                lblsel.Text = "Selected : " + selcount;
                lblwait.Text = "Waiting : " + waitcount;
                lbl_err.Visible = false;
                txtappstfapplcode.Text = "";
                txtappstfcode.Text = "";
                txtappstfname.Text = "";
            }
            else
            {
                Fpspread15.Visible = false;
                rptprint1.Visible = false;
                tbllabel1.Visible = false;
                lblsel.Visible = false;
                lblwait.Visible = false;
                lbl_err.Visible = true;
                lbl_err.Text = "  No Records Found";
            }
        }
        catch { }
    }

    protected void btn_aptgo_Click(object sender, EventArgs e)//delsref
    {
        try
        {
            loadcolumns(sender, e);
            string scode = txt_scode.Text;
            string sname = txt_sname.Text;
            string dept = "";
            string desig = "";
            string stype = "";
            Hashtable hsgetcol = new Hashtable();
            hsgetcol.Clear();

            dept = GetSelectedItemsValueAsString(cbl_dept);

            desig = GetSelectedItemsValueAsString(cbl_desig);

            stype = GetSelectedItemsValueAsString(cbl_stype);

            string newcollcode = Convert.ToString(ddlcollege.SelectedItem.Value);

            string ft = txt_fdate.Text;
            string tt = txt_tdate.Text;
            string[] aa = ft.Split('/');
            DateTime dt2 = Convert.ToDateTime(aa[1] + "/" + aa[0] + "/" + aa[2]);
            string[] bb = tt.Split('/');
            DateTime dt3 = Convert.ToDateTime(bb[1] + "/" + bb[0] + "/" + bb[2]);

            string query = "";

            query = "select sa.appl_no,appl_id,s.staff_code,appl_name,t.desig_code,t.dept_code,father_name,s.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,stftype,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,s.adharcardno,subjects,qualification,email from staff_appl_master sa,staffmaster s,stafftrans t,hrdept_master h,desig_master d where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and d.desig_code =t.desig_code and h.dept_code =t.dept_code and s.college_code =d.collegeCode and h.college_code =s.college_code and h.college_code = d.collegeCode and (resign =0 and settled =0 and isnull(Discontinue,'0') ='0') and latestrec=1 and sa.college_code='" + newcollcode + "' and sa.interviewstatus ='appointed'";

            string staffcheck = Convert.ToString(ViewState["isstaffcheck"]);//delsi2205
            if (staffcheck.ToUpper() == "TRUE" || staffcheck == "1")
            {

                string stfCode = d2.GetFunction("select staff_code from usermaster where User_code='" + usercode + "'");
                if (stfCode != "0" || stfCode != "")
                {
                    string applnumb = d2.GetFunction("select appl_no from staffmaster where staff_code='" + stfCode + "'");
                    query = query + "  and sa.appl_no='" + applnumb + "'";
                }
            }

            else
            {
                if (ddlsearchappstf.SelectedItem.Text == "Appl No" && txtappstfapplcode.Text.Trim() != "")
                {
                    query = query + " and sa.appl_no='" + Convert.ToString(txtappstfapplcode.Text) + "'";
                }
                else if (ddlsearchappstf.SelectedItem.Text == "Staff Code" && txtappstfcode.Text.Trim() != "")
                {
                    query = query + " and s.staff_code='" + Convert.ToString(txtappstfcode.Text) + "'";
                }
                else if (txtappstfname.Text.Trim() != "")
                {
                    query = query + " and (s.staff_name='" + Convert.ToString(txtappstfname.Text) + "' or sa.appl_name='" + Convert.ToString(txtappstfname.Text) + "')";
                }
                else
                {
                    if (searchbydate.Checked == true)
                        query = query + " and appointed_date between '" + dt2.ToString("MM/dd/yyyy") + "' and '" + dt3.ToString("MM/dd/yyyy") + "'";
                    if (dept.Trim() != "")
                        query += " and t.dept_code in ('" + dept + "') ";
                    if (desig.Trim() != "")
                        query += " and t.desig_code in('" + desig + "')";
                    if (stype.Trim() != "")
                        query += " and t.stftype in('','" + stype + "')";
                }
            }
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                Fpspread10.CommandBar.Visible = false;
                Fpspread10.Sheets[0].RowHeader.Visible = false;
                Fpspread10.Sheets[0].AutoPostBack = true;
                Fpspread10.CommandBar.Visible = false;

                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                darkstyle.Font.Name = "Book Antiqua";
                darkstyle.Font.Size = FontUnit.Medium;
                darkstyle.Font.Bold = true;
                darkstyle.Border.BorderSize = 0;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                darkstyle.VerticalAlign = VerticalAlign.Middle;
                darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
                Fpspread10.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                darkstyle1.Font.Name = "Book Antiqua";
                darkstyle1.Font.Size = FontUnit.Medium;

                Fpspread10.Sheets[0].DefaultStyle = darkstyle1;
                Fpspread10.Sheets[0].RowCount = 0;
                Fpspread10.Sheets[0].ColumnCount = 1;
                Fpspread10.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread10.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                Fpspread10.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                Fpspread10.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                Fpspread10.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                Fpspread10.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                Fpspread10.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpspread10.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspread10.Columns[0].Width = 75;

                int cc = 0;
                int j = 0;
                for (j = 0; j < lstcolorder.Items.Count; j++)
                {
                    cc++;
                    Fpspread10.Sheets[0].ColumnCount = cc + 1;
                    Fpspread10.Sheets[0].ColumnHeader.Cells[0, cc].Text = lstcolorder.Items[j].Text;
                    Fpspread10.Columns[cc].Width = 200;
                    if (!hsgetcol.ContainsKey(Convert.ToString(cc)))
                        hsgetcol.Add(Convert.ToString(cc), lstcolorder.Items[j].Text);
                }
                string getcolval = "";
                string applid = "";
                string graduation = "";
                string degree = "";
                string specialization = "";
                string qual = "";
                string bldgrp = "";
                string famsub = "";
                DataSet dsgetstaff = new DataSet();

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    applid = Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]);
                    Fpspread10.Sheets[0].RowCount++;
                    Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(i + 1);
                    Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(ds.Tables[0].Rows[i]["appl_no"]);
                    Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                    cc = 0;
                    j = 0;
                    for (j = 0; j < lstcolorder.Items.Count; j++)
                    {
                        qual = "";
                        cc++;
                        getcolval = Convert.ToString(hsgetcol[Convert.ToString(cc)]);
                        if (getcolval.Trim() == "Qualifications")
                        {
                            string getstfdet = "select Graduation,Degree,Specialization from StaffDetails where Appl_ID='" + applid + "'";
                            dsgetstaff.Clear();
                            dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                            if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                            {
                                graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                                degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                                specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                            }
                            if (graduation == "0")
                                graduation = "";
                            if (degree == "0")
                                degree = "";
                            if (specialization == "0")
                                specialization = "";
                            if (graduation.Trim() != "")
                            {
                                if (qual == "")
                                    qual = graduation;
                                else
                                    qual = qual + " , " + graduation;
                            }
                            if (degree.Trim() != "")
                            {
                                if (qual == "")
                                    qual = degree;
                                else
                                    qual = qual + " , " + degree;
                            }
                            if (specialization.Trim() != "")
                            {
                                if (qual == "")
                                    qual = specialization;
                                else
                                    qual = qual + " , " + specialization;
                            }
                            Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, cc].Text = qual;
                        }
                        else if (getcolval.Trim() == "Blood Group")
                        {
                            bldgrp = getqval(Convert.ToString(ds.Tables[0].Rows[i]["bldgrp"]));
                            if (bldgrp.Trim() == "0")
                                bldgrp = "";
                            Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, cc].Text = bldgrp;
                        }
                        else if (getcolval.Trim() == "Familiar Subjects")
                        {
                            famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                            if (famsub.Trim() == "0")
                                famsub = "";
                            Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, cc].Text = famsub;
                        }
                        else
                        {
                            if (getcolval.Trim().ToUpper() == "APPLICATION NO" || getcolval.Trim().ToUpper() == "STAFF CODE")
                                Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, cc].CellType = txtcell;
                            Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(ds.Tables[0].Rows[i][lstcolorder.Items[j].Value]);
                            Fpspread10.Sheets[0].Cells[Fpspread10.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                        }
                    }
                }
                Fpspread10.Visible = true;
                rptprint10.Visible = true;
                txt_excelname10.Text = "";
                lbl_err.Visible = false;
                Fpspread10.Sheets[0].PageSize = Fpspread10.Sheets[0].RowCount;
                Fpspread10.SaveChanges();
                txtappstfapplcode.Text = "";
                txtappstfcode.Text = "";
                txtappstfname.Text = "";
            }
            else
            {
                Fpspread10.Visible = false;
                lbl_err.Visible = true;
                rptprint10.Visible = false;
                lbl_err.Text = " No Records Found";
            }
        }
        catch { }
    }

    protected void Cell10_Click(object sender, EventArgs e)
    {
        check = true;
        div_Addapt.Visible = true;
        txt_applno.Enabled = false;
        txt_fname.Enabled = false;
        txt_mname.Enabled = false;
        txt_surname.Enabled = false;
        txt_aptscode.Enabled = false;
        btn_appoint.Visible = false;
        btn_apporder.Visible = false;
        btn_update.Visible = true;
        txt_popfd.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_poptd.Text = DateTime.Now.ToString("dd/MM/yyyy");
        // txt_priority.Text = "";
    }

    protected void popdesignationapt()
    {
        ds.Clear();
        ddl_pappointed.Items.Clear();
        string collegecode1 = Convert.ToString(ddlcollege.SelectedValue);
        string statequery = "select desig_code,desig_name from desig_master where collegeCode='" + collegecode1 + "' order by desig_name";
        ds = da.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_pappointed.DataSource = ds;
            ddl_pappointed.DataTextField = "desig_name";
            ddl_pappointed.DataValueField = "desig_code";
            ddl_pappointed.DataBind();
        }
    }

    protected void popdept()
    {
        ds.Clear();
        ddl_appdept.Items.Clear();
        string collegecode1 = Convert.ToString(ddlcollege.SelectedValue);
        string item = "select distinct dept_code,dept_name from hrdept_master where college_code='" + collegecode1 + "' order by dept_name";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_appdept.DataSource = ds;
            ddl_appdept.DataTextField = "dept_name";
            ddl_appdept.DataValueField = "dept_code";
            ddl_appdept.DataBind();
        }
    }

    protected void popstype()
    {
        ds.Clear();
        ddl_appstype.Items.Clear();
        string collegecode1 = Convert.ToString(ddlcollege.SelectedValue);
        string item = "select distinct stftype from stafftrans where stftype is not null and stftype<>''";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_appstype.DataSource = ds;
            ddl_appstype.DataTextField = "stftype";
            ddl_appstype.DataBind();
            ddl_appstype.Items.Insert(0, "Select");
            ddl_appstype.Items.Insert(ddl_appstype.Items.Count, "Others");
        }
        else
        {
            ddl_appstype.Items.Insert(0, "Select");
            ddl_appstype.Items.Insert(ddl_appstype.Items.Count, "Others");
        }
    }

    protected void popscat()
    {
        ds.Clear();
        ddl_appcat.Items.Clear();
        string collegecode1 = Convert.ToString(ddlcollege.SelectedValue);
        string item = "select category_code,category_name from staffcategorizer where college_code = '" + collegecode1 + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_appcat.DataSource = ds;
            ddl_appcat.DataTextField = "category_name";
            ddl_appcat.DataValueField = "category_code";
            ddl_appcat.DataBind();
            ddl_appcat.Items.Insert(0, "Select");
        }
        else
        {
            ddl_appcat.Items.Insert(0, "Select");
        }
    }

    protected void bindstream()
    {
        ds.Clear();
        ddl_Stream.Items.Clear();
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='hastr' ";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_Stream.DataSource = ds;
            ddl_Stream.DataTextField = "TextVal";
            ddl_Stream.DataValueField = "TextCode";
            ddl_Stream.DataBind();
            ddl_Stream.Items.Insert(0, "Select");
        }
        else
        {
            ddl_Stream.Items.Insert(0, "Select");
        }
    }

    protected void bindfaculty()
    {
        ds.Clear();
        ddl_ftype.Items.Clear();
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='hafac' ";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_ftype.DataSource = ds;
            ddl_ftype.DataTextField = "TextVal";
            ddl_ftype.DataValueField = "TextCode";
            ddl_ftype.DataBind();
            ddl_ftype.Items.Insert(0, "Select");
        }
        else
        {
            ddl_ftype.Items.Insert(0, "Select");
        }
    }

    protected void bindBank()
    {
        ds.Clear();
        ddl_bankname.Items.Clear();
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='habnk' ";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_bankname.DataSource = ds;
            ddl_bankname.DataTextField = "TextVal";
            ddl_bankname.DataValueField = "TextCode";
            ddl_bankname.DataBind();
            ddl_bankname.Items.Insert(0, "Select");
        }
        else
        {
            ddl_bankname.Items.Insert(0, "Select");
        }
    }

    protected void bindBranch()
    {
        ds.Clear();
        ddl_branchname.Items.Clear();
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='habrn' ";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_branchname.DataSource = ds;
            ddl_branchname.DataTextField = "TextVal";
            ddl_branchname.DataValueField = "TextCode";
            ddl_branchname.DataBind();
            ddl_branchname.Items.Insert(0, "Select");
        }
        else
        {
            ddl_branchname.Items.Insert(0, "Select");
        }
    }

    protected void Fpspread10_render(object sender, EventArgs e)
    {
        try
        {
            if (check == true)//delsi0108
            {



                loadpayscale();
                loadshift();
                popdesignationapt();
                popdept();
                popstype();
                popscat();
                bindstream();
                bindfaculty();
                bindBank();
                bindBranch();
                bindfaculty();
                loadClgBank();
                btn_applno.Enabled = false;
                trStfType.Visible = false;
                txtStfType.Text = "";
                string activerow = "";
                string activecol = "";
                string aplno = "";
                string scode = "";
                string dept = "";
                string desig = "";
                string dj = "";
                activerow = Fpspread10.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread10.ActiveSheetView.ActiveColumn.ToString();
                string collegecode1 = Convert.ToString(ddlcollege.SelectedValue);

                if (activerow.Trim() != "")
                    aplno = Convert.ToString(Fpspread10.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                txt_applno.Enabled = false;
                txt_aptscode.Enabled = true;
                err.Visible = false;
                txt_applno.Text = aplno;

                string selectquery = " select staff_code,staff_name,sur_name,PrintPriority,bankaccount,pfnumber,honourstf,CONVERT(varchar(20),periodfrom,103) as periodfrom,CONVERT(varchar(20),periodto,103) as periodto,CONVERT(varchar(20),retr_date,103) as retr_date,lic_no,loan_no,bank_name,branch_name,ifsc_code,esi_no,stream,adharcardno,UAN_No,mid_name,CONVERT(varchar(20),appointed_date,103) as appointed_date,CONVERT(varchar(20),join_date,103) as join_date,bank_name,branch_name,Stream,pangirnumber,gpfnumber,clgbankcode from staffmaster where appl_no='" + aplno + "' and college_code='" + collegecode1 + "'";
                selectquery = selectquery + " select dept_code,desig_code,staff_type,Convert(varchar(10),date_of_birth,101) as birthday from staff_appl_master where appl_no='" + aplno + "' and college_code='" + collegecode1 + "'";
                ds = d2.select_method_wo_parameter(selectquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + aplno + "'");
                    txt_fname.Text = ds.Tables[0].Rows[0]["staff_name"].ToString();
                    scode = ds.Tables[0].Rows[0]["staff_code"].ToString();
                    txt_priority.Text = ds.Tables[0].Rows[0]["PrintPriority"].ToString();
                    string selstfimg = d2.GetFunction("select photo from StaffPhoto where (staff_code='" + scode + "' or appl_id='" + appl_id + "')");
                    if (selstfimg.Trim() != "0" && selstfimg.Trim() != "")
                    {
                        if (!String.IsNullOrEmpty(scode.Trim()))
                            stf_img.ImageUrl = "~/Handler/staffphoto.ashx?staff_code=" + scode;
                        else
                            stf_img.ImageUrl = "~/Handler/staffphoto.ashx?appl_id=" + appl_id;
                    }
                    else
                    {
                        stf_img.ImageUrl = "";
                    }
                    string selstfsignimg = d2.GetFunction("select StaffSign from StaffPhoto where staff_code='" + scode + "'");
                    if (selstfsignimg.Trim() != "0" && selstfsignimg.Trim() != "")
                        img_sign.ImageUrl = "Handler/Staff Sign.ashx?staff_code=" + scode;
                    else
                        img_sign.ImageUrl = "";

                    txt_aptscode.Text = scode;
                    ViewState["scode"] = scode;
                    string getquery = "select dept_code,desig_code,stftype,category_code,stfnature,stfstatus,paytype,payscale,shift,IncrementTime,FacultyType,BankAccType,PayMode,IsManualLOP   from stafftrans where staff_code='" + scode + "' and latestrec='1'";
                    dv = d2.select_method_wo_parameter(getquery, "Text");
                    string deptname = "";
                    string designame = "";
                    string catcode = "";
                    string catname = "";
                    string snat = "";
                    string stype = "";
                    string sstat = "";
                    string paytype = "";
                    string payscale = "";
                    string shift = "";
                    string noofincr = "";
                    string factyp = "";
                    string acctyp = "";
                    string paymode = "";
                    string manuallop = "";

                    if (dv.Tables[0].Rows.Count > 0)
                    {
                        dept = dv.Tables[0].Rows[0]["dept_code"].ToString();
                        paytype = dv.Tables[0].Rows[0]["paytype"].ToString();
                        payscale = dv.Tables[0].Rows[0]["payscale"].ToString();
                        shift = dv.Tables[0].Rows[0]["shift"].ToString().ToUpper();
                        noofincr = dv.Tables[0].Rows[0]["IncrementTime"].ToString();
                        factyp = dv.Tables[0].Rows[0]["FacultyType"].ToString();
                        acctyp = dv.Tables[0].Rows[0]["BankAccType"].ToString();
                        paymode = dv.Tables[0].Rows[0]["PayMode"].ToString();
                        stype = dv.Tables[0].Rows[0]["stftype"].ToString();
                        desig = dv.Tables[0].Rows[0]["desig_code"].ToString();
                        catcode = dv.Tables[0].Rows[0]["category_code"].ToString();
                        snat = dv.Tables[0].Rows[0]["stfnature"].ToString();
                        sstat = dv.Tables[0].Rows[0]["stfstatus"].ToString();
                        manuallop = dv.Tables[0].Rows[0]["IsManualLOP"].ToString();
                        if (manuallop.Trim().ToUpper() == "TRUE")
                            chkmanuallop.Checked = true;
                        else
                            chkmanuallop.Checked = false;

                        deptname = d2.GetFunction(" select dept_name from hrdept_master where dept_code ='" + dept + "' and college_code='" + collegecode1 + "'");
                        designame = d2.GetFunction("  select desig_name from desig_master where desig_code='" + desig + "' and collegeCode='" + collegecode1 + "'");
                        catname = d2.GetFunction(" select category_name  from staffcategorizer  where category_code='" + catcode + "' and college_code='" + collegecode1 + "'");
                    }
                    if (snat.Trim().ToUpper() == "0" || snat.Trim().ToUpper() == "FULL")
                        rdb_ftime.Checked = true;
                    if (snat.Trim().ToUpper() == "1" || snat.Trim().ToUpper() == "PART")//delsi 1108
                        rdb_ptime.Checked = true;

                    string stftp = ds.Tables[1].Rows[0]["staff_type"].ToString();
                    string deptc = ds.Tables[1].Rows[0]["dept_code"].ToString();
                    string desigc = ds.Tables[1].Rows[0]["desig_code"].ToString();
                    string adeptname = d2.GetFunction("select dept_name from hrdept_master where dept_code='" + deptc + "' and college_code='" + collegecode1 + "'");
                    string adesigname = d2.GetFunction("select desig_name from desig_master where desig_code='" + desigc + "' and collegeCode='" + collegecode1 + "'");
                    txt_papplied.Text = adesigname;
                    txt_pdep.Text = adeptname;

                    if (paytype == "0")
                        rdb_regular.Checked = true;
                    if (paytype == "1")
                        rdb_cons.Checked = true;

                    ddl_payscale.SelectedIndex = ddl_payscale.Items.IndexOf(ddl_payscale.Items.FindByText(payscale));

                    for (int shiftval = 0; shiftval < ddl_shift.Items.Count; shiftval++)
                    {
                        string val = Convert.ToString(ddl_shift.Items[shiftval].Value);
                        if (val.ToUpper().ToString() == shift)
                        {
                            ddl_shift.SelectedIndex = shiftval;

                        }

                    }

                    // ddl_shift.SelectedIndex = ddl_shift.Items.IndexOf(ddl_shift.Items.FindByText(shift));//delsi 0908
                    txt_incr.Text = noofincr;
                    ddl_ftype.SelectedIndex = ddl_ftype.Items.IndexOf(ddl_ftype.Items.FindByText(factyp));
                    if (acctyp == "1")
                        rdb_own.Checked = true;
                    if (acctyp == "2")
                        rdb_nominne.Checked = true;

                    if (paymode == "0")
                    {
                        rdb_cash.Checked = true;
                        CreditTable.Visible = false;
                        CreditTable1.Visible = false;
                    }
                    if (paymode == "1")
                    {
                        rdb_cheque.Checked = true;
                        CreditTable.Visible = false;
                        CreditTable1.Visible = false;
                    }
                    if (paymode == "2")
                    {
                        rdb_credit.Checked = true;
                        CreditTable.Visible = true;
                        CreditTable1.Visible = true;
                    }

                    ddl_popstat.SelectedIndex = ddl_popstat.Items.IndexOf(ddl_popstat.Items.FindByText(sstat));
                    ddl_pappointed.SelectedIndex = ddl_pappointed.Items.IndexOf(ddl_pappointed.Items.FindByText(designame));
                    ddl_appdept.SelectedIndex = ddl_appdept.Items.IndexOf(ddl_appdept.Items.FindByText(deptname));
                    ddl_appstype.SelectedIndex = ddl_appstype.Items.IndexOf(ddl_appstype.Items.FindByText(stype));
                    ddl_appcat.SelectedIndex = ddl_appcat.Items.IndexOf(ddl_appcat.Items.FindByText(catname));
                    txt_pstyp.Text = stype;

                    DateTime BirthDate = new DateTime();
                    DateTime RetireDate = new DateTime();
                    int RetAge = 0;
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        if (!String.IsNullOrEmpty(Convert.ToString(ds.Tables[1].Rows[0]["birthday"])) && Convert.ToString(ds.Tables[1].Rows[0]["birthday"]) != "01/01/1900")
                        {
                            BirthDate = Convert.ToDateTime(Convert.ToString(ds.Tables[1].Rows[0]["birthday"]));
                            string GetRetireAge = d2.GetFunction("select template from Master_Settings where settings='Retire_Age_Settings' and value='" + stype + "'");
                            if (!String.IsNullOrEmpty(GetRetireAge.Trim()) && GetRetireAge.Trim() != "0")
                            {
                                //string[] splRetAge = GetRetireAge.Trim().Split('-'); delsi
                                Int32.TryParse(GetRetireAge.Trim(), out RetAge);
                                //if (RetAge > 0)
                                RetireDate = BirthDate.AddYears(RetAge);
                            }
                        }
                    }
                    txt_panno.Text = ds.Tables[0].Rows[0]["pangirnumber"].ToString();
                    txt_gpf.Text = ds.Tables[0].Rows[0]["gpfnumber"].ToString();
                    txt_surname.Text = ds.Tables[0].Rows[0]["sur_name"].ToString();
                    txt_mname.Text = ds.Tables[0].Rows[0]["mid_name"].ToString();
                    txt_adate.Text = ds.Tables[0].Rows[0]["appointed_date"].ToString();
                    if (txt_adate.Text.Trim() == "")
                        txt_adate.Text = DateTime.Now.ToString("dd/MM/yyyy");

                    txt_appdoj.Text = ds.Tables[0].Rows[0]["join_date"].ToString();
                    if (txt_appdoj.Text.Trim() == "")
                        txt_appdoj.Text = DateTime.Now.ToString("dd/MM/yyyy");

                    string ac = ds.Tables[0].Rows[0]["bankaccount"].ToString();
                    txt_acno.Text = ac;
                    string pf = ds.Tables[0].Rows[0]["pfnumber"].ToString();
                    txt_pfno.Text = pf;
                    string honour = ds.Tables[0].Rows[0]["honourstf"].ToString();
                    if (honour == "True")
                        cb_honour.Checked = true;
                    if (honour == "False")
                        cb_honour.Checked = false;

                    string periodf = ds.Tables[0].Rows[0]["periodfrom"].ToString();
                    if (periodf != "")
                        txt_popfd.Text = periodf;
                    else
                        txt_popfd.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    string periodto = ds.Tables[0].Rows[0]["periodto"].ToString();
                    if (periodto != "")
                        txt_poptd.Text = periodto;
                    else
                        txt_poptd.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    string retire = ds.Tables[0].Rows[0]["retr_date"].ToString();
                    if (RetAge > 0 && RetireDate.ToString("MM/dd/yyyy") != "01/01/1900")
                    {
                        txt_retire.Text = RetireDate.ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        if (retire != "")
                            txt_retire.Text = retire;
                        else
                            txt_retire.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    }

                    string lic = ds.Tables[0].Rows[0]["lic_no"].ToString();
                    txt_licno.Text = lic;
                    string loan = ds.Tables[0].Rows[0]["loan_no"].ToString();
                    txt_loanno.Text = loan;
                    string bank = ds.Tables[0].Rows[0]["bank_name"].ToString();
                    ddl_bankname.SelectedIndex = ddl_bankname.Items.IndexOf(ddl_bankname.Items.FindByText(bank));
                    string branch = ds.Tables[0].Rows[0]["branch_name"].ToString();
                    ddl_branchname.SelectedIndex = ddl_branchname.Items.IndexOf(ddl_branchname.Items.FindByText(branch));
                    string ifsc = ds.Tables[0].Rows[0]["ifsc_code"].ToString();
                    txt_ifsc.Text = ifsc;
                    string esi = ds.Tables[0].Rows[0]["esi_no"].ToString();
                    txt_esi.Text = esi;
                    string Adhar = ds.Tables[0].Rows[0]["adharcardno"].ToString();
                    txt_adharno.Text = Adhar;
                    string UANNo = ds.Tables[0].Rows[0]["UAN_No"].ToString();
                    txt_uan.Text = UANNo;
                    string stream = ds.Tables[0].Rows[0]["stream"].ToString();
                    ddl_Stream.SelectedIndex = ddl_Stream.Items.IndexOf(ddl_Stream.Items.FindByText(stream));

                    string collbank = Convert.ToString(ds.Tables[0].Rows[0]["clgbankcode"]);
                    ddl_colbank.SelectedIndex = ddl_colbank.Items.IndexOf(ddl_colbank.Items.FindByValue(collbank));
                }
            }
        }
        catch { }
    }

    protected void btn_addapt_OnClick(object sender, EventArgs e)
    {
        div_Addapt.Visible = true;
        btn_appoint.Visible = true;
        btn_apporder.Visible = false;
        btn_update.Visible = false;
        apt_clear();
        txt_applno.Enabled = true;
        txt_aptscode.Enabled = true;
        txt_fname.Enabled = true;
        txt_mname.Enabled = true;
        txt_surname.Enabled = true;
        btn_applno.Enabled = true;
        err.Visible = false;
        stf_img.ImageUrl = "";
        img_sign.ImageUrl = "";
        trStfType.Visible = false;
        txtStfType.Text = "";
        txt_priority.Text = "";
    }

    protected void rdb_applied_OnCheckedChanged(object sender, EventArgs e)
    {
        Fpspread11.Sheets[0].RowCount = 0;
        string collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);
        string query = "select appl_no,appl_name,dept_name,desig_name from staff_appl_master where college_code='" + collegecode1 + "' and interviewstatus='applied'";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        headerRowBind(ds);
    }

    protected void rdb_selected_OnCheckedChanged(object sender, EventArgs e)
    {
        string collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);
        Fpspread11.Sheets[0].RowCount = 0;
        string query = "select appl_no,appl_name,dept_name,desig_name from staff_appl_master where college_code='" + collegecode1 + "' and interviewstatus='selected'";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        headerRowBind(ds);
    }

    protected void rdb_relievd_OnCheckedChanged(object sender, EventArgs e)
    {
        Fpspread11.Sheets[0].RowCount = 0;
        string collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);
        string query = "select sa.appl_no,appl_name,dept_name,desig_name from staff_appl_master sa,staffmaster sm where sa.appl_no=sm.appl_no and resign=1 and settled=1 and sa.college_code='" + collegecode1 + "'";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        headerRowBind(ds);
    }

    protected void rdb_discontinued_OnCheckedChanged(object sender, EventArgs e)
    {
        Fpspread11.Sheets[0].RowCount = 0;
        string collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);
        string query = "select sa.appl_no,appl_name,dept_name,desig_name from staff_appl_master sa,staffmaster sm where sa.appl_no=sm.appl_no and Discontinue=1 and sa.college_code='" + collegecode1 + "'";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        headerRowBind(ds);
    }

    public void headerRowBind(DataSet dnew)
    {
        try
        {
            Fpspread11.Visible = true;
            Fpspread11.Sheets[0].AutoPostBack = false;
            Fpspread11.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread11.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread11.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread11.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread11.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread11.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread11.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread11.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread11.Sheets[0].RowHeader.Visible = false;

            Fpspread11.Sheets[0].ColumnHeader.RowCount = 0;
            Fpspread11.Sheets[0].RowCount = 0;
            Fpspread11.Sheets[0].RowHeader.Visible = false;
            Fpspread11.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.Border.BorderSize = 0;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
            Fpspread11.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread11.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread11.Sheets[0].RowCount = 0;
            Fpspread11.Sheets[0].ColumnCount = 5;
            Fpspread11.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread11.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread11.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpspread11.Columns[0].Width = 75;

            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Application No";
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            Fpspread11.Columns[1].Width = 125;

            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Application Name";
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            Fpspread11.Columns[2].Width = 200;

            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Department";
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
            Fpspread11.Columns[3].Width = 200;

            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Designation";
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
            Fpspread11.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
            Fpspread11.Columns[4].Width = 200;
            ds = dnew;
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    Fpspread11.Sheets[0].RowCount++;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(i + 1);
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(ds.Tables[0].Rows[i]["appl_no"]);
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 1].CellType = txtcell;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[i]["appl_name"]);
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[i]["dept_name"]);
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";

                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[i]["desig_name"]);
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;
                    Fpspread11.Sheets[0].Cells[Fpspread11.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";
                }
                Fpspread11.Visible = true;
                btn_ok.Visible = true;
                Fpspread11.Sheets[0].PageSize = Fpspread11.Sheets[0].RowCount;
                Fpspread11.SaveChanges();
            }
            else
            {
                Fpspread11.Visible = false;
                btn_ok.Visible = false;
            }
        }
        catch { }
    }

    protected void btn_applno_OnClick(object sender, EventArgs e)
    {
        Application.Visible = true;
        ExpCertificate.Visible = false;
        DetailCertificate.Visible = false;
        rdb_applied.Checked = true;
        rdb_selected.Checked = false;
        rdb_relievd.Checked = false;
        rdb_discontinued.Checked = false;
        string collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);

        string query = "select appl_no,appl_name,dept_name,desig_name from staff_appl_master where college_code='" + collegecode1 + "' and interviewstatus='applied'";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        headerRowBind(ds);
    }

    protected void btn_streamplus_OnClick(object sender, EventArgs e)
    {
        Plusapt.Visible = true;
        btn_plusAdd.Visible = true;
        btn_ftypeadd.Visible = false;
        btn_bnameadd.Visible = false;
        btn_branchadd.Visible = false;
        headerapt.Text = "Stream";
    }

    protected void btn_streamminus_OnClick(object sender, EventArgs e)
    {
        string Stream = Convert.ToString(ddl_Stream.SelectedItem);
        string query = "delete from TextValTable where TextVal='" + Stream + "' and college_code='" + collegecode1 + "'";
        int count = d2.update_method_wo_parameter(query, "Text");
        bindstream();
    }

    protected void Fpspread13_Click(object sender, EventArgs e)
    {
        Cellclick = true;
    }

    protected void Fpspread13_render(object sender, EventArgs e)
    {
        try
        {
            if (Cellclick == true)
            {
                string actrow = Convert.ToString(Fpspread13.ActiveSheetView.ActiveRow);
                string actcol = Convert.ToString(Fpspread13.ActiveSheetView.ActiveColumn);
                if (actrow.Trim() != "" && actrow.Trim() != "-1")
                {
                    bindexpcert();
                    Exper.Visible = true;
                    btn_certok.Text = "Update";
                    btn_certdel.Visible = true;
                    string concname = Convert.ToString(Fpspread13.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Tag);
                    ddl_cname.SelectedIndex = ddl_cname.Items.IndexOf(ddl_cname.Items.FindByValue(concname));
                    ddl_cname.Enabled = false;
                    string isrec = Convert.ToString(Fpspread13.Sheets[0].Cells[Convert.ToInt32(actrow), 2].Text);
                    if (isrec == "Yes")
                        cb_recieved.Checked = true;
                    else
                        cb_recieved.Checked = false;
                    string issuedate = Convert.ToString(Fpspread13.Sheets[0].Cells[Convert.ToInt32(actrow), 3].Text);
                    txt_certdate.Text = issuedate;
                    string status = Convert.ToString(Fpspread13.Sheets[0].Cells[Convert.ToInt32(actrow), 4].Text);
                    if (status == "Duplicate")
                    {
                        rdb_duplicate.Checked = true;
                        rdb_original.Checked = false;
                    }
                    else if (status == "Original")
                    {
                        rdb_duplicate.Checked = false;
                        rdb_original.Checked = true;
                    }
                }
            }
        }
        catch { }
    }

    protected void Fpspread12_Click(object sender, EventArgs e)
    {
        Cellclick = true;
    }

    protected void Fpspread12_render(object sender, EventArgs e)
    {
        try
        {
            if (Cellclick == true)
            {
                string actrow = Convert.ToString(Fpspread12.ActiveSheetView.ActiveRow);
                string actcol = Convert.ToString(Fpspread12.ActiveSheetView.ActiveColumn);
                if (actrow.Trim() != "" && actrow.Trim() != "-1")
                {
                    bindcertdegree();
                    bindcertname();
                    cert.Visible = true;
                    btn_expok.Text = "Update";
                    btn_expdel.Visible = true;
                    string degname = Convert.ToString(Fpspread12.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Tag);
                    ddl_deg.SelectedIndex = ddl_deg.Items.IndexOf(ddl_deg.Items.FindByValue(degname));
                    string certname = Convert.ToString(Fpspread12.Sheets[0].Cells[Convert.ToInt32(actrow), 2].Tag);
                    ddl_certname.SelectedIndex = ddl_certname.Items.IndexOf(ddl_certname.Items.FindByValue(certname));
                    ddl_deg.Enabled = false;
                    ddl_certname.Enabled = false;
                    txt_certno.Text = Convert.ToString(Fpspread12.Sheets[0].Cells[Convert.ToInt32(actrow), 3].Text);
                    txt_expdate.Text = Convert.ToString(Fpspread12.Sheets[0].Cells[Convert.ToInt32(actrow), 4].Text);
                    string status = Convert.ToString(Fpspread12.Sheets[0].Cells[Convert.ToInt32(actrow), 5].Text);
                    if (status == "Duplicate")
                    {
                        RadioButton3.Checked = true;
                        RadioButton2.Checked = false;
                    }
                    else if (status == "Original")
                    {
                        RadioButton3.Checked = false;
                        RadioButton2.Checked = true;
                    }
                }
            }
        }
        catch { }
    }

    protected void btn_certok_Click(object sender, EventArgs e)
    {
        string collegecode = Convert.ToString(ddlcollege.SelectedItem.Value);
        try
        {
            string[] spldt = new string[2];
            DateTime dt = new DateTime();
            string isrec = "";
            string isorgdup = "";
            if (txt_applno.Text.Trim() != "")
            {
                string appl_no = Convert.ToString(txt_applno.Text);
                string scode = Convert.ToString(txt_aptscode.Text);
                string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + appl_no + "'");
                if (appl_id.Trim() != "" && appl_id.Trim() != "0")
                {
                    if (ddl_cname.SelectedIndex != 0 && ddl_cname.SelectedItem.Text != "Select" && ddl_cname.SelectedItem.Text != "Others")
                    {
                        string certcode = Convert.ToString(ddl_cname.SelectedItem.Value);
                        string certdate = Convert.ToString(txt_certdate.Text);
                        spldt = certdate.Split('/');
                        dt = Convert.ToDateTime(spldt[1] + "/" + spldt[0] + "/" + spldt[2]);
                        if (cb_recieved.Checked == true)
                            isrec = "1";
                        else
                            isrec = "0";
                        if (rdb_original.Checked == true)
                            isorgdup = "1";
                        else if (rdb_duplicate.Checked == true)
                            isorgdup = "0";

                        if (btn_certok.Text == "OK")
                        {
                            string selexs = "select * from cert_staff_list where cert_code ='" + certcode + "' and appl_id='" + appl_id + "' and College_Code='" + collegecode + "'";
                            ds.Clear();
                            ds = d2.select_method_wo_parameter(selexs, "Text");
                            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                            {
                                alertpopwindow.Visible = true;
                                lblalerterr.Visible = true;
                                lblalerterr.Text = "Concern Name Already Exist!";
                            }
                            else
                            {
                                string insq = "insert into cert_staff_list(staff_code,appl_id,cert_code,cert_date,IsReceived,org_dup,IsExp,College_Code,cert_no) Values ('" + scode + "','" + appl_id + "','" + certcode + "','" + dt.ToString("MM/dd/yyyy") + "','" + isrec + "','" + isorgdup + "','1','" + collegecode + "','0')";
                                int inscount = d2.update_method_wo_parameter(insq, "Text");
                                if (inscount > 0)
                                {
                                    alertpopwindow.Visible = true;
                                    lblalerterr.Visible = true;
                                    lblalerterr.Text = "Saved Successfully!";
                                    bindexpspread(appl_no, scode, collegecode);
                                    Exper.Visible = false;
                                }
                            }
                        }
                        else if (btn_certok.Text == "Update")
                        {
                            string updq = "update cert_staff_list set staff_code='" + scode + "',cert_date='" + dt.ToString("MM/dd/yyyy") + "',IsReceived='" + isrec + "',org_dup='" + isorgdup + "',cert_no='0' where College_Code='" + collegecode + "' and IsExp='1' and cert_code='" + certcode + "' and appl_id='" + appl_id + "'";
                            int upcount = d2.update_method_wo_parameter(updq, "Text");
                            if (upcount > 0)
                            {
                                alertpopwindow.Visible = true;
                                lblalerterr.Visible = true;
                                lblalerterr.Text = "Updated Successfully!";
                                bindexpspread(appl_no, scode, collegecode);
                                Exper.Visible = false;
                            }
                        }
                    }
                    else
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Visible = true;
                        lblalerterr.Text = "Please Select Concern Name!";
                    }
                }
                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Visible = true;
                    lblalerterr.Text = "Applicant not Exist!";
                }
            }
            else
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Please Select any Applicants and then Proceed!";
            }
        }
        catch { }
    }

    protected void btn_certdel_Click(object sender, EventArgs e)
    {
        try
        {
            string actrow = Convert.ToString(Fpspread13.ActiveSheetView.ActiveRow);
            string actcol = Convert.ToString(Fpspread13.ActiveSheetView.ActiveColumn);
            if (actrow.Trim() != "" && actrow.Trim() != "-1")
            {
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
                string certcode = Convert.ToString(Fpspread13.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Tag);
                string appl_no = Convert.ToString(txt_applno.Text);
                string scode = Convert.ToString(txt_aptscode.Text);
                string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + appl_no + "'");
                if (appl_id.Trim() != "" && appl_id.Trim() != "0")
                {
                    string delq = "Delete from cert_staff_list where cert_code='" + certcode + "' and appl_id='" + appl_id + "' and college_code='" + collcode + "' and IsExp='1'";
                    int delcount = d2.update_method_wo_parameter(delq, "Text");
                    if (delcount > 0)
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Visible = true;
                        lblalerterr.Text = "Deleted Successfully!";
                        bindexpspread(appl_no, scode, collcode);
                        Exper.Visible = false;
                    }
                }
            }
        }
        catch { }
    }

    protected void btn_expdel_Click(object sender, EventArgs e)
    {
        try
        {
            string actrow = Convert.ToString(Fpspread12.ActiveSheetView.ActiveRow);
            string actcol = Convert.ToString(Fpspread12.ActiveSheetView.ActiveColumn);
            if (actrow.Trim() != "" && actrow.Trim() != "-1")
            {
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
                string degcode = Convert.ToString(Fpspread12.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Tag);
                string certcode = Convert.ToString(Fpspread12.Sheets[0].Cells[Convert.ToInt32(actrow), 2].Tag);
                string appl_no = Convert.ToString(txt_applno.Text);
                string scode = Convert.ToString(txt_aptscode.Text);
                string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + appl_no + "'");
                if (appl_id.Trim() != "" && appl_id.Trim() != "0")
                {
                    string delq = "Delete from cert_staff_list where cert_code='" + certcode + "' and degree='" + degcode + "' and appl_id='" + appl_id + "' and college_code='" + collcode + "' and IsExp='0'";
                    int delcount = d2.update_method_wo_parameter(delq, "Text");
                    if (delcount > 0)
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Visible = true;
                        lblalerterr.Text = "Deleted Successfully!";
                        bindcertspread(appl_no, scode, collcode);
                        cert.Visible = false;
                    }
                }
            }
        }
        catch { }
    }

    protected void btn_expok_click(object sender, EventArgs e)
    {
        string collegecode = Convert.ToString(ddlcollege.SelectedItem.Value);
        try
        {
            string[] spldt = new string[2];
            DateTime dt = new DateTime();
            string isorgdup = "";
            if (txt_applno.Text.Trim() != "")
            {
                string appl_no = Convert.ToString(txt_applno.Text);
                string scode = Convert.ToString(txt_aptscode.Text);
                string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + appl_no + "'");
                if (appl_id.Trim() != "" && appl_id.Trim() != "0")
                {
                    if (ddl_deg.SelectedIndex != 0 && ddl_deg.SelectedItem.Text != "Select" && ddl_deg.SelectedItem.Text != "Others" && ddl_certname.SelectedIndex != 0 && ddl_certname.SelectedItem.Text != "Select" && ddl_certname.SelectedItem.Text != "Others")
                    {
                        string certnum = Convert.ToString(txt_certno.Text);
                        if (certnum.Trim() != "")
                        {
                            string certcode = Convert.ToString(ddl_certname.SelectedItem.Value);
                            string degcode = Convert.ToString(ddl_deg.SelectedItem.Value);
                            string certdate = Convert.ToString(txt_expdate.Text);
                            spldt = certdate.Split('/');
                            dt = Convert.ToDateTime(spldt[1] + "/" + spldt[0] + "/" + spldt[2]);
                            if (RadioButton2.Checked == true)
                                isorgdup = "1";
                            else if (RadioButton3.Checked == true)
                                isorgdup = "0";
                            if (btn_expok.Text.Trim() == "OK")
                            {
                                string selexs = "select * from cert_staff_list where cert_code ='" + certcode + "' and appl_id='" + appl_id + "' and degree='" + degcode + "' and College_Code='" + collegecode + "'";
                                ds.Clear();
                                ds = d2.select_method_wo_parameter(selexs, "Text");
                                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                {
                                    alertpopwindow.Visible = true;
                                    lblalerterr.Visible = true;
                                    lblalerterr.Text = "Certificate Name Already Exist!";
                                }
                                else
                                {
                                    string insq = "insert into cert_staff_list(staff_code,appl_id,cert_code,degree,cert_date,org_dup,IsExp,College_Code,cert_no) Values ('" + scode + "','" + appl_id + "','" + certcode + "','" + degcode + "','" + dt.ToString("MM/dd/yyyy") + "','" + isorgdup + "','0','" + collegecode + "','" + certnum + "')";
                                    int inscount = d2.update_method_wo_parameter(insq, "Text");
                                    if (inscount > 0)
                                    {
                                        alertpopwindow.Visible = true;
                                        lblalerterr.Visible = true;
                                        lblalerterr.Text = "Saved Successfully!";
                                        bindcertspread(appl_no, scode, collegecode);
                                        cert.Visible = false;
                                    }
                                }
                            }
                            else if (btn_expok.Text.Trim() == "Update")
                            {
                                string updq = "update cert_staff_list set staff_code='" + scode + "',cert_date='" + dt.ToString("MM/dd/yyyy") + "',org_dup='" + isorgdup + "',cert_no='" + certnum + "' where cert_code='" + certcode + "' and degree='" + degcode + "' and College_Code='" + collegecode + "' and IsExp='0' and appl_id='" + appl_id + "'";
                                int upcount = d2.update_method_wo_parameter(updq, "Text");
                                if (upcount > 0)
                                {
                                    alertpopwindow.Visible = true;
                                    lblalerterr.Visible = true;
                                    lblalerterr.Text = "Updated Successfully!";
                                    bindcertspread(appl_no, scode, collegecode);
                                    cert.Visible = false;
                                }
                            }
                        }
                        else
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Visible = true;
                            lblalerterr.Text = "Please Enter Certificate No!";
                        }
                    }
                    else
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Visible = true;
                        lblalerterr.Text = "Please Select Degree and Certificate Name!";
                    }
                }
                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Visible = true;
                    lblalerterr.Text = "Applicant not Exist!";
                }
            }
            else
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Please Select any Applicants and then Proceed!";
            }
        }
        catch { }
    }

    protected void cdet_OnClick(object sender, EventArgs e)
    {
        try
        {
            string collcode = Convert.ToString(ddlcollege.SelectedValue);
            string appl_no = Convert.ToString(txt_applno.Text);
            string staff_code = Convert.ToString(txt_aptscode.Text);
            string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + appl_no + "'");
            DetailCertificate.Visible = true;
            Application.Visible = false;

            btn_cdetnew.Visible = true;
            Fpspread12.Sheets[0].AutoPostBack = false;
            Fpspread12.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread12.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread12.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread12.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread12.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread12.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread12.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread12.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread12.Sheets[0].RowHeader.Visible = false;

            Fpspread12.Sheets[0].ColumnHeader.RowCount = 0;
            Fpspread12.Sheets[0].ColumnCount = 0;
            Fpspread12.Sheets[0].RowCount = 0;

            Fpspread12.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            Fpspread12.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread12.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread12.Sheets[0].RowCount = 0;
            Fpspread12.Sheets[0].ColumnCount = 6;
            Fpspread12.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread12.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread12.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpspread12.Columns[0].Width = 75;
            Fpspread12.Sheets[0].Columns[0].Locked = true;

            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Degree";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            Fpspread12.Columns[1].Width = 175;
            Fpspread12.Sheets[0].Columns[1].Locked = true;

            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Concern Name";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            Fpspread12.Columns[2].Width = 200;
            Fpspread12.Sheets[0].Columns[2].Locked = true;

            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Certificate No";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
            Fpspread12.Columns[3].Width = 150;
            Fpspread12.Sheets[0].Columns[3].Locked = true;

            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Date";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
            Fpspread12.Columns[4].Width = 100;
            Fpspread12.Sheets[0].Columns[4].Locked = true;

            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Status";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
            Fpspread12.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
            Fpspread12.Columns[5].Width = 100;
            Fpspread12.Sheets[0].Columns[5].Locked = true;

            Fpspread12.Visible = true;

            if (appl_id.Trim() != "" && appl_id.Trim() != "0")
            {
                bindcertspread(appl_no, staff_code, collcode);
            }
        }
        catch { }
    }

    protected void Exp_OnClick(object sender, EventArgs e)
    {
        try
        {
            string collcode = Convert.ToString(ddlcollege.SelectedValue);
            string appl_no = Convert.ToString(txt_applno.Text);
            string staff_code = Convert.ToString(txt_aptscode.Text);
            string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + appl_no + "'");
            ExpCertificate.Visible = true;
            Application.Visible = false;
            btn_newexp.Visible = true;
            Fpspread13.Sheets[0].AutoPostBack = false;
            Fpspread13.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread13.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread13.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread13.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread13.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread13.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread13.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread13.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread13.Sheets[0].RowHeader.Visible = false;
            Fpspread13.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            Fpspread13.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread13.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread13.Sheets[0].RowCount = 0;
            Fpspread13.Sheets[0].ColumnCount = 5;
            Fpspread13.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread13.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread13.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpspread13.Columns[0].Width = 75;
            Fpspread13.Sheets[0].Columns[0].Locked = true;

            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Concern Name";
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            Fpspread13.Columns[1].Width = 200;
            Fpspread13.Sheets[0].Columns[1].Locked = true;

            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Certificate Received";
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            Fpspread13.Columns[2].Width = 125;
            Fpspread13.Sheets[0].Columns[2].Locked = true;

            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Date";
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
            Fpspread13.Columns[3].Width = 150;
            Fpspread13.Sheets[0].Columns[3].Locked = true;

            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Status";
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
            Fpspread13.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
            Fpspread13.Columns[4].Width = 200;
            Fpspread13.Sheets[0].Columns[4].Locked = true;
            Fpspread13.Visible = true;

            if (appl_id.Trim() != "" && appl_id.Trim() != "0")
            {
                bindexpspread(appl_no, staff_code, collcode);
            }
        }
        catch { }
    }

    protected void bindexpspread(string appl_no, string scode, string collcode)
    {
        try
        {
            Fpspread13.Sheets[0].RowCount = 0;
            DataView dv = new DataView();
            string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + appl_no + "'");
            if (appl_id.Trim() != "" && appl_id.Trim() != "0")
            {
                string selq = "select staff_code,appl_id,cert_code,Convert(varchar(10),cert_date,103) as cert_date,IsReceived,org_dup,IsExp,College_Code from cert_staff_list where appl_id='" + appl_id + "' and College_Code='" + collcode + "' and IsExp='1'";
                selq = selq + " select * from TextValTable where TextCriteria='ExpCe' and College_Code='" + collcode + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selq, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    Fpspread13.Sheets[0].AutoPostBack = true;
                    for (int ik = 0; ik < ds.Tables[0].Rows.Count; ik++)
                    {
                        Fpspread13.Sheets[0].RowCount++;
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(ik + 1);
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;

                        ds.Tables[1].DefaultView.RowFilter = " TextCode='" + Convert.ToString(ds.Tables[0].Rows[ik]["cert_code"]) + "'";
                        dv = ds.Tables[1].DefaultView;
                        if (dv.Count > 0)
                        {
                            Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dv[0]["TextVal"]);
                        }
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(ds.Tables[0].Rows[ik]["cert_code"]);
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;

                        if (Convert.ToString(ds.Tables[0].Rows[ik]["IsReceived"]).ToUpper() == "TRUE")
                            Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 2].Text = "Yes";
                        else
                            Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 2].Text = "No";
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;

                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[ik]["cert_date"]);
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;

                        if (Convert.ToString(ds.Tables[0].Rows[ik]["org_dup"]).ToUpper() == "TRUE")
                            Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 4].Text = "Original";
                        else
                            Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 4].Text = "Duplicate";
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;
                        Fpspread13.Sheets[0].Cells[Fpspread13.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
                    }
                    Fpspread13.Sheets[0].PageSize = Fpspread13.Sheets[0].RowCount;
                    Fpspread13.Visible = true;
                }
            }
        }
        catch { }
    }

    #region Staff's Children Details Added by Jeyaprakash on Jan 4th,2017

    protected void ddlclgStfChild_Change(object sender, EventArgs e)
    {
        Fpspread22.Visible = false;
        lblMainStfErr.Visible = false;
        BtnStudAdd.Visible = false;
        collcode = Convert.ToString(ddlclgStfChild.SelectedItem.Value);
        bind_batch();
        binddegree();
        bindbranch();
    }

    protected void lbStfDet_OnClick(object sender, EventArgs e)
    {
        try
        {
            DataSet Chkds = new DataSet();
            string applno = txt_applno.Text.Trim().ToUpper();
            if (!String.IsNullOrEmpty(applno))
            {
                string SelQ = " select resign,settled,ISNULL(Discontinue,'0') as Discontinue from staffmaster sm,staff_appl_master sa where sm.appl_no=sa.appl_no and sm.appl_no='" + applno + "'";
                Chkds.Clear();
                Chkds = d2.select_method_wo_parameter(SelQ, "Text");
                if (Chkds.Tables.Count > 0 && Chkds.Tables[0].Rows.Count > 0)
                {
                    if ((Convert.ToString(Chkds.Tables[0].Rows[0]["resign"]).Trim().ToUpper() == "FALSE" || Convert.ToString(Chkds.Tables[0].Rows[0]["resign"]).Trim().ToUpper() == "0") && (Convert.ToString(Chkds.Tables[0].Rows[0]["settled"]).Trim().ToUpper() == "FALSE" || Convert.ToString(Chkds.Tables[0].Rows[0]["settled"]).Trim().ToUpper() == "0") && (Convert.ToString(Chkds.Tables[0].Rows[0]["Discontinue"]).Trim().ToUpper() == "FALSE" || Convert.ToString(Chkds.Tables[0].Rows[0]["Discontinue"]).Trim().ToUpper() == "0"))
                    {
                        divStfChild.Visible = true;
                        Fpspread22.Visible = false;
                        lblMainStfErr.Visible = false;
                        BtnStudAdd.Visible = false;
                        bindStfcollege();
                        bind_batch();
                        binddegree();
                        bindbranch();
                    }
                    else
                    {
                        if ((Convert.ToString(Chkds.Tables[0].Rows[0]["resign"]).Trim().ToUpper() == "TRUE" || Convert.ToString(Chkds.Tables[0].Rows[0]["resign"]).Trim().ToUpper() == "1") || (Convert.ToString(Chkds.Tables[0].Rows[0]["settled"]).Trim().ToUpper() == "TRUE" || Convert.ToString(Chkds.Tables[0].Rows[0]["settled"]).Trim().ToUpper() == "1"))
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Text = "The Selected Staff has been Relieved!";
                        }
                        else if (Convert.ToString(Chkds.Tables[0].Rows[0]["Discontinue"]).Trim().ToUpper() == "TRUE" || Convert.ToString(Chkds.Tables[0].Rows[0]["Discontinue"]).Trim().ToUpper() == "1")
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Text = "The Selected Staff has been Discontinued!";
                        }
                    }
                }
                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Staff Not Found!";
                }
            }
            else
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Please Select Any Staff!";
            }
        }
        catch { }
    }

    protected void ImageButton15_Click(object sender, EventArgs e)
    {
        divStfChild.Visible = false;
    }

    protected void Fpspread22_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            Fpspread22.SaveChanges();
            byte Check = Convert.ToByte(Fpspread22.Sheets[0].Cells[0, 1].Value);
            if (Check == 1)
            {
                for (int ch = 1; ch < Fpspread22.Sheets[0].RowCount; ch++)
                {
                    Fpspread22.Sheets[0].Cells[ch, 1].Value = 1;
                }
            }
            else
            {
                for (int ch = 1; ch < Fpspread22.Sheets[0].RowCount; ch++)
                {
                    Fpspread22.Sheets[0].Cells[ch, 1].Value = 0;
                }
            }
        }
        catch { }
    }

    protected void btnStfChildGo_Click(object sender, EventArgs e)
    {
        try
        {
            string degree = "";
            string branch = "";
            string myDegree = "";
            string myBranch = "";
            Fpspread22.Visible = false;
            lblMainStfErr.Visible = false;
            BtnStudAdd.Visible = false;

            degree = GetSelectedItemsValueAsString(cblstfchild_degree);
            branch = GetSelectedItemsValueAsString(cblstfchild_branch);

            myDegree = "'" + degree + "'";
            myBranch = "'" + branch + "'";

            if (ddlBatchStfChild.Items.Count == 0)
            {
                lblMainStfErr.Visible = true;
                lblMainStfErr.Text = "Please Select Batch Year!";
                return;
            }
            if (String.IsNullOrEmpty(degree))
            {
                lblMainStfErr.Visible = true;
                lblMainStfErr.Text = "Please Select Any Degree!";
                return;
            }
            if (String.IsNullOrEmpty(branch))
            {
                lblMainStfErr.Visible = true;
                lblMainStfErr.Text = "Please Select Any Branch!";
                return;
            }
            bindGrid(myBranch);
        }
        catch (Exception ex) { }
        //d2.sendErrorMail(ex, collcode, "Staff_Manager.aspx");
    }

    private void bindGrid(string myBranch)
    {
        try
        {
            FarPoint.Web.Spread.CheckBoxCellType cbAll = new FarPoint.Web.Spread.CheckBoxCellType();
            FarPoint.Web.Spread.CheckBoxCellType cbInd = new FarPoint.Web.Spread.CheckBoxCellType();
            string ClgCode = Convert.ToString(ddlclgStfChild.SelectedItem.Value);
            string BatchYear = Convert.ToString(ddlBatchStfChild.SelectedItem.Text);
            string SelQ = string.Empty;
            if (!String.IsNullOrEmpty(txtStfChildAdmNo.Text.Trim()))
                SelQ = " select Roll_No,Reg_No,Roll_Admit,Stud_Name,r.Batch_Year,r.Degree_Code,r.college_code from Registration r,Degree d,Department dt,Course c where r.degree_code=d.degree_code and c.course_id=d.course_id and d.dept_code=dt.dept_code and CC=0 and DelFlag=0 and Exam_Flag<>'Debar' and r.college_code='" + ClgCode + "' and r.Roll_Admit='" + Convert.ToString(txtStfChildAdmNo.Text.Trim()) + "'";
            else
                SelQ = " select Roll_No,Reg_No,Roll_Admit,Stud_Name,r.Batch_Year,r.Degree_Code,r.college_code from Registration r,Degree d,Department dt,Course c where r.degree_code=d.degree_code and c.course_id=d.course_id and d.dept_code=dt.dept_code and CC=0 and DelFlag=0 and Exam_Flag<>'Debar' and r.college_code='" + ClgCode + "' and r.degree_code in(" + myBranch + ") and r.Batch_Year='" + BatchYear + "'";

            SelQ = SelQ + " order by dt.dept_acronym";
            SelQ = SelQ + " select c.Course_Name+'-'+dep.Dept_Name as Dept,d.Degree_Code from Degree d,Course c,Department dep where d.Course_Id=c.Course_Id and d.Dept_Code=dep.Dept_Code and d.college_code='" + ClgCode + "'";
            DataSet myStfDs = new DataSet();
            DataView dvMy = new DataView();
            myStfDs.Clear();
            myStfDs = d2.select_method_wo_parameter(SelQ, "Text");
            if (myStfDs.Tables.Count > 0 && myStfDs.Tables[0].Rows.Count > 0)
            {
                LoadHeader(Fpspread22);
                cbAll.AutoPostBack = true;
                cbInd.AutoPostBack = false;

                Fpspread22.Sheets[0].RowCount++;
                Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 1].CellType = cbAll;
                Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 1].Value = 0;
                Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                for (int myDs = 0; myDs < myStfDs.Tables[0].Rows.Count; myDs++)
                {
                    Fpspread22.Sheets[0].RowCount++;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(myDs + 1);
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 1].CellType = cbInd;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 1].Value = 0;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;

                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(myStfDs.Tables[0].Rows[myDs]["Roll_No"]);
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;

                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(myStfDs.Tables[0].Rows[myDs]["Reg_No"]);
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;

                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(myStfDs.Tables[0].Rows[myDs]["Roll_Admit"]);
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;

                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(myStfDs.Tables[0].Rows[myDs]["Stud_Name"]);
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 5].Font.Size = FontUnit.Medium;

                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(myStfDs.Tables[0].Rows[myDs]["Batch_Year"]);
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 6].Font.Name = "Book Antiqua";
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 6].Font.Size = FontUnit.Medium;

                    myStfDs.Tables[1].DefaultView.RowFilter = " Degree_Code='" + Convert.ToString(myStfDs.Tables[0].Rows[myDs]["Degree_Code"]) + "'";
                    dvMy = myStfDs.Tables[1].DefaultView;
                    if (dvMy.Count > 0)
                        Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 7].Text = Convert.ToString(dvMy[0]["Dept"]);
                    else
                        Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 7].Text = "";
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 7].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 7].Font.Name = "Book Antiqua";
                    Fpspread22.Sheets[0].Cells[Fpspread22.Sheets[0].RowCount - 1, 7].Font.Size = FontUnit.Medium;
                }
                Fpspread22.Sheets[0].PageSize = Fpspread22.Sheets[0].RowCount;
                Fpspread22.Sheets[0].FrozenRowCount = 1;
                Fpspread22.Visible = true;
                lblMainStfErr.Visible = false;
                BtnStudAdd.Visible = true;
            }
            else
            {
                Fpspread22.Visible = false;
                lblMainStfErr.Visible = false;
                BtnStudAdd.Visible = false;
                lblMainStfErr.Visible = true;
                lblMainStfErr.Text = "No Record(s) Found!";
            }
        }
        catch { }
    }

    private void LoadHeader(FarPoint.Web.Spread.FpSpread MySpread)
    {
        MySpread.Visible = false;
        lblMainStfErr.Visible = false;
        BtnStudAdd.Visible = false;

        MySpread.Sheets[0].AutoPostBack = false;
        MySpread.CommandBar.Visible = false;
        MySpread.Sheets[0].RowHeader.Visible = false;
        MySpread.Sheets[0].ColumnHeader.RowCount = 1;
        MySpread.Sheets[0].ColumnHeader.Columns.Count = 8;
        MySpread.Sheets[0].RowCount = 0;

        FarPoint.Web.Spread.StyleInfo myStyle = new FarPoint.Web.Spread.StyleInfo();
        myStyle.Font.Size = FontUnit.Medium;
        myStyle.Font.Bold = true;
        myStyle.Font.Name = "Book Antiqua";
        myStyle.HorizontalAlign = HorizontalAlign.Center;
        myStyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
        myStyle.ForeColor = Color.Black;
        MySpread.Sheets[0].ColumnHeader.DefaultStyle = myStyle;

        MySpread.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
        MySpread.Columns[0].Width = 50;
        MySpread.Columns[0].Locked = true;
        MySpread.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
        MySpread.Columns[1].Width = 50;
        MySpread.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Roll No";
        MySpread.Columns[2].Width = 100;
        MySpread.Columns[2].Locked = true;
        MySpread.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Reg No";
        MySpread.Columns[3].Width = 100;
        MySpread.Columns[3].Locked = true;
        MySpread.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Admission No";
        MySpread.Columns[4].Width = 100;
        MySpread.Columns[4].Locked = true;
        MySpread.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Student Name";
        MySpread.Columns[5].Width = 200;
        MySpread.Columns[5].Locked = true;
        MySpread.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Batch Year";
        MySpread.Columns[6].Width = 100;
        MySpread.Columns[6].Locked = true;
        MySpread.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Department";
        MySpread.Columns[7].Width = 200;
        MySpread.Columns[7].Locked = true;
    }

    protected void BtnStudAdd_Click(object sender, EventArgs e)
    {
        try
        {
            int MyStfCount = 0;
            string InsQ = string.Empty;
            int InsCount = 0;
            string ClgCode = Convert.ToString(ddlclgStfChild.SelectedItem.Value);
            string ApplID = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + Convert.ToString(txt_applno.Text.Trim().ToUpper()) + "'");
            if (checkedOK(Fpspread22, out MyStfCount))
            {
                Fpspread22.SaveChanges();
                for (int spr = 1; spr < Fpspread22.Sheets[0].RowCount; spr++)
                {
                    byte myChk = Convert.ToByte(Fpspread22.Sheets[0].Cells[spr, 1].Value);
                    if (myChk == 1)
                    {
                        string RollNo = Convert.ToString(Fpspread22.Sheets[0].Cells[spr, 2].Text).Trim();
                        string RegNo = Convert.ToString(Fpspread22.Sheets[0].Cells[spr, 3].Text).Trim();
                        string AdmNo = Convert.ToString(Fpspread22.Sheets[0].Cells[spr, 4].Text).Trim();
                        InsQ = "update Registration set Is_Stud_Staff='1',staff_appl_id='" + ApplID + "' where Roll_No='" + RollNo + "' and Reg_No='" + RegNo + "' and Roll_Admit='" + AdmNo + "' and college_code='" + ClgCode + "'";
                        int myNewC = d2.update_method_wo_parameter(InsQ, "Text");
                        if (myNewC > 0)
                            InsCount += 1;
                    }
                }
                if (InsCount > 0)
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Staff's Children Details Added Successfully!";
                }
            }
            else
            {
                lblMainStfErr.Visible = true;
                lblMainStfErr.Text = "Please Select Any Student!";
            }
        }
        catch { }
    }

    protected void cbstfchild_degree_checkedchange(object sender, EventArgs e)
    {
        chkchange(cbstfchild_degree, cblstfchild_degree, txtstfchild_degree, "Degree");
        bindbranch();
    }

    protected void cblstfchild_degree_SelectedIndexChanged(object sender, EventArgs e)
    {
        chklstchange(cbstfchild_degree, cblstfchild_degree, txtstfchild_degree, "Degree");
        bindbranch();
    }

    protected void cbstfchild_branch_checkedchange(object sender, EventArgs e)
    {
        chkchange(cbstfchild_branch, cblstfchild_branch, txtstfchild_branch, "Branch");
    }

    protected void cblstfchild_branch_SelectedIndexChanged(object sender, EventArgs e)
    {
        chklstchange(cbstfchild_branch, cblstfchild_branch, txtstfchild_branch, "Branch");
    }

    protected void bindStfcollege()
    {
        try
        {
            ds.Clear();
            ddlclgStfChild.Items.Clear();
            string selq = "select cp.college_code,cf.collname from collegeprivilages cp,collinfo cf where user_code=" + Session["usercode"].ToString() + " and cp.college_code=cf.college_code";
            ds = d2.select_method_wo_parameter(selq, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlclgStfChild.DataSource = ds;
                ddlclgStfChild.DataTextField = "collname";
                ddlclgStfChild.DataValueField = "college_code";
                ddlclgStfChild.DataBind();
            }
        }
        catch { }
    }

    public void bind_batch()
    {
        try
        {
            ds.Clear();
            ds = d2.select_method_wo_parameter("select distinct batch_year from tbl_attendance_rights order by batch_year desc", "text");
            ddlBatchStfChild.Items.Clear();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlBatchStfChild.DataSource = ds;
                ddlBatchStfChild.DataTextField = "batch_year";
                ddlBatchStfChild.DataValueField = "batch_year";
                ddlBatchStfChild.DataBind();
            }
        }
        catch { }
    }

    protected void binddegree()
    {
        try
        {
            ds.Clear();
            string selq = "";
            if (usercode != "")
            {
                selq = "select distinct degree.course_id,course.course_name from degree,course,deptprivilages  where course.course_id=degree.course_id and course.college_code = degree.college_code  and degree.college_code='" + Convert.ToString(collcode) + "' and deptprivilages.Degree_code=degree.Degree_code and   user_code=" + usercode + " order by course.course_name";
            }
            else
            {
                selq = "select distinct degree.course_id,course.course_name  from degree,course,deptprivilages where  course.course_id=degree.course_id and course.college_code = degree.college_code   and degree.college_code='" + Convert.ToString(collcode) + "' and deptprivilages.Degree_code=degree.Degree_code  and group_code=" + group_user + " order by course.course_name";
            }
            ds = d2.select_method_wo_parameter(selq, "Text");
            cblstfchild_degree.Items.Clear();
            txtstfchild_degree.Text = "--Select--";
            cbstfchild_degree.Checked = false;
            if (ds.Tables[0].Rows.Count > 0)
            {
                cblstfchild_degree.DataSource = ds;
                cblstfchild_degree.DataTextField = "course_name";
                cblstfchild_degree.DataValueField = "course_id";
                cblstfchild_degree.DataBind();

                if (cblstfchild_degree.Items.Count > 0)
                {
                    for (int i = 0; i < cblstfchild_degree.Items.Count; i++)
                    {
                        cblstfchild_degree.Items[i].Selected = true;
                    }
                    txtstfchild_degree.Text = lblstfchild_degree.Text + "(" + cblstfchild_degree.Items.Count + ")";
                    cbstfchild_degree.Checked = true;
                }
            }
            bindbranch();
        }
        catch { }
    }

    public void bindbranch()
    {
        try
        {
            string selq = "";
            string buildvalue1 = "";
            cblstfchild_branch.Items.Clear();
            txtstfchild_branch.Text = "--Select--";
            cbstfchild_branch.Checked = false;
            if (cblstfchild_degree.Items.Count > 0)
            {
                buildvalue1 = GetSelectedItemsValueAsString(cblstfchild_degree);
                if (String.IsNullOrEmpty(buildvalue1))
                    buildvalue1 = "0";
                selq = "select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course,deptprivilages where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.course_id in('" + buildvalue1 + "') and degree.college_code='" + collcode + "' and deptprivilages.Degree_code=degree.Degree_code and user_code='" + usercode + "'";
                ds = d2.select_method_wo_parameter(selq, "Text");
                cblstfchild_branch.Items.Clear();
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cblstfchild_branch.DataSource = ds;
                    cblstfchild_branch.DataTextField = "dept_name";
                    cblstfchild_branch.DataValueField = "degree_code";
                    cblstfchild_branch.DataBind();
                    if (cblstfchild_branch.Items.Count > 0)
                    {
                        for (int i = 0; i < cblstfchild_branch.Items.Count; i++)
                        {
                            cblstfchild_branch.Items[i].Selected = true;
                        }
                        txtstfchild_branch.Text = lblstfchild_branch.Text + "(" + cblstfchild_branch.Items.Count + ")";
                        cbstfchild_branch.Checked = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    #endregion

    protected void bindcertspread(string appl_no, string scode, string collcode)
    {
        try
        {
            Fpspread12.Sheets[0].RowCount = 0;
            DataView dv = new DataView();
            DataView dv1 = new DataView();
            string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + appl_no + "'");
            if (appl_id.Trim() != "" && appl_id.Trim() != "0")
            {
                string selq = "select staff_code,appl_id,degree,cert_code,Convert(varchar(10),cert_date,103) as cert_date,org_dup,College_Code,cert_no from cert_staff_list where appl_id='" + appl_id + "' and College_Code='" + collcode + "' and IsExp='0'";
                selq = selq + " select * from TextValTable where TextCriteria='DegCe' and College_Code='" + collcode + "'";
                selq = selq + " select * from TextValTable where TextCriteria='Cert' and College_Code='" + collcode + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selq, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    Fpspread12.Sheets[0].AutoPostBack = true;
                    for (int ik = 0; ik < ds.Tables[0].Rows.Count; ik++)
                    {
                        Fpspread12.Sheets[0].RowCount++;
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(ik + 1);
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;

                        ds.Tables[1].DefaultView.RowFilter = " TextCode='" + Convert.ToString(ds.Tables[0].Rows[ik]["degree"]) + "'";
                        dv = ds.Tables[1].DefaultView;
                        if (dv.Count > 0)
                        {
                            Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dv[0]["TextVal"]);
                        }
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(ds.Tables[0].Rows[ik]["degree"]);
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;


                        ds.Tables[2].DefaultView.RowFilter = " TextCode='" + Convert.ToString(ds.Tables[0].Rows[ik]["cert_code"]) + "'";
                        dv1 = ds.Tables[2].DefaultView;
                        if (dv1.Count > 0)
                        {
                            Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(dv1[0]["TextVal"]);
                        }
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 2].Tag = Convert.ToString(ds.Tables[0].Rows[ik]["cert_code"]);
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;

                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[ik]["cert_no"]);
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;

                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[ik]["cert_date"]);
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;

                        if (Convert.ToString(ds.Tables[0].Rows[ik]["org_dup"]).ToUpper() == "TRUE")
                            Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 5].Text = "Original";
                        else
                            Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 5].Text = "Duplicate";
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 5].Font.Size = FontUnit.Medium;
                        Fpspread12.Sheets[0].Cells[Fpspread12.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Center;
                    }
                    Fpspread12.Sheets[0].PageSize = Fpspread12.Sheets[0].RowCount;
                    Fpspread12.Visible = true;
                }
            }
        }
        catch { }
    }

    protected void ddl_cname_Change(object sender, EventArgs e)
    {
        if (ddl_cname.SelectedItem.Text == "Others")
        {
            Plus.Visible = true;
            lbl_header.Text = "Concern Name";
            txt_add.Text = "";
        }
    }

    protected void ddl_deg_change(object sender, EventArgs e)
    {
        if (ddl_deg.SelectedItem.Text == "Others")
        {
            Plus.Visible = true;
            lbl_header.Text = "Degree Name";
            txt_add.Text = "";
        }
    }

    protected void ddl_certname_change(object sender, EventArgs e)
    {
        if (ddl_certname.SelectedItem.Text == "Others")
        {
            Plus.Visible = true;
            lbl_header.Text = "Certificate Name";
            txt_add.Text = "";
        }
    }

    protected void btn_newexp_OnClick(object sender, EventArgs e)
    {
        Exper.Visible = true;
        btn_certok.Text = "OK";
        btn_certdel.Visible = false;
        bindexpcert();
        ddl_cname.SelectedIndex = 0;
        ddl_cname.Enabled = true;
        txt_certdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        cb_recieved.Checked = false;
        rdb_original.Checked = true;
        rdb_duplicate.Checked = false;
    }

    protected void btn_certclose_OnClick(object sender, EventArgs e)
    {
        Exper.Visible = false;
    }

    protected void btn_cdetnew_OnClick(object sender, EventArgs e)
    {
        cert.Visible = true;
        btn_expok.Text = "OK";
        btn_expdel.Visible = false;
        bindcertdegree();
        bindcertname();
        ddl_deg.SelectedIndex = 0;
        ddl_certname.SelectedIndex = 0;
        ddl_deg.Enabled = true;
        ddl_certname.Enabled = true;
        txt_certno.Text = "";
        txt_expdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        RadioButton2.Checked = true;
        RadioButton3.Checked = false;
    }

    protected void btn_expclose_OnClick(object sender, EventArgs e)
    {
        cert.Visible = false;
    }

    protected void btn_fplus_OnClick(object sender, EventArgs e)
    {
        Plusapt.Visible = true;
        btn_ftypeadd.Visible = true;
        btn_plusAdd.Visible = false;
        btn_bnameadd.Visible = false;
        btn_branchadd.Visible = false;
        headerapt.Text = "Faculty Type";
    }

    protected void btn_fminus_OnClick(object sender, EventArgs e)
    {
        try
        {
            string faculty = Convert.ToString(ddl_ftype.SelectedItem);
            string query = "delete from TextValTable where TextVal='" + faculty + "' and college_code='" + collegecode1 + "'";
            int count = d2.update_method_wo_parameter(query, "Text");
            bindfaculty();
        }
        catch { }
    }

    protected void btn_bnameplus_OnClick(object sender, EventArgs e)
    {
        Plusapt.Visible = true;
        btn_ftypeadd.Visible = false;
        btn_plusAdd.Visible = false;
        btn_bnameadd.Visible = true;
        btn_branchadd.Visible = false;
        headerapt.Text = "Bank Name";
    }

    protected void btn_bnameminus_OnClick(object sender, EventArgs e)
    {
        try
        {
            string bank = Convert.ToString(ddl_bankname.SelectedItem);
            string query = "delete from TextValTable where TextVal='" + bank + "' and college_code='" + collegecode1 + "'";
            int count = d2.update_method_wo_parameter(query, "Text");
            bindBank();
        }
        catch { }
    }

    protected void btn_branchplus_OnClick(object sender, EventArgs e)
    {
        Plusapt.Visible = true;
        btn_ftypeadd.Visible = false;
        btn_plusAdd.Visible = false;
        btn_bnameadd.Visible = false;
        btn_branchadd.Visible = true;
        headerapt.Text = "Branch Name";
    }

    protected void btn_branchminus_OnClick(object sender, EventArgs e)
    {
        try
        {
            string branch = Convert.ToString(ddl_branchname.SelectedItem);
            string query = "delete from TextValTable where TextVal='" + branch + "' and college_code='" + collegecode1 + "'";
            int count = d2.update_method_wo_parameter(query, "Text");
            bindBranch();
        }
        catch { }
    }

    protected void update_method()
    {
        checkupdateapply = true;
        string oldstaffcode = Convert.ToString(ViewState["scode"]);
        string applno = txt_applno.Text.Trim().ToUpper();
        string fname = txt_fname.Text;
        fname = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(fname);
        string mname = txt_mname.Text;
        mname = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(mname);
        string surname = txt_surname.Text;
        surname = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(surname);
        string scode = txt_aptscode.Text.Trim().ToUpper();
        string stream = ddl_Stream.SelectedItem.Text;
        string adate = txt_adate.Text;
        DateTime adt = new DateTime();
        string collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);

        if (adate != "")
        {
            string[] a = adate.Split('/');
            adt = Convert.ToDateTime(a[1] + "/" + a[0] + "/" + a[2]);
        }
        string postapplied = txt_papplied.Text;
        string dept = txt_popdept.Text;
        string stype = txt_popstype.Text;
        string adharno = txt_adharno.Text;

        string payscale = ddl_payscale.SelectedItem.Text;
        string shift = ddl_shift.SelectedItem.Text;
        string postappointed = ddl_pappointed.SelectedItem.Value;
        string appointeddept = ddl_appdept.SelectedItem.Value;
        string appointedstype = string.Empty;

        if (ddl_appstype.SelectedItem.Text == "Others")
            appointedstype = Convert.ToString(txtStfType.Text);
        else
        {
            appointedstype = Convert.ToString(ddl_appstype.SelectedItem.Text);
            if (appointedstype == "Select")
            {
                err.Visible = true;
                err.Text = "Please Select Staff Type!";
                return;
            }
            string GetStfType = d2.GetFunction("select value from Master_Settings where settings='Retire_Age_Settings' and value like '" + appointedstype + "%'");
            if (String.IsNullOrEmpty(GetStfType) || GetStfType.Trim() == "0")
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Please Set the Retirement Age!";
                return;
            }
        }
        string appointedcategory = ddl_appcat.SelectedItem.Value;
        if (txt_applno.Text == "")
        {
            err.Visible = true;
            err.Text = "Please Enter Application No!";
            return;
        }
        if (txt_aptscode.Text == "")
        {
            err.Visible = true;
            err.Text = "Please Enter Staff Code!";
            return;
        }
        if (appointedstype.Trim() == "")
        {
            err.Visible = true;
            err.Text = "Please Enter the Staff Type!";
            return;
        }
        if (appointedcategory.Trim() == "Select")
        {
            err.Visible = true;
            err.Text = "Please Enter Staff Category!";
            return;
        }
        string doj = txt_appdoj.Text;
        string dtj = "";
        if (doj != "")
        {
            string[] adj = doj.Split('/');
            dtj = " ,join_date='" + adj[1] + "/" + adj[0] + "/" + adj[2] + "'";
        }
        else { doj = ""; }

        string Nature = "";
        if (rdb_ftime.Checked == true)
            Nature = "0";
        if (rdb_ptime.Checked == true)
            Nature = "1";
        string paytype = "";
        if (rdb_regular.Checked == true)
            paytype = "0";
        if (rdb_cons.Checked == true)
            paytype = "1";
        string ppf = txt_popfd.Text;
        string ppfd = "";
        string pptd = "";
        string rdt = "";
        if (ppf != "")
        {
            string[] af = ppf.Split(' ');
            string[] afd = af[0].Split('/');
            ppfd = " ,periodfrom='" + afd[1] + "/" + afd[0] + "/" + afd[2] + "'";
        }
        else { ppf = ""; }
        string ppt = txt_poptd.Text;
        if (ppt != "")
        {
            string[] at = ppt.Split(' ');
            string[] atd = at[0].Split('/');
            pptd = ",periodto='" + atd[1] + "/" + atd[0] + "/" + atd[2] + "'";
        }
        else { pptd = ""; }
        string rd = txt_retire.Text;
        if (rd != "")
        {
            string[] aaa = rd.Split(' ');
            string abc = aaa[0];
            string[] ard = abc.Split('/');
            rdt = ",retr_date='" + ard[1] + "/" + ard[0] + "/" + ard[2] + "'";
        }
        else { rdt = ""; }

        string manuallop = "";
        if (chkmanuallop.Checked == true)
            manuallop = "1";
        string facultytype = ddl_ftype.SelectedItem.Text;
        string noofincr = txt_incr.Text;
        string acno = txt_acno.Text;
        string bname = ddl_bankname.SelectedItem.Text;
        string branch = ddl_branchname.SelectedItem.Text;
        string ifsc = txt_ifsc.Text;
        string stfstat = ddl_popstat.SelectedItem.Text;
        string pfno = txt_pfno.Text;
        string panno = txt_panno.Text;
        string licno = txt_licno.Text;
        string loanno = txt_loanno.Text;
        string gpfno = txt_gpf.Text;
        string esino = txt_esi.Text;
        string uanno = txt_uan.Text;
        int clgBank = 0;

        string bankactype = "";
        if (rdb_own.Checked == true)
            bankactype = "1";
        if (rdb_nominne.Checked == true)
            bankactype = "2";
        string paymode = "";
        if (rdb_cash.Checked == true)
            paymode = "0";
        if (rdb_cheque.Checked == true)
            paymode = "1";
        if (rdb_credit.Checked == true)
            paymode = "2";
        string honour = "";
        if (cb_honour.Checked == true)
            honour = "1";
        else
            honour = "0";
        if (txt_priority.Text != "")//delsi0503
        {
            int priorityval = Convert.ToInt32(txt_priority.Text);
        }
        if (ddl_colbank.Text.ToUpper() != "SELECT" && ddl_colbank.Text != "")//delsi 23/05
        {
            clgBank = Convert.ToInt32(ddl_colbank.SelectedItem.Value);

        }

        string stfcodeupd = d2.GetFunction("select value from Master_Settings where settings='HR_StaffUpdate' and value is not null and value<>'' and userCode='" + usercode + "'");

        string upquery = "";
        if (scode.Trim() != "" && oldstaffcode.Trim() != "")
        {
            upquery = " update staffmaster set staff_code='" + scode + "',staff_name ='" + fname + "',appointed_date='" + adt + "',adharcardno ='" + adharno + "',bankaccount='" + acno + "',probation='',pfnumber='" + pfno + "'" + dtj + ",honourstf='" + honour + "',pangirnumber='" + panno + "'" + ppfd + "" + pptd + ",prob_from='',prob_to=''" + rdt + ",lic_no='" + licno + "',loan_no='" + loanno + "',mid_name='" + mname + "',sur_name='" + surname + "',bank_name='" + bname + "',branch_name='" + branch + "',ifsc_code='" + ifsc + "',esi_no='" + esino + "',stream='" + stream + "',gpfnumber='" + gpfno + "',UAN_No='" + uanno + "',clgbankcode='" + clgBank + "' where staff_code ='" + oldstaffcode + "' and college_code = '" + collegecode1 + "'";

            upquery = upquery + " update stafftrans set staff_code='" + scode + "',desig_code='" + postappointed + "',stftype ='" + appointedstype + "' ,category_code='" + appointedcategory + "',stfstatus='" + stfstat + "',stfnature='" + Nature + "',dept_code='" + appointeddept + "',paytype='" + paytype + "',IncrementTime='" + noofincr + "',FacultyType='" + facultytype + "',BankAccType='" + bankactype + "',PayMode='" + paymode + "',payscale='" + payscale + "',shift='" + shift + "',IsManualLOP='" + manuallop + "' where staff_code='" + oldstaffcode + "' and latestrec='1'";
            upquery = upquery + " update staffphoto set staff_code='" + scode + "' where staff_code='" + oldstaffcode + "'";

            if (scode.Trim() != oldstaffcode.Trim() && stfcodeupd.Trim() == "1")
            {
                string rollquery = rollnoupdate(oldstaffcode, scode);
                try
                {
                    int rollcount = d2.update_method_wo_parameter(rollquery, "Text");
                }
                catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "Staff_Manager.aspx"); }

                string staffcodequery = staffcodeupdate(oldstaffcode, scode);
                try
                {
                    int staffcount = d2.update_method_wo_parameter(staffcodequery, "Text");
                }
                catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "Staff_Manager.aspx"); }

                string subcodequery = substaffcodeupdate(oldstaffcode, scode);
                try
                {
                    int substaffcount = d2.update_method_wo_parameter(subcodequery, "Text");
                }
                catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "Staff_Manager.aspx"); }
            }

            int count = d2.update_method_wo_parameter(upquery, "Text");
            if (count != 0)
            {
                string img = Convert.ToString(ViewState["stfimg"]);
                string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + applno + "'");
                if (img.Trim() != "")
                {
                    FileStream fs = new FileStream(Server.MapPath("~/Staff Photo/") + img, FileMode.Open, FileAccess.Read);
                    string sql = "select photo from staffphoto where staff_code='" + scode + "'";
                    DataSet dsSt = new DataSet();
                    dsSt = d2.select_method_wo_parameter(sql, "Text");
                    if (dsSt.Tables[0].Rows.Count > 0)
                    {
                        BinaryReader br = new BinaryReader(fs);
                        Byte[] bytes = br.ReadBytes((Int32)fs.Length);
                        string stfphoto = Path.GetFileName("~/Staff Photo/");
                        string stdphotopath = Server.MapPath("~/Staff Photo/") + img;
                        string stdphotoext = System.IO.Path.GetExtension(img);

                        string insphoto = "if exists (select photo from staffphoto where staff_code='" + scode + "')";
                        insphoto = insphoto + " update staffphoto set photo=@photo,appl_id=@appl_id where staff_code='" + scode + "'";
                        insphoto = insphoto + " else insert into staffphoto (staff_code,photo,appl_id) values('" + scode + "',@photo,@appl_id)";

                        SqlCommand cmd = new SqlCommand(insphoto, con);
                        SqlParameter uploadedsubject_name = new SqlParameter("@photo", SqlDbType.Binary, bytes.Length);
                        uploadedsubject_name.Value = bytes;
                        cmd.Parameters.Add(uploadedsubject_name);

                        uploadedsubject_name = new SqlParameter("@appl_id", SqlDbType.BigInt, 50);
                        uploadedsubject_name.Value = appl_id;
                        cmd.Parameters.Add(uploadedsubject_name);

                        br.Close();
                        fs.Close();
                        con.Close();
                        con.Open();
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        BinaryReader br = new BinaryReader(fs);
                        Byte[] bytes = br.ReadBytes((Int32)fs.Length);

                        string stfphoto = Path.GetFileName("~/Staff Photo/img");
                        string stdphotopath = Server.MapPath("~/Staff Photo/") + fileuploadbrowse.FileName;
                        string stdphotoext = System.IO.Path.GetExtension(fileuploadbrowse.FileName);

                        string insphoto = "if exists (select photo from staffphoto where staff_code='" + scode + "')";
                        insphoto = insphoto + " update staffphoto set photo=@photo,appl_id=@appl_id where staff_code='" + scode + "'";
                        insphoto = insphoto + " else insert into staffphoto (staff_code,photo,appl_id) values('" + scode + "',@photo,@appl_id)";

                        SqlCommand cmd = new SqlCommand(insphoto, con);
                        SqlParameter uploadedsubject_name = new SqlParameter("@photo", SqlDbType.Binary, bytes.Length);
                        uploadedsubject_name.Value = bytes;
                        cmd.Parameters.Add(uploadedsubject_name);

                        uploadedsubject_name = new SqlParameter("@appl_id", SqlDbType.BigInt, 50);
                        uploadedsubject_name.Value = appl_id;
                        cmd.Parameters.Add(uploadedsubject_name);

                        br.Close();
                        fs.Close();
                        con.Close();
                        con.Open();
                        cmd.ExecuteNonQuery();
                    }
                }
                else
                {
                    string updQ = " if exists (select photo from staffphoto where appl_id='" + appl_id + "') update staffphoto set staff_code='" + scode + "' where appl_id='" + appl_id + "'";
                    int MyUpd = d2.update_method_wo_parameter(updQ, "Text");
                }

                string signimg = Convert.ToString(ViewState["signimg"]);
                if (signimg.Trim() != "")
                {
                    FileStream fs = new FileStream(Server.MapPath("~/Staff Signature/") + signimg, FileMode.Open, FileAccess.Read);

                    string sql = "select StaffSign from staffphoto where staff_code='" + scode + "'";
                    DataSet dsSt = new DataSet();
                    dsSt = d2.select_method_wo_parameter(sql, "Text");
                    if (dsSt.Tables[0].Rows.Count > 0)
                    {
                        BinaryReader br = new BinaryReader(fs);
                        Byte[] bytes = br.ReadBytes((Int32)fs.Length);
                        string stfphoto = Path.GetFileName("~/Staff Signature/");
                        string stdphotopath = Server.MapPath("~/Staff Signature/") + signimg;
                        string stdphotoext = System.IO.Path.GetExtension(signimg);

                        string insphoto = "if exists (select StaffSign from staffphoto where staff_code='" + scode + "')";
                        insphoto = insphoto + " update staffphoto set StaffSign=@StaffSign where staff_code='" + scode + "'";
                        insphoto = insphoto + " else insert into staffphoto (staff_code,StaffSign) values('" + scode + "',@StaffSign)";

                        SqlCommand cmd = new SqlCommand(insphoto, con);
                        SqlParameter uploadedsubject_name = new SqlParameter("@StaffSign", SqlDbType.Binary, bytes.Length);
                        uploadedsubject_name.Value = bytes;
                        cmd.Parameters.Add(uploadedsubject_name);

                        br.Close();
                        fs.Close();
                        con.Close();
                        con.Open();
                        cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        BinaryReader br = new BinaryReader(fs);
                        Byte[] bytes = br.ReadBytes((Int32)fs.Length);

                        string stfphoto = Path.GetFileName("~/Staff Signature/img");
                        string stdphotopath = Server.MapPath("~/Staff Signature/") + fileuploadsign.FileName;
                        string stdphotoext = System.IO.Path.GetExtension(fileuploadsign.FileName);

                        string insphoto = "if exists (select StaffSign from staffphoto where staff_code='" + scode + "')";
                        insphoto = insphoto + " update staffphoto set StaffSign=@StaffSign where staff_code='" + scode + "'";
                        insphoto = insphoto + " else insert into staffphoto (staff_code,StaffSign) values('" + scode + "',@StaffSign)";

                        SqlCommand cmd = new SqlCommand(insphoto, con);
                        SqlParameter uploadedsubject_name = new SqlParameter("@StaffSign", SqlDbType.Binary, bytes.Length);
                        uploadedsubject_name.Value = bytes;
                        cmd.Parameters.Add(uploadedsubject_name);

                        br.Close();
                        fs.Close();
                        con.Close();
                        con.Open();
                        cmd.ExecuteNonQuery();
                    }
                }

                alertpopwindow.Visible = true;
                lblalerterr.Text = "Updated Successfully";
                div_Addapt.Visible = false;
                //btn_aptgo_Click(sender, e);
                appointed();
                clearapt();
                ViewState["stfimg"] = "";
                ViewState["signimg"] = "";
                ViewState["scode"] = "";
            }
        }
        else
        {
            err.Visible = true;
            err.Text = "Please Enter Staff Code!";
        }
    }

    protected void btn_update_OnClick(object sender, EventArgs e)//delsi1602
    {
        try
        {

            string appl_no = txt_applno.Text.Trim().ToUpper();
            btn_priorityyes.Visible = false;
            btn_priorityno.Visible = false;
            string checkpriority = Convert.ToString(ViewState["checkpriority"]);
            if (txt_priority.Text == "")
            {
                update_method();


            }
            if (checkpriority == "0")
            {
                if (txt_priority.Text != "")
                {
                    int priority = Convert.ToInt32(txt_priority.Text);
                    string priority_val = d2.GetFunction("select PrintPriority from staffmaster  where college_code='" + collegecode1 + "' and PrintPriority='" + priority + "'");
                    string staff_prority = d2.GetFunction("select PrintPriority from staffmaster  where college_code='" + collegecode1 + "' and appl_no='" + appl_no + "'");
                    if (staff_prority == Convert.ToString(txt_priority.Text))
                    {

                        update_method();
                        return;

                    }
                    else
                    {

                        if (priority_val != "" && priority_val != "0")
                        {

                            if (priority == Convert.ToInt32(priority_val))
                            {
                                alertpopuppriority.Visible = true;
                                lbl_alertpriority.Visible = true;
                                lbl_alertpriority.Text = "Do You Want To Reset Priority For All the Staff?";

                            }
                        }
                        if (priority_val == "0")
                        {
                            update_method();
                            string quer = "if exists (select PrintPriority from staffmaster  where appl_no='" + appl_no + "' and college_code='" + collegecode1 + "')update staffmaster set PrintPriority='" + priority + "'where appl_no='" + appl_no + "' and college_code='" + collegecode1 + "' else insert into staffmaster(PrintPriority) values('" + priority + "')";
                            int count = d2.update_method_wo_parameter(quer, "Text");

                        }
                    }
                }
            }
            if (checkpriority == "1")
            {
                if (txt_priority.Text != "")
                {
                    int priority = Convert.ToInt32(txt_priority.Text);
                    string priority_val = d2.GetFunction("select PrintPriority from staffmaster  where college_code='" + collegecode1 + "' and PrintPriority='" + priority + "'");
                    string staff_prority = d2.GetFunction("select PrintPriority from staffmaster  where college_code='" + collegecode1 + "' and appl_no='" + appl_no + "'");
                    if (staff_prority == Convert.ToString(txt_priority.Text))
                    {

                        update_method();
                        return;

                    }
                    else
                    {

                        if (priority_val != "" && priority_val != "0")
                        {

                            if (priority == Convert.ToInt32(priority_val))
                            {
                                alertpopuppriority.Visible = true;
                                lbl_alertpriority.Visible = true;
                                lbl_alertpriority.Text = "Do You Want To Reset Priority For All the Staff?";

                            }
                        }
                        if (priority_val == "0")
                        {
                            update_method();//delsi 0108


                            //  string quer = "if exists (select PrintPriority from staffmaster  where appl_no='" + appl_no + "' and college_code='" + collegecode1 + "')update staffmaster set PrintPriority='" + priority + "'where appl_no='" + appl_no + "' and college_code='" + collegecode1 + "' else insert into staffmaster(PrintPriority) values('" + priority + "')";
                            //  int count = d2.update_method_wo_parameter(quer, "Text");

                        }
                    }

                }

            }

        }
        catch (Exception ex)
        {

            d2.sendErrorMail(ex, collegecode1, "Staff_Manager.aspx");
        }
    }

    protected void ImageButton9_Click(object sender, ImageClickEventArgs e)
    {
        Application.Visible = false;
    }

    protected void clearapt()
    {
        txt_applno.Text = "";
        txt_popscode.Text = "";
        txt_fname.Text = "";
        txt_mname.Text = "";
        txt_surname.Text = "";
        txt_papplied.Text = "";
        txt_popdept.Text = "";
        txt_popstype.Text = "";
        rdb_ptime.Checked = false;
        rdb_cons.Checked = false;
        txt_incr.Text = "";
        txt_ifsc.Text = "";
        txt_acno.Text = "";
        txt_pfno.Text = "";
        txt_loanno.Text = "";
        txt_licno.Text = "";
        txt_esi.Text = "";
        txt_panno.Text = "";
        txt_gpf.Text = "";
        txt_adharno.Text = "";
        txt_adate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_popfd.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_poptd.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_retire.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_appdoj.Text = DateTime.Now.ToString("dd/MM/yyyy");
    }

    protected void ImageButton8_Click(object sender, ImageClickEventArgs e)
    {
        div_Addapt.Visible = false;
        clearapt();
    }

    protected void ImageButton10_Click(object sender, ImageClickEventArgs e)
    {
        DetailCertificate.Visible = false;
    }

    protected void ImageButton11_Click(object sender, ImageClickEventArgs e)
    {
        ExpCertificate.Visible = false;
    }

    protected void loadshift()
    {
        ds.Clear();
        ddl_shift.Items.Clear();
        string collegecode1 = Convert.ToString(ddlcollege.SelectedValue);
        string statequery = "select  distinct Shift  from in_out_time where college_code='" + collegecode1 + "'";
        ds = da.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_shift.DataSource = ds;
            ddl_shift.DataTextField = "Shift";
            ddl_shift.DataBind();
            ddl_shift.Items.Insert(0, "Select");
        }
        else
        {
            ddl_shift.Items.Insert(0, "Select");
        }
    }

    protected void appointed()
    {
        try
        {
            string checkpriority = Convert.ToString(ViewState["checkpriority"]);
            err.Visible = false;
            string applno = txt_applno.Text.Trim().ToUpper();
            ViewState["AppNum"] = applno;
            string fname = txt_fname.Text;
            fname = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(fname);
            string mname = txt_mname.Text;
            mname = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(mname);
            string surname = txt_surname.Text;
            surname = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(surname);
            string scode = Convert.ToString(txt_aptscode.Text);
            string stream = ddl_Stream.SelectedItem.Text;
            string adate = txt_adate.Text;
            string[] a = adate.Split('/');
            DateTime adt = Convert.ToDateTime(a[1] + "/" + a[0] + "/" + a[2]);
            string postapplied = txt_papplied.Text;
            string dept = txt_popdept.Text;
            string stype = txt_popstype.Text;
            string payscale = ddl_payscale.SelectedItem.Text;
            string shift = ddl_shift.SelectedItem.Text;
            string postappointed = ddl_pappointed.SelectedValue;
            string appointeddept = ddl_appdept.SelectedValue;
            string appointedstype = string.Empty;
            if (ddl_appstype.SelectedItem.Text == "Others")
                appointedstype = Convert.ToString(txtStfType.Text);
            else
            {
                appointedstype = Convert.ToString(ddl_appstype.SelectedItem.Text);
                if (appointedstype.Trim() == "Select")
                {
                    err.Visible = true;
                    err.Text = "Please Select Staff Type!";
                    return;
                }
                string GetStfType = d2.GetFunction("select value from Master_Settings where settings='Retire_Age_Settings' and value like '" + appointedstype + "%'");
                if (String.IsNullOrEmpty(GetStfType) || GetStfType.Trim() == "0")
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Please Set the Retirement Age!";
                    return;
                }
            }
            string appointedcategory = ddl_appcat.SelectedItem.Value;
            string doj = txt_appdoj.Text;
            string[] b = doj.Split('/');
            DateTime dtj = Convert.ToDateTime(b[1] + "/" + b[0] + "/" + b[2]);
            string collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);

            string Nature = "";
            if (rdb_ftime.Checked == true)
                Nature = "full";
            if (rdb_ptime.Checked == true)
                Nature = "part";
            string paytype = "";
            if (rdb_regular.Checked == true)
                paytype = "0";
            if (rdb_cons.Checked == true)
                paytype = "1";
            string status = ddl_popstat.SelectedItem.Text;
            string ppf = txt_popfd.Text;
            string[] c = ppf.Split('/');
            DateTime ppfd = Convert.ToDateTime(c[1] + "/" + c[0] + "/" + c[2]);
            string ppt = txt_poptd.Text;
            string[] d = ppt.Split('/');
            DateTime pptd = Convert.ToDateTime(d[1] + "/" + d[0] + "/" + d[2]);
            string rd = txt_retire.Text;
            string[] f = rd.Split('/');
            DateTime rdt = Convert.ToDateTime(f[1] + "/" + f[0] + "/" + f[2]);
            string manuallop = "";
            if (chkmanuallop.Checked == true)
                manuallop = "1";

            string facultytype = ddl_ftype.SelectedItem.Text;
            string noofincr = txt_incr.Text;
            string acno = txt_acno.Text;
            string bname = ddl_bankname.SelectedItem.Text;
            string branch = ddl_branchname.SelectedItem.Text;
            string ifsc = txt_ifsc.Text;
            string bankactype = "";
            if (rdb_own.Checked == true)
                bankactype = "1";
            if (rdb_nominne.Checked == true)
                bankactype = "2";
            string paymode = "";
            if (rdb_cash.Checked == true)
                paymode = "0";
            if (rdb_cheque.Checked == true)
                paymode = "1";
            if (rdb_credit.Checked == true)
                paymode = "2";

            string pfno = txt_pfno.Text;
            string panno = txt_panno.Text;
            string licno = txt_licno.Text;
            string loanno = txt_loanno.Text;
            string gpfno = txt_gpf.Text;
            string esino = txt_esi.Text;
            string adharno = txt_adharno.Text;
            string uanno = txt_uan.Text;
            string query = "";
            string honour = "";
            if (cb_honour.Checked == true)
                honour = "1";
            else
                honour = "0";

            int clgBank = 0;

            if (ddl_colbank.Text.ToUpper() != "SELECT" && ddl_colbank.Text != "")//delsi 23/05
            {
                clgBank = Convert.ToInt32(ddl_colbank.SelectedItem.Value);

            }

            ViewState["deptcode"] = appointeddept;
            ViewState["stftype"] = appointedstype;
            int priorityset = 0;
            DataSet dsprint = new DataSet();//delsi0108

            if (checkupdateapply == false)
            {
                if (checkpriority == "1")
                {
                    string quer = " select  PrintPriority ,s.appl_no from staffmaster s,stafftrans st,staff_appl_master a,hrdept_master dept,desig_master desig where s.staff_code=st.staff_code and s.appl_no=a.appl_no and st.dept_code=dept.dept_code and st.desig_code=desig.desig_code and s.college_code=dept.college_code and s.college_Code=desig.collegeCode and s.resign='0' and s.settled='0' and ISNULL(Discontinue,'0')='0' and st.latestrec='1' and s.college_Code='" + collegecode1 + "' and dept.dept_code in('" + appointeddept + "')  and st.stftype in('" + appointedstype + "') order by PrintPriority desc";
                    dsprint = d2.select_method_wo_parameter(quer, "text");
                    if (dsprint.Tables[0].Rows.Count > 0)
                    {
                        priorityset = Convert.ToInt32(dsprint.Tables[0].Rows[0]["PrintPriority"]);
                        priorityset = priorityset + 1;
                    }

                }
            }
            if (checkupdateapply == false)
            {
                string hrsno = d2.GetFunction("select StartNo  from HRS_CodeSettings  where SettingField='1'");
                int startno = Convert.ToInt32(hrsno);
                if (txt_applno.Text != "" && txt_aptscode.Text != "" && appointedstype.Trim() != "" && appointedcategory.Trim() != "Select")
                {
                    query = " if exists (select * from staffmaster  where appl_no='" + applno + "' and college_code='" + collegecode1 + "') update staffmaster set staff_code='" + scode + "',appl_no='" + applno + "',staff_name='" + fname + "',appointed_date='" + adt.ToString("MM/dd/yyyy") + "',bankaccount='" + acno + "',pfnumber='" + pfno + "',pangirnumber='" + panno + "',gpfnumber='" + gpfno + "',join_date='" + dtj.ToString("MM/dd/yyyy") + "',honourstf='" + honour + "',prob_from='" + ppfd.ToString("MM/dd/yyyy") + "',prob_to='" + pptd.ToString("MM/dd/yyyy") + "',retr_date='" + rdt.ToString("MM/dd/yyyy") + "',lic_no='" + licno + "',loan_no='" + loanno + "',mid_name='" + mname + "',sur_name='" + surname + "',bank_name='" + bname + "',branch_name='" + branch + "',ifsc_code='" + ifsc + "',esi_no='" + esino + "',stream='" + stream + "',adharcardno='" + adharno + "',UAN_No='" + uanno + "',clgbankcode='" + clgBank + "',PrintPriority='" + priorityset + "' where appl_no='" + applno + "' and college_code='" + collegecode1 + "' else insert into staffmaster(staff_code,staff_name,appl_no,appointed_date,bankaccount,probation,resign,settled,pfnumber,join_date,college_code,honourstf,periodfrom,periodto,prob_from,prob_to,retr_date,lic_no,loan_no,mid_name,sur_name,bank_name,branch_name,ifsc_code,esi_no,stream,adharcardno,pangirnumber,gpfnumber,UAN_No,clgbankcode,PrintPriority) values('" + scode + "','" + fname + "','" + applno + "','" + adt.ToString("MM/dd/yyyy") + "','" + acno + "','','0','0','" + pfno + "','" + dtj.ToString("MM/dd/yyyy") + "','" + collegecode1 + "','" + honour + "','','','" + ppfd.ToString("MM/dd/yyyy") + "','" + pptd.ToString("MM/dd/yyyy") + "','" + rdt.ToString("MM/dd/yyyy") + "','" + licno + "','" + loanno + "','" + mname + "','" + surname + "','" + bname + "','" + branch + "','" + ifsc + "','" + esino + "','" + stream + "','" + adharno + "','" + panno + "','" + gpfno + "','" + uanno + "','" + clgBank + "','" + priorityset + "')";

                    query = query + " if exists(select * from stafftrans where staff_code='" + scode + "' and latestrec='1') update stafftrans set desig_code='" + postappointed + "',stftype='" + appointedstype + "',category_code='" + appointedcategory + "',stfstatus='" + status + "',stfnature='" + Nature + "',dept_code='" + appointeddept + "',paytype='" + paytype + "',IncrementTime='" + noofincr + "',FacultyType='" + facultytype + "',BankAccType='" + bankactype + "',PayMode='" + paymode + "',payscale='" + payscale + "',shift='" + shift + "',IsManualLOP='" + manuallop + "' where staff_code='" + scode + "' and latestrec='1' else  insert into stafftrans(staff_code,desig_code,stftype,category_code,stfstatus,stfnature,dept_code,latestrec,emp_pf,inc_status,paytype,IncrementTime,FacultyType,BankAccType,PayMode,payscale,shift,IsManualLOP)values('" + scode + "','" + postappointed + "','" + appointedstype + "','" + appointedcategory + "','" + status + "','" + Nature + "','" + appointeddept + "','1','0','0','" + paytype + "','" + noofincr + "','" + facultytype + "','" + bankactype + "','" + paymode + "','" + payscale + "','" + shift + "','" + manuallop + "')";
                    query = query + " update staff_appl_master set interviewstatus='appointed' where appl_no='" + applno + "'";

                    int usno = startno + 1;
                    query = query + " update HRS_CodeSettings set StartNo='" + usno + "' where SettingField='1' and CollegeCode='" + collegecode1 + "'";
                    int count = d2.update_method_wo_parameter(query, "Text");
                    if (count != 0)
                    {
                        string img = Convert.ToString(ViewState["stfimg"]);
                        string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + applno + "'");
                        if (img.Trim() != "")
                        {
                            FileStream fs = new FileStream(Server.MapPath("~/Staff Photo/") + img, FileMode.Open, FileAccess.Read);
                            BinaryReader br = new BinaryReader(fs);
                            Byte[] bytes = br.ReadBytes((Int32)fs.Length);
                            string stfphoto = Path.GetFileName("~/Staff Photo/img");
                            string stdphotopath = Server.MapPath("~/Staff Photo/") + fileuploadbrowse.FileName;
                            string stdphotoext = System.IO.Path.GetExtension(fileuploadbrowse.FileName);

                            string insphoto = "if exists (select photo from staffphoto where staff_code='" + scode + "')";
                            insphoto = insphoto + " update staffphoto set photo=@photo,appl_id=@appl_id where staff_code='" + scode + "'";
                            insphoto = insphoto + " else insert into staffphoto (staff_code,photo,appl_id) values('" + scode + "',@photo,@appl_id)";
                            SqlCommand cmd = new SqlCommand(insphoto, con);
                            SqlParameter uploadedsubject_name = new SqlParameter("@photo", SqlDbType.Binary, bytes.Length);
                            uploadedsubject_name.Value = bytes;
                            cmd.Parameters.Add(uploadedsubject_name);
                            uploadedsubject_name = new SqlParameter("@appl_id", SqlDbType.BigInt, 50);
                            uploadedsubject_name.Value = appl_id;
                            cmd.Parameters.Add(uploadedsubject_name);

                            br.Close();
                            fs.Close();
                            con.Close();
                            con.Open();
                            cmd.ExecuteNonQuery();
                        }
                        else
                        {
                            string updQ = " if exists (select photo from staffphoto where appl_id='" + appl_id + "') update staffphoto set staff_code='" + scode + "' where appl_id='" + appl_id + "'";
                            int MyUpd = d2.update_method_wo_parameter(updQ, "Text");
                        }
                        string signimg = Convert.ToString(ViewState["signimg"]);
                        if (signimg.Trim() != "")
                        {
                            FileStream fs = new FileStream(Server.MapPath("~/Staff Signature/") + signimg, FileMode.Open, FileAccess.Read);
                            BinaryReader br = new BinaryReader(fs);
                            Byte[] bytes = br.ReadBytes((Int32)fs.Length);
                            string stfphoto = Path.GetFileName("~/Staff Signature/signimg");
                            string stdphotopath = Server.MapPath("~/Staff Signature/") + fileuploadsign.FileName;
                            string stdphotoext = System.IO.Path.GetExtension(fileuploadsign.FileName);

                            string insphoto = "if exists (select StaffSign from staffphoto where staff_code='" + scode + "')";
                            insphoto = insphoto + " update staffphoto set StaffSign=@StaffSign where staff_code='" + scode + "'";
                            insphoto = insphoto + " else insert into staffphoto (staff_code,StaffSign) values('" + scode + "',@StaffSign)";
                            SqlCommand cmd = new SqlCommand(insphoto, con);
                            SqlParameter uploadedsubject_name = new SqlParameter("@StaffSign", SqlDbType.Binary, bytes.Length);
                            uploadedsubject_name.Value = bytes;
                            cmd.Parameters.Add(uploadedsubject_name);

                            br.Close();
                            fs.Close();
                            con.Close();
                            con.Open();
                            cmd.ExecuteNonQuery();
                        }

                        alertpopwindow.Visible = true;
                        lblalerterr.Text = "Saved Successfully";
                        apt_clear();
                        txt_applno.Enabled = true;
                        txt_fname.Enabled = true;
                        ViewState["stfimg"] = "";
                        ViewState["signimg"] = "";
                    }
                }
                else
                {
                    if (txt_applno.Text == "")
                    {
                        err.Visible = true;
                        err.Text = "Please Enter the Application No!";
                        return;
                    }
                    if (txt_aptscode.Text == "")
                    {
                        err.Visible = true;
                        err.Text = "Please Enter the Staff Code!";
                        return;
                    }
                    if (appointedstype.Trim() == "")
                    {
                        err.Visible = true;
                        err.Text = "Please Enter the Staff Type!";
                        return;
                    }
                    if (appointedcategory.Trim() == "Select")
                    {
                        err.Visible = true;
                        err.Text = "Please Enter the Staff Category!";
                        return;
                    }
                }
            }
            else
            {

                string hrsno = d2.GetFunction("select StartNo  from HRS_CodeSettings  where SettingField='1'");
                int startno = Convert.ToInt32(hrsno);
                if (txt_applno.Text != "" && txt_aptscode.Text != "" && appointedstype.Trim() != "" && appointedcategory.Trim() != "Select")
                {
                    query = " if exists (select * from staffmaster  where appl_no='" + applno + "' and college_code='" + collegecode1 + "') update staffmaster set staff_code='" + scode + "',appl_no='" + applno + "',staff_name='" + fname + "',appointed_date='" + adt.ToString("MM/dd/yyyy") + "',bankaccount='" + acno + "',pfnumber='" + pfno + "',pangirnumber='" + panno + "',gpfnumber='" + gpfno + "',join_date='" + dtj.ToString("MM/dd/yyyy") + "',honourstf='" + honour + "',prob_from='" + ppfd.ToString("MM/dd/yyyy") + "',prob_to='" + pptd.ToString("MM/dd/yyyy") + "',retr_date='" + rdt.ToString("MM/dd/yyyy") + "',lic_no='" + licno + "',loan_no='" + loanno + "',mid_name='" + mname + "',sur_name='" + surname + "',bank_name='" + bname + "',branch_name='" + branch + "',ifsc_code='" + ifsc + "',esi_no='" + esino + "',stream='" + stream + "',adharcardno='" + adharno + "',UAN_No='" + uanno + "',clgbankcode='" + clgBank + "' where appl_no='" + applno + "' and college_code='" + collegecode1 + "' else insert into staffmaster(staff_code,staff_name,appl_no,appointed_date,bankaccount,probation,resign,settled,pfnumber,join_date,college_code,honourstf,periodfrom,periodto,prob_from,prob_to,retr_date,lic_no,loan_no,mid_name,sur_name,bank_name,branch_name,ifsc_code,esi_no,stream,adharcardno,pangirnumber,gpfnumber,UAN_No,clgbankcode) values('" + scode + "','" + fname + "','" + applno + "','" + adt.ToString("MM/dd/yyyy") + "','" + acno + "','','0','0','" + pfno + "','" + dtj.ToString("MM/dd/yyyy") + "','" + collegecode1 + "','" + honour + "','','','" + ppfd.ToString("MM/dd/yyyy") + "','" + pptd.ToString("MM/dd/yyyy") + "','" + rdt.ToString("MM/dd/yyyy") + "','" + licno + "','" + loanno + "','" + mname + "','" + surname + "','" + bname + "','" + branch + "','" + ifsc + "','" + esino + "','" + stream + "','" + adharno + "','" + panno + "','" + gpfno + "','" + uanno + "','" + clgBank + "')";

                    query = query + " if exists(select * from stafftrans where staff_code='" + scode + "' and latestrec='1') update stafftrans set desig_code='" + postappointed + "',stftype='" + appointedstype + "',category_code='" + appointedcategory + "',stfstatus='" + status + "',stfnature='" + Nature + "',dept_code='" + appointeddept + "',paytype='" + paytype + "',IncrementTime='" + noofincr + "',FacultyType='" + facultytype + "',BankAccType='" + bankactype + "',PayMode='" + paymode + "',payscale='" + payscale + "',shift='" + shift + "',IsManualLOP='" + manuallop + "' where staff_code='" + scode + "' and latestrec='1' else  insert into stafftrans(staff_code,desig_code,stftype,category_code,stfstatus,stfnature,dept_code,latestrec,emp_pf,inc_status,paytype,IncrementTime,FacultyType,BankAccType,PayMode,payscale,shift,IsManualLOP)values('" + scode + "','" + postappointed + "','" + appointedstype + "','" + appointedcategory + "','" + status + "','" + Nature + "','" + appointeddept + "','1','0','0','" + paytype + "','" + noofincr + "','" + facultytype + "','" + bankactype + "','" + paymode + "','" + payscale + "','" + shift + "','" + manuallop + "')";
                    query = query + " update staff_appl_master set interviewstatus='appointed' where appl_no='" + applno + "'";

                    int usno = startno + 1;
                    query = query + " update HRS_CodeSettings set StartNo='" + usno + "' where SettingField='1' and CollegeCode='" + collegecode1 + "'";
                    int count = d2.update_method_wo_parameter(query, "Text");
                    if (count != 0)
                    {
                        string img = Convert.ToString(ViewState["stfimg"]);
                        string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + applno + "'");
                        if (img.Trim() != "")
                        {
                            FileStream fs = new FileStream(Server.MapPath("~/Staff Photo/") + img, FileMode.Open, FileAccess.Read);
                            BinaryReader br = new BinaryReader(fs);
                            Byte[] bytes = br.ReadBytes((Int32)fs.Length);
                            string stfphoto = Path.GetFileName("~/Staff Photo/img");
                            string stdphotopath = Server.MapPath("~/Staff Photo/") + fileuploadbrowse.FileName;
                            string stdphotoext = System.IO.Path.GetExtension(fileuploadbrowse.FileName);

                            string insphoto = "if exists (select photo from staffphoto where staff_code='" + scode + "')";
                            insphoto = insphoto + " update staffphoto set photo=@photo,appl_id=@appl_id where staff_code='" + scode + "'";
                            insphoto = insphoto + " else insert into staffphoto (staff_code,photo,appl_id) values('" + scode + "',@photo,@appl_id)";
                            SqlCommand cmd = new SqlCommand(insphoto, con);
                            SqlParameter uploadedsubject_name = new SqlParameter("@photo", SqlDbType.Binary, bytes.Length);
                            uploadedsubject_name.Value = bytes;
                            cmd.Parameters.Add(uploadedsubject_name);
                            uploadedsubject_name = new SqlParameter("@appl_id", SqlDbType.BigInt, 50);
                            uploadedsubject_name.Value = appl_id;
                            cmd.Parameters.Add(uploadedsubject_name);

                            br.Close();
                            fs.Close();
                            con.Close();
                            con.Open();
                            cmd.ExecuteNonQuery();
                        }
                        else
                        {
                            string updQ = " if exists (select photo from staffphoto where appl_id='" + appl_id + "') update staffphoto set staff_code='" + scode + "' where appl_id='" + appl_id + "'";
                            int MyUpd = d2.update_method_wo_parameter(updQ, "Text");
                        }
                        string signimg = Convert.ToString(ViewState["signimg"]);
                        if (signimg.Trim() != "")
                        {
                            FileStream fs = new FileStream(Server.MapPath("~/Staff Signature/") + signimg, FileMode.Open, FileAccess.Read);
                            BinaryReader br = new BinaryReader(fs);
                            Byte[] bytes = br.ReadBytes((Int32)fs.Length);
                            string stfphoto = Path.GetFileName("~/Staff Signature/signimg");
                            string stdphotopath = Server.MapPath("~/Staff Signature/") + fileuploadsign.FileName;
                            string stdphotoext = System.IO.Path.GetExtension(fileuploadsign.FileName);

                            string insphoto = "if exists (select StaffSign from staffphoto where staff_code='" + scode + "')";
                            insphoto = insphoto + " update staffphoto set StaffSign=@StaffSign where staff_code='" + scode + "'";
                            insphoto = insphoto + " else insert into staffphoto (staff_code,StaffSign) values('" + scode + "',@StaffSign)";
                            SqlCommand cmd = new SqlCommand(insphoto, con);
                            SqlParameter uploadedsubject_name = new SqlParameter("@StaffSign", SqlDbType.Binary, bytes.Length);
                            uploadedsubject_name.Value = bytes;
                            cmd.Parameters.Add(uploadedsubject_name);

                            br.Close();
                            fs.Close();
                            con.Close();
                            con.Open();
                            cmd.ExecuteNonQuery();
                        }

                        alertpopwindow.Visible = true;
                        lblalerterr.Text = "Saved Successfully";
                        apt_clear();
                        txt_applno.Enabled = true;
                        txt_fname.Enabled = true;
                        ViewState["stfimg"] = "";
                        ViewState["signimg"] = "";
                    }
                }
                else
                {
                    if (txt_applno.Text == "")
                    {
                        err.Visible = true;
                        err.Text = "Please Enter the Application No!";
                        return;
                    }
                    if (txt_aptscode.Text == "")
                    {
                        err.Visible = true;
                        err.Text = "Please Enter the Staff Code!";
                        return;
                    }
                    if (appointedstype.Trim() == "")
                    {
                        err.Visible = true;
                        err.Text = "Please Enter the Staff Type!";
                        return;
                    }
                    if (appointedcategory.Trim() == "Select")
                    {
                        err.Visible = true;
                        err.Text = "Please Enter the Staff Category!";
                        return;
                    }
                }


            }
        }
        catch (Exception ex)
        {

        }
    }

    protected void btn_appoint_OnClick(object sender, EventArgs e)    //Modified By Jeyaprakash on June 15th
    {
        try
        {
            string checkpriority = Convert.ToString(ViewState["checkpriority"]);

            btn_priorityUpdateYes.Visible = false;
            btn_priorityUpdateNo.Visible = false;
            string appl_no = txt_applno.Text.Trim().ToUpper();

            if (txt_priority.Text == "")
            {
                appointed();
            }
            if (checkpriority == "0")
            {
                if (txt_priority.Text != "")
                {
                    int priority = Convert.ToInt32(txt_priority.Text);//delsi1502
                    string priority_val = d2.GetFunction("select PrintPriority from staffmaster  where college_code='" + collegecode1 + "' and PrintPriority='" + priority + "'");

                    if (priority_val != "" || priority_val != "0")
                    {

                        if (priority == Convert.ToInt32(priority_val))
                        {
                            alertpopuppriority.Visible = true;
                            lbl_alertpriority.Visible = true;
                            lbl_alertpriority.Text = "Do You Want To Reset Priority For All the Staff?";

                        }
                    }
                    if (priority_val == "0")
                    {
                        appointed();
                        string quer = "if exists (select PrintPriority from staffmaster  where appl_no='" + appl_no + "' and college_code='" + collegecode1 + "')update staffmaster set PrintPriority='" + priority + "'where appl_no='" + appl_no + "' and college_code='" + collegecode1 + "' else insert into staffmaster(PrintPriority) values('" + priority + "')";
                        int count = d2.update_method_wo_parameter(quer, "Text");

                    }
                }
            }
            //if (checkpriority == "1")
            //{



            //}

        }
        catch { }
    }

    protected void btn_ok_OnClick(object sender, EventArgs e)
    {
        try
        {
            string checkpriority = Convert.ToString(ViewState["checkpriority"]);


            lblstfalert.Visible = false;
            string number = "";
            string name = "";
            string activerow = "";
            string activecol = "";
            trStfType.Visible = false;
            activerow = Fpspread11.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread11.ActiveSheetView.ActiveColumn.ToString();
            string collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);

            if (activerow.Trim() != "")
            {
                number = Convert.ToString(Fpspread11.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Text);
                name = Convert.ToString(Fpspread11.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text);
            }
            Application.Visible = false;
            Div3.Visible = false;
            txt_applno.Text = number;
            txt_applno.Enabled = false;
            txt_fname.Text = name;
            txt_fname.Enabled = false;
            txt_mname.Enabled = false;
            txt_surname.Enabled = false;
            DataSet dsgetacr = new DataSet();

            string stftype = "";
            string dept = "";
            string desig = "";
            string deptname = "";
            string designame = "";
            string middlename = "";
            string surname = "";
            string staffcode = "";

            string getquery = "select dept_code,desig_code,staff_type,sa.mid_name,s.staff_code,CONVERT(varchar(10),s.prob_from,103) as periodfrom,CONVERT(varchar(10),s.prob_to,103) as periodto,nameacr,CONVERT(varchar(10),s.retr_date,103) as retr_date,Convert(varchar(10),sa.date_of_birth,101) as birthday from staff_appl_master sa,staffmaster s where sa.appl_no=s.appl_no and sa.appl_no='" + number + "'";
            ds = d2.select_method_wo_parameter(getquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                stftype = ds.Tables[0].Rows[0]["staff_type"].ToString();
                dept = ds.Tables[0].Rows[0]["dept_code"].ToString();
                desig = ds.Tables[0].Rows[0]["desig_code"].ToString();
                deptname = d2.GetFunction("select dept_name from hrdept_master where Dept_Code='" + dept + "'");
                designame = d2.GetFunction("select desig_name from desig_master where desig_code='" + desig + "'");
                middlename = ds.Tables[0].Rows[0]["mid_name"].ToString();
                surname = ds.Tables[0].Rows[0]["nameacr"].ToString();
                staffcode = ds.Tables[0].Rows[0]["staff_code"].ToString();
                if (ds.Tables[0].Rows[0]["periodfrom"].ToString().Trim() != "")
                    txt_popfd.Text = ds.Tables[0].Rows[0]["periodfrom"].ToString();
                else
                    txt_popfd.Text = DateTime.Now.ToString("dd/MM/yyyy");
                if (ds.Tables[0].Rows[0]["periodto"].ToString().Trim() != "")
                    txt_poptd.Text = ds.Tables[0].Rows[0]["periodto"].ToString();
                else
                    txt_poptd.Text = DateTime.Now.ToString("dd/MM/yyyy");

                DateTime BirthDate = new DateTime();
                DateTime RetireDate = new DateTime();
                int RetAge = 0;
                if (!String.IsNullOrEmpty(Convert.ToString(ds.Tables[0].Rows[0]["birthday"])) && Convert.ToString(ds.Tables[0].Rows[0]["birthday"]) != "01/01/1900")
                {
                    BirthDate = Convert.ToDateTime(Convert.ToString(ds.Tables[0].Rows[0]["birthday"]));
                    string GetRetireAge = d2.GetFunction("select value from Master_Settings where settings='Retire_Age_Settings' and value like '" + stftype + "%'");
                    if (!String.IsNullOrEmpty(GetRetireAge.Trim()) && GetRetireAge.Trim() != "0")
                    {
                        if (GetRetireAge.Contains('-'))
                        {
                            string[] splRetAge = GetRetireAge.Trim().Split('-');
                            Int32.TryParse(splRetAge[1], out RetAge);
                            if (RetAge > 0)
                                RetireDate = BirthDate.AddYears(RetAge);
                        }
                    }
                }

                string retire = ds.Tables[0].Rows[0]["retr_date"].ToString();
                if (RetAge > 0 && RetireDate.ToString("MM/dd/yyyy") != "01/01/1900")
                {
                    txt_retire.Text = RetireDate.ToString("dd/MM/yyyy");
                }
                else
                {
                    if (retire != "")
                        txt_retire.Text = retire;
                    else
                        txt_retire.Text = DateTime.Now.ToString("dd/MM/yyyy");
                }

            }
            string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + number + "'");
            string selstfimg = d2.GetFunction("select photo from StaffPhoto where (staff_code='" + staffcode + "' or appl_id='" + appl_id + "')");
            if (selstfimg.Trim() != "0" && selstfimg.Trim() != "")
            {
                if (!String.IsNullOrEmpty(staffcode))
                    stf_img.ImageUrl = "~/Handler/staffphoto.ashx?staff_code=" + staffcode;
                else
                    stf_img.ImageUrl = "~/Handler/staffphoto.ashx?appl_id=" + appl_id;
            }
            else
            {
                stf_img.ImageUrl = "";
            }
            string selstfsignimg = d2.GetFunction("select StaffSign from StaffPhoto where staff_code='" + staffcode + "'");
            if (selstfsignimg.Trim() != "0" && selstfsignimg.Trim() != "")
                img_sign.ImageUrl = "Handler/Staff Sign.ashx?staff_code=" + staffcode;
            else
                img_sign.ImageUrl = "";

            txt_papplied.Text = designame;
            txt_pdep.Text = deptname;
            txt_pstyp.Text = stftype;
            txt_mname.Text = middlename;
            txt_surname.Text = surname;
            txt_aptscode.Text = staffcode;

            ddl_pappointed.SelectedIndex = ddl_pappointed.Items.IndexOf(ddl_pappointed.Items.FindByText(designame));
            ddl_appdept.SelectedIndex = ddl_appdept.Items.IndexOf(ddl_appdept.Items.FindByText(deptname));
            ddl_appstype.SelectedIndex = ddl_appstype.Items.IndexOf(ddl_appstype.Items.FindByText(stftype));

            string deptacr = d2.GetFunction("select dept_acronym  from hrdept_master where dept_code ='" + dept + "'");
            string collacr = d2.GetFunction("select Coll_acronymn from collinfo where college_code ='" + collegecode1 + "'");  //Modified By Jeyaprakash
            string value = d2.GetFunction("select value from Master_Settings where settings='CodeSetting Rights' and value is not null and value<>''");
            string query = "";
            if (value.Trim() != "")
            {
                string[] val = value.Split(',');
                for (int i = 0; i < val.Length; i++)
                {
                    if (val.Contains("1"))
                    {
                        string gacr = "";
                        string startno = "";
                        string size = "";
                        string settingvalues = "";
                        string acronym = "";
                        string newitemcode = "";

                        query = "select GeneralAcr,StartNo,SerialSize,SettingValues  from HRS_CodeSettings  where SettingField='1'";
                        ds = d2.select_method_wo_parameter(query, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            gacr = ds.Tables[0].Rows[0]["GeneralAcr"].ToString();
                            startno = ds.Tables[0].Rows[0]["StartNo"].ToString();
                            size = ds.Tables[0].Rows[0]["SerialSize"].ToString();
                            settingvalues = ds.Tables[0].Rows[0]["SettingValues"].ToString();

                            if (settingvalues.Trim() != "")
                            {
                                string[] sval = settingvalues.Split(';');
                                if (sval.Length > 0)
                                {
                                    for (int k = 0; k < sval.Length; k++)
                                    {
                                        if (sval[k] != "")
                                        {
                                            if (sval[k] == "1")
                                                acronym = collacr + "";
                                            if (sval[k] == "2")
                                                acronym = acronym + deptacr + "";
                                            if (sval[k] == "3")
                                                acronym = acronym + gacr;
                                        }
                                    }
                                }

                                string getcodacr = "select staff_code from staffmaster where staff_code like '" + acronym + "%' order by LEN(staff_code),staff_code ";
                                dsgetacr.Clear();
                                dsgetacr = d2.select_method_wo_parameter(getcodacr, "Text");
                                if (dsgetacr.Tables.Count > 0 && dsgetacr.Tables[0].Rows.Count > 0)
                                {
                                    string itemcode = Convert.ToString(dsgetacr.Tables[0].Rows[dsgetacr.Tables[0].Rows.Count - 1]["appl_no"]);
                                    string itemacr = Convert.ToString(acronym);
                                    int len = itemacr.Length;
                                    itemcode = itemcode.Remove(0, len);
                                    int len1 = Convert.ToString(itemcode).Length;
                                    string newnumber = Convert.ToString((Convert.ToInt32(itemcode) + 1));
                                    len = Convert.ToString(newnumber).Length;
                                    len1 = len1 - len;
                                    if (len1 == 2)
                                        newitemcode = "00" + newnumber;
                                    else if (len1 == 1)
                                        newitemcode = "0" + newnumber;
                                    else if (len1 == 3)
                                        newitemcode = "000" + newnumber;
                                    else if (len1 == 4)
                                        newitemcode = "0000" + newnumber;
                                    else if (len1 == 5)
                                        newitemcode = "00000" + newnumber;
                                    else if (len1 == 6)
                                        newitemcode = "000000" + newnumber;
                                    else
                                        newitemcode = Convert.ToString(newnumber);
                                    if (newitemcode.Trim() != "")
                                        newitemcode = itemacr + newitemcode;
                                    acronym = newitemcode;
                                }
                                else
                                {
                                    int ssize = Convert.ToInt32(size);
                                    string sno = "";
                                    sno = startno.ToString().PadLeft(ssize, '0');
                                    acronym = acronym + sno;
                                    int stno = Convert.ToInt32(startno);
                                    int usno = stno + 1;
                                    txt_aptscode.Text = acronym;
                                    txt_aptscode.Enabled = false;
                                    err.Visible = false;
                                }
                            }
                            else
                            {
                                int ssize = Convert.ToInt32(size);
                                string sno = "";
                                sno = startno.ToString().PadLeft(ssize, '0');
                                acronym = acronym + sno;
                                int stno = Convert.ToInt32(startno);
                                int usno = stno + 1;
                                txt_aptscode.Text = acronym;
                                txt_aptscode.Enabled = false;
                                err.Visible = false;
                            }
                        }
                        else
                        {
                            err.Visible = true;
                            err.Text = "Please Set Code Settings First";
                            txt_aptscode.Text = "";
                            txt_aptscode.Enabled = true;
                        }
                    }
                    else
                    {
                        txt_aptscode.Enabled = true;
                        err.Visible = false;
                        if (staffcode.Trim() == "")
                            txt_aptscode.Text = "";
                    }
                }
            }
        }
        catch { }
    }

    protected void ddldeptapplied_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string dept = ddldeptapplied.SelectedValue;
        string deptacr = d2.GetFunction("select dept_acronym  from hrdept_master where dept_code ='" + dept + "'");
        string collacr = d2.GetFunction("select Coll_acronymn from collinfo where college_code ='" + collcode + "'");  //Modified By Jeyaprakash
        string value = d2.GetFunction("select value from Master_Settings where settings='CodeSetting Rights' and value is not null and value<>''");
        string query = "";
        string lastval = "";
        bool IsDept = false;
        string newitemcode = "";
        if (deptacr.Trim() == "0")
            deptacr = "";
        DataSet dsgetacr = new DataSet();

        if (value.Trim() != "")
        {
            string[] val = value.Split(',');
            for (int i = 0; i < val.Length; i++)
            {
                IsDept = false;
                if (val.Contains("2"))
                {
                    string gacr = "";
                    string startno = "";
                    string size = "";
                    string settingvalues = "";
                    string acronym = "";
                    query = "select GeneralAcr,StartNo,SerialSize,SettingValues  from HRS_CodeSettings  where SettingField='2'";
                    ds = d2.select_method_wo_parameter(query, "Text");
                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        gacr = ds.Tables[0].Rows[0]["GeneralAcr"].ToString();
                        startno = ds.Tables[0].Rows[0]["StartNo"].ToString();
                        size = ds.Tables[0].Rows[0]["SerialSize"].ToString();
                        settingvalues = ds.Tables[0].Rows[0]["SettingValues"].ToString();

                        if (settingvalues.Trim() != "")
                        {
                            string[] sval = settingvalues.Split(';');
                            if (sval.Length > 0)
                            {
                                for (int k = 0; k < sval.Length; k++)
                                {
                                    if (sval[k] != "")
                                    {
                                        if (sval[k] == "1")
                                            acronym = collacr;
                                        if (sval[k] == "2")
                                        {
                                            acronym = acronym + deptacr;
                                            IsDept = true;
                                        }
                                        if (sval[k] == "3")
                                            acronym = acronym + gacr;
                                    }
                                }
                            }

                            string getcodacr = "";
                            if (IsDept == true)
                                getcodacr = "select appl_no from staff_appl_master where appl_no like '" + acronym + "%' and dept_code='" + dept + "' order by LEN(appl_no),appl_no ";
                            else
                                getcodacr = "select appl_no from staff_appl_master where appl_no like '" + acronym + "%' order by LEN(appl_no),appl_no ";
                            dsgetacr.Clear();
                            dsgetacr = d2.select_method_wo_parameter(getcodacr, "Text");
                            if (dsgetacr.Tables.Count > 0 && dsgetacr.Tables[0].Rows.Count > 0)
                            {
                                string itemcode = Convert.ToString(dsgetacr.Tables[0].Rows[dsgetacr.Tables[0].Rows.Count - 1]["appl_no"]);
                                string itemacr = Convert.ToString(acronym);
                                int len = itemacr.Length;
                                itemcode = itemcode.Remove(0, len);
                                //=============Added by saranya on 14/09/2018============//
                                string str = "";
                                for (int k = 0; k < itemcode.Length; k++)
                                {
                                    string a = Convert.ToString(itemcode.ElementAt<char>(k));
                                    if (a.All(char.IsNumber))
                                    {
                                        str = str + a;
                                    }
                                }
                                int itemNo = Convert.ToInt32(str) + 1;
                                // int len1 = Convert.ToString(itemcode).Length;
                                //string newnumber = Convert.ToString((Convert.ToInt32(itemcode) + 1));
                                int len1 = Convert.ToString(itemNo).Length;
                                string newnumber = Convert.ToString(itemNo);
                                //=======================================================//

                                len = Convert.ToString(newnumber).Length;
                                len1 = len1 - len;
                                if (len1 == 2)
                                    newitemcode = "00" + newnumber;
                                else if (len1 == 1)
                                    newitemcode = "0" + newnumber;
                                else if (len1 == 3)
                                    newitemcode = "000" + newnumber;
                                else if (len1 == 4)
                                    newitemcode = "0000" + newnumber;
                                else if (len1 == 5)
                                    newitemcode = "00000" + newnumber;
                                else if (len1 == 6)
                                    newitemcode = "000000" + newnumber;
                                else
                                    newitemcode = Convert.ToString(newnumber);
                                if (newitemcode.Trim() != "")
                                    newitemcode = itemacr + newitemcode;
                                for (int j = 0; j < dsgetacr.Tables[0].Rows.Count; j++)
                                {
                                    string applno = Convert.ToString(dsgetacr.Tables[0].Rows[j]["appl_no"]);
                                    if (applno == newitemcode)
                                    {
                                        itemNo = itemNo + 1;

                                        len1 = Convert.ToString(itemNo).Length;
                                        newnumber = Convert.ToString(itemNo);
                                      

                                        len = Convert.ToString(newnumber).Length;
                                        len1 = len1 - len;
                                        if (len1 == 2)
                                            newitemcode = "00" + newnumber;
                                        else if (len1 == 1)
                                            newitemcode = "0" + newnumber;
                                        else if (len1 == 3)
                                            newitemcode = "000" + newnumber;
                                        else if (len1 == 4)
                                            newitemcode = "0000" + newnumber;
                                        else if (len1 == 5)
                                            newitemcode = "00000" + newnumber;
                                        else if (len1 == 6)
                                            newitemcode = "000000" + newnumber;
                                        else
                                            newitemcode = Convert.ToString(newnumber);
                                        if (newitemcode.Trim() != "")
                                            newitemcode = itemacr + newitemcode;
                                        j = 0;
                                    }
                                }

                                    tbappno.Text = newitemcode;
                            }
                            else
                            {
                                int ssize = Convert.ToInt32(size);
                                string sno = "";
                                sno = startno.ToString().PadLeft(ssize, '0');
                                if (acronym == "")
                                    acronym = deptacr;
                                acronym = acronym + sno;
                                int stno = Convert.ToInt32(startno);
                                int usno = stno + 1;
                                tbappno.Text = acronym;
                                tbappno.Enabled = false;
                                lbl_aplalert.Visible = false;
                            }
                        }
                        else
                        {
                            lbl_aplalert.Visible = true;
                            lbl_aplalert.Text = "Please Set Code Settings First";
                            tbappno.Text = "";
                            tbappno.Enabled = true;
                        }
                    }
                    else
                    {
                        lbl_aplalert.Visible = true;
                        lbl_aplalert.Text = "Please Set Code Settings First";
                        tbappno.Text = "";
                        tbappno.Enabled = true;
                    }
                }
                else
                {
                    tbappno.Enabled = true;
                    lbl_aplalert.Visible = false;
                }
            }
        }
        else
        {
            tbappno.Enabled = true;
            lbl_aplalert.Visible = false;
        }
    }

    protected void btn_plusAdd_OnClick(object sender, EventArgs e)
    {
        try
        {
            string stream = txt_addstream.Text;
            string criteria = "hastr";
            if (stream.Trim() != "")
            {
                string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + stream + "','" + criteria + "','" + collegecode1 + "')";
                int count = d2.update_method_wo_parameter(query, "Text");

                bindstream();
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Added Successfully";
            }
        }
        catch { }
    }

    protected void btn_ftypeadd_OnClick(object sender, EventArgs e)
    {
        try
        {
            string faculty = txt_addstream.Text;
            string criteria = "hafac";
            if (faculty.Trim() != "")
            {
                string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + faculty + "','" + criteria + "','" + collegecode1 + "')";
                int count = d2.update_method_wo_parameter(query, "Text");

                bindfaculty();
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Added Successfully";
            }
        }
        catch { }
    }

    protected void btn_bnameadd_OnClick(object sender, EventArgs e)
    {
        try
        {
            string bank = txt_addstream.Text;
            string criteria = "habnk";
            if (bank.Trim() != "")
            {
                string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + bank + "','" + criteria + "','" + collegecode1 + "')";
                int count = d2.update_method_wo_parameter(query, "Text");
                bindBank();
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Added Successfully";
            }
        }
        catch { }
    }

    protected void btn_branchadd_OnClick(object sender, EventArgs e)
    {
        try
        {
            string branch = txt_addstream.Text;
            string criteria = "habrn";
            if (branch.Trim() != "")
            {
                string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + branch + "','" + criteria + "','" + collegecode1 + "')";
                int count = d2.update_method_wo_parameter(query, "Text");
                bindBranch();
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Added Successfully";
            }
        }
        catch { }
    }

    protected void btn_Plusexit_OnClick(object sender, EventArgs e)
    {
        Plusapt.Visible = false;
    }

    protected void apt_clear()
    {
        popdesignationapt();
        loadClgBank();
        loadpayscale();
        loadshift();
        popdept();
        popstype();
        popscat();
        bindstream();
        bindfaculty();
        bindBank();
        bindBranch();
        bindfaculty();
        lblstf.Visible = false;
        lblstfalert.Visible = false;
        txt_adharno.Text = "";
        txt_surname.Text = "";
        txt_pstyp.Text = "";
        txt_applno.Text = "";
        txt_aptscode.Text = "";
        txt_fname.Text = "";
        txt_mname.Text = "";
        txt_pdep.Text = "";
        txt_surname1.Text = "";
        txt_papplied.Text = "";
        txt_popdept.Text = "";
        txt_popstype.Text = "";
        rdb_ptime.Checked = false;
        rdb_cons.Checked = false;
        chkmanuallop.Checked = false;
        txt_incr.Text = "";
        txt_ifsc.Text = "";
        txt_acno.Text = "";
        txt_pfno.Text = "";
        txt_loanno.Text = "";
        txt_licno.Text = "";
        txt_esi.Text = "";
        txt_panno.Text = "";
        txt_gpf.Text = "";
        txt_adate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_popfd.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_poptd.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_retire.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_appdoj.Text = DateTime.Now.ToString("dd/MM/yyyy");
    }

    protected void btn_addclose_OnClick(object sender, EventArgs e)
    {
        div_Addapt.Visible = false;
        apt_clear();
    }

    protected void btn_popgo_OnClick(object sender, EventArgs e)
    {
        try
        {
            Fpspread1.SaveChanges();
            Label lblid = new Label();
            lblid = (Label)FindControl("lbl_alert");
            if (header.Text == "Staff Transfer")
            {
                btn_transfer1.Visible = true;
                btn_relieve1.Visible = false;
                btn_promotion1.Visible = false;
                btn_increment1.Visible = false;
                btn_appraisal1.Visible = false;
            }
            else if (header.Text == "Staff Relieve")
            {
                btn_relieve1.Visible = true;
                btn_transfer1.Visible = false;
                btn_promotion1.Visible = false;
                btn_increment1.Visible = false;
                btn_appraisal1.Visible = false;
            }
            else if (header.Text == "Staff Promotion")
            {
                btn_relieve1.Visible = false;
                btn_transfer1.Visible = false;
                btn_promotion1.Visible = true;
                btn_increment1.Visible = false;
                btn_appraisal1.Visible = false;
            }
            else if (header.Text == "Staff Increment")
            {
                btn_relieve1.Visible = false;
                btn_transfer1.Visible = false;
                btn_promotion1.Visible = false;
                btn_increment1.Visible = true;
                btn_appraisal1.Visible = false;
            }
            else if (header.Text == "Staff Appraisal")
            {
                btn_relieve1.Visible = false;
                btn_transfer1.Visible = false;
                btn_promotion1.Visible = false;
                btn_increment1.Visible = false;
                btn_appraisal1.Visible = true;
            }

            Fpspread1.Visible = true;
            string deptname = "";
            lbl_err.Text = "";
            string designame = "";
            string stafftype = "";
            string status = "";

            deptname = GetSelectedItemsValueAsString(cbl_popdept);

            designame = GetSelectedItemsValueAsString(cbl_popdesig);

            stafftype = GetSelectedItemsValueAsString(cbl_popstype);

            status = GetSelectedItemsValueAsString(cblstatus);

            string collcode = Convert.ToString(ddl_clg.SelectedItem.Value);

            if (deptname.Trim() == "")
            {
                lblid.Visible = true;
                lblid.Text = "Please Select Atleast One Department Name";
                Fpspread1.Visible = false;
                return;
            }

            if (header.Text == "Staff Relieve")
            {
                sql = " select s.appl_no,staff_name,t.staff_code,sa.appl_no,appl_name,t.desig_code,t.dept_code,father_name,s.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email from staff_appl_master sa,staffmaster s,stafftrans t,hrdept_master h,desig_master d where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and d.desig_code =t.desig_code and h.dept_code =t.dept_code and s.college_code =d.collegeCode and h.college_code =s.college_code and h.college_code = d.collegeCode and (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and latestrec=1 and s.college_code='" + collcode + "'";
                if (deptname.Trim() != "")
                    sql = sql + " and t.dept_code in('" + deptname + "')";
                if (designame.Trim() != "")
                    sql = sql + " and t.desig_code in('" + designame + "')";
                if (stafftype.Trim() != "")
                    sql = sql + " and stftype in('','" + stafftype + "')";
            }
            else if (header.Text == "Staff Appraisal")
            {
                if (status.Trim() != "")
                {
                    sql = "select sa.appl_no,appl_name,s.staff_name,s.staff_code,t.desig_code,t.dept_code,father_name,s.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email from staff_appl_master sa,staffmaster s,stafftrans t,hrdept_master h,desig_master d,StaffAppraisalMaster stapp where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and d.desig_code =t.desig_code and h.dept_code =t.dept_code and stapp.staff_code=s.staff_code and t.staff_code=stapp.staff_code and s.college_code =d.collegeCode and h.college_code =s.college_code and h.college_code = d.collegeCode and (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and latestrec=1 and s.college_code='" + collcode + "'  and AppraisalType in('" + status + "')";
                    if (deptname.Trim() != "")
                        sql = sql + " and t.dept_code in('" + deptname + "')";
                    if (designame.Trim() != "")
                        sql = sql + " and t.desig_code in('" + designame + "')";
                    if (stafftype.Trim() != "")
                        sql = sql + " and t.stftype in('','" + stafftype + "')";
                }
                else
                {
                    sql = "select sa.appl_no,appl_name,s.staff_name,s.staff_code,t.desig_code,t.dept_code,father_name,s.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email from staff_appl_master sa,staffmaster s,stafftrans t,hrdept_master h,desig_master d where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and d.desig_code =t.desig_code and s.college_code =d.collegeCode and h.college_code =s.college_code and h.college_code = d.collegeCode and h.dept_code =t.dept_code and (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and latestrec=1 and s.college_code='" + collcode + "'";

                    if (deptname.Trim() != "")
                        sql = sql + " and t.dept_code in('" + deptname + "')";
                    if (designame.Trim() != "")
                        sql = sql + " and t.desig_code in('" + designame + "')";
                    if (stafftype.Trim() != "")
                        sql = sql + " and t.stftype in('','" + stafftype + "')";
                }
            }
            else
            {
                sql = "select sa.appl_no,appl_name,s.staff_name,s.staff_code,t.desig_code,t.dept_code,father_name,s.mid_name,sex,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,staff_type,CONVERT(varchar(20),dateofapply,103) as dateofapply,d.desig_name,h.dept_name,yofexp,bldgrp,CONVERT(varchar(20),interviewdate,103) as interviewdate,com_mobileno,CONVERT(varchar(20),join_date,103) as join_date ,CONVERT(varchar(20),retr_date,103) as retr_date,CONVERT(varchar(20),appointed_date,103) as appointed_date , CONVERT(varchar(20),relieve_date,103) as  relieve_date,sa.adharcardno,subjects,qualification,email from staff_appl_master sa,staffmaster s,stafftrans t,hrdept_master h,desig_master d,staffcategorizer c where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and t.dept_code =h.dept_code and t.desig_code =d.desig_code and c.category_code =t.category_code and d.collegeCode =s.college_code and s.college_code =h.college_code and s.college_code=c.college_code and (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and t.latestrec ='1' and s.college_code='" + collcode + "'";

                if (deptname.Trim() != "")
                    sql = sql + " and t.dept_code in('" + deptname + "')";
                if (designame.Trim() != "")
                    sql = sql + " and t.desig_code in('" + designame + "')";
                if (stafftype.Trim() != "")
                    sql = sql + " and t.stftype in('','" + stafftype + "')";
            }

            ds.Clear();
            ds = d2.select_method_wo_parameter(sql, "Text");
            FarPoint.Web.Spread.CheckBoxCellType chkall = new FarPoint.Web.Spread.CheckBoxCellType();
            chkall.AutoPostBack = false;
            if (ds.Tables[0].Rows.Count > 0)
            {
                Fpspread1.Sheets[0].AutoPostBack = false;
                Fpspread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                Fpspread1.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread1.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread1.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
                Fpspread1.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread1.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread1.Sheets[0].RowHeader.Visible = false;
                Fpspread1.Visible = false;
                Fpspread1.Sheets[0].ColumnHeader.RowCount = 0;
                Fpspread1.Sheets[0].ColumnCount = 0;
                Fpspread1.Sheets[0].RowHeader.Visible = false;
                Fpspread1.CommandBar.Visible = false;

                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                darkstyle.Font.Name = "Book Antiqua";
                darkstyle.Font.Size = FontUnit.Medium;
                darkstyle.Font.Bold = true;
                darkstyle.Border.BorderSize = 0;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                darkstyle.VerticalAlign = VerticalAlign.Middle;
                darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
                Fpspread1.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                darkstyle1.Font.Name = "Book Antiqua";
                darkstyle1.Font.Size = FontUnit.Medium;

                Fpspread1.Sheets[0].DefaultStyle = darkstyle1;
                Fpspread1.Sheets[0].RowCount = 0;
                Fpspread1.Sheets[0].ColumnCount = 6;
                Fpspread1.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread1.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                Fpspread1.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Staff Name";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Staff Code";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Designation";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Department";

                Fpspread1.Sheets[0].ColumnHeader.Columns[1].Width = 100;
                Fpspread1.Sheets[0].ColumnHeader.Columns[2].Width = 200;
                Fpspread1.Sheets[0].ColumnHeader.Columns[3].Width = 135;
                Fpspread1.Sheets[0].ColumnHeader.Columns[4].Width = 215;
                Fpspread1.Sheets[0].ColumnHeader.Columns[5].Width = 225;

                Fpspread1.Sheets[0].Columns[0].Locked = true;
                Fpspread1.Sheets[0].Columns[2].Locked = true;
                Fpspread1.Sheets[0].Columns[3].Locked = true;
                Fpspread1.Sheets[0].Columns[4].Locked = true;
                Fpspread1.Sheets[0].Columns[5].Locked = true;
                Fpspread1.Sheets[0].RowCount = 0;

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    Fpspread1.Sheets[0].RowCount++;
                    Fpspread1.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                    Fpspread1.Sheets[0].Cells[i, 1].CellType = chkall;
                    Fpspread1.Sheets[0].Cells[i, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread1.Sheets[0].Cells[i, 2].Text = ds.Tables[0].Rows[i]["staff_name"].ToString();
                    Fpspread1.Sheets[0].Cells[i, 3].Text = ds.Tables[0].Rows[i]["staff_code"].ToString();
                    Fpspread1.Sheets[0].Cells[i, 3].CellType = txtcell;
                    Fpspread1.Sheets[0].Cells[i, 3].Tag = ds.Tables[0].Rows[i]["appl_no"].ToString();
                    Fpspread1.Sheets[0].Cells[i, 3].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread1.Sheets[0].Cells[i, 4].Value = ds.Tables[0].Rows[i]["desig_name"].ToString();
                    Fpspread1.Sheets[0].Cells[i, 5].Text = ds.Tables[0].Rows[i]["dept_name"].ToString();
                    Fpspread1.Sheets[0].Cells[i, 5].Tag = ds.Tables[0].Rows[i]["staff_type"].ToString();
                }
                Fpspread1.Visible = true;
                Fpspread1.Sheets[0].PageSize = Fpspread1.Sheets[0].RowCount;
                Fpspread1.SaveChanges();
                lblid.Visible = false;
            }
            else
            {
                Fpspread1.Visible = false;
                lblid.Visible = true;
                lblid.Text = " No Records Found";
                btn_appraisal1.Visible = false;
            }
        }
        catch { }
    }

    public bool checkedOK(FarPoint.Web.Spread.FpSpread fpspread, out int count)
    {
        count = 0;
        bool Ok = false;
        fpspread.SaveChanges();
        for (int i = 0; i < fpspread.Sheets[0].Rows.Count; i++)
        {
            byte check = Convert.ToByte(fpspread.Sheets[0].Cells[i, 1].Value);
            if (check == 1)
            {
                Ok = true;
                count++;
            }
        }
        return Ok;
    }

    public bool checkedloanOK(FarPoint.Web.Spread.FpSpread fpspread, out int count)
    {
        count = 0;
        bool Ok = false;
        fpspread.SaveChanges();
        for (int i = 1; i < fpspread.Sheets[0].Rows.Count; i++)
        {
            byte check = Convert.ToByte(fpspread.Sheets[0].Cells[i, 1].Value);
            if (check == 1)
            {
                Ok = true;
                count++;
            }
        }
        return Ok;
    }

    public bool incrcheckedOK(FarPoint.Web.Spread.FpSpread fpspread)
    {
        bool Ok = false;
        fpspread.SaveChanges();
        for (int i = 0; i < fpspread.Sheets[0].Rows.Count; i++)
        {
            byte check = Convert.ToByte(fpspread.Sheets[0].Cells[i, 1].Value);
            string amntval = Convert.ToString(fpspread.Sheets[0].Cells[i, 6].Text);
            if (check == 1 && amntval.Trim() != "")
            {
                if (amntval != "0")
                {
                    Ok = true;
                }
                else
                {
                    Ok = false;
                    goto jump;
                }
            }
            else if (check == 1 && amntval.Trim() == "")
            {
                Ok = false;
                goto jump;
            }
        }
    jump:
        return Ok;
    }

    public void hide()
    {
        Fpspread7.Visible = false;
        Printmaster1.Visible = false;
        Printcontrol.Visible = false;
        Printmaster2.Visible = false;
        Printmaster3.Visible = false;
        Printmaster4.Visible = false;
        Printmaster5.Visible = false;

        rptprint1.Visible = false;
        Fpspread4.Visible = false;
        rptprint.Visible = false;
        Fpspread5.Visible = false;
        rptprint5.Visible = false;
        Fpspread9.Visible = false;
        rptprint9.Visible = false;
        Fpspread6.Visible = false;
        rptprint6.Visible = false;
        Fpspread10.Visible = false;
        rptprint10.Visible = false;
        rptprint1.Visible = false;
        Fpspread4.Visible = false;
    }

    protected void btn_application_OnClick(object sender, EventArgs e)   //Modified By Jeyaprakash on June 15th
    {
        loadappcolumnorder();
        loadcolumns(sender, e);
        binddept();
        designation();
        stafftype();
        bindaddstatus();
        bindsearchstapp();
        txtappstfname.Text = "";
        lbl_err.Visible = false;
        searchbydate.Checked = false;
        txt_fdate.Enabled = false;
        txt_tdate.Enabled = false;
        ddlsearchappstf.Visible = true;
        ddlsearchappstf.SelectedIndex = 0;
        txtappstfname.Visible = true;
        txtappstfapplcode.Visible = true;
        lblappstfname.Visible = true;
        txtappstfcode.Visible = false;
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        lbladdstatus.Visible = true;
        updaddstatus.Visible = true;
        searchbydate.Enabled = true;
        Fpspread15.Visible = false;
        Fpspread5.Visible = false;
        Fpspread6.Visible = false;
        Fpspread9.Visible = false;
        Fpspread4.Visible = false;
        Fpspread16.Visible = false;
        Fpspread17.Visible = false;
        Fpspread14.Visible = false;
        Fpspread10.Visible = false;
        btn_application.BackColor = Color.MediumBlue;
        btn_cletter.BackColor = Color.MediumSlateBlue;
        btn_selection.BackColor = Color.MediumSlateBlue;
        btn_appointment.BackColor = Color.MediumSlateBlue;
        btn_transfer.BackColor = Color.MediumSlateBlue;
        btn_relieve.BackColor = Color.MediumSlateBlue;
        btn_promotion.BackColor = Color.MediumSlateBlue;
        btn_increment.BackColor = Color.MediumSlateBlue;
        btn_appraisal.BackColor = Color.MediumSlateBlue;
        btn_loan.BackColor = Color.MediumSlateBlue;
        staff.Visible = true;
        headermain.Text = "Staff Application";
        hide();
        reldate.Visible = false;
        lbl_fdate.Text = "Applied Date";
        rel.Text = "";
        reldate.Visible = false;
        btn_selectgo.Visible = false;
        btn_selectnew.Visible = false;
        btn_aptgo.Visible = false;
        btn_aptnew.Visible = false;
        btn_appgo.Visible = true;
        btn_new.Visible = true;
        btn_intcallgo.Visible = false;
        btn_intcallnew.Visible = false;
        btn_trnasgo.Visible = false;
        btn_transnew.Visible = false;
        btn_relgo.Visible = false;
        btn_relnew.Visible = false;
        btn_aprgo.Visible = false;
        btn_aprnew.Visible = false;
        btn_promgo.Visible = false;
        btn_promonew.Visible = false;
        btn_incrgo.Visible = false;
        btn_incrnew.Visible = false;
        btn_loango.Visible = false;
        btn_loannew.Visible = false;
        loan.Visible = false;
        string checkstf = Convert.ToString(ViewState["isstaffcheck"]);
        if (checkstf.ToUpper() == "TRUE" || checkstf.ToUpper() == "1")
        {

            btn_new.Visible = false;
            btn_aptnew.Visible = false;
        }
    }

    protected void btn_cletter_OnClick(object sender, EventArgs e)     //Modified By Jeyaprakash on June 15th
    {
        loadcallcolumnorder();
        loadcolumns(sender, e);
        binddept();
        designation();
        stafftype();
        bindsearchstapp1();
        txtappstfname.Text = "";
        lbl_err.Visible = false;
        searchbydate.Checked = false;
        txt_fdate.Enabled = false;
        txt_tdate.Enabled = false;
        ddlsearchappstf.Visible = true;
        ddlsearchappstf.SelectedIndex = 0;
        txtappstfname.Visible = true;
        txtappstfapplcode.Visible = true;
        lblappstfname.Visible = true;
        txtappstfcode.Visible = false;
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        lbladdstatus.Visible = false;
        updaddstatus.Visible = false;
        tbllabel.Visible = false;
        tbllabel1.Visible = false;
        Fpspread14.Visible = false;
        Fpspread7.Visible = false;
        Fpspread4.Visible = false;
        Fpspread5.Visible = false;
        Fpspread6.Visible = false;
        Fpspread9.Visible = false;
        Fpspread16.Visible = false;
        Fpspread17.Visible = false;
        Fpspread10.Visible = false;
        Fpspread15.Visible = false;
        searchbydate.Enabled = true;
        btn_cletter.BackColor = Color.MediumBlue;
        btn_selection.BackColor = Color.MediumSlateBlue;
        btn_appointment.BackColor = Color.MediumSlateBlue;
        btn_transfer.BackColor = Color.MediumSlateBlue;
        btn_relieve.BackColor = Color.MediumSlateBlue;
        btn_promotion.BackColor = Color.MediumSlateBlue;
        btn_increment.BackColor = Color.MediumSlateBlue;
        btn_appraisal.BackColor = Color.MediumSlateBlue;
        btn_application.BackColor = Color.MediumSlateBlue;
        btn_loan.BackColor = Color.MediumSlateBlue;
        staff.Visible = true;
        hide();
        headermain.Text = "Staff Call Letter";
        reldate.Visible = false;
        lbl_fdate.Text = "Applied Date";
        rel.Text = "";
        reldate.Visible = false;
        btn_aptgo.Visible = false;
        btn_selectgo.Visible = false;
        btn_selectnew.Visible = false;
        btn_new.Visible = false;
        btn_appgo.Visible = false;
        btn_aptnew.Visible = false;
        btn_intcallgo.Visible = true;
        btn_intcallnew.Visible = true;
        btn_trnasgo.Visible = false;
        btn_transnew.Visible = false;
        btn_relgo.Visible = false;
        btn_relnew.Visible = false;
        btn_aprgo.Visible = false;
        btn_aprnew.Visible = false;
        btn_promgo.Visible = false;
        btn_promonew.Visible = false;
        btn_incrgo.Visible = false;
        btn_incrnew.Visible = false;
        btn_loango.Visible = false;
        btn_loannew.Visible = false;
        loan.Visible = false;
    }

    protected void btn_selection_OnClick(object sender, EventArgs e)   //Modified By Jeyaprakash on June 15th
    {
        loadselectcolumnorder();
        loadcolumns(sender, e);
        binddept();
        designation();
        stafftype();
        bindsearchstapp1();
        txtappstfname.Text = "";
        lbl_err.Visible = false;
        searchbydate.Checked = false;
        txt_fdate.Enabled = false;
        txt_tdate.Enabled = false;
        ddlsearchappstf.Visible = true;
        ddlsearchappstf.SelectedIndex = 0;
        txtappstfname.Visible = true;
        txtappstfapplcode.Visible = true;
        lblappstfname.Visible = true;
        txtappstfcode.Visible = false;
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        lbladdstatus.Visible = false;
        updaddstatus.Visible = false;
        tbllabel.Visible = false;
        tbllabel1.Visible = false;
        Fpspread5.Visible = false;
        Fpspread6.Visible = false;
        Fpspread9.Visible = false;
        Fpspread4.Visible = false;
        Fpspread16.Visible = false;
        Fpspread17.Visible = false;
        Fpspread14.Visible = false;
        Fpspread10.Visible = false;
        Fpspread7.Visible = false;
        btn_selection.BackColor = Color.MediumBlue;
        btn_appointment.BackColor = Color.MediumSlateBlue;
        btn_transfer.BackColor = Color.MediumSlateBlue;
        btn_relieve.BackColor = Color.MediumSlateBlue;
        btn_promotion.BackColor = Color.MediumSlateBlue;
        btn_increment.BackColor = Color.MediumSlateBlue;
        btn_appraisal.BackColor = Color.MediumSlateBlue;
        btn_application.BackColor = Color.MediumSlateBlue;
        btn_cletter.BackColor = Color.MediumSlateBlue;
        btn_loan.BackColor = Color.MediumSlateBlue;
        staff.Visible = true;
        hide();
        headermain.Text = "Staff Selection";
        reldate.Visible = false;
        lbl_fdate.Text = "Applied Date";
        rel.Text = "";
        Fpspread14.Visible = false;
        reldate.Visible = false;
        btn_appgo.Visible = false;
        btn_new.Visible = false;
        btn_aptgo.Visible = false;
        btn_aptnew.Visible = false;
        btn_selectgo.Visible = true;
        btn_selectnew.Visible = true;
        btn_intcallgo.Visible = false;
        btn_intcallnew.Visible = false;
        btn_trnasgo.Visible = false;
        btn_transnew.Visible = false;
        btn_relgo.Visible = false;
        btn_relnew.Visible = false;
        btn_aprgo.Visible = false;
        btn_aprnew.Visible = false;
        btn_promgo.Visible = false;
        btn_promonew.Visible = false;
        btn_incrgo.Visible = false;
        btn_incrnew.Visible = false;
        btn_loango.Visible = false;
        btn_loannew.Visible = false;
        loan.Visible = false;
    }

    protected void btn_appointment_OnClick(object sender, EventArgs e)    //Modified By Jeyaprakash on June 15th
    {
        loadcolumnorder();
        loadcolumns(sender, e);
        binddept();
        designation();
        stafftype();
        bindsearchstapp();
        txtappstfname.Text = "";
        lbl_err.Visible = false;
        searchbydate.Checked = false;
        txt_fdate.Enabled = false;
        txt_tdate.Enabled = false;
        ddlsearchappstf.Visible = true;
        ddlsearchappstf.SelectedIndex = 0;
        txtappstfname.Visible = true;
        txtappstfapplcode.Visible = true;
        lblappstfname.Visible = true;
        txtappstfcode.Visible = false;
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        lbladdstatus.Visible = false;
        updaddstatus.Visible = false;
        tbllabel.Visible = false;
        tbllabel1.Visible = false;
        Fpspread15.Visible = false;
        Fpspread5.Visible = false;
        Fpspread6.Visible = false;
        Fpspread9.Visible = false;
        Fpspread4.Visible = false;
        Fpspread16.Visible = false;
        Fpspread17.Visible = false;
        Fpspread14.Visible = false;
        Fpspread7.Visible = false;
        searchbydate.Enabled = true;
        btn_appointment.BackColor = Color.MediumBlue;
        btn_transfer.BackColor = Color.MediumSlateBlue;
        btn_relieve.BackColor = Color.MediumSlateBlue;
        btn_promotion.BackColor = Color.MediumSlateBlue;
        btn_increment.BackColor = Color.MediumSlateBlue;
        btn_appraisal.BackColor = Color.MediumSlateBlue;
        btn_application.BackColor = Color.MediumSlateBlue;
        btn_cletter.BackColor = Color.MediumSlateBlue;
        btn_selection.BackColor = Color.MediumSlateBlue;
        btn_loan.BackColor = Color.MediumSlateBlue;
        staff.Visible = true;
        hide();
        headermain.Text = "Staff Appointment";
        lbl_fdate.Text = "Appointed Date";
        rel.Text = "";
        reldate.Visible = false;
        btn_appgo.Visible = false;
        btn_new.Visible = false;
        btn_aptgo.Visible = true;
        btn_aptnew.Visible = true;
        btn_selectgo.Visible = false;
        btn_selectnew.Visible = false;
        btn_intcallgo.Visible = false;
        btn_intcallnew.Visible = false;
        btn_trnasgo.Visible = false;
        btn_transnew.Visible = false;
        btn_relgo.Visible = false;
        btn_relnew.Visible = false;
        btn_aprgo.Visible = false;
        btn_aprnew.Visible = false;
        btn_promgo.Visible = false;
        btn_promonew.Visible = false;
        btn_incrgo.Visible = false;
        btn_incrnew.Visible = false;
        btn_loango.Visible = false;
        btn_loannew.Visible = false;
        loan.Visible = false;

        string checkstf = Convert.ToString(ViewState["isstaffcheck"]);
        if (checkstf.ToUpper() == "TRUE" || checkstf.ToUpper() == "1")
        {

            btn_new.Visible = false;
            btn_aptnew.Visible = false;
        }
    }

    /// /////////////////Transfer////////////////////////

    //public void pobindcollege()
    //{
    //    try
    //    {
    //        string group_code = Session["group_code"].ToString();
    //        string columnfield = "";
    //        if (group_code.Contains(';'))
    //        {
    //            string[] group_semi = group_code.Split(';');
    //            group_code = group_semi[0].ToString();
    //        }
    //        if ((group_code.ToString().Trim() != "") && (Session["single_user"].ToString() != "1" && Session["single_user"].ToString() != "true" && Session["single_user"].ToString() != "TRUE" && Session["single_user"].ToString() != "True"))
    //            columnfield = " and group_code='" + group_code + "'";
    //        else
    //            columnfield = " and user_code='" + Session["usercode"] + "'";
    //        hat.Clear();
    //        hat.Add("column_field", columnfield.ToString());//poo 28.10.17
    //        ds = d2.select_method("bind_college", hat, "sp");
    //        ddl_tocollege.Items.Clear();
    //        if (ds.Tables[0].Rows.Count > 0)
    //        {
    //            ddl_tocollege.Enabled = true;
    //            ddl_tocollege.DataSource = ds;
    //            ddl_tocollege.DataTextField = "collname";
    //            ddl_tocollege.DataValueField = "college_code";
    //            ddl_tocollege.DataBind();
    //        }
    //    }
    //    catch (Exception e) { }
    //}

    public void pobindcollege() // poo 28.10.17
    {
        try
        {
            ddlcollege1.Visible = true;
            ddlcollege1.Items.Clear();
            ds.Clear();
            string collquery = "";
            Hashtable hat = new Hashtable();
            string singleuser = Session["single_user"].ToString();
            if (singleuser == "True")
            {
                collquery = "select college_code,collname from collinfo";
            }
            else
            {
                string groupuser = Session["group_code"].ToString();
                if (groupuser.Contains(';'))
                {
                    string[] agroup = groupuser.Split(';');
                    groupuser = agroup[0].ToString();
                }
                collquery = "select college_code,collname from collinfo";
            }
            if (collquery != "")
            {
                ds = d2.select_method(collquery, hat, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ddl_tocollege.Enabled = true;
                    ddl_tocollege.DataSource = ds;
                    ddl_tocollege.DataTextField = "collname";
                    ddl_tocollege.DataValueField = "college_code";
                    ddl_tocollege.DataBind();
                }
            }
        }
        catch (Exception e) { }
    }

    protected void popbinddept1()
    {
        try
        {
            string activerow = "";
            string activecol = "";
            string scode = "";
            string collegecode1 = "";
            activerow = Fpspread1.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread1.ActiveSheetView.ActiveColumn.ToString();
            if (activerow.Trim() != "")
                scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text);
            if (btn_transfersave.Visible == true)
                collegecode1 = Convert.ToString(ddl_clg.SelectedItem.Value);
            if (btn_transupdate.Visible == true)
                collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);
            string dept = d2.GetFunction("select Dept_Code from stafftrans where staff_code='" + scode + "' and latestrec='1'");
            ds.Clear();
            ddl_tdept.Items.Clear();
            string item = "select distinct dept_code,dept_name from hrdept_master where dept_code not in('" + dept + "') and college_code='" + collegecode1 + "' order by dept_name";
            ds = d2.select_method_wo_parameter(item, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_tdept.DataSource = ds;
                ddl_tdept.DataTextField = "Dept_Name";
                ddl_tdept.DataValueField = "Dept_Code";
                ddl_tdept.DataBind();
            }
        }
        catch { }
    }

    protected void popdesignation1()
    {
        string activerow = "";
        string activecol = "";
        string scode = "";
        activerow = Fpspread1.ActiveSheetView.ActiveRow.ToString();
        activecol = Fpspread1.ActiveSheetView.ActiveColumn.ToString();
        if (activerow.Trim() != "")
            scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text);
        if (btn_transfersave.Visible == true)
            collegecode1 = Convert.ToString(ddl_clg.SelectedItem.Value);
        if (btn_transupdate.Visible == true)
            collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);
        string desig = d2.GetFunction("select desig_code from stafftrans where staff_code='" + scode + "' and latestrec='1'");
        ds.Clear();
        ddl_tdesig.Items.Clear();
        string statequery = "select distinct desig_code,desig_name from desig_master where collegeCode='" + collegecode1 + "' order by desig_name";
        ds = da.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_tdesig.DataSource = ds;
            ddl_tdesig.DataTextField = "desig_name";
            ddl_tdesig.DataValueField = "desig_code";
            ddl_tdesig.DataBind();
            ddl_tdesig.Visible = true;
        }
    }

    protected void ImageButton1_Click(object sender, EventArgs e)
    {
        Transfer.Visible = false;
    }

    protected void btn_transfer1_OnClick(object sender, EventArgs e)
    {
        int count = 0;
        if (checkedOK(Fpspread1, out count))
        {
            if (count == 1)
            {
                txt_transdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                Transfer.Visible = true;
                lbl_trserr.Visible = false;
                lbl_tralert.Visible = false;
                lbl_trerr.Visible = false;
                cb_scode.Visible = true;
                pobindcollege();
                popbinddept1();
                popdesignation1();
                lbl_alert.Visible = false;
                cb_scode.Checked = false;

                string sname = "";
                string scode = "";
                string fromdept = "";
                string fromdesig = "";
                txt_transscode.Visible = false;
                transpopbinddept();
                transpopdesign();
                Fpspread1.SaveChanges();
                for (int k = 0; k < Fpspread1.Sheets[0].Rows.Count; k++)
                {
                    byte check = Convert.ToByte(Fpspread1.Sheets[0].Cells[k, 1].Value);
                    if (check == 1)
                    {
                        sname = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 2].Text);
                        scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 3].Text);
                        fromdept = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 5].Text);
                        fromdesig = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 4].Text);
                    }
                    txt_fcollege.Text = ddl_clg.SelectedItem.Text;
                    txt_fdept.Text = fromdept;
                    txt_fdesig.Text = fromdesig;
                    txt_stfcodetrans.Text = scode;
                    txt_stfnametrans.Text = sname;
                }
            }
            else
            {
                lbl_alert.Visible = true;
                lbl_alert.Text = "Please Select any one Records! ";
            }
        }
        else
        {
            lbl_alert.Visible = true;
            lbl_alert.Text = "Please Select any one Records! ";
        }
    }

    protected void btn_transfer_OnClick(object sender, EventArgs e)//Modified By Jeyaprakash on June 15th
    {
        loadcolumnorder();
        loadcolumns(sender, e);
        binddept();
        designation();
        stafftype();
        bindsearchstapp();
        txtappstfname.Text = "";
        lbl_err.Visible = false;
        searchbydate.Checked = false;
        txt_fdate.Enabled = false;
        txt_tdate.Enabled = false;
        ddlsearchappstf.Visible = true;
        ddlsearchappstf.SelectedIndex = 0;
        txtappstfname.Visible = true;
        txtappstfapplcode.Visible = true;
        lblappstfname.Visible = true;
        txtappstfcode.Visible = false;
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        lbladdstatus.Visible = false;
        updaddstatus.Visible = false;
        cblcolumnorder.Items.Add(new ListItem("Transfer Date", "transfer_date"));
        cblcolumnorder.Items.Add(new ListItem("From Dept", "fromdept"));
        cblcolumnorder.Items.Add(new ListItem("To Dept", "TodeptName"));
        cblcolumnorder.Items.Add(new ListItem("From Design", "FromDesgName"));
        cblcolumnorder.Items.Add(new ListItem("To Design", "ToDesigName"));
        tbllabel.Visible = false;
        tbllabel1.Visible = false;
        Fpspread15.Visible = false;
        Fpspread5.Visible = false;
        Fpspread6.Visible = false;
        Fpspread9.Visible = false;
        Fpspread16.Visible = false;
        Fpspread17.Visible = false;
        Fpspread14.Visible = false;
        Fpspread10.Visible = false;
        Fpspread7.Visible = false;
        searchbydate.Enabled = true;
        btn_transfer.BackColor = Color.MediumBlue;
        btn_relieve.BackColor = Color.MediumSlateBlue;
        btn_promotion.BackColor = Color.MediumSlateBlue;
        btn_increment.BackColor = Color.MediumSlateBlue;
        btn_appraisal.BackColor = Color.MediumSlateBlue;
        btn_application.BackColor = Color.MediumSlateBlue;
        btn_cletter.BackColor = Color.MediumSlateBlue;
        btn_selection.BackColor = Color.MediumSlateBlue;
        btn_appointment.BackColor = Color.MediumSlateBlue;
        btn_loan.BackColor = Color.MediumSlateBlue;
        staff.Visible = true;
        hide();
        reldate.Visible = false;
        headermain.Text = "Staff Transfer";
        lbl_fdate.Text = "Transfer Date";
        rel.Text = "";
        btn_aptgo.Visible = false;
        btn_aptnew.Visible = false;
        btn_selectgo.Visible = false;
        btn_selectnew.Visible = false;
        btn_trnasgo.Visible = true;
        btn_transnew.Visible = true;
        btn_intcallgo.Visible = false;
        btn_intcallnew.Visible = false;
        btn_relgo.Visible = false;
        btn_relnew.Visible = false;
        btn_aprgo.Visible = false;
        btn_aprnew.Visible = false;
        btn_promgo.Visible = false;
        btn_promonew.Visible = false;
        btn_incrgo.Visible = false;
        btn_incrnew.Visible = false;
        btn_appgo.Visible = false;
        btn_new.Visible = false;
        btn_loango.Visible = false;
        btn_loannew.Visible = false;
        loan.Visible = false;
    }

    protected void btn_transfersave_OnClick(object sender, EventArgs e)
    {
        try
        {
            string activerow = "";
            string activecol = "";
            string scode = "";
            string newscode = "";
            string applno = "";
            string query = "";
            string stftype = "";
            int overallins = 0;
            string college = ddl_clg.SelectedValue;
            string toclg = Convert.ToString(ddl_tocollege.SelectedItem.Value);
            Fpspread1.SaveChanges();
            lbl_trserr.Visible = false;

            if (cb_scode.Checked == true)
            {
                newscode = txt_transscode.Text;
                scode = txt_stfcodetrans.Text;

                if (newscode.Trim() != "")
                {
                    activerow = Fpspread1.ActiveSheetView.ActiveRow.ToString();
                    activecol = Fpspread1.ActiveSheetView.ActiveColumn.ToString();
                    if (activerow.Trim() != "")
                    {
                        applno = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Tag);
                        stftype = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 5].Tag);
                    }
                    query = "update staffmaster set staff_code='" + newscode.ToUpper() + "',college_code='" + toclg + "' where appl_no='" + applno + "' and staff_code='" + scode + "' and college_code='" + college + "' ";//22.08.17
                }
                else
                {
                    lbl_trserr.Visible = true;
                    lbl_trserr.Text = "Please Enter the New Staff Code!";
                    return;
                }
            }
            else
            {
                newscode = txt_stfcodetrans.Text;
                activerow = Fpspread1.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread1.ActiveSheetView.ActiveColumn.ToString();
                if (activerow.Trim() != "")
                {
                    scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text);
                    applno = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Tag);
                    stftype = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 5].Tag);
                }
                query = "update staffmaster set college_code='" + toclg + "' where appl_no='" + applno + "' and staff_code='" + scode + "' and college_code='" + college + "'";// 22.08.17 staff_code='" + newscode.ToUpper() + "' ,
            }

            string txtstfcode = Convert.ToString(txt_stfcodetrans.Text);
            string transdate = txt_transdate.Text;
            string[] split = transdate.Split('/');
            DateTime dt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            string fromdept = txt_fdept.Text;


            string fromdeptcode = d2.GetFunction("select dept_code from hrdept_master where dept_name='" + fromdept + "' and college_code='" + college + "'");
            string todept = ddl_tdept.SelectedValue;
            string fromdesig = txt_fdesig.Text;

            string fromdesigcode = d2.GetFunction("select desig_code from desig_master where desig_name='" + fromdesig + "' and collegeCode='" + college + "'");
            string todesig = ddl_tdesig.SelectedValue;

            string hrsno = d2.GetFunction("select StartNo from HRS_CodeSettings  where SettingField='1' and CollegeCode='" + college + "'");
            int startno = Convert.ToInt32(hrsno);

            query = query + " insert into staff_transfer (from_dep_code,to_dep_code,college_code,to_col_code,from_dsg_code,to_dsg_code,transfer_date,oldsaff_code,newstaff_code) values ('" + fromdeptcode + "','" + todept + "','" + college + "','" + toclg + "','" + fromdesigcode + "','" + todesig + "','" + dt.ToString("MM/dd/yyyy") + "','" + txtstfcode + "','" + newscode.ToUpper() + "')";

            string stfcodeupd = d2.GetFunction("select value from Master_Settings where settings='HR_StaffUpdate' and value is not null and value<>'' and userCode='" + usercode + "'");

            int usno = startno + 1;

            query = query + " update HRS_CodeSettings set StartNo='" + usno + "' where SettingField='1' and CollegeCode='" + college + "'";

            query += " update staff_appl_master set dept_code='" + todept + "',desig_code='" + todesig + "',college_code='" + toclg + "' where appl_no='" + applno + "' and college_code='" + college + "'";

            if (cb_scode.Checked == true && stfcodeupd.Trim() == "1")
            {
                string rollquery = rollnoupdate(txtstfcode, newscode.ToUpper());
                try
                {
                    int rollcount = d2.update_method_wo_parameter(rollquery, "Text");
                }
                catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "Staff_Manager.aspx"); }

                string staffcodequery = staffcodeupdate(txtstfcode, newscode.ToUpper());
                try
                {
                    int staffcount = d2.update_method_wo_parameter(staffcodequery, "Text");
                }
                catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "Staff_Manager.aspx"); }

                string subcodequery = substaffcodeupdate(txtstfcode, newscode.ToUpper());
                try
                {
                    int substaffcount = d2.update_method_wo_parameter(subcodequery, "Text");
                }
                catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "Staff_Manager.aspx"); }
            }
            int count = d2.update_method_wo_parameter(query, "Text");
            if (count > 0)
            {
                string selq = "select staff_code,desig_code,stftype,category_code,stfstatus,stfnature,bsalary,parea,growth,remarks,smdate,latestrec,dept_code,payscale,emp_pf,pf_amt,allowances,deductions,increment_date,inc_status,leavecategory,longleaveapplydate,longleavewithdrawaldate,holidaycategory,cert_type,time_category,admcategory,basicpay,datype,daallow,saltype,grade_pay,pareaval,Shift,MPFAmount,MPFPer,IsMPFAmt,FacultyType,PayMode,Programme,BasicType,Basic,AGP,IncrementAmt,IncrementTime,IsConsolid,Desig_Code_From,BasicInc,AllowIncDet,IsManualLOP,IsDailyWages,BankAccType,IsAutoGP,Isincrement from stafftrans where staff_code ='" + txtstfcode + "' and latestrec ='1'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selq, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    string updq = "update stafftrans set latestrec ='0' where staff_code ='" + txtstfcode + "'";
                    int newupcount = d2.update_method_wo_parameter(updq, "Text");
                    if (newupcount > 0)
                    {
                        string latest = "";
                        string latestrec = Convert.ToString(ds.Tables[0].Rows[0]["latestrec"]);
                        if (latestrec.ToUpper() == "TRUE")
                            latest = "1";
                        else
                            latest = "0";
                        string emppf = "";
                        string emplpf = Convert.ToString(ds.Tables[0].Rows[0]["emp_pf"]);
                        if (emplpf.ToUpper() == "TRUE")
                            emppf = "1";
                        else
                            emppf = "0";
                        string incstat = "";
                        string incstatus = Convert.ToString(ds.Tables[0].Rows[0]["inc_status"]);
                        if (incstatus.ToUpper() == "TRUE")
                            incstat = "1";
                        else
                            incstat = "0";
                        string ismpf = "";
                        string ismpfamt = Convert.ToString(ds.Tables[0].Rows[0]["IsMPFAmt"]);
                        if (ismpfamt.ToUpper() == "TRUE")
                            ismpf = "1";
                        else
                            ismpf = "0";
                        string isconsolid = "";
                        string isconsolidate = Convert.ToString(ds.Tables[0].Rows[0]["IsConsolid"]);
                        if (isconsolidate.ToUpper() == "TRUE")
                            isconsolid = "1";
                        else
                            isconsolid = "0";
                        string ismanual = "";
                        string ismanuallop = Convert.ToString(ds.Tables[0].Rows[0]["IsManualLOP"]);
                        if (ismanuallop.ToUpper() == "TRUE")
                            ismanual = "1";
                        else
                            ismanual = "0";
                        string isdaily = "";
                        string isdailywages = Convert.ToString(ds.Tables[0].Rows[0]["IsDailyWages"]);
                        if (isdailywages.ToUpper() == "TRUE")
                            isdaily = "1";
                        else
                            isdaily = "0";
                        string isauto = "";
                        string isautogp = Convert.ToString(ds.Tables[0].Rows[0]["IsAutoGP"]);
                        if (isautogp.ToUpper() == "TRUE")
                            isauto = "1";
                        else
                            isauto = "0";
                        string certtype = "";
                        string cert_type = Convert.ToString(ds.Tables[0].Rows[0]["cert_type"]);
                        if (cert_type.Trim() != "")
                            certtype = cert_type;
                        else
                            certtype = "0";
                        string bsalary = "0";
                        string bsal = Convert.ToString(ds.Tables[0].Rows[0]["bsalary"]);
                        if (bsal.Trim() != "")
                            bsalary = bsal;
                        string timecategory = "0";
                        string timecat = Convert.ToString(ds.Tables[0].Rows[0]["time_category"]);
                        if (timecat.Trim() != "")
                            timecategory = timecat;
                        string saltype = "0";
                        string salarytyp = Convert.ToString(ds.Tables[0].Rows[0]["saltype"]);
                        if (salarytyp.Trim() != "")
                            saltype = salarytyp;
                        string gradeamnt = "0";
                        string gradepay = Convert.ToString(ds.Tables[0].Rows[0]["grade_pay"]);
                        if (gradepay.Trim() != "")
                            gradeamnt = gradepay;
                        string parea = "0";
                        string pareaval = Convert.ToString(ds.Tables[0].Rows[0]["pareaval"]);
                        if (pareaval.Trim() != "")
                            parea = pareaval;
                        string basicamnt = "0";
                        string basicpay = Convert.ToString(ds.Tables[0].Rows[0]["basicpay"]);
                        if (basicpay.Trim() != "")
                            basicamnt = basicpay;
                        string dall = "0";
                        string daallow = Convert.ToString(ds.Tables[0].Rows[0]["daallow"]);
                        if (daallow.Trim() != "")
                            dall = daallow;
                        string mpfamnt = "0";
                        string MPFAmount = Convert.ToString(ds.Tables[0].Rows[0]["MPFAmount"]);
                        if (MPFAmount.Trim() != "")
                            mpfamnt = MPFAmount;
                        string mpfper = "0";
                        string MPFPer = Convert.ToString(ds.Tables[0].Rows[0]["MPFPer"]);
                        if (MPFPer.Trim() != "")
                            mpfper = MPFPer;
                        string paymod = "0";
                        string PayMode = Convert.ToString(ds.Tables[0].Rows[0]["PayMode"]);
                        if (PayMode.Trim() != "")
                            paymod = PayMode;
                        string BasicTyp = "0";
                        string BasicType = Convert.ToString(ds.Tables[0].Rows[0]["BasicType"]);
                        if (BasicType.Trim() != "")
                            BasicTyp = BasicType;
                        string Bas = "0";
                        string Basic = Convert.ToString(ds.Tables[0].Rows[0]["Basic"]);
                        if (Basic.Trim() != "")
                            Bas = Basic;
                        string agp = "0";
                        string AGP = Convert.ToString(ds.Tables[0].Rows[0]["AGP"]);
                        if (AGP.Trim() != "")
                            agp = AGP;
                        string incramnt = "0";
                        string IncrementAmt = Convert.ToString(ds.Tables[0].Rows[0]["IncrementAmt"]);
                        if (IncrementAmt.Trim() != "")
                            incramnt = IncrementAmt;
                        string incrtime = "0";
                        string IncrementTime = Convert.ToString(ds.Tables[0].Rows[0]["IncrementTime"]);
                        if (IncrementTime.Trim() != "")
                            incrtime = IncrementTime;
                        string basinc = "0";
                        string BasicInc = Convert.ToString(ds.Tables[0].Rows[0]["BasicInc"]);
                        if (BasicInc.Trim() != "")
                            basinc = BasicInc;
                        string bankacc = "0";
                        string BankAccType = Convert.ToString(ds.Tables[0].Rows[0]["BankAccType"]);
                        if (BankAccType.Trim() != "")
                            bankacc = BankAccType;
                        string isinc = "0";
                        string Isincrement = Convert.ToString(ds.Tables[0].Rows[0]["Isincrement"]);
                        if (Isincrement.Trim() != "")
                            isinc = Isincrement;
                        string insq = "insert into stafftrans (staff_code,desig_code,stftype,category_code,stfstatus,stfnature,bsalary,parea,growth,remarks,smdate,latestrec,dept_code,payscale,emp_pf,pf_amt,allowances,deductions,increment_date,inc_status,leavecategory,longleaveapplydate,longleavewithdrawaldate,holidaycategory,cert_type,time_category,admcategory,basicpay,datype,daallow,saltype,grade_pay,pareaval,Shift,MPFAmount,MPFPer,IsMPFAmt,FacultyType,PayMode,Programme,BasicType,Basic,AGP,IncrementAmt,IncrementTime,IsConsolid,Desig_Code_From,BasicInc,AllowIncDet,IsManualLOP,IsDailyWages,BankAccType,IsAutoGP,Isincrement) values ('" + newscode.ToUpper() + "','" + todesig + "','" + Convert.ToString(ds.Tables[0].Rows[0]["stftype"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["category_code"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["stfstatus"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["stfnature"]) + "','" + bsalary + "','3','" + Convert.ToString(ds.Tables[0].Rows[0]["growth"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["remarks"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["smdate"]) + "','" + latest + "','" + todept + "','" + Convert.ToString(ds.Tables[0].Rows[0]["payscale"]) + "','" + emppf + "','" + Convert.ToString(ds.Tables[0].Rows[0]["pf_amt"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["allowances"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["deductions"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["increment_date"]) + "','" + incstat + "','" + Convert.ToString(ds.Tables[0].Rows[0]["leavecategory"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["longleaveapplydate"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["longleavewithdrawaldate"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["holidaycategory"]) + "','" + certtype + "','" + timecategory + "','" + Convert.ToString(ds.Tables[0].Rows[0]["admcategory"]) + "','" + basicamnt + "','" + Convert.ToString(ds.Tables[0].Rows[0]["datype"]) + "','" + dall + "','" + saltype + "','" + gradeamnt + "','" + parea + "','" + Convert.ToString(ds.Tables[0].Rows[0]["Shift"]) + "','" + mpfamnt + "','" + mpfper + "','" + ismpf + "','" + Convert.ToString(ds.Tables[0].Rows[0]["FacultyType"]) + "','" + paymod + "','" + Convert.ToString(ds.Tables[0].Rows[0]["Programme"]) + "','" + BasicTyp + "','" + Bas + "','" + agp + "','" + incramnt + "','" + incrtime + "','" + isconsolid + "','" + Convert.ToString(ds.Tables[0].Rows[0]["Desig_Code_From"]) + "','" + basinc + "','" + Convert.ToString(ds.Tables[0].Rows[0]["AllowIncDet"]) + "','" + ismanual + "','" + isdaily + "','" + bankacc + "','" + isauto + "','" + isinc + "')";
                        overallins = d2.update_method_wo_parameter(insq, "Text");
                    }
                }
            }

            if (count != 0 && overallins != 0)
            {
                Transfer.Visible = false;
                alertpopwindow.Visible = true;
                lblalerterr.Text = " Transfered  " + fromdept + "  to  " + ddl_tdept.SelectedItem + "";
                btn_popgo_OnClick(sender, e);
                lbl_trserr.Visible = false;
            }
        }
        catch { }
    }

    protected void btn_transupdate_OnClick(object sender, EventArgs e)
    {
        string activerow = "";
        string activecol = "";
        string applno = "";
        string newscode = "";
        string scode = "";
        string transid = "";
        lbl_err.Visible = false;
        lbl_trserr.Visible = false;
        activerow = Fpspread4.ActiveSheetView.ActiveRow.ToString();
        activecol = Fpspread4.ActiveSheetView.ActiveColumn.ToString();
        string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
        string toclg = Convert.ToString(ddl_tocollege.SelectedItem.Value);

        if (activerow.Trim() != "")
        {
            applno = Convert.ToString(Fpspread4.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
            transid = Convert.ToString(Fpspread4.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Note);
        }
        string query = "";
        if (cb_scode.Checked == true)
        {
            newscode = txt_transscode.Text;
            scode = txt_stfcodetrans.Text;

            if (newscode.Trim() != "")
            {
                query = " update staffmaster set staff_code='" + newscode.ToUpper() + "' where appl_no='" + applno + "' and staff_code='" + scode + "' and college_code='" + collcode + "'";
            }
            else
            {
                lbl_trserr.Visible = true;
                lbl_trserr.Text = "Please Enter the New StaffCode!";
                return;
            }
        }
        else
        {
            newscode = txt_stfcodetrans.Text;
            scode = txt_stfcodetrans.Text;
            query = " update staffmaster set staff_code='" + newscode.ToUpper() + "' where appl_no='" + applno + "' and staff_code='" + scode + "' and college_code='" + collcode + "'";
        }

        string txtstfcode = Convert.ToString(txt_stfcodetrans.Text);
        string transdate = txt_transdate.Text;
        string[] split = transdate.Split('/');
        DateTime dt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
        string fromdept = txt_fdept.Text;

        string fromdeptcode = d2.GetFunction("select dept_code from hrdept_master where Dept_Name='" + fromdept + "' and college_code='" + collcode + "'");
        string todept = ddl_tdept.SelectedValue;
        string fromdesig = txt_fdesig.Text;

        string fromdesigcode = d2.GetFunction("select desig_code from desig_master where desig_name='" + fromdesig + "' and collegeCode='" + collcode + "'");
        string todesig = ddl_tdesig.SelectedValue;

        query = query + " update staff_transfer set from_dep_code='" + fromdeptcode + "',to_dep_code='" + todept + "',from_dsg_code ='" + fromdesigcode + "',to_dsg_code='" + todesig + "',college_code ='" + collcode + "',to_col_code ='" + toclg + "',newstaff_code ='" + newscode.ToUpper() + "',oldsaff_code ='" + scode + "',transfer_date='" + dt.ToString("MM/dd/yyyy") + "' where TransferPK='" + transid + "'";

        query = query + " update stafftrans set desig_code ='" + todesig + "',dept_code ='" + todept + "',staff_code ='" + newscode.ToUpper() + "',smdate ='" + dt.ToString("MM/dd/yyyy") + "' where staff_code ='" + txtstfcode + "' and latestrec ='1' and parea='3'";

        string stfcodeupd = d2.GetFunction("select value from Master_Settings where settings='HR_StaffUpdate' and value is not null and value<>'' and userCode='" + usercode + "'");

        if (cb_scode.Checked == true && stfcodeupd.Trim() == "1")
        {
            string rollquery = rollnoupdate(txtstfcode, newscode.ToUpper());
            try
            {
                int rollcount = d2.update_method_wo_parameter(rollquery, "Text");
            }
            catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "Staff_Manager.aspx"); }

            string staffcodequery = staffcodeupdate(txtstfcode, newscode.ToUpper());
            try
            {
                int staffcount = d2.update_method_wo_parameter(staffcodequery, "Text");
            }
            catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "Staff_Manager.aspx"); }

            string subcodequery = substaffcodeupdate(txtstfcode, newscode.ToUpper());
            try
            {
                int substaffcount = d2.update_method_wo_parameter(subcodequery, "Text");
            }
            catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "Staff_Manager.aspx"); }
        }
        int count = d2.update_method_wo_parameter(query, "Text");
        if (count != 0)
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = " Transfered  " + fromdept + "  to  " + ddl_tdept.SelectedItem + "";
            Transfer.Visible = false;
            btn_trnasgo_Click(sender, e);
            lbl_trserr.Visible = false;
        }
    }

    /// /////////////Relieve////////////////
    /// 

    protected void btn_relieve_OnClick(object sender, EventArgs e)    //Modified By Jeyaprakash on June 15th
    {
        staff.Visible = true;
        loadcolumnorder();
        cblcolumnorder.Items.Add(new ListItem("Discontinue Date", "Discontinue_Date"));
        loadcolumns(sender, e);
        binddept();
        designation();
        stafftype();
        bindsearchstapp();
        txtappstfname.Text = "";
        lbl_err.Visible = false;
        searchbydate.Checked = false;
        txt_fdate.Enabled = false;
        txt_tdate.Enabled = false;
        ddlsearchappstf.Visible = true;
        ddlsearchappstf.SelectedIndex = 0;
        txtappstfname.Visible = true;
        txtappstfapplcode.Visible = true;
        lblappstfname.Visible = true;
        txtappstfcode.Visible = false;
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        lbladdstatus.Visible = false;
        updaddstatus.Visible = false;
        tbllabel.Visible = false;
        tbllabel1.Visible = false;
        Fpspread15.Visible = false;
        Fpspread6.Visible = false;
        Fpspread9.Visible = false;
        Fpspread4.Visible = false;
        Fpspread16.Visible = false;
        Fpspread17.Visible = false;
        Fpspread14.Visible = false;
        Fpspread10.Visible = false;
        Fpspread7.Visible = false;
        searchbydate.Enabled = true;
        btn_relieve.BackColor = Color.MediumBlue;
        btn_promotion.BackColor = Color.MediumSlateBlue;
        btn_increment.BackColor = Color.MediumSlateBlue;
        btn_appraisal.BackColor = Color.MediumSlateBlue;
        btn_application.BackColor = Color.MediumSlateBlue;
        btn_cletter.BackColor = Color.MediumSlateBlue;
        btn_selection.BackColor = Color.MediumSlateBlue;
        btn_appointment.BackColor = Color.MediumSlateBlue;
        btn_transfer.BackColor = Color.MediumSlateBlue;
        btn_loan.BackColor = Color.MediumSlateBlue;
        hide();
        headermain.Text = "Staff Relieve";
        lbl_fdate.Text = "From Date";
        btn_aptgo.Visible = false;
        btn_aptnew.Visible = false;
        btn_selectgo.Visible = false;
        btn_selectnew.Visible = false;
        btn_appgo.Visible = false;
        btn_new.Visible = false;
        btn_intcallgo.Visible = false;
        btn_intcallnew.Visible = false;
        btn_trnasgo.Visible = false;
        btn_transnew.Visible = false;
        btn_relgo.Visible = true;
        btn_relnew.Visible = true;
        rel.Text = "1";
        btn_aprgo.Visible = false;
        btn_aprnew.Visible = false;
        btn_promgo.Visible = false;
        btn_promonew.Visible = false;
        btn_incrgo.Visible = false;
        btn_incrnew.Visible = false;
        btn_loango.Visible = false;
        btn_loannew.Visible = false;
        loan.Visible = false;
        reldate.Visible = true;
    }

    protected void btn_relieve1_OnClick(object sender, EventArgs e)
    {
        int count = 0;
        string applno = "";
        string ApplID = string.Empty;
        string staffcode = "";
        string staffname = "";
        rdb_relieved.Enabled = true;
        rdb_disc.Enabled = true;
        rdb_cancelrel.Enabled = false;
        rdb_cancelrel.Visible = false;
        lnkShwStudDet.Visible = false;
        cbisnotisepaystaff.Checked = false;
        txt_noticepay.Visible = false;

        if (checkedOK(Fpspread1, out count))
        {
            if (count == 1)
            {
                Relieve.Visible = true;
                txt_rldate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txt_regnation.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txt_remarks.Text = "";
                rdb_relieved.Checked = true;
                rdb_disc.Checked = false;
                rdb_cancelrel.Checked = false;
                lbl_alert.Visible = false;
                Fpspread1.SaveChanges();
                for (int k = 0; k < Fpspread1.Sheets[0].Rows.Count; k++)
                {
                    byte check = Convert.ToByte(Fpspread1.Sheets[0].Cells[k, 1].Value);
                    if (check == 1)
                    {
                        applno = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 3].Tag);
                        staffcode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 3].Text);
                        staffname = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 2].Text);

                        txt_stfrelcode.Text = staffcode;
                        txt_stfrelname.Text = staffname;
                        ApplID = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + applno + "' and college_code='" + Convert.ToString(ddl_clg.SelectedItem.Value) + "'");
                        string SelQ = "select Stud_Name from Registration where staff_appl_id='" + ApplID + "' and CC=0 and DelFlag=0 and Exam_Flag<>'Debar'";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(SelQ, "Text");
                        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                            lnkShwStudDet.Visible = true;
                    }
                }
            }
            else
            {
                lbl_alert.Visible = true;
                lbl_alert.Text = "Please Select any one Records!";
            }
        }
        else
        {
            lbl_alert.Visible = true;
            lbl_alert.Text = "Please Select any one  Records ";
        }
    }

    protected void rdb_resig_OnCheckedChanged(object sender, EventArgs e)
    {

    }

    protected void ImageButton2_Click(object sender, EventArgs e)
    {
        Relieve.Visible = false;
    }

    protected void btn_relieve_save_OnClick(object sender, EventArgs e)
    {
        try
        {
            string scode = "";
            scode = Convert.ToString(txt_stfrelcode.Text);
            string relievedate = txt_rldate.Text;
            string resigdate = txt_regnation.Text;
            string[] split = relievedate.Split('/');
            string[] split1 = resigdate.Split('/');
            string noticeval = string.Empty;
            if (cbisnotisepaystaff.Checked == true)
            {
                noticeval = txt_noticepay.Text;
            }
            DateTime dt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            DateTime dt1 = Convert.ToDateTime(split1[1] + "/" + split1[0] + "/" + split1[2]);
            string remarks = txt_remarks.Text;
            string collcode = Convert.ToString(ddl_clg.SelectedItem.Value);
            string ApplID = string.Empty;
            string ApplNo = Convert.ToString(d2.GetFunction("select appl_no from staffmaster where staff_Code='" + scode + "' and college_code='" + collcode + "'"));
            if (!String.IsNullOrEmpty(ApplNo) && ApplNo.Trim() != "0")
                ApplID = Convert.ToString(d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + ApplNo + "' and college_code='" + collcode + "'"));
            string query = "";
            string query1 = "";
            int relcount = 0;
            int disccount = 0;

            if (rdb_relieved.Checked == true)
            {
                query = "update staffmaster set resign=1,settled=1,relieve_date='" + dt.ToString("MM/dd/yyyy") + "',RelivedReason='" + remarks + "',resigdate='" + dt1.ToString("MM/dd/yyyy") + "',noticepay='" + noticeval + "' where staff_code='" + scode + "' and college_code='" + collcode + "'";
                relcount = d2.update_method_wo_parameter(query, "Text");
            }
            if (rdb_disc.Checked == true)
            {
                query1 = "update staffmaster set Discontinue=1,Discontinue_Date='" + dt.ToString("MM/dd/yyyy") + "',RelivedReason='" + remarks + "' where staff_code='" + scode + "' and college_code='" + collcode + "'";
                disccount = d2.update_method_wo_parameter(query1, "Text");
            }
            if (relcount != 0)
            {
                Relieve.Visible = false;
                alertpopwindow.Visible = true;
                lblalerterr.Text = " Relieved Successfully! ";
                btn_popgo_OnClick(sender, e);
            }
            if (disccount != 0)
            {
                Relieve.Visible = false;
                alertpopwindow.Visible = true;
                lblalerterr.Text = " Discontinued Successfully! ";
                btn_popgo_OnClick(sender, e);
            }
            if (relcount > 0 || disccount > 0)
            {
                if (!String.IsNullOrEmpty(ApplID) && ApplID.Trim() != "0")
                {
                    query = " if exists(select Stud_Name,Is_Stud_Staff,staff_appl_id from Registration where staff_appl_id='" + ApplID + "') update Registration set Is_Stud_Staff='0' where staff_appl_id='" + ApplID + "'";
                    int MyRelCount = d2.update_method_wo_parameter(query, "Text");
                }
            }
        }
        catch { }
    }

    protected void btn_relieveupdate_OnClick(object sender, EventArgs e)
    {
        try
        {
            string activerow = "";
            string activecol = "";
            string applno = "";
            string collcode = "";
            string query = "";
            string relievedate = txt_rldate.Text;
            string resigdate = txt_regnation.Text;
            string[] split = relievedate.Split('/');
            string[] split1 = resigdate.Split('/');
            string noticeval = string.Empty;
            if (cbisnotisepaystaff.Checked == true)
            {
                noticeval = txt_noticepay.Text;
            }
            DateTime dt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            DateTime dt1 = Convert.ToDateTime(split1[1] + "/" + split1[0] + "/" + split1[2]);
            string remarks = txt_remarks.Text;
            activerow = Fpspread5.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread5.ActiveSheetView.ActiveColumn.ToString();

            string ApplID = string.Empty;
            if (activerow.Trim() != "")
            {
                applno = Convert.ToString(Fpspread5.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                collcode = Convert.ToString(Fpspread5.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Note);
                ApplID = Convert.ToString(d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + applno + "' and college_code='" + collcode + "'"));
            }

            string scode = d2.GetFunction("select staff_code from staffmaster where appl_no='" + applno + "' and college_code='" + collcode + "'");
            if (rdb_relieved.Checked == true)
                query = "update staffmaster set resign=1,settled=1,resigdate='" + dt1.ToString("MM/dd/yyyy") + "',relieve_date='" + dt.ToString("MM/dd/yyyy") + "',RelivedReason='" + remarks + "',noticepay='" + noticeval + "' where staff_code='" + scode + "' and college_code='" + collcode + "'";
            if (rdb_disc.Checked == true)
                query = "update staffmaster set Discontinue=1,Discontinue_Date='" + dt.ToString("MM/dd/yyyy") + "',RelivedReason='" + remarks + "' where staff_code='" + scode + "' and college_code='" + collcode + "'";
            if (rdb_cancelrel.Checked == true)
                query = "update staffmaster set Discontinue=0,resign=0,settled=0,Discontinue_Date=null,relieve_date=null where staff_code='" + scode + "' and college_code='" + collcode + "'";
            int count = d2.update_method_wo_parameter(query, "Text");
            if (count != 0)
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = " Updated Successfully ";
                if (!String.IsNullOrEmpty(ApplID) && ApplID.Trim() != "0" && (rdb_relieved.Checked == true || rdb_disc.Checked == true))
                {
                    query = " if exists(select Stud_Name,Is_Stud_Staff,staff_appl_id from Registration where staff_appl_id='" + ApplID + "') update Registration set Is_Stud_Staff='0' where staff_appl_id='" + ApplID + "'";
                    int MyRelCount = d2.update_method_wo_parameter(query, "Text");
                }
                Relieve.Visible = false;
                btn_relgo_OnClick(sender, e);
            }
        }
        catch { }
    }

    protected void lnkShwStudDet_Click(object sender, EventArgs e)
    {
        try
        {
            Fpspread23.Visible = false;
            divStudRep.Visible = false;
            lblValStudRep.Visible = false;
            string scode = Convert.ToString(txt_stfrelcode.Text);
            string ApplNo = Convert.ToString(d2.GetFunction("select appl_no from staffmaster where staff_code='" + scode + "'"));
            string ApplID = Convert.ToString(d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + ApplNo + "'"));
            if (!String.IsNullOrEmpty(ApplID) && ApplID.Trim() != "0")
            {
                string SelQ = "select Roll_No,Reg_No,Roll_Admit,Stud_Name,r.Batch_Year,r.Degree_Code,r.college_code from Registration r,Degree d,Department dt,Course c where r.degree_code=d.degree_code and c.course_id=d.course_id and d.dept_code=dt.dept_code and CC=0 and DelFlag=0 and Exam_Flag<>'Debar' and r.staff_appl_id='" + ApplID + "'";
                SelQ = SelQ + " select c.Course_Name+'-'+dep.Dept_Name as Dept,d.Degree_Code,d.college_code from Degree d,Course c,Department dep where d.Course_Id=c.Course_Id and d.Dept_Code=dep.Dept_Code";
                DataView dvMy = new DataView();
                ds.Clear();
                ds = d2.select_method_wo_parameter(SelQ, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    divShowStudDet.Visible = true;
                    LoadHeader(Fpspread23);
                    Fpspread23.Columns[1].Visible = false;
                    for (int myDs = 0; myDs < ds.Tables[0].Rows.Count; myDs++)
                    {
                        Fpspread23.Sheets[0].RowCount++;
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(myDs + 1);
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[myDs]["Roll_No"]);
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;

                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[myDs]["Reg_No"]);
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;

                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[myDs]["Roll_Admit"]);
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Left;
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;

                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(ds.Tables[0].Rows[myDs]["Stud_Name"]);
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Left;
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 5].Font.Size = FontUnit.Medium;

                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(ds.Tables[0].Rows[myDs]["Batch_Year"]);
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Left;
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 6].Font.Name = "Book Antiqua";
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 6].Font.Size = FontUnit.Medium;

                        ds.Tables[1].DefaultView.RowFilter = " Degree_Code='" + Convert.ToString(ds.Tables[0].Rows[myDs]["Degree_Code"]) + "'";
                        dvMy = ds.Tables[1].DefaultView;
                        if (dvMy.Count > 0)
                            Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 7].Text = Convert.ToString(dvMy[0]["Dept"]);
                        else
                            Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 7].Text = "";
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 7].HorizontalAlign = HorizontalAlign.Left;
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 7].Font.Name = "Book Antiqua";
                        Fpspread23.Sheets[0].Cells[Fpspread23.Sheets[0].RowCount - 1, 7].Font.Size = FontUnit.Medium;
                    }
                    Fpspread23.Sheets[0].PageSize = Fpspread23.Sheets[0].RowCount;
                    Fpspread23.Visible = true;
                    divStudRep.Visible = true;
                }
            }
        }
        catch { }
    }

    protected void ImageButton16_Click(object sender, EventArgs e)
    {
        divShowStudDet.Visible = false;
    }

    protected void btnStudXL_Click(object sender, EventArgs e)
    {
        try
        {
            lblValStudRep.Visible = false;
            string reportname = txtStudxl.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread23, reportname);
            }
            else
            {
                lblValStudRep.Text = "Please Enter Your Report Name";
                lblValStudRep.Visible = true;
                txtStudxl.Focus();
            }
        }
        catch { }
    }

    protected void btnStudPrint_Click(object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Staff's Children Details";
            string pagename = "Staff_Manager.aspx";
            Printmaster10.loadspreaddetails(Fpspread23, pagename, degreedetails);
            Printmaster10.Visible = true;
        }
        catch { }
    }

    public void bindstfcollege()
    {
        try
        {
            string group_code = Session["group_code"].ToString();
            string columnfield = "";
            if (group_code.Contains(';'))
            {
                string[] group_semi = group_code.Split(';');
                group_code = group_semi[0].ToString();
            }
            if ((group_code.ToString().Trim() != "") && (Session["single_user"].ToString() != "1" && Session["single_user"].ToString() != "true" && Session["single_user"].ToString() != "TRUE" && Session["single_user"].ToString() != "True"))
                columnfield = " and group_code='" + group_code + "'";
            else
                columnfield = " and user_code='" + Session["usercode"] + "'";
            hat.Clear();
            hat.Add("column_field", columnfield.ToString());
            ds = d2.select_method("bind_college", hat, "sp");
            ddlscollege.Items.Clear();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlscollege.Enabled = true;
                ddlscollege.DataSource = ds;
                ddlscollege.DataTextField = "collname";
                ddlscollege.DataValueField = "college_code";
                ddlscollege.DataBind();
            }
        }
        catch (Exception e) { }
    }

    protected void btn_selectnew_OnClick(object sender, EventArgs e)
    {
        divSelect.Visible = true;
        filterstf.Visible = true;
        Fpspread19.Visible = false;
        lbl_salert.Visible = false;
        chkseldate.Checked = false;
        bindstfcollege();
        staffinterview.Visible = false;
        cb_sinterviewdet.Visible = false;
        btn_staffsave.Visible = true;
        btn_selupdate.Visible = false;
        txt_stfdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_stdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_stfdate.Enabled = false;
        txt_stdate.Enabled = false;
    }

    protected void btn_sgo_Click(object sender, EventArgs e)
    {
        try
        {
            string fdate = txt_stfdate.Text;
            string[] fdt = fdate.Split('/');
            DateTime dt = Convert.ToDateTime(fdt[1] + "/" + fdt[0] + "/" + fdt[2]);
            string tdate = txt_stdate.Text;
            string[] tdt = tdate.Split('/');
            DateTime dt1 = Convert.ToDateTime(tdt[1] + "/" + tdt[0] + "/" + tdt[2]);
            string goquery = "";
            bindperformance();
            ddl_perform.SelectedIndex = 0;
            ddl_selectstatus.SelectedIndex = 0;
            txt_remarkrs.Text = "";
            rdb_int.Checked = true;
            rdb_external.Checked = false;
            string collegecode1 = Convert.ToString(ddlscollege.SelectedItem.Value);

            if (chkseldate.Checked == true)
                goquery = "select appl_no,appl_name,interviewtime,interviewdate,comm_address,com_mobileno,com_phone from staff_appl_master where interviewstatus='InterviewCall' and college_code='" + collegecode1 + "' and interviewdate between '" + dt.ToString("dd/MM/yyyy") + "' and '" + dt1.ToString("dd/MM/yyyy") + "'";
            else
                goquery = "select appl_no,appl_name,interviewtime,interviewdate,comm_address,com_mobileno,com_phone from staff_appl_master where interviewstatus='InterviewCall' and college_code='" + collegecode1 + "'";

            ds.Clear();
            ds = d2.select_method_wo_parameter(goquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                Fpspread19.Sheets[0].AutoPostBack = false;
                Fpspread19.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread19.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread19.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                Fpspread19.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread19.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread19.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
                Fpspread19.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread19.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].RowHeader.Visible = false;
                Fpspread19.Visible = false;
                Fpspread19.Sheets[0].ColumnHeader.RowCount = 0;
                Fpspread19.Sheets[0].ColumnCount = 0;
                Fpspread19.Sheets[0].RowCount = 0;

                Fpspread19.Sheets[0].RowHeader.Visible = false;
                Fpspread19.CommandBar.Visible = false;

                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                darkstyle.Font.Name = "Book Antiqua";
                darkstyle.Font.Size = FontUnit.Medium;
                darkstyle.Font.Bold = true;
                darkstyle.Border.BorderSize = 0;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                darkstyle.VerticalAlign = VerticalAlign.Middle;
                darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
                Fpspread19.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                darkstyle1.Font.Name = "Book Antiqua";
                darkstyle1.Font.Size = FontUnit.Medium;

                Fpspread19.Sheets[0].DefaultStyle = darkstyle1;
                Fpspread19.Sheets[0].RowCount = 0;
                Fpspread19.Sheets[0].ColumnCount = 10;
                Fpspread19.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread19.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                Fpspread19.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspread19.Columns[0].Locked = true;
                Fpspread19.Columns[0].Width = 75;

                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                Fpspread19.Columns[1].Width = 100;

                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Application No";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                Fpspread19.Columns[2].Locked = true;
                Fpspread19.Columns[2].Width = 100;

                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Applicant Name";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                Fpspread19.Columns[3].Locked = true;
                Fpspread19.Columns[3].Width = 150;

                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Interview Time";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                Fpspread19.Columns[4].Locked = true;
                Fpspread19.Columns[4].Width = 150;

                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Interview Date";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                Fpspread19.Columns[5].Locked = true;
                Fpspread19.Columns[5].Width = 150;

                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Venue";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
                Fpspread19.Columns[6].Width = 100;
                Fpspread19.Columns[6].Visible = false;
                Fpspread19.Columns[6].Locked = true;

                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Contact Address";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 7].Font.Bold = true;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 7].Font.Name = "Book Antiqua";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 7].Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 7].HorizontalAlign = HorizontalAlign.Center;
                Fpspread19.Columns[7].Locked = true;
                Fpspread19.Columns[7].Width = 200;

                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 8].Text = "Contact No";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 8].Font.Bold = true;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 8].Font.Name = "Book Antiqua";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 8].Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 8].HorizontalAlign = HorizontalAlign.Center;
                Fpspread19.Columns[8].Locked = true;
                Fpspread19.Columns[8].Width = 100;

                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 9].Text = "Resume";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 9].Font.Bold = true;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 9].Font.Name = "Book Antiqua";
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 9].Font.Size = FontUnit.Medium;
                Fpspread19.Sheets[0].ColumnHeader.Cells[0, 9].HorizontalAlign = HorizontalAlign.Center;
                Fpspread19.Columns[9].Width = 100;

                FarPoint.Web.Spread.ButtonCellType btnval = new FarPoint.Web.Spread.ButtonCellType();
                btnval.Text = "View Resume";
                btnval.CssClass = "textbox textbox1 btn1";

                FarPoint.Web.Spread.CheckBoxCellType chkbox = new FarPoint.Web.Spread.CheckBoxCellType();
                chkbox.AutoPostBack = false;

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    Fpspread19.Sheets[0].RowCount++;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(i + 1);
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 1].CellType = chkbox;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[i]["appl_no"]);
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 2].CellType = txtcell;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[i]["appl_name"]);
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";

                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[i]["interviewtime"]);
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";

                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(ds.Tables[0].Rows[i]["interviewdate"]);
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 5].Font.Size = FontUnit.Medium;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";

                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 6].Text = "";
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 6].Font.Size = FontUnit.Medium;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 6].Font.Name = "Book Antiqua";

                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 7].Text = Convert.ToString(ds.Tables[0].Rows[i]["comm_address"]);
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 7].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 7].Font.Size = FontUnit.Medium;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 7].Font.Name = "Book Antiqua";

                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 8].Text = Convert.ToString(ds.Tables[0].Rows[i]["com_mobileno"]);
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 8].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 8].Font.Size = FontUnit.Medium;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 8].Font.Name = "Book Antiqua";

                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 9].CellType = btnval;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 9].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 9].Font.Size = FontUnit.Medium;
                    Fpspread19.Sheets[0].Cells[Fpspread19.Sheets[0].RowCount - 1, 9].Font.Name = "Book Antiqua";
                }

                Fpspread19.Visible = true;
                Fpspread19.Sheets[0].PageSize = Fpspread19.Sheets[0].RowCount;
                Fpspread19.SaveChanges();
                cb_sinterviewdet.Visible = true;
                staffinterview.Visible = true;
                lbl_salert.Visible = false;
                bindperformance();

                Fpspread20.Visible = true;
                Fpspread20.Sheets[0].AutoPostBack = false;
                Fpspread20.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread20.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread20.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                Fpspread20.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread20.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread20.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
                Fpspread20.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread20.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].RowHeader.Visible = false;
                Fpspread20.Visible = false;
                Fpspread20.Sheets[0].ColumnHeader.RowCount = 0;
                Fpspread20.Sheets[0].ColumnCount = 0;
                Fpspread20.Sheets[0].RowCount = 0;
                Fpspread20.Sheets[0].RowHeader.Visible = false;
                Fpspread20.CommandBar.Visible = false;

                darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                darkstyle.Font.Name = "Book Antiqua";
                darkstyle.Font.Size = FontUnit.Medium;
                darkstyle.Font.Bold = true;
                darkstyle.Border.BorderSize = 0;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                darkstyle.VerticalAlign = VerticalAlign.Middle;
                darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
                Fpspread20.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                FarPoint.Web.Spread.StyleInfo darkstyle3 = new FarPoint.Web.Spread.StyleInfo();
                darkstyle1.Font.Name = "Book Antiqua";
                darkstyle1.Font.Size = FontUnit.Medium;

                Fpspread20.Sheets[0].DefaultStyle = darkstyle1;
                Fpspread20.Sheets[0].RowCount = 0;
                Fpspread20.Sheets[0].ColumnCount = 7;
                Fpspread20.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread20.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                Fpspread20.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspread20.Columns[0].Width = 75;

                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Type";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                Fpspread20.Columns[1].Width = 100;

                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Name";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                Fpspread20.Columns[2].Width = 150;

                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Staff Code";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                Fpspread20.Columns[3].Width = 150;

                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Address";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                Fpspread20.Columns[4].Width = 100;

                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Phone";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                Fpspread20.Columns[5].Width = 100;

                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 6].Text = "E-mail";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
                Fpspread20.Columns[6].Width = 300;
                lbl_salert.Visible = false;
                Fpspread20.Visible = true;
                Fpspread20.Sheets[0].PageSize = Fpspread20.Sheets[0].RowCount;
            }
            else
            {
                lbl_salert.Visible = true;
                Fpspread20.Visible = false;
                Fpspread19.Visible = false;
                Fpspread19.SaveChanges();
                cb_sinterviewdet.Visible = false;
                staffinterview.Visible = false;
                if (chkseldate.Checked == true)
                    lbl_salert.Text = "No Records Found On This Date";
                else
                    lbl_salert.Text = "No Records Found!";
            }
        }
        catch { }
    }

    protected void Fpspread19_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        Fpspread19.SaveChanges();
        try
        {
            string actrow = "";
            string actcol = "";
            string filename = "";
            string filetype = "";
            DataSet dsGetRes = new DataSet();

            actrow = Convert.ToString(Fpspread19.ActiveSheetView.ActiveRow);
            actcol = Convert.ToString(Fpspread19.ActiveSheetView.ActiveColumn);
            if (!String.IsNullOrEmpty(actrow.Trim()))
            {
                string appl_no = Convert.ToString(Fpspread19.Sheets[0].Cells[Convert.ToInt32(actrow), 2].Text);
                string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + appl_no + "'");
                if (!String.IsNullOrEmpty(appl_id) && appl_id.Trim() != "0")
                {
                    string selq = "select Resume_FileType,filename,Appl_Resume from StaffPhoto where appl_id='" + appl_id + "'";
                    dsGetRes.Clear();
                    dsGetRes = d2.select_method_wo_parameter(selq, "Text");
                    if (dsGetRes.Tables.Count > 0 && dsGetRes.Tables[0].Rows.Count > 0)
                    {
                        filename = Convert.ToString(dsGetRes.Tables[0].Rows[0]["filename"]);
                        filetype = Convert.ToString(dsGetRes.Tables[0].Rows[0]["Resume_FileType"]);
                        Response.ContentType = filetype;
                        Response.AddHeader("Content-Disposition", "attachment;filename=\"" + filename + "\"");
                        Response.BinaryWrite((byte[])dsGetRes.Tables[0].Rows[0]["Appl_Resume"]);
                        Response.End();
                    }
                    else
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Visible = true;
                        lblalerterr.Text = "Resume Not Found!";
                    }
                }
                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Visible = true;
                    lblalerterr.Text = "Resume Not Found!";
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void cb_sinterviewdet_OnCheckedChanged(object sender, EventArgs e)
    {
        int count = 0;
        if (checkedOK(Fpspread19, out count))
        {
            cb_sinterviewdet.Checked = true;
            if (cb_sinterviewdet.Checked == true)
            {
                lbl_salert.Visible = false;
                ddl_perform.Enabled = true;
                ddl_selectstatus.Enabled = true;
                txt_remarkrs.Enabled = true;
            }
            else
            {
                lbl_salert.Visible = false;
                ddl_perform.Enabled = false;
                ddl_selectstatus.Enabled = false;
                txt_remarkrs.Enabled = false;
            }
        }
        else
        {
            cb_sinterviewdet.Checked = false;
            lbl_salert.Visible = true;
            lbl_salert.Text = "Please Select The Staff And Then Proceed";
        }
    }

    protected void btn_stplus_OnClick(object sender, EventArgs e)
    {
        Plus.Visible = true;
        lbl_header.Text = "Performance";
    }

    protected void btn_extexit_OnClick(object sender, EventArgs e)
    {
        External.Visible = false;
    }

    protected void btn_stfintexit_OnClick(object sender, EventArgs e)
    {
        StfInternal.Visible = false;
    }

    protected void bindperformance()
    {
        ds.Clear();
        ddl_perform.Items.Clear();
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='haper' ";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_perform.DataSource = ds;
            ddl_perform.DataTextField = "TextVal";
            ddl_perform.DataValueField = "TextCode";
            ddl_perform.DataBind();
            ddl_perform.Items.Add(new ListItem("Select", "0"));
        }
        else
        {
            ddl_perform.Items.Add(new ListItem("Select", "0"));
        }
    }

    protected void btn_stminus_OnClick(object sender, EventArgs e)
    {
        string quest = Convert.ToString(ddl_perform.SelectedItem);
        string college = ddlscollege.SelectedValue;
        string query = "delete from TextValTable where TextVal='" + quest + "' and college_code='" + college + "'";
        int count = d2.update_method_wo_parameter(query, "Text");
        bindperformance();
    }

    public bool staffcheckedOK(out int count)
    {
        count = 0;

        bool Ok = false;
        Fpspread21.SaveChanges();
        for (int i = 0; i < Fpspread21.Sheets[0].Rows.Count; i++)
        {
            byte check = Convert.ToByte(Fpspread21.Sheets[0].Cells[i, 1].Value);
            if (check == 1)
            {
                Ok = true;
                count++;
            }
        }
        return Ok;
    }

    protected void btn_interviewer_OnClick(object sender, EventArgs e)
    {
        try
        {
            if (cb_sinterviewdet.Checked == true)
            {
                lbl_salert.Visible = false;
                if (rdb_external.Checked == true)
                    External.Visible = true;
                if (rdb_int.Checked == true)
                {
                    StfInternal.Visible = true;
                    ddl_stfsearchby.SelectedIndex = 0;
                    Fpspread21.Visible = true;
                    Fpspread21.Sheets[0].AutoPostBack = false;
                    Fpspread21.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                    Fpspread21.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                    Fpspread21.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                    Fpspread21.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
                    Fpspread21.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                    Fpspread21.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
                    Fpspread21.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
                    Fpspread21.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].RowHeader.Visible = false;

                    Fpspread21.Sheets[0].ColumnHeader.RowCount = 0;
                    Fpspread21.Sheets[0].ColumnCount = 0;
                    Fpspread21.Sheets[0].RowCount = 0;

                    Fpspread21.Sheets[0].RowHeader.Visible = false;
                    Fpspread21.CommandBar.Visible = false;

                    FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                    darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                    darkstyle.Font.Name = "Book Antiqua";
                    darkstyle.Font.Size = FontUnit.Medium;
                    darkstyle.Font.Bold = true;
                    darkstyle.Border.BorderSize = 0;
                    darkstyle.HorizontalAlign = HorizontalAlign.Center;
                    darkstyle.VerticalAlign = VerticalAlign.Middle;
                    darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
                    Fpspread21.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                    FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                    darkstyle1.Font.Name = "Book Antiqua";
                    darkstyle1.Font.Size = FontUnit.Medium;

                    Fpspread21.Sheets[0].DefaultStyle = darkstyle1;
                    Fpspread21.Sheets[0].RowCount = 0;
                    Fpspread21.Sheets[0].ColumnCount = 5;
                    Fpspread21.Sheets[0].ColumnHeader.RowCount = 1;
                    Fpspread21.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                    Fpspread21.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread21.Columns[0].Width = 75;

                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread21.Columns[1].Width = 100;

                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Staff Code";
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread21.Columns[2].Width = 100;

                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Staff Name";
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread21.Columns[3].Width = 200;

                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Department";
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread21.Columns[4].Width = 250;
                    string collegecode1 = "";

                    if (btn_staffsave.Visible == true)
                        collegecode1 = Convert.ToString(ddlscollege.SelectedItem.Value);
                    if (btn_selupdate.Visible == true)
                        collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);

                    string query = "";
                    query = "select staff_name,s.staff_code,d.desig_name,h.dept_name,s.appl_no,a.email  from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where  s.appl_no =a.appl_no and s.staff_code =t.staff_code and a.dept_code =h.dept_code and a.desig_code =d.desig_code and h.dept_code =d.dept_code and (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and latestrec =1 and a.college_code='" + collegecode1 + "'";

                    ds.Clear();
                    ds = d2.select_method_wo_parameter(query, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        FarPoint.Web.Spread.CheckBoxCellType chkbox = new FarPoint.Web.Spread.CheckBoxCellType();
                        chkbox.AutoPostBack = false;

                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            Fpspread21.Sheets[0].RowCount++;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(i + 1);
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 1].CellType = chkbox;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[i]["staff_code"]);
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].CellType = txtcell;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].Tag = Convert.ToString(ds.Tables[0].Rows[i]["appl_no"]);
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[i]["staff_name"]);
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";

                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[i]["dept_name"]);
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 4].Tag = Convert.ToString(ds.Tables[0].Rows[i]["email"]);

                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Left;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;
                            Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";
                        }
                        Fpspread21.Visible = true;
                        Fpspread21.Sheets[0].PageSize = Fpspread21.Sheets[0].RowCount;
                        int_stfalert.Visible = false;
                    }
                    else
                    {
                        int_stfalert.Visible = true;
                        int_stfalert.Text = "No Records Found";
                    }
                }
            }
            else
            {
                cb_sinterviewdet.Checked = false;
                lbl_salert.Visible = true;
                lbl_salert.Text = "Please Fill All The Details";
            }
        }
        catch { }
    }

    protected void btn_stfintgo_OnClick(object sender, EventArgs e)
    {
        try
        {
            Fpspread21.Sheets[0].RowCount = 0;
            string scode = txt_stfsearchbysc.Text;
            string sname = txt_stfsearchbysn.Text;
            string query = "";

            if (ddl_stfsearchby.SelectedItem.Text == "All")
            {
                query = "select staff_name,s.staff_code,d.desig_name,h.dept_name,s.appl_no,a.email from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where  s.appl_no =a.appl_no and s.staff_code =t.staff_code and a.dept_code =h.dept_code and a.desig_code =d.desig_code and h.dept_code =d.dept_code and (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and latestrec =1 and a.college_code='" + collegecode1 + "'";
            }
            if (ddl_stfsearchby.SelectedItem.Text == "Staff Code")
            {
                query = "select staff_name,s.staff_code,d.desig_name,h.dept_name,s.appl_no,a.email from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where  s.appl_no =a.appl_no and s.staff_code =t.staff_code and a.dept_code =h.dept_code and a.desig_code =d.desig_code and h.dept_code =d.dept_code and (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and latestrec =1 and a.college_code='" + collegecode1 + "' and t.staff_code='" + scode + "'";
            }
            if (ddl_stfsearchby.SelectedItem.Text == "Staff Name")
            {
                query = "select staff_name,s.staff_code,d.desig_name,h.dept_name,s.appl_no,a.email from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where  s.appl_no =a.appl_no and s.staff_code =t.staff_code and a.dept_code =h.dept_code and a.desig_code =d.desig_code and h.dept_code =d.dept_code and (resign =0 and settled =0 and isnull (Discontinue,'0') ='0') and latestrec =1 and a.college_code='" + collegecode1 + "' and staff_name='" + sname + "'";
            }

            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                FarPoint.Web.Spread.CheckBoxCellType chkbox = new FarPoint.Web.Spread.CheckBoxCellType();
                chkbox.AutoPostBack = false;

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    Fpspread21.Sheets[0].RowCount++;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(i + 1);
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 1].CellType = chkbox;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[i]["staff_code"]);
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].CellType = txtcell;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].Tag = Convert.ToString(ds.Tables[0].Rows[i]["appl_no"]);
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[i]["staff_name"]);
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";

                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[i]["dept_name"]);
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 4].Tag = Convert.ToString(ds.Tables[0].Rows[i]["email"]);
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;
                    Fpspread21.Sheets[0].Cells[Fpspread21.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";
                }
                Fpspread21.Visible = true;
                Fpspread21.Sheets[0].PageSize = Fpspread21.Sheets[0].RowCount;
                int_stfalert.Visible = false;
            }
            else
            {
                int_stfalert.Visible = true;
                int_stfalert.Text = "No Records Found";
            }
        }
        catch { }
    }

    protected void btn_extadd_OnClick(object sender, EventArgs e)
    {
        try
        {
            string name = txt_stfname.Text;
            string phone = txt_phone.Text;
            string email = txt_address.Text;
            string code = txt_stfscode.Text;
            string add = txtdpt.Text;
            External.Visible = false;
            string type = "";
            if (rdb_external.Checked == true)
            {
                type = "External";
                Fpspread20.Sheets[0].RowCount = 1;
                Fpspread20.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspread20.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].Cells[0, 1].HorizontalAlign = HorizontalAlign.Left;
                Fpspread20.Sheets[0].Cells[0, 1].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].Cells[0, 1].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].Cells[0, 2].HorizontalAlign = HorizontalAlign.Left;
                Fpspread20.Sheets[0].Cells[0, 2].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].Cells[0, 2].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].Cells[0, 3].HorizontalAlign = HorizontalAlign.Left;
                Fpspread20.Sheets[0].Cells[0, 3].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].Cells[0, 3].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                Fpspread20.Sheets[0].Cells[0, 4].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].Cells[0, 4].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                Fpspread20.Sheets[0].Cells[0, 5].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].Cells[0, 5].Font.Name = "Book Antiqua";
                Fpspread20.Sheets[0].Cells[0, 6].HorizontalAlign = HorizontalAlign.Left;
                Fpspread20.Sheets[0].Cells[0, 6].Font.Size = FontUnit.Medium;
                Fpspread20.Sheets[0].Cells[0, 6].Font.Name = "Book Antiqua";

                Fpspread20.Sheets[0].Cells[0, 0].Text = Convert.ToString(1);
                Fpspread20.Sheets[0].Cells[0, 1].Text = type;
                Fpspread20.Sheets[0].Cells[0, 2].Text = name;
                Fpspread20.Sheets[0].Cells[0, 3].Text = code;
                Fpspread20.Sheets[0].Cells[0, 4].Text = add;
                Fpspread20.Sheets[0].Cells[0, 5].Text = phone;
                Fpspread20.Sheets[0].Cells[0, 6].Text = email;
            }
            if (rdb_int.Checked == true)
            {
                type = "Internal";
                int count = 0;
                if (checkedOK(Fpspread21, out count))
                {
                    string activerow = "";
                    string activecol = "";
                    string scode = "";
                    string sdept = "";
                    string sname = "";
                    activerow = Fpspread21.ActiveSheetView.ActiveRow.ToString();
                    activecol = Fpspread21.ActiveSheetView.ActiveColumn.ToString();
                    if (activerow.Trim() != "")
                    {
                        scode = Convert.ToString(Fpspread21.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text);
                        sname = Convert.ToString(Fpspread21.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text);
                        sdept = Convert.ToString(Fpspread21.Sheets[0].Cells[Convert.ToInt32(activerow), 4].Text);
                    }
                    string sphone = d2.GetFunction("select com_mobileno from staff_appl_master where dept_name='" + sdept + "'");
                    string address = d2.GetFunction("select comm_address from staff_appl_master where dept_name='" + sdept + "'");
                    string emailid = d2.GetFunction("select email from staff_appl_master where dept_name='" + sdept + "'");

                    Fpspread20.Sheets[0].RowCount = 1;
                    Fpspread20.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread20.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpspread20.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                    Fpspread20.Sheets[0].Cells[0, 1].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread20.Sheets[0].Cells[0, 1].Font.Size = FontUnit.Medium;
                    Fpspread20.Sheets[0].Cells[0, 1].Font.Name = "Book Antiqua";
                    Fpspread20.Sheets[0].Cells[0, 2].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread20.Sheets[0].Cells[0, 2].Font.Size = FontUnit.Medium;
                    Fpspread20.Sheets[0].Cells[0, 2].Font.Name = "Book Antiqua";
                    Fpspread20.Sheets[0].Cells[0, 3].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread20.Sheets[0].Cells[0, 3].Font.Size = FontUnit.Medium;
                    Fpspread20.Sheets[0].Cells[0, 3].Font.Name = "Book Antiqua";
                    Fpspread20.Sheets[0].Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread20.Sheets[0].Cells[0, 4].Font.Size = FontUnit.Medium;
                    Fpspread20.Sheets[0].Cells[0, 4].Font.Name = "Book Antiqua";
                    Fpspread20.Sheets[0].Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread20.Sheets[0].Cells[0, 5].Font.Size = FontUnit.Medium;
                    Fpspread20.Sheets[0].Cells[0, 5].Font.Name = "Book Antiqua";
                    Fpspread20.Sheets[0].Cells[0, 6].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread20.Sheets[0].Cells[0, 6].Font.Size = FontUnit.Medium;
                    Fpspread20.Sheets[0].Cells[0, 6].Font.Name = "Book Antiqua";

                    Fpspread20.Sheets[0].Cells[0, 0].Text = Convert.ToString(1);
                    Fpspread20.Sheets[0].Cells[0, 1].Text = type;
                    Fpspread20.Sheets[0].Cells[0, 2].Text = sname;
                    Fpspread20.Sheets[0].Cells[0, 3].Text = scode;
                    Fpspread20.Sheets[0].Cells[0, 4].Text = address;
                    Fpspread20.Sheets[0].Cells[0, 5].Text = sphone;
                    Fpspread20.Sheets[0].Cells[0, 6].Text = emailid;
                }
                else
                {
                    int_stfalert.Visible = true;
                    int_stfalert.Text = "Please Select Any Staff And Then Procceed";
                }
            }
        }
        catch { }
    }

    protected void btn_stfintAdd_OnClick(object sender, EventArgs e)
    {
        try
        {
            int count = 0;
            if (checkedOK(Fpspread21, out count))
            {
                StfInternal.Visible = false;
                string scode = "";
                string sdept = "";
                string sname = "";
                string sphone = "";
                string emailid = "";
                string type = "Internal";

                int_stfalert.Visible = false;
                Fpspread20.Sheets[0].RowCount = 0;
                int count1 = 0;
                if (staffcheckedOK(out count1))
                {
                    int cnt = 0;
                    for (int i = 0; i < Fpspread21.Sheets[0].Rows.Count; i++)
                    {
                        byte check = Convert.ToByte(Fpspread21.Sheets[0].Cells[i, 1].Value);
                        if (check == 1)
                        {
                            scode = Convert.ToString(Fpspread21.Sheets[0].Cells[i, 2].Text);
                            sname = Convert.ToString(Fpspread21.Sheets[0].Cells[i, 3].Text);
                            sdept = Convert.ToString(Fpspread21.Sheets[0].Cells[i, 4].Text);

                            sphone = d2.GetFunction("select com_mobileno from staff_appl_master where dept_name='" + sdept + "'");
                            string add = d2.GetFunction("select comm_address from staff_appl_master where dept_name='" + sdept + "'");
                            emailid = d2.GetFunction("select email from staff_appl_master where dept_name='" + sdept + "'");

                            Fpspread20.Sheets[0].RowCount++;
                            Fpspread20.Sheets[0].Cells[cnt, 0].Text = Convert.ToString(cnt + 1);
                            Fpspread20.Sheets[0].Columns[0].Locked = true;
                            Fpspread20.Sheets[0].Cells[cnt, 1].Text = type;
                            Fpspread20.Sheets[0].Columns[1].Locked = true;
                            Fpspread20.Sheets[0].Cells[cnt, 2].Text = sname;
                            Fpspread20.Sheets[0].Columns[2].Locked = true;
                            Fpspread20.Sheets[0].Cells[cnt, 3].Text = scode;
                            Fpspread20.Sheets[0].Columns[3].Locked = true;
                            Fpspread20.Sheets[0].Cells[cnt, 4].Text = add;
                            Fpspread20.Sheets[0].Columns[4].Locked = true;
                            Fpspread20.Sheets[0].Cells[cnt, 5].Text = sphone;
                            Fpspread20.Sheets[0].Columns[5].Locked = true;
                            Fpspread20.Sheets[0].Cells[cnt, 6].Text = emailid;
                            Fpspread20.Sheets[0].Columns[6].Locked = true;
                            cnt++;
                        }
                    }
                }
            }
            else
            {
                int_stfalert.Visible = true;
                int_stfalert.Text = "Please Select Any Staff And Then Procceed";
            }
        }
        catch { }
    }

    protected void btn_selupdate_Click(object sender, EventArgs e)
    {
        try
        {
            Fpspread20.SaveChanges();
            string activerow = "";
            string activecol = "";
            string applno = "";
            string query = "";
            int count = 0;
            activerow = Fpspread15.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread15.ActiveSheetView.ActiveColumn.ToString();
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

            if (activerow.Trim() != "")
            {
                applno = Convert.ToString(Fpspread15.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
            }
            string performance = ddl_perform.SelectedItem.Value;
            string stat = ddl_selectstatus.SelectedItem.Text;
            string remarks = txt_remarkrs.Text;
            string stfname = "";
            string stfstatus = "";
            string add = "";
            string scode = "";
            string phone = "";
            string email = "";
            int ct = 0;
            query = "update staff_appl_master set interviewstatus='" + stat + "',selremarks='" + remarks + "',selperformance='" + performance + "' where appl_no='" + applno + "' and college_code='" + collcode + "'";
            query = query + " delete from inteviewer where appl_no='" + applno + "'";
            count = d2.update_method_wo_parameter(query, "Text");

            if (rdb_int.Checked == true)
                stfstatus = "1";
            if (rdb_external.Checked == true)
                stfstatus = "2";
            for (int j = 0; j < Fpspread20.Sheets[0].Rows.Count; j++)
            {
                stfname = Convert.ToString(Fpspread20.Sheets[0].Cells[j, 2].Text);
                add = Convert.ToString(Fpspread20.Sheets[0].Cells[j, 4].Text);
                scode = Convert.ToString(Fpspread20.Sheets[0].Cells[j, 3].Text);
                phone = Convert.ToString(Fpspread20.Sheets[0].Cells[j, 5].Text);
                email = Convert.ToString(Fpspread20.Sheets[0].Cells[j, 6].Text);

                string query1 = "insert into inteviewer (appl_no,staff_code,candidate,contact_addr,contact_ph,college_code,email_id,status)values('" + applno + "','" + scode + "','" + stfname + "','" + add + "','" + phone + "','" + collcode + "','" + email + "','" + stfstatus + "')";
                ct = d2.update_method_wo_parameter(query1, "Text");
            }
            if (count != 0)
            {
                btn_selectgo_Click(sender, e);
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Updated Successfully";
                divSelect.Visible = false;
            }
        }
        catch { }
    }

    protected void btn_staffsave_Click(object sender, EventArgs e)
    {
        try
        {
            string performance = ddl_perform.SelectedItem.Value;
            string stat = ddl_selectstatus.SelectedItem.Text;
            string remarks = txt_remarkrs.Text;
            string collcode = Convert.ToString(ddlscollege.SelectedItem.Value);
            string applno = "";
            string scode = "";
            string name = "";
            string email = "";
            string stfstatus = "";
            string add = "";
            string date = DateTime.Now.ToString("dd/MM/yyyy");

            string query = "";
            int count = 0;
            int newcount = 0;
            if (checkedOK(Fpspread19, out newcount))
            {
                for (int i = 0; i < Fpspread19.Sheets[0].Rows.Count; i++)
                {
                    byte check = Convert.ToByte(Fpspread19.Sheets[0].Cells[i, 1].Value);
                    if (check == 1)
                    {
                        applno = Convert.ToString(Fpspread19.Sheets[0].Cells[i, 2].Text);
                        name = Convert.ToString(Fpspread19.Sheets[0].Cells[i, 3].Text);

                        query = "update staff_appl_master set interviewstatus='" + stat + "',selremarks='" + remarks + "',selperformance='" + performance + "' where appl_no='" + applno + "' and college_code='" + collcode + "'";
                        count = d2.update_method_wo_parameter(query, "Text");
                    }
                }
            }
            string phone = "";
            string stfname = "";
            int ct = 0;

            if (rdb_int.Checked == true)
                stfstatus = "1";
            if (rdb_external.Checked == true)
                stfstatus = "2";
            for (int j = 0; j < Fpspread20.Sheets[0].Rows.Count; j++)
            {
                stfname = Convert.ToString(Fpspread20.Sheets[0].Cells[j, 2].Text);
                add = Convert.ToString(Fpspread20.Sheets[0].Cells[j, 4].Text);
                scode = Convert.ToString(Fpspread20.Sheets[0].Cells[j, 3].Text);
                phone = Convert.ToString(Fpspread20.Sheets[0].Cells[j, 5].Text);
                email = Convert.ToString(Fpspread20.Sheets[0].Cells[j, 6].Text);

                string query1 = "insert into inteviewer (appl_no,staff_code,candidate,contact_addr,contact_ph,college_code,email_id,status)values('" + applno + "','" + scode + "','" + stfname + "','" + add + "','" + phone + "','" + collcode + "','" + email + "','" + stfstatus + "')";
                ct = d2.update_method_wo_parameter(query1, "Text");
            }
            if (count != 0)
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Saved Successfully";
                btn_sgo_Click(sender, e);
            }
        }
        catch { }
    }

    protected void btn_intcallnew_Click(object sender, EventArgs e)
    {
        lbl_cerr.Visible = false;
        divcall.Visible = true;
        callfilter.Visible = true;
        cb_interviewdet.Checked = false;
        cb_interviewdet.Visible = false;
        lbl_alertc.Visible = false;
        txt_date.Enabled = false;
        ddl_hour.SelectedIndex = 0;
        ddl_mm.SelectedIndex = 0;
        ddl_ampm.SelectedIndex = 0;
        ddl_hour.Enabled = false;
        ddl_mm.Enabled = false;
        ddl_ampm.Enabled = false;
        btn_cupdate.Visible = false;
        btn_call.Visible = true;
        txt_venue.Text = "";
        txt_loc.Text = "";
        txt_venue.Enabled = false;
        txt_loc.Enabled = false;
        Fpspread18.Visible = false;
        interview.Visible = false;
        btn_remove.Visible = false;
        btn_cexit.Visible = false;
        bindcdept();
        cdesignation();
        cstafftype();
    }

    protected void bindcdept()
    {
        try
        {
            ds.Clear();
            cbl_cdept.Items.Clear();
            string collcode = Convert.ToString(ddlcollege.SelectedValue);
            string item = "select distinct dept_code,dept_name from hrdept_master where college_code='" + collcode + "' order by dept_name";
            ds = d2.select_method_wo_parameter(item, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_cdept.DataSource = ds;
                cbl_cdept.DataTextField = "dept_name";
                cbl_cdept.DataValueField = "dept_code";
                cbl_cdept.DataBind();
                if (cbl_cdept.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_cdept.Items.Count; i++)
                    {
                        cbl_cdept.Items[i].Selected = true;
                    }
                    txt_cdept.Text = "Department (" + cbl_cdept.Items.Count + ")";
                }
            }
            else
            {
                txt_cdept.Text = "--Select--";
            }
        }
        catch { }
    }

    protected void cdesignation()
    {
        ds.Clear();
        cbl_cdesig.Items.Clear();
        string collcode = Convert.ToString(ddlcollege.SelectedValue);
        string statequery = "select desig_code, desig_name from desig_master where ISNULL (desig_name,'')<>'' and collegeCode='" + collcode + "' order by desig_name asc";
        ds = da.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            cbl_cdesig.DataSource = ds;
            cbl_cdesig.DataTextField = "desig_name";
            cbl_cdesig.DataValueField = "desig_code";
            cbl_cdesig.DataBind();
            cbl_cdesig.Visible = true;
            if (cbl_cdesig.Items.Count > 0)
            {
                for (int i = 0; i < cbl_cdesig.Items.Count; i++)
                {
                    cbl_cdesig.Items[i].Selected = true;
                }
                txt_cdesig.Text = "Designation(" + cbl_cdesig.Items.Count + ")";
            }
        }
        else
        {
            txt_cdesig.Text = "--Select--";
        }
    }

    protected void cstafftype()
    {
        try
        {
            ds.Clear();
            cbl_cstype.Items.Clear();
            string collcode = Convert.ToString(ddlcollege.SelectedValue);
            string item = "select distinct stftype from stafftrans t ,staffmaster m where m.staff_code = t.staff_code and college_code = '" + collcode + "' order by stftype";
            ds = d2.select_method_wo_parameter(item, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_cstype.DataSource = ds;
                cbl_cstype.DataTextField = "stftype";
                cbl_cstype.DataBind();
                if (cbl_cstype.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_cstype.Items.Count; i++)
                    {
                        cbl_cstype.Items[i].Selected = true;
                    }
                    txt_cstype.Text = "StaffType (" + cbl_cstype.Items.Count + ")";
                }
            }
            else
            {
                txt_cstype.Text = "--Select--";
            }
        }
        catch { }
    }

    protected void ImageButton13_Click(object sender, EventArgs e)
    {
        divcall.Visible = false;
    }

    protected void ImageButton14_Click(object sender, EventArgs e)
    {
        divSelect.Visible = false;
    }

    protected void btn_selclose_Click(object sender, EventArgs e)
    {
        divSelect.Visible = false;
    }

    protected void cb_cdept_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cb_cdept, cbl_cdept, txt_cdept, "Department");
    }

    protected void cbl_cdept_SelectedIndexChange(object sender, EventArgs e)
    {
        chklstchange(cb_cdept, cbl_cdept, txt_cdept, "Department");
    }

    protected void cb_cdesig_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cb_cdesig, cbl_cdesig, txt_cdesig, "Designation");
    }

    protected void cbl_cdesig_SelectedIndexChange(object sender, EventArgs e)
    {
        chklstchange(cb_cdesig, cbl_cdesig, txt_cdesig, "Designation");
    }

    protected void cb_cstype_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cb_cstype, cbl_cstype, txt_cstype, "StaffType");
    }

    protected void cbl_cstype_SelectedIndexChange(object sender, EventArgs e)
    {
        chklstchange(cb_cstype, cbl_cstype, txt_cstype, "StaffType");
    }

    protected void cb_interviewdet_OnCheckedChanged(object sender, EventArgs e)
    {
        lbl_alertc.Visible = false;
        if (cb_interviewdet.Checked == true)
        {
            txt_loc.Enabled = true;
            txt_venue.Enabled = true;
            txt_date.Enabled = true;
            ddl_hour.Enabled = true;
            ddl_mm.Enabled = true;
            ddl_ampm.Enabled = true;
        }
        else
        {
            txt_loc.Enabled = false;
            txt_venue.Enabled = false;
            ddl_hour.Enabled = false;
            ddl_mm.Enabled = false;
            ddl_ampm.Enabled = false;
            txt_date.Enabled = false;
        }
    }

    protected void ddl_hour_change(object sender, EventArgs e)
    {
        lbl_alertc.Visible = false;
    }

    protected void btn_cupdate_Click(object sender, EventArgs e)   //Modified By Jeyaprakash
    {
        try
        {
            string activerow = "";
            string activecol = "";
            string applno = "";
            string query = "";
            int count = 0;
            activerow = Fpspread14.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread14.ActiveSheetView.ActiveColumn.ToString();
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

            if (activerow.Trim() != "")
                applno = Convert.ToString(Fpspread14.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);

            if (txt_date.Text != "" && txt_loc.Text != "" && txt_venue.Text != "" && ddl_hour.SelectedIndex != 0)
            {
                string interdate = txt_date.Text;
                string[] dt = interdate.Split('/');
                DateTime dd = Convert.ToDateTime(dt[1] + "/" + dt[0] + "/" + dt[2]);
                string time = Convert.ToString(ddl_hour.SelectedItem.Text) + ":" + Convert.ToString(ddl_mm.SelectedItem.Text) + " " + Convert.ToString(ddl_ampm.SelectedItem.Text);
                string venue = txt_venue.Text;
                string location = txt_loc.Text;
                venue = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(venue);
                location = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(location);

                query = "update staff_appl_master set interviewstatus='Interviewcall',interviewdate='" + dd.ToString("dd/MM/yyyy") + "',interviewtime='" + time + "' where appl_no ='" + applno + "' and college_code='" + collcode + "'";

                query = query + " update venue_det set venue_name='" + venue + "',Location='" + location + "' where appl_no='" + applno + "' and college_code='" + collcode + "'";
                count = d2.update_method_wo_parameter(query, "Text");
                if (count != 0)
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Successfully Called for Interview";
                    divcall.Visible = false;
                    btn_intcallgo_Click(sender, e);
                }
            }
            else
            {
                lbl_alertc.Visible = true;
                lbl_alertc.Text = "Please Fill All Fields";
            }
        }
        catch { }
    }

    protected void btn_remove_Click(object sender, EventArgs e)
    {
        try
        {
            string activerow = "";
            string activecol = "";
            string applno = "";
            string query = "";
            int count = 0;
            activerow = Fpspread14.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread14.ActiveSheetView.ActiveColumn.ToString();
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

            if (activerow.Trim() != "")
                applno = Convert.ToString(Fpspread14.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);

            query = "update staff_appl_master set interviewstatus='Applied' where appl_no ='" + applno + "' and college_code='" + collcode + "'";

            count = d2.update_method_wo_parameter(query, "Text");
            if (count != 0)
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Successfully Removed From interview call";
                divcall.Visible = false;
                btn_intcallgo_Click(sender, e);
            }
        }
        catch { }
    }

    protected void btn_call_Click(object sender, EventArgs e)   //Modified By Jeyaprakash
    {
        try
        {
            Fpspread18.SaveChanges();
            string query = "";
            int count = 0;
            int newcount = 0;
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

            if (checkedOK(Fpspread18, out newcount))
            {
                if (txt_date.Text != "" && txt_loc.Text != "" && txt_venue.Text != "" && ddl_hour.SelectedIndex != 0)
                {
                    string interdate = txt_date.Text;
                    string[] dt = interdate.Split('/');
                    DateTime dd = Convert.ToDateTime(dt[1] + "/" + dt[0] + "/" + dt[2]);
                    string time = Convert.ToString(ddl_hour.SelectedItem.Text) + ":" + Convert.ToString(ddl_mm.SelectedItem.Text) + " " + Convert.ToString(ddl_ampm.SelectedItem.Text);
                    string venue = txt_venue.Text;
                    string location = txt_loc.Text;
                    venue = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(venue);
                    location = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(location);
                    string applNo = "";

                    for (int i = 0; i < Fpspread18.Sheets[0].Rows.Count; i++)
                    {
                        byte check = Convert.ToByte(Fpspread18.Sheets[0].Cells[i, 1].Value);
                        if (check == 1)
                        {
                            applNo = Convert.ToString(Fpspread18.Sheets[0].Cells[i, 2].Text);

                            query = "update staff_appl_master set interviewstatus='Interviewcall',interviewdate='" + dd.ToString("dd/MM/yyyy") + "',interviewtime='" + time + "' where appl_no ='" + applNo + "' and college_code='" + collcode + "'";

                            query = query + "if exists(select * from venue_det where appl_no='" + applNo + "' and college_code='" + collcode + "') update venue_det set venue_name='" + venue + "',Location='" + location + "' where appl_no='" + applNo + "' and college_code='" + collcode + "' else insert into venue_det(appl_no,venue_name,college_code,Location ) values('" + applNo + "','" + venue + "','" + collcode + "','" + location + "')";
                            count = d2.update_method_wo_parameter(query, "Text");
                        }
                    }

                    if (count != 0)
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Text = "Successfully Called for Interview";
                        txt_date.Text = DateTime.Now.ToString("dd/MM/yyyy");
                        ddl_hour.SelectedIndex = 0;
                        ddl_mm.SelectedIndex = 0;
                        ddl_ampm.SelectedIndex = 0;
                        txt_venue.Text = "";
                        txt_loc.Text = "";
                        btn_go_Click(sender, e);
                    }
                }
                else
                {
                    lbl_alertc.Visible = true;
                    lbl_alertc.Text = "Please Fill All Fields";
                }
            }
            else
            {
                lbl_alertc.Visible = true;
                lbl_alertc.Text = "Please Select The Staff And Then Proceed";
            }
        }
        catch { }
    }

    protected void btn_call_letter_Click(object sender, EventArgs e)
    {
        try
        {
            //int myCount = 0;
            //string msgText = "";
            //if (checkedOK(Fpspread18, out myCount))
            //{
            //    if (txt_date.Text != "" && txt_loc.Text != "" && txt_venue.Text != "" && ddl_hour.SelectedIndex != 0)
            //    {
            //        for (int i = 0; i < Fpspread18.Rows.Count - 1; i++)
            //        {
            //            msgText = "";
            //        }
            //    }
            //    else
            //    {
            //        lbl_alertc.Visible = true;
            //        lbl_alertc.Text = "Please Fill All Fields";
            //    }
            //}
            //else
            //{
            //    lbl_alertc.Visible = true;
            //    lbl_alertc.Text = "Please Select The Staff And Then Proceed!";
            //}
            //SMSSettings smsObject = new SMSSettings();
            //smsObject.User_degreecode = Convert.ToInt32(degcode);
            //smsObject.User_collegecode = Convert.ToInt32(ddlcollege.SelectedValue);
            //smsObject.User_usercode = usercode;
            //smsObject.Text_message = "";
            //smsObject.IsStaff = 1;
            //smsObject.MobileNos = RecepientNo;
            //smsObject.AdmissionNos = dsMobile.Tables[0].Rows[0]["roll_admit"].ToString();
            //smsObject.sendTextMessage();
        }
        catch { }
    }

    protected void btn_go_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_alertc.Visible = false;
            string deptname = "";
            string designame = "";
            string fsub = "";
            string stafftype = "";
            string applid = "";
            string graduation = "";
            string degree = "";
            string specialization = "";
            string qual = "";
            string famsub = "";
            DataSet dsgetstaff = new DataSet();

            deptname = GetSelectedItemsValueAsString(cbl_cdept);

            designame = GetSelectedItemsValueAsString(cbl_cdesig);

            stafftype = GetSelectedItemsValueAsString(cbl_cstype);

            string collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);

            string query = "select appl_no,appl_id,appl_name,sa.dept_name,d.desig_name,sa.desig_code,dateofapply,yofexp,qualification,subjects,comm_address,com_mobileno,com_phone,email,date_of_birth,interviewdate,interviewtime from staff_appl_master sa,desig_master d,hrdept_master h where sa.desig_code=d.desig_code and sa.dept_code = h.dept_code and sa.college_code = d.collegecode and sa.college_code = h.college_code and interviewstatus in('applied','') and sa.college_code='" + collegecode1 + "' and d.desig_code in('" + designame + "') and sa.dept_code in('" + deptname + "')";     //Query Modified by Jeyaprakash on June 15th
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                Fpspread18.Sheets[0].AutoPostBack = false;
                Fpspread18.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread18.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread18.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                Fpspread18.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread18.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread18.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
                Fpspread18.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
                Fpspread18.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].RowHeader.Visible = false;
                Fpspread18.Visible = false;
                Fpspread18.Sheets[0].ColumnHeader.RowCount = 0;
                Fpspread18.Sheets[0].ColumnCount = 0;
                Fpspread18.Sheets[0].RowCount = 0;

                Fpspread18.Sheets[0].RowCount = 0;
                Fpspread18.Sheets[0].RowHeader.Visible = false;
                Fpspread18.CommandBar.Visible = false;

                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                darkstyle.Font.Name = "Book Antiqua";
                darkstyle.Font.Size = FontUnit.Medium;
                darkstyle.Font.Bold = true;
                darkstyle.Border.BorderSize = 0;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                darkstyle.VerticalAlign = VerticalAlign.Middle;
                darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
                Fpspread18.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                darkstyle1.Font.Name = "Book Antiqua";
                darkstyle1.Font.Size = FontUnit.Medium;

                Fpspread18.Sheets[0].DefaultStyle = darkstyle1;
                Fpspread18.Sheets[0].RowCount = 0;
                Fpspread18.Sheets[0].ColumnCount = 16;
                Fpspread18.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread18.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                Fpspread18.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[0].Locked = true;
                Fpspread18.Columns[0].Width = 75;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[1].Width = 100;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Application No";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[2].Locked = true;
                Fpspread18.Columns[2].Width = 100;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Applicant Name";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[3].Locked = true;
                Fpspread18.Columns[3].Width = 150;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Department";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[4].Locked = true;
                Fpspread18.Columns[4].Width = 150;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Designation";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[5].Locked = true;
                Fpspread18.Columns[5].Width = 150;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Date Of Apply";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[6].Locked = true;
                Fpspread18.Columns[6].Width = 100;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Contact Address";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 7].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 7].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 7].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 7].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[7].Locked = true;
                Fpspread18.Columns[7].Width = 200;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 8].Text = "Date Of Birth";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 8].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 8].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 8].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 8].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[8].Locked = true;
                Fpspread18.Columns[8].Width = 100;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 9].Text = "Phone";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 9].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 9].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 9].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 9].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[9].Locked = true;
                Fpspread18.Columns[9].Width = 100;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 10].Text = "Email";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 10].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 10].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 10].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 10].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[10].Locked = true;
                Fpspread18.Columns[10].Width = 250;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 11].Text = "Experience";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 11].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 11].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 11].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 11].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[11].Locked = true;
                Fpspread18.Columns[11].Width = 100;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 12].Text = "Qualification";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 12].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 12].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 12].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 12].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[12].Locked = true;
                Fpspread18.Columns[12].Width = 300;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 13].Text = "Familiar Subjects";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 13].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 13].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 13].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 13].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[13].Locked = true;
                Fpspread18.Columns[13].Width = 300;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 14].Text = "Year Of Passing";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 14].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 14].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 14].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 14].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[14].Locked = true;
                Fpspread18.Columns[14].Width = 100;

                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 15].Text = "Resume";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 15].Font.Bold = true;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 15].Font.Name = "Book Antiqua";
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 15].Font.Size = FontUnit.Medium;
                Fpspread18.Sheets[0].ColumnHeader.Cells[0, 15].HorizontalAlign = HorizontalAlign.Center;
                Fpspread18.Columns[15].Width = 100;

                FarPoint.Web.Spread.CheckBoxCellType chkbox = new FarPoint.Web.Spread.CheckBoxCellType();
                chkbox.AutoPostBack = false;

                FarPoint.Web.Spread.ButtonCellType lbval = new FarPoint.Web.Spread.ButtonCellType();
                lbval.Text = "View Resume";
                lbval.CssClass = "textbox textbox1 btn1";

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    applid = Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]);
                    Fpspread18.Sheets[0].RowCount++;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(i + 1);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 1].CellType = chkbox;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[i]["appl_no"]);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 2].CellType = txtcell;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                    string val = Convert.ToString(ds.Tables[0].Rows[i]["appl_name"]);
                    val = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(val);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(val);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[i]["dept_name"]);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(ds.Tables[0].Rows[i]["desig_name"]);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 5].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";

                    string applydate = Convert.ToString(ds.Tables[0].Rows[i]["dateofapply"]);
                    string[] d1 = applydate.Split(' ');
                    string dateofapply = d1[0];
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 6].Text = dateofapply;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 6].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 6].Font.Name = "Book Antiqua";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 7].Text = Convert.ToString(ds.Tables[0].Rows[i]["comm_address"]);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 7].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 7].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 7].Font.Name = "Book Antiqua";

                    string date = Convert.ToString(ds.Tables[0].Rows[i]["date_of_birth"]);
                    string[] date2 = date.Split(' ');
                    string dob = date2[0];
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 8].Text = dob;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 8].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 8].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 8].Font.Name = "Book Antiqua";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 9].Text = Convert.ToString(ds.Tables[0].Rows[i]["com_mobileno"]);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 9].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 9].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 9].Font.Name = "Book Antiqua";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 10].Text = Convert.ToString(ds.Tables[0].Rows[i]["email"]);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 10].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 10].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 10].Font.Name = "Book Antiqua";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 11].Text = Convert.ToString(ds.Tables[0].Rows[i]["yofexp"]);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 11].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 11].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 11].Font.Name = "Book Antiqua";

                    qual = "";
                    string getstfdet = "select Graduation,Degree,Specialization from StaffDetails where Appl_ID='" + applid + "'";
                    dsgetstaff.Clear();
                    dsgetstaff = d2.select_method_wo_parameter(getstfdet, "Text");
                    if (dsgetstaff.Tables.Count > 0 && dsgetstaff.Tables[0].Rows.Count > 0)
                    {
                        graduation = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Graduation"]));
                        degree = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Degree"]));
                        specialization = getqval(Convert.ToString(dsgetstaff.Tables[0].Rows[0]["Specialization"]));
                    }
                    if (graduation == "0")
                        graduation = "";
                    if (degree == "0")
                        degree = "";
                    if (specialization == "0")
                        specialization = "";
                    if (graduation.Trim() != "")
                    {
                        if (qual == "")
                            qual = graduation;
                        else
                            qual = qual + " , " + graduation;
                    }
                    if (degree.Trim() != "")
                    {
                        if (qual == "")
                            qual = degree;
                        else
                            qual = qual + " , " + degree;
                    }
                    if (specialization.Trim() != "")
                    {
                        if (qual == "")
                            qual = specialization;
                        else
                            qual = qual + " , " + specialization;
                    }

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 12].Text = Convert.ToString(qual);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 12].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 12].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 12].Font.Name = "Book Antiqua";

                    famsub = getqval(Convert.ToString(ds.Tables[0].Rows[i]["subjects"]));
                    if (famsub.Trim() == "0")
                        famsub = "";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 13].Text = Convert.ToString(famsub);
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 13].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 13].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 13].Font.Name = "Book Antiqua";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 14].Text = "";
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 14].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 14].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 14].Font.Name = "Book Antiqua";

                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 15].CellType = lbval;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 15].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 15].Font.Size = FontUnit.Medium;
                    Fpspread18.Sheets[0].Cells[Fpspread18.Sheets[0].RowCount - 1, 15].Font.Name = "Book Antiqua";
                }

                Fpspread18.Visible = true;
                lbl_cerr.Visible = false;
                Fpspread18.Sheets[0].PageSize = Fpspread18.Sheets[0].RowCount;
                Fpspread18.SaveChanges();
                cb_interviewdet.Visible = true;
                interview.Visible = true;
                txt_date.Text = DateTime.Now.ToString("dd/MM/yyyy");
                string dt = DateTime.Now.ToString();
                string[] split = dt.Split(' ');
            }
            else
            {
                Fpspread18.Visible = false;
                lbl_cerr.Visible = true;
                cb_interviewdet.Visible = false;
                interview.Visible = false;
                lbl_cerr.Text = "No Records Found ";
            }
        }
        catch { }
    }

    protected void Fpspread18_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        Fpspread18.SaveChanges();
        try
        {
            string actrow = "";
            string actcol = "";
            string filename = "";
            string filetype = "";
            DataSet dsGetRes = new DataSet();

            actrow = Convert.ToString(Fpspread18.ActiveSheetView.ActiveRow);
            actcol = Convert.ToString(Fpspread18.ActiveSheetView.ActiveColumn);
            if (!String.IsNullOrEmpty(actrow.Trim()))
            {
                string appl_no = Convert.ToString(Fpspread18.Sheets[0].Cells[Convert.ToInt32(actrow), 2].Text);
                string appl_id = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + appl_no + "'");
                if (!String.IsNullOrEmpty(appl_id) && appl_id.Trim() != "0")
                {
                    string selq = "select Resume_FileType,filename,Appl_Resume from StaffPhoto where appl_id='" + appl_id + "'";
                    dsGetRes.Clear();
                    dsGetRes = d2.select_method_wo_parameter(selq, "Text");
                    if (dsGetRes.Tables.Count > 0 && dsGetRes.Tables[0].Rows.Count > 0)
                    {
                        filename = Convert.ToString(dsGetRes.Tables[0].Rows[0]["filename"]);
                        filetype = Convert.ToString(dsGetRes.Tables[0].Rows[0]["Resume_FileType"]);
                        Response.ContentType = filetype;
                        Response.AddHeader("Content-Disposition", "attachment;filename=\"" + filename + "\"");
                        Response.BinaryWrite((byte[])dsGetRes.Tables[0].Rows[0]["Appl_Resume"]);
                        Response.End();
                    }
                    else
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Visible = true;
                        lblalerterr.Text = "Resume Not Found!";
                    }
                }
                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Visible = true;
                    lblalerterr.Text = "Resume Not Found!";
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void promodesignation()
    {
        ds.Clear();
        ddl_desigto.Items.Clear();
        string scode = Convert.ToString(txt_promoscode.Text);
        string desigcode = d2.GetFunction("select desig_code from stafftrans where staff_Code='" + scode + "' and latestrec='1'");
        string statequery = "select desig_code,desig_name from desig_master where desig_code not in('" + desigcode + "')";
        ds = da.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_desigto.DataSource = ds;
            ddl_desigto.DataTextField = "desig_name";
            ddl_desigto.DataValueField = "desig_code";
            ddl_desigto.DataBind();
        }
    }

    protected void ImageButton3_Click(object sender, EventArgs e)
    {
        Promotion.Visible = false;
    }

    protected void txt_promoscode_OnTextChanged(object sender, EventArgs e)
    {
        string activerow = "";
        string activecol = "";
        string scode = "";
        activerow = Fpspread1.ActiveSheetView.ActiveRow.ToString();
        activecol = Fpspread1.ActiveSheetView.ActiveColumn.ToString();
        if (activerow.Trim() != "")
            scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text);
    }

    protected void btn_promotion_OnClick(object sender, EventArgs e)    //Modified By Jeyaprakash on June 15th
    {
        staff.Visible = true;
        loadcolumnorder();
        cblcolumnorder.Items.Add(new ListItem("From Design", "desig_code"));
        cblcolumnorder.Items.Add(new ListItem("To Design", "desig_code"));
        cblcolumnorder.Items.Add(new ListItem("Promotion Date", "smdate"));
        loadcolumns(sender, e);
        binddept();
        designation();
        stafftype();
        bindsearchstapp();
        lbl_err.Visible = false;
        searchbydate.Checked = false;
        txt_fdate.Enabled = false;
        txt_tdate.Enabled = false;
        ddlsearchappstf.Visible = true;
        ddlsearchappstf.SelectedIndex = 0;
        txtappstfname.Visible = true;
        txtappstfapplcode.Visible = true;
        lblappstfname.Visible = true;
        txtappstfcode.Visible = false;
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        txtappstfname.Text = "";
        lbladdstatus.Visible = false;
        updaddstatus.Visible = false;
        tbllabel.Visible = false;
        tbllabel1.Visible = false;
        Fpspread15.Visible = false;
        Fpspread5.Visible = false;
        Fpspread6.Visible = false;
        Fpspread9.Visible = false;
        Fpspread4.Visible = false;
        Fpspread17.Visible = false;
        Fpspread14.Visible = false;
        Fpspread10.Visible = false;
        Fpspread7.Visible = false;
        searchbydate.Enabled = true;
        btn_promotion.BackColor = Color.MediumBlue;
        btn_increment.BackColor = Color.MediumSlateBlue;
        btn_appraisal.BackColor = Color.MediumSlateBlue;
        btn_application.BackColor = Color.MediumSlateBlue;
        btn_cletter.BackColor = Color.MediumSlateBlue;
        btn_selection.BackColor = Color.MediumSlateBlue;
        btn_appointment.BackColor = Color.MediumSlateBlue;
        btn_transfer.BackColor = Color.MediumSlateBlue;
        btn_relieve.BackColor = Color.MediumSlateBlue;
        btn_loan.BackColor = Color.MediumSlateBlue;
        hide();
        headermain.Text = "Staff Promotion";
        btn_selectgo.Visible = false;
        btn_selectnew.Visible = false;
        btn_aptgo.Visible = false;
        btn_new.Visible = false;
        btn_intcallgo.Visible = false;
        btn_intcallnew.Visible = false;
        lbl_fdate.Text = "Promoted Date";
        rel.Text = "";
        btn_appgo.Visible = false;
        btn_aptnew.Visible = false;
        reldate.Visible = false;
        btn_trnasgo.Visible = false;
        btn_transnew.Visible = false;
        btn_relgo.Visible = false;
        btn_relnew.Visible = false;
        btn_aprgo.Visible = false;
        btn_aprnew.Visible = false;
        btn_promgo.Visible = true;
        btn_promonew.Visible = true;
        btn_incrgo.Visible = false;
        btn_incrnew.Visible = false;
        btn_loango.Visible = false;
        btn_loannew.Visible = false;
        loan.Visible = false;
    }

    protected void Cell5_Click(object sender, EventArgs e)
    {
        check = true;
        Relieve.Visible = true;
        btn_relieve_save.Visible = false;
        btn_relieveupdate.Visible = true;
    }

    protected void Cell6_Click(object sender, EventArgs e)
    {
        check = true;
        Appraisal.Visible = true;
    }

    protected void Cell16_Click(object sender, EventArgs e)
    {
        check = true;
        Promotion.Visible = true;
        promodesignation();
    }

    protected void Fpspread16_OnPreRender(object sender, EventArgs e)
    {
        try
        {
            if (check == true)
            {
                string activerow = "";
                string activecol = "";
                string applno = "";
                btn_promosave.Visible = false;
                btn_promoupdate.Visible = true;
                activerow = Fpspread16.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread16.ActiveSheetView.ActiveColumn.ToString();
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

                if (activerow.Trim() != "")
                    applno = Convert.ToString(Fpspread16.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                string scode = d2.GetFunction("select staff_code from staffmaster where appl_no='" + applno + "' and college_code='" + collcode + "'");

                txt_promoscode.Text = scode;
                promodesignation();
                string getquery = "select staff_name,Convert(nvarchar(20),smdate,(103)) as smdate,s.staff_code,d.desig_name,h.dept_name,staff_type,Convert(nvarchar(20),s.join_date,(103)) as join_date from staff_appl_master sa,staffmaster s,stafftrans t,hrdept_master h,desig_master d where sa.appl_no =s.appl_no and s.college_code=h.college_code and s.college_code=d.collegeCode and s.staff_code =t.staff_code and d.desig_code =t.desig_code and h.dept_code =t.dept_code   and latestrec=1 and t.staff_code='" + scode + "' and s.college_code='" + collcode + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(getquery, "Text");
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    txt_promodept.Text = ds.Tables[0].Rows[i]["dept_name"].ToString();
                    txt_promrname.Text = ds.Tables[0].Rows[i]["staff_name"].ToString();
                    txt_promodesig.Text = ds.Tables[0].Rows[i]["desig_name"].ToString();
                    txt_promostype.Text = ds.Tables[0].Rows[i]["staff_type"].ToString();
                    string jdate = ds.Tables[0].Rows[i]["join_date"].ToString();
                    txt_joindate.Text = jdate;
                    txt_promodate.Text = ds.Tables[0].Rows[i]["smdate"].ToString();
                }
            }
        }
        catch { }
    }

    protected void Fpspread6_OnPreRender(object sender, EventArgs e)
    {
        try
        {
            if (check == true)
            {
                string activerow = "";
                string activecol = "";
                string applno = "";
                btn_appr_save.Visible = false;
                btn_apprupdate.Visible = true;
                activerow = Fpspread6.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread6.ActiveSheetView.ActiveColumn.ToString();
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

                if (activerow.Trim() != "")
                    applno = Convert.ToString(Fpspread6.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                string scode = d2.GetFunction("select staff_code from staffmaster where appl_no='" + applno + "' and college_code='" + collcode + "'");

                string getquery = "select staff_name,s.staff_code,d.desig_name,h.dept_name,a.staff_type,s.join_date from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where  s.appl_no =a.appl_no and s.staff_code =t.staff_code and a.dept_code =h.dept_code and a.desig_code =d.desig_code and s.college_code=h.college_Code and s.college_code=d.collegeCode and latestrec=1 and s.staff_code='" + scode + "' and s.college_code='" + collcode + "'";
                getquery = getquery + " select staff_code,CONVERT(nvarchar(20),AppraisalDate,103) as AppraisalDate,Questioncode,Anscode,Remarks,AppraisalType  from StaffAppraisalMaster sm,StaffAppraisalDetails sd where sm.AppraisalPk=sd.AppraisalFk and staff_code='" + scode + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(getquery, "Text");
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            txt_apprdept.Text = ds.Tables[0].Rows[0]["dept_name"].ToString();
                            txt_apprsname.Text = ds.Tables[0].Rows[0]["staff_name"].ToString();
                            txt_apprdesig.Text = ds.Tables[0].Rows[0]["desig_name"].ToString();
                            txt_apprstype.Text = ds.Tables[0].Rows[0]["staff_type"].ToString();
                            txt_apprscode.Text = ds.Tables[0].Rows[0]["staff_code"].ToString();
                        }
                    }
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                        {
                            txt_apprjdate.Text = ds.Tables[1].Rows[0]["AppraisalDate"].ToString();
                            string atype = ds.Tables[1].Rows[0]["AppraisalType"].ToString();
                            ddl_stat.SelectedIndex = ddl_stat.Items.IndexOf(ddl_stat.Items.FindByValue(atype));
                        }
                    }
                }

                Fpspread3.Visible = true;
                Fpspread3.CommandBar.Visible = false;
                Fpspread3.Sheets[0].AutoPostBack = false;

                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                darkstyle.Font.Name = "Book Antiqua";
                darkstyle.Font.Size = FontUnit.Medium;
                darkstyle.Font.Bold = true;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                darkstyle.VerticalAlign = VerticalAlign.Middle;
                Fpspread3.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
                Fpspread3.RowHeader.Visible = false;

                FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                darkstyle1.Font.Name = "Book Antiqua";
                darkstyle1.Font.Size = FontUnit.Medium;

                Fpspread3.Sheets[0].DefaultStyle = darkstyle1;
                Fpspread3.Sheets[0].RowCount = 0;
                Fpspread3.Sheets[0].ColumnCount = 4;
                Fpspread3.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread3.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                Fpspread3.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                Fpspread3.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
                Fpspread3.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Questions";
                Fpspread3.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Answers";
                Fpspread3.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Remarks";

                Fpspread3.Sheets[0].ColumnHeader.Columns[1].Width = 250;
                Fpspread3.Sheets[0].ColumnHeader.Columns[2].Width = 250;
                Fpspread3.Sheets[0].ColumnHeader.Columns[3].Width = 175;

                ItemList.Clear();
                Itemindex.Clear();

                string query1 = "select TextVal,TextCode from TextValTable where TextCriteria='haans' and college_code='" + collcode + "'";
                dv = d2.select_method_wo_parameter(query1, "Text");

                string[] items1 = new string[dv.Tables[0].Rows.Count + 1];
                for (int j = 0; j < dv.Tables[0].Rows.Count; j++)
                {
                    items1[j + 1] = Convert.ToString(dv.Tables[0].Rows[j]["TextVal"]);
                }
                FarPoint.Web.Spread.ComboBoxCellType combo1 = new FarPoint.Web.Spread.ComboBoxCellType(items1);
                combo1.UseValue = true;
                combo1.AutoPostBack = true;

                string query = "select TextVal,TextCode from TextValTable where TextCriteria='haque' and college_code='" + collcode + "'";
                dp = d2.select_method_wo_parameter(query, "Text");

                string[] items2 = new string[dp.Tables[0].Rows.Count + 1];
                for (int k = 0; k < dp.Tables[0].Rows.Count; k++)
                {
                    items2[k + 1] = Convert.ToString(dp.Tables[0].Rows[k]["TextVal"]);
                }
                FarPoint.Web.Spread.ComboBoxCellType combo2 = new FarPoint.Web.Spread.ComboBoxCellType(items2);
                combo2.UseValue = true;
                combo2.AutoPostBack = true;

                int sk = 0;

                if (dv.Tables[0].Rows.Count > 0 && dp.Tables[0].Rows.Count > 0)
                {
                    string remark = "";
                    for (sk = 0; sk < dp.Tables[0].Rows.Count; sk++)
                    {
                        Fpspread3.SaveChanges();
                        string[] Qarray = new string[ds.Tables[1].Rows.Count];
                        if (ds.Tables[1].Rows.Count > sk)
                        {
                            string tc = ds.Tables[1].Rows[sk]["Questioncode"].ToString();
                            string tca = ds.Tables[1].Rows[sk]["Anscode"].ToString();
                            remark = ds.Tables[1].Rows[sk]["Remarks"].ToString();
                            string qc = d2.GetFunction("select TextVal from TextValTable where Textcode='" + tc + "' and TextCriteria='haque' and college_code='" + collcode + "'");
                            qc = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(qc);
                            Qarray[sk] = qc;
                            string[] Aarray = new string[ds.Tables[1].Rows.Count];
                            string ac = d2.GetFunction("select TextVal from TextValTable where Textcode='" + tca + "' and TextCriteria='haans' and college_code='" + collcode + "'");
                            ac = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(ac);
                            Aarray[sk] = ac;

                            FarPoint.Web.Spread.ComboBoxCellType cb = new FarPoint.Web.Spread.ComboBoxCellType(Qarray);
                            FarPoint.Web.Spread.ComboBoxCellType cb1 = new FarPoint.Web.Spread.ComboBoxCellType(Aarray);
                            cb.UseValue = true;
                            cb.AutoPostBack = true;
                            cb.ShowButton = false;

                            cb1.UseValue = true;
                            cb1.AutoPostBack = true;
                            cb1.ShowButton = false;

                            string[] items = { Convert.ToString(dv.Tables[0].Rows[sk]["TextVal"]) };
                            FarPoint.Web.Spread.ComboBoxCellType combo = new FarPoint.Web.Spread.ComboBoxCellType(items);
                            Fpspread3.Sheets[0].RowCount++;

                            Fpspread3.Sheets[0].Cells[sk, 0].Text = Convert.ToString(sk + 1);
                            Fpspread3.Sheets[0].Cells[sk, 1].CellType = combo2;
                            Fpspread3.Sheets[0].Cells[sk, 1].Text = qc;
                            Fpspread3.Sheets[0].Cells[sk, 1].Tag = Convert.ToString(dp.Tables[0].Rows[sk]["TextCode"]);
                            Fpspread3.Sheets[0].Cells[sk, 2].CellType = combo1;
                            Fpspread3.Sheets[0].Cells[sk, 2].Text = ac;
                            Fpspread3.Sheets[0].Cells[sk, 2].Tag = Convert.ToString(dv.Tables[0].Rows[sk]["TextCode"]);
                            Fpspread3.Sheets[0].Cells[sk, 3].Text = remark;
                        }
                    }
                }
            }
        }
        catch { }
    }

    protected void FpSpread5_OnPreRender(object sender, EventArgs e)
    {
        try
        {
            if (check == true)
            {
                string activerow = "";
                string activecol = "";
                string applno = "";
                string ApplID = string.Empty;
                lnkShwStudDet.Visible = false;
                string collcode = "";
                txt_remarks.Text = "";
                txt_rldate.Text = "";
                txt_stfrelcode.Text = "";
                txt_stfrelname.Text = "";
                rdb_cancelrel.Visible = true;
                rdb_cancelrel.Enabled = true;

                activerow = Fpspread5.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread5.ActiveSheetView.ActiveColumn.ToString();

                if (activerow.Trim() != "")
                {
                    applno = Convert.ToString(Fpspread5.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                    collcode = Convert.ToString(Fpspread5.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Note);
                    ApplID = d2.GetFunction("select appl_id from Staff_appl_master where appl_no='" + applno + "' and college_Code='" + collcode + "'");
                    string MySelQ = "select Stud_Name from Registration where staff_appl_id='" + ApplID + "' and CC=0 and DelFlag=0 and Exam_Flag<>'Debar'";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(MySelQ, "Text");
                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                        lnkShwStudDet.Visible = true;
                }

                string reldate = "select CONVERT(varchar(20),relieve_date ,103) as relieve_date,CONVERT(varchar(20),resigdate ,103) as resigdate,isnull(RelivedReason,'') as RelivedReason,staff_code,staff_name,isnull(noticepay,'') as noticepay from staffmaster where resign=1 and settled=1 and appl_no='" + applno + "' and college_code='" + collcode + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(reldate, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    if (ds.Tables[0].Rows[0]["relieve_date"].ToString().Trim() != "")
                    {
                        rdb_relieved.Checked = true;
                        rdb_disc.Checked = false;
                        rdb_cancelrel.Checked = false;

                        string rdate = ds.Tables[0].Rows[0]["relieve_date"].ToString();
                        string rmk = ds.Tables[0].Rows[0]["RelivedReason"].ToString();
                        string residate = ds.Tables[0].Rows[0]["resigdate"].ToString();
                        int noticespay = Convert.ToInt32(ds.Tables[0].Rows[0]["noticepay"]);
                        if (noticespay > 0)
                        {
                            cbisnotisepaystaff.Checked = true;
                            txt_noticepay.Visible = true;
                            txt_noticepay.Text = Convert.ToString(noticespay);

                        }
                        else
                        {
                            cbisnotisepaystaff.Checked = false;
                            txt_noticepay.Visible = false;
                            txt_noticepay.Text = "";

                        }

                        txt_rldate.Text = rdate;
                        txt_remarks.Text = rmk;
                        txt_regnation.Text = residate;
                        txt_stfrelcode.Text = ds.Tables[0].Rows[0]["staff_code"].ToString();
                        txt_stfrelname.Text = ds.Tables[0].Rows[0]["staff_name"].ToString();
                    }
                }

                string discdate = "select CONVERT(varchar(20),Discontinue_Date,103) as Discontinue_Date,RelivedReason,staff_code,staff_name from staffmaster where Discontinue='1' and appl_no='" + applno + "' and college_code='" + collcode + "'";
                dv.Clear();
                dv = d2.select_method_wo_parameter(discdate, "Text");
                if (dv.Tables.Count > 0 && dv.Tables[0].Rows.Count > 0)
                {
                    if (dv.Tables[0].Rows[0]["Discontinue_Date"].ToString().Trim() != "")
                    {
                        rdb_disc.Checked = true;
                        rdb_relievd.Checked = false;
                        rdb_cancelrel.Checked = false;
                        string ddate = dv.Tables[0].Rows[0]["Discontinue_Date"].ToString();
                        string rdmk = dv.Tables[0].Rows[0]["RelivedReason"].ToString();
                        txt_remarks.Text = rdmk;
                        txt_rldate.Text = ddate;
                        txt_stfrelcode.Text = dv.Tables[0].Rows[0]["staff_code"].ToString();
                        txt_stfrelname.Text = dv.Tables[0].Rows[0]["staff_name"].ToString();
                    }
                }
                rdb_relieved.Enabled = false;
                rdb_disc.Enabled = false;
            }
        }
        catch { }
    }

    protected void Cell4_Click(object sender, EventArgs e)
    {
        check = true;
        Transfer.Visible = true;
    }

    protected void Fpspread4_OnPreRender(object sender, EventArgs e)
    {
        try
        {
            if (check == true)
            {
                pobindcollege();
                lbl_trserr.Visible = false;
                lbl_tralert.Visible = false;
                lbl_trerr.Visible = false;
                btn_transfersave.Visible = false;
                btn_transupdate.Visible = true;
                txt_transdate.Enabled = true;

                cb_scode.Enabled = true;
                cb_scode.Checked = false;
                txt_transscode.Visible = false;
                string activerow = "";
                string activecol = "";
                string applno = "";
                string getquery = "";
                txt_transdate.Text = "";
                txt_fcollege.Text = "";
                txt_fdept.Text = "";
                txt_fdesig.Text = "";
                txt_stfcodetrans.Text = "";
                txt_stfnametrans.Text = "";
                activerow = Fpspread4.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread4.ActiveSheetView.ActiveColumn.ToString();
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
                string scode = "";
                string transid = "";

                if (activerow.Trim() != "")
                {
                    applno = Convert.ToString(Fpspread4.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                    scode = Convert.ToString(Fpspread4.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text);
                    transid = Convert.ToString(Fpspread4.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Note);
                }
                getquery = "select staff_code,s.desig_code,CONVERT(varchar(20),transfer_date ,103) as transfer_date,s.dept_code from stafftrans s,hrdept_master h,desig_master d,staff_transfer st where s.dept_code =h.dept_code and d.desig_code =s.desig_code and st.newstaff_code=s.staff_code and latestrec ='1' and st.newstaff_code ='" + scode + "' and st.TransferPK='" + transid + "'";
                ds = d2.select_method_wo_parameter(getquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string clgname = ddlcollege.SelectedItem.Text;
                    string transdate = ds.Tables[0].Rows[0]["transfer_date"].ToString();
                    string dpcode = ds.Tables[0].Rows[0]["dept_code"].ToString();
                    string dsgcode = ds.Tables[0].Rows[0]["desig_code"].ToString();
                    string staffcode = ds.Tables[0].Rows[0]["staff_code"].ToString();

                    string staffname = d2.GetFunction("select staff_name from staffmaster where staff_code='" + staffcode + "' and college_code='" + collcode + "'");
                    string deptname = d2.GetFunction("select Dept_Name from hrdept_master where dept_Code='" + dpcode + "' and college_Code='" + collcode + "'");
                    string designame = d2.GetFunction("select desig_name from desig_master where desig_code='" + dsgcode + "' and collegeCode='" + collcode + "'");
                    txt_transdate.Text = transdate;
                    txt_fcollege.Text = clgname;
                    txt_fdept.Text = deptname;
                    txt_fdesig.Text = designame;
                    txt_stfcodetrans.Text = staffcode;
                    if (staffname.Trim() != "" && staffname.Trim() != "0")
                        txt_stfnametrans.Text = staffname;

                    dp.Clear();
                    ddl_tdept.Items.Clear();
                    string item = "select distinct dept_code,dept_name from hrdept_master where dept_code not in('" + dpcode + "') and college_code='" + collcode + "' ";
                    dp = d2.select_method_wo_parameter(item, "Text");
                    if (dp.Tables[0].Rows.Count > 0)
                    {
                        ddl_tdept.DataSource = dp;
                        ddl_tdept.DataTextField = "dept_name";
                        ddl_tdept.DataValueField = "dept_code";
                        ddl_tdept.DataBind();
                    }

                    dg.Clear();
                    ddl_tdesig.Items.Clear();
                    string statequery = "select desig_code,desig_name from desig_master where desig_code not in ('" + dsgcode + "') and collegeCode='" + collcode + "'";
                    dg = da.select_method_wo_parameter(statequery, "Text");
                    if (dg.Tables[0].Rows.Count > 0)
                    {
                        ddl_tdesig.DataSource = dg;
                        ddl_tdesig.DataTextField = "desig_name";
                        ddl_tdesig.DataValueField = "desig_code";
                        ddl_tdesig.DataBind();
                        ddl_tdesig.Visible = true;
                    }
                    ddl_tocollege.SelectedIndex = ddl_tocollege.Items.IndexOf(ddl_tocollege.Items.FindByText(clgname));
                    ddl_tdept.SelectedIndex = ddl_tdept.Items.IndexOf(ddl_tdept.Items.FindByText(deptname));
                    ddl_tdesig.SelectedIndex = ddl_tdesig.Items.IndexOf(ddl_tdesig.Items.FindByText(designame));
                }
            }
        }
        catch { }
    }

    protected void cb_scode_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            string deptacr = "";
            string collegecode1 = "";
            if (btn_transfersave.Visible == true)
                collegecode1 = Convert.ToString(ddl_clg.SelectedItem.Value);
            if (btn_transupdate.Visible == true)
                collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);

            if (cb_scode.Checked == true)
            {
                txt_transscode.Visible = true;
                string dept = Convert.ToString(ddl_tdept.SelectedValue);
                if (dept.Trim() != "")
                    deptacr = d2.GetFunction("select dept_acronym  from hrdept_master where dept_code ='" + dept + "'");
                string collacr = d2.GetFunction("select Coll_acronymn from collinfo where college_code ='" + collegecode1 + "'");  //modified by Jeyaprakash
                string value = d2.GetFunction("select value from Master_Settings where settings='CodeSetting Rights' and value is not null and value<>''");
                string query = "";
                if (value.Trim() != "")
                {
                    string[] val = value.Split(',');
                    for (int i = 0; i < val.Length; i++)
                    {
                        if (val[i] == "1")
                        {
                            string gacr = "";
                            string startno = "";
                            string size = "";
                            string settingvalues = "";
                            string acronym = "";
                            query = "select GeneralAcr,StartNo,SerialSize,SettingValues  from HRS_CodeSettings  where SettingField='1'";
                            ds = d2.select_method_wo_parameter(query, "Text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                gacr = ds.Tables[0].Rows[0]["GeneralAcr"].ToString();
                                startno = ds.Tables[0].Rows[0]["StartNo"].ToString();
                                size = ds.Tables[0].Rows[0]["SerialSize"].ToString();
                                settingvalues = ds.Tables[0].Rows[0]["SettingValues"].ToString();

                                if (settingvalues.Trim() != "")
                                {
                                    string[] sval = settingvalues.Split(';');
                                    if (sval.Length > 0)
                                    {
                                        for (int k = 0; k < sval.Length; k++)
                                        {
                                            if (sval[k] != "")
                                            {
                                                if (sval[k] == "1")
                                                    acronym = collacr;
                                                if (sval[k] == "2")
                                                    acronym = acronym + deptacr;
                                                if (sval[k] == "3")
                                                    acronym = acronym + gacr;
                                            }
                                        }
                                    }

                                    int ssize = Convert.ToInt32(size);
                                    string sno = "";
                                    sno = startno.ToString().PadLeft(ssize, '0');
                                    acronym = acronym + sno;
                                    int stno = Convert.ToInt32(startno);
                                    int usno = stno + 1;
                                    txt_transscode.Text = acronym;
                                    txt_transscode.Enabled = false;
                                    lbl_trserr.Visible = false;
                                }
                            }
                            else
                            {
                                txt_transscode.Text = "";
                                lbl_trserr.Visible = true;
                                lbl_trserr.Text = "Please Set Code Settings First";
                                txt_transscode.Enabled = true;
                            }
                        }
                        else
                        {
                            txt_transscode.Text = "";
                            txt_transscode.Enabled = true;
                            lbl_trserr.Visible = false;
                        }
                    }
                }
                else
                {
                    txt_transscode.Text = "";
                    txt_transscode.Enabled = true;
                    lbl_trserr.Visible = false;
                }
            }
            else
            {
                txt_transscode.Text = "";
                txt_transscode.Visible = false;
                lbl_trserr.Visible = false;
            }
        }
        catch { }
    }

    protected void ddl_tdept_change(object sender, EventArgs e)
    {
        if (cb_scode.Checked == true)
            cb_scode_OnCheckedChanged(sender, e);
    }

    protected void btn_promotion1_OnClick(object sender, EventArgs e)
    {
        try
        {
            lblpromerr.Visible = false;
            int count = 0;
            if (checkedOK(Fpspread1, out count))
            {
                if (count == 1)
                {
                    promodesignation();
                    btn_promosave.Visible = true;
                    btn_promoupdate.Visible = false;
                    Promotion.Visible = true;
                    txt_promodate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    lbl_alert.Visible = false;
                    Fpspread1.SaveChanges();
                    string scode = "";
                    string collcode = Convert.ToString(ddl_clg.SelectedItem.Value);

                    for (int k = 0; k < Fpspread1.Sheets[0].Rows.Count; k++)
                    {
                        byte check = Convert.ToByte(Fpspread1.Sheets[0].Cells[k, 1].Value);
                        if (check == 1)
                        {
                            scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 3].Text);
                            txt_promoscode.Text = scode;
                            string getquery = "select staff_name,s.staff_code,d.desig_name,h.dept_name,staff_type,s.join_date from staff_appl_master sa,staffmaster s,stafftrans t,hrdept_master h,desig_master d where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and d.desig_code =t.desig_code and h.dept_code =t.dept_code and s.college_code=h.college_code and s.college_code=d.collegeCode and latestrec=1 and t.staff_code='" + scode + "' and s.college_code='" + collcode + "'";
                            ds.Clear();
                            ds = d2.select_method_wo_parameter(getquery, "Text");
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                txt_promodept.Text = ds.Tables[0].Rows[i]["dept_name"].ToString();
                                txt_promrname.Text = ds.Tables[0].Rows[i]["staff_name"].ToString();
                                txt_promodesig.Text = ds.Tables[0].Rows[i]["desig_name"].ToString();
                                txt_promostype.Text = ds.Tables[0].Rows[i]["staff_type"].ToString();
                                string jdate = ds.Tables[0].Rows[i]["join_date"].ToString();
                                string[] split = jdate.Split('/');
                                DateTime jd = Convert.ToDateTime(split[0] + "/" + split[1] + "/" + split[2]);
                                txt_joindate.Text = jd.ToString("dd/MM/yyyy");
                            }
                        }
                    }
                }
                else
                {
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Please Select any one Records ";
                }
            }
            else
            {
                lbl_alert.Visible = true;
                lbl_alert.Text = "Please Select any one Records ";
            }
        }
        catch { }
    }

    protected void btn_promosave_OnClick(object sender, EventArgs e)
    {
        try
        {
            string scode = "";
            scode = Convert.ToString(txt_promoscode.Text);
            string desigcode = ddl_desigto.SelectedValue;
            string prodate = txt_promodate.Text;
            string[] split = prodate.Split('/');
            DateTime promodate = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            string deptname = txt_promodept.Text;
            string collcode = Convert.ToString(ddl_clg.SelectedItem.Value);
            string query = "";

            string deptcode = d2.GetFunction("select dept_code from hrdept_master where dept_name ='" + deptname + "' and college_code='" + collcode + "'");

            string selq = "select staff_code,desig_code,stftype,category_code,stfstatus,stfnature,bsalary,parea,growth,remarks,smdate,latestrec,dept_code,payscale,emp_pf,pf_amt,allowances,deductions,increment_date,inc_status,leavecategory,longleaveapplydate,longleavewithdrawaldate,holidaycategory,cert_type,time_category,admcategory,basicpay,datype,daallow,saltype,grade_pay,pareaval,Shift,MPFAmount,MPFPer,IsMPFAmt,FacultyType,PayMode,Programme,BasicType,Basic,AGP,IncrementAmt,IncrementTime,IsConsolid,Desig_Code_From,BasicInc,AllowIncDet,IsManualLOP,IsDailyWages,BankAccType,IsAutoGP,Isincrement from stafftrans where staff_code ='" + scode + "' and latestrec ='1'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selq, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                string updq = "update stafftrans set latestrec ='0' where staff_code ='" + scode + "'";
                int updcount = d2.update_method_wo_parameter(updq, "Text");
                if (updcount > 0)
                {
                    string latest = "";
                    string latestrec = Convert.ToString(ds.Tables[0].Rows[0]["latestrec"]);
                    if (latestrec.ToUpper() == "TRUE")
                        latest = "1";
                    else
                        latest = "0";
                    string emppf = "";
                    string emplpf = Convert.ToString(ds.Tables[0].Rows[0]["emp_pf"]);
                    if (emplpf.ToUpper() == "TRUE")
                        emppf = "1";
                    else
                        emppf = "0";
                    string incstat = "";
                    string incstatus = Convert.ToString(ds.Tables[0].Rows[0]["inc_status"]);
                    if (incstatus.ToUpper() == "TRUE")
                        incstat = "1";
                    else
                        incstat = "0";
                    string ismpf = "";
                    string ismpfamt = Convert.ToString(ds.Tables[0].Rows[0]["IsMPFAmt"]);
                    if (ismpfamt.ToUpper() == "TRUE")
                        ismpf = "1";
                    else
                        ismpf = "0";
                    string isconsolid = "";
                    string isconsolidate = Convert.ToString(ds.Tables[0].Rows[0]["IsConsolid"]);
                    if (isconsolidate.ToUpper() == "TRUE")
                        isconsolid = "1";
                    else
                        isconsolid = "0";
                    string ismanual = "";
                    string ismanuallop = Convert.ToString(ds.Tables[0].Rows[0]["IsManualLOP"]);
                    if (ismanuallop.ToUpper() == "TRUE")
                        ismanual = "1";
                    else
                        ismanual = "0";
                    string isdaily = "";
                    string isdailywages = Convert.ToString(ds.Tables[0].Rows[0]["IsDailyWages"]);
                    if (isdailywages.ToUpper() == "TRUE")
                        isdaily = "1";
                    else
                        isdaily = "0";
                    string isauto = "";
                    string isautogp = Convert.ToString(ds.Tables[0].Rows[0]["IsAutoGP"]);
                    if (isautogp.ToUpper() == "TRUE")
                        isauto = "1";
                    else
                        isauto = "0";
                    string certtype = "";
                    string cert_type = Convert.ToString(ds.Tables[0].Rows[0]["cert_type"]);
                    if (cert_type.Trim() != "")
                        certtype = cert_type;
                    else
                        certtype = "0";
                    string bsalary = "0";
                    string bsal = Convert.ToString(ds.Tables[0].Rows[0]["bsalary"]);
                    if (bsal.Trim() != "")
                        bsalary = bsal;
                    string timecategory = "0";
                    string timecat = Convert.ToString(ds.Tables[0].Rows[0]["time_category"]);
                    if (timecat.Trim() != "")
                        timecategory = timecat;
                    string saltype = "0";
                    string salarytyp = Convert.ToString(ds.Tables[0].Rows[0]["saltype"]);
                    if (salarytyp.Trim() != "")
                        saltype = salarytyp;
                    string gradeamnt = "0";
                    string gradepay = Convert.ToString(ds.Tables[0].Rows[0]["grade_pay"]);
                    if (gradepay.Trim() != "")
                        gradeamnt = gradepay;
                    string parea = "0";
                    string pareaval = Convert.ToString(ds.Tables[0].Rows[0]["pareaval"]);
                    if (pareaval.Trim() != "")
                        parea = pareaval;
                    string basicamnt = "0";
                    string basicpay = Convert.ToString(ds.Tables[0].Rows[0]["basicpay"]);
                    if (basicpay.Trim() != "")
                        basicamnt = basicpay;
                    string dall = "0";
                    string daallow = Convert.ToString(ds.Tables[0].Rows[0]["daallow"]);
                    if (daallow.Trim() != "")
                        dall = daallow;
                    string mpfamnt = "0";
                    string MPFAmount = Convert.ToString(ds.Tables[0].Rows[0]["MPFAmount"]);
                    if (MPFAmount.Trim() != "")
                        mpfamnt = MPFAmount;
                    string mpfper = "0";
                    string MPFPer = Convert.ToString(ds.Tables[0].Rows[0]["MPFPer"]);
                    if (MPFPer.Trim() != "")
                        mpfper = MPFPer;
                    string paymod = "0";
                    string PayMode = Convert.ToString(ds.Tables[0].Rows[0]["PayMode"]);
                    if (PayMode.Trim() != "")
                        paymod = PayMode;
                    string BasicTyp = "0";
                    string BasicType = Convert.ToString(ds.Tables[0].Rows[0]["BasicType"]);
                    if (BasicType.Trim() != "")
                        BasicTyp = BasicType;
                    string Bas = "0";
                    string Basic = Convert.ToString(ds.Tables[0].Rows[0]["Basic"]);
                    if (Basic.Trim() != "")
                        Bas = Basic;
                    string agp = "0";
                    string AGP = Convert.ToString(ds.Tables[0].Rows[0]["AGP"]);
                    if (AGP.Trim() != "")
                        agp = AGP;
                    string incramnt = "0";
                    string IncrementAmt = Convert.ToString(ds.Tables[0].Rows[0]["IncrementAmt"]);
                    if (IncrementAmt.Trim() != "")
                        incramnt = IncrementAmt;
                    string incrtime = "0";
                    string IncrementTime = Convert.ToString(ds.Tables[0].Rows[0]["IncrementTime"]);
                    if (IncrementTime.Trim() != "")
                        incrtime = IncrementTime;
                    string basinc = "0";
                    string BasicInc = Convert.ToString(ds.Tables[0].Rows[0]["BasicInc"]);
                    if (BasicInc.Trim() != "")
                        basinc = BasicInc;
                    string bankacc = "0";
                    string BankAccType = Convert.ToString(ds.Tables[0].Rows[0]["BankAccType"]);
                    if (BankAccType.Trim() != "")
                        bankacc = BankAccType;
                    string isinc = "0";
                    string Isincrement = Convert.ToString(ds.Tables[0].Rows[0]["Isincrement"]);
                    if (Isincrement.Trim() != "")
                        isinc = Isincrement;

                    query = "insert into stafftrans (staff_code,desig_code,stftype,category_code,stfstatus,stfnature,bsalary,parea,growth,remarks,smdate,latestrec,dept_code,payscale,emp_pf,pf_amt,allowances,deductions,increment_date,inc_status,leavecategory,longleaveapplydate,longleavewithdrawaldate,holidaycategory,cert_type,time_category,admcategory,basicpay,datype,daallow,saltype,grade_pay,pareaval,Shift,MPFAmount,MPFPer,IsMPFAmt,FacultyType,PayMode,Programme,BasicType,Basic,AGP,IncrementAmt,IncrementTime,IsConsolid,Desig_Code_From,BasicInc,AllowIncDet,IsManualLOP,IsDailyWages,BankAccType,IsAutoGP,Isincrement) values ('" + Convert.ToString(ds.Tables[0].Rows[0]["staff_code"]) + "','" + desigcode + "','" + Convert.ToString(ds.Tables[0].Rows[0]["stftype"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["category_code"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["stfstatus"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["stfnature"]) + "','" + bsalary + "','2','" + Convert.ToString(ds.Tables[0].Rows[0]["growth"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["remarks"]) + "','" + promodate.ToString("MM/dd/yyyy") + "','" + latest + "','" + deptcode + "','" + Convert.ToString(ds.Tables[0].Rows[0]["payscale"]) + "','" + emppf + "','" + Convert.ToString(ds.Tables[0].Rows[0]["pf_amt"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["allowances"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["deductions"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["increment_date"]) + "','" + incstat + "','" + Convert.ToString(ds.Tables[0].Rows[0]["leavecategory"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["longleaveapplydate"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["longleavewithdrawaldate"]) + "','" + Convert.ToString(ds.Tables[0].Rows[0]["holidaycategory"]) + "','" + certtype + "','" + timecategory + "','" + Convert.ToString(ds.Tables[0].Rows[0]["admcategory"]) + "','" + basicamnt + "','" + Convert.ToString(ds.Tables[0].Rows[0]["datype"]) + "','" + dall + "','" + saltype + "','" + gradeamnt + "','" + parea + "','" + Convert.ToString(ds.Tables[0].Rows[0]["Shift"]) + "','" + mpfamnt + "','" + mpfper + "','" + ismpf + "','" + Convert.ToString(ds.Tables[0].Rows[0]["FacultyType"]) + "','" + paymod + "','" + Convert.ToString(ds.Tables[0].Rows[0]["Programme"]) + "','" + BasicTyp + "','" + Bas + "','" + agp + "','" + incramnt + "','" + incrtime + "','" + isconsolid + "','" + Convert.ToString(ds.Tables[0].Rows[0]["Desig_Code_From"]) + "','" + basinc + "','" + Convert.ToString(ds.Tables[0].Rows[0]["AllowIncDet"]) + "','" + ismanual + "','" + isdaily + "','" + bankacc + "','" + isauto + "','" + isinc + "')";

                }
            }
            int count = d2.update_method_wo_parameter(query, "Text");
            if (count != 0)
            {
                Promotion.Visible = false;
                btn_popgo_OnClick(sender, e);
                alertpopwindow.Visible = true;
                string aa = txt_promodesig.Text;
                lblalerterr.Text = " Promoted  " + aa + " to " + ddl_desigto.SelectedItem + " ";
            }
        }
        catch { }
    }

    protected void btn_promoupdate_OnClick(object sender, EventArgs e)
    {
        try
        {
            string scode = txt_promoscode.Text;
            string desigcode = ddl_desigto.SelectedValue;
            string prodate = txt_promodate.Text;
            string[] split = prodate.Split('/');
            DateTime promodate = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            string deptname = txt_promodept.Text;
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
            string deptcode = d2.GetFunction("select dept_code from hrdept_master where dept_name ='" + deptname + "' and college_code='" + collcode + "'");

            string query = "update stafftrans set desig_code='" + desigcode + "',dept_code='" + deptcode + "',smdate='" + promodate.ToString("MM/dd/yyyy") + "' where staff_code='" + scode + "' and latestrec='1' and parea='2'";

            int count = d2.update_method_wo_parameter(query, "Text");
            if (count != 0)
            {
                alertpopwindow.Visible = true;
                string aa = txt_promodesig.Text;
                lblalerterr.Text = " Promoted  " + aa + " to " + ddl_desigto.SelectedItem + " ";
                Promotion.Visible = false;
                btn_promgo_OnClick(sender, e);
            }
        }
        catch { }
    }

    /// /////////////////Increment////////////////////
    protected void rdb_amt_OnCheckedChanged(object sender, EventArgs e)
    {
        if (cb_basic.Checked == true || cbBasicPlusgrosspay.Checked)
        {
            if (rdb_amt.Checked == true)
            {
                txt_amt.Text = "";
                txt_amt.Enabled = true;
                txt_percent.Text = "";
                txt_percent.Enabled = false;
            }
        }
    }

    protected void rdb_percent_OnCheckedChanged(object sender, EventArgs e)
    {
        if (cb_basic.Checked == true || cbBasicPlusgrosspay.Checked)
        {
            if (rdb_percent.Checked == true)
            {
                txt_amt.Text = "";
                txt_amt.Enabled = false;
                txt_percent.Text = "";
                txt_percent.Enabled = true;
            }
        }
    }

    protected void cb_basic_OncheckedChanged(object sender, EventArgs e)
    {
        if (cb_basic.Checked == true || cbBasicPlusgrosspay.Checked == true)
        {
            rdb_amt.Enabled = true;
            rdb_amt.Checked = true;
            txt_amt.Enabled = true;
            txt_amt.Text = "";
            rdb_percent.Checked = false;
            rdb_percent.Enabled = true;
            txt_percent.Enabled = false;
            txt_percent.Text = "";
        }
        else
        {
            rdb_amt.Enabled = false;
            txt_amt.Enabled = false;
            txt_amt.Text = "";
            rdb_percent.Enabled = false;
            txt_percent.Enabled = false;
            txt_percent.Text = "";
        }
    }

    protected void ImageButton4_Click(object sender, EventArgs e)
    {
        Increment.Visible = false;
    }

    protected void btn_increment_OnClick(object sender, EventArgs e)    //Modified By Jeyaprakash on June 15th
    {
        staff.Visible = true;
        searchbydate.Enabled = true;
        loadcolumnorder();
        loadcolumns(sender, e);
        binddept();
        designation();
        stafftype();
        bindsearchstapp();
        lbl_err.Visible = false;
        searchbydate.Checked = false;
        txt_fdate.Enabled = false;
        txt_tdate.Enabled = false;
        ddlsearchappstf.Visible = true;
        ddlsearchappstf.SelectedIndex = 0;
        txtappstfname.Visible = true;
        txtappstfapplcode.Visible = true;
        lblappstfname.Visible = true;
        txtappstfcode.Visible = false;
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        txtappstfname.Text = "";
        lbladdstatus.Visible = false;
        updaddstatus.Visible = false;
        tbllabel.Visible = false;
        tbllabel1.Visible = false;
        Fpspread15.Visible = false;
        Fpspread5.Visible = false;
        Fpspread6.Visible = false;
        Fpspread9.Visible = false;
        Fpspread4.Visible = false;
        Fpspread16.Visible = false;
        Fpspread14.Visible = false;
        Fpspread10.Visible = false;
        Fpspread7.Visible = false;
        Fpspread4.Visible = false;
        btn_increment.BackColor = Color.MediumBlue;
        btn_appraisal.BackColor = Color.MediumSlateBlue;
        btn_application.BackColor = Color.MediumSlateBlue;
        btn_cletter.BackColor = Color.MediumSlateBlue;
        btn_selection.BackColor = Color.MediumSlateBlue;
        btn_appointment.BackColor = Color.MediumSlateBlue;
        btn_transfer.BackColor = Color.MediumSlateBlue;
        btn_relieve.BackColor = Color.MediumSlateBlue;
        btn_promotion.BackColor = Color.MediumSlateBlue;
        btn_loan.BackColor = Color.MediumSlateBlue;
        btn_selectgo.Visible = false;
        btn_selectnew.Visible = false;
        btn_aptgo.Visible = false;
        btn_new.Visible = false;
        hide();
        btn_intcallgo.Visible = false;
        btn_intcallnew.Visible = false;
        headermain.Text = "Staff Increment";
        lbl_fdate.Text = "Increment Date";
        rel.Text = "";
        btn_appgo.Visible = false;
        btn_aptnew.Visible = false;
        reldate.Visible = false;
        btn_trnasgo.Visible = false;
        btn_transnew.Visible = false;
        btn_relgo.Visible = false;
        btn_relnew.Visible = false;
        btn_aprgo.Visible = false;
        btn_aprnew.Visible = false;
        btn_promgo.Visible = false;
        btn_promonew.Visible = false;
        btn_incrgo.Visible = true;
        btn_incrnew.Visible = true;
        btn_loango.Visible = false;
        btn_loannew.Visible = false;
        loan.Visible = false;
    }

    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetPolicyNo(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();
        string query = "select distinct PolicyNo  from StaffLoanDet";
        name = ws.Getname(query);
        return name;
    }

    protected void btn_loan_OnClick(object sender, EventArgs e)    //Modified By Jeyaprakash on June 15th
    {
        rel.Text = "2";
        if (rel.Text == "2")
            loan.Visible = true;
        else
            loan.Visible = false;
        tbllabel.Visible = false;
        tbllabel1.Visible = false;
        staff.Visible = true;
        Fpspread4.Visible = false;
        searchbydate.Enabled = true;
        btn_selectgo.Visible = false;
        btn_selectnew.Visible = false;
        btn_aptgo.Visible = false;
        btn_new.Visible = false;
        btn_intcallgo.Visible = false;
        btn_intcallnew.Visible = false;
        btn_loan.BackColor = Color.MediumBlue;
        btn_application.BackColor = Color.MediumSlateBlue;
        btn_cletter.BackColor = Color.MediumSlateBlue;
        btn_selection.BackColor = Color.MediumSlateBlue;
        btn_appointment.BackColor = Color.MediumSlateBlue;
        btn_transfer.BackColor = Color.MediumSlateBlue;
        btn_relieve.BackColor = Color.MediumSlateBlue;
        btn_promotion.BackColor = Color.MediumSlateBlue;
        btn_increment.BackColor = Color.MediumSlateBlue;
        btn_appraisal.BackColor = Color.MediumSlateBlue;
        headermain.Text = "Staff Loan";
        loadloancolumnorder();
        cblcolumnorder.Items.Add(new ListItem("Staff Code", "staff_code"));
        cblcolumnorder.Items.Add(new ListItem("Staff Name", "staff_name"));
        cblcolumnorder.Items.Add(new ListItem("Loan Month", "staff_name"));
        loadcolumns(sender, e);
        binddept();
        designation();
        stafftype();
        lbl_err.Visible = false;
        searchbydate.Checked = false;
        txt_fdate.Enabled = false;
        txt_tdate.Enabled = false;
        txt_scode.Text = "";
        txt_sname.Text = "";
        txt_policyno.Text = "";
        ddlsearchappstf.Visible = false;
        txtappstfapplcode.Visible = false;
        txtappstfcode.Visible = false;
        txtappstfname.Visible = false;
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        lblappstfname.Visible = false;
        lbladdstatus.Visible = false;
        updaddstatus.Visible = false;
        Fpspread15.Visible = false;
        Fpspread5.Visible = false;
        Fpspread6.Visible = false;
        Fpspread4.Visible = false;
        Fpspread16.Visible = false;
        Fpspread17.Visible = false;
        Fpspread14.Visible = false;
        Fpspread10.Visible = false;
        Fpspread7.Visible = false;
        hide();
        lbl_fdate.Text = "Staff Loan Date";
        rel.Text = "";
        btn_appgo.Visible = false;
        btn_aptnew.Visible = false;
        reldate.Visible = false;
        btn_trnasgo.Visible = false;
        btn_transnew.Visible = false;
        btn_relgo.Visible = false;
        btn_relnew.Visible = false;
        btn_aprgo.Visible = false;
        btn_aprnew.Visible = false;
        btn_promgo.Visible = false;
        btn_promonew.Visible = false;
        btn_loango.Visible = true;
        btn_loannew.Visible = true;
        btn_incrgo.Visible = false;
        btn_incrnew.Visible = false;
        rdb_bank.Checked = true;
        rdb_college.Checked = false;
    }

    protected void btn_increment1_OnClick(object sender, EventArgs e)
    {
        try
        {
            int count = 0;
            if (checkedOK(Fpspread1, out count))
            {
                if (count == 1)
                {
                    incr_alert.Visible = false;
                    Increment.Visible = true;
                    btn_incrsave.Visible = true;
                    btn_incrupdate.Visible = false;
                    txt_amt.Enabled = true;
                    rdb_amt.Checked = true;
                    rdb_percent.Checked = false;
                    txt_percent.Text = "";
                    txt_amt.Text = "";
                    cb_basic.Checked = false;
                    txt_percent.Enabled = false;
                    txt_amt.Enabled = false;
                    rdb_amt.Enabled = false;
                    txt_incrdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    lbl_alert.Visible = false;
                    string scode = "";
                    string collcode = Convert.ToString(ddl_clg.SelectedItem.Value);

                    ViewState["StaffCodeIncrement"] = null;

                    Fpspread1.SaveChanges();
                    for (int k = 0; k < Fpspread1.Sheets[0].Rows.Count; k++)
                    {
                        byte check = Convert.ToByte(Fpspread1.Sheets[0].Cells[k, 1].Value);
                        if (check == 1)
                        {
                            scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 3].Text);
                            string getquery = d2.GetFunction("select allowances from stafftrans where staff_code='" + scode + "' and latestrec='1'");
                            string allow = d2.GetFunction("select AllowIncDet from stafftrans where staff_code='" + scode + "' and latestrec='1'");
                            string basamnt = d2.GetFunction("select BasicInc from stafftrans where staff_code='" + scode + "' and latestrec='1'");
                            string inctype = d2.GetFunction("select Isincrement from stafftrans where staff_code='" + scode + "' and latestrec='1'");
                            string prevdate = "";
                            ViewState["StaffCodeIncrement"] = scode;
                            string prevdate1 = "select increment_date from stafftrans where staff_code='" + scode + "' and latestrec='1'";

                            if (basamnt.Trim() != "" && basamnt.Trim() != "0" && inctype.Trim() != "" && inctype.Trim() != "0")
                            {
                                if (inctype == "1")
                                {
                                    //cb_basic.Enabled = true;
                                    cb_basic.Checked = true;
                                    rdb_amt.Enabled = true;
                                    rdb_percent.Enabled = false;
                                    rdb_amt.Checked = true;
                                    rdb_percent.Checked = false;
                                    txt_amt.Enabled = true;
                                    txt_percent.Enabled = false;
                                    txt_amt.Text = basamnt;
                                    txt_percent.Text = "";
                                }
                                if (inctype == "2")
                                {
                                    //cb_basic.Enabled = true;
                                    cb_basic.Checked = true;
                                    rdb_amt.Enabled = false;
                                    rdb_percent.Enabled = true;
                                    rdb_amt.Checked = false;
                                    rdb_percent.Checked = true;
                                    txt_amt.Enabled = false;
                                    txt_percent.Enabled = true;
                                    txt_amt.Text = "";
                                    txt_percent.Text = basamnt;
                                }
                            }
                            else
                            {
                                cb_basic.Checked = false;
                                rdb_amt.Enabled = false;
                                rdb_percent.Enabled = false;
                                txt_amt.Enabled = false;
                                txt_percent.Enabled = false;
                                txt_amt.Text = "";
                                txt_percent.Text = "";
                            }
                            ds.Clear();
                            ds = d2.select_method_wo_parameter(prevdate1, "Text");
                            string prevdate2 = ds.Tables[0].Rows[0]["increment_date"].ToString();
                            string[] dt = prevdate2.Split(' ');
                            prevdate = dt[0];
                            string[] ndt = prevdate.Split('/');
                            DateTime newdt = new DateTime();
                            if (ndt.Length > 1)
                                newdt = Convert.ToDateTime(ndt[0] + "/" + ndt[1] + "/" + ndt[2]);
                            else
                                txt_incrdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            Fpspread2.Visible = true;
                            Fpspread2.CommandBar.Visible = false;

                            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                            darkstyle.Font.Name = "Book Antiqua";
                            darkstyle.Font.Size = FontUnit.Medium;
                            darkstyle.Font.Bold = true;
                            darkstyle.HorizontalAlign = HorizontalAlign.Center;
                            darkstyle.VerticalAlign = VerticalAlign.Middle;
                            Fpspread2.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
                            Fpspread2.RowHeader.Visible = false;

                            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                            darkstyle1.Font.Name = "Book Antiqua";
                            darkstyle1.Font.Size = FontUnit.Medium;

                            Fpspread2.Sheets[0].DefaultStyle = darkstyle1;
                            Fpspread2.Sheets[0].RowCount = 0;
                            Fpspread2.Sheets[0].ColumnCount = 7;
                            Fpspread2.Sheets[0].ColumnHeader.RowCount = 1;
                            Fpspread2.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                            Fpspread2.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                            Fpspread2.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
                            Fpspread2.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                            Fpspread2.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Allowances";
                            Fpspread2.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Previous Date";
                            Fpspread2.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Mode";
                            Fpspread2.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Current Value";
                            Fpspread2.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Value";

                            Fpspread2.Sheets[0].ColumnHeader.Columns[1].Width = 75;
                            Fpspread2.Sheets[0].ColumnHeader.Columns[2].Width = 150;
                            Fpspread2.Sheets[0].ColumnHeader.Columns[3].Width = 150;
                            Fpspread2.Sheets[0].ColumnHeader.Columns[4].Width = 125;
                            Fpspread2.Sheets[0].ColumnHeader.Columns[5].Width = 125;
                            Fpspread2.Sheets[0].ColumnHeader.Columns[6].Width = 125;

                            ItemList.Clear();
                            Itemindex.Clear();

                            FarPoint.Web.Spread.DoubleCellType dblcell = new FarPoint.Web.Spread.DoubleCellType();
                            dblcell.MaximumValue = 100000;
                            dblcell.ErrorMessage = "Allow only Numerics & Allow upto only 1 lakh!";

                            FarPoint.Web.Spread.DoubleCellType dblcell1 = new FarPoint.Web.Spread.DoubleCellType();
                            dblcell1.MaximumValue = 100;
                            dblcell1.ErrorMessage = "Allow only Numerics & Allow upto only 100!";

                            FarPoint.Web.Spread.CheckBoxCellType chkall = new FarPoint.Web.Spread.CheckBoxCellType();
                            chkall.AutoPostBack = false;

                            if (getquery.Trim() != "" || allow.Trim() != "")
                            {
                                string[] split1 = getquery.Split('\\');
                                string[] newspl1 = allow.Split('\\');
                                string a = "";
                                string b1 = "";
                                string b2 = "";
                                string b = "";
                                if (split1.Length > 1 || newspl1.Length > 1)
                                {
                                    for (int i = 0; i < split1.Length; i++)
                                    {
                                        a = split1[i];
                                        if (a != "" && a != null)
                                        {
                                            string[] split2 = a.Split(';');
                                            if (split2.GetUpperBound(0) > 0)
                                            {
                                                b = split2[1];
                                                b1 = split2[0];
                                                b2 = split2[2];
                                            }
                                            Fpspread2.Sheets[0].RowCount++;
                                            Fpspread2.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                                            Fpspread2.Sheets[0].Cells[i, 0].Locked = true;
                                            Fpspread2.Sheets[0].Cells[i, 1].CellType = chkall;
                                            Fpspread2.Sheets[0].Cells[i, 1].HorizontalAlign = HorizontalAlign.Center;
                                            Fpspread2.Sheets[0].Cells[i, 2].Text = b1;
                                            Fpspread2.Sheets[0].Cells[i, 2].Tag = a;
                                            Fpspread2.Sheets[0].Cells[i, 2].HorizontalAlign = HorizontalAlign.Center;
                                            Fpspread2.Sheets[0].Cells[i, 2].Locked = true;
                                            Fpspread2.Sheets[0].Cells[i, 3].Text = newdt.ToString("dd/MM/yyyy");
                                            Fpspread2.Sheets[0].Cells[i, 3].HorizontalAlign = HorizontalAlign.Center;
                                            Fpspread2.Sheets[0].Cells[i, 3].Locked = true;
                                            Fpspread2.Sheets[0].Cells[i, 4].HorizontalAlign = HorizontalAlign.Center;
                                            Fpspread2.Sheets[0].Cells[i, 4].Value = b;
                                            Fpspread2.Sheets[0].Cells[i, 4].Locked = true;
                                            Fpspread2.Sheets[0].Cells[i, 5].HorizontalAlign = HorizontalAlign.Center;
                                            Fpspread2.Sheets[0].Cells[i, 5].Value = b2;
                                            Fpspread2.Sheets[0].Cells[i, 5].Locked = true;
                                            if (b == "Amount")
                                                Fpspread2.Sheets[0].Cells[i, 6].CellType = dblcell;
                                            if (b == "Percent")
                                                Fpspread2.Sheets[0].Cells[i, 6].CellType = dblcell1;
                                            Fpspread2.Sheets[0].Cells[i, 6].HorizontalAlign = HorizontalAlign.Center;
                                        }

                                        Fpspread2.Sheets[0].PageSize = Fpspread2.Sheets[0].RowCount;
                                        Fpspread2.SaveChanges();
                                        lbl_alert.Visible = false;
                                    }
                                }
                                if (split1.Length == 1 && newspl1.Length > 1)
                                {
                                    for (int i = 0; i <= newspl1.Length; i++)
                                    {
                                        a = newspl1[i];

                                        if (a != "" && a != null)
                                        {
                                            string[] split2 = a.Split(';');
                                            if (split2.GetUpperBound(0) > 0)
                                            {
                                                b = split2[1];
                                                b1 = split2[0];
                                                b2 = split2[2];
                                            }
                                            Fpspread2.Sheets[0].RowCount++;
                                            Fpspread2.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                                            Fpspread2.Sheets[0].Cells[i, 0].Locked = true;
                                            Fpspread2.Sheets[0].Cells[i, 1].CellType = chkall;
                                            Fpspread2.Sheets[0].Cells[i, 1].HorizontalAlign = HorizontalAlign.Center;
                                            Fpspread2.Sheets[0].Cells[i, 2].Text = b1;
                                            Fpspread2.Sheets[0].Cells[i, 2].Tag = a;
                                            Fpspread2.Sheets[0].Cells[i, 2].HorizontalAlign = HorizontalAlign.Center;
                                            Fpspread2.Sheets[0].Cells[i, 2].Locked = true;
                                            Fpspread2.Sheets[0].Cells[i, 3].Text = newdt.ToString("dd/MM/yyyy");
                                            Fpspread2.Sheets[0].Cells[i, 3].HorizontalAlign = HorizontalAlign.Center;
                                            Fpspread2.Sheets[0].Cells[i, 3].Locked = true;
                                            Fpspread2.Sheets[0].Cells[i, 4].HorizontalAlign = HorizontalAlign.Center;
                                            Fpspread2.Sheets[0].Cells[i, 4].Value = b;
                                            Fpspread2.Sheets[0].Cells[i, 4].Locked = true;
                                            Fpspread2.Sheets[0].Cells[i, 5].HorizontalAlign = HorizontalAlign.Center;
                                            Fpspread2.Sheets[0].Cells[i, 5].Value = b2;
                                            Fpspread2.Sheets[0].Cells[i, 5].Locked = true;
                                            if (b == "Amount")
                                                Fpspread2.Sheets[0].Cells[i, 6].CellType = dblcell;
                                            if (b == "Percent")
                                                Fpspread2.Sheets[0].Cells[i, 6].CellType = dblcell1;
                                            Fpspread2.Sheets[0].Cells[i, 6].HorizontalAlign = HorizontalAlign.Center;
                                        }

                                        Fpspread2.Sheets[0].PageSize = Fpspread2.Sheets[0].RowCount;
                                        Fpspread2.SaveChanges();
                                        lbl_alert.Visible = false;
                                    }
                                }
                            }
                            else
                            {
                                Fpspread2.Sheets[0].RowCount = 3;
                                Fpspread2.Sheets[0].Cells[0, 0].Text = Convert.ToString(1);
                                Fpspread2.Sheets[0].Cells[0, 0].Locked = true;
                                Fpspread2.Sheets[0].Cells[0, 1].CellType = chkall;
                                Fpspread2.Sheets[0].Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[0, 2].Text = "DA";
                                Fpspread2.Sheets[0].Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[0, 2].Locked = true;
                                Fpspread2.Sheets[0].Cells[0, 3].Text = DateTime.Now.ToString("dd/MM/yyyy");
                                Fpspread2.Sheets[0].Cells[0, 3].Locked = true;
                                Fpspread2.Sheets[0].Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[0, 4].Text = "Amount";
                                Fpspread2.Sheets[0].Cells[0, 4].Locked = true;
                                Fpspread2.Sheets[0].Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[0, 5].Value = 0;
                                Fpspread2.Sheets[0].Cells[0, 5].Locked = true;
                                Fpspread2.Sheets[0].Cells[0, 6].Text = "";
                                Fpspread2.Sheets[0].Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;

                                Fpspread2.Sheets[0].Cells[1, 0].Text = Convert.ToString(2);
                                Fpspread2.Sheets[0].Cells[1, 0].Locked = true;
                                Fpspread2.Sheets[0].Cells[1, 1].CellType = chkall;
                                Fpspread2.Sheets[0].Cells[1, 1].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[1, 2].Text = "HRA";
                                Fpspread2.Sheets[0].Cells[1, 2].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[1, 2].Locked = true;
                                Fpspread2.Sheets[0].Cells[1, 3].Text = DateTime.Now.ToString("dd/MM/yyyy");
                                Fpspread2.Sheets[0].Cells[1, 3].Locked = true;
                                Fpspread2.Sheets[0].Cells[1, 4].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[1, 4].Text = "Amount";
                                Fpspread2.Sheets[0].Cells[1, 4].Locked = true;
                                Fpspread2.Sheets[0].Cells[1, 5].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[1, 5].Value = 0;
                                Fpspread2.Sheets[0].Cells[1, 5].Locked = true;
                                Fpspread2.Sheets[0].Cells[1, 6].Text = "";
                                Fpspread2.Sheets[0].Cells[1, 6].HorizontalAlign = HorizontalAlign.Center;

                                Fpspread2.Sheets[0].Cells[2, 0].Text = Convert.ToString(3);
                                Fpspread2.Sheets[0].Cells[2, 0].Locked = true;
                                Fpspread2.Sheets[0].Cells[2, 1].CellType = chkall;
                                Fpspread2.Sheets[0].Cells[2, 1].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[2, 2].Text = "CCA";
                                Fpspread2.Sheets[0].Cells[2, 2].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[2, 2].Locked = true;
                                Fpspread2.Sheets[0].Cells[2, 3].Text = DateTime.Now.ToString("dd/MM/yyyy");
                                Fpspread2.Sheets[0].Cells[2, 3].Locked = true;
                                Fpspread2.Sheets[0].Cells[2, 4].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[2, 4].Text = "Amount";
                                Fpspread2.Sheets[0].Cells[2, 4].Locked = true;
                                Fpspread2.Sheets[0].Cells[2, 5].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread2.Sheets[0].Cells[2, 5].Value = 0;
                                Fpspread2.Sheets[0].Cells[2, 5].Locked = true;
                                Fpspread2.Sheets[0].Cells[2, 6].Text = "";
                                Fpspread2.Sheets[0].Cells[2, 6].HorizontalAlign = HorizontalAlign.Center;

                                Fpspread2.Sheets[0].PageSize = Fpspread2.Sheets[0].RowCount;
                                Fpspread2.SaveChanges();
                                lbl_alert.Visible = false;
                            }
                        }
                    }
                }
                else
                {
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Please Select any one  Records! ";
                }
            }
            else
            {
                lbl_alert.Visible = true;
                lbl_alert.Text = "Please Select any one  Records ";
            }
        }
        catch { }
    }

    protected void btn_incrupdate_OnClick(object sender, EventArgs e)
    {
        try
        {
            Dictionary<string, string> dicval = new Dictionary<string, string>();
            string activerow = "";
            string activecol = "";
            string applno = "";
            activerow = Fpspread17.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread17.ActiveSheetView.ActiveColumn.ToString();
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

            if (activerow.Trim() != "")
            {
                applno = Convert.ToString(Fpspread17.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
            }

            string scode = d2.GetFunction("select staff_code from staffmaster where appl_no='" + applno + "' and college_code='" + collcode + "'");
            string amt = "";
            string per = "";
            string basicinc = "";
            int incr = 0;
            string all = "";
            string val = "";
            string allowinc = "";
            string allow = "";
            double oldval = 0.0;
            double newval = 0.0;
            string allowval = "";
            double oldbas = 0;
            double newbas = 0;
            double percent = 0;
            int stfcount = 0;
            Fpspread2.SaveChanges();

            if (checkedOK(Fpspread2, out stfcount))
            {
                if (incrcheckedOK(Fpspread2))
                {
                    string getbassal = d2.GetFunction("select bsalary from stafftrans where staff_code='" + scode + "' and latestrec='1'");
                    if (rdb_amt.Checked == true)
                    {
                        incr = 1;
                        basicinc = txt_amt.Text;
                        Double.TryParse(getbassal, out oldbas);
                        Double.TryParse(basicinc, out newbas);
                        percent = newbas;
                    }
                    if (rdb_percent.Checked == true)
                    {
                        incr = 2;
                        basicinc = txt_percent.Text;
                        Double.TryParse(getbassal, out oldbas);
                        Double.TryParse(basicinc, out newbas);
                        percent = newbas;
                        newbas = (newbas / 100) * oldbas;
                    }
                    Fpspread2.SaveChanges();
                    for (int i = 0; i < Fpspread2.Sheets[0].Rows.Count; i++)
                    {
                        byte check1 = Convert.ToByte(Fpspread2.Sheets[0].Cells[i, 1].Value);
                        if (check1 == 1)
                        {
                            per = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 4].Text);
                            all = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 2].Text);
                            val = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 6].Text);
                            if (allowinc.Trim() == "")
                            {
                                if (!dicval.ContainsKey(all))
                                {
                                    dicval.Add(all, amt + "-" + val);
                                    allowinc = all + ";" + per + ";" + val;
                                }
                            }
                            else
                            {
                                if (!dicval.ContainsKey(all))
                                {
                                    dicval.Add(all, amt + "-" + val);
                                    allowinc = allowinc + "\\" + all + ";" + per + ";" + val;
                                }
                            }
                        }
                    }
                    string Allowance = d2.GetFunction("select allowances  from stafftrans where staff_code ='" + scode + "' and latestrec ='1'");
                    string[] splitvalue = Allowance.Split('\\');
                    if (splitvalue.Length > 0)
                    {
                        for (int sp = 0; sp < splitvalue.Length; sp++)
                        {
                            string[] splitsecond = splitvalue[sp].Split(';');
                            if (splitsecond.Length > 1)
                            {
                                bool newcheck = false;
                                for (int i = 0; i < Fpspread2.Sheets[0].Rows.Count; i++)
                                {
                                    byte check1 = Convert.ToByte(Fpspread2.Sheets[0].Cells[i, 1].Value);
                                    if (check1 == 1)
                                    {
                                        per = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 4].Text);
                                        all = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 2].Text);
                                        val = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 6].Text);
                                        if (allowinc.Trim() == "")
                                        {
                                            if (!dicval.ContainsKey(all))
                                            {
                                                dicval.Add(all, amt + "-" + val);
                                                allowinc = all + ";" + per + ";" + val;
                                            }
                                        }
                                        else
                                        {
                                            if (!dicval.ContainsKey(all))
                                            {
                                                dicval.Add(all, amt + "-" + val);
                                                allowinc = allowinc + "\\" + all + ";" + per + ";" + val;
                                            }
                                        }
                                        if (Convert.ToString(splitsecond[0]) == all)
                                        {
                                            newcheck = true;
                                            if (allow == "")
                                            {
                                                Double.TryParse(Convert.ToString(Fpspread2.Sheets[0].Cells[i, 5].Text), out oldval);
                                                Double.TryParse(val, out newval);
                                                allowval = Convert.ToString(oldval + newval);
                                                for (int second = 0; second < splitsecond.Length; second++)
                                                {
                                                    if (second != 2)
                                                    {
                                                        if (second == 0)
                                                            allow = allow + Convert.ToString(splitsecond[second]);
                                                        else
                                                            allow = allow + ";" + Convert.ToString(splitsecond[second]);
                                                    }
                                                    else
                                                    {
                                                        allow = allow + ";" + allowval;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                Double.TryParse(Convert.ToString(Fpspread2.Sheets[0].Cells[i, 5].Text), out oldval);
                                                Double.TryParse(val, out newval);
                                                allowval = Convert.ToString(oldval + newval);
                                                for (int second = 0; second < splitsecond.Length; second++)
                                                {
                                                    if (second != 2)
                                                    {
                                                        if (second == 0)
                                                            allow = allow + "\\" + Convert.ToString(splitsecond[second]);
                                                        else
                                                            allow = allow + ";" + Convert.ToString(splitsecond[second]);
                                                    }
                                                    else
                                                    {
                                                        allow = allow + ";" + allowval;
                                                    }
                                                }
                                            }
                                            break;
                                        }
                                    }
                                }
                                if (newcheck == false)
                                {
                                    if (allow == "")
                                    {
                                        for (int second = 0; second < splitsecond.Length; second++)
                                        {
                                            if (second == 0)
                                                allow = allow + Convert.ToString(splitsecond[second]);
                                            else
                                                allow = allow + ";" + Convert.ToString(splitsecond[second]);
                                        }
                                    }
                                    else
                                    {
                                        for (int second = 0; second < splitsecond.Length; second++)
                                        {
                                            if (second == 0)
                                                allow = allow + "\\" + Convert.ToString(splitsecond[second]);
                                            else
                                                allow = allow + ";" + Convert.ToString(splitsecond[second]);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    string incrdate = txt_incrdate.Text;
                    string[] split = incrdate.Split('/');
                    DateTime incrementdate = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);

                    string query = "if exists(select * from stafftrans where staff_code='" + scode + "' and latestrec='1') update stafftrans set parea='3',AllowIncDet='" + allowinc + "',allowances='" + allow + "',bsalary='" + Convert.ToString(oldbas + newbas) + "',BasicInc='" + Convert.ToString(percent) + "',Isincrement='" + incr + "',increment_date='" + incrementdate.ToString("MM/dd/yyyy") + "' where staff_code='" + scode + "' and latestrec='1'";

                    int count = d2.update_method_wo_parameter(query, "Text");
                    if (count != 0)
                    {
                        alertpopwindow.Visible = true;
                        incr_alert.Visible = false;
                        lblalerterr.Text = "Updated Succesfully!";
                        Increment.Visible = false;
                        btn_incrgo_OnClick(sender, e);
                    }
                }
                else
                {
                    incr_alert.Visible = true;
                    incr_alert.Text = "Please Enter the Amount for Selected Allowance!";
                }
            }
            else
            {
                string incrdate = txt_incrdate.Text;
                string[] split = incrdate.Split('/');
                DateTime incrementdate = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
                string newq = "";

                newq = "if exists(select * from stafftrans where staff_code='" + scode + "' and latestrec='1') update stafftrans set increment_date='" + incrementdate.ToString("MM/dd/yyyy") + "' where staff_code='" + scode + "' and latestrec='1'";

                int count = d2.update_method_wo_parameter(newq, "Text");
                if (count != 0)
                {
                    alertpopwindow.Visible = true;
                    incr_alert.Visible = false;
                    lblalerterr.Text = "Updated Succesfully!";
                    Increment.Visible = false;
                    btn_incrgo_OnClick(sender, e);
                }
            }
        }
        catch { }
    }

    protected void btn_incrsave_OnClick(object sender, EventArgs e)
    {
        try
        {
            int mycount = 0;
            Dictionary<string, string> dicval = new Dictionary<string, string>();
            //if (checkedOK(Fpspread2, out mycount))
            //{
            //if (incrcheckedOK(Fpspread2))
            //{
            //string scode = "";
            string all = "";
            string val = "";
            string allowinc = "";
            string amt = "";
            string per = "";
            string basicinc = "";
            int incr = 0;
            string allow = "";
            double oldval = 0.0;
            double newval = 0.0;
            string allowval = "";
            double oldbas = 0;
            double newbas = 0;
            double percent = 0;
            string scode = Convert.ToString(ViewState["StaffCodeIncrement"]);
            double GetGradePay = 0;
            DataSet BsalaryGradepayDs = d2.select_method_wo_parameter("select bsalary,grade_pay from stafftrans where staff_code='" + scode + "' and latestrec='1'", "Text");
            if (BsalaryGradepayDs.Tables != null)
            {
                if (BsalaryGradepayDs.Tables[0].Rows.Count > 0)
                {
                    double.TryParse(Convert.ToString(BsalaryGradepayDs.Tables[0].Rows[0]["bsalary"]), out oldbas);
                    double.TryParse(Convert.ToString(BsalaryGradepayDs.Tables[0].Rows[0]["grade_pay"]), out GetGradePay);
                }
            }
            if (cb_basic.Checked)
            {
                if (rdb_amt.Checked == true)
                {
                    incr = 1;
                    basicinc = txt_amt.Text;
                    Double.TryParse(basicinc, out newbas);
                    percent = newbas;
                }
                if (rdb_percent.Checked == true)
                {
                    incr = 2;
                    basicinc = txt_percent.Text;
                    Double.TryParse(basicinc, out newbas);
                    percent = newbas;
                    newbas = (newbas / 100) * oldbas;
                }
            }
            else if (cbBasicPlusgrosspay.Checked)//barath 13.11.17
            {
                double BasicPlusGradeTotal = oldbas + GetGradePay;
                if (rdb_amt.Checked == true)
                {
                    incr = 1;
                    Double.TryParse(txt_amt.Text, out newbas);
                    percent = newbas;
                }
                if (rdb_percent.Checked == true)
                {
                    incr = 2;
                    Double.TryParse(txt_percent.Text, out newbas);
                    percent = newbas;
                    double percentAmt = Math.Ceiling(BasicPlusGradeTotal * newbas / 100);
                    newbas = (10 - percentAmt % 10) + percentAmt;
                }
            }
            string AllowanceQuery = string.Empty;
            if (incrcheckedOK(Fpspread2))
            {
                #region Allowances Increment
                Fpspread1.SaveChanges();
                for (int k = 0; k < Fpspread1.Sheets[0].Rows.Count; k++)
                {
                    byte check = Convert.ToByte(Fpspread1.Sheets[0].Cells[k, 1].Value);
                    if (check == 1)
                    {
                        scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 3].Text);
                        Fpspread2.SaveChanges();
                        for (int i = 0; i < Fpspread2.Sheets[0].Rows.Count; i++)
                        {
                            byte check1 = Convert.ToByte(Fpspread2.Sheets[0].Cells[i, 1].Value);
                            if (check1 == 1)
                            {
                                per = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 4].Text);
                                all = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 2].Text);
                                val = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 6].Text);
                                if (allowinc.Trim() == "")
                                {
                                    if (!dicval.ContainsKey(all))
                                    {
                                        dicval.Add(all, amt + "-" + val);
                                        allowinc = all + ";" + per + ";" + val;
                                    }
                                }
                                else
                                {
                                    if (!dicval.ContainsKey(all))
                                    {
                                        dicval.Add(all, amt + "-" + val);
                                        allowinc = allowinc + "\\" + all + ";" + per + ";" + val;
                                    }
                                }
                            }
                        }
                        string Allowance = d2.GetFunction("select allowances  from stafftrans where staff_code ='" + scode + "' and latestrec ='1'");
                        string[] splitvalue = Allowance.Split('\\');
                        if (splitvalue.Length > 0)
                        {
                            for (int sp = 0; sp < splitvalue.Length; sp++)
                            {
                                string[] splitsecond = splitvalue[sp].Split(';');
                                if (splitsecond.Length > 1)
                                {
                                    bool newcheck = false;
                                    Fpspread2.SaveChanges();
                                    for (int i = 0; i < Fpspread2.Sheets[0].Rows.Count; i++)
                                    {
                                        byte check1 = Convert.ToByte(Fpspread2.Sheets[0].Cells[i, 1].Value);
                                        if (check1 == 1)
                                        {
                                            per = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 4].Text);
                                            all = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 2].Text);
                                            val = Convert.ToString(Fpspread2.Sheets[0].Cells[i, 6].Text);
                                            if (allowinc.Trim() == "")
                                            {
                                                if (!dicval.ContainsKey(all))
                                                {
                                                    dicval.Add(all, amt + "-" + val);
                                                    allowinc = all + ";" + per + ";" + val;
                                                }
                                            }
                                            else
                                            {
                                                if (!dicval.ContainsKey(all))
                                                {
                                                    dicval.Add(all, amt + "-" + val);
                                                    allowinc = allowinc + "\\" + all + ";" + per + ";" + val;
                                                }
                                            }
                                            if (Convert.ToString(splitsecond[0]) == all)
                                            {
                                                newcheck = true;
                                                if (allow == "")
                                                {
                                                    Double.TryParse(Convert.ToString(Fpspread2.Sheets[0].Cells[i, 5].Text), out oldval);
                                                    Double.TryParse(val, out newval);
                                                    allowval = Convert.ToString(oldval + newval);
                                                    for (int second = 0; second < splitsecond.Length; second++)
                                                    {
                                                        if (second != 2)
                                                        {
                                                            if (second == 0)
                                                                allow = allow + Convert.ToString(splitsecond[second]);
                                                            else
                                                                allow = allow + ";" + Convert.ToString(splitsecond[second]);
                                                        }
                                                        else
                                                        {
                                                            allow = allow + ";" + allowval;
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    Double.TryParse(Convert.ToString(Fpspread2.Sheets[0].Cells[i, 5].Text), out oldval);
                                                    Double.TryParse(val, out newval);
                                                    allowval = Convert.ToString(oldval + newval);
                                                    for (int second = 0; second < splitsecond.Length; second++)
                                                    {
                                                        if (second != 2)
                                                        {
                                                            if (second == 0)
                                                                allow = allow + "\\" + Convert.ToString(splitsecond[second]);
                                                            else
                                                                allow = allow + ";" + Convert.ToString(splitsecond[second]);
                                                        }
                                                        else
                                                        {
                                                            allow = allow + ";" + allowval;
                                                        }
                                                    }
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    if (newcheck == false)
                                    {
                                        if (allow == "")
                                        {
                                            for (int second = 0; second < splitsecond.Length; second++)
                                            {
                                                if (second == 0)
                                                    allow = allow + Convert.ToString(splitsecond[second]);
                                                else
                                                    allow = allow + ";" + Convert.ToString(splitsecond[second]);
                                            }
                                        }
                                        else
                                        {
                                            for (int second = 0; second < splitsecond.Length; second++)
                                            {
                                                if (second == 0)
                                                    allow = allow + "\\" + Convert.ToString(splitsecond[second]);
                                                else
                                                    allow = allow + ";" + Convert.ToString(splitsecond[second]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                AllowanceQuery = ",AllowIncDet='" + allowinc + "',allowances='" + allow + "',";
                #endregion
            }
            string incrdate = txt_incrdate.Text;
            string[] split = incrdate.Split('/');
            DateTime incrementdate = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            //string query = "if exists(select * from stafftrans where staff_code='" + scode + "' and latestrec='1') update stafftrans set parea='3',AllowIncDet='" + allowinc + "',allowances='" + allow + "',bsalary='" + Convert.ToString(oldbas + newbas) + "',BasicInc='" + Convert.ToString(percent) + "',Isincrement='" + incr + "',increment_date='" + incrementdate.ToString("MM/dd/yyyy") + "' where staff_code='" + scode + "' and latestrec='1'";
            string query = "if exists(select * from stafftrans where staff_code='" + scode + "' and latestrec='1') update stafftrans set parea='3'" + AllowanceQuery + ",bsalary='" + Convert.ToString(oldbas + newbas) + "',BasicInc='" + Convert.ToString(percent) + "',Isincrement='" + incr + "',increment_date='" + incrementdate.ToString("MM/dd/yyyy") + "' where staff_code='" + scode + "' and latestrec='1'";
            int count = d2.update_method_wo_parameter(query, "Text");
            if (count != 0)
            {
                btn_popgo_OnClick(sender, e);
                dicval.Clear();
                Increment.Visible = false;
                alertpopwindow.Visible = true;
                incr_alert.Visible = false;
                lblalerterr.Text = "Incremented Successfully";
            }
            //else
            //{
            //    incr_alert.Visible = true;
            //    incr_alert.Text = "Please Enter the Amount for Selected Allowance!";
            //}
            //}
            //else
            //{
            //    incr_alert.Visible = true;
            //    incr_alert.Text = "Please Select the Records which you want to save";
            //}
        }
        catch { }
    }

    /// ///////////////////Appraisal//////////////////////
    protected void question()
    {
        string college = "";
        if (btn_appr_save.Visible == true)
            college = ddl_clg.SelectedValue;
        if (btn_apprupdate.Visible == true)
            college = ddlcollege.SelectedValue;
        string question = "select distinct TextVal,TextCode from TextValTable where TextCriteria='haque' and college_code='" + college + "'";
        ds = da.select_method_wo_parameter(question, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_question.DataSource = ds;
            ddl_question.DataTextField = "TextVal";
            ddl_question.DataValueField = "TextCode";
            ddl_question.DataBind();
        }
    }

    protected void answer()
    {
        string college = "";
        if (btn_appr_save.Visible == true)
            college = ddl_clg.SelectedValue;
        if (btn_apprupdate.Visible == true)
            college = ddlcollege.SelectedValue;
        string answer = "select distinct TextVal,TextCode from TextValTable where TextCriteria='haans' and college_code='" + college + "'";
        ds = da.select_method_wo_parameter(answer, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_ans.DataSource = ds;
            ddl_ans.DataTextField = "TextVal";
            ddl_ans.DataValueField = "TextCode";
            ddl_ans.DataBind();
        }
    }

    protected void Fpspread3_OnButtonCommand(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {

    }

    protected void btn_appraisal_OnClick(object sender, EventArgs e)    //Modified By Jeyaprakash on June 15th
    {
        staff.Visible = true;
        tbllabel.Visible = false;
        tbllabel1.Visible = false;
        Fpspread4.Visible = false;
        loadapprcolumnorder();
        loadcolumns(sender, e);
        binddept();
        designation();
        stafftype();
        bindsearchstapp();
        lbl_err.Visible = false;
        searchbydate.Checked = false;
        txt_fdate.Enabled = false;
        txt_tdate.Enabled = false;
        txtappstfname.Text = "";
        ddlsearchappstf.Visible = true;
        ddlsearchappstf.SelectedIndex = 0;
        txtappstfname.Visible = true;
        txtappstfapplcode.Visible = true;
        lblappstfname.Visible = true;
        txtappstfcode.Visible = false;
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
        lbladdstatus.Visible = false;
        updaddstatus.Visible = false;
        searchbydate.Enabled = true;
        Fpspread15.Visible = false;
        Fpspread5.Visible = false;
        Fpspread9.Visible = false;
        Fpspread4.Visible = false;
        Fpspread16.Visible = false;
        Fpspread17.Visible = false;
        Fpspread14.Visible = false;
        Fpspread10.Visible = false;
        Fpspread7.Visible = false;
        btn_aptgo.Visible = false;
        btn_aptnew.Visible = false;
        btn_selectgo.Visible = false;
        btn_selectnew.Visible = false;
        btn_intcallgo.Visible = false;
        btn_intcallnew.Visible = false;
        btn_appgo.Visible = false;
        btn_new.Visible = false;
        btn_appraisal.BackColor = Color.MediumBlue;
        btn_application.BackColor = Color.MediumSlateBlue;
        btn_cletter.BackColor = Color.MediumSlateBlue;
        btn_selection.BackColor = Color.MediumSlateBlue;
        btn_appointment.BackColor = Color.MediumSlateBlue;
        btn_transfer.BackColor = Color.MediumSlateBlue;
        btn_relieve.BackColor = Color.MediumSlateBlue;
        btn_promotion.BackColor = Color.MediumSlateBlue;
        btn_increment.BackColor = Color.MediumSlateBlue;
        btn_loan.BackColor = Color.MediumSlateBlue;
        headermain.Text = "Staff Appraisal";
        lbl_fdate.Text = "From Date";
        hide();
        rel.Text = "";
        reldate.Visible = false;
        btn_trnasgo.Visible = false;
        btn_transnew.Visible = false;
        btn_relgo.Visible = false;
        btn_relnew.Visible = false;
        btn_aprgo.Visible = true;
        btn_aprnew.Visible = true;
        btn_promgo.Visible = false;
        btn_promonew.Visible = false;
        btn_incrgo.Visible = false;
        btn_incrnew.Visible = false;
        btn_loango.Visible = false;
        btn_loannew.Visible = false;
        loan.Visible = false;
    }

    protected void btn_appraisal1_OnClick(object sender, EventArgs e)
    {
        try
        {
            staff.Visible = true;
            int count = 0;
            if (checkedOK(Fpspread1, out count))
            {
                if (count == 1)
                {
                    Appraisal.Visible = true;
                    question();
                    answer();
                    lbl_alert.Visible = false;
                    link_question.Visible = false;
                    link_answer.Visible = false;
                    btn_qplus.Visible = false;
                    ddl_question.Visible = false;
                    btn_qminus.Visible = false;
                    btn_ansplus.Visible = false;
                    ddl_ans.Visible = false;
                    btn_ansminus.Visible = false;
                    string colcode = Convert.ToString(ddl_clg.SelectedItem.Value);
                    txt_apprjdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    ddl_stat.SelectedIndex = 0;
                    string scode = "";
                    Fpspread1.SaveChanges();
                    for (int k = 0; k < Fpspread1.Sheets[0].Rows.Count; k++)
                    {
                        byte check = Convert.ToByte(Fpspread1.Sheets[0].Cells[k, 1].Value);
                        if (check == 1)
                            scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(k), 3].Text);
                        txt_apprscode.Text = scode;
                        string getquery = "select staff_name,s.staff_code,d.desig_name,h.dept_name,a.staff_type,s.join_date from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where  s.appl_no =a.appl_no and s.staff_code =t.staff_code and a.dept_code =h.dept_code and a.desig_code =d.desig_code and s.college_code=h.college_code and s.college_code=d.collegeCode and latestrec=1 and s.staff_code='" + scode + "' and s.college_code='" + colcode + "'";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(getquery, "Text");
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            txt_apprdept.Text = ds.Tables[0].Rows[i]["dept_name"].ToString();
                            txt_apprsname.Text = ds.Tables[0].Rows[i]["staff_name"].ToString();
                            txt_apprdesig.Text = ds.Tables[0].Rows[i]["desig_name"].ToString();
                            txt_apprstype.Text = ds.Tables[0].Rows[i]["staff_type"].ToString();
                        }

                        Fpspread3.Visible = true;
                        Fpspread3.CommandBar.Visible = false;
                        Fpspread3.Sheets[0].AutoPostBack = false;

                        FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                        darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
                        darkstyle.Font.Name = "Book Antiqua";
                        darkstyle.Font.Size = FontUnit.Medium;
                        darkstyle.Font.Bold = true;
                        darkstyle.HorizontalAlign = HorizontalAlign.Center;
                        darkstyle.VerticalAlign = VerticalAlign.Middle;
                        Fpspread3.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
                        Fpspread3.RowHeader.Visible = false;

                        FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
                        darkstyle1.Font.Name = "Book Antiqua";
                        darkstyle1.Font.Size = FontUnit.Medium;

                        FarPoint.Web.Spread.TextCellType txtcell = new FarPoint.Web.Spread.TextCellType();
                        txtcell.MaxLength = 25;

                        Fpspread3.Sheets[0].DefaultStyle = darkstyle1;
                        Fpspread3.Sheets[0].RowCount = 0;
                        Fpspread3.Sheets[0].ColumnCount = 4;
                        Fpspread3.Sheets[0].ColumnHeader.RowCount = 1;
                        Fpspread3.Sheets[0].ColumnHeader.Columns[0].Width = 50;
                        Fpspread3.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Questions";
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Answers";
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Remarks";

                        Fpspread3.Sheets[0].ColumnHeader.Columns[1].Width = 250;
                        Fpspread3.Sheets[0].ColumnHeader.Columns[2].Width = 250;
                        Fpspread3.Sheets[0].ColumnHeader.Columns[3].Width = 175;

                        ItemList.Clear();
                        Itemindex.Clear();

                        string query1 = "select TextVal,TextCode from  TextValTable where TextCriteria='haans' and college_code='" + colcode + "'";
                        dv = d2.select_method_wo_parameter(query1, "Text");

                        string[] items1 = new string[dv.Tables[0].Rows.Count + 1];
                        for (int j = 0; j < dv.Tables[0].Rows.Count; j++)
                        {
                            items1[j + 1] = Convert.ToString(dv.Tables[0].Rows[j]["TextVal"]);
                        }
                        FarPoint.Web.Spread.ComboBoxCellType combo1 = new FarPoint.Web.Spread.ComboBoxCellType(items1);
                        string query = "select TextVal,TextCode from  TextValTable where TextCriteria='haque' and college_code='" + colcode + "'";
                        ds = d2.select_method_wo_parameter(query, "Text");
                        string[] items = new string[ds.Tables[0].Rows.Count + 1];
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            items[i + 1] = Convert.ToString(ds.Tables[0].Rows[i]["TextVal"]);
                        }
                        FarPoint.Web.Spread.ComboBoxCellType combo = new FarPoint.Web.Spread.ComboBoxCellType(items);
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                Fpspread3.Sheets[0].RowCount++;
                                Fpspread3.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                                Fpspread3.Sheets[0].Cells[i, 1].CellType = combo;
                                Fpspread3.Sheets[0].Cells[i, 1].Tag = Convert.ToString(ds.Tables[0].Rows[i]["TextCode"]);
                                Fpspread3.Sheets[0].Cells[i, 2].CellType = combo1;
                                if (i < dv.Tables[0].Rows.Count)
                                    Fpspread3.Sheets[0].Cells[i, 2].Tag = Convert.ToString(dv.Tables[0].Rows[i]["TextCode"]);
                                Fpspread3.Sheets[0].Cells[i, 3].CellType = txtcell;
                            }
                        }
                    }
                    Fpspread3.Sheets[0].PageSize = Fpspread3.Sheets[0].RowCount;
                    Fpspread3.Width = 724;
                    Fpspread3.Height = 175;
                    lbl_alert.Visible = false;
                }
                else
                {
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Please Select any one  Records ";
                }
            }
            else
            {
                lbl_alert.Visible = true;
                lbl_alert.Text = "Please Select any one  Records ";
            }
        }
        catch { }
    }

    protected void link_question_OnClick(object sender, EventArgs e)
    {
        question();
        btn_qplus.Visible = true;
        ddl_question.Visible = true;
        btn_qminus.Visible = true;
        btn_hide.Visible = true;
    }

    protected void link_answer_OnClick(object sender, EventArgs e)
    {
        answer();
        btn_ansplus.Visible = true;
        ddl_ans.Visible = true;
        btn_ansminus.Visible = true;
        btn_hide.Visible = true;
    }

    protected void btn_qplus_OnClick(object sender, EventArgs e)
    {
        txt_add.Text = "";
        Plus.Visible = true;
        lbl_header.Text = "Add Question";
    }

    protected void btn_qminus_OnClick(object sender, EventArgs e)
    {
        string quest = Convert.ToString(ddl_question.SelectedItem);
        string college = ddlcollege.SelectedValue;
        string selchk = "select Questioncode from StaffAppraisalDetails";
        ds.Clear();
        ds = d2.select_method_wo_parameter(selchk, "Text");
        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            alertpopwindow.Visible = true;
            lblalerterr.Visible = true;
            lblalerterr.Text = "You can't have Permission to Delete!";
        }
        else
        {
            string query = "delete from TextValTable where TextVal='" + quest + "' and college_code='" + college + "'";
            int count = d2.update_method_wo_parameter(query, "Text");
            question();
            btn_appraisal1_OnClick(sender, e);
        }
    }

    protected void btn_ansminus_OnClick(object sender, EventArgs e)
    {
        string ans = Convert.ToString(ddl_ans.SelectedItem);
        string college = ddlcollege.SelectedValue;
        string selchk = "select Anscode from StaffAppraisalDetails";
        ds.Clear();
        ds = d2.select_method_wo_parameter(selchk, "Text");
        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            alertpopwindow.Visible = true;
            lblalerterr.Visible = true;
            lblalerterr.Text = "You can't have Permission to Delete!";
        }
        else
        {
            string query = "delete from TextValTable where TextVal='" + ans + "' and college_code='" + college + "'";
            int count = d2.update_method_wo_parameter(query, "Text");
            answer();
        }
    }

    protected void btn_ansplus_OnClick(object sender, EventArgs e)
    {
        txt_answer.Text = "";
        AnsPlus.Visible = true;
        lbl_ansheader.Text = "Add Answer";
    }

    protected void btn_addans_OnClick(object sender, EventArgs e)
    {
        btn_appraisal_OnClick(sender, e);
        string college = "";
        if (btn_appr_save.Visible == true)
            college = ddl_clg.SelectedValue;
        if (btn_apprupdate.Visible == true)
            college = ddlcollege.SelectedValue;
        string ans = txt_answer.Text;
        string criteria = "haans";
        ans = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(ans);
        string testval = "select * from TextValTable where TextVal='" + ans + "' and TextCriteria='" + criteria + "' and college_code='" + college + "'";
        ds.Clear();
        ds = d2.select_method_wo_parameter(testval, "Text");
        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            alertpopwindow.Visible = true;
            lblalerterr.Visible = true;
            lblalerterr.Text = "Already Exist!";
        }
        else
        {
            AnsPlus.Visible = false;
            string query = "insert into TextValTable(TextVal,TextCriteria,college_code ) values ('" + ans + "','" + criteria + "','" + college + "')";
            int count = d2.update_method_wo_parameter(query, "Text");
            alertpopwindow.Visible = true;
            lblalerterr.Visible = true;
            lblalerterr.Text = "Added Successfully";
        }
        answer();
    }

    protected void btn_exit_OnClick(object sender, EventArgs e)
    {
        btn_appraisal_OnClick(sender, e);
        Plus.Visible = false;
        question();
        Loan();
        if (lbl_header.Text == "Staff Bank Name")
            bindfldbank();
        if (lbl_header.Text == "Staff Branch Name")
            bindfldbranch();
        if (lbl_header.Text == "Company Name")
            Company();
        if (lbl_header.Text == "Policy Name")
            Policy();
    }

    protected void btn_ansexit_OnClick(object sender, EventArgs e)
    {
        btn_appraisal_OnClick(sender, e);
        AnsPlus.Visible = false;
        answer();
    }

    protected void ImageButton5_Click(object sender, EventArgs e)
    {
        Appraisal.Visible = false;
    }

    protected void ddlcollege_SelectedIndexChanged(object sender, EventArgs e)
    {
        collcode = ddlcollege.SelectedItem.Value.ToString();
        binddept();
        designation();
        stafftype();
        lbl_err.Visible = false;
        Fpspread7.Visible = false;
        tbllabel.Visible = false;
        tbllabel1.Visible = false;
        Fpspread14.Visible = false;
        Fpspread15.Visible = false;
        Fpspread10.Visible = false;
        Fpspread4.Visible = false;
        Fpspread5.Visible = false;
        Fpspread9.Visible = false;
        Fpspread16.Visible = false;
        Fpspread17.Visible = false;
        Fpspread9.Visible = false;
        rptprint.Visible = false;
        rptprint1.Visible = false;
        rptprint10.Visible = false;
        rptprint5.Visible = false;
        rptprint6.Visible = false;
        rptprint9.Visible = false;
        rptprint14.Visible = false;
        rptprint15.Visible = false;
        rptprint16.Visible = false;
        rptprint17.Visible = false;
    }

    protected void ddl_clg_SelectedIndexChanged(object sender, EventArgs e)
    {
        bindpopdept();
        popdesignation();
        popstafftype();
        btn_relieve1.Visible = false;
        btn_appraisal1.Visible = false;
        btn_promotion1.Visible = false;
        btn_transfer1.Visible = false;
        btn_increment1.Visible = false;
        lbl_alert.Visible = false;
        Fpspread1.Visible = false;
    }

    protected void ddlscollege_Change(object sender, EventArgs e)
    {
        Fpspread19.Visible = false;
        lbl_salert.Visible = false;
        bindperformance();
        ddl_perform.SelectedIndex = 0;
        ddl_selectstatus.SelectedIndex = 0;
        txt_remarkrs.Text = "";
        rdb_int.Checked = true;
        rdb_external.Checked = false;
        cb_sinterviewdet.Visible = false;
        staffinterview.Visible = false;
        chkseldate.Checked = false;
        txt_stfdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_stdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_stfdate.Enabled = false;
        txt_stdate.Enabled = false;
    }

    protected void btnerrclose_Click(object sender, EventArgs e)
    {
        alertpopwindow.Visible = false;
        txt_add.Text = "";
        txt_addstream.Text = "";
        Plus.Visible = false;
    }

    protected void btn_addq_save_OnClick(object sender, EventArgs e)
    {
        link_question.Visible = true;
        link_answer.Visible = true;
    }

    protected void btn_hide_save_OnClick(object sender, EventArgs e)
    {
        link_question.Visible = false;
        link_answer.Visible = false;
        btn_hide.Visible = false;
        btn_qplus.Visible = false;
        ddl_question.Visible = false;
        btn_qminus.Visible = false;
        btn_ansplus.Visible = false;
        ddl_ans.Visible = false;
        btn_ansminus.Visible = false;
    }

    protected void btnaddnewrow_click(object sender, EventArgs e)
    {
        try
        {
            int slno = Fpspread3.Rows.Count;
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
            string query1 = "select TextVal,TextCode from  TextValTable where TextCriteria='haans' and college_code='" + collcode + "'";
            dv = d2.select_method_wo_parameter(query1, "Text");

            string[] items1 = new string[dv.Tables[0].Rows.Count + 1];
            for (int j = 0; j < dv.Tables[0].Rows.Count; j++)
            {
                items1[j + 1] = Convert.ToString(dv.Tables[0].Rows[j]["TextVal"]);
            }
            FarPoint.Web.Spread.ComboBoxCellType combo1 = new FarPoint.Web.Spread.ComboBoxCellType(items1);
            combo1.UseValue = true;
            combo1.AutoPostBack = true;

            string query = "select TextVal,TextCode from  TextValTable where TextCriteria='haque' and college_code='" + collcode + "'";
            dp = d2.select_method_wo_parameter(query, "Text");

            string[] items2 = new string[dp.Tables[0].Rows.Count + 1];
            for (int k = 0; k < dp.Tables[0].Rows.Count; k++)
            {
                items2[k + 1] = Convert.ToString(dp.Tables[0].Rows[k]["TextVal"]);
            }
            FarPoint.Web.Spread.ComboBoxCellType combo2 = new FarPoint.Web.Spread.ComboBoxCellType(items2);
            combo2.UseValue = true;
            combo2.AutoPostBack = true;

            Fpspread3.Sheets[0].RowCount++;
            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(slno + 1);
            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 1].CellType = combo2;
            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 2].CellType = combo1;
            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 3].Text = "";

            Fpspread3.Sheets[0].PageSize = Fpspread3.Sheets[0].RowCount;
        }
        catch { }
    }

    protected void btn_apprupdate_OnClick(object sender, EventArgs e)
    {
        try
        {
            string scode = txt_apprscode.Text;
            string apprdate = txt_apprjdate.Text;
            string[] split = apprdate.Split('/');
            DateTime aprdate = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            string aprtype = ddl_stat.SelectedValue;
            string qval = "";
            string aval = "";
            string remarks = "";
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
            Fpspread3.SaveChanges();

            if (Fpspread3.Sheets[0].RowCount > 0)
            {
                if (aprtype.Trim() != "Select")
                {
                    for (int ro = 0; ro < Fpspread3.Sheets[0].RowCount; ro++)
                    {
                        if (Fpspread3.Sheets[0].Cells[ro, 1].Text != "" && Fpspread3.Sheets[0].Cells[ro, 2].Text != "")
                        {
                            qval = Convert.ToString(Fpspread3.Sheets[0].Cells[ro, 1].Text);
                            qval = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(qval);
                            string quest = d2.GetFunction("select TextCode from TextValTable where TextVal='" + qval + "' and TextCriteria='haque' and college_code='" + collcode + "'");
                            aval = Convert.ToString(Fpspread3.Sheets[0].Cells[ro, 2].Text);
                            aval = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(aval);
                            string ans = d2.GetFunction("select TextCode from TextValTable where TextVal='" + aval + "' and TextCriteria='haans' and college_code='" + collcode + "'");
                            remarks = Convert.ToString(Fpspread3.Sheets[0].Cells[ro, 3].Text);

                            string insnew = "update StaffAppraisalMaster set AppraisalType='" + aprtype + "' where staff_code='" + scode + "'";
                            int upcount = d2.update_method_wo_parameter(insnew, "Text");

                            string pk = d2.GetFunction("select AppraisalPk from StaffAppraisalMaster where AppraisalType='" + aprtype + "' and AppraisalDate ='" + aprdate.ToString("MM/dd/yyyy") + "' and staff_code='" + scode + "'");

                            string query1 = " if exists(select * from StaffAppraisalDetails where Questioncode='" + quest + "' and Anscode='" + ans + "' and AppraisalFk='" + pk + "') update StaffAppraisalDetails set Remarks='" + remarks + "' where Questioncode='" + quest + "' and Anscode='" + ans + "' and AppraisalFk='" + pk + "' else insert into StaffAppraisalDetails(Questioncode,Anscode,Remarks,AppraisalFk) values ('" + quest + "','" + ans + "','" + remarks + "','" + pk + "')";
                            int count1 = d2.update_method_wo_parameter(query1, "Text");
                        }
                    }
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Updated Successfully";
                    Appraisal.Visible = false;
                    btn_aprgo_OnClick(sender, e);
                }
                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Please Select Status!";
                }
            }
        }
        catch { }
    }

    protected void btn_appr_save_OnClick(object sender, EventArgs e)
    {
        try
        {
            string scode = txt_apprscode.Text;
            string apprdate = txt_apprjdate.Text;
            string[] split = apprdate.Split('/');
            DateTime aprdate = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            string aprtype = ddl_stat.SelectedValue;
            string qval = "";
            string aval = "";
            string remarks = "";
            Fpspread3.SaveChanges();

            if (Fpspread3.Sheets[0].RowCount > 0)
            {
                if (aprtype.Trim() != "Select")
                {
                    string query = "if exists(select * from StaffAppraisalMaster where staff_code='" + scode + "' and AppraisalDate='" + aprdate.ToString("MM/dd/yyyy") + "') update StaffAppraisalMaster set AppraisalType='" + aprtype + "' where staff_code='" + scode + "' and AppraisalDate='" + aprdate.ToString("MM/dd/yyyy") + "' else insert into StaffAppraisalMaster(staff_code,AppraisalDate,AppraisalType) values ('" + scode + "','" + aprdate.ToString("MM/dd/yyyy") + "','" + aprtype + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                    for (int ro = 0; ro < Fpspread3.Sheets[0].RowCount; ro++)
                    {
                        if (Fpspread3.Sheets[0].Cells[ro, 1].Text != "" && Fpspread3.Sheets[0].Cells[ro, 2].Text != "")
                        {
                            qval = Convert.ToString(Fpspread3.Sheets[0].Cells[ro, 1].Tag);
                            aval = Convert.ToString(Fpspread3.Sheets[0].Cells[ro, 2].Tag);
                            remarks = Convert.ToString(Fpspread3.Sheets[0].Cells[ro, 3].Text);

                            string pk = d2.GetFunction("select AppraisalPk from StaffAppraisalMaster where AppraisalType='" + aprtype + "' and AppraisalDate ='" + aprdate.ToString("MM/dd/yyyy") + "' and staff_code='" + scode + "'");
                            string query1 = "if exists(select * from StaffAppraisalDetails where Questioncode='" + qval + "' and Anscode='" + aval + "' and AppraisalFk='" + pk + "') update StaffAppraisalDetails set Remarks='" + remarks + "' where Questioncode='" + qval + "' and Anscode='" + aval + "' and AppraisalFk='" + pk + "' else insert into StaffAppraisalDetails(Questioncode,Anscode,Remarks,AppraisalFk) values ('" + qval + "','" + aval + "','" + remarks + "','" + pk + "')";
                            int count1 = d2.update_method_wo_parameter(query1, "Text");
                        }
                    }
                    Appraisal.Visible = false;
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Saved Successfully";
                    btn_popgo_OnClick(sender, e);
                }
                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Please Select Status!";
                }
            }
        }
        catch { }
    }

    protected void btn_yes_Click(object sender, EventArgs e)
    {
        try
        {
            string scode = txt_apprscode.Text;
            string apprdate = txt_apprjdate.Text;
            string stat = ddl_stat.SelectedValue;
            string qval = "";
            string aval = "";
            string remarks = "";

            if (Fpspread3.Sheets[0].RowCount > 0)
            {
                string query = "insert into StaffAppraisalMaster(staff_code,AppraisalDate,AppraisalType)values('" + scode + "','" + apprdate + "','" + stat + "')";
                int count = d2.update_method_wo_parameter(query, "Text");
                for (int ro = 0; ro < Fpspread3.Sheets[0].RowCount; ro++)
                {
                    qval = Convert.ToString(Fpspread3.Sheets[0].Cells[ro, 1].Tag);
                    aval = Convert.ToString(Fpspread3.Sheets[0].Cells[ro, 2].Tag);
                    remarks = Convert.ToString(Fpspread3.Sheets[0].Cells[ro, 3].Text);

                    string pk = d2.GetFunction("select AppraisalPk from StaffAppraisalMaster where AppraisalType='" + stat + "'");
                    string query1 = "insert into StaffAppraisalDetails(Questioncode,Anscode,Remarks,AppraisalFk)values('" + qval + "','" + aval + "','" + remarks + "','" + pk + "')";
                    int count1 = d2.update_method_wo_parameter(query1, "Text");
                }
            }
            imgdiv2.Visible = false;
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Saved Successfully";
        }
        catch { }
    }

    protected void btn_no_Click(object sender, EventArgs e)
    {
        imgdiv2.Visible = false;
    }

    protected void btn_transnew_OnClick(object sender, EventArgs e)
    {
        Fpspread1.Visible = false;
        lblsug.Visible = false;
        updsug.Visible = false;
        div_Add.Visible = true;
        lbl_tralert.Visible = false;
        lbl_trerr.Visible = false;
        btn_transfersave.Visible = true;
        btn_transupdate.Visible = false;
        bindpopcollege();
        cb_scode.Visible = true;
        bindpopdept();
        popdesignation();
        popstafftype();
        header.Text = "Staff Transfer";
        btn_transfer1.Visible = false;
        btn_relieve1.Visible = false;
        btn_appraisal1.Visible = false;
        btn_promotion1.Visible = false;
        btn_increment1.Visible = false;
    }

    protected void btn_relnew_OnClick(object sender, EventArgs e)
    {
        btn_transfer1.Visible = false;
        lblsug.Visible = false;
        updsug.Visible = false;
        Fpspread1.Visible = false;
        btn_relieve_save.Visible = true;
        btn_relieveupdate.Visible = false;
        div_Add.Visible = true;
        bindpopcollege();
        bindpopdept();
        popdesignation();
        popstafftype();
        header.Text = "Staff Relieve";
        btn_transfer1.Visible = false;
        btn_relieve1.Visible = false;
        btn_appraisal1.Visible = false;
        btn_promotion1.Visible = false;
        btn_increment1.Visible = false;
    }

    protected void btn_aprnew_OnClick(object sender, EventArgs e)
    {
        bindstatusapr();
        lblsug.Visible = true;
        updsug.Visible = true;
        div_Add.Visible = true;
        Fpspread1.Visible = false;
        bindpopcollege();
        bindpopdept();
        popdesignation();
        btn_appr_save.Visible = true;
        btn_apprupdate.Visible = false;
        popstafftype();
        header.Text = "Staff Appraisal";
        btn_transfer1.Visible = false;
        btn_relieve1.Visible = false;
        btn_appraisal1.Visible = false;
        btn_promotion1.Visible = false;
        btn_increment1.Visible = false;
        lbl_alert.Visible = false;
    }

    protected void btn_promonew_OnClick(object sender, EventArgs e)
    {
        div_Add.Visible = true;
        lblsug.Visible = false;
        updsug.Visible = false;
        bindpopcollege();
        Fpspread1.Visible = false;
        bindpopdept();
        popdesignation();
        popstafftype();
        header.Text = "Staff Promotion";
        btn_transfer1.Visible = false;
        btn_relieve1.Visible = false;
        btn_appraisal1.Visible = false;
        btn_promotion1.Visible = false;
        btn_increment1.Visible = false;
    }

    protected void btn_incrnew_OnClick(object sender, EventArgs e)
    {
        btn_promotion1.Visible = false;
        lblsug.Visible = false;
        updsug.Visible = false;
        Fpspread1.Visible = false;
        div_Add.Visible = true;
        bindpopcollege();
        bindpopdept();
        popdesignation();
        popstafftype();
        header.Text = "Staff Increment";
        btn_transfer1.Visible = false;
        btn_relieve1.Visible = false;
        btn_appraisal1.Visible = false;
        btn_promotion1.Visible = false;
        btn_increment1.Visible = false;
        lbl_alert.Visible = false;
    }

    protected void btn_loannew_OnClick(object sender, EventArgs e)
    {
        lblsug.Visible = false;
        updsug.Visible = false;
        Loan_add.Visible = true;
        fld_loan.Visible = true;
        btn_loansave.Visible = true;
        btn_loanupdate.Visible = false;
        btn_loandelete.Visible = false;
        Loan();
        Company();
        Policy();

        rdb_poploan.Checked = false;
        rdb_popppolicy.Checked = false;
        rdb_popbank.Checked = false;
        rdb_popclg.Checked = false;

        if (rdb_loan.Checked == true)
        {
            rdb_poploan.Checked = true;
            rdb_popppolicy.Checked = false;
        }
        if (rdb_policy.Checked == true)
        {
            rdb_popppolicy.Checked = true;
            rdb_poploan.Checked = false;
        }
        if (rdb_bank.Checked == true)
        {
            rdb_popbank.Checked = true;
            rdb_popclg.Checked = false;
        }
        if (rdb_college.Checked == true)
        {
            rdb_popbank.Checked = false;
            rdb_popclg.Checked = true;
        }
        if (rdb_popppolicy.Checked == true)
        {
            fld_policy.Visible = true;
            fld_loan.Visible = false;
            fld_bank.Visible = false;
        }
        if (rdb_poploan.Checked == true)
        {
            if (rdb_popclg.Checked == true)
            {
                fld_policy.Visible = false;
                fld_loan.Visible = true;
                fld_bank.Visible = false;
            }
            if (rdb_popbank.Checked == true)
            {
                fld_policy.Visible = false;
                fld_loan.Visible = false;
                fld_bank.Visible = true;
            }
        }

        bindfldbank();
        bindfldbranch();
        ddl_fldbankname.SelectedIndex = 0;
        ddl_fldbranchname.SelectedIndex = 0;
        loan_header.Text = "Staff Loan/Insurance Entry";
        txt_loandate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_pdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_closeddate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_popscode.Text = "";
        txt_popsname.Text = "";
        txt_lamt.Text = "";
        txt_polamt.Text = "";
        txt_prmamt.Text = "";
        txt_policyno.Text = "";
        txt_percentage.Text = "";
        txt_tenure.Text = "";
        txt_percentage.Enabled = false;
        txt_tenure.Enabled = true;
        cb_interest.Checked = false;
        cb_active.Checked = false;
        cb_closed.Checked = false;
        txt_closeddate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
        txt_closeddate.Enabled = false;
        txt_rmks.Text = "";
        txt_pno.Text = "";
        cbdedfrmsal.Checked = false;
        dedfld.Visible = false;
    }

    protected void cbstatus_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cbstatus, cblstatus, txtstatus, "Status");
    }

    protected void cblstatus_CheckedChange(object sender, EventArgs e)
    {
        chklstchange(cbstatus, cblstatus, txtstatus, "Status");
    }

    public void bindstatusapr()
    {
        try
        {
            cblstatus.Items.Clear();
            cblstatus.Items.Add(new ListItem("Suggested", "0"));
            cblstatus.Items.Add(new ListItem("Not Suggested", "1"));
            cblstatus.DataBind();
            for (int ik = 0; ik < cblstatus.Items.Count; ik++)
            {
                cblstatus.Items[ik].Selected = false;
            }
            cbstatus.Checked = false;
            txtstatus.Text = "--Select--";
        }
        catch { }
    }

    protected void txt_popfd_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_popfd.Text;
            string ty = txt_poptd.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_popfd.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_poptd.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_poptd_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_popfd.Text;
            string ty = txt_poptd.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_popfd.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_poptd.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_popscode_OnTextChanged(object sender, EventArgs e)
    {
        string pscode = txt_popscode.Text;
        string psname = d2.GetFunction("select staff_name from staffmaster where staff_code='" + pscode + "'");
        txt_popsname.Text = psname;
    }

    protected void rdb_poploan_OnCheckedChanged(object sender, EventArgs e)
    {
        if (rdb_popbank.Checked == true)
        {
            fld_policy.Visible = false;
            fld_loan.Visible = false;
            fld_bank.Visible = true;
            ddl_fldbankname.SelectedIndex = 0;
            ddl_fldbranchname.SelectedIndex = 0;
        }
        else
        {
            fld_policy.Visible = false;
            fld_loan.Visible = true;
            fld_bank.Visible = false;
        }
    }

    protected void rdb_popppolicy_OnCheckedChanged(object sender, EventArgs e)
    {
        fld_policy.Visible = true;
        fld_loan.Visible = false;
        fld_bank.Visible = false;
    }

    protected void rdb_popbank_change(object sender, EventArgs e)
    {
        if (rdb_poploan.Checked == true)
        {
            fld_bank.Visible = true;
            fld_loan.Visible = false;
            fld_bank.Visible = true;
            ddl_fldbankname.SelectedIndex = 0;
            ddl_fldbranchname.SelectedIndex = 0;
        }
        else
        {
            fld_bank.Visible = false;
            fld_loan.Visible = false;
        }
    }

    protected void rdb_popclg_change(object sender, EventArgs e)
    {
        if (rdb_poploan.Checked == true)
        {
            fld_bank.Visible = false;
            fld_loan.Visible = true;
        }
        else
        {
            fld_bank.Visible = false;
            fld_loan.Visible = false;
        }
    }

    protected void cb_active_Change(object sender, EventArgs e)
    {
        if (cb_active.Checked == true)
        {
            cb_closed.Checked = false;
            txt_closeddate.Enabled = false;
        }
    }

    protected void chkseldate_change(object sender, EventArgs e)
    {
        if (chkseldate.Checked == true)
        {
            txt_stfdate.Enabled = true;
            txt_stdate.Enabled = true;
        }
        else
        {
            txt_stfdate.Enabled = false;
            txt_stdate.Enabled = false;
        }
    }

    protected void cb_closed_OnCheckedChanged(object sender, EventArgs e)
    {
        if (cb_closed.Checked == true)
        {
            cb_active.Checked = false;
            txt_closeddate.Enabled = true;
            string[] spldt = new string[2];
            string getloandt = Convert.ToString(txt_loandate.Text);
            spldt = getloandt.Split('/');
            DateTime frmdt = Convert.ToDateTime(spldt[1] + "/" + spldt[0] + "/" + spldt[2]);
            string getloanclosedt = Convert.ToString(txt_closeddate.Text);
            spldt = getloanclosedt.Split('/');
            DateTime todt = Convert.ToDateTime(spldt[1] + "/" + spldt[0] + "/" + spldt[2]);
            if (cb_closed.Checked == true)
            {
                if (frmdt > todt)
                {
                    txt_closeddate.Text = frmdt.AddDays(1).ToString("dd/MM/yyyy");
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "The Closed Date Should be greater than Loan Date!";
                }
            }
            else
            {
                if (frmdt < DateTime.Now.Date)
                {
                    txt_loandate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Please Select the Future/Present Date!";
                }
            }
        }
        else
        {
            txt_closeddate.Enabled = false;
        }
    }

    protected void cb_interest_Changed(object sender, EventArgs e)
    {
        if (cb_interest.Checked == true)
        {
            txt_percentage.Text = "";
            txt_percentage.Enabled = true;
        }
        else
        {
            txt_percentage.Text = "";
            txt_percentage.Enabled = false;
        }
    }

    protected void ImageButton6_Click(object sender, ImageClickEventArgs e)
    {
        div_Add.Visible = false;
    }

    protected void ImageButton7_Click(object sender, EventArgs e)
    {
        rdb_loan.Checked = false;
        rdb_policy.Checked = false;
        rdb_bank.Checked = false;
        rdb_college.Checked = false;

        if (rdb_poploan.Checked == true)
            rdb_loan.Checked = true;
        if (rdb_popppolicy.Checked == true)
            rdb_policy.Checked = true;
        if (rdb_popbank.Checked == true)
            rdb_bank.Checked = true;
        if (rdb_popclg.Checked == true)
            rdb_college.Checked = true;
        Loan_add.Visible = false;
    }

    protected void searchbydate_OnCheckedChanged(object sender, EventArgs e)
    {
        if (searchbydate.Checked == true)
        {
            txt_fdate.Enabled = true;
            txt_tdate.Enabled = true;
        }
        else
        {
            txt_fdate.Enabled = false;
            txt_tdate.Enabled = false;
        }
    }

    public void bindpopcollege()
    {
        try
        {
            string group_code = Session["group_code"].ToString();
            string columnfield = "";
            if (group_code.Contains(';'))
            {
                string[] group_semi = group_code.Split(';');
                group_code = group_semi[0].ToString();
            }
            if ((group_code.ToString().Trim() != "") && (Session["single_user"].ToString() != "1" && Session["single_user"].ToString() != "true" && Session["single_user"].ToString() != "TRUE" && Session["single_user"].ToString() != "True"))
                columnfield = " and group_code='" + group_code + "'";
            else
                columnfield = " and user_code='" + Session["usercode"] + "'";
            hat.Clear();
            hat.Add("column_field", columnfield.ToString());
            ds = d2.select_method("bind_college", hat, "sp");
            ddl_clg.Items.Clear();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_clg.Enabled = true;
                ddl_clg.DataSource = ds;
                ddl_clg.DataTextField = "collname";
                ddl_clg.DataValueField = "college_code";
                ddl_clg.DataBind();
            }
        }
        catch (Exception e) { }
    }

    protected void bindloanpopdept()
    {
        try
        {
            ds.Clear();
            cblpoploandept.Items.Clear();
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
            string item = "select distinct dept_code,dept_name from hrdept_Master where college_code='" + collcode + "' order by dept_name";
            ds = d2.select_method_wo_parameter(item, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cblpoploandept.DataSource = ds;
                cblpoploandept.DataTextField = "dept_name";
                cblpoploandept.DataValueField = "dept_code";
                cblpoploandept.DataBind();
                if (cblpoploandept.Items.Count > 0)
                {
                    for (int i = 0; i < cblpoploandept.Items.Count; i++)
                    {
                        cblpoploandept.Items[i].Selected = true;
                    }
                    txtpoploandept.Text = "Department (" + cblpoploandept.Items.Count + ")";
                    cbpoploandept.Checked = true;
                }
            }
            else
            {
                txtpoploandept.Text = "--Select--";
                cbpoploandept.Checked = false;
            }
        }
        catch { }
    }

    protected void loanpopdesignation()
    {
        ds.Clear();
        cblpoploandes.Items.Clear();
        string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
        string statequery = "select desig_code,desig_name from desig_master where collegeCode='" + collcode + "' order by desig_name";
        ds = da.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            cblpoploandes.DataSource = ds;
            cblpoploandes.DataTextField = "desig_name";
            cblpoploandes.DataValueField = "desig_code";
            cblpoploandes.DataBind();
            cblpoploandes.Visible = true;
            if (cblpoploandes.Items.Count > 0)
            {
                for (int i = 0; i < cblpoploandes.Items.Count; i++)
                {
                    cblpoploandes.Items[i].Selected = true;
                }
                txtpoploandesig.Text = "Designation(" + cblpoploandes.Items.Count + ")";
                cbpoploandes.Checked = true;
            }
        }
        else
        {
            txtpoploandesig.Text = "--Select--";
            cbpoploandes.Checked = false;
        }
    }

    protected void bindpopdept()
    {
        try
        {
            ds.Clear();
            cbl_popdept.Items.Clear();
            string collcode = Convert.ToString(ddl_clg.SelectedItem.Value);
            string item = "select distinct dept_code,dept_name from hrdept_Master where college_code='" + collcode + "' order by dept_name";
            ds = d2.select_method_wo_parameter(item, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_popdept.DataSource = ds;
                cbl_popdept.DataTextField = "dept_name";
                cbl_popdept.DataValueField = "dept_code";
                cbl_popdept.DataBind();
                if (cbl_popdept.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_popdept.Items.Count; i++)
                    {
                        cbl_popdept.Items[i].Selected = true;
                    }
                    txt_popdept.Text = "Department (" + cbl_popdept.Items.Count + ")";
                }
            }
            else
            {
                txt_popdept.Text = "--Select--";
            }
        }
        catch { }
    }

    protected void popdesignation()
    {
        ds.Clear();
        cbl_popdesig.Items.Clear();
        string collcode = Convert.ToString(ddl_clg.SelectedItem.Value);
        string statequery = "select desig_code,desig_name from desig_master where collegeCode='" + collcode + "' order by desig_name";
        ds = da.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            cbl_popdesig.DataSource = ds;
            cbl_popdesig.DataTextField = "desig_name";
            cbl_popdesig.DataValueField = "desig_code";
            cbl_popdesig.DataBind();
            cbl_popdesig.Visible = true;
            if (cbl_popdesig.Items.Count > 0)
            {
                for (int i = 0; i < cbl_popdesig.Items.Count; i++)
                {
                    cbl_popdesig.Items[i].Selected = true;
                }
                txt_popdesig.Text = "Designation(" + cbl_popdesig.Items.Count + ")";
            }
        }
        else
        {
            txt_popdesig.Text = "--Select--";
        }
    }

    protected void popstafftype()
    {
        try
        {
            ds.Clear();
            cbl_popstype.Items.Clear();
            string collcode = Convert.ToString(ddl_clg.SelectedItem.Value);
            string item = "select distinct stftype from stafftrans t ,staffmaster m where m.staff_code = t.staff_code and college_code = '" + collcode + "'";
            ds = d2.select_method_wo_parameter(item, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_popstype.DataSource = ds;
                cbl_popstype.DataTextField = "stftype";
                cbl_popstype.DataBind();
                if (cbl_popstype.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_popstype.Items.Count; i++)
                    {
                        cbl_popstype.Items[i].Selected = true;
                    }
                    txt_popstype.Text = "StaffType (" + cbl_popstype.Items.Count + ")";
                }
            }
            else
            {
                txt_popstype.Text = "--Select--";
            }
        }
        catch { }
    }

    protected void cb_popdept_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cb_popdept, cbl_popdept, txt_popdept, "Department");
    }

    protected void cbl_popdept_SelectedIndexChange(object sender, EventArgs e)
    {
        chklstchange(cb_popdept, cbl_popdept, txt_popdept, "Department");
    }

    protected void cb_popdesig_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cb_popdesig, cbl_popdesig, txt_popdesig, "Designation");
    }

    protected void cbl_popdesig_SelectedIndexChange(object sender, EventArgs e)
    {
        chklstchange(cb_popdesig, cbl_popdesig, txt_popdesig, "Designation");
    }

    protected void cb_popstype_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cb_popstype, cbl_popstype, txt_popstype, "StaffType");
    }

    protected void cbl_popstype_SelectedIndexChange(object sender, EventArgs e)
    {
        chklstchange(cb_popstype, cbl_popstype, txt_popstype, "StaffType");
    }

    protected void cbpoploandept_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cbpoploandept, cblpoploandept, txtpoploandept, "Department");
    }

    protected void cblpoploandept_CheckedChange(object sender, EventArgs e)
    {
        chklstchange(cbpoploandept, cblpoploandept, txtpoploandept, "Department");
    }

    protected void cbpoploandes_CheckedChange(object sender, EventArgs e)
    {
        chkchange(cbpoploandes, cblpoploandes, txtpoploandesig, "Designation");
    }

    protected void cblpoploandes_CheckedChange(object sender, EventArgs e)
    {
        chklstchange(cbpoploandes, cblpoploandes, txtpoploandesig, "Designation");
    }

    protected void Fpspread8_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            Fpspread8.SaveChanges();
            byte check = Convert.ToByte(Fpspread8.Sheets[0].Cells[0, 1].Value);
            if (check == 1)
            {
                for (int ik = 1; ik < Fpspread8.Sheets[0].Rows.Count; ik++)
                {
                    Fpspread8.Sheets[0].Cells[ik, 1].Value = 1;
                }
            }
            else
            {
                for (int ik = 1; ik < Fpspread8.Sheets[0].Rows.Count; ik++)
                {
                    Fpspread8.Sheets[0].Cells[ik, 1].Value = 0;
                }
            }
        }
        catch { }
    }

    protected void loadcategory()
    {
        ds.Clear();
        cbl_staffcat.Items.Clear();
        string statequery = "select category_code,category_Name from staffcategorizer where college_code = '" + collegecode1 + "' ";
        ds = d2.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            cbl_staffcat.DataSource = ds;
            cbl_staffcat.DataTextField = "category_Name";
            cbl_staffcat.DataValueField = "category_code";
            cbl_staffcat.DataBind();
            cbl_staffcat.Visible = true;
            if (cbl_staffcat.Items.Count > 0)
            {
                for (int i = 0; i < cbl_staffcat.Items.Count; i++)
                {
                    cbl_staffcat.Items[i].Selected = true;
                }
                txt_staffcat.Text = "Category(" + cbl_staffcat.Items.Count + ")";
                cb_staffcat.Checked = true;
            }
        }
        else
        {
            txt_staffcat.Text = "--Select--";
            cb_staffcat.Checked = false;
        }
    } /*Poomalar 13.10.17*/

    protected void btn_scode_OnClick(object sender, EventArgs e)
    {
        try
        {
            bindloanpopdept();
            loanpopdesignation();
            loadcategory(); /*poomalar 13.10.17*/
            int_alert.Visible = false;
            Internal.Visible = true;
            ddl_searchby.SelectedIndex = 0;
            txt_searchscode.Text = "";
            txt_searchsname.Text = "";
            txt_searchscode.Visible = false;
            txt_searchsname.Visible = false;
            btn_intgo_OnClick(sender, e); /*poomalar 13.10.17*/
        }
        catch { }
    }

    protected void btn_intAdd_OnClick(object sender, EventArgs e)
    {
        try
        {
            string scode = "";
            int staffcount = 0;
            string sname = "";
            bindded();
            bindmon();
            Loan();
            if (checkedloanOK(Fpspread8, out staffcount))
            {
                for (int ik = 1; ik < Fpspread8.Sheets[0].Rows.Count; ik++)
                {
                    byte check = Convert.ToByte(Fpspread8.Sheets[0].Cells[ik, 1].Value);
                    if (check == 1)
                    {
                        scode = Convert.ToString(Fpspread8.Sheets[0].Cells[ik, 2].Text);
                        sname = Convert.ToString(Fpspread8.Sheets[0].Cells[ik, 3].Text);
                    }
                }
            }
            else
            {
                int_alert.Visible = true;
                int_alert.Text = "Please Select Any One Staff!";
                return;
            }
            Internal.Visible = false;

            txt_loandate.Text = DateTime.Now.ToString("dd/MM/yyyy");
            ddl_loanname.SelectedIndex = 0;
            txt_lamt.Text = "";
            ddl_policyname.SelectedIndex = 0;
            txt_pno.Text = "";
            txt_pdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txt_polamt.Text = "";
            txt_prmamt.Text = "";
            ddl_fldbankname.SelectedIndex = 0;
            ddl_fldbranchname.SelectedIndex = 0;
            cb_interest.Checked = false;
            txt_percentage.Enabled = false;
            txt_tenure.Text = "";
            cbdedfrmsal.Checked = false;
            dedfld.Visible = false;
            ddl_dedname.SelectedIndex = 0;
            txt_dedamt.Text = "";
            ddl_dedfrom.SelectedIndex = 0;
            cb_active.Checked = false;
            cb_closed.Checked = false;
            txt_closeddate.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txt_closeddate.Enabled = false;
            txt_rmks.Text = "";
            btn_loansave.Visible = true;
            btn_loandelete.Visible = false;
            btn_loanupdate.Visible = false;

            if (staffcount == 1)
            {
                txt_popscode.Text = scode;
                txt_popsname.Text = sname;
            }
            else
            {
                txt_popscode.Text = Convert.ToString(staffcount) + " Staff Selected";
                txt_popsname.Text = Convert.ToString(staffcount) + " Staff Selected";
            }
        }
        catch { }
    }

    protected void btn_intexit_OnClick(object sender, EventArgs e)
    {
        Internal.Visible = false;
    }

    protected void cb_staffcat_CheckedChanged(object sender, EventArgs e)
    {
        chkchange(cb_staffcat, cbl_staffcat, txt_staffcat, "Category");
    }
    protected void cbl_staffcat_selectedchanged(object sender, EventArgs e)
    {
        chklstchange(cb_staffcat, cbl_staffcat, txt_staffcat, "Category");
    }

    protected void ddl_stfsearchby_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_stfsearchby.SelectedItem.Text == "Staff Code")
        {
            txt_stfsearchbysc.Visible = true;
            txt_stfsearchbysn.Visible = false;
        }
        else if (ddl_stfsearchby.SelectedItem.Text == "Staff Name")
        {
            txt_stfsearchbysn.Visible = true;
            txt_stfsearchbysc.Visible = false;
        }
        else
        {
            txt_stfsearchbysc.Visible = false;
            txt_stfsearchbysn.Visible = false;
        }
    }

    protected void ddl_searchby_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_searchby.SelectedItem.Text == "Staff Code")
        {
            txt_searchscode.Visible = true;
            txt_searchsname.Visible = false;
        }
        else if (ddl_searchby.SelectedItem.Text == "Staff Name")
        {
            txt_searchsname.Visible = true;
            txt_searchscode.Visible = false;
        }
        else
        {
            txt_searchscode.Visible = false;
            txt_searchsname.Visible = false;
        }
    }

    protected void btn_intgo_OnClick(object sender, EventArgs e)
    {
        try
        {
            int_alert.Visible = false;
            Internal.Visible = true;
            Fpspread8.Visible = true;
            Fpspread8.Sheets[0].AutoPostBack = false;
            Fpspread8.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread8.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread8.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread8.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread8.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread8.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread8.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread8.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread8.Sheets[0].RowHeader.Visible = false;

            Fpspread8.Sheets[0].ColumnHeader.RowCount = 0;
            Fpspread8.Sheets[0].ColumnCount = 0;
            Fpspread8.Sheets[0].RowCount = 0;
            Fpspread8.Sheets[0].RowHeader.Visible = false;
            Fpspread8.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.Border.BorderSize = 0;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
            Fpspread8.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
            Fpspread8.Sheets[0].FrozenRowCount = 1;

            FarPoint.Web.Spread.CheckBoxCellType cball = new FarPoint.Web.Spread.CheckBoxCellType();
            cball.AutoPostBack = true;
            FarPoint.Web.Spread.CheckBoxCellType cbcell = new FarPoint.Web.Spread.CheckBoxCellType();
            cbcell.AutoPostBack = false;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread8.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread8.Sheets[0].RowCount = 0;
            Fpspread8.Sheets[0].ColumnCount = 7;
            Fpspread8.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread8.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread8.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpspread8.Columns[0].Width = 30;
            Fpspread8.Columns[0].Locked = true;

            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            Fpspread8.Columns[1].Width = 75;

            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Staff Code";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            Fpspread8.Columns[2].Width = 75;
            Fpspread8.Columns[2].Locked = true;

            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Staff Name";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
            Fpspread8.Columns[3].Width = 200;
            Fpspread8.Columns[3].Locked = true;

            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Designation";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
            Fpspread8.Columns[4].Width = 150;
            Fpspread8.Columns[4].Locked = true;

            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Department";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
            Fpspread8.Columns[5].Width = 250;
            Fpspread8.Columns[5].Locked = true;

            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Category";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
            Fpspread8.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
            Fpspread8.Columns[5].Width = 200;
            Fpspread8.Columns[5].Locked = true;

            string collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);
            string scode = txt_searchscode.Text;
            string sname = txt_searchsname.Text;
            string query = "";
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

            string deptcode = GetSelectedItemsValueAsString(cblpoploandept);
            string desigcode = GetSelectedItemsValueAsString(cblpoploandes);
            string categorycode = GetSelectedItemsValueAsString(cbl_staffcat);

            if (ddl_searchby.SelectedItem.Text == "All")
            {
                query = " select staff_name,s.staff_code,h.dept_name,d.desig_name,st.category_code from staffmaster s,stafftrans st,hrdept_master h,desig_master d where s.college_code=h.college_code and s.college_code=d.collegeCode and st.staff_code=s.staff_code and st.dept_code=h.dept_code and st.desig_code=d.desig_code and st.latestrec='1' and s.resign='0' and s.settled='0' and ISNULL(s.Discontinue,'0')='0' and s.college_code='" + collcode + "'";
                if (deptcode.Trim() != "")
                    query = query + " and h.dept_code in('" + deptcode + "')";
                if (desigcode.Trim() != "")
                    query = query + " and d.desig_code in('" + desigcode + "')";
                if (categorycode.Trim() != "")
                    query = query + " and st.category_code in('" + categorycode + "')";
            }
            else if (ddl_searchby.SelectedItem.Text == "Staff Code")
            {
                query = " select staff_name,s.staff_code,h.dept_name,d.desig_name,st.category_code from staffmaster s,stafftrans st,hrdept_master h,desig_master d where s.college_code=h.college_code and s.college_code=d.collegeCode and st.staff_code=s.staff_code and st.dept_code=h.dept_code and st.desig_code=d.desig_code and st.latestrec='1' and s.resign='0' and s.settled='0' and ISNULL(s.Discontinue,'0')='0' and s.staff_code='" + scode + "'";
            }
            else if (ddl_searchby.SelectedItem.Text == "Staff Name")
            {
                query = " select staff_name,s.staff_code,h.dept_name,d.desig_name,st.category_code from staffmaster s,stafftrans st,hrdept_master h,desig_master d where s.college_code=h.college_code and s.college_code=d.collegeCode and st.staff_code=s.staff_code and st.dept_code=h.dept_code and st.desig_code=d.desig_code and st.latestrec='1' and s.resign='0' and s.settled='0' and ISNULL(s.Discontinue,'0')='0' and s.staff_name='" + sname + "'";
            }

            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                FarPoint.Web.Spread.CheckBoxCellType chkallbox = new FarPoint.Web.Spread.CheckBoxCellType();
                chkallbox.AutoPostBack = true;
                FarPoint.Web.Spread.CheckBoxCellType chkbox = new FarPoint.Web.Spread.CheckBoxCellType();
                chkbox.AutoPostBack = false;

                Fpspread8.Sheets[0].RowCount++;
                Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 1].CellType = chkallbox;
                Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    Fpspread8.Sheets[0].RowCount++;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(i + 1);
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 1].CellType = chkbox;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[i]["staff_code"]);
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 2].CellType = txtcell;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[i]["staff_name"]);
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";

                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[i]["desig_name"]);
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";

                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(ds.Tables[0].Rows[i]["dept_name"]);

                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 5].Font.Size = FontUnit.Medium;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";

                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(ds.Tables[0].Rows[i]["category_code"]);

                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 6].Font.Size = FontUnit.Medium;
                    Fpspread8.Sheets[0].Cells[Fpspread8.Sheets[0].RowCount - 1, 6].Font.Name = "Book Antiqua";
                }
                Fpspread8.Visible = true;
                Fpspread8.Sheets[0].PageSize = Fpspread8.Sheets[0].RowCount;
                int_alert.Visible = false;
            }
            else
            {
                int_alert.Visible = true;
                int_alert.Text = "No Records Found";
            }
        }
        catch { }
    }

    protected void Loan()
    {
        ds.Clear();
        ddl_loanname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='HLNam' and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_loanname.DataSource = ds;
            ddl_loanname.DataTextField = "TextVal";
            ddl_loanname.DataValueField = "TextCode";
            ddl_loanname.DataBind();
            ddl_loanname.Items.Insert(0, "Select");
            ddl_loanname.Items.Insert(ddl_loanname.Items.Count, "Others");
        }
        else
        {
            ddl_loanname.Items.Insert(0, "Select");
            ddl_loanname.Items.Insert(ddl_loanname.Items.Count, "Others");
        }
    }

    protected void Company()
    {
        ds.Clear();
        ddl_companyname.Items.Clear();
        string college = Convert.ToString(ddlcollege.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='PCNam' and college_code='" + college + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_companyname.DataSource = ds;
            ddl_companyname.DataTextField = "TextVal";
            ddl_companyname.DataValueField = "TextCode";
            ddl_companyname.DataBind();
            ddl_companyname.Items.Insert(0, "Select");
            ddl_companyname.Items.Insert(ddl_companyname.Items.Count, "Others");
        }
        else
        {
            ddl_companyname.Items.Insert(0, "Select");
            ddl_companyname.Items.Insert(ddl_companyname.Items.Count, "Others");
        }
    }

    protected void Policy()
    {
        ds.Clear();
        ddl_policyname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='PlNam' and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_policyname.DataSource = ds;
            ddl_policyname.DataTextField = "TextVal";
            ddl_policyname.DataValueField = "TextCode";
            ddl_policyname.DataBind();
            ddl_policyname.Items.Insert(0, "Select");
            ddl_policyname.Items.Insert(ddl_policyname.Items.Count, "Others");
        }
        else
        {
            ddl_policyname.Items.Insert(0, "Select");
            ddl_policyname.Items.Insert(ddl_policyname.Items.Count, "Others");
        }
    }

    protected void loadpayscale()
    {
        ds.Clear();
        ddl_payscale.Items.Clear();
        string collegecode1 = Convert.ToString(ddlcollege.SelectedValue);
        string statequery = "select TextVal,TextCode from textvaltable where TextCriteria='hapsl' and college_code='" + collegecode1 + "'";
        ds = da.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_payscale.DataSource = ds;
            ddl_payscale.DataTextField = "TextVal";
            ddl_payscale.DataValueField = "TextCode";
            ddl_payscale.DataBind();
        }
        ddl_payscale.Items.Insert(0, "Select");
        ddl_payscale.Items.Insert(ddl_payscale.Items.Count, "Others");
    }

    protected void ddl_payscale_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_payscale.SelectedItem.Text == "Others")
        {
            Plus.Visible = true;
            lbl_header.Text = "Pay Scale";
            txt_add.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddl_loanname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_loanname.SelectedItem.Text == "Others")
        {
            Plus.Visible = true;
            lbl_header.Text = "Loan Name";
            txt_add.Text = "";
        }
    }

    protected void ddl_companyname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_companyname.SelectedItem.Text == "Others")
        {
            Plus.Visible = true;
            lbl_header.Text = "Company Name";
            txt_add.Text = "";
        }
    }

    protected void ddl_policyname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_policyname.SelectedItem.Text == "Others")
        {
            Plus.Visible = true;
            lbl_header.Text = "Policy Name";
            txt_add.Text = "";
        }
    }

    protected void btn_add_OnClick(object sender, EventArgs e)
    {
        try
        {
            if (lbl_header.Text == "Pay Scale")
            {
                string val = Convert.ToString(txt_add.Text);
                string criteria = "hapsl";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                loadpayscale();
            }
            if (lbl_header.Text == "Loan Name")
            {
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
                string val = Convert.ToString(txt_add.Text);
                string criteria = "HLNam";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code) values ('" + val.ToUpper() + "','" + criteria + "','" + collcode + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Loan();
            }
            if (lbl_header.Text == "Company Name")
            {
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
                string val = Convert.ToString(txt_add.Text);
                string criteria = "PCNam";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collcode + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Company();
            }
            if (lbl_header.Text == "Policy Name")
            {
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
                string val = Convert.ToString(txt_add.Text);
                string criteria = "PlNam";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collcode + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Policy();
            }

            if (lbl_header.Text == "Add Question")
            {
                btn_appraisal_OnClick(sender, e);
                string college = "";
                if (btn_appr_save.Visible == true)
                    college = ddl_clg.SelectedValue;
                if (btn_apprupdate.Visible == true)
                    college = ddlcollege.SelectedValue;
                string quest = Convert.ToString(txt_add.Text);
                string criteria = "haque";
                if (quest.Trim() != "")
                {
                    quest = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(quest);
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + quest + "','" + criteria + "','" + college + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                question();
            }
            if (lbl_header.Text == "Performance")
            {
                string college = ddlscollege.SelectedValue;
                string performance = Convert.ToString(txt_add.Text);
                string criteria = "haper";
                if (performance.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code ) values ('" + performance.ToUpper() + "','" + criteria + "','" + college + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindperformance();
            }

            if (lbl_header.Text == "Staff Bank Name")
            {
                string college = ddlcollege.SelectedValue;
                string bankname = Convert.ToString(txt_add.Text);
                string criteria = "habnk";
                if (bankname.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + bankname.ToUpper() + "','" + criteria + "','" + college + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindfldbank();
            }

            if (lbl_header.Text == "Staff Branch Name")
            {
                string college = ddlcollege.SelectedValue;
                string branchname = Convert.ToString(txt_add.Text);
                string criteria = "habrn";
                if (branchname.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + branchname.ToUpper() + "','" + criteria + "','" + college + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindfldbranch();
            }

            if (lbl_header.Text == "Concern Name")
            {
                string college = ddlcollege.SelectedValue;
                string concernname = Convert.ToString(txt_add.Text);
                string criteria = "ExpCe";
                if (concernname.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code) values ('" + concernname.ToUpper() + "','" + criteria + "','" + college + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindexpcert();
            }

            if (lbl_header.Text == "Degree Name")
            {
                string college = ddlcollege.SelectedValue;
                string degreename = Convert.ToString(txt_add.Text);
                string criteria = "DegCe";
                if (degreename.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code) values ('" + degreename.ToUpper() + "','" + criteria + "','" + college + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindcertdegree();
            }

            if (lbl_header.Text == "Certificate Name")
            {
                string college = ddlcollege.SelectedValue;
                string certname = Convert.ToString(txt_add.Text);
                string criteria = "Cert";
                if (certname.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code) values ('" + certname.ToUpper() + "','" + criteria + "','" + college + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindcertname();
            }

            txt_add.Text = "";
            Plus.Visible = false;
        }
        catch { }
    }

    protected void imgpoploancalc_Click(object sender, EventArgs e)
    {
        poploancalc.Visible = false;
    }

    protected void btnshowcal_click(object sender, EventArgs e)
    {
        try
        {
            double loanamnt = 0;
            double percent = 0;
            double monthcount = 0;
            DateTime dt = DateTime.Now.Date.AddMonths(-1);
            int currmonth = dt.Month;
            double princamnt = 0;
            double interest = 0;

            Fpspreadloan.Sheets[0].AutoPostBack = false;
            Fpspreadloan.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspreadloan.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspreadloan.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspreadloan.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspreadloan.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspreadloan.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspreadloan.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspreadloan.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;

            Fpspreadloan.Sheets[0].RowHeader.Visible = false;
            Fpspreadloan.Visible = false;
            Fpspreadloan.Sheets[0].ColumnHeader.RowCount = 0;
            Fpspreadloan.Sheets[0].ColumnCount = 0;
            Fpspreadloan.Sheets[0].RowCount = 0;
            Fpspreadloan.Sheets[0].RowHeader.Visible = false;
            Fpspreadloan.CommandBar.Visible = false;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.Border.BorderSize = 0;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
            Fpspreadloan.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspreadloan.Sheets[0].DefaultStyle = darkstyle1;
            Fpspreadloan.Sheets[0].RowCount = 0;
            Fpspreadloan.Sheets[0].ColumnCount = 7;
            Fpspreadloan.Sheets[0].ColumnHeader.RowCount = 1;

            Fpspreadloan.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspreadloan.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No.";
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            Fpspreadloan.Sheets[0].Columns[0].Locked = true;

            Fpspreadloan.Sheets[0].ColumnHeader.Columns[1].Width = 75;
            Fpspreadloan.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Month";
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            Fpspreadloan.Sheets[0].Columns[1].Locked = true;

            Fpspreadloan.Sheets[0].ColumnHeader.Columns[2].Width = 75;
            Fpspreadloan.Sheets[0].Columns[2].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Year";
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            Fpspreadloan.Sheets[0].Columns[2].Locked = true;

            Fpspreadloan.Sheets[0].ColumnHeader.Columns[3].Width = 125;
            Fpspreadloan.Sheets[0].Columns[3].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Principal";
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
            Fpspreadloan.Sheets[0].Columns[3].Locked = true;

            Fpspreadloan.Sheets[0].ColumnHeader.Columns[4].Width = 125;
            Fpspreadloan.Sheets[0].Columns[4].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Interest";
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
            Fpspreadloan.Sheets[0].Columns[4].Locked = true;

            Fpspreadloan.Sheets[0].ColumnHeader.Columns[5].Width = 125;
            Fpspreadloan.Sheets[0].Columns[5].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Total Payment";
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
            Fpspreadloan.Sheets[0].Columns[5].Locked = true;

            Fpspreadloan.Sheets[0].ColumnHeader.Columns[6].Width = 125;
            Fpspreadloan.Sheets[0].Columns[6].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Balance";
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
            Fpspreadloan.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
            Fpspreadloan.Sheets[0].Columns[6].Locked = true;

            if (txt_lamt.Text.Trim() != "")
            {
                double.TryParse(txt_lamt.Text, out loanamnt);
                double.TryParse(txt_percentage.Text, out percent);
                double.TryParse(txt_tenure.Text, out monthcount);

                if (cb_interest.Checked == true && percent != 0 && monthcount != 0)
                {
                    if (loanamnt > percent && loanamnt > monthcount)
                    {
                        princamnt = loanamnt / monthcount;
                        double totamnt = 0;
                        double withint_permonth = 0;
                        double balamnt = 0;
                        double totint = 0;
                        double totprin = 0;
                        for (int ik = 0; ik < monthcount; ik++)
                        {
                            Fpspreadloan.Sheets[0].RowCount++;
                            Fpspreadloan.Sheets[0].Cells[ik, 0].Text = Convert.ToString(ik + 1);
                            Fpspreadloan.Sheets[0].Cells[ik, 0].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 0].HorizontalAlign = HorizontalAlign.Center;

                            Fpspreadloan.Sheets[0].Cells[ik, 1].Text = Convert.ToString(dt.AddMonths(ik + 1).ToString("MMM"));
                            Fpspreadloan.Sheets[0].Cells[ik, 1].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 1].HorizontalAlign = HorizontalAlign.Center;

                            Fpspreadloan.Sheets[0].Cells[ik, 2].Text = Convert.ToString(dt.AddMonths(ik + 1).Year);
                            Fpspreadloan.Sheets[0].Cells[ik, 2].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 2].HorizontalAlign = HorizontalAlign.Center;

                            totprin = totprin + princamnt;
                            totprin = Math.Round(totprin, 0, MidpointRounding.AwayFromZero);
                            princamnt = Math.Round(princamnt, 0, MidpointRounding.AwayFromZero);
                            Fpspreadloan.Sheets[0].Cells[ik, 3].Text = Convert.ToString(princamnt);
                            Fpspreadloan.Sheets[0].Cells[ik, 3].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 3].HorizontalAlign = HorizontalAlign.Center;

                            interest = loanamnt * (percent / 100);
                            totint = totint + interest;
                            totint = Math.Round(totint, 0, MidpointRounding.AwayFromZero);
                            interest = Math.Round(interest, 0, MidpointRounding.AwayFromZero);
                            Fpspreadloan.Sheets[0].Cells[ik, 4].Text = Convert.ToString(interest);
                            Fpspreadloan.Sheets[0].Cells[ik, 4].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 4].HorizontalAlign = HorizontalAlign.Center;

                            totamnt = totamnt + princamnt + interest;

                            withint_permonth = princamnt + interest;//delsi2105
                            //  totamnt = Math.Round(totamnt, 0, MidpointRounding.AwayFromZero);
                            withint_permonth = Math.Round(withint_permonth, 0, MidpointRounding.AwayFromZero);//delsi2105
                            Fpspreadloan.Sheets[0].Cells[ik, 5].Text = Convert.ToString(withint_permonth);
                            Fpspreadloan.Sheets[0].Cells[ik, 5].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 5].HorizontalAlign = HorizontalAlign.Center;

                            loanamnt = loanamnt - princamnt;
                            balamnt = balamnt + loanamnt;
                            balamnt = Math.Round(balamnt, 0, MidpointRounding.AwayFromZero);
                            loanamnt = Math.Round(loanamnt, 0, MidpointRounding.AwayFromZero);
                            Fpspreadloan.Sheets[0].Cells[ik, 6].Text = Convert.ToString(loanamnt);
                            Fpspreadloan.Sheets[0].Cells[ik, 6].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 6].HorizontalAlign = HorizontalAlign.Center;
                        }

                        Fpspreadloan.Sheets[0].RowCount++;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 0].Text = Convert.ToString("Grand Total");
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpspreadloan.Sheets[0].Rows[Fpspreadloan.Sheets[0].RowCount - 1].BackColor = Color.LightGreen;
                        Fpspreadloan.Sheets[0].SpanModel.Add(Fpspreadloan.Sheets[0].RowCount - 1, 0, 1, 3);

                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(totprin);
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 3].Font.Bold = true;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;

                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(totint);
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 4].Font.Bold = true;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;

                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(totamnt);
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 5].Font.Bold = true;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Center;

                        //  Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(balamnt);loanamnt
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(loanamnt);
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 6].Font.Bold = true;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 6].Font.Name = "Book Antiqua";
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Center;

                        Fpspreadloan.Sheets[0].PageSize = Fpspreadloan.Sheets[0].RowCount;
                        Fpspreadloan.Width = 730;
                        Fpspreadloan.Height = 300;
                        Fpspreadloan.Visible = true;
                        lblemi.Visible = true;
                        lblemi.Text = Convert.ToString(princamnt);
                        lblinterest.Visible = true;
                        lblinterest.Text = Convert.ToString(totint);
                        lbltotpayamnt.Visible = true;
                        lbltotpayamnt.Text = Convert.ToString(totamnt);
                        poploancalc.Visible = true;
                    }
                }
                else if (monthcount != 0 && ((cb_interest.Checked == false && percent == 0) || (cb_interest.Checked == true && percent == 0)))
                {
                    if (loanamnt > monthcount)
                    {
                        princamnt = loanamnt / monthcount;
                        double totamnt = 0;
                        double balamnt = 0;
                        double totint = 0;
                        double totprin = 0;
                        for (int ik = 0; ik < monthcount; ik++)
                        {
                            Fpspreadloan.Sheets[0].RowCount++;
                            Fpspreadloan.Sheets[0].Cells[ik, 0].Text = Convert.ToString(ik + 1);
                            Fpspreadloan.Sheets[0].Cells[ik, 0].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 0].HorizontalAlign = HorizontalAlign.Center;

                            Fpspreadloan.Sheets[0].Cells[ik, 1].Text = Convert.ToString(dt.AddMonths(ik + 1).ToString("MMM"));
                            Fpspreadloan.Sheets[0].Cells[ik, 1].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 1].HorizontalAlign = HorizontalAlign.Center;

                            Fpspreadloan.Sheets[0].Cells[ik, 2].Text = Convert.ToString(dt.AddMonths(ik + 1).Year);
                            Fpspreadloan.Sheets[0].Cells[ik, 2].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 2].HorizontalAlign = HorizontalAlign.Center;

                            totprin = totprin + princamnt;
                            totprin = Math.Round(totprin, 0, MidpointRounding.AwayFromZero);
                            princamnt = Math.Round(princamnt, 0, MidpointRounding.AwayFromZero);
                            Fpspreadloan.Sheets[0].Cells[ik, 3].Text = Convert.ToString(princamnt);
                            Fpspreadloan.Sheets[0].Cells[ik, 3].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 3].HorizontalAlign = HorizontalAlign.Center;

                            interest = loanamnt * (percent / 100);
                            totint = totint + interest;
                            totint = Math.Round(totint, 0, MidpointRounding.AwayFromZero);
                            interest = Math.Round(interest, 0, MidpointRounding.AwayFromZero);
                            Fpspreadloan.Sheets[0].Cells[ik, 4].Text = Convert.ToString(interest);
                            Fpspreadloan.Sheets[0].Cells[ik, 4].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 4].HorizontalAlign = HorizontalAlign.Center;

                            totamnt = totamnt + princamnt + interest;
                            totamnt = Math.Round(totamnt, 0, MidpointRounding.AwayFromZero);
                            Fpspreadloan.Sheets[0].Cells[ik, 5].Text = Convert.ToString(totamnt);
                            Fpspreadloan.Sheets[0].Cells[ik, 5].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 5].HorizontalAlign = HorizontalAlign.Center;

                            balamnt = balamnt + loanamnt;
                            loanamnt = loanamnt - princamnt;
                            balamnt = Math.Round(balamnt, 0, MidpointRounding.AwayFromZero);
                            loanamnt = Math.Round(loanamnt, 0, MidpointRounding.AwayFromZero);
                            Fpspreadloan.Sheets[0].Cells[ik, 6].Text = Convert.ToString(loanamnt);
                            Fpspreadloan.Sheets[0].Cells[ik, 6].Font.Name = "Book Antiqua";
                            Fpspreadloan.Sheets[0].Cells[ik, 6].HorizontalAlign = HorizontalAlign.Center;
                        }

                        Fpspreadloan.Sheets[0].RowCount++;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 0].Text = Convert.ToString("Grand Total");
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpspreadloan.Sheets[0].Rows[Fpspreadloan.Sheets[0].RowCount - 1].BackColor = Color.LightGreen;
                        Fpspreadloan.Sheets[0].SpanModel.Add(Fpspreadloan.Sheets[0].RowCount - 1, 0, 1, 3);

                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(totprin);
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 3].Font.Bold = true;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;

                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(totint);
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 4].Font.Bold = true;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;

                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(totamnt);
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 5].Font.Bold = true;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Center;

                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(balamnt);
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 6].Font.Bold = true;
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 6].Font.Name = "Book Antiqua";
                        Fpspreadloan.Sheets[0].Cells[Fpspreadloan.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Center;

                        Fpspreadloan.Sheets[0].PageSize = Fpspreadloan.Sheets[0].RowCount;
                        Fpspreadloan.Width = 730;
                        Fpspreadloan.Height = 300;
                        Fpspreadloan.Visible = true;
                        lblemi.Visible = true;
                        lblemi.Text = Convert.ToString(princamnt);
                        lblinterest.Visible = true;
                        lblinterest.Text = Convert.ToString(totint);
                        lbltotpayamnt.Visible = true;
                        lbltotpayamnt.Text = Convert.ToString(totamnt);
                        poploancalc.Visible = true;
                    }
                }
                else
                {

                }
            }
        }
        catch { }
    }

    protected void btnintloan_Hide_click(object sender, EventArgs e)
    {
        poploancalc.Visible = false;
    }

    protected void cbdedfrmsal_Change(object sender, EventArgs e)
    {
        try
        {
            if (cbdedfrmsal.Checked == true)
            {
                double loanamnt = 0;
                double monthcount = 0;
                bindded();
                bindmon();
                dedfld.Visible = true;
                double.TryParse(txt_lamt.Text, out loanamnt);
                double.TryParse(txt_tenure.Text, out monthcount);
                if (loanamnt != 0 && monthcount != 0 && loanamnt > monthcount)
                    txt_dedamt.Text = Convert.ToString(Math.Round((loanamnt / monthcount), 0, MidpointRounding.AwayFromZero));
            }
            else
            {
                dedfld.Visible = false;
            }
        }
        catch { }
    }

    protected void ddl_fldbankname_change(object sender, EventArgs e)
    {
        if (ddl_fldbankname.SelectedItem.Text == "Others")
        {
            Plus.Visible = true;
            lbl_header.Text = "Staff Bank Name";
            txt_add.Text = "";
        }
    }

    protected void ddl_fldbranchname_change(object sender, EventArgs e)
    {
        if (ddl_fldbranchname.SelectedItem.Text == "Others")
        {
            Plus.Visible = true;
            lbl_header.Text = "Staff Branch Name";
            txt_add.Text = "";
        }
    }

    protected void bindded()
    {
        try
        {
            ds.Clear();
            ddl_dedname.Items.Clear();
            string clgcode = Convert.ToString(ddlcollege.SelectedItem.Value);
            string item = "select deductions from incentives_master  where college_code = '" + clgcode + "' ";
            ds = d2.select_method_wo_parameter(item, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                string st = Convert.ToString(ds.Tables[0].Rows[0]["deductions"]);
                string[] split = st.Split(';');
                for (int row = 0; row < split.Length; row++)
                {
                    string staff = split[row];
                    if (staff.Contains('\\'))
                    {
                        string[] split1 = staff.Split('\\');
                        string stafftype = split1[0];
                        ddl_dedname.Items.Add(stafftype);
                    }
                }
                ddl_dedname.Items.Insert(0, "Select");
            }
            else
            {
                ddl_dedname.Items.Insert(0, "Select");
            }
        }
        catch { }
    }

    protected void bindmon()
    {
        try
        {
            ddl_dedfrom.Items.Clear();
            DateTime dt = DateTime.Now.Date;
            int month = dt.Month;
            for (int ik = 1; ik <= 12; ik++)
            {
                ddl_dedfrom.Items.Add(new ListItem(dt.AddMonths(ik - 1).ToString("MMMM") + " / " + Convert.ToString(dt.AddMonths(ik - 1).Year), Convert.ToString(dt.Month + ik - 1)));
            }
            ddl_dedfrom.SelectedIndex = ddl_dedfrom.Items.IndexOf(ddl_dedfrom.Items.FindByValue(Convert.ToString(month)));
        }
        catch { }
    }

    protected void bindfldbank()
    {
        try
        {
            ds.Clear();
            ddl_fldbankname.Items.Clear();
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
            string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='habnk' and college_code='" + collcode + "'";
            ds = d2.select_method_wo_parameter(item, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_fldbankname.DataSource = ds;
                ddl_fldbankname.DataTextField = "TextVal";
                ddl_fldbankname.DataValueField = "TextCode";
                ddl_fldbankname.DataBind();
                ddl_fldbankname.Items.Insert(0, "Select");
                ddl_fldbankname.Items.Insert(ddl_fldbankname.Items.Count, "Others");
            }
            else
            {
                ddl_fldbankname.Items.Insert(0, "Select");
                ddl_fldbankname.Items.Insert(ddl_fldbankname.Items.Count, "Others");
            }
        }
        catch { }
    }

    protected void bindfldbranch()
    {
        ds.Clear();
        ddl_fldbranchname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='habrn' and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_fldbranchname.DataSource = ds;
            ddl_fldbranchname.DataTextField = "TextVal";
            ddl_fldbranchname.DataValueField = "TextCode";
            ddl_fldbranchname.DataBind();
            ddl_fldbranchname.Items.Insert(0, "Select");
            ddl_fldbranchname.Items.Insert(ddl_fldbranchname.Items.Count, "Others");
        }
        else
        {
            ddl_fldbranchname.Items.Insert(0, "Select");
            ddl_fldbranchname.Items.Insert(ddl_fldbranchname.Items.Count, "Others");
        }
    }

    protected void btn_loansave_Onclick(object sender, EventArgs e)
    {
        try
        {
            bool errflag = false;
            string lblerrmsg = "";
            int savecount = 0;
            int loancount = 0;
            int polcount = 0;
            string scode = txt_popscode.Text;
            string sname = txt_popsname.Text;
            string type = "";
            string loanfrom = "";
            string lblloanext = "";
            string lblpolext = "";
            string lblloanexc = "";
            string lblpolexc = "";
            if (scode.Trim() == "")
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Please Select Staff!";
                return;
            }

            if (rdb_poploan.Checked == true)
                type = "0";
            if (rdb_popppolicy.Checked == true)
                type = "1";
            if (rdb_popbank.Checked == true)
                loanfrom = "0";
            if (rdb_popclg.Checked == true)
                loanfrom = "1";

            string loandate = txt_loandate.Text;
            string[] split = loandate.Split('/');
            DateTime loandt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            string loanname = "0";
            if (ddl_loanname.SelectedItem.Text != "Select" && ddl_loanname.SelectedItem.Text != "Others")
                loanname = ddl_loanname.SelectedValue;

            double loanamt = 0;
            Double.TryParse(txt_lamt.Text, out loanamt);
            string compname = "0";
            if (ddl_companyname.SelectedItem.Text != "Select" && ddl_companyname.SelectedItem.Text != "Others")
                compname = ddl_companyname.SelectedValue;
            string policyname = "0";
            if (ddl_policyname.SelectedItem.Text != "Select" && ddl_policyname.SelectedItem.Text != "Others")
                policyname = ddl_policyname.SelectedValue;

            string policyno = txt_pno.Text;
            double policyamt = 0;
            Double.TryParse(txt_polamt.Text, out policyamt);
            string policydate = txt_pdate.Text;
            split = policydate.Split('/');
            DateTime policydt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            double premium = 0;
            Double.TryParse(txt_prmamt.Text, out premium);

            string isinterest = "";
            if (cb_interest.Checked == true)
                isinterest = "1";
            else
                isinterest = "0";
            double percent = 0;
            Double.TryParse(txt_percentage.Text, out percent);
            string months = txt_tenure.Text;
            if (rdb_poploan.Checked == true && loanname == "0")
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Please Select Loan Name!";
                return;
            }

            string isded = "";
            string dedname = "";
            double dedamnt = 0;
            string dedfrmamnt = txt_dedamt.Text;
            string dedfrmmon = "0";
            string dedfrmyear = "0";
            if (cbdedfrmsal.Checked == true)
            {
                if (ddl_dedname.SelectedIndex != 0 && ddl_dedname.SelectedItem.Text != "Select" && dedfrmamnt != "")
                {
                    isded = "1";
                    dedname = Convert.ToString(ddl_dedname.SelectedItem.Text);
                    dedfrmmon = Convert.ToString(ddl_dedfrom.SelectedItem.Value);
                    dedfrmyear = Convert.ToString(ddl_dedfrom.SelectedItem.Text).Trim().Split('/')[1];
                    double.TryParse(dedfrmamnt, out dedamnt);
                }
            }
            else
            {
                isded = "0";
            }

            string bankname = "0";
            string branchname = "";
            if (ddl_fldbankname.SelectedItem.Text != "Select" && ddl_fldbankname.SelectedIndex != 0 && ddl_fldbankname.Visible == true)
                bankname = Convert.ToString(ddl_fldbankname.SelectedItem.Value);
            if (ddl_fldbranchname.SelectedItem.Text != "Select" && ddl_fldbranchname.SelectedIndex != 0 && ddl_fldbranchname.Visible == true)
                branchname = Convert.ToString(ddl_fldbranchname.SelectedItem.Value);

            if (rdb_popbank.Checked == true && bankname.Trim() == "0")
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Please Select the Bank!";
                return;
            }
            if (rdb_popbank.Checked == true && branchname.Trim() == "")
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Please Select the Branch!";
                return;
            }
            string isactive = "";
            if (cb_active.Checked == true)
                isactive = "1";
            else
                isactive = "0";
            string isclosed = "";
            if (cb_closed.Checked == true)
                isclosed = "1";
            else
                isclosed = "0";

            string closeddate = txt_loandate.Text;
            split = closeddate.Split('/');
            DateTime closedt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            string remarks = txt_rmks.Text;

            if (scode.Contains("Staff Selected"))
            {
                for (int ik = 1; ik < Fpspread8.Sheets[0].Rows.Count; ik++)
                {
                    errflag = false;
                    byte check = Convert.ToByte(Fpspread8.Sheets[0].Cells[ik, 1].Value);
                    if (check == 1)
                    {
                        scode = Convert.ToString(Fpspread8.Sheets[0].Cells[ik, 2].Text);
                        string selq = d2.GetFunction("select COUNT(staff_code) as LoanCount from StaffLoanDet where Staff_Code='" + scode + "' and LoanType='0' group by staff_code");
                        Int32.TryParse(selq, out loancount);
                        if (loancount >= 5)
                        {
                            if (lblloanexc.Trim() == "")
                                lblloanexc = scode;
                            else
                                lblloanexc = lblloanexc + "<br />" + scode;
                            errflag = true;
                        }

                        string selqpol = d2.GetFunction("select COUNT(staff_code) as Policycount from StaffLoanDet where Staff_Code='" + scode + "' and LoanType='1' group by staff_code");
                        Int32.TryParse(selqpol, out polcount);
                        if (polcount >= 5)
                        {
                            if (lblpolexc.Trim() == "")
                                lblpolexc = scode;
                            else
                                lblpolexc = lblpolexc + "<br />" + scode;
                            errflag = true;
                        }

                        string loanext = "select * from StaffLoanDet where staff_code='" + scode + "' and LoanType='0' and LoanName='" + loanname + "'";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(loanext, "Text");
                        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                        {
                            if (lblloanext.Trim() == "")
                                lblloanext = scode;
                            else
                                lblloanext = lblloanext + "<br />" + scode;
                            errflag = true;
                        }

                        string polnameext = "select * from StaffLoanDet where staff_code='" + scode + "' and LoanType='1' and PolicyName='" + policyname + "'";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(polnameext, "Text");
                        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                        {
                            if (lblpolext.Trim() == "")
                                lblpolext = scode;
                            else
                                lblpolext = lblpolext + "<br />" + scode;
                            errflag = true;
                        }

                        if (errflag == false)
                        {
                            string query = "";
                            if (rdb_poploan.Checked == true)
                            {
                                query = "insert into StaffLoanDet(Staff_Code,LoanType,LoanFrom,LoanDate,LoanName,LoanAmount,IsInterest,InterestPer,PayTotMon,IsActive,IsClose,CloseDate,Remarks,IsDed,DedName,EMIAmt,DedFromMonth,DedFromYear,BankName,BankBranch) values ('" + scode + "','" + type + "','" + loanfrom + "','" + loandt.ToString("MM/dd/yyyy") + "','" + loanname + "','" + loanamt + "','" + isinterest + "','" + percent + "','" + months + "','" + isactive + "','" + isclosed + "','" + closedt.ToString("MM/dd/yyyy") + "','" + remarks + "','" + isded + "','" + dedname + "','" + dedamnt + "','" + dedfrmmon + "','" + dedfrmyear + "','" + bankname + "','" + branchname + "') ";
                            }
                            if (rdb_popppolicy.Checked == true)
                            {
                                query = "insert into StaffLoanDet(Staff_Code,LoanType,LoanFrom,LoanName,LoanAmount,PolicyCompName,PolicyName,PolicyNo,PolicyDate,PolicyAmt,PremiumAmt,IsActive,IsClose,CloseDate,Remarks,IsDed,DedName,DedAmt,DedFromMonth,DedFromYear,BankName,BankBranch)values('" + scode + "','" + type + "','" + loanfrom + "','" + loanname + "','" + loanamt + "','" + compname + "','" + policyname + "','" + policyno + "','" + policydt.ToString("MM/dd/yyyy") + "','" + policyamt + "','" + premium + "','" + isactive + "','" + isclosed + "','" + closedt.ToString("MM/dd/yyyy") + "','" + remarks + "','" + isded + "','" + dedname + "','" + dedamnt + "','" + dedfrmmon + "','" + dedfrmyear + "','" + bankname + "','" + branchname + "') ";
                            }
                            int count = d2.update_method_wo_parameter(query, "Text");
                            if (count > 0)
                            {
                                savecount++;
                            }
                        }
                    }
                }

                if (lblloanexc.Trim() != "")
                {
                    if (lblerrmsg.Trim() == "")
                        lblerrmsg = "Loan Limit Exceed for the Following Staff :" + "<br />" + lblloanexc;
                    else
                        lblerrmsg = lblerrmsg + "<br />" + "Loan Limit Exceed for the Following Staff :" + "<br />" + lblloanexc;
                }
                if (lblpolexc.Trim() != "")
                {
                    if (lblerrmsg.Trim() == "")
                        lblerrmsg = "Policy Limit Exceed for the Following Staff :" + "<br />" + lblpolexc;
                    else
                        lblerrmsg = lblerrmsg + "<br />" + "Policy Limit Exceed for the Following Staff :" + "<br />" + lblpolexc;
                }
                if (lblloanext.Trim() != "")
                {
                    if (lblerrmsg.Trim() == "")
                        lblerrmsg = "Loan Name Already Exist for the Following Staff :" + "<br />" + lblloanext;
                    else
                        lblerrmsg = lblerrmsg + "<br />" + "Loan Name Already Exist for the Following Staff :" + "<br />" + lblloanext;
                }
                if (lblpolext.Trim() != "")
                {
                    if (lblerrmsg.Trim() == "")
                        lblerrmsg = "Policy Name Already Exist for the Following Staff :" + "<br />" + lblpolext;
                    else
                        lblerrmsg = lblerrmsg + "<br />" + "Policy Name Already Exist for the Following Staff :" + "<br />" + lblpolext;
                }
                if (savecount != 0)
                {
                    alertpopwindow.Visible = true;
                    if (lblerrmsg.Trim() != "")
                        lblalerterr.Text = "Saved Successfully!" + "<br />" + lblerrmsg;
                    else
                        lblalerterr.Text = "Saved Successfully!";
                    loanclear();
                }
                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = lblerrmsg;
                    loanclear();
                }
            }
            else
            {
                string selq = d2.GetFunction("select COUNT(staff_code) as LoanCount from StaffLoanDet where Staff_Code='" + scode + "' and LoanType='0' and isclose='0' group by staff_code");
                Int32.TryParse(selq, out loancount);
                if (loancount >= 5)
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Visible = true;
                    lblalerterr.Text = "You have Exceed the Loan Limit!";
                    return;
                }

                string selqpol = d2.GetFunction("select COUNT(staff_code) as Policycount from StaffLoanDet where Staff_Code='" + scode + "' and LoanType='1' group by staff_code");
                Int32.TryParse(selqpol, out polcount);
                if (polcount >= 5)
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Visible = true;
                    lblalerterr.Text = "You have Exceed the Policy Limit!";
                    return;
                }

                string loanext = "select * from StaffLoanDet where staff_code='" + scode + "' and LoanType='0' and LoanName='" + loanname + "' and isclose='0'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(loanext, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Visible = true;
                    lblalerterr.Text = "Loan Name Already Exist!";
                    return;
                }

                string polnameext = "select * from StaffLoanDet where staff_code='" + scode + "' and LoanType='1' and PolicyName='" + policyname + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(polnameext, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Visible = true;
                    lblalerterr.Text = "Policy Name Already Exist!";
                    return;
                }

                string query = "";
                if (rdb_poploan.Checked == true)
                {
                    query = "insert into StaffLoanDet(Staff_Code,LoanType,LoanFrom,LoanDate,LoanName,LoanAmount,IsInterest,InterestPer,PayTotMon,IsActive,IsClose,CloseDate,Remarks,IsDed,DedName,EMIAmt,DedFromMonth,DedFromYear,BankName,BankBranch) values ('" + scode + "','" + type + "','" + loanfrom + "','" + loandt.ToString("MM/dd/yyyy") + "','" + loanname + "','" + loanamt + "','" + isinterest + "','" + percent + "','" + months + "','" + isactive + "','" + isclosed + "','" + closedt.ToString("MM/dd/yyyy") + "','" + remarks + "','" + isded + "','" + dedname + "','" + dedamnt + "','" + dedfrmmon + "','" + dedfrmyear + "','" + bankname + "','" + branchname + "') ";
                }
                if (rdb_popppolicy.Checked == true)
                {
                    query = "insert into StaffLoanDet(Staff_Code,LoanType,LoanFrom,LoanName,LoanAmount,PolicyCompName,PolicyName,PolicyNo,PolicyDate,PolicyAmt,PremiumAmt,IsActive,IsClose,CloseDate,Remarks,IsDed,DedName,DedAmt,DedFromMonth,DedFromYear,BankName,BankBranch)values('" + scode + "','" + type + "','" + loanfrom + "','" + loanname + "','" + loanamt + "','" + compname + "','" + policyname + "','" + policyno + "','" + policydt.ToString("MM/dd/yyyy") + "','" + policyamt + "','" + premium + "','" + isactive + "','" + isclosed + "','" + closedt.ToString("MM/dd/yyyy") + "','" + remarks + "','" + isded + "','" + dedname + "','" + dedamnt + "','" + dedfrmmon + "','" + dedfrmyear + "','" + bankname + "','" + branchname + "') ";
                }
                int count = d2.update_method_wo_parameter(query, "Text");
                if (count > 0)
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Saved Successfully!";
                    loanclear();
                }
            }
        }
        catch { }
    }

    protected void btn_loanexit_OnClick(object sender, EventArgs e)
    {
        Loan_add.Visible = false;
    }

    protected void loanclear()
    {
        txt_popscode.Text = "";
        txt_popsname.Text = "";
        rdb_popppolicy.Checked = false;
        rdb_college.Checked = false;
        ddl_loanname.SelectedIndex = 0;
        ddl_companyname.SelectedIndex = 0;
        ddl_policyname.SelectedIndex = 0;
        txt_loandate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_pdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_closeddate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_lamt.Text = "";
        txt_polamt.Text = "";
        cb_closed.Checked = false;
        txt_percentage.Text = "";
        txt_prmamt.Text = "";
        txt_tenure.Text = "";
        txt_policyno.Text = "";
        cb_interest.Checked = false;
        cb_active.Checked = false;
        txt_rmks.Text = "";
        txt_pno.Text = "";
    }

    protected void Cell1_Click(object sender, EventArgs e)
    {
        check = true;
        loan_header.Text = "Staff Loan/Insurance Entry";
        Loan_add.Visible = true;
        fld_loan.Visible = true;
        btn_loansave.Visible = false;
        btn_loanupdate.Visible = true;
        btn_loandelete.Visible = true;
    }

    protected void Fpspread9_render(object sender, EventArgs e)
    {
        try
        {
            if (check == true)
            {
                Loan();
                Company();
                Policy();
                bindfldbank();
                bindfldbranch();
                bindded();
                bindmon();
                txt_popscode.Enabled = false;
                txt_popsname.Enabled = false;
                string activerow = "";
                string activecol = "";
                string scode = "";
                string sname = "";
                string applno = "";
                string loancode = "";
                activerow = Fpspread9.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread9.ActiveSheetView.ActiveColumn.ToString();
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

                if (activerow.Trim() != "")
                {
                    applno = Convert.ToString(Fpspread9.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                    loancode = Convert.ToString(Fpspread9.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Note);
                }
                DataSet dsgetloan = new DataSet();

                string selectquery = "select * from staff_appl_master sa,staffmaster sm,StaffLoanDet ld where sa.appl_no=sm.appl_no and sm.staff_code=ld.Staff_Code and sa.appl_no='" + applno + "' and ld.LoanCode='" + loancode + "'";
                ds = d2.select_method_wo_parameter(selectquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string type = ds.Tables[0].Rows[0]["LoanType"].ToString();
                    if (type == "1")
                    {
                        rdb_popppolicy.Checked = true;
                        rdb_poploan.Checked = false;
                    }
                    if (type == "0")
                    {
                        rdb_poploan.Checked = true;
                        rdb_popppolicy.Checked = false;
                    }
                    string loanfrom = ds.Tables[0].Rows[0]["LoanFrom"].ToString();
                    if (loanfrom == "1")
                    {
                        rdb_popclg.Checked = true;
                        rdb_popbank.Checked = false;
                    }
                    if (loanfrom == "0")
                    {
                        rdb_popbank.Checked = true;
                        rdb_popclg.Checked = false;
                    }
                    if (rdb_popppolicy.Checked == true)
                    {
                        fld_policy.Visible = true;
                        fld_loan.Visible = false;
                        fld_bank.Visible = false;
                    }
                    if (rdb_poploan.Checked == true)
                    {
                        if (rdb_popbank.Checked == true)
                        {
                            fld_policy.Visible = false;
                            fld_loan.Visible = false;
                            fld_bank.Visible = true;
                        }
                        if (rdb_popclg.Checked == true)
                        {
                            fld_policy.Visible = false;
                            fld_loan.Visible = true;
                            fld_bank.Visible = false;
                        }
                    }
                    scode = ds.Tables[0].Rows[0]["staff_code"].ToString();
                    sname = ds.Tables[0].Rows[0]["staff_name"].ToString();
                    txt_popscode.Text = scode;
                    txt_popsname.Text = sname;
                    string[] ss = new string[2];
                    string loandate = ds.Tables[0].Rows[0]["LoanDate"].ToString();
                    if (loandate.Trim() != "")
                    {
                        ss = loandate.Split('/');
                        DateTime ld = Convert.ToDateTime(ss[0] + "/" + ss[1] + "/" + ss[2]);
                        txt_loandate.Text = ld.ToString("dd/MM/yyyy");
                    }
                    string loanname = ds.Tables[0].Rows[0]["LoanName"].ToString();
                    string lname = d2.GetFunction("select textval from textvaltable where TextCode='" + loanname + "' and college_code='" + collcode + "'");
                    ddl_loanname.SelectedIndex = ddl_loanname.Items.IndexOf(ddl_loanname.Items.FindByText(lname));
                    string loanamt = ds.Tables[0].Rows[0]["LoanAmount"].ToString();
                    txt_lamt.Text = loanamt;
                    string isinterest = ds.Tables[0].Rows[0]["IsInterest"].ToString();
                    if (isinterest == "False")
                    {
                        cb_interest.Checked = false;
                        txt_percentage.Enabled = false;
                        txt_tenure.Enabled = false;
                    }
                    if (isinterest == "True")
                    {
                        cb_interest.Checked = true;
                        txt_percentage.Enabled = true;
                        txt_tenure.Enabled = true;
                    }
                    string percentage = ds.Tables[0].Rows[0]["InterestPer"].ToString();
                    txt_percentage.Text = percentage;

                    string dedname = "";
                    double dedamnt = 0;
                    string dedfrmmonth = "";
                    string dedfrmyear = "";

                    if (Convert.ToString(ds.Tables[0].Rows[0]["IsDed"]).Trim().ToUpper() == "TRUE")
                    {
                        cbdedfrmsal.Checked = true;
                        dedfld.Visible = true;
                        dedname = Convert.ToString(ds.Tables[0].Rows[0]["DedName"]);
                        ddl_dedname.SelectedIndex = ddl_dedname.Items.IndexOf(ddl_dedname.Items.FindByText(dedname));
                        if (Convert.ToString(ds.Tables[0].Rows[0]["LoanType"]) == "0")
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[0]["EMIAmt"]), out dedamnt);
                        else if (Convert.ToString(ds.Tables[0].Rows[0]["LoanType"]) == "1")
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[0]["DedAmt"]), out dedamnt);
                        txt_dedamt.Text = Convert.ToString(dedamnt);
                        dedfrmmonth = Convert.ToString(ds.Tables[0].Rows[0]["DedFromMonth"]);
                        ddl_dedfrom.SelectedIndex = ddl_dedfrom.Items.IndexOf(ddl_dedfrom.Items.FindByValue(dedfrmmonth));
                    }
                    else
                    {
                        cbdedfrmsal.Checked = false;
                        dedfld.Visible = false;
                    }

                    string bankname = "";
                    string branchname = "";
                    bankname = Convert.ToString(ds.Tables[0].Rows[0]["BankName"]);
                    ddl_fldbankname.SelectedIndex = ddl_fldbankname.Items.IndexOf(ddl_fldbankname.Items.FindByValue(bankname));
                    branchname = Convert.ToString(ds.Tables[0].Rows[0]["BankBranch"]);
                    ddl_fldbranchname.SelectedIndex = ddl_fldbranchname.Items.IndexOf(ddl_fldbranchname.Items.FindByValue(branchname));
                    string months = ds.Tables[0].Rows[0]["PayTotMon"].ToString();
                    txt_tenure.Text = months;
                    string compname = ds.Tables[0].Rows[0]["PolicyCompName"].ToString();
                    string cname = d2.GetFunction("select textval from textvaltable where TextCode='" + compname + "' and college_code='" + collcode + "'");
                    ddl_companyname.SelectedIndex = ddl_companyname.Items.IndexOf(ddl_companyname.Items.FindByText(cname));
                    string policyname = ds.Tables[0].Rows[0]["PolicyName"].ToString();
                    if (policyname != "")
                    {
                        string pname = d2.GetFunction("select textval from textvaltable where TextCode='" + policyname + "' and college_code='" + collcode + "'");
                        ddl_policyname.SelectedIndex = ddl_policyname.Items.IndexOf(ddl_policyname.Items.FindByText(pname));
                        string polno = ds.Tables[0].Rows[0]["PolicyNo"].ToString();
                        txt_pno.Text = polno;
                        string polamt = ds.Tables[0].Rows[0]["PolicyAmt"].ToString();
                        txt_polamt.Text = polamt;
                        string poldate = ds.Tables[0].Rows[0]["PolicyDate"].ToString();
                        if (poldate.Trim() != "")
                        {
                            ss = poldate.Split('/');
                            DateTime pd = Convert.ToDateTime(ss[0] + "/" + ss[1] + "/" + ss[2]);
                            txt_pdate.Text = pd.ToString("dd/MM/yyyy");
                        }
                        string prmamt = ds.Tables[0].Rows[0]["PremiumAmt"].ToString();
                        txt_prmamt.Text = prmamt;
                    }
                    string isactive = ds.Tables[0].Rows[0]["IsActive"].ToString();
                    if (isactive == "False")
                        cb_active.Checked = false;
                    if (isactive == "True")
                        cb_active.Checked = true;
                    string isclosed = ds.Tables[0].Rows[0]["IsClose"].ToString();
                    if (isclosed == "False")
                    {
                        cb_closed.Checked = false;
                        txt_closeddate.Enabled = false;
                    }
                    if (isclosed == "True")
                    {
                        cb_closed.Checked = true;
                        txt_closeddate.Enabled = true;
                    }
                    string closeddate = ds.Tables[0].Rows[0]["CloseDate"].ToString();
                    if (closeddate.Trim() != "")
                    {
                        ss = closeddate.Split('/');
                        DateTime cd = Convert.ToDateTime(ss[0] + "/" + ss[1] + "/" + ss[2]);
                        txt_closeddate.Text = cd.ToString("dd/MM/yyyy");
                    }
                    string remarks = ds.Tables[0].Rows[0]["Remarks1"].ToString();
                    txt_rmks.Text = remarks;
                }
            }
        }
        catch { }
    }

    protected void btn_loanupdate_OnClick(object sender, EventArgs e)
    {
        try
        {
            string activerow = "";
            string activecol = "";
            string scode = "";
            string applno = "";
            string loancode = "";
            activerow = Fpspread9.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread9.ActiveSheetView.ActiveColumn.ToString();
            string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

            if (activerow.Trim() != "" && activerow.Trim() != "-1")
            {
                applno = Convert.ToString(Fpspread9.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                loancode = Convert.ToString(Fpspread9.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Note);
            }
            string getquery = "select LoanCode,sm.staff_code  from staff_appl_master sa,staffmaster sm,StaffLoanDet ld where sa.appl_no=sm.appl_no and sm.staff_code=ld.Staff_Code and sa.appl_no='" + applno + "'";
            ds = d2.select_method_wo_parameter(getquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                scode = ds.Tables[0].Rows[0]["staff_code"].ToString();
            }
            string type = "";
            string loanfrom = "";
            if (rdb_poploan.Checked == true)
                type = "0";
            if (rdb_popppolicy.Checked == true)
                type = "1";
            if (rdb_bank.Checked == true)
                loanfrom = "0";
            if (rdb_college.Checked == true)
                loanfrom = "1";
            string loandate = txt_loandate.Text;
            string loandt = "";
            DateTime londt = new DateTime();
            if (loandate.Trim() != "")
            {
                string[] split = loandate.Split('/');
                loandt = ",LoanDate='" + split[1] + "/" + split[0] + "/" + split[2] + "'";
                londt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            }

            string loanname = "0";
            if (ddl_loanname.SelectedItem.Text != "Select" && ddl_loanname.SelectedItem.Text != "Others")
                loanname = ddl_loanname.SelectedValue;

            double loanamt = 0;
            Double.TryParse(txt_lamt.Text, out loanamt);
            string compname = "0";
            if (ddl_companyname.SelectedItem.Text != "Select" && ddl_companyname.SelectedItem.Text != "Others")
                compname = ddl_companyname.SelectedValue;
            string policyname = "0";
            if (ddl_policyname.SelectedItem.Text != "Select" && ddl_policyname.SelectedItem.Text != "Others")
                policyname = ddl_policyname.SelectedValue;

            double policyamt = 0;
            Double.TryParse(txt_polamt.Text, out policyamt);
            string policyno = txt_pno.Text;
            string policydate = txt_pdate.Text;
            string policydt = "";
            if (policydate.Trim() != "")
            {
                string[] pd = policydate.Split('/');
                policydt = ",PolicyDate='" + pd[1] + "/" + pd[0] + "/" + pd[2] + "'";
            }
            double premium = 0;
            Double.TryParse(txt_prmamt.Text, out premium);

            string isinterest = "";
            if (cb_interest.Checked == true)
                isinterest = "1";
            else
                isinterest = "0";
            double percent = 0;
            Double.TryParse(txt_percentage.Text, out percent);
            string months = txt_tenure.Text;
            if (rdb_poploan.Checked == true && loanname == "")
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Please Select Loan Name!";
                return;
            }

            string isded = "";
            string dedname = "";
            double dedamnt = 0;
            string dedfrmamnt = txt_dedamt.Text;
            string dedfrmmon = "";
            string dedfrmyear = "";
            if (cbdedfrmsal.Checked == true)
            {
                if (ddl_dedname.SelectedIndex != 0 && ddl_dedname.SelectedItem.Text != "Select" && dedfrmamnt != "")
                {
                    isded = "1";
                    dedname = Convert.ToString(ddl_dedname.SelectedItem.Text);
                    dedfrmmon = Convert.ToString(ddl_dedfrom.SelectedItem.Value);
                    dedfrmyear = Convert.ToString(ddl_dedfrom.SelectedItem.Text).Trim().Split('/')[1];
                    double.TryParse(dedfrmamnt, out dedamnt);
                }
            }
            else
            {
                isded = "0";
            }

            string bankname = "0";
            string branchname = "";
            if (ddl_fldbankname.SelectedItem.Text != "Select" && ddl_fldbankname.SelectedIndex != 0 && ddl_fldbankname.Visible == true)
                bankname = Convert.ToString(ddl_fldbankname.SelectedItem.Value);
            if (ddl_fldbranchname.SelectedItem.Text != "Select" && ddl_fldbranchname.SelectedIndex != 0 && ddl_fldbranchname.Visible == true)
                branchname = Convert.ToString(ddl_fldbranchname.SelectedItem.Value);

            if (rdb_popbank.Checked == true && bankname.Trim() == "0")
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Please Select the Bank!";
                return;
            }
            if (rdb_popbank.Checked == true && branchname.Trim() == "")
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Please Select the Branch!";
                return;
            }
            string isactive = "";
            if (cb_active.Checked == true)
                isactive = "1";
            else
                isactive = "0";
            string isclosed = "";
            if (cb_closed.Checked == true)
                isclosed = "1";
            else
                isclosed = "0";
            string closeddate = txt_loandate.Text;
            string closedt = "";
            DateTime dtnew = new DateTime();
            if (closeddate.Trim() != "")
            {
                string[] cd = closeddate.Split('/');
                closedt = ",CloseDate='" + cd[1] + "/" + cd[0] + "/" + cd[2] + "'";
                dtnew = Convert.ToDateTime(cd[1] + "/" + cd[0] + "/" + cd[2]);
            }
            string remarks = txt_rmks.Text;
            string updatequery = "";
            if (rdb_poploan.Checked == true)
            {
                updatequery = "Update StaffLoanDet set LoanType='" + type + "',LoanFrom='" + loanfrom + "',LoanName='" + loanname + "',LoanAmount='" + loanamt + "',IsInterest='" + isinterest + "',InterestPer='" + percent + "',PayTotMon='" + months + "',IsActive='" + isactive + "',IsClose='" + isclosed + "'" + closedt + ",Remarks='" + remarks + "'" + loandt + ",IsDed='" + isded + "',DedName='" + dedname + "',EMIAmt='" + dedamnt + "',DedFromMonth='" + dedfrmmon + "',DedFromYear='" + dedfrmyear + "',BankName='" + bankname + "',BankBranch='" + branchname + "' where Staff_Code='" + scode + "' and LoanCode='" + loancode + "'";
            }
            if (rdb_popppolicy.Checked == true)
            {
                updatequery = " update StaffLoanDet set  LoanType='" + type + "',LoanFrom='" + loanfrom + "'" + loandt + ",LoanName='" + loanname + "',LoanAmount='" + loanamt + "',PolicyCompName='" + compname + "',PolicyName='" + policyname + "',PolicyNo='" + policyno + "'" + policydt + ",PolicyAmt='" + policyamt + "',PremiumAmt='" + premium + "',IsInterest='" + isinterest + "',InterestPer='" + percent + "',PayTotMon='" + months + "',DedName='" + dedname + "',DedAmt='" + dedamnt + "',DedFromMonth='" + dedfrmmon + "',DedFromYear='" + dedfrmyear + "',IsActive='" + isactive + "',IsClose='" + isclosed + "'" + closedt + ",Remarks='" + remarks + "',BankName='" + bankname + "',BankBranch='" + branchname + "' where LoanCode='" + loancode + "' and Staff_Code='" + scode + "'";
            }
            int count = d2.update_method_wo_parameter(updatequery, "Text");
            if (count != 0)
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Updated Successfully";
                Loan_add.Visible = false;
                btn_loango_OnClick(sender, e);
            }
        }
        catch { }
    }

    protected void btn_loandelete_OnClick(object sender, EventArgs e)
    {
        try
        {
            string activerow = "";
            string activecol = "";
            string scode = "";
            string applno = "";
            string loancode = "";

            activerow = Fpspread9.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread9.ActiveSheetView.ActiveColumn.ToString();

            if (activerow.Trim() != "" && activerow.Trim() != "-1")
            {
                applno = Convert.ToString(Fpspread9.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                loancode = Convert.ToString(Fpspread9.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Note);
            }
            string getquery = "select LoanCode,sm.staff_code  from staff_appl_master sa,staffmaster sm,StaffLoanDet ld where sa.appl_no=sm.appl_no and sm.staff_code=ld.Staff_Code and sa.appl_no='" + applno + "'";
            ds = d2.select_method_wo_parameter(getquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
                scode = ds.Tables[0].Rows[0]["staff_code"].ToString();

            string deletequery = " delete from StaffLoanDet where LoanCode='" + loancode + "' and Staff_Code='" + scode + "'";
            int count = d2.update_method_wo_parameter(deletequery, "Text");
            if (count != 0)
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Deleted Successfully";
                Loan_add.Visible = false;
                btn_loango_OnClick(sender, e);
            }
        }
        catch { }
    }

    public void cb_column_CheckedChanged(object sender, EventArgs e)
    {
        if (cb_column.Checked == true)
        {
            lstcolorder.Items.Clear();
            for (int i = 0; i < cblcolumnorder.Items.Count; i++)
            {
                cblcolumnorder.Items[i].Selected = true;
                lstcolorder.Items.Add(new ListItem(cblcolumnorder.Items[i].Text, cblcolumnorder.Items[i].Value));
            }
        }
        else
        {
            for (int i = 0; i < cblcolumnorder.Items.Count; i++)
            {
                cblcolumnorder.Items[i].Selected = false;
            }
            lstcolorder.Items.Clear();
        }
    }

    public void lb_Click(object sender, EventArgs e)
    {
    }

    public void cbl_columnorder_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            cb_column.Checked = false;
            string value = "";
            int index;
            value = string.Empty;
            string result = Request.Form["__EVENTTARGET"];
            string[] checkedBox = result.Split('$');
            index = int.Parse(checkedBox[checkedBox.Length - 1]);
            string sindex = Convert.ToString(index);
            if (cblcolumnorder.Items[index].Selected)
            {
                if (!Itemindex.Contains(sindex))
                {
                    ItemList.Add(cblcolumnorder.Items[index].Text.ToString());
                    Itemindex.Add(sindex);
                    lstcolorder.Items.Add(new ListItem(cblcolumnorder.Items[index].Text, cblcolumnorder.Items[index].Value));
                }
            }
            else
            {
                ItemList.Remove(cblcolumnorder.Items[index].Text.ToString());
                Itemindex.Remove(sindex);
                lstcolorder.Items.Remove(new ListItem(cblcolumnorder.Items[index].Text, cblcolumnorder.Items[index].Value));
            }
        }
        catch { }
    }

    public bool columncount()
    {
        bool colorder = false;
        try
        {
            for (int i = 0; i < cblcolumnorder.Items.Count; i++)
            {
                if (cblcolumnorder.Items[i].Selected == true)
                    colorder = true;
            }
        }
        catch { }
        return colorder;
    }

    public void loadcolumns(object sender, EventArgs e)
    {
        try
        {
            string linkname = "Staff Manager Column Order";
            string columnvalue = "";
            int clsupdate = 0;
            DataSet dscol = new DataSet();
            lstcolorder.Items.Clear();
            string collegecode = Convert.ToString(ddlcollege.SelectedItem.Value);

            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode + "' ";
            dscol.Clear();
            dscol = d2.select_method_wo_parameter(selcol, "Text");
            if (columncount() == true)
            {
                if (cblcolumnorder.Items.Count > 0)
                {
                    colord.Clear();
                    for (int i = 0; i < cblcolumnorder.Items.Count; i++)
                    {
                        if (cblcolumnorder.Items[i].Selected == true)
                        {
                            colord.Add(Convert.ToString(cblcolumnorder.Items[i].Value));
                            if (columnvalue == "")
                            {
                                columnvalue = Convert.ToString(cblcolumnorder.Items[i].Value);
                                lstcolorder.Items.Add(new ListItem(cblcolumnorder.Items[i].Text, cblcolumnorder.Items[i].Value));
                            }
                            else
                            {
                                columnvalue = columnvalue + ',' + Convert.ToString(cblcolumnorder.Items[i].Value);
                                lstcolorder.Items.Add(new ListItem(cblcolumnorder.Items[i].Text, cblcolumnorder.Items[i].Value));
                            }
                        }
                    }
                }
            }
            else if (dscol.Tables.Count > 0 && dscol.Tables[0].Rows.Count > 0)
            {
                colord.Clear();
                lstcolorder.Items.Clear();
                for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                {
                    string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                    string[] valuesplit = value.Split(',');
                    if (valuesplit.Length > 0)
                    {
                        for (int k = 0; k < valuesplit.Length; k++)
                        {
                            colord.Add(Convert.ToString(valuesplit[k]));
                            if (columnvalue == "")
                            {
                                columnvalue = Convert.ToString(valuesplit[k]);
                                lstcolorder.Items.Add(new ListItem(cblcolumnorder.Items[Convert.ToInt32(k)].Text, cblcolumnorder.Items[Convert.ToInt32(k)].Value));
                            }
                            else
                            {
                                columnvalue = columnvalue + ',' + Convert.ToString(valuesplit[k]);
                                lstcolorder.Items.Add(new ListItem(cblcolumnorder.Items[Convert.ToInt32(k)].Text, cblcolumnorder.Items[Convert.ToInt32(k)].Value));
                            }
                        }
                    }
                }
            }
            else
            {
                colord.Clear();
                for (int i = 0; i < cblcolumnorder.Items.Count; i++)
                {
                    cblcolumnorder.Items[i].Selected = true;
                    colord.Add(Convert.ToString(cblcolumnorder.Items[i].Value));
                    if (columnvalue == "")
                        columnvalue = Convert.ToString(cblcolumnorder.Items[i].Value);
                    else
                        columnvalue = columnvalue + ',' + Convert.ToString(cblcolumnorder.Items[i].Value);
                }
            }
            if (columnvalue != "" && columnvalue != null)
            {
                string clsinsert = " if exists(select * from New_InsSettings where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode + "') update New_InsSettings set LinkValue='" + columnvalue + "' where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code) values ('" + linkname + "','" + columnvalue + "','" + usercode + "','" + collegecode + "')";
                clsupdate = d2.update_method_wo_parameter(clsinsert, "Text");
            }
            if (clsupdate == 1)
            {
                string sel = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode + "' ";
                DataSet dscolor = new DataSet();
                dscolor.Clear();
                dscolor = d2.select_method_wo_parameter(sel, "Text");
                if (dscolor.Tables.Count > 0)
                {
                    int count = 0;
                    if (dscolor.Tables[0].Rows.Count > 0)
                    {
                        string value = Convert.ToString(dscolor.Tables[0].Rows[0]["LinkValue"]);
                        string[] value1 = value.Split(',');
                        if (value1.Length > 0)
                        {
                            for (int i = 0; i < value1.Length; i++)
                            {
                                string val = value1[i].ToString();
                                for (int k = 0; k < cblcolumnorder.Items.Count; k++)
                                {
                                    if (val == cblcolumnorder.Items[k].Value)
                                    {
                                        cblcolumnorder.Items[k].Selected = true;
                                        count++;
                                    }
                                }
                            }
                            if (count == cblcolumnorder.Items.Count)
                                cb_column.Checked = true;
                            else
                                cb_column.Checked = false;
                        }
                    }
                }
            }
        }
        catch { }
    }

    protected void loadappcolumnorder()
    {
        cblcolumnorder.Items.Clear();
        cblcolumnorder.Items.Add(new ListItem("Application No", "appl_no"));
        cblcolumnorder.Items.Add(new ListItem("Application Name", "appl_name"));
        cblcolumnorder.Items.Add(new ListItem("Middle Name", "mid_name"));
        cblcolumnorder.Items.Add(new ListItem("Father Name", "father_name"));
        cblcolumnorder.Items.Add(new ListItem("Gender", "sex"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Birth", "date_of_birth"));
        cblcolumnorder.Items.Add(new ListItem("Staff Type", "staff_type"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Apply", "dateofapply"));
        cblcolumnorder.Items.Add(new ListItem("Department Name", "dept_name"));
        cblcolumnorder.Items.Add(new ListItem("Designation Name", "desig_name"));
        cblcolumnorder.Items.Add(new ListItem("Experience", "yofexp"));
        cblcolumnorder.Items.Add(new ListItem("Blood Group", "bldgrp"));
        cblcolumnorder.Items.Add(new ListItem("Mobile No", "com_mobileno"));
        cblcolumnorder.Items.Add(new ListItem("Familiar Subjects", "subjects"));
        cblcolumnorder.Items.Add(new ListItem("Qualifications", "qualification"));
        cblcolumnorder.Items.Add(new ListItem("Email-Id", "email"));
    }

    protected void loadcolumnorder()
    {
        cblcolumnorder.Items.Clear();
        cblcolumnorder.Items.Add(new ListItem("Application No", "appl_no"));
        cblcolumnorder.Items.Add(new ListItem("Staff Code", "staff_code"));
        cblcolumnorder.Items.Add(new ListItem("Staff Name", "appl_name"));
        cblcolumnorder.Items.Add(new ListItem("Middle Name", "mid_name"));
        cblcolumnorder.Items.Add(new ListItem("Father Name", "father_name"));
        cblcolumnorder.Items.Add(new ListItem("Gender", "sex"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Birth", "date_of_birth"));
        cblcolumnorder.Items.Add(new ListItem("Staff Type", "stftype"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Apply", "dateofapply"));
        cblcolumnorder.Items.Add(new ListItem("Department Name", "dept_name"));
        cblcolumnorder.Items.Add(new ListItem("Designation Name", "desig_name"));
        cblcolumnorder.Items.Add(new ListItem("Experience", "yofexp"));
        cblcolumnorder.Items.Add(new ListItem("Blood Group", "bldgrp"));
        cblcolumnorder.Items.Add(new ListItem("Interview Date", "interviewdate"));
        cblcolumnorder.Items.Add(new ListItem("Mobile No", "com_mobileno"));
        cblcolumnorder.Items.Add(new ListItem("Join Date", "join_date"));
        cblcolumnorder.Items.Add(new ListItem("Retire Date", "retr_date"));
        cblcolumnorder.Items.Add(new ListItem("Appointed Date", "appointed_date"));
        cblcolumnorder.Items.Add(new ListItem("Relieved Date", "relieve_date"));
        cblcolumnorder.Items.Add(new ListItem("Aadhar Card No", "adharcardno"));
        cblcolumnorder.Items.Add(new ListItem("Familiar Subjects", "subjects"));
        cblcolumnorder.Items.Add(new ListItem("Qualifications", "qualification"));
        cblcolumnorder.Items.Add(new ListItem("Email-Id", "email"));
    }

    protected void loadcallcolumnorder()
    {
        cblcolumnorder.Items.Clear();
        cblcolumnorder.Items.Add(new ListItem("Application No", "appl_no"));
        cblcolumnorder.Items.Add(new ListItem("Application Name", "appl_name"));
        cblcolumnorder.Items.Add(new ListItem("Middle Name", "mid_name"));
        cblcolumnorder.Items.Add(new ListItem("Father Name", "father_name"));
        cblcolumnorder.Items.Add(new ListItem("Gender", "sex"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Birth", "date_of_birth"));
        cblcolumnorder.Items.Add(new ListItem("Staff Type", "staff_type"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Apply", "dateofapply"));
        cblcolumnorder.Items.Add(new ListItem("Department Name", "dept_name"));
        cblcolumnorder.Items.Add(new ListItem("Designation Name", "desig_name"));
        cblcolumnorder.Items.Add(new ListItem("Experience", "yofexp"));
        cblcolumnorder.Items.Add(new ListItem("Blood Group", "bldgrp"));
        cblcolumnorder.Items.Add(new ListItem("Interview Date", "interviewdate"));
        cblcolumnorder.Items.Add(new ListItem("Interview Time", "interviewtime"));
        cblcolumnorder.Items.Add(new ListItem("Mobile No", "com_mobileno"));
        cblcolumnorder.Items.Add(new ListItem("Familiar Subjects", "subjects"));
        cblcolumnorder.Items.Add(new ListItem("Qualifications", "qualification"));
        cblcolumnorder.Items.Add(new ListItem("Email-Id", "email"));
        cblcolumnorder.Items.Add(new ListItem("Venue", "venue_name"));
        cblcolumnorder.Items.Add(new ListItem("Location", "Location"));
    }

    protected void loadselectcolumnorder()
    {
        cblcolumnorder.Items.Clear();
        cblcolumnorder.Items.Add(new ListItem("Application No", "appl_no"));
        cblcolumnorder.Items.Add(new ListItem("Application Name", "appl_name"));
        cblcolumnorder.Items.Add(new ListItem("Middle Name", "mid_name"));
        cblcolumnorder.Items.Add(new ListItem("Father Name", "father_name"));
        cblcolumnorder.Items.Add(new ListItem("Gender", "sex"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Birth", "date_of_birth"));
        cblcolumnorder.Items.Add(new ListItem("Staff Type", "staff_type"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Apply", "dateofapply"));
        cblcolumnorder.Items.Add(new ListItem("Department Name", "dept_name"));
        cblcolumnorder.Items.Add(new ListItem("Designation Name", "desig_name"));
        cblcolumnorder.Items.Add(new ListItem("Experience", "yofexp"));
        cblcolumnorder.Items.Add(new ListItem("Blood Group", "bldgrp"));
        cblcolumnorder.Items.Add(new ListItem("Interview Date", "interviewdate"));
        cblcolumnorder.Items.Add(new ListItem("Interview Time", "interviewtime"));
        cblcolumnorder.Items.Add(new ListItem("Mobile No", "com_mobileno"));
        cblcolumnorder.Items.Add(new ListItem("Familiar Subjects", "subjects"));
        cblcolumnorder.Items.Add(new ListItem("Qualifications", "qualification"));
        cblcolumnorder.Items.Add(new ListItem("Email-Id", "email"));
    }

    protected void loadloancolumnorder()
    {
        cblcolumnorder.Items.Clear();
        cblcolumnorder.Items.Add(new ListItem("Application No", "appl_no"));
        cblcolumnorder.Items.Add(new ListItem("Application Name", "appl_name"));
        cblcolumnorder.Items.Add(new ListItem("Middle Name", "mid_name"));
        cblcolumnorder.Items.Add(new ListItem("Father Name", "father_name"));
        cblcolumnorder.Items.Add(new ListItem("Gender", "sex"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Birth", "date_of_birth"));
        cblcolumnorder.Items.Add(new ListItem("Staff Type", "staff_type"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Apply", "dateofapply"));
        cblcolumnorder.Items.Add(new ListItem("Department Name", "dept_name"));
        cblcolumnorder.Items.Add(new ListItem("Designation Name", "desig_name"));
        cblcolumnorder.Items.Add(new ListItem("Experience", "yofexp"));
        cblcolumnorder.Items.Add(new ListItem("Blood Group", "bldgrp"));
        cblcolumnorder.Items.Add(new ListItem("Interview Date", "interviewdate"));
        cblcolumnorder.Items.Add(new ListItem("Mobile No", "com_mobileno"));
        cblcolumnorder.Items.Add(new ListItem("Join Date", "join_date"));
        cblcolumnorder.Items.Add(new ListItem("Retire Date", "retr_date"));
        cblcolumnorder.Items.Add(new ListItem("Appointed Date", "appointed_date"));
        cblcolumnorder.Items.Add(new ListItem("Relieved Date", "relieve_date"));
        cblcolumnorder.Items.Add(new ListItem("Aadhar Card No", "adharcardno"));
        cblcolumnorder.Items.Add(new ListItem("Familiar Subjects", "subjects"));
        cblcolumnorder.Items.Add(new ListItem("Qualifications", "qualification"));
        cblcolumnorder.Items.Add(new ListItem("Email-Id", "email"));
        cblcolumnorder.Items.Add(new ListItem("Loan Name", "LoanName"));
        cblcolumnorder.Items.Add(new ListItem("Loan Amount", "LoanAmount"));
        cblcolumnorder.Items.Add(new ListItem("Loan Date", "LoanDate"));
        cblcolumnorder.Items.Add(new ListItem("Loan Code", "LoanCode"));
        cblcolumnorder.Items.Add(new ListItem("Policy Name", "PolicyName"));
        cblcolumnorder.Items.Add(new ListItem("Policy Amount", "PolicyAmt"));
        cblcolumnorder.Items.Add(new ListItem("Policy Date", "PolicyDate"));
        cblcolumnorder.Items.Add(new ListItem("Remarks", "Remarks"));
    }

    protected void loadapprcolumnorder()
    {
        cblcolumnorder.Items.Clear();
        cblcolumnorder.Items.Add(new ListItem("Staff Code", "staff_code"));
        cblcolumnorder.Items.Add(new ListItem("Staff Name", "staff_name"));
        cblcolumnorder.Items.Add(new ListItem("Middle Name", "mid_name"));
        cblcolumnorder.Items.Add(new ListItem("Father Name", "father_name"));
        cblcolumnorder.Items.Add(new ListItem("Gender", "sex"));
        cblcolumnorder.Items.Add(new ListItem("Date Of Birth", "date_of_birth"));
        cblcolumnorder.Items.Add(new ListItem("Staff Type", "staff_type"));
        cblcolumnorder.Items.Add(new ListItem("Department Name", "dept_name"));
        cblcolumnorder.Items.Add(new ListItem("Designation Name", "desig_name"));
        cblcolumnorder.Items.Add(new ListItem("Blood Group", "bldgrp"));
        cblcolumnorder.Items.Add(new ListItem("Mobile No", "com_mobileno"));
        cblcolumnorder.Items.Add(new ListItem("Aadhar Card No", "adharcardno"));
        cblcolumnorder.Items.Add(new ListItem("Email-Id", "email"));
        cblcolumnorder.Items.Add(new ListItem("Appraisal Date", "AppraisalDate"));
        cblcolumnorder.Items[0].Selected = true;
    }

    protected void Cell_Click(object sender, EventArgs e)
    {
        check = true;
        App_div.Visible = true;
    }

    protected void Cell14_Click(object sender, EventArgs e)
    {
        check = true;
        divcall.Visible = true;
        callfilter.Visible = false;
        Fpspread18.Visible = false;
        cb_interviewdet.Visible = true;
        cb_interviewdet.Checked = true;
        interview.Visible = true;
        txt_date.Enabled = true;
        txt_venue.Enabled = true;
        ddl_hour.Enabled = true;
        ddl_mm.Enabled = true;
        ddl_ampm.Enabled = true;
        txt_loc.Enabled = true;
        btn_call.Visible = false;
        btn_cupdate.Visible = true;
        updatecall.Visible = true;
        btn_cupdate.Visible = true;
    }

    protected void Fpspread14_OnPreRender(object sender, EventArgs e)
    {
        try
        {
            if (check == true)
            {
                lbl_alertc.Visible = false;
                lbl_cerr.Visible = false;
                btn_remove.Visible = true;
                btn_cexit.Visible = true;
                string activerow = "";
                string activecol = "";
                string applno = "";
                string getquery = "";
                activerow = Fpspread14.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread14.ActiveSheetView.ActiveColumn.ToString();

                if (activerow.Trim() != "")
                {
                    applno = Convert.ToString(Fpspread14.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                }
                getquery = " select venue_name,Location  from venue_det where appl_no='" + applno + "'";
                getquery = getquery + " select interviewtime,CONVERT(varchar(20),interviewdate,103) as interviewdate from staff_appl_master where appl_no='" + applno + "' and interviewtime like '%:%'";
                ds = d2.select_method_wo_parameter(getquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    txt_venue.Text = ds.Tables[0].Rows[0]["venue_name"].ToString();
                    txt_loc.Text = ds.Tables[0].Rows[0]["Location"].ToString();
                    txt_date.Text = ds.Tables[1].Rows[0]["interviewdate"].ToString();
                    string time = ds.Tables[1].Rows[0]["interviewtime"].ToString();
                    string[] abc = time.Split(' ');

                    string ampm = abc[1];
                    string[] ab1 = abc[0].Split(':');
                    string hh = ab1[0];
                    string mm = ab1[1];

                    ddl_hour.SelectedIndex = ddl_hour.Items.IndexOf(ddl_hour.Items.FindByText(hh));
                    ddl_mm.SelectedIndex = ddl_mm.Items.IndexOf(ddl_mm.Items.FindByText(mm));
                    ddl_ampm.SelectedIndex = ddl_ampm.Items.IndexOf(ddl_ampm.Items.FindByText(ampm));
                }
            }
        }
        catch { }
    }

    protected void Cell15_Click(object sender, EventArgs e)
    {
        try
        {
            check = true;
            divSelect.Visible = true;
            bindperformance();
            filterstf.Visible = false;
            Fpspread19.Visible = false;
            cb_sinterviewdet.Visible = true;
            staffinterview.Visible = true;
            Fpspread20.Visible = true;
            cb_sinterviewdet.Checked = true;
            ddl_perform.Enabled = true;
            ddl_selectstatus.Enabled = true;
            txt_remarkrs.Enabled = true;
            btn_staffsave.Visible = false;
            btn_selupdate.Visible = true;

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#00aff0");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.Border.BorderSize = 0;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.Border.BorderColor = System.Drawing.Color.Transparent;
            Fpspread20.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

            FarPoint.Web.Spread.StyleInfo darkstyle1 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle1.Font.Name = "Book Antiqua";
            darkstyle1.Font.Size = FontUnit.Medium;

            Fpspread20.Sheets[0].AutoPostBack = false;
            Fpspread20.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread20.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread20.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            Fpspread20.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread20.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread20.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            Fpspread20.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            Fpspread20.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            Fpspread20.Sheets[0].RowHeader.Visible = false;
            Fpspread20.CommandBar.Visible = false;

            Fpspread20.Sheets[0].DefaultStyle = darkstyle1;
            Fpspread20.Sheets[0].RowCount = 0;
            Fpspread20.Sheets[0].ColumnCount = 7;
            Fpspread20.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread20.Sheets[0].ColumnHeader.Columns[0].Width = 50;
            Fpspread20.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpspread20.Columns[0].Width = 75;

            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Type";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            Fpspread20.Columns[1].Width = 100;

            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Name";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            Fpspread20.Columns[2].Width = 150;

            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Staff Code";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
            Fpspread20.Columns[3].Width = 150;

            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Address";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
            Fpspread20.Columns[4].Width = 100;

            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Phone";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
            Fpspread20.Columns[5].Width = 100;

            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 6].Text = "E-mail";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
            Fpspread20.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
            Fpspread20.Columns[6].Width = 300;
            lbl_salert.Visible = false;
            Fpspread20.Visible = true;
            Fpspread20.Sheets[0].PageSize = Fpspread20.Sheets[0].RowCount;
        }
        catch { }
    }

    protected void Fpspread15_render(object sender, EventArgs e)
    {
        try
        {
            if (check == true)
            {
                string activerow = "";
                string activecol = "";
                string applno = "";
                string getquery = "";
                activerow = Fpspread15.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread15.ActiveSheetView.ActiveColumn.ToString();
                string collcode = Convert.ToString(ddlcollege.SelectedItem.Value);

                if (activerow.Trim() != "")
                    applno = Convert.ToString(Fpspread15.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);

                getquery = " select interviewstatus,selperformance,selremarks from staff_appl_master where appl_no='" + applno + "' and college_code='" + collcode + "'";
                getquery = getquery + " select appl_no,status,candidate,contact_addr,contact_ph,staff_code,email_id from inteviewer where appl_no ='" + applno + "'";

                ds = d2.select_method_wo_parameter(getquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string interviewstat = ds.Tables[0].Rows[0]["interviewstatus"].ToString();
                    string performance = ds.Tables[0].Rows[0]["selperformance"].ToString();
                    string perform = d2.GetFunction("select textval from textvaltable where TextCode='" + performance + "' and college_code='" + collcode + "'");
                    string rmks = ds.Tables[0].Rows[0]["selremarks"].ToString();
                    ddl_perform.SelectedIndex = ddl_perform.Items.IndexOf(ddl_perform.Items.FindByText(perform));
                    ddl_selectstatus.SelectedIndex = ddl_selectstatus.Items.IndexOf(ddl_selectstatus.Items.FindByText(interviewstat));
                    txt_remarkrs.Text = rmks;

                    string stat = ds.Tables[1].Rows[0]["status"].ToString();
                    string stauts = "";
                    if (stat == "1")
                        stauts = "Internal";
                    if (stat == "2")
                        stauts = "External";
                    for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                    {
                        string name = ds.Tables[1].Rows[i]["candidate"].ToString();
                        string aplno = ds.Tables[1].Rows[i]["appl_no"].ToString();
                        string deptname = d2.GetFunction("select dept_name from staff_appl_master where appl_no='" + aplno + "' and college_code='" + collcode + "'");
                        string addr = ds.Tables[1].Rows[i]["contact_addr"].ToString();
                        string stfcode = ds.Tables[1].Rows[i]["staff_code"].ToString();
                        string phoneno = ds.Tables[1].Rows[i]["contact_ph"].ToString();
                        string email = ds.Tables[1].Rows[i]["email_id"].ToString();

                        Fpspread20.Sheets[0].RowCount = i + 1;
                        Fpspread20.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                        Fpspread20.Sheets[0].Cells[i, 1].Text = stauts;
                        Fpspread20.Sheets[0].Cells[i, 2].Text = name;
                        Fpspread20.Sheets[0].Cells[i, 3].Text = stfcode;
                        Fpspread20.Sheets[0].Cells[i, 4].Text = addr;
                        Fpspread20.Sheets[0].Cells[i, 5].Text = phoneno;
                        Fpspread20.Sheets[0].Cells[i, 6].Text = email;
                    }
                }
            }
        }
        catch { }
    }

    protected void tbappno_OnTextChanged(object sender, EventArgs e)
    {
        string appl = tbappno.Text;
        if (appl.Trim() != "" && appl != null)
        {
            string checkapl = d2.GetFunction("select distinct appl_no from staff_appl_master where appl_no='" + appl + "'");
            if (checkapl.Trim() == "" || checkapl == null || checkapl == "0" || checkapl == "-1")
            {

            }
            else
            {
                ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert(' Application No Already Exist')", true);
                tbappno.Text = "";
            }
        }
    }

    protected void txtappstfapplcode_change(object sender, EventArgs e)
    {
        txtappstfname.Text = "";
    }

    protected void txtappstfcode_change(object sender, EventArgs e)
    {
        txtappstfname.Text = "";
    }

    protected void txtappstfname_change(object sender, EventArgs e)
    {
        txtappstfapplcode.Text = "";
        txtappstfcode.Text = "";
    }

    protected void txt_aptscode_OnTextChanged(object sender, EventArgs e)
    {
        string stfcode = txt_aptscode.Text;
        if (stfcode.Trim() != "" && stfcode != null)
        {
            string queryacr = d2.GetFunction("select distinct staff_code from staffmaster where staff_code='" + stfcode + "'");
            if (queryacr.Trim() == "" || queryacr == null || queryacr == "0" || queryacr == "-1")
            {
                lblstf.Visible = true;
                lblstfalert.Visible = false;
                lblstf.Text = "Not Exist";
            }
            else
            {
                lblstfalert.Visible = true;
                lblstfalert.Text = "Exist";
                txt_aptscode.Text = "";
                lblstf.Visible = false;
            }
        }
    }

    protected void txt_transscode_OnTextChanged(object sender, EventArgs e)
    {
        string stfcode = txt_transscode.Text;
        if (stfcode.Trim() != "" && stfcode != null)
        {
            string queryacr = d2.GetFunction("select distinct staff_code from staffmaster where staff_code='" + stfcode + "'");
            if (queryacr.Trim() == "" || queryacr == null || queryacr == "0" || queryacr == "-1")
            {
                lbl_tralert.Visible = true;
                lbl_trerr.Visible = false;
                lbl_tralert.Text = "Not Exist";
            }
            else
            {
                lbl_trerr.Visible = true;
                txt_transscode.Text = "";
                lbl_trerr.Text = "Exist";
                lbl_tralert.Visible = false;
            }
        }
    }

    protected void txt_stfdate_Change(object sender, EventArgs e)
    {
        try
        {
            string getfrmdt = Convert.ToString(txt_stfdate.Text);
            DateTime frmdt = getspldt(getfrmdt);
            string gettodt = Convert.ToString(txt_stdate.Text);
            DateTime todt = getspldt(gettodt);
            if (frmdt > todt)
            {
                txt_stfdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txt_stdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                lbl_salert.Visible = true;
                lbl_salert.Text = "Start Date Should be less than End Date!";
            }
            else
            {
                lbl_salert.Visible = false;
            }
        }
        catch { }
    }

    protected void txt_transdate_Change(object sender, EventArgs e)
    {
        try
        {
            string gettrannsdt = Convert.ToString(txt_transdate.Text);
            DateTime frmdt = getspldt(gettrannsdt);
            if (frmdt > DateTime.Now.Date || frmdt < DateTime.Now.Date)
                txt_transdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            else
                lbl_trserr.Visible = false;
        }
        catch { }
    }

    protected void txt_stdate_Change(object sender, EventArgs e)
    {
        try
        {
            string getfrmdt = Convert.ToString(txt_stfdate.Text);
            DateTime frmdt = getspldt(getfrmdt);
            string gettodt = Convert.ToString(txt_stdate.Text);
            DateTime todt = getspldt(gettodt);
            if (todt < frmdt)
            {
                txt_stfdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txt_stdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                lbl_salert.Visible = true;
                lbl_salert.Text = "End Date Should be greater than Start Date!";
            }
            else
            {
                lbl_salert.Visible = false;
            }
        }
        catch { }
    }

    protected void txt_loandate_Change(object sender, EventArgs e)
    {
        try
        {
            string getloandt = Convert.ToString(txt_loandate.Text);
            DateTime frmdt = getspldt(getloandt);
            string getloanclosedt = Convert.ToString(txt_closeddate.Text);
            DateTime todt = getspldt(getloanclosedt);
            if (cb_closed.Checked == true)
            {
                if (frmdt > todt)
                {
                    txt_closeddate.Text = frmdt.AddDays(1).ToString("dd/MM/yyyy");
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "The Closed Date Should be greater than Loan Date!";
                }
            }
            else
            {
                if (frmdt < DateTime.Now.Date)
                {
                    txt_loandate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Please Select the Future/Present Date!";
                }
            }
        }
        catch { }
    }

    protected void txt_closeddate_Change(object sender, EventArgs e)
    {
        try
        {
            string getloandt = Convert.ToString(txt_loandate.Text);
            DateTime frmdt = getspldt(getloandt);
            string getloanclosedt = Convert.ToString(txt_closeddate.Text);
            DateTime todt = getspldt(getloanclosedt);
            if (frmdt > todt)
            {
                txt_closeddate.Text = frmdt.AddDays(1).ToString("dd/MM/yyyy");
                alertpopwindow.Visible = true;
                lblalerterr.Text = "The Closed Date Should be greater than Loan Date!";
            }
        }
        catch { }
    }

    protected void txt_appdate_Change(object sender, EventArgs e)
    {
        try
        {
            string getappdate = Convert.ToString(txt_appdate.Text);
            DateTime appdate = getspldt(getappdate);
            string getdob = Convert.ToString(txt_dop.Text);
            DateTime dob = getspldt(getdob);
            //if (appdate < dob || appdate > dob)
            //{
            //    txt_dop.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            //    txt_appdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            //}
            //else
            //{
            //    lbl_aplalert.Visible = false;
            //}

            if (appdate > dob)//|| appdate < dob //Add by sudhagar 30/06/2017
            {
                lbl_aplalert.Visible = false;
            }
            else
            {
                txt_dop.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_appdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }

        }
        catch { }
    }

    protected void txt_yofp_Change(object sender, EventArgs e)
    {
        try
        {
            string getappdate = Convert.ToString(txt_yofp.Text);
            DateTime appdate = getspldt(getappdate);
            if (appdate >= DateTime.Now.Date)
            {
                txt_yofp.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                lblqulivalidation.Visible = true;
                lblqulivalidation.Text = "Qualified Date Should be Past Date!";
                btnaddquli.Enabled = false;
            }
            else
            {
                lblqulivalidation.Visible = false;
                btnaddquli.Enabled = true;
            }
        }
        catch { }
    }

    private DateTime getspldt(string getdate)
    {
        DateTime dt = new DateTime();
        string[] newspl = new string[2];
        try
        {
            newspl = getdate.Split('/');
            dt = Convert.ToDateTime(newspl[1] + "/" + newspl[0] + "/" + newspl[2]);
        }
        catch { }
        return dt;
    }

    protected void btn_appexit_Click(object sender, EventArgs e)
    {
        App_div.Visible = false;
        sessionnull();
    }

    protected void Fpspread7_OnPreRender(object sender, EventArgs e)
    {
        try
        {
            if (check == true)
            {
                lbl_aplalert.Visible = false;
                btn_save.Text = "Update";
                bindcollege1();
                ddlcollege1.SelectedIndex = ddlcollege1.Items.IndexOf(ddlcollege1.Items.FindByValue(ddlcollege.SelectedItem.Value));  //Modified By Jeyaprakash on Nov 17th,2016
                ddlcollege1.Enabled = false;
                load();

                string activerow = "";
                string activecol = "";
                string applno = "";
                string getquery = "";
                activerow = Fpspread7.ActiveSheetView.ActiveRow.ToString();
                activecol = Fpspread7.ActiveSheetView.ActiveColumn.ToString();

                if (activerow.Trim() != "")
                    applno = Convert.ToString(Fpspread7.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                tbappno.Text = applno;
                tbappno.Enabled = false;
                getquery = "select *,CONVERT(varchar(20),date_of_birth,103) as date_of_birth,CONVERT(varchar(20),dateofapply,103) as dateofapply from staff_appl_master where appl_no='" + applno + "'";
                ds = d2.select_method_wo_parameter(getquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    txt_firstname.Text = ds.Tables[0].Rows[0]["appl_name"].ToString();
                    txt_fathername.Text = ds.Tables[0].Rows[0]["father_name"].ToString();
                    string title = ds.Tables[0].Rows[0]["title"].ToString();
                    ddlstitle.SelectedIndex = ddlstitle.Items.IndexOf(ddlstitle.Items.FindByValue(title));
                    txt_middlename.Text = ds.Tables[0].Rows[0]["mid_name"].ToString();
                    txt_surname1.Text = ds.Tables[0].Rows[0]["mid_name"].ToString();
                    string gender = ds.Tables[0].Rows[0]["sex"].ToString();

                    if (gender == "Male")
                        rbmale.Checked = true;
                    else
                        rbfemale.Checked = true;
                    txt_dop.Text = ds.Tables[0].Rows[0]["date_of_birth1"].ToString();
                    txt_surname1.Text = ds.Tables[0].Rows[0]["nameacr"].ToString();
                    string bloodgrp = ds.Tables[0].Rows[0]["bldgrp"].ToString();
                    ddlbgroup.SelectedIndex = ddlbgroup.Items.IndexOf(ddlbgroup.Items.FindByValue(bloodgrp));
                    string maritalsts = ds.Tables[0].Rows[0]["martial_status"].ToString().Trim();
                    ddlmstatus.SelectedIndex = ddlmstatus.Items.IndexOf(ddlmstatus.Items.FindByText(maritalsts));
                    txt_appdate.Text = ds.Tables[0].Rows[0]["dateofapply1"].ToString();
                    string relig = ds.Tables[0].Rows[0]["religion"].ToString();
                    ddlreligion.SelectedIndex = ddlreligion.Items.IndexOf(ddlreligion.Items.FindByValue(relig));
                    string comm = ds.Tables[0].Rows[0]["Community"].ToString();
                    ddlcommunity.SelectedIndex = ddlcommunity.Items.IndexOf(ddlcommunity.Items.FindByValue(comm));
                    string caste = ds.Tables[0].Rows[0]["Caste"].ToString();
                    ddlcaste.SelectedIndex = ddlcaste.Items.IndexOf(ddlcaste.Items.FindByValue(caste));
                    string nationality = ds.Tables[0].Rows[0]["Nationality"].ToString();
                    if (nationality != "")
                        ddlnationality.SelectedIndex = ddlnationality.Items.IndexOf(ddlnationality.Items.FindByValue(nationality));
                    string exp = ds.Tables[0].Rows[0]["yofexp"].ToString();
                    ddl_experience.SelectedIndex = ddl_experience.Items.IndexOf(ddl_experience.Items.FindByText(exp));
                    string desig = ds.Tables[0].Rows[0]["desig_name"].ToString();
                    ddlpapplide.SelectedIndex = ddlpapplide.Items.IndexOf(ddlpapplide.Items.FindByText(desig));
                    string dept = ds.Tables[0].Rows[0]["dept_name"].ToString();
                    string deptcode = ds.Tables[0].Rows[0]["dept_code"].ToString();
                    ddldeptapplied.SelectedIndex = ddldeptapplied.Items.IndexOf(ddldeptapplied.Items.FindByValue(deptcode));

                    string fsub = ds.Tables[0].Rows[0]["subjects"].ToString();
                    ddlfsubjects.SelectedIndex = ddlfsubjects.Items.IndexOf(ddlfsubjects.Items.FindByValue(fsub));
                    string lang = ds.Tables[0].Rows[0]["language"].ToString();
                    ddllang.SelectedIndex = ddllang.Items.IndexOf(ddllang.Items.FindByValue(lang));
                    string handi = ds.Tables[0].Rows[0]["isphy"].ToString();
                    if (handi == "1")
                        rbyes.Checked = true;
                    else
                        rbno.Checked = true;
                    string padd = ds.Tables[0].Rows[0]["per_address"].ToString();
                    if (padd != "")
                    {
                        string[] ad = padd.Split(';');
                        if (ad.Length > 0)
                        {
                            txt_paddress.Text = ad[0];
                            if (ad.Length > 1)
                                txt_pstreet.Text = ad[1];
                        }
                    }
                    string pcity = ds.Tables[0].Rows[0]["pcity"].ToString();
                    string pdist = ds.Tables[0].Rows[0]["pdistrict"].ToString();
                    string pstate = ds.Tables[0].Rows[0]["pstate"].ToString();
                    ddlpcity.SelectedIndex = ddlpcity.Items.IndexOf(ddlpcity.Items.FindByValue(pcity));
                    ddlpdistirct.SelectedIndex = ddlpdistirct.Items.IndexOf(ddlpdistirct.Items.FindByValue(pdist));
                    ddlpstate.SelectedIndex = ddlpstate.Items.IndexOf(ddlpstate.Items.FindByValue(pstate));
                    txt_ppincode.Text = ds.Tables[0].Rows[0]["per_pincode"].ToString();
                    txt_presphone.Text = ds.Tables[0].Rows[0]["per_phone"].ToString();
                    txt_pmobile.Text = ds.Tables[0].Rows[0]["per_mobileno"].ToString();
                    txt_pfax.Text = ds.Tables[0].Rows[0]["per_fax"].ToString();
                    txt_pemail.Text = ds.Tables[0].Rows[0]["email"].ToString();

                    string cadd = ds.Tables[0].Rows[0]["comm_address"].ToString();
                    if (cadd != "")
                    {
                        string[] cd = cadd.Split(';');
                        if (cd.Length > 0)
                        {
                            txt_caddress.Text = cd[0];
                            if (cd.Length > 1)
                                txt_cstreet.Text = cd[1];
                        }
                    }
                    string ccity = ds.Tables[0].Rows[0]["ccity"].ToString();
                    ddlccity.SelectedIndex = ddlccity.Items.IndexOf(ddlccity.Items.FindByValue(ccity));
                    string cdist = ds.Tables[0].Rows[0]["cdistrict"].ToString();
                    ddlcdistrict.SelectedIndex = ddlcdistrict.Items.IndexOf(ddlcdistrict.Items.FindByValue(cdist));
                    string cstate = ds.Tables[0].Rows[0]["cstate"].ToString();
                    ddlcstate.SelectedIndex = ddlcstate.Items.IndexOf(ddlcstate.Items.FindByValue(cstate));
                    txt_cpincode.Text = ds.Tables[0].Rows[0]["com_pincode"].ToString();
                    txt_cresphone.Text = ds.Tables[0].Rows[0]["com_phone"].ToString();
                    txt_cmobileno.Text = ds.Tables[0].Rows[0]["com_mobileno"].ToString();
                    txt_cfax.Text = ds.Tables[0].Rows[0]["com_fax"].ToString();
                    txt_cremarks.Text = ds.Tables[0].Rows[0]["remarks"].ToString();

                    string gadd = ds.Tables[0].Rows[0]["guard_info"].ToString();
                    if (gadd != "")
                    {
                        string[] gad = gadd.Split(';');
                        if (gad.Length > 0)
                        {
                            txt_gname.Text = gad[0];
                            txt_gaddress.Text = gad[2];
                            txt_gstreet.Text = gad[3];
                            ddlgcity.SelectedIndex = ddlgcity.Items.IndexOf(ddlgcity.Items.FindByValue(gad[4]));
                            ddlgdistrict.SelectedIndex = ddlgdistrict.Items.IndexOf(ddlgdistrict.Items.FindByValue(gad[5]));
                            ddlgstate.SelectedIndex = ddlgstate.Items.IndexOf(ddlgstate.Items.FindByValue(gad[6]));
                            txt_gpincode.Text = gad[7];
                            txt_gresphone.Text = gad[8];
                            txt_gmobileno.Text = gad[9];
                            ddlgrelation.SelectedIndex = ddlgrelation.Items.IndexOf(ddlgrelation.Items.FindByValue(gad[1]));
                        }
                    }
                    string refre = ds.Tables[0].Rows[0]["referee_info"].ToString();
                    if (refre != "")
                    {
                        string[] refr = refre.Split(';');
                        if (refr.Length > 0)
                        {
                            txt_refname.Text = refr[0];
                            txt_refaddress.Text = refr[1];
                            txt_refstreet.Text = refr[2];
                            ddlrefcity.SelectedIndex = ddlrefcity.Items.IndexOf(ddlrefcity.Items.FindByValue(refr[3]));
                            ddlrdistrict.SelectedIndex = ddlrdistrict.Items.IndexOf(ddlrdistrict.Items.FindByValue(refr[4]));
                            ddlrefstate.SelectedIndex = ddlrefstate.Items.IndexOf(ddlrefstate.Items.FindByValue(refr[5]));
                            txt_refpincode.Text = refr[6];
                            txt_refresphoneno.Text = refr[7];
                            txt_refresmobileno.Text = refr[8];
                            txt_refcompany.Text = refr[9];
                            txt_refdesignation.Text = refr[10];
                        }
                    }

                    string finfo = ds.Tables[0].Rows[0]["family_info"].ToString();
                    if (finfo != "")
                    {
                        string[] f = finfo.Split('\\');
                        if (f.Length > 0)
                        {
                            int row = 0;
                            DataTable dt = new DataTable();
                            getfamilyheader(dt);
                            DataRow dr;

                            for (int l = 0; l < f.Length; l++)
                            {
                                string[] f1 = f[l].Split(';');
                                if (f1.Length >= 7)
                                {
                                    string relation = d2.GetFunction("select TextVal from TextValTable where TextCode='" + f1[4] + "' ");
                                    string qual = d2.GetFunction("select TextVal from TextValTable where TextCode='" + f1[5] + "' ");
                                    string stat = d2.GetFunction("select TextVal from TextValTable where TextCode='" + f1[6] + "' ");

                                    dr = dt.NewRow();
                                    dr[0] = l + 1;
                                    dr[1] = f1[1];
                                    dr[2] = f1[2];
                                    dr[3] = f1[3];
                                    dr[4] = relation;
                                    dr[5] = f1[4];
                                    dr[6] = qual;
                                    dr[7] = f1[5];
                                    dr[8] = stat;
                                    dr[9] = f1[6];
                                    dr[10] = f1[7];
                                    dt.Rows.Add(dr);

                                    ddlrstatus.SelectedIndex = ddlrstatus.Items.IndexOf(ddlrstatus.Items.FindByText(stat));
                                    ddlrqualification.SelectedIndex = ddlrqualification.Items.IndexOf(ddlrqualification.Items.FindByText(qual));
                                    ddlrelationship.SelectedIndex = ddlrelationship.Items.IndexOf(ddlrelationship.Items.FindByText(relation));
                                    Session["dt"] = dt;
                                }
                            }
                            if (dt.Rows.Count > 0)
                            {
                                Familyinfo_grid.DataSource = dt;
                                Familyinfo_grid.DataBind();
                            }
                            Familyinfo_grid.Visible = true;
                        }
                    }
                    string applid = d2.GetFunction("select appl_id from staff_appl_master where appl_no='" + applno + "'");
                    string staffdet = "select DetailType,IsOwncollege,Convert(varchar(20),ExpFromDate,103) as ExpFromDate ,Convert(varchar(20),ExpToDate,103) as ExpToDate ,ExpYear,ExpMOnth,ExpOrganization,ExpDesig,ExpIn,ReasonforReleive,CurrentSalary,AdditionalDuties,Graduation,Degree,Specialization,PassYear,University,Institution,Percentage,Grade,Class,IsOwncollege,ExpYear,ExpMOnth,ExpOrganization,ExpDesig,ExpIn,ReasonforReleive,CurrentSalary,AdditionalDuties from StaffDetails where Appl_ID='" + applid + "' and DetailType='1'";
                    dv = d2.select_method_wo_parameter(staffdet, "Text");
                    if (dv.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt1 = new DataTable();
                        dt1.Columns.Add("S.No");
                        dt1.Columns.Add("Graduation");
                        dt1.Columns.Add("Degree");
                        dt1.Columns.Add("Specialization");
                        dt1.Columns.Add("Year Of Passing");
                        dt1.Columns.Add("University");
                        dt1.Columns.Add("Institution");
                        dt1.Columns.Add("Percentage");
                        dt1.Columns.Add("Grade");
                        dt1.Columns.Add("Class");
                        dt1.Columns.Add("Graduation_code");
                        dt1.Columns.Add("Degree_code");
                        dt1.Columns.Add("Specialization_code");
                        dt1.Columns.Add("University_code");
                        dt1.Columns.Add("Institution_code");

                        for (int sk = 0; sk < dv.Tables[0].Rows.Count; sk++)
                        {
                            string graduation = dv.Tables[0].Rows[sk]["Graduation"].ToString();
                            string degree = dv.Tables[0].Rows[sk]["Degree"].ToString();
                            string spec = dv.Tables[0].Rows[sk]["Specialization"].ToString();
                            string yearofpass = dv.Tables[0].Rows[sk]["PassYear"].ToString();
                            string univ = dv.Tables[0].Rows[sk]["University"].ToString();
                            string instittute = dv.Tables[0].Rows[sk]["Institution"].ToString();
                            string percentage = dv.Tables[0].Rows[sk]["Percentage"].ToString();
                            string grade = dv.Tables[0].Rows[sk]["Grade"].ToString();
                            string clas = dv.Tables[0].Rows[sk]["Class"].ToString();
                            DataRow dr1;

                            dr1 = dt1.NewRow();
                            string grad = d2.GetFunction("select TextVal from TextValTable where TextCode='" + graduation + "' ");
                            string deg = d2.GetFunction("select TextVal from TextValTable where TextCode='" + degree + "' ");
                            string special = d2.GetFunction("select TextVal from TextValTable where TextCode='" + spec + "' ");
                            string univers = d2.GetFunction("select TextVal from TextValTable where TextCode='" + univ + "' ");
                            string inst = d2.GetFunction("select TextVal from TextValTable where TextCode='" + instittute + "' ");

                            dr1[0] = sk + 1;
                            dr1[1] = grad;
                            dr1[2] = deg;
                            dr1[3] = special;
                            dr1[4] = yearofpass;
                            dr1[5] = univers;
                            dr1[6] = inst;
                            dr1[7] = percentage;
                            dr1[8] = grade;
                            dr1[9] = clas;
                            dr1[10] = graduation;
                            dr1[11] = degree;
                            dr1[12] = spec;
                            dr1[13] = univ;
                            dr1[14] = instittute;

                            dt1.Rows.Add(dr1);
                            Session["dtq"] = dt1;
                        }
                        if (dt1.Rows.Count > 0)
                        {
                            qualification_grid.DataSource = dt1;
                            qualification_grid.DataBind();
                        }
                        qualification_grid.Visible = true;
                    }
                    dv.Clear();
                    staffdet = "select DetailType,IsOwncollege,Convert(varchar(20),ExpFromDate,103) as ExpFromDate ,Convert(varchar(20),ExpToDate,103) as ExpToDate ,ExpYear,ExpMOnth,ExpOrganization,ExpDesig,ExpIn,ReasonforReleive,CurrentSalary,AdditionalDuties,Graduation,Degree,Specialization,PassYear,University,Institution,Percentage,Grade,Class,IsOwncollege,ExpYear,ExpMOnth,ExpOrganization,ExpDesig,ExpIn,ReasonforReleive,CurrentSalary,AdditionalDuties from StaffDetails where Appl_ID='" + applid + "' and DetailType='2'";
                    dv = d2.select_method_wo_parameter(staffdet, "Text");
                    if (dv.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt2 = new DataTable();
                        dt2.Columns.Add("S.No");
                        dt2.Columns.Add("College");
                        dt2.Columns.Add("From");
                        dt2.Columns.Add("To");
                        dt2.Columns.Add("Oraganization");
                        dt2.Columns.Add("Designation");
                        dt2.Columns.Add("Experience in");
                        dt2.Columns.Add("Year");
                        dt2.Columns.Add("Month");
                        dt2.Columns.Add("Salary");
                        dt2.Columns.Add("Reasons for relieving");
                        dt2.Columns.Add("Duties");
                        dt2.Columns.Add("Oraganization_code");
                        dt2.Columns.Add("Designation_code");
                        dt2.Columns.Add("Experiencein_code");
                        dt2.Columns.Add("Reasonsrelieving_code");

                        for (int sk = 0; sk < dv.Tables[0].Rows.Count; sk++)
                        {
                            string coll = dv.Tables[0].Rows[sk]["IsOwncollege"].ToString();
                            if (coll.Trim().ToLower() == "false" || coll.Trim().ToLower() == "0")
                            {
                                coll = "Own";
                            }
                            else
                            {
                                coll = "Other";
                            }
                            string from = dv.Tables[0].Rows[sk]["ExpFromDate"].ToString();
                            string to = dv.Tables[0].Rows[sk]["ExpToDate"].ToString();
                            string org = dv.Tables[0].Rows[sk]["ExpOrganization"].ToString();
                            string desg = dv.Tables[0].Rows[sk]["ExpDesig"].ToString();
                            string exper = dv.Tables[0].Rows[sk]["ExpIn"].ToString();
                            string yr = dv.Tables[0].Rows[sk]["ExpYear"].ToString();
                            string month = dv.Tables[0].Rows[sk]["ExpMOnth"].ToString();
                            string sal = dv.Tables[0].Rows[sk]["CurrentSalary"].ToString();
                            string reason = dv.Tables[0].Rows[sk]["ReasonforReleive"].ToString();
                            string duty = dv.Tables[0].Rows[sk]["AdditionalDuties"].ToString();
                            string orgs = "";
                            if (coll == "Own")
                            {
                                orgs = d2.GetFunction("select collname from collinfo where college_code='" + collegecode1 + "'");
                            }
                            else
                            {
                                orgs = d2.GetFunction("select TextVal from TextValTable where TextCode='" + org + "' ");
                            }
                            string dsg = d2.GetFunction("select desig_name from  desig_master where desig_code='" + desg + "' ");
                            string expin = d2.GetFunction("select TextVal from TextValTable where TextCode='" + exper + "' ");
                            string rr = d2.GetFunction("select TextVal from TextValTable where TextCode='" + reason + "' ");

                            DataRow dr2;
                            dr2 = dt2.NewRow();

                            dr2[0] = sk + 1;
                            dr2[1] = coll;
                            if (from.Trim() == "01/01/1900" || String.IsNullOrEmpty(from.Trim()))
                                dr2[2] = "-";
                            else
                                dr2[2] = from;
                            if (to.Trim() == "01/01/1900" || String.IsNullOrEmpty(to.Trim()))
                                dr2[3] = "-";
                            else
                                dr2[3] = to;
                            dr2[4] = orgs;
                            if (dsg.Trim() == "0")
                                dr2[5] = "-";
                            else
                                dr2[5] = dsg;
                            dr2[6] = expin;
                            dr2[7] = yr;
                            dr2[8] = month;
                            dr2[9] = sal;
                            dr2[10] = rr;
                            dr2[11] = duty;
                            dr2[12] = org;
                            dr2[13] = desg;
                            dr2[14] = exper;
                            dr2[15] = reason;
                            dt2.Rows.Add(dr2);
                            Session["dte"] = dt2;
                        }
                        if (dt2.Rows.Count > 0)
                        {
                            Experience_grid.DataSource = dt2;
                            Experience_grid.DataBind();
                        }
                        Experience_grid.Visible = true;
                    }

                    dv.Clear();
                    string staffdets = "select othercertnum,othercertname from StaffDetails where Appl_ID ='" + applid + "' and DetailType='3'";//delsi2410
                    dv = d2.select_method_wo_parameter(staffdets, "Text");

                    if (dv.Tables[0].Rows.Count > 0)
                    {
                        DataTable dt2 = new DataTable();
                        dt2.Columns.Add("S.No");
                        dt2.Columns.Add("CertificateName");
                        dt2.Columns.Add("CertificateNumber");

                        for (int othr = 0; othr < dv.Tables[0].Rows.Count; othr++)
                        {
                            string othrcertnum = dv.Tables[0].Rows[othr]["othercertnum"].ToString();
                            string othrcertnam = dv.Tables[0].Rows[othr]["othercertname"].ToString();
                            DataRow dr2;
                            dr2 = dt2.NewRow();

                            dr2[0] = othr + 1;
                            dr2[1] = othrcertnam;
                            dr2[2] = othrcertnum;
                            dt2.Rows.Add(dr2);
                            Session["dtother"] = dt2;

                        }
                        if (dt2.Rows.Count > 0)
                        {
                            grdothers.DataSource = dt2;
                            grdothers.DataBind();
                        }
                        grdothers.Visible = true;
                    }

                    string satnd = ds.Tables[0].Rows[0]["Seminar_Attnd"].ToString();
                    if (satnd != "")
                    {
                        string[] sat = satnd.Split('\\');
                        if (sat.Length > 0)
                        {
                            DataTable dt3 = new DataTable();
                            dt3.Columns.Add("S.No");
                            dt3.Columns.Add("Type");
                            dt3.Columns.Add("Name Of The Program");
                            dt3.Columns.Add("From Date");
                            dt3.Columns.Add("To Date");
                            dt3.Columns.Add("Place");
                            dt3.Columns.Add("Sponsored");
                            dt3.Columns.Add("Title");
                            dt3.Columns.Add("");
                            dt3.Columns.Add("");
                            dt3.Columns.Add("");
                            dt3.Columns.Add("");
                            dt3.Columns.Add("");

                            DataRow dr3;
                            for (int n = 0; n < sat.Length; n++)
                            {
                                if (sat[n] != "")
                                {
                                    string[] st = sat[n].Split(';');
                                    dr3 = dt3.NewRow();
                                    string type = d2.GetFunction("select TextVal from TextValTable where TextCode='" + st[1] + "' ");
                                    string name = d2.GetFunction("select TextVal from TextValTable where TextCode='" + st[2] + "' ");
                                    string palce = d2.GetFunction("select TextVal from TextValTable where TextCode='" + st[5] + "' ");
                                    string sponser = d2.GetFunction("select TextVal from TextValTable where TextCode='" + st[6] + "' ");
                                    string titl = d2.GetFunction("select TextVal from TextValTable where TextCode='" + st[7] + "' ");
                                    dr3[0] = n + 1;
                                    dr3[1] = type;
                                    dr3[2] = name;
                                    dr3[3] = st[3];
                                    dr3[4] = st[4];
                                    dr3[5] = palce;
                                    dr3[6] = sponser;
                                    dr3[7] = titl;
                                    dr3[8] = st[1];
                                    dr3[9] = st[2];
                                    dr3[10] = st[5];
                                    dr3[11] = st[6];
                                    dr3[12] = st[7];

                                    dt3.Rows.Add(dr3);
                                    Session["dtsa"] = dt3;
                                }
                            }
                            if (dt3.Rows.Count > 0)
                            {
                                Seminar_grid.DataSource = dt3;
                                Seminar_grid.DataBind();
                            }
                            Seminar_grid.Visible = true;
                        }
                    }
                    string sorg = ds.Tables[0].Rows[0]["Seminar_Org"].ToString();
                    if (sorg != "")
                    {
                        string[] sor = sorg.Split('\\');
                        if (sor.Length > 0)
                        {
                            DataTable dt4 = new DataTable();
                            dt4.Columns.Add("S.No");
                            dt4.Columns.Add("Name Of The Program");
                            dt4.Columns.Add("From Date");
                            dt4.Columns.Add("To Date");
                            dt4.Columns.Add("Place");
                            dt4.Columns.Add("Title");
                            dt4.Columns.Add("Letter Ref No");
                            dt4.Columns.Add("");
                            dt4.Columns.Add("");
                            dt4.Columns.Add("");

                            DataRow dr4;

                            for (int p = 0; p < sor.Length; p++)
                            {
                                if (sor[p] != "")
                                {
                                    string[] srg = sor[p].Split(';');
                                    dr4 = dt4.NewRow();
                                    string pname = d2.GetFunction("select TextVal from TextValTable where TextCode='" + srg[1] + "' ");
                                    string place = d2.GetFunction("select TextVal from TextValTable where TextCode='" + srg[4] + "' ");
                                    string tit = d2.GetFunction("select TextVal from TextValTable where TextCode='" + srg[5] + "' ");
                                    dr4[0] = p + 1;
                                    dr4[1] = pname;
                                    dr4[2] = srg[2];
                                    dr4[3] = srg[3];
                                    dr4[4] = place;
                                    dr4[5] = tit;
                                    dr4[6] = srg[6];
                                    dr4[7] = srg[1];
                                    dr4[8] = srg[4];
                                    dr4[9] = srg[5];
                                    dt4.Rows.Add(dr4);
                                    Session["dtso"] = dt4;
                                }
                            }
                            if (dt4.Rows.Count > 0)
                            {
                                SeminarOrgs_grid.DataSource = dt4;
                                SeminarOrgs_grid.DataBind();
                            }
                            SeminarOrgs_grid.Visible = true;
                        }
                    }
                    string jpub = ds.Tables[0].Rows[0]["Journal_Publication"].ToString();
                    if (jpub != "")
                    {
                        string[] pub = jpub.Split('\\');
                        if (pub.Length > 0)
                        {
                            DataTable dt5 = new DataTable();
                            dt5.Columns.Add("S.No");
                            dt5.Columns.Add("National/International");
                            dt5.Columns.Add("Name Of The Journal");
                            dt5.Columns.Add("Publisher");
                            dt5.Columns.Add("Volume");
                            dt5.Columns.Add("Issue No");
                            dt5.Columns.Add("Periadicity");
                            dt5.Columns.Add("Period");
                            dt5.Columns.Add("Page No");
                            dt5.Columns.Add("Title");
                            dt5.Columns.Add("");
                            dt5.Columns.Add("");
                            dt5.Columns.Add("");
                            dt5.Columns.Add("");
                            dt5.Columns.Add("");

                            DataRow dr5;

                            for (int q = 0; q < pub.Length; q++)
                            {
                                if (pub[q] != "")
                                {
                                    string[] jp = pub[q].Split(';');
                                    dr5 = dt5.NewRow();
                                    string typ = d2.GetFunction("select TextVal from TextValTable where TextCode='" + jp[1] + "' ");
                                    string name = d2.GetFunction("select TextVal from TextValTable where TextCode='" + jp[2] + "' ");
                                    string publish = d2.GetFunction("select TextVal from TextValTable where TextCode='" + jp[3] + "' ");
                                    string period = d2.GetFunction("select TextVal from TextValTable where TextCode='" + jp[6] + "' ");
                                    string tit = d2.GetFunction("select TextVal from TextValTable where TextCode='" + jp[9] + "' ");

                                    dr5[0] = q + 1;
                                    dr5[1] = typ;
                                    dr5[2] = name;
                                    dr5[3] = publish;
                                    dr5[4] = jp[4];
                                    dr5[5] = jp[5];
                                    dr5[6] = period;
                                    dr5[7] = jp[7];
                                    dr5[8] = jp[8];
                                    dr5[9] = tit;
                                    dr5[10] = jp[1];
                                    dr5[11] = jp[2];
                                    dr5[12] = jp[3];
                                    dr5[13] = jp[6];
                                    dr5[14] = jp[9];
                                    dt5.Rows.Add(dr5);
                                    Session["dtj"] = dt5;
                                }
                            }
                            if (dt5.Rows.Count > 0)
                            {
                                JournalPub1.DataSource = dt5;
                                JournalPub1.DataBind();
                            }
                            JournalPub1.Visible = true;
                        }
                    }
                    string bkp = ds.Tables[0].Rows[0]["Books_Published"].ToString();
                    if (bkp != "")
                    {
                        string[] bkpub = bkp.Split('\\');
                        if (bkpub.Length > 0)
                        {
                            DataTable dt6 = new DataTable();
                            dt6.Columns.Add("S.No");
                            dt6.Columns.Add("Year Of Publication");
                            dt6.Columns.Add("Name Of The Publisher");
                            dt6.Columns.Add("Address Of The Publisher");
                            dt6.Columns.Add("Title Of The Book");
                            dt6.Columns.Add("Cost Of The Book");
                            dt6.Columns.Add("");
                            dt6.Columns.Add("");

                            DataRow dr6;

                            for (int r = 0; r < bkpub.Length; r++)
                            {
                                if (bkpub[r] != "")
                                {
                                    string[] bk = bkpub[r].Split(';');
                                    dr6 = dt6.NewRow();
                                    string name = d2.GetFunction("select TextVal from TextValTable where TextCode='" + bk[2] + "' ");
                                    string tit = d2.GetFunction("select TextVal from TextValTable where TextCode='" + bk[4] + "' ");
                                    dr6[0] = r + 1;
                                    dr6[1] = bk[1];
                                    dr6[2] = name;
                                    dr6[3] = bk[3];
                                    dr6[4] = tit;
                                    dr6[5] = bk[5];
                                    dr6[6] = bk[2];
                                    dr6[7] = bk[4];
                                    dt6.Rows.Add(dr6);
                                    Session["dtbk"] = dt6;
                                }
                            }
                            if (dt6.Rows.Count > 0)
                            {
                                Book_grid.DataSource = dt6;
                                Book_grid.DataBind();
                            }
                            Book_grid.Visible = true;
                        }
                    }
                    string ebookdet = ds.Tables[0].Rows[0]["Editor_Details"].ToString();
                    if (ebookdet != "")
                    {
                        string[] ebd = ebookdet.Split('\\');
                        if (ebd.Length > 0)
                        {
                            DataTable dt15 = new DataTable();
                            dt15.Columns.Add("S.No");
                            dt15.Columns.Add("Type");
                            dt15.Columns.Add("Year Of Publication");
                            dt15.Columns.Add("Name of the Publisher");
                            dt15.Columns.Add("Address Of The Publisher");
                            dt15.Columns.Add("Title Of The Book");
                            dt15.Columns.Add("Cost Of The Book");
                            dt15.Columns.Add("");
                            dt15.Columns.Add("");
                            dt15.Columns.Add("");

                            DataRow dr15;

                            for (int s = 0; s < ebd.Length; s++)
                            {
                                if (ebd[s] != "")
                                {
                                    string[] ed = ebd[s].Split(';');
                                    dr15 = dt15.NewRow();
                                    string type = d2.GetFunction("select TextVal from TextValTable where TextCode='" + ed[1] + "' ");
                                    string name = d2.GetFunction("select TextVal from TextValTable where TextCode='" + ed[3] + "' ");
                                    string tit = d2.GetFunction("select TextVal from TextValTable where TextCode='" + ed[5] + "' ");
                                    dr15[0] = s + 1;
                                    dr15[1] = type;
                                    dr15[2] = ed[2];
                                    dr15[3] = name;
                                    dr15[4] = ed[4];
                                    dr15[5] = tit;
                                    dr15[6] = ed[6];
                                    dr15[7] = ed[1];
                                    dr15[8] = ed[3];
                                    dr15[9] = ed[5];
                                    dt15.Rows.Add(dr15);
                                    Session["dtebk"] = dt15;
                                }
                            }

                            if (dt15.Rows.Count > 0)
                            {
                                EditorBook_grid.DataSource = dt15;
                                EditorBook_grid.DataBind();
                            }
                            EditorBook_grid.Visible = true;
                        }
                    }
                    string award = ds.Tables[0].Rows[0]["Award"].ToString();
                    if (award != "")
                    {
                        string[] awd = award.Split('\\');
                        if (awd.Length > 0)
                        {
                            DataTable dt7 = new DataTable();
                            dt7.Columns.Add("S.No");
                            dt7.Columns.Add("Year");
                            dt7.Columns.Add("Name Of The Award");
                            dt7.Columns.Add("Name Of The Organization");
                            dt7.Columns.Add("Address");
                            dt7.Columns.Add("Nature of the Award");
                            dt7.Columns.Add("");
                            dt7.Columns.Add("");
                            dt7.Columns.Add("");

                            DataRow dr7;

                            for (int t = 0; t < awd.Length; t++)
                            {
                                if (awd[t] != "")
                                {
                                    string[] aw = awd[t].Split(';');
                                    dr7 = dt7.NewRow();
                                    string name = d2.GetFunction("select TextVal from TextValTable where TextCode='" + aw[2] + "' ");
                                    string oname = d2.GetFunction("select TextVal from TextValTable where TextCode='" + aw[3] + "' ");
                                    string nawd = d2.GetFunction("select TextVal from TextValTable where TextCode='" + aw[5] + "' ");
                                    dr7[0] = t + 1;
                                    dr7[1] = aw[1];
                                    dr7[2] = name;
                                    dr7[3] = oname;
                                    dr7[4] = aw[4];
                                    dr7[5] = nawd;
                                    dr7[6] = aw[2];
                                    dr7[7] = aw[3];
                                    dr7[8] = aw[5];
                                    dt7.Rows.Add(dr7);
                                    Session["dtaw"] = dt7;
                                }
                            }

                            if (dt7.Rows.Count > 0)
                            {
                                Award_grid.DataSource = dt7;
                                Award_grid.DataBind();
                            }
                            Award_grid.Visible = true;
                        }
                    }
                    string pdet = ds.Tables[0].Rows[0]["project_info"].ToString();
                    if (pdet != "")
                    {
                        string[] prd = pdet.Split('\\');
                        if (prd.Length > 0)
                        {
                            DataTable dt8 = new DataTable();
                            dt8.Columns.Add("S.No");
                            dt8.Columns.Add("Title");
                            dt8.Columns.Add("From");
                            dt8.Columns.Add("To");
                            dt8.Columns.Add("Remarks");
                            dt8.Columns.Add("");

                            DataRow dr8;

                            for (int u = 0; u < prd.Length; u++)
                            {
                                if (prd[u] != "")
                                {
                                    string[] pd = prd[u].Split(';');
                                    dr8 = dt8.NewRow();
                                    string tit = d2.GetFunction("select TextVal from TextValTable where TextCode='" + pd[1] + "' ");
                                    dr8[0] = u + 1;
                                    dr8[1] = tit;
                                    dr8[2] = pd[2];
                                    dr8[3] = pd[3];
                                    dr8[4] = pd[4];
                                    dr8[5] = pd[1];
                                    dt8.Rows.Add(dr8);
                                    Session["dtpd"] = dt8;
                                }
                            }

                            if (dt8.Rows.Count > 0)
                            {
                                project_detail_grid.DataSource = dt8;
                                project_detail_grid.DataBind();
                            }
                            project_detail_grid.Visible = true;
                        }
                    }
                    string resdet = ds.Tables[0].Rows[0]["research_info"].ToString();
                    if (resdet != "")
                    {
                        string[] rsd = resdet.Split('\\');
                        if (rsd.Length > 0)
                        {
                            DataTable dt9 = new DataTable();
                            dt9.Columns.Add("S.No");
                            dt9.Columns.Add("Name");
                            dt9.Columns.Add("Type");
                            dt9.Columns.Add("Student Research Type");
                            dt9.Columns.Add("Remarks");
                            dt9.Columns.Add("");
                            dt9.Columns.Add("");
                            dt9.Columns.Add("");

                            DataRow dr9;

                            for (int v = 0; v < rsd.Length; v++)
                            {
                                if (rsd[v] != "")
                                {
                                    string[] rd = rsd[v].Split(';');
                                    dr9 = dt9.NewRow();
                                    dr9[0] = v + 1;
                                    string name = d2.GetFunction("select TextVal from TextValTable where TextCode='" + rd[1] + "' ");
                                    string typ = d2.GetFunction("select TextVal from TextValTable where TextCode='" + rd[2] + "' ");
                                    string rtyp = d2.GetFunction("select TextVal from TextValTable where TextCode='" + rd[3] + "' ");
                                    dr9[1] = name;
                                    dr9[2] = typ;
                                    dr9[3] = rtyp;
                                    dr9[4] = rd[4];
                                    dr9[5] = rd[1];
                                    dr9[6] = rd[2];
                                    dr9[7] = rd[3];
                                    dt9.Rows.Add(dr9);
                                    Session["dtrd"] = dt9;
                                }
                            }

                            if (dt9.Rows.Count > 0)
                            {
                                Research_grid.DataSource = dt9;
                                Research_grid.DataBind();
                            }
                            Research_grid.Visible = true;
                        }
                    }
                    string pgrnt = ds.Tables[0].Rows[0]["Project_Grants"].ToString();
                    if (pgrnt != "")
                    {
                        string[] prg = pgrnt.Split('\\');
                        if (prg.Length > 0)
                        {
                            DataTable dt10 = new DataTable();
                            dt10.Columns.Add("S.No");
                            dt10.Columns.Add("Year");
                            dt10.Columns.Add("Project Grant Recievd Name ");
                            dt10.Columns.Add("Project Grant Recievd Address");
                            dt10.Columns.Add("Title Of The Projects");
                            dt10.Columns.Add("Amount Of Grant Recieved");
                            dt10.Columns.Add("Letter No ");
                            dt10.Columns.Add("Date");
                            dt10.Columns.Add("");
                            dt10.Columns.Add("");

                            DataRow dr10;

                            for (int w = 0; w < prg.Length; w++)
                            {
                                if (prg[w] != "")
                                {
                                    string[] pg = prg[w].Split(';');
                                    dr10 = dt10.NewRow();

                                    string name = d2.GetFunction("select TextVal from TextValTable where TextCode='" + pg[2] + "' ");
                                    string titi = d2.GetFunction("select TextVal from TextValTable where TextCode='" + pg[4] + "' ");
                                    dr10[0] = w + 1;
                                    dr10[1] = pg[1];
                                    dr10[2] = name;
                                    dr10[3] = pg[3];
                                    dr10[4] = titi;
                                    dr10[5] = pg[5];
                                    dr10[6] = pg[6];
                                    dr10[7] = pg[7];
                                    dr10[8] = pg[2];
                                    dr10[9] = pg[4];
                                    dt10.Rows.Add(dr10);
                                    Session["dtpg"] = dt10;
                                }
                            }

                            if (dt10.Rows.Count > 0)
                            {
                                PGrants_grid.DataSource = dt10;
                                PGrants_grid.DataBind();
                            }
                            PGrants_grid.Visible = true;
                        }
                    }
                    string patentr = ds.Tables[0].Rows[0]["Patent_Received"].ToString();
                    if (patentr != "")
                    {
                        string[] ptr = patentr.Split('\\');

                        if (ptr.Length > 0)
                        {
                            DataTable dt11 = new DataTable();
                            dt11.Columns.Add("S.No");
                            dt11.Columns.Add("Year");
                            dt11.Columns.Add("Patent Given By(Authority Name)");
                            dt11.Columns.Add("Address");
                            dt11.Columns.Add("Title Of The Patent");
                            dt11.Columns.Add("Approval letter No");
                            dt11.Columns.Add("Approval date");
                            dt11.Columns.Add("Certificate No");
                            dt11.Columns.Add("Certificate Date");
                            dt11.Columns.Add("");
                            dt11.Columns.Add("");

                            DataRow dr11;

                            for (int x = 0; x < ptr.Length; x++)
                            {
                                if (ptr[x] != "")
                                {
                                    string[] pr = ptr[x].Split(';');
                                    dr11 = dt11.NewRow();
                                    dr11[0] = x + 1;
                                    string name = d2.GetFunction("select TextVal from TextValTable where TextCode='" + pr[2] + "' ");
                                    string tit = d2.GetFunction("select TextVal from TextValTable where TextCode='" + pr[4] + "' ");
                                    dr11[1] = pr[1];
                                    dr11[2] = name;
                                    dr11[3] = pr[3];
                                    dr11[4] = tit;
                                    dr11[5] = pr[5];
                                    dr11[6] = pr[6];
                                    dr11[7] = pr[7];
                                    dr11[8] = pr[8];
                                    dr11[9] = pr[2];
                                    dr11[10] = pr[4];
                                    dt11.Rows.Add(dr11);
                                    Session["dtpr"] = dt11;
                                }
                            }

                            if (dt11.Rows.Count > 0)
                            {
                                Patent_grid.DataSource = dt11;
                                Patent_grid.DataBind();
                            }
                            Patent_grid.Visible = true;
                        }
                    }
                    string guides = ds.Tables[0].Rows[0]["Guide_Ship"].ToString();
                    if (guides != "")
                    {
                        string[] gds = guides.Split('\\');
                        if (gds.Length > 0)
                        {
                            DataTable dt12 = new DataTable();
                            dt12.Columns.Add("S.No");
                            dt12.Columns.Add("Year");
                            dt12.Columns.Add("Nature Of The Guideship(Ph.D/Project)");
                            dt12.Columns.Add("Title Of The Project/Thesis");
                            dt12.Columns.Add("");
                            dt12.Columns.Add("");

                            DataRow dr12;

                            for (int y = 0; y < gds.Length; y++)
                            {
                                if (gds[y] != "")
                                {
                                    string[] gs = gds[y].Split(';');
                                    dr12 = dt12.NewRow();
                                    dr12[0] = y + 1;
                                    string nat = d2.GetFunction("select TextVal from TextValTable where TextCode='" + gs[2] + "' ");
                                    string tit = d2.GetFunction("select TextVal from TextValTable where TextCode='" + gs[3] + "' ");
                                    dr12[1] = gs[1];
                                    dr12[2] = nat;
                                    dr12[3] = tit;
                                    dr12[4] = gs[2];
                                    dr12[5] = gs[3];
                                    dt12.Rows.Add(dr12);
                                    Session["dtgs"] = dt12;
                                }
                            }

                            if (dt12.Rows.Count > 0)
                            {
                                Guide_grid.DataSource = dt12;
                                Guide_grid.DataBind();
                            }
                            Guide_grid.Visible = true;
                        }
                    }

                    string profm = ds.Tables[0].Rows[0]["Prof_Membership"].ToString();
                    if (profm != "")
                    {
                        string[] pfm = profm.Split('\\');
                        if (pfm.Length > 0)
                        {
                            DataTable dt13 = new DataTable();
                            dt13.Columns.Add("S.No");
                            dt13.Columns.Add("Name");
                            dt13.Columns.Add("Address");
                            dt13.Columns.Add("Joined Year");
                            dt13.Columns.Add("Membership No");
                            dt13.Columns.Add("");

                            DataRow dr13;

                            for (int z = 0; z < pfm.Length; z++)
                            {
                                if (pfm[z] != "")
                                {
                                    string[] fm = pfm[z].Split(';');
                                    dr13 = dt13.NewRow();
                                    string name = d2.GetFunction("select TextVal from TextValTable where TextCode='" + fm[1] + "' ");
                                    dr13[0] = z + 1;
                                    dr13[1] = name;
                                    dr13[2] = fm[2];
                                    dr13[3] = fm[3];
                                    dr13[4] = fm[4];
                                    dr13[5] = fm[1];
                                    dt13.Rows.Add(dr13);
                                    Session["dtmm"] = dt13;
                                }
                            }

                            if (dt13.Rows.Count > 0)
                            {
                                Professionalm_grid.DataSource = dt13;
                                Professionalm_grid.DataBind();
                            }
                            Professionalm_grid.Visible = true;
                        }
                    }

                    string adminm = ds.Tables[0].Rows[0]["Adm_Membership"].ToString();
                    if (adminm != "")
                    {
                        string[] adm = adminm.Split('\\');
                        if (adm.Length > 0)
                        {
                            DataTable dt14 = new DataTable();
                            dt14.Columns.Add("S.No");
                            dt14.Columns.Add("Name Of The Committee");
                            dt14.Columns.Add("From");
                            dt14.Columns.Add("To");
                            dt14.Columns.Add("Nature Of Duty");
                            dt14.Columns.Add("Achievements Made During This Period");
                            dt14.Columns.Add("");

                            DataRow dr14;

                            for (int c = 0; c < adm.Length; c++)
                            {
                                if (adm[c] != "")
                                {
                                    string[] am = adm[c].Split(';');
                                    dr14 = dt14.NewRow();
                                    string name = d2.GetFunction("select TextVal from TextValTable where TextCode='" + am[1] + "' ");
                                    dr14[0] = c + 1;
                                    dr14[1] = name;
                                    dr14[2] = am[2];
                                    dr14[3] = am[3];
                                    dr14[4] = am[4];
                                    dr14[5] = am[5];
                                    dr14[6] = am[1];
                                    dt14.Rows.Add(dr14);
                                    Session["dtcmt"] = dt14;
                                }
                            }

                            if (dt14.Rows.Count > 0)
                            {
                                Administrative_grid.DataSource = dt14;
                                Administrative_grid.DataBind();
                            }
                            Administrative_grid.Visible = true;
                        }
                    }//delsisref
                }
            }
        }
        catch { }
    }

    protected void Familyinfo_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int a = Convert.ToInt32(e.CommandArgument);
            ViewState["fg"] = a;

            string sno = ((Familyinfo_grid.Rows[a].FindControl("lbl_S_No") as Label).Text);
            string name = ((Familyinfo_grid.Rows[a].FindControl("lbl_fmlyname") as Label).Text);
            string age = ((Familyinfo_grid.Rows[a].FindControl("lbl_fmlyage") as Label).Text);
            string gender = ((Familyinfo_grid.Rows[a].FindControl("lbl_fmlygender") as Label).Text);
            string relation = ((Familyinfo_grid.Rows[a].FindControl("lbl_fmlyrelationshipcode") as Label).Text);
            string qualification = ((Familyinfo_grid.Rows[a].FindControl("lbl_fmlyqulificationcode") as Label).Text);
            string status = ((Familyinfo_grid.Rows[a].FindControl("lbl_statuscode") as Label).Text);
            string income = ((Familyinfo_grid.Rows[a].FindControl("lbl_fmlyincome") as Label).Text);
            FamilyInfo.Visible = true;

            ddlrelationship.SelectedIndex = ddlrelationship.Items.IndexOf(ddlrelationship.Items.FindByValue(relation));
            name = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(name);
            if (name.Trim().ToLower() == "&nbsp;")
                txt_rname.Text = "";
            else
                txt_rname.Text = name;
            if (age.Trim().ToLower() == "&nbsp;")
                txt_rage.Text = "";
            else
                txt_rage.Text = age;
            ddlrqualification.SelectedIndex = ddlrqualification.Items.IndexOf(ddlrqualification.Items.FindByValue(qualification));
            if (gender.ToUpper() == "MALE")
            {
                rbrmale.Checked = true;
                rbrfemale.Checked = false;
            }
            if (gender.ToUpper() == "FEMALE")
            {
                rbrmale.Checked = false;
                rbrfemale.Checked = true;
            }
            ddlrstatus.SelectedIndex = ddlrstatus.Items.IndexOf(ddlrstatus.Items.FindByValue(status));
            if (income.Trim().ToLower() == "&nbsp;")
                txt_rincome.Text = "";
            else
                txt_rincome.Text = income;
            btnfamilyadd.Visible = false;
            btnfailyupdate.Visible = true;
            btn_fdelete.Visible = true;
        }
        catch { }
    }

    protected void Familyinfo_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Familyinfo_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Familyinfo_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Familyinfo_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Familyinfo_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Familyinfo_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Familyinfo_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[6].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Familyinfo_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[7].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Familyinfo_grid, "Select$" +
e.Row.RowIndex);

            btnfamilyadd.Visible = false;
            btnfailyupdate.Visible = true;
            btn_fdelete.Visible = true;
        }
        else
        {

        }
    }

    protected void qualification_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int b = Convert.ToInt32(e.CommandArgument);
            ViewState["qg"] = b;

            string graduation = ((qualification_grid.Rows[b].FindControl("lbl_grad") as Label).Text);
            string deg = ((qualification_grid.Rows[b].FindControl("lbl_deg") as Label).Text);
            string specialization = ((qualification_grid.Rows[b].FindControl("lbl_special") as Label).Text);
            string yop = ((qualification_grid.Rows[b].FindControl("lbl_yearofpass") as Label).Text);
            string university = ((qualification_grid.Rows[b].FindControl("lbl_univerc") as Label).Text);
            string institute = ((qualification_grid.Rows[b].FindControl("lbl_Institution") as Label).Text);
            string percent = ((qualification_grid.Rows[b].FindControl("lbl_percentage") as Label).Text);
            string grd = ((qualification_grid.Rows[b].FindControl("lbl_grade") as Label).Text);
            string cls = ((qualification_grid.Rows[b].FindControl("lbl_class") as Label).Text);

            Qualification.Visible = true;
            ddlgraduation.SelectedIndex = ddlgraduation.Items.IndexOf(ddlgraduation.Items.FindByText(graduation));
            ddldegreeinfromation.SelectedIndex = ddldegreeinfromation.Items.IndexOf(ddldegreeinfromation.Items.FindByText(deg));
            ddlspecalization.SelectedIndex = ddlspecalization.Items.IndexOf(ddlspecalization.Items.FindByText(specialization));
            txt_yofp.Text = yop;
            ddluniversity.SelectedIndex = ddluniversity.Items.IndexOf(ddluniversity.Items.FindByText(university));
            ddlinstitution.SelectedIndex = ddlinstitution.Items.IndexOf(ddlinstitution.Items.FindByText(institute));
            if (percent.Trim().ToLower() == "&nbsp;")
                txt_percentage1.Text = "";
            else
                txt_percentage1.Text = percent;
            if (grd.Trim().ToLower() == "&nbsp;")
                txt_grade.Text = "";
            else
                txt_grade.Text = grd;
            if (cls.Trim().ToLower() == "&nbsp;")
                txt_class.Text = "";
            else
                txt_class.Text = cls;
            btnaddquli.Visible = false;
            btnupdatequli.Visible = true;
            btn_qdelete.Visible = true;
        }
        catch { }
    }

    protected void qualification_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.qualification_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.qualification_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.qualification_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.qualification_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.qualification_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.qualification_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[6].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.qualification_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[7].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.qualification_grid, "Select$" +
e.Row.RowIndex);
            e.Row.Cells[8].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.qualification_grid, "Select$" +
e.Row.RowIndex);

            btnaddquli.Visible = false;
            btnupdatequli.Visible = true;
            btn_qdelete.Visible = true;
        }
        else
        {

        }
    }

    protected void Experience_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);
            ViewState["eg"] = c;

            string college = ((Experience_grid.Rows[c].FindControl("lbl_College") as Label).Text);
            string from = ((Experience_grid.Rows[c].FindControl("lbl_From") as Label).Text);
            string to = ((Experience_grid.Rows[c].FindControl("lbl_To") as Label).Text);
            string org = ((Experience_grid.Rows[c].FindControl("lbl_Oraganization") as Label).Text);
            string desig = ((Experience_grid.Rows[c].FindControl("lbl_Designation") as Label).Text);
            string exp = ((Experience_grid.Rows[c].FindControl("lbl_Experiencein") as Label).Text);
            string year = ((Experience_grid.Rows[c].FindControl("lbl_Year") as Label).Text);
            string month = ((Experience_grid.Rows[c].FindControl("lbl_Month") as Label).Text);
            string sal = ((Experience_grid.Rows[c].FindControl("lbl_Salary") as Label).Text);
            string rr = ((Experience_grid.Rows[c].FindControl("lbl_Reasonsrelieving") as Label).Text);
            string duties = ((Experience_grid.Rows[c].FindControl("lbl_Duties") as Label).Text);

            Experience.Visible = true;
            if (from.Trim() == "-")
                txt_fromdate.Text = Convert.ToString("01/01/1900");
            else
                txt_fromdate.Text = from;
            if (to.Trim() == "-")
                txt_todate.Text = Convert.ToString("01/01/1900");
            else
                txt_todate.Text = to;

            if (college == "Own")
            {
                rbowncollege.Checked = true;
                rbothercollege.Checked = false;
                ddlorganization.Enabled = false;
                bindorganizationCollege();
            }
            if (college == "Other")
            {
                bindorgnaization();
                rbothercollege.Checked = true;
                rbowncollege.Checked = false;
                ddlorganization.Enabled = true;
            }
            if (year.Trim().ToLower() == "&nbsp;")
                txt_year.Text = "";
            else
                txt_year.Text = year;
            if (month.Trim().ToLower() == "&nbsp;")
                txt_month.Text = "";
            else
                txt_month.Text = month;

            ddlorganization.SelectedIndex = ddlorganization.Items.IndexOf(ddlorganization.Items.FindByText(org));
            if (desig.Trim() == "-")
                ddldesignationexp.SelectedIndex = 0;
            else
                ddldesignationexp.SelectedIndex = ddldesignationexp.Items.IndexOf(ddldesignationexp.Items.FindByText(desig));
            ddlexpin.SelectedIndex = ddlexpin.Items.IndexOf(ddlexpin.Items.FindByText(exp));
            ddlrforr.SelectedIndex = ddlrforr.Items.IndexOf(ddlrforr.Items.FindByText(rr));
            if (sal.Trim().ToLower() == "&nbsp;")
                txt_salary.Text = "";
            else
                txt_salary.Text = sal;
            if (duties.Trim().ToLower() == "&nbsp;")
                txt_addduties.Text = "";
            else
                txt_addduties.Text = duties;
            btnexperienceadd.Visible = false;
            btnexperienceupdate.Visible = true;
            btn_edelete.Visible = true;
            btnexpexit.Visible = true;
        }
        catch { }
    }

    protected void Experience_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[6].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[7].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" +
e.Row.RowIndex);
            e.Row.Cells[8].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" +
e.Row.RowIndex);
            e.Row.Cells[9].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" +
e.Row.RowIndex);
            e.Row.Cells[10].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" +
e.Row.RowIndex);
            e.Row.Cells[11].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Experience_grid, "Select$" +
e.Row.RowIndex);

            btnexperienceadd.Visible = false;
            btnexperienceupdate.Visible = true;
            btn_edelete.Visible = true;
            btnexpexit.Visible = true;
        }
        else
        {
        }
    }

    protected void Seminar_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);
            ViewState["sag"] = c;
            string type = Convert.ToString(Seminar_grid.Rows[c].Cells[1].Text);
            string pname = Convert.ToString(Seminar_grid.Rows[c].Cells[2].Text);
            string from = Convert.ToString(Seminar_grid.Rows[c].Cells[3].Text);
            string to = Convert.ToString(Seminar_grid.Rows[c].Cells[4].Text);
            string place = Convert.ToString(Seminar_grid.Rows[c].Cells[5].Text);
            string sponser = Convert.ToString(Seminar_grid.Rows[c].Cells[6].Text);
            string title = Convert.ToString(Seminar_grid.Rows[c].Cells[7].Text);

            SeminarAttend.Visible = true;

            ddlsemtype.SelectedIndex = ddlsemtype.Items.IndexOf(ddlsemtype.Items.FindByText(type));
            ddlprogramname.SelectedIndex = ddlprogramname.Items.IndexOf(ddlprogramname.Items.FindByText(pname));
            txt_semfromdate.Text = from;
            txt_semtodate.Text = to;
            ddlplace.SelectedIndex = ddlplace.Items.IndexOf(ddlplace.Items.FindByText(place));
            ddlsponsored.SelectedIndex = ddlsponsored.Items.IndexOf(ddlsponsored.Items.FindByText(sponser));
            ddlstile.SelectedIndex = ddlstile.Items.IndexOf(ddlstile.Items.FindByText(title));
            btnsemattenadd1.Visible = false;
            btnsemattenupdate.Visible = true;
            btn_sadelete.Visible = true;
        }
        catch { }
    }

    protected void Seminar_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Seminar_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Seminar_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Seminar_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Seminar_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Seminar_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Seminar_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[6].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Seminar_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[7].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Seminar_grid, "Select$" +
e.Row.RowIndex);

            e.Row.Cells[8].Visible = false;
            e.Row.Cells[9].Visible = false;
            e.Row.Cells[10].Visible = false;
            e.Row.Cells[11].Visible = false;
            e.Row.Cells[12].Visible = false;

            btnsemattenadd1.Visible = false;
            btnsemattenupdate.Visible = true;
            btn_sadelete.Visible = true;
        }
        else
        {
            e.Row.Cells[8].Visible = false;
            e.Row.Cells[9].Visible = false;
            e.Row.Cells[10].Visible = false;
            e.Row.Cells[11].Visible = false;
            e.Row.Cells[12].Visible = false;
        }
    }

    protected void SeminarOrgs_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);
            ViewState["sog"] = c;
            string pname = Convert.ToString(SeminarOrgs_grid.Rows[c].Cells[1].Text);
            string from = Convert.ToString(SeminarOrgs_grid.Rows[c].Cells[2].Text);
            string to = Convert.ToString(SeminarOrgs_grid.Rows[c].Cells[3].Text);
            string place = Convert.ToString(SeminarOrgs_grid.Rows[c].Cells[4].Text);
            string title = Convert.ToString(SeminarOrgs_grid.Rows[c].Cells[5].Text);
            string letter = Convert.ToString(SeminarOrgs_grid.Rows[c].Cells[6].Text);

            SeminarOrgs.Visible = true;
            ddlorgname.SelectedIndex = ddlorgname.Items.IndexOf(ddlorgname.Items.FindByText(pname));
            txt_orgfromdate.Text = from;
            txt_orgtodate.Text = to;
            ddlorgplace.SelectedIndex = ddlorgplace.Items.IndexOf(ddlorgplace.Items.FindByText(place));
            ddlorgtitle.SelectedIndex = ddlorgtitle.Items.IndexOf(ddlorgtitle.Items.FindByText(title));
            if (letter.Trim().ToLower() == "&nbsp;")
                txt_letteregno.Text = "";
            else
                txt_letteregno.Text = letter;
            btnsemorgnizeadd.Visible = false;
            btnsemorgnizeupdate.Visible = true;
            btn_sodelete.Visible = true;
        }
        catch { }
    }

    protected void SeminarOrgs_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.SeminarOrgs_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.SeminarOrgs_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.SeminarOrgs_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.SeminarOrgs_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.SeminarOrgs_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.SeminarOrgs_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[6].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.SeminarOrgs_grid, "Select$" + e.Row.RowIndex);

            e.Row.Cells[7].Visible = false;
            e.Row.Cells[8].Visible = false;
            e.Row.Cells[9].Visible = false;

            btnsemorgnizeadd.Visible = false;
            btnsemorgnizeupdate.Visible = true;
            btn_sodelete.Visible = true;
        }
        else
        {
            e.Row.Cells[7].Visible = false;
            e.Row.Cells[8].Visible = false;
            e.Row.Cells[9].Visible = false;
        }
    }

    protected void JournalPub1_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int b = Convert.ToInt32(e.CommandArgument);
            ViewState["jg"] = b;
            string type = Convert.ToString(JournalPub1.Rows[b].Cells[1].Text);
            string jname = Convert.ToString(JournalPub1.Rows[b].Cells[2].Text);
            string pub = Convert.ToString(JournalPub1.Rows[b].Cells[3].Text);
            string vol = Convert.ToString(JournalPub1.Rows[b].Cells[4].Text);
            string issue = Convert.ToString(JournalPub1.Rows[b].Cells[5].Text);
            string periodicity = Convert.ToString(JournalPub1.Rows[b].Cells[6].Text);
            string period = Convert.ToString(JournalPub1.Rows[b].Cells[7].Text);
            string pno = Convert.ToString(JournalPub1.Rows[b].Cells[8].Text);
            string title = Convert.ToString(JournalPub1.Rows[b].Cells[9].Text);
            Journal.Visible = true;
            ddljtype.SelectedIndex = ddljtype.Items.IndexOf(ddljtype.Items.FindByText(type));
            ddljname.SelectedIndex = ddljname.Items.IndexOf(ddljname.Items.FindByText(jname));
            ddlpublisher.SelectedIndex = ddlpublisher.Items.IndexOf(ddlpublisher.Items.FindByText(pub));
            if (vol.Trim().ToLower() == "&nbsp;")
                txt_volumeno.Text = "";
            else
                txt_volumeno.Text = vol;
            if (issue.Trim().ToLower() == "&nbsp;")
                txt_issueno.Text = "";
            else
                txt_issueno.Text = issue;

            ddlperiodicity.SelectedIndex = ddlperiodicity.Items.IndexOf(ddlperiodicity.Items.FindByText(periodicity));
            if (period.Trim().ToLower() == "&nbsp;")
                txt_preiod.Text = "";
            else
                txt_preiod.Text = period;
            if (pno.Trim().ToLower() == "&nbsp;")
                txt_pageno.Text = "";
            else
                txt_pageno.Text = pno;

            ddljtitle.SelectedIndex = ddljtitle.Items.IndexOf(ddljtitle.Items.FindByText(title));
            btnjournapublicationladd.Visible = false;
            btnjournapublicationlupdate.Visible = true;
            btn_jdelete.Visible = true;

        }
        catch { }
    }

    protected void JournalPub1_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.JournalPub1, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.JournalPub1, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.JournalPub1, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.JournalPub1, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.JournalPub1, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.JournalPub1, "Select$" + e.Row.RowIndex);
            e.Row.Cells[6].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.JournalPub1, "Select$" + e.Row.RowIndex);
            e.Row.Cells[7].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.JournalPub1, "Select$" +
e.Row.RowIndex);
            e.Row.Cells[8].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.JournalPub1, "Select$" +
e.Row.RowIndex);
            e.Row.Cells[9].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.JournalPub1, "Select$" +
e.Row.RowIndex);

            e.Row.Cells[10].Visible = false;
            e.Row.Cells[11].Visible = false;
            e.Row.Cells[12].Visible = false;
            e.Row.Cells[13].Visible = false;
            e.Row.Cells[14].Visible = false;

            btnjournapublicationladd.Visible = false;
            btnjournapublicationlupdate.Visible = true;
            btn_jdelete.Visible = true;
        }
        else
        {
            e.Row.Cells[10].Visible = false;
            e.Row.Cells[11].Visible = false;
            e.Row.Cells[12].Visible = false;
            e.Row.Cells[13].Visible = false;
            e.Row.Cells[14].Visible = false;
        }
    }

    protected void Book_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);
            ViewState["bkg"] = c;
            string year = Convert.ToString(Book_grid.Rows[c].Cells[1].Text);
            string pname = Convert.ToString(Book_grid.Rows[c].Cells[2].Text);
            string add = Convert.ToString(Book_grid.Rows[c].Cells[3].Text);
            string title = Convert.ToString(Book_grid.Rows[c].Cells[4].Text);
            string cob = Convert.ToString(Book_grid.Rows[c].Cells[5].Text);

            Book.Visible = true;
            txt_byear.Text = year;
            ddlbpname.SelectedIndex = ddlbpname.Items.IndexOf(ddlbpname.Items.FindByText(pname));
            if (add.Trim().ToLower() == "&nbsp;")
                txt_bpaddress.Text = "";
            else
                txt_bpaddress.Text = add;

            ddlbptitle.SelectedIndex = ddlbptitle.Items.IndexOf(ddlbptitle.Items.FindByText(title));
            if (cob.Trim().ToLower() == "&nbsp;")
                txt_costofbook.Text = "";
            else
                txt_costofbook.Text = cob;
            btnbookspublishedadd.Visible = false;
            btnbookspublishedupdate.Visible = true;
            btn_bkdelete.Visible = true;
        }
        catch { }
    }

    protected void Book_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Book_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Book_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Book_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Book_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Book_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Book_grid, "Select$" + e.Row.RowIndex);

            e.Row.Cells[6].Visible = false;
            e.Row.Cells[7].Visible = false;

            btnbookspublishedadd.Visible = false;
            btnbookspublishedupdate.Visible = true;
            btn_bkdelete.Visible = true;
        }
        else
        {
            e.Row.Cells[6].Visible = false;
            e.Row.Cells[7].Visible = false;
        }
    }

    protected void EditorBook_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);
            ViewState["ebkg"] = c;
            string type = Convert.ToString(EditorBook_grid.Rows[c].Cells[1].Text);
            string year = Convert.ToString(EditorBook_grid.Rows[c].Cells[2].Text);
            string pname = Convert.ToString(EditorBook_grid.Rows[c].Cells[3].Text);
            string add = Convert.ToString(EditorBook_grid.Rows[c].Cells[4].Text);
            string title = Convert.ToString(EditorBook_grid.Rows[c].Cells[5].Text);
            string cob = Convert.ToString(EditorBook_grid.Rows[c].Cells[6].Text);

            Editor.Visible = true;
            ddletype.SelectedIndex = ddletype.Items.IndexOf(ddletype.Items.FindByText(type));
            txt_eyear.Text = year;
            ddlepname.SelectedIndex = ddlepname.Items.IndexOf(ddlepname.Items.FindByText(pname));
            if (add.Trim().ToLower() == "&nbsp;")
                txt_eaddress.Text = "";
            else
                txt_eaddress.Text = add;

            ddletitle.SelectedIndex = ddletitle.Items.IndexOf(ddletitle.Items.FindByText(title));
            if (cob.Trim().ToLower() == "&nbsp;")
                txt_ecostofbook.Text = "";
            else
                txt_ecostofbook.Text = cob;

            btneditorbooksadd.Visible = false;
            btneditorbooksupdate.Visible = true;
            btn_ebkdelete.Visible = true;
        }
        catch { }
    }

    protected void EditorBook_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.EditorBook_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.EditorBook_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.EditorBook_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.EditorBook_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.EditorBook_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.EditorBook_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[6].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.EditorBook_grid, "Select$" + e.Row.RowIndex);

            e.Row.Cells[7].Visible = false;
            e.Row.Cells[8].Visible = false;
            e.Row.Cells[9].Visible = false;

            btneditorbooksadd.Visible = false;
            btneditorbooksupdate.Visible = true;
            btn_ebkdelete.Visible = true;
        }
        else
        {
            e.Row.Cells[7].Visible = false;
            e.Row.Cells[8].Visible = false;
            e.Row.Cells[9].Visible = false;
        }
    }

    protected void Award_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);

            ViewState["awg"] = c;
            string year = Convert.ToString(Award_grid.Rows[c].Cells[1].Text);
            string name = Convert.ToString(Award_grid.Rows[c].Cells[2].Text);
            string org = Convert.ToString(Award_grid.Rows[c].Cells[3].Text);
            string add = Convert.ToString(Award_grid.Rows[c].Cells[4].Text);
            string naw = Convert.ToString(Award_grid.Rows[c].Cells[5].Text);

            Award.Visible = true;

            txt_ayear.Text = year;
            ddlaname.SelectedIndex = ddlaname.Items.IndexOf(ddlaname.Items.FindByText(name));
            ddlaoaname.SelectedIndex = ddlaoaname.Items.IndexOf(ddlaoaname.Items.FindByText(org));
            if (add.Trim().ToLower() == "&nbsp;")
                txt_aaddress.Text = "";
            else
                txt_aaddress.Text = add;

            ddlanaward.SelectedIndex = ddlanaward.Items.IndexOf(ddlanaward.Items.FindByText(naw));
            btnawarddetailsadd.Visible = false;
            btnawarddetailsupdate.Visible = true;
            btn_awdelete.Visible = true;
        }
        catch { }
    }

    protected void Award_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Award_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Award_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Award_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Award_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Award_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Award_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[6].Visible = false;
            e.Row.Cells[7].Visible = false;
            e.Row.Cells[8].Visible = false;

            btnawarddetailsadd.Visible = false;
            btnawarddetailsupdate.Visible = true;
            btn_awdelete.Visible = true;
        }
        else
        {
            e.Row.Cells[6].Visible = false;
            e.Row.Cells[7].Visible = false;
            e.Row.Cells[8].Visible = false;
        }
    }

    protected void project_detail_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);

            ViewState["pdg"] = c;
            string title = Convert.ToString(project_detail_grid.Rows[c].Cells[1].Text);
            string from = Convert.ToString(project_detail_grid.Rows[c].Cells[2].Text);
            string to = Convert.ToString(project_detail_grid.Rows[c].Cells[3].Text);
            string rmks = Convert.ToString(project_detail_grid.Rows[c].Cells[4].Text);
            Project.Visible = true;

            ddlprojecttitle.SelectedIndex = ddlprojecttitle.Items.IndexOf(ddlprojecttitle.Items.FindByText(title));
            txt_projectfrom.Text = from;
            txt_projecto.Text = to;
            if (rmks.Trim().ToLower() == "&nbsp;")
                txt_prmks.Text = "";
            else
                txt_prmks.Text = rmks;
            btnprojectdetailsadd.Visible = false;
            btnprojectdetailsupdate.Visible = true;
            btn_pddelete.Visible = true;
        }
        catch { }
    }

    protected void project_detail_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.project_detail_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.project_detail_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.project_detail_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.project_detail_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.project_detail_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Visible = false;

            btnprojectdetailsadd.Visible = false;
            btnprojectdetailsupdate.Visible = true;
            btn_pddelete.Visible = true;
        }
        else
        {
            e.Row.Cells[5].Visible = false;
        }
    }

    protected void Research_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);
            ViewState["rg"] = c;

            string name = Convert.ToString(Research_grid.Rows[c].Cells[1].Text);
            string type = Convert.ToString(Research_grid.Rows[c].Cells[2].Text);
            string rtype = Convert.ToString(Research_grid.Rows[c].Cells[3].Text);
            string rmks = Convert.ToString(Research_grid.Rows[c].Cells[4].Text);
            Research.Visible = true;

            ddlresearchname.SelectedIndex = ddlresearchname.Items.IndexOf(ddlresearchname.Items.FindByText(name));
            ddlresearchtype.SelectedIndex = ddlresearchtype.Items.IndexOf(ddlresearchtype.Items.FindByText(type));
            ddlrrtype.SelectedIndex = ddlrrtype.Items.IndexOf(ddlrrtype.Items.FindByText(rtype));
            if (rmks.Trim().ToLower() == "&nbsp;")
                txt_rremarks.Text = "";
            else
                txt_rremarks.Text = rmks;
            btnresearachdetailsadd.Visible = false;
            btnresearchdetailsupdate.Visible = true;
            btn_rddelete.Visible = true;
        }
        catch { }
    }

    protected void Research_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Research_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Research_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Research_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Research_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Research_grid, "Select$" + e.Row.RowIndex);

            e.Row.Cells[5].Visible = false;
            e.Row.Cells[6].Visible = false;
            e.Row.Cells[7].Visible = false;

            btnresearachdetailsadd.Visible = false;
            btnresearchdetailsupdate.Visible = true;
            btn_rddelete.Visible = true;
        }
        else
        {
            e.Row.Cells[5].Visible = false;
            e.Row.Cells[6].Visible = false;
            e.Row.Cells[7].Visible = false;
        }
    }

    protected void PGrants_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int a = Convert.ToInt32(e.CommandArgument);
            ViewState["pgg"] = a;
            string year = Convert.ToString(PGrants_grid.Rows[a].Cells[1].Text);
            string name = Convert.ToString(PGrants_grid.Rows[a].Cells[2].Text);
            string addr = Convert.ToString(PGrants_grid.Rows[a].Cells[3].Text);
            string title = Convert.ToString(PGrants_grid.Rows[a].Cells[4].Text);
            string amt = Convert.ToString(PGrants_grid.Rows[a].Cells[5].Text);
            string letter = Convert.ToString(PGrants_grid.Rows[a].Cells[6].Text);
            string date = Convert.ToString(PGrants_grid.Rows[a].Cells[7].Text);

            Grants.Visible = true;
            txt_pgyear.Text = year;
            ddlpgname.SelectedIndex = ddlpgname.Items.IndexOf(ddlpgname.Items.FindByText(name));
            if (addr.Trim().ToLower() == "&nbsp;")
                txt_pgaddress.Text = "";
            else
                txt_pgaddress.Text = addr;

            ddlpgtitle.SelectedIndex = ddlpgtitle.Items.IndexOf(ddlpgtitle.Items.FindByText(title));
            if (amt.Trim().ToLower() == "&nbsp;")
                txt_pgamount.Text = "";
            else
                txt_pgamount.Text = amt;
            if (letter.Trim().ToLower() == "&nbsp;")
                txt_pgletterno.Text = "";
            else
                txt_pgletterno.Text = letter;

            txt_pgdate.Text = date;
            btnprojectgrantsadd.Visible = false;
            btnprojectgrantsupdate.Visible = true;
            btn_pgdelete.Visible = true;
        }
        catch { }
    }

    protected void PGrants_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.PGrants_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.PGrants_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.PGrants_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.PGrants_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.PGrants_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.PGrants_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[6].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.PGrants_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[7].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.PGrants_grid, "Select$" +
e.Row.RowIndex);
            e.Row.Cells[8].Visible = false;
            e.Row.Cells[9].Visible = false;

            btnprojectgrantsadd.Visible = false;
            btnprojectgrantsupdate.Visible = true;
            btn_pgdelete.Visible = true;
        }
        else
        {
            e.Row.Cells[8].Visible = false;
            e.Row.Cells[9].Visible = false;
        }
    }

    protected void Patent_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int a = Convert.ToInt32(e.CommandArgument);
            ViewState["ptg"] = a;
            string year = Convert.ToString(Patent_grid.Rows[a].Cells[1].Text);
            string name = Convert.ToString(Patent_grid.Rows[a].Cells[2].Text);
            string addr = Convert.ToString(Patent_grid.Rows[a].Cells[3].Text);
            string title = Convert.ToString(Patent_grid.Rows[a].Cells[4].Text);
            string letter = Convert.ToString(Patent_grid.Rows[a].Cells[5].Text);
            string date = Convert.ToString(Patent_grid.Rows[a].Cells[6].Text);
            string cert = Convert.ToString(Patent_grid.Rows[a].Cells[7].Text);
            string cdate = Convert.ToString(Patent_grid.Rows[a].Cells[8].Text);

            Patent.Visible = true;
            txt_pryear.Text = year;
            ddlprname.SelectedIndex = ddlprname.Items.IndexOf(ddlprname.Items.FindByText(name));
            if (addr.Trim().ToLower() == "&nbsp;")
                txt_praddress.Text = "";
            else
                txt_praddress.Text = addr;

            ddlprtitle.SelectedIndex = ddlprtitle.Items.IndexOf(ddlprtitle.Items.FindByText(title));
            if (cert.Trim().ToLower() == "&nbsp;")
                txt_prcerno.Text = "";
            else
                txt_prcerno.Text = cert;
            if (letter.Trim().ToLower() == "&nbsp;")
                txt_prletterno.Text = "";
            else
                txt_prletterno.Text = letter;

            txt_prdate.Text = date;
            txt_prcerdate.Text = cdate;

            btnpatentreceivedadd.Visible = false;
            btnpatentreceivedupdate.Visible = true;
            btn_ptdelete.Visible = true;
        }
        catch { }
    }

    protected void Patent_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Patent_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Patent_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Patent_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Patent_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Patent_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Patent_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[6].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Patent_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[7].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Patent_grid, "Select$" +
e.Row.RowIndex);
            e.Row.Cells[8].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Patent_grid, "Select$" +
e.Row.RowIndex);
            e.Row.Cells[9].Visible = false;
            e.Row.Cells[10].Visible = false;

            btnpatentreceivedadd.Visible = false;
            btnpatentreceivedupdate.Visible = true;
            btn_ptdelete.Visible = true;
        }
        else
        {
            e.Row.Cells[9].Visible = false;
            e.Row.Cells[10].Visible = false;
        }
    }

    protected void Guide_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);
            ViewState["gdg"] = c;
            string year = Convert.ToString(Guide_grid.Rows[c].Cells[1].Text);
            string nat = Convert.ToString(Guide_grid.Rows[c].Cells[2].Text);
            string tit = Convert.ToString(Guide_grid.Rows[c].Cells[3].Text);

            Guide.Visible = true;
            txt_gyear.Text = year;
            ddlnatureguide.SelectedIndex = ddlnatureguide.Items.IndexOf(ddlnatureguide.Items.FindByText(nat));
            ddlgtitle.SelectedIndex = ddlgtitle.Items.IndexOf(ddlgtitle.Items.FindByText(tit));
            btnguideshipadd.Visible = false;
            btnguideshipupdate.Visible = true;
            btn_gddelete.Visible = true;
        }
        catch { }
    }

    protected void Guide_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Guide_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Guide_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Guide_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Guide_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Visible = false;
            e.Row.Cells[5].Visible = false;

            btnguideshipadd.Visible = false;
            btnguideshipupdate.Visible = true;
            btn_gddelete.Visible = true;
        }
        else
        {
            e.Row.Cells[4].Visible = false;
            e.Row.Cells[5].Visible = false;
        }
    }

    protected void Professionalm_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);
            ViewState["prog"] = c;
            string name = Convert.ToString(Professionalm_grid.Rows[c].Cells[1].Text);
            string addr = Convert.ToString(Professionalm_grid.Rows[c].Cells[2].Text);
            string jyear = Convert.ToString(Professionalm_grid.Rows[c].Cells[3].Text);
            string memno = Convert.ToString(Professionalm_grid.Rows[c].Cells[4].Text);
            Professional.Visible = true;

            ddlpmname.SelectedIndex = ddlpmname.Items.IndexOf(ddlpmname.Items.FindByText(name));
            if (addr.Trim().ToLower() == "&nbsp;")
                txt_pmaddress.Text = "";
            else
                txt_pmaddress.Text = addr;

            txt_jyear.Text = jyear;
            if (memno.Trim().ToLower() == "&nbsp;")
                txt_pmno.Text = "";
            else
                txt_pmno.Text = memno;
            btnpmemberadd.Visible = false;
            btnpmemberupdate.Visible = true;
            btn_mmdelete.Visible = true;
        }
        catch { }
    }

    protected void Professionalm_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Professionalm_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Professionalm_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Professionalm_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Professionalm_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Professionalm_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Visible = false;

            btnpmemberadd.Visible = false;
            btnpmemberupdate.Visible = true;
            btn_mmdelete.Visible = true;
        }
        else
        {
            e.Row.Cells[5].Visible = false;
        }
    }

    protected void Administrative_grid_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int c = Convert.ToInt32(e.CommandArgument);
            ViewState["adming"] = c;
            string name = Convert.ToString(Administrative_grid.Rows[c].Cells[1].Text);
            string from = Convert.ToString(Administrative_grid.Rows[c].Cells[2].Text);
            string to = Convert.ToString(Administrative_grid.Rows[c].Cells[3].Text);
            string nat = Convert.ToString(Administrative_grid.Rows[c].Cells[4].Text);
            string achiv = Convert.ToString(Administrative_grid.Rows[c].Cells[5].Text);
            Administrative.Visible = true;

            ddlamname.SelectedIndex = ddlamname.Items.IndexOf(ddlamname.Items.FindByText(name));
            txt_amfromdate.Text = from;
            txt_amtodate.Text = to;
            if (nat.Trim().ToLower() == "&nbsp;")
                txt_natureofduty.Text = "";
            else
                txt_natureofduty.Text = nat;
            if (achiv.Trim().ToLower() == "&nbsp;")
                txt_achievements.Text = "";
            else
                txt_achievements.Text = achiv;
            btnamcommitteeadd.Visible = false;
            btnamcommitteeupdate.Visible = true;
            btn_admindelete.Visible = true;
        }
        catch { }
    }

    protected void Administrative_grid_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Administrative_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Administrative_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Administrative_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Administrative_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Administrative_grid, "Select$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.Administrative_grid, "Select$" + e.Row.RowIndex);

            e.Row.Cells[6].Visible = false;
            btnamcommitteeadd.Visible = false;
            btnamcommitteeupdate.Visible = true;
            btn_admindelete.Visible = true;
        }
        else
        {
            e.Row.Cells[6].Visible = false;
        }
    }

    protected void load()
    {
        bindrelaiton();
        bindqualification();
        bindfamilystatus();
        entrys();
        graduation();
        Degree();
        Specialization();
        University();
        Institution();
        exp();
        bindorgnaization();
        binddesing();
        bindreson();
        bindexpin();
        sematt();
        Type();
        ProgramName();
        Place();
        Sponsered();
        SeminorTitle();
        org();
        OrgProgramName();
        OrgPlace();
        OrgTitle();
        journal();
        JournalName();
        Periodicity();
        Publisher();
        JournalTitle();
        JournalType();
        book();
        PublisherName();
        PublisherTitle();
        edit();
        EditorType();
        EditorName();
        EditorTitle();
        award();
        AwardName();
        OrgName();
        AwardNature();
        project();
        ProjectTitle();
        research();
        RType();
        ResearchName();
        ResearchType();
        grants();
        ProjectName();
        PTitle();
        ProjectYear();
        patent();
        PatentName();
        PatentYear();
        PatentTitle();
        guide();
        GuideYear();
        GuideTitle();
        GuideNature();
        Membername();
        JoinedYear();
        CommitteeName();

        FarPoint.Web.Spread.StyleInfo style1 = new FarPoint.Web.Spread.StyleInfo();
        style1.Font.Size = 10;
        style1.Font.Bold = true;

        txt_dop.Attributes.Add("readonly", "readonly");
        txt_appdate.Attributes.Add("readonly", "readonly");
        rbmale.Checked = true;
        rbno.Checked = true;
        txt_fromdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_fromdate.Attributes.Add("readonly", "readonly");
        txt_todate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_todate.Attributes.Add("readonly", "readonly");
        txt_byear.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_byear.Attributes.Add("readonly", "readonly");
        txt_yofp.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_yofp.Attributes.Add("readonly", "readonly");
        txt_semfromdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_semfromdate.Attributes.Add("readonly", "readonly");
        txt_semtodate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_semtodate.Attributes.Add("readonly", "readonly");
        txt_orgfromdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_orgfromdate.Attributes.Add("readonly", "readonly");
        txt_orgtodate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_orgtodate.Attributes.Add("readonly", "readonly");
        txt_pgyear.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_pgyear.Attributes.Add("readonly", "readonly");
        txt_pgdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_pgdate.Attributes.Add("readonly", "readonly");
        txt_prcerdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_prcerdate.Attributes.Add("readonly", "readonly");
        txt_gyear.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_gyear.Attributes.Add("readonly", "readonly");
        txt_prdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_prdate.Attributes.Add("readonly", "readonly");
        txt_pryear.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_pryear.Attributes.Add("readonly", "readonly");
        txt_jyear.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_jyear.Attributes.Add("readonly", "readonly");

        txt_amfromdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_amfromdate.Attributes.Add("readonly", "readonly");

        txt_amtodate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_amtodate.Attributes.Add("readonly", "readonly");

        txt_projectfrom.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_projectfrom.Attributes.Add("readonly", "readonly");

        txt_eyear.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_eyear.Attributes.Add("readonly", "readonly");

        txt_ayear.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_ayear.Attributes.Add("readonly", "readonly");

        txt_projecto.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        txt_projecto.Attributes.Add("readonly", "readonly");

        bindtitle();
        bindcaste();
        bindcomm();
        bindrelig();
        bindnational();
        binddepapply();
        bindpostapply();
        bindpcity1();
        bindpdist();
        bindpstate1();
        bindcity();
        binddistrict();
        bindstate();
        bindblood();
        bindgrelation();
        bindgcity1();
        bindgdist();
        bindgstate1();
        desig();
        bindfsub();
        bindlang();
        bindrefcity();
        bindrefstate();
        bindrefdist();
        bindrelaiton();
        bindfamilystatus();
        bindapplno();
        graduation();
        Degree();
        Specialization();
        University();
        Institution();
        CommitteeName();
        ProjectName();
        GuideYear();
        GuideNature();
        GuideTitle();

        ddlrqualification.Attributes.Add("onfocus", "rqualification()");
        ddlstitle.Attributes.Add("onfocus", "tit()");
        ddlbgroup.Attributes.Add("onfocus", "msus()");
        ddlreligion.Attributes.Add("onfocus", "mreili()");
        ddlcommunity.Attributes.Add("onfocus", "comm()");
        ddlcaste.Attributes.Add("onfocus", "sub()");
        ddlnationality.Attributes.Add("onfocus", "nation()");
        ddlrstatus.Attributes.Add("onfocus", "status()");
        ddlrelationship.Attributes.Add("onfocus", "relation()");
        ddlfsubjects.Attributes.Add("onfocus", "famsub()");

        ddlpcity.Attributes.Add("onfocus", "pcity()");
        ddlpdistirct.Attributes.Add("onfocus", "pdistrict()");
        ddlpstate.Attributes.Add("onfocus", "pstate()");

        ddlccity.Attributes.Add("onfocus", "ccity()");
        ddlcdistrict.Attributes.Add("onfocus", "cdist()");
        ddlcstate.Attributes.Add("onfocus", "cstate()");

        ddlgcity.Attributes.Add("onfocus", "gcity()");
        ddlgrelation.Attributes.Add("onfocus", "grelation()");
        ddlgstate.Attributes.Add("onfocus", "gstate()");
        ddlgdistrict.Attributes.Add("onfocus", "gdistrict()");

        ddlrefcity.Attributes.Add("onfocus", "rcity()");
        ddlrdistrict.Attributes.Add("onfocus", "rdist()");
        ddlrefstate.Attributes.Add("onfocus", "rstate()");

        txt_dop.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
        CalendarExtender17.EndDate = DateTime.Now;
        txt_appdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
    }

    protected void btn_new_OnClick(object sender, EventArgs e)
    {
        btn_save.Text = "Save";
        tbappno.Text = "";
        bindcollege1();
        string collcode = "";
        if (btn_save.Text == "Save")
        {
            collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
            ddlcollege1.Enabled = true;
        }
        if (btn_save.Text == "Update")
        {
            collcode = Convert.ToString(ddlcollege.SelectedItem.Value);
            ddlcollege1.Enabled = false;
        }
        App_div.Visible = true;
        lbl_aplalert.Visible = false;
        newfn();
        sessionnull();
        string appno = "";
        string[] splnewval = new string[5];
        string getval = "";
        string getacr = "select GeneralAcr,StartNo,SerialSize,SettingValues from HRS_CodeSettings where SettingField='2' and CollegeCode='" + collcode + "'";
        ds.Clear();
        ds = d2.select_method_wo_parameter(getacr, "Text");
        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            getval = Convert.ToString(ds.Tables[0].Rows[0]["SettingValues"]);
            if (getval.Trim() != "")
                splnewval = getval.Split(';');
        }
        string getexist = d2.GetFunction("select value from Master_Settings where settings='CodeSetting Rights' and value is not null and value<>''");
        appno = getappcode(getexist, ds, collcode);
        if (appno.Trim() != "")
        {
            if (ddldeptapplied.SelectedIndex == 0 && splnewval.Contains("2"))
            {
                tbappno.Text = "";
                tbappno.Enabled = false;
            }
            else
            {
                tbappno.Text = appno;
                tbappno.Enabled = false;
            }
        }
        else
        {
            tbappno.Text = "";
            tbappno.Enabled = true;
        }
    }

    protected void ImageButton12_Click(object sender, EventArgs e)
    {
        App_div.Visible = false;
        sessionnull();
    }

    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> Getname(string prefixText)
    {
        string cs = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        using (SqlConnection sqlconn = new SqlConnection(cs))
        {
            sqlconn.Open();
            SqlCommand cmd = new SqlCommand("select appl_name from staff_appl_master where appl_name like '" + prefixText + "%' ", sqlconn);
            cmd.Parameters.AddWithValue("@Title", prefixText);
            SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataTable dt = new DataTable();
            da.Fill(dt);

            List<string> admin = new List<string>();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                admin.Add(dt.Rows[i]["appl_name"].ToString());
            }
            return admin;
        }
    }

    protected void desig()
    {
        ddldesignationexp.Items.Clear();
        ds.Clear();
        Hashtable hat = new Hashtable();
        string caste = "";
        caste = "select desig_code, desig_name from desig_master where ISNULL (desig_name,'')<>'' order by desig_name asc";
        ds = d2.select_method(caste, hat, "Text");
        ddldesignationexp.DataSource = ds;
        ddldesignationexp.DataTextField = "desig_name";
        ddldesignationexp.DataValueField = "desig_code";
        ddldesignationexp.DataBind();
    }

    public void bindapplno()
    {
        string queryapplno = "";
    }

    public void bindcollege1() //poo 28.10.17
    {
        try
        {
            ddlcollege1.Visible = true;
            ddlcollege1.Items.Clear();
            ds.Clear();
            //string collquery = "";
            //Hashtable hat = new Hashtable();
            //string singleuser = Session["single_user"].ToString();
            //if (singleuser == "True")
            //{
            //    collquery = "select college_code,collname from collinfo";
            //}
            //else
            //{
            //    string groupuser = Session["group_code"].ToString();
            //    if (groupuser.Contains(';'))
            //    {
            //        string[] agroup = groupuser.Split(';');
            //        groupuser = agroup[0].ToString();
            //    }
            //    collquery = "select college_code,collname from collinfo";
            //}
            //if (collquery != "")
            //{
            //    ds = d2.select_method(collquery, hat, "Text");
            //    if (ds.Tables[0].Rows.Count > 0)
            //    {
            //        ddlcollege1.DataSource = ds;
            //        ddlcollege1.DataTextField = "collname";
            //        ddlcollege1.DataValueField = "college_code";
            //        ddlcollege1.DataBind();
            //    }
            //}
            string group_code = Session["group_code"].ToString();
            string columnfield = "";
            if (group_code.Contains(';'))
            {
                string[] group_semi = group_code.Split(';');
                group_code = group_semi[0].ToString();
            }
            if ((group_code.ToString().Trim() != "") && (Session["single_user"].ToString() != "1" && Session["single_user"].ToString() != "true" && Session["single_user"].ToString() != "TRUE" && Session["single_user"].ToString() != "True"))
            {
                columnfield = " and group_code='" + group_code + "'";
            }
            else
            {
                columnfield = " and user_code='" + Session["usercode"] + "'";
            }
            Hashtable hat1 = new Hashtable();
            hat1.Clear();
            hat1.Add("column_field", columnfield.ToString());
            ds = d2.select_method("bind_college", hat1, "sp");
            ddlcollege1.Items.Clear();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlcollege1.DataSource = ds;
                ddlcollege1.DataTextField = "collname";
                ddlcollege1.DataValueField = "college_code";
                ddlcollege1.DataBind();

            }
        }
        catch (Exception e) { }
    }


    #region OrganizationBindCollege
    public void bindorganizationCollege()
    {
        try
        {
            ddlorganization.Items.Clear();
            string collquery = "select college_code,collname from collinfo where college_code='" + ddlcollege1.SelectedItem.Value + "'";
            if (collquery != "")
            {
                ds = d2.select_method(collquery, hat, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ddlorganization.DataSource = ds;
                    ddlorganization.DataTextField = "collname";
                    ddlorganization.DataValueField = "college_code";
                    ddlorganization.DataBind();
                }
            }
        }
        catch { }
    }
    #endregion

    public void bindpostapply()
    {
        try
        {
            ddlpapplide.Visible = true;
            ddlpapplide.Items.Clear();
            ds.Clear();
            Hashtable hat = new Hashtable();
            string caste = "";
            string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
            caste = "select desig_code, desig_name from desig_master where ISNULL (desig_name,'')<>'' and collegeCode='" + collcode + "' order by desig_name asc";
            ds = d2.select_method(caste, hat, "Text");
            ddlpapplide.DataSource = ds;
            ddlpapplide.DataTextField = "desig_name";
            ddlpapplide.DataValueField = "desig_code";
            ddlpapplide.DataBind();
        }
        catch (Exception e) { }
    }

    public void binddepapply()
    {
        try
        {
            ddldeptapplied.Visible = true;
            ddldeptapplied.Items.Clear();
            ds.Clear();
            Hashtable hat = new Hashtable();
            string caste = "";
            string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
            caste = "select dept_code, dept_name from hrdept_master where ISNULL (dept_name ,'')<>'' and college_code='" + collcode + "' order by dept_name asc";
            ds = d2.select_method(caste, hat, "Text");
            ddldeptapplied.DataSource = ds;
            ddldeptapplied.DataTextField = "dept_name";
            ddldeptapplied.DataValueField = "dept_code";
            ddldeptapplied.DataBind();
        }
        catch (Exception e) { }
        ddldeptapplied.Items.Insert(0, "Select");
    }

    protected void exitnew_Click(object sender, EventArgs e)
    {
        txt_addrelation.Text = "";
        paddqualification.Visible = false;
    }

    protected void ddlbgroup_SelectedIndexChanged(object sender, EventArgs e)
    {

    }

    protected void btnadd_Click(object sender, EventArgs e)
    {
        panelfamilyinformation.Visible = true;
    }

    protected void btnreligionadd_Click(object sender, EventArgs e)
    {
        paddqualification.Visible = true;
        paddqualification.Attributes.Add("style", "width:200px; height:70px; top:218px; left:446px; position: absolute;");
    }

    protected void btncommunityadd_Click(object sender, EventArgs e)
    {
        paddqualification.Visible = true;
        paddqualification.Attributes.Add("style", "width:200px; height:70px; top:248px; left:446px; position: absolute;");
    }

    protected void btnnationalityadd_Click(object sender, EventArgs e)
    {
        paddqualification.Visible = true;
        paddqualification.Attributes.Add("style", "width:200px; height:70px; top:108px; left:788px; position: absolute;");
    }

    protected void btncasteadd_Click(object sender, EventArgs e)
    {
        paddqualification.Visible = true;
        paddqualification.Attributes.Add("style", "width:200px; height:70px; top:278px; left:446px; position: absolute;");
    }

    protected void bindfsub()
    {
        ds.Clear();
        ddlfsubjects.Items.Clear();
        string collegecode1 = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='fsub' and college_code ='" + collegecode1 + "' and TextVal<>'' and TextVal is not null";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlfsubjects.DataSource = ds;
            ddlfsubjects.DataTextField = "TextVal";
            ddlfsubjects.DataValueField = "TextCode";
            ddlfsubjects.DataBind();
        }
        ddlfsubjects.Items.Insert(0, "Select");
        ddlfsubjects.Items.Insert(ddlfsubjects.Items.Count, "Others");
    }

    protected void bindlang()   ////Added By Jeyaprakash on July 26th
    {
        ds.Clear();
        ddllang.Items.Clear();
        string collegecode1 = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='lang' and college_code ='" + collegecode1 + "' and TextVal<>'' and TextVal is not null";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddllang.DataSource = ds;
            ddllang.DataTextField = "TextVal";
            ddllang.DataValueField = "TextCode";
            ddllang.DataBind();
        }
        ddllang.Items.Insert(0, "Select");
        ddllang.Items.Insert(ddllang.Items.Count, "Others");
    }

    protected void bindqualification()
    {
        ds.Clear();
        ddlrqualification.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='famqu'  and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlrqualification.DataSource = ds;
            ddlrqualification.DataTextField = "TextVal";
            ddlrqualification.DataValueField = "TextCode";
            ddlrqualification.DataBind();
        }
        ddlrqualification.Items.Insert(0, "Select");
        ddlrqualification.Items.Insert(ddlrqualification.Items.Count, "Others");
    }

    protected void bindfamilystatus()
    {
        ds.Clear();
        ddlrstatus.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='famst'  and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlrstatus.DataSource = ds;
            ddlrstatus.DataTextField = "TextVal";
            ddlrstatus.DataValueField = "TextCode";
            ddlrstatus.DataBind();
        }
        ddlrstatus.Items.Insert(0, "Select");
        ddlrstatus.Items.Insert(ddlrstatus.Items.Count, "Others");
    }

    protected void graduation()
    {
        ds.Clear();
        ddlgraduation.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='grdu' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlgraduation.DataSource = ds;
            ddlgraduation.DataTextField = "TextVal";
            ddlgraduation.DataValueField = "TextCode";
            ddlgraduation.DataBind();
        }
        ddlgraduation.Items.Insert(0, "Select");
        ddlgraduation.Items.Insert(ddlgraduation.Items.Count, "Others");
    }

    protected void Degree()
    {
        ds.Clear();
        ddldegreeinfromation.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='grdg' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddldegreeinfromation.DataSource = ds;
            ddldegreeinfromation.DataTextField = "TextVal";
            ddldegreeinfromation.DataValueField = "TextCode";
            ddldegreeinfromation.DataBind();
        }
        ddldegreeinfromation.Items.Insert(0, "Select");
        ddldegreeinfromation.Items.Insert(ddldegreeinfromation.Items.Count, "Others");
    }

    protected void Specialization()
    {
        ds.Clear();
        ddlspecalization.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='grsp' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlspecalization.DataSource = ds;
            ddlspecalization.DataTextField = "TextVal";
            ddlspecalization.DataValueField = "TextCode";
            ddlspecalization.DataBind();
        }
        ddlspecalization.Items.Insert(0, "Select");
        ddlspecalization.Items.Insert(ddlspecalization.Items.Count, "Others");
    }

    protected void University()
    {
        ds.Clear();
        ddluniversity.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='gruni' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddluniversity.DataSource = ds;
            ddluniversity.DataTextField = "TextVal";
            ddluniversity.DataValueField = "TextCode";
            ddluniversity.DataBind();
        }
        ddluniversity.Items.Insert(0, "Select");
        ddluniversity.Items.Insert(ddluniversity.Items.Count, "Others");
    }

    protected void Institution()
    {
        ds.Clear();
        ddlinstitution.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='grins' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlinstitution.DataSource = ds;
            ddlinstitution.DataTextField = "TextVal";
            ddlinstitution.DataValueField = "TextCode";
            ddlinstitution.DataBind();
        }
        ddlinstitution.Items.Insert(0, "Select");
        ddlinstitution.Items.Insert(ddlinstitution.Items.Count, "Others");
    }

    protected void Type()
    {
        ds.Clear();
        ddlsemtype.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='semt' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlsemtype.DataSource = ds;
            ddlsemtype.DataTextField = "TextVal";
            ddlsemtype.DataValueField = "TextCode";
            ddlsemtype.DataBind();
        }
        ddlsemtype.Items.Insert(0, "Select");
        ddlsemtype.Items.Insert(ddlsemtype.Items.Count, "Others");
    }

    protected void ProgramName()
    {
        ds.Clear();
        ddlprogramname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='semp' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlprogramname.DataSource = ds;
            ddlprogramname.DataTextField = "TextVal";
            ddlprogramname.DataValueField = "TextCode";
            ddlprogramname.DataBind();
        }
        ddlprogramname.Items.Insert(0, "Select");
        ddlprogramname.Items.Insert(ddlprogramname.Items.Count, "Others");
    }

    protected void Place()
    {
        ds.Clear();
        ddlplace.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sempl' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlplace.DataSource = ds;
            ddlplace.DataTextField = "TextVal";
            ddlplace.DataValueField = "TextCode";
            ddlplace.DataBind();
        }
        ddlplace.Items.Insert(0, "Select");
        ddlplace.Items.Insert(ddlplace.Items.Count, "Others");
    }

    protected void Sponsered()
    {
        ds.Clear();
        ddlsponsored.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='semsp' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlsponsored.DataSource = ds;
            ddlsponsored.DataTextField = "TextVal";
            ddlsponsored.DataValueField = "TextCode";
            ddlsponsored.DataBind();
        }
        ddlsponsored.Items.Insert(0, "Select");
        ddlsponsored.Items.Insert(ddlsponsored.Items.Count, "Others");
    }

    protected void SeminorTitle()
    {
        ds.Clear();
        ddlstile.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='semtt' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlstile.DataSource = ds;
            ddlstile.DataTextField = "TextVal";
            ddlstile.DataValueField = "TextCode";
            ddlstile.DataBind();
        }
        ddlstile.Items.Insert(0, "Select");
        ddlstile.Items.Insert(ddlstile.Items.Count, "Others");
    }

    protected void OrgProgramName()
    {
        ds.Clear();
        ddlorgname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='smorn' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlorgname.DataSource = ds;
            ddlorgname.DataTextField = "TextVal";
            ddlorgname.DataValueField = "TextCode";
            ddlorgname.DataBind();
        }
        ddlorgname.Items.Insert(0, "Select");
        ddlorgname.Items.Insert(ddlorgname.Items.Count, "Others");
    }

    protected void OrgPlace()
    {
        ds.Clear();
        ddlorgplace.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='smorp' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlorgplace.DataSource = ds;
            ddlorgplace.DataTextField = "TextVal";
            ddlorgplace.DataValueField = "TextCode";
            ddlorgplace.DataBind();
        }
        ddlorgplace.Items.Insert(0, "Select");
        ddlorgplace.Items.Insert(ddlorgplace.Items.Count, "Others");
    }

    protected void OrgTitle()
    {
        ds.Clear();
        ddlorgtitle.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='smort' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlorgtitle.DataSource = ds;
            ddlorgtitle.DataTextField = "TextVal";
            ddlorgtitle.DataValueField = "TextCode";
            ddlorgtitle.DataBind();
        }
        ddlorgtitle.Items.Insert(0, "Select");
        ddlorgtitle.Items.Insert(ddlorgtitle.Items.Count, "Others");
    }

    protected void JournalType()
    {
        ds.Clear();
        ddljtype.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sjty' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddljtype.DataSource = ds;
            ddljtype.DataTextField = "TextVal";
            ddljtype.DataValueField = "TextCode";
            ddljtype.DataBind();
        }
        ddljtype.Items.Insert(0, "Select");
        ddljtype.Items.Insert(ddljtype.Items.Count, "Others");
    }

    protected void JournalName()
    {
        ds.Clear();
        ddljname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sjnm' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddljname.DataSource = ds;
            ddljname.DataTextField = "TextVal";
            ddljname.DataValueField = "TextCode";
            ddljname.DataBind();
        }
        ddljname.Items.Insert(0, "Select");
        ddljname.Items.Insert(ddljname.Items.Count, "Others");
    }

    protected void Publisher()
    {
        ds.Clear();
        ddlpublisher.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sjps' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlpublisher.DataSource = ds;
            ddlpublisher.DataTextField = "TextVal";
            ddlpublisher.DataValueField = "TextCode";
            ddlpublisher.DataBind();
        }
        ddlpublisher.Items.Insert(0, "Select");
        ddlpublisher.Items.Insert(ddlpublisher.Items.Count, "Others");
    }

    protected void Periodicity()
    {
        ds.Clear();
        ddlperiodicity.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sjpr' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlperiodicity.DataSource = ds;
            ddlperiodicity.DataTextField = "TextVal";
            ddlperiodicity.DataValueField = "TextCode";
            ddlperiodicity.DataBind();
        }
        ddlperiodicity.Items.Insert(0, "Select");
        ddlperiodicity.Items.Insert(ddlperiodicity.Items.Count, "Others");
    }

    protected void JournalTitle()
    {
        ds.Clear();
        ddljtitle.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sjtit' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddljtitle.DataSource = ds;
            ddljtitle.DataTextField = "TextVal";
            ddljtitle.DataValueField = "TextCode";
            ddljtitle.DataBind();
        }
        ddljtitle.Items.Insert(0, "Select");
        ddljtitle.Items.Insert(ddljtitle.Items.Count, "Others");
    }

    protected void PublisherName()
    {
        ds.Clear();
        ddlbpname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sbpn' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlbpname.DataSource = ds;
            ddlbpname.DataTextField = "TextVal";
            ddlbpname.DataValueField = "TextCode";
            ddlbpname.DataBind();
        }
        ddlbpname.Items.Insert(0, "Select");
        ddlbpname.Items.Insert(ddlbpname.Items.Count, "Others");
    }

    protected void PublisherTitle()
    {
        ds.Clear();
        ddlbptitle.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sbpt' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlbptitle.DataSource = ds;
            ddlbptitle.DataTextField = "TextVal";
            ddlbptitle.DataValueField = "TextCode";
            ddlbptitle.DataBind();
        }
        ddlbptitle.Items.Insert(0, "Select");
        ddlbptitle.Items.Insert(ddlbptitle.Items.Count, "Others");
    }

    protected void EditorType()
    {
        ds.Clear();
        ddletype.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sety' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddletype.DataSource = ds;
            ddletype.DataTextField = "TextVal";
            ddletype.DataValueField = "TextCode";
            ddletype.DataBind();
        }
        ddletype.Items.Insert(0, "Select");
        ddletype.Items.Insert(ddletype.Items.Count, "Others");
    }

    protected void EditorName()
    {
        ds.Clear();
        ddlepname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sepn' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlepname.DataSource = ds;
            ddlepname.DataTextField = "TextVal";
            ddlepname.DataValueField = "TextCode";
            ddlepname.DataBind();
        }
        ddlepname.Items.Insert(0, "Select");
        ddlepname.Items.Insert(ddlepname.Items.Count, "Others");
    }

    protected void EditorTitle()
    {
        ds.Clear();
        ddletitle.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='setit' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddletitle.DataSource = ds;
            ddletitle.DataTextField = "TextVal";
            ddletitle.DataValueField = "TextCode";
            ddletitle.DataBind();
        }
        ddletitle.Items.Insert(0, "Select");
        ddletitle.Items.Insert(ddletitle.Items.Count, "Others");
    }

    protected void AwardName()
    {
        ds.Clear();
        ddlaname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sanm' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlaname.DataSource = ds;
            ddlaname.DataTextField = "TextVal";
            ddlaname.DataValueField = "TextCode";
            ddlaname.DataBind();
        }
        ddlaname.Items.Insert(0, "Select");
        ddlaname.Items.Insert(ddlaname.Items.Count, "Others");
    }

    protected void OrgName()
    {
        ds.Clear();
        ddlaoaname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='saonm' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlaoaname.DataSource = ds;
            ddlaoaname.DataTextField = "TextVal";
            ddlaoaname.DataValueField = "TextCode";
            ddlaoaname.DataBind();
        }
        ddlaoaname.Items.Insert(0, "Select");
        ddlaoaname.Items.Insert(ddlaoaname.Items.Count, "Others");
    }

    protected void AwardNature()
    {
        ds.Clear();
        ddlanaward.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sanan' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlanaward.DataSource = ds;
            ddlanaward.DataTextField = "TextVal";
            ddlanaward.DataValueField = "TextCode";
            ddlanaward.DataBind();
        }
        ddlanaward.Items.Insert(0, "Select");
        ddlanaward.Items.Insert(ddlanaward.Items.Count, "Others");
    }

    protected void ProjectTitle()
    {
        ds.Clear();
        ddlprojecttitle.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='spron' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlprojecttitle.DataSource = ds;
            ddlprojecttitle.DataTextField = "TextVal";
            ddlprojecttitle.DataValueField = "TextCode";
            ddlprojecttitle.DataBind();
        }
        ddlprojecttitle.Items.Insert(0, "Select");
        ddlprojecttitle.Items.Insert(ddlprojecttitle.Items.Count, "Others");
    }

    protected void ResearchName()
    {
        ds.Clear();
        ddlresearchname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='srnm' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlresearchname.DataSource = ds;
            ddlresearchname.DataTextField = "TextVal";
            ddlresearchname.DataValueField = "TextCode";
            ddlresearchname.DataBind();
        }
        ddlresearchname.Items.Insert(0, "Select");
        ddlresearchname.Items.Insert(ddlresearchname.Items.Count, "Others");
    }

    protected void RType()
    {
        ds.Clear();
        ddlresearchtype.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='srty' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlresearchtype.DataSource = ds;
            ddlresearchtype.DataTextField = "TextVal";
            ddlresearchtype.DataValueField = "TextCode";
            ddlresearchtype.DataBind();
        }
        ddlresearchtype.Items.Insert(0, "Select");
        ddlresearchtype.Items.Insert(ddlresearchtype.Items.Count, "Others");
    }

    protected void ResearchType()
    {
        ds.Clear();
        ddlrrtype.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='srrty' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlrrtype.DataSource = ds;
            ddlrrtype.DataTextField = "TextVal";
            ddlrrtype.DataValueField = "TextCode";
            ddlrrtype.DataBind();
        }
        ddlrrtype.Items.Insert(0, "Select");
        ddlrrtype.Items.Insert(ddlrrtype.Items.Count, "Others");
    }

    protected void ProjectYear()
    {
        ds.Clear();
        ddlpgyear.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='spgy' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlpgyear.DataSource = ds;
            ddlpgyear.DataTextField = "TextVal";
            ddlpgyear.DataValueField = "TextCode";
            ddlpgyear.DataBind();
        }
    }

    protected void ProjectName()
    {
        ds.Clear();
        ddlpgname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='spgn' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlpgname.DataSource = ds;
            ddlpgname.DataTextField = "TextVal";
            ddlpgname.DataValueField = "TextCode";
            ddlpgname.DataBind();
        }
        ddlpgname.Items.Insert(0, "Select");
        ddlpgname.Items.Insert(ddlpgname.Items.Count, "Others");
    }

    protected void PTitle()
    {
        ds.Clear();
        ddlpgtitle.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='spgt' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlpgtitle.DataSource = ds;
            ddlpgtitle.DataTextField = "TextVal";
            ddlpgtitle.DataValueField = "TextCode";
            ddlpgtitle.DataBind();
        }
        ddlpgtitle.Items.Insert(0, "Select");
        ddlpgtitle.Items.Insert(ddlpgtitle.Items.Count, "Others");
    }

    protected void PatentYear()
    {
        ds.Clear();
        ddlpryear.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='spry' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlpryear.DataSource = ds;
            ddlpryear.DataTextField = "TextVal";
            ddlpryear.DataValueField = "TextCode";
            ddlpryear.DataBind();
        }
    }

    protected void PatentName()
    {
        ds.Clear();
        ddlprname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sprn' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlprname.DataSource = ds;
            ddlprname.DataTextField = "TextVal";
            ddlprname.DataValueField = "TextCode";
            ddlprname.DataBind();
        }
        ddlprname.Items.Insert(0, "Select");
        ddlprname.Items.Insert(ddlprname.Items.Count, "Others");
    }

    protected void PatentTitle()
    {
        ds.Clear();
        ddlprtitle.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sprt' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlprtitle.DataSource = ds;
            ddlprtitle.DataTextField = "TextVal";
            ddlprtitle.DataValueField = "TextCode";
            ddlprtitle.DataBind();
        }
        ddlprtitle.Items.Insert(0, "Select");
        ddlprtitle.Items.Insert(ddlprtitle.Items.Count, "Others");
    }

    protected void GuideYear()
    {
        ds.Clear();
        ddlgyear.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='spgy' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlgyear.DataSource = ds;
            ddlgyear.DataTextField = "TextVal";
            ddlgyear.DataValueField = "TextCode";
            ddlgyear.DataBind();
        }
        ddlgyear.Items.Insert(0, "Select");
        ddlgyear.Items.Insert(ddlgyear.Items.Count, "Others");
    }

    protected void GuideNature()
    {
        ds.Clear();
        ddlnatureguide.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='spgnu' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlnatureguide.DataSource = ds;
            ddlnatureguide.DataTextField = "TextVal";
            ddlnatureguide.DataValueField = "TextCode";
            ddlnatureguide.DataBind();
        }
        ddlnatureguide.Items.Insert(0, "Select");
        ddlnatureguide.Items.Insert(ddlnatureguide.Items.Count, "Others");
    }

    protected void GuideTitle()
    {
        ds.Clear();
        ddlgtitle.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='spgt' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlgtitle.DataSource = ds;
            ddlgtitle.DataTextField = "TextVal";
            ddlgtitle.DataValueField = "TextCode";
            ddlgtitle.DataBind();
        }
        ddlgtitle.Items.Insert(0, "Select");
        ddlgtitle.Items.Insert(ddlgtitle.Items.Count, "Others");
    }

    protected void Membername()
    {
        ds.Clear();
        ddlpmname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='spmn' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlpmname.DataSource = ds;
            ddlpmname.DataTextField = "TextVal";
            ddlpmname.DataValueField = "TextCode";
            ddlpmname.DataBind();
        }

        ddlpmname.Items.Insert(0, "Select");
        ddlpmname.Items.Insert(ddlpmname.Items.Count, "Others");
    }

    protected void JoinedYear()
    {
        ds.Clear();
        ddlpmjoindyear.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='spmy' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlpmjoindyear.DataSource = ds;
            ddlpmjoindyear.DataTextField = "TextVal";
            ddlpmjoindyear.DataValueField = "TextCode";
            ddlpmjoindyear.DataBind();
        }
    }

    protected void CommitteeName()
    {
        ds.Clear();
        ddlamname.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='sacm' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlamname.DataSource = ds;
            ddlamname.DataTextField = "TextVal";
            ddlamname.DataValueField = "TextCode";
            ddlamname.DataBind();
        }
        ddlamname.Items.Insert(0, "Select");
        ddlamname.Items.Insert(ddlamname.Items.Count, "Others");
    }

    protected void Relation()
    {
        ds.Clear();
        ddlrelationship.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string item = "select distinct TextVal,TextCode from TextValTable where TextCriteria='faml' and TextVal<>'' and TextVal is not null and college_code='" + collcode + "'";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlrelationship.DataSource = ds;
            ddlrelationship.DataTextField = "TextVal";
            ddlrelationship.DataValueField = "TextCode";
            ddlrelationship.DataBind();
        }
        ddlrelationship.Items.Insert(0, "Select");
        ddlrelationship.Items.Insert(ddlrelationship.Items.Count, "Others");
    }

    public void bindcaste()
    {
        ddlcaste.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='caste' and college_code=" + collegecode + " and TextVal<>'' and TextVal is not null";
        DataSet ds = new DataSet();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlcaste.DataSource = ds;
            ddlcaste.DataTextField = "Textval";
            ddlcaste.DataValueField = "TextCode";
            ddlcaste.DataBind();
            ddlcaste.Enabled = true;
        }
        ddlcaste.Items.Insert(0, new ListItem("Select", "0"));
        ddlcaste.Items.Insert(ddlcaste.Items.Count, new ListItem("Others", "1"));
    }

    public void bindcomm()
    {
        ddlcommunity.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='comm' and college_code=" + collegecode + " and TextVal<>'' and TextVal is not null";
        DataSet ds = new DataSet();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlcommunity.DataSource = ds;
            ddlcommunity.DataTextField = "Textval";
            ddlcommunity.DataValueField = "TextCode";
            ddlcommunity.DataBind();
            ddlcommunity.Enabled = true;
        }
        ddlcommunity.Items.Insert(0, "---Select---");
        ddlcommunity.Items.Insert(ddlcommunity.Items.Count, "Others");
    }

    public void bindrelig()
    {
        ddlreligion.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='relig' and college_code=" + collegecode + " and TextVal<>'' and TextVal is not null";
        DataSet ds = new DataSet();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlreligion.DataSource = ds;
            ddlreligion.DataTextField = "Textval";
            ddlreligion.DataValueField = "TextCode";
            ddlreligion.DataBind();
            ddlreligion.Enabled = true;
        }
        ddlreligion.Items.Insert(0, "---Select---");
        ddlreligion.Items.Insert(ddlreligion.Items.Count, "Others");
    }

    public void bindblood()
    {
        ddlbgroup.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='bgrou' and college_code=" + collegecode + " and TextVal<>'' and TextVal is not null";
        DataSet ds = new DataSet();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlbgroup.DataSource = ds;
            ddlbgroup.DataTextField = "Textval";
            ddlbgroup.DataValueField = "TextCode";
            ddlbgroup.DataBind();
            ddlbgroup.Enabled = true;
        }
        ddlbgroup.Items.Insert(0, "---Select---");
        ddlbgroup.Items.Insert(ddlbgroup.Items.Count, "Others");
    }

    public void bindgrelation()
    {
        ddlgrelation.Items.Clear();
        string collegecode = Session["collegecode"].ToString();
        string query = "select TextCode,Textval from textvaltable where TextCriteria='grel' and college_code=" + collegecode + "  and TextVal<>'' and TextVal is not null";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlgrelation.DataSource = ds;
            ddlgrelation.DataTextField = "Textval";
            ddlgrelation.DataValueField = "TextCode";
            ddlgrelation.DataBind();
        }
        ddlgrelation.Items.Insert(0, "Select");
        ddlgrelation.Items.Insert(ddlgrelation.Items.Count, "Others");
        panelguard.Visible = false;
    }

    public void bindtitle()
    {
        ddlstitle.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='famtt' and college_code=" + collegecode + " and Textval<>'' and Textval is not null";
        DataSet ds = new DataSet();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlstitle.DataSource = ds;
            ddlstitle.DataTextField = "Textval";
            ddlstitle.DataValueField = "TextCode";
            ddlstitle.DataBind();
            ddlstitle.Enabled = true;
        }
        ddlstitle.Items.Insert(0, "---Select---");
        ddlstitle.Items.Insert(ddlstitle.Items.Count, "Others");
    }

    protected void btnfstubjectadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Familiar Subject";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnrqualificatinadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Qualilfication";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnstatusadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Status";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btngraduationadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Graduation";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btndegreeadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Degree";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnspecalizationadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Specialization";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnunivesityadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "University";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btninstitutionadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Institution";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnseimtypeadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Type";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnpnameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Program Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnpaleceadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Place";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnspnsadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Sponsered";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnstitleadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Seminors Title";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnorgnameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Organized Program Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnorgplaceadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Organized Place";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnorgtitleadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Organized Title";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnjtypeadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Journal Type";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnjnameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Journal Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnpublisheradd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Publisher";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnperiodicityadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Periodicity";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnjtitleadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Journal Title";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;

    }

    protected void btnbpnameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Publisher Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnbptitleadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Publisher Title";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnetypeadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Editor Type";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnepnameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Editor Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnetitleadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Editor Title";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnanameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Award Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnaoanameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Organization Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnanawardadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Award Nature";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnprojecttitleadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Project Title";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnresearchnameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Research Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnresearchtypeadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "RType";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnrrtypeadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Research Type";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnpgyearadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Project Year";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnpgnameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Project Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnpgtitleadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Project Title";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnpryearadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Patent Year";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;

    }

    protected void btnprnameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Patent Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnprtitleadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Patent Title";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btngyearadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Guide Year";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnnatureguideadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Guide Nature";
        txt_add2.Text = "";
    }

    protected void btngtitleadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Guide Title";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnpmnameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Member Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnpmjoindyearadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Joined Year";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnamnameadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Committee Name";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void btnorgnizationadd_Click(object sender, EventArgs e)
    {
        Plus1.Visible = true;
        lbl_header1.Text = "Organization";
        txt_add2.Text = "";
        alertpopwindow.Visible = false;
    }

    protected void ddlfsubjects_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlfsubjects.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Familiar Subject";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddllang_Change(object sender, EventArgs e)  //Added By Jeyaprakash on July 26th
    {
        if (ddllang.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Language Known";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlstitle_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlstitle.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Add Title";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlgrelation_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlgrelation.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Relationship";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlcaste_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlcaste.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Caste";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlcommunity_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if ((ddlcommunity.SelectedItem.Text).Trim().ToUpper() == "OTHERS")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Community";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlreligion_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlreligion.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Religieon";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlbgroup_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlbgroup.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Blood Group";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlnationality_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlnationality.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Nationality";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlrelationship_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlrelationship.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Relation";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlrqualification_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlrqualification.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Qualification";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlrstatus_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlrstatus.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Status";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlgraduation_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlgraduation.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Graduation";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddldegreeinfromation_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddldegreeinfromation.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Degree";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlspecalization_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlspecalization.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Specialization";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddluniversity_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddluniversity.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "University";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlinstitution_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlinstitution.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Institution";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlorganization_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlorganization.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Organization";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlrforr_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlrforr.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Reason";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlexpin_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlexpin.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Experience In";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddldesignationexp_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddldesignationexp.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Designation";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlsemtype_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlsemtype.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Type";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlprogramname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlprogramname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Program Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlplace_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlplace.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Place";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlsponsored_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlsponsored.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Sponsered";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlstile_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlstile.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Seminors Title";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlorgname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlorgname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Organized Program Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlorgplace_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlorgplace.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Organized Place";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlorgtitle_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlorgtitle.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Organized Title";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddljtype_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddljtype.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Journal Type";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddljname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddljname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Journal Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlpublisher_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlpublisher.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Publisher";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlperiodicity_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlperiodicity.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Periodicity";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddljtitle_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddljtitle.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Journal Title";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlbpname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlbpname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Publisher Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlbptitle_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlbptitle.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Publisher Title";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddletype_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddletype.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Editor Type";
            alertpopwindow.Visible = false;
            txt_add2.Text = "";
        }
    }

    protected void ddlepname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlepname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Editor Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddletitle_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddletitle.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Editor Title";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlaname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlaname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Award Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlaoaname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlaoaname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Organization Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlanaward_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlanaward.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Award Nature";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlprojecttitle_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlprojecttitle.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Project Title";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlresearchname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlresearchname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Research Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlresearchtype_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlresearchtype.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "R Type";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlrrtype_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlrrtype.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Research Type";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlpgyear_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlpgyear.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Project Year";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlpgname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlpgname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Project Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlpgtitle_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlpgtitle.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Project Title";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlpryear_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlpryear.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Patent Year";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlprname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlprname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Patent Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlprtitle_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlprtitle.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Patent Title";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlgyear_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlgyear.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Guide Year";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlnatureguide_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlnatureguide.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Guide Nature";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlgtitle_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlgtitle.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Guide Title";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlpmname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlpmname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Member Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlpmjoindyear_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlpmjoindyear.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Joined Year";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlamname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlamname.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "Committee Name";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlpcity_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlpcity.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "City";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlrefcity_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlrefcity.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "City";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlrdistrict_Change(object sender, EventArgs e)
    {
        if (ddlrdistrict.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "District";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlrefstate_Change(object sender, EventArgs e)
    {
        if (ddlrefstate.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "State";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlgcity_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlgcity.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "City";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void ddlccity_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlccity.SelectedItem.Text == "Others")
        {
            Plus1.Visible = true;
            lbl_header1.Text = "City";
            txt_add2.Text = "";
            alertpopwindow.Visible = false;
        }
    }

    protected void btn_plusAdd1_OnClick(object sender, EventArgs e)
    {
        try
        {
            string collegecode1 = Convert.ToString(ddlcollege1.SelectedItem.Value);
            if (lbl_header1.Text == "City")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "city";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindcity();
                bindpcity1();
                bindgcity1();
                bindrefcity();
            }
            if (lbl_header1.Text == "District")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "district";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                binddistrict();
                bindpdist();
                bindgdist();
                bindrefdist();
            }
            if (lbl_header1.Text == "State")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "State";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindstate();
                bindpstate1();
                bindgstate1();
                bindrefstate();
            }
            if (lbl_header1.Text == "Add Title")
            {

                string val = Convert.ToString(txt_add2.Text);
                string criteria = "famtt";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindtitle();
            }
            if (lbl_header1.Text == "Designation")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "grdes";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                binddesing();
            }
            if (lbl_header1.Text == "Experience In")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "grein";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindexpin();
            }

            if (lbl_header1.Text == "Relation")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "faml";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Relation();
            }
            if (lbl_header1.Text == "Relationship")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "grel";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindgrelation();
            }
            if (lbl_header1.Text == "Caste")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "caste";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindcaste();
            }
            if (lbl_header1.Text == "Community")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "comm";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindcomm();
            }
            if (lbl_header1.Text == "Religieon")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "relig";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindrelig();
            }
            if (lbl_header1.Text == "Blood Group")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "bgrou";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindblood();
            }
            if (lbl_header1.Text == "Nationality")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "natio";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindnational();
            }
            if (lbl_header1.Text == "Familiar Subject")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "fsub";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindfsub();
            }
            if (lbl_header1.Text == "Language Known")  //Added By Jeyaprakash on July 26th
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "lang";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code) values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindlang();
            }
            if (lbl_header1.Text == "Qualification")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "famqu";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindqualification();
            }
            if (lbl_header1.Text == "Status")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "famst";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindfamilystatus();
            }
            if (lbl_header1.Text == "Graduation")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "grdu";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                graduation();
            }
            if (lbl_header1.Text == "Degree")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "grdg";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Degree();
            }
            if (lbl_header1.Text == "Specialization")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "grsp";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Specialization();
            }
            if (lbl_header1.Text == "University")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "gruni";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code)values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                University();
            }
            if (lbl_header1.Text == "Institution")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "grins";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Institution();
            }
            if (lbl_header1.Text == "Organization")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "grorg";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindorgnaization();
            }
            if (lbl_header1.Text == "Reason")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "grrfr";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                bindreson();
            }
            if (lbl_header1.Text == "Type")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "semt";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Type();
            }
            if (lbl_header1.Text == "Program Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "semp";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                ProgramName();
            }
            if (lbl_header1.Text == "Place")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sempl";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Place();
            }
            if (lbl_header1.Text == "Sponsered")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "semsp";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Sponsered();
            }
            if (lbl_header1.Text == "Seminors Title")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "semtt";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                SeminorTitle();
            }
            if (lbl_header1.Text == "Organized Program Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "smorn";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                OrgProgramName();
            }
            if (lbl_header1.Text == "Organized Place")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "smorp";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                OrgPlace();
            }
            if (lbl_header1.Text == "Organized Title")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "smort";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                OrgTitle();
            }
            if (lbl_header1.Text == "Journal Type")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sjty";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                JournalType();
            }
            if (lbl_header1.Text == "Journal Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sjnm";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                JournalName();
            }
            if (lbl_header1.Text == "Publisher")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sjps";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Publisher();
            }
            if (lbl_header1.Text == "Periodicity")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sjpr";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Periodicity();
            }
            if (lbl_header1.Text == "Journal Title")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sjtit";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                JournalTitle();
            }
            if (lbl_header1.Text == "Publisher Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sbpn";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                PublisherName();
            }
            if (lbl_header1.Text == "Publisher Title")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sbpt";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                PublisherTitle();
            }
            if (lbl_header1.Text == "Editor Type")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sety";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                EditorType();
            }
            if (lbl_header1.Text == "Editor Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sepn";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                EditorName();
            }
            if (lbl_header1.Text == "Editor Title")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "setit";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                EditorTitle();
            }

            if (lbl_header1.Text == "Award Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sanm";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                AwardName();
            }
            if (lbl_header1.Text == "Organization Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "saonm";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                OrgName();
            }
            if (lbl_header1.Text == "Award Nature")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sanan";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                AwardNature();
            }
            if (lbl_header1.Text == "Project Title")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "spron";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                ProjectTitle();
            }
            if (lbl_header1.Text == "Research Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "srnm";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                ResearchName();
            }
            if (lbl_header1.Text == "R Type")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "srty";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                RType();
            }
            if (lbl_header1.Text == "Research Type")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "srrty";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                ResearchType();
            }
            if (lbl_header1.Text == "Project Year")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "spgy";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                ProjectYear();
            }
            if (lbl_header1.Text == "Project Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "spgn";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                ProjectName();
            }
            if (lbl_header1.Text == "Project Title")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "spgt";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                PTitle();
            }
            if (lbl_header1.Text == "Patent Year")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "spry";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                PatentYear();
            }
            if (lbl_header1.Text == "Patent Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sprn";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                PatentName();
            }
            if (lbl_header1.Text == "Patent Title")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sprt";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                PatentTitle();
            }
            if (lbl_header1.Text == "Guide Year")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "spgy";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                GuideYear();
            }
            if (lbl_header1.Text == "Guide Nature")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "spgnu";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                GuideNature();
            }
            if (lbl_header1.Text == "Guide Title")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "spgt";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                GuideTitle();
            }
            if (lbl_header1.Text == "Member Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "spmn";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                Membername();
            }
            if (lbl_header1.Text == "Joined Year")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "spmy";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                JoinedYear();
            }
            if (lbl_header1.Text == "Committee Name")
            {
                string val = Convert.ToString(txt_add2.Text);
                string criteria = "sacm";
                if (val.Trim() != "")
                {
                    string query = "insert into TextValTable(TextVal,TextCriteria,college_code )values ('" + val.ToUpper() + "','" + criteria + "','" + collegecode1 + "')";
                    int count = d2.update_method_wo_parameter(query, "Text");
                }
                CommitteeName();
            }
            Plus1.Visible = false;
            txt_add2.Text = "";
        }
        catch { }
    }

    protected void btn_Plusexit1_OnClick(object sender, EventArgs e)
    {
        Plus1.Visible = false;
        if (lbl_header1.Text == "Add Title")
            bindtitle();
        if (lbl_header1.Text == "Blood Group")
            bindblood();
        if (lbl_header1.Text == "Religieon")
            bindrelig();
        if (lbl_header1.Text == "Community")
            bindcomm();
        if (lbl_header1.Text == "Caste")
            bindcaste();
        if (lbl_header1.Text == "Nationality")
            bindnational();
        if (lbl_header1.Text == "Familiar Subject")
            bindfsub();
        if (lbl_header1.Text == "Language Known")   ////Added By Jeyaprakash on July 26th
            bindlang();
    }

    protected void btnfsubjectremove_Click(object sender, EventArgs e)
    {
        string val = ddlfsubjects.SelectedItem.Text;
        string query = "delete from TextValTable where TextVal='" + val + "'";
        int count = d2.update_method_wo_parameter(query, "Text");
        bindfsub();
    }

    protected void btnrqualificationminus_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlrqualification.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        bindqualification();
    }

    protected void btnstatusminus_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlrstatus.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        bindfamilystatus();
    }

    protected void btngraduationminus_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlgraduation.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "'";
        int count = d2.update_method_wo_parameter(query, "Text");
        graduation();
    }

    protected void btndegreeremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddldegreeinfromation.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        Degree();
    }

    protected void btnspecalizationremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlspecalization.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        Specialization();
    }

    protected void btnuniversityremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddluniversity.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "'";
        int count = d2.update_method_wo_parameter(query, "Text");
        University();
    }

    protected void btninstitutionremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlinstitution.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        Institution();
    }

    protected void btnsemtyperemove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlsemtype.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        Type();
    }

    protected void btnpnameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlprogramname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        ProgramName();
    }

    protected void btnpalceremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlplace.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        Place();
    }

    protected void btnsponsremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlsponsored.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        Sponsered();
    }

    protected void btnstitleremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlstile.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        SeminorTitle();
    }

    protected void btnorgnameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlorgname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        OrgProgramName();
    }

    protected void btnorgplaceremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlorgplace.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        OrgPlace();
    }

    protected void btnorgtitleremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlorgtitle.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        OrgTitle();
    }

    protected void btnjtyperemove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddljtype.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        JournalType();
    }

    protected void btnjanmeremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddljname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        JournalName();
    }

    protected void btnpublisherremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlpublisher.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        Publisher();
    }

    protected void btnperiodicityremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlperiodicity.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        Periodicity();
    }

    protected void btnjtitleremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddljtitle.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        JournalTitle();
    }

    protected void btnbpnameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlbpname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        PublisherName();
    }

    protected void btnbptitleremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlbptitle.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        PublisherTitle();
    }

    protected void btnetyperemove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddletype.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        EditorType();
    }

    protected void btnepnameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlepname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        EditorName();
    }

    protected void btnetitleremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddletitle.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        EditorTitle();
    }

    protected void btnanameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlaname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        AwardName();
    }

    protected void btnaoanameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlaoaname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        OrgName();
    }

    protected void btnanawardremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlanaward.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        AwardNature();
    }

    protected void btnprojecttitleremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlprojecttitle.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        ProjectTitle();
    }

    protected void btnresearchnameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlresearchname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        ResearchName();
    }

    protected void btnresearchtyperemove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlresearchtype.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        RType();
    }

    protected void btnrryperemvoe_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlrrtype.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        ResearchType();
    }

    protected void btnpgyearremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlpgyear.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        ProjectYear();
    }

    protected void btnpgnameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlpgname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        ProjectName();
    }

    protected void btnpgtitleremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlpgtitle.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        PTitle();
    }

    protected void btnpryearremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlpryear.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        PatentYear();
    }

    protected void btnprnameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlprname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        PatentName();
    }

    protected void btnprtitleremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlprtitle.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        PatentTitle();
    }

    protected void btngyearremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlgyear.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        GuideYear();
    }

    protected void btnnatureguideremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlnatureguide.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        GuideNature();
    }

    protected void btngtitleremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlgtitle.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        GuideTitle();
    }

    protected void btnpmnameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlpmname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        Membername();
    }

    protected void btnpmjoindyearremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlpmjoindyear.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        JoinedYear();
    }

    protected void btnamnameremove_Click(object sender, EventArgs e)
    {
        string val = Convert.ToString(ddlamname.SelectedItem.Text);
        string query = "delete from TextValTable where TextVal='" + val + "' ";
        int count = d2.update_method_wo_parameter(query, "Text");
        CommitteeName();
    }

    public void entrys()
    {
        ddlgraduation.Attributes.Add("onfocus", "dquli()");
        ddldegreeinfromation.Attributes.Add("onfocus", "deg()");
        ddlspecalization.Attributes.Add("onfocus", "specl()");
        ddluniversity.Attributes.Add("onfocus", "univ()");
        ddlinstitution.Attributes.Add("onfocus", "inst()");
    }

    public void journal()
    {
        ddljtype.Attributes.Add("onfocus", "jtype()");
        ddljname.Attributes.Add("onfocus", "jname()");
        ddlpublisher.Attributes.Add("onfocus", "publi()");
        ddlperiodicity.Attributes.Add("onfocus", "period()");
        ddljtitle.Attributes.Add("onfocus", "jtitle()");
    }

    public void book()
    {
        ddlbpname.Attributes.Add("onfocus", "bpname()");
        ddlbptitle.Attributes.Add("onfocus", "bptitle()");
    }

    public void edit()
    {
        ddlepname.Attributes.Add("onfocus", "epname()");
        ddletitle.Attributes.Add("onfocus", "etitle()");
        ddletype.Attributes.Add("onfocus", "etype()");

    }

    public void award()
    {
        ddlaname.Attributes.Add("onfocus", "aname()");
        ddlaoaname.Attributes.Add("onfocus", "aoname()");
        ddlanaward.Attributes.Add("onfocus", "anaward()");
    }

    public void project()
    {
        ddlprojecttitle.Attributes.Add("onfocus", "poject()");
    }

    public void research()
    {
        ddlresearchname.Attributes.Add("onfocus", "rname()");
        ddlresearchtype.Attributes.Add("onfocus", "rtype()");
        ddlrrtype.Attributes.Add("onfocus", "rrtyp()");
    }

    public void admin()
    {
        ddlamname.Attributes.Add("onfocus", "amname()");
    }

    public void prof()
    {
        ddlpmjoindyear.Attributes.Add("onfocus", "pmyear()");
        ddlpmname.Attributes.Add("onfocus", "pmname()");
    }

    public void guide()
    {
        ddlgyear.Attributes.Add("onfocus", "gyear()");
        ddlgtitle.Attributes.Add("onfocus", "gtitle()");
        ddlnatureguide.Attributes.Add("onfocus", "nguide()");
    }

    public void patent()
    {
        ddlprname.Attributes.Add("onfocus", "prname()");
        ddlpryear.Attributes.Add("onfocus", "pryear()");
        ddlprtitle.Attributes.Add("onfocus", "prtitle()");
    }

    public void grants()
    {
        ddlpgname.Attributes.Add("onfocus", "pgname()");
        ddlpgyear.Attributes.Add("onfocus", "pgyear()");
        ddlpgtitle.Attributes.Add("onfocus", "pgtitle()");
    }

    protected void btnmove_Click(object sender, EventArgs e)
    {
        txt_caddress.Text = txt_paddress.Text;
        txt_cstreet.Text = txt_pstreet.Text;
        txt_cpincode.Text = txt_ppincode.Text;
        txt_cresphone.Text = txt_presphone.Text;
        txt_cmobileno.Text = txt_pmobile.Text;
        txt_cfax.Text = txt_pfax.Text;

        if (ddlpstate.Items.Count > 0)
            ddlcstate.SelectedIndex = ddlpstate.SelectedIndex;
        if (ddlpdistirct.Items.Count > 0)
            ddlcdistrict.SelectedIndex = ddlpdistirct.SelectedIndex;
        if (ddlpcity.Items.Count > 0)
            ddlccity.SelectedIndex = ddlpcity.SelectedIndex;
    }

    protected void btncommmove_Click(object sender, EventArgs e)
    {
        txt_gaddress.Text = txt_caddress.Text;
        txt_gstreet.Text = txt_cstreet.Text;
        txt_gpincode.Text = txt_cpincode.Text;
        txt_gresphone.Text = txt_cresphone.Text;
        txt_gmobileno.Text = txt_cmobileno.Text;

        if (ddlcstate.Items.Count > 0)
            ddlgstate.SelectedIndex = ddlcstate.SelectedIndex;
        if (ddlcdistrict.Items.Count > 0)
            ddlgdistrict.SelectedIndex = ddlcdistrict.SelectedIndex;
        if (ddlccity.Items.Count > 0)
            ddlgcity.SelectedIndex = ddlccity.SelectedIndex;
    }

    protected void addnew_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                paddqualification.Visible = false;

                if (caption == "Title")
                {
                    if (txt_addrelation.Text != "")
                    {
                        paddqualification.Visible = false;
                        string value = txt_addrelation.Text;
                        string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','famtt','" + college + "')";
                        int a = d2.insert_method(strquery, hat, "Text");
                        txt_addrelation.Text = "";

                        bindtitle();
                    }
                }
                else if (caption == "Blood Group")
                {
                    if (txt_addrelation.Text != "")
                    {
                        paddqualification.Visible = false;
                        string value = txt_addrelation.Text;
                        string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','bgrou','" + college + "')";
                        int a = d2.insert_method(strquery, hat, "Text");
                        txt_addrelation.Text = "";

                        bindblood();
                    }
                }
                else if (caption == "Religion")
                {
                    if (txt_addrelation.Text != "")
                    {
                        paddqualification.Visible = false;
                        string value = txt_addrelation.Text;
                        string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','relig','" + college + "')";
                        int a = d2.insert_method(strquery, hat, "Text");
                        txt_addrelation.Text = "";

                        bindrelig();
                    }
                }
                else if (caption == "Community")
                {
                    if (txt_addrelation.Text != "")
                    {
                        paddqualification.Visible = false;
                        string value = txt_addrelation.Text;
                        string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','comm','" + college + "')";
                        int a = d2.insert_method(strquery, hat, "Text");
                        txt_addrelation.Text = "";

                        bindcomm();
                    }
                }
                else if (caption == "Nationality")
                {
                    if (txt_addrelation.Text != "")
                    {
                        paddqualification.Visible = false;
                        string value = txt_addrelation.Text;
                        string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','natio','" + college + "')";
                        int a = d2.insert_method(strquery, hat, "Text");
                        txt_addrelation.Text = "";

                        bindnational();
                    }
                }
                else if (caption == "Caste")
                {
                    if (txt_addrelation.Text != "")
                    {
                        paddqualification.Visible = false;
                        string value = txt_addrelation.Text;
                        string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','caste','" + college + "')";
                        int a = d2.insert_method(strquery, hat, "Text");
                        txt_addrelation.Text = "";

                        bindcaste();
                    }
                }
                else if (caption == "Familiar Subjects")
                {
                    if (txt_addrelation.Text != "")
                    {
                        paddqualification.Visible = false;
                        string value = txt_addrelation.Text;
                        string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','fsub','" + college + "')";
                        int a = d2.insert_method(strquery, hat, "Text");
                        txt_addrelation.Text = "";
                    }
                }
            }
        }
        catch (Exception c) { }
    }

    public void bindnational()
    {
        ddlnationality.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='natio' and college_code=" + collegecode + "  and TextVal<>'' and TextVal is not null";
        DataSet ds = new DataSet();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlnationality.DataSource = ds;
            ddlnationality.DataTextField = "Textval";
            ddlnationality.DataValueField = "TextCode";
            ddlnationality.DataBind();
            ddlnationality.Enabled = true;
        }
        ddlnationality.Items.Insert(0, "---Select---");
        ddlnationality.Items.Insert(ddlnationality.Items.Count, "Others");

    }

    public void bindrelaiton()
    {
        ddlrelationship.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='faml' and college_code=" + collegecode + " and TextVal<>'' and TextVal is not null";
        DataSet ds = new DataSet();
        ds.Clear();
        ds.Dispose();
        ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlrelationship.DataSource = ds;
            ddlrelationship.DataTextField = "Textval";
            ddlrelationship.DataValueField = "TextCode";
            ddlrelationship.DataBind();
            ddlrelationship.Enabled = true;
        }
        ddlrelationship.Items.Insert(0, "Select");
        ddlrelationship.Items.Insert(ddlrelationship.Items.Count, "Others");
    }

    protected void btnminus_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlrelationship.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlrelationship.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='faml' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindrelaiton();
                }
            }
            paddqualification.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btnreligionremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlreligion.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlreligion.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='relig' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindrelig();
                }
            }
            paddqualification.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btncommunityremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlcommunity.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlcommunity.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='comm' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindcomm();
                }
            }
            paddqualification.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btnnationalityremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlnationality.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlnationality.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='natio' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindnational();
                }
            }
            paddqualification.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btncasteremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlcaste.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlcaste.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='caste' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindcaste();
                }
            }
            paddqualification.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btnremoveentry_Click(object sender, EventArgs e)
    {
        panelqulificaiton.Visible = true;
        lblqulivalidation.Visible = false;
        panelentry.Visible = false;
        entrys();
    }

    protected void btnaddentry_Click(object sender, EventArgs e)
    {
        try
        {
            entrys();
            panelqulificaiton.Visible = true;
            lblqulivalidation.Visible = false;
            ArrayList testarray = new ArrayList();
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelentry.Visible = false;
                if (caption1 == "Graduation")
                {
                    if (txt_entryvalue.Text != "")
                    {
                        if (ddlgraduation.Items.Count == 0)
                        {
                            paddqualification.Visible = false;
                            string value = txt_entryvalue.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grdu','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_entryvalue.Text = "";

                            graduation();
                        }
                        else
                        {
                            if (ddlgraduation.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlgraduation.Items.Count; i++)
                                {
                                    testarray.Add(ddlgraduation.Items[i].ToString());
                                }
                                string typevalue = txt_entryvalue.Text;
                                if (testarray.Contains(typevalue) == false)
                                {

                                    string value = txt_entryvalue.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grdu','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_entryvalue.Text = "";

                                    graduation();
                                }
                                else
                                {
                                    lblqulivalidation.Text = "All Ready Exists";
                                    lblqulivalidation.Visible = true;
                                    panelentry.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblqulivalidation.Text = "Please Enter Graduation";
                        lblqulivalidation.Visible = true;
                        panelentry.Visible = true;
                    }
                }
                else if (caption1 == "Degree")
                {
                    if (txt_entryvalue.Text != "")
                    {
                        if (ddldegreeinfromation.Items.Count == 0)
                        {
                            paddqualification.Visible = false;
                            string value = txt_entryvalue.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grdg','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_entryvalue.Text = "";

                            Degree();
                        }
                        else
                        {
                            if (ddldegreeinfromation.Items.Count > 0)
                            {
                                for (int i = 0; i < ddldegreeinfromation.Items.Count; i++)
                                {
                                    testarray.Add(ddldegreeinfromation.Items[i].ToString());
                                }
                                string typevalue = txt_entryvalue.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_entryvalue.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grdg','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_entryvalue.Text = "";

                                    Degree();
                                }
                                else
                                {
                                    lblqulivalidation.Text = "All Ready Exists";
                                    lblqulivalidation.Visible = true;
                                    panelentry.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblqulivalidation.Text = "Please Enter Degree";
                        lblqulivalidation.Visible = true;
                        panelentry.Visible = true;
                    }
                }
                else if (caption1 == "Specalization")
                {
                    if (txt_entryvalue.Text != "")
                    {
                        if (ddlspecalization.Items.Count == 0)
                        {
                            paddqualification.Visible = false;
                            string value = txt_entryvalue.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grsp','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_entryvalue.Text = "";

                            Specialization();
                        }
                        else
                        {
                            if (ddlspecalization.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlspecalization.Items.Count; i++)
                                {
                                    testarray.Add(ddlspecalization.Items[i].ToString());
                                }
                                string typevalue = txt_entryvalue.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_entryvalue.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grsp','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_entryvalue.Text = "";

                                    Specialization();
                                }
                                else
                                {
                                    lblqulivalidation.Text = "All Ready Exists";
                                    lblqulivalidation.Visible = true;
                                    panelentry.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblqulivalidation.Text = "Please Enter Specalization";
                        lblqulivalidation.Visible = true;
                        panelentry.Visible = true;
                    }
                }
                else if (caption1 == "University")
                {
                    if (txt_entryvalue.Text != "")
                    {
                        if (ddluniversity.Items.Count == 0)
                        {
                            paddqualification.Visible = false;
                            string value = txt_entryvalue.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','gruni','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_entryvalue.Text = "";

                            University();
                        }
                        else
                        {
                            if (ddluniversity.Items.Count > 0)
                            {
                                for (int i = 0; i < ddluniversity.Items.Count; i++)
                                {
                                    testarray.Add(ddluniversity.Items[i].ToString());
                                }
                                string typevalue = txt_entryvalue.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    paddqualification.Visible = false;
                                    string value = txt_entryvalue.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','gruni','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_entryvalue.Text = "";

                                    University();
                                }
                                else
                                {
                                    lblqulivalidation.Text = "All Ready Exists";
                                    lblqulivalidation.Visible = true;
                                    panelentry.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblqulivalidation.Text = "Please Enter University";
                        lblqulivalidation.Visible = true;
                        panelentry.Visible = true;
                    }
                }
                else if (caption1 == "Institution")
                {
                    if (txt_entryvalue.Text != "")
                    {
                        if (ddlinstitution.Items.Count == 0)
                        {
                            paddqualification.Visible = false;
                            string value = txt_entryvalue.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grins','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_entryvalue.Text = "";

                            Institution();
                        }
                        else
                        {
                            if (ddlinstitution.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlinstitution.Items.Count; i++)
                                {
                                    testarray.Add(ddlinstitution.Items[i].ToString());
                                }
                                string typevalue = txt_entryvalue.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_entryvalue.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grins','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_entryvalue.Text = "";

                                    Institution();
                                }
                                else
                                {
                                    lblqulivalidation.Text = "All Ready Exists";
                                    lblqulivalidation.Visible = true;
                                    panelentry.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblqulivalidation.Text = "Please Enter Institution";
                        lblqulivalidation.Visible = true;
                        panelentry.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnorganizationremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlorganization.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlorganization.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='grorg' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindorgnaization();
                }
            }
            panelexp.Visible = false;
            panelexperience.Visible = true;
            exp();
        }
        catch (Exception ex) { }
    }

    protected void btndesigadd_Click(object sender, EventArgs e)
    {
        panelexp.Visible = true;
        panelexperience.Visible = true;
    }

    protected void btndesigremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddldesignationexp.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddldesignationexp.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='grdes' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    binddesing();
                }
            }
            panelexp.Visible = false;
            panelexperience.Visible = true;
            exp();
        }
        catch (Exception ex) { }
    }

    protected void btnexpinadd_Click(object sender, EventArgs e)
    {
        panelexp.Visible = true;
        panelexperience.Visible = true;

    }

    protected void btnexpinremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlexpin.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlexpin.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='grein' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindexpin();
                }
            }
            panelexp.Visible = false;
            panelexperience.Visible = true;
            exp();
        }
        catch (Exception ex) { }
    }

    protected void btnrforradd_Click(object sender, EventArgs e)
    {
        panelexp.Visible = true;
        panelexperience.Visible = true;
    }

    protected void btnrforremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlrforr.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlrforr.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='grrfr' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindreson();
                }
            }
            panelexp.Visible = false;
            panelexperience.Visible = true;
            exp();
        }
        catch (Exception ex) { }
    }

    protected void btnexpadd1_Click(object sender, EventArgs e)
    {
        try
        {
            exp();
            lblexpvalidation.Visible = false;
            ArrayList testarray = new ArrayList();
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelexp.Visible = false;
                if (cap == "Organization")
                {
                    if (txt_exp.Text != "")
                    {
                        if (ddlorganization.Items.Count == 0)
                        {
                            panelexp.Visible = false;
                            string value = txt_exp.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grorg','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_exp.Text = "";

                            bindorgnaization();
                        }
                        else
                        {
                            if (ddlorganization.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlorganization.Items.Count; i++)
                                {
                                    testarray.Add(ddlorganization.Items[i].ToString());
                                }
                                string typevalue = txt_exp.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_exp.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grins','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_exp.Text = "";

                                    Institution();
                                }
                                else
                                {
                                    lblexpvalidation.Text = "All Ready Exists";
                                    lblexpvalidation.Visible = true;
                                    panelexp.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblexpvalidation.Text = "Please Enter Organization";
                        lblexpvalidation.Visible = true;
                        panelexp.Visible = true;
                    }
                }
                else if (cap == "Designation")
                {
                    if (txt_exp.Text != "")
                    {
                        if (ddldesignationexp.Items.Count == 0)
                        {
                            panelexp.Visible = false;
                            string value = txt_exp.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grdes','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_exp.Text = "";

                            binddesing();
                        }
                        else
                        {
                            if (ddldesignationexp.Items.Count > 0)
                            {
                                for (int i = 0; i < ddldesignationexp.Items.Count; i++)
                                {
                                    testarray.Add(ddldesignationexp.Items[i].ToString());
                                }
                                string typevalue = txt_exp.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_exp.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grins','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_exp.Text = "";

                                    binddesing();
                                }
                                else
                                {
                                    lblexpvalidation.Text = "All Ready Exists";
                                    lblexpvalidation.Visible = true;
                                    panelexp.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblexpvalidation.Text = "Please Enter Designation";
                        lblexpvalidation.Visible = true;
                        panelexp.Visible = true;
                    }
                }
                else if (cap == "Experience in")
                {
                    if (txt_exp.Text != "")
                    {
                        if (ddlexpin.Items.Count == 0)
                        {
                            panelexp.Visible = false;
                            string value = txt_exp.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grein','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_exp.Text = "";

                            bindexpin();
                        }
                        else
                        {
                            if (ddlexpin.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlexpin.Items.Count; i++)
                                {
                                    testarray.Add(ddlexpin.Items[i].ToString());
                                }
                                string typevalue = txt_exp.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_exp.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grins','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_exp.Text = "";

                                    bindexpin();
                                }
                                else
                                {
                                    lblexpvalidation.Text = "All Ready Exists";
                                    lblexpvalidation.Visible = true;
                                    panelexp.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblexpvalidation.Text = "Please Enter Experience";
                        lblexpvalidation.Visible = true;
                        panelexp.Visible = true;
                    }
                }
                else if (cap == "Reson for Releiving")
                {
                    if (txt_exp.Text != "")
                    {
                        if (ddlrforr.Items.Count == 0)
                        {
                            panelexp.Visible = false;
                            string value = txt_exp.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grrfr','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_exp.Text = "";

                            bindreson();
                        }
                        else
                        {
                            if (ddlrforr.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlrforr.Items.Count; i++)
                                {
                                    testarray.Add(ddlrforr.Items[i].ToString());
                                }
                                string typevalue = txt_exp.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_exp.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grins','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_exp.Text = "";

                                    bindreson();
                                }
                                else
                                {
                                    lblexpvalidation.Text = "All Ready Exists";
                                    lblexpvalidation.Visible = true;
                                    panelexp.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblexpvalidation.Text = "Please Enter Reson for Releiving";
                        lblexpvalidation.Visible = true;
                        panelexp.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    public void bindorgnaization()
    {
        ddlorganization.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='grorg' and college_code=" + collcode + "  and TextVal<>'' and TextVal is not null";
        DataSet ds = new DataSet();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlorganization.DataSource = ds;
            ddlorganization.DataTextField = "Textval";
            ddlorganization.DataValueField = "TextCode";
            ddlorganization.DataBind();
        }
        ddlorganization.Items.Insert(0, "Select");
        ddlorganization.Items.Insert(ddlorganization.Items.Count, "Others");

    }

    public void binddesing()
    {
        ddldesignationexp.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='grdes' and college_code=" + collcode + " and Textval<>'' and Textval is not null";
        DataSet ds = new DataSet();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddldesignationexp.DataSource = ds;
            ddldesignationexp.DataTextField = "Textval";
            ddldesignationexp.DataValueField = "TextCode";
            ddldesignationexp.DataBind();
        }
        ddldesignationexp.Items.Insert(0, "Select");
        ddldesignationexp.Items.Insert(ddldesignationexp.Items.Count, "Others");
    }

    public void bindexpin()
    {
        ddlexpin.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='grein' and college_code=" + collcode + " and Textval<>'' and Textval is not null";
        DataSet ds = new DataSet();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlexpin.DataSource = ds;
            ddlexpin.DataTextField = "Textval";
            ddlexpin.DataValueField = "TextCode";
            ddlexpin.DataBind();
        }
        ddlexpin.Items.Insert(0, "Select");
        ddlexpin.Items.Insert(ddlexpin.Items.Count, "Others");
    }

    public void bindreson()
    {
        ddlrforr.Items.Clear();
        string collcode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='grrfr' and college_code=" + collcode + " and Textval<>'' and Textval is not null";
        DataSet ds = new DataSet();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlrforr.DataSource = ds;
            ddlrforr.DataTextField = "Textval";
            ddlrforr.DataValueField = "TextCode";
            ddlrforr.DataBind();
        }
        ddlrforr.Items.Insert(0, "Select");
        ddlrforr.Items.Insert(ddlrforr.Items.Count, "Others");
    }

    protected void btnexpexit1_Click(object sender, EventArgs e)
    {
        exp();
        panelexp.Visible = false;
        panelexperience.Visible = true;
        lblexpvalidation.Visible = false;
    }

    public void exp()
    {
        ddlorganization.Attributes.Add("onfocus", "ram()");
        ddldesignationexp.Attributes.Add("onfocus", "desig()");
        ddlexpin.Attributes.Add("onfocus", "expin()");
        ddlrforr.Attributes.Add("onfocus", "reson()");
    }

    public void sematt()
    {
        ddlsemtype.Attributes.Add("onfocus", "semtype()");
        ddlprogramname.Attributes.Add("onfocus", "progname()");
        ddlplace.Attributes.Add("onfocus", "plce()");
        ddlsponsored.Attributes.Add("onfocus", "spons()");
        ddlstile.Attributes.Add("onfocus", "titel()");
    }

    protected void btnaddsem_Click(object sender, EventArgs e)
    {
        try
        {
            sematt();
            panelsemattend.Visible = true;
            ArrayList testarray = new ArrayList();
            lblsemattndvalidation.Visible = false;
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelsem.Visible = false;
                if (semcap == "Sem Type")
                {
                    if (txt_semtype.Text != "")
                    {
                        if (ddlsemtype.Items.Count == 0)
                        {
                            string value = txt_semtype.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','semt','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_semtype.Text = "";

                            Type();
                        }
                        else
                        {
                            if (ddlsemtype.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlsemtype.Items.Count; i++)
                                {
                                    testarray.Add(ddlsemtype.Items[i].ToString());
                                }
                                string typevalue = txt_semtype.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_semtype.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','semt','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_semtype.Text = "";

                                    Type();
                                }
                                else
                                {
                                    lblsemattndvalidation.Text = "All Ready Exists";
                                    lblsemattndvalidation.Visible = true;
                                    panelsem.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblsemattndvalidation.Text = "Please Enter Sem Type";
                        lblsemattndvalidation.Visible = true;
                        panelsem.Visible = true;
                    }
                }
                else if (semcap == "Program Name")
                {
                    if (txt_semtype.Text != "")
                    {
                        if (ddlprogramname.Items.Count == 0)
                        {

                            string value = txt_semtype.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','semp','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_semtype.Text = "";

                            ProgramName();
                        }
                        else
                        {
                            if (ddlprogramname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlprogramname.Items.Count; i++)
                                {
                                    testarray.Add(ddlprogramname.Items[i].ToString());
                                }
                                string typevalue = txt_semtype.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_semtype.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','semp','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_semtype.Text = "";

                                    ProgramName();
                                }
                                else
                                {
                                    lblsemattndvalidation.Text = "All Ready Exists";
                                    lblsemattndvalidation.Visible = true;
                                    panelsem.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblsemattndvalidation.Text = "Please Enter Program Name";
                        lblsemattndvalidation.Visible = true;
                        panelsem.Visible = true;
                    }
                }
                else if (semcap == "Place")
                {
                    if (txt_semtype.Text != "")
                    {
                        if (ddlplace.Items.Count == 0)
                        {
                            string value = txt_semtype.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sempl','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_semtype.Text = "";

                            Place();
                        }
                        else
                        {
                            if (ddlplace.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlplace.Items.Count; i++)
                                {
                                    testarray.Add(ddlplace.Items[i].ToString());
                                }
                                string typevalue = txt_semtype.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_semtype.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sempl','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_semtype.Text = "";

                                    ProgramName();
                                }
                                else
                                {
                                    lblsemattndvalidation.Text = "All Ready Exists";
                                    lblsemattndvalidation.Visible = true;
                                    panelsem.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblsemattndvalidation.Text = "Please Enter Place";
                        lblsemattndvalidation.Visible = true;
                        panelsem.Visible = true;
                    }
                }
                else if (semcap == "Sponsored")
                {
                    if (txt_semtype.Text != "")
                    {
                        if (ddlsponsored.Items.Count == 0)
                        {
                            string value = txt_semtype.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','semsp','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_semtype.Text = "";

                            Sponsered();
                        }
                        else
                        {
                            if (ddlsponsored.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlsponsored.Items.Count; i++)
                                {
                                    testarray.Add(ddlsponsored.Items[i].ToString());
                                }
                                string typevalue = txt_semtype.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_semtype.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','semsp','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_semtype.Text = "";
                                    Sponsered();
                                }
                                else
                                {
                                    lblsemattndvalidation.Text = "All Ready Exists";
                                    lblsemattndvalidation.Visible = true;
                                    panelsem.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblsemattndvalidation.Text = "Please Enter Sponsored";
                        lblsemattndvalidation.Visible = true;
                        panelsem.Visible = true;
                    }
                }
                else if (semcap == "Title")
                {
                    if (txt_semtype.Text != "")
                    {
                        if (ddlstile.Items.Count == 0)
                        {

                            string value = txt_semtype.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','semtt','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_semtype.Text = "";

                            SeminorTitle();
                        }
                        else
                        {
                            if (ddlstile.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlstile.Items.Count; i++)
                                {
                                    testarray.Add(ddlstile.Items[i].ToString());
                                }
                                string typevalue = txt_semtype.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_semtype.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','semtt','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_semtype.Text = "";

                                    SeminorTitle();
                                }
                                else
                                {
                                    lblsemattndvalidation.Text = "All Ready Exists";
                                    lblsemattndvalidation.Visible = true;
                                    panelsem.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblsemattndvalidation.Text = "Please Enter Title";
                        lblsemattndvalidation.Visible = true;
                        panelsem.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexitsem_Click(object sender, EventArgs e)
    {
        sematt();
        panelsem.Visible = false;
        panelsemattend.Visible = true;
        lblsemattndvalidation.Visible = false;
    }

    public void org()
    {
        ddlorgname.Attributes.Add("onfocus", "oname()");
        ddlorgplace.Attributes.Add("onfocus", "opname()");
        ddlorgtitle.Attributes.Add("onfocus", "otitle()");
    }

    protected void btnaddorg_Click(object sender, EventArgs e)
    {
        try
        {
            org();
            panelsemorg.Visible = true;
            lblorgvalidation.Visible = false;
            ArrayList testarray = new ArrayList();
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelo.Visible = false;
                if (semorg == "Program Name")
                {
                    if (txt_org.Text != "")
                    {
                        if (ddlorgname.Items.Count == 0)
                        {
                            string value = txt_org.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','smorn','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_org.Text = "";

                            OrgProgramName();
                        }
                        else
                        {
                            if (ddlorgname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlorgname.Items.Count; i++)
                                {
                                    testarray.Add(ddlorgname.Items[i].ToString());
                                }
                                string typevalue = txt_org.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_org.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','smorn','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_org.Text = "";

                                    OrgProgramName();
                                }
                                else
                                {
                                    lblorgvalidation.Text = "All Ready Exists";
                                    lblorgvalidation.Visible = true;
                                    panelo.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblorgvalidation.Text = "Please Enter Program Name";
                        lblorgvalidation.Visible = true;
                        panelo.Visible = true;
                    }
                }
                else if (semorg == "Place")
                {
                    if (txt_org.Text != "")
                    {
                        if (ddlorgplace.Items.Count == 0)
                        {
                            string value = txt_org.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','smorp','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_org.Text = "";

                            OrgPlace();
                        }
                        else
                        {
                            if (ddlorgplace.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlorgplace.Items.Count; i++)
                                {
                                    testarray.Add(ddlorgplace.Items[i].ToString());
                                }
                                string typevalue = txt_org.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_org.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','smorp','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_org.Text = "";

                                    OrgPlace();
                                }
                                else
                                {
                                    lblorgvalidation.Text = "All Ready Exists";
                                    lblorgvalidation.Visible = true;
                                    panelo.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblorgvalidation.Text = "Please Enter Place";
                        lblorgvalidation.Visible = true;
                        panelo.Visible = true;
                    }
                }
                else if (semorg == "Title")
                {
                    if (txt_org.Text != "")
                    {
                        if (ddlorgtitle.Items.Count == 0)
                        {
                            string value = txt_org.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','smort','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_org.Text = "";

                            OrgTitle();
                        }
                        else
                        {
                            if (ddlorgtitle.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlorgtitle.Items.Count; i++)
                                {
                                    testarray.Add(ddlorgtitle.Items[i].ToString());
                                }
                                string typevalue = txt_org.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_org.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','smort','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_org.Text = "";

                                    OrgTitle();
                                }
                                else
                                {
                                    lblorgvalidation.Text = "All Ready Exists";
                                    lblorgvalidation.Visible = true;
                                    panelo.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblorgvalidation.Text = "Please Enter Title";
                        lblorgvalidation.Visible = true;
                        panelo.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexitorg_Click(object sender, EventArgs e)
    {

        org();
        panelo.Visible = false;
        lblorgvalidation.Visible = false;
        panelsemorg.Visible = true;
    }

    protected void btnjadd_Click(object sender, EventArgs e)
    {
        try
        {
            lblvalidationjournalpublication.Visible = false;
            ArrayList testarray = new ArrayList();
            journal();
            paneljournal.Visible = true;
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelj.Visible = false;
                if (semorg == "Type")
                {
                    if (txt_j.Text != "")
                    {
                        testarray.Clear();
                        if (ddljtype.Items.Count == 0)
                        {
                            string value = txt_j.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sjty','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_j.Text = "";

                            JournalType();
                        }
                        else
                        {
                            if (ddljtype.Items.Count > 0)
                            {
                                for (int i = 0; i < ddljtype.Items.Count; i++)
                                {
                                    testarray.Add(ddljtype.Items[i].ToString());
                                }
                                string typevalue = txt_j.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_j.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sjty','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_j.Text = "";

                                    JournalType();
                                }
                                else
                                {
                                    lblvalidationjournalpublication.Text = "All Ready Exsist";
                                    lblvalidationjournalpublication.Visible = true;
                                    panelj.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationjournalpublication.Text = "Please Entre Type";
                        lblvalidationjournalpublication.Visible = true;
                        panelj.Visible = true;
                    }
                }
                else if (semorg == "Journal Name")
                {
                    if (txt_j.Text != "")
                    {
                        if (ddljname.Items.Count == 0)
                        {
                            string value = txt_j.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sjnm','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_j.Text = "";

                            JournalName();
                        }
                        else
                        {
                            if (ddljname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddljname.Items.Count; i++)
                                {
                                    testarray.Add(ddljname.Items[i].ToString());
                                }
                                string typevalue = txt_j.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_j.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sjnm','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_j.Text = "";

                                    JournalName();
                                }
                                else
                                {
                                    lblvalidationjournalpublication.Text = "All Ready Exsist";
                                    lblvalidationjournalpublication.Visible = true;
                                    panelj.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationjournalpublication.Text = "Please Entre Journal Name";
                        lblvalidationjournalpublication.Visible = true;
                        panelj.Visible = true;
                    }
                }
                else if (semorg == "Publisher")
                {
                    if (txt_j.Text != "")
                    {
                        if (ddlbpname.Items.Count == 0)
                        {
                            string value = txt_j.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sjps','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_j.Text = "";

                            Publisher();
                        }
                        else
                        {
                            if (ddlbpname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlbpname.Items.Count; i++)
                                {
                                    testarray.Add(ddlbpname.Items[i].ToString());
                                }
                                string typevalue = txt_j.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_j.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sjps','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_j.Text = "";

                                    Publisher();
                                }
                                else
                                {
                                    lblvalidationjournalpublication.Text = "All Ready Exsist";
                                    lblvalidationjournalpublication.Visible = true;
                                    panelj.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationjournalpublication.Text = "Please Entre Publisher";
                        lblvalidationjournalpublication.Visible = true;
                        panelj.Visible = true;
                    }
                }
                else if (semorg == "Periodicity")
                {
                    if (txt_j.Text != "")
                    {
                        if (ddlperiodicity.Items.Count == 0)
                        {
                            string value = txt_j.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sjpr','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_j.Text = "";

                            Periodicity();
                        }
                        else
                        {
                            if (ddlperiodicity.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlperiodicity.Items.Count; i++)
                                {
                                    testarray.Add(ddlperiodicity.Items[i].ToString());
                                }
                                string typevalue = txt_j.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_j.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sjpr','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_j.Text = "";

                                    Periodicity();
                                }
                                else
                                {
                                    lblvalidationjournalpublication.Text = "All Ready Exsist";
                                    lblvalidationjournalpublication.Visible = true;
                                    panelj.Visible = true;

                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationjournalpublication.Text = "Please Entre Periodicity";
                        lblvalidationjournalpublication.Visible = true;
                        panelj.Visible = true;
                    }
                }
                else if (semorg == "Title")
                {
                    if (txt_j.Text != "")
                    {
                        if (ddljtitle.Items.Count == 0)
                        {
                            string value = txt_j.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sjtit','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_j.Text = "";

                            JournalTitle();
                        }
                        else
                        {
                            if (ddljtitle.Items.Count > 0)
                            {
                                for (int i = 0; i < ddljtitle.Items.Count; i++)
                                {
                                    testarray.Add(ddljtitle.Items[i].ToString());
                                }
                                string typevalue = txt_j.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_j.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sjtit','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_j.Text = "";

                                    JournalTitle();
                                }
                                else
                                {
                                    lblvalidationjournalpublication.Text = "All Ready Exsist";
                                    lblvalidationjournalpublication.Visible = true;
                                    panelj.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationjournalpublication.Text = "Please Entre Title";
                        lblvalidationjournalpublication.Visible = true;
                        panelj.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnjexit_Click(object sender, EventArgs e)
    {
        panelj.Visible = false;
        lblvalidationjournalpublication.Visible = false;
        paneljournal.Visible = true;
        journal();
    }

    protected void btnbadd_Click(object sender, EventArgs e)
    {
        try
        {
            book();
            ArrayList testarray = new ArrayList();
            panelbooks.Visible = true;
            txt_byear.Text = DateTime.Now.ToString("dd/MM/yyyy");
            lblvalidationbook.Visible = false;
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelb.Visible = false;
                if (semorg == "Publisher Name")
                {
                    if (txt_b.Text != "")
                    {
                        if (ddlbpname.Items.Count == 0)
                        {

                            string value = txt_b.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sbpn','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_b.Text = "";

                            PublisherName();
                        }
                        else
                        {
                            if (ddlbpname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlbpname.Items.Count; i++)
                                {
                                    testarray.Add(ddlbpname.Items[i].ToString());
                                }

                                string typevalue = txt_b.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_b.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sbpn','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_b.Text = "";

                                    PublisherName();
                                }
                                else
                                {
                                    lblvalidationbook.Text = "All Ready Exsist";
                                    lblvalidationbook.Visible = true;
                                    panelb.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationbook.Text = "Please Entre Publisher Name";
                        lblvalidationbook.Visible = true;
                        panelb.Visible = true;
                    }
                }
                else if (semorg == "Title")
                {
                    if (txt_b.Text != "")
                    {
                        if (ddlbptitle.Items.Count == 0)
                        {
                            string value = txt_b.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sbpt','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_b.Text = "";

                            PublisherTitle();
                        }
                        else
                        {
                            if (ddlbpname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlbpname.Items.Count; i++)
                                {
                                    testarray.Add(ddlbpname.Items[i].ToString());
                                }
                                string typevalue = txt_b.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_b.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sbpt','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_b.Text = "";

                                    PublisherTitle();
                                }
                                else
                                {
                                    lblvalidationbook.Text = "All Ready Exsist";
                                    lblvalidationbook.Visible = true;
                                    panelb.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationbook.Text = "Please Entre Title";
                        lblvalidationbook.Visible = true;
                        panelb.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnbexit_Click(object sender, EventArgs e)
    {
        panelb.Visible = false;
        panelbooks.Visible = true;
        lblvalidationbook.Visible = false;
        book();
    }

    protected void btnadde_Click(object sender, EventArgs e)
    {
        try
        {
            edit();
            paneledit.Visible = true;
            ArrayList testarray = new ArrayList();
            lbledivalidation.Visible = false;
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panele.Visible = false;
                if (semorg == "Type")
                {
                    if (txt_e.Text != "")
                    {
                        if (ddletype.Items.Count == 0)
                        {
                            string value = txt_e.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sety','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_e.Text = "";

                            EditorType();
                        }
                        else
                        {
                            if (ddletype.Items.Count > 0)
                            {
                                for (int i = 0; i < ddletype.Items.Count; i++)
                                {
                                    testarray.Add(ddletype.Items[i].ToString());
                                }
                                string typevalue = txt_e.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_e.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sety','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_e.Text = "";
                                    EditorType();
                                }
                                else
                                {
                                    lbledivalidation.Text = "All Ready Exists";
                                    lbledivalidation.Visible = true;
                                    panele.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lbledivalidation.Text = "Please Enter Type";
                        lbledivalidation.Visible = true;
                        panele.Visible = true;
                    }
                }
                else if (semorg == "Title")
                {
                    if (txt_e.Text != "")
                    {
                        if (ddletitle.Items.Count == 0)
                        {

                            string value = txt_e.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','setit','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_e.Text = "";

                            EditorTitle();
                        }
                        else
                        {
                            if (ddletitle.Items.Count > 0)
                            {
                                for (int i = 0; i < ddletitle.Items.Count; i++)
                                {

                                    testarray.Add(ddletitle.Items[i].ToString());
                                }
                                string typevalue = txt_e.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_e.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','setit','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_e.Text = "";
                                    EditorTitle();
                                }
                                else
                                {
                                    lbledivalidation.Text = "All Ready Exists";
                                    lbledivalidation.Visible = true;
                                    panele.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lbledivalidation.Text = "Please Enter Title";
                        lbledivalidation.Visible = true;
                        panele.Visible = true;
                    }
                }
                else if (semorg == "Publisher")
                {
                    if (txt_e.Text != "")
                    {
                        if (ddlepname.Items.Count == 0)
                        {
                            string value = txt_e.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sepn','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_e.Text = "";

                            EditorName();
                        }
                        else
                        {
                            if (ddlepname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlepname.Items.Count; i++)
                                {
                                    testarray.Add(ddlepname.Items[i].ToString());
                                }
                                string typevalue = txt_e.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_e.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sepn','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_e.Text = "";
                                    EditorName();
                                }
                                else
                                {
                                    lbledivalidation.Text = "All Ready Exists";
                                    lbledivalidation.Visible = true;
                                    panele.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lbledivalidation.Text = "Please Enter Publisher";
                        lbledivalidation.Visible = true;
                        panele.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexite_Click(object sender, EventArgs e)
    {
        panele.Visible = false;
        paneledit.Visible = true;
        lbledivalidation.Visible = false;
        edit();
    }

    protected void btnadda_Click(object sender, EventArgs e)
    {
        try
        {
            award();
            panelaward.Visible = true;
            lblawardvaidation.Visible = false;
            ArrayList testarray = new ArrayList();
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panela.Visible = false;
                if (semorg == "Nature of Award")
                {

                    if (txt_a.Text != "")
                    {
                        if (ddlanaward.Items.Count == 0)
                        {
                            string value = txt_a.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sanan','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_a.Text = "";

                            AwardNature();
                        }
                        else
                        {
                            if (ddlanaward.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlanaward.Items.Count; i++)
                                {
                                    testarray.Add(ddlanaward.Items[i].ToString());
                                }
                                string typevalue = txt_a.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_a.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sanan','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_a.Text = "";
                                    AwardNature();
                                }
                                else
                                {
                                    lblawardvaidation.Text = "All Ready Exists";
                                    lblawardvaidation.Visible = true;
                                    panela.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblawardvaidation.Text = "Please Enter Nature of Award";
                        lblawardvaidation.Visible = true;
                        panela.Visible = true;
                    }
                }
                else if (semorg == "Name")
                {
                    if (txt_a.Text != "")
                    {
                        if (ddlaname.Items.Count == 0)
                        {
                            string value = txt_a.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sanm','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_a.Text = "";

                            AwardName();
                        }
                        else
                        {
                            if (ddlaname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlaname.Items.Count; i++)
                                {
                                    testarray.Add(ddlaname.Items[i].ToString());
                                }
                                string typevalue = txt_a.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_a.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sanm','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_a.Text = "";
                                    AwardName();
                                }
                                else
                                {
                                    lblawardvaidation.Text = "All Ready Exists";
                                    lblawardvaidation.Visible = true;
                                    panela.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblawardvaidation.Text = "Please Enter Name";
                        lblawardvaidation.Visible = true;
                        panela.Visible = true;
                    }
                }
                else if (semorg == "Organization Name")
                {
                    if (txt_a.Text != "")
                    {
                        if (ddlaoaname.Items.Count == 0)
                        {
                            string value = txt_e.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','saonm','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_a.Text = "";

                            OrgName();
                        }
                        else
                        {
                            if (ddlaoaname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlaoaname.Items.Count; i++)
                                {
                                    testarray.Add(ddlaoaname.Items[i].ToString());
                                }
                                string typevalue = txt_a.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_a.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','saonm','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_a.Text = "";
                                    OrgName();
                                }
                                else
                                {
                                    lblawardvaidation.Text = "All Ready Exists";
                                    lblawardvaidation.Visible = true;
                                    panela.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblawardvaidation.Text = "Please Enter Organization Name";
                        lblawardvaidation.Visible = true;
                        panela.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexita_Click(object sender, EventArgs e)
    {
        panela.Visible = false;
        panelaward.Visible = true;
        lblawardvaidation.Visible = false;
        award();
    }

    protected void btnaddp_Click(object sender, EventArgs e)
    {
        try
        {
            prof();
            ArrayList testarray = new ArrayList();
            panelproject.Visible = true;
            lblprojectvalidation.Visible = false;
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelp.Visible = false;
                if (semorg == "Project Title")
                {

                    if (txt_p.Text != "")
                    {
                        if (ddlprojecttitle.Items.Count == 0)
                        {
                            string value = txt_p.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spron','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_p.Text = "";

                            ProjectTitle();
                        }
                        else
                        {
                            if (ddlprojecttitle.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlprojecttitle.Items.Count; i++)
                                {
                                    testarray.Add(ddlprojecttitle.Items[i].ToString());
                                }
                                string typevalue = txt_p.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_p.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spron','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_p.Text = "";
                                    ProjectTitle();
                                }
                                else
                                {
                                    lblprojectvalidation.Text = "All Ready Exists";
                                    lblprojectvalidation.Visible = true;
                                    panelp.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblprojectvalidation.Text = "Please Enter Project Title";
                        lblprojectvalidation.Visible = true;
                        panelp.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexitp_Click(object sender, EventArgs e)
    {
        panelp.Visible = false;
        panelproject.Visible = true;
        lblprojectvalidation.Visible = false;
        prof();
    }

    protected void btnaddr_Click(object sender, EventArgs e)
    {
        try
        {
            research();
            panelresearch.Visible = true;
            ArrayList testarray = new ArrayList();
            lblresearchvalidation.Visible = false;
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelr.Visible = false;
                if (semorg == "Name")
                {
                    if (txt_r.Text != "")
                    {
                        if (ddlresearchname.Items.Count == 0)
                        {
                            string value = txt_r.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value.ToUpper() + "','srnm','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_r.Text = "";

                            ResearchName();
                        }
                        else
                        {
                            if (ddlresearchname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlresearchname.Items.Count; i++)
                                {
                                    testarray.Add(ddlresearchname.Items[i].ToString());
                                }
                                string typevalue = txt_r.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_r.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value.ToUpper() + "','srnm','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_r.Text = "";
                                    ResearchName();
                                }
                                else
                                {
                                    lblresearchvalidation.Text = "All Ready Exists";
                                    lblresearchvalidation.Visible = true;
                                    panelr.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblresearchvalidation.Text = "Please Enter Name";
                        lblresearchvalidation.Visible = true;
                        panelr.Visible = true;
                    }
                }
                else if (semorg == "Type")
                {
                    if (txt_r.Text != "")
                    {
                        if (ddlresearchtype.Items.Count == 0)
                        {
                            string value = txt_r.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value.ToUpper() + "','srty','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_r.Text = "";

                            RType();
                        }
                        else
                        {
                            if (ddlresearchtype.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlresearchtype.Items.Count; i++)
                                {
                                    testarray.Add(ddlresearchtype.Items[i].ToString());
                                }
                                string typevalue = txt_r.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_r.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value.ToUpper() + "','srty','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_r.Text = "";
                                    RType();
                                }
                                else
                                {
                                    lblresearchvalidation.Text = "All Ready Exists";
                                    lblresearchvalidation.Visible = true;
                                    panelr.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblresearchvalidation.Text = "Please Enter Type";
                        lblresearchvalidation.Visible = true;
                        panelr.Visible = true;
                    }
                }
                else if (semorg == "Research Type")
                {
                    if (txt_r.Text != "")
                    {
                        if (ddlrrtype.Items.Count == 0)
                        {
                            string value = txt_r.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value.ToUpper() + "','srrty','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_r.Text = "";

                            ResearchType();
                        }
                        else
                        {
                            if (ddlrrtype.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlrrtype.Items.Count; i++)
                                {
                                    testarray.Add(ddlrrtype.Items[i].ToString());
                                }
                                string typevalue = txt_r.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_r.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value.ToUpper() + "','srrty','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_r.Text = "";
                                    ResearchType();
                                }
                                else
                                {
                                    lblresearchvalidation.Text = "All Ready Exists";
                                    lblresearchvalidation.Visible = true;
                                    panelr.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblresearchvalidation.Text = "Please Enter Research Type";
                        lblresearchvalidation.Visible = true;
                        panelr.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexitr_Click(object sender, EventArgs e)
    {
        panelr.Visible = false;
        panelresearch.Visible = true;
        lblresearchvalidation.Visible = false;
        research();
    }

    protected void btnaddpg_Click(object sender, EventArgs e)
    {
        try
        {
            grants();
            panelprojectgrants.Visible = true;
            ArrayList testarray = new ArrayList();
            lblprojectgrantsvalidation.Visible = false;

            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelpg.Visible = false;
                if (semorg == "Year")
                {

                    if (txt_pg.Text != "")
                    {
                        if (ddlpgyear.Items.Count == 0)
                        {
                            string value = txt_pg.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgy','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_pg.Text = "";

                            ProjectYear();
                        }
                        else
                        {
                            if (ddlpgyear.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlpgyear.Items.Count; i++)
                                {
                                    testarray.Add(ddlpgyear.Items[i].ToString());
                                }
                                string typevalue = txt_pg.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_pg.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgy','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_pg.Text = "";
                                    ProjectYear();
                                }
                                else
                                {
                                    lblprojectgrantsvalidation.Text = "All Ready Exists";
                                    lblprojectgrantsvalidation.Visible = true;
                                    panelpg.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblprojectgrantsvalidation.Text = "Enter the Text";
                        lblprojectgrantsvalidation.Visible = true;
                        panelpg.Visible = true;
                    }
                }
                else if (semorg == "Name")
                {
                    if (txt_pg.Text != "")
                    {
                        if (ddlpgname.Items.Count == 0)
                        {
                            string value = txt_pg.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgn','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_pg.Text = "";

                            ProjectName();
                        }
                        else
                        {
                            if (ddlpgname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlpgname.Items.Count; i++)
                                {
                                    testarray.Add(ddlpgname.Items[i].ToString());
                                }
                                string typevalue = txt_pg.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_pg.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgn','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_pg.Text = "";
                                    ProjectName();
                                }
                                else
                                {
                                    lblprojectgrantsvalidation.Text = "All Ready Exists";
                                    lblprojectgrantsvalidation.Visible = true;
                                    panelpg.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblprojectgrantsvalidation.Text = "Please Enter Name";
                        lblprojectgrantsvalidation.Visible = true;
                        panelpg.Visible = true;
                    }
                }
                else if (semorg == "Title")
                {
                    if (txt_pg.Text != "")
                    {
                        if (ddlpgtitle.Items.Count == 0)
                        {
                            string value = txt_pg.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgt','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_pg.Text = "";

                            PTitle();
                        }
                        else
                        {
                            if (ddlpgtitle.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlpgtitle.Items.Count; i++)
                                {
                                    testarray.Add(ddlpgtitle.Items[i].ToString());
                                }
                                string typevalue = txt_pg.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_pg.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgt','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_pg.Text = "";
                                    PTitle();
                                }
                                else
                                {
                                    lblprojectgrantsvalidation.Text = "All Ready Exists";
                                    lblprojectgrantsvalidation.Visible = true;
                                    panelpg.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblprojectgrantsvalidation.Text = "Please Enter Title";
                        lblprojectgrantsvalidation.Visible = true;
                        panelpg.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexitpg_Click(object sender, EventArgs e)
    {
        panelpg.Visible = false;
        panelprojectgrants.Visible = true;
        lblprojectgrantsvalidation.Visible = false;
        grants();
    }

    protected void btnaddpr_Click(object sender, EventArgs e)
    {
        try
        {
            patent();
            panelpatent.Visible = true;
            lblpatentvalidation.Visible = false;
            ArrayList testarray = new ArrayList();
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelpr.Visible = false;
                if (semorg == "Year")
                {

                    if (txt_pr.Text != "")
                    {
                        if (ddlpryear.Items.Count == 0)
                        {
                            string value = txt_pr.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spry','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_pr.Text = "";

                            PatentYear();
                        }
                        else
                        {
                            if (ddlpryear.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlpryear.Items.Count; i++)
                                {
                                    testarray.Add(ddlpryear.Items[i].ToString());
                                }
                                string typevalue = txt_pr.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_pr.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spry','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_pr.Text = "";
                                    PatentYear();
                                }
                                else
                                {
                                    lblpatentvalidation.Text = "All Ready Exists";
                                    lblpatentvalidation.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblpatentvalidation.Text = "Enter the Text";
                        lblpatentvalidation.Visible = true;
                    }
                }
                else if (semorg == "Name")
                {
                    if (txt_pr.Text != "")
                    {
                        if (ddlprname.Items.Count == 0)
                        {
                            string value = txt_pr.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sprn','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_pr.Text = "";

                            PatentName();
                        }
                        else
                        {
                            if (ddlprname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlprname.Items.Count; i++)
                                {
                                    testarray.Add(ddlprname.Items[i].ToString());
                                }
                                string typevalue = txt_pr.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_pr.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sprn','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_pr.Text = "";
                                    PatentName();
                                }
                                else
                                {
                                    lblpatentvalidation.Text = "All Ready Exists";
                                    lblpatentvalidation.Visible = true;
                                    panelpr.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblpatentvalidation.Text = "Please Enter Name";
                        lblpatentvalidation.Visible = true;
                        panelpr.Visible = true;
                    }
                }
                else if (semorg == "Title")
                {
                    if (txt_pr.Text != "")
                    {
                        if (ddlprtitle.Items.Count == 0)
                        {
                            string value = txt_pr.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sprt','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_pr.Text = "";

                            PatentTitle();
                        }
                        else
                        {
                            if (ddlprtitle.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlprtitle.Items.Count; i++)
                                {
                                    testarray.Add(ddlprtitle.Items[i].ToString());
                                }
                                string typevalue = txt_pr.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_pr.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sprt','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_pr.Text = "";
                                    PatentTitle();
                                }
                                else
                                {
                                    lblpatentvalidation.Text = "All Ready Exists";
                                    lblpatentvalidation.Visible = true;
                                    panelpr.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblpatentvalidation.Text = "Please Enter Title";
                        lblpatentvalidation.Visible = true;
                        panelpr.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexitpr_Click(object sender, EventArgs e)
    {
        panelpr.Visible = false;
        panelpatent.Visible = true;
        lblpatentvalidation.Visible = false;
        patent();
    }

    protected void btnaddgu_Click(object sender, EventArgs e)
    {
        try
        {
            guide();
            panelguide.Visible = true;
            lblgudievalidation.Visible = false;
            ArrayList testarray = new ArrayList();
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelgu.Visible = false;
                if (semorg == "Year")
                {
                    if (txt_gu.Text != "")
                    {
                        if (ddlgyear.Items.Count == 0)
                        {
                            string value = txt_gu.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgy','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_gu.Text = "";

                            GuideYear();
                        }
                        else
                        {
                            if (ddlgyear.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlgyear.Items.Count; i++)
                                {
                                    testarray.Add(ddlgyear.Items[i].ToString());
                                }
                                string typevalue = txt_gu.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_gu.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgy','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_gu.Text = "";
                                    GuideYear();
                                }
                                else
                                {
                                    lblgudievalidation.Text = "All Ready Exists";
                                    lblgudievalidation.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblgudievalidation.Text = "Enter the Text";
                        lblgudievalidation.Visible = true;
                    }
                }
                else if (semorg == "Nature of Guide")
                {
                    if (txt_gu.Text != "")
                    {
                        if (ddlnatureguide.Items.Count == 0)
                        {
                            string value = txt_gu.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgnu','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_gu.Text = "";

                            GuideNature();
                        }
                        else
                        {
                            if (ddlnatureguide.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlnatureguide.Items.Count; i++)
                                {
                                    testarray.Add(ddlnatureguide.Items[i].ToString());
                                }
                                string typevalue = txt_gu.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_gu.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgnu','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_gu.Text = "";
                                    GuideNature();
                                }
                                else
                                {
                                    lblgudievalidation.Text = "All Ready Exists";
                                    lblgudievalidation.Visible = true;
                                    panelgu.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblgudievalidation.Text = "Please Enter Nature of Guide";
                        lblgudievalidation.Visible = true;
                        panelgu.Visible = true;

                    }
                }
                else if (semorg == "Title")
                {
                    if (txt_gu.Text != "")
                    {
                        if (ddlgtitle.Items.Count == 0)
                        {
                            string value = txt_gu.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgt','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_gu.Text = "";

                            GuideTitle();
                        }
                        else
                        {
                            if (ddlgtitle.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlgtitle.Items.Count; i++)
                                {
                                    testarray.Add(ddlgtitle.Items[i].ToString());
                                }
                                string typevalue = txt_gu.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_gu.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spgt','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_gu.Text = "";
                                    GuideTitle();
                                }
                                else
                                {
                                    lblgudievalidation.Text = "All Ready Exists";
                                    lblgudievalidation.Visible = true;
                                    panelgu.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblgudievalidation.Text = "Please Enter Title";
                        lblgudievalidation.Visible = true;
                        panelgu.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexitgu_Click(object sender, EventArgs e)
    {
        panelgu.Visible = false;
        panelguide.Visible = true;
        lblgudievalidation.Visible = false;
        guide();
    }

    protected void btnaddprof_Click(object sender, EventArgs e)
    {
        try
        {
            prof();
            panelpm.Visible = true;
            lblprofvalidation.Visible = false;
            ArrayList testarray = new ArrayList();
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelprof.Visible = false;
                if (semorg == "Joind Year")
                {
                    if (txt_prof.Text != "")
                    {
                        if (ddlpmjoindyear.Items.Count == 0)
                        {
                            string value = txt_prof.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spmy','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_prof.Text = "";

                            JoinedYear();
                        }
                        else
                        {
                            if (ddlpmjoindyear.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlpmjoindyear.Items.Count; i++)
                                {
                                    testarray.Add(ddlpmjoindyear.Items[i].ToString());
                                }
                                string typevalue = txt_prof.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_prof.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spmy','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_prof.Text = "";
                                    JoinedYear();
                                }
                                else
                                {
                                    lblprofvalidation.Text = "All Ready Exists";
                                    lblprofvalidation.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblprofvalidation.Text = "Enter the Text";
                        lblprofvalidation.Visible = true;
                    }
                }
                else if (semorg == "Name")
                {
                    if (txt_prof.Text != "")
                    {
                        if (ddlpmname.Items.Count == 0)
                        {
                            string value = txt_prof.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spmn','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_prof.Text = "";

                            Membername();
                        }
                        else
                        {
                            if (ddlpmname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlpmname.Items.Count; i++)
                                {
                                    testarray.Add(ddlpmname.Items[i].ToString());
                                }
                                string typevalue = txt_prof.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_prof.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','spmn','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_prof.Text = "";
                                    Membername();
                                }
                                else
                                {
                                    lblprofvalidation.Text = "All Ready Exists";
                                    lblprofvalidation.Visible = true;
                                    panelprof.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblprofvalidation.Text = "Please Enter Name";
                        lblprofvalidation.Visible = true;
                        panelprof.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexitprof_Click(object sender, EventArgs e)
    {
        panelprof.Visible = false;
        panelpm.Visible = true;
        lblprofvalidation.Visible = false;
        prof();
    }

    protected void btnaddacm_Click(object sender, EventArgs e)
    {
        try
        {
            admin();
            panelamc.Visible = true;
            lblcommitteevalidation.Visible = false;
            ArrayList testarray = new ArrayList();
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                panelacm.Visible = false;
                if (semorg == "Committee Name")
                {
                    if (txt_acm.Text != "")
                    {
                        if (ddlamname.Items.Count == 0)
                        {
                            string value = txt_acm.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sacm','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_acm.Text = "";

                            CommitteeName();
                        }
                        else
                        {
                            if (ddlamname.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlamname.Items.Count; i++)
                                {
                                    testarray.Add(ddlamname.Items[i].ToString());
                                }
                                string typevalue = txt_acm.Text;
                                if (testarray.Contains(typevalue) == false)
                                {
                                    string value = txt_acm.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','sacm','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_acm.Text = "";
                                    CommitteeName();
                                }
                                else
                                {
                                    lblcommitteevalidation.Text = "All Ready Exists";
                                    lblcommitteevalidation.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblcommitteevalidation.Text = "Enter the Text";
                        lblcommitteevalidation.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    protected void btnexitacm_Click(object sender, EventArgs e)
    {
        panelacm.Visible = false;
        panelamc.Visible = true;
        lblcommitteevalidation.Visible = false;
        admin();
    }

    protected void fpspreadpgrands_CellClick(object sender, EventArgs e)
    {
        cell = true;
    }

    public void addupdatepm()
    {
        if (flagmain == false)
        {
        }
    }

    protected void fpspreadproff_CellClick(object sender, EventArgs e)
    {
        cellpm = true;
    }

    protected void fpspreadproff_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (cellpm == true)
        {

        }
    }

    protected void fpspreadadmin_CellClick(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        cellac = true;
    }

    protected void rbowncollege_CheckedChanged(object sender, EventArgs e)
    {
        if (rbowncollege.Checked == true)
        {
            bindorganizationCollege();
            ddlorganization.Enabled = false;
        }
    }

    protected void rbothercollege_CheckedChanged(object sender, EventArgs e)
    {
        bindorgnaization();
        ddlorganization.Enabled = true;
    }

    protected void imagebtn1_Click(object sender, EventArgs e)
    {
        pa.Visible = true;
    }

    protected void imagebtnorg_Clcik(object sender, EventArgs e)
    {
        panelheaderorg.Visible = true;
        panelheaderquli.Visible = false;
        panelheaderexp.Visible = false;
        panelheadersematt.Visible = false;
    }

    protected void imagebtnjournal_Click(object sender, EventArgs e)
    {
        panelheaderjournal.Visible = true;
        panelheaderbook.Visible = false;
        panelheaderedit.Visible = false;
        panelheadaward.Visible = false;
        panelheadproject.Visible = false;
        panelheadresearch.Visible = false;
    }

    protected void imagebtnbook_Click(object sender, EventArgs e)
    {
        panelheaderbook.Visible = true;
        panelheaderedit.Visible = false;
        panelheadaward.Visible = false;
        panelheadproject.Visible = false;
        panelheadresearch.Visible = false;
        panelheaderjournal.Visible = false;
    }

    protected void imagebtnedit_Click(object sender, EventArgs e)
    {
        panelheaderbook.Visible = false;
        panelheaderedit.Visible = true;
        panelheadaward.Visible = false;
        panelheadproject.Visible = false;
        panelheadresearch.Visible = false;
        panelheaderjournal.Visible = false;
    }

    protected void imagebtnaward_Click(object sender, EventArgs e)
    {
        panelheaderbook.Visible = false;
        panelheaderedit.Visible = false;
        panelheadaward.Visible = true;
        panelheadproject.Visible = false;
        panelheadresearch.Visible = false;
        panelheaderjournal.Visible = false;
    }

    protected void imagebtnproject_Click(object sender, EventArgs e)
    {
        panelheadproject.Visible = true;
        panelheadresearch.Visible = false;
        panelheaderbook.Visible = false;
        panelheaderedit.Visible = false;
        panelheadaward.Visible = false;
        panelheaderjournal.Visible = false;
    }

    protected void imagebtnresearch_Click(object sender, EventArgs e)
    {
        panelheadresearch.Visible = true;
        panelheaderjournal.Visible = false;
        panelheaderbook.Visible = false;
        panelheaderedit.Visible = false;
        panelheadaward.Visible = false;
        panelheadproject.Visible = false;
    }

    protected void imagebtnpg_Click(object sender, EventArgs e)
    {
        panelheaderpg.Visible = true;
        panelheaderpatent.Visible = false;
        panelheaderguide.Visible = false;
        panelheaderpm.Visible = false;
        panelheaderacm.Visible = false;
    }

    protected void imagebtnpatent_Click(object sender, EventArgs e)
    {
        panelheaderpg.Visible = false;
        panelheaderpatent.Visible = true;
        panelheaderguide.Visible = false;
        panelheaderpm.Visible = false;
        panelheaderacm.Visible = false;
    }

    protected void imagebtnguide_Click(object sender, EventArgs e)
    {
        panelheaderpg.Visible = false;
        panelheaderpatent.Visible = false;
        panelheaderguide.Visible = true;
        panelheaderpm.Visible = false;
        panelheaderacm.Visible = false;
    }

    protected void imagebtnpm_Click(object sender, EventArgs e)
    {
        panelheaderpg.Visible = false;
        panelheaderpatent.Visible = false;
        panelheaderguide.Visible = false;
        panelheaderpm.Visible = true;
        panelheaderacm.Visible = false;
    }

    protected void imagebtnacm_Click(object sender, EventArgs e)
    {
        panelheaderpg.Visible = false;
        panelheaderpatent.Visible = false;
        panelheaderguide.Visible = false;
        panelheaderpm.Visible = false;
        panelheaderacm.Visible = true;
    }

    protected void imagebtnpersonal_Click(object sender, EventArgs e)
    {
        pa.Visible = false;
    }

    protected void btnexitcont_Click(object sender, EventArgs e)
    {
        panelcontact.Visible = false;
        lblvalidationpaddress.Visible = false;
    }

    protected void btnaddcont_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                ArrayList parray = new ArrayList();
                lblvalidationpaddress.Visible = false;
                panelcontact.Visible = false;
                if (semorg == "City")
                {
                    parray.Clear();
                    if (txt_cont.Text != "")
                    {
                        if (ddlpcity.Items.Count == 0)
                        {
                            string value = txt_cont.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','city','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_cont.Text = "";

                            bindpcity1();
                        }
                        else
                        {
                            if (ddlpcity.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlpcity.Items.Count; i++)
                                {
                                    parray.Add(ddlpcity.Items[i].ToString());
                                }
                                if (parray.Contains(txt_cont.Text) == false)
                                {
                                    string value = txt_cont.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','city','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_cont.Text = "";
                                    bindpcity1();
                                }
                                else
                                {
                                    lblvalidationpaddress.Text = "All Ready Exists";
                                    lblvalidationpaddress.Visible = true;
                                    panelcontact.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationpaddress.Text = "Please Enter City ";
                        lblvalidationpaddress.Visible = true;
                        panelcontact.Visible = true;
                    }
                }
                else if (semorg == "District")
                {
                    parray.Clear();
                    if (txt_cont.Text != "")
                    {
                        if (ddlpdistirct.Items.Count == 0)
                        {
                            string value = txt_cont.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','dis','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_cont.Text = "";

                            bindpdist();
                            bindpstate1();
                        }
                        else
                        {
                            if (ddlpdistirct.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlpdistirct.Items.Count; i++)
                                {
                                    parray.Add(ddlpdistirct.Items[i].ToString());
                                }
                                if (parray.Contains(txt_cont.Text) == false)
                                {
                                    string value = txt_cont.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','dis','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_cont.Text = "";
                                    bindpdist();
                                    bindpstate1();
                                }
                                else
                                {
                                    lblvalidationpaddress.Text = "All Ready Exists";
                                    lblvalidationpaddress.Visible = true;
                                    panelcontact.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationpaddress.Text = "Please Enter District";
                        lblvalidationpaddress.Visible = true;
                        panelcontact.Visible = true;
                    }
                }
                else if (semorg == "State")
                {
                    parray.Clear();
                    if (txt_cont.Text != "")
                    {
                        if (ddlpstate.Items.Count == 0)
                        {
                            string value = txt_cont.Text;
                            string strquery = "insert into co_mastervalues (Mastervalue,MasterCriteria,CollegeCode) values('" + value + "','state','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_cont.Text = "";

                            bindpstate1();
                        }
                        else
                        {
                            if (ddlpstate.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlpstate.Items.Count; i++)
                                {
                                    parray.Add(ddlpstate.Items[i].ToString());
                                }
                                if (parray.Contains(txt_cont.Text) == false)
                                {
                                    string value = txt_cont.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','state','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_cont.Text = "";
                                    bindpstate1();
                                }
                                else
                                {
                                    lblvalidationpaddress.Text = "All Ready Exists";
                                    lblvalidationpaddress.Visible = true;
                                    panelcontact.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationpaddress.Text = "Please Enter State";
                        lblvalidationpaddress.Visible = true;
                        panelcontact.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    public void bindpcity1()
    {
        ddlpcity.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='city' and college_code=" + collegecode + " and Textval<>'' and Textval is not null order by Textval";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlpcity.DataSource = ds;
            ddlpcity.DataTextField = "Textval";
            ddlpcity.DataValueField = "TextCode";
            ddlpcity.DataBind();
            ddlpcity.Items.Insert(0, "Select");
            ddlpcity.Items.Insert(ddlpcity.Items.Count, "Others");
        }
        else
        {
            ddlpcity.Items.Insert(0, "Select");
            ddlpcity.Items.Insert(ddlpcity.Items.Count, "Others");
        }
        panelcontact.Visible = false;
    }

    public void bindpdist()
    {
        ddlpdistirct.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select MasterCode,Mastervalue from co_mastervalues where MasterCriteria='district' and CollegeCode=" + collegecode + " and Mastervalue<>'' and Mastervalue is not null order by Mastervalue";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlpdistirct.DataSource = ds;
            ddlpdistirct.DataTextField = "Mastervalue";
            ddlpdistirct.DataValueField = "MasterCode";
            ddlpdistirct.DataBind();
            ddlpdistirct.Items.Insert(0, "Select");
            ddlpdistirct.Items.Insert(ddlpdistirct.Items.Count, "Others");
        }
        else
        {
            ddlpdistirct.Items.Insert(0, "Select");
            ddlpdistirct.Items.Insert(ddlpdistirct.Items.Count, "Others");
        }
        panelcontact.Visible = false;
    }

    public void bindpstate1()
    {
        ddlpstate.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = " select MasterCode,MasterValue  from co_mastervalues where CollegeCode=" + collegecode + "  and MasterCriteria ='State' and Mastervalue<>'' and Mastervalue is not null order by MasterValue";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlpstate.DataSource = ds;
            ddlpstate.DataTextField = "MasterValue";
            ddlpstate.DataValueField = "MasterCode";
            ddlpstate.DataBind();
            ddlpstate.Items.Insert(0, "Select");
            ddlpstate.Items.Insert(ddlpstate.Items.Count, "Others");
        }
        else
        {
            ddlpstate.Items.Insert(0, "Select");
            ddlpstate.Items.Insert(ddlpstate.Items.Count, "Others");
        }
        panelcontact.Visible = false;
    }

    protected void ddlpdistirct_Change(object sender, EventArgs e)
    {
        try
        {
            ddlpstate.Items.Clear();
            string collegecode = Session["collegecode"].ToString();
            string query = "select MasterCode,MasterCriteriaValue2 from co_mastervalues where MasterCode='" + Convert.ToString(ddlpdistirct.SelectedItem.Value) + "' and CollegeCode=" + collegecode1 + " and MasterCriteriaValue2<>'' and MasterCriteriaValue2 is not null";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlpstate.DataSource = ds;
                ddlpstate.DataTextField = "MasterCriteriaValue2";
                ddlpstate.DataValueField = "MasterCode";
                ddlpstate.DataBind();
            }
            panelcontact.Visible = false;
        }
        catch { }
    }

    protected void btnpcityadd_Click(object sender, EventArgs e)
    {
        panelcontact.Visible = true;
        panelcontact.Attributes.Add("style", "width:200px; height:80px; top:745px; left:46px; position: absolute;");
        panelcontact.Visible = true;
    }

    protected void btnpcityremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlpcity.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlpcity.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='city' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindpcity1();
                }
            }
            panelcontact.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btnpdistirctadd_Click(object sender, EventArgs e)
    {
        panelcontact.Visible = true;
        panelcontact.Attributes.Add("style", "width:200px; height:80px; top:771px; left:46px; position: absolute;");
        panelcontact.Visible = true;
    }

    protected void btndistirctremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlpdistirct.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlpdistirct.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete co_mastervalues where Mastervalue='" + reason + "' and MasterCriteria='district' and CollegeCode='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindpdist();
                    bindpstate1();
                }
            }
            panelcontact.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btnpstateadd_Click(object sender, EventArgs e)
    {
        panelcontact.Visible = true;
        panelcontact.Attributes.Add("style", "width:200px; height:80px; top:796px; left:46px; position: absolute;");
        panelcontact.Visible = true;
    }

    protected void btnpstateremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlpstate.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlpstate.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete co_mastervalues where Mastervalue='" + reason + "' and MasterCriteria='state' and CollegeCode='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindpstate1();
                }
            }
            panelcontact.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btnexitcom_Click(object sender, EventArgs e)
    {
        panelcom.Visible = false;
        lblvalidationcaddress.Visible = false;
    }

    protected void btnaddcom_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                ArrayList carray = new ArrayList();
                hat.Clear();
                lblvalidationcaddress.Visible = false;
                panelcom.Visible = false;
                if (semorg == "City")
                {
                    if (txt_com.Text != "")
                    {
                        carray.Clear();
                        if (ddlccity.Items.Count == 0)
                        {
                            string value = txt_com.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','city','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_com.Text = "";

                            bindcity();
                        }
                        else
                        {
                            if (ddlccity.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlccity.Items.Count; i++)
                                {
                                    carray.Add(ddlccity.Items[i].ToString());
                                }
                                if (carray.Contains(txt_com.Text) == false)
                                {
                                    string value = txt_com.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','city','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_com.Text = "";
                                    bindcity();
                                }
                                else
                                {
                                    lblvalidationcaddress.Text = "All Ready Exists";
                                    lblvalidationcaddress.Visible = true;
                                    panelcom.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationcaddress.Text = "Enter the Text";
                        lblvalidationcaddress.Visible = true;
                        panelcom.Visible = true;
                    }
                }
                else if (semorg == "District")
                {
                    if (txt_com.Text != "")
                    {
                        carray.Clear();
                        if (ddlpdistirct.Items.Count == 0)
                        {
                            string value = txt_com.Text;
                            string strquery = "insert into co_mastervalues (Mastervalue,MasterCriteria,CollegeCode) values('" + value + "','district','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_com.Text = "";

                            binddistrict();
                            bindstate();
                        }
                        else
                        {
                            if (ddlpdistirct.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlpdistirct.Items.Count; i++)
                                {
                                    carray.Add(ddlccity.Items[i].ToString());
                                }
                                if (carray.Contains(txt_com.Text) == false)
                                {
                                    string value = txt_com.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','dis','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_com.Text = "";
                                    binddistrict();
                                    bindstate();
                                }
                                else
                                {
                                    lblvalidationcaddress.Text = "All Ready Exists";
                                    lblvalidationcaddress.Visible = true;
                                    panelcom.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationcaddress.Text = "Enter the Text";
                        lblvalidationcaddress.Visible = true;
                        panelcom.Visible = true;
                    }
                }
                else if (semorg == "State")
                {
                    if (txt_com.Text != "")
                    {
                        carray.Clear();
                        if (ddlcstate.Items.Count == 0)
                        {
                            string value = txt_com.Text;
                            string strquery = "insert into co_mastervalues (Mastervalue,MasterCriteria,CollegeCode) values('" + value + "','state','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_com.Text = "";

                            bindstate();
                        }
                        else
                        {
                            if (ddlcstate.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlcstate.Items.Count; i++)
                                {
                                    carray.Add(ddlccity.Items[i].ToString());
                                }
                                if (carray.Contains(txt_com.Text) == false)
                                {
                                    string value = txt_com.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','state','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_com.Text = "";
                                    bindstate();
                                }
                                else
                                {
                                    lblvalidationcaddress.Text = "All Ready Exists";
                                    lblvalidationcaddress.Visible = true;
                                    panelcom.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationcaddress.Text = "Enter the Text";
                        lblvalidationcaddress.Visible = true;
                        panelcom.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    public void bindcity()
    {
        ddlccity.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='city' and college_code=" + collegecode + " and Textval<>'' and TextVal is not null order by  textval";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlccity.DataSource = ds;
            ddlccity.DataTextField = "Textval";
            ddlccity.DataValueField = "TextCode";
            ddlccity.DataBind();
            ddlccity.Items.Insert(0, "Select");
            ddlccity.Items.Insert(ddlccity.Items.Count, "Others");
        }
        else
        {
            ddlccity.Items.Insert(0, "Select");
            ddlccity.Items.Insert(ddlccity.Items.Count, "Others");
        }
        panelcom.Visible = false;
    }

    public void binddistrict()
    {
        ddlcdistrict.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select MasterCode,Mastervalue from co_mastervalues where MasterCriteria='district' and CollegeCode=" + collegecode + " and Mastervalue<>'' and Mastervalue is not null order by  Mastervalue";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlcdistrict.DataSource = ds;
            ddlcdistrict.DataTextField = "Mastervalue";
            ddlcdistrict.DataValueField = "MasterCode";
            ddlcdistrict.DataBind();
            ddlcdistrict.Items.Insert(0, "Select");
            ddlcdistrict.Items.Insert(ddlcdistrict.Items.Count, "Others");
        }
        else
        {
            ddlcdistrict.Items.Insert(0, "Select");
            ddlcdistrict.Items.Insert(ddlcdistrict.Items.Count, "Others");
        }
        panelcom.Visible = false;
    }

    public void bindstate()
    {
        ddlcstate.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = " select MasterCode,MasterValue  from co_mastervalues where CollegeCode=" + collegecode + "  and MasterCriteria ='State' order by MasterValue";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlcstate.DataSource = ds;
            ddlcstate.DataTextField = "MasterValue";
            ddlcstate.DataValueField = "MasterCode";
            ddlcstate.DataBind();
            ddlcstate.Items.Insert(0, "Select");
            ddlcstate.Items.Insert(ddlcstate.Items.Count, "Others");
        }
        else
        {
            ddlcstate.Items.Insert(0, "Select");
            ddlcstate.Items.Insert(ddlcstate.Items.Count, "Others");
        }
        panelcom.Visible = false;
    }

    protected void ddlcdistrict_Change(object sender, EventArgs e)
    {
        try
        {
            ddlcstate.Items.Clear();
            string collegecode = Session["collegecode"].ToString();
            string query = "select MasterCode,MasterCriteriaValue2 from co_mastervalues where CollegeCode=" + collegecode + " and MasterCode='" + Convert.ToString(ddlcdistrict.SelectedItem.Value) + "'  and MasterCriteriaValue2<>'' and MasterCriteriaValue2 is not null";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlcstate.DataSource = ds;
                ddlcstate.DataTextField = "MasterCriteriaValue2";
                ddlcstate.DataValueField = "MasterCode";
                ddlcstate.DataBind();
            }
            panelcom.Visible = false;
        }
        catch { }
    }

    protected void btnccityadd_Click(object sender, EventArgs e)
    {
        panelcom.Visible = true;
        panelcom.Attributes.Add("style", "width:200px; height:80px; top:748px; left:290px; position: absolute;");
        panelcom.Visible = true;
    }

    protected void btnccityremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlccity.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlccity.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='city' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindcity();
                }
            }
            panelcom.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btncdistrictadd_Click(object sender, EventArgs e)
    {
        panelcom.Visible = true;
        panelcom.Attributes.Add("style", "width:200px; height:80px; top:774px; left:290px; position: absolute;");
        panelcom.Visible = true;
    }

    protected void btncdistrictremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlcdistrict.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlcdistrict.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete co_mastervalues where Mastervalue='" + reason + "' and MasterCriteria='district' and CollegeCode='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    binddistrict();
                    bindstate();
                }
            }
            panelcom.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btncstateadd_Click(object sender, EventArgs e)
    {
        panelcom.Visible = true;
        panelcom.Attributes.Add("style", "width:200px; height:80px; top:802px; left:290px; position: absolute;");
        panelcom.Visible = true;
    }

    protected void btncstateremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlcstate.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlcstate.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete co_mastervalues where Mastervalue='" + reason + "' and MasterCriteria='state' and CollegeCode='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindstate();
                }
            }
            panelcom.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btnexitguard_Click(object sender, EventArgs e)
    {
        panelguard.Visible = false;
        lblvalidataiongaddress.Visible = false;
    }

    protected void btnaddguard_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlcollege1.SelectedValue != "All")
            {
                hat.Clear();
                ArrayList garray = new ArrayList();
                panelguard.Visible = false;
                lblvalidataiongaddress.Visible = false;
                if (semorg == "Relation")
                {
                    if (txt_guard.Text != "")
                    {
                        garray.Clear();
                        if (ddlgrelation.Items.Count == 0)
                        {
                            string value = txt_guard.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grel','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_guard.Text = "";
                            bindgrelation();
                        }
                        else
                        {
                            if (ddlgrelation.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlgrelation.Items.Count; i++)
                                {
                                    garray.Add(ddlgrelation.Items[i].ToString());
                                }
                                if (garray.Contains(txt_guard.Text) == false)
                                {
                                    string value = txt_guard.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','grel','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_guard.Text = "";
                                    bindgrelation();
                                }
                                else
                                {
                                    lblvalidataiongaddress.Text = "All Ready Exists";
                                    lblvalidataiongaddress.Visible = true;
                                    panelguard.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidataiongaddress.Text = "Enter the Text";
                        lblvalidataiongaddress.Visible = true;
                        panelguard.Visible = true;
                    }
                }
                else if (semorg == "City")
                {
                    if (txt_guard.Text != "")
                    {
                        if (ddlgcity.Items.Count == 0)
                        {
                            string value = txt_guard.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','city','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_guard.Text = "";

                            bindgcity1();
                        }
                        else
                        {
                            if (ddlgcity.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlgcity.Items.Count; i++)
                                {
                                    garray.Add(ddlgcity.Items[i].ToString());
                                }
                                if (garray.Contains(txt_guard.Text) == false)
                                {
                                    string value = txt_guard.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','city','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_guard.Text = "";
                                    bindgcity1();
                                }
                                else
                                {
                                    lblvalidataiongaddress.Text = "All Ready Exists";
                                    lblvalidataiongaddress.Visible = true;
                                    panelguard.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidataiongaddress.Text = "Enter the Text";
                        lblvalidataiongaddress.Visible = true;
                        panelguard.Visible = true;
                    }
                }

                else if (semorg == "District")
                {
                    if (txt_guard.Text != "")
                    {
                        if (ddlgdistrict.Items.Count == 0)
                        {
                            string value = txt_guard.Text;
                            string strquery = "insert into co_mastervalues (Mastervalue,MasterCriteria,CollegeCode) values('" + value + "','district','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_guard.Text = "";

                            bindgdist();
                        }
                        else
                        {
                            if (ddlgdistrict.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlgdistrict.Items.Count; i++)
                                {
                                    garray.Add(ddlgdistrict.Items[i].ToString());
                                }
                                if (garray.Contains(txt_guard.Text) == false)
                                {
                                    string value = txt_guard.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','dis','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_guard.Text = "";
                                    bindgdist();
                                }
                                else
                                {
                                    lblvalidataiongaddress.Text = "All Ready Exists";
                                    lblvalidataiongaddress.Visible = true;
                                    panelguard.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidataiongaddress.Text = "Enter the Text";
                        lblvalidataiongaddress.Visible = true;
                        panelguard.Visible = true;
                    }
                }

                else if (semorg == "State")
                {
                    if (txt_guard.Text != "")
                    {
                        if (ddlgstate.Items.Count == 0)
                        {
                            string value = txt_guard.Text;
                            string strquery = "insert into co_mastervalues (Mastervalue,MasterCriteria,CollegeCode) values('" + value + "','state','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_guard.Text = "";
                            bindgstate1();
                        }
                        else
                        {
                            if (ddlgstate.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlgstate.Items.Count; i++)
                                {
                                    garray.Add(ddlgstate.Items[i].ToString());
                                }
                                if (garray.Contains(txt_guard.Text) == false)
                                {
                                    string value = txt_guard.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','state','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_guard.Text = "";
                                    bindgstate1();
                                }
                                else
                                {
                                    lblvalidataiongaddress.Text = "All Ready Exists";
                                    lblvalidataiongaddress.Visible = true;
                                    panelguard.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidataiongaddress.Text = "Enter the Text";
                        lblvalidataiongaddress.Visible = true;
                        panelguard.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    public void bindgcity1()
    {
        ddlgcity.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='city' and college_code=" + collegecode + " and Textval<>'' and Textval is not null order by Textval";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlgcity.DataSource = ds;
            ddlgcity.DataTextField = "Textval";
            ddlgcity.DataValueField = "TextCode";
            ddlgcity.DataBind();
            ddlgcity.Items.Insert(0, "Select");
            ddlgcity.Items.Insert(ddlgcity.Items.Count, "Others");
        }
        else
        {
            ddlgcity.Items.Insert(0, "Select");
            ddlgcity.Items.Insert(ddlgcity.Items.Count, "Others");
        }
        panelguard.Visible = false;
    }

    public void bindgdist()
    {
        ddlgdistrict.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select MasterCode,Mastervalue from co_mastervalues where MasterCriteria='district' and CollegeCode=" + collegecode + " and Mastervalue<>'' and Mastervalue is not null order by Mastervalue";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlgdistrict.DataSource = ds;
            ddlgdistrict.DataTextField = "Mastervalue";
            ddlgdistrict.DataValueField = "MasterCode";
            ddlgdistrict.DataBind();
            ddlgdistrict.Items.Insert(0, "Select");
            ddlgdistrict.Items.Insert(ddlgdistrict.Items.Count, "Others");
        }
        else
        {
            ddlgdistrict.Items.Insert(0, "Select");
            ddlgdistrict.Items.Insert(ddlgdistrict.Items.Count, "Others");
        }
        panelguard.Visible = false;
    }

    public void bindgstate1()
    {
        ddlgstate.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select MasterCode,Mastervalue from co_mastervalues where MasterCriteria='state' and CollegeCode=" + collegecode + " and Mastervalue<>'' and Mastervalue is not null order by Mastervalue";
        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlgstate.DataSource = ds;
            ddlgstate.DataTextField = "Mastervalue";
            ddlgstate.DataValueField = "MasterCode";
            ddlgstate.DataBind();
            ddlgstate.Items.Insert(0, "Select");
            ddlgstate.Items.Insert(ddlgstate.Items.Count, "Others");
        }
        else
        {
            ddlgstate.Items.Insert(0, "Select");
            ddlgstate.Items.Insert(ddlgstate.Items.Count, "Others");
        }
        panelguard.Visible = false;
    }

    protected void btngrelationadd_Click(object sender, EventArgs e)
    {
        panelguard.Visible = true;
        panelguard.Attributes.Add("style", "width:200px; height:80px; top:855px; left:530px; position: absolute;");
        panelguard.Visible = true;
    }

    protected void btngrelationremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlgrelation.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlgrelation.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='grel' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindgrelation();
                }
            }
            panelguard.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btngcityadd_Click(object sender, EventArgs e)
    {
        panelguard.Visible = true;
        panelguard.Attributes.Add("style", "width:200px; height:80px; top:762px; left:529px; position: absolute;");
        panelguard.Visible = true;
    }

    protected void btngcityremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlgcity.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlgcity.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete textvaltable where TextVal='" + reason + "' and TextCriteria='city' and college_code='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindgcity1();
                }
            }
            panelguard.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btngdistrictadd_Click(object sender, EventArgs e)
    {
        panelguard.Visible = true;
        panelguard.Attributes.Add("style", "width:200px; height:80px; top:789px; left:529px; position: absolute;");
        panelguard.Visible = true;
    }

    protected void btngdistrictremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlgdistrict.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlgdistrict.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete co_mastervalues where Mastervalue='" + reason + "' and MasterCriteria='district' and CollegeCode='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindgdist();
                }
            }
            panelguard.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btngstateadd_Click(object sender, EventArgs e)
    {
        panelguard.Visible = true;
        panelguard.Attributes.Add("style", "width:200px; height:80px; top:816px; left:529px; position: absolute;");
        panelguard.Visible = true;
    }

    protected void btngstateremove_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlgstate.Items.Count > 0)
            {
                string collegecode = Session["collegecode"].ToString();
                string reason = ddlgstate.SelectedItem.ToString();
                if (reason.Trim().ToLower() != "all" && reason.Trim() != "")
                {
                    string strquery = "delete co_mastervalues where Mastervalue='" + reason + "' and MasterCriteria='state' and CollegeCode='" + collegecode1 + "'";
                    int a = d2.update_method_wo_parameter(strquery, "Text");
                    bindgstate1();
                }
            }
            panelguard.Visible = false;
        }
        catch (Exception ex) { }
    }

    protected void btnexitref_Click(object sender, EventArgs e)
    {
        panelref.Visible = false;
    }

    protected void btnaddref_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlcollege1.SelectedValue != "---Select---")
            {
                hat.Clear();
                ArrayList rarray = new ArrayList();
                panelref.Visible = false;
                if (semorg == "City")
                {
                    if (txt_ref.Text != "")
                    {
                        if (ddlrefcity.Items.Count == 0)
                        {
                            string value = txt_ref.Text;
                            string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','city','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_ref.Text = "";

                            bindrefcity();
                        }
                        else
                        {
                            if (ddlrefcity.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlrefcity.Items.Count; i++)
                                {
                                    rarray.Add(ddlrefcity.Items[i].ToString());
                                }
                                if (rarray.Contains(txt_ref.Text) == false)
                                {
                                    string value = txt_ref.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','city','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_ref.Text = "";
                                    bindrefcity();
                                }
                                else
                                {
                                    lblvalidationrrraddress.Text = "All Ready Exists";
                                    lblvalidationrrraddress.Visible = true;
                                    panelref.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationrrraddress.Text = "Enter the Text";
                        lblvalidationrrraddress.Visible = true;
                        panelref.Visible = true;
                    }
                }

                else if (semorg == "District")
                {
                    if (txt_ref.Text != "")
                    {
                        if (ddlrdistrict.Items.Count == 0)
                        {
                            string value = txt_ref.Text;
                            string strquery = "insert into co_mastervalues (Mastervalue,MasterCriteria,CollegeCode) values('" + value + "','district','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_ref.Text = "";

                            bindrefdist();
                        }
                        else
                        {
                            if (ddlrdistrict.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlrdistrict.Items.Count; i++)
                                {
                                    rarray.Add(ddlrdistrict.Items[i].ToString());
                                }
                                if (rarray.Contains(txt_ref.Text) == false)
                                {
                                    string value = txt_ref.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','dis','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_ref.Text = "";
                                    bindrefdist();
                                }
                                else
                                {
                                    lblvalidationrrraddress.Text = "All Ready Exists";
                                    lblvalidationrrraddress.Visible = true;
                                    panelref.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationrrraddress.Text = "Enter the Text";
                        lblvalidationrrraddress.Visible = true;
                        panelref.Visible = true;
                    }
                }

                else if (semorg == "State")
                {
                    if (txt_ref.Text != "")
                    {
                        if (ddlrefstate.Items.Count == 0)
                        {
                            string value = txt_ref.Text;
                            string strquery = "insert into co_mastervalues (Mastervalue,MasterCriteria,CollegeCode) values('" + value + "','state','" + college + "')";
                            int a = d2.insert_method(strquery, hat, "Text");
                            txt_ref.Text = "";

                            bindrefstate();
                        }
                        else
                        {
                            if (ddlrefstate.Items.Count > 0)
                            {
                                for (int i = 0; i < ddlrefstate.Items.Count; i++)
                                {
                                    rarray.Add(ddlrefstate.Items[i].ToString());
                                }
                                if (rarray.Contains(txt_ref.Text) == false)
                                {
                                    string value = txt_ref.Text;
                                    string strquery = "insert into textvaltable (TextVal,TextCriteria,college_code) values('" + value + "','state','" + college + "')";
                                    int a = d2.insert_method(strquery, hat, "Text");
                                    txt_ref.Text = "";
                                    bindrefstate();
                                }
                                else
                                {
                                    lblvalidationrrraddress.Text = "All Ready Exists";
                                    lblvalidationrrraddress.Visible = true;
                                    panelref.Visible = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        lblvalidationrrraddress.Text = "Enter the Text";
                        lblvalidationrrraddress.Visible = true;
                        panelref.Visible = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }

    public void bindrefcity()
    {
        ddlrefcity.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select TextCode,Textval from textvaltable where TextCriteria='city' and college_code=" + collegecode + " and Textval<>'' and Textval is not null  order by Textval";
        ds.Clear();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlrefcity.DataSource = ds;
            ddlrefcity.DataTextField = "Textval";
            ddlrefcity.DataValueField = "TextCode";
            ddlrefcity.DataBind();
            ddlrefcity.Items.Insert(0, "Select");
            ddlrefcity.Items.Insert(ddlrefcity.Items.Count, "Others");
        }
        else
        {
            ddlrefcity.Items.Insert(0, "Select");
            ddlrefcity.Items.Insert(ddlrefcity.Items.Count, "Others");
        }
        panelref.Visible = false;
    }

    public void bindrefdist()
    {
        ddlrdistrict.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select MasterCode,Mastervalue from co_mastervalues where MasterCriteria='district' and CollegeCode=" + collegecode + " and Mastervalue<>'' and Mastervalue is not null order by Mastervalue";
        ds.Clear();
        ds.Dispose(); ds.Reset();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlrdistrict.DataSource = ds;
            ddlrdistrict.DataTextField = "Mastervalue";
            ddlrdistrict.DataValueField = "MasterCode";
            ddlrdistrict.DataBind();
            ddlrdistrict.Items.Insert(0, "Select");
            ddlrdistrict.Items.Insert(ddlrdistrict.Items.Count, "Others");
        }
        else
        {
            ddlrdistrict.Items.Insert(0, "Select");
            ddlrdistrict.Items.Insert(ddlrdistrict.Items.Count, "Others");
        }
        panelref.Visible = false;
    }

    public void bindrefstate()
    {
        ddlrefstate.Items.Clear();
        string collegecode = Convert.ToString(ddlcollege1.SelectedItem.Value);
        string query = "select MasterCode,Mastervalue from co_mastervalues where MasterCriteria='state' and CollegeCode=" + collegecode + " and Mastervalue<>'' and Mastervalue is not null order by Mastervalue";

        ds.Clear();
        ds = d2.select_method_wo_parameter(query, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlrefstate.DataSource = ds;
            ddlrefstate.DataTextField = "Mastervalue";
            ddlrefstate.DataValueField = "MasterCode";
            ddlrefstate.DataBind();
            ddlrefstate.Items.Insert(0, "Select");
            ddlrefstate.Items.Insert(ddlrefstate.Items.Count, "Others");
        }
        else
        {
            ddlrefstate.Items.Insert(0, "Select");
            ddlrefstate.Items.Insert(ddlrefstate.Items.Count, "Others");
        }
        panelref.Visible = false;
    }

    protected void Buttonsave_Click(object sender, EventArgs e)
    {
        if (tbappno.Text != "" && txt_firstname.Text != "" && txt_fathername.Text != "" && txt_dop.Text != "" && txt_appdate.Text != "" && ddlpapplide.SelectedItem.Value != "" && ddldeptapplied.SelectedItem.Value != "")
        {
            string[] dob;
            string[] apdate;
            string birthvalue = txt_dop.Text;
            dob = birthvalue.Split('/');
            string databirth = dob[2].ToString() + "/" + dob[1].ToString() + "/" + dob[0].ToString();
            string applieddate = txt_appdate.Text;
            apdate = applieddate.Split('/');
            string appdate = apdate[2].ToString() + "/" + apdate[1].ToString() + "/" + apdate[0].ToString();
            hsave.Add("applno", tbappno.Text);
            hsave.Add("firstname", txt_firstname.Text);
            hsave.Add("fathername", txt_fathername.Text);
            hsave.Add("dateofbirth", databirth.ToString());
            hsave.Add("applieddate", appdate.ToString());
            hsave.Add("desig", ddlpapplide.SelectedItem.Value);
            hsave.Add("dept", ddldeptapplied.SelectedItem.Value);
            btnnew_Click(sender, e);
        }
        else
        {

        }
    }

    protected void btnupdate_Click(object sender, EventArgs e)
    {
        saveupate = false;
        Buttonsave_Click(sender, e);
    }

    public void newfn()
    {
        try
        {
            bindrelaiton();
            bindqualification();
            bindfamilystatus();
            entrys();
            graduation();
            Degree();
            Specialization();
            University();
            Institution();
            exp();
            bindorgnaization();
            binddesing();
            bindreson();
            bindexpin();
            sematt();
            Type();
            ProgramName();
            Place();
            Sponsered();
            SeminorTitle();
            org();
            OrgProgramName();
            OrgPlace();
            OrgTitle();
            journal();
            JournalName();
            Periodicity();
            Publisher();
            JournalTitle();
            JournalType();
            book();
            PublisherName();
            PublisherTitle();
            edit();
            EditorType();
            EditorName();
            EditorTitle();
            award();
            AwardName();
            OrgName();
            AwardNature();
            project();
            ProjectTitle();
            research();
            RType();
            ResearchName();
            ResearchType();
            grants();
            ProjectName();
            PTitle();
            ProjectYear();
            patent();
            PatentName();
            PatentYear();
            PatentTitle();
            guide();
            GuideYear();
            GuideTitle();
            GuideNature();

            txt_dop.Attributes.Add("readonly", "readonly");
            txt_appdate.Attributes.Add("readonly", "readonly");
            rbmale.Checked = true;
            rbno.Checked = true;
            txt_fromdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_fromdate.Attributes.Add("readonly", "readonly");
            txt_todate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_todate.Attributes.Add("readonly", "readonly");
            txt_yofp.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_yofp.Attributes.Add("readonly", "readonly");
            txt_semfromdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_semfromdate.Attributes.Add("readonly", "readonly");
            txt_semtodate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_semtodate.Attributes.Add("readonly", "readonly");
            txt_orgfromdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_orgfromdate.Attributes.Add("readonly", "readonly");
            txt_orgtodate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_orgtodate.Attributes.Add("readonly", "readonly");

            txt_amfromdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_amfromdate.Attributes.Add("readonly", "readonly");

            txt_amtodate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_amtodate.Attributes.Add("readonly", "readonly");

            txt_projectfrom.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_projectfrom.Attributes.Add("readonly", "readonly");

            txt_eyear.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_eyear.Attributes.Add("readonly", "readonly");

            txt_ayear.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_ayear.Attributes.Add("readonly", "readonly");

            txt_projecto.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            txt_projecto.Attributes.Add("readonly", "readonly");

            txt_dop.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            CalendarExtender17.EndDate = DateTime.Now;
            txt_appdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");

            bindtitle();
            bindcaste();
            bindcomm();
            bindrelig();
            bindnational();
            binddepapply();
            bindpostapply();
            bindpcity1();
            bindpdist();
            bindpstate1();
            bindcity();
            binddistrict();
            bindstate();
            bindblood();
            bindgrelation();
            bindgcity1();
            bindgdist();
            bindgstate1();
            bindfsub();
            bindlang();
            bindrefcity();
            bindrefstate();
            bindrefdist();
            bindrelaiton();
            bindfamilystatus();
            bindqualification();
            bindapplno();
            graduation();
            Degree();
            Specialization();
            University();
            Institution();
            CommitteeName();
            ProjectName();
            GuideYear();
            GuideNature();
            GuideTitle();
            tbappno.Text = "";
            txt_firstname.Text = "";
            txt_middlename.Text = "";
            txt_surname1.Text = "";
            txt_fathername.Text = "";
            txt_paddress.Text = "";
            txt_pstreet.Text = "";
            txt_ppincode.Text = "";
            txt_presphone.Text = "";
            txt_pmobile.Text = "";
            txt_pmno.Text = "";
            txt_pfax.Text = "";
            txt_pemail.Text = "";
            txt_caddress.Text = "";
            txt_cstreet.Text = "";
            txt_cpincode.Text = "";
            txt_cresphone.Text = "";
            txt_cmobileno.Text = "";
            txt_cfax.Text = "";
            txt_cremarks.Text = "";
            txt_gname.Text = "";
            txt_gaddress.Text = "";
            txt_gstreet.Text = "";
            txt_gpincode.Text = "";
            txt_gresphone.Text = "";
            txt_gmobileno.Text = "";
            txt_refaddress.Text = "";
            txt_refstreet.Text = "";
            txt_refpincode.Text = "";
            txt_refresphoneno.Text = "";
            txt_refresmobileno.Text = "";
            txt_refcompany.Text = "";
            txt_refdesignation.Text = "";
            txt_refname.Text = "";
            lablevalidation.Visible = false;
        }
        catch { }
    }

    protected void btnnew_Click(object sender, EventArgs e)
    {
        newfn();
    }

    protected void Buttondelete_Click(object sender, EventArgs e)
    {
        try
        {
            if (tbappno.Text != "")
            {
                int a = 0;
                string appno = tbappno.Text;
                string query = "";
                query = "delete staff_appl_master where appl_no='" + appno + "' and college_code='" + ddlcollege1.SelectedItem.Value + "'";
                a = d2.update_method_wo_parameter(query, "Text");
                if (a == 0)
                    ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('No Records Found to Delete')", true);
                else
                    ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Deleted Successfully')", true);
            }
            else
            {

            }
        }
        catch { }
    }

    protected void btnprintmaster_Click(object sender, EventArgs e)
    {

    }

    protected void ddlcollege1_SelectedIndexChanged(object sender, EventArgs e)
    {
        load();
    }

    protected void txt_applno_OnTextChanged(object sender, EventArgs e)
    {
        string applno = txt_applno.Text;
        string stftype = "";
        string dept = "";
        string desig = "";
        string deptname = "";
        string designame = "";
        string getquery = "select dept_code,desig_code,staff_type from staff_appl_master where appl_no='" + applno + "'";
        ds = d2.select_method_wo_parameter(getquery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            stftype = ds.Tables[0].Rows[0]["staff_type"].ToString();
            dept = ds.Tables[0].Rows[0]["dept_code"].ToString();
            desig = ds.Tables[0].Rows[0]["desig_code"].ToString();
            deptname = d2.GetFunction("select dept_name from hrdept_master where dept_code='" + dept + "'");
            designame = d2.GetFunction("select desig_name from desig_master where desig_code='" + desig + "'");
        }
        txt_papplied.Text = designame;
        txt_pdep.Text = deptname;
        txt_pstyp.Text = stftype;
    }

    protected void btn_save_Click(object sender, EventArgs e)
    {
        lbl_aplalert.Visible = false;

        if (tbappno.Text != "" && txt_firstname.Text != "" && txt_dop.Text != "" && txt_appdate.Text != "" && ddlpapplide.SelectedItem.Value != "" && ddldeptapplied.SelectedItem.Value != "" && ddldeptapplied.SelectedIndex != 0)//&& txt_fathername.Text != ""
        {
            string[] dob;
            string[] apdate;
            string birthvalue = txt_dop.Text;
            dob = birthvalue.Split('/');
            string databirth = dob[2].ToString() + "/" + dob[1].ToString() + "/" + dob[0].ToString();
            string applieddate = txt_appdate.Text;
            apdate = applieddate.Split('/');
            string appdate = apdate[2].ToString() + "/" + apdate[1].ToString() + "/" + apdate[0].ToString();
            hsave.Add("applno", tbappno.Text.Trim().ToUpper());
            txt_firstname.Text = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_firstname.Text);
            hsave.Add("firstname", txt_firstname.Text);
            txt_fathername.Text = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_fathername.Text);
            hsave.Add("fathername", txt_fathername.Text);
            txt_middlename.Text = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_middlename.Text);
            hsave.Add("middlename", txt_middlename.Text);
            txt_surname1.Text = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_surname1.Text);
            hsave.Add("surname", txt_surname1.Text);
            hsave.Add("dateofbirth", databirth.ToString());
            hsave.Add("applieddate", appdate.ToString());
            hsave.Add("desig", ddlpapplide.SelectedItem.Value);
            hsave.Add("designame", ddlpapplide.SelectedItem.Text);
            hsave.Add("dept", ddldeptapplied.SelectedItem.Value);
            hsave.Add("deptname", ddldeptapplied.SelectedItem.Text);
            // hsave.Add("language", ddllang.SelectedItem.Text);
            save(sender, e);
            btnnew_Click(sender, e);
        }
        else
        {
            lbl_aplalert.Text = "Should Be Enter The Value Required Fields!";
            lbl_aplalert.Visible = true;
        }
    }

    protected void btn_delete_Click(object sender, EventArgs e) //poo 30.10.17
    {
        string applnno = tbappno.Text;
        string delquery = "delete from staff_appl_master where appl_no='" + applnno + "' and interviewstatus='applied'";
        int dsdelete = d2.update_method_wo_parameter(delquery, "Text");
        if (dsdelete > 0)
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Deleted Successfully";
            ViewState["rescode"] = "";
            App_div.Visible = false;
            btn_appgo_Click(sender, e);
        }
        else
        {
            lbl_aplalert.Text = "Appointed Staffs are cant delete";
            lbl_aplalert.Visible = true;
        }
    }

    protected void save(object sender, EventArgs e)//delsi
    {
        try
        {
            string collegecode1 = "";
            if (btn_save.Text == "Save")
            {
                collegecode1 = Convert.ToString(ddlcollege1.SelectedItem.Value);
                ddlcollege1.Enabled = true;
            }
            if (btn_save.Text == "Update")
            {
                collegecode1 = Convert.ToString(ddlcollege.SelectedItem.Value);
                ddlcollege1.Enabled = false;
            }
            lablevalidation.Visible = false;

            if (ddlstitle.SelectedItem.Text != "---Select---" && ddlstitle.SelectedItem.Text != "Others")
                hsave.Add("title", ddlstitle.SelectedItem.Value);

            if (rbmale.Checked == true)
                hsave.Add("gender", rbmale.Text);
            else
                hsave.Add("gender", rbfemale.Text);

            if (ddlbgroup.SelectedItem.Text != "---Select---" && ddlbgroup.SelectedItem.Text != "Others")
                hsave.Add("bloodgroup", ddlbgroup.SelectedItem.Value);

            if (ddlmstatus.SelectedItem.Text != "---Select---" && ddlmstatus.SelectedItem.Text != "Others")
                hsave.Add("maritalstatus", ddlmstatus.SelectedItem.Text);

            if (ddlreligion.SelectedItem.Text != "---Select---" && ddlreligion.SelectedItem.Text != "Others")
                hsave.Add("religion", ddlreligion.SelectedItem.Value);

            if (ddlcommunity.SelectedItem.Text != "---Select---" && ddlcommunity.SelectedItem.Text != "Others")
                hsave.Add("community", ddlcommunity.SelectedItem.Value);

            if (ddlcaste.SelectedItem.Text != "---Select---" && ddlcaste.SelectedItem.Text != "Others")
                hsave.Add("caste", ddlcaste.SelectedItem.Value);

            if (ddlnationality.SelectedItem.Text != "---Select---" && ddlnationality.SelectedItem.Text != "Others")
                hsave.Add("nationality", ddlnationality.SelectedItem.Value);

            hsave.Add("experience", ddl_experience.SelectedItem.Text);

            if (ddlfsubjects.SelectedItem.Text != "Select" && ddlfsubjects.SelectedItem.Text != "Others")
                hsave.Add("fsubject", ddlfsubjects.SelectedItem.Value);
            if (ddllang.SelectedItem.Text != "Select" && ddllang.SelectedItem.Text != "Others")
                hsave.Add("language", ddllang.SelectedItem.Value);

            if (rbyes.Checked == true)
                hsave.Add("physicallyhandi", rbyes.Text);
            else
                hsave.Add("physicallyhandi", rbno.Text);
            hsave.Add("collegecode", collegecode1);

            string value = "";
            string family = "";

            if (Familyinfo_grid.Rows.Count > 0)
            {
                for (int i = 0; i < Familyinfo_grid.Rows.Count; i++)
                {
                    string sno = "";
                    string name = "";
                    string age = "";
                    string gender = "";
                    string relation = "";
                    string qual = "";
                    string stat = "";
                    string income = "";

                    sno = ((Familyinfo_grid.Rows[i].FindControl("lbl_S_No") as Label).Text);
                    name = ((Familyinfo_grid.Rows[i].FindControl("lbl_fmlyname") as Label).Text);
                    age = ((Familyinfo_grid.Rows[i].FindControl("lbl_fmlyage") as Label).Text);
                    gender = ((Familyinfo_grid.Rows[i].FindControl("lbl_fmlygender") as Label).Text);
                    relation = ((Familyinfo_grid.Rows[i].FindControl("lbl_fmlyrelationshipcode") as Label).Text);
                    qual = ((Familyinfo_grid.Rows[i].FindControl("lbl_fmlyqulificationcode") as Label).Text);
                    stat = ((Familyinfo_grid.Rows[i].FindControl("lbl_statuscode") as Label).Text);
                    income = ((Familyinfo_grid.Rows[i].FindControl("lbl_fmlyincome") as Label).Text);

                    if (age.Trim() == "&nbsp;")
                        age = "";
                    if (income.Trim() == "&nbsp;")
                        income = "";
                    if (family == "")
                        family = sno + ";" + name + ";" + age + ";" + gender + ";" + relation + ";" + qual + ";" + stat + ";" + income;
                    else
                        family = family + "\\" + sno + ";" + name + ";" + age + ";" + gender + ";" + relation + ";" + qual + ";" + stat + ";" + income;
                }
            }


            if (family != "")
                hsave.Add("familyinfo", family.Trim());

            string othercert = string.Empty;

            if (grdothers.Rows.Count > 0)
            {
                for (int i = 0; i < grdothers.Rows.Count; i++)
                {
                    string sno = "";
                    string certname = "";
                    string certnum = "";


                    sno = ((grdothers.Rows[i].FindControl("lbl_Sig_No") as Label).Text);
                    certname = ((grdothers.Rows[i].FindControl("lbl_certname") as Label).Text);
                    certnum = ((grdothers.Rows[i].FindControl("lbl_certnum") as Label).Text);

                    if (othercert == "")
                        othercert = sno + ";" + certname + ";" + certnum;
                    else
                        othercert = othercert + "\\" + sno + ";" + certname + ";" + certnum;
                }

            }
            if (othercert != "")
                hsave.Add("othercertificate", othercert.Trim());


            string quli = "";
            string graduation = "";
            string degree = "";
            string specialization = "";
            string yearofpassing = "";
            string university = "";
            string institution = "";
            string percentage = "";
            string grade = "";
            string clas = "";
            string pyr = "";
            if (qualification_grid.Rows.Count > 0)
            {
                for (int i = 0; i < qualification_grid.Rows.Count; i++)
                {
                    string sno = ((qualification_grid.Rows[i].FindControl("lbl_S_No") as Label).Text);
                    graduation = ((qualification_grid.Rows[i].FindControl("lbl_gradcode") as Label).Text);
                    degree = ((qualification_grid.Rows[i].FindControl("lbl_degcode") as Label).Text);
                    specialization = ((qualification_grid.Rows[i].FindControl("lbl_specialcode") as Label).Text);
                    yearofpassing = ((qualification_grid.Rows[i].FindControl("lbl_yearofpass") as Label).Text);
                    string[] yr = yearofpassing.Split('/');
                    if (yr.Length > 1)
                        pyr = yr[2];
                    else
                        pyr = yearofpassing;

                    university = ((qualification_grid.Rows[i].FindControl("lbl_univercity_code") as Label).Text);
                    institution = ((qualification_grid.Rows[i].FindControl("lbl_Institutioncode") as Label).Text);
                    percentage = ((qualification_grid.Rows[i].FindControl("lbl_percentage") as Label).Text);
                    grade = ((qualification_grid.Rows[i].FindControl("lbl_grade") as Label).Text);
                    clas = ((qualification_grid.Rows[i].FindControl("lbl_class") as Label).Text);
                    clas = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(clas);

                    if (percentage.Trim() == "&nbsp;")
                        percentage = "";
                    if (grade.Trim() == "&nbsp;")
                        grade = "";
                    if (clas.Trim() == "&nbsp;")
                        clas = "";

                    if (quli == "")
                        quli = sno + ";" + graduation + ";" + degree + ";" + specialization + ";" + yearofpassing + ";" + university + ";" + institution + ";" + percentage + ";" + grade + ";" + clas;
                    else
                        quli = quli + "\\" + sno + ";" + graduation + ";" + degree + ";" + specialization + ";" + yearofpassing + ";" + university + ";" + institution + ";" + percentage + ";" + grade + ";" + clas;
                }
            }

            if (quli != "")
                hsave.Add("qulification", quli);

            string exp = "";
            string isown = "";
            string fromyr = "";
            string toyr = "";
            string year = "";
            string month = "";
            string organization = "";
            string designation = "";
            string experiencein = "";
            string reason = "";
            string salary = "";
            string additionalduties = "";
            string frmyr = "";
            string toyear = "";

            if (Experience_grid.Rows.Count > 0)
            {
                for (int i = 0; i < Experience_grid.Rows.Count; i++)
                {
                    string sno = ((Experience_grid.Rows[i].FindControl("lbl_S_No") as Label).Text);
                    string own = ((Experience_grid.Rows[i].FindControl("lbl_College") as Label).Text);
                    string fryr = ((Experience_grid.Rows[i].FindControl("lbl_From") as Label).Text);
                    string[] dt = fryr.Split('/');
                    fromyr = ",ExpFromDate='" + dt[1] + "/" + dt[0] + "/" + dt[2] + "'";
                    string tyr = ((Experience_grid.Rows[i].FindControl("lbl_To") as Label).Text);
                    string[] dt1 = tyr.Split('/');
                    toyr = ",ExpToDate='" + dt1[1] + "/" + dt1[0] + "/" + dt1[2] + "'";

                    frmyr = dt[1] + "/" + dt[0] + "/" + dt[2];
                    toyear = dt1[1] + "/" + dt1[0] + "/" + dt1[2];

                    organization = ((Experience_grid.Rows[i].FindControl("lbl_Oraganization_code") as Label).Text);
                    designation = ((Experience_grid.Rows[i].FindControl("lbl_Designation_code") as Label).Text);
                    experiencein = ((Experience_grid.Rows[i].FindControl("lbl_Experiencein_code") as Label).Text);
                    year = ((Experience_grid.Rows[i].FindControl("lbl_Year") as Label).Text);
                    month = ((Experience_grid.Rows[i].FindControl("lbl_Month") as Label).Text);
                    salary = ((Experience_grid.Rows[i].FindControl("lbl_Salary") as Label).Text);
                    reason = ((Experience_grid.Rows[i].FindControl("lbl_Reasonsrelievingcode") as Label).Text);
                    additionalduties = ((Experience_grid.Rows[i].FindControl("lbl_Duties") as Label).Text);

                    if (own.Trim() == "Own")
                        isown = "0";
                    if (own.Trim() == "Other")
                        isown = "1";

                    if (year.Trim() == "&nbsp;")
                        year = "";
                    if (month.Trim() == "&nbsp;")
                        month = "";
                    if (salary.Trim() == "&nbsp;")
                        salary = "";
                    if (additionalduties.Trim() == "&nbsp;")
                        additionalduties = "";

                    if (exp == "")
                        exp = sno + ";" + isown + ";" + fryr + ";" + tyr + ";" + year + ";" + month + ";" + organization + ";" + designation + ";" + experiencein + ";" + reason + ";" + salary + ";" + additionalduties;
                    else
                        exp = exp + "\\" + sno + ";" + isown + ";" + fryr + ";" + tyr + ";" + year + ";" + month + ";" + organization + ";" + designation + ";" + experiencein + ";" + reason + ";" + salary + ";" + additionalduties;
                }
            }

            if (exp != "")
                hsave.Add("exp", exp);

            string valuesemattnd = "";
            string semeinaratnd = "";

            if (Seminar_grid.Rows.Count > 0)
            {
                for (int i = 0; i < Seminar_grid.Rows.Count; i++)
                {
                    string type = "";
                    string proname = "";
                    string fdate = "";
                    string todate = "";
                    string place = "";
                    string sponsered = "";
                    string title = "";

                    string sno = Seminar_grid.Rows[i].Cells[0].Text;
                    type = Seminar_grid.Rows[i].Cells[8].Text;
                    proname = Seminar_grid.Rows[i].Cells[9].Text;
                    fdate = Seminar_grid.Rows[i].Cells[3].Text;
                    todate = Seminar_grid.Rows[i].Cells[4].Text;
                    place = Seminar_grid.Rows[i].Cells[10].Text;
                    sponsered = Seminar_grid.Rows[i].Cells[11].Text;
                    title = Seminar_grid.Rows[i].Cells[12].Text;
                    if (semeinaratnd == "")
                        semeinaratnd = sno + ";" + type + ";" + proname + ";" + fdate + ";" + todate + ";" + place + ";" + sponsered + ";" + title;
                    else
                        semeinaratnd = semeinaratnd + "\\" + sno + ";" + type + ";" + proname + ";" + fdate + ";" + todate + ";" + place + ";" + sponsered + ";" + title;
                }
            }

            if (semeinaratnd != "")
                hsave.Add("semattnd", semeinaratnd);

            string semorg = "";
            if (SeminarOrgs_grid.Rows.Count > 0)
            {
                for (int i = 0; i < SeminarOrgs_grid.Rows.Count; i++)
                {
                    string sno = SeminarOrgs_grid.Rows[i].Cells[0].Text;
                    string pname = SeminarOrgs_grid.Rows[i].Cells[7].Text;
                    string fdate = SeminarOrgs_grid.Rows[i].Cells[2].Text;
                    string tdate = SeminarOrgs_grid.Rows[i].Cells[3].Text;
                    string place = SeminarOrgs_grid.Rows[i].Cells[8].Text;
                    string title = SeminarOrgs_grid.Rows[i].Cells[9].Text;
                    string letter = SeminarOrgs_grid.Rows[i].Cells[6].Text;

                    if (letter.Trim() == "&nbsp;")
                        letter = "";

                    if (semorg == "")
                        semorg = sno + ";" + pname + ";" + fdate + ";" + tdate + ";" + place + ";" + title + ";" + letter;
                    else
                        semorg = semorg + "\\" + sno + ";" + pname + ";" + fdate + ";" + tdate + ";" + place + ";" + title + ";" + letter;
                }
            }

            if (semorg != "")
                hsave.Add("semorg", semorg);

            string journal = "";
            if (JournalPub1.Rows.Count > 0)
            {
                for (int i = 0; i < JournalPub1.Rows.Count; i++)
                {
                    string sno = JournalPub1.Rows[i].Cells[0].Text;
                    string type = JournalPub1.Rows[i].Cells[10].Text;
                    string jname = JournalPub1.Rows[i].Cells[11].Text;
                    string publisher = JournalPub1.Rows[i].Cells[12].Text;
                    string volno = JournalPub1.Rows[i].Cells[4].Text;
                    string ino = JournalPub1.Rows[i].Cells[5].Text;
                    string periodcity = JournalPub1.Rows[i].Cells[13].Text;
                    string period = JournalPub1.Rows[i].Cells[7].Text;
                    string pno = JournalPub1.Rows[i].Cells[8].Text;
                    string title = JournalPub1.Rows[i].Cells[14].Text;

                    if (volno.Trim() == "&nbsp;")
                        volno = "";
                    if (ino.Trim() == "&nbsp;")
                        ino = "";
                    if (period.Trim() == "&nbsp;")
                        period = "";
                    if (pno.Trim() == "&nbsp;")
                        pno = "";

                    if (journal == "")
                        journal = sno + ";" + type + ";" + jname + ";" + publisher + ";" + volno + ";" + ino + ";" + periodcity + ";" + period + ";" + pno + ";" + title;
                    else
                        journal = journal + "\\" + sno + ";" + type + ";" + jname + ";" + publisher + ";" + volno + ";" + ino + ";" + periodcity + ";" + period + ";" + pno + ";" + title;
                }
            }

            if (journal != "")
                hsave.Add("journal", journal);

            string edit = "";
            if (EditorBook_grid.Rows.Count > 0)
            {
                for (int i = 0; i < EditorBook_grid.Rows.Count; i++)
                {
                    string sno = EditorBook_grid.Rows[i].Cells[0].Text;
                    string type = EditorBook_grid.Rows[i].Cells[7].Text;
                    string year1 = EditorBook_grid.Rows[i].Cells[2].Text;
                    string pubname = EditorBook_grid.Rows[i].Cells[8].Text;
                    string add = EditorBook_grid.Rows[i].Cells[4].Text;
                    string tit = EditorBook_grid.Rows[i].Cells[9].Text;
                    string cost = EditorBook_grid.Rows[i].Cells[6].Text;

                    if (add.Trim() == "&nbsp;")
                        add = "";
                    if (cost.Trim() == "&nbsp;")
                        cost = "";

                    if (edit == "")
                        edit = sno + ";" + type + ";" + year1 + ";" + pubname + ";" + add + ";" + tit + ";" + cost;
                    else
                        edit = edit + "\\" + sno + ";" + type + ";" + year1 + ";" + pubname + ";" + add + ";" + tit + ";" + cost;
                }
            }

            if (edit != "")
                hsave.Add("editors", edit);

            string book = "";
            if (Book_grid.Rows.Count > 0)
            {
                for (int i = 0; i < Book_grid.Rows.Count; i++)
                {
                    string sno = Book_grid.Rows[i].Cells[0].Text;
                    string year1 = Book_grid.Rows[i].Cells[1].Text;
                    string pname = Book_grid.Rows[i].Cells[6].Text;
                    string add = Book_grid.Rows[i].Cells[3].Text;
                    string tit = Book_grid.Rows[i].Cells[7].Text;
                    string cost = Book_grid.Rows[i].Cells[5].Text;

                    if (add.Trim() == "&nbsp;")
                        add = "";
                    if (cost.Trim() == "&nbsp;")
                        cost = "";

                    if (book == "")
                        book = sno + ";" + year1 + ";" + pname + ";" + add + ";" + tit + ";" + cost;
                    else
                        book = book + "\\" + sno + ";" + year1 + ";" + pname + ";" + add + ";" + tit + ";" + cost;
                }
            }

            if (book != "")
                hsave.Add("books", book);

            string award = "";
            if (Award_grid.Rows.Count > 0)
            {
                for (int i = 0; i < Award_grid.Rows.Count; i++)
                {
                    string sno = Award_grid.Rows[i].Cells[0].Text;
                    string year1 = Award_grid.Rows[i].Cells[1].Text;
                    string name = Award_grid.Rows[i].Cells[6].Text;
                    string onmae = Award_grid.Rows[i].Cells[7].Text;
                    string add = Award_grid.Rows[i].Cells[4].Text;
                    string nat = Award_grid.Rows[i].Cells[8].Text;

                    if (add.Trim() == "&nbsp;")
                        add = "";

                    if (award == "")
                        award = sno + ";" + year1 + ";" + name + ";" + onmae + ";" + add + ";" + nat;
                    else
                        award = award + "\\" + sno + ";" + year1 + ";" + name + ";" + onmae + ";" + add + ";" + nat;
                }
            }

            if (award != "")
                hsave.Add("award", award);

            string project = "";
            if (project_detail_grid.Rows.Count > 0)
            {
                for (int i = 0; i < project_detail_grid.Rows.Count; i++)
                {
                    string sno = project_detail_grid.Rows[i].Cells[0].Text;
                    string tit = project_detail_grid.Rows[i].Cells[5].Text;
                    string from = project_detail_grid.Rows[i].Cells[2].Text;
                    string to = project_detail_grid.Rows[i].Cells[3].Text;
                    string remarks = project_detail_grid.Rows[i].Cells[4].Text;
                    if (remarks.Trim() == "&nbsp;")
                        remarks = "";

                    if (project == "")
                        project = sno + ";" + tit + ";" + from + ";" + to + ";" + remarks;
                    else
                        project = project + "\\" + sno + ";" + tit + ";" + from + ";" + to + ";" + remarks;
                }
            }

            if (project != "")
                hsave.Add("project", project);

            string research = "";
            if (Research_grid.Rows.Count > 0)
            {
                for (int i = 0; i < Research_grid.Rows.Count; i++)
                {
                    string sno = Research_grid.Rows[i].Cells[0].Text;
                    string name = Research_grid.Rows[i].Cells[5].Text;
                    string type = Research_grid.Rows[i].Cells[6].Text;
                    string rtype = Research_grid.Rows[i].Cells[7].Text;
                    string rem = Research_grid.Rows[i].Cells[4].Text;

                    if (rem.Trim() == "&nbsp;")
                        rem = "";

                    if (research == "")
                        research = sno + ";" + name + ";" + type + ";" + rtype + ";" + rem;
                    else
                        research = research + "\\" + sno + ";" + name + ";" + type + ";" + rtype + ";" + rem;
                }
            }

            if (research != "")
                hsave.Add("research", research);

            string pgrants = "";
            if (PGrants_grid.Rows.Count > 0)
            {
                for (int i = 0; i < PGrants_grid.Rows.Count; i++)
                {
                    string sno = PGrants_grid.Rows[i].Cells[0].Text;
                    string year1 = PGrants_grid.Rows[i].Cells[1].Text;
                    string name = PGrants_grid.Rows[i].Cells[8].Text;
                    string add = PGrants_grid.Rows[i].Cells[3].Text;
                    string tit = PGrants_grid.Rows[i].Cells[9].Text;
                    string amt = PGrants_grid.Rows[i].Cells[5].Text;
                    string letter = PGrants_grid.Rows[i].Cells[6].Text;
                    string date = PGrants_grid.Rows[i].Cells[7].Text;
                    if (add.Trim() == "&nbsp;")
                        add = "";
                    if (amt.Trim() == "&nbsp;")
                        amt = "";
                    if (letter.Trim() == "&nbsp;")
                        letter = "";

                    if (pgrants == "")
                        pgrants = sno + ";" + year1 + ";" + name + ";" + add + ";" + tit + ";" + amt + ";" + letter + ";" + date;
                    else
                        pgrants = pgrants + "\\" + sno + ";" + year1 + ";" + name + ";" + add + ";" + tit + ";" + amt + ";" + letter + ";" + date;
                }
            }

            if (pgrants != "")
                hsave.Add("projectgrants", pgrants);

            string patent = "";
            if (Patent_grid.Rows.Count > 0)
            {
                for (int i = 0; i < Patent_grid.Rows.Count; i++)
                {
                    string sno = Patent_grid.Rows[i].Cells[0].Text;
                    string year1 = Patent_grid.Rows[i].Cells[1].Text;
                    string name = Patent_grid.Rows[i].Cells[9].Text;
                    string add = Patent_grid.Rows[i].Cells[3].Text;
                    string tit = Patent_grid.Rows[i].Cells[10].Text;
                    string letter = Patent_grid.Rows[i].Cells[5].Text;
                    string date = Patent_grid.Rows[i].Cells[6].Text;
                    string cno = Patent_grid.Rows[i].Cells[7].Text;
                    string cdate = Patent_grid.Rows[i].Cells[8].Text;

                    if (add.Trim() == "&nbsp;")
                        add = "";
                    if (letter.Trim() == "&nbsp;")
                        letter = "";
                    if (cno.Trim() == "&nbsp;")
                        cno = "";

                    if (patent == "")
                        patent = sno + ";" + year1 + ";" + name + ";" + add + ";" + tit + ";" + letter + ";" + date + ";" + cno + ";" + cdate;
                    else
                        patent = patent + "\\" + sno + ";" + year1 + ";" + name + ";" + add + ";" + tit + ";" + letter + ";" + date + ";" + cno + ";" + cdate;
                }
            }

            if (patent != "")
                hsave.Add("patentrecived ", patent);

            string guide = "";

            if (Guide_grid.Rows.Count > 0)
            {
                for (int i = 0; i < Guide_grid.Rows.Count; i++)
                {
                    string sno = Guide_grid.Rows[i].Cells[0].Text;
                    string year1 = Guide_grid.Rows[i].Cells[1].Text;
                    string nat = Guide_grid.Rows[i].Cells[4].Text;
                    string tit = Guide_grid.Rows[i].Cells[5].Text;

                    if (guide == "")
                        guide = sno + ";" + year1 + ";" + nat + ";" + tit;
                    else
                        guide = guide + "\\" + sno + ";" + year1 + ";" + nat + ";" + tit;
                }
            }

            if (guide != "")
                hsave.Add("guide", guide);

            string proff = "";

            if (Professionalm_grid.Rows.Count > 0)
            {
                for (int i = 0; i < Professionalm_grid.Rows.Count; i++)
                {
                    string sno = Professionalm_grid.Rows[i].Cells[0].Text;
                    string name = Professionalm_grid.Rows[i].Cells[5].Text;
                    string add = Professionalm_grid.Rows[i].Cells[2].Text;
                    string jyear = Professionalm_grid.Rows[i].Cells[3].Text;
                    string memno = Professionalm_grid.Rows[i].Cells[4].Text;

                    if (add.Trim() == "&nbsp;")
                        add = "";
                    if (memno.Trim() == "&nbsp;")
                        memno = "";

                    if (proff == "")
                        proff = sno + ";" + name + ";" + add + ";" + jyear + ";" + memno;
                    else
                        proff = proff + "\\" + sno + ";" + name + ";" + add + ";" + jyear + ";" + memno;
                }
            }

            if (proff != "")
                hsave.Add("proffmember", proff);

            string admin = "";

            if (Administrative_grid.Rows.Count > 0)
            {

                for (int i = 0; i < Administrative_grid.Rows.Count; i++)
                {
                    string sno = Administrative_grid.Rows[i].Cells[0].Text;
                    string name = Administrative_grid.Rows[i].Cells[6].Text;
                    string fdate = Administrative_grid.Rows[i].Cells[2].Text;
                    string tdate = Administrative_grid.Rows[i].Cells[3].Text;
                    string nat = Administrative_grid.Rows[i].Cells[4].Text;
                    string ach = Administrative_grid.Rows[i].Cells[5].Text;

                    if (nat.Trim() == "&nbsp;")
                        nat = "";
                    if (ach.Trim() == "&nbsp;")
                        ach = "";

                    if (admin == "")
                        admin = sno + ";" + name + ";" + fdate + ";" + tdate + ";" + nat + ";" + ach;
                    else
                        admin = admin + "\\" + sno + ";" + name + ";" + fdate + ";" + tdate + ";" + nat + ";" + ach;
                }
            }

            if (admin != "")
                hsave.Add("admincommittee", admin);

            if (txt_paddress.Text.Trim() != "")
                hsave.Add("paddress", txt_paddress.Text + ";" + txt_pstreet.Text);

            if (txt_pstreet.Text.Trim() != "")
                hsave.Add("pstreat", txt_pstreet.Text);

            if (ddlpcity.SelectedItem.Text != "---Select---" && ddlpcity.SelectedItem.Text != "Others")
                hsave.Add("pcity", ddlpcity.SelectedItem.Value);

            if (ddlpdistirct.SelectedItem.Text != "---Select---" && ddlpdistirct.SelectedItem.Text != "Others")
                hsave.Add("pdist", ddlpdistirct.SelectedItem.Value);

            if (ddlpstate.SelectedItem.Text != "---Select---" && ddlpstate.SelectedItem.Text != "Others")
                hsave.Add("pstate", ddlpstate.SelectedItem.Value);
            string ppincode = "";
            if (txt_ppincode.Text.Trim() != "")
                ppincode = txt_ppincode.Text;

            if (txt_presphone.Text.Trim() != "")
                hsave.Add("presphone", txt_presphone.Text);

            if (txt_pmobile.Text.Trim() != "")
                hsave.Add("pmobileno", txt_pmobile.Text);

            if (txt_pfax.Text.Trim() != "")
                hsave.Add("pfaxno", txt_pfax.Text);
            if (txt_pemail.Text.Trim() != "")
                hsave.Add("pemil", txt_pemail.Text);

            if (txt_caddress.Text.Trim() != "")
                hsave.Add("caddress", txt_caddress.Text + ";" + txt_cstreet.Text);
            if (txt_cstreet.Text.Trim() != "")
                hsave.Add("cstreat", txt_cstreet.Text);
            if (ddlccity.SelectedItem.Text != "---Select---" && ddlccity.SelectedItem.Text != "Others")
                hsave.Add("ccity", ddlccity.SelectedItem.Value);
            if (ddlcdistrict.SelectedItem.Text != "---Select---" && ddlcdistrict.SelectedItem.Text != "Others")
                hsave.Add("cdist", ddlcdistrict.SelectedItem.Value);
            if (ddlcstate.SelectedItem.Text != "---Select---" && ddlcstate.SelectedItem.Text != "Others")
                hsave.Add("cstate", ddlcstate.SelectedItem.Value);
            if (txt_cpincode.Text.Trim() != "")
                hsave.Add("cpincode", txt_cpincode.Text);

            if (txt_cresphone.Text.Trim() != "")
                hsave.Add("cresphone", txt_cresphone.Text);

            if (txt_cmobileno.Text.Trim() != "")
                hsave.Add("cmobileno", txt_cmobileno.Text);
            if (txt_cfax.Text.Trim() != "")
                hsave.Add("cfaxno", txt_cfax.Text);
            string rmks = "";
            if (txt_cremarks.Text.Trim() != "")
                rmks = txt_cremarks.Text;

            string valueg = txt_gname.Text + ";" + ddlgrelation.SelectedItem.Value + ";" + txt_gaddress.Text + ";" + txt_gstreet.Text + ";" + ddlgcity.SelectedItem.Value + ";" + ddlgdistrict.SelectedItem.Value + ";" + ddlgstate.SelectedItem.Value + ";" + txt_gpincode.Text + ";" + txt_gresphone.Text + ";" + txt_gmobileno.Text;
            hsave.Add("guardinfo ", valueg.ToString());

            string valueref = txt_refname.Text + ";" + txt_refaddress.Text + ";" + txt_refstreet.Text + ";" + ddlrefcity.SelectedItem.Value + ";" + ddlrdistrict.SelectedItem.Value + ";" + ddlrefstate.SelectedItem.Value + ";" + txt_refpincode.Text.Trim() + ";" + txt_refresphoneno.Text + ";" + txt_refresmobileno.Text + ";" + txt_refcompany.Text + ";" + txt_refdesignation.Text;
            hsave.Add("reference ", valueref.ToString());

            if (btn_save.Text == "Save")
            {

                string getapplno = d2.GetFunction("select appl_no from staff_appl_master where appl_no='" + Convert.ToString(hsave["applno"]) + "'");
                if (tbappno.Text.Trim() == getapplno)
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Appl No Already Exist";
                    return;
                
                }
            }


            string savequery = " if exists (select * from staff_appl_master where appl_no='" + Convert.ToString(hsave["applno"]) + "')update staff_appl_master set appl_no='" + Convert.ToString(hsave["applno"]) + "',appl_name='" + Convert.ToString(hsave["firstname"]) + "',mid_name='" + Convert.ToString(hsave["middlename"]) + "',nameacr='" + Convert.ToString(hsave["surname"]) + "',father_name='" + Convert.ToString(hsave["fathername"]) + "',com_mobileno='" + Convert.ToString(hsave["cmobileno"]) + "',sex='" + Convert.ToString(hsave["gender"]) + "',date_of_birth='" + Convert.ToString(hsave["dateofbirth"]) + "',qualification='" + Convert.ToString(hsave["qulification"]) + "',subjects='" + Convert.ToString(hsave["fsubject"]) + "',comm_address='" + Convert.ToString(hsave["caddress"]) + "',com_phone='" + Convert.ToString(hsave["cresphone"]) + "',per_address='" + Convert.ToString(hsave["paddress"]) + "',per_phone='" + Convert.ToString(hsave["presphone"]) + "',email='" + Convert.ToString(hsave["pemil"]) + "',desig_code='" + Convert.ToString(hsave["desig"]) + "',dateofapply='" + Convert.ToString(hsave["applieddate"]) + "',dept_code='" + Convert.ToString(hsave["dept"]) + "',yofexp='" + Convert.ToString(hsave["experience"]) + "',bldgrp='" + Convert.ToString(hsave["bloodgroup"]) + "',college_code='" + collegecode1 + "',dept_name='" + Convert.ToString(hsave["deptname"]) + "',religion='" + Convert.ToString(hsave["religion"]) + "',Caste='" + Convert.ToString(hsave["caste"]) + "',Community='" + Convert.ToString(hsave["community"]) + "',Nationality='" + Convert.ToString(hsave["nationality"]) + "',martial_status='" + Convert.ToString(hsave["maritalstatus"]) + "',isphy='" + Convert.ToString(hsave["physicallyhandi"]) + "',family_info='" + family + "',guard_info='" + valueg + "',referee_info='" + valueref + "',experience_info='" + Convert.ToString(hsave["exp"]) + "',project_info='" + Convert.ToString(hsave["project"]) + "',research_info='" + Convert.ToString(hsave["research"]) + "',comm_address1='" + Convert.ToString(hsave["caddress"]) + "',ccity='" + Convert.ToString(hsave["ccity"]) + "',cstate='" + Convert.ToString(hsave["cstate"]) + "',com_fax='" + Convert.ToString(hsave["cfaxno"]) + "',per_address1='',pcity='" + Convert.ToString(hsave["pcity"]) + "',pstate='" + Convert.ToString(hsave["pstate"]) + "',per_fax='" + Convert.ToString(hsave["pfaxno"]) + "',title='" + Convert.ToString(hsave["title"]) + "',Seminar_Attnd='" + Convert.ToString(hsave["semattnd"]) + "',Seminar_Org='" + Convert.ToString(hsave["semorg"]) + "',Award='" + Convert.ToString(hsave["award"]) + "',Prof_Membership='" + Convert.ToString(hsave["proffmember"]) + "',Adm_Membership='" + Convert.ToString(hsave["admincommittee"]) + "',Journal_Publication='" + Convert.ToString(hsave["journal"]) + "',Books_Published='" + Convert.ToString(hsave["books"]) + "',Editor_Details='" + Convert.ToString(hsave["editors"]) + "',Project_Grants='" + Convert.ToString(hsave["projectgrants"]) + "',Patent_Received='" + patent + "',Guide_Ship='" + Convert.ToString(hsave["guide"]) + "',com_pincode='" + Convert.ToString(hsave["cpincode"]) + "',per_pincode='" + ppincode + "',per_mobileno='" + Convert.ToString(hsave["pmobileno"]) + "',remarks='" + rmks + "',desig_name='" + Convert.ToString(hsave["designame"]) + "',pdistrict='" + Convert.ToString(hsave["pdist"]) + "',cdistrict='" + Convert.ToString(hsave["cdist"]) + "',language='" + Convert.ToString(hsave["language"]) + "'where appl_no='" + Convert.ToString(hsave["applno"]) + "' else insert into staff_appl_master(appl_no,appl_name,mid_name,nameacr,father_name,sex,date_of_birth,qualification,subjects,comm_address,com_phone,per_address,per_phone,email,appointflag,desig_code,staff_type,dateofapply,dept_code,yofexp,bldgrp,college_code,dept_name,sal_expected,interviewstatus,prev_salary,religion,Caste,Community,Nationality,martial_status,guar_address,guar_phone,guar_name,interviewcall,guar_pincode,com_pincode,per_pincode,per_mobileno,refname,refadd1,refadd2,refmobile,refphone,refcompany,refdesign,desig_name,exp_status,totyrs,isphy,refer_name,exp_joindate,minority,noof_guide_stud,aicte_comm,aicte_name,aicte_grants,aicte_name1,family_info,guard_info,referee_info,experience_info,pub_info,project_info,research_info,comm_address1,ccity,cstate,com_fax,per_address1,pcity,pstate,per_fax,app_acr,title,Qual_Old,Seminar_Attnd,Seminar_Org,Award,Prof_Membership,Adm_Membership,Journal_Publication,Books_Published,Editor_Details,Project_Grants,Patent_Received,Guide_Ship,Lic_RenewDate,TotMonths,com_mobileno,remarks,cdistrict,pdistrict,language) values('" + Convert.ToString(hsave["applno"]) + "','" + Convert.ToString(hsave["firstname"]) + "','" + Convert.ToString(hsave["middlename"]) + "','" + Convert.ToString(hsave["surname"]) + "','" + Convert.ToString(hsave["fathername"]) + "','" + Convert.ToString(hsave["gender"]) + "','" + Convert.ToString(hsave["dateofbirth"]) + "','" + Convert.ToString(hsave["qulification"]) + "','" + Convert.ToString(hsave["fsubject"]) + "','" + Convert.ToString(hsave["caddress"]) + "','" + Convert.ToString(hsave["cresphone"]) + "','" + Convert.ToString(hsave["paddress"]) + "','" + Convert.ToString(hsave["presphone"]) + "','" + Convert.ToString(hsave["pemil"]) + "','','" + Convert.ToString(hsave["desig"]) + "','','" + Convert.ToString(hsave["applieddate"]) + "','" + Convert.ToString(hsave["dept"]) + "','" + Convert.ToString(hsave["experience"]) + "','" + Convert.ToString(hsave["bloodgroup"]) + "','" + collegecode1 + "','" + Convert.ToString(hsave["deptname"]) + "','','applied','','" + Convert.ToString(hsave["religion"]) + "','" + Convert.ToString(hsave["caste"]) + "','" + Convert.ToString(hsave["community"]) + "','" + Convert.ToString(hsave["nationality"]) + "',' " + Convert.ToString(hsave["maritalstatus"]) + "','','','','','','" + Convert.ToString(hsave["cpincode"]) + "','" + ppincode + "','" + Convert.ToString(hsave["pmobileno"]) + "','','','','','','','','" + Convert.ToString(hsave["designame"]) + "','','','" + Convert.ToString(hsave["physicallyhandi"]) + "','','','','','','','','','" + family + "','" + valueg + "','" + valueref + "','" + Convert.ToString(hsave["exp"]) + "','','" + Convert.ToString(hsave["project"]) + "','" + Convert.ToString(hsave["research"]) + "','" + Convert.ToString(hsave["caddress"]) + "','" + Convert.ToString(hsave["ccity"]) + "','" + Convert.ToString(hsave["cstate"]) + "','" + Convert.ToString(hsave["cfaxno"]) + "','" + Convert.ToString(hsave["paddress"]) + "','" + Convert.ToString(hsave["pcity"]) + "','" + Convert.ToString(hsave["pstate"]) + "','" + Convert.ToString(hsave["pfaxno"]) + "','','" + Convert.ToString(hsave["title"]) + "','','" + Convert.ToString(hsave["semattnd"]) + "','" + Convert.ToString(hsave["semorg"]) + "','" + Convert.ToString(hsave["award"]) + "','" + Convert.ToString(hsave["proffmember"]) + "','" + Convert.ToString(hsave["admincommittee"]) + "','" + Convert.ToString(hsave["journal"]) + "','" + Convert.ToString(hsave["books"]) + "','" + Convert.ToString(hsave["editors"]) + "','" + Convert.ToString(hsave["projectgrants"]) + "','" + patent + "','" + Convert.ToString(hsave["guide"]) + "','','','" + Convert.ToString(hsave["cmobileno"]) + "','" + rmks + "','" + Convert.ToString(hsave["cdist"]) + "','" + Convert.ToString(hsave["pdist"]) + "','" + Convert.ToString(hsave["language"]) + "')";


            int a = d2.update_method_wo_parameter(savequery, "Text");
            if (a != 0)
            {
                string qualquery = "";
                string expquery = "";
                int b = 0;
                string applid = d2.GetFunction("select appl_id  from staff_appl_master where appl_no='" + Convert.ToString(hsave["applno"]) + "'");
                if (btn_save.Text == "Save")
                {
                    string hrsno = d2.GetFunction("select StartNo  from HRS_CodeSettings  where SettingField='2'");
                    int startno = Convert.ToInt32(hrsno);

                    int usno = startno + 1;
                    string query = " update HRS_CodeSettings set StartNo='" + usno + "' where SettingField='2' and CollegeCode='" + collegecode1 + "'";
                    b = d2.update_method_wo_parameter(query, "Text");

                    if (qualification_grid.Rows.Count > 0)
                    {
                        for (int i = 0; i < qualification_grid.Rows.Count; i++)
                        {
                            //21.06.16
                            string sno = ((qualification_grid.Rows[i].FindControl("lbl_S_No") as Label).Text);
                            graduation = ((qualification_grid.Rows[i].FindControl("lbl_gradcode") as Label).Text);
                            degree = ((qualification_grid.Rows[i].FindControl("lbl_degcode") as Label).Text);
                            specialization = ((qualification_grid.Rows[i].FindControl("lbl_specialcode") as Label).Text);
                            yearofpassing = ((qualification_grid.Rows[i].FindControl("lbl_yearofpass") as Label).Text);
                            string[] yr = yearofpassing.Split('/');
                            if (yr.Length > 1)
                                pyr = yr[2];
                            else
                                pyr = yearofpassing;

                            university = ((qualification_grid.Rows[i].FindControl("lbl_univercity_code") as Label).Text);
                            institution = ((qualification_grid.Rows[i].FindControl("lbl_Institutioncode") as Label).Text);
                            percentage = ((qualification_grid.Rows[i].FindControl("lbl_percentage") as Label).Text);
                            grade = ((qualification_grid.Rows[i].FindControl("lbl_grade") as Label).Text);
                            clas = ((qualification_grid.Rows[i].FindControl("lbl_class") as Label).Text);
                            clas = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(clas);

                            if (percentage.Trim() == "&nbsp")
                                percentage = "";
                            else
                                percentage = percentage;
                            if (grade.Trim() == "&nbsp")
                                grade = "";
                            else
                                grade = grade;
                            if (clas.Trim() == "&nbsp")
                                clas = "";
                            else
                                clas = clas;

                            qualquery = " insert into StaffDetails(Appl_ID,DetailType,Graduation,Degree,Specialization,PassYear,University,Institution,Percentage,Grade,Class) values ('" + applid + "','1','" + graduation + "','" + degree + "','" + specialization + "','" + pyr + "','" + university + "','" + institution + "','" + percentage + "','" + grade + "','" + clas + "')";
                            b = d2.update_method_wo_parameter(qualquery, "Text");
                        }
                    }

                    if (Experience_grid.Rows.Count > 0)
                    {
                        for (int i = 0; i < Experience_grid.Rows.Count; i++)
                        {
                            string sno = ((Experience_grid.Rows[i].FindControl("lbl_S_No") as Label).Text);
                            string own = ((Experience_grid.Rows[i].FindControl("lbl_College") as Label).Text);
                            string fryr = ((Experience_grid.Rows[i].FindControl("lbl_From") as Label).Text);
                            string[] dt = fryr.Split('/');
                            fromyr = ",ExpFromDate='" + dt[1] + "/" + dt[0] + "/" + dt[2] + "'";
                            string tyr = ((Experience_grid.Rows[i].FindControl("lbl_To") as Label).Text);
                            string[] dt1 = tyr.Split('/');
                            toyr = ",ExpToDate='" + dt1[1] + "/" + dt1[0] + "/" + dt1[2] + "'";

                            frmyr = dt[1] + "/" + dt[0] + "/" + dt[2];
                            toyear = dt1[1] + "/" + dt1[0] + "/" + dt1[2];

                            organization = ((Experience_grid.Rows[i].FindControl("lbl_Oraganization_code") as Label).Text);
                            designation = ((Experience_grid.Rows[i].FindControl("lbl_Designation_code") as Label).Text);
                            experiencein = ((Experience_grid.Rows[i].FindControl("lbl_Experiencein_code") as Label).Text);
                            year = ((Experience_grid.Rows[i].FindControl("lbl_Year") as Label).Text);
                            month = ((Experience_grid.Rows[i].FindControl("lbl_Month") as Label).Text);
                            salary = ((Experience_grid.Rows[i].FindControl("lbl_Salary") as Label).Text);
                            reason = ((Experience_grid.Rows[i].FindControl("lbl_Reasonsrelievingcode") as Label).Text);
                            additionalduties = ((Experience_grid.Rows[i].FindControl("lbl_Duties") as Label).Text);

                            if (own.Trim() == "Own")
                                isown = "0";
                            else if (own.Trim() == "Other")
                                isown = "1";

                            if (year.Trim() == "&nbsp")
                                year = "";
                            else
                                year = year;
                            if (month.Trim() == "&nbsp")
                                month = "";
                            else
                                month = month;
                            if (salary.Trim() == "&nbsp;")
                                salary = " ";
                            else
                                salary = salary;
                            if (additionalduties.Trim() == "&nbsp;")
                                additionalduties = "";
                            else
                                additionalduties = additionalduties;

                            expquery = " insert into StaffDetails(Appl_ID,DetailType,IsOwncollege,ExpFromDate,ExpToDate,ExpYear,ExpMOnth,ExpOrganization,ExpDesig,ExpIn,ReasonforReleive,CurrentSalary,AdditionalDuties) values ('" + applid + "','2','" + isown + "','" + frmyr + "','" + toyear + "','" + year + "','" + month + "','" + organization + "','" + designation + "','" + experiencein + "','" + reason + "','" + salary + "','" + additionalduties + "')";
                            b = d2.update_method_wo_parameter(expquery, "Text");
                        }
                    }
                    if (b > 0 || a > 0)
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Text = "Saved Successfully";
                        ViewState["rescode"] = "";
                    }
                }
                if (btn_save.Text == "Update")
                {
                    string actrow = Convert.ToString(Fpspread7.ActiveSheetView.ActiveRow);
                    string actcol = Convert.ToString(Fpspread7.ActiveSheetView.ActiveColumn);
                    string staffcode = "";
                    string applno = "";
                    if (actrow.Trim() != "")
                    {
                        staffcode = Convert.ToString(Fpspread7.Sheets[0].Cells[Convert.ToInt32(actrow), 0].Note);
                        applno = Convert.ToString(Fpspread7.Sheets[0].Cells[Convert.ToInt32(actrow), 0].Tag);
                    }
                    string updstapp = "update staff_appl_master set appl_no='" + Convert.ToString(hsave["applno"]) + "' where appl_id='" + applid + "' and college_code='" + collegecode1 + "'";
                    int updapp = d2.update_method_wo_parameter(updstapp, "Text");
                    if (staffcode.Trim() != "")
                    {
                        string updstm = "update staffmaster set staff_code='" + staffcode + "',staff_name='" + Convert.ToString(hsave["firstname"]) + "',appl_no='" + Convert.ToString(hsave["applno"]) + "',mid_name='" + Convert.ToString(hsave["middlename"]) + "',sur_name='" + Convert.ToString(hsave["surname"]) + "' where appl_no='" + applno + "' and college_code='" + collegecode1 + "'";
                        int updstmcount = d2.update_method_wo_parameter(updstm, "Text");
                    }
                    string quer = string.Empty;
                    if (grdothers.Rows.Count > 0)
                    {
                        string delqur = "delete StaffDetails where Appl_ID ='" + applid + "' and DetailType='3'";
                        int delval = d2.update_method_wo_parameter(delqur, "Text");
                        for (int i = 0; i < grdothers.Rows.Count; i++)
                        {
                            string sno = ((grdothers.Rows[i].FindControl("lbl_Sig_No") as Label).Text);
                            string cername = ((grdothers.Rows[i].FindControl("lbl_certname") as Label).Text);
                            string certnum = ((grdothers.Rows[i].FindControl("lbl_certnum") as Label).Text);
                           
                            quer = " if exists(select * from StaffDetails where Appl_ID ='" + applid + "' and DetailType='3' and othercertnum='" + cername + "' and othercertname='" + cername + "')update StaffDetails set Appl_ID='" + applid + "',DetailType='3',othercertname='" + cername + "',othercertnum='" + certnum + "' where Appl_ID ='" + applid + "' and DetailType='3' and othercertnum='" + cername + "' and othercertname='" + cername + "' else insert into StaffDetails(Appl_ID,DetailType,othercertname,othercertnum) values ('" + applid + "','3','" + cername + "','" + certnum + "')";
                            b = d2.update_method_wo_parameter(quer, "Text");

                        }
                    }
                    if (qualification_grid.Rows.Count > 0)
                    {
                        for (int i = 0; i < qualification_grid.Rows.Count; i++)
                        {
                            //21.06.16
                            string sno = ((qualification_grid.Rows[i].FindControl("lbl_S_No") as Label).Text);
                            graduation = ((qualification_grid.Rows[i].FindControl("lbl_gradcode") as Label).Text);
                            degree = ((qualification_grid.Rows[i].FindControl("lbl_degcode") as Label).Text);
                            specialization = ((qualification_grid.Rows[i].FindControl("lbl_specialcode") as Label).Text);
                            yearofpassing = ((qualification_grid.Rows[i].FindControl("lbl_yearofpass") as Label).Text);
                            string[] yr = yearofpassing.Split('/');
                            if (yr.Length > 1)
                                pyr = yr[2];
                            else
                                pyr = yearofpassing;

                            university = ((qualification_grid.Rows[i].FindControl("lbl_univercity_code") as Label).Text);
                            institution = ((qualification_grid.Rows[i].FindControl("lbl_Institutioncode") as Label).Text);
                            percentage = ((qualification_grid.Rows[i].FindControl("lbl_percentage") as Label).Text);
                            grade = ((qualification_grid.Rows[i].FindControl("lbl_grade") as Label).Text);
                            clas = ((qualification_grid.Rows[i].FindControl("lbl_class") as Label).Text);
                            clas = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(clas);

                            if (percentage.Trim() == "&nbsp")
                                percentage = "";
                            else
                                percentage = percentage;
                            if (grade.Trim() == "&nbsp;")
                                grade = "";
                            else
                                grade = grade;
                            if (clas.Trim() == "&nbsp;")
                                clas = "";
                            else
                                clas = clas;

                            qualquery = " if exists(select * from StaffDetails where Appl_ID ='" + applid + "' and DetailType='1' and Graduation='" + graduation + "')update StaffDetails set Appl_ID='" + applid + "',DetailType='1',Graduation='" + graduation + "',Degree='" + degree + "',Specialization='" + specialization + "',PassYear='" + pyr + "',University='" + university + "',Institution='" + institution + "',Percentage='" + percentage + "',Grade='" + grade + "',Class='" + clas + "' where Appl_ID ='" + applid + "' and DetailType='1' and Graduation='" + graduation + "' else insert into StaffDetails(Appl_ID,DetailType,Graduation,Degree,Specialization,PassYear,University,Institution,Percentage,Grade,Class) values ('" + applid + "','1','" + graduation + "','" + degree + "','" + specialization + "','" + pyr + "','" + university + "','" + institution + "','" + percentage + "','" + grade + "','" + clas + "')";
                            b = d2.update_method_wo_parameter(qualquery, "Text");
                        }
                    }

                    if (Experience_grid.Rows.Count > 0)
                    {
                        for (int i = 0; i < Experience_grid.Rows.Count; i++)
                        {
                            string sno = ((Experience_grid.Rows[i].FindControl("lbl_S_No") as Label).Text);
                            string own = ((Experience_grid.Rows[i].FindControl("lbl_College") as Label).Text);
                            string fryr = ((Experience_grid.Rows[i].FindControl("lbl_From") as Label).Text);
                            string[] dt = fryr.Split('/');
                            fromyr = ",ExpFromDate='" + dt[1] + "/" + dt[0] + "/" + dt[2] + "'";
                            string tyr = ((Experience_grid.Rows[i].FindControl("lbl_To") as Label).Text);
                            string[] dt1 = tyr.Split('/');
                            toyr = ",ExpToDate='" + dt1[1] + "/" + dt1[0] + "/" + dt1[2] + "'";

                            frmyr = dt[1] + "/" + dt[0] + "/" + dt[2];
                            toyear = dt1[1] + "/" + dt1[0] + "/" + dt1[2];

                            organization = ((Experience_grid.Rows[i].FindControl("lbl_Oraganization_code") as Label).Text);
                            designation = ((Experience_grid.Rows[i].FindControl("lbl_Designation_code") as Label).Text);
                            experiencein = ((Experience_grid.Rows[i].FindControl("lbl_Experiencein_code") as Label).Text);
                            year = ((Experience_grid.Rows[i].FindControl("lbl_Year") as Label).Text);
                            month = ((Experience_grid.Rows[i].FindControl("lbl_Month") as Label).Text);
                            salary = ((Experience_grid.Rows[i].FindControl("lbl_Salary") as Label).Text);
                            reason = ((Experience_grid.Rows[i].FindControl("lbl_Reasonsrelievingcode") as Label).Text);
                            additionalduties = ((Experience_grid.Rows[i].FindControl("lbl_Duties") as Label).Text);

                            if (own.Trim() == "Own")
                                isown = "0";
                            else if (own.Trim() == "Other")
                                isown = "1";

                            if (year.Trim() == "&nbsp;")
                                year = "";
                            else
                                year = year;
                            if (month.Trim() == "&nbsp;")
                                month = "";
                            else
                                month = month;
                            if (salary.Trim() == "&nbsp;")
                                salary = "0";
                            else
                                salary = salary;
                            if (additionalduties.Trim() == "&nbsp;")
                                additionalduties = "";
                            else
                                additionalduties = additionalduties;

                            expquery = " if exists(select * from StaffDetails where Appl_ID ='" + applid + "' and DetailType='2' and ExpYear='" + year + "'and ExpMOnth='" + month + "')update StaffDetails set Appl_ID='" + applid + "',DetailType='2',IsOwncollege='" + isown + "'" + fromyr + "" + toyr + ",ExpYear='" + year + "',ExpMOnth='" + month + "',ExpOrganization='" + organization + "',ExpDesig='" + designation + "',ExpIn='" + experiencein + "',ReasonforReleive='" + reason + "',CurrentSalary='" + salary + "',AdditionalDuties='" + additionalduties + "'  where Appl_ID ='" + applid + "' and DetailType='2' and ExpYear='" + year + "'and ExpMOnth='" + month + "' else insert into StaffDetails(Appl_ID,DetailType,IsOwncollege,ExpFromDate,ExpToDate,ExpYear,ExpMOnth,ExpOrganization,ExpDesig,ExpIn,ReasonforReleive,CurrentSalary,AdditionalDuties) values ('" + applid + "','2','" + isown + "','" + frmyr + "','" + toyear + "','" + year + "','" + month + "','" + organization + "','" + designation + "','" + experiencein + "','" + reason + "','" + salary + "','" + additionalduties + "')";
                            b = d2.update_method_wo_parameter(expquery, "Text");
                        }
                    }
                    if (b > 0 || a > 0)
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Text = "Updated Successfully";
                        ViewState["rescode"] = "";
                        App_div.Visible = false;
                        btn_appgo_Click(sender, e);
                    }
                }
                sessionnull();
            }
        }
        catch { }
    }

    protected void sessionnull()
    {
        Session["dt"] = null;
        Session["dtq"] = null;
        Session["dte"] = null;
        Session["dtsa"] = null;
        Session["dtso"] = null;
        Session["dtj"] = null;
        Session["dtbk"] = null;
        Session["dtebk"] = null;
        Session["dtaw"] = null;
        Session["dtpd"] = null;
        Session["dtrd"] = null;
        Session["dtpg"] = null;
        Session["dtpr"] = null;
        Session["dtgs"] = null;
        Session["dtmm"] = null;
        Session["dtcmt"] = null;
        Session["dtother"] = null;
        Familyinfo_grid.Visible = false;
        qualification_grid.Visible = false;
        Experience_grid.Visible = false;
        Seminar_grid.Visible = false;
        SeminarOrgs_grid.Visible = false;
        JournalPub1.Visible = false;
        Book_grid.Visible = false;
        EditorBook_grid.Visible = false;
        Award_grid.Visible = false;
        project_detail_grid.Visible = false;
        Research_grid.Visible = false;
        PGrants_grid.Visible = false;
        Patent_grid.Visible = false;
        Guide_grid.Visible = false;
        Professionalm_grid.Visible = false;
        Administrative_grid.Visible = false;
        otherdiv.Visible = false;
    }

    protected void lnl_referee_OnClick(object sender, EventArgs e)
    {
        Popdiv.Visible = true;
        referee.Visible = true;
        guard.Visible = false;
        lbl_contactheader.Text = "Referee Address";
        //bindrefcity();
        //bindrefdist();
        //bindrefstate();
    }

    protected void lnk_guard_OnClick(object sender, EventArgs e)
    {
        Popdiv.Visible = true;
        referee.Visible = false;
        guard.Visible = true;
        lbl_contactheader.Text = "Guardian Address";
        //bindgcity1();
        //bindgdist();
        //bindgstate1();
    }

    protected void btn_close_OnClick(object sender, EventArgs e)
    {
        Popdiv.Visible = false;
    }

    /// <summary>
    /// //////////////////POP Info/////////////////////
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void btnaddfamily_Click(object sender, EventArgs e)
    {
        FamilyInfo.Visible = true;
        btnfamilyadd.Visible = true;
        btnfailyupdate.Visible = false;
        btn_fdelete.Visible = false;
        ddlrelationship.SelectedIndex = 0;
        ddlrqualification.SelectedIndex = 0;
        txt_rname.Text = "";
        txt_rage.Text = "";
        ddlrstatus.SelectedIndex = 0;
        txt_rincome.Text = "";
        rbrmale.Checked = true;
        rbrfemale.Checked = false;
    }

    protected void btnquliadd_Click(object sender, EventArgs e)
    {
        string apllicationNum = Convert.ToString(tbappno.Text);
        ViewState["ApplNumb"] = apllicationNum;
        Qualification.Visible = true;
        btnaddquli.Visible = true;
        btnupdatequli.Visible = false;
        btn_qdelete.Visible = false;
        ddlgraduation.SelectedIndex = 0;
        ddldegreeinfromation.SelectedIndex = 0;
        ddlspecalization.SelectedIndex = 0;
        txt_yofp.Text = DateTime.Now.Date.AddDays(-1).ToString("dd/MM/yyyy");
        ddluniversity.SelectedIndex = 0;
        ddlinstitution.SelectedIndex = 0;
        txt_percentage1.Text = "";
        txt_grade.Text = "";
        txt_class.Text = "";
    }

    /// <summary>
    /// Date Format
    /// </summary>
    protected void date()
    {
        bool dateOk = false;
        try
        {
            string fy = txt_fromdate.Text;
            string ty = txt_todate.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_fromdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_todate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }

        if (dateOk)
        {
            string fy = txt_fromdate.Text;
            string ty = txt_todate.Text;
            string[] aa = fy.Split('/');
            string[] bb = ty.Split('/');
            int val1 = Convert.ToInt32(aa[2]);
            int val2 = Convert.ToInt32(bb[2]);
            int val = 0;
            int m1 = Convert.ToInt32(aa[1]);
            int m2 = Convert.ToInt32(bb[1]);
            val = val2 - val1;

            int mn = 0;
            if (m1 <= m2)
            {
                mn = m2 - m1;
            }
            else
            {
                mn = 12 - m1;
                val = val - 1;
            }
            txt_year.Text = Convert.ToString(val);
            txt_month.Text = Convert.ToString(mn);
        }
    }

    protected void txt_semtodate_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_semfromdate.Text;
            string ty = txt_semtodate.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_semfromdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_semtodate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_semfromdate_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_semfromdate.Text;
            string ty = txt_semtodate.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_semfromdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_semtodate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_projectfrom_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_projectfrom.Text;
            string ty = txt_projecto.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_projectfrom.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_projecto.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_projecto_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_projectfrom.Text;
            string ty = txt_projecto.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_projectfrom.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_projecto.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_amfromdate_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_amfromdate.Text;
            string ty = txt_amtodate.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_amfromdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_amtodate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_amtodate_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_amfromdate.Text;
            string ty = txt_amtodate.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_amfromdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_amtodate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_fdate_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_fdate.Text;
            string ty = txt_tdate.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_fdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_tdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_tdate_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_fdate.Text;
            string ty = txt_tdate.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_fdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_tdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_orgfromdate_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {

            string fy = txt_orgfromdate.Text;
            string ty = txt_orgtodate.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_orgfromdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_orgtodate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_orgtodate_OnTextChanged(object sender, EventArgs e)
    {
        bool dateOk = false;
        try
        {
            string fy = txt_orgfromdate.Text;
            string ty = txt_orgtodate.Text;
            DateTime fromdate = Convert.ToDateTime(fy.Split('/')[1] + "/" + fy.Split('/')[0] + "/" + fy.Split('/')[2]);
            DateTime todate = Convert.ToDateTime(ty.Split('/')[1] + "/" + ty.Split('/')[0] + "/" + ty.Split('/')[2]);
            if (fromdate <= todate)
            {
                dateOk = true;
            }
            else
            {
                txt_orgfromdate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
                txt_orgtodate.Text = DateTime.Now.Date.ToString("dd/MM/yyyy");
            }
        }
        catch { dateOk = false; }
    }

    protected void txt_fromdate_OnTextChanged(object sender, EventArgs e)
    {
        date();
    }

    protected void txt_todate_OnTextChanged(object sender, EventArgs e)
    {
        date();
    }

    /// <summary>
    /// Add Buttons
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void btnexpadd_Click(object sender, EventArgs e)
    {
        string getappl_no = Convert.ToString(tbappno.Text);
        ViewState["ApplNum"] = getappl_no;

        Experience.Visible = true;
        date();
        bindorganizationCollege();
        ddlorganization.Enabled = false;
        btnorgnizationadd.Visible = false;
        btnorganizationremove.Visible = false;
        btnexperienceadd.Visible = true;
        btnexperienceupdate.Visible = false;
        btn_edelete.Visible = false;
        rbowncollege.Checked = true;
        rbothercollege.Checked = false;
        txt_fromdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_todate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_year.Text = "";
        txt_month.Text = "";
        ddldesignationexp.SelectedIndex = 0;
        ddlexpin.SelectedIndex = 0;
        ddlrforr.SelectedIndex = 0;
        txt_salary.Text = "";
        txt_addduties.Text = "";
    }

    protected void btnsemattendadd_Clcik(object sender, EventArgs e)
    {
        SeminarAttend.Visible = true;
        btnsemattenadd1.Visible = true;
        btnsemattenupdate.Visible = false;
        btn_sadelete.Visible = false;
        ddlsemtype.SelectedIndex = 0;
        ddlprogramname.SelectedIndex = 0;
        txt_semfromdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_semtodate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        ddlplace.SelectedIndex = 0;
        ddlsponsored.SelectedIndex = 0;
        ddlstile.SelectedIndex = 0;
    }

    protected void btnsemorgadd_Click(object sender, EventArgs e)
    {
        SeminarOrgs.Visible = true;
        btnsemorgnizeadd.Visible = true;
        btnsemorgnizeupdate.Visible = false;
        btn_sodelete.Visible = false;
        ddlorgname.SelectedIndex = 0;
        txt_orgfromdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_orgtodate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        ddlorgplace.SelectedIndex = 0;
        ddlorgtitle.SelectedIndex = 0;
        txt_letteregno.Text = "";
    }

    protected void btnjournaladd_Click(object sender, EventArgs e)
    {
        Journal.Visible = true;
        btnjournapublicationladd.Visible = true;
        btnjournapublicationlupdate.Visible = false;
        btn_jdelete.Visible = false;
        ddljtype.SelectedIndex = 0;
        ddljname.SelectedIndex = 0;
        ddlpublisher.SelectedIndex = 0;
        ddlperiodicity.SelectedIndex = 0;
        ddljtitle.SelectedIndex = 0;
        txt_volumeno.Text = "";
        txt_issueno.Text = "";
        txt_preiod.Text = "";
        txt_pageno.Text = "";
    }

    protected void btnbooksadd_Click(object sender, EventArgs e)
    {
        Book.Visible = true;
        btnbookspublishedadd.Visible = true;
        btnbookspublishedupdate.Visible = false;
        btn_bkdelete.Visible = false;
        txt_byear.Text = DateTime.Now.ToString("dd/MM/yyyy");
        ddlbpname.SelectedIndex = 0;
        ddlbptitle.SelectedIndex = 0;
        txt_bpaddress.Text = "";
        txt_costofbook.Text = "";
    }

    protected void btneditoradd_Click(object sender, EventArgs e)
    {
        Editor.Visible = true;
        btneditorbooksadd.Visible = true;
        btneditorbooksupdate.Visible = false;
        btn_ebkdelete.Visible = false;
        ddletype.SelectedIndex = 0;
        txt_eyear.Text = DateTime.Now.ToString("dd/MM/yyyy");
        ddlepname.SelectedIndex = 0;
        ddletitle.SelectedIndex = 0;
        txt_eaddress.Text = "";
        txt_ecostofbook.Text = "";
    }

    protected void btnawardadd_Click(object sender, EventArgs e)
    {
        Award.Visible = true;
        btnawarddetailsadd.Visible = true;
        btnawarddetailsupdate.Visible = false;
        btn_awdelete.Visible = false;
        txt_ayear.Text = DateTime.Now.ToString("dd/MM/yyyy");
        ddlaname.SelectedIndex = 0;
        ddlaoaname.SelectedIndex = 0;
        ddlanaward.SelectedIndex = 0;
        txt_aaddress.Text = "";
    }

    protected void btnrpojectadd_Clcik(object sender, EventArgs e)
    {
        Project.Visible = true;
        btnprojectdetailsadd.Visible = true;
        btnprojectdetailsupdate.Visible = false;
        btnprojectdetaisexit.Visible = true;
        ddlprojecttitle.SelectedIndex = 0;
        txt_projectfrom.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_projecto.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_prmks.Text = "";

    }

    protected void btnresearchdetails_Clcik(object sender, EventArgs e)
    {
        Research.Visible = true;
        btnresearachdetailsadd.Visible = true;
        btnresearchdetailsupdate.Visible = false;
        btn_rddelete.Visible = false;
        ddlresearchname.SelectedIndex = 0;
        ddlresearchtype.SelectedIndex = 0;
        ddlrrtype.SelectedIndex = 0;
        txt_rremarks.Text = "";
    }

    protected void btngrantsadd_Click(object sender, EventArgs e)
    {
        Grants.Visible = true;
        btnprojectgrantsadd.Visible = true;
        btnprojectgrantsupdate.Visible = false;
        btn_pgdelete.Visible = false;
        txt_pgyear.Text = DateTime.Now.ToString("dd/MM/yyyy");
        ddlpgname.SelectedIndex = 0;
        ddlpgtitle.SelectedIndex = 0;
        txt_pgaddress.Text = "";
        txt_pgamount.Text = "";
        txt_pgletterno.Text = "";
        txt_pgdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
    }

    protected void btnpatentadd_Click(object sender, EventArgs e)
    {
        Patent.Visible = true;
        btnpatentreceivedadd.Visible = true;
        btnpatentreceivedupdate.Visible = false;
        btn_ptdelete.Visible = false;
        txt_pryear.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_prdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        ddlprname.SelectedIndex = 0;
        ddlprtitle.SelectedIndex = 0;
        txt_praddress.Text = "";
        txt_prcerno.Text = "";
        txt_prcerdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_prletterno.Text = "";
    }

    protected void btnguideadd_Click(object sender, EventArgs e)
    {
        Guide.Visible = true;
        btnguideshipadd.Visible = true;
        btnguideshipupdate.Visible = false;
        btn_gddelete.Visible = false;
        txt_gyear.Text = DateTime.Now.ToString("dd/MM/yyyy");
        ddlnatureguide.SelectedIndex = 0;
        ddlgtitle.SelectedIndex = 0;
    }

    protected void btnprofadd_Clcik(object sender, EventArgs e)
    {
        Membername();
        Professional.Visible = true;
        btnpmemberadd.Visible = true;
        btnpmemberupdate.Visible = false;
        btn_mmdelete.Visible = false;
        ddlpmname.SelectedIndex = 0;
        txt_pmaddress.Text = "";
        txt_jyear.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_pmno.Text = "";
    }

    protected void btnadminadd_Click(object sender, EventArgs e)
    {
        Administrative.Visible = true;
        btnamcommitteeadd.Visible = true;
        btnamcommitteeupdate.Visible = false;
        btn_admindelete.Visible = false;
        ddlamname.SelectedIndex = 0;
        txt_amfromdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_amtodate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_natureofduty.Text = "";
        txt_achievements.Text = "";
    }

    protected void btnfamilyadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlrelationship.SelectedItem.Text) == "Select" || Convert.ToString(ddlrelationship.SelectedItem.Text) == "Others") || (Convert.ToString(ddlrqualification.SelectedItem.Text) == "Select" || Convert.ToString(ddlrqualification.SelectedItem.Text) == "Others") || (Convert.ToString(ddlrstatus.SelectedItem.Text) == "Select" || Convert.ToString(ddlrstatus.SelectedItem.Text) == "Others") || (Convert.ToString(txt_rname.Text) == ""))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            FamilyInfo.Visible = false;
            pa.Visible = true;
            Familyinfo_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getfamilyheader(dt);
            DataRow dr;
            int ct = 0;

            string age = "";
            string income = "";

            if (Session["dt"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dt"];
                for (int ro = 0; ro < dnew.Rows.Count; ro++)
                {
                    dr = dt.NewRow();
                    ct++;
                    for (int col = 0; col < dnew.Columns.Count; col++)
                    {
                        dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                    }
                    dt.Rows.Add(dr);
                }
                string relation = ddlrelationship.SelectedItem.Text;

                if (dt.Rows.Count > 0)
                {
                    for (int r = 0; r < dt.Rows.Count; r++)
                    {
                        if (Convert.ToString(dt.Rows[r][4]) == relation)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Relationship Already Exist Please Choose Another Relation')", true);
                            ddlrelationship.SelectedIndex = 0;
                            return;
                        }
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_rname.Text);
                age = txt_rage.Text;
                if (age == "")
                    dr[2] = "";
                else
                    dr[2] = age;
                string gender = "";
                if (rbrmale.Checked == true)
                    gender = "Male";
                if (rbrfemale.Checked == true)
                    gender = "Female";
                dr[3] = gender;

                dr[4] = ddlrelationship.SelectedItem.Text;
                dr[5] = ddlrelationship.SelectedItem.Value;
                dr[6] = ddlrqualification.SelectedItem.Text;
                dr[7] = ddlrqualification.SelectedItem.Value;
                dr[8] = ddlrstatus.SelectedItem.Text;
                dr[9] = ddlrstatus.SelectedItem.Value;
                income = txt_rincome.Text;
                if (income == "")
                    dr[10] = "";
                else
                    dr[10] = income;
                dt.Rows.Add(dr);
                Session["dt"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_rname.Text);
                age = txt_rage.Text;
                if (age == "")
                    dr[2] = "";
                else
                    dr[2] = age;
                string gender = "";
                if (rbrmale.Checked == true)
                    gender = "Male";
                if (rbrfemale.Checked == true)
                    gender = "Female";
                dr[3] = gender;
                dr[4] = ddlrelationship.SelectedItem.Text;
                dr[5] = ddlrelationship.SelectedItem.Value;
                dr[6] = ddlrqualification.SelectedItem.Text;
                dr[7] = ddlrqualification.SelectedItem.Value;
                dr[8] = ddlrstatus.SelectedItem.Text;
                dr[9] = ddlrstatus.SelectedItem.Value;
                income = txt_rincome.Text;
                if (income == "")
                    dr[10] = "";
                else
                    dr[10] = income;
                dt.Rows.Add(dr);
                Session["dt"] = dt;
            }
            if (dt.Rows.Count > 0)
            {
                Familyinfo_grid.DataSource = dt;
                Familyinfo_grid.DataBind();
            }
        }
    }

    protected void btnfailyupdate_Click(object sender, EventArgs e)
    {
        Familyinfo_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getfamilyheader(dt);

        DataRow dr;

        int fgi = Convert.ToInt32(Convert.ToString(ViewState["fg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dt"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[fgi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlrelationship.SelectedItem.Text) == "Select" || Convert.ToString(ddlrelationship.SelectedItem.Text) == "Others") || (Convert.ToString(ddlrqualification.SelectedItem.Text) == "Select" || Convert.ToString(ddlrqualification.SelectedItem.Text) == "Others") || (Convert.ToString(ddlrstatus.SelectedItem.Text) == "Select" || Convert.ToString(ddlrstatus.SelectedItem.Text) == "Others") || (Convert.ToString(txt_rname.Text) == ""))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = fgi + 1;
            dr[1] = txt_rname.Text.Trim();
            dr[2] = txt_rage.Text.Trim();
            string gender = "";
            if (rbrmale.Checked == true)
                gender = "Male";
            if (rbrfemale.Checked == true)
                gender = "Female";

            dr[3] = gender;
            dr[4] = ddlrelationship.SelectedItem.Text;
            dr[5] = ddlrelationship.SelectedItem.Value;
            dr[6] = ddlrqualification.SelectedItem.Text;
            dr[7] = ddlrqualification.SelectedItem.Value;
            dr[8] = ddlrstatus.SelectedItem.Text;
            dr[9] = ddlrstatus.SelectedItem.Value;
            dr[10] = txt_rincome.Text.Trim();


            dt.Rows.Add(dr);
            Session["dt"] = dt;

            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getfamilyheader(dnext);
                DataRow drov;
                for (int ro = 0; ro < dt.Rows.Count; ro++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ro + 1);
                    for (int col = 0; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ro][col]);
                    }
                    dnext.Rows.Add(drov);
                }
                Familyinfo_grid.DataSource = dnext;
                Familyinfo_grid.DataBind();
            }
            FamilyInfo.Visible = false;
        }
    }

    protected void btn_fdelete_Click(object sender, EventArgs e)
    {
        Familyinfo_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getfamilyheader(dt);

        DataRow dr;

        int fgi = Convert.ToInt32(Convert.ToString(ViewState["fg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dt"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[fgi]);
        }

        Session["dt"] = dt;
        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getfamilyheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            Familyinfo_grid.DataSource = dnext;
            Familyinfo_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            Familyinfo_grid.DataSource = dt;
            Familyinfo_grid.DataBind();
        }
        FamilyInfo.Visible = false;
    }

    protected void btnaddquli_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlgraduation.SelectedItem.Text) == "Select" || Convert.ToString(ddlgraduation.SelectedItem.Text) == "Others") || (Convert.ToString(ddldegreeinfromation.SelectedItem.Text) == "Select" || Convert.ToString(ddldegreeinfromation.SelectedItem.Text) == "Others") || (Convert.ToString(ddlspecalization.SelectedItem.Text) == "Select" || Convert.ToString(ddlspecalization.SelectedItem.Text) == "Others") || (Convert.ToString(ddluniversity.SelectedItem.Text) == "Select" || Convert.ToString(ddluniversity.SelectedItem.Text) == "Others") || (Convert.ToString(ddlinstitution.SelectedItem.Text) == "Select" || Convert.ToString(ddlinstitution.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Qualification.Visible = false;
            qualification_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getqualheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtq"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtq"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }
                string graduation = ddlgraduation.SelectedItem.Text;

                if (dt.Rows.Count > 0)
                {
                    for (int r = 0; r < dt.Rows.Count; r++)
                    {
                        if (Convert.ToString(dt.Rows[r][1]) == graduation)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Graduation Already Exist Please Choose Another Graduation')", true);
                            ddlgraduation.SelectedIndex = 0;
                            return;
                        }
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlgraduation.SelectedItem.Text;
                dr[2] = ddldegreeinfromation.SelectedItem.Text;
                dr[3] = ddlspecalization.SelectedItem.Text;
                dr[4] = txt_yofp.Text;
                dr[5] = ddluniversity.SelectedItem.Text;
                dr[6] = ddlinstitution.SelectedItem.Text;
                dr[7] = txt_percentage1.Text;
                dr[8] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_grade.Text);
                dr[9] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_class.Text);
                dr[10] = ddlgraduation.SelectedItem.Value;
                dr[11] = ddldegreeinfromation.SelectedItem.Value;
                dr[12] = ddlspecalization.SelectedItem.Value;
                dr[13] = ddluniversity.SelectedItem.Value;
                dr[14] = ddlinstitution.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtq"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlgraduation.SelectedItem.Text;
                dr[2] = ddldegreeinfromation.SelectedItem.Text;
                dr[3] = ddlspecalization.SelectedItem.Text;
                dr[4] = txt_yofp.Text;
                dr[5] = ddluniversity.SelectedItem.Text;
                dr[6] = ddlinstitution.SelectedItem.Text;
                dr[7] = txt_percentage1.Text;
                dr[8] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_grade.Text);
                dr[9] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_class.Text);
                dr[10] = ddlgraduation.SelectedItem.Value;
                dr[11] = ddldegreeinfromation.SelectedItem.Value;
                dr[12] = ddlspecalization.SelectedItem.Value;
                dr[13] = ddluniversity.SelectedItem.Value;
                dr[14] = ddlinstitution.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtq"] = dt;
            }
            if (dt.Rows.Count > 0)
            {
                qualification_grid.DataSource = dt;
                qualification_grid.DataBind();
            }
        }
    }

    protected void btnupdatequli_Click(object sender, EventArgs e)
    {
        qualification_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getqualheader(dt);

        DataRow dr;

        int qgi = Convert.ToInt32(Convert.ToString(ViewState["qg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtq"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[qgi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlgraduation.SelectedItem.Text) == "Select" || Convert.ToString(ddlgraduation.SelectedItem.Text) == "Others") || (Convert.ToString(ddldegreeinfromation.SelectedItem.Text) == "Select" || Convert.ToString(ddldegreeinfromation.SelectedItem.Text) == "Others") || (Convert.ToString(ddlspecalization.SelectedItem.Text) == "Select" || Convert.ToString(ddlspecalization.SelectedItem.Text) == "Others") || (Convert.ToString(ddluniversity.SelectedItem.Text) == "Select" || Convert.ToString(ddluniversity.SelectedItem.Text) == "Others") || (Convert.ToString(ddlinstitution.SelectedItem.Text) == "Select" || Convert.ToString(ddlinstitution.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = qgi + 1;
            dr[1] = ddlgraduation.SelectedItem.Text;
            dr[2] = ddldegreeinfromation.SelectedItem.Text;
            dr[3] = ddlspecalization.SelectedItem.Text;
            dr[4] = txt_yofp.Text;
            dr[5] = ddluniversity.SelectedItem.Text;
            dr[6] = ddlinstitution.SelectedItem.Text;
            dr[7] = txt_percentage1.Text;
            dr[8] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_grade.Text);
            dr[9] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_class.Text);
            dr[10] = ddlgraduation.SelectedItem.Value;
            dr[11] = ddldegreeinfromation.SelectedItem.Value;
            dr[12] = ddlspecalization.SelectedItem.Value;
            dr[13] = ddluniversity.SelectedItem.Value;
            dr[14] = ddlinstitution.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtq"] = dt;

            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getqualheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }
                qualification_grid.DataSource = dnext;
                qualification_grid.DataBind();
            }
            Qualification.Visible = false;
        }
    }

    protected void btn_qdelete_Click(object sender, EventArgs e)
    {
        qualification_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getqualheader(dt);

        DataRow dr;

        int qgi = Convert.ToInt32(Convert.ToString(ViewState["qg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtq"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[qgi]);
        }

        Session["dtq"] = dt;

        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getqualheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            qualification_grid.DataSource = dnext;
            qualification_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            qualification_grid.DataSource = dt;
            qualification_grid.DataBind();
        }
        Qualification.Visible = false;
    }

    protected void btnexperienceadd_Click(object sender, EventArgs e)//delsireff
    {
        if ((Convert.ToString(ddlorganization.SelectedItem.Text) == "Select" || Convert.ToString(ddlorganization.SelectedItem.Text) == "Others") || (Convert.ToString(ddldesignationexp.SelectedItem.Text) == "Select" || Convert.ToString(ddldesignationexp.SelectedItem.Text) == "Others") || (Convert.ToString(ddlexpin.SelectedItem.Text) == "Select" || Convert.ToString(ddlexpin.SelectedItem.Text) == "Others") || (Convert.ToString(ddlrforr.SelectedItem.Text) == "Select" || Convert.ToString(ddlrforr.SelectedItem.Text) == "Others") || (Convert.ToString(txt_month.Text) == ""))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Experience.Visible = false;
            Experience_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getexpheader(dt);

            DataRow dr;
            int ct = 0;
            string college = "";
            if (rbowncollege.Checked == true)
                college = "Own";
            if (rbothercollege.Checked == true)
                college = "Other";
            if (Session["dte"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dte"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }
                string fromd = txt_fromdate.Text;
                string tod = txt_todate.Text;

                if (dt.Rows.Count > 0)
                {
                    for (int r = 0; r < dt.Rows.Count; r++)
                    {
                        if (Convert.ToString(dt.Rows[r][1]) == fromd || Convert.ToString(dt.Rows[r][2]) == tod)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Date Already Exist Please Choose Another Date')", true);
                            txt_fromdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            txt_todate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            return;
                        }
                    }
                }

                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = college;
                dr[2] = Convert.ToString(txt_fromdate.Text);
                dr[3] = Convert.ToString(txt_todate.Text);
                dr[4] = ddlorganization.SelectedItem.Text;
                dr[5] = ddldesignationexp.SelectedItem.Text;
                dr[6] = ddlexpin.SelectedItem.Text;
                dr[7] = txt_year.Text;
                dr[8] = txt_month.Text;
                dr[9] = txt_salary.Text;
                dr[10] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(ddlrforr.SelectedItem.Text);
                dr[11] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_addduties.Text);
                dr[12] = ddlorganization.SelectedItem.Value;
                dr[13] = ddldesignationexp.SelectedItem.Value;
                dr[14] = ddlexpin.SelectedItem.Value;
                dr[15] = ddlrforr.SelectedItem.Value;
                ViewState["rescode"] = ddlrforr.SelectedItem.Value;
                dt.Rows.Add(dr);
                Session["dte"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = college;
                dr[2] = Convert.ToString(txt_fromdate.Text);
                dr[3] = Convert.ToString(txt_todate.Text);
                dr[4] = ddlorganization.SelectedItem.Text;
                dr[5] = ddldesignationexp.SelectedItem.Text;
                dr[6] = ddlexpin.SelectedItem.Text;
                dr[7] = txt_year.Text;
                dr[8] = txt_month.Text;
                dr[9] = txt_salary.Text;
                dr[10] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(ddlrforr.SelectedItem.Text);
                dr[11] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_addduties.Text);
                dr[12] = ddlorganization.SelectedItem.Value;
                dr[13] = ddldesignationexp.SelectedItem.Value;
                dr[14] = ddlexpin.SelectedItem.Value;
                dr[15] = ddlrforr.SelectedItem.Value;
                ViewState["rescode"] = ddlrforr.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dte"] = dt;
            }
            if (dt.Rows.Count > 0)
            {
                Experience_grid.DataSource = dt;
                Experience_grid.DataBind();
            }
        }
    }

    protected void btnexperienceupdate_Click(object sender, EventArgs e)
    {
        Experience_grid.Visible = true;

        int row = 0;
        DataTable dt = new DataTable();
        getexpheader(dt);

        DataRow dr;

        int egi = Convert.ToInt32(Convert.ToString(ViewState["eg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dte"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlorganization.SelectedItem.Text) == "Select" || Convert.ToString(ddlorganization.SelectedItem.Text) == "Others") || (Convert.ToString(ddldesignationexp.SelectedItem.Text) == "Select" || Convert.ToString(ddldesignationexp.SelectedItem.Text) == "Others") || (Convert.ToString(ddlexpin.SelectedItem.Text) == "Select" || Convert.ToString(ddlexpin.SelectedItem.Text) == "Others") || (Convert.ToString(ddlrforr.SelectedItem.Text) == "Select" || Convert.ToString(ddlrforr.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            string college = "";
            if (rbowncollege.Checked == true)
            {
                college = "Own";
            }
            if (rbothercollege.Checked == true)
            {
                college = "Other";
            }
            dr[0] = ct + 1;
            dr[1] = college;
            dr[2] = Convert.ToString(txt_fromdate.Text);
            dr[3] = Convert.ToString(txt_todate.Text);
            dr[4] = ddlorganization.SelectedItem.Text;
            dr[5] = ddldesignationexp.SelectedItem.Text;
            dr[6] = ddlexpin.SelectedItem.Text;
            dr[7] = txt_year.Text;
            dr[8] = txt_month.Text;
            dr[9] = txt_salary.Text;
            dr[10] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(ddlrforr.SelectedItem.Text);
            dr[11] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_addduties.Text);
            dr[12] = ddlorganization.SelectedItem.Value;
            dr[13] = ddldesignationexp.SelectedItem.Value;
            dr[14] = ddlexpin.SelectedItem.Value;
            dr[15] = ddlrforr.SelectedItem.Value;
            ViewState["rescode"] = ddlrforr.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dte"] = dt;

            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getexpheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                Experience_grid.DataSource = dnext;
                Experience_grid.DataBind();
            }
            Experience.Visible = false;
        }
    }

    protected void btn_edelete_Click(object sender, EventArgs e)
    {
        Experience_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getexpheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["eg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dte"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        Session["dte"] = dt;

        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getexpheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            Experience_grid.DataSource = dnext;
            Experience_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            Experience_grid.DataSource = dt;
            Experience_grid.DataBind();
        }
        Experience.Visible = false;
    }

    protected void btnsemattenadd1_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlsemtype.SelectedItem.Text) == "Select" || Convert.ToString(ddlsemtype.SelectedItem.Text) == "Others") || (Convert.ToString(ddlprogramname.SelectedItem.Text) == "Select" || Convert.ToString(ddlprogramname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlplace.SelectedItem.Text) == "Select" || Convert.ToString(ddlplace.SelectedItem.Text) == "Others") || (Convert.ToString(ddlsponsored.SelectedItem.Text) == "Select" || Convert.ToString(ddlsponsored.SelectedItem.Text) == "Others") || (Convert.ToString(ddlstile.SelectedItem.Text) == "Select" || Convert.ToString(ddlstile.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            SeminarAttend.Visible = false;
            Seminar_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getsemheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtsa"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtsa"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }

                string fromd = txt_semfromdate.Text;
                string tod = txt_semtodate.Text;
                if (dt.Rows.Count > 0)
                {
                    for (int r = 0; r < dt.Rows.Count; r++)
                    {
                        if (Convert.ToString(dt.Rows[r][3]) == fromd || Convert.ToString(dt.Rows[r][4]) == tod)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Date Already Exist Please Choose Another Date')", true);
                            txt_semfromdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            txt_semtodate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            return;
                        }
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlsemtype.SelectedItem.Text;
                dr[2] = ddlprogramname.SelectedItem.Text;
                dr[3] = txt_semfromdate.Text;
                dr[4] = txt_semtodate.Text;
                dr[5] = ddlplace.SelectedItem.Text;
                dr[6] = ddlsponsored.SelectedItem.Text;
                dr[7] = ddlstile.SelectedItem.Text;
                dr[8] = ddlsemtype.SelectedItem.Value;
                dr[9] = ddlprogramname.SelectedItem.Value;
                dr[10] = ddlplace.SelectedItem.Value;
                dr[11] = ddlsponsored.SelectedItem.Value;
                dr[12] = ddlstile.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtsa"] = dt;

            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlsemtype.SelectedItem.Text;
                dr[2] = ddlprogramname.SelectedItem.Text;
                dr[3] = txt_semfromdate.Text;
                dr[4] = txt_semtodate.Text;
                dr[5] = ddlplace.SelectedItem.Text;
                dr[6] = ddlsponsored.SelectedItem.Text;
                dr[7] = ddlstile.SelectedItem.Text;
                dr[8] = ddlsemtype.SelectedItem.Value;
                dr[9] = ddlprogramname.SelectedItem.Value;
                dr[10] = ddlplace.SelectedItem.Value;
                dr[11] = ddlsponsored.SelectedItem.Value;
                dr[12] = ddlstile.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtsa"] = dt;
            }
            if (dt.Rows.Count > 0)
            {
                Seminar_grid.DataSource = dt;
                Seminar_grid.DataBind();
            }
        }
    }

    protected void btnsemattenupdate_Click(object sender, EventArgs e)
    {
        SeminarAttend.Visible = false;
        Seminar_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getsemheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["sag"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtsa"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlsemtype.SelectedItem.Text) == "Select" || Convert.ToString(ddlsemtype.SelectedItem.Text) == "Others") || (Convert.ToString(ddlprogramname.SelectedItem.Text) == "Select" || Convert.ToString(ddlprogramname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlplace.SelectedItem.Text) == "Select" || Convert.ToString(ddlplace.SelectedItem.Text) == "Others") || (Convert.ToString(ddlsponsored.SelectedItem.Text) == "Select" || Convert.ToString(ddlsponsored.SelectedItem.Text) == "Others") || (Convert.ToString(ddlstile.SelectedItem.Text) == "Select" || Convert.ToString(ddlstile.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = ddlsemtype.SelectedItem.Text;
            dr[2] = ddlprogramname.SelectedItem.Text;
            dr[3] = txt_semfromdate.Text; ;
            dr[4] = txt_semtodate.Text;
            dr[5] = ddlplace.SelectedItem.Text;
            dr[6] = ddlsponsored.SelectedItem.Text;
            dr[7] = ddlstile.SelectedItem.Text;
            dr[8] = ddlsemtype.SelectedItem.Value;
            dr[9] = ddlprogramname.SelectedItem.Value;
            dr[10] = ddlplace.SelectedItem.Value;
            dr[11] = ddlsponsored.SelectedItem.Value;
            dr[12] = ddlstile.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtsa"] = dt;

            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getsemheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                Seminar_grid.DataSource = dnext;
                Seminar_grid.DataBind();
            }
            SeminarAttend.Visible = false;
        }
    }

    protected void btn_sadelete_Click(object sender, EventArgs e)
    {
        SeminarAttend.Visible = false;
        Seminar_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getsemheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["sag"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtsa"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }

        Session["dtsa"] = dt;

        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getsemheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            Seminar_grid.DataSource = dnext;
            Seminar_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            Seminar_grid.DataSource = dt;
            Seminar_grid.DataBind();
        }
        SeminarAttend.Visible = false;
    }

    protected void btnsemorgnizeadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlorgname.SelectedItem.Text) == "Select" || Convert.ToString(ddlorgname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlorgplace.SelectedItem.Text) == "Select" || Convert.ToString(ddlorgplace.SelectedItem.Text) == "Others") || (Convert.ToString(ddlorgtitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlorgtitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            SeminarOrgs.Visible = false;
            SeminarOrgs_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getsemorgpubheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtso"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtso"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }

                string fromd = txt_orgfromdate.Text;
                string tod = txt_orgtodate.Text;
                if (dt.Rows.Count > 0)
                {
                    for (int r = 0; r < dt.Rows.Count; r++)
                    {
                        if (Convert.ToString(dt.Rows[r][2]) == fromd || Convert.ToString(dt.Rows[r][3]) == tod)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Date Already Exist Please Choose Another Date')", true);
                            txt_orgfromdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            txt_orgtodate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            return;
                        }
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlorgname.SelectedItem.Text;
                dr[2] = txt_orgfromdate.Text;
                dr[3] = txt_orgtodate.Text; ;
                dr[4] = ddlorgplace.SelectedItem.Text;
                dr[5] = ddlorgtitle.SelectedItem.Text;
                dr[6] = txt_letteregno.Text;
                dr[7] = ddlorgname.SelectedItem.Value;
                dr[8] = ddlorgplace.SelectedItem.Value;
                dr[9] = ddlorgtitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtso"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlorgname.SelectedItem.Text;
                dr[2] = txt_orgfromdate.Text;
                dr[3] = txt_orgtodate.Text; ;
                dr[4] = ddlorgplace.SelectedItem.Text;
                dr[5] = ddlorgtitle.SelectedItem.Text;
                dr[6] = txt_letteregno.Text;
                dr[7] = ddlorgname.SelectedItem.Value;
                dr[8] = ddlorgplace.SelectedItem.Value;
                dr[9] = ddlorgtitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtso"] = dt;
            }
            if (dt.Rows.Count > 0)
            {
                SeminarOrgs_grid.DataSource = dt;
                SeminarOrgs_grid.DataBind();
            }
        }
    }

    protected void btnsemorgnizeupdate_Click(object sender, EventArgs e)
    {
        SeminarOrgs_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getsemorgpubheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["sog"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtso"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlorgname.SelectedItem.Text) == "Select" || Convert.ToString(ddlorgname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlorgplace.SelectedItem.Text) == "Select" || Convert.ToString(ddlorgplace.SelectedItem.Text) == "Others") || (Convert.ToString(ddlorgtitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlorgtitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = ddlorgname.SelectedItem.Text;
            dr[2] = txt_orgfromdate.Text;
            dr[3] = txt_orgtodate.Text; ;
            dr[4] = ddlorgplace.SelectedItem.Text;
            dr[5] = ddlorgtitle.SelectedItem.Text;
            dr[6] = txt_letteregno.Text;
            dr[7] = ddlorgname.SelectedItem.Value;
            dr[8] = ddlorgplace.SelectedItem.Value;
            dr[9] = ddlorgtitle.SelectedItem.Value;

            dt.Rows.Add(dr);

            Session["dtso"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getsemorgpubheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                SeminarOrgs_grid.DataSource = dnext;
                SeminarOrgs_grid.DataBind();
            }
            SeminarOrgs.Visible = false;
        }
    }

    protected void btn_sodelete_Click(object sender, EventArgs e)
    {
        SeminarOrgs_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getsemorgpubheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["sog"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtso"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }

        Session["dtso"] = dt;
        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getsemorgpubheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            SeminarOrgs_grid.DataSource = dnext;
            SeminarOrgs_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            SeminarOrgs_grid.DataSource = dt;
            SeminarOrgs_grid.DataBind();
        }
        SeminarOrgs.Visible = false;
    }

    protected void btnjournapublicationladd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddljtype.SelectedItem.Text) == "Select" || Convert.ToString(ddljtype.SelectedItem.Text) == "Others") || (Convert.ToString(ddljname.SelectedItem.Text) == "Select" || Convert.ToString(ddljname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlpublisher.SelectedItem.Text) == "Select" || Convert.ToString(ddlpublisher.SelectedItem.Text) == "Others") || (Convert.ToString(ddlperiodicity.SelectedItem.Text) == "Select" || Convert.ToString(ddlperiodicity.SelectedItem.Text) == "Others") || (Convert.ToString(ddljtitle.SelectedItem.Text) == "Select" || Convert.ToString(ddljtitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Journal.Visible = false;
            JournalPub1.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getjrnlpubheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtj"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtj"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }

                string jname = ddljname.SelectedItem.Text;
                string jtitle = ddljtitle.SelectedItem.Text;
                if (dt.Rows.Count > 0)
                {
                    for (int r = 0; r < dt.Rows.Count; r++)
                    {
                        if (Convert.ToString(dt.Rows[r][2]) == jname)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Journal Name Already Exist Please Choose Another Journal Name')", true);
                            ddljname.SelectedIndex = 0;
                            return;
                        }
                        if (Convert.ToString(dt.Rows[r][9]) == jtitle)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Title Already Exist Please Choose Another Title')", true);
                            ddljtitle.SelectedIndex = 0;
                            return;
                        }
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddljtype.SelectedItem.Text;
                dr[2] = ddljname.SelectedItem.Text;
                dr[3] = ddlpublisher.SelectedItem.Text;
                dr[4] = txt_volumeno.Text;
                dr[5] = txt_issueno.Text;
                dr[6] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(ddlperiodicity.SelectedItem.Text);
                dr[7] = txt_preiod.Text;
                dr[8] = txt_pageno.Text;
                dr[9] = ddljtitle.SelectedItem.Text;
                dr[10] = ddljtype.SelectedItem.Value;
                dr[11] = ddljname.SelectedItem.Value;
                dr[12] = ddlpublisher.SelectedItem.Value;
                dr[13] = ddlperiodicity.SelectedItem.Value;
                dr[14] = ddljtitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtj"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddljtype.SelectedItem.Text;
                dr[2] = ddljname.SelectedItem.Text;
                dr[3] = ddlpublisher.SelectedItem.Text;
                dr[4] = txt_volumeno.Text;
                dr[5] = txt_issueno.Text;
                dr[6] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(ddlperiodicity.SelectedItem.Text);
                dr[7] = txt_preiod.Text;
                dr[8] = txt_pageno.Text;
                dr[9] = ddljtitle.SelectedItem.Text;
                dr[10] = ddljtype.SelectedItem.Value;
                dr[11] = ddljname.SelectedItem.Value;
                dr[12] = ddlpublisher.SelectedItem.Value;
                dr[13] = ddlperiodicity.SelectedItem.Value;
                dr[14] = ddljtitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtj"] = dt;
            }
            if (dt.Rows.Count > 0)
            {
                JournalPub1.DataSource = dt;
                JournalPub1.DataBind();
            }
        }
    }

    protected void btnjournapublicationlupdate_Click(object sender, EventArgs e)
    {
        JournalPub1.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getjrnlpubheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["jg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtj"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }

        dr = dt.NewRow();
        if ((Convert.ToString(ddljtype.SelectedItem.Text) == "Select" || Convert.ToString(ddljtype.SelectedItem.Text) == "Others") || (Convert.ToString(ddljname.SelectedItem.Text) == "Select" || Convert.ToString(ddljname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlpublisher.SelectedItem.Text) == "Select" || Convert.ToString(ddlpublisher.SelectedItem.Text) == "Others") || (Convert.ToString(ddlperiodicity.SelectedItem.Text) == "Select" || Convert.ToString(ddlperiodicity.SelectedItem.Text) == "Others") || (Convert.ToString(ddljtitle.SelectedItem.Text) == "Select" || Convert.ToString(ddljtitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = ddljtype.SelectedItem.Text;
            dr[2] = ddljname.SelectedItem.Text;
            dr[3] = ddlpublisher.SelectedItem.Text;
            dr[4] = txt_volumeno.Text;
            dr[5] = txt_issueno.Text;
            dr[6] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(ddlperiodicity.SelectedItem.Text);
            dr[7] = txt_preiod.Text;
            dr[8] = txt_pageno.Text;
            dr[9] = ddljtitle.SelectedItem.Text;
            dr[10] = ddljtype.SelectedItem.Value;
            dr[11] = ddljname.SelectedItem.Value;
            dr[12] = ddlpublisher.SelectedItem.Value;
            dr[13] = ddlperiodicity.SelectedItem.Value;
            dr[14] = ddljtitle.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtj"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getjrnlpubheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                JournalPub1.DataSource = dnext;
                JournalPub1.DataBind();
            }
            Journal.Visible = false;
        }
    }

    protected void btn_jdelete_Click(object sender, EventArgs e)
    {
        JournalPub1.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getjrnlpubheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["jg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtj"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }

        Session["dtj"] = dt;
        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getjrnlpubheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            JournalPub1.DataSource = dnext;
            JournalPub1.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            JournalPub1.DataSource = dt;
            JournalPub1.DataBind();
        }
        Journal.Visible = false;
    }

    protected void btnbookspublishedadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlbpname.SelectedItem.Text) == "Select" || Convert.ToString(ddlbpname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlbptitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlbptitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Book.Visible = false;
            Book_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getbookheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtbk"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtbk"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }

                string byear = txt_byear.Text;

                if (dt.Rows.Count > 0)
                {
                    for (int r = 0; r < dt.Rows.Count; r++)
                    {
                        if (Convert.ToString(dt.Rows[r][1]) == byear)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Date Already Exist Please Choose Another Date')", true);
                            txt_byear.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            return;
                        }
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = txt_byear.Text;
                dr[2] = ddlbpname.SelectedItem.Text;
                dr[3] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_bpaddress.Text);
                dr[4] = ddlbptitle.SelectedItem.Text;
                dr[5] = txt_costofbook.Text;
                dr[6] = ddlbpname.SelectedItem.Value;
                dr[7] = ddlbptitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtbk"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = txt_byear.Text;
                dr[2] = ddlbpname.SelectedItem.Text;
                dr[3] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_bpaddress.Text);
                dr[4] = ddlbptitle.SelectedItem.Text;
                dr[5] = txt_costofbook.Text;
                dr[6] = ddlbpname.SelectedItem.Value;
                dr[7] = ddlbptitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtbk"] = dt;
            }

            if (dt.Rows.Count > 0)
            {
                Book_grid.DataSource = dt;
                Book_grid.DataBind();
            }
        }
    }

    protected void btnbookspublishedupdate_Click(object sender, EventArgs e)
    {
        Book_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getbookheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["bkg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtbk"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlbpname.SelectedItem.Text) == "Select" || Convert.ToString(ddlbpname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlbptitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlbptitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = txt_byear.Text;
            dr[2] = ddlbpname.SelectedItem.Text;
            dr[3] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_bpaddress.Text);
            dr[4] = ddlbptitle.SelectedItem.Text;
            dr[5] = txt_costofbook.Text;
            dr[6] = ddlbpname.SelectedItem.Value;
            dr[7] = ddlbptitle.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtbk"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getbookheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                Book_grid.DataSource = dnext;
                Book_grid.DataBind();
            }
            Book.Visible = false;
        }
    }

    protected void btn_bkdelete_Click(object sender, EventArgs e)
    {
        Book_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getbookheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["bkg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtbk"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }

        Session["dtbk"] = dt;
        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getbookheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            Book_grid.DataSource = dnext;
            Book_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            Book_grid.DataSource = dt;
            Book_grid.DataBind();
        }
        Book.Visible = false;
    }

    protected void btneditorbooksadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddletype.SelectedItem.Text) == "Select" || Convert.ToString(ddletype.SelectedItem.Text) == "Others") || (Convert.ToString(ddlepname.SelectedItem.Text) == "Select" || Convert.ToString(ddlepname.SelectedItem.Text) == "Others") || (Convert.ToString(ddletitle.SelectedItem.Text) == "Select" || Convert.ToString(ddletitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Editor.Visible = false;
            EditorBook_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            geteditbkheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtebk"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtebk"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }

                string eyear = txt_eyear.Text;

                if (dt.Rows.Count > 0)
                {
                    for (int r = 0; r < dt.Rows.Count; r++)
                    {
                        if (Convert.ToString(dt.Rows[r][2]) == eyear)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Date Already Exist Please Choose Another Date')", true);
                            txt_eyear.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            return;
                        }
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddletype.SelectedItem.Text;
                dr[2] = txt_eyear.Text;
                dr[3] = ddlepname.SelectedItem.Text;
                dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_eaddress.Text);
                dr[5] = ddletitle.SelectedItem.Text;
                dr[6] = txt_ecostofbook.Text;
                dr[7] = ddletype.SelectedItem.Value;
                dr[8] = ddlepname.SelectedItem.Value;
                dr[9] = ddletitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtebk"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddletype.SelectedItem.Text;
                dr[2] = txt_eyear.Text;
                dr[3] = ddlepname.SelectedItem.Text;
                dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_eaddress.Text);
                dr[5] = ddletitle.SelectedItem.Text;
                dr[6] = txt_ecostofbook.Text;
                dr[7] = ddletype.SelectedItem.Value;
                dr[8] = ddlepname.SelectedItem.Value;
                dr[9] = ddletitle.SelectedItem.Value;


                dt.Rows.Add(dr);
                Session["dtebk"] = dt;
            }

            if (dt.Rows.Count > 0)
            {
                EditorBook_grid.DataSource = dt;
                EditorBook_grid.DataBind();
            }
        }
    }

    protected void btneditorbooksupdate_Click(object sender, EventArgs e)
    {
        EditorBook_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        geteditbkheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["ebkg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtebk"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddletype.SelectedItem.Text) == "Select" || Convert.ToString(ddletype.SelectedItem.Text) == "Others") || (Convert.ToString(ddlepname.SelectedItem.Text) == "Select" || Convert.ToString(ddlepname.SelectedItem.Text) == "Others") || (Convert.ToString(ddletitle.SelectedItem.Text) == "Select" || Convert.ToString(ddletitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = ddletype.SelectedItem.Text;
            dr[2] = txt_eyear.Text;
            dr[3] = ddlepname.SelectedItem.Text;
            dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_eaddress.Text);
            dr[5] = ddletitle.SelectedItem.Text;
            dr[6] = txt_ecostofbook.Text;
            dr[7] = ddletype.SelectedItem.Value;
            dr[8] = ddlepname.SelectedItem.Value;
            dr[9] = ddletitle.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtebk"] = dt;

            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                geteditbkheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                EditorBook_grid.DataSource = dnext;
                EditorBook_grid.DataBind();
            }
            Editor.Visible = false;
        }
    }

    protected void btn_ebkdelete_Click(object sender, EventArgs e)
    {
        EditorBook_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        geteditbkheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["ebkg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtebk"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        Session["dtebk"] = dt;

        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            geteditbkheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            EditorBook_grid.DataSource = dnext;
            EditorBook_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            EditorBook_grid.DataSource = dt;
            EditorBook_grid.DataBind();
        }
        Editor.Visible = false;
    }

    protected void btnawarddetailsadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlaname.SelectedItem.Text) == "Select" || Convert.ToString(ddlaname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlaoaname.SelectedItem.Text) == "Select" || Convert.ToString(ddlaoaname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlanaward.SelectedItem.Text) == "Select" || Convert.ToString(ddlanaward.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Award.Visible = false;
            Award_grid.Visible = true;
            ArrayList addnew = new ArrayList();
            addnew.Add("S.No");
            addnew.Add("Year");
            addnew.Add("Name Of The Award");
            addnew.Add("Name Of The Organization");
            addnew.Add("Address");
            addnew.Add("Nature of the Award");

            int row = 0;

            DataTable dt = new DataTable();
            getawardheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtaw"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtaw"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }

                string ayear = txt_ayear.Text;
                string awardname = ddlaname.SelectedItem.Text;

                if (dt.Rows.Count > 0)
                {
                    for (int r = 0; r < dt.Rows.Count; r++)
                    {
                        if (Convert.ToString(dt.Rows[r][1]) == ayear)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Date Already Exist Please Choose Another Date')", true);
                            txt_ayear.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            return;
                        }
                        if (Convert.ToString(dt.Rows[r][2]) == awardname)
                        {
                            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('This Award Name is Already Exist Please Enter Another Award Name')", true);
                            ddlaname.SelectedIndex = 0;
                            return;
                        }
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = txt_ayear.Text;
                dr[2] = ddlaname.SelectedItem.Text;
                dr[3] = ddlaoaname.SelectedItem.Text;
                dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_aaddress.Text);
                dr[5] = ddlanaward.SelectedItem.Text;
                dr[6] = ddlaname.SelectedItem.Value;
                dr[7] = ddlaoaname.SelectedItem.Value;
                dr[8] = ddlanaward.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtaw"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = txt_ayear.Text;
                dr[2] = ddlaname.SelectedItem.Text;
                dr[3] = ddlaoaname.SelectedItem.Text;
                dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_aaddress.Text);
                dr[5] = ddlanaward.SelectedItem.Text;
                dr[6] = ddlaname.SelectedItem.Value;
                dr[7] = ddlaoaname.SelectedItem.Value;
                dr[8] = ddlanaward.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtaw"] = dt;
            }

            if (dt.Rows.Count > 0)
            {
                Award_grid.DataSource = dt;
                Award_grid.DataBind();
            }
        }
    }

    protected void btnawarddetailsupdate_Click(object sender, EventArgs e)
    {
        Award_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getawardheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["awg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtaw"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlaname.SelectedItem.Text) == "Select" || Convert.ToString(ddlaname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlaoaname.SelectedItem.Text) == "Select" || Convert.ToString(ddlaoaname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlanaward.SelectedItem.Text) == "Select" || Convert.ToString(ddlanaward.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = txt_ayear.Text;
            dr[2] = ddlaname.SelectedItem.Text;
            dr[3] = ddlaoaname.SelectedItem.Text;
            dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_aaddress.Text);
            dr[5] = ddlanaward.SelectedItem.Text;
            dr[6] = ddlaname.SelectedItem.Value;
            dr[7] = ddlaoaname.SelectedItem.Value;
            dr[8] = ddlanaward.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtaw"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getawardheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                Award_grid.DataSource = dnext;
                Award_grid.DataBind();
            }
            Award.Visible = false;
        }
    }

    protected void btn_awdelete_Click(object sender, EventArgs e)
    {
        Award_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getawardheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["awg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtaw"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        Session["dtaw"] = dt;

        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getawardheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            Award_grid.DataSource = dnext;
            Award_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            Award_grid.DataSource = dt;
            Award_grid.DataBind();
        }
        Award.Visible = false;
    }

    protected void btnprojectdetailsadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlprojecttitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlprojecttitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Project.Visible = false;
            project_detail_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getpdetheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtpd"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtpd"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlprojecttitle.SelectedItem.Text;
                dr[2] = txt_projectfrom.Text;
                dr[3] = txt_projecto.Text;
                dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_prmks.Text);
                dr[5] = ddlprojecttitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtpd"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlprojecttitle.SelectedItem.Text;
                dr[2] = txt_projectfrom.Text;
                dr[3] = txt_projecto.Text;
                dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_prmks.Text);
                dr[5] = ddlprojecttitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtpd"] = dt;
            }

            if (dt.Rows.Count > 0)
            {
                project_detail_grid.DataSource = dt;
                project_detail_grid.DataBind();
            }
        }
    }

    protected void btnprojectdetailsupdate_Click(object sender, EventArgs e)
    {
        project_detail_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getpdetheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["pdg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtpd"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlprojecttitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlprojecttitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = ddlprojecttitle.SelectedItem.Text;
            dr[2] = txt_projectfrom.Text;
            dr[3] = txt_projecto.Text;
            dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_prmks.Text);
            dr[5] = ddlprojecttitle.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtpd"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getpdetheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                project_detail_grid.DataSource = dnext;
                project_detail_grid.DataBind();
            }
            Project.Visible = false;
        }
    }

    protected void btn_pddelete_Click(object sender, EventArgs e)
    {
        project_detail_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getpdetheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["pdg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtpd"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        Session["dtpd"] = dt;
        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getpdetheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            project_detail_grid.DataSource = dnext;
            project_detail_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            project_detail_grid.DataSource = dt;
            project_detail_grid.DataBind();
        }
        Project.Visible = false;
    }

    protected void btnresearachdetailsadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlresearchname.SelectedItem.Text) == "Select" || Convert.ToString(ddlresearchname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlresearchtype.SelectedItem.Text) == "Select" || Convert.ToString(ddlresearchtype.SelectedItem.Text) == "Others") || (Convert.ToString(ddlrrtype.SelectedItem.Text) == "Select" || Convert.ToString(ddlrrtype.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Research.Visible = false;
            Research_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getresearchheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtrd"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtrd"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlresearchname.SelectedItem.Text;
                dr[2] = ddlresearchtype.SelectedItem.Text;
                dr[3] = ddlrrtype.SelectedItem.Text;
                dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_rremarks.Text);
                dr[5] = ddlresearchname.SelectedItem.Value;
                dr[6] = ddlresearchtype.SelectedItem.Value;
                dr[7] = ddlrrtype.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtrd"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlresearchname.SelectedItem.Text;
                dr[2] = ddlresearchtype.SelectedItem.Text;
                dr[3] = ddlrrtype.SelectedItem.Text;
                dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_rremarks.Text);
                dr[5] = ddlresearchname.SelectedItem.Value;
                dr[6] = ddlresearchtype.SelectedItem.Value;
                dr[7] = ddlrrtype.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtrd"] = dt;
            }

            if (dt.Rows.Count > 0)
            {
                Research_grid.DataSource = dt;
                Research_grid.DataBind();
            }
        }
    }

    protected void btnresearchdetailsupdate_Click(object sender, EventArgs e)
    {
        Research_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getresearchheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["rg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtrd"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlresearchname.SelectedItem.Text) == "Select" || Convert.ToString(ddlresearchname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlresearchtype.SelectedItem.Text) == "Select" || Convert.ToString(ddlresearchtype.SelectedItem.Text) == "Others") || (Convert.ToString(ddlrrtype.SelectedItem.Text) == "Select" || Convert.ToString(ddlrrtype.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = ddlresearchname.SelectedItem.Text;
            dr[2] = ddlresearchtype.SelectedItem.Text;
            dr[3] = ddlrrtype.SelectedItem.Text;
            dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_rremarks.Text);
            dr[5] = ddlresearchname.SelectedItem.Value;
            dr[6] = ddlresearchtype.SelectedItem.Value;
            dr[7] = ddlrrtype.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtrd"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getresearchheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                Research_grid.DataSource = dnext;
                Research_grid.DataBind();
            }
            Research.Visible = false;
        }
    }

    protected void btn_rddelete_Click(object sender, EventArgs e)
    {
        Research_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getresearchheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["rg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtrd"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        Session["dtrd"] = dt;
        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getresearchheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            Research_grid.DataSource = dnext;
            Research_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            Research_grid.DataSource = dt;
            Research_grid.DataBind();
        }
        Research.Visible = false;
    }

    protected void btnprojectgrantsadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlpgname.SelectedItem.Text) == "Select" || Convert.ToString(ddlpgname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlpgtitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlpgtitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Grants.Visible = false;
            PGrants_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getpgrantsheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtpg"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtpg"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = txt_pgyear.Text;
                dr[2] = ddlpgname.SelectedItem.Text;
                dr[3] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_pgaddress.Text);
                dr[4] = ddlpgtitle.SelectedItem.Text;
                dr[5] = txt_pgamount.Text;
                dr[6] = txt_pgletterno.Text;
                dr[7] = txt_pgdate.Text;
                dr[8] = ddlpgname.SelectedItem.Value;
                dr[9] = ddlpgtitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtpg"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = txt_pgyear.Text;
                dr[2] = ddlpgname.SelectedItem.Text;
                dr[3] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_pgaddress.Text);
                dr[4] = ddlpgtitle.SelectedItem.Text;
                dr[5] = txt_pgamount.Text;
                dr[6] = txt_pgletterno.Text;
                dr[7] = txt_pgdate.Text;
                dr[8] = ddlpgname.SelectedItem.Value;
                dr[9] = ddlpgtitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtpg"] = dt;
            }

            if (dt.Rows.Count > 0)
            {
                PGrants_grid.DataSource = dt;
                PGrants_grid.DataBind();
            }
        }
    }

    protected void btnprojectgrantsupdate_Click(object sender, EventArgs e)
    {
        PGrants_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getpgrantsheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["pgg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtpg"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlpgname.SelectedItem.Text) == "Select" || Convert.ToString(ddlpgname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlpgtitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlpgtitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = txt_pgyear.Text;
            dr[2] = ddlpgname.SelectedItem.Text;
            dr[3] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_pgaddress.Text);
            dr[4] = ddlpgtitle.SelectedItem.Text;
            dr[5] = txt_pgamount.Text;
            dr[6] = txt_pgletterno.Text;
            dr[7] = txt_pgdate.Text;
            dr[8] = ddlpgname.SelectedItem.Value;
            dr[9] = ddlpgtitle.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtpg"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getpgrantsheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                PGrants_grid.DataSource = dnext;
                PGrants_grid.DataBind();
            }
            Grants.Visible = false;
        }
    }

    protected void btn_pgdelete_Click(object sender, EventArgs e)
    {

        PGrants_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getpgrantsheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["pgg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtpg"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        Session["dtpg"] = dt;
        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getpgrantsheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            PGrants_grid.DataSource = dnext;
            PGrants_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            PGrants_grid.DataSource = dt;
            PGrants_grid.DataBind();
        }
        Grants.Visible = false;
    }

    protected void btnpatentreceivedadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlprname.SelectedItem.Text) == "Select" || Convert.ToString(ddlprname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlprtitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlprtitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Patent.Visible = false;
            Patent_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getpatentheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtpr"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtpr"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = txt_pryear.Text;
                dr[2] = ddlprname.SelectedItem.Text;
                dr[3] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_praddress.Text);
                dr[4] = ddlprtitle.SelectedItem.Text;
                dr[5] = txt_prletterno.Text;
                dr[6] = txt_prdate.Text;
                dr[7] = txt_prcerno.Text;
                dr[8] = txt_prcerdate.Text;
                dr[9] = ddlprname.SelectedItem.Value;
                dr[10] = ddlprtitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtpr"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = txt_pryear.Text;
                dr[2] = ddlprname.SelectedItem.Text;
                dr[3] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_praddress.Text);
                dr[4] = ddlprtitle.SelectedItem.Text;
                dr[5] = txt_prletterno.Text;
                dr[6] = txt_prdate.Text;
                dr[7] = txt_prcerno.Text;
                dr[8] = txt_prcerdate.Text;
                dr[9] = ddlprname.SelectedItem.Value;
                dr[10] = ddlprtitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtpr"] = dt;
            }

            if (dt.Rows.Count > 0)
            {
                Patent_grid.DataSource = dt;
                Patent_grid.DataBind();
            }
        }
    }

    protected void btnpatentreceivedupdate_Click(object sender, EventArgs e)
    {
        Patent_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getpatentheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["ptg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtpr"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlprname.SelectedItem.Text) == "Select" || Convert.ToString(ddlprname.SelectedItem.Text) == "Others") || (Convert.ToString(ddlprtitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlprtitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = txt_pryear.Text;
            dr[2] = ddlprname.SelectedItem.Text;
            dr[3] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_praddress.Text);
            dr[4] = ddlprtitle.SelectedItem.Text;
            dr[5] = txt_prletterno.Text;
            dr[6] = txt_prdate.Text;
            dr[7] = txt_prcerno.Text;
            dr[8] = txt_prcerdate.Text;
            dr[9] = ddlprname.SelectedItem.Value;
            dr[10] = ddlprtitle.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtpr"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getpatentheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                Patent_grid.DataSource = dnext;
                Patent_grid.DataBind();
            }
            Patent.Visible = false;
        }
    }

    protected void btn_ptdelete_Click(object sender, EventArgs e)
    {

        Patent_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getpatentheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["ptg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtpr"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        Session["dtpr"] = dt;
        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getpatentheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            Patent_grid.DataSource = dnext;
            Patent_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            Patent_grid.DataSource = dt;
            Patent_grid.DataBind();
        }
        Patent.Visible = false;
    }

    protected void btnguideshipadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlnatureguide.SelectedItem.Text) == "Select" || Convert.ToString(ddlnatureguide.SelectedItem.Text) == "Others") || (Convert.ToString(ddlgtitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlgtitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Guide.Visible = false;
            Guide_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getguideheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtgs"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtgs"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }

                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = txt_gyear.Text;
                dr[2] = ddlnatureguide.SelectedItem.Text;
                dr[3] = ddlgtitle.SelectedItem.Text;
                dr[4] = ddlnatureguide.SelectedItem.Value;
                dr[5] = ddlgtitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtgs"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = txt_gyear.Text;
                dr[2] = ddlnatureguide.SelectedItem.Text;
                dr[3] = ddlgtitle.SelectedItem.Text;
                dr[4] = ddlnatureguide.SelectedItem.Value;
                dr[5] = ddlgtitle.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtgs"] = dt;
            }
            if (dt.Rows.Count > 0)
            {
                Guide_grid.DataSource = dt;
                Guide_grid.DataBind();
            }
        }
    }

    protected void btnguideshipupdate_Click(object sender, EventArgs e)
    {
        Guide_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getguideheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["gdg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtgs"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlgyear.SelectedItem.Text) == "Select" || Convert.ToString(ddlgyear.SelectedItem.Text) == "Others") || (Convert.ToString(ddlnatureguide.SelectedItem.Text) == "Select" || Convert.ToString(ddlnatureguide.SelectedItem.Text) == "Others") || (Convert.ToString(ddlgtitle.SelectedItem.Text) == "Select" || Convert.ToString(ddlgtitle.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = txt_gyear.Text;
            dr[2] = ddlnatureguide.SelectedItem.Text;
            dr[3] = ddlgtitle.SelectedItem.Text;
            dr[4] = ddlnatureguide.SelectedItem.Value;
            dr[5] = ddlgtitle.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtgs"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getguideheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                Guide_grid.DataSource = dnext;
                Guide_grid.DataBind();
            }
            Guide.Visible = false;
        }
    }

    protected void btn_gddelete_Click(object sender, EventArgs e)
    {

        Guide_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getguideheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["gdg"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtgs"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        Session["dtgs"] = dt;
        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getguideheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            Guide_grid.DataSource = dnext;
            Guide_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            Guide_grid.DataSource = dt;
            Guide_grid.DataBind();
        }
        Guide.Visible = false;
    }

    protected void btnpmemberadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlpmname.SelectedItem.Text) == "Select" || Convert.ToString(ddlpmname.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Professional.Visible = false;
            Professionalm_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getprofheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtmm"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtmm"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlpmname.SelectedItem.Text;
                dr[2] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_pmaddress.Text);
                dr[3] = txt_jyear.Text;
                dr[4] = txt_pmno.Text;
                dr[5] = ddlpmname.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtmm"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlpmname.SelectedItem.Text;
                dr[2] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_pmaddress.Text);
                dr[3] = txt_jyear.Text;
                dr[4] = txt_pmno.Text;
                dr[5] = ddlpmname.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtmm"] = dt;
            }

            if (dt.Rows.Count > 0)
            {
                Professionalm_grid.DataSource = dt;
                Professionalm_grid.DataBind();
            }
        }
    }

    protected void btnpmemberupdate_Click(object sender, EventArgs e)
    {
        Professionalm_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getprofheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["prog"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtmm"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlpmname.SelectedItem.Text) == "Select" || Convert.ToString(ddlpmname.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = ddlpmname.SelectedItem.Text;
            dr[2] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_pmaddress.Text);
            dr[3] = txt_jyear.Text;
            dr[4] = txt_pmno.Text;
            dr[5] = ddlpmname.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtmm"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getprofheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                Professionalm_grid.DataSource = dnext;
                Professionalm_grid.DataBind();
            }
            Professional.Visible = false;
        }
    }

    protected void btn_mmdelete_Click(object sender, EventArgs e)
    {
        Professionalm_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getprofheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["prog"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtmm"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        Session["dtmm"] = dt;

        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getprofheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            Professionalm_grid.DataSource = dnext;
            Professionalm_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            Professionalm_grid.DataSource = dt;
            Professionalm_grid.DataBind();
        }
        Professional.Visible = false;
    }

    protected void btnamcommitteeadd_Click(object sender, EventArgs e)
    {
        if ((Convert.ToString(ddlamname.SelectedItem.Text) == "Select" || Convert.ToString(ddlamname.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            Administrative.Visible = false;
            Administrative_grid.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getadminheader(dt);

            DataRow dr;
            int ct = 0;
            if (Session["dtcmt"] != null)
            {
                DataTable dnew = new DataTable();
                dnew = (DataTable)Session["dtcmt"];
                if (dnew.Rows.Count > 0)
                {
                    for (int ro = 0; ro < dnew.Rows.Count; ro++)
                    {
                        dr = dt.NewRow();
                        dr[0] = Convert.ToString(ro + 1);
                        ct++;
                        for (int col = 0; col < dnew.Columns.Count; col++)
                        {
                            dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                        }
                        dt.Rows.Add(dr);
                    }
                }
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlamname.SelectedItem.Text;
                dr[2] = txt_amfromdate.Text;
                dr[3] = txt_amtodate.Text;
                dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_natureofduty.Text);
                dr[5] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_achievements.Text);
                dr[6] = ddlamname.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtcmt"] = dt;
            }
            else
            {
                dr = dt.NewRow();
                dr[0] = ct + 1;
                dr[1] = ddlamname.SelectedItem.Text;
                dr[2] = txt_amfromdate.Text;
                dr[3] = txt_amtodate.Text;
                dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_natureofduty.Text);
                dr[5] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_achievements.Text);
                dr[6] = ddlamname.SelectedItem.Value;

                dt.Rows.Add(dr);
                Session["dtcmt"] = dt;
            }
            if (dt.Rows.Count > 0)
            {
                Administrative_grid.DataSource = dt;
                Administrative_grid.DataBind();
            }
        }
    }

    protected void btnamcommitteeupdate_Click(object sender, EventArgs e)
    {
        Administrative_grid.Visible = true;

        int row = 0;
        DataTable dt = new DataTable();
        getadminheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["adming"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtcmt"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if ((Convert.ToString(ddlamname.SelectedItem.Text) == "Select" || Convert.ToString(ddlamname.SelectedItem.Text) == "Others"))
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {
            dr[0] = egi + 1;
            dr[1] = ddlamname.SelectedItem.Text;
            dr[2] = txt_amfromdate.Text;
            dr[3] = txt_amtodate.Text;
            dr[4] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_natureofduty.Text);
            dr[5] = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_achievements.Text);
            dr[6] = ddlamname.SelectedItem.Value;

            dt.Rows.Add(dr);
            Session["dtcmt"] = dt;
            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getadminheader(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                Administrative_grid.DataSource = dnext;
                Administrative_grid.DataBind();
            }
            Administrative.Visible = false;
        }
    }

    protected void btn_admindelete_Click(object sender, EventArgs e)
    {
        Administrative_grid.Visible = true;
        int row = 0;

        DataTable dt = new DataTable();
        getadminheader(dt);

        DataRow dr;
        int egi = Convert.ToInt32(Convert.ToString(ViewState["adming"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtcmt"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        Session["dtcmt"] = dt;
        if (dt.Rows.Count > 0)
        {
            DataTable dnext = new DataTable();
            getadminheader(dnext);
            DataRow drov;

            for (int ik = 0; ik < dt.Rows.Count; ik++)
            {
                drov = dnext.NewRow();
                drov[0] = Convert.ToString(ik + 1);
                for (int col = 1; col < dt.Columns.Count; col++)
                {
                    drov[col] = Convert.ToString(dt.Rows[ik][col]);
                }
                dnext.Rows.Add(drov);
            }

            Administrative_grid.DataSource = dnext;
            Administrative_grid.DataBind();
        }
        if (dt.Rows.Count == 0)
        {
            Administrative_grid.DataSource = dt;
            Administrative_grid.DataBind();
        }
        Administrative.Visible = false;
    }

    protected void btnfamilyexit_Click(object sender, EventArgs e)
    {
        FamilyInfo.Visible = false;
    }

    protected void btnexitquli_Click(object sender, EventArgs e)
    {
        Qualification.Visible = false;
    }

    protected void btnexpexit_Click(object sender, EventArgs e)
    {
        Experience.Visible = false;
    }

    protected void btnsemattenexit1_Click(object sender, EventArgs e)
    {
        SeminarAttend.Visible = false;
    }

    protected void btnsemorgexit_Click(object sender, EventArgs e)
    {
        SeminarOrgs.Visible = false;
    }

    protected void btnjournalexit_Click(object sender, EventArgs e)
    {
        Journal.Visible = false;
    }

    protected void btnbooksexit_Click(object sender, EventArgs e)
    {
        Book.Visible = false;
    }

    protected void btneditorbooksexit_Click(object sender, EventArgs e)
    {
        Editor.Visible = false;
    }

    protected void btnawardexit_Click(object sender, EventArgs e)
    {
        Award.Visible = false;
    }

    protected void btnprojectdetaisexit_Click(object sender, EventArgs e)
    {
        Project.Visible = false;
    }

    protected void btnresearchexit_Click(object sender, EventArgs e)
    {
        Research.Visible = false;
    }

    protected void btnprojectgrantsexit_Click(object sender, EventArgs e)
    {
        Grants.Visible = false;
    }

    protected void btnpatentexit_Click(object sender, EventArgs e)
    {
        Patent.Visible = false;
    }

    protected void btngudieshipexit_Click(object sender, EventArgs e)
    {
        Guide.Visible = false;
    }

    protected void btnpmemberexit_Click(object sender, EventArgs e)
    {
        Professional.Visible = false;
    }

    protected void btnamcommiteeexit_Click(object sender, EventArgs e)
    {
        Administrative.Visible = false;
    }

    public void bindrequestcode()
    {
        try
        {
            string newitemcode = "";
            string selectquery = "select AssetAcr,AssetStNo,AssetSize from IM_CodeSettings order by startdate desc";
            ds = d2.select_method_wo_parameter(selectquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                string ordcode = Convert.ToString(ds.Tables[0].Rows[0]["AssetAcr"]);
                string itemacronym = Convert.ToString(ds.Tables[0].Rows[0]["AssetAcr"]);
                string itemstarno = Convert.ToString(ds.Tables[0].Rows[0]["AssetStNo"]);
                string itemsize = Convert.ToString(ds.Tables[0].Rows[0]["AssetSize"]);
                selectquery = "select top(1) AssetNo  from IT_BreakageDetails where AssetNo like '" + Convert.ToString(ordcode) + "%' order by AssetNo desc";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selectquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string itemcode = Convert.ToString(ds.Tables[0].Rows[0]["AssetNo"]);
                    string itemacr = Convert.ToString(itemacronym);
                    int len = itemacr.Length;
                    itemcode = itemcode.Remove(0, len);
                    int len1 = Convert.ToString(itemcode).Length;
                    string newnumber = Convert.ToString((Convert.ToInt32(itemcode) + 1));
                    len = Convert.ToString(newnumber).Length;

                    len1 = Convert.ToInt32(itemsize) - len;//3.11.15
                    if (len1 == 2)
                        newitemcode = "00" + newnumber;
                    else if (len1 == 1)
                        newitemcode = "0" + newnumber;
                    else if (len1 == 4)
                        newitemcode = "0000" + newnumber;
                    else if (len1 == 3)
                        newitemcode = "000" + newnumber;
                    else
                        newitemcode = Convert.ToString(newnumber);
                    if (newitemcode.Trim() != "")
                        newitemcode = itemacr + "" + newitemcode;
                }
                else
                {
                    string itemacr = Convert.ToString(itemstarno);
                    int len = itemacr.Length;
                    string items = Convert.ToString(itemsize);
                    int len1 = Convert.ToInt32(items);
                    int size = len1 - len;
                    if (size == 2)
                        newitemcode = "00" + itemstarno;
                    else if (size == 1)
                        newitemcode = "0" + itemstarno;
                    else if (size == 4)
                        newitemcode = "0000" + itemstarno;
                    else if (size == 3)
                        newitemcode = "000" + itemstarno;
                    else
                        newitemcode = Convert.ToString(itemstarno);
                    newitemcode = Convert.ToString(itemacronym) + "" + Convert.ToString(newitemcode);
                }
            }
        }
        catch { }
    }

    public void bindstfcode()
    {
        string value = d2.GetFunction("select value from Master_Settings where settings='CodeSetting Rights' and value is not null and value<>''");
        string query = "";
        if (value.Trim() != "")
        {
            string[] val = value.Split(',');
            for (int i = 0; i < val.Length; i++)
            {
                if (val[i] == "1")
                    query = "select GeneralAcr,StartNo,SerialSize  from HRS_CodeSettings  where SettingField='1'";
            }
        }
    }

    protected void btn_photoupload_OnClick(object sender, EventArgs e)
    {
        try
        {
            ViewState["stfimg"] = null;
            string scode = txt_aptscode.Text;
            if (fileuploadbrowse.HasFile)
            {
                if (fileuploadbrowse.FileName.EndsWith(".jpg") || fileuploadbrowse.FileName.EndsWith(".JPG") || fileuploadbrowse.FileName.EndsWith(".JPEG") || fileuploadbrowse.FileName.EndsWith(".jpeg"))
                {
                    string stdphotopath = Server.MapPath("~/Staff Photo/") + fileuploadbrowse.FileName;
                    string stdphotoext = System.IO.Path.GetExtension(fileuploadbrowse.FileName);
                    fileuploadbrowse.SaveAs(stdphotopath);
                    if (File.Exists(HttpContext.Current.Server.MapPath("~/Staff Photo/" + fileuploadbrowse.FileName)))
                        stf_img.ImageUrl = "~/Staff Photo/" + fileuploadbrowse.FileName;
                    ViewState["stfimg"] = fileuploadbrowse.FileName;
                    photo_div.Visible = false;
                }
            }
        }
        catch { }
    }

    protected void btn_signupload_OnClick(object sender, EventArgs e)
    {
        try
        {
            ViewState["signimg"] = null;
            string scode = txt_aptscode.Text;
            if (fileuploadsign.HasFile)
            {
                if (fileuploadsign.FileName.EndsWith(".jpg") || fileuploadsign.FileName.EndsWith(".JPG") || fileuploadsign.FileName.EndsWith(".JPEG") || fileuploadsign.FileName.EndsWith(".jpeg"))
                {
                    string stdphotopath = Server.MapPath("~/Staff Signature/") + fileuploadsign.FileName;
                    string stdphotoext = System.IO.Path.GetExtension(fileuploadsign.FileName);
                    fileuploadsign.SaveAs(stdphotopath);
                    if (File.Exists(HttpContext.Current.Server.MapPath("~/Staff Signature/" + fileuploadsign.FileName)))
                        img_sign.ImageUrl = "~/Staff Signature/" + fileuploadsign.FileName;
                    ViewState["signimg"] = fileuploadsign.FileName;
                    signdiv.Visible = false;
                }
            }
        }
        catch { }
    }

    protected void sign_click(object sender, EventArgs e)
    {
        signdiv.Visible = true;
    }

    protected void btn_signclose_OnClick(object sender, EventArgs e)
    {
        signdiv.Visible = false;
    }

    protected void btn_photoadd_OnClick(object sender, EventArgs e)
    {
        photo_div.Visible = true;
    }

    protected void btn_uploadclose_OnClick(object sender, EventArgs e)
    {
        photo_div.Visible = false;
    }

    private string GetSelectedItemsValueAsString(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int j = 0; j < cblSelected.Items.Count; j++)
            {
                if (cblSelected.Items[j].Selected == true)
                {
                    if (sbSelected.Length == 0)
                        sbSelected.Append(Convert.ToString(cblSelected.Items[j].Value));
                    else
                        sbSelected.Append("','" + Convert.ToString(cblSelected.Items[j].Value));
                }
            }
        }
        catch { sbSelected.Clear(); }
        return sbSelected.ToString();
    }

    private string GetSelectedItemsText(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int j = 0; j < cblSelected.Items.Count; j++)
            {
                if (cblSelected.Items[j].Selected == true)
                {
                    if (sbSelected.Length == 0)
                        sbSelected.Append(Convert.ToString(cblSelected.Items[j].Text));
                    else
                        sbSelected.Append("','" + Convert.ToString(cblSelected.Items[j].Text));
                }
            }
        }
        catch { sbSelected.Clear(); }
        return sbSelected.ToString();
    }

    private DataTable getadminheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Name Of The Committee");
        dt.Columns.Add("From");
        dt.Columns.Add("To");
        dt.Columns.Add("Nature Of Duty");
        dt.Columns.Add("Achievements Made During This Period");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getprofheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Name");
        dt.Columns.Add("Address");
        dt.Columns.Add("Joined Year");
        dt.Columns.Add("Membership No");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getguideheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Year");
        dt.Columns.Add("Nature Of The Guideship(Ph.D/Project)");
        dt.Columns.Add("Title Of The Project/Thesis");
        dt.Columns.Add("");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getpatentheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Year");
        dt.Columns.Add("Patent Given By(Authority Name)");
        dt.Columns.Add("Address");
        dt.Columns.Add("Title Of The Patent");
        dt.Columns.Add("Approval letter No");
        dt.Columns.Add("Approval date");
        dt.Columns.Add("Certificate No");
        dt.Columns.Add("Certificate Date");
        dt.Columns.Add("");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getpgrantsheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Year");
        dt.Columns.Add("Project Grant Receievd Name ");
        dt.Columns.Add("Project Grant Receievd Address");
        dt.Columns.Add("Title Of The Projects");
        dt.Columns.Add("Amount Of Grant Receieved");
        dt.Columns.Add("Letter No ");
        dt.Columns.Add("Date");
        dt.Columns.Add("");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getresearchheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Name");
        dt.Columns.Add("Type");
        dt.Columns.Add("Student Research Type");
        dt.Columns.Add("Remarks");
        dt.Columns.Add("");
        dt.Columns.Add("");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getpdetheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Title");
        dt.Columns.Add("From");
        dt.Columns.Add("To");
        dt.Columns.Add("Remarks");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getawardheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Year");
        dt.Columns.Add("Name Of The Award");
        dt.Columns.Add("Name Of The Organization");
        dt.Columns.Add("Address");
        dt.Columns.Add("Nature of the Award");
        dt.Columns.Add("");
        dt.Columns.Add("");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable geteditbkheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Type");
        dt.Columns.Add("Year Of Publication");
        dt.Columns.Add("Name of the Publisher");
        dt.Columns.Add("Address Of The Publisher");
        dt.Columns.Add("Title Of The Book");
        dt.Columns.Add("Cost Of The Book");
        dt.Columns.Add("");
        dt.Columns.Add("");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getbookheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Year Of Publication");
        dt.Columns.Add("Name Of The Publisher");
        dt.Columns.Add("Address Of The Publisher");
        dt.Columns.Add("Title Of The Book");
        dt.Columns.Add("Cost Of The Book");
        dt.Columns.Add("");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getjrnlpubheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("National/International");
        dt.Columns.Add("Name Of The Journal");
        dt.Columns.Add("Publisher");
        dt.Columns.Add("Volume");
        dt.Columns.Add("Issue No");
        dt.Columns.Add("Periadicity");
        dt.Columns.Add("Period");
        dt.Columns.Add("Page No");
        dt.Columns.Add("Title");
        dt.Columns.Add("");
        dt.Columns.Add("");
        dt.Columns.Add("");
        dt.Columns.Add("");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getsemorgpubheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Name Of The Program");
        dt.Columns.Add("From Date");
        dt.Columns.Add("To Date");
        dt.Columns.Add("Place");
        dt.Columns.Add("Title");
        dt.Columns.Add("Letter Ref No");
        dt.Columns.Add("");
        dt.Columns.Add("");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getsemheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Type");
        dt.Columns.Add("Name Of The Program");
        dt.Columns.Add("From Date");
        dt.Columns.Add("To Date");
        dt.Columns.Add("Place");
        dt.Columns.Add("Sponsored");
        dt.Columns.Add("Title");
        dt.Columns.Add("");
        dt.Columns.Add("");
        dt.Columns.Add("");
        dt.Columns.Add("");
        dt.Columns.Add("");
        return dt;
    }

    private DataTable getexpheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("College");
        dt.Columns.Add("From");
        dt.Columns.Add("To");
        dt.Columns.Add("Oraganization");
        dt.Columns.Add("Designation");
        dt.Columns.Add("Experience in");
        dt.Columns.Add("Year");
        dt.Columns.Add("Month");
        dt.Columns.Add("Salary");
        dt.Columns.Add("Reasons for relieving");
        dt.Columns.Add("Duties");
        dt.Columns.Add("Oraganization_code");
        dt.Columns.Add("Designation_code");
        dt.Columns.Add("Experiencein_code");
        dt.Columns.Add("Reasonsrelieving_code");
        dt.Columns.Add("Attachment");//delsi
        return dt;
    }

    private DataTable getothercertificatehead(DataTable dt)//delsi2210
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("CertificateName");
        dt.Columns.Add("CertificateNumber");
        return dt;
    }

    private DataTable getqualheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Graduation");
        dt.Columns.Add("Degree");
        dt.Columns.Add("Specialization");
        dt.Columns.Add("Year Of Passing");
        dt.Columns.Add("University");
        dt.Columns.Add("Institution");
        dt.Columns.Add("Percentage");
        dt.Columns.Add("Grade");
        dt.Columns.Add("Class");
        dt.Columns.Add("Graduation_code");
        dt.Columns.Add("Degree_code");
        dt.Columns.Add("Specialization_code");
        dt.Columns.Add("University_code");
        dt.Columns.Add("Institution_code");
        return dt;
    }

    private DataTable getfamilyheader(DataTable dt)
    {
        dt.Columns.Add("S.No");
        dt.Columns.Add("Familyname");
        dt.Columns.Add("Age");
        dt.Columns.Add("Gender");
        dt.Columns.Add("Relationship");
        dt.Columns.Add("Relationship_code");
        dt.Columns.Add("Qualification");
        dt.Columns.Add("Qualification_code");
        dt.Columns.Add("Status");
        dt.Columns.Add("Statuscode");
        dt.Columns.Add("Income");
        return dt;
    }

    private void chkchange(CheckBox chkchange, CheckBoxList chklstchange, TextBox txtchange, string label)
    {
        try
        {
            if (chkchange.Checked == true)
            {
                for (int i = 0; i < chklstchange.Items.Count; i++)
                {
                    chklstchange.Items[i].Selected = true;
                }
                txtchange.Text = label + "(" + Convert.ToString(chklstchange.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < chklstchange.Items.Count; i++)
                {
                    chklstchange.Items[i].Selected = false;
                }
                txtchange.Text = "--Select--";
            }
        }
        catch { }
    }

    private void chklstchange(CheckBox chkchange, CheckBoxList chklstchange, TextBox txtchange, string label)
    {
        try
        {
            txtchange.Text = "--Select--";
            chkchange.Checked = false;
            int count = 0;
            for (int i = 0; i < chklstchange.Items.Count; i++)
            {
                if (chklstchange.Items[i].Selected == true)
                    count = count + 1;
            }
            if (count > 0)
            {
                txtchange.Text = label + "(" + count + ")";
                if (count == chklstchange.Items.Count)
                    chkchange.Checked = true;
            }
        }
        catch { }
    }

    private string getappcode(string setting, DataSet dsacr, string collcode)
    {
        string[] aplval = new string[5];
        string[] splval = new string[5];
        string code = "";
        string catacr = "";
        string getdsval = "";
        int startno = 0;
        int size = 0;
        string getval = "";
        string colacr = "";
        DataSet dsgetacr = new DataSet();
        string lastval = "";
        string newitemcode = "";

        try
        {
            if (setting.Trim() != "0" && setting.Trim() != "" && setting.Trim() != null && dsacr.Tables.Count > 0 && dsacr.Tables[0].Rows.Count > 0)
            {
                aplval = setting.Split(',');
                if (aplval.Contains("2"))
                {
                    getdsval = Convert.ToString(dsacr.Tables[0].Rows[0]["SettingValues"]);
                    if (getdsval.Trim() != "")
                    {
                        splval = getdsval.Split(';');
                        if (splval.Length > 0)
                        {
                            for (int ik = 0; ik < splval.Length; ik++)
                            {
                                if (splval[ik] == "1")
                                {
                                    string getcolacr = d2.GetFunction("select Coll_acronymn from collinfo where college_code='" + collcode + "'");   //modified By Jeyaprakash
                                    if (getcolacr.Trim() != "0" && getcolacr.Trim() != "" && getcolacr.Trim() != null)
                                        catacr = catacr + getcolacr;
                                }
                                if (splval[ik] == "3")
                                    catacr = catacr + Convert.ToString(dsacr.Tables[0].Rows[0]["GeneralAcr"]);
                            }
                        }
                    }

                    string getcodacr = "select appl_no from staff_appl_master where appl_no like '" + catacr + "%' and college_code='" + collcode + "' order by LEN(appl_no),appl_no ";
                    dsgetacr.Clear();
                    dsgetacr = d2.select_method_wo_parameter(getcodacr, "Text");
                    if (dsgetacr.Tables.Count > 0 && dsgetacr.Tables[0].Rows.Count > 0)
                    {
                        string itemcode = Convert.ToString(dsgetacr.Tables[0].Rows[dsgetacr.Tables[0].Rows.Count - 1]["appl_no"]);
                        string itemacr = Convert.ToString(catacr);
                        int len = itemacr.Length;
                        itemcode = itemcode.Remove(0, len);
                        int len1 = Convert.ToString(itemcode).Length;
                        string newnumber = Convert.ToString((Convert.ToInt32(itemcode) + 1));
                        len = Convert.ToString(newnumber).Length;
                        len1 = len1 - len;
                        if (len1 == 2)
                            newitemcode = "00" + newnumber;
                        else if (len1 == 1)
                            newitemcode = "0" + newnumber;
                        else if (len1 == 3)
                            newitemcode = "000" + newnumber;
                        else if (len1 == 4)
                            newitemcode = "0000" + newnumber;
                        else if (len1 == 5)
                            newitemcode = "00000" + newnumber;
                        else if (len1 == 6)
                            newitemcode = "000000" + newnumber;
                        else
                            newitemcode = Convert.ToString(newnumber);
                        if (newitemcode.Trim() != "")
                            newitemcode = itemacr + newitemcode;
                        code = newitemcode;
                    }
                    else
                    {
                        Int32.TryParse(Convert.ToString(dsacr.Tables[0].Rows[0]["StartNo"]), out startno);
                        Int32.TryParse(Convert.ToString(dsacr.Tables[0].Rows[0]["SerialSize"]), out size);
                        int startlen = Convert.ToString(startno).Trim().Length;
                        int totsize = size - startlen;
                        for (int ik = 0; ik < totsize; ik++)
                        {
                            getval = getval + Convert.ToString("0");
                        }
                        code = Convert.ToString(catacr) + getval + Convert.ToString(startno);
                    }
                }
                else
                    code = "";
            }
            else
                code = "";
        }
        catch { }
        return code;
    }

    protected void rdb_cash_Clcik(object sender, EventArgs e)
    {
        CreditTable.Visible = false;
        CreditTable1.Visible = false;
    }

    protected void rdb_cheque_Clcik(object sender, EventArgs e)
    {
        CreditTable.Visible = false;
        CreditTable1.Visible = false;
    }

    protected void rdb_credit_Clcik(object sender, EventArgs e)
    {
        CreditTable.Visible = true;
        CreditTable1.Visible = true;
    }

    private string rollnoupdate(string oldstaffcode, string scode)
    {
        string upquery = "";
        try
        {
            upquery = upquery + " update Borrow set Roll_No='" + scode + "' where Roll_No='" + oldstaffcode + "' and Is_Staff = '1'";
            upquery = upquery + " update Fine_Details set Roll_No='" + scode + "' where Roll_No='" + oldstaffcode + "' and Is_Staff = '1'";
            upquery = upquery + " update TokenDetails set Roll_No='" + scode + "' where Roll_No='" + oldstaffcode + "' and Is_Staff = '1'";
            upquery = upquery + " update Lib_Master set Code='" + scode + "' where Code='" + oldstaffcode + "' and Is_Staff = '1'";
        }
        catch { }
        return upquery;
    }

    private string substaffcodeupdate(string oldstaffcode, string scode)
    {
        string upquery = "";
        try
        {
            upquery = upquery + " update Semester_Schedule set mon1 = replace(mon1, '" + oldstaffcode + "','" + scode + "'),mon2=REPLACE(mon2,'" + oldstaffcode + "','" + scode + "'),mon3 = replace(mon3, '" + oldstaffcode + "','" + scode + "'),mon4=REPLACE(mon4,'" + oldstaffcode + "','" + scode + "'),mon5 = replace(mon5, '" + oldstaffcode + "','" + scode + "'),mon6=REPLACE(mon6,'" + oldstaffcode + "','" + scode + "'),mon7 = replace(mon7, '" + oldstaffcode + "','" + scode + "'),mon8=REPLACE(mon8,'" + oldstaffcode + "','" + scode + "'),mon9 = replace(mon9, '" + oldstaffcode + "','" + scode + "'),tue1 = replace(tue1, '" + oldstaffcode + "','" + scode + "'),tue2=REPLACE(tue2,'" + oldstaffcode + "','" + scode + "'),tue3 = replace(tue3, '" + oldstaffcode + "','" + scode + "'),tue4=REPLACE(tue4,'" + oldstaffcode + "','" + scode + "'),tue5 = replace(tue5, '" + oldstaffcode + "','" + scode + "'),tue6=REPLACE(tue6,'" + oldstaffcode + "','" + scode + "'),tue7 = replace(tue7, '" + oldstaffcode + "','" + scode + "'),tue8=REPLACE(tue8,'" + oldstaffcode + "','" + scode + "'),tue9 = replace(tue9, '" + oldstaffcode + "','" + scode + "'),wed1 = replace(wed1, '" + oldstaffcode + "','" + scode + "'),wed2=REPLACE(wed2,'" + oldstaffcode + "','" + scode + "'),wed3 = replace(wed3, '" + oldstaffcode + "','" + scode + "'),wed4=REPLACE(wed4,'" + oldstaffcode + "','" + scode + "'),wed5 = replace(wed5, '" + oldstaffcode + "','" + scode + "'),wed6=REPLACE(wed6,'" + oldstaffcode + "','" + scode + "'),wed7 = replace(wed7, '" + oldstaffcode + "','" + scode + "'),wed8=REPLACE(wed8,'" + oldstaffcode + "','" + scode + "'),wed9 = replace(wed9, '" + oldstaffcode + "','" + scode + "'),thu1 = replace(thu1, '" + oldstaffcode + "','" + scode + "'),thu2=REPLACE(thu2,'" + oldstaffcode + "','" + scode + "'),thu3 = replace(thu3, '" + oldstaffcode + "','" + scode + "'),thu4=REPLACE(thu4,'" + oldstaffcode + "','" + scode + "'),thu5 = replace(thu5, '" + oldstaffcode + "','" + scode + "'),thu6=REPLACE(thu6,'" + oldstaffcode + "','" + scode + "'),thu7 = replace(thu7, '" + oldstaffcode + "','" + scode + "'),thu8=REPLACE(thu8,'" + oldstaffcode + "','" + scode + "'),thu9 = replace(thu9, '" + oldstaffcode + "','" + scode + "'),fri1 = replace(fri1, '" + oldstaffcode + "','" + scode + "'),fri2=REPLACE(fri2,'" + oldstaffcode + "','" + scode + "'),fri3 = replace(fri3, '" + oldstaffcode + "','" + scode + "'),fri4=REPLACE(fri4,'" + oldstaffcode + "','" + scode + "'),fri5 = replace(fri5, '" + oldstaffcode + "','" + scode + "'),fri6=REPLACE(fri6,'" + oldstaffcode + "','" + scode + "'),fri7 = replace(fri7, '" + oldstaffcode + "','" + scode + "'),fri8=REPLACE(fri8,'" + oldstaffcode + "','" + scode + "'),fri9 = replace(fri9, '" + oldstaffcode + "','" + scode + "'),sat1 = replace(sat1, '" + oldstaffcode + "','" + scode + "'),sat2=REPLACE(sat2,'" + oldstaffcode + "','" + scode + "'),sat3 = replace(sat3, '" + oldstaffcode + "','" + scode + "'),sat4=REPLACE(sat4,'" + oldstaffcode + "','" + scode + "'),sat5 = replace(sat5, '" + oldstaffcode + "','" + scode + "'),sat6=REPLACE(sat6,'" + oldstaffcode + "','" + scode + "'),sat7 = replace(sat7, '" + oldstaffcode + "','" + scode + "'),sat8=REPLACE(sat8,'" + oldstaffcode + "','" + scode + "'),sat9 = replace(sat9, '" + oldstaffcode + "','" + scode + "'),sun1 = replace(sun1, '" + oldstaffcode + "','" + scode + "'),sun2=REPLACE(sun2,'" + oldstaffcode + "','" + scode + "'),sun3 = replace(sun3, '" + oldstaffcode + "','" + scode + "'),sun4=REPLACE(sun4,'" + oldstaffcode + "','" + scode + "'),sun5 = replace(sun5, '" + oldstaffcode + "','" + scode + "'),sun6=REPLACE(sun6,'" + oldstaffcode + "','" + scode + "'),sun7 = replace(sun7, '" + oldstaffcode + "','" + scode + "'),sun8=REPLACE(sun8,'" + oldstaffcode + "','" + scode + "'),sun9 = replace(sun9, '" + oldstaffcode + "','" + scode + "') where mon1 like '%" + oldstaffcode + "%' or mon2 like '%" + oldstaffcode + "%' or mon3 like '%" + oldstaffcode + "%' or mon4 like '%" + oldstaffcode + "%' or mon5 like '%" + oldstaffcode + "%' or mon6 like '%" + oldstaffcode + "%' or mon7 like '%" + oldstaffcode + "%' or mon8 like '%" + oldstaffcode + "%' or mon9 like '%" + oldstaffcode + "%' or tue1 like '%" + oldstaffcode + "%' or tue2 like '%" + oldstaffcode + "%' or tue3 like '%" + oldstaffcode + "%' or tue4 like '%" + oldstaffcode + "%' or tue5 like '%" + oldstaffcode + "%' or tue6 like '%" + oldstaffcode + "%' or tue7 like '%" + oldstaffcode + "%' or tue8 like '%" + oldstaffcode + "%' or tue9 like '%" + oldstaffcode + "%' or wed1 like '%" + oldstaffcode + "%' or wed2 like '%" + oldstaffcode + "%' or wed3 like '%" + oldstaffcode + "%' or wed4 like '%" + oldstaffcode + "%' or wed5 like '%" + oldstaffcode + "%' or wed6 like '%" + oldstaffcode + "%' or wed7 like '%" + oldstaffcode + "%' or wed8 like '%" + oldstaffcode + "%' or wed9 like '%" + oldstaffcode + "%' or thu1 like '%" + oldstaffcode + "%' or thu2 like '%" + oldstaffcode + "%' or thu3 like '%" + oldstaffcode + "%' or thu4 like '%" + oldstaffcode + "%' or thu5 like '%" + oldstaffcode + "%' or thu6 like '%" + oldstaffcode + "%' or thu7 like '%" + oldstaffcode + "%' or thu8 like '%" + oldstaffcode + "%' or thu9 like '%" + oldstaffcode + "%' or fri1 like '%" + oldstaffcode + "%' or fri2 like '%" + oldstaffcode + "%' or fri3 like '%" + oldstaffcode + "%' or fri4 like '%" + oldstaffcode + "%' or fri5 like '%" + oldstaffcode + "%' or fri6 like '%" + oldstaffcode + "%' or fri7 like '%" + oldstaffcode + "%' or fri8 like '%" + oldstaffcode + "%' or fri9 like '%" + oldstaffcode + "%' or sat1 like '%" + oldstaffcode + "%' or sat2 like '%" + oldstaffcode + "%' or sat3 like '%" + oldstaffcode + "%' or sat4 like '%" + oldstaffcode + "%' or sat5 like '%" + oldstaffcode + "%' or sat6 like '%" + oldstaffcode + "%' or sat7 like '%" + oldstaffcode + "%' or sat8 like '%" + oldstaffcode + "%' or sat9 like '%" + oldstaffcode + "%' or sun1 like '%" + oldstaffcode + "%' or sun2 like '%" + oldstaffcode + "%' or sun3 like '%" + oldstaffcode + "%' or sun4 like '%" + oldstaffcode + "%' or sun5 like '%" + oldstaffcode + "%' or sun6 like '%" + oldstaffcode + "%' or sun7 like '%" + oldstaffcode + "%' or sun8 like '%" + oldstaffcode + "%' or sun9 like '%" + oldstaffcode + "%'";

            upquery = upquery + " update Alternate_Schedule set mon1 = replace(mon1, '" + oldstaffcode + "','" + scode + "'),mon2=REPLACE(mon2,'" + oldstaffcode + "','" + scode + "'),mon3 = replace(mon3, '" + oldstaffcode + "','" + scode + "'),mon4=REPLACE(mon4,'" + oldstaffcode + "','" + scode + "'),mon5 = replace(mon5, '" + oldstaffcode + "','" + scode + "'),mon6=REPLACE(mon6,'" + oldstaffcode + "','" + scode + "'),mon7 = replace(mon7, '" + oldstaffcode + "','" + scode + "'),mon8=REPLACE(mon8,'" + oldstaffcode + "','" + scode + "'),mon9 = replace(mon9, '" + oldstaffcode + "','" + scode + "'),mon10 = replace(mon10, '" + oldstaffcode + "','" + scode + "'),tue1 = replace(tue1, '" + oldstaffcode + "','" + scode + "'),tue2=REPLACE(tue2,'" + oldstaffcode + "','" + scode + "'),tue3 = replace(tue3, '" + oldstaffcode + "','" + scode + "'),tue4=REPLACE(tue4,'" + oldstaffcode + "','" + scode + "'),tue5 = replace(tue5, '" + oldstaffcode + "','" + scode + "'),tue6=REPLACE(tue6,'" + oldstaffcode + "','" + scode + "'),tue7 = replace(tue7, '" + oldstaffcode + "','" + scode + "'),tue8=REPLACE(tue8,'" + oldstaffcode + "','" + scode + "'),tue9 = replace(tue9, '" + oldstaffcode + "','" + scode + "'),tue10 = replace(tue10, '" + oldstaffcode + "','" + scode + "'),wed1 = replace(wed1, '" + oldstaffcode + "','" + scode + "'),wed2=REPLACE(wed2,'" + oldstaffcode + "','" + scode + "'),wed3 = replace(wed3, '" + oldstaffcode + "','" + scode + "'),wed4=REPLACE(wed4,'" + oldstaffcode + "','" + scode + "'),wed5 = replace(wed5, '" + oldstaffcode + "','" + scode + "'),wed6=REPLACE(wed6,'" + oldstaffcode + "','" + scode + "'),wed7 = replace(wed7, '" + oldstaffcode + "','" + scode + "'),wed8=REPLACE(wed8,'" + oldstaffcode + "','" + scode + "'),wed9 = replace(wed9, '" + oldstaffcode + "','" + scode + "'),wed10 = replace(wed10, '" + oldstaffcode + "','" + scode + "'),thu1 = replace(thu1, '" + oldstaffcode + "','" + scode + "'),thu2=REPLACE(thu2,'" + oldstaffcode + "','" + scode + "'),thu3 = replace(thu3, '" + oldstaffcode + "','" + scode + "'),thu4=REPLACE(thu4,'" + oldstaffcode + "','" + scode + "'),thu5 = replace(thu5, '" + oldstaffcode + "','" + scode + "'),thu6=REPLACE(thu6,'" + oldstaffcode + "','" + scode + "'),thu7 = replace(thu7, '" + oldstaffcode + "','" + scode + "'),thu8=REPLACE(thu8,'" + oldstaffcode + "','" + scode + "'),thu9 = replace(thu9, '" + oldstaffcode + "','" + scode + "'),thu10 = replace(thu10, '" + oldstaffcode + "','" + scode + "'),fri1 = replace(fri1, '" + oldstaffcode + "','" + scode + "'),fri2=REPLACE(fri2,'" + oldstaffcode + "','" + scode + "'),fri3 = replace(fri3, '" + oldstaffcode + "','" + scode + "'),fri4=REPLACE(fri4,'" + oldstaffcode + "','" + scode + "'),fri5 = replace(fri5, '" + oldstaffcode + "','" + scode + "'),fri6=REPLACE(fri6,'" + oldstaffcode + "','" + scode + "'),fri7 = replace(fri7, '" + oldstaffcode + "','" + scode + "'),fri8=REPLACE(fri8,'" + oldstaffcode + "','" + scode + "'),fri9 = replace(fri9, '" + oldstaffcode + "','" + scode + "'),fri10 = replace(fri10, '" + oldstaffcode + "','" + scode + "'),sat1 = replace(sat1, '" + oldstaffcode + "','" + scode + "'),sat2=REPLACE(sat2,'" + oldstaffcode + "','" + scode + "'),sat3 = replace(sat3, '" + oldstaffcode + "','" + scode + "'),sat4=REPLACE(sat4,'" + oldstaffcode + "','" + scode + "'),sat5 = replace(sat5, '" + oldstaffcode + "','" + scode + "'),sat6=REPLACE(sat6,'" + oldstaffcode + "','" + scode + "'),sat7 = replace(sat7, '" + oldstaffcode + "','" + scode + "'),sat8=REPLACE(sat8,'" + oldstaffcode + "','" + scode + "'),sat9 = replace(sat9, '" + oldstaffcode + "','" + scode + "'),sat10 = replace(sat10, '" + oldstaffcode + "','" + scode + "'),sun1 = replace(sun1, '" + oldstaffcode + "','" + scode + "'),sun2=REPLACE(sun2,'" + oldstaffcode + "','" + scode + "'),sun3 = replace(sun3, '" + oldstaffcode + "','" + scode + "'),sun4=REPLACE(sun4,'" + oldstaffcode + "','" + scode + "'),sun5 = replace(sun5, '" + oldstaffcode + "','" + scode + "'),sun6=REPLACE(sun6,'" + oldstaffcode + "','" + scode + "'),sun7 = replace(sun7, '" + oldstaffcode + "','" + scode + "'),sun8=REPLACE(sun8,'" + oldstaffcode + "','" + scode + "'),sun9 = replace(sun9, '" + oldstaffcode + "','" + scode + "'),sun10 = replace(sun10, '" + oldstaffcode + "','" + scode + "') where mon1 like '%" + oldstaffcode + "%' or mon2 like '%" + oldstaffcode + "%' or mon3 like '%" + oldstaffcode + "%' or mon4 like '%" + oldstaffcode + "%' or mon5 like '%" + oldstaffcode + "%' or mon6 like '%" + oldstaffcode + "%' or mon7 like '%" + oldstaffcode + "%' or mon8 like '%" + oldstaffcode + "%' or mon9 like '%" + oldstaffcode + "%' or mon10 like '%" + oldstaffcode + "%' or tue1 like '%" + oldstaffcode + "%' or tue2 like '%" + oldstaffcode + "%' or tue3 like '%" + oldstaffcode + "%' or tue4 like '%" + oldstaffcode + "%' or tue5 like '%" + oldstaffcode + "%' or tue6 like '%" + oldstaffcode + "%' or tue7 like '%" + oldstaffcode + "%' or tue8 like '%" + oldstaffcode + "%' or tue9 like '%" + oldstaffcode + "%' or tue10 like '%" + oldstaffcode + "%' or wed1 like '%" + oldstaffcode + "%' or wed2 like '%" + oldstaffcode + "%' or wed3 like '%" + oldstaffcode + "%' or wed4 like '%" + oldstaffcode + "%' or wed5 like '%" + oldstaffcode + "%' or wed6 like '%" + oldstaffcode + "%' or wed7 like '%" + oldstaffcode + "%' or wed8 like '%" + oldstaffcode + "%' or wed9 like '%" + oldstaffcode + "%' or wed10 like '%" + oldstaffcode + "%' or thu1 like '%" + oldstaffcode + "%' or thu2 like '%" + oldstaffcode + "%' or thu3 like '%" + oldstaffcode + "%' or thu4 like '%" + oldstaffcode + "%' or thu5 like '%" + oldstaffcode + "%' or thu6 like '%" + oldstaffcode + "%' or thu7 like '%" + oldstaffcode + "%' or thu8 like '%" + oldstaffcode + "%' or thu9 like '%" + oldstaffcode + "%' or thu10 like '%" + oldstaffcode + "%' or fri1 like '%" + oldstaffcode + "%' or fri2 like '%" + oldstaffcode + "%' or fri3 like '%" + oldstaffcode + "%' or fri4 like '%" + oldstaffcode + "%' or fri5 like '%" + oldstaffcode + "%' or fri6 like '%" + oldstaffcode + "%' or fri7 like '%" + oldstaffcode + "%' or fri8 like '%" + oldstaffcode + "%' or fri9 like '%" + oldstaffcode + "%' or fri10 like '%" + oldstaffcode + "%' or sat1 like '%" + oldstaffcode + "%' or sat2 like '%" + oldstaffcode + "%' or sat3 like '%" + oldstaffcode + "%' or sat4 like '%" + oldstaffcode + "%' or sat5 like '%" + oldstaffcode + "%' or sat6 like '%" + oldstaffcode + "%' or sat7 like '%" + oldstaffcode + "%' or sat8 like '%" + oldstaffcode + "%' or sat9 like '%" + oldstaffcode + "%' or sat10 like '%" + oldstaffcode + "%' or sun1 like '%" + oldstaffcode + "%' or sun2 like '%" + oldstaffcode + "%' or sun3 like '%" + oldstaffcode + "%' or sun4 like '%" + oldstaffcode + "%' or sun5 like '%" + oldstaffcode + "%' or sun6 like '%" + oldstaffcode + "%' or sun7 like '%" + oldstaffcode + "%' or sun8 like '%" + oldstaffcode + "%' or sun9 like '%" + oldstaffcode + "%' or sun10 like '%" + oldstaffcode + "%'";
        }
        catch { }
        return upquery;
    }

    private string staffcodeupdate(string oldstaffcode, string scode)
    {
        string upquery = "";
        try
        {
            string q1 = "";
            q1 = " SELECT TABLE_NAME,COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_NAME in('staff_code','Staffcode')and TABLE_NAME not in('staffmaster','stafftrans','external_staff')";
            ds.Clear();
            ds = d2.select_method_wo_parameter(q1, "text");
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                upquery += " update " + Convert.ToString(ds.Tables[0].Rows[i][0]) + " set " + Convert.ToString(ds.Tables[0].Rows[i][1]) + "='" + scode + "' where " + Convert.ToString(ds.Tables[0].Rows[i][1]) + "='" + oldstaffcode + "'";
            }
        }
        catch { }
        return upquery;
    }

    protected void ddl_appstype_Change(object sender, EventArgs e)
    {
        txtStfType.Text = "";
        DateTime BirthDate = new DateTime();
        DateTime birthdayDate = new DateTime();
        DateTime RetireDate = new DateTime();
        DateTime RetiringDate = new DateTime();
        string Retr_Date = "";
        int RetAge = 0;

        int retire_age = 0;
        DataSet dsGetRetDt = new DataSet();
        DataSet settingRetireDate = new DataSet();
        string GetRetireAge = string.Empty;
        string RetireAge = string.Empty;
        if (!String.IsNullOrEmpty(txt_applno.Text.Trim()))
        {
            string SelGetRetDt = "select Convert(varchar(10),retr_date,103) as retr_datetxt,Convert(varchar(10),retr_date,101) as retr_date,Convert(varchar(10),date_of_birth,101) as birthday from staff_appl_master sa,staffmaster sm where sm.appl_no=sa.appl_no and sa.appl_no='" + Convert.ToString(txt_applno.Text.Trim()) + "'";
            //delsi04/04/2018
            string setretireAge = "select Convert(varchar(10),date_of_birth,101) as birthday from staff_appl_master where appl_no='" + Convert.ToString(txt_applno.Text.Trim()) + "'";
            settingRetireDate = d2.select_method_wo_parameter(setretireAge, "Text");
            if (settingRetireDate.Tables.Count > 0 && settingRetireDate.Tables[0].Rows.Count > 0)
            {
                if (!String.IsNullOrEmpty(Convert.ToString(settingRetireDate.Tables[0].Rows[0]["birthday"])) && Convert.ToString(settingRetireDate.Tables[0].Rows[0]["birthday"]) != "01/01/1900")
                {
                    birthdayDate = Convert.ToDateTime(Convert.ToString(settingRetireDate.Tables[0].Rows[0]["birthday"]));
                    RetireAge = d2.GetFunction("select value from Master_Settings where settings='Retire_Age_Settings' and value like '" + Convert.ToString(ddl_appstype.SelectedItem.Text) + "%'");
                    if (RetireAge.Contains('-'))
                    {

                        if (!String.IsNullOrEmpty(RetireAge.Trim()) && RetireAge.Trim() != "0")
                        {

                            string[] splRetAges = RetireAge.Trim().Split('-');
                            Int32.TryParse(splRetAges[1], out retire_age);
                            if (retire_age > 0)
                                RetiringDate = birthdayDate.AddYears(retire_age);
                            if (RetiringDate.ToString("MM/dd/yyyy") != "01/01/1900" && RetiringDate != null)
                                txt_retire.Text = RetiringDate.ToString("dd/MM/yyyy");
                        }
                    }
                    else
                    {
                        RetireAge = d2.GetFunction("select template from Master_Settings where settings='Retire_Age_Settings' and value like '" + Convert.ToString(ddl_appstype.SelectedItem.Text) + "%'");
                        if (!String.IsNullOrEmpty(RetireAge.Trim()) && RetireAge.Trim() != "0")
                        {

                            if (RetireAge != "")
                                RetiringDate = birthdayDate.AddYears(Convert.ToInt32(RetireAge));
                            if (RetiringDate.ToString("MM/dd/yyyy") != "01/01/1900" && RetiringDate != null)
                                txt_retire.Text = RetiringDate.ToString("dd/MM/yyyy");

                        }
                    }

                }


            }
            //delsi04/04/2018
            dsGetRetDt.Clear();
            dsGetRetDt = d2.select_method_wo_parameter(SelGetRetDt, "Text");
            if (dsGetRetDt.Tables.Count > 0 && dsGetRetDt.Tables[0].Rows.Count > 0)
            {
                if (!String.IsNullOrEmpty(Convert.ToString(dsGetRetDt.Tables[0].Rows[0]["birthday"])) && Convert.ToString(dsGetRetDt.Tables[0].Rows[0]["birthday"]) != "01/01/1900" && !String.IsNullOrEmpty(Convert.ToString(dsGetRetDt.Tables[0].Rows[0]["retr_date"])) && Convert.ToString(dsGetRetDt.Tables[0].Rows[0]["retr_date"]) != "01/01/1900")
                {
                    BirthDate = Convert.ToDateTime(Convert.ToString(dsGetRetDt.Tables[0].Rows[0]["birthday"]));
                    Retr_Date = Convert.ToString(dsGetRetDt.Tables[0].Rows[0]["retr_datetxt"]);
                }
                if (ddl_appstype.SelectedItem.Text.Trim() == "Others")
                {
                    trStfType.Visible = true;
                    if (!String.IsNullOrEmpty(Retr_Date) && Retr_Date.Trim() != "01/01/1900")
                        txt_retire.Text = Retr_Date;
                    else
                        txt_retire.Text = DateTime.Now.ToString("dd/MM/yyyy");
                }
                else
                {
                    trStfType.Visible = false;
                    GetRetireAge = d2.GetFunction("select value from Master_Settings where settings='Retire_Age_Settings' and value like '" + Convert.ToString(ddl_appstype.SelectedItem.Text) + "%'");
                    if (GetRetireAge.Contains('-'))
                    {
                        if (!String.IsNullOrEmpty(GetRetireAge.Trim()) && GetRetireAge.Trim() != "0")
                        {
                            string[] splRetAge = GetRetireAge.Trim().Split('-');
                            Int32.TryParse(splRetAge[1], out RetAge);
                            if (RetAge > 0)
                                RetireDate = BirthDate.AddYears(RetAge);
                            if (RetireDate.ToString("MM/dd/yyyy") != "01/01/1900" && RetireDate != null)
                                txt_retire.Text = RetireDate.ToString("dd/MM/yyyy");
                            else
                            {
                                if (!String.IsNullOrEmpty(Retr_Date) && Retr_Date.Trim() != "01/01/1900")
                                    txt_retire.Text = Retr_Date;
                                else
                                    txt_retire.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            }
                        }
                        else
                        {
                            if (!String.IsNullOrEmpty(Retr_Date) && Retr_Date.Trim() != "01/01/1900")
                                txt_retire.Text = Retr_Date;
                            else
                                txt_retire.Text = DateTime.Now.ToString("dd/MM/yyyy");
                        }
                    }
                    else
                    {
                        GetRetireAge = d2.GetFunction("select template from Master_Settings where settings='Retire_Age_Settings' and value like '" + Convert.ToString(ddl_appstype.SelectedItem.Text) + "%'");
                        if (!String.IsNullOrEmpty(GetRetireAge.Trim()) && GetRetireAge.Trim() != "0")
                        {
                            RetireDate = BirthDate.AddYears(Convert.ToInt32(GetRetireAge));
                            if (RetireDate.ToString("MM/dd/yyyy") != "01/01/1900" && RetireDate != null)
                                txt_retire.Text = RetireDate.ToString("dd/MM/yyyy");
                            else
                            {
                                if (!String.IsNullOrEmpty(Retr_Date) && Retr_Date.Trim() != "01/01/1900")
                                    txt_retire.Text = Retr_Date;
                                else
                                    txt_retire.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            }

                        }
                        else
                        {
                            if (!String.IsNullOrEmpty(Retr_Date) && Retr_Date.Trim() != "01/01/1900")
                                txt_retire.Text = Retr_Date;
                            else
                                txt_retire.Text = DateTime.Now.ToString("dd/MM/yyyy");
                        }


                    }

                }
            }
        }
        else
        {
            if (ddl_appstype.SelectedItem.Text.Trim() == "Others")
                trStfType.Visible = true;
            else
                trStfType.Visible = false;
        }
    }

    protected void ddl_tocollege_onchange(object sender, EventArgs e)
    {   //bb 02/08/2017
        transpopbinddept();
        transpopdesign();
    }

    protected void transpopbinddept()
    {
        try
        {
            string activerow = "";
            string activecol = "";
            string scode = "";
            string collegecode1 = "";
            activerow = Fpspread1.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread1.ActiveSheetView.ActiveColumn.ToString();
            if (activerow.Trim() != "")
                scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text);
            string dept = d2.GetFunction("select Dept_Code from stafftrans where staff_code='" + scode + "' and latestrec='1'");
            ds.Clear();
            ddl_tdept.Items.Clear();
            string item = "select distinct dept_code,dept_name from hrdept_master where dept_code not in('" + dept + "') and college_code='" + Convert.ToString(ddl_tocollege.SelectedItem.Value) + "' order by dept_name";
            ds = d2.select_method_wo_parameter(item, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_tdept.DataSource = ds;
                ddl_tdept.DataTextField = "Dept_Name";
                ddl_tdept.DataValueField = "Dept_Code";
                ddl_tdept.DataBind();
            }
        }
        catch { }
    }

    protected void transpopdesign()
    {
        string activerow = "";
        string activecol = "";
        string scode = "";
        activerow = Fpspread1.ActiveSheetView.ActiveRow.ToString();
        activecol = Fpspread1.ActiveSheetView.ActiveColumn.ToString();
        if (activerow.Trim() != "")
            scode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text);
        string desig = d2.GetFunction("select desig_code from stafftrans where staff_code='" + scode + "' and latestrec='1'");
        ds.Clear();
        ddl_tdesig.Items.Clear();
        string statequery = "select distinct desig_code,desig_name from desig_master where collegeCode='" + Convert.ToString(ddl_tocollege.SelectedItem.Value) + "' order by desig_name";
        ds = da.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_tdesig.DataSource = ds;
            ddl_tdesig.DataTextField = "desig_name";
            ddl_tdesig.DataValueField = "desig_code";
            ddl_tdesig.DataBind();
            ddl_tdesig.Visible = true;
        }
    }

    protected void btnPriorityNo_Click(object sender, EventArgs e)//delsi1502
    {
        try
        {
            alertpopuppriority.Visible = false;
            lbl_alertpriority.Visible = false;
            appointed();
        }
        catch (Exception ex)
        {

        }

    }

    protected void btnPriorityYes_Click(object sender, EventArgs e)//delsi1502
    {
        try
        {
            appointed();
            alertpopuppriority.Visible = false;
            lbl_alertpriority.Visible = false;
            string appNo = Convert.ToString(ViewState["AppNum"]); //Convert.ToString(txt_applno.Text.Trim().ToUpper()); //txt_applno.Text.Trim().ToUpper();
            int priority_No = Convert.ToInt32(txt_priority.Text);
            Hashtable hat = new Hashtable();
            hat.Add("@PrintPriority", priority_No);
            hat.Add("@applno", appNo);
            if (appNo != "")
            {
                int val = d2.update_method_with_parameter("priorityproc", hat, "sp");
            }



        }
        catch (Exception ex)
        {

        }
    }

    protected void btnPriorityUpdateNo_Click(object sender, EventArgs e)//delsi1602
    {
        try
        {
            alertpopuppriority.Visible = false;
            lbl_alertpriority.Visible = false;
            update_method();
        }
        catch (Exception ex)
        {

        }

    }

    protected void btnPriorityUpdateYes_Click(object sender, EventArgs e)//delsi1602
    {
        try
        {

            string checkpriority = Convert.ToString(ViewState["checkpriority"]);
            DataSet dsprint = new DataSet();
            dsprint.Clear();
            if (checkpriority == "0")
            {
                update_method();
                alertpopuppriority.Visible = false;
                lbl_alertpriority.Visible = false;
                string appNo = Convert.ToString(ViewState["AppNum"]);
                int priority_No = Convert.ToInt32(txt_priority.Text);
                Hashtable hat = new Hashtable();
                hat.Add("@PrintPriority", priority_No);
                hat.Add("@applno", appNo);
                if (appNo != "")
                {
                    int val = d2.update_method_with_parameter("priorityproc", hat, "sp");
                }
            }
            if (checkpriority == "1")
            {


                update_method();

                alertpopuppriority.Visible = false;
                lbl_alertpriority.Visible = false;
                string appNo = Convert.ToString(ViewState["AppNum"]);
                int priority_No = Convert.ToInt32(txt_priority.Text);

                string dept_code = Convert.ToString(ViewState["deptcode"]);

                string stftype = Convert.ToString(ViewState["stftype"]);

                string quer = " select  PrintPriority ,s.appl_no,st.dept_code from staffmaster s,stafftrans st,staff_appl_master a,hrdept_master dept,desig_master desig where s.staff_code=st.staff_code and s.appl_no=a.appl_no and st.dept_code=dept.dept_code and st.desig_code=desig.desig_code and s.college_code=dept.college_code and s.college_Code=desig.collegeCode and s.resign='0' and s.settled='0' and ISNULL(Discontinue,'0')='0' and st.latestrec='1' and s.college_Code='" + collegecode1 + "' and dept.dept_code in('" + dept_code + "')  and st.stftype in('" + stftype + "') order by PrintPriority desc";
                dsprint = d2.select_method_wo_parameter(quer, "text");
                DataView dv = new DataView();
                if (dsprint.Tables[0].Rows.Count > 0)
                {
                    int countupdate = 0;
                    int count1 = 0;
                    dsprint.Tables[0].DefaultView.RowFilter = " PrintPriority>='" + priority_No + "'";
                    dv = dsprint.Tables[0].DefaultView;
                    if (dv.Count > 0)
                    {
                        for (int i = 0; i < dv.Count; i++)
                        {
                            int getprintpriority = Convert.ToInt32(dv[i]["PrintPriority"]);
                            string app_no = Convert.ToString(dv[i]["appl_no"]);
                            string deptcode = Convert.ToString(dv[i]["dept_code"]);

                            getprintpriority = getprintpriority + 1;

                            string updateprint = "update staffmaster set PrintPriority='" + getprintpriority + "' where college_code='" + collegecode1 + "' and appl_no='" + app_no + "'";

                            countupdate = d2.update_method_wo_parameter(updateprint, "Text");
                        }

                        string update = "update staffmaster set PrintPriority='" + priority_No + "' where college_code='" + collegecode1 + "' and appl_no='" + appNo + "'";
                        count1 = d2.update_method_wo_parameter(update, "Text");
                    }

                }

            }


        }
        catch (Exception ex)
        {

        }
    }

    protected void loadClgBank()//popdesignationapt delsi2305
    {

        ds.Clear();
        ddl_colbank.Items.Clear();
        string collegecode1 = Convert.ToString(ddlcollege.SelectedValue);
        string statequery = "select distinct BankPK,BankName from FM_FinBankMaster where CollegeCode='" + collegecode1 + "'";
        ds = da.select_method_wo_parameter(statequery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_colbank.DataSource = ds;
            ddl_colbank.DataTextField = "BankName";
            ddl_colbank.DataValueField = "BankPK";
            ddl_colbank.DataBind();
            ddl_colbank.Items.Insert(0, new ListItem("Select", "0"));
        }
        else
        {
            ddl_colbank.Items.Insert(0, new ListItem("Select", "0"));

        }
    }

    #region Added by Saranya on 14/9/2018 For License Photo

    protected void licensePhoto_OnClick(object sender, EventArgs e)
    {
        LicenseDiv.Visible = true;
    }

    protected void btn_LicenseUpload_OnClick(object sender, EventArgs e)//sarann
    {
        try
        {
            ViewState["LicFrontimg"] = null;
            //string scode = txt_aptscode.Text;
            if (fileuploadLicFront.HasFile)
            {
                if (fileuploadLicFront.FileName.EndsWith(".jpg") || fileuploadLicFront.FileName.EndsWith(".JPG") || fileuploadLicFront.FileName.EndsWith(".JPEG") || fileuploadLicFront.FileName.EndsWith(".jpeg"))
                {
                    string stdphotopath = Server.MapPath("~/Staff Photo/") + fileuploadLicFront.FileName;
                    string stdphotoext = System.IO.Path.GetExtension(fileuploadLicFront.FileName);
                    fileuploadLicFront.SaveAs(stdphotopath);
                    if (File.Exists(HttpContext.Current.Server.MapPath("~/Staff Photo/" + fileuploadLicFront.FileName)))
                        ImgLicFront.ImageUrl = "~/Staff Photo/" + fileuploadLicFront.FileName;
                    ViewState["LicFrontimg"] = fileuploadLicFront.FileName;
                    //signdiv.Visible = false;
                }
            }
            ViewState["LicBackimg"] = null;
            //string scode = txt_aptscode.Text;
            if (fileuploadLicBack.HasFile)
            {
                if (fileuploadLicBack.FileName.EndsWith(".jpg") || fileuploadLicBack.FileName.EndsWith(".JPG") || fileuploadLicBack.FileName.EndsWith(".JPEG") || fileuploadLicBack.FileName.EndsWith(".jpeg"))
                {
                    string stdphotopath = Server.MapPath("~/Staff Photo/") + fileuploadLicBack.FileName;
                    string stdphotoext = System.IO.Path.GetExtension(fileuploadLicBack.FileName);
                    fileuploadLicBack.SaveAs(stdphotopath);
                    if (File.Exists(HttpContext.Current.Server.MapPath("~/Staff Photo/" + fileuploadLicBack.FileName)))
                        ImgLicBack.ImageUrl = "~/Staff Photo/" + fileuploadLicBack.FileName;
                    ViewState["LicBackimg"] = fileuploadLicBack.FileName;
                    //signdiv.Visible = false;
                }
            }
        }
        catch { }
    }

    protected void LicenseSave_OnClick(object sender, EventArgs e)
    {
        try
        {
            string LicFrontimg = Convert.ToString(ViewState["LicFrontimg"]);
            string LicBackimg = Convert.ToString(ViewState["LicBackimg"]);
            string scode = txt_aptscode.Text;
            string LicRenewDt = txtLicRenewDt.Text;
            string[] renewDt = LicRenewDt.Split('/');
            if (renewDt.Length == 3)
                LicRenewDt = renewDt[1] + "-" + renewDt[0] + "-" + renewDt[2];
            if (LicFrontimg.Trim() != "" && LicBackimg.Trim() != "")
            {
                //License Front Photo
                FileStream fsLicFront = new FileStream(Server.MapPath("~/Staff Photo/") + LicFrontimg, FileMode.Open, FileAccess.Read);
                BinaryReader brLicFront = new BinaryReader(fsLicFront);
                Byte[] LicFrontbytes = brLicFront.ReadBytes((Int32)fsLicFront.Length);
                string LicFrontphoto = Path.GetFileName("~/Staff Photo/");
                string LicFrontphotopath = Server.MapPath("~/Staff Photo/") + fileuploadLicFront.FileName;
                string LicFrontphotoext = System.IO.Path.GetExtension(fileuploadLicFront.FileName);

                //License Back Photo
                FileStream fsLicBack = new FileStream(Server.MapPath("~/Staff Photo/") + LicBackimg, FileMode.Open, FileAccess.Read);
                BinaryReader brLicBack = new BinaryReader(fsLicBack);
                Byte[] LicBackbytes = brLicBack.ReadBytes((Int32)fsLicBack.Length);
                string LicBackphoto = Path.GetFileName("~/Staff Photo/");
                string LicBackphotopath = Server.MapPath("~/Staff Photo/") + fileuploadLicBack.FileName;
                string LicBackphotoext = System.IO.Path.GetExtension(fileuploadLicBack.FileName);

                string insphoto = "if exists (select LicFront,LicBack,LicenseRenewDate from staffphoto where staff_code='" + scode + "')";
                insphoto = insphoto + " update staffphoto set LicFront=@LicFrontphoto,LicBack=@LicBackphoto,LicenseRenewDate='" + LicRenewDt + "' where staff_code='" + scode + "'";
                insphoto = insphoto + " else insert into staffphoto (staff_code,LicFront,LicBack,LicenseRenewDate) values('" + scode + "',@LicFrontphoto,@LicBackphoto,'" + LicRenewDt + "')";
                SqlCommand cmd = new SqlCommand(insphoto, con);
                SqlParameter uploadedLicFrontphoto = new SqlParameter("@LicFrontphoto", SqlDbType.Binary, LicFrontbytes.Length);
                uploadedLicFrontphoto.Value = LicFrontbytes;
                cmd.Parameters.Add(uploadedLicFrontphoto);
                brLicFront.Close();
                fsLicFront.Close();
                SqlParameter uploadedLicBackphoto = new SqlParameter("@LicBackphoto", SqlDbType.Binary, LicBackbytes.Length);
                uploadedLicBackphoto.Value = LicBackbytes;
                cmd.Parameters.Add(uploadedLicBackphoto);
                brLicBack.Close();
                fsLicBack.Close();
                con.Close();
                con.Open();
                cmd.ExecuteNonQuery();
            }

            alertpopwindow.Visible = true;
            lblalerterr.Text = "Saved Successfully";
            LicenseDiv.Visible = false;
            apt_clear();
            txt_applno.Enabled = true;
            txt_fname.Enabled = true;
            ViewState["LicFrontimg"] = "";
            ViewState["LicBackimg"] = "";
        }
        catch (Exception ex)
        {
        }
    }

    protected void btn_LicenseClose_OnClick(object sender, EventArgs e)
    {
        LicenseDiv.Visible = false;
    }

    #endregion

    protected void btnupload_Click(object sender, EventArgs e)
    {
        try
        {
            string getappl_no = Convert.ToString(ViewState["ApplNum"]);
            if (getappl_no != "")
            {
                if (fucertificate.HasFile)
                {

                    if (fucertificate.FileName.EndsWith(".jpg") || fucertificate.FileName.EndsWith(".gif") || fucertificate.FileName.EndsWith(".png") || fucertificate.FileName.EndsWith(".txt") || fucertificate.FileName.EndsWith(".doc") || fucertificate.FileName.EndsWith(".xls") || fucertificate.FileName.EndsWith(".docx") || fucertificate.FileName.EndsWith(".txt") || fucertificate.FileName.EndsWith(".document") || fucertificate.FileName.EndsWith(".xls") || fucertificate.FileName.EndsWith(".xlsx") || fucertificate.FileName.EndsWith(".pdf"))
                    {
                        String filePath = Server.MapPath(@"~/Upload Doc/" + fucertificate.FileName);
                        fucertificate.SaveAs(filePath);
                        string path = "../Upload Doc/";
                        path = path + fucertificate.FileName;

                        string fileName = Path.GetFileName(fucertificate.PostedFile.FileName);

                        string fileExtension = Path.GetExtension(fucertificate.PostedFile.FileName);
                        string documentType = string.Empty;
                        switch (fileExtension)
                        {

                            case ".pdf":

                                documentType = "application/pdf";


                                break;

                            case ".xls":

                                documentType = "application/vnd.ms-excel";

                                break;

                            case ".xlsx":

                                documentType = "application/vnd.ms-excel";


                                break;

                            case ".doc":

                                documentType = "application/vnd.ms-word";


                                break;

                            case ".docx":

                                documentType = "application/vnd.ms-word";


                                break;

                            case ".gif":

                                documentType = "image/gif";


                                break;

                            case ".png":

                                documentType = "image/png";

                                break;

                            case ".jpg":

                                documentType = "image/jpg";

                                break;

                        }

                        int fileSize = fucertificate.PostedFile.ContentLength;
                        byte[] documentBinary = new byte[fileSize];
                        fucertificate.PostedFile.InputStream.Read(documentBinary, 0, fileSize);

                        if ((Convert.ToString(ddlorganization.SelectedItem.Text) == "Select" || Convert.ToString(ddlorganization.SelectedItem.Text) == "Others") || (Convert.ToString(ddldesignationexp.SelectedItem.Text) == "Select" || Convert.ToString(ddldesignationexp.SelectedItem.Text) == "Others") || (Convert.ToString(ddlexpin.SelectedItem.Text) == "Select" || Convert.ToString(ddlexpin.SelectedItem.Text) == "Others") || (Convert.ToString(ddlrforr.SelectedItem.Text) == "Select" || Convert.ToString(ddlrforr.SelectedItem.Text) == "Others") || (Convert.ToString(txt_month.Text) == ""))
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Text = "Please Fill The Details Correctly";
                        }
                        else
                        {
                            string college = "";
                            if (rbowncollege.Checked == true)
                                college = "Own";
                            if (rbothercollege.Checked == true)
                                college = "Other";
                            string from_date = Convert.ToString(txt_fromdate.Text);
                            string To_date = Convert.ToString(txt_todate.Text);

                            string[] dt = from_date.Split('/');
                            from_date = dt[1] + "/" + dt[0] + "/" + dt[2];

                            string[] dt1 = To_date.Split('/');
                            To_date = dt1[1] + "/" + dt1[0] + "/" + dt1[2];

                            //frmyr = dt[1] + "/" + dt[0] + "/" + dt[2];
                            //  toyear = dt1[1] + "/" + dt1[0] + "/" + dt1[2];

                            string Organisation = Convert.ToString(ddlorganization.SelectedItem.Text);
                            string desig = Convert.ToString(ddldesignationexp.SelectedItem.Text);
                            string exp = Convert.ToString(ddlexpin.SelectedItem.Text);
                            string Yearval = txt_year.Text;
                            string Monthval = txt_month.Text;
                            string Salaryval = txt_salary.Text;
                            string relivreas = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(ddlrforr.SelectedItem.Text);
                            string additionalduty = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_addduties.Text);
                            string orgval = ddlorganization.SelectedItem.Value;
                            string desigval = ddldesignationexp.SelectedItem.Value;
                            string expval = ddlexpin.SelectedItem.Value;
                            string relivreasval = ddlrforr.SelectedItem.Value;
                            string isown = string.Empty;
                            if (college.Trim() == "Own")
                                isown = "0";
                            else if (college.Trim() == "Other")
                                isown = "1";

                            if (Yearval.Trim() == "&nbsp;")
                                Yearval = "";
                            else
                                Yearval = Yearval;
                            if (Monthval.Trim() == "&nbsp;")
                                Monthval = "";
                            else
                                Monthval = Monthval;
                            if (Salaryval.Trim() == "&nbsp;")
                                Salaryval = "0";
                            else
                                Salaryval = Salaryval;
                            if (additionalduty.Trim() == "&nbsp;")
                                additionalduty = "";
                            else
                                additionalduty = additionalduty;

                            int dettypeval = 2;
                            SqlCommand cmdnotes = new SqlCommand();


                            string strquer = "SELECT filename,filedata,filetype FROM  certificate_uploads where  DetailType='2' and ExpYear='" + Yearval + "'and ExpMonth='" + Monthval + "' and ExpFromDate='" + from_date + "' and ExpToDate='" + To_date + "' and appl_no='" + getappl_no + "'";

                            DataSet dsquery = d2.select_method(strquer, hat, "Text");
                            if (dsquery.Tables[0].Rows.Count > 0)
                            {
                                string del = "delete certificate_uploads where  DetailType='2' and ExpYear='" + Yearval + "'and ExpMonth='" + Monthval + "' and ExpFromDate='" + from_date + "' and ExpToDate='" + To_date + "' and appl_no='" + getappl_no + "'";
                                int val = 0;
                                val = d2.update_method_wo_parameter(del, "Text");
                                //d2.update_method_with_parameter(del, "text");
                                if (val > 0)
                                {
                                    cmdnotes.CommandText = "insert into certificate_uploads(DetailType,ExpFromDate,ExpToDate,ExpYear,ExpMonth,filename,filedata,filetype,appl_no)" + " VALUES (@Dettype,@Expfdate,@Exptdate,@Expyr,@Expmnth,@fname,@fdata,@ftype,@appNo)";
                                    cmdnotes.CommandType = CommandType.Text;
                                    cmdnotes.Connection = ssql;
                                    SqlParameter DetType = new SqlParameter("@Dettype", SqlDbType.TinyInt, 100);
                                    DetType.Value = dettypeval;
                                    cmdnotes.Parameters.Add(DetType);
                                    SqlParameter Exfdate = new SqlParameter("@Expfdate", SqlDbType.DateTime, 100);
                                    Exfdate.Value = from_date;
                                    cmdnotes.Parameters.Add(Exfdate);
                                    SqlParameter Extdate = new SqlParameter("@Exptdate", SqlDbType.DateTime, 100);
                                    Extdate.Value = To_date;
                                    cmdnotes.Parameters.Add(Extdate);
                                    SqlParameter Exyr = new SqlParameter("@Expyr", SqlDbType.BigInt, 500);
                                    Exyr.Value = Yearval;
                                    cmdnotes.Parameters.Add(Exyr);
                                    SqlParameter Exmnth = new SqlParameter("@Expmnth", SqlDbType.BigInt, 500);
                                    Exmnth.Value = Monthval;
                                    cmdnotes.Parameters.Add(Exmnth);
                                    SqlParameter fnames = new SqlParameter("@fname", SqlDbType.VarChar, 100);
                                    fnames.Value = fileName.ToString();
                                    cmdnotes.Parameters.Add(fnames);
                                    SqlParameter fdatas = new SqlParameter("@fdata", SqlDbType.VarBinary, fileSize);

                                    fdatas.Value = documentBinary;
                                    cmdnotes.Parameters.Add(fdatas);
                                    SqlParameter ftypes = new SqlParameter("@ftype", SqlDbType.NVarChar, 500);
                                    ftypes.Value = documentType;
                                    cmdnotes.Parameters.Add(ftypes);
                                    SqlParameter appnumber = new SqlParameter("@appNo", SqlDbType.NVarChar, 100);
                                    appnumber.Value = getappl_no;
                                    cmdnotes.Parameters.Add(appnumber);
                                    ssql.Close();
                                    ssql.Open();
                                    int result = cmdnotes.ExecuteNonQuery();
                                    if (result > 0)
                                    {
                                        alertpopwindow.Visible = true;
                                        lblalerterr.Text = "Uploaded Successfully";
                                        saveflag = true;
                                    }

                                }
                            }
                            else
                            {
                                cmdnotes.CommandText = "insert into certificate_uploads(DetailType,ExpFromDate,ExpToDate,ExpYear,ExpMonth,filename,filedata,filetype,appl_no)" + " VALUES (@Dettype,@Expfdate,@Exptdate,@Expyr,@Expmnth,@fname,@fdata,@ftype,@appNo)";
                                cmdnotes.CommandType = CommandType.Text;
                                cmdnotes.Connection = ssql;
                                SqlParameter DetType = new SqlParameter("@Dettype", SqlDbType.TinyInt, 100);
                                DetType.Value = dettypeval;
                                cmdnotes.Parameters.Add(DetType);
                                SqlParameter Exfdate = new SqlParameter("@Expfdate", SqlDbType.DateTime, 100);
                                Exfdate.Value = from_date;
                                cmdnotes.Parameters.Add(Exfdate);
                                SqlParameter Extdate = new SqlParameter("@Exptdate", SqlDbType.DateTime, 100);
                                Extdate.Value = To_date;
                                cmdnotes.Parameters.Add(Extdate);
                                SqlParameter Exyr = new SqlParameter("@Expyr", SqlDbType.BigInt, 500);
                                Exyr.Value = Yearval;
                                cmdnotes.Parameters.Add(Exyr);
                                SqlParameter Exmnth = new SqlParameter("@Expmnth", SqlDbType.BigInt, 500);
                                Exmnth.Value = Monthval;
                                cmdnotes.Parameters.Add(Exmnth);
                                SqlParameter fnames = new SqlParameter("@fname", SqlDbType.VarChar, 100);
                                fnames.Value = fileName.ToString();
                                cmdnotes.Parameters.Add(fnames);
                                SqlParameter fdatas = new SqlParameter("@fdata", SqlDbType.VarBinary, fileSize);

                                fdatas.Value = documentBinary;
                                cmdnotes.Parameters.Add(fdatas);
                                SqlParameter ftypes = new SqlParameter("@ftype", SqlDbType.NVarChar, 500);
                                ftypes.Value = documentType;
                                cmdnotes.Parameters.Add(ftypes);
                                SqlParameter appnumber = new SqlParameter("@appNo", SqlDbType.NVarChar, 100);
                                appnumber.Value = getappl_no;
                                cmdnotes.Parameters.Add(appnumber);
                                ssql.Close();
                                ssql.Open();
                                int result = cmdnotes.ExecuteNonQuery();
                                if (result > 0)
                                {
                                    alertpopwindow.Visible = true;
                                    lblalerterr.Text = "Uploaded Successfully";
                                    saveflag = true;
                                }
                            }



                        }


                    }


                }
                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Please Select Any File";

                }
            }
            else
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Please Enter Appl No";

            }
        }
        catch (Exception ex)
        { }
    }

    protected void lnkdownlaodattachement_Click(object sender, EventArgs e)
    {
        try
        {
            string getappl_no = Convert.ToString(ViewState["ApplNum"]);
            if (getappl_no != "")
            {
                if ((Convert.ToString(ddlorganization.SelectedItem.Text) == "Select" || Convert.ToString(ddlorganization.SelectedItem.Text) == "Others") || (Convert.ToString(ddldesignationexp.SelectedItem.Text) == "Select" || Convert.ToString(ddldesignationexp.SelectedItem.Text) == "Others") || (Convert.ToString(ddlexpin.SelectedItem.Text) == "Select" || Convert.ToString(ddlexpin.SelectedItem.Text) == "Others") || (Convert.ToString(ddlrforr.SelectedItem.Text) == "Select" || Convert.ToString(ddlrforr.SelectedItem.Text) == "Others") || (Convert.ToString(txt_month.Text) == ""))
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Please Fill The Details Correctly";
                }
                else
                {

                    byte[] bytes = null;
                    string contentType = string.Empty;
                    string constr = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;

                    string Yearval = txt_year.Text;
                    string Monthval = txt_month.Text;
                    string from_date = Convert.ToString(txt_fromdate.Text);
                    string To_date = Convert.ToString(txt_todate.Text);

                    string[] dt = from_date.Split('/');
                    from_date = dt[1] + "/" + dt[0] + "/" + dt[2];

                    string[] dt1 = To_date.Split('/');
                    To_date = dt1[1] + "/" + dt1[0] + "/" + dt1[2];

                    string strquer = "SELECT filename,filedata,filetype FROM  certificate_uploads where  DetailType='2' and ExpYear='" + Yearval + "'and ExpMonth='" + Monthval + "' and ExpFromDate='" + from_date + "' and ExpToDate='" + To_date + "' and appl_no='" + getappl_no + "'";

                    DataSet dsquery = d2.select_method(strquer, hat, "Text");
                    if (dsquery.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < dsquery.Tables[0].Rows.Count; i++)
                        {
                            Response.ContentType = dsquery.Tables[0].Rows[i]["filetype"].ToString();
                            Response.AddHeader("Content-Disposition", "attachment;filename=\"" + dsquery.Tables[0].Rows[i]["filename"] + "\"");
                            Response.BinaryWrite((byte[])dsquery.Tables[0].Rows[i]["filedata"]);
                            Response.End();
                            Cellclick = false;
                        }
                    }
                    else
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Text = "No Records Found";
                    }


                }
            }
            else
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Please Enter Appl No";

            }



        }
        catch (Exception ex)
        {

        }
    }
    protected void btnquliUpload_Click(object sender, EventArgs e)
    {
        try
        {
            string getappl_no = Convert.ToString(ViewState["ApplNumb"]);
            if (getappl_no != "")
            {
                if (FileUpload2.HasFile)
                {

                    if (FileUpload2.FileName.EndsWith(".jpg") || FileUpload2.FileName.EndsWith(".gif") || FileUpload2.FileName.EndsWith(".png") || FileUpload2.FileName.EndsWith(".txt") || FileUpload2.FileName.EndsWith(".doc") || FileUpload2.FileName.EndsWith(".xls") || FileUpload2.FileName.EndsWith(".docx") || FileUpload2.FileName.EndsWith(".txt") || FileUpload2.FileName.EndsWith(".document") || FileUpload2.FileName.EndsWith(".xls") || FileUpload2.FileName.EndsWith(".xlsx") || FileUpload2.FileName.EndsWith(".pdf"))
                    {
                        String filePath = Server.MapPath(@"~/Upload Doc/" + FileUpload2.FileName);
                        FileUpload2.SaveAs(filePath);
                        string path = "../Upload Doc/";
                        path = path + FileUpload2.FileName;

                        string fileName = Path.GetFileName(FileUpload2.PostedFile.FileName);

                        string fileExtension = Path.GetExtension(FileUpload2.PostedFile.FileName);
                        string documentType = string.Empty;
                        switch (fileExtension)
                        {

                            case ".pdf":

                                documentType = "application/pdf";


                                break;

                            case ".xls":

                                documentType = "application/vnd.ms-excel";

                                break;

                            case ".xlsx":

                                documentType = "application/vnd.ms-excel";


                                break;

                            case ".doc":

                                documentType = "application/vnd.ms-word";


                                break;

                            case ".docx":

                                documentType = "application/vnd.ms-word";


                                break;

                            case ".gif":

                                documentType = "image/gif";


                                break;

                            case ".png":

                                documentType = "image/png";

                                break;

                            case ".jpg":

                                documentType = "image/jpg";

                                break;

                        }

                        int fileSize = FileUpload2.PostedFile.ContentLength;
                        byte[] documentBinary = new byte[fileSize];
                        FileUpload2.PostedFile.InputStream.Read(documentBinary, 0, fileSize);
                        if ((Convert.ToString(ddlgraduation.SelectedItem.Text) == "Select" || Convert.ToString(ddlgraduation.SelectedItem.Text) == "Others") || (Convert.ToString(ddldegreeinfromation.SelectedItem.Text) == "Select" || Convert.ToString(ddldegreeinfromation.SelectedItem.Text) == "Others") || (Convert.ToString(ddlspecalization.SelectedItem.Text) == "Select" || Convert.ToString(ddlspecalization.SelectedItem.Text) == "Others") || (Convert.ToString(ddluniversity.SelectedItem.Text) == "Select" || Convert.ToString(ddluniversity.SelectedItem.Text) == "Others") || (Convert.ToString(ddlinstitution.SelectedItem.Text) == "Select" || Convert.ToString(ddlinstitution.SelectedItem.Text) == "Others"))
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Text = "Please Fill The Details Correctly";
                        }
                        else
                        {
                            string graduation = ddlgraduation.SelectedItem.Text;
                            string degreeinfo = ddldegreeinfromation.SelectedItem.Text;
                            string specialisaton = ddlspecalization.SelectedItem.Text;
                            string yearofpassing = txt_yofp.Text;
                            string[] dt = yearofpassing.Split('/');
                            yearofpassing = dt[1] + "/" + dt[0] + "/" + dt[2];
                            string univercity = ddluniversity.SelectedItem.Text;
                            string institution = ddlinstitution.SelectedItem.Text;
                            string percentage = txt_percentage1.Text;
                            string grade = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_grade.Text);
                            string classes = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(txt_class.Text);
                            string graduationval = ddlgraduation.SelectedItem.Value;
                            string degreeval = ddldegreeinfromation.SelectedItem.Value;
                            string specialisationval = ddlspecalization.SelectedItem.Value;
                            string universityval = ddluniversity.SelectedItem.Value;
                            string institutionval = ddlinstitution.SelectedItem.Value;
                            int dettypeval = 1;
                            SqlCommand cmdnotes = new SqlCommand();

                            string strquer = "SELECT filename,filedata,filetype FROM  certificate_uploads where  DetailType='1' and ExpFromDate='" + yearofpassing + "' and graduation='" + graduationval + "' and appl_no='" + getappl_no + "'";

                            DataSet dsquery = d2.select_method(strquer, hat, "Text");
                            if (dsquery.Tables[0].Rows.Count > 0)
                            {
                                string del = "delete certificate_uploads where  DetailType='1' aand ExpFromDate='" + yearofpassing + "' and graduation='" + graduationval + "' and appl_no='" + getappl_no + "'";
                                int val = 0;
                                val = d2.update_method_wo_parameter(del, "Text");

                                if (val > 0)
                                {

                                    cmdnotes.CommandText = "insert into certificate_uploads(DetailType,ExpFromDate,graduation,filename,filedata,filetype,appl_no)" + " VALUES (@Dettype,@Expfdate,@grad,@fname,@fdata,@ftype,@appNo)";
                                    cmdnotes.CommandType = CommandType.Text;
                                    cmdnotes.Connection = ssql;
                                    SqlParameter DetType = new SqlParameter("@Dettype", SqlDbType.TinyInt, 100);
                                    DetType.Value = dettypeval;
                                    cmdnotes.Parameters.Add(DetType);
                                    SqlParameter Exfdate = new SqlParameter("@Expfdate", SqlDbType.DateTime, 100);
                                    Exfdate.Value = yearofpassing;
                                    cmdnotes.Parameters.Add(Exfdate);
                                    SqlParameter graduatn = new SqlParameter("@grad", SqlDbType.NVarChar, 500);
                                    graduatn.Value = graduationval;
                                    cmdnotes.Parameters.Add(graduatn);
                                    SqlParameter fnames = new SqlParameter("@fname", SqlDbType.VarChar, 100);
                                    fnames.Value = fileName.ToString();
                                    cmdnotes.Parameters.Add(fnames);
                                    SqlParameter fdatas = new SqlParameter("@fdata", SqlDbType.VarBinary, fileSize);

                                    fdatas.Value = documentBinary;
                                    cmdnotes.Parameters.Add(fdatas);
                                    SqlParameter ftypes = new SqlParameter("@ftype", SqlDbType.NVarChar, 500);
                                    ftypes.Value = documentType;
                                    cmdnotes.Parameters.Add(ftypes);
                                    SqlParameter appnumber = new SqlParameter("@appNo", SqlDbType.NVarChar, 100);
                                    appnumber.Value = getappl_no;
                                    cmdnotes.Parameters.Add(appnumber);
                                    ssql.Close();
                                    ssql.Open();
                                    int result = cmdnotes.ExecuteNonQuery();
                                    if (result > 0)
                                    {
                                        alertpopwindow.Visible = true;
                                        lblalerterr.Text = "Uploaded Successfully";
                                        saveflag = true;
                                    }
                                }
                            }

                            else
                            {

                                cmdnotes.CommandText = "insert into certificate_uploads(DetailType,ExpFromDate,graduation,filename,filedata,filetype,appl_no)" + " VALUES (@Dettype,@Expfdate,@grad,@fname,@fdata,@ftype,@appNo)";
                                cmdnotes.CommandType = CommandType.Text;
                                cmdnotes.Connection = ssql;
                                SqlParameter DetType = new SqlParameter("@Dettype", SqlDbType.TinyInt, 100);
                                DetType.Value = dettypeval;
                                cmdnotes.Parameters.Add(DetType);
                                SqlParameter Exfdate = new SqlParameter("@Expfdate", SqlDbType.DateTime, 100);
                                Exfdate.Value = yearofpassing;
                                cmdnotes.Parameters.Add(Exfdate);
                                SqlParameter graduatn = new SqlParameter("@grad", SqlDbType.NVarChar, 500);
                                graduatn.Value = graduationval;
                                cmdnotes.Parameters.Add(graduatn);
                                SqlParameter fnames = new SqlParameter("@fname", SqlDbType.VarChar, 100);
                                fnames.Value = fileName.ToString();
                                cmdnotes.Parameters.Add(fnames);
                                SqlParameter fdatas = new SqlParameter("@fdata", SqlDbType.VarBinary, fileSize);

                                fdatas.Value = documentBinary;
                                cmdnotes.Parameters.Add(fdatas);
                                SqlParameter ftypes = new SqlParameter("@ftype", SqlDbType.NVarChar, 500);
                                ftypes.Value = documentType;
                                cmdnotes.Parameters.Add(ftypes);
                                SqlParameter appnumber = new SqlParameter("@appNo", SqlDbType.NVarChar, 100);
                                appnumber.Value = getappl_no;
                                cmdnotes.Parameters.Add(appnumber);
                                ssql.Close();
                                ssql.Open();
                                int result = cmdnotes.ExecuteNonQuery();
                                if (result > 0)
                                {
                                    alertpopwindow.Visible = true;
                                    lblalerterr.Text = "Uploaded Successfully";
                                    saveflag = true;
                                }
                            }

                        }
                    }
                }
            }

        }
        catch (Exception ex)
        {


        }


    }
    protected void lnkdownlaodattachement1_Click(object sender, EventArgs e)
    {
        try
        {
            string getappl_no = Convert.ToString(ViewState["ApplNumb"]);
            if (getappl_no != "")
            {

                if ((Convert.ToString(ddlgraduation.SelectedItem.Text) == "Select" || Convert.ToString(ddlgraduation.SelectedItem.Text) == "Others") || (Convert.ToString(ddldegreeinfromation.SelectedItem.Text) == "Select" || Convert.ToString(ddldegreeinfromation.SelectedItem.Text) == "Others") || (Convert.ToString(ddlspecalization.SelectedItem.Text) == "Select" || Convert.ToString(ddlspecalization.SelectedItem.Text) == "Others") || (Convert.ToString(ddluniversity.SelectedItem.Text) == "Select" || Convert.ToString(ddluniversity.SelectedItem.Text) == "Others") || (Convert.ToString(ddlinstitution.SelectedItem.Text) == "Select" || Convert.ToString(ddlinstitution.SelectedItem.Text) == "Others"))
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Please Fill The Details Correctly";
                }
                else
                {
                    byte[] bytes = null;
                    string contentType = string.Empty;
                    string constr = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;


                    string graduationval = ddlgraduation.SelectedItem.Value;

                    string yearofpassing = txt_yofp.Text;
                    string[] dt = yearofpassing.Split('/');
                    yearofpassing = dt[1] + "/" + dt[0] + "/" + dt[2];

                    string strquer = "SELECT filename,filedata,filetype FROM  certificate_uploads where  DetailType='1' and ExpFromDate='" + yearofpassing + "' and graduation='" + graduationval + "' and appl_no='" + getappl_no + "'";

                    DataSet dsquery = d2.select_method(strquer, hat, "Text");
                    if (dsquery.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < dsquery.Tables[0].Rows.Count; i++)
                        {
                            Response.ContentType = dsquery.Tables[0].Rows[i]["filetype"].ToString();
                            Response.AddHeader("Content-Disposition", "attachment;filename=\"" + dsquery.Tables[0].Rows[i]["filename"] + "\"");
                            Response.BinaryWrite((byte[])dsquery.Tables[0].Rows[i]["filedata"]);
                            Response.End();
                            Cellclick = false;
                        }
                    }
                    else
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Text = "No Records Found";
                    }

                }
            }
            else
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Please Enter Appl No";

            }
        }
        catch (Exception ex)
        {


        }
    }
    protected void btn_other_Click(object sender, EventArgs e)
    {

    }
    protected void grdothers_OnRowDataCommand(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.grdothers, "Select$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.grdothers, "Select$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["OnClick"] = Page.ClientScript.GetPostBackEventReference(this.grdothers, "Select$" + e.Row.RowIndex);
           

            //btnotherssave.Visible = false;
            //btnotherupdate.Visible = true;
            //btnotherdelete.Visible = true;
            //bthotherexit.Visible = true;
        }
        else
        {
        }
    }
    protected void grdothers_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {


            int c = Convert.ToInt32(e.CommandArgument);
            ViewState["other"] = c;
            string getappl_no = Convert.ToString(tbappno.Text);
            ViewState["ApplNum"] = getappl_no;
            string cname = ((grdothers.Rows[c].FindControl("lbl_certname") as Label).Text);
            string cnum = ((grdothers.Rows[c].FindControl("lbl_certnum") as Label).Text);


            pnlother.Visible = true;
            otherdiv.Visible = true;

            txtcertificatename.Text = cname;
            txtcertificatenum.Text = cnum;

            btnotherssave.Visible = false;
            btnotherupdate.Visible = true;
            btnotherdelete.Visible = true;
            bthotherexit.Visible = true;


        }
        catch (Exception ex)
        {

        }
    }
    protected void noticepay_checkedchange(object sender, EventArgs e)
    {
        if (cbisnotisepaystaff.Checked == true)
        {
            txt_noticepay.Visible = true;
        }
        else
        {
            txt_noticepay.Visible = false;
        }
    }
    protected void btnother_Click(object sender, EventArgs e)
    {
        try
        {
            string getappl_no = Convert.ToString(tbappno.Text);
            ViewState["ApplNum"] = getappl_no;
            otherdiv.Visible = true;
            txtcertificatename.Text = "";
            txtcertificatenum.Text = "";
            btnotherssave.Visible = true;
            btnotherupdate.Visible = false;
            btnotherdelete.Visible = false;
            bthotherexit.Visible = true;


        }
        catch (Exception ex)
        {
        }

    }
    protected void btnothercertupload_Click(object sender, EventArgs e)
    {
        try
        {
            string getappl_no = Convert.ToString(ViewState["ApplNum"]);
            if (getappl_no != "")
            {
                if (txtcertificatename.Text == "" || txtcertificatenum.Text == "")
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Please Fill The Details Correctly";
                }
                else
                {

                    byte[] bytes = null;
                    string contentType = string.Empty;
                    string constr = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;

                    string certname = Convert.ToString(txtcertificatename.Text);
                    string certnum = Convert.ToString(txtcertificatenum.Text);


                    string strquer = "SELECT filename,filedata,filetype FROM  certificate_uploads where  DetailType='3' and certname='" + certname + "' and certnum='" + certnum + "' and appl_no='" + getappl_no + "'";

                    DataSet dsquery = d2.select_method(strquer, hat, "Text");
                    if (dsquery.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < dsquery.Tables[0].Rows.Count; i++)
                        {
                            Response.ContentType = dsquery.Tables[0].Rows[i]["filetype"].ToString();
                            Response.AddHeader("Content-Disposition", "attachment;filename=\"" + dsquery.Tables[0].Rows[i]["filename"] + "\"");
                            Response.BinaryWrite((byte[])dsquery.Tables[0].Rows[i]["filedata"]);
                            Response.End();
                            Cellclick = false;
                        }
                    }
                    else
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Text = "No Records Found";
                    }


                }
            }
            else
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Please Enter Appl No";

            }



        }
        catch (Exception ex)
        {

        }



    }
    protected void othercertupload_Click(object sender, EventArgs e)
    {

        try
        {
            string getappl_no = Convert.ToString(ViewState["ApplNum"]);
            if (getappl_no != "")
            {
                if (FileUploadother.HasFile)
                {

                    if (FileUploadother.FileName.EndsWith(".jpg") || FileUploadother.FileName.EndsWith(".gif") || FileUploadother.FileName.EndsWith(".png") || FileUploadother.FileName.EndsWith(".txt") || FileUploadother.FileName.EndsWith(".doc") || FileUploadother.FileName.EndsWith(".xls") || FileUploadother.FileName.EndsWith(".docx") || FileUploadother.FileName.EndsWith(".txt") || FileUploadother.FileName.EndsWith(".document") || FileUploadother.FileName.EndsWith(".xls") || FileUploadother.FileName.EndsWith(".xlsx") || FileUploadother.FileName.EndsWith(".pdf"))
                    {
                        String filePath = Server.MapPath(@"~/Upload Doc/" + FileUploadother.FileName);
                        FileUploadother.SaveAs(filePath);
                        string path = "../Upload Doc/";
                        path = path + FileUploadother.FileName;

                        string fileName = Path.GetFileName(FileUploadother.PostedFile.FileName);

                        string fileExtension = Path.GetExtension(FileUploadother.PostedFile.FileName);
                        string documentType = string.Empty;
                        switch (fileExtension)
                        {

                            case ".pdf":

                                documentType = "application/pdf";


                                break;

                            case ".xls":

                                documentType = "application/vnd.ms-excel";

                                break;

                            case ".xlsx":

                                documentType = "application/vnd.ms-excel";


                                break;

                            case ".doc":

                                documentType = "application/vnd.ms-word";


                                break;

                            case ".docx":

                                documentType = "application/vnd.ms-word";


                                break;

                            case ".gif":

                                documentType = "image/gif";


                                break;

                            case ".png":

                                documentType = "image/png";

                                break;

                            case ".jpg":

                                documentType = "image/jpg";

                                break;

                        }

                        int fileSize = FileUploadother.PostedFile.ContentLength;
                        byte[] documentBinary = new byte[fileSize];
                        FileUploadother.PostedFile.InputStream.Read(documentBinary, 0, fileSize);

                        if (txtcertificatenum.Text == "" || txtcertificatename.Text == "")
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Text = "Please Fill The Details Correctly";
                        }
                        else
                        {

                            string certname = Convert.ToString(txtcertificatename.Text);
                            string certnum = Convert.ToString(txtcertificatenum.Text);


                            int dettypeval = 3;
                            SqlCommand cmdnotes = new SqlCommand();


                            string strquer = "SELECT filename,filedata,filetype FROM  certificate_uploads where  DetailType='3' and certname='" + certname + "' and certnum='" + certnum + "'and appl_no='" + getappl_no + "'";

                            DataSet dsquery = d2.select_method(strquer, hat, "Text");
                            if (dsquery.Tables[0].Rows.Count > 0)
                            {
                                string del = "delete certificate_uploads where  DetailType='3' and certname='" + certname + "' and certnum='" + certnum + "' and appl_no='" + getappl_no + "'";
                                int val = 0;
                                val = d2.update_method_wo_parameter(del, "Text");

                                if (val > 0)
                                {
                                    cmdnotes.CommandText = "insert into certificate_uploads(DetailType,certname,certnum,filename,filedata,filetype,appl_no)" + " VALUES (@Dettype,@certname,@certnum,@fname,@fdata,@ftype,@appNo)";
                                    cmdnotes.CommandType = CommandType.Text;
                                    cmdnotes.Connection = ssql;
                                    SqlParameter DetType = new SqlParameter("@Dettype", SqlDbType.TinyInt, 100);
                                    DetType.Value = dettypeval;
                                    cmdnotes.Parameters.Add(DetType);

                                    SqlParameter certificname = new SqlParameter("@certname", SqlDbType.NVarChar, 1000);
                                    certificname.Value = Convert.ToString(certname);
                                    cmdnotes.Parameters.Add(certificname);
                                    SqlParameter certificnum = new SqlParameter("@certnum", SqlDbType.NVarChar, 1000);
                                    certificnum.Value = Convert.ToString(certnum);
                                    cmdnotes.Parameters.Add(certificnum);
                                    SqlParameter fnames = new SqlParameter("@fname", SqlDbType.VarChar, 100);
                                    fnames.Value = fileName.ToString();
                                    cmdnotes.Parameters.Add(fnames);
                                    SqlParameter fdatas = new SqlParameter("@fdata", SqlDbType.VarBinary, fileSize);

                                    fdatas.Value = documentBinary;
                                    cmdnotes.Parameters.Add(fdatas);
                                    SqlParameter ftypes = new SqlParameter("@ftype", SqlDbType.NVarChar, 500);
                                    ftypes.Value = documentType;
                                    cmdnotes.Parameters.Add(ftypes);
                                    SqlParameter appnumber = new SqlParameter("@appNo", SqlDbType.NVarChar, 100);
                                    appnumber.Value = getappl_no;
                                    cmdnotes.Parameters.Add(appnumber);
                                    ssql.Close();
                                    ssql.Open();
                                    int result = cmdnotes.ExecuteNonQuery();
                                    if (result > 0)
                                    {
                                        alertpopwindow.Visible = true;
                                        lblalerterr.Text = "Uploaded Successfully";
                                        saveflag = true;
                                    }

                                }
                            }
                            else
                            {
                                cmdnotes.CommandText = "insert into certificate_uploads(DetailType,certname,certnum,filename,filedata,filetype,appl_no)" + " VALUES (@Dettype,@certname,@certnum,@fname,@fdata,@ftype,@appNo)";
                                cmdnotes.CommandType = CommandType.Text;
                                cmdnotes.Connection = ssql;
                                SqlParameter DetType = new SqlParameter("@Dettype", SqlDbType.TinyInt, 100);
                                DetType.Value = dettypeval;
                                cmdnotes.Parameters.Add(DetType);
                                SqlParameter certificname = new SqlParameter("@certname", SqlDbType.NVarChar, 500);
                                certificname.Value = Convert.ToString(certname);
                                cmdnotes.Parameters.Add(certificname);
                                SqlParameter certificnum = new SqlParameter("@certnum", SqlDbType.NVarChar, 500);
                                certificnum.Value = Convert.ToString(certnum);
                                cmdnotes.Parameters.Add(certificnum);

                                SqlParameter fnames = new SqlParameter("@fname", SqlDbType.VarChar, 100);
                                fnames.Value = fileName.ToString();
                                cmdnotes.Parameters.Add(fnames);
                                SqlParameter fdatas = new SqlParameter("@fdata", SqlDbType.VarBinary, fileSize);

                                fdatas.Value = documentBinary;
                                cmdnotes.Parameters.Add(fdatas);
                                SqlParameter ftypes = new SqlParameter("@ftype", SqlDbType.NVarChar, 500);
                                ftypes.Value = documentType;
                                cmdnotes.Parameters.Add(ftypes);
                                SqlParameter appnumber = new SqlParameter("@appNo", SqlDbType.NVarChar, 100);
                                appnumber.Value = getappl_no;
                                cmdnotes.Parameters.Add(appnumber);
                                ssql.Close();
                                ssql.Open();
                                int result = cmdnotes.ExecuteNonQuery();
                                if (result > 0)
                                {
                                    alertpopwindow.Visible = true;
                                    lblalerterr.Text = "Uploaded Successfully";
                                    saveflag = true;
                                }
                            }



                        }


                    }


                }

                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Please Select Any File";

                }


            }
            else
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Please Enter Appl No";

            }
        }
        catch (Exception ex)
        {


        }
    }



    protected void btnotherssave_Click(object sender, EventArgs e)
    {
        try
        {
            if (txtcertificatenum.Text == "" || txtcertificatename.Text == "")
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "Please Fill All the Details";
            }
            else
            {
                otherdiv.Visible = false;
                grdothers.Visible = true;
                int row = 0;
                int cts = 0;

                DataTable dt = new DataTable();
                getothercertificatehead(dt);

                DataRow dr;

                if (Session["dtother"] != null)
                {
                    DataTable dnew = new DataTable();
                    dnew = (DataTable)Session["dtother"];
                    if (dnew.Rows.Count > 0)
                    {
                        for (int ro = 0; ro < dnew.Rows.Count; ro++)
                        {
                            dr = dt.NewRow();
                            dr[0] = Convert.ToString(ro + 1);
                            cts++;
                            for (int col = 0; col < dnew.Columns.Count; col++)
                            {
                                dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                            }
                            dt.Rows.Add(dr);
                        }
                    }

                    dr = dt.NewRow();
                    dr[0] = cts + 1;
                    dr[1] = Convert.ToString(txtcertificatename.Text);
                    dr[2] = Convert.ToString(txtcertificatenum.Text);

                    dt.Rows.Add(dr);
                    Session["dtother"] = dt;
                }
                else
                {
                    dr = dt.NewRow();
                    dr[0] = cts + 1;
                    dr[1] = Convert.ToString(txtcertificatename.Text);
                    dr[2] = Convert.ToString(txtcertificatenum.Text);

                    dt.Rows.Add(dr);
                    Session["dtother"] = dt;
                }
                if (dt.Rows.Count > 0)
                {
                    grdothers.DataSource = dt;
                    grdothers.DataBind();
                }
            }
        }
        catch (Exception ex)
        {

        }


    }
    protected void btnotherupdate_Click(object sender, EventArgs e)
    {
        grdothers.Visible = true;

        int row = 0;
        DataTable dt = new DataTable();
        getothercertificatehead(dt);

        DataRow dr;

        int egi = Convert.ToInt32(Convert.ToString(ViewState["other"]));
        int ct = 0;
        DataTable dnew = new DataTable();
        dnew = (DataTable)Session["dtother"];
        if (dnew.Rows.Count > 0)
        {
            for (int ro = 0; ro < dnew.Rows.Count; ro++)
            {
                dr = dt.NewRow();
                dr[0] = Convert.ToString(ro + 1);
                ct++;
                for (int col = 0; col < dnew.Columns.Count; col++)
                {
                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                }
                dt.Rows.Add(dr);
            }
            dt.Rows.Remove(dt.Rows[egi]);
        }
        dr = dt.NewRow();
        if (txtcertificatename.Text == "" || txtcertificatenum.Text == "")
        {
            alertpopwindow.Visible = true;
            lblalerterr.Text = "Please Fill The Details Correctly";
        }
        else
        {

            dr[0] = ct + 1;

            dr[1] = Convert.ToString(txtcertificatename.Text);
            dr[2] = Convert.ToString(txtcertificatenum.Text);

            dt.Rows.Add(dr);
            Session["dtother"] = dt;

            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getothercertificatehead(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                grdothers.DataSource = dnext;
                grdothers.DataBind();
            }
            otherdiv.Visible = false;
        }
    }
    protected void btnotherdelete_Click(object sender, EventArgs e)
    {
        try
        {
            grdothers.Visible = true;
            int row = 0;

            DataTable dt = new DataTable();
            getothercertificatehead(dt);

            DataRow dr;
            int egi = Convert.ToInt32(Convert.ToString(ViewState["other"]));
            int ct = 0;
            DataTable dnew = new DataTable();
            dnew = (DataTable)Session["dtother"];
            if (dnew.Rows.Count > 0)
            {
                for (int ro = 0; ro < dnew.Rows.Count; ro++)
                {
                    dr = dt.NewRow();
                    dr[0] = Convert.ToString(ro + 1);
                    ct++;
                    for (int col = 0; col < dnew.Columns.Count; col++)
                    {
                        dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                    }
                    dt.Rows.Add(dr);
                }
                dt.Rows.Remove(dt.Rows[egi]);
            }
            Session["dtother"] = dt;

            if (dt.Rows.Count > 0)
            {
                DataTable dnext = new DataTable();
                getothercertificatehead(dnext);
                DataRow drov;

                for (int ik = 0; ik < dt.Rows.Count; ik++)
                {
                    drov = dnext.NewRow();
                    drov[0] = Convert.ToString(ik + 1);
                    for (int col = 1; col < dt.Columns.Count; col++)
                    {
                        drov[col] = Convert.ToString(dt.Rows[ik][col]);
                    }
                    dnext.Rows.Add(drov);
                }

                grdothers.DataSource = dnext;
                grdothers.DataBind();
                otherdiv.Visible = false;
            }
            if (dt.Rows.Count == 0)
            {
                grdothers.DataSource = dt;
                grdothers.DataBind();
                grdothers.Visible = false;
            }
            
        }
        catch (Exception ex)
        { 
        
        }

    }
    protected void bthotherexit_Click(object sender, EventArgs e)
    {
        otherdiv.Visible = false;
    }
}

//------------Staff Code Update Based on the Settings Added By Jeyaprakash on Oct 20th,2016-----------//
//----------------------Last Modified By Jeyaprakash on Nov 18th,2016--------------------//
//----------------------Staff Code Updation for Staff Transfer and Appointment----------//