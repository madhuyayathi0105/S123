using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Mail;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.DataVisualization.Charting;
using System.Web.UI.WebControls;
using InsproDataAccess;
using Farpoint = FarPoint.Web.Spread;


public partial class IndReport : System.Web.UI.Page
{
    //private const string PARAMETER_NAME = "enc=";
    //private const string ENCRYPTION_KEY = "key";
    //private readonly static byte[] SALT = Encoding.ASCII.GetBytes(ENCRYPTION_KEY.Length.ToString());
    System.Web.UI.WebControls.TreeNode mm9 = new System.Web.UI.WebControls.TreeNode();
    System.Web.UI.WebControls.TreeNode mm1 = new System.Web.UI.WebControls.TreeNode();


    [Serializable()]
    public class myHyperLink : FarPoint.Web.Spread.HyperLinkCellType
    {
        FarPoint.Web.Spread.Model.DefaultSheetDataModel dsdm;
        public myHyperLink()
        {
        }
        public myHyperLink(FarPoint.Web.Spread.Model.DefaultSheetDataModel mydatamodel)
        {
            dsdm = mydatamodel;
        }
        public override Control PaintCell(string id, TableCell parent, FarPoint.Web.Spread.Appearance style, FarPoint.Web.Spread.Inset margin, object value, bool upperLevel)
        {
            Control c = base.PaintCell(id, parent, style, margin, value, upperLevel);
            //  Control c = base.PaintCell(id, parent, style, margin, path1 , upperLevel);
            string[] idarray = id.Split(new char[] { ',' });
            int row = Convert.ToInt32(idarray[0]);
            string getselectedpath = path1;
            //if (getselectedpath != null)
            //{
            //    string field1 = dsdm.GetValue(row, 0).ToString();
            //    string field2 = dsdm.GetValue(row, 1).ToString();
            //}
            HyperLink hypType = (HyperLink)c;
            hypType.Text = value.ToString();
            //hypType.NavigateUrl = "http://www.fpoint.com?s1=" + field1 + "s2=" + field2;
            hypType.NavigateUrl = getselectedpath;
            hypType.Target = "_self";
            return hypType;
        }
    }

    #region vaiable declaration
    //vetri.`
    InsproDirectAccess dir = new InsproDirectAccess();
    bool isSchoolOrCollege = false;
    InsproDirectAccess dirAcc = new InsproDirectAccess();
    string nameprint = string.Empty;
    string departmentprint = string.Empty;
    string batchprint = string.Empty;
    string semprint = string.Empty;
    string admdatev = "", strtdate = "", examdate = string.Empty;
    string studname = string.Empty;
    string latmode = string.Empty;
    string regn = string.Empty;
    int subjectctot = 0, criteriatot = 0, tottet;
    string criteriain;
    string sqlmarkcmd;
    string rnkv = string.Empty;
    string rankov3 = string.Empty;
    string marks_per, marks_perfinal;
    int failv = 0;
    string sqlStr = string.Empty;
    int ddlcount = 0;
    string hcrollno = string.Empty;
    string batchyearv = string.Empty;
    string semesterv = string.Empty;
    string degreecodev = string.Empty;
    string sectionv = string.Empty;
    double strtot = 0;
    double strgradetempfrm = 0;
    double strgradetempto = 0;
    string syll_code = string.Empty;
    string examcodevalg = string.Empty;
    int gtempejval = 0;
    string strgradetempgrade = string.Empty;
    string strtotgrac = string.Empty;
    static string gatepass_staffdept = string.Empty;
    string staffcodesession = string.Empty;
    string collegcode1 = string.Empty;
    DataSet dggradetot = new DataSet();
    DataSet dssem = new DataSet();
    DataSet dsmethodgoper = new DataSet();
    DataSet dsmethodgosubj = new DataSet();
    DataSet dsmethodgocriteria = new DataSet();
    DataSet dsmethodgomark = new DataSet();
    DataSet dsuni = new DataSet();
    DataSet ds_sub = new DataSet();
    Hashtable htv = new Hashtable();
    Hashtable htv3 = new Hashtable();
    Hashtable hat5 = new Hashtable();
    static Hashtable htb = new Hashtable();
    static Hashtable htcriteria = new Hashtable();
    static Hashtable htsubjcide = new Hashtable();
    static ArrayList ItemList_gate = new ArrayList();
    static ArrayList Itemindex_gate = new ArrayList();
    SqlConnection con_Grade = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con_subcrd = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con_Getfunc = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    DateTime Admission_date;
    int tot_ml_spl = 0;
    double cum_tot_ondu, cum_tot_ml, tot_ml, per_tot_ml;
    int rows_count;
    Boolean splhr_flag = false;
    int tot_ml_spl_fals = 0;
    //vetri.^
    SqlDataAdapter daques = new SqlDataAdapter();
    DataSet dsques = new DataSet();
    static int quecnt = 0;
    int rowquestio = 0;
    static Hashtable hstap = new Hashtable();
    static Hashtable hsanswer = new Hashtable();
    Hashtable hashforpattern = new Hashtable();
    static int savflag = 0;
    SqlConnection con_splhr_query_master = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con4a = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection mysql1 = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection mysql = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection mysql3 = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection mysql2 = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con1 = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con2 = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con3 = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con4 = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection getsql = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection csql = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection ncon1 = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection holidaycon = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con_rset = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con2_subj = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con_stud_conduct = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con_roll = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con_all = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection con_tree = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection ssql = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    SqlConnection readcon = new SqlConnection(ConfigurationManager.AppSettings["con"].ToString());
    FarPoint.Web.Spread.HyperLinkCellType hypertext = new FarPoint.Web.Spread.HyperLinkCellType();
    SqlCommand cmd = new SqlCommand();
    string appno = string.Empty;
    string Reg_no = string.Empty;
    static string path1 = string.Empty;
    Boolean cellclick = false;
    Boolean cellclick4 = false;
    static Boolean semperc = false;
    string semdates = string.Empty;
    string semesterval = string.Empty;
    ArrayList subcode = new ArrayList();
    ArrayList sname = new ArrayList();
    ArrayList staffname = new ArrayList();
    //----------------
    double dum_tage_date = 0;
    double hollyhrs;
    int mm = 1;
    int i, minI, minII, perdayhrs, Ihof, IIhof, fullday;
    double checkpre, totmonth;
    string m7, m2, m3, m4, m5, m6, m1, m8, m9;
    int hour1, hour2, hour3, hour4, hour5, hour6, hour7, hour8, hour9;
    int NoHrs = 0, fnhrs = 0, anhrs = 0, minpresI = 0, minpresII = 0;
    int demfcal, demtcal, cal_from_date = 0, cal_to_date = 0;
    string monthcal;
    DateTime per_from_date = new DateTime();
    DateTime per_to_date = new DateTime();
    DateTime dumm_from_date = new DateTime();
    DataSet ds4 = new DataSet();
    Hashtable holiday_table11 = new Hashtable();
    Hashtable holiday_table21 = new Hashtable();
    Hashtable holiday_table31 = new Hashtable();
    DataSet ds_attnd_pts = new DataSet();
    int holi_leav = 0, holi_absent = 0, leav_pt = 0, absent_pt = 0;
    int leave_pointer = 0, absent_pointer = 0;
    string date = "", value = "", tempvalue = string.Empty;
    int ObtValue = 0, per_abshrs = 0, njhr = 0, per_perhrs = 0, tot_per_hrs = 0, per_ondu = 0, tot_ondu = 0;
    int per_leave = 0, per_hhday = 0, unmark = 0;
    double Present = 0, leave_point = 0, Leave = 0;
    double Absent = 0, absent_point = 0, Onduty = 0;
    double per_holidate = 0, njdate = 0, workingdays = 0;
    int dum_unmark = 0;
    int per_hhday_spl = 0, unmark_spl = 0, tot_conduct_hr_spl = 0;
    int per_tot_ondu = 0, per_per_hrs = 0;
    double per_njdate = 0, pre_present_date = 0, per_absent_date = 0, pre_ondu_date = 0;
    double pre_leave_date = 0, per_workingdays = 0;
    string dum_tage_hrs;
    double per_tage_date = 0, per_con_hrs = 0, per_tage_hrs = 0, per_dum_unmark = 0;
    int per_abshrs_spl = 0, tot_per_hrs_spl = 0, tot_ondu_spl = 0;
    //--------------------
    string adegree, abatch, asem, asec, aroll;
    string Att_mark = string.Empty;
    string byr = string.Empty;
    double hollydats;
    int daycount;
    string dd = string.Empty;
    int dat;
    int fm, fyy, fd, tm, tyy, td, fcal, tcal, k;
    double per;
    string roll_no;
    string csem;
    double hours_present = 0;
    double hours_absent = 0;
    double hours_od = 0;
    double hours_total = 0;
    double hours_leave = 0;
    double hours_conduct = 0;
    double hours_pres = 0;
    Hashtable hat = new Hashtable();
    DAccess2 d2 = new DAccess2();
    DataSet ds = new DataSet();
    DataSet ds1 = new DataSet();
    DataSet ds2 = new DataSet();
    DataSet ds3 = new DataSet();
    //******raja
    string[] split1 = new string[3];
    string b_year = "", deg_code = "", semes = string.Empty;
    string sub = string.Empty;
    //******raja
    int njdate_mng = 0, njdate_evng = 0, mmyycount = 0, moncount = 0;
    int per_holidate_mng = 0, per_holidate_evng = 0, per_workingdays1 = 0;
    //===================20/7/12 PRABHA
    int per_abshrs_spl_fals = 0, tot_per_hrs_spl_fals = 0, tot_conduct_hr_spl_fals = 0, tot_ondu_spl_fals = 0;
    double per_leave_fals = 0;
    int per_abshrs_spl_true = 0, tot_per_hrs_spl_true = 0, tot_conduct_hr_spl_true = 0, tot_ondu_spl_true = 0;
    double per_leave_true = 0;
    Boolean cellclick3 = false;
    int mng_conducted_half_days = 0, evng_conducted_half_days = 0, notconsider_value = 0, conduct_hour_new = 0, absent_hours = 0;
    string halforfull = "", mng = "", evng = "", holiday_sched_details = string.Empty;
    int next = 0, count = 0;
    string value_holi_status = "", split_holiday_status_1 = "", split_holiday_status_2 = string.Empty;
    string[] split_holiday_status;
    double dif_date = 0;
    TimeSpan ts;
    string diff_date = string.Empty;
    double dif_date1 = 0;
    Boolean questionflag = false;
    Boolean getquestionflag = false;
    Boolean questionbankflag = false;
    Boolean Cellclick = false;
    //added by annyutha//
    Chart dataf = new Chart();
    AjaxControlToolkit.AccordionPane pn;
    DataSet datauniv = new DataSet();
    DataSet datagrade = new DataSet();
    DataSet datachart = new DataSet();
    DataSet datacre_no = new DataSet();
    DataSet datacam = new DataSet();
    Hashtable ht = new Hashtable();
    DAccess2 da = new DAccess2();
    string f = string.Empty;
    string cur_start_date_date = string.Empty;
    string cur_end_date_date = string.Empty;
    string cur_start_date = "", cur_end_date = string.Empty;
    int tot_abs_hrs = 0;
    double attday = 0;
    double atthour = 0;
    DataSet roll_data = new DataSet();
    DateTime from_date, to_date;
    DateTime t_date;
    DateTime f_date;
    decimal avgstudent1 = 0;
    decimal avgstudent2 = 0;
    double avgstudent3 = 0;
    string[] s_code;
    string day_find;
    string[] split_date_time1;
    string[] dummy_split;
    int rollcount = 0, attroll = 0;
    int tval = 0;
    DateTime dummy_from_date, dummy_to_date;
    int f_month_year = 0, t_month_year = 0, rollmonthcount = 0;
    int tempfdate = 0, temptdate = 0, date_day = 0, date_mnth = 0, date_yr = 0, tot_mnth = 0, rollcolumncount = 0;
    string usercode = string.Empty, collegecode = string.Empty, singleuser = string.Empty, group_user = string.Empty;
    string fdate = "", tdate = "", d = "", d1 = "", totoal_c_hrs = string.Empty;
    int total_conducted_hrs = 0, total_attended_hrs = 0, whole_total_conducted_hrs = 0;
    int row = 0, table = 0;
    DateTime s_date;
    string sume = "", sem_start = "", sem_end = string.Empty;
    int sdate = 0, enddate = 0, month = 0, day = 0, year = 0;
    string strsec1;
    string h = "", da1 = "", davalue = string.Empty;
    Hashtable hasspl_tot = new Hashtable();
    Hashtable hasspl_pres = new Hashtable();
    string key_value = "", attnd_val = string.Empty;
    Panel pnchart1;
    Label lblerror;
    Label lblerror1;
    Label lblerror2;
    Label lblerror3;
    Label lblerror4;
    Label lblerror5;
    Boolean chartbol = false;
    string collegecode1 = string.Empty;
    static string hrr = string.Empty;
    DataSet dsStudDetails = new DataSet();
    #endregion

    protected void Page_Load(object sender, EventArgs e)
    {
        setLabelText();
        chartctr.Visible = false;
        ImageButtonsemtt.Text = lbl_semOrTerm.Text;
        ImageButtonsema.Text = lbl_semOrTerm.Text;
        ImageButtonsemdate.Text = lbl_semOrTerm.Text + " Date";

        if (Session["collegecode"] == null)
        {
            Response.Redirect("Default.aspx");
        }
        string get_value = string.Empty;
        string GetType = string.Empty;
        if (Request.QueryString["app"] != "" && Request.QueryString["app"] != null)
        {
            get_value = (Request.QueryString["app"].ToString());
        }
        else
        {
            Response.Redirect("Default.aspx");
        }
        if (Request.QueryString["Type"] != "" && Request.QueryString["Type"] != null)
        {
            GetType = (Request.QueryString["Type"].ToString());
        }
        if (GetType == "Student")
        {
            lnkback.Visible = false;
            lnkHome.Visible = false;
        }
        get_value = Decrypt(get_value);
        string[] ffff = get_value.Split(new char[] { '$' });
        for (int y = 0; y <= split1.GetUpperBound(0); y++)
        {
            if (y <= ffff.GetUpperBound(0))
            {
                split1[y] = ffff[y];
            }
        }
        appno = split1[0];
        try
        {
            // imgnotification.ImageUrl = "~/image/n1.png";
            int notification = 0;
            notification = int.Parse(GetFunction("select count(*) from tbl_notification n,Registration r where n.viewrs=r.roll_no and r.App_No='" + appno + "' and n.status=0"));
            if (notification > 0)
            {
                imgnotification.ImageUrl = "~/image/n2.png";
            }
        }
        catch { }
        Reg_no = GetFunction("select Reg_No  from Registration where App_No ='" + appno + "'");
        loadsetting();
        //appno = Request.QueryString["app"].ToString();
        tbfrom.Visible = true;
        tbto.Visible = true;
        Fpspersonal.Visible = false;
        Fpsgeneral.Visible = false;
        Fpslesson.Visible = false;
        Fpslibrary.Visible = false;
        Fpsmarks.Visible = false;
        Fpstimetable.Visible = false;
        feedtxt.Visible = false;
        feedbtn.Visible = false;
        feedlbl.Visible = false;
        FpQuestions.Visible = false;
        Fpquestionbank.Visible = false;
        lblnorec.Visible = false;
        lblqa.Visible = false;
        txttype.Visible = false;
        ptype.Visible = false;
        lblmarks.Visible = false;
        ddlmarks.Visible = false;
        lblrptname.Visible = false;
        txtexcelname.Visible = false;
        btnxl.Visible = false;
        btnprintmaster.Visible = false;
        btnsubjectchoosesave.Visible = false;
        errmsg.Visible = false;

        isSchoolOrCollege = CheckSchoolOrCollege(appno);
        if (!IsPostBack)
        {
            divHostelInfo.Visible = false;
            FpSpread3.Visible = false;
            FpSpread1.CommandBar.Visible = false;
            tbfrom.Text = DateTime.Now.ToString("dd-MM-yyyy");
            tbto.Text = DateTime.Now.ToString("dd-MM-yyyy");
            FpSpread1.Sheets[0].BackColor = Color.White;
            quecnt = 0;
            fptest.Visible = false;
            pquestion.Visible = false;
            FpSpread1.Visible = false;
            Fpquestionbank.Sheets[0].AutoPostBack = true;
            Fpquestionbank.CommandBar.Visible = false;
            BindReqby();
            ItemList_gate.Clear();
            loadsetting();

        }
        try
        {
            if (appno != "" && appno != null)
            {
                MemoryStream memoryStream = new MemoryStream();
                //SqlConnection connection = new SqlConnection(GetConnectionString());
                //SqlCommand cmd = new SqlCommand();
                //cmd.CommandText = "select app_no,photo from StdPhoto where app_no='" + appno + "'";
                //cmd.Connection = connection;
                //connection.Open();
                //SqlDataReader MyReader = cmd.ExecuteReader();
                int count = 0;
                DataSet dsStudPhoto = new DataSet();
                dsStudPhoto = d2.select_method_wo_parameter("select app_no,photo,f_photo,m_photo,g_photo from StdPhoto where app_no='" + appno + "'", "Text");
                byte[] file;
                if (dsStudPhoto.Tables[0].Rows.Count > 0)
                {
                    if (dsStudPhoto.Tables[0].Rows[0]["photo"] != DBNull.Value)
                    {
                        file = (byte[])dsStudPhoto.Tables[0].Rows[0]["photo"];
                        string base64String = Convert.ToBase64String(file, 0, file.Length);
                        Imagestudent.ImageUrl = "data:image/jpg;base64," + base64String;
                        Imagestudent.Visible = true;
                    }
                    else
                    {
                        Imagestudent.Visible = false;

                    }
                    if (dsStudPhoto.Tables[0].Rows[0]["f_photo"] != DBNull.Value)
                    {
                        count++;
                        file = (byte[])dsStudPhoto.Tables[0].Rows[0]["f_photo"];
                        string base64String = Convert.ToBase64String(file, 0, file.Length);
                        fatherphoto.ImageUrl = "data:image/jpg;base64," + base64String;
                        fatherphoto.Visible = true;
                        lbl_fatherPhoto.Text = "Father";
                        lbl_fatherPhoto.Visible = true;
                    }
                    else
                    {
                        fatherphoto.Visible = false;
                        lbl_fatherPhoto.Visible = false;

                    }
                    if (dsStudPhoto.Tables[0].Rows[0]["m_photo"] != DBNull.Value)
                    {
                        count++;
                        file = (byte[])dsStudPhoto.Tables[0].Rows[0]["m_photo"];
                        string base64String = Convert.ToBase64String(file, 0, file.Length);
                        motherphoto.ImageUrl = "data:image/jpg;base64," + base64String;
                        motherphoto.Visible = true;
                        lbl_motherPhoto.Text = "Mother";
                        lbl_motherPhoto.Visible = true;
                    }
                    else
                    {
                        motherphoto.Visible = false;
                        lbl_motherPhoto.Visible = false;


                    }
                    if (dsStudPhoto.Tables[0].Rows[0]["g_photo"] != DBNull.Value)
                    {
                        count++;
                        file = (byte[])dsStudPhoto.Tables[0].Rows[0]["g_photo"];
                        string base64String = Convert.ToBase64String(file, 0, file.Length);
                        gaurdianphoto.ImageUrl = "data:image/jpg;base64," + base64String;
                        gaurdianphoto.Visible = true;
                        lbl_guardPhoto.Text = "Guardian";
                        lbl_guardPhoto.Visible = true;
                    }
                    else
                    {
                        gaurdianphoto.Visible = false;
                        lbl_guardPhoto.Visible = false;

                    }
                }
                else
                {
                    Imagestudent.Visible = false;



                }
                //dsStudPhoto.Clear();
                //dsStudPhoto.Dispose();
                //dsStudPhoto.Reset();
                //dsStudPhoto = d2.select_method_wo_parameter("select f_photo from stdphoto where app_no='" + appno + "'", "Text");
                //file=null;
                //if (dsStudPhoto.Tables[0].Rows.Count > 0)
                //{
                //}
                //else
                //{
                //    fatherphoto.Visible = false;
                //}
                //dsStudPhoto.Clear();
                //dsStudPhoto.Dispose();
                //dsStudPhoto.Reset();
                //dsStudPhoto = d2.select_method_wo_parameter("select m_photo from stdphoto where app_no='" + appno + "'", "Text");
                //file = null;
                //if (dsStudPhoto.Tables[0].Rows.Count > 0)
                //{
                //}
                //else
                //{
                //    motherphoto.Visible = false;
                //}
                //dsStudPhoto.Clear();
                //dsStudPhoto.Dispose();
                //dsStudPhoto.Reset();
                //dsStudPhoto = d2.select_method_wo_parameter("select g_photo from stdphoto where app_no='" + appno + "'", "Text");
                //file = null;
                //if (dsStudPhoto.Tables[0].Rows.Count > 0)
                //{
                //}
                //else
                //{
                //    gaurdianphoto.Visible = false;
                //}
                //int count = 0;
                //string testDtr = "Hgaurdianphoto.ashx?id=" + appno;
                ////Imagestudent.ImageUrl = "Handler.ashx?id=" + appno;
                //gaurdianphoto.ImageUrl = "Hgaurdianphoto.ashx?id=" + appno;
                //fatherphoto.ImageUrl = "Hfatherphoto.ashx?id=" + appno;
                //motherphoto.ImageUrl = "Hmotherphoto.ashx?id=" + appno;
                //Visible="<%# Eval("ImageFile")!=DBNull.Value %>";
                //Visible='<%# Eval("ImageFile")==DBNull.Value ? false: true %>'
                //WebClient client = new WebClient();
                //byte[] Value = client.DownloadData(gaurdianphoto.ImageUrl);
                //if (Value != null)
                //{
                //    gaurdianphoto.Visible = true;
                //}
                //else
                //{
                //    gaurdianphoto.Visible = false;
                //}  
                //var baseUri = new Uri(Request.Url.GetLeftPart(UriPartial.Authority));
                //var url = new Uri(baseUri, VirtualPathUtility.ToAppRelative(testDtr));
                //using (var client = new HttpClient())
                //{
                //    var request = new HttpRequestMessage(HttpMethod.Head, url);
                //    var response = client.SendAsync(request).Result;
                //    if (response.IsSuccessStatusCode)
                //    {
                //         //the image exists:
                //        //gaurdianphoto.ImageUrl = "Hgaurdianphoto.ashx?id=" + appno;
                //        gaurdianphoto.ImageUrl = testDtr;
                //    }
                //    else
                //    {
                //        gaurdianphoto.Visible = false;
                //    }
                //}
                //if (count == 0)
                //{
                //    tblStudParents.Attributes.Add("display", "none");
                //    tblStudParents.Visible = false;
                //    //  MainDiv.Attributes.Add("style", "top: 255px; position: relative; width: 976px;");
                //}
                //else
                //{
                //    tblStudParents.Attributes.Add("display", "block");
                //    tblStudParents.Visible = true;
                //}
            }
            else
            {
                Imagestudent.Visible = false;
                fatherphoto.Visible = false;
                motherphoto.Visible = false;
                gaurdianphoto.Visible = false;
            }
        }
        catch (Exception ex)
        {
            // MessageBox.Show(ex.Message);
        }
        //lblAlertReval.Visible = false;
        //modified by annyutha 18th sep 14//
        if (appno != "" && appno != null)
        {
            //Hidden By Malang Raja
            //cmd.CommandText = "Select registration.Stud_Name,(select case course.Course_Name when '-1' then ' ' else course.Course_Name end from degree,course where course.Course_Id=degree.Course_Id and degree.Degree_Code=registration.degree_code),(select department.Dept_Name from degree,department where department.Dept_Code=degree.Dept_Code and degree.Degree_Code=registration.degree_code )current_year,(select degree_code from degree,department where department.Dept_Code=degree.Dept_Code and degree.Degree_Code=registration.degree_code)degree_code,registration.current_semester,registration.batch_year,registration.roll_no,(select collname from collinfo where college_code=(select college_code from degree as d where d.degree_code=registration.degree_code)),registration.college_code from applyn,registration where applyn.app_no = registration.app_no and  registration.app_no='" + appno + "'";
            //cmd.Connection = con;
            //con.Open();
            //SqlDataReader rgen = cmd.ExecuteReader();
            // Ended Hidden By Malang Raja
            dsStudDetails.Dispose();
            dsStudDetails.Reset();
            dsStudDetails.Clear();
            dsStudDetails = da.select_method_wo_parameter("Select registration.Stud_Name,(select case course.Course_Name when '-1' then ' ' else course.Course_Name end from degree,course where course.Course_Id=degree.Course_Id and degree.Degree_Code=registration.degree_code) as Course_Name,(select department.Dept_Name from degree,department where department.Dept_Code=degree.Dept_Code and degree.Degree_Code=registration.degree_code )current_year,(select degree_code from degree,department where department.Dept_Code=degree.Dept_Code and degree.Degree_Code=registration.degree_code)degree_code,registration.current_semester,registration.batch_year,registration.roll_no,(select collname from collinfo where college_code=(select college_code from degree as d where d.degree_code=registration.degree_code)) as College_Name,registration.college_code from applyn,registration where applyn.app_no = registration.app_no and  registration.app_no='" + appno + "'", "Text");
        }
        if (dsStudDetails.Tables.Count > 0)
        {
            if (dsStudDetails.Tables[0].Rows.Count > 0)
            {
                lblsname.Text = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["Stud_Name"]);
                nameprint = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["Stud_Name"]);
                lbldegree.Text = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["Course_Name"]) + "-" + Convert.ToString(dsStudDetails.Tables[0].Rows[0]["current_year"]);
                departmentprint = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["Course_Name"]) + "-" + Convert.ToString(dsStudDetails.Tables[0].Rows[0]["current_year"]);
                int lenth = lbldegree.Text.Length;
                // if (lenth < 29)
                // pdeg.Attributes.Add("style", "top: 80px; left: 310px; position: absolute; height: 49px; width: 309px;");
                Session["degree_code"] = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["degree_code"]);
                lblsem.Text = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["current_semester"]);
                semprint = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["current_semester"]);
                batchprint = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["batch_year"]);
                lblyear.Text = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["batch_year"]);
                Session["RollNo"] = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["roll_no"]);
                lblRegText.Text = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["roll_no"]);
                lblcol.Text = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["College_Name"]);
                Session["college_code"] = Convert.ToString(dsStudDetails.Tables[0].Rows[0]["college_code"]);
                collegecode1 = Convert.ToString(Session["college_code"]);
            }
            //lblsname.Text = rgen.GetValue(0).ToString();
            //nameprint = rgen.GetValue(0).ToString();
            //lbldegree.Text = rgen.GetValue(1).ToString() + "-" + rgen.GetValue(2).ToString();
            //departmentprint = rgen.GetValue(1).ToString() + "-" + rgen.GetValue(2).ToString();
            //int lenth = lbldegree.Text.Length;
            //if (lenth < 29)
            //    pdeg.Attributes.Add("style", "top: 80px; left: 310px; position: absolute; height: 49px; width: 309px;");
            //Session["degree_code"] = rgen.GetValue(3).ToString();
            //lblsem.Text = rgen.GetValue(4).ToString();
            //semprint = rgen.GetValue(4).ToString();
            //batchprint = rgen.GetValue(5).ToString();
            //lblyear.Text = rgen.GetValue(5).ToString();
            //Session["RollNo"] = rgen.GetValue(6).ToString();
            //lblcol.Text = rgen.GetValue(7).ToString();
            //Session["college_code"] = rgen.GetValue(8).ToString();
            //collegecode1 = Convert.ToString(Session["college_code"]);
        }
        //end//
        //rgen.Close();
        //con.Close();
        Fp_student_conduct.Sheets[0].ColumnCount = 6;
        Fp_student_conduct.Sheets[0].Columns[1].Width = 180;
        Fp_student_conduct.Sheets[0].Columns[2].Width = 180;
        Fp_student_conduct.Sheets[0].Columns[3].Width = 150;
        Fp_student_conduct.Sheets[0].Columns[4].Width = 100;
        Fp_student_conduct.Sheets[0].Columns[5].Width = 100;
        Fp_student_conduct.Width = 900;
        Fp_student_conduct.Sheets[0].AutoPostBack = true;
        Fp_student_conduct.Sheets[0].RowHeader.Visible = true;
        Fp_student_conduct.Sheets[0].ColumnHeader.Visible = true;
        Fp_student_conduct.CommandBar.Visible = false;
        Fp_student_conduct.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        Fp_student_conduct.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        Fp_student_conduct.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        Fp_student_conduct.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
        Fp_student_conduct.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
        Fp_student_conduct.Sheets[0].DefaultStyle.Font.Bold = true;
        Fp_student_conduct.Sheets[0].ColumnHeader.Cells[0, 0].Text = "Action Date";
        Fp_student_conduct.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Action Taken";//Infraction Type
        Fp_student_conduct.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Remarks";
        Fp_student_conduct.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Professor Incharge";
        Fp_student_conduct.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Suspension Days";
        Fp_student_conduct.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Fine Amount";
        Fp_student_conduct.Sheets[0].Columns[5].Visible = false;
        Fp_student_conduct.Sheets[0].Columns[4].Visible = false;
        string str_action_taken = string.Empty;
        string get_roll_no = GetFunction("select roll_no from registration where app_no='" + appno.ToString() + "'");
        Fp_student_conduct.Sheets[0].RowCount = 0;
        string str_stud_conduct = "select convert(varchar(10),curr_date,103)curr_date,* from stucon where roll_no='" + get_roll_no.ToString() + "'";
        DataSet ds_studconduct = new DataSet();
        //SqlDataAdapter da_studconduct = new SqlDataAdapter(str_stud_conduct, con_stud_conduct);
        //con_stud_conduct.Close();
        //con_stud_conduct.Open();
        //da_studconduct.Fill(ds_studconduct);
        ds_studconduct = da.select_method_wo_parameter(str_stud_conduct, "Text");
        if (ds_studconduct.Tables[0].Rows.Count > 0) // chking the condn for student conduct details
        {
            // Label2.Visible = false;
            Fp_student_conduct.Visible = true;
            for (int i = 0; i < ds_studconduct.Tables[0].Rows.Count; i++)
            {
                str_action_taken = string.Empty;//Rajkumar 25/12/2017
                Fp_student_conduct.Sheets[0].RowCount++;
                if (ds_studconduct.Tables[0].Rows[i]["curr_date"].ToString() != " " && ds_studconduct.Tables[0].Rows[i]["curr_date"].ToString() != "" && ds_studconduct.Tables[0].Rows[i]["curr_date"].ToString() != null)
                {
                    Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 0].Text = ds_studconduct.Tables[0].Rows[i]["curr_date"].ToString();
                    Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                }
                //barath 12.12.17
                //if (ds_studconduct.Tables[0].Rows[i]["infr_type"].ToString() != " " && ds_studconduct.Tables[0].Rows[i]["infr_type"].ToString() != "" && ds_studconduct.Tables[0].Rows[i]["infr_type"].ToString() != null)
                //{
                //    Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 1].Text = ds_studconduct.Tables[0].Rows[i]["infr_type"].ToString();
                //    Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                //}
                if (ds_studconduct.Tables[0].Rows[i]["ack_diss"].ToString() != " " && ds_studconduct.Tables[0].Rows[i]["ack_diss"].ToString() != "" && ds_studconduct.Tables[0].Rows[i]["ack_diss"].ToString() != null)
                {
                    if (ds_studconduct.Tables[0].Rows[i]["ack_diss"].ToString() == "1")//if (ds_studconduct.Tables[0].Rows[0]["ack_diss"].ToString() == "1")//Rajkumar 5/1/2018
                    {
                        str_action_taken = "Dismiss";
                    }
                }
                if (ds_studconduct.Tables[0].Rows[i]["ack_susp"].ToString() != " " && ds_studconduct.Tables[0].Rows[i]["ack_susp"].ToString() != "" && ds_studconduct.Tables[0].Rows[i]["ack_susp"].ToString() != null)
                {
                    if (ds_studconduct.Tables[0].Rows[i]["ack_susp"].ToString() == "1")
                    {
                        if (str_action_taken != "")
                        {
                            str_action_taken = str_action_taken + "," + "Suspend";
                        }
                        else
                        {
                            str_action_taken = "Suspend";
                        }
                    }
                }
                if (ds_studconduct.Tables[0].Rows[i]["ack_warn"].ToString() != " " && ds_studconduct.Tables[0].Rows[i]["ack_warn"].ToString() != "" && ds_studconduct.Tables[0].Rows[i]["ack_warn"].ToString() != null)
                {
                    if (ds_studconduct.Tables[0].Rows[i]["ack_warn"].ToString() == "1")
                    {
                        if (str_action_taken != "")
                        {
                            str_action_taken = str_action_taken + "," + "Warning";
                        }
                        else
                        {
                            str_action_taken = "Warning";
                        }
                    }
                }
                if (ds_studconduct.Tables[0].Rows[i]["ack_fine"].ToString() != " " && ds_studconduct.Tables[0].Rows[i]["ack_fine"].ToString() != "" && ds_studconduct.Tables[0].Rows[i]["ack_fine"].ToString() != null)
                {
                    if (ds_studconduct.Tables[0].Rows[i]["ack_fine"].ToString() == "1")
                    {
                        if (str_action_taken != "")
                        {
                            str_action_taken = str_action_taken + "," + "Fine";
                        }
                        else
                        {
                            str_action_taken = "Fine";
                        }
                    }
                }
                //barath 15.12.17
                if (!string.IsNullOrEmpty(Convert.ToString(ds_studconduct.Tables[0].Rows[i]["ack_fee_of_roll"]).Trim()))
                    if (Convert.ToString(ds_studconduct.Tables[0].Rows[i]["ack_fee_of_roll"]) == "1")
                        if (!string.IsNullOrEmpty(str_action_taken))
                            str_action_taken = str_action_taken + "," + "Fee Off The Roll";
                        else
                            str_action_taken = "Fee Off The Roll";
                if (!string.IsNullOrEmpty(Convert.ToString(ds_studconduct.Tables[0].Rows[i]["ack_remarks"]).Trim()))
                    if (Convert.ToString(ds_studconduct.Tables[0].Rows[i]["ack_remarks"]) == "1")
                        if (!string.IsNullOrEmpty(str_action_taken))
                            str_action_taken = str_action_taken + "";
                        else
                            str_action_taken = "Remarks";

                Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 1].Text = str_action_taken.ToString();
                Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;

                Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds_studconduct.Tables[0].Rows[i]["Remark"]);
                Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;

                if (ds_studconduct.Tables[0].Rows[i]["prof_code"].ToString() != " " && ds_studconduct.Tables[0].Rows[i]["prof_code"].ToString() != "" && ds_studconduct.Tables[0].Rows[i]["prof_code"].ToString() != null)
                {
                    string prof_name = GetFunction("select staff_name from  staffmaster where staff_code='" + ds_studconduct.Tables[0].Rows[i]["prof_code"].ToString() + "'");
                    Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 3].Text = prof_name.ToString();
                    Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;
                }
                if (ds_studconduct.Tables[0].Rows[i]["ack_susp"].ToString() == "1")
                {
                    if (ds_studconduct.Tables[0].Rows[i]["tot_days"].ToString() != " " && ds_studconduct.Tables[0].Rows[i]["tot_days"].ToString() != "" && ds_studconduct.Tables[0].Rows[i]["tot_days"].ToString() != null)
                    {
                        Fp_student_conduct.Sheets[0].Columns[4].Visible = true;
                        Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 4].Text = ds_studconduct.Tables[0].Rows[i]["tot_days"].ToString();
                        Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
                    }
                }
                if (ds_studconduct.Tables[0].Rows[i]["ack_fine"].ToString() == "1")
                {
                    if (ds_studconduct.Tables[0].Rows[i]["fine_amo"].ToString() != " " && ds_studconduct.Tables[0].Rows[i]["fine_amo"].ToString() != "" && ds_studconduct.Tables[0].Rows[i]["fine_amo"].ToString() != null)
                    {
                        Fp_student_conduct.Sheets[0].Columns[5].Visible = true;
                        Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 5].Text = ds_studconduct.Tables[0].Rows[i]["fine_amo"].ToString();
                        Fp_student_conduct.Sheets[0].Cells[Fp_student_conduct.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Center;
                    }
                }
            } //-----------end  for loop
        } //----------end student conduct details
        else
        {
            Fp_student_conduct.Visible = true;
            Fp_student_conduct.Sheets[0].ColumnCount = 1;
            Fp_student_conduct.Sheets[0].RowCount = 1;
            Fp_student_conduct.Sheets[0].RowHeader.Visible = false;
            Fp_student_conduct.Sheets[0].ColumnHeader.Visible = false;
            Fp_student_conduct.CommandBar.Visible = false;
            Fp_student_conduct.Width = 300;
            Fp_student_conduct.Sheets[0].Cells[0, 0].Text = "Student conduct details does not exist";
            //Label2.Visible = false;
        }
        //++++++++++++++raja+++++++++++++++++++//

        #region Added by saranya on 10/10/2018
        DataTable dtCounselling = new DataTable();
        DataRow drow;

        dtCounselling.Columns.Add("Date", typeof(string));
        dtCounselling.Columns.Add("Greivance", typeof(string));
        dtCounselling.Columns.Add("Counselling Given", typeof(string));
        dtCounselling.Columns.Add("Counsellor Name", typeof(string));
        string selQry = "select * from StudentCounsellingDetails where appNo='" + appno.ToString() + "'";

        DataSet ds_Counselling = new DataSet();
        ds_Counselling = da.select_method_wo_parameter(selQry, "Text");
        if (ds_Counselling.Tables[0].Rows.Count > 0)
        {
            for (int row = 0; row < ds_Counselling.Tables[0].Rows.Count; row++)
            {
                string Counsdate = Convert.ToString(ds_Counselling.Tables[0].Rows[row]["counselling_date"]);
                string[] splitDt = Counsdate.Split('/');
                Counsdate = splitDt[1] + "/" + splitDt[0] + "/" + splitDt[2];

                drow = dtCounselling.NewRow();
                drow["Date"] = Convert.ToString(Counsdate.Split(' ')[0]);
                drow["Greivance"] = Convert.ToString(ds_Counselling.Tables[0].Rows[row]["Grievance"]).Trim();
                drow["Counselling Given"] = Convert.ToString(ds_Counselling.Tables[0].Rows[row]["counselling_given"]).Trim();
                drow["Counsellor Name"] = Convert.ToString(ds_Counselling.Tables[0].Rows[row]["CounsellorName"]).Trim();
                dtCounselling.Rows.Add(drow);
            }
            divCounsellingReport.Visible = true;
            grdcounselling.DataSource = dtCounselling;
            grdcounselling.DataBind();
            grdcounselling.Visible = true;

            for (int l = 0; l < grdcounselling.Rows.Count; l++)
            {
                foreach (GridViewRow row in grdcounselling.Rows)
                {
                    foreach (TableCell cell in row.Cells)
                    {
                        grdcounselling.Rows[l].Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        grdcounselling.Rows[l].Cells[0].Font.Size = FontUnit.Larger;
                        grdcounselling.Rows[l].Cells[1].HorizontalAlign = HorizontalAlign.Center;
                        grdcounselling.Rows[l].Cells[1].Font.Size = FontUnit.Larger;
                        grdcounselling.Rows[l].Cells[2].HorizontalAlign = HorizontalAlign.Left;
                        grdcounselling.Rows[l].Cells[2].Font.Size = FontUnit.Larger;
                        grdcounselling.Rows[l].Cells[3].HorizontalAlign = HorizontalAlign.Left;
                        grdcounselling.Rows[l].Cells[3].Font.Size = FontUnit.Larger;
                        grdcounselling.Rows[l].Cells[4].HorizontalAlign = HorizontalAlign.Center;
                        grdcounselling.Rows[l].Cells[4].Font.Size = FontUnit.Larger;
                    }
                }
            }
        }
        else
        {
            divCounsellingReport.Visible = false;
            grdcounselling.Visible = false;
        }

        #endregion


        if (!IsPostBack)
        {
            string roll = Session["RollNo"] + "";
            con_roll.Close();
            con_roll.Open();
            string query_string = "select top 1 batch_year,degree_code,current_semester from registration where roll_no='" + roll + "'";
            SqlDataAdapter sda = new SqlDataAdapter(query_string, con_roll);
            DataSet ds_roll = new DataSet();
            sda.Fill(ds_roll);
            if (0 < ds_roll.Tables[0].Rows.Count)
            {
                Session["b_year"] = ds_roll.Tables[0].Rows[0]["batch_year"].ToString();
                Session["deg_code"] = ds_roll.Tables[0].Rows[0]["degree_code"].ToString();
                Session["semes"] = ds_roll.Tables[0].Rows[0]["current_semester"].ToString();
            }
            con_roll.Close();
            con_roll.Open();
            string query_sub = "select distinct isnull(Subject_Code,'') as Subject_Code , isnull(subjecT_name,'') as subname ,s.subject_no as subject_no,sc.semester from subject as S,syllabus_master as SM,subjectchooser as SC,Sub_sem as Sem,registration r where S.subject_no=SC.Subject_no and s.syll_code=SM.syll_code and SM.degree_code=r.degree_code and SM.Semester=r.current_semester and SM.batch_year=r.Batch_Year and sc.roll_no=r.roll_no and S.subtype_no = Sem.subtype_no and promote_count=1 and r.roll_no='" + roll + "' order by s.subject_no";
            SqlDataAdapter sda_sub = new SqlDataAdapter(query_sub, con_roll);
            DataSet ds_sub = new DataSet();
            sda_sub.Fill(ds_sub);
            if (0 < ds_sub.Tables[0].Rows.Count)
            {
                ddlsubjects.DataSource = ds_sub;
                ddlsubjects.DataTextField = "subname";
                ddlsubjects.DataValueField = "subject_no";
                ddlsubjects.DataBind();
                ddlsubjects.Items.Insert(0, "Select");
            }
            else
            {
                FpSpread3.Visible = false;
                FpSpread3.Sheets[0].ColumnCount = 0;
                FpSpread3.Sheets[0].RowCount = 0;
                FpSpread3.Sheets[0].ColumnCount = 4;
                FpSpread3.Sheets[0].RowCount = 1;
                FpSpread3.ColumnHeader.Columns.Default.Width = 150;
                FpSpread3.ColumnHeader.Visible = false;
                FpSpread3.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                FpSpread3.Width = 600;
                FpSpread3.Height = 150;
                FpSpread3.Sheets[0].Cells[0, 0].Text = "Subjects is not Choosed.";
                FpSpread3.Sheets[0].Cells[0, 0].Locked = true;
                FpSpread3.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                FpSpread3.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                FpSpread3.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                FpSpread3.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                FpSpread3.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                FpSpread3.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                FpSpread3.Visible = true;
            }
            loadsetting(); //added by raja           
        }
        Fp_student_conduct.Sheets[0].PageSize = Fp_student_conduct.Sheets[0].RowCount;
        FpQuestions.Sheets[0].AutoPostBack = false;
        FpQuestions.Sheets[0].RowHeader.Visible = false;
        FpQuestions.Sheets[0].ColumnHeader.Visible = true;
        FpQuestions.CommandBar.Visible = false;
        FpQuestions.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        FpQuestions.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        FpQuestions.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        FpQuestions.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
        FpQuestions.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
        FpQuestions.Sheets[0].DefaultStyle.Font.Bold = true;
        Fpquestionbank.Sheets[0].AutoPostBack = true;
        Fpquestionbank.Sheets[0].RowHeader.Visible = false;
        Fpquestionbank.Sheets[0].ColumnHeader.Visible = true;
        Fpquestionbank.CommandBar.Visible = false;
        Fpquestionbank.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        Fpquestionbank.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        Fpquestionbank.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        Fpquestionbank.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
        Fpquestionbank.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
        Fpquestionbank.Sheets[0].DefaultStyle.Font.Bold = true;
        string buttonok = String.Empty;
        string spread = string.Empty;
        Control control = null;
        string controlatt = string.Empty;
        string ctrlname = Page.Request.Params["__EVENTTARGET"];
        if (ctrlname != null && ctrlname != String.Empty)
        {
            control = Page.FindControl(ctrlname);
            spread = ctrlname.ToString();
        }
        else
        {
            string ctrlStr = String.Empty;
            Control c = null;
            foreach (string ctl in Page.Request.Form)
            {
                if (ctl.EndsWith(".x") || ctl.EndsWith(".y"))
                {
                    ctrlStr = ctl.Substring(0, ctl.Length - 2);
                    c = Page.FindControl(ctrlStr);
                }
                else
                {
                    c = Page.FindControl(ctl);
                    buttonok = ctl;
                }
                if (c is System.Web.UI.WebControls.Button ||
                         c is System.Web.UI.WebControls.ImageButton)
                {
                    control = c;
                    break;
                }
            }
        }
        string buttonstaus = string.Empty;
        if (buttonok != "")
        {
            string[] button = buttonok.Split('$');
            buttonstaus = button[0].ToString().Trim();
            if (buttonstaus.ToString().Trim().ToLower() == "printcontrol")
            {
                Fpsmarks.Visible = true;
                btnprintmaster.Visible = true;
                lblrptname.Visible = true;
                txtexcelname.Visible = true;
                btnxl.Visible = true;
            }
        }

    }

    public DateTime TextToDate(TextBox txt)
    {
        DateTime dt = new DateTime();
        string firstdate = Convert.ToString(txt.Text);
        string[] split = firstdate.Split('/');
        dt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
        return dt;
    }

    protected void loadsetting()
    {
        try
        {
            ArrayList addcount = new ArrayList();
            string selectquery = "select rights_code from security_user_right where college_code=" + Session["college_code"] + " and ISNULL(user_code,0)=0";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selectquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int l = 0; l < ds.Tables[0].Rows.Count; l++)
                {
                    string code = Convert.ToString(ds.Tables[0].Rows[l]["rights_code"]);
                    addcount.Add(code);
                    //if (code == "160002")
                    //{
                    //    pHeaderpersonal.Visible = true;
                    //    pBodypersonal.Visible = true;
                    //}
                    //else if (code == "160003")
                    //{
                    //    pHeadertimetable.Visible = true;
                    //    pBodytimetable.Visible = true;
                    //}
                    //else if (code == "160004")
                    //{
                    //    pHeadermarks.Visible = true;
                    //    pBodymarks.Visible = true;
                    //}
                    //else if (code == "160005")
                    //{
                    //    pHeaderlessonstatus.Visible = true;
                    //    pBodylessonstatus.Visible = true;
                    //}
                    //else if (code == "160006")
                    //{
                    //    pHeaderAttendence.Visible = true;
                    //    pBodyAttendence.Visible = true;
                    //}
                    //else if (code == "160007")
                    //{
                    //    pHeaderLibrary.Visible = true;
                    //    pBodyLibrary.Visible = true;
                    //}
                    //else if (code == "160008")
                    //{
                    //    pHeaderGeneral.Visible = true;
                    //    pBodyGeneral.Visible = true;
                    //}
                    //else if (code == "160009")
                    //{
                    //    Panel2.Visible = true;
                    //    Panel3.Visible = true;
                    //}
                    //else if (code == "160010")
                    //{
                    //    Panel4.Visible = true;
                    //    pnl_student_conduct.Visible = true;
                    //}
                    //else if (code == "160011")
                    //{
                    //    Panelquestion.Visible = true;
                    //    Panel5.Visible = true;
                    //}
                    //else if (code == "160012")
                    //{
                    //    Panel6.Visible = true;
                    //    Panel7.Visible = true;
                    //}
                }
            }
            if (addcount.Count > 0)
            {
                //Panel13.Visible = true;
                if (addcount.Contains("160002"))
                {
                    pHeaderpersonal.Visible = true;
                    pBodypersonal.Visible = true;
                }
                if (addcount.Contains("1600021"))
                {
                    pHeaderpersonal.Visible = true;
                    pBodypersonal.Visible = true;
                    ImageButtonbio.Visible = true;
                }
                if (addcount.Contains("1600022"))
                {
                    pHeaderpersonal.Visible = true;
                    pBodypersonal.Visible = true;
                    ImageButtoncontact.Visible = true;
                }
                if (addcount.Contains("1600023"))
                {
                    pHeaderpersonal.Visible = true;
                    pBodypersonal.Visible = true;
                    ImageButtoncertificate.Visible = true;
                }
                if (addcount.Contains("160003"))
                {
                    pHeadertimetable.Visible = true;
                    pBodytimetable.Visible = true;
                }
                if (addcount.Contains("1600031"))
                {
                    pHeadertimetable.Visible = true;
                    pBodytimetable.Visible = true;
                    ImageButtontodaytt.Visible = true;
                }
                if (addcount.Contains("1600032"))
                {
                    pHeadertimetable.Visible = true;
                    pBodytimetable.Visible = true;
                    ImageButtonsemtt.Visible = true;
                }
                if (addcount.Contains("1600033"))
                {
                    pHeadertimetable.Visible = true;
                    pBodytimetable.Visible = true;
                    ImageButtoncamtt.Visible = true;
                }
                if (addcount.Contains("1600034"))
                {
                    pHeadertimetable.Visible = true;
                    pBodytimetable.Visible = true;
                    ImageButtonextt.Visible = true;
                }
                if (addcount.Contains("160004"))
                {
                    pHeadermarks.Visible = true;
                    pBodymarks.Visible = true;
                }
                if (addcount.Contains("1600041"))
                {
                    pHeadermarks.Visible = true;
                    pBodymarks.Visible = true;
                    ImageButtonsubject.Visible = true;
                }
                if (addcount.Contains("1600042"))
                {
                    pHeadermarks.Visible = true;
                    pBodymarks.Visible = true;
                    ImageButton1.Visible = true;
                }
                if (addcount.Contains("1600043"))
                {
                    pHeadermarks.Visible = true;
                    pBodymarks.Visible = true;
                    ImageButtonArrear.Visible = true;
                }
                if (addcount.Contains("1600044"))
                {
                    pHeadermarks.Visible = true;
                    pBodymarks.Visible = true;
                    ImageButtonCamv.Visible = true;
                }
                if (addcount.Contains("1600045"))
                {
                    pHeadermarks.Visible = true;
                    pBodymarks.Visible = true;
                    btnsubjectchooser.Visible = true;
                }
                if (addcount.Contains("160005"))
                {
                    pHeaderlessonstatus.Visible = true;
                    pBodylessonstatus.Visible = true;
                }
                if (addcount.Contains("1600051"))
                {
                    pHeaderlessonstatus.Visible = true;
                    pBodylessonstatus.Visible = true;
                    ImageButtonconduct.Visible = true;
                }
                if (addcount.Contains("1600052"))
                {
                    pHeaderlessonstatus.Visible = true;
                    pBodylessonstatus.Visible = true;
                    ImageButtonmis.Visible = true;
                }
                if (addcount.Contains("1600053"))
                {
                    pHeaderlessonstatus.Visible = true;
                    pBodylessonstatus.Visible = true;
                    ImageButtonyet.Visible = true;
                }
                if (addcount.Contains("160006"))
                {
                    pHeaderAttendence.Visible = true;
                    pBodyAttendence.Visible = true;
                }
                if (addcount.Contains("1600061"))
                {
                    pHeaderAttendence.Visible = true;
                    pBodyAttendence.Visible = true;
                    ImageButtontodaya.Visible = true;
                }
                if (addcount.Contains("1600062"))
                {
                    pHeaderAttendence.Visible = true;
                    pBodyAttendence.Visible = true;
                    ImageButtonweeka.Visible = true;
                }
                if (addcount.Contains("1600063"))
                {
                    pHeaderAttendence.Visible = true;
                    pBodyAttendence.Visible = true;
                    ImageButtonsema.Visible = true;
                }
                if (addcount.Contains("1600064"))
                {
                    pHeaderAttendence.Visible = true;
                    pBodyAttendence.Visible = true;
                    ImageButtonsemdate.Visible = true;
                }
                if (addcount.Contains("1600065"))
                {
                    pHeaderAttendence.Visible = true;
                    pBodyAttendence.Visible = true;
                    ImageButtonevents.Visible = true;
                }
                if (addcount.Contains("1600066"))
                {
                    pHeaderAttendence.Visible = true;
                    pBodyAttendence.Visible = true;
                    ImageButtonexamseat.Visible = true;
                }
                if (addcount.Contains("160007"))
                {
                    pHeaderLibrary.Visible = true;
                    pBodyLibrary.Visible = true;
                }
                if (addcount.Contains("1600071"))
                {
                    pHeaderLibrary.Visible = true;
                    pBodyLibrary.Visible = true;
                    //ImageButtonopac.Visible = true;
                }
                if (addcount.Contains("1600072"))
                {
                    pHeaderLibrary.Visible = true;
                    pBodyLibrary.Visible = true;
                    ImageButtonlibcards.Visible = true;
                }
                if (addcount.Contains("1600073"))
                {
                    pHeaderLibrary.Visible = true;
                    pBodyLibrary.Visible = true;
                    ImageButtonbukt.Visible = true;
                }
                if (addcount.Contains("1600074"))
                {
                    pHeaderLibrary.Visible = true;
                    pBodyLibrary.Visible = true;
                    ImageButtonremind.Visible = true;
                }
                if (addcount.Contains("1600075"))
                {
                    pHeaderLibrary.Visible = true;
                    pBodyLibrary.Visible = true;
                    ImageButtonbukr.Visible = true;
                }
                if (addcount.Contains("1600076"))
                {
                    pHeaderLibrary.Visible = true;
                    pBodyLibrary.Visible = true;
                    ImageButtonfine.Visible = true;
                }
                if (addcount.Contains("160008"))
                {
                    pHeaderGeneral.Visible = true;
                    pBodyGeneral.Visible = true;
                }
                if (addcount.Contains("1600081"))
                {
                    pHeaderGeneral.Visible = true;
                    pBodyGeneral.Visible = true;
                    ImageButtonfees.Visible = true;
                }
                if (addcount.Contains("1600082"))
                {
                    pHeaderGeneral.Visible = true;
                    pBodyGeneral.Visible = true;
                    ImageButtontransport.Visible = true;
                }
                if (addcount.Contains("1600083"))
                {
                    pHeaderGeneral.Visible = true;
                    pBodyGeneral.Visible = true;
                    ImageButtonfeedback.Visible = true;
                }
                if (addcount.Contains("1600084"))
                {
                    pHeaderGeneral.Visible = true;
                    pBodyGeneral.Visible = true;
                    ImageButton3.Visible = true;
                }
                //added by deepali 8/11/17
                if (addcount.Contains("1600085"))
                {
                    pHeaderGeneral.Visible = true;
                    pBodyGeneral.Visible = true;
                    ImageButtonHostel.Visible = true;
                }
                if (addcount.Contains("160009"))
                {
                    Panel2.Visible = true;
                    Panel3.Visible = true;
                }
                if (addcount.Contains("160010"))
                {
                    Panel4.Visible = true;
                    pnl_student_conduct.Visible = true;
                }
                if (addcount.Contains("160011"))
                {
                    Panelquestion.Visible = true;
                    Panel5.Visible = true;
                }
                if (addcount.Contains("160012"))
                {
                    Panel6.Visible = true;
                    Panel7.Visible = true;
                }
                if (addcount.Contains("1600124"))
                {
                    Panel6.Visible = true;
                    Panel7.Visible = true;
                    imgbutton.Visible = true;
                }
                if (addcount.Contains("160013"))
                {
                    Panel9.Visible = true;
                    Panel10.Visible = true;
                }
            }
        }
        catch
        {
        }
    }

    //#region Encryption/decryption
    //private static string Decrypt(string inputText)
    //{
    //    RijndaelManaged rijndaelCipher = new RijndaelManaged();
    //    byte[] encryptedData = Convert.FromBase64String(inputText);
    //    PasswordDeriveBytes secretKey = new PasswordDeriveBytes(ENCRYPTION_KEY, SALT);
    //    using (ICryptoTransform decryptor = rijndaelCipher.CreateDecryptor(secretKey.GetBytes(32), secretKey.GetBytes(16)))
    //    {
    //        using (MemoryStream memoryStream = new MemoryStream(encryptedData))
    //        {
    //            using (CryptoStream cryptoStream = new CryptoStream(memoryStream, decryptor, CryptoStreamMode.Read))
    //            {
    //                byte[] plainText = new byte[encryptedData.Length];
    //                int decryptedCount = cryptoStream.Read(plainText, 0, plainText.Length);
    //                return Encoding.Unicode.GetString(plainText, 0, decryptedCount);
    //            }
    //        }
    //    }
    //}
    //#endregion

    public void func_load_stud_conduct()
    {
    }

    public bool isNumeric(string val, System.Globalization.NumberStyles NumberStyle)
    {
        Double result;
        return Double.TryParse(val, NumberStyle,
            System.Globalization.CultureInfo.CurrentCulture, out result);
    }

    protected void Buttonbiodata_Click(object sender, EventArgs e)
    {
        try
        {
            #region BioData Student
            FarPoint.Web.Spread.TextCellType objtext = new FarPoint.Web.Spread.TextCellType();

            initpersonal();
            Fpspersonal.Visible = true;
            string query = string.Empty;
            query = "select case r.sections when '-1' then '' else r.sections end as sections,r.Stud_Name,a.App_Formno,isnull(a.first_graduate,'0') as firstgraduate,r.Roll_Admit,r.Roll_no,r.Reg_No,CONVERT(VARCHAR(10),a.date_applied,103) as app_date, CONVERT(VARCHAR(10),r.Adm_Date,103) as adm_date, case a.sex when 1 then 'Female' else 'Male' end as sex, CONVERT(VARCHAR(10),a.dob,103) as dob,r.Batch_Year,(select course.Course_Name+' - '+department.Dept_Name   from degree,course,department where course.Course_Id=degree.Course_Id and department.Dept_Code=degree.Dept_Code and degree.Degree_Code=r.degree_code)as dept,r.Current_year,r.Current_Semester,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.seattype and textcriteria='seat') as seat,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.caste and textcriteria='caste') as caste,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.bldgrp and textcriteria='bgrou') as blood,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.community and textcriteria='comm') as community,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.religion and textcriteria='relig') as religion,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.mother_tongue and textcriteria='mton') as mtongue,r.Stud_Type,a.idmark,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.co_curricular and textcriteria='cocur') as activity,a.guardian_name,isnull(Aadharcard_no,'') as Aadharcard_no from applyn a, registration r where a.app_no=r.app_no and r.app_no= '" + appno + "'";//isnull(a.first_graduate,'0')
            Fpspersonal.Visible = true;
            Fpspersonal.Sheets[0].ColumnCount = 7;
            //Fpspersonal.Sheets[0].RowCount = 100;
            Fpspersonal.ColumnHeader.Visible = false;
            Fpspersonal.RowHeader.Visible = false;
            Fpspersonal.CommandBar.Visible = false;
            Fpspersonal.Sheets[0].DefaultRowHeight = 20;
            Fpspersonal.TitleInfo.Visible = true;
            Fpspersonal.TitleInfo.Text = "Student Bio Data";
            Fpspersonal.TitleInfo.Font.Size = FontUnit.Large;
            Fpspersonal.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            Fpspersonal.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            FarPoint.Web.Spread.TextCellType txt = new FarPoint.Web.Spread.TextCellType();
            Fpspersonal.Sheets[0].GridLines = GridLines.None;
            Fpspersonal.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Left;
            Fpspersonal.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Left;
            Fpspersonal.Sheets[0].Columns[2].HorizontalAlign = HorizontalAlign.Left;
            Fpspersonal.Sheets[0].Columns[3].HorizontalAlign = HorizontalAlign.Left;
            Fpspersonal.Columns[0].Locked = true;
            Fpspersonal.Columns[1].Locked = true;
            Fpspersonal.Columns[2].Locked = true;
            Fpspersonal.Columns[3].Locked = true;
            Fpspersonal.Columns[4].Locked = true;
            Fpspersonal.Columns[5].Locked = true;
            Fpspersonal.ActiveSheetView.Columns[0].Font.Name = "Book Antiqua";
            Fpspersonal.ActiveSheetView.Columns[1].Font.Name = "Book Antiqua";
            Fpspersonal.ActiveSheetView.Columns[2].Font.Name = "Book Antiqua";
            Fpspersonal.ActiveSheetView.Columns[3].Font.Name = "Book Antiqua";
            Fpspersonal.ActiveSheetView.Columns[4].Font.Name = "Book Antiqua";
            Fpspersonal.ActiveSheetView.Columns[5].Font.Name = "Book Antiqua";
            Fpspersonal.ActiveSheetView.Columns[0].Font.Size = FontUnit.Medium;
            Fpspersonal.ActiveSheetView.Columns[1].Font.Size = FontUnit.Medium;
            Fpspersonal.ActiveSheetView.Columns[2].Font.Size = FontUnit.Medium;
            Fpspersonal.ActiveSheetView.Columns[3].Font.Size = FontUnit.Medium;
            Fpspersonal.ActiveSheetView.Columns[4].Font.Size = FontUnit.Medium;
            Fpspersonal.ActiveSheetView.Columns[5].Font.Size = FontUnit.Medium;

            Fpspersonal.Sheets[0].Columns[0].CellType = new FarPoint.Web.Spread.TextCellType();
            Fpspersonal.Sheets[0].Columns[1].CellType = new FarPoint.Web.Spread.TextCellType();
            Fpspersonal.Sheets[0].Columns[2].CellType = new FarPoint.Web.Spread.TextCellType();
            Fpspersonal.Sheets[0].Columns[3].CellType = new FarPoint.Web.Spread.TextCellType();
            Fpspersonal.Sheets[0].Columns[4].CellType = new FarPoint.Web.Spread.TextCellType();
            Fpspersonal.Sheets[0].Columns[5].CellType = new FarPoint.Web.Spread.TextCellType();
            Fpspersonal.Sheets[0].Columns[6].CellType = new FarPoint.Web.Spread.TextCellType();

            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 1, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Personal Information";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Bold = true;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
            Fpspersonal.Columns[0].Font.Bold = true;
            Fpspersonal.Columns[0].Width = 200;
            Fpspersonal.Columns[1].Width = 10;
            Fpspersonal.Columns[2].Width = 270;
            Fpspersonal.Columns[3].Width = 180;
            Fpspersonal.Columns[3].Font.Bold = true;
            Fpspersonal.Columns[4].Width = 10;
            Fpspersonal.Columns[5].Width = 300;
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Student Name";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "Batch Year";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].Rows[Fpspersonal.Sheets[0].RowCount - 1].VerticalAlign = VerticalAlign.Top;
            Fpspersonal.Sheets[0].RowCount++;

            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Application No";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "Course Name";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].VerticalAlign = VerticalAlign.Top;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;

            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Admission No";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";

            if (checkSchoolSetting() != 0)
            {
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "  Current Year";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            }

            Fpspersonal.Sheets[0].RowCount++;

            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Roll No";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "  Current " + lbl_semOrTerm.Text;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Register No";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "  Section";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Date Applied";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "  Seat Type";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Date Admitted";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "  Community";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Sex";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "  Caste";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Date of Birth";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "  Blood Group";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Guardian Name";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "  Religion";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Identification Marks";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "  Mother Tongue";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Extra Curricular Activities ";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = " Student Type";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Aadhar Card No ";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "First Graduate ";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            //Fpspersonal.Sheets[0].PageSize = 38;    rowindex - 13
            int i = 0;
            con.Open();
            cmd.CommandText = query;
            cmd.Connection = con;
            SqlDataReader rbio = cmd.ExecuteReader();
            if (rbio.Read())
            {
                //added by Mullai
                FarPoint.Web.Spread.TextCellType txttype = new FarPoint.Web.Spread.TextCellType();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].CellType = txttype;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].Locked = true;
                //*
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].Text = rbio["Aadharcard_no"].ToString();

                if (Convert.ToString(rbio["firstgraduate"]) == "0" || Convert.ToString(rbio["firstgraduate"]).ToLower() == "false")
                {
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].Text = "No";
                }
                else
                {
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].Text = "Yes";
                }
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 2].Text = rbio["activity"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 5].Text = rbio["stud_type"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 3, 2].Text = rbio["idmark"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 3, 5].Text = rbio["mtongue"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 4, 2].Text = rbio["guardian_name"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 4, 5].Text = rbio["religion"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 5, 2].Text = rbio["dob"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 5, 5].Text = rbio["blood"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 6, 2].Text = rbio["sex"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 6, 5].Text = rbio["caste"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 7, 2].Text = rbio["adm_date"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 7, 5].Text = rbio["community"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 8, 2].Text = rbio["app_date"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 8, 5].Text = rbio["seat"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 9, 2].CellType = objtext;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 9, 2].Text = rbio["reg_no"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 9, 2].CellType = txt;

                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 9, 5].Text = rbio["Sections"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 10, 2].Text = rbio["roll_no"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 10, 5].Text = rbio["Current_Semester"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 11, 2].Text = rbio["roll_admit"].ToString();
                if (checkSchoolSetting() != 0)
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 11, 5].Text = getYear(Convert.ToInt16(rbio["Current_Semester"].ToString()));
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 12, 2].Text = rbio["app_formno"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 12, 5].Text = rbio["dept"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 12, 5].VerticalAlign = VerticalAlign.Top;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 13, 2].Text = rbio["Stud_Name"].ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 13, 5].Text = rbio["Batch_Year"].ToString();


                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 3, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 3, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 4, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 4, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 5, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 5, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 6, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 6, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 7, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 7, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 8, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 8, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 9, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 9, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 9, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 10, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 10, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 11, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 11, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 12, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 12, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 12, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 13, 2].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 13, 5].CellType = txt;
                //Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 13, 2].Text = rbio["Aadharcard_no"].ToString();
            }
            i = 0;
            rbio.Close();
            con.Close();
            con.Open();
            string hosquery = "select (select Room_Name from Room_Detail r where r.RoomPK=h.roomFk) Room_Name,(select Floor_Name from Floor_Master f where f.Floorpk=h.FloorFk) Floor_Name,(select Building_Name from Building_Master b where b.Code=H.BuildingFk) Building_Name,(select HostelName from HM_HostelMaster hos where hos.HostelMasterPK=H.HostelMasterFK) HostelName from registration r,applyn a ,ht_hostelRegistration h,Building_Master B,Room_detail Rd,Floor_Master F where r.app_no=a.app_no and h.app_no=r.app_no and h.app_no=a.app_no and B.Code =H.BuildingFk  and B.Building_Name=F.Building_Name and f.Floor_Name =Rd.Floor_name and B.Building_Name=Rd.Building_Name and r.app_no='" + appno + "'";
            DataSet rhostel = new DataSet();
            rhostel.Clear();
            rhostel = d2.select_method_wo_parameter(hosquery, "Text");
            if (rhostel.Tables.Count > 0 && rhostel.Tables[0].Rows.Count > 0)
            {
                Fpspersonal.Sheets[0].RowCount++;
                Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 1, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Hostel Info";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                Fpspersonal.Sheets[0].RowCount++;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Hostel Name";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = " Building Name";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
                Fpspersonal.Sheets[0].RowCount++;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Room Name";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = " Floor Name";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
                if (!String.IsNullOrEmpty(Convert.ToString(rhostel.Tables[0].Rows[0][2])))
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 5].Text = Convert.ToString(rhostel.Tables[0].Rows[0][2]);
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 5].Text = string.Empty;
                if (!String.IsNullOrEmpty(Convert.ToString(rhostel.Tables[0].Rows[0][3])))
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 2].Text = Convert.ToString(rhostel.Tables[0].Rows[0][3]);
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 2].Text = string.Empty;
                if (!String.IsNullOrEmpty(Convert.ToString(rhostel.Tables[0].Rows[0][0])))
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(rhostel.Tables[0].Rows[0][0]);
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].Text = string.Empty;
                if (!String.IsNullOrEmpty(Convert.ToString(rhostel.Tables[0].Rows[0][1])))
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(rhostel.Tables[0].Rows[0][1]);
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].Text = string.Empty;
            }
            i = 0;
            con.Close();
            con.Open();
            string transquery = "select Seat_No,Stage_Name,Bus_RouteID,vehid from registration r,applyn a,stage_master s where r.App_No=a.app_no and s.stage_id=isnull(Convert(bigint,Boarding),0) and r.app_no='" + appno + "'";
            DataSet rtrans = new DataSet();
            rtrans.Clear();
            rtrans = d2.select_method_wo_parameter(transquery, "Text");
            if (rtrans.Tables.Count > 0 && rtrans.Tables[0].Rows.Count > 0)
            {
                Fpspersonal.Sheets[0].RowCount++;
                Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 1, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Transport Info";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                Fpspersonal.Sheets[0].RowCount++;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Vehicle No";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = " Bus Route";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
                Fpspersonal.Sheets[0].RowCount++;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Seat No";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = " Boarding Point";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
                if (!String.IsNullOrEmpty(Convert.ToString(rtrans.Tables[0].Rows[0][2])))
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 5].Text = Convert.ToString(rtrans.Tables[0].Rows[0][2]);
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 5].Text = string.Empty;
                if (!String.IsNullOrEmpty(Convert.ToString(rtrans.Tables[0].Rows[0][3])))
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 2].Text = Convert.ToString(rtrans.Tables[0].Rows[0][3]);
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 2].Text = string.Empty;
                if (!String.IsNullOrEmpty(Convert.ToString(rtrans.Tables[0].Rows[0][0])))
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(rtrans.Tables[0].Rows[0][0]);
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].Text = string.Empty;
                if (!String.IsNullOrEmpty(Convert.ToString(rtrans.Tables[0].Rows[0][1])))
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(rtrans.Tables[0].Rows[0][1]);
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].Text = string.Empty;
            }
            i = 0;
            con.Close();
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 1, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Parents Information";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Bold = true;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Father's Name";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = " Father's Occupation";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Father's Income";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = " Qualification";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Father's Mobile No";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Mother's Name";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = " Mother's Occupation";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Mother's Income";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = " Qualification";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = " Mother's Mobile No";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";   // Row Index 20
            cmd.CommandText = "select isnull(parent_name,''),(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=parent_occu and textcriteria='foccu'), (select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=parent_income and textcriteria='fin'),(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=fqualification and textcriteria='fqual'),parentF_mobile,isnull(mother,'') ,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=motherocc and textcriteria='moccu'),(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=mIncome and textcriteria='min') ,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=mQualification and textcriteria='mqual') ,parentM_mobile from registration as a,applyn as b where a.app_no=b.app_no and a.app_no='" + appno + "'";
            cmd.Connection = con;
            con.Open();
            SqlDataReader rparent = cmd.ExecuteReader();
            if (rparent.Read())
            {
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 6, 2].Text = rparent.GetValue(0).ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 6, 5].Text = rparent.GetValue(1).ToString();
                if (rparent.GetValue(2).ToString() == "0" || rparent.GetValue(2).ToString() == "-1" || rparent.GetValue(2).ToString() == null)
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 5, 2].Text = string.Empty;
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 5, 2].Text = rparent.GetValue(2).ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 5, 5].Text = rparent.GetValue(3).ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 4, 2].Text = rparent.GetValue(4).ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 3, 2].Text = rparent.GetValue(5).ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 3, 5].Text = rparent.GetValue(6).ToString();
                if (rparent.GetValue(7).ToString() == "0" || rparent.GetValue(7).ToString() == "-1" || rparent.GetValue(7).ToString() == null)
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 2].Text = string.Empty;
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 2].Text = rparent.GetValue(7).ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 2, 5].Text = rparent.GetValue(8).ToString();
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].Text = rparent.GetValue(9).ToString();
            }
            rparent.Close();
            con.Close();
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 1, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Address Information";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Bold = true;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
            Fpspersonal.Rows[Fpspersonal.Sheets[0].RowCount - 1].VerticalAlign = VerticalAlign.Top;
            Fpspersonal.Sheets[0].RowCount++;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Communication Address";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = " Permanant Address";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";   // Row Index 23
            string contact_adres = string.Empty;
            string perm_adres = string.Empty;
            cmd.CommandText = "select isnull(parent_addressP,''),a.Streetp,a.cityp,a.Districtp,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.parent_statep and textcriteria='state'),a.parent_pincodep,isnull(parent_addressC,''),a.Streetc,a.cityc,a.Districtc,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.parent_statec and textcriteria='state'),a.parent_pincodec from applyn a, registration r where a.app_no=r.app_no and r.app_no= '" + appno + "'";
            cmd.Connection = con;
            con.Open();
            SqlDataReader rad = cmd.ExecuteReader();
            if (rad.Read())
            {
                for (int r = 0; r < 6; r++)
                {
                    if (rad.GetValue(r).ToString() != "" || rad.GetValue(r).ToString() != "-1" || rad.GetValue(r).ToString() != null)
                    {
                        string val = rad.GetValue(r).ToString();
                        if (r == 3 || r == 2)
                        {
                            Boolean tes = isNumeric(val, System.Globalization.NumberStyles.Integer);
                            if (tes)
                            {
                                val = GetFunction("select textval from textvaltable where TextCriteria in('dis','city') and  TextCode='" + val + "'");
                            }
                        }
                        if (!string.IsNullOrEmpty(val.Trim(',')))
                        {
                            if (contact_adres == "")
                                contact_adres = contact_adres + val.Trim(',');
                            else
                                contact_adres = contact_adres + "  " + val.Trim(',');
                        }
                    }
                }
                contact_adres = contact_adres == "/" ? "" : contact_adres;
                for (int r = 6; r < 12; r++)
                {
                    if (rad.GetValue(r).ToString() != "" || rad.GetValue(r).ToString() != "-1" || rad.GetValue(r).ToString() != null)
                    {
                        string val = rad.GetValue(r).ToString();
                        if (r == 8 || r == 9)
                        {
                            Boolean tes = isNumeric(val, System.Globalization.NumberStyles.Integer);
                            if (tes)
                            {
                                val = GetFunction("select textval from textvaltable where TextCriteria in('dis','city') and  TextCode='" + val + "'");
                            }
                        }
                        if (!string.IsNullOrEmpty(val.Trim(',')))
                        {
                            if (perm_adres == "")
                                perm_adres = perm_adres + val.Trim(',');
                            else
                                perm_adres = perm_adres + "  " + val.Trim(',');
                        }
                    }
                }
                perm_adres = perm_adres == "/" ? "" : perm_adres;
            }
            //=============================== END =====================================
            Fpspersonal.Sheets[0].RowCount += 6;
            Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 7, 2, 6, 1);
            Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 7, 5, 6, 1);
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 7, 2].Text = perm_adres;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 7, 2].VerticalAlign = VerticalAlign.Top;

            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 7, 5].Text = contact_adres;
            Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 7, 5].VerticalAlign = VerticalAlign.Top;
            rad.Close();
            con.Close();
            Fpspersonal.Width = 970;
            Fpspersonal.Height = 600;
            // BankDetails 
            string BankQuery = " select (select TextVal from TextValtable where TextCriteria='BnkFo' and TextCode = isnull(Accfor,0)) as AccFor,(select TextVal from TextValtable where TextCriteria='BnkNa' and TextCode = isnull(BankName,0)) as BankName,AccNo,IFSCCode,Branch,MICRCode from studbankdet where app_no='" + appno + "'";
            DataSet dsBankDetails = d2.select_method_wo_parameter(BankQuery, "Text");
            if (dsBankDetails.Tables.Count > 0 && dsBankDetails.Tables[0].Rows.Count > 0)
            {
                //Fpspersonal.Sheets[0].RowCount += 1;
                Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 1, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Student Bank Details";/*"Student Bank Details ";*/
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                Fpspersonal.Sheets[0].RowCount += 1;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Account For";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "Bank Name";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(dsBankDetails.Tables[0].Rows[0]["AccFor"]);
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(dsBankDetails.Tables[0].Rows[0]["BankName"]);
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].CellType = txt;
                Fpspersonal.Sheets[0].RowCount += 1;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Account No";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "IFSC Code";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(dsBankDetails.Tables[0].Rows[0]["AccNo"]);
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(dsBankDetails.Tables[0].Rows[0]["IFSCCode"]);
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].CellType = txt;
                Fpspersonal.Sheets[0].RowCount += 1;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Branch Name";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 3].Text = "MICR Code";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 1].Text = ":";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 4].Text = ":";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(dsBankDetails.Tables[0].Rows[0]["Branch"]);
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(dsBankDetails.Tables[0].Rows[0]["MICRCode"]);
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 5].CellType = txt;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 2].CellType = txt;
                Fpspersonal.Sheets[0].RowCount += 1;
            }
            //
            string strquery = "select Current_Semester,CC from Registration where CC=0 and DelFlag =0 and Exam_Flag <>'Debar' and App_No='" + appno + "'; select tcno,tcdate from Registration where CC=1 and App_No='" + appno + "'; select * from Registration where exam_flag='debar' and App_No='" + appno + "'; select tcno,tcdate from Registration where DelFlag=1 and App_No='" + appno + "'";
            DataSet dsStudysts = d2.select_method_wo_parameter(strquery, "Text");
            int stsrow = Fpspersonal.Sheets[0].RowCount - 1;
            int rowcount = 0;
            int rst = 0;
            if (dsStudysts.Tables[0].Rows.Count > 0)
            {
                string cur_sem = GetNumberOridinalCartinal(dsStudysts.Tables[0].Rows[0]["Current_Semester"].ToString());
                if (cur_sem == "" && cur_sem == null)
                {
                    cur_sem = dsStudysts.Tables[0].Rows[0]["Current_Semester"].ToString();
                }
                Fpspersonal.Sheets[0].SpanModel.Add(stsrow, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Text = "Study Status Report";/*"Student Study Status ";*/
                Fpspersonal.Sheets[0].Cells[stsrow, 0].BackColor = Color.LightCyan;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Font.Bold = true;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].ForeColor = Color.Blue;
                Fpspersonal.Sheets[0].RowCount += 2;
                Fpspersonal.Sheets[0].SpanModel.Add(stsrow + 2, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Text = "Studying In " + cur_sem.ToString() + " " + lbl_semOrTerm.Text;
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Font.Bold = true;
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Font.Size = FontUnit.Medium;
                //rst = 4;  //added by and hidden by Malang raja
            }
            else if (dsStudysts.Tables[1].Rows.Count > 0)
            {
                Fpspersonal.Sheets[0].SpanModel.Add(stsrow, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Text = "Study Status Report";/*"Student Study Status ";*/
                Fpspersonal.Sheets[0].Cells[stsrow, 0].BackColor = Color.LightCyan;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Font.Bold = true;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].ForeColor = Color.Blue;
                Fpspersonal.Sheets[0].RowCount += 2;
                Fpspersonal.Sheets[0].SpanModel.Add(stsrow + 2, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Text = (dsStudysts.Tables[1].Rows[0]["tcdate"].ToString() != null && dsStudysts.Tables[1].Rows[0]["tcdate"].ToString() != "") ? ("Course Completed, Received T.C NO  " + dsStudysts.Tables[1].Rows[0]["tcno"].ToString() + " dt " + dsStudysts.Tables[1].Rows[0]["tcdate"].ToString()) : "Course Completed but not received T.C.";
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Font.Bold = true;
                //rst = 4;  //added by and hidden by Malang raja
            }
            else if (dsStudysts.Tables[2].Rows.Count > 0)
            {
                Fpspersonal.Sheets[0].SpanModel.Add(stsrow, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Text = "Study Status Report";/*"Student Study Status ";*/
                Fpspersonal.Sheets[0].Cells[stsrow, 0].BackColor = Color.LightCyan;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Font.Bold = true;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].ForeColor = Color.Blue;
                Fpspersonal.Sheets[0].RowCount += 2;
                Fpspersonal.Sheets[0].SpanModel.Add(stsrow + 2, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                //Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Text = (dsStudysts.Tables[2].Rows[0]["tcdate"].ToString() != null && dsStudysts.Tables[2].Rows[0]["tcdate"].ToString() != "") ? ("Discontinued received T.C.No " + dsStudysts.Tables[2].Rows[0]["tcno"].ToString() + " dt " + dsStudysts.Tables[2].Rows[0]["tcdate"].ToString()) : "";
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Text = "Under Break of study on detention";
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].HorizontalAlign = HorizontalAlign.Center;//tcdate
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Font.Bold = true;
                //rst = 4;  //added by and hidden by Malang raja
            }
            else if (dsStudysts.Tables[3].Rows.Count > 0)
            {
                Fpspersonal.Sheets[0].SpanModel.Add(stsrow, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Text = "Study Status Report";/*"Student Study Status ";*/
                Fpspersonal.Sheets[0].Cells[stsrow, 0].BackColor = Color.LightCyan;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Font.Bold = true;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[stsrow, 0].ForeColor = Color.Blue;
                Fpspersonal.Sheets[0].RowCount += 2;
                Fpspersonal.Sheets[0].SpanModel.Add(stsrow + 2, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Text = (dsStudysts.Tables[3].Rows[0]["tcdate"].ToString() != null && dsStudysts.Tables[3].Rows[0]["tcdate"].ToString() != "") ? ("Discontinued received T.C.No " + dsStudysts.Tables[3].Rows[0]["tcno"].ToString() + " dt " + dsStudysts.Tables[3].Rows[0]["tcdate"].ToString()) : "Discontinued But Not Received T.C";
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].HorizontalAlign = HorizontalAlign.Center;//tcdate
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[stsrow + 2, 0].Font.Bold = true;
                //rst = 4;  //added by and hidden by Malang raja
            }
            Fpspersonal.Sheets[0].RowCount += stsrow + 4;
            rowcount += stsrow + 4;
            //rowcount += stsrow + rst;
            //Fpspersonal.Sheets[0].PageSize = Fpspersonal.Sheets[0].PageSize + 4;  //added by and hidden by Malang raja
            //Fpspersonal.Height = 600 + (rst * 20);  //added by and hidden by Malang raja
            Fpspersonal.Height = 600 + (4 * 20);
            ds.Dispose();
            ds.Reset();
            strquery = "select app_no,(select textval  from textvaltable where textcode=course_code) as Course_Name,(select textval  from textvaltable where textcode=branch_code) as Branch_Name,institute_name,(select textval  from textvaltable where textcode=university_code) as University_Name,medium,passyear,percentage from stud_prev_details as s,textvaltable as t where app_no= '" + appno + "' and t.textcode=s.course_code ";
            ds = d2.select_method(strquery, hat, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                //rowcount = 32;
                Fpspersonal.Sheets[0].SpanModel.Add(rowcount, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[rowcount, 0].Text = "Previous Academic Information ";
                Fpspersonal.Sheets[0].Cells[rowcount, 0].BackColor = Color.LightCyan;
                Fpspersonal.Sheets[0].Cells[rowcount, 0].Font.Bold = true;
                Fpspersonal.Sheets[0].Cells[rowcount, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspersonal.Sheets[0].Cells[rowcount, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[rowcount, 0].ForeColor = Color.Blue;
                for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
                {
                    Fpspersonal.Sheets[0].Cells[rowcount + 1, 0].Text = " Course Name";
                    Fpspersonal.Sheets[0].Cells[rowcount + 1, 1].Text = ":";
                    Fpspersonal.Sheets[0].Cells[rowcount + 1, 3].Text = " Branch Name";
                    Fpspersonal.Sheets[0].Cells[rowcount + 1, 4].Text = ":";
                    Fpspersonal.Sheets[0].Cells[rowcount + 2, 0].Text = " Institute Name";
                    Fpspersonal.Sheets[0].Cells[rowcount + 2, 1].Text = ":";
                    Fpspersonal.Sheets[0].Cells[rowcount + 2, 3].Text = " Board/University";
                    Fpspersonal.Sheets[0].Cells[rowcount + 2, 4].Text = ":";
                    Fpspersonal.Sheets[0].Cells[rowcount + 3, 0].Text = " Medium of School";
                    Fpspersonal.Sheets[0].Cells[rowcount + 3, 1].Text = ":";
                    Fpspersonal.Sheets[0].Cells[rowcount + 3, 3].Text = " Year of Pass";
                    Fpspersonal.Sheets[0].Cells[rowcount + 3, 4].Text = ":";
                    Fpspersonal.Sheets[0].Cells[rowcount + 4, 0].Text = " Percentage";
                    Fpspersonal.Sheets[0].Cells[rowcount + 4, 1].Text = ":";
                    //rst += 5;  //added by and hidden by Malang raja
                    Fpspersonal.Sheets[0].Cells[rowcount + 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[dscount]["Course_Name"]);
                    Fpspersonal.Sheets[0].Cells[rowcount + 1, 5].Text = Convert.ToString(ds.Tables[0].Rows[dscount]["Branch_Name"]);
                    Fpspersonal.Sheets[0].Cells[rowcount + 2, 2].Text = Convert.ToString(ds.Tables[0].Rows[dscount]["institute_name"]);
                    Fpspersonal.Sheets[0].Cells[rowcount + 2, 5].Text = Convert.ToString(ds.Tables[0].Rows[dscount]["University_Name"]);
                    Fpspersonal.Sheets[0].Cells[rowcount + 3, 2].Text = Convert.ToString(ds.Tables[0].Rows[dscount]["medium"]);
                    Fpspersonal.Sheets[0].Cells[rowcount + 3, 5].Text = Convert.ToString(ds.Tables[0].Rows[dscount]["passyear"]);
                    Fpspersonal.Sheets[0].Cells[rowcount + 4, 2].Text = Convert.ToString(ds.Tables[0].Rows[dscount]["percentage"]);
                    rowcount = rowcount + 5;
                    Fpspersonal.Sheets[0].PageSize = Fpspersonal.Sheets[0].PageSize + 5;
                }
                //Fpspersonal.Height = 600 + (rst * 20);  //added by and hidden by Malang raja
            }
            int rcount = 0;
            cmd.CommandText = "select name_roll+' - '+relationship+' - '+(case isstaff when 0 then 'Student' else 'Staff' end)+' -' +course from stud_relation where application_no=(select app_formno from applyn where app_no=" + appno + ")";
            cmd.Connection = con;
            con.Open();
            SqlDataReader relation = cmd.ExecuteReader();
            if (relation.HasRows)
            {
                rcount = rcount = 1;
                Fpspersonal.Sheets[0].RowCount = Fpspersonal.Sheets[0].RowCount + 1;
                Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 1, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "Relationship Information";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                while (relation.Read())
                {
                    rst++;
                    rcount = rcount + 1;
                    Fpspersonal.Sheets[0].RowCount = Fpspersonal.Sheets[0].RowCount + 1;
                    Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 1, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                    Fpspersonal.Sheets[0].Rows[Fpspersonal.Sheets[0].RowCount - 1].Font.Bold = false;
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Bold = false;
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = relation.GetValue(0).ToString();
                }
                Fpspersonal.Sheets[0].PageSize = Fpspersonal.Sheets[0].RowCount;
                Fpspersonal.Height = 600 + (rcount * 20);
                //Fpspersonal.Height = 600 + (rst * 20); //added by and hidden by Malang raja
            }
            Fpspersonal.SaveChanges();
            #endregion
        }
        catch
        {
        }
    }

    protected void Buttoncontact_Click(object sender, EventArgs e)
    {
        initpersonal();
        Fpspersonal.Visible = true;
        string query = string.Empty;
        //query = "select isnull(parent_addressP,''),a.Streetp,a.cityp,a.Districtp,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.parent_statep and textcriteria='state'),a.parent_pincodep,isnull(parent_addressC,''),a.Streetc,a.cityc,a.Districtc,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.parent_statec and textcriteria='state'),a.parent_pincodec,a.parent_phnoc,parentF_Mobile, parentM_Mobile,Student_Mobile,StuPer_Id from applyn a, registration r where a.app_no=r.app_no and r.app_no= '" + appno + "'";

        query = "  select isnull(parent_addressP,''),a.Streetp,a.cityp,a.Districtp,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.parent_statep and textcriteria='state'),a.parent_pincodep,isnull(parent_addressC,''),a.Streetc,a.cityc,a.Districtc,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.parent_statec and textcriteria='state'),a.parent_pincodec,a.parent_phnoc,parentF_Mobile, parentM_Mobile,Student_Mobile,emailM,emailg,emailp,StuPer_Id from applyn a, registration r where a.app_no=r.app_no and r.app_no= '" + appno + "'";


        //================= end ================================
        Fpspersonal.Sheets[0].ColumnCount = 5;
        Fpspersonal.Sheets[0].RowCount = 25;
        Fpspersonal.ColumnHeader.Visible = false;
        Fpspersonal.RowHeader.Visible = false;
        Fpspersonal.CommandBar.Visible = false;
        Fpspersonal.Sheets[0].DefaultColumnWidth = 50;
        Fpspersonal.Sheets[0].DefaultRowHeight = 20;
        Fpspersonal.TitleInfo.Visible = true;
        Fpspersonal.TitleInfo.Text = "Student Contacts Details";
        Fpspersonal.TitleInfo.Font.Size = FontUnit.Large;
        Fpspersonal.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpspersonal.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpspersonal.Sheets[0].GridLines = GridLines.None;
        Fpspersonal.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Left;
        Fpspersonal.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Left;
        Fpspersonal.Sheets[0].Columns[0].VerticalAlign = VerticalAlign.Middle;
        Fpspersonal.Sheets[0].Columns[1].VerticalAlign = VerticalAlign.Middle;
        Fpspersonal.ActiveSheetView.Columns[0].Font.Name = "Book Antiqua";
        Fpspersonal.ActiveSheetView.Columns[1].Font.Name = "Book Antiqua";
        Fpspersonal.ActiveSheetView.Columns[2].Font.Name = "Book Antiqua";
        Fpspersonal.ActiveSheetView.Columns[3].Font.Name = "Book Antiqua";
        Fpspersonal.ActiveSheetView.Columns[0].Font.Size = FontUnit.Medium;
        Fpspersonal.ActiveSheetView.Columns[1].Font.Size = FontUnit.Medium;
        Fpspersonal.ActiveSheetView.Columns[2].Font.Size = FontUnit.Medium;
        Fpspersonal.ActiveSheetView.Columns[3].Font.Size = FontUnit.Medium;
        Fpspersonal.Sheets[0].Cells[0, 1].Text = "Permanent Address";
        Fpspersonal.Sheets[0].Cells[6, 1].Text = "Communication Address";
        Fpspersonal.Sheets[0].Cells[12, 1].Text = "Father's Mobile Number";
        Fpspersonal.Sheets[0].Cells[14, 1].Text = "Mother's Mobile Number";
        Fpspersonal.Sheets[0].Cells[16, 1].Text = "Student's Mobile Number";
        Fpspersonal.Sheets[0].Cells[18, 1].Text = "Student's Email ID";
        Fpspersonal.Sheets[0].Cells[20, 1].Text = "Father's Email ID";
        Fpspersonal.Sheets[0].Cells[22, 1].Text = "Mother's Email ID";
        Fpspersonal.Sheets[0].Cells[0, 2].Text = ":";
        Fpspersonal.Sheets[0].Cells[6, 2].Text = ":";
        Fpspersonal.Sheets[0].Cells[12, 2].Text = ":";
        Fpspersonal.Sheets[0].Cells[14, 2].Text = ":";
        Fpspersonal.Sheets[0].Cells[16, 2].Text = ":";
        Fpspersonal.Sheets[0].Cells[18, 2].Text = ":";
        Fpspersonal.Sheets[0].Cells[20, 2].Text = ":";
        Fpspersonal.Sheets[0].Cells[22, 2].Text = ":";
        Fpspersonal.Columns[0].Font.Bold = true;
        Fpspersonal.Columns[1].Font.Bold = true;
        Fpspersonal.Columns[0].Width = 5;
        Fpspersonal.Columns[1].Width = 200;
        Fpspersonal.Columns[2].Width = 20;
        Fpspersonal.Columns[3].Width = 300;
        Fpspersonal.Columns[4].Width = 20;
        int i = 0;
        string contact_adres = string.Empty;
        string perm_adres = string.Empty;
        cmd.CommandText = query;
        cmd.Connection = con;
        con.Open();
        SqlDataReader rad = cmd.ExecuteReader();
        //=======================Hided and Modified by Gowtham======================================
        //if (rad.Read())
        //{
        //    for (int r = 0; r < 6; r++)
        //    {
        //        if (rad.GetValue(r).ToString() != "" || rad.GetValue(r).ToString() != "-1" || rad.GetValue(r).ToString() != null)
        //        {
        //            if (contact_adres == "")
        //                contact_adres = contact_adres + rad.GetValue(r).ToString();
        //            else
        //                contact_adres = contact_adres + ", " + rad.GetValue(r).ToString();
        //        }
        //    }
        //    for (int r = 6; r < 12; r++)
        //    {
        //        if (rad.GetValue(r).ToString() != "" || rad.GetValue(r).ToString() != "-1" || rad.GetValue(r).ToString() != null)
        //        {
        //            if (perm_adres == "")
        //                perm_adres = perm_adres + rad.GetValue(r).ToString();
        //            else
        //                perm_adres = perm_adres + ", " + rad.GetValue(r).ToString();
        //        }
        //    }
        //    Fpspersonal.Sheets[0].SpanModel.Add(0, 3, 6, 1);
        //    Fpspersonal.Sheets[0].SpanModel.Add(6, 3, 6, 1);
        //    Fpspersonal.Sheets[0].Cells[0, 3].Text = contact_adres;
        //    Fpspersonal.Sheets[0].Cells[6, 3].Text = perm_adres;
        //    Fpspersonal.Sheets[0].Cells[12, 3].Text = rad.GetValue(12).ToString();
        //    Fpspersonal.Columns[3].VerticalAlign = VerticalAlign.Top;
        //    Fpspersonal.Width = 550;
        //    Fpspersonal.Height = 310;
        //}
        if (rad.Read())
        {
            for (int r = 0; r < 6; r++)
            {
                if (rad.GetValue(r).ToString() != "" || rad.GetValue(r).ToString() != "-1" || rad.GetValue(r).ToString() != null)
                {
                    string val = rad.GetValue(r).ToString();
                    if (r == 3 || r == 2)
                    {
                        Boolean tes = isNumeric(val, System.Globalization.NumberStyles.Integer);
                        if (tes)
                        {
                            val = GetFunction("select textval from textvaltable where TextCriteria in('dis','city') and  TextCode='" + val + "'");
                        }
                    }
                    if (!string.IsNullOrEmpty(val.Trim(',')))
                    {
                        if (contact_adres == "")
                            contact_adres = contact_adres + Convert.ToString(val).Trim(',');
                        else
                            contact_adres = contact_adres + ", " + Convert.ToString(val).Trim(',');
                    }
                }
            }
            for (int r = 6; r < 15; r++)
            {
                if (rad.GetValue(r).ToString() != "" || rad.GetValue(r).ToString() != "-1" || rad.GetValue(r).ToString() != null)
                {
                    string val = rad.GetValue(r).ToString();
                    if (r == 8 || r == 9)
                    {
                        Boolean tes = isNumeric(val, System.Globalization.NumberStyles.Integer);
                        if (tes)
                        {
                            val = GetFunction("select textval from textvaltable where TextCriteria in('dis','city') and  TextCode='" + val + "'");
                        }
                    }
                    if (!string.IsNullOrEmpty(val.Trim(',')))
                    {
                        if (perm_adres == "")
                            perm_adres = perm_adres + val.Trim(',');
                        else
                            perm_adres = perm_adres + ", " + val.Trim(',');
                    }
                }
            }
            Fpspersonal.Sheets[0].SpanModel.Add(0, 3, 6, 1);
            Fpspersonal.Sheets[0].SpanModel.Add(6, 3, 6, 1);
            Fpspersonal.Sheets[0].Cells[0, 3].Text = contact_adres;
            Fpspersonal.Sheets[0].Cells[6, 3].Text = perm_adres;
            Fpspersonal.Sheets[0].Cells[12, 3].Text = rad.GetValue(13).ToString();
            Fpspersonal.Sheets[0].Cells[14, 3].Text = rad.GetValue(14).ToString();
            Fpspersonal.Sheets[0].Cells[16, 3].Text = rad.GetValue(15).ToString();
            Fpspersonal.Sheets[0].Cells[18, 3].Text = Convert.ToString(rad["StuPer_id"]);
            Fpspersonal.Sheets[0].Cells[20, 3].Text = Convert.ToString(rad["emailp"]);
            Fpspersonal.Sheets[0].Cells[22, 3].Text = Convert.ToString(rad["emailm"]);
            Fpspersonal.Columns[3].VerticalAlign = VerticalAlign.Top;
            Fpspersonal.Width = 550;
            Fpspersonal.Height = 550;
        }
        //===================================END====================================
        else
        {
            Fpspersonal.Sheets[0].ColumnCount = 0;
            Fpspersonal.Sheets[0].RowCount = 0;
            Fpspersonal.Sheets[0].ColumnCount = 4;
            Fpspersonal.Sheets[0].RowCount = 1;
            Fpspersonal.Sheets[0].SpanModel.Add(0, 0, 1, 4);
            Fpspersonal.Height = 50;
            Fpspersonal.Width = 600;
            Fpspersonal.ColumnHeader.Visible = false;
            Fpspersonal.Sheets[0].Cells[0, 0].Text = "No information Available";
            Fpspersonal.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpspersonal.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpspersonal.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
            Fpspersonal.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
            Fpspersonal.Width = 550;
            Fpspersonal.Height = 40;
        }
        rad.Close();
        con.Close();
        Fpspersonal.Sheets[0].PageSize = 26;
        Fpspersonal.SaveChanges();
    }

    protected void Buttoncertificate_Click(object sender, EventArgs e)
    {
        FarPoint.Web.Spread.TextCellType objtext = new FarPoint.Web.Spread.TextCellType();
        initpersonal();
        Fpspersonal.Visible = true;
        string query = string.Empty;
        query = "select r.Stud_Name,r.Roll_no,r.Reg_No, case a.sex when 1 then 'Female' else 'Male' end,(select distinct ltrim(Course_Name) + ' - ' + ltrim(Dept_Name) as CName from Course,Department,Degree where  Degree.Course_Id = Course.Course_Id And Department.Dept_Code = Degree.Dept_Code  and Degree.Degree_Code =r.degree_code ),r.Current_Semester,r.Batch_Year from applyn a, registration r where a.app_no=r.app_no and r.app_no= '" + appno + "'";
        Fpspersonal.Sheets[0].ColumnCount = 4;
        Fpspersonal.Sheets[0].RowCount = 10;
        Fpspersonal.ColumnHeader.Visible = false;
        Fpspersonal.RowHeader.Visible = false;
        Fpspersonal.CommandBar.Visible = false;
        Fpspersonal.Sheets[0].DefaultColumnWidth = 50;
        Fpspersonal.Sheets[0].DefaultRowHeight = 20;
        Fpspersonal.TitleInfo.Visible = true;
        Fpspersonal.TitleInfo.Text = "Student Certificate Details";
        Fpspersonal.TitleInfo.Font.Size = FontUnit.Large;
        Fpspersonal.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpspersonal.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpspersonal.Sheets[0].GridLines = GridLines.None;
        Fpspersonal.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Left;
        Fpspersonal.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Left;
        Fpspersonal.Sheets[0].Columns[0].VerticalAlign = VerticalAlign.Middle;
        Fpspersonal.Sheets[0].Columns[1].VerticalAlign = VerticalAlign.Middle;
        Fpspersonal.ActiveSheetView.Columns[0].Font.Name = "Book Antiqua";
        Fpspersonal.ActiveSheetView.Columns[1].Font.Name = "Book Antiqua";
        Fpspersonal.ActiveSheetView.Columns[2].Font.Name = "Book Antiqua";
        Fpspersonal.ActiveSheetView.Columns[3].Font.Name = "Book Antiqua";
        Fpspersonal.ActiveSheetView.Columns[0].Font.Size = FontUnit.Medium;
        Fpspersonal.ActiveSheetView.Columns[1].Font.Size = FontUnit.Medium;
        Fpspersonal.ActiveSheetView.Columns[2].Font.Size = FontUnit.Medium;
        Fpspersonal.ActiveSheetView.Columns[3].Font.Size = FontUnit.Medium;
        Fpspersonal.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
        Fpspersonal.Sheets[0].Cells[0, 0].Text = "Student Name";
        Fpspersonal.Sheets[0].Cells[1, 0].Text = "Roll No";
        Fpspersonal.Sheets[0].Cells[2, 0].Text = "Register No";
        Fpspersonal.Sheets[0].Cells[3, 0].Text = "sex";
        Fpspersonal.Sheets[0].Cells[4, 0].Text = "Course Name";
        Fpspersonal.Sheets[0].Rows[4].VerticalAlign = VerticalAlign.Top;
        Fpspersonal.Sheets[0].Cells[5, 0].Text = lbl_semOrTerm.Text;
        Fpspersonal.Sheets[0].Cells[6, 0].Text = "Batch Year";
        Fpspersonal.Sheets[0].Cells[7, 0].Text = "Current Year";
        Fpspersonal.Sheets[0].Cells[8, 0].Text = "Certificate Name";
        Fpspersonal.Sheets[0].Cells[9, 0].Text = "Certificate Date";
        Fpspersonal.Sheets[0].Cells[0, 1].Text = ":";
        Fpspersonal.Sheets[0].Cells[1, 1].Text = ":";
        Fpspersonal.Sheets[0].Cells[2, 1].Text = ":";
        Fpspersonal.Sheets[0].Cells[3, 1].Text = ":";
        Fpspersonal.Sheets[0].Cells[4, 1].Text = ":";
        Fpspersonal.Sheets[0].Cells[5, 1].Text = ":";
        Fpspersonal.Sheets[0].Cells[6, 1].Text = ":";
        Fpspersonal.Sheets[0].Cells[7, 1].Text = ":";
        Fpspersonal.Sheets[0].Cells[8, 1].Text = ":";
        Fpspersonal.Sheets[0].Cells[9, 1].Text = ":";
        Fpspersonal.ActiveSheetView.PageSize = 100;
        Fpspersonal.Columns[0].Width = 150;
        Fpspersonal.Columns[1].Width = 30;
        Fpspersonal.Columns[2].Width = 550;
        Fpspersonal.Columns[3].Width = 10;
        Fpspersonal.Columns[0].Font.Bold = true;
        Fpspersonal.Columns[1].Font.Bold = true;
        int max_len = 0;
        int d = Convert.ToInt32(DateTime.Now.ToString("yyyy"));
        int i = 0;
        cmd.CommandText = query;
        cmd.Connection = con;
        con.Open();
        SqlDataReader rcertifi = cmd.ExecuteReader();
        if (rcertifi.Read())
        {
            Fpspersonal.Sheets[0].Cells[7, 2].Text = getYear(Convert.ToInt16(rcertifi["Current_Semester"].ToString()));
            for (i = 0; i < 7; i++)
            {
                Fpspersonal.Sheets[0].Cells[i, 2].Text = rcertifi.GetValue(i).ToString();
                Fpspersonal.Sheets[0].Cells[i, 2].CellType = objtext;
            }
        }
        rcertifi.Close();
        con.Close();
        max_len = Fpspersonal.Sheets[0].Cells[4, 2].Text.Length;
        Fpspersonal.Columns[2].Width = max_len * 11;
        cmd.CommandText = "select distinct cert_name,CONVERT(VARCHAR(10),cert_date,103),cert_student_list.cert_no,returned,received from cert_master,cert_student_list,applyn Where applyn.app_no=cert_student_list.app_no and applyn.app_no = '" + appno + "' and cert_master.cert_code = cert_student_list.cert_code and (returned=1 or received=1) ";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rsem = cmd.ExecuteReader();
        if (rsem.HasRows)
        {
            Fpspersonal.Sheets[0].Cells[8, 0].Text = string.Empty;
            Fpspersonal.Sheets[0].Cells[9, 0].Text = string.Empty;
            Fpspersonal.Sheets[0].RowCount = Fpspersonal.Sheets[0].RowCount - 2;
            int j = 1;
            while (rsem.Read())
            {
                Fpspersonal.Sheets[0].RowCount = Fpspersonal.Sheets[0].RowCount + 1;
                Fpspersonal.Sheets[0].SpanModel.Add(Fpspersonal.Sheets[0].RowCount - 1, 0, 1, Fpspersonal.Sheets[0].ColumnCount);
                if (j == 1)
                {
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = "CERTIFICATE NAME-CERTIFICATE DATE";
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                }
                else
                    Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Text = rsem.GetValue(0).ToString() + "  [" + rsem.GetValue(1).ToString() + "] ";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpspersonal.Sheets[0].Cells[Fpspersonal.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                j = j + 1;
            }
        }
        rsem.Close();
        con.Close();
        int widt = 0;
        for (int len = 0; len < Fpspersonal.Sheets[0].ColumnCount; len++)
            widt += Fpspersonal.Columns[len].Width;
        Fpspersonal.Width = widt;
        Fpspersonal.Height = (Fpspersonal.Sheets[0].DefaultRowHeight * Fpspersonal.Sheets[0].RowCount) + 40;
        Fpspersonal.SaveChanges();
    }

    protected void Buttonapaper_Click(object sender, EventArgs e)
    {
        initmarks();
        divMarks.Visible = false;
        Fpsmarks.Visible = true;
        Fpsmarks.Sheets[0].ColumnCount = 4;
        Fpsmarks.Sheets[0].RowCount = 0;
        Fpsmarks.ColumnHeader.Visible = true;
        Fpsmarks.RowHeader.Visible = false;
        Fpsmarks.ActiveSheetView.GridLines = GridLines.Both;
        Fpsmarks.TitleInfo.Text = "Arrear Details";
        Fpsmarks.CommandBar.Visible = false;
        Fpsmarks.Sheets[0].DefaultColumnWidth = 150;
        Fpsmarks.Sheets[0].DefaultRowHeight = 20;
        Fpsmarks.TitleInfo.Visible = true;
        Fpsmarks.TitleInfo.Font.Size = FontUnit.Large;
        Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpsmarks.Columns[0].HorizontalAlign = HorizontalAlign.Center;
        Fpsmarks.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Left;
        Fpsmarks.Sheets[0].Columns[0].VerticalAlign = VerticalAlign.Middle;
        Fpsmarks.Sheets[0].Columns[1].VerticalAlign = VerticalAlign.Middle;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpsmarks.Columns[0].Width = 40;
        Fpsmarks.Columns[0].HorizontalAlign = HorizontalAlign.Center;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 1].Text = lbl_semOrTerm.Text;
        Fpsmarks.Columns[1].Width = 80;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Subject Code";
        Fpsmarks.Columns[2].Width = 100;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Subject Name";
        Fpsmarks.Columns[3].Width = 420;
        string temsem = string.Empty;
        string lstsem = string.Empty;
        int maxrow = 0;
        int ivalue = 0;
        int len2_sc = 0;
        int len3_sn = 0;
        cmd.CommandText = "Select Roll_No,current_semester from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            cmd.CommandText = "Select isnull(Subject_Code,'') as scode , isnull(subjecT_name,'') as sname , semester from subject,syllabus_master as smas where smas.syll_code = subject.syll_code and subject_no in (select distinct subject_no from mark_entry where subject_no not in (select distinct subject_no from mark_entry where passorfail=1 and result='Pass' and ltrim(rtrim(roll_no))='" + rroll.GetValue(0).ToString() + "')and ltrim(rtrim(roll_no))='" + rroll.GetValue(0).ToString() + "' and semester>=1 and Semester<=" + rroll.GetValue(1).ToString() + ") order by smas.semester,scode";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rsem = cmd.ExecuteReader();
            int i = 1;
            if (rsem.HasRows)
            {
                while (rsem.Read())
                {
                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = i.ToString();
                    if (ivalue != 0)
                    {
                        if (temsem != rsem.GetValue(2).ToString())
                        {
                            Fpsmarks.Sheets[0].SpanModel.Add(maxrow, 1, ivalue, 1);
                            Fpsmarks.Sheets[0].Cells[maxrow, 1].Text = temsem.ToString();
                            Fpsmarks.Sheets[0].Cells[maxrow, 1].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[maxrow, 1].VerticalAlign = VerticalAlign.Top;
                            Fpsmarks.Sheets[0].Cells[maxrow, 1].Font.Size = FontUnit.Medium;
                            Fpsmarks.Sheets[0].Cells[maxrow, 1].Font.Name = "Book Antiqua";
                            maxrow = Fpsmarks.Sheets[0].RowCount - 1;
                            ivalue = 0;
                            lstsem = temsem;
                        }
                    }
                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = rsem.GetValue(0).ToString();
                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = rsem.GetValue(1).ToString();
                    int len2 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text.Length;
                    int len3 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text.Length;
                    if (len2_sc < len2)
                        len2_sc = len2;
                    if (len3_sn < len3)
                        len3_sn = len3;
                    ivalue = ivalue + 1;
                    temsem = rsem.GetValue(2).ToString();
                    ++i;
                }
                if (ivalue != 0)
                {
                    if (temsem != lstsem)
                    {
                        Fpsmarks.Sheets[0].SpanModel.Add(maxrow, 1, ivalue, 1);
                        Fpsmarks.Sheets[0].Cells[maxrow, 1].Text = temsem.ToString();
                        Fpsmarks.Sheets[0].Cells[maxrow, 1].HorizontalAlign = HorizontalAlign.Center;
                        Fpsmarks.Sheets[0].Cells[maxrow, 1].VerticalAlign = VerticalAlign.Top;
                        Fpsmarks.Sheets[0].Cells[maxrow, 1].Font.Size = FontUnit.Medium;
                        Fpsmarks.Sheets[0].Cells[maxrow, 1].Font.Name = "Book Antiqua";
                        maxrow = Fpsmarks.Sheets[0].RowCount;
                        ivalue = 0;
                        lstsem = temsem;
                    }
                }
                Fpsmarks.Columns[2].Width = len2_sc * 11;
                Fpsmarks.Columns[3].Width = len3_sn * 11;
                int widt = 0; int h = 0;
                for (int len = 0; len < Fpsmarks.Sheets[0].ColumnCount; len++)
                    widt = widt + Fpsmarks.Columns[len].Width;
                if (widt > 900)
                {
                    h = 16;
                    Fpsmarks.Width = 916;
                    Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                }
                else
                {
                    Fpsmarks.Width = widt;
                    Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                }
                Fpsmarks.Height = h + (Fpsmarks.Rows.Default.Height * Fpsmarks.Sheets[0].RowCount) + 65;
                Fpsmarks.SaveChanges();
            }
            else
            {
                Fpsmarks.Sheets[0].ColumnCount = 0;
                Fpsmarks.Sheets[0].RowCount = 0;
                Fpsmarks.Sheets[0].ColumnCount = 4;
                Fpsmarks.Sheets[0].RowCount = 1;
                Fpsmarks.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpsmarks.Height = 50;
                Fpsmarks.Width = 600;
                Fpsmarks.Sheets[0].ColumnHeader.Visible = false;
                Fpsmarks.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpsmarks.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                Fpsmarks.SaveChanges();
            }
            rsem.Close();
            con1.Close();
        }
        rroll.Close();
        con.Close();
    }

    protected void ButtonSubjects_Click(object sender, EventArgs e)
    {
        initmarks();
        divMarks.Visible = false;
        string sec = "", query = string.Empty;
        Fpsmarks.Visible = true;
        Fpsmarks.Sheets[0].ColumnCount = 4;
        Fpsmarks.ColumnHeader.Visible = true;
        Fpsmarks.Rows.Default.Height = 20;
        Fpsmarks.Columns.Default.Width = 200;
        Fpsmarks.TitleInfo.Text = " Subject Details";
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpsmarks.Columns[0].Width = 40;
        Fpsmarks.Columns[0].HorizontalAlign = HorizontalAlign.Center;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Subject Code";
        Fpsmarks.Columns[1].Width = 80;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Subject Name";
        Fpsmarks.Columns[2].Width = 450;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Staff Name";
        Fpsmarks.Columns[3].Width = 320;
        int len1 = 0, len2 = 0, len3 = 0;
        Fpsmarks.Sheets[0].SetColumnMerge(0, FarPoint.Web.Spread.Model.MergePolicy.Always);
        Fpsmarks.Sheets[0].SetColumnMerge(1, FarPoint.Web.Spread.Model.MergePolicy.Always);
        Fpsmarks.Sheets[0].SetColumnMerge(2, FarPoint.Web.Spread.Model.MergePolicy.Always);
        Fpsmarks.Sheets[0].SetColumnMerge(3, FarPoint.Web.Spread.Model.MergePolicy.Always);
        cmd.CommandText = "Select Roll_No,current_semester,batch_year,sections from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            cmd.CommandText = "select distinct subjectchooser.subject_no  from subjectchooser,staff_selector where subjectchooser.subject_no=staff_selector.subject_no and roll_no='" + rroll.GetValue(0).ToString() + "' and semester='" + rroll.GetValue(1).ToString() + "' and batch_year='" + rroll.GetValue(2).ToString() + "'";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rsub = cmd.ExecuteReader();
            int i = 1;
            if (rsub.HasRows)
            {
                while (rsub.Read())
                {
                    Fpsmarks.Sheets[0].RowCount = ++Fpsmarks.Sheets[0].RowCount;
                    sec = rroll.GetValue(3).ToString();
                    if (sec != "")
                        query = " and sections='" + sec + "' ";
                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = i.ToString();
                    cmd.CommandText = "select subject_code,subject_name,subject_no from subject where subject_no='" + rsub.GetValue(0).ToString() + "'";
                    cmd.Connection = con2;
                    con2.Open();
                    SqlDataReader rsubject = cmd.ExecuteReader();
                    if (rsubject.Read())
                    {
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text = rsubject.GetValue(0).ToString();
                        int length1 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text.Length;
                        if (len1 < length1)
                            len1 = length1;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = rsubject.GetValue(1).ToString();
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].ForeColor = Color.Blue;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Font.Underline = true;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].ForeColor = Color.Blue;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Font.Underline = true;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Tag = rsubject.GetValue(2).ToString();
                        int length2 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text.Length;
                        if (len2 < length2)
                            len2 = length2;
                    }
                    rsubject.Close();
                    con2.Close();
                    cmd.CommandText = "select distinct staff_name from staffmaster as m,staff_selector as s where m.staff_code=s.staff_code and s.subject_no='" + rsub.GetValue(0).ToString() + "' " + query + "";
                    cmd.Connection = con2;
                    con2.Open();
                    SqlDataReader rstaff = cmd.ExecuteReader();
                    if (rstaff.HasRows)
                    {
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].ForeColor = Color.Blue;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Font.Underline = true;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = string.Empty;
                        while (rstaff.Read())
                        {
                            if (Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text == "")
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = rstaff.GetValue(0).ToString();
                            else
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text + ", " + rstaff.GetValue(0).ToString();
                            int length3 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text.Length;
                            if (len3 < length3)
                                len3 = length3;
                        }
                    }
                    rstaff.Close();
                    con2.Close();
                    i++;
                }
                Fpsmarks.Columns[1].Width = len1 * 11;
                Fpsmarks.Columns[2].Width = len2 * 11;
                Fpsmarks.Columns[3].Width = len3 * 10;
                int widt = 0; int h = 0;
                for (int len = 0; len < Fpsmarks.Sheets[0].ColumnCount; len++)
                    widt = widt + Fpsmarks.Columns[len].Width;
                if (widt > 900)
                {
                    h = 16;
                    Fpsmarks.Width = 916;
                    Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                }
                else
                {
                    Fpsmarks.Width = widt;
                    Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                }
                Fpsmarks.Height = h + (Fpsmarks.Rows.Default.Height * Fpsmarks.Sheets[0].RowCount) + 65;
                Fpsmarks.SaveChanges();
            }
            else
            {
                Fpsmarks.Sheets[0].ColumnCount = 0;
                Fpsmarks.Sheets[0].RowCount = 0;
                Fpsmarks.Sheets[0].ColumnCount = 4;
                Fpsmarks.Sheets[0].RowCount = 1;
                Fpsmarks.Columns.Default.Width = 150;
                Fpsmarks.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpsmarks.Height = 45;
                Fpsmarks.Width = 600;
                Fpsmarks.Sheets[0].ColumnHeader.Visible = false;
                Fpsmarks.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpsmarks.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpsmarks.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                Fpsmarks.SaveChanges();
            }
            rsub.Close();
            con1.Close();
        }
        rroll.Close();
        con.Close();
        Fpsmarks.Sheets[0].AutoPostBack = true;
    }

    protected void Buttontoday_Click(object sender, EventArgs e)
    {
        //// FpSgen.Visible = true;

        inittimetable();
        Fpstimetable.Visible = true;
        Fpstimetable.Sheets[0].ColumnCount = 4;
        Fpstimetable.Sheets[0].RowCount = 0;
        Fpstimetable.ColumnHeader.Visible = true;
        Fpstimetable.RowHeader.Visible = false;
        //   Fpstimetable.Width = 900;
        // Fpstimetable.Height = 520;
        Fpstimetable.CommandBar.Visible = false;
        Fpstimetable.Sheets[0].GridLines = GridLines.Both;
        Fpstimetable.Sheets[0].DefaultRowHeight = 20;
        // Fpstimetable.Sheets[0].BackColor = Color.CornflowerBlue;
        Fpstimetable.TitleInfo.Visible = true;
        Fpstimetable.TitleInfo.Text = "Class Time Table Today";
        Fpstimetable.TitleInfo.Font.Size = FontUnit.Large;
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 0].Text = "Hour";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Start Time";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 2].Text = "End Time";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Subject Code";
        Fpstimetable.Columns[0].Width = 50;
        Fpstimetable.Columns[1].Width = 85;
        Fpstimetable.Columns[2].Width = 85;
        Fpstimetable.Columns[3].Width = 100;

        //DateTime dt = DateTime.Now;
        //string dts = dt.ToString("dd-MM-yyyy");
        int len0 = 0, len3 = 0;
        //string query;
        int i = 0;
        string byr = string.Empty;
        string deg = string.Empty;
        string sem = string.Empty;
        string sec = string.Empty;
        string sno = string.Empty;
        string stdate = string.Empty;
        string edate = string.Empty;
        string cc = string.Empty;
        string gender = string.Empty;
        DateTime dtStartDate = new DateTime();
        DateTime dtEndDate = new DateTime();

        cmd.CommandText = "select r.batch_year,r.degree_code,r.CC,r.current_semester,LTRIM(RTRIM(isnull(sections,''))) as sections,case when a.sex=0 then 'Male' when a.sex=1 then 'Female' else 'Other' end as gender from registration r,applyn a where a.app_no=r.App_No and r.App_No='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rtoday = cmd.ExecuteReader();
        if (rtoday.Read())
        {

            byr = rtoday.GetValue(0).ToString();
            deg = rtoday.GetValue(1).ToString();
            cc = rtoday.GetValue(2).ToString();
            sem = rtoday.GetValue(3).ToString();
            sec = rtoday.GetValue(4).ToString();
            gender = rtoday.GetValue(5).ToString();
            if (cc == "False" || cc == "false")
            {
                cmd.CommandText = "Select CONVERT(VARCHAR(10),start_date,103),CONVERT(VARCHAR(10),end_date,103),semester,batch_year from seminfo where degree_code='" + rtoday.GetValue(1).ToString() + "' and semester='" + rtoday.GetValue(3).ToString() + "' and batch_year='" + rtoday.GetValue(0).ToString() + "'";
                cmd.Connection = con1;
                con1.Open();
                SqlDataReader rbs = cmd.ExecuteReader();
                if (rbs.Read())
                {
                    stdate = rbs.GetValue(0).ToString();
                    edate = rbs.GetValue(1).ToString();

                    DateTime.TryParseExact(stdate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtStartDate);
                    DateTime.TryParseExact(edate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtEndDate);
                    if (DateTime.Today >= dtStartDate && DateTime.Today <= dtEndDate)
                    {


                        Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 1;
                        Fpstimetable.Sheets[0].SpanModel.Add(Fpstimetable.Sheets[0].RowCount - 1, 0, 1, Fpstimetable.Sheets[0].ColumnCount);
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = DateTime.Now.ToString("dd-MM-yyyy");
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        //modified By Srinath 22/03/2014
                        //cmd.CommandText = "select period1,RIGHT(CONVERT(VARCHAR(20),start_time,100),7),RIGHT(CONVERT(VARCHAR(20),end_time,100),7), desc1 from bellschedule where  degree_code='" + deg + "' and semester='" + sem + "' order by period1";
                        cmd.CommandText = "select period1,RIGHT(CONVERT(VARCHAR(20),start_time,100),7),RIGHT(CONVERT(VARCHAR(20),end_time,100),7), desc1 from bellschedule where  degree_code='" + deg + "' and semester='" + sem + "' and Period1 not like 'Break%'  order by period1";
                        cmd.Connection = con2;
                        con2.Open();
                        SqlDataReader rbsed = cmd.ExecuteReader();
                        if (rbsed.HasRows)
                            while (rbsed.Read())
                            {
                                Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 1;
                                int j = 0;
                                for (j = 0; j < 4; j++)
                                {
                                    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, j].Text = rbsed.GetValue(j).ToString();
                                    if (j == 3)
                                    {
                                        //hidden by srinath 22/03/2014
                                        //int result;
                                        //if (int.TryParse(rbsed.GetValue(j).ToString(), out result))
                                        i++;
                                    }
                                }
                                int lent0 = 0;
                                lent0 = Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text.Length;
                                if (len0 < lent0)
                                    len0 = lent0;
                            }

                        rbsed.Close();
                        con2.Close();

                        rtoday.Close();
                        con.Close();

                        //added by Mullai
                        bool staffSelector = false;

                        string qryStudeStaffSelector = string.Empty;
                        string minimumabsentsms = da.GetFunction("select LinkValue from New_InsSettings where LinkName='Studnet Staff Selector' and college_code='" + Session["collegecode"].ToString() + "' ");
                        string[] splitminimumabsentsms = minimumabsentsms.Split('-');
                        if (splitminimumabsentsms.Length == 2)
                        {
                            int batchyearsetting = 0;
                            int.TryParse(Convert.ToString(splitminimumabsentsms[1]).Trim(), out batchyearsetting);
                            if (splitminimumabsentsms[0].ToString() == "1")
                            {
                                if (Convert.ToInt32(byr.ToString()) >= batchyearsetting)
                                {
                                    staffSelector = true;
                                }
                            }
                        }
                        else if (splitminimumabsentsms.Length > 0)
                        {
                            if (splitminimumabsentsms[0].ToString() == "1")
                            {
                                staffSelector = true;
                            }
                        }


                        if (Fpstimetable.Sheets[0].RowCount > 1)
                        {
                            int col = i;
                            string subno = string.Empty;
                            string subname = string.Empty;
                            string staffno = string.Empty;
                            string subno1 = string.Empty;
                            string subjno1 = string.Empty;
                            string staffno1 = string.Empty;
                            string stafno = string.Empty;
                            string[] no = new string[5];
                            string[] sub = new string[5];
                            string[] subject = new string[5];
                            string[] staff = new string[5];
                            int[] count = new int[5];
                            string no1 = string.Empty;
                            string no2 = string.Empty;
                            string l1, l;
                            int cnt = 0;
                            rtoday.Close();
                            con.Close();
                            string s = DateTime.Now.DayOfWeek.ToString().Substring(0, 3);
                            //Commended By Malang raja Error is shown as "The conversion of a varchar data type to a datetime data type"
                            //string currentdate = DateTime.Now.ToString("MM/dd/yyyy");//Added By Srinath 13/8/2013 
                            string currentdate = DateTime.Now.ToString("yyyy/MM/dd"); //Modified on 16/04/2016
                            string tday = string.Empty;
                            string temp = string.Empty;
                            string temp1 = string.Empty;
                            string temps = string.Empty;
                            string st = string.Empty;
                            string str = string.Empty;
                            string[] split;
                            string[] split1;
                            string[] split2;
                            int len = 0;
                            //arrCount = Split(MyString, TargetCharacter, -1 1)
                            //CharacterCount = UBound(arrCount)
                            for (int k = 1; k <= col; k++)
                            {
                                tday = s + k.ToString();
                                string startdate = string.Empty;
                                DateTime dt = new DateTime();
                                SqlDataReader rsub;
                                bool stdat = false;
                                //exam_held = (dtsub.Rows.Count > 0) ? dtsub.Rows[0]["exam_date"].ToString() : "";
                                if (stdate.Trim() != "")
                                {
                                    stdat = DateTime.TryParseExact(stdate, "dd/MM/yyyy", null, DateTimeStyles.None, out dt);
                                }
                                if (stdate != "" && stdat == true)
                                {//
                                    if (sec != "")
                                        cmd.CommandText = "select " + tday + " from semester_schedule where degree_code='" + deg + "' and batch_year='" + byr + "' and semester='" + sem + "' and sections='" + sec + "'" + "and  fromDate >= '" + string.Format("{0:yyyy/MM/dd}", dt) + "' Order by FromDate Desc";
                                    else
                                        cmd.CommandText = "select " + tday + " from semester_schedule where degree_code='" + deg + "' and batch_year='" + byr + "' and semester='" + sem + "'and  fromDate >= '" + string.Format("{0:yyyy/MM/dd}", dt) + "' Order by FromDate Desc";
                                    cmd.Connection = con;
                                    con.Open();
                                }
                                rsub = cmd.ExecuteReader();
                                string atlternatehr = GetFunction("select " + tday + " from Alternate_Schedule where degree_code='" + deg + "' and batch_year='" + byr + "' and semester='" + sem + "'and  fromDate = '" + currentdate.ToString() + "'");//Added By Srinath 13/8/2013
                                if (rsub.Read())
                                {
                                    if (atlternatehr != "0" && atlternatehr != null && atlternatehr != "")//Added By Srinath 13/8/2013
                                    {
                                        sno = atlternatehr;
                                    }
                                    else
                                    {
                                        sno = rsub.GetValue(0).ToString();
                                    }
                                    if (sno != "")
                                    {
                                        if (sno.Contains(";"))
                                        {
                                            split = sno.Split(new Char[] { ';' });
                                            len = split.Length;
                                            for (int c = 0; c < split.Length; c++)
                                            {
                                                no[c] = split[c].ToString();
                                            }
                                        }
                                        else
                                        {
                                            no[0] = sno.ToString();
                                            len = 1;
                                        }
                                        for (int c = 0; c < len; c++)
                                        {
                                            if (no[c] != "" && no[c] != null)
                                            {
                                                if (no[c].Contains("-"))
                                                {
                                                    split1 = no[c].Split(new Char[] { '-' });
                                                    sub[c] = split1[0].ToString() + "-" + split1[1].ToString();
                                                    subject[c] = split1[0].ToString();
                                                    staff[c] = split1[1].ToString();
                                                }
                                                else
                                                {
                                                    subject[c] = no[c].ToString();
                                                    staff[c] = string.Empty;
                                                }
                                                long res;
                                                if (long.TryParse(subject[c], out res))
                                                {
                                                    con1.Close();
                                                    cmd.CommandText = "select  subject_code,subject_name from subject where subject_No='" + subject[c] + "'";
                                                    cmd.Connection = con1;
                                                    con1.Open();
                                                    SqlDataReader rsubj = cmd.ExecuteReader();
                                                    if (rsubj.Read())
                                                    {
                                                        if (temp == "" && temp1 == "")
                                                        {
                                                            temp = rsubj.GetValue(0).ToString();
                                                            temp1 = rsubj.GetValue(1).ToString();
                                                            subcode.Add(rsubj.GetValue(0).ToString());
                                                            sname.Add(rsubj.GetValue(1).ToString());
                                                        }
                                                        else
                                                        {
                                                            temp = temp + " , " + rsubj.GetValue(0).ToString();
                                                            temp1 = temp1 + " , " + rsubj.GetValue(1).ToString();
                                                            subcode.Add(rsubj.GetValue(0).ToString());
                                                            sname.Add(rsubj.GetValue(1).ToString());
                                                        }
                                                    }
                                                    else
                                                    {
                                                        subcode.Add("");
                                                        sname.Add("");
                                                    }
                                                    rsubj.Close();
                                                    con1.Close();
                                                    if (staffSelector == true)
                                                    {
                                                        string rolno = "select roll_no from registration where app_no='" + appno + "'";
                                                        DataSet dsroll = da.select_method_wo_parameter(rolno, "text");
                                                        string stafname = "select StaffCode from subjectChooser where subject_no='" + subject[c] + "' and roll_no='" + Convert.ToString(dsroll.Tables[0].Rows[0]["roll_no"]) + "'";
                                                        DataSet stafnam = da.select_method_wo_parameter(stafname, "text");
                                                        if (stafnam.Tables.Count > 0 && stafnam.Tables[0].Rows.Count > 0)
                                                        {
                                                            str = Convert.ToString(stafnam.Tables[0].Rows[0]["StaffCode"]);
                                                            string[] staffs = str.Split(';');
                                                            if (staffs.Length > 1)
                                                            {
                                                                str = "";
                                                                for (int r = 0; r < staffs.Count(); r++)
                                                                {
                                                                    if (str == "")
                                                                    {
                                                                        str = "" + staffs[r] + "";
                                                                    }
                                                                    else
                                                                    {
                                                                        str = str + "'" + "," + "'" + staffs[r] + "";
                                                                    }
                                                                }
                                                            }

                                                        }
                                                        else
                                                        {
                                                            staffname.Add("");
                                                        }
                                                    }
                                                    else
                                                    {

                                                        if (staff[c] != "")
                                                        {
                                                            if (staff[c].Contains("-"))
                                                            {
                                                                split2 = staff[c].Split(new Char[] { '-' });
                                                                st = split2[0].ToString() + "-" + split2[1].ToString();
                                                                str = split2[0].ToString();
                                                            }
                                                            else
                                                            {
                                                                if (staff[c] != "S" || staff[c] != "s" || staff[c] != "L" || staff[c] != "L")
                                                                {
                                                                    str = staff[c];
                                                                }
                                                                else
                                                                {
                                                                    str = string.Empty;
                                                                }
                                                            }
                                                        }

                                                        else
                                                        {
                                                            staffname.Add("");
                                                        }
                                                    }



                                                    if (str != "")
                                                    {
                                                        // if (long.TryParse(str, out res))
                                                        {
                                                            cmd.CommandText = "select  staff_name from staffmaster where staff_code in('" + str + "')";
                                                            cmd.Connection = con1;
                                                            con1.Open();
                                                            SqlDataReader rstaf = cmd.ExecuteReader();
                                                            if (rstaf.Read())
                                                            {
                                                                if (temps == "")
                                                                {
                                                                    temps = rstaf.GetValue(0).ToString();
                                                                    staffname.Add(rstaf.GetValue(0).ToString());
                                                                }
                                                                else
                                                                {
                                                                    temps = temps + " , " + rstaf.GetValue(0).ToString();
                                                                    staffname.Add(rstaf.GetValue(0).ToString());
                                                                }
                                                            }
                                                            else
                                                            {
                                                                staffname.Add("");
                                                            }
                                                            rstaf.Close();
                                                            con1.Close();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        staffname.Add("");
                                                    }

                                                }
                                            }
                                        }
                                        Fpstimetable.Sheets[0].Cells[k, 3].Text = temp;
                                        int lent3 = 0;
                                        lent3 = Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 3].Text.Length;
                                        if (len3 < lent3)
                                            len3 = lent3;
                                        //  Fpstimetable.Sheets[0].Cells[k - 1, 4].Text = temp1;
                                        //   Fpstimetable.Sheets[0].Cells[k - 1, 5].Text = temps;
                                    }
                                    else
                                    {
                                        Fpstimetable.Sheets[0].Cells[k, 3].Text = string.Empty;
                                        //    Fpstimetable.Sheets[0].Cells[k - 1, 4].Text  = string.Empty;
                                        //      Fpstimetable.Sheets[0].Cells[k - 1, 5].Text  = string.Empty;
                                    }
                                }
                                rsub.Close();
                                con.Close();
                                temp = string.Empty;
                                temp1 = string.Empty;
                                temps = string.Empty;
                            }
                            ArrayList stext = new ArrayList();
                            if (subcode.Count > 0)
                                for (int item = 0; item < subcode.Count; item++)
                                {
                                    string fptext = " " + subcode[item].ToString() + " - " + sname[item].ToString() + " - " + staffname[item].ToString();
                                    if (stext.Count > 0)
                                    {
                                        if (stext.Contains(fptext))
                                        {
                                        }
                                        else
                                        {
                                            Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 2;
                                            Fpstimetable.Sheets[0].SpanModel.Add(Fpstimetable.Sheets[0].RowCount - 1, 0, 1, Fpstimetable.Sheets[0].ColumnCount);
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = fptext;
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                        }
                                    }
                                    else
                                    {
                                        Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 2;
                                        Fpstimetable.Sheets[0].SpanModel.Add(Fpstimetable.Sheets[0].RowCount - 1, 0, 1, Fpstimetable.Sheets[0].ColumnCount);
                                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = fptext;
                                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                    }
                                    stext.Add(fptext);
                                }
                            for (int j = 0; j < Fpstimetable.Sheets[0].RowCount; j++)
                            {
                                Fpstimetable.Rows[j].Font.Name = "Book Antiqua";
                                Fpstimetable.Rows[j].Font.Size = FontUnit.Medium;
                                Fpstimetable.Rows[j].Font.Bold = false;
                            }
                            Fpstimetable.Columns[0].Font.Name = "Book Antiqua";
                            Fpstimetable.Columns[1].Font.Name = "Book Antiqua";
                            Fpstimetable.Columns[2].Font.Name = "Book Antiqua";
                            Fpstimetable.Columns[3].Font.Name = "Book Antiqua";
                            Fpstimetable.Columns[0].Font.Size = FontUnit.Medium;
                            Fpstimetable.Columns[1].Font.Size = FontUnit.Medium;
                            Fpstimetable.Columns[2].Font.Size = FontUnit.Medium;
                            Fpstimetable.Columns[3].Font.Size = FontUnit.Medium;
                            if (len0 > 5)
                                Fpstimetable.Columns[0].Width = len0 * 11;
                            if (len3 > 9)
                                Fpstimetable.Columns[3].Width = len3 * 11;
                            int widt = 0; int h = 0;
                            for (int w = 0; w < Fpstimetable.Sheets[0].ColumnCount; w++)
                                widt = widt + Fpstimetable.Columns[w].Width;
                            if (widt > 900)
                            {
                                h = 16;
                                widt = 900;
                                Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                            }
                            else
                            {
                                Fpstimetable.Width = widt;
                                Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                            }
                            if (Fpstimetable.Sheets[0].RowCount <= 20)
                            {
                                Fpstimetable.Width = widt;
                                Fpstimetable.Height = h + (20 * Fpstimetable.Sheets[0].RowCount) + Fpstimetable.ColumnHeader.Height + 40;
                                Fpstimetable.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                            }
                            else
                            {
                                Fpstimetable.Width = widt + 16;
                                Fpstimetable.Height = 460;
                                Fpstimetable.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                            }
                            Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                            Fpstimetable.SaveChanges();
                        }
                        else
                        {
                            Fpstimetable.Sheets[0].ColumnCount = 0;
                            Fpstimetable.Sheets[0].RowCount = 0;
                            Fpstimetable.Sheets[0].ColumnCount = 4;
                            Fpstimetable.Sheets[0].RowCount = 1;
                            Fpstimetable.ColumnHeader.Columns.Default.Width = 150;
                            Fpstimetable.ColumnHeader.Visible = false;
                            Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                            Fpstimetable.Width = 600;
                            Fpstimetable.Height = 40;
                            Fpstimetable.Sheets[0].Cells[0, 0].Text = "No " + lbl_semOrTerm.Text + " Information Is Available";
                            Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                        }


                    }
                    else
                    {
                        if (DateTime.Today < dtStartDate)
                        {
                            string prefix = "th";
                            if (sem == "1")
                                prefix = "st";
                            else if (sem == "2")
                                prefix = "nd";
                            else if (sem == "3")
                                prefix = "rd";

                            Fpstimetable.Sheets[0].ColumnCount = 0;
                            Fpstimetable.Sheets[0].RowCount = 0;
                            Fpstimetable.Sheets[0].ColumnCount = 4;
                            Fpstimetable.Sheets[0].RowCount = 1;
                            Fpstimetable.ColumnHeader.Columns.Default.Width = 150;
                            Fpstimetable.ColumnHeader.Visible = false;
                            Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                            Fpstimetable.Width = 600;
                            Fpstimetable.Height = 40;
                            Fpstimetable.Sheets[0].Cells[0, 0].Text = "Sorry. Your " + sem + prefix + " " + lbl_semOrTerm.Text + " starts on " + dtStartDate.ToString("dd/MM/yyyy");
                            Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                        }
                        if (DateTime.Today > dtEndDate)
                        {
                            string prefix = "th";
                            if (sem == "1")
                                prefix = "st";
                            else if (sem == "2")
                                prefix = "nd";
                            else if (sem == "3")
                                prefix = "rd";

                            Fpstimetable.Sheets[0].ColumnCount = 0;
                            Fpstimetable.Sheets[0].RowCount = 0;
                            Fpstimetable.Sheets[0].ColumnCount = 4;
                            Fpstimetable.Sheets[0].RowCount = 1;
                            Fpstimetable.ColumnHeader.Columns.Default.Width = 150;
                            Fpstimetable.ColumnHeader.Visible = false;
                            Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                            Fpstimetable.Width = 600;
                            Fpstimetable.Height = 40;
                            Fpstimetable.Sheets[0].Cells[0, 0].Text = "Sorry. Your " + sem + prefix + " " + lbl_semOrTerm.Text + " got over on " + dtEndDate.ToString("dd/MM/yyyy");
                            Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                        }
                    }
                }


                rbs.Close();
                con1.Close();
            }
            else
            {
                if (gender == "Male")
                {
                    Fpstimetable.Sheets[0].ColumnCount = 0;
                    Fpstimetable.Sheets[0].RowCount = 0;
                    Fpstimetable.Sheets[0].ColumnCount = 4;
                    Fpstimetable.Sheets[0].RowCount = 1;
                    Fpstimetable.ColumnHeader.Columns.Default.Width = 150;
                    Fpstimetable.ColumnHeader.Visible = false;
                    Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    Fpstimetable.Width = 600;
                    Fpstimetable.Height = 40;
                    Fpstimetable.Sheets[0].Cells[0, 0].Text = "Sorry. You are alumnus now. ";
                    Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";


                }
                else
                {
                    Fpstimetable.Sheets[0].ColumnCount = 0;
                    Fpstimetable.Sheets[0].RowCount = 0;
                    Fpstimetable.Sheets[0].ColumnCount = 4;
                    Fpstimetable.Sheets[0].RowCount = 1;
                    Fpstimetable.ColumnHeader.Columns.Default.Width = 150;
                    Fpstimetable.ColumnHeader.Visible = false;
                    Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    Fpstimetable.Width = 600;
                    Fpstimetable.Height = 40;
                    Fpstimetable.Sheets[0].Cells[0, 0].Text = "Sorry. You are alumna now. ";
                    Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";


                }
            }
        }



        Fpstimetable.SaveChanges();
    }

    //protected void Buttontoday_Click(object sender, EventArgs e)
    //{
    //    inittimetable();
    //    Fpstimetable.Visible = true;
    //    Fpstimetable.Sheets[0].ColumnCount = 4;
    //    Fpstimetable.Sheets[0].RowCount = 0;
    //    Fpstimetable.ColumnHeader.Visible = true;
    //    Fpstimetable.RowHeader.Visible = false;
    //    Fpstimetable.CommandBar.Visible = false;
    //    Fpstimetable.Sheets[0].GridLines = GridLines.Both;
    //    Fpstimetable.Sheets[0].DefaultRowHeight = 20;
    //    Fpstimetable.TitleInfo.Visible = true;
    //    Fpstimetable.TitleInfo.Text = "Class Time Table Today";
    //    Fpstimetable.TitleInfo.Font.Size = FontUnit.Large;
    //    Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 0].Text = "Hour";
    //    Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Start Time";
    //    Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 2].Text = "End Time";
    //    Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Subject Code";
    //    Fpstimetable.Columns[0].Width = 50;
    //    Fpstimetable.Columns[1].Width = 85;
    //    Fpstimetable.Columns[2].Width = 85;
    //    Fpstimetable.Columns[3].Width = 100;
    //    int len0 = 0, len3 = 0;
    //    int i = 0;
    //    string byr  = string.Empty;
    //    string deg  = string.Empty;
    //    string sem  = string.Empty;
    //    string sec  = string.Empty;
    //    string sno  = string.Empty;
    //    string stdate  = string.Empty;
    //    string edate  = string.Empty;
    //    Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 1;
    //    Fpstimetable.Sheets[0].SpanModel.Add(Fpstimetable.Sheets[0].RowCount - 1, 0, 1, Fpstimetable.Sheets[0].ColumnCount);
    //    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = DateTime.Now.ToString("dd-MM-yyyy");
    //    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
    //    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
    //    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
    //    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
    //    cmd.CommandText = "select batch_year,degree_code,current_semester,isnull(sections,'') from registration where App_No='" + appno + "'";
    //    cmd.Connection = con;
    //    con.Open();
    //    SqlDataReader rtoday = cmd.ExecuteReader();
    //    if (rtoday.Read())
    //    {
    //        byr = rtoday.GetValue(0).ToString();
    //        deg = rtoday.GetValue(1).ToString();
    //        sem = rtoday.GetValue(2).ToString();
    //        sec = rtoday.GetValue(3).ToString();
    //        cmd.CommandText = "Select CONVERT(VARCHAR(10),start_date,103),CONVERT(VARCHAR(10),end_date,103),semester,batch_year from seminfo where degree_code='" + rtoday.GetValue(1).ToString() + "' and semester='" + rtoday.GetValue(2).ToString() + "' and batch_year='" + rtoday.GetValue(0).ToString() + "'";
    //        cmd.Connection = con1;
    //        con1.Open();
    //        SqlDataReader rbs = cmd.ExecuteReader();
    //        if (rbs.Read())
    //        {
    //            stdate = rbs.GetValue(0).ToString();
    //            edate = rbs.GetValue(1).ToString();
    //            cmd.CommandText = "select desc1,RIGHT(CONVERT(VARCHAR(20),start_time,100),7),RIGHT(CONVERT(VARCHAR(20),end_time,100),7),period1 from bellschedule where  degree_code='" + deg + "' and semester='" + sem + "' order by period1";
    //            cmd.Connection = con2;
    //            con2.Open();
    //            SqlDataReader rbsed = cmd.ExecuteReader();
    //            if (rbsed.HasRows)
    //                while (rbsed.Read())
    //                {
    //                    Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 1;
    //                    int j = 0;
    //                    for (j = 0; j < 4; j++)
    //                    {
    //                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, j].Text = rbsed.GetValue(j).ToString();
    //                        if (j == 3)
    //                        {
    //                            int result;
    //                            if (int.TryParse(rbsed.GetValue(j).ToString(), out result))
    //                                i++;
    //                        }
    //                    }
    //                    int lent0 = 0;
    //                    lent0 = Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text.Length;
    //                    if (len0 < lent0)
    //                        len0 = lent0;
    //                }
    //            rbsed.Close();
    //            con2.Close();
    //        }
    //        rbs.Close();
    //        con1.Close();
    //    }
    //    rtoday.Close();
    //    con.Close();
    //    if (Fpstimetable.Sheets[0].RowCount > 1)
    //    {
    //        int col = i;
    //        string subno  = string.Empty;
    //        string subname  = string.Empty;
    //        string staffno  = string.Empty;
    //        string subno1  = string.Empty;
    //        string subjno1  = string.Empty;
    //        string staffno1  = string.Empty;
    //        string stafno  = string.Empty;
    //        string[] no = new string[5];
    //        string[] sub = new string[5];
    //        string[] subject = new string[5];
    //        string[] staff = new string[5];
    //        int[] count = new int[5];
    //        string no1  = string.Empty;
    //        string no2  = string.Empty;
    //        string l1, l;
    //        int cnt = 0;
    //        rtoday.Close();
    //        con.Close();
    //        string s = DateTime.Now.DayOfWeek.ToString().Substring(0, 3);
    //        string tday  = string.Empty;
    //        string temp  = string.Empty;
    //        string temp1  = string.Empty;
    //        string temps  = string.Empty;
    //        string st  = string.Empty;
    //        string str  = string.Empty;
    //        string[] split;
    //        string[] split1;
    //        string[] split2;
    //        int len = 0;
    //        for (int k = 1; k <= col; k++)
    //        {
    //            tday = s + k.ToString();
    //            if (sec != "")
    //                cmd.CommandText = "select " + tday + " from semester_schedule where degree_code='" + deg + "' and batch_year='" + byr + "' and semester='" + sem + "' and sections='" + sec + "'" + "and  fromDate >= " + stdate.ToString() + " Order by FromDate Desc";
    //            else
    //                cmd.CommandText = "select " + tday + " from semester_schedule where degree_code='" + deg + "' and batch_year='" + byr + "' and semester='" + sem + "'and  fromDate >= " + stdate.ToString() + " Order by FromDate Desc";
    //            cmd.Connection = con;
    //            con.Open();
    //            SqlDataReader rsub = cmd.ExecuteReader();
    //            if (rsub.Read())
    //            {
    //                sno = rsub.GetValue(0).ToString();
    //                if (sno != "")
    //                {
    //                    if (sno.Contains(";"))
    //                    {
    //                        split = sno.Split(new Char[] { ';' });
    //                        len = split.Length;
    //                        for (int c = 0; c < split.Length; c++)
    //                        {
    //                            no[c] = split[c].ToString();
    //                        }
    //                    }
    //                    else
    //                    {
    //                        no[0] = sno.ToString();
    //                        len = 1;
    //                    }
    //                    for (int c = 0; c < len; c++)
    //                    {
    //                        if (no[c] != "" && no[c] != null)
    //                        {
    //                            if (no[c].Contains("-"))
    //                            {
    //                                split1 = no[c].Split(new Char[] { '-' });
    //                                sub[c] = split1[0].ToString() + "-" + split1[1].ToString();
    //                                subject[c] = split1[0].ToString();
    //                                staff[c] = split1[1].ToString();
    //                            }
    //                            else
    //                            {
    //                                subject[c] = no[c].ToString();
    //                                staff[c]  = string.Empty;
    //                            }
    //                            long res;
    //                            if (long.TryParse(subject[c], out res))
    //                            {
    //                                cmd.CommandText = "select  subject_code,subject_name from subject where subject_No='" + subject[c] + "'";
    //                                cmd.Connection = con1;
    //                                con1.Open();
    //                                SqlDataReader rsubj = cmd.ExecuteReader();
    //                                if (rsubj.Read())
    //                                {
    //                                    if (temp == "" && temp1 == "")
    //                                    {
    //                                        temp = rsubj.GetValue(0).ToString();
    //                                        temp1 = rsubj.GetValue(1).ToString();
    //                                        subcode.Add(rsubj.GetValue(0).ToString());
    //                                        sname.Add(rsubj.GetValue(1).ToString());
    //                                    }
    //                                    else
    //                                    {
    //                                        temp = temp + " , " + rsubj.GetValue(0).ToString();
    //                                        temp1 = temp1 + " , " + rsubj.GetValue(1).ToString();
    //                                        subcode.Add(rsubj.GetValue(0).ToString());
    //                                        sname.Add(rsubj.GetValue(1).ToString());
    //                                    }
    //                                }
    //                                else
    //                                {
    //                                    subcode.Add("");
    //                                    sname.Add("");
    //                                }
    //                                rsubj.Close();
    //                                con1.Close();
    //                                if (staff[c] != "")
    //                                {
    //                                    if (staff[c].Contains("-"))
    //                                    {
    //                                        split2 = staff[c].Split(new Char[] { '-' });
    //                                        st = split2[0].ToString() + "-" + split2[1].ToString();
    //                                        str = split2[0].ToString();
    //                                    }
    //                                    else
    //                                    {
    //                                        if (staff[c] != "S" || staff[c] != "s" || staff[c] != "L" || staff[c] != "L")
    //                                        {
    //                                            str = staff[c];
    //                                        }
    //                                        else
    //                                        {
    //                                            str  = string.Empty;
    //                                        }
    //                                    }
    //                                    if (str != "")
    //                                    {
    //                                        {
    //                                            cmd.CommandText = "select  staff_name from staffmaster where staff_code='" + str + "'";
    //                                            cmd.Connection = con1;
    //                                            con1.Open();
    //                                            SqlDataReader rstaf = cmd.ExecuteReader();
    //                                            if (rstaf.Read())
    //                                            {
    //                                                if (temps == "")
    //                                                {
    //                                                    temps = rstaf.GetValue(0).ToString();
    //                                                    staffname.Add(rstaf.GetValue(0).ToString());
    //                                                }
    //                                                else
    //                                                {
    //                                                    temps = temps + " , " + rstaf.GetValue(0).ToString();
    //                                                    staffname.Add(rstaf.GetValue(0).ToString());
    //                                                }
    //                                            }
    //                                            else
    //                                            {
    //                                                staffname.Add("");
    //                                            }
    //                                            rstaf.Close();
    //                                            con1.Close();
    //                                        }
    //                                    }
    //                                    else
    //                                    {
    //                                        staffname.Add("");
    //                                    }
    //                                }
    //                                else
    //                                {
    //                                    staffname.Add("");
    //                                }
    //                            }
    //                        }
    //                    }
    //                    Fpstimetable.Sheets[0].Cells[k, 3].Text = temp;
    //                    int lent3 = 0;
    //                    lent3 = Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 3].Text.Length;
    //                    if (len3 < lent3)
    //                        len3 = lent3;
    //                }
    //                else
    //                {
    //                    Fpstimetable.Sheets[0].Cells[k, 3].Text  = string.Empty;
    //                }
    //            }
    //            rsub.Close();
    //            con.Close();
    //            temp  = string.Empty;
    //            temp1  = string.Empty;
    //            temps  = string.Empty;
    //        }
    //        ArrayList stext = new ArrayList();
    //        if (subcode.Count > 0)
    //            for (int item = 0; item < subcode.Count; item++)
    //            {
    //                string fptext = " " + subcode[item].ToString() + " - " + sname[item].ToString() + " - " + staffname[item].ToString();
    //                if (stext.Count > 0)
    //                {
    //                    if (stext.Contains(fptext))
    //                    {
    //                    }
    //                    else
    //                    {
    //                        Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 2;
    //                        Fpstimetable.Sheets[0].SpanModel.Add(Fpstimetable.Sheets[0].RowCount - 1, 0, 1, Fpstimetable.Sheets[0].ColumnCount);
    //                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = fptext;
    //                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
    //                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
    //                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
    //                    }
    //                }
    //                else
    //                {
    //                    Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 2;
    //                    Fpstimetable.Sheets[0].SpanModel.Add(Fpstimetable.Sheets[0].RowCount - 1, 0, 1, Fpstimetable.Sheets[0].ColumnCount);
    //                    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = fptext;
    //                    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
    //                    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
    //                    Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
    //                }
    //                stext.Add(fptext);
    //            }
    //        for (int j = 0; j < Fpstimetable.Sheets[0].RowCount; j++)
    //        {
    //            Fpstimetable.Rows[j].Font.Name = "Book Antiqua";
    //            Fpstimetable.Rows[j].Font.Size = FontUnit.Medium;
    //            Fpstimetable.Rows[j].Font.Bold = false;
    //        }
    //        Fpstimetable.Columns[0].Font.Name = "Book Antiqua";
    //        Fpstimetable.Columns[1].Font.Name = "Book Antiqua";
    //        Fpstimetable.Columns[2].Font.Name = "Book Antiqua";
    //        Fpstimetable.Columns[3].Font.Name = "Book Antiqua";
    //        Fpstimetable.Columns[0].Font.Size = FontUnit.Medium;
    //        Fpstimetable.Columns[1].Font.Size = FontUnit.Medium;
    //        Fpstimetable.Columns[2].Font.Size = FontUnit.Medium;
    //        Fpstimetable.Columns[3].Font.Size = FontUnit.Medium;
    //        if (len0 > 5)
    //            Fpstimetable.Columns[0].Width = len0 * 11;
    //        if (len3 > 9)
    //            Fpstimetable.Columns[3].Width = len3 * 11;
    //        int widt = 0; int h = 0;
    //        for (int w = 0; w < Fpstimetable.Sheets[0].ColumnCount; w++)
    //            widt = widt + Fpstimetable.Columns[w].Width;
    //        if (widt > 900)
    //        {
    //            h = 16;
    //            widt = 900;
    //            Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
    //        }
    //        else
    //        {
    //            Fpstimetable.Width = widt;
    //            Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
    //        }
    //        if (Fpstimetable.Sheets[0].RowCount <= 20)
    //        {
    //            Fpstimetable.Width = widt;
    //            Fpstimetable.Height = h + (20 * Fpstimetable.Sheets[0].RowCount) + Fpstimetable.ColumnHeader.Height + 40;
    //            Fpstimetable.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
    //        }
    //        else
    //        {
    //            Fpstimetable.Width = widt + 16;
    //            Fpstimetable.Height = 460;
    //            Fpstimetable.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
    //        }
    //        Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
    //        Fpstimetable.SaveChanges();
    //    }
    //    else
    //    {
    //        Fpstimetable.Sheets[0].ColumnCount = 0;
    //        Fpstimetable.Sheets[0].RowCount = 0;
    //        Fpstimetable.Sheets[0].ColumnCount = 4;
    //        Fpstimetable.Sheets[0].RowCount = 1;
    //        Fpstimetable.ColumnHeader.Columns.Default.Width = 150;
    //        Fpstimetable.ColumnHeader.Visible = false;
    //        Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
    //        Fpstimetable.Width = 600;
    //        Fpstimetable.Height = 40;
    //        Fpstimetable.Sheets[0].Cells[0, 0].Text = "No information Available";
    //        Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
    //        Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
    //        Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
    //        Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
    //    }
    //    Fpstimetable.SaveChanges();
    //}

    protected void Buttonsem_Click(object sender, EventArgs e)
    {
        inittimetable();

        Fpstimetable.Visible = true;
        Fpstimetable.Sheets[0].ColumnCount = 2;
        Fpstimetable.Sheets[0].RowCount = 0;
        Fpstimetable.ColumnHeader.Visible = true;
        Fpstimetable.RowHeader.Visible = false;
        Fpstimetable.CommandBar.Visible = false;
        Fpstimetable.Sheets[0].GridLines = GridLines.Both;
        Fpstimetable.Sheets[0].DefaultColumnWidth = 100;
        Fpstimetable.Sheets[0].DefaultRowHeight = 20;
        Fpstimetable.TitleInfo.Visible = true;
        Fpstimetable.TitleInfo.Text = "Class Time Table " + lbl_semOrTerm.Text;
        Fpstimetable.TitleInfo.Font.Size = FontUnit.Large;
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Day";
        Fpstimetable.Columns[0].Width = 40;
        Fpstimetable.Columns[0].HorizontalAlign = HorizontalAlign.Center;
        Fpstimetable.Columns[1].Width = 90;
        int i = 0;
        string byr = string.Empty;
        string deg = string.Empty;
        string sem = string.Empty;
        string sec = string.Empty;
        string sno = string.Empty;
        int nhrs = 0;
        int ndays = 0;
        string stdate = string.Empty;
        string edate = string.Empty;
        string cc = string.Empty;
        string gender = string.Empty;
        DateTime dtStartDate = new DateTime();
        DateTime dtEndDate = new DateTime();

        cmd.CommandText = "select r.batch_year,r.degree_code,r.CC,r.current_semester,LTRIM(RTRIM(isnull(sections,''))) as sections,case when a.sex=0 then 'Male' when a.sex=1 then 'Female' else 'Other' end as gender from registration r,applyn a where a.app_no=r.App_No and r.App_No='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rtoday = cmd.ExecuteReader();
        if (rtoday.Read())
        {

            byr = rtoday.GetValue(0).ToString();
            deg = rtoday.GetValue(1).ToString();
            cc = rtoday.GetValue(2).ToString();
            sem = rtoday.GetValue(3).ToString();
            sec = rtoday.GetValue(4).ToString();
            gender = rtoday.GetValue(5).ToString();

            if (cc == "False" || cc == "false")
            {

                cmd.CommandText = "Select CONVERT(VARCHAR(10),start_date,103),CONVERT(VARCHAR(10),end_date,103),semester,batch_year from seminfo where degree_code='" + rtoday.GetValue(1).ToString() + "' and semester='" + rtoday.GetValue(3).ToString() + "' and batch_year='" + rtoday.GetValue(0).ToString() + "'";
                cmd.Connection = con1;
                con1.Open();
                SqlDataReader rbsed = cmd.ExecuteReader();
                if (rbsed.Read())
                {
                    stdate = rbsed.GetValue(0).ToString();
                    edate = rbsed.GetValue(1).ToString();

                    DateTime.TryParseExact(stdate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtStartDate);
                    DateTime.TryParseExact(edate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtEndDate);

                    if (DateTime.Today >= dtStartDate && DateTime.Today <= dtEndDate)
                    {

                        cmd.CommandText = "Select No_of_hrs_per_day,nodays from periodattndschedule where degree_code=" + rtoday.GetValue(1).ToString() + " and semester=" + rtoday.GetValue(3).ToString() + "";
                        cmd.Connection = con2;
                        con2.Open();
                        SqlDataReader rp = cmd.ExecuteReader();
                        if (rp.Read())
                        {
                            nhrs = Convert.ToInt32(rp.GetValue(0).ToString());
                            ndays = Convert.ToInt32(rp.GetValue(1).ToString());
                            Fpstimetable.Sheets[0].ColumnCount = Fpstimetable.Sheets[0].ColumnCount + nhrs;
                        }
                        rp.Close();
                        con2.Close();
                        Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 1;
                        Fpstimetable.Sheets[0].SpanModel.Add(Fpstimetable.Sheets[0].RowCount - 1, 0, 1, Fpstimetable.Sheets[0].ColumnCount);
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = lbl_semOrTerm.Text.ToUpper() + " SCHEDULE : " + rbsed.GetValue(0).ToString() + " - " + rbsed.GetValue(1).ToString() + lbl_semOrTerm.Text.ToUpper() + " : " + rbsed.GetValue(2).ToString() + " BATCH_YEAR : " + rbsed.GetValue(3).ToString() + " ";
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";



                        //added by Mullai
                        bool staffSelector = false;

                        string qryStudeStaffSelector = string.Empty;
                        string minimumabsentsms = da.GetFunction("select LinkValue from New_InsSettings where LinkName='Studnet Staff Selector' and college_code='" + Session["collegecode"].ToString() + "' ");
                        string[] splitminimumabsentsms = minimumabsentsms.Split('-');
                        if (splitminimumabsentsms.Length == 2)
                        {
                            int batchyearsetting = 0;
                            int.TryParse(Convert.ToString(splitminimumabsentsms[1]).Trim(), out batchyearsetting);
                            if (splitminimumabsentsms[0].ToString() == "1")
                            {
                                if (Convert.ToInt32(byr.ToString()) >= batchyearsetting)
                                {
                                    staffSelector = true;
                                }
                            }
                        }
                        else if (splitminimumabsentsms.Length > 0)
                        {
                            if (splitminimumabsentsms[0].ToString() == "1")
                            {
                                staffSelector = true;
                            }
                        }


                        if (Fpstimetable.Sheets[0].RowCount > 0)
                        {
                            int col = i;
                            string subno = string.Empty;
                            string subname = string.Empty;
                            string staffno = string.Empty;
                            string subno1 = string.Empty;
                            string subjno1 = string.Empty;
                            string staffno1 = string.Empty;
                            string stafno = string.Empty;
                            string[] no = new string[5];
                            string[] sub = new string[5];
                            string[] subject = new string[5];
                            string[] staff = new string[5];
                            int[] count = new int[5];
                            string no1 = string.Empty;
                            string no2 = string.Empty;
                            string l1, l;
                            int cnt = 0;
                            rtoday.Close();
                            con.Close();
                            string tday = string.Empty;
                            string temp = string.Empty;
                            string temp1 = string.Empty;
                            string temps = string.Empty;
                            string st = string.Empty;
                            string str = string.Empty;
                            string[] split;
                            string[] split1;
                            string[] split2;
                            int len = 0;
                            string Dnam = string.Empty;
                            ArrayList sd = new ArrayList();
                            sd.Add("mon");
                            sd.Add("tue");
                            sd.Add("wed");
                            sd.Add("thu");
                            sd.Add("fri");
                            sd.Add("sat");
                            sd.Add("sun");
                            for (int j = 1; j <= ndays; j++)
                            {
                                Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 1;
                                switch (j)
                                {
                                    case 1:
                                        Dnam = "Monday";
                                        break;
                                    case 2:
                                        Dnam = "Tuesday";
                                        break;
                                    case 3:
                                        Dnam = "Wednesday";
                                        break;
                                    case 4:
                                        Dnam = "Thursday";
                                        break;
                                    case 5:
                                        Dnam = "Friday";
                                        break;
                                    case 6:
                                        Dnam = "Saturday";
                                        break;
                                    case 7:
                                        Dnam = "Sunday";
                                        break;
                                }
                                Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = j.ToString();
                                Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 1].Text = Dnam;
                                for (int k = 1; k <= nhrs; k++)
                                {
                                    tday = sd[j - 1] + k.ToString();
                                    if (sec != "")
                                        cmd.CommandText = "select " + tday + " from semester_schedule where degree_code='" + deg + "' and batch_year='" + byr + "' and semester='" + sem + "' and sections='" + sec + "'";
                                    else
                                        cmd.CommandText = "select " + tday + " from semester_schedule where degree_code='" + deg + "' and batch_year='" + byr + "' and semester='" + sem + "' ";
                                    cmd.Connection = con;
                                    con.Open();
                                    SqlDataReader rsub = cmd.ExecuteReader();
                                    if (rsub.Read())
                                    {
                                        sno = rsub.GetValue(0).ToString();
                                        if (sno != "")
                                        {
                                            if (sno.Contains(";"))
                                            {
                                                split = sno.Split(new Char[] { ';' });
                                                len = split.Length;
                                                for (int c = 0; c < split.Length; c++)
                                                {
                                                    no[c] = split[c].ToString();
                                                }
                                            }
                                            else
                                            {
                                                no[0] = sno.ToString();
                                                len = 1;
                                            }
                                            for (int c = 0; c < len; c++)
                                            {
                                                if (no[c] != "" && no[c] != null)
                                                {
                                                    if (no[c].Contains("-"))
                                                    {
                                                        split1 = no[c].Split(new Char[] { '-' });
                                                        sub[c] = split1[0].ToString() + "-" + split1[1].ToString();
                                                        subject[c] = split1[0].ToString();
                                                        staff[c] = split1[1].ToString();
                                                    }
                                                    else
                                                    {
                                                        subject[c] = no[c].ToString();
                                                        staff[c] = string.Empty;
                                                    }
                                                    long res;
                                                    if (long.TryParse(subject[c], out res))
                                                    {
                                                        con1.Close();
                                                        cmd.CommandText = "select  subject_code,subject_name from subject where subject_No='" + subject[c] + "'";
                                                        cmd.Connection = con1;
                                                        con1.Open();
                                                        SqlDataReader rsubj = cmd.ExecuteReader();
                                                        if (rsubj.Read())
                                                        {
                                                            if (temp == "" && temp1 == "")
                                                            {
                                                                temp = rsubj.GetValue(0).ToString();
                                                                temp1 = rsubj.GetValue(1).ToString();
                                                                subcode.Add(rsubj.GetValue(0).ToString());
                                                                sname.Add(rsubj.GetValue(1).ToString());
                                                            }
                                                            else
                                                            {
                                                                temp = temp + " , " + rsubj.GetValue(0).ToString();
                                                                temp1 = temp1 + " , " + rsubj.GetValue(1).ToString();
                                                                subcode.Add(rsubj.GetValue(0).ToString());
                                                                sname.Add(rsubj.GetValue(1).ToString());
                                                            }
                                                        }
                                                        else
                                                        {
                                                            subcode.Add("");
                                                            sname.Add("");
                                                        }
                                                        rsubj.Close();
                                                        con1.Close();
                                                        //added by Mullai
                                                        if (staffSelector == true)
                                                        {
                                                            string rolno = "select roll_no from registration where app_no='" + appno + "'";
                                                            DataSet dsroll = da.select_method_wo_parameter(rolno, "text");
                                                            string stafname = "select StaffCode from subjectChooser where subject_no='" + subject[c] + "' and roll_no='" + Convert.ToString(dsroll.Tables[0].Rows[0]["roll_no"]) + "'";
                                                            DataSet stafnam = da.select_method_wo_parameter(stafname, "text");
                                                            if (stafnam.Tables.Count > 0 && stafnam.Tables[0].Rows.Count > 0)
                                                            {
                                                                str = Convert.ToString(stafnam.Tables[0].Rows[0]["StaffCode"]);
                                                                string[] staffs = str.Split(';');
                                                                if (staffs.Length > 1)
                                                                {
                                                                    str = "";
                                                                    for (int r = 0; r < staffs.Count(); r++)
                                                                    {
                                                                        if (str == "")
                                                                        {
                                                                            str = "" + staffs[r] + "";
                                                                        }
                                                                        else
                                                                        {
                                                                            str = str + "'" + "," + "'" + staffs[r] + "";
                                                                        }
                                                                    }
                                                                }

                                                            }
                                                            else
                                                            {
                                                                staffname.Add("");
                                                            }
                                                        }
                                                        else
                                                        {


                                                            if (staff[c] != "")
                                                            {
                                                                if (staff[c].Contains("-"))
                                                                {
                                                                    split2 = staff[c].Split(new Char[] { '-' });
                                                                    st = split2[0].ToString() + "-" + split2[1].ToString();
                                                                    str = split2[0].ToString();
                                                                }
                                                                else
                                                                {
                                                                    if (staff[c] != "S" || staff[c] != "s" || staff[c] != "L" || staff[c] != "L")
                                                                    {
                                                                        str = staff[c];
                                                                    }
                                                                    else
                                                                    {
                                                                        str = string.Empty;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                staffname.Add("");
                                                            }
                                                        }


                                                        if (str != "")
                                                        {
                                                            {
                                                                cmd.CommandText = "select  staff_name from staffmaster where staff_code in('" + str + "')";
                                                                cmd.Connection = con1;
                                                                con1.Open();
                                                                SqlDataReader rstaf = cmd.ExecuteReader();
                                                                if (rstaf.Read())
                                                                {
                                                                    if (temps == "")
                                                                    {
                                                                        temps = rstaf.GetValue(0).ToString();
                                                                        staffname.Add(rstaf.GetValue(0).ToString());
                                                                    }
                                                                    else
                                                                    {
                                                                        temps = temps + " , " + rstaf.GetValue(0).ToString();
                                                                        staffname.Add(rstaf.GetValue(0).ToString());
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    staffname.Add("");
                                                                }
                                                                rstaf.Close();
                                                                con1.Close();
                                                            }
                                                        }
                                                        else
                                                        {
                                                            staffname.Add("");
                                                        }

                                                    }
                                                }
                                            }
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, k + 1].Text = temp;
                                        }
                                        else
                                        {
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, k + 1].Text = string.Empty;
                                        }
                                    }
                                    rsub.Close();
                                    con.Close();
                                    temp = string.Empty;
                                    temp1 = string.Empty;
                                    temps = string.Empty;
                                }
                            }
                            ArrayList stext = new ArrayList();
                            if (subcode.Count > 0)
                                for (int item = 0; item < subcode.Count; item++)
                                {
                                    string fptext = " " + subcode[item].ToString() + " - " + sname[item].ToString() + " - " + staffname[item].ToString();
                                    if (stext.Count > 0)
                                    {
                                        if (stext.Contains(fptext))
                                        {
                                        }
                                        else
                                        {
                                            Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 2;
                                            Fpstimetable.Sheets[0].SpanModel.Add(Fpstimetable.Sheets[0].RowCount - 1, 0, 1, Fpstimetable.Sheets[0].ColumnCount);
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = fptext;
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                        }
                                    }
                                    else
                                    {
                                        Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 2;
                                        Fpstimetable.Sheets[0].SpanModel.Add(Fpstimetable.Sheets[0].RowCount - 1, 0, 1, Fpstimetable.Sheets[0].ColumnCount);
                                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = fptext;
                                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                    }
                                    stext.Add(fptext);
                                }
                            int heights = 0;
                            for (int j = 0; j < Fpstimetable.Sheets[0].ColumnCount; j++)
                            {
                                Fpstimetable.Columns[j].Font.Name = "Book Antiqua";
                                Fpstimetable.Columns[j].Font.Size = FontUnit.Medium;
                                heights = heights + Fpstimetable.Columns[j].Width;
                            }
                            if (heights >= 840)
                                Fpstimetable.Width = 950;
                            else if (heights < 840)
                                Fpstimetable.Width = heights + 20;
                            if (Fpstimetable.Sheets[0].RowCount > 10)
                            {
                                Fpstimetable.Height = 400;
                                Fpstimetable.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                            }
                            //Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                        }
                        else
                        {
                            Fpstimetable.Sheets[0].ColumnCount = 0;
                            Fpstimetable.Sheets[0].RowCount = 0;
                            Fpstimetable.Sheets[0].ColumnCount = 4;
                            Fpstimetable.Sheets[0].RowCount = 1;
                            Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                            Fpstimetable.Columns.Default.Width = 150;
                            Fpstimetable.Height = 45;
                            Fpstimetable.Width = 600;
                            Fpstimetable.Sheets[0].ColumnHeader.Visible = false;
                            Fpstimetable.Sheets[0].Cells[0, 0].Text = "No information Available";
                            Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                        }
                    }
                    else
                    {
                        if (DateTime.Today < dtStartDate)
                        {
                            string prefix = "th";
                            if (sem == "1")
                                prefix = "st";
                            else if (sem == "2")
                                prefix = "nd";
                            else if (sem == "3")
                                prefix = "rd";

                            Fpstimetable.Sheets[0].ColumnCount = 0;
                            Fpstimetable.Sheets[0].RowCount = 0;
                            Fpstimetable.Sheets[0].ColumnCount = 4;
                            Fpstimetable.Sheets[0].RowCount = 1;
                            Fpstimetable.ColumnHeader.Columns.Default.Width = 150;
                            Fpstimetable.ColumnHeader.Visible = false;
                            Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                            Fpstimetable.Width = 600;
                            Fpstimetable.Height = 40;
                            Fpstimetable.Sheets[0].Cells[0, 0].Text = "Sorry. Your " + sem + prefix + " " + lbl_semOrTerm.Text + " starts on " + dtStartDate.ToString("dd/MM/yyyy");
                            Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                        }
                        if (DateTime.Today > dtEndDate)
                        {
                            string prefix = "th";
                            if (sem == "1")
                                prefix = "st";
                            else if (sem == "2")
                                prefix = "nd";
                            else if (sem == "3")
                                prefix = "rd";

                            Fpstimetable.Sheets[0].ColumnCount = 0;
                            Fpstimetable.Sheets[0].RowCount = 0;
                            Fpstimetable.Sheets[0].ColumnCount = 4;
                            Fpstimetable.Sheets[0].RowCount = 1;
                            Fpstimetable.ColumnHeader.Columns.Default.Width = 150;
                            Fpstimetable.ColumnHeader.Visible = false;
                            Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                            Fpstimetable.Width = 600;
                            Fpstimetable.Height = 40;
                            Fpstimetable.Sheets[0].Cells[0, 0].Text = "Sorry. Your " + sem + prefix + " " + lbl_semOrTerm.Text + " got over on " + dtEndDate.ToString("dd/MM/yyyy");
                            Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                            Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                        }
                    }
                }
                rbsed.Close();
                con1.Close();
            }
            else
            {
                if (gender == "Male")
                {
                    Fpstimetable.Sheets[0].ColumnCount = 0;
                    Fpstimetable.Sheets[0].RowCount = 0;
                    Fpstimetable.Sheets[0].ColumnCount = 4;
                    Fpstimetable.Sheets[0].RowCount = 1;
                    Fpstimetable.ColumnHeader.Columns.Default.Width = 150;
                    Fpstimetable.ColumnHeader.Visible = false;
                    Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    Fpstimetable.Width = 600;
                    Fpstimetable.Height = 40;
                    Fpstimetable.Sheets[0].Cells[0, 0].Text = "Sorry. You are alumnus now. ";
                    Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";


                }
                else
                {
                    Fpstimetable.Sheets[0].ColumnCount = 0;
                    Fpstimetable.Sheets[0].RowCount = 0;
                    Fpstimetable.Sheets[0].ColumnCount = 4;
                    Fpstimetable.Sheets[0].RowCount = 1;
                    Fpstimetable.ColumnHeader.Columns.Default.Width = 150;
                    Fpstimetable.ColumnHeader.Visible = false;
                    Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    Fpstimetable.Width = 600;
                    Fpstimetable.Height = 40;
                    Fpstimetable.Sheets[0].Cells[0, 0].Text = "Sorry. You are alumna now. ";
                    Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";


                }
            }
            if (nhrs > 0)
                for (int n = 1; n <= nhrs; n++)
                    Fpstimetable.Sheets[0].ColumnHeader.Cells[0, n + 1].Text = n.ToString();


        }

        rtoday.Close();
        con.Close();

        Fpstimetable.SaveChanges();
    }

    protected void ButtonCAM_Click(object sender, EventArgs e)
    {
        inittimetable();
        Fpstimetable.Visible = true;
        Fpstimetable.TitleInfo.Text = "Exam Time Table CAM";
        Fpstimetable.Sheets[0].ColumnCount = 8;
        Fpstimetable.Sheets[0].RowCount = 0;
        Fpstimetable.Rows.Default.Height = 20;
        Fpstimetable.Columns.Default.Width = 100;
        Fpstimetable.Sheets[0].ColumnHeader.Visible = true;
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Subject Code";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Subject Name";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Exam date";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Start Time";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 5].Text = "End Time";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Duration";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Session";
        int ivalue = 0, excode = 0;
        string cname = string.Empty;
        Fpstimetable.Columns[0].Width = 40;
        Fpstimetable.Columns[2].Width = 200;
        Fpstimetable.Columns[3].Width = 90;
        Fpstimetable.Columns[4].Width = 70;
        Fpstimetable.Columns[5].Width = 70;
        Fpstimetable.Columns[6].Width = 67;
        Fpstimetable.Columns[7].Width = 67;
        Fpstimetable.TitleInfo.Font.Bold = true;
        int len1 = 0, len2 = 0;
        cmd.CommandText = "Select degree_code,batch_year,Roll_No from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            cmd.CommandText = "select exam_code,criteria_no from exmtt where degree_code=" + rroll.GetValue(0).ToString() + " and batchFrom=" + rroll.GetValue(1).ToString() + " and batchTo=" + rroll.GetValue(1).ToString() + " and exam_type='Cam'";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rexam = cmd.ExecuteReader();
            if (rexam.HasRows)
            {
                while (rexam.Read())
                {
                    excode = Convert.ToInt32(rexam.GetValue(0).ToString());
                    cmd.CommandText = "select distinct criteria from criteriaforinternal where criteria_no=" + rexam.GetValue(1).ToString() + "";
                    cmd.Connection = con2;
                    con2.Open();
                    SqlDataReader rcri = cmd.ExecuteReader();
                    if (rcri.Read())
                    {
                        Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 1;
                        Fpstimetable.Sheets[0].SpanModel.Add(Fpstimetable.Sheets[0].RowCount - 1, 0, 1, 8);
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = rcri.GetValue(0).ToString();
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                    }
                    rcri.Close();
                    con2.Close();
                    cmd.CommandText = "select (Select Subject_Code from Subject where Subject_No =exmtt_det.subject_no),(Select Subject_Name from Subject where Subject_No=exmtt_det.subject_no) ,CONVERT(VARCHAR(10),exam_date,103),RIGHT(CONVERT(VARCHAR(20),start_time,100),7),RIGHT(CONVERT(VARCHAR(20),end_time,100),7),(CONVERT(VARCHAR(20),duration,108)),exam_session from exmtt_det where exam_code=" + excode + "";
                    cmd.Connection = con2;
                    con2.Open();
                    SqlDataReader rtest = cmd.ExecuteReader();
                    if (rtest.HasRows)
                    {
                        int i = 1;
                        while (rtest.Read())
                        {
                            Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 1;
                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = i.ToString();
                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 1].Text = rtest.GetValue(0).ToString();
                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 2].Text = rtest.GetValue(1).ToString();
                            int l1 = Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 1].Text.Length;
                            if (len1 < l1)
                                len1 = l1;
                            int l2 = Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 2].Text.Length;
                            if (len2 < l2)
                                len2 = l2;
                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 3].Text = rtest.GetValue(2).ToString();
                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 4].Text = rtest.GetValue(3).ToString();
                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 5].Text = rtest.GetValue(4).ToString();
                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 6].Text = rtest.GetValue(5).ToString();
                            Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 7].Text = rtest.GetValue(6).ToString();
                            i++;
                        }
                    }
                    rtest.Close();
                    con2.Close();
                }
                Fpstimetable.Sheets[0].Columns[1].Width = len1 * 11;
                Fpstimetable.Sheets[0].Columns[2].Width = len2 * 11;
                int widt = 0; int h = 0;
                for (int w = 0; w < Fpstimetable.Sheets[0].ColumnCount; w++)
                    widt = widt + Fpstimetable.Columns[w].Width;
                if (widt > 900)
                {
                    h = h + 16;
                    Fpstimetable.Width = 916;
                    Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                }
                else
                {
                    Fpstimetable.Width = widt;
                    Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                }
                Fpstimetable.Height = h + (Fpstimetable.Rows.Default.Height * Fpstimetable.Sheets[0].RowCount) + 70;
            }
            else
            {
                Fpstimetable.Sheets[0].ColumnCount = 0;
                Fpstimetable.Sheets[0].RowCount = 0;
                Fpstimetable.Sheets[0].ColumnCount = 4;
                Fpstimetable.Sheets[0].RowCount = 1;
                Fpstimetable.Columns.Default.Width = 150;
                Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 8);
                Fpstimetable.ColumnHeader.Visible = false;
                Fpstimetable.Height = 45;
                Fpstimetable.Width = 600;
                Fpstimetable.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpstimetable.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
            }
            rexam.Close();
            con1.Close();
        }
        rroll.Close();
        con.Close();
        Fpstimetable.SaveChanges();
    }

    protected void Buttonsemex_Click(object sender, EventArgs e)
    {
        inittimetable();
        Fpstimetable.Visible = true;
        Fpstimetable.Sheets[0].ColumnCount = 8;
        Fpstimetable.Sheets[0].RowCount = 0;
        Fpstimetable.Rows.Default.Height = 20;
        Fpstimetable.Columns.Default.Width = 100;
        Fpstimetable.ColumnHeader.Visible = true;
        Fpstimetable.TitleInfo.Text = "Exam Time Table " + lbl_semOrTerm.Text;
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Subject Code";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Subject Name";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Exam date";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Start Time";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 5].Text = "End Time";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Duration";
        Fpstimetable.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Session";
        int ivalue = 0, excode = 0;
        string cname = string.Empty;
        Fpstimetable.Columns[0].Width = 40;
        Fpstimetable.Columns[0].HorizontalAlign = HorizontalAlign.Center;
        Fpstimetable.Columns[1].Width = 75;
        Fpstimetable.Columns[2].Width = 200;
        Fpstimetable.Columns[3].Width = 90;
        Fpstimetable.Columns[4].Width = 70;
        Fpstimetable.Columns[5].Width = 70;
        Fpstimetable.Columns[6].Width = 67;
        Fpstimetable.Columns[7].Width = 67;
        Fpstimetable.TitleInfo.Font.Bold = true;
        int max_lenghth = 0;
        cmd.CommandText = "Select degree_code,batch_year,Roll_No from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            cmd.CommandText = "select top 1 exam_code from exmtt where degree_code=" + rroll.GetValue(0).ToString() + " and batchFrom=" + rroll.GetValue(1).ToString() + " and batchTo=" + rroll.GetValue(1).ToString() + " and exam_type='univ' order by exam_year desc";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rexam = cmd.ExecuteReader();
            if (rexam.Read())
            {
                excode = Convert.ToInt32(rexam.GetValue(0).ToString());
                cmd.CommandText = "select (Select Subject_Code from Subject where Subject_No =exmtt_det.subject_no),(Select Subject_Name from Subject where Subject_No=exmtt_det.subject_no) ,CONVERT(VARCHAR(10),exam_date,103),RIGHT(CONVERT(VARCHAR(20),start_time,100),7),RIGHT(CONVERT(VARCHAR(20),end_time,100),7),(CONVERT(VARCHAR(20),duration,108)),exam_session from exmtt_det where exam_code=" + rexam.GetValue(0).ToString();
                cmd.Connection = con2;
                con2.Open();
                SqlDataReader rtest = cmd.ExecuteReader();
                if (rtest.HasRows)
                {
                    int i = 1;
                    while (rtest.Read())
                    {
                        Fpstimetable.Sheets[0].RowCount = Fpstimetable.Sheets[0].RowCount + 1;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 0].Text = i.ToString();
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 1].Text = rtest.GetValue(0).ToString();
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 2].Text = rtest.GetValue(1).ToString();
                        int leng = Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 2].Text.Length;
                        if (max_lenghth < leng)
                            max_lenghth = leng;
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 3].Text = rtest.GetValue(2).ToString();
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 4].Text = rtest.GetValue(3).ToString();
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 5].Text = rtest.GetValue(4).ToString();
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 6].Text = rtest.GetValue(5).ToString();
                        Fpstimetable.Sheets[0].Cells[Fpstimetable.Sheets[0].RowCount - 1, 7].Text = rtest.GetValue(6).ToString();
                        i++;
                    }
                }
                rtest.Close();
                con2.Close();
                Fpstimetable.Columns[2].Width = (max_lenghth * 11);
                int widt = 0; int h = 0;
                for (int w = 0; w < Fpstimetable.Sheets[0].ColumnCount; w++)
                    widt = widt + Fpstimetable.Sheets[0].Columns[w].Width;
                if (widt > 900)
                {
                    h = 16;
                    Fpstimetable.Width = 916;
                    Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                }
                else
                {
                    Fpstimetable.Width = widt;
                    Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                }
                Fpstimetable.Height = h + (Fpstimetable.Rows.Default.Height * Fpstimetable.Sheets[0].RowCount) + 70;
            }
            else
            {
                Fpstimetable.Sheets[0].ColumnCount = 0;
                Fpstimetable.Sheets[0].RowCount = 0;
                Fpstimetable.Columns.Default.Width = 150;
                Fpstimetable.Sheets[0].ColumnCount = 4;
                Fpstimetable.Sheets[0].RowCount = 1;
                Fpstimetable.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpstimetable.ColumnHeader.Visible = false;
                Fpstimetable.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpstimetable.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpstimetable.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpstimetable.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpstimetable.Height = 40;
                Fpstimetable.Width = 600;
            }
            rexam.Close();
            con1.Close();
        }
        rroll.Close();
        con.Close();
        Fpstimetable.SaveChanges();
    }

    public void apercentage()
    {
        cmd.CommandText = "Select p.No_of_hrs_per_day as 'PER DAY',p.no_of_hrs_I_half_day as 'I_HALF_DAY' ,p.no_of_hrs_II_half_day as 'II_HALF_DAY',p.min_pres_I_half_day as 'MIN PREE I DAY',p.min_pres_II_half_day as 'MIN PREE II DAY' from PeriodAttndSchedule p where degree_code=" + adegree + " and semester=" + asem;
        cmd.Connection = ncon1;
        ncon1.Close();
        ncon1.Open();
        ds.Clear();
        ds.Dispose();
        ds.Reset();
        SqlDataAdapter da = new SqlDataAdapter(cmd);
        da.Fill(ds);
        ncon1.Close();
        int count = ds.Tables[0].Rows.Count;
        if (ds.Tables[0].Rows.Count != 0)
        {
            //perdayhrs = int.Parse((ds.Tables[0].Rows[0]["PER DAY"].ToString()));
            int.TryParse(Convert.ToString(ds.Tables[0].Rows[0]["PER DAY"]), out perdayhrs);
            {
                hours_pres = 0;
                hours_leave = 0;
                hours_od = 0;
                hours_absent = 0;
                hours_present = 0;
                hours_total = 0;
                hours_conduct = 0;
                persentmonthcal();  //added by Mullai
            }
        }
    }

    public void cal_date(double cumd)
    {
        int calm1 = fyy * 12 + 1;
        int calm2 = fyy * 12 + 2;
        int calm3 = fyy * 12 + 3;
        int calm4 = fyy * 12 + 4;
        int calm5 = fyy * 12 + 5;
        int calm6 = fyy * 12 + 6;
        int calm7 = fyy * 12 + 7;
        int calm8 = fyy * 12 + 8;
        int calm9 = fyy * 12 + 9;
        int calm10 = fyy * 12 + 10;
        int calm11 = fyy * 12 + 11;
        int calm12 = fyy * 12 + 12;
        if (calm1 == cumd || calm3 == cumd || calm5 == cumd || calm7 == cumd || calm8 == cumd || calm10 == cumd || calm12 == cumd)
        {
            daycount = 31;
        }
        if (calm4 == cumd || calm6 == cumd || calm9 == cumd || calm11 == cumd)
        {
            daycount = 30;
        }
        if (mm == 1)
        {
            if (calm2 == cumd)
            {
                int lyear = 2000;
                int ly;
                if (lyear <= fyy)
                {
                    ly = lyear - fyy;
                }
                else
                {
                    ly = fyy - lyear;
                }
                if (ly == 4)
                {
                    daycount = 29;
                }
                else
                {
                    daycount = 28;
                }
            }
        }
    }

    public void from_today()
    {
        hat.Clear();
        hat.Add("f_date", int.Parse(fcal.ToString()));
        hat.Add("t_date", int.Parse(tcal.ToString()));
        hat.Add("roll_no", aroll);
        ds1 = d2.select_method("ATT_REPORTS_DETAILS", hat, "sp");
        dat = fd;
        if (ds1.Tables[0].Rows.Count != 0)
            roll_no = aroll;
    }

    public void persentmonthcal()
    {
        cmd.CommandText = "Select day(start_date),month(start_date),year(start_date),day(end_date),month(end_date),year(end_date) from seminfo where degree_code='" + adegree + "' and semester='" + asem + "' and batch_year=" + abatch;
        cmd.Connection = ncon1;
        ncon1.Open();
        SqlDataReader rbsed = cmd.ExecuteReader();
        if (rbsed.Read())
        {
            fd = int.Parse((rbsed.GetValue(0).ToString()));
            fm = int.Parse((rbsed.GetValue(1).ToString()));
            fyy = int.Parse((rbsed.GetValue(2).ToString()));
            td = int.Parse((rbsed.GetValue(3).ToString()));
            tm = int.Parse((rbsed.GetValue(4).ToString()));
            tyy = int.Parse((rbsed.GetValue(5).ToString()));
        }
        if (rbsed.HasRows)
        {
            find_values(roll_no, fm + "/" + fd + "/" + fyy, tm + "/" + td + "/" + tyy, adegree, asem);
        }
    }

    public string Attmark(string Attstr_mark)
    {
        if (Attstr_mark == "-1")
        {
            Att_mark = "AAA";
        }
        else if (Attstr_mark == "-2")
        {
            Att_mark = "EL";
        }
        else if (Attstr_mark == "-3")
        {
            Att_mark = "EOD";
        }
        if (Attstr_mark == "-4")
        {
            Att_mark = "ML";
        }
        else if (Attstr_mark == "-5")
        {
            Att_mark = "SOD";
        }
        else if (Attstr_mark == "-6")
        {
            Att_mark = "NSS";
        }
        if (Attstr_mark == "-7")
        {
            Att_mark = "NJ";
        }
        else if (Attstr_mark == "-8")
        {
            Att_mark = "S";
        }
        else if (Attstr_mark == "-9")
        {
            Att_mark = "L";
        }
        else if (Attstr_mark == "-10")
        {
            Att_mark = "NCC";
        }
        else if (Attstr_mark == "-11")
        {
            Att_mark = "HS";
        }
        else if (Attstr_mark == "-12")
        {
            Att_mark = "PP";
        }
        else if (Attstr_mark == "-13")
        {
            Att_mark = "SYOD";
        }
        else if (Attstr_mark == "-14")
        {
            Att_mark = "COD";
        }
        else if (Attstr_mark == "-15")
        {
            Att_mark = "OOD";
        }
        else if (Attstr_mark == "-16")
        {
            Att_mark = "OD";
        }
        return Att_mark;
    }

    #region existing commented by prabha on feb 10 2018
    //protected void btnmarkgo_Click(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        btnprintmaster.Visible = true;
    //        lblrptname.Visible = true;
    //        txtexcelname.Visible = true;
    //        btnxl.Visible = true;
    //        initmarks();
    //        int column = 0;
    //        int spanrow = 0, spancolumn = 0;
    //        Fpsmarks.Visible = true;
    //        Fpsmarks.Sheets[0].PageSize = 200;
    //        Fpsmarks.Rows.Default.Height = 20;
    //        Fpsmarks.ColumnHeader.Visible = false;
    //        Fpsmarks.RowHeader.Visible = false;
    //        Fpsmarks.Sheets[0].ColumnCount = 30; //25;
    //        Fpsattendence.Sheets[0].ColumnCount = 0;
    //        Fpsattendence.Sheets[0].ColumnCount = 9;
    //        Fpsmarks.Sheets[0].RowCount = 0;
    //        Fpsmarks.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
    //        Fpsmarks.ActiveSheetView.Rows.Default.Font.Name = "Book Antiqua";
    //        Fpsmarks.ActiveSheetView.Rows.Default.Font.Size = FontUnit.Medium;
    //        Fpsmarks.ActiveSheetView.Rows.Default.HorizontalAlign = HorizontalAlign.Center;
    //        Fpsmarks.ActiveSheetView.Rows.Default.VerticalAlign = VerticalAlign.Middle;
    //        Fpsmarks.ActiveSheetView.Columns.Default.Font.Name = "Book Antiqua";
    //        Fpsmarks.ActiveSheetView.Columns.Default.Font.Size = FontUnit.Medium;
    //        Fpsmarks.ActiveSheetView.Columns.Default.HorizontalAlign = HorizontalAlign.Center;
    //        Fpsmarks.ActiveSheetView.Columns.Default.VerticalAlign = VerticalAlign.Middle;
    //        Fpsmarks.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //        Fpsmarks.Sheets[0].DefaultStyle.HorizontalAlign = HorizontalAlign.Center;
    //        Fpsmarks.Sheets[0].DefaultStyle.VerticalAlign = VerticalAlign.Middle;
    //        Fpsmarks.Columns.Default.Width = 70;
    //        Fpsmarks.Columns[1].Width = 270;
    //        Fpsmarks.Columns[1].HorizontalAlign = HorizontalAlign.Left;
    //        Fpsmarks.CommandBar.Visible = false;
    //        if (!isSchoolOrCollege)
    //        {
    //            Boolean day_flag_str = false;
    //            Boolean hr_flag_str = false;
    //            string Master = string.Empty;
    //            Master = "select * from Master_Settings where usercode in(select user_code from usermaster where user_id='admin') and (settings='Day Wise' or settings='Hour Wise')";
    //            readcon.Close();
    //            readcon.Open();
    //            SqlDataReader mtrdr;
    //            SqlCommand mtcmd = new SqlCommand(Master, readcon);
    //            mtrdr = mtcmd.ExecuteReader();
    //            if (mtrdr.HasRows)
    //            {
    //                while (mtrdr.Read())
    //                {
    //                    if (mtrdr["settings"].ToString() == "Day Wise" && mtrdr["value"].ToString() == "1")
    //                    {
    //                        day_flag_str = true;
    //                    }
    //                    if (mtrdr["settings"].ToString() == "Hour Wise" && mtrdr["value"].ToString() == "1")
    //                    {
    //                        hr_flag_str = true;
    //                    }
    //                }
    //            }
    //            ArrayList criteria = new ArrayList();
    //            string strsec = "", syear = "-1", ob_mark = "-1", sql = string.Empty;
    //            cmd.CommandText = "Select degree_code,batch_year,current_semester,Roll_No,isnull(sections,'') as Sections from registration where app_no='" + appno + "'";
    //            cmd.Connection = con;
    //            con.Open();
    //            SqlDataReader rroll = cmd.ExecuteReader();
    //            if (rroll.Read())
    //            {
    //                asec = string.Empty;
    //                csem = Convert.ToString(rroll["current_semester"]).Trim();
    //                aroll = Convert.ToString(rroll["roll_no"]).Trim();
    //                adegree = Convert.ToString(rroll["degree_code"]).Trim();
    //                abatch = Convert.ToString(rroll["batch_year"]).Trim();
    //                strsec = Convert.ToString(rroll["Sections"]).Trim();
    //                byr = abatch;
    //                if (strsec != "")
    //                {
    //                    strsec = " and exam_type.sections='" + strsec + "'";
    //                    asec = Convert.ToString(rroll["Sections"]);
    //                }
    //                {
    //                    cmd.CommandText = "select isnull(syllabus_year,-1) Syllabus_Year from syllabus_master where degree_code=" + adegree + " and semester =" + csem + " and batch_year='" + abatch + "'";
    //                    cmd.Connection = con1;
    //                    con1.Open();
    //                    SqlDataReader rexam = cmd.ExecuteReader();
    //                    if (rexam.Read())
    //                        syear = rexam.GetValue(0).ToString();
    //                    rexam.Close();
    //                    con1.Close();
    //                }
    //                if (syear == "-1")
    //                {
    //                }
    //                int sem = Convert.ToInt32(Convert.ToString(rroll["current_semester"]).Trim());
    //                int span_row = 0;
    //                string degree_code = Convert.ToString(rroll["degree_code"]).Trim();
    //                string batch_year = abatch;
    //                roll_no = aroll;
    //                //added by annyutha 18th sep 2014//
    //                for (int i = 0; i < vehiclechecklist.Items.Count; i++)
    //                {
    //                    if (vehiclechecklist.Items[i].Selected == true)
    //                    {
    //                        asem = Convert.ToInt32(i + 1).ToString();
    //                        //*end*/
    //                        double cp = 0, gp = 0, gpa = 0, cgpa = 0;
    //                        double mark = 0, total = 0, percentage = 0;
    //                        int sub = 0;
    //                        con2_subj.Close();
    //                        con2_subj.Open();
    //                        SqlCommand cmd_new = new SqlCommand();
    //                        cmd_new.CommandText = "select distinct subject_name,subject.subject_no,subject_code from subject,sub_sem,syllabus_master,subjectchooser,exam_type where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code  and subject.subject_no =subjectchooser.subject_no and syllabus_master.semester='" + asem.ToString() + "' and syllabus_master.degree_code='" + degree_code.ToString() + "' and roll_no = '" + roll_no + "' order by subject.subject_no"; // " and syllabus_year=" +syear+ 
    //                        cmd_new.Connection = con2_subj;
    //                        SqlDataReader rsub = cmd_new.ExecuteReader();

    //                        if (rsub.HasRows)
    //                        {
    //                            cp = 0;
    //                            gp = 0;
    //                            gpa = 0;
    //                            cgpa = 0;
    //                            Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
    //                            span_row = Fpsmarks.Sheets[0].RowCount - 1;
    //                            Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 2;
    //                            Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].BackColor = Color.LightCyan;
    //                            Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].BackColor = Color.LightCyan;
    //                            Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Size = FontUnit.Medium;
    //                            Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
    //                            Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Bold = true;
    //                            Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
    //                            Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Name = "Book Antiqua";
    //                            Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
    //                            Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, 0, 2, 1);
    //                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, 0].Text = "S.No";
    //                            Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, 1, 2, 1);
    //                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, 1].Text = "Subject";
    //                            spanrow = Fpsmarks.Sheets[0].RowCount - 3;
    //                            int col = 2;
    //                            //cmd.CommandText = "select c.criteria,c.criteria_no  from CriteriaForInternal as c where c.syll_code in(select syll_code from subject where subject_no in(select distinct subject.subject_no from subject,sub_sem,syllabus_master,subjectchooser,exam_type where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=" + degree_code.ToString() + " and syllabus_master.semester=" + asem.ToString() + " and syllabus_master.batch_year=" + batch_year.ToString() + " and subject.subject_no =subjectchooser.subject_no " + strsec + " )) and c.criteria_no is not null order by c.criteria";//" and syllabus_year=" + syear +
    //                            cmd.CommandText = "select c.criteria,c.criteria_no  from CriteriaForInternal as c where c.syll_code in(select syll_code from subject where subject_no in(select distinct subject.subject_no from subject,sub_sem,syllabus_master,exam_type where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code='" + degree_code.ToString() + "' and syllabus_master.semester='" + asem.ToString() + "' and syllabus_master.batch_year='" + batch_year.ToString() + "'" + strsec + " )) and c.criteria_no is not null order by c.criteria";//" and syllabus_year=" + syear +
    //                            cmd.Connection = con3;
    //                            con3.Open();
    //                            SqlDataReader rheader = cmd.ExecuteReader();
    //                            criteria.Clear();
    //                            if (rheader.HasRows)
    //                                while (rheader.Read())
    //                                {
    //                                    try//barath 26.01.18
    //                                    {
    //                                        Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col, 2, 1);
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Text = rheader.GetValue(0).ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Tag = rheader.GetValue(1).ToString();
    //                                        criteria.Add(rheader.GetValue(1).ToString());
    //                                        col = col + 1;
    //                                    }
    //                                    catch
    //                                    { }
    //                                }
    //                            con3.Close();
    //                            rheader.Close();
    //                            if (col > column)
    //                                column = col;
    //                            spancolumn = col;
    //                            int row = Fpsmarks.Sheets[0].RowCount - 1;
    //                            string excode = string.Empty; int temp = 0;
    //                            cmd.CommandText = "Select top 1 isnull(Exam_Code,-1),exam_month,exam_year from Exam_Details where Degree_Code = '" + degree_code.ToString() + "' and Current_Semester = '" + asem + "' and Batch_Year = '" + batch_year.ToString() + "' order by exam_year desc";
    //                            cmd.Connection = con3;
    //                            con3.Open();
    //                            SqlDataReader rex = cmd.ExecuteReader();
    //                            byte gradeFlagNew = 3;
    //                            if (rex.Read())
    //                            {
    //                                excode = rex.GetValue(0).ToString();
    //                                cmd.CommandText = "Select grade_flag from grademaster where degree_code='" + degree_code.ToString() + "' and exam_month= '" + rex.GetValue(1).ToString() + "' and exam_year='" + rex.GetValue(2).ToString() + "' and batch_year='" + batch_year.ToString() + "'";
    //                                cmd.Connection = con4;
    //                                con4.Open();
    //                                SqlDataReader rgrade = cmd.ExecuteReader();
    //                                if (rgrade.Read())
    //                                {
    //                                    if (rgrade.GetValue(0).ToString() == "3")
    //                                    {
    //                                        gradeFlagNew = 3;
    //                                        //=============================Modified by gowtham ======================================
    //                                        sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
    //                                        sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
    //                                        sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.attempts as attempt  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
    //                                        //sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  and result='pass' ";
    //                                        sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no";// and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
    //                                        temp = 3;
    //                                    }
    //                                    else if (rgrade.GetValue(0).ToString() == "2")
    //                                    {
    //                                        gradeFlagNew = 2;
    //                                        sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
    //                                        sql = sql + "case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then maxtotal else null end,";
    //                                        sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.grade,me.attempts as attempt,me.result from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
    //                                        sql = sql + "and result='pass'";
    //                                        sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no";// and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
    //                                        temp = 2;
    //                                    }
    //                                    else if (rgrade.GetValue(0).ToString() == "1")
    //                                    {
    //                                        gradeFlagNew = 1;
    //                                        sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
    //                                        sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
    //                                        sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.grade,me.attempts as attempt  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
    //                                        //sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  and result='pass' ";
    //                                        sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no ";//and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
    //                                        temp = 1;
    //                                    }
    //                                }
    //                                else
    //                                {
    //                                    sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
    //                                    sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
    //                                    sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.attempts as attempt  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
    //                                    //sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  and result='pass' ";
    //                                    sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no ";//and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
    //                                }
    //                                //=======================================END================================================
    //                                rgrade.Close();
    //                                con4.Close();
    //                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col, 1, 3);
    //                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Text = "University Exams";
    //                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = "Attempts";
    //                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = "INT";

    //                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = "* Marks";
    //                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col + 3, 2, 1);
    //                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col + 3].Text = "Year of Passing";
    //                                spancolumn = col + 4;
    //                            }
    //                            rex.Close();
    //                            con3.Close();
    //                            if (excode != "" || col > 2)
    //                            {
    //                                while (rsub.Read())
    //                                {
    //                                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
    //                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = (sub + 1).ToString();
    //                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text = rsub.GetValue(0).ToString();
    //                                    for (int loop_col = 2; loop_col < col; loop_col++)
    //                                    {
    //                                        string exam_code = GetFunction("select exam_code from exam_type where  criteria_no='" + criteria[loop_col - 2] + "' and subject_no = '" + rsub.GetValue(1).ToString() + "'" + strsec + " and batch_year='" + batch_year.ToString() + "'");
    //                                        if (exam_code != "")
    //                                        {
    //                                            cmd.CommandText = "select isnull(marks_obtained,'') marks_obtained from result,registration where registration.roll_no=result.roll_no and delflag=0 and cc=0 and exam_flag<>'DEBAR' and result.roll_no='" + roll_no.ToString() + "' and result.exam_code='" + exam_code + "'";
    //                                            cmd.Connection = con3;
    //                                            con3.Open();
    //                                            SqlDataReader rom = cmd.ExecuteReader();
    //                                            if (rom.Read())
    //                                                ob_mark = Convert.ToString(rom.GetValue(0)).Trim();
    //                                            rom.Close();
    //                                            con3.Close();
    //                                            double obm = 0;
    //                                            if (double.TryParse(ob_mark, out obm))
    //                                            {
    //                                                if (obm < 0)
    //                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, loop_col].Text = Attmark(ob_mark);
    //                                                else
    //                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, loop_col].Text = ob_mark;
    //                                            }
    //                                            else if (ob_mark == "")
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, loop_col].Text = " - ";
    //                                        }
    //                                    }
    //                                    if (excode != "")
    //                                    {
    //                                        //resultType = "pass";
    //                                        cmd.CommandText = sql + " and subject.subject_no='" + rsub.GetValue(1).ToString() + "'";
    //                                        cmd.Connection = con4;
    //                                        con4.Open();
    //                                        SqlDataReader rmark = cmd.ExecuteReader();
    //                                        if (rmark.Read())
    //                                        {

    //                                            if (temp == 3)
    //                                            {
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = rmark["attempt"].ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = (gradeFlagNew == 2) ? "" : rmark.GetValue(7).ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark.GetValue(10).ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();
    //                                                if (Double.TryParse(rmark.GetValue(10).ToString(), out mark))
    //                                                    total = total + mark;
    //                                            }
    //                                            else if (temp == 2)
    //                                            {

    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = rmark["attempt"].ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = (gradeFlagNew == 2) ? "" : rmark.GetValue(7).ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark["grade"].ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();

    //                                            }
    //                                            else if (temp == 1)
    //                                            {
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = rmark["attempt"].ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = (gradeFlagNew == 2) ? "" : rmark.GetValue(7).ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark["grade"].ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();
    //                                            }
    //                                            else
    //                                            {
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = rmark["attempt"].ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = rmark.GetValue(7).ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark.GetValue(10).ToString();
    //                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();
    //                                                if (Double.TryParse(rmark.GetValue(10).ToString(), out mark))
    //                                                    total = total + mark;
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = "U";
    //                                        }
    //                                        rmark.Close();
    //                                        con4.Close();
    //                                    }
    //                                    sub = sub + 1;
    //                                }
    //                                if (excode != "")
    //                                {
    //                                    if (temp == 1 || temp == 2)
    //                                    {
    //                                        cmd.CommandText = "Select cp,(cp*(select distinct top 1 g.credit_points from grade_master as g,Mark_Entry as m where m.subject_no=subject.subject_no and m.grade=g.mark_grade and m.roll_no='" + roll_no.ToString() + "' and g.degree_code='" + degree_code.ToString() + "' and m.exam_code='" + excode + "' and g.batch_year='" + batch_year.ToString() + "' and g.college_code='" + Session["college_code"].ToString() + "')) as gp from  Mark_Entry as m,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code  and m.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + excode + "' and roll_no='" + roll_no.ToString() + "' and attempts='1' and result='pass'";
    //                                        cmd.Connection = csql;
    //                                        csql.Open();
    //                                        SqlDataReader creditp = cmd.ExecuteReader();
    //                                        if (creditp.HasRows)
    //                                        {
    //                                            while (creditp.Read())
    //                                            {
    //                                                double c = 0, g = 0;
    //                                                if (double.TryParse(creditp["cp"].ToString(), out c))
    //                                                    cp = cp + c;
    //                                                if (double.TryParse(creditp["gp"].ToString(), out g))
    //                                                    gp = gp + g;
    //                                            }
    //                                            if (cp > 0 && gp > 0)
    //                                                gpa = gp / cp;
    //                                        }
    //                                        csql.Close(); creditp.Close();
    //                                    }
    //                                    else
    //                                    {
    //                                        percentage = (total > 0 && sub > 0) ? total / sub : 0;
    //                                    }
    //                                }
    //                                if (temp == 1 || temp == 2)
    //                                {
    //                                    //cmd.CommandText = "Select cp,(cp*(select distinct top 1 g.credit_points from grade_master as g,Mark_Entry as m where m.subject_no=subject.subject_no and m.grade=g.mark_grade  and m.result='pass' and  m.roll_no='" + roll_no.ToString() + "' and g.degree_code='" + degree_code.ToString() + "'  and g.batch_year='" + batch_year.ToString() + "' and g.college_code='" + Session["college_code"].ToString() + "')) as gp from  Mark_Entry as m,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code  and m.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(Select distinct exam_code from Exam_Details where Degree_Code ='" + degree_code.ToString() + "' and Current_Semester<='" + asem.ToString() + "' and Batch_Year = '" + batch_year.ToString() + "') and roll_no='" + roll_no.ToString() + "' and result='pass'";
    //                                    //cmd.Connection = csql;
    //                                    //csql.Open();
    //                                    //SqlDataReader creditg = cmd.ExecuteReader();
    //                                    //if (creditg.HasRows)
    //                                    //{
    //                                    //    while (creditg.Read())
    //                                    //    {
    //                                    //        double c = 0, g = 0;
    //                                    //        if (double.TryParse(creditg["cp"].ToString(), out c))
    //                                    //            cp = cp + c;
    //                                    //        if (double.TryParse(creditg["gp"].ToString(), out g))
    //                                    //            gp = gp + g;
    //                                    //    }
    //                                    //    cgpa = (gp > 0 && cp > 0) ? gp / cp : 0;
    //                                    //}
    //                                    //csql.Close(); creditg.Close();

    //                                    cgpa = Convert.ToDouble(d2.Calculete_CGPA(roll_no, asem, degree_code, batch_year, "", Convert.ToString(Session["collegecode"])));

    //                                }
    //                                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Left;
    //                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);
    //                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 2, 1, 2);
    //                                if (temp == 0 || temp == 3)
    //                                {
    //                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Percentage :";
    //                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = Math.Round(percentage, 2, MidpointRounding.AwayFromZero).ToString();
    //                                }
    //                                else
    //                                {
    //                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "GPA        : " + Math.Round(gpa, 2, MidpointRounding.AwayFromZero).ToString();
    //                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = "CGPA       : " + Math.Round(cgpa, 2, MidpointRounding.AwayFromZero).ToString();
    //                                }
    //                                apercentage();
    //                                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Size = FontUnit.Medium;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].HorizontalAlign = HorizontalAlign.Left;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Left;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Name = "Book Antiqua";
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Bold = true;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
    //                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);//dum_tage_date
    //                                dum_tage_date = (per_workingdays > 0) ? ((pre_present_date / per_workingdays) * 100) : 0;
    //                                if (dum_tage_date > 100)
    //                                {
    //                                    dum_tage_date = 100;
    //                                }
    //                                else
    //                                {
    //                                    dum_tage_date = Math.Round(dum_tage_date, 2, MidpointRounding.AwayFromZero);
    //                                }
    //                                if (day_flag_str == true)
    //                                {
    //                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Daywise Attendance Percentage :" + dum_tage_date;//+ String.Format("{0:0,0.00}", float.Parse(hours_pres.ToString())); ;
    //                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Visible = true;
    //                                }
    //                                else
    //                                {
    //                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = " ";
    //                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Visible = false;
    //                                }
    //                                //----------------------------
    //                                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Size = FontUnit.Medium;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].HorizontalAlign = HorizontalAlign.Left;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Left;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Name = "Book Antiqua";
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Bold = true;
    //                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
    //                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);//dum_tage_date
    //                                per_con_hrs = (per_workingdays1) + tot_conduct_hr_spl_fals;
    //                                per_tage_hrs = (per_con_hrs > 0) ? (((per_per_hrs + tot_per_hrs_spl_fals) / per_con_hrs) * 100) : 0;
    //                                if (per_tage_hrs > 100)
    //                                {
    //                                    per_tage_hrs = 100;
    //                                }
    //                                else
    //                                {
    //                                    per_tage_hrs = Math.Round(per_tage_hrs, 2, MidpointRounding.AwayFromZero);
    //                                }
    //                                if (hr_flag_str == true)
    //                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Hourwise Attendance Percentage :" + per_tage_hrs;//+ String.Format("{0:0,0.00}", float.Parse(hours_pres.ToString())); ;
    //                                else
    //                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = " ";
    //                                //----------------------------------------------
    //                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 2, 1, 2);
    //                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = "Remarks";
    //                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);
    //                                Fpsmarks.Sheets[0].SpanModel.Add(span_row, 0, 1, spancolumn);
    //                                //modified by annyutha//
    //                                Fpsmarks.Sheets[0].Cells[span_row, 0].Text = lbl_semOrTerm.Text + " " + (asem).ToString();
    //                                //end//
    //                                Fpsmarks.Sheets[0].Cells[span_row, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                Fpsmarks.Sheets[0].Cells[span_row, 0].Font.Size = FontUnit.XLarge;
    //                                Fpsmarks.Sheets[0].Cells[span_row, 0].Font.Bold = true;
    //                                Fpsmarks.Sheets[0].Cells[span_row, 0].ForeColor = Color.Blue;
    //                                Fpsmarks.Sheets[0].Cells[span_row, 0].Font.Name = "Book Antiqua";
    //                                Fpsmarks.Sheets[0].Cells[span_row, 0].BackColor = Color.LightGray;
    //                                Fpsmarks.Sheets[0].SpanModel.Add(span_row, spancolumn, sub + 5, Fpsmarks.Sheets[0].ColumnCount - spancolumn);
    //                                Fpsmarks.Sheets[0].Cells[span_row, spancolumn].BackColor = Color.White;
    //                            }
    //                            else
    //                            {
    //                                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount - 3;
    //                            }
    //                        }
    //                        con2.Close();
    //                        rsub.Close();
    //                    }
    //                }
    //            }
    //            rroll.Close();
    //            con1.Close();
    //            if (Fpsmarks.Sheets[0].RowCount > 0)
    //            {
    //                for (int j = column + 4; j < Fpsmarks.Sheets[0].ColumnCount; j++)
    //                {
    //                    Fpsmarks.Sheets[0].Columns[j].Visible = false;
    //                }
    //                int widt = 0; int heights = 0;
    //                widt = (70 * (column + 4)) + 200;
    //                if (widt > 900)
    //                {
    //                    heights = 16;
    //                    widt = 900;
    //                    Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
    //                }
    //                else
    //                {
    //                    Fpsmarks.Width = widt;
    //                    Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
    //                }
    //                heights = heights + (Fpsmarks.Rows.Default.Height * Fpsmarks.Sheets[0].RowCount) + 65;
    //                if (heights >= 500)
    //                {
    //                    Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
    //                    Fpsmarks.Height = 500;
    //                    Fpsmarks.Width = widt + 16;
    //                }
    //                else if (heights < 500)
    //                {
    //                    Fpsmarks.Height = heights;
    //                    Fpsmarks.Width = widt;
    //                }
    //            }
    //            else
    //            {
    //                Fpsmarks.Sheets[0].ColumnCount = 0;
    //                Fpsmarks.Sheets[0].ColumnCount = 4;
    //                Fpsmarks.Sheets[0].RowCount = 1;
    //                Fpsmarks.ColumnHeader.Visible = false;
    //                Fpsmarks.Sheets[0].SpanModel.Add(0, 0, 1, 4);
    //                Fpsmarks.Width = 600;
    //                Fpsmarks.Height = 45;
    //                Fpsmarks.Sheets[0].Cells[0, 0].Text = "No information Available";
    //                Fpsmarks.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
    //                Fpsmarks.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
    //                Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
    //                Fpsmarks.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
    //                Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
    //                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
    //            }
    //            Fpsmarks.TitleInfo.Text = "Marks";
    //            Fpsmarks.TitleInfo.HorizontalAlign = HorizontalAlign.Center;
    //            Fpsmarks.SaveChanges();
    //        }
    //        else
    //        {
    //            SchoolFunction();
    //        }

    //    }
    //    catch
    //    {
    //    }
    //} 
    #endregion

    DataTable dttemp = new DataTable();
    DataSet dstemp = new DataSet();
    InsproDirectAccess idirAcc = new InsproDirectAccess();

    protected void btnmarkgo_Click(object sender, EventArgs e)
    {
        try
        {
            btnprintmaster.Visible = true;
            lblrptname.Visible = true;
            txtexcelname.Visible = true;
            btnxl.Visible = true;
            initmarks();
            int column = 0;
            int spanrow = 0, spancolumn = 0;
            Fpsmarks.Visible = true;
            Fpsmarks.Sheets[0].PageSize = 200;
            Fpsmarks.Rows.Default.Height = 20;
            Fpsmarks.ColumnHeader.Visible = false;
            Fpsmarks.RowHeader.Visible = false;
            Fpsmarks.Sheets[0].ColumnCount = 40; //25;
            Fpsattendence.Sheets[0].ColumnCount = 0;
            Fpsattendence.Sheets[0].ColumnCount = 9;
            Fpsmarks.Sheets[0].RowCount = 0;
            Fpsmarks.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
            Fpsmarks.ActiveSheetView.Rows.Default.Font.Name = "Book Antiqua";
            Fpsmarks.ActiveSheetView.Rows.Default.Font.Size = FontUnit.Medium;
            Fpsmarks.ActiveSheetView.Rows.Default.HorizontalAlign = HorizontalAlign.Center;
            Fpsmarks.ActiveSheetView.Rows.Default.VerticalAlign = VerticalAlign.Middle;
            Fpsmarks.ActiveSheetView.Columns.Default.Font.Name = "Book Antiqua";
            Fpsmarks.ActiveSheetView.Columns.Default.Font.Size = FontUnit.Medium;
            Fpsmarks.ActiveSheetView.Columns.Default.HorizontalAlign = HorizontalAlign.Center;
            Fpsmarks.ActiveSheetView.Columns.Default.VerticalAlign = VerticalAlign.Middle;
            Fpsmarks.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
            Fpsmarks.Sheets[0].DefaultStyle.HorizontalAlign = HorizontalAlign.Center;
            Fpsmarks.Sheets[0].DefaultStyle.VerticalAlign = VerticalAlign.Middle;
            Fpsmarks.Columns.Default.Width = 70;
            Fpsmarks.Columns[1].Width = 270;
            Fpsmarks.Columns[1].HorizontalAlign = HorizontalAlign.Left;
            Fpsmarks.CommandBar.Visible = false;
            Boolean day_flag_str = false;
            Boolean hr_flag_str = false;
            string Master = string.Empty;
            string val1 = string.Empty;
            Master = "select * from Master_Settings where usercode in(select user_code from usermaster where user_id='admin') and (settings='Day Wise' or settings='Hour Wise')";
            readcon.Close();
            readcon.Open();
            SqlDataReader mtrdr;
            SqlCommand mtcmd = new SqlCommand(Master, readcon);
            mtrdr = mtcmd.ExecuteReader();
            if (mtrdr.HasRows)
            {
                while (mtrdr.Read())
                {
                    if (mtrdr["settings"].ToString() == "Day Wise" && mtrdr["value"].ToString() == "1")
                    {
                        day_flag_str = true;
                    }
                    if (mtrdr["settings"].ToString() == "Hour Wise" && mtrdr["value"].ToString() == "1")
                    {
                        hr_flag_str = true;
                    }
                }
            }
            ArrayList criteria = new ArrayList();
            string strsec = "", syear = "-1", ob_mark = "-1", sql = string.Empty;
            cmd.CommandText = "Select degree_code,batch_year,current_semester,Roll_No,isnull(sections,'') as Sections from registration where app_no='" + appno + "'";
            cmd.Connection = con;
            con.Open();
            SqlDataReader rroll = cmd.ExecuteReader();
            string gradesett = "select * from gradesettings where college_code in(Select college_code from registration where app_no='" + appno + "')";


            DataSet gradesettings = d2.select_method_wo_parameter(gradesett, "Text");
            if (rroll.Read())
            {
                asec = string.Empty;
                csem = Convert.ToString(rroll["current_semester"]).Trim();
                aroll = Convert.ToString(rroll["roll_no"]).Trim();
                adegree = Convert.ToString(rroll["degree_code"]).Trim();
                abatch = Convert.ToString(rroll["batch_year"]).Trim();
                strsec = Convert.ToString(rroll["Sections"]).Trim();
                byr = abatch;
                if (strsec != "")
                {
                    strsec = " and exam_type.sections='" + strsec + "'";
                    asec = Convert.ToString(rroll["Sections"]);
                }
                {
                    cmd.CommandText = "select isnull(syllabus_year,-1) Syllabus_Year from syllabus_master where degree_code=" + adegree + " and semester =" + csem + " and batch_year='" + abatch + "'";
                    cmd.Connection = con1;
                    con1.Open();
                    SqlDataReader rexam = cmd.ExecuteReader();
                    if (rexam.Read())
                        syear = rexam.GetValue(0).ToString();
                    rexam.Close();
                    con1.Close();
                }
                if (syear == "-1")
                {
                }
                int sem = Convert.ToInt32(Convert.ToString(rroll["current_semester"]).Trim());
                int span_row = 0;
                string degree_code = Convert.ToString(rroll["degree_code"]).Trim();
                string batch_year = abatch;
                roll_no = aroll;
                string degreecodeexisting = degree_code;

                bool status = feeStatusSettings();

                //added by annyutha 18th sep 2014//
                for (int i = 0; i < vehiclechecklist.Items.Count; i++)
                {

                    if (vehiclechecklist.Items[i].Selected == true)
                    {

                        asem = Convert.ToInt32(i + 1).ToString();
                        //*end*/
                        double cp = 0, gp = 0, gpa = 0, cgpa = 0;
                        double mark = 0, total = 0, percentage = 0;
                        int sub = 0;
                        con2_subj.Close();
                        con2_subj.Open();

                        #region modified by prabha on feb 10 2018    //to display the previous mark report even after department transfer

                        string deptflagqry = "select * from StudentRegisterHistory where app_no in (select App_no from registration where roll_no='" + roll_no + "')";
                        dttemp.Clear();
                        dttemp = idirAcc.selectDataTable(deptflagqry);
                        bool dept_TransferFlag = false;
                        bool stufal = false;
                        if (dttemp.Rows.Count > 0)
                        {
                            dept_TransferFlag = true;
                        }
                        SqlCommand cmd_new = new SqlCommand();
                        if (dept_TransferFlag)
                        {
                            foreach (DataRow drrow in dttemp.Rows)
                            {
                                if (Convert.ToString(drrow["degreecode"]) != degree_code.ToString())
                                {
                                    string previousexistqry = "select distinct subject_name,subject.subject_no,subject_code from subject,sub_sem,syllabus_master,subjectchooser where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code  and subject.subject_no =subjectchooser.subject_no and syllabus_master.semester='" + asem.ToString() + "' and syllabus_master.degree_code='" + Convert.ToString(drrow["degreecode"]).Trim() + "' and roll_no = '" + roll_no + "' order by subject.subject_no";
                                    dstemp = idirAcc.selectDataSet(previousexistqry);
                                    if (dstemp.Tables.Count > 0 && dstemp.Tables[0].Rows.Count > 0)
                                    {
                                        cmd_new.CommandText = "select distinct subject_name,subject.subject_no,subject_code from subject,sub_sem,syllabus_master,subjectchooser where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code  and subject.subject_no =subjectchooser.subject_no and syllabus_master.semester='" + asem.ToString() + "' and syllabus_master.degree_code='" + Convert.ToString(drrow["degreecode"]).Trim() + "' and roll_no = '" + roll_no + "' order by subject.subject_no";
                                        degree_code = Convert.ToString(drrow["degreecode"]).Trim();
                                        break;
                                    }
                                    else
                                    {
                                        cmd_new.CommandText = "select distinct subject_name,subject.subject_no,subject_code from subject,sub_sem,syllabus_master,subjectchooser where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code  and subject.subject_no =subjectchooser.subject_no and syllabus_master.semester='" + asem.ToString() + "' and syllabus_master.degree_code='" + degree_code.ToString() + "' and roll_no = '" + roll_no + "' order by subject.subject_no"; // " and syllabus_year=" +syear+ //,exam_type Rajkumar 5/1/2018
                                    }
                                }
                                else
                                {
                                    cmd_new.CommandText = "select distinct subject_name,subject.subject_no,subject_code from subject,sub_sem,syllabus_master,subjectchooser where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code  and subject.subject_no =subjectchooser.subject_no and syllabus_master.semester='" + asem.ToString() + "' and syllabus_master.degree_code='" + degree_code.ToString() + "' and roll_no = '" + roll_no + "' order by subject.subject_no"; // " and syllabus_year=" +syear+ //,exam_type Rajkumar 5/1/2018
                                }
                            }

                        }
                        else
                        {
                            cmd_new.CommandText = "select distinct subject_name,subject.subject_no,subject_code from subject,sub_sem,syllabus_master,subjectchooser where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code  and subject.subject_no =subjectchooser.subject_no and syllabus_master.semester='" + asem.ToString() + "' and syllabus_master.degree_code='" + degree_code.ToString() + "' and roll_no = '" + roll_no + "' order by subject.subject_no"; // " and syllabus_year=" +syear+ //,exam_type Rajkumar 5/1/2018
                        }

                        #endregion

                        cmd_new.Connection = con2_subj;
                        SqlDataReader rsub = cmd_new.ExecuteReader();

                        if (rsub.HasRows)
                        {

                            bool check = false;
                            if (status == true)            //added by Deepali on March 19 2018
                                check = checkFeeStatus(asem);


                            if ((check == true) || (status == false))
                            {

                                cp = 0;
                                gp = 0;
                                gpa = 0;
                                cgpa = 0;
                                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                                span_row = Fpsmarks.Sheets[0].RowCount - 1;
                                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 2;
                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].BackColor = Color.LightCyan;
                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].BackColor = Color.LightCyan;
                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Size = FontUnit.Medium;
                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Bold = true;
                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Name = "Book Antiqua";
                                Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, 0, 2, 1);
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, 0].Text = "S.No";
                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, 1, 2, 1);
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, 1].Text = "Subject";
                                spanrow = Fpsmarks.Sheets[0].RowCount - 3;
                                int col = 2;
                                //cmd.CommandText = "select c.criteria,c.criteria_no  from CriteriaForInternal as c where c.syll_code in(select syll_code from subject where subject_no in(select distinct subject.subject_no from subject,sub_sem,syllabus_master,subjectchooser,exam_type where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=" + degree_code.ToString() + " and syllabus_master.semester=" + asem.ToString() + " and syllabus_master.batch_year=" + batch_year.ToString() + " and subject.subject_no =subjectchooser.subject_no " + strsec + " )) and c.criteria_no is not null order by c.criteria";//" and syllabus_year=" + syear +

                                cmd.CommandText = "select c.criteria,c.criteria_no  from CriteriaForInternal as c where c.syll_code in(select syll_code from subject where subject_no in(select distinct subject.subject_no from subject,sub_sem,syllabus_master,exam_type where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code='" + degree_code.ToString() + "' and syllabus_master.semester='" + asem.ToString() + "' and syllabus_master.batch_year='" + batch_year.ToString() + "'" + strsec + " )) and c.criteria_no is not null order by c.criteria";//" and syllabus_year=" + syear +

                                cmd.Connection = con3;
                                con3.Open();
                                SqlDataReader rheader = cmd.ExecuteReader();
                                criteria.Clear();

                                if (Convert.ToString(ddlExamType.SelectedItem).ToLower() == "cam" || Convert.ToString(ddlExamType.SelectedItem).ToLower() == "all")
                                {
                                    if (rheader.HasRows)
                                        //CAM ENTRY -------------------
                                        while (rheader.Read())
                                        {
                                            try//barath 26.01.18
                                            {
                                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col, 2, 1);
                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Text = rheader.GetValue(0).ToString();
                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Tag = rheader.GetValue(1).ToString();
                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Locked = true;
                                                criteria.Add(rheader.GetValue(1).ToString());
                                                col = col + 1;
                                            }
                                            catch { }
                                        }
                                    //--------------------
                                }
                                con3.Close();
                                rheader.Close();
                                if (col > column)
                                    column = col;
                                spancolumn = col;


                                int row = Fpsmarks.Sheets[0].RowCount - 1;
                                string excode = string.Empty; int temp = 0;

                                cmd.CommandText = "Select top 1 isnull(Exam_Code,-1),exam_month,exam_year from Exam_Details where Degree_Code = '" + degreecodeexisting.ToString() + "' and Current_Semester = '" + asem + "' and Batch_Year = '" + batch_year.ToString() + "' order by exam_year desc";
                                cmd.Connection = con3;
                                con3.Open();
                                SqlDataReader rex = cmd.ExecuteReader();
                                byte gradeFlagNew = 3;

                                //Ext Exam====================
                                if (Convert.ToString(ddlExamType.SelectedItem).ToLower() == "university" || Convert.ToString(ddlExamType.SelectedItem).ToLower() == "all")
                                {
                                    if (rex.Read())
                                    {
                                        excode = rex.GetValue(0).ToString();
                                        cmd.CommandText = "Select grade_flag from grademaster where degree_code='" + degreecodeexisting.ToString() + "' and exam_month= '" + rex.GetValue(1).ToString() + "' and exam_year='" + rex.GetValue(2).ToString() + "' and batch_year='" + batch_year.ToString() + "'";
                                        cmd.Connection = con4;
                                        con4.Open();
                                        SqlDataReader rgrade = cmd.ExecuteReader();
                                        if (rgrade.Read())
                                        {
                                            if (rgrade.GetValue(0).ToString() == "3")
                                            {
                                                gradeFlagNew = 3;
                                                //=============================Modified by gowtham ======================================
                                                sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
                                                sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
                                                sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.attempts as attempt,roll_no,result  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
                                                sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  ";//rajkumar// and result='pass' magesh 27.7.18
                                                sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no";// and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
                                                temp = 3;
                                            }
                                            else if (rgrade.GetValue(0).ToString() == "2")
                                            {
                                                gradeFlagNew = 2;
                                                sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year)+'-'+convert(varchar(3),DateAdd(month,Exam_Month,-1)) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
                                                sql = sql + "case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then maxtotal else null end,";
                                                sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.grade,me.attempts as attempt,roll_no,result  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
                                                // sql = sql + "and result='pass' ";//magesh 27.7.18
                                                sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no";// and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
                                                temp = 2;
                                            }
                                            else if (rgrade.GetValue(0).ToString() == "1")
                                            {
                                                gradeFlagNew = 1;
                                                sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
                                                sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
                                                sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.grade,me.attempts as attempt,roll_no,result  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
                                                //sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  and result='pass' ";
                                                sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no ";//and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
                                                temp = 1;
                                            }
                                        }
                                        else
                                        {
                                            sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
                                            sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
                                            sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.attempts as attempt,roll_no,result  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
                                            sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks   ";//Rajkumar uncommand 8/1/2018 //and result='pass' magesh 27.7.18
                                            sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no ";//and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
                                        }
                                        //=======================================END================================================
                                        rgrade.Close();
                                        con4.Close();
                                        if (gradeFlagNew == 2)
                                        {
                                            Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col, 1, 4);
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Text = "University Exams";
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = "Attempts";
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = "INT";
                                            Fpsmarks.Sheets[0].Columns[col + 1].Visible = false;

                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = "Grade";
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = "Result";
                                            Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col + 4, 2, 1);
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col + 4].Text = "Year of Passing";
                                            spancolumn = col + 5;
                                        }
                                        else
                                        {
                                            Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col, 1, 3);
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Text = "University Exams";
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = "Attempts";
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = "INT";

                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = "* Marks";
                                            Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col + 3, 2, 1);
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col + 3].Text = "Year of Passing";
                                            spancolumn = col + 4;
                                        }
                                    }
                                }
                                //Ext exam====================
                                rex.Close();
                                con3.Close();

                                if (excode != "" || col > 2)
                                {
                                    while (rsub.Read())
                                    {
                                        Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = (sub + 1).ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text = rsub.GetValue(0).ToString();
                                        for (int loop_col = 2; loop_col < col; loop_col++)
                                        {
                                            string examcodeqry = "select exam_code from exam_type where  criteria_no='" + criteria[loop_col - 2] + "' and subject_no = '" + rsub.GetValue(1).ToString() + "'" + strsec + " and batch_year='" + batch_year.ToString() + "'";
                                            string exam_code = GetFunction(examcodeqry);

                                            if (Convert.ToString(ddlExamType.SelectedItem).ToLower() == "cam" || Convert.ToString(ddlExamType.SelectedItem).ToLower() == "all")
                                            {
                                                //CAM entry----------------------
                                                if (exam_code != "")
                                                {
                                                    cmd.CommandText = "select isnull(marks_obtained,'') marks_obtained from result,registration where registration.roll_no=result.roll_no and delflag=0 and cc=0 and exam_flag<>'DEBAR' and result.roll_no='" + roll_no.ToString() + "' and result.exam_code='" + exam_code + "'";
                                                    cmd.Connection = con3;
                                                    con3.Open();
                                                    ob_mark = string.Empty;//added by madhumathi 11.04.2018
                                                    SqlDataReader rom = cmd.ExecuteReader();
                                                    if (rom.Read())
                                                        ob_mark = Convert.ToString(rom.GetValue(0)).Trim();
                                                    rom.Close();
                                                    con3.Close();
                                                    double obm = 0;
                                                    if (double.TryParse(ob_mark, out obm))
                                                    {
                                                        if (obm < 0)
                                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, loop_col].Text = Attmark(ob_mark);
                                                        else
                                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, loop_col].Text = ob_mark;
                                                    }
                                                    else if (ob_mark == "")
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, loop_col].Text = " - ";

                                                }
                                            }
                                            //CAM -----------------------------------
                                        }
                                        if (excode != "")
                                        {
                                            string newSA = sql + " and subject.subject_no='" + rsub.GetValue(1).ToString() + "'";
                                            cmd.CommandText = sql + " and subject.subject_no='" + rsub.GetValue(1).ToString() + "' order by me.exam_code desc ";
                                            cmd.Connection = con4;
                                            con4.Open();
                                            SqlDataReader rmark = cmd.ExecuteReader();
                                            string attempts = string.Empty;
                                            string strSA = string.Empty;
                                            DataSet dsSA = da.select_method_wo_parameter(newSA, "text");
                                            if (dsSA.Tables.Count > 0 && dsSA.Tables[0].Rows.Count > 0)
                                            {
                                                dsSA.Tables[0].DefaultView.RowFilter = " roll_no='" + Convert.ToString(dsSA.Tables[0].Rows[0]["roll_no"]) + "' and subject_no='" + dsSA.Tables[0].Rows[0]["subject_no"] + "'  and result='pass'";
                                                DataView dv1 = dsSA.Tables[0].DefaultView;
                                                if (dv1.Count > 0)
                                                    strSA = Convert.ToString(dv1.Table.Rows[0]["result"]);
                                                else
                                                    strSA = Convert.ToString(dsSA.Tables[0].Rows[0]["result"]);
                                            }

                                            if (strSA.ToLower() == "pass")
                                            {
                                                if (rmark.Read())
                                                {
                                                    string attem = Convert.ToString(rmark["attempt"]);
                                                    if (!string.IsNullOrEmpty(attem))
                                                    {
                                                        if (attem.Trim() == "0")
                                                        {
                                                            attempts = "1";
                                                        }
                                                        else
                                                        {
                                                            attempts = rmark["attempt"].ToString();
                                                        }
                                                    }
                                                    if (temp == 3)
                                                    {
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = attempts;//rajkumar 8/1/2108//rmark["attempt"].ToString()
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = (gradeFlagNew == 2) ? "" : rmark.GetValue(7).ToString();
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark.GetValue(10).ToString();
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();
                                                        if (Double.TryParse(rmark.GetValue(10).ToString(), out mark))
                                                            total = total + mark;
                                                    }
                                                    else if (temp == 2)
                                                    {
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = attempts;
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = rmark.GetValue(6).ToString();

                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark["grade"].ToString();
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark.GetValue(12).ToString();
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 4].Text = rmark["mon_year"].ToString();
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 4].Locked = true;
                                                    }
                                                    else if (temp == 1)
                                                    {
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = attempts;
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = (gradeFlagNew == 2) ? "" : rmark.GetValue(7).ToString();
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark["grade"].ToString();
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();
                                                    }
                                                    else
                                                    {
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = attempts;
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = rmark.GetValue(7).ToString();
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark.GetValue(10).ToString();
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();
                                                        if (Double.TryParse(rmark.GetValue(10).ToString(), out mark))
                                                            total = total + mark;
                                                    }
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Locked = true;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Locked = true;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Locked = true;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Locked = true;
                                                }

                                                else
                                                {
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = "RA";
                                                }
                                            }
                                            //magesh 25.7.18
                                            else
                                            {
                                                stufal = true;
                                                dsSA.Tables[0].DefaultView.RowFilter = " roll_no='" + Convert.ToString(dsSA.Tables[0].Rows[0]["roll_no"]) + "' and subject_no='" + dsSA.Tables[0].Rows[0]["subject_no"] + "'";
                                                DataView dv = dsSA.Tables[0].DefaultView;
                                                dv.Sort = "exam_code desc";
                                                gradesettings.Tables[0].DefaultView.RowFilter = "ActualGrade='" + Convert.ToString(dv.Table.Rows[0]["grade"]) + "'";
                                                DataView dvholiday = gradesettings.Tables[0].DefaultView;
                                                if (dvholiday.Count > 0)
                                                {
                                                    if (Convert.ToString(dvholiday[0]["grade"]) != "")
                                                    {
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = Convert.ToString(dvholiday[0]["grade"]);
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = Convert.ToString(dvholiday[0]["Result"]);
                                                    }
                                                }
                                                else
                                                {
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = Convert.ToString(dv.Table.Rows[0]["grade"]); //strSA.ToUpper();

                                                    if (Convert.ToString(dv.Table.Rows[0]["grade"]).ToUpper() == "SA")
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = "Reappear";
                                                    else
                                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = "Fail";
                                                }
                                            }
                                            rmark.Close();
                                            con4.Close();
                                        }
                                        sub = sub + 1;
                                    }
                                    if (excode != "")
                                    {
                                        if (temp == 1 || temp == 2)
                                        {
                                            // cmd.CommandText = "Select cp,(cp*(select distinct top 1 g.credit_points from grade_master as g,Mark_Entry as m where m.subject_no=subject.subject_no and m.grade=g.mark_grade and m.roll_no='" + roll_no.ToString() + "' and g.degree_code='" + degreecodeexisting.ToString() + "' and m.exam_code='" + excode + "' and g.batch_year='" + batch_year.ToString() + "' and g.college_code='" + Session["college_code"].ToString() + "')) as gp from  Mark_Entry as m,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code  and m.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + excode + "' and roll_no='" + roll_no.ToString() + "' and attempts='1' and result='pass'";

                                            cmd.CommandText = "Select cp,(cp*(select distinct top 1 g.credit_points from grade_master as g,Mark_Entry as m where m.subject_no=subject.subject_no and m.grade=g.mark_grade and m.roll_no='" + roll_no.ToString() + "' and g.degree_code='" + degreecodeexisting.ToString() + "'  and g.batch_year='" + batch_year.ToString() + "' and g.college_code='" + Session["college_code"].ToString() + "')) as gp from  Mark_Entry as m,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code  and m.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and Subject.Subject_No in(select s.subject_no from subject s,mark_entry m where m.subject_no=s.subject_no and roll_no='" + roll_no.ToString() + "' and exam_code in(SELECT Exam_Code FROM Exam_Details WHERE Degree_Code ='" + degreecodeexisting.ToString() + "' AND Batch_Year ='" + batch_year.ToString() + "' AND current_semester='" + asem + "')) and roll_no='" + roll_no.ToString() + "'  and result='pass'";
                                            cmd.Connection = csql;
                                            csql.Open();
                                            SqlDataReader creditp = cmd.ExecuteReader();
                                            //added by Mullai
                                            val1 = d2.GetFunctionv("select value from Master_Settings where settings = 'include gpa for fail student'");
                                            if (val1.Trim() == "true" || val1.Trim() == "1")
                                            {
                                                if (creditp.HasRows)
                                                {
                                                    while (creditp.Read())
                                                    {
                                                        double c = 0, g = 0;
                                                        if (double.TryParse(creditp["cp"].ToString(), out c))
                                                            cp = cp + c;
                                                        if (double.TryParse(creditp["gp"].ToString(), out g))
                                                            gp = gp + g;
                                                    }
                                                    if (cp > 0 && gp > 0)
                                                        gpa = gp / cp;
                                                }
                                            }
                                            else
                                            {
                                                if (stufal == false)//magesh 25.7.18
                                                {

                                                    string arrearcount = d2.GetFunction("select COUNT (distinct subject_no)as noofarrear from mark_entry where roll_no='" + roll_no + "' and subject_no not in(select s.subject_no from subject s,mark_entry m where m.subject_no=s.subject_no and m.result='pass' and roll_no='" + roll_no + "' ) and   subject_no in(select s.subject_no from subject s,mark_entry m where m.subject_no=s.subject_no  and exam_code in(SELECT Exam_Code FROM Exam_Details WHERE Degree_Code ='" + degreecodeexisting + "' AND Batch_Year ='" + batch_year + "' AND current_semester='" + asem + "') and roll_no='" + roll_no + "')");
                                                    if (creditp.HasRows)
                                                    {
                                                        while (creditp.Read())
                                                        {
                                                            double c = 0, g = 0;
                                                            if (double.TryParse(creditp["cp"].ToString(), out c))
                                                                cp = cp + c;
                                                            if (double.TryParse(creditp["gp"].ToString(), out g))
                                                                gp = gp + g;
                                                        }
                                                        if (cp > 0 && gp > 0)
                                                            gpa = gp / cp;
                                                    }
                                                }//magesh 25.7.18
                                            }
                                            csql.Close(); creditp.Close();
                                        }
                                        else
                                        {
                                            percentage = (total > 0 && sub > 0) ? total / sub : 0;
                                        }
                                    }

                                    //if (temp == 1 || temp == 2)
                                    //{
                                    //    cmd.CommandText = "Select cp,(cp*(select distinct top 1 g.credit_points from grade_master as g,Mark_Entry as m where m.subject_no=subject.subject_no and m.grade=g.mark_grade  and m.result='pass' and  m.roll_no='" + roll_no.ToString() + "' and g.degree_code='" + degree_code.ToString() + "'  and g.batch_year='" + batch_year.ToString() + "' and g.college_code='" + Session["college_code"].ToString() + "')) as gp from  Mark_Entry as m,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code  and m.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(Select distinct exam_code from Exam_Details where Degree_Code ='" + degree_code.ToString() + "' and Current_Semester<='" + asem.ToString() + "' and Batch_Year = '" + batch_year.ToString() + "') and roll_no='" + roll_no.ToString() + "' and result='pass'";
                                    //    cmd.Connection = csql;
                                    //    csql.Open();
                                    //    SqlDataReader creditg = cmd.ExecuteReader();
                                    //    if (creditg.HasRows)
                                    //    {
                                    //        while (creditg.Read())
                                    //        {
                                    //            double c = 0, g = 0;
                                    //            if (double.TryParse(creditg["cp"].ToString(), out c))
                                    //                cp = cp + c;
                                    //            if (double.TryParse(creditg["gp"].ToString(), out g))
                                    //                gp = gp + g;
                                    //        }
                                    //        cgpa = (gp > 0 && cp > 0) ? gp / cp : 0;
                                    //    }
                                    //    csql.Close(); creditg.Close();
                                    //}

                                    if (temp == 1 || temp == 2)  //modified by prabha  feb 03 2018
                                    {
                                        //cmd.CommandText = "Select cp,(cp*(select distinct top 1 g.credit_points from grade_master as g,Mark_Entry as m where m.subject_no=subject.subject_no and m.grade=g.mark_grade  and m.result='pass' and  m.roll_no='" + roll_no.ToString() + "' and g.degree_code='" + degree_code.ToString() + "'  and g.batch_year='" + batch_year.ToString() + "' and g.college_code='" + Session["college_code"].ToString() + "')) as gp from  Mark_Entry as m,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code  and m.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(Select distinct exam_code from Exam_Details where Degree_Code ='" + degree_code.ToString() + "' and Current_Semester<='" + asem.ToString() + "' and Batch_Year = '" + batch_year.ToString() + "') and roll_no='" + roll_no.ToString() + "' and result='pass'";

                                        //cgpa = Convert.ToInt32(Calculatecgpa(roll_no.ToString(), asem.ToString(), degree_code.ToString(), batch_year.ToString()));

                                        //added by prabha on feb 03 2018
                                        string cgpstr;
                                        string arrearcount = d2.GetFunction("select COUNT (distinct subject_no)as noofarrear from mark_entry where roll_no='" + roll_no + "' and subject_no not in(select s.subject_no from subject s,mark_entry m where m.subject_no=s.subject_no and m.result='pass' and roll_no='" + roll_no + "' ) and   subject_no in(select s.subject_no from subject s,mark_entry m where m.subject_no=s.subject_no  and exam_code in(SELECT Exam_Code FROM Exam_Details WHERE Degree_Code ='" + degreecodeexisting + "' AND Batch_Year ='" + batch_year + "' AND current_semester<='" + asem + "') and roll_no='" + roll_no + "')");
                                        //added by Mullai
                                        if (val1.Trim() == "true" || val1.Trim() == "1")
                                        {
                                            if (dept_TransferFlag)
                                                cgpstr = Convert.ToString(d2.Calculete_CGPA(roll_no, asem, degreecodeexisting, batch_year, "", Convert.ToString(Session["collegecode"]), true));
                                            else
                                                cgpstr = Convert.ToString(d2.Calculete_CGPA(roll_no, asem, degreecodeexisting, batch_year, "", Convert.ToString(Session["collegecode"]), false));
                                            Double.TryParse(cgpstr, out cgpa);
                                        }
                                        else
                                        {
                                            if (stufal == false)//magesh 25.7.18
                                            {
                                                if (arrearcount == "0" || arrearcount == "")
                                                {
                                                    if (dept_TransferFlag)
                                                        cgpstr = Convert.ToString(d2.Calculete_CGPA(roll_no, asem, degreecodeexisting, batch_year, "", Convert.ToString(Session["collegecode"]), true));
                                                    else
                                                        cgpstr = Convert.ToString(d2.Calculete_CGPA(roll_no, asem, degreecodeexisting, batch_year, "", Convert.ToString(Session["collegecode"]), false));
                                                    Double.TryParse(cgpstr, out cgpa);
                                                }
                                            }
                                        }
                                    }

                                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Left;
                                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);
                                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 2, 1, 2);
                                    if (temp == 0 || temp == 3)
                                    {
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Percentage :";
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = Math.Round(percentage, 2, MidpointRounding.AwayFromZero).ToString();
                                        if (Convert.ToString(ddlExamType.SelectedItem).ToLower() == "university" || Convert.ToString(ddlExamType.SelectedItem).ToLower() == "all")
                                        {
                                            Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Visible = true;
                                        }
                                        else
                                            Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Visible = false;
                                    }
                                    else
                                    {
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "GPA        : " + Math.Round(gpa, 2, MidpointRounding.AwayFromZero).ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = "CGPA       : " + Math.Round(cgpa, 2, MidpointRounding.AwayFromZero).ToString();
                                    }
                                    apercentage();
                                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Size = FontUnit.Medium;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].HorizontalAlign = HorizontalAlign.Left;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Left;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Name = "Book Antiqua";
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Bold = true;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
                                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);//dum_tage_date
                                    dum_tage_date = (per_workingdays > 0) ? ((pre_present_date / per_workingdays) * 100) : 0;
                                    if (dum_tage_date > 100)
                                    {
                                        dum_tage_date = 100;
                                    }
                                    else
                                    {
                                        dum_tage_date = Math.Round(dum_tage_date, 2, MidpointRounding.AwayFromZero);
                                    }
                                    if (day_flag_str == true)
                                    {
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Daywise Attendance Percentage :" + dum_tage_date;//+ String.Format("{0:0,0.00}", float.Parse(hours_pres.ToString())); ;
                                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Visible = true;
                                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Locked = true;
                                    }
                                    else
                                    {
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = " ";
                                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Visible = false;
                                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Locked = true;
                                    }
                                    //----------------------------
                                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Size = FontUnit.Medium;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].HorizontalAlign = HorizontalAlign.Left;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Left;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Name = "Book Antiqua";
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Bold = true;
                                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
                                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);//dum_tage_date
                                    per_con_hrs = (per_workingdays1) + tot_conduct_hr_spl_fals;
                                    per_tage_hrs = (per_con_hrs > 0) ? (((per_per_hrs + tot_per_hrs_spl_fals) / per_con_hrs) * 100) : 0;
                                    if (per_tage_hrs > 100)
                                    {
                                        per_tage_hrs = 100;
                                    }
                                    else
                                    {
                                        per_tage_hrs = Math.Round(per_tage_hrs, 2, MidpointRounding.AwayFromZero);
                                    }
                                    if (hr_flag_str == true)
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Hourwise Attendance Percentage :" + per_tage_hrs;//+ String.Format("{0:0,0.00}", float.Parse(hours_pres.ToString())); ;
                                    else
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = " ";
                                    //----------------------------------------------
                                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 2, 1, 2);
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = "Remarks";
                                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);
                                    Fpsmarks.Sheets[0].SpanModel.Add(span_row, 0, 1, spancolumn);
                                    //modified by annyutha//
                                    Fpsmarks.Sheets[0].Cells[span_row, 0].Text = "Semester " + (asem).ToString();
                                    //end//
                                    Fpsmarks.Sheets[0].Cells[span_row, 0].HorizontalAlign = HorizontalAlign.Center;
                                    Fpsmarks.Sheets[0].Cells[span_row, 0].Font.Size = FontUnit.XLarge;
                                    Fpsmarks.Sheets[0].Cells[span_row, 0].Font.Bold = true;
                                    Fpsmarks.Sheets[0].Cells[span_row, 0].ForeColor = Color.Blue;
                                    Fpsmarks.Sheets[0].Cells[span_row, 0].Font.Name = "Book Antiqua";
                                    Fpsmarks.Sheets[0].Cells[span_row, 0].BackColor = Color.LightGray;
                                    Fpsmarks.Sheets[0].SpanModel.Add(span_row, spancolumn, sub + 5, Fpsmarks.Sheets[0].ColumnCount - spancolumn);
                                    Fpsmarks.Sheets[0].Cells[span_row, spancolumn].BackColor = Color.White;
                                }
                                else
                                {
                                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount - 3;
                                }


                            }
                            else
                            {
                                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Semester " + (asem).ToString();

                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.XLarge;
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].BackColor = Color.LightGray;
                                if (spancolumn != 0)
                                {
                                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, spancolumn, sub + 5, Fpsmarks.Sheets[0].ColumnCount - spancolumn);
                                    // Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, spancolumn].BackColor = Color.White;
                                }
                                else
                                {
                                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 6);
                                    // Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 6].BackColor = Color.White;
                                }
                                Fpsmarks.Sheets[0].RowCount++;
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Fee is due";
                                Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 6);
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;


                            }
                        }
                        con2.Close();
                        rsub.Close();

                    }



                }
            }
            rroll.Close();
            con1.Close();
            if (Fpsmarks.Sheets[0].RowCount > 0)
            {
                for (int j = column + 5; j < Fpsmarks.Sheets[0].ColumnCount; j++)
                {
                    Fpsmarks.Sheets[0].Columns[j].Visible = false;
                }
                int widt = 0; int heights = 0;
                widt = (70 * (column + 5)) + 200;
                if (widt > 900)
                {
                    heights = 16;
                    widt = 900;
                    Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Always;
                }
                else
                {
                    Fpsmarks.Width = widt;
                    Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Always;
                }
                heights = heights + (Fpsmarks.Rows.Default.Height * Fpsmarks.Sheets[0].RowCount) + 65;
                if (heights >= 500)
                {
                    Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Always;
                    Fpsmarks.Height = 500;
                    Fpsmarks.Width = widt + 16;
                }
                else if (heights < 500)
                {
                    Fpsmarks.Height = heights;
                    Fpsmarks.Width = widt;
                }
            }
            else
            {
                Fpsmarks.Sheets[0].ColumnCount = 0;
                Fpsmarks.Sheets[0].ColumnCount = 4;
                Fpsmarks.Sheets[0].RowCount = 1;
                Fpsmarks.ColumnHeader.Visible = false;
                Fpsmarks.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpsmarks.Width = 600;
                Fpsmarks.Height = 45;
                Fpsmarks.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpsmarks.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            }
            Fpsmarks.TitleInfo.Text = "Marks";
            Fpsmarks.TitleInfo.HorizontalAlign = HorizontalAlign.Center;
            Fpsmarks.SaveChanges();

        }
        catch
        {

        }
    }

    // protected void btnmarkgo_Click(object sender, EventArgs e)
    //{
    //    bool flag = false;
    //    initmarks(); int column = 0;
    //    int spanrow = 0, spancolumn = 0;
    //    Fpsmarks.Visible = true;
    //    Fpsmarks.Sheets[0].PageSize = 200;
    //    Fpsmarks.Rows.Default.Height = 20;
    //    Fpsmarks.ColumnHeader.Visible = false;
    //    Fpsmarks.RowHeader.Visible = false;
    //    Fpsmarks.Sheets[0].ColumnCount = 30; //25;
    //    Fpsattendence.Sheets[0].ColumnCount = 0;
    //    Fpsattendence.Sheets[0].ColumnCount = 9;
    //    Fpsmarks.Sheets[0].RowCount = 0;
    //    Fpsmarks.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
    //    Fpsmarks.ActiveSheetView.Rows.Default.Font.Name = "Book Antiqua";
    //    Fpsmarks.ActiveSheetView.Rows.Default.Font.Size = FontUnit.Medium;
    //    Fpsmarks.ActiveSheetView.Rows.Default.HorizontalAlign = HorizontalAlign.Center;
    //    Fpsmarks.ActiveSheetView.Rows.Default.VerticalAlign = VerticalAlign.Middle;
    //    Fpsmarks.ActiveSheetView.Columns.Default.Font.Name = "Book Antiqua";
    //    Fpsmarks.ActiveSheetView.Columns.Default.Font.Size = FontUnit.Medium;
    //    Fpsmarks.ActiveSheetView.Columns.Default.HorizontalAlign = HorizontalAlign.Center;
    //    Fpsmarks.ActiveSheetView.Columns.Default.VerticalAlign = VerticalAlign.Middle;
    //    Fpsmarks.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //    Fpsmarks.Sheets[0].DefaultStyle.HorizontalAlign = HorizontalAlign.Center;
    //    Fpsmarks.Sheets[0].DefaultStyle.VerticalAlign = VerticalAlign.Middle;
    //    Fpsmarks.Columns.Default.Width = 70;
    //    Fpsmarks.Columns[1].Width = 270;
    //    Fpsmarks.Columns[1].HorizontalAlign = HorizontalAlign.Left;
    //    Fpsmarks.CommandBar.Visible = false;
    //    Boolean day_flag_str = false;
    //    Boolean hr_flag_str = false;
    //    string Master  = string.Empty;
    //    Master = "select * from Master_Settings where usercode=" + Session["usercode"] + " and (settings='Day Wise' or settings='Hour Wise')";
    //    readcon.Close();
    //    readcon.Open();
    //    SqlDataReader mtrdr;
    //    SqlCommand mtcmd = new SqlCommand(Master, readcon);
    //    mtrdr = mtcmd.ExecuteReader();
    //    if (mtrdr.HasRows)
    //    {
    //        while (mtrdr.Read())
    //        {
    //            if (mtrdr["settings"].ToString() == "Day Wise" && mtrdr["value"].ToString() == "1")
    //            {
    //                day_flag_str = true;
    //            }
    //            if (mtrdr["settings"].ToString() == "Hour Wise" && mtrdr["value"].ToString() == "1")
    //            {
    //                hr_flag_str = true;
    //            }
    //        }
    //    }
    //    ArrayList criteria = new ArrayList();
    //    string strsec = "", syear = "-1", ob_mark = "-1", sql  = string.Empty;
    //    int len1 = 0, len2 = 0;
    //    cmd.CommandText = "Select degree_code,batch_year,current_semester,Roll_No,isnull(sections,'') from registration where app_no='" + appno + "'";
    //    cmd.Connection = con;
    //    con.Open();
    //    SqlDataReader rroll = cmd.ExecuteReader();
    //    if (rroll.Read())
    //    {
    //        asec  = string.Empty;
    //        csem = rroll["current_semester"].ToString();
    //        aroll = rroll["roll_no"].ToString();
    //        adegree = rroll["degree_code"].ToString();
    //        abatch = rroll["batch_year"].ToString();
    //        strsec = rroll.GetValue(4).ToString();
    //        byr = abatch;
    //        if (strsec != "")
    //        {
    //            strsec = " and exam_type.sections='" + strsec + "'";
    //            asec = rroll.GetValue(4).ToString();
    //        }
    //        {
    //            cmd.CommandText = "select isnull(syllabus_year,-1) from syllabus_master where degree_code=" + rroll.GetValue(0).ToString() + " and semester =" + rroll.GetValue(2).ToString() + " and batch_year=" + rroll.GetValue(1).ToString() + "";
    //            cmd.Connection = con1;
    //            con1.Open();
    //            SqlDataReader rexam = cmd.ExecuteReader();
    //            if (rexam.Read())
    //                syear = rexam.GetValue(0).ToString();
    //            rexam.Close();
    //            con1.Close();
    //        }
    //        if (syear == "-1")
    //        {
    //        }
    //        int sem = Convert.ToInt32(rroll.GetValue(2).ToString());
    //        int span_row = 0;
    //        string degree_code = rroll["degree_code"].ToString();
    //        string batch_year = rroll["batch_year"].ToString();
    //        roll_no = rroll.GetValue(3).ToString();
    //        for (int i = 0; i < vehiclechecklist.Items.Count; i++)
    //        {
    //            if (vehiclechecklist.Items[i].Selected == true)
    //            {
    //                asem = i.ToString();
    //                double cp = 0, gp = 0, gpa = 0, cgpa = 0;
    //                double mark = 0, total = 0, percentage = 0;
    //                int sub = 0;
    //                con2_subj.Close();
    //                con2_subj.Open();
    //                SqlCommand cmd_new = new SqlCommand();
    //                cmd_new.CommandText = "select distinct subject_name,subject.subject_no,subject_code from subject,sub_sem,syllabus_master,subjectchooser,exam_type where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=" + degree_code + " and syllabus_master.semester=" + i.ToString() + " and syllabus_master.batch_year=" + batch_year + "and subject.subject_no =subjectchooser.subject_no " + strsec + "  and roll_no = '" + roll_no + "' order by subject.subject_no";// " and syllabus_year=" +syear+ 
    //                cmd_new.Connection = con2_subj;
    //                SqlDataReader rsub = cmd_new.ExecuteReader();
    //                if (rsub.HasRows)
    //                {
    //                    cp = 0;
    //                    gp = 0;
    //                    gpa = 0;
    //                    cgpa = 0;
    //                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
    //                    span_row = Fpsmarks.Sheets[0].RowCount - 1;
    //                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 2;
    //                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].BackColor = Color.LightCyan;
    //                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].BackColor = Color.LightCyan;
    //                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Size = FontUnit.Medium;
    //                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
    //                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Bold = true;
    //                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
    //                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Name = "Book Antiqua";
    //                    Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
    //                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, 0, 2, 1);
    //                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, 0].Text = "S.No";
    //                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, 1, 2, 1);
    //                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, 1].Text = "Subject";
    //                    spanrow = Fpsmarks.Sheets[0].RowCount - 3;
    //                    int col = 2;
    //                    cmd.CommandText = "select c.criteria,c.criteria_no  from CriteriaForInternal as c where c.syll_code in(select syll_code from subject where subject_no in(select distinct subject.subject_no from subject,sub_sem,syllabus_master,subjectchooser,exam_type where sub_sem.syll_Code = subject.syll_code and subject.subtype_no = sub_sem.subtype_no and sub_sem.promote_count =1 and subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=" + degree_code.ToString() + " and syllabus_master.semester=" + i.ToString() + " and syllabus_master.batch_year=" + batch_year.ToString() + " and subject.subject_no =subjectchooser.subject_no " + strsec + " )) and c.criteria_no is not null order by c.criteria";//" and syllabus_year=" + syear +
    //                    cmd.Connection = con3;
    //                    con3.Open();
    //                    SqlDataReader rheader = cmd.ExecuteReader();
    //                    criteria.Clear();
    //                    if (rheader.HasRows)
    //                        while (rheader.Read())
    //                        {
    //                            Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col, 2, 1);
    //                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Text = rheader.GetValue(0).ToString();
    //                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Tag = rheader.GetValue(1).ToString();
    //                            criteria.Add(rheader.GetValue(1).ToString());
    //                            col = col + 1;
    //                        }
    //                    con3.Close();
    //                    rheader.Close();
    //                    if (col > column)
    //                        column = col;
    //                    spancolumn = col;
    //                    int row = Fpsmarks.Sheets[0].RowCount - 1;
    //                    string excode  = string.Empty; int temp = 0;
    //                    cmd.CommandText = "Select top 1 isnull(Exam_Code,-1),exam_month,exam_year from Exam_Details where Degree_Code = " + degree_code.ToString() + " and Current_Semester = " + i + " and Batch_Year = " + batch_year.ToString() + " order by exam_year desc";
    //                    cmd.Connection = con3;
    //                    con3.Open();
    //                    SqlDataReader rex = cmd.ExecuteReader();
    //                    if (rex.Read())
    //                    {
    //                        excode = rex.GetValue(0).ToString();
    //                        cmd.CommandText = "Select grade_flag from grademaster where degree_code=" + degree_code.ToString() + " and exam_month= " + rex.GetValue(1).ToString() + " and exam_year=" + rex.GetValue(2).ToString() + " and batch_year=" + batch_year.ToString() + "";
    //                        cmd.Connection = con4;
    //                        con4.Open();
    //                        SqlDataReader rgrade = cmd.ExecuteReader();
    //                        if (rgrade.Read())
    //                        {
    //                            if (rgrade.GetValue(0).ToString() == "3")
    //                            {
    //                                sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
    //                                sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
    //                                sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.attempts as attempt  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
    //                                sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  and result='pass' ";
    //                                sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no";// and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
    //                                temp = 3;
    //                            }
    //                            else if (rgrade.GetValue(0).ToString() == "2")
    //                            {
    //                                sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
    //                                sql = sql + "case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then maxtotal else null end,";
    //                                sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.grade,me.attempts as attempt  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
    //                                sql = sql + "and result='pass' ";
    //                                sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no";// and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
    //                                temp = 2;
    //                            }
    //                            else if (rgrade.GetValue(0).ToString() == "1")
    //                            {
    //                                sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
    //                                sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
    //                                sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.grade,me.attempts as attempt  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
    //                                sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  and result='pass' ";
    //                                sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no ";//and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
    //                                temp = 1;
    //                            }
    //                        }
    //                        else
    //                        {
    //                            sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select  str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
    //                            sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
    //                            sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.attempts as attempt  from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
    //                            sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  and result='pass' ";
    //                            sql = sql + " and roll_no = '" + roll_no + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no ";//and syllabus_master.semester=" + i + "  and me.exam_code =" + excode + "";
    //                        }
    //                        rgrade.Close();
    //                        con4.Close();
    //                        Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col, 1, 3);
    //                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col].Text = "University Exams";
    //                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = "Attempts";
    //                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = "INT";
    //                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = "* Marks";
    //                        Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 2, col + 3, 2, 1);
    //                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 2, col + 3].Text = "Year of Passing";
    //                        spancolumn = col + 4;
    //                    }
    //                    rex.Close();
    //                    con3.Close();
    //                    if (excode != "" || col > 2)
    //                    {
    //                        while (rsub.Read())
    //                        {
    //                            Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
    //                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = (sub + 1).ToString();
    //                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text = rsub.GetValue(0).ToString();
    //                            for (int loop_col = 2; loop_col < col; loop_col++)
    //                            {
    //                                string exam_code = GetFunction("select exam_code from exam_type where  criteria_no=" + criteria[loop_col - 2] + " and subject_no = " + rsub.GetValue(1).ToString() + strsec + " and batch_year=" + batch_year.ToString() + "");
    //                                if (exam_code != "")
    //                                {
    //                                    cmd.CommandText = "select isnull(marks_obtained,'') from result,registration where registration.roll_no=result.roll_no and delflag=0 and cc=0 and exam_flag<>'DEBAR' and result.roll_no='" + roll_no.ToString() + "' and result.exam_code=" + exam_code + "";
    //                                    cmd.Connection = con3;
    //                                    con3.Open();
    //                                    SqlDataReader rom = cmd.ExecuteReader();
    //                                    if (rom.Read())
    //                                        ob_mark = rom.GetValue(0).ToString();
    //                                    rom.Close();
    //                                    con3.Close();
    //                                    double obm = 0;
    //                                    if (double.TryParse(ob_mark, out obm))
    //                                    {
    //                                        if (obm < 0)
    //                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, loop_col].Text = Attmark(ob_mark);
    //                                        else
    //                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, loop_col].Text = ob_mark;
    //                                    }
    //                                    else if (ob_mark == "")
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, loop_col].Text = " - ";
    //                                }
    //                            }
    //                            if (excode != "")
    //                            {
    //                                cmd.CommandText = sql + " and subject.subject_no=" + rsub.GetValue(1).ToString();
    //                                cmd.Connection = con4;
    //                                con4.Open();
    //                                SqlDataReader rmark = cmd.ExecuteReader();
    //                                if (rmark.Read())
    //                                {
    //                                    if (temp == 3)
    //                                    {
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = rmark["attempt"].ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = rmark.GetValue(7).ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark.GetValue(10).ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();
    //                                        if (Double.TryParse(rmark.GetValue(10).ToString(), out mark))
    //                                            total = total + mark;
    //                                    }
    //                                    else if (temp == 2)
    //                                    {
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = rmark["attempt"].ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = rmark.GetValue(7).ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark["grade"].ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();
    //                                    }
    //                                    else if (temp == 1)
    //                                    {
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = rmark["attempt"].ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = rmark.GetValue(7).ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark["grade"].ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();
    //                                    }
    //                                    else
    //                                    {
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col].Text = rmark["attempt"].ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 1].Text = rmark.GetValue(7).ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 2].Text = rmark.GetValue(10).ToString();
    //                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, col + 3].Text = rmark["mon_year"].ToString();
    //                                        if (Double.TryParse(rmark.GetValue(10).ToString(), out mark))
    //                                            total = total + mark;
    //                                    }
    //                                }
    //                                rmark.Close();
    //                                con4.Close();
    //                            }
    //                            sub = sub + 1;
    //                        }
    //                        if (excode != "")
    //                        {
    //                            if (temp == 1 || temp == 2)
    //                            {
    //                                cmd.CommandText = "Select cp,(cp*(select distinct top 1 g.credit_points from grade_master as g,Mark_Entry as m where m.subject_no=subject.subject_no and m.grade=g.mark_grade and m.roll_no='" + rroll["roll_no"].ToString() + "' and g.degree_code=" + degree_code.ToString() + " and m.exam_code=" + excode + "  and g.batch_year=" + batch_year.ToString() + " and g.college_code=" + Session["college_code"].ToString() + ")) as gp from  Mark_Entry as m,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code  and m.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = " + excode + " and roll_no='" + roll_no.ToString() + "' and attempts=1 and result='pass'";
    //                                cmd.Connection = csql;
    //                                csql.Open();
    //                                SqlDataReader creditp = cmd.ExecuteReader();
    //                                if (creditp.HasRows)
    //                                {
    //                                    while (creditp.Read())
    //                                    {
    //                                        double c = 0, g = 0;
    //                                        if (Double.TryParse(creditp["cp"].ToString(), out c))
    //                                            cp = cp + c;
    //                                        if (Double.TryParse(creditp["gp"].ToString(), out g))
    //                                            gp = gp + g;
    //                                    }
    //                                    gpa = gp / cp;
    //                                }
    //                                csql.Close(); creditp.Close();
    //                            }
    //                            else
    //                            {
    //                                percentage = total / sub;
    //                            }
    //                        }
    //                        if (temp == 1 || temp == 2)
    //                        {
    //                            cmd.CommandText = "Select cp,(cp*(select distinct top 1 g.credit_points from grade_master as g,Mark_Entry as m where m.subject_no=subject.subject_no and m.grade=g.mark_grade  and m.result='pass' and  m.roll_no='" + rroll["roll_no"].ToString() + "' and g.degree_code=" + degree_code.ToString() + "  and g.batch_year=" + batch_year.ToString() + " and g.college_code=" + Session["college_code"].ToString() + ")) as gp from  Mark_Entry as m,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code  and m.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(Select distinct exam_code from Exam_Details where Degree_Code =" + degree_code.ToString() + " and Current_Semester<=" + i.ToString() + " and Batch_Year = " + batch_year.ToString() + ") and roll_no='" + roll_no.ToString() + "' and result='pass'";
    //                            cmd.Connection = csql;
    //                            csql.Open();
    //                            SqlDataReader creditg = cmd.ExecuteReader();
    //                            if (creditg.HasRows)
    //                            {
    //                                while (creditg.Read())
    //                                {
    //                                    double c = 0, g = 0;
    //                                    if (Double.TryParse(creditg["cp"].ToString(), out c))
    //                                        cp = cp + c;
    //                                    if (Double.TryParse(creditg["gp"].ToString(), out g))
    //                                        gp = gp + g;
    //                                }
    //                                cgpa = gp / cp;
    //                            }
    //                            csql.Close(); creditg.Close();
    //                        }
    //                        Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Left;
    //                        Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);
    //                        Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 2, 1, 2);
    //                        if (temp == 0 || temp == 3)
    //                        {
    //                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Percentage :";
    //                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = Math.Round(percentage, 2, MidpointRounding.AwayFromZero).ToString();
    //                        }
    //                        else
    //                        {
    //                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "GPA        : " + Math.Round(gpa, 2, MidpointRounding.AwayFromZero).ToString();
    //                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = "CGPA       : " + Math.Round(cgpa, 2, MidpointRounding.AwayFromZero).ToString();
    //                        }
    //                        apercentage();
    //                        Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Size = FontUnit.Medium;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].HorizontalAlign = HorizontalAlign.Left;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Left;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Name = "Book Antiqua";
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Bold = true;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
    //                        Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);//dum_tage_date
    //                        dum_tage_date = ((pre_present_date / per_workingdays) * 100);
    //                        if (dum_tage_date > 100)
    //                        {
    //                            dum_tage_date = 100;
    //                        }
    //                        else
    //                        {
    //                            dum_tage_date = Math.Round(dum_tage_date, 2, MidpointRounding.AwayFromZero);
    //                        }
    //                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Attendance Percentage :" + dum_tage_date;//+ String.Format("{0:0,0.00}", float.Parse(hours_pres.ToString())); ;
    //                        Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 2, 1, 2);
    //                        //----------------------------
    //                        Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Size = FontUnit.Medium;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Size = FontUnit.Medium;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].HorizontalAlign = HorizontalAlign.Left;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Left;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Name = "Book Antiqua";
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Name = "Book Antiqua";
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 2].Font.Bold = true;
    //                        Fpsmarks.Sheets[0].Rows[Fpsmarks.Sheets[0].RowCount - 1].Font.Bold = true;
    //                        Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);//dum_tage_date
    //                        per_con_hrs = (per_workingdays1) + tot_conduct_hr_spl_fals;
    //                        per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / per_con_hrs) * 100);
    //                        if (per_tage_hrs > 100)
    //                        {
    //                            per_tage_hrs = 100;
    //                        }
    //                        else
    //                        {
    //                            per_tage_hrs = Math.Round(per_tage_hrs, 2, MidpointRounding.AwayFromZero);
    //                        }
    //                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Hourwise Attendance Percentage :" + per_tage_hrs;//+ String.Format("{0:0,0.00}", float.Parse(hours_pres.ToString())); ;
    //                        Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 2, 1, 2);
    //                        //----------------------------------------------
    //                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = "Remarks";
    //                        Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);
    //                        Fpsmarks.Sheets[0].SpanModel.Add(span_row, 0, 1, spancolumn);
    //                        Fpsmarks.Sheets[0].Cells[span_row, 0].Text = "Semester " + (i).ToString();
    //                        Fpsmarks.Sheets[0].Cells[span_row, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        Fpsmarks.Sheets[0].Cells[span_row, 0].Font.Size = FontUnit.XLarge;
    //                        Fpsmarks.Sheets[0].Cells[span_row, 0].Font.Bold = true;
    //                        Fpsmarks.Sheets[0].Cells[span_row, 0].ForeColor = Color.Blue;
    //                        Fpsmarks.Sheets[0].Cells[span_row, 0].Font.Name = "Book Antiqua";
    //                        Fpsmarks.Sheets[0].Cells[span_row, 0].BackColor = Color.LightGray;
    //                        Fpsmarks.Sheets[0].SpanModel.Add(span_row, spancolumn, sub + 5, Fpsmarks.Sheets[0].ColumnCount - spancolumn);
    //                        Fpsmarks.Sheets[0].Cells[span_row, spancolumn].BackColor = Color.White;
    //                    }
    //                    else
    //                    {
    //                        Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount - 3;
    //                    }
    //                }
    //                con2.Close();
    //                rsub.Close();
    //            }
    //        }
    //    }
    //    rroll.Close();
    //    con1.Close();
    //    if (Fpsmarks.Sheets[0].RowCount > 0)
    //    {
    //        for (int j = column + 4; j < Fpsmarks.Sheets[0].ColumnCount; j++)
    //        {
    //            Fpsmarks.Sheets[0].Columns[j].Visible = false;
    //        }
    //        int widt = 0; int heights = 0;
    //        widt = (70 * (column + 4)) + 200;
    //        if (widt > 900)
    //        {
    //            heights = 16;
    //            widt = 900;
    //            Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
    //        }
    //        else
    //        {
    //            Fpsmarks.Width = widt;
    //            Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
    //        }
    //        heights = heights + (Fpsmarks.Rows.Default.Height * Fpsmarks.Sheets[0].RowCount) + 65;
    //        if (heights >= 500)
    //        {
    //            Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
    //            Fpsmarks.Height = 500;
    //            Fpsmarks.Width = widt + 16;
    //        }
    //        else if (heights < 500)
    //        {
    //            Fpsmarks.Height = heights;
    //            Fpsmarks.Width = widt;
    //        }
    //    }
    //    else
    //    {
    //        Fpsmarks.Sheets[0].ColumnCount = 0;
    //        Fpsmarks.Sheets[0].ColumnCount = 4;
    //        Fpsmarks.Sheets[0].RowCount = 1;
    //        Fpsmarks.ColumnHeader.Visible = false;
    //        Fpsmarks.Sheets[0].SpanModel.Add(0, 0, 1, 4);
    //        Fpsmarks.Width = 600;
    //        Fpsmarks.Height = 45;
    //        Fpsmarks.Sheets[0].Cells[0, 0].Text = "No information Available";
    //        Fpsmarks.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
    //        Fpsmarks.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
    //        Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
    //        Fpsmarks.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
    //        Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
    //        Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
    //    }
    //    Fpsmarks.TitleInfo.Text = "Marks";
    //    Fpsmarks.TitleInfo.HorizontalAlign = HorizontalAlign.Center;
    //    Fpsmarks.SaveChanges();
    //}

    protected void ButtonCAMmark_Click(object sender, EventArgs e)
    {
        initmarks();
        Fpsmarks.Visible = true;
        Fpsmarks.Sheets[0].ColumnCount = 7;
        Fpsmarks.ColumnHeader.Visible = true;
        Fpsmarks.Rows.Default.Height = 20;
        Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Always;
        Fpsmarks.TitleInfo.Text = "CAM Marks ";
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpsmarks.Columns[0].Width = 40;
        Fpsmarks.Columns[0].HorizontalAlign = HorizontalAlign.Center;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Subject Code";
        Fpsmarks.Columns[1].Width = 90;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Subject Name";
        Fpsmarks.Columns[2].Width = 480;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Min Marks";
        Fpsmarks.Columns[3].Width = 70;
        Fpsmarks.Columns[3].HorizontalAlign = HorizontalAlign.Center;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Max Marks";
        Fpsmarks.Columns[4].Width = 70;
        Fpsmarks.Columns[4].HorizontalAlign = HorizontalAlign.Center;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Secured Marks";
        Fpsmarks.Columns[5].Width = 70;
        Fpsmarks.Columns[5].HorizontalAlign = HorizontalAlign.Center;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Result";
        Fpsmarks.Columns[6].Width = 70;
        string strsec = "", syear = "-1", ob_mark = "-1", sql = string.Empty;
        int len1 = 0, len2 = 0;
        cmd.CommandText = "Select degree_code,batch_year,current_semester,Roll_No,isnull(sections,'') from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            strsec = rroll.GetValue(4).ToString();
            if (strsec != "")
                strsec = " and exam_type.sections='" + strsec + "'";
            {
                cmd.CommandText = "select isnull(syllabus_year,-1) from syllabus_master where degree_code=" + rroll.GetValue(0).ToString() + " and semester =" + rroll.GetValue(2).ToString() + " and batch_year=" + rroll.GetValue(1).ToString() + "";
                cmd.Connection = con1;
                con1.Open();
                SqlDataReader rexam = cmd.ExecuteReader();
                if (rexam.Read())
                    syear = rexam.GetValue(0).ToString();
                rexam.Close();
                con1.Close();
            }
            if (syear != "-1")
            {
                int sem = Convert.ToInt32(rroll.GetValue(2).ToString());
                for (int i = 1; i <= sem; i++)
                {
                    cmd.CommandText = "select criteria,criteria_no from criteriaforinternal,syllabus_master where criteriaforinternal.syll_code=syllabus_master.syll_code and degree_code=" + rroll.GetValue(0).ToString() + " and semester=" + i.ToString() + " and batch_year=" + rroll.GetValue(1).ToString() + " order by criteria_no ";//" and syllabus_year=" + syear +
                    cmd.Connection = con1;
                    con1.Open();
                    SqlDataReader rcri = cmd.ExecuteReader();
                    if (rcri.HasRows)
                    {
                        while (rcri.Read())
                        {
                            Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                            Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 7);
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = lbl_semOrTerm.Text + " " + (i).ToString() + " - " + rcri.GetValue(0).ToString();
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                            int k = 1;
                            cmd.CommandText = "select distinct  subject.subject_code,subject.subject_name,subject.subject_no,exam_type.min_mark,exam_type.max_mark,exam_code from subject,exam_type where subject.subject_no=exam_type.subject_no and exam_type.criteria_no=" + rcri.GetValue(1).ToString() + "  and exam_type.batch_year=" + rroll.GetValue(1).ToString() + "  " + strsec + "";
                            cmd.Connection = con2;
                            con2.Open();
                            SqlDataReader rtest = cmd.ExecuteReader();
                            if (rtest.HasRows)
                            {
                                while (rtest.Read())
                                {
                                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = k.ToString();
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text = rtest.GetValue(0).ToString();
                                    int l1 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text.Length;
                                    if (len1 < l1)
                                        len1 = l1;
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = rtest.GetValue(1).ToString();
                                    int l2 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text.Length;
                                    if (len2 < l2)
                                        len2 = l2;
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = rtest.GetValue(3).ToString();
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 4].Text = rtest.GetValue(4).ToString();
                                    {
                                        cmd.CommandText = "select isnull(marks_obtained,'') from result,registration where registration.roll_no=result.roll_no and delflag=0 and cc=0 and exam_flag<>'DEBAR' and result.roll_no='" + rroll.GetValue(3).ToString() + "' and result.exam_code=" + rtest.GetValue(5).ToString() + "";
                                        cmd.Connection = con3;
                                        con3.Open();
                                        //ob_mark = string.Empty;//added by madhumathi 11.04.2018

                                        SqlDataReader rom = cmd.ExecuteReader();
                                        if (rom.Read())
                                            ob_mark = rom.GetValue(0).ToString();
                                        rom.Close();
                                        con3.Close();
                                    }
                                    if (ob_mark == "-1")
                                    {
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 5].Text = "Absent";
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 6].Text = "Fail";
                                    }
                                    else if (ob_mark == "")
                                    {
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 5].Text = " - ";
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 6].Text = " - ";
                                    }
                                    else
                                    {
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 5].Text = ob_mark;
                                        sql = "select marks_obtained  from result,exam_type,registration Where  registration.roll_no=result.roll_no " + strsec + " and delflag=0 and cc=0 and exam_flag<>'DEBAR' and exam_type.exam_code = result.exam_code ";
                                        sql = sql + "" + strsec + " And result.exam_code =" + rtest.GetValue(5).ToString() + " and result.roll_no='" + rroll.GetValue(3).ToString() + "' and ((result.marks_obtained < exam_type.min_mark) or exists (select * from result ";
                                        sql = sql + " as a,exam_type,criteriaforinternal where criteriaforinternal.criteria_no = exam_type.criteria_no and subject_no=" + rtest.GetValue(2).ToString() + " and result.roll_no='" + rroll.GetValue(3).ToString() + "' And ";
                                        sql = sql + " exam_type.exam_code = a.exam_code and criteriaforinternal.criteria_no=" + rcri.GetValue(1).ToString() + " and a.marks_obtained < exam_type.min_mark and ";
                                        sql = sql + " result.roll_no=a.roll_no))";
                                        cmd.CommandText = sql;
                                        cmd.Connection = con3;
                                        con3.Open();
                                        SqlDataReader res = cmd.ExecuteReader();
                                        if (res.HasRows)
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 6].Text = "Fail";
                                        else
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 6].Text = "Pass";
                                        res.Close();
                                        con3.Close();
                                    }
                                    k = k + 1;
                                }
                            }
                            else
                            { Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount - 1; }
                            rtest.Close();
                            con2.Close();
                        }
                    }
                    rcri.Close();
                    con1.Close();
                }
            }
        }
        rroll.Close();
        con.Close();
        if (Fpsmarks.Sheets[0].RowCount > 0)
        {
            for (int j = 0; j < Fpsmarks.Sheets[0].RowCount; j++)
            {
                Fpsmarks.Rows[j].Font.Name = "Book Antiqua";
                Fpsmarks.Rows[j].Font.Size = FontUnit.Medium;
            }
            Fpsmarks.Columns[1].Width = len1 * 11;
            Fpsmarks.Columns[2].Width = len2 * 11;
            int widt = 0; int heights = 0;
            for (int len = 0; len < Fpsmarks.Sheets[0].ColumnCount; len++)
                widt = widt + Fpsmarks.Columns[len].Width;
            if (Fpsmarks.Sheets[0].ColumnCount == 8)
                widt = widt + 50;
            if (widt > 900)
            {
                heights = 16;
                widt = 900;
                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            }
            else
            {
                Fpsmarks.Width = widt;
                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            }
            heights = heights + (Fpsmarks.Rows.Default.Height * Fpsmarks.Sheets[0].RowCount) + 65;
            if (heights >= 500)
            {
                Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                Fpsmarks.Height = 500;
                Fpsmarks.Width = widt + 16;
            }
            else if (heights < 500)
            {
                Fpsmarks.Height = heights;
                Fpsmarks.Width = widt;
            }
        }
        else
        {
            Fpsmarks.Sheets[0].ColumnCount = 0;
            Fpsmarks.Sheets[0].ColumnCount = 4;
            Fpsmarks.ColumnHeader.Columns.Default.Width = 150;
            Fpsmarks.Sheets[0].RowCount = 1;
            Fpsmarks.ColumnHeader.Visible = false;
            Fpsmarks.Sheets[0].SpanModel.Add(0, 0, 1, 4);
            Fpsmarks.Width = 600;
            Fpsmarks.Height = 45;
            Fpsmarks.Sheets[0].Cells[0, 0].Text = "No information Available";
            Fpsmarks.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpsmarks.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
            Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpsmarks.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
            Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        }
        Fpsmarks.SaveChanges();
    }

    protected void Buttoncamreport_Click(object sender, EventArgs e)
    {
        string sqlcmdvel = string.Empty;
        try
        {
            hcrollno = Session["RollNo"].ToString();
            sqlcmdvel = "select * from registration,seminfo sio where  registration.degree_code=sio.degree_code and registration.batch_year=sio.batch_year and registration.current_semester=sio.semester and roll_no ='" + hcrollno + "'";
            dsmethodgoper = d2.select_method(sqlcmdvel, htb, "Text");
            if (dsmethodgoper != null && dsmethodgoper.Tables[0] != null && dsmethodgoper.Tables[0].Rows.Count > 0)
            {
                degreecodev = dsmethodgoper.Tables[0].Rows[0]["degree_code"].ToString();
                batchyearv = dsmethodgoper.Tables[0].Rows[0]["batch_year"].ToString();
                semesterv = dsmethodgoper.Tables[0].Rows[0]["current_semester"].ToString();
                regn = dsmethodgoper.Tables[0].Rows[0]["reg_no"].ToString();
                studname = lblsname.Text;
                strtdate = dsmethodgoper.Tables[0].Rows[0]["start_date"].ToString();
                admdatev = dsmethodgoper.Tables[0].Rows[0]["adm_date"].ToString();
                latmode = dsmethodgoper.Tables[0].Rows[0]["mode"].ToString();
                sectionv = dsmethodgoper.Tables[0].Rows[0]["sections"].ToString();
                htb.Clear();
                DateTime admdv = Convert.ToDateTime(admdatev);
                int admday = admdv.Day;
                int admmonth = admdv.Month;
                int admyear = admdv.Year;
                admdatev = admday + "/" + admmonth + "/" + admyear;
                DateTime startdv = Convert.ToDateTime(strtdate);
                int stday = startdv.Day;
                int stmonth = startdv.Month;
                int styear = startdv.Year;
                strtdate = stday + "/" + stmonth + "/" + styear;
                int ini_column = 0;
                int no_column = 0;
                int tcolcount = 0;
                Hashtable criteriatothat = new Hashtable();
                Fpsmarks.Sheets[0].AutoPostBack = true;
                Fpsmarks.Sheets[0].SheetName = " ";
                Fpsmarks.ColumnHeader.Visible = false;
                Fpsmarks.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
                Fpsmarks.Pager.Mode = FarPoint.Web.Spread.PagerMode.Both;
                Fpsmarks.Pager.Align = HorizontalAlign.Left;
                Fpsmarks.Pager.Font.Bold = true;
                Fpsmarks.Pager.Font.Name = "Book Antiqua";
                Fpsmarks.Pager.ForeColor = Color.DarkGreen;
                Fpsmarks.Pager.BackColor = Color.Beige;
                Fpsmarks.Pager.BackColor = Color.AliceBlue;
                Fpsmarks.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
                Fpsmarks.Sheets[0].Rows.Default.HorizontalAlign = HorizontalAlign.Left;
                Fpsmarks.Sheets[0].Rows.Default.VerticalAlign = VerticalAlign.Middle;
                Fpsmarks.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
                Fpsmarks.Sheets[0].DefaultStyle.Font.Size = FontUnit.Small;
                Fpsmarks.Sheets[0].DefaultStyle.Font.Bold = false;
                Fpsmarks.SheetCorner.Columns[0].Visible = false;
                FarPoint.Web.Spread.StyleInfo style2 = new FarPoint.Web.Spread.StyleInfo();
                style2.Font.Size = 12;
                style2.Font.Bold = true;
                style2.HorizontalAlign = HorizontalAlign.Center;
                style2.ForeColor = System.Drawing.Color.Black;
                Fpsmarks.Sheets[0].SheetCornerStyle = new FarPoint.Web.Spread.StyleInfo(style2);
                Fpsmarks.Sheets[0].SheetCorner.DefaultStyle = new FarPoint.Web.Spread.StyleInfo(style2);
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle = new FarPoint.Web.Spread.StyleInfo(style2);
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Small;
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpsmarks.Sheets[0].DefaultStyle.Font.Bold = false;
                Fpsmarks.Sheets[0].DefaultStyle.Font.Size = FontUnit.Small;
                Fpsmarks.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
                Fpsmarks.Pager.Mode = FarPoint.Web.Spread.PagerMode.Both;
                Fpsmarks.Pager.Align = HorizontalAlign.Left;
                Fpsmarks.Pager.Font.Bold = true;
                Fpsmarks.Pager.Font.Name = "Book Antiqua";
                Fpsmarks.Pager.ForeColor = Color.DarkGreen;
                Fpsmarks.Pager.BackColor = Color.Beige;
                Fpsmarks.Pager.BackColor = Color.AliceBlue;
                Fpsmarks.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
                Fpsmarks.Sheets[0].Rows.Default.HorizontalAlign = HorizontalAlign.Left;
                Fpsmarks.Sheets[0].Rows.Default.VerticalAlign = VerticalAlign.Middle;
                Fpsmarks.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
                Fpsmarks.Sheets[0].DefaultStyle.Font.Size = FontUnit.Small;
                Fpsmarks.Sheets[0].DefaultStyle.Font.Bold = false;
                Fpsmarks.SheetCorner.Columns[0].Visible = false;
                FarPoint.Web.Spread.StyleInfo style1 = new FarPoint.Web.Spread.StyleInfo();
                style1.Font.Size = 12;
                style1.Font.Bold = true;
                style1.HorizontalAlign = HorizontalAlign.Center;
                style1.ForeColor = System.Drawing.Color.Black;
                Fpsmarks.Sheets[0].SheetCornerStyle = new FarPoint.Web.Spread.StyleInfo(style1);
                Fpsmarks.Sheets[0].SheetCorner.DefaultStyle = new FarPoint.Web.Spread.StyleInfo(style1);
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle = new FarPoint.Web.Spread.StyleInfo(style1);
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Small;
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpsmarks.Sheets[0].DefaultStyle.Font.Bold = false;
                Fpsmarks.Sheets[0].DefaultStyle.Font.Size = FontUnit.Small;
                Fpsmarks.Sheets[0].RowCount = 0;
                Fpsmarks.Sheets[0].ColumnCount = 0;
                Fpsmarks.Sheets[0].ColumnCount = 4;
                Fpsmarks.TitleInfo.Text = "CAM Status";
                Fpsmarks.CommandBar.Visible = false;
                Fpsmarks.TitleInfo.Visible = true;
                Fpsmarks.TitleInfo.Font.Size = FontUnit.Large;
                Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                Fpsmarks.Width = 900;
                Fpsmarks.Visible = true;
                Fpsmarks.ColumnHeader.Visible = false;
                Fpsmarks.Sheets[0].RowCount = 0;
                Fpsmarks.Sheets[0].RowCount++;
                Fpsmarks.Sheets[0].RowCount++;
                Fpsmarks.Sheets[0].RowCount++;
                Fpsmarks.Sheets[0].RowCount++;
                Fpsmarks.Sheets[0].RowCount++;
                Fpsmarks.Sheets[0].RowCount++;
                Fpsmarks.Sheets[0].RowCount++;
                Fpsmarks.Sheets[0].RowCount++;
                Fpsmarks.Sheets[0].RowCount++;
                Fpsmarks.Sheets[0].RowCount++;
                Fpsmarks.Columns[2].Width = 450;
                Fpsmarks.Sheets[0].AddSpanCell(8, 0, 2, 1);
                Fpsmarks.Sheets[0].Cells[8, 0].Text = "S.No";
                Fpsmarks.Sheets[0].Cells[8, 0].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[8, 0].HorizontalAlign = HorizontalAlign.Center;
                // Fpsmarks.Sheets[0].Cells[8, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].AddSpanCell(8, 1, 2, 1);
                Fpsmarks.Sheets[0].Cells[8, 1].Text = "Subject Code";
                Fpsmarks.Sheets[0].Cells[8, 1].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[8, 1].HorizontalAlign = HorizontalAlign.Center;
                // Fpsmarks.Sheets[0].Cells[8, 1].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].AddSpanCell(8, 2, 1, 1);
                Fpsmarks.Sheets[0].Cells[8, 2].Text = "Subject Name";
                Fpsmarks.Sheets[0].Cells[8, 2].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[8, 2].HorizontalAlign = HorizontalAlign.Center;
                //  Fpsmarks.Sheets[0].Cells[8, 2].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[9, 2].Text = "Max.Marks";
                Fpsmarks.Sheets[0].Cells[9, 2].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[9, 2].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[9, 2].VerticalAlign = VerticalAlign.Middle;
                //  Fpsmarks.Sheets[0].Cells[9, 2].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].AddSpanCell(8, 3, 1, 1);
                Fpsmarks.Sheets[0].Cells[8, 3].Text = "TH/PR";
                Fpsmarks.Sheets[0].Cells[8, 3].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[8, 3].HorizontalAlign = HorizontalAlign.Center;
                //Fpsmarks.Sheets[0].Cells[8, 3].Font.Size = FontUnit.Medium;
                ini_column = Fpsmarks.Sheets[0].ColumnCount;
                no_column = 0;
                dsmethodgocriteria.Dispose();
                dsmethodgocriteria.Reset();
                string sectionvc = "and Sections='" + sectionv + "' ";
                dsmethodgocriteria = d2.Bindtest(batchyearv, degreecodev, semesterv, sectionvc);
                if (dsmethodgocriteria != null && dsmethodgocriteria.Tables[0] != null && dsmethodgocriteria.Tables[0].Rows.Count > 0)
                {
                    for (int test = 0; test < dsmethodgocriteria.Tables[0].Rows.Count; test++)
                    {
                        criteriatot = criteriatot + 1;
                        Fpsmarks.Sheets[0].ColumnCount = Fpsmarks.Sheets[0].ColumnCount + 1;
                        Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Text = Convert.ToString(dsmethodgocriteria.Tables[0].Rows[test]["criteria"]);
                        Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Note = Convert.ToString(dsmethodgocriteria.Tables[0].Rows[test]["criteria_no"]);
                        Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        //    Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        no_column = no_column + 1;
                        if (criteriain == null || criteriain == "")
                            criteriain = "'" + Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Note + "'";
                        else
                            criteriain = criteriain + "," + "'" + Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Note + "'";
                    }
                }
                tcolcount = Fpsmarks.Sheets[0].ColumnCount;
                if (criteriain != "")
                {
                    criteriain = " in(" + criteriain + ")";
                }
                criteriain = " and e.criteria_no  " + criteriain + "";
                Fpsmarks.Sheets[0].ColumnCount = Fpsmarks.Sheets[0].ColumnCount + 1;
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Text = "Session Marks";
                Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].Text = "20 %";
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].VerticalAlign = VerticalAlign.Middle;
                //   Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].VerticalAlign = VerticalAlign.Middle;
                //   Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].ColumnCount = Fpsmarks.Sheets[0].ColumnCount + 1;
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Text = "University Exam Marks / Grade";
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].VerticalAlign = VerticalAlign.Middle;
                //   Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].Text = "80 %";
                Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].VerticalAlign = VerticalAlign.Middle;
                //    Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].ColumnCount = Fpsmarks.Sheets[0].ColumnCount + 1;
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Text = "Total";
                Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].Text = "100 ";
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].VerticalAlign = VerticalAlign.Middle;
                //   Fpsmarks.Sheets[0].Cells[8, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].VerticalAlign = VerticalAlign.Middle;
                //        Fpsmarks.Sheets[0].Cells[9, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                dsmethodgosubj.Dispose();
                dsmethodgosubj.Reset();
                string sectionves = "   and registration.sections='" + sectionv + "'";
                dsmethodgosubj = d2.BindSubjecttest(batchyearv, degreecodev, semesterv, sectionves);
                if (dsmethodgosubj != null && dsmethodgosubj.Tables[0] != null && dsmethodgosubj.Tables[0].Rows.Count > 0)
                {
                    for (int subj = 0; subj < dsmethodgosubj.Tables[0].Rows.Count; subj++)
                    {
                        if (no_column != 0)
                        {
                            Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = (subj + 1).ToString();
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].VerticalAlign = VerticalAlign.Middle;
                            //         Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                            //string subjtypevel = Convert.ToString(GetCorrespondingKey(Convert.ToString(chklstsubject.Items[subj].Value), htsubjcide));
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dsmethodgosubj.Tables[0].Rows[subj]["subject_code"]);
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].VerticalAlign = VerticalAlign.Middle;
                            //      Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(dsmethodgosubj.Tables[0].Rows[subj]["subject_name"]);
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].VerticalAlign = VerticalAlign.Middle;
                            //       Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                            string subjcode = Convert.ToString(dsmethodgosubj.Tables[0].Rows[subj]["subject_no"]);
                            //  Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(dsmethodgosubj.Tables[0].Rows[0]["subject_type"]);
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(dsmethodgosubj.Tables[0].Rows[subj]["subject_type"]);  //modified by Mullai
                            subjectctot = subjectctot + 1;
                            sqlmarkcmd = "select distinct r.marks_obtained,e.min_mark,r.roll_no,e.exam_code,re.roll_no,criteria_no ,Len(r.roll_no),e.max_mark from result r,exam_type e,registration re where r.roll_no=re.roll_no and e.exam_code=r.exam_code and  r.roll_no='" + hcrollno + "'  and e.subject_no='" + subjcode + "' " + criteriain + " and  RollNo_Flag<>0 and cc=0 and delflag=0 and exam_flag <> 'DEBAR' order by Len(r.roll_no),e.criteria_no";
                            dsmethodgomark = d2.select_method(sqlmarkcmd, hat, "Text");
                            if (dsmethodgomark != null && dsmethodgomark.Tables[0] != null && dsmethodgomark.Tables[0].Rows.Count > 0)
                            {
                                int criteriacolcount = 0, minmark = 0;
                                double markob = 0;
                                string criterianotemp = "", mcriteriano = string.Empty;
                                foreach (DataRow dr in dsmethodgomark.Tables[0].Rows)
                                {
                                    criterianotemp = dr["criteria_no"].ToString();
                                    for (int k = 4; k <= tcolcount - 1; k++)
                                    {
                                        mcriteriano = Convert.ToString(Fpsmarks.Sheets[0].Cells[8, k].Note);
                                        if (criterianotemp != "" && mcriteriano != "" && criterianotemp == mcriteriano)
                                        {
                                            Fpsmarks.Sheets[0].Cells[9, k].HorizontalAlign = HorizontalAlign.Center;
                                            Fpsmarks.Sheets[0].Cells[9, k].Text = dr["max_mark"].ToString();
                                            Fpsmarks.Sheets[0].Cells[9, k].VerticalAlign = VerticalAlign.Middle;
                                            //         Fpsmarks.Sheets[0].Cells[9, k].Font.Size = FontUnit.Medium;
                                            minmark = Convert.ToInt32(dr["min_mark"]);
                                            markob = Convert.ToDouble(dr["marks_obtained"]);
                                            marks_per = Convert.ToString(dr["marks_obtained"]);
                                            double markobta = 0;
                                            if (markob >= minmark)
                                            {
                                            }
                                            else
                                            {
                                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, k].ForeColor = Color.Red;
                                                if (htv3.Contains(Convert.ToString(mcriteriano)))
                                                {
                                                    string failvtr = Convert.ToString(GetCorrespondingKey(Convert.ToString(mcriteriano), htv3));
                                                    failvtr = failvtr + 1;
                                                    htv3[Convert.ToString(mcriteriano)] = failvtr;
                                                }
                                                else
                                                {
                                                    htv3.Add(Convert.ToString(mcriteriano), 1);
                                                }
                                            }
                                            if (criteriatothat.Contains(Convert.ToString(mcriteriano)))
                                            {
                                                markobta = Convert.ToDouble(GetCorrespondingKey(Convert.ToString(mcriteriano), criteriatothat));
                                                markobta = markobta + markob;
                                                criteriatothat[Convert.ToString(mcriteriano)] = markobta;
                                            }
                                            else
                                            {
                                                criteriatothat.Add(Convert.ToString(mcriteriano), markob);
                                            }
                                            switch (marks_per)
                                            {
                                                case "-1":
                                                    marks_perfinal = "AAA";
                                                    break;
                                                case "-2":
                                                    marks_perfinal = "EL";
                                                    break;
                                                case "-3":
                                                    marks_perfinal = "EOD";
                                                    break;
                                                case "-4":
                                                    marks_perfinal = "ML";
                                                    break;
                                                case "-5":
                                                    marks_perfinal = "SOD";
                                                    break;
                                                case "-6":
                                                    marks_perfinal = "NSS";
                                                    break;
                                                case "-7":
                                                    marks_perfinal = "NJ";
                                                    break;
                                                case "-8":
                                                    marks_perfinal = "S";
                                                    break;
                                                case "-9":
                                                    marks_perfinal = "L";
                                                    break;
                                                case "-10":
                                                    marks_perfinal = "NCC";
                                                    break;
                                                case "-11":
                                                    marks_perfinal = "HS";
                                                    break;
                                                case "-12":
                                                    marks_perfinal = "PP";
                                                    break;
                                                case "-13":
                                                    marks_perfinal = "SYOD";
                                                    break;
                                                case "-14":
                                                    marks_perfinal = "COD";
                                                    break;
                                                case "-15":
                                                    marks_perfinal = "OOD";
                                                    break;
                                                case "-16":
                                                    marks_perfinal = "OD";
                                                    break;
                                                default:
                                                    marks_perfinal = marks_per;
                                                    break;
                                            }
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, k].HorizontalAlign = HorizontalAlign.Center;
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, k].Text = marks_perfinal.ToString();
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, k].HorizontalAlign = HorizontalAlign.Center;
                                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, k].VerticalAlign = VerticalAlign.Middle;
                                            //            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, k].Font.Size = FontUnit.Medium;
                                        }
                                        if (tcolcount >= k + 1 && tcolcount <= k + 1)
                                        {
                                            string sqlcmduni = "select internal_mark,external_mark,grade from mark_entry m,exam_details e where e.exam_code=m.exam_code and roll_no='" + hcrollno + "' and subject_no='" + subjcode + "' and degree_code='" + degreecodev + "' and batch_year='" + batchyearv + "' and current_semester='" + semesterv + "'";
                                            dsuni = d2.select_method(sqlcmduni, hat, "Text");//1001001 barath change rollno odd code
                                            if (dsuni != null && dsuni.Tables[0] != null && dsuni.Tables[0].Rows.Count > 0)
                                            {
                                                int intermark = Convert.ToInt32(dsuni.Tables[0].Rows[0]["internal_mark"].ToString());
                                                int extermark = Convert.ToInt32(dsuni.Tables[0].Rows[0]["external_mark"].ToString());
                                                string strgrade = Convert.ToString(dsuni.Tables[0].Rows[0]["grade"].ToString());
                                                if (intermark != 0 && intermark != null && extermark != 0 && extermark != null)
                                                {
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 3].Text = dsuni.Tables[0].Rows[0]["internal_mark"].ToString();
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 2].Text = dsuni.Tables[0].Rows[0]["external_mark"].ToString();
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 1].Text = (intermark + extermark).ToString();
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 3].HorizontalAlign = HorizontalAlign.Center;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 3].VerticalAlign = VerticalAlign.Middle;
                                                    //         Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Size = FontUnit.Medium;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 2].HorizontalAlign = HorizontalAlign.Center;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 2].VerticalAlign = VerticalAlign.Middle;
                                                    //          Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 2].Font.Size = FontUnit.Medium;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 1].VerticalAlign = VerticalAlign.Middle;
                                                    //        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                                                }
                                                else if (strgrade != "" && strgrade != null && intermark != 0 && intermark != null)
                                                {
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 3].Text = dsuni.Tables[0].Rows[0]["internal_mark"].ToString();
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 2].Text = dsuni.Tables[0].Rows[0]["grade"].ToString();
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 1].Text = dsuni.Tables[0].Rows[0]["grade"].ToString();
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 3].HorizontalAlign = HorizontalAlign.Center;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 3].VerticalAlign = VerticalAlign.Middle;
                                                    //         Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Size = FontUnit.Medium;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 2].HorizontalAlign = HorizontalAlign.Center;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 2].VerticalAlign = VerticalAlign.Middle;
                                                    //          Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 2].Font.Size = FontUnit.Medium;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 1].VerticalAlign = VerticalAlign.Middle;
                                                    //         Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                tottet = ((subjectctot * no_column));
                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 4);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Total Marks Obtained";
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].VerticalAlign = VerticalAlign.Middle;
                //      Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 4);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Maximum Marks";
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].VerticalAlign = VerticalAlign.Middle;
                //      Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = ">60 %";
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 2, 1, 2);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = " % of Marks";
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].VerticalAlign = VerticalAlign.Middle;
                //      Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].VerticalAlign = VerticalAlign.Middle;
                //       Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 4);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Class Rank";
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].VerticalAlign = VerticalAlign.Middle;
                //      Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 4);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Class - Attended Hours";
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].VerticalAlign = VerticalAlign.Middle;
                //          Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 4);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Attendance - Total Hours Conducted";
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].VerticalAlign = VerticalAlign.Middle;
                //        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 2);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = ">85 %";
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 2, 1, 2);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = "Attendance %";
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].VerticalAlign = VerticalAlign.Middle;
                //       Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].VerticalAlign = VerticalAlign.Middle;
                //       Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 4);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Progress Card Sent to the Parents on";
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].VerticalAlign = VerticalAlign.Middle;
                //       Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                Fpsmarks.Sheets[0].AddSpanCell(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, 4);
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = "Student's Signature";
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].VerticalAlign = VerticalAlign.Middle;
                //       Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Height = 100 + (10 * Convert.ToInt32(Fpsmarks.Sheets[0].RowCount));
                Fpsmarks.Sheets[0].PageSize = Fpsmarks.Sheets[0].RowCount;
                for (int z = 4; z <= tcolcount - 1; z++)
                {
                    double tot = 0;
                    string mcriteriano1 = Convert.ToString(Fpsmarks.Sheets[0].Cells[8, z].Note);
                    if (mcriteriano1 != "" && mcriteriano1 != null)
                    {
                        if (Convert.ToDouble(GetCorrespondingKey(Convert.ToString(mcriteriano1), criteriatothat)) != null && Convert.ToDouble(GetCorrespondingKey(Convert.ToString(mcriteriano1), criteriatothat)) != 0)
                        {
                            tot = Convert.ToDouble(GetCorrespondingKey(Convert.ToString(mcriteriano1), criteriatothat));
                        }
                        else
                        {
                            tot = 0;
                        }
                        examdate = GetFunction("select min(exam_date) from exam_type where criteria_no='" + mcriteriano1 + "' and sections='" + sectionv + "' ");
                        DateTime examdv = Convert.ToDateTime(examdate);
                        int examday = examdv.Day;
                        int exammonth = examdv.Month;
                        int examyear = examdv.Year;
                        examdate = examday + "/" + exammonth + "/" + examyear;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 9, z].HorizontalAlign = HorizontalAlign.Center;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 9, z].Text = tot.ToString();
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 9, z].HorizontalAlign = HorizontalAlign.Center;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 9, z].VerticalAlign = VerticalAlign.Middle;
                        //              Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 9, z].Font.Size = FontUnit.Medium;
                        int maxv = Convert.ToInt32(Fpsmarks.Sheets[0].Cells[9, z].Text);
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 8, z].HorizontalAlign = HorizontalAlign.Center;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 8, z].VerticalAlign = VerticalAlign.Middle;
                        //           Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 8, z].Font.Size = FontUnit.Medium;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 8, z].Text = (subjectctot * maxv).ToString();
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 7, z].HorizontalAlign = HorizontalAlign.Center;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 7, z].VerticalAlign = VerticalAlign.Middle;
                        //           Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 7, z].Font.Size = FontUnit.Medium;
                        decimal tempperce = Convert.ToDecimal(tot / subjectctot);
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 7, z].Text = Convert.ToString(Decimal.Parse(tempperce.ToString("0.00")));
                        failv = Convert.ToInt32(GetCorrespondingKey(Convert.ToString(mcriteriano1), htv3));
                        if (failv == 0)
                        {
                            rankov3 = overallperformprint(mcriteriano1, hcrollno);
                        }
                        else
                        {
                            rankov3 = "-";
                        }
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 6, z].VerticalAlign = VerticalAlign.Middle;
                        //            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 6, z].Font.Size = FontUnit.Medium;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 6, z].HorizontalAlign = HorizontalAlign.Center;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 6, z].Text = rankov3.ToString();
                        con.Close();
                        con.Open();
                        string attnd_points = "select *from leave_points";
                        SqlDataAdapter da_attnd_pts;
                        da_attnd_pts = new SqlDataAdapter(attnd_points, con);
                        da_attnd_pts.Fill(ds_attnd_pts);
                        if (ds_attnd_pts.Tables[0].Rows.Count > 0)
                        {
                            holi_leav = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["leave_bef_aft"].ToString());
                            holi_absent = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["absent_bef_aft"].ToString());
                            leav_pt = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["leave"].ToString());
                            absent_pt = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["absent"].ToString());
                        }
                        ds1.Dispose();
                        ds1.Reset();
                        hat.Clear();
                        hat.Add("degree_code", degreecodev);
                        hat.Add("sem_ester", int.Parse(semesterv));
                        ds = d2.select_method("period_attnd_schedule", hat, "sp");
                        if (ds.Tables[0].Rows.Count != 0)
                        {
                            NoHrs = int.Parse(ds.Tables[0].Rows[0]["PER DAY"].ToString());
                            fnhrs = int.Parse(ds.Tables[0].Rows[0]["I_HALF_DAY"].ToString());
                            anhrs = int.Parse(ds.Tables[0].Rows[0]["II_HALF_DAY"].ToString());
                            minpresI = int.Parse(ds.Tables[0].Rows[0]["MIN PREE I DAY"].ToString());
                            minpresII = int.Parse(ds.Tables[0].Rows[0]["MIN PREE II DAY"].ToString());
                        }
                        hat.Clear();
                        hat.Add("colege_code", Session["collegecode"].ToString());
                        ds1 = d2.select_method("ATT_MASTER_SETTING", hat, "sp");
                        count = ds1.Tables[0].Rows.Count;
                        //persentmonthcal(examdate, strtdate);
                        per_con_hrs = per_workingdays1;
                        per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / per_con_hrs) * 100);
                        if (per_per_hrs != null && tot_per_hrs_spl_fals != null)
                        {
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 5, z].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 5, z].Text = (per_per_hrs + tot_per_hrs_spl_fals).ToString();
                        }
                        if (per_con_hrs != null && tot_conduct_hr_spl_fals != null)
                        {
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 4, z].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 4, z].Text = (per_con_hrs + tot_conduct_hr_spl_fals).ToString(); //per_con_hrs.ToString();
                        }
                        if (per_tage_hrs != null && Convert.ToString(per_tage_hrs) != "" && Convert.ToString(per_tage_hrs) != "NaN")
                        {
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 3, z].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 3, z].Text = Convert.ToString(Decimal.Parse(per_tage_hrs.ToString("0.00")));
                        }
                        else
                        {
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 3, z].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 3, z].Text = Convert.ToString("-");
                        }
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 5, z].VerticalAlign = VerticalAlign.Middle;
                        //           Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 5, z].Font.Size = FontUnit.Medium;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 4, z].VerticalAlign = VerticalAlign.Middle;
                        //            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 4, z].Font.Size = FontUnit.Medium;
                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 3, z].VerticalAlign = VerticalAlign.Middle;
                        //            Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 3, z].Font.Size = FontUnit.Medium;
                    }
                }
                string year = getYear(Convert.ToInt32(semesterv));
                string studdetail = "   Degree :" + lbldegree.Text.ToString() + "    Batch :" + batchyearv + "    " + year.ToString() + "  " + "Year    " + lbl_semOrTerm.Text + " :" + semesterv + "    Section :" + sectionv;
                string studdetail3 = "     Name :" + studname + "          Roll No :" + hcrollno + "     Reg.No :" + regn;
                Fpsmarks.Sheets[0].AddSpanCell(0, 0, 2, Fpsmarks.Sheets[0].ColumnCount - 3);
                Fpsmarks.Sheets[0].Cells[0, 0].Text = studdetail.ToString();
                Fpsmarks.Sheets[0].Cells[0, 0].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[0, 0].VerticalAlign = VerticalAlign.Middle;
                //      Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].AddSpanCell(2, 0, 2, Fpsmarks.Sheets[0].ColumnCount - 3);
                Fpsmarks.Sheets[0].Cells[2, 0].Text = studdetail3.ToString();
                Fpsmarks.Sheets[0].Cells[2, 0].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[2, 0].VerticalAlign = VerticalAlign.Middle;
                //       Fpsmarks.Sheets[0].Cells[2, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].AddSpanCell(4, 0, 1, Fpsmarks.Sheets[0].ColumnCount - 3);
                Fpsmarks.Sheets[0].Cells[4, 0].Text = "    Faculty Adviser :".ToString();
                Fpsmarks.Sheets[0].Cells[4, 0].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[4, 0].VerticalAlign = VerticalAlign.Middle;
                //         Fpsmarks.Sheets[0].Cells[4, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].AddSpanCell(5, 0, 1, Fpsmarks.Sheets[0].ColumnCount - 3);
                Fpsmarks.Sheets[0].Cells[5, 0].Text = "    Ward Counsellor :".ToString();
                Fpsmarks.Sheets[0].Cells[5, 0].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[5, 0].VerticalAlign = VerticalAlign.Middle;
                //      Fpsmarks.Sheets[0].Cells[5, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].AddSpanCell(0, Fpsmarks.Sheets[0].ColumnCount - 3, 1, Fpsmarks.Sheets[0].ColumnCount - 1);
                Fpsmarks.Sheets[0].Cells[0, Fpsmarks.Sheets[0].ColumnCount - 3].Text = "Previous History";
                Fpsmarks.Sheets[0].Cells[0, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[0, Fpsmarks.Sheets[0].ColumnCount - 3].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[0, Fpsmarks.Sheets[0].ColumnCount - 3].VerticalAlign = VerticalAlign.Middle;
                //        Fpsmarks.Sheets[0].Cells[0, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].AddSpanCell(1, Fpsmarks.Sheets[0].ColumnCount - 3, 1, Fpsmarks.Sheets[0].ColumnCount - 1);
                Fpsmarks.Sheets[0].Cells[1, Fpsmarks.Sheets[0].ColumnCount - 3].Text = "Before Coming Here...";
                Fpsmarks.Sheets[0].Cells[1, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[1, Fpsmarks.Sheets[0].ColumnCount - 3].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[1, Fpsmarks.Sheets[0].ColumnCount - 3].VerticalAlign = VerticalAlign.Middle;
                //        Fpsmarks.Sheets[0].Cells[1, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Size = FontUnit.Medium;
                string hscpolystr = GetFunction("select percentage from stud_prev_details as s,textvaltable as t where app_no= (select app_no from registration where roll_no='" + hcrollno + "')  and t.textcode=s.course_code and ((textval like '%XII%') or (textval like '%HSLC%') or (textval like '%Higher Secondary%') or (textval like '%12%') or (textval like '%Twelth%') or (textval like '%HSC%') or (textval like '%Diploma%') or (textval like '%H.SC(SB)%') or (textval like '%DIPLOMA%'))");
                if (hscpolystr == null || hscpolystr == "")
                {
                    hscpolystr = "-";
                }
                Fpsmarks.Sheets[0].AddSpanCell(2, Fpsmarks.Sheets[0].ColumnCount - 3, 1, Fpsmarks.Sheets[0].ColumnCount - 1);
                Fpsmarks.Sheets[0].Cells[2, Fpsmarks.Sheets[0].ColumnCount - 3].Text = "XII/Poly Marks %   :" + hscpolystr.ToString();
                Fpsmarks.Sheets[0].Cells[2, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[2, Fpsmarks.Sheets[0].ColumnCount - 3].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[2, Fpsmarks.Sheets[0].ColumnCount - 3].VerticalAlign = VerticalAlign.Middle;
                //      Fpsmarks.Sheets[0].Cells[2, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].AddSpanCell(3, Fpsmarks.Sheets[0].ColumnCount - 3, 1, Fpsmarks.Sheets[0].ColumnCount - 1);
                Fpsmarks.Sheets[0].Cells[3, Fpsmarks.Sheets[0].ColumnCount - 3].Text = "After Coming Here...";
                Fpsmarks.Sheets[0].Cells[3, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[3, Fpsmarks.Sheets[0].ColumnCount - 3].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[3, Fpsmarks.Sheets[0].ColumnCount - 3].VerticalAlign = VerticalAlign.Middle;
                //       Fpsmarks.Sheets[0].Cells[3, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Size = FontUnit.Medium;
                con.Close();
                con.Open();
                string attnd_points1 = "select *from leave_points";
                SqlDataAdapter da_attnd_pts1;
                da_attnd_pts1 = new SqlDataAdapter(attnd_points1, con);
                da_attnd_pts1.Fill(ds_attnd_pts);
                if (ds_attnd_pts.Tables[0].Rows.Count > 0)
                {
                    holi_leav = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["leave_bef_aft"].ToString());
                    holi_absent = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["absent_bef_aft"].ToString());
                    leav_pt = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["leave"].ToString());
                    absent_pt = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["absent"].ToString());
                }
                ds1.Dispose();
                ds1.Reset();
                hat.Clear();
                hat.Add("degree_code", degreecodev);
                hat.Add("sem_ester", int.Parse(semesterv));
                ds = d2.select_method("period_attnd_schedule", hat, "sp");
                if (ds.Tables[0].Rows.Count != 0)
                {
                    NoHrs = int.Parse(ds.Tables[0].Rows[0]["PER DAY"].ToString());
                    fnhrs = int.Parse(ds.Tables[0].Rows[0]["I_HALF_DAY"].ToString());
                    anhrs = int.Parse(ds.Tables[0].Rows[0]["II_HALF_DAY"].ToString());
                    minpresI = int.Parse(ds.Tables[0].Rows[0]["MIN PREE I DAY"].ToString());
                    minpresII = int.Parse(ds.Tables[0].Rows[0]["MIN PREE II DAY"].ToString());
                }
                hat.Clear();
                hat.Add("colege_code", Session["collegecode"].ToString());
                ds1 = d2.select_method("ATT_MASTER_SETTING", hat, "sp");
                count = ds1.Tables[0].Rows.Count;
                DateTime dtexamdate = DateTime.Now.Date;
                int day, month, yearvex;
                day = dtexamdate.Day;
                month = dtexamdate.Month;
                yearvex = dtexamdate.Year;
                examdate = day + "/" + month + "/" + yearvex;
                persentmonthcal(examdate, strtdate);
                per_con_hrs = per_workingdays1;
                per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / per_con_hrs) * 100);
                // Fpsmarks.Sheets[0].AddSpanCell(4, Fpsmarks.Sheets[0].ColumnCount - 3, 1, 1);
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 3].Text = "Attendance %";
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 3].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 3].VerticalAlign = VerticalAlign.Middle;
                //        Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Size = FontUnit.Medium;
                // Fpsmarks.Sheets[0].AddSpanCell(5, Fpsmarks.Sheets[0].ColumnCount - 3, 1, 1);
                if (per_tage_hrs != null && Convert.ToString(per_tage_hrs) != "" && Convert.ToString(per_tage_hrs) != "NaN")
                {
                    Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 3].Text = (Convert.ToString(Decimal.Parse(per_tage_hrs.ToString("0.00"))));
                    Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 3].HorizontalAlign = HorizontalAlign.Center;
                    Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 3].HorizontalAlign = HorizontalAlign.Center;
                    Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 3].VerticalAlign = VerticalAlign.Middle;
                    //            Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 3].Font.Size = FontUnit.Medium;
                }
                else
                {
                    Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 3].HorizontalAlign = HorizontalAlign.Center;
                    Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 3].Text = Convert.ToString("-");
                }
                //  Fpsmarks.Sheets[0].AddSpanCell(4, Fpsmarks.Sheets[0].ColumnCount - 2, 1, 1);
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 2].Text = "Arrears ";
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 2].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 2].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 2].VerticalAlign = VerticalAlign.Middle;
                //         Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 2].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 1].Text = "Cummulative Marks %";
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Bold = true;
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 1].VerticalAlign = VerticalAlign.Middle;
                //         Fpsmarks.Sheets[0].Cells[4, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                string strarrcount = "Select isnull(Subject_Code,'') as scode , isnull(subjecT_name,'') as sname , semester from subject,syllabus_master as smas where smas.syll_code = subject.syll_code and subject_no in (select distinct subject_no from mark_entry where subject_no not in (select distinct subject_no from mark_entry where passorfail=1 and result='Pass' and ltrim(rtrim(roll_no))='" + hcrollno + "') and roll_no ='" + hcrollno + "' and Semester >= '1' and Semester <= '" + semesterv + "')";
                string arrcount = string.Empty;
                DataSet dsarrcount = new DataSet();
                dsarrcount = d2.select_method(strarrcount, hat, "Text");
                if (dsarrcount.Tables[0].Rows.Count > 0)
                {
                    arrcount = Convert.ToString(dsarrcount.Tables[0].Rows.Count);
                }
                else
                {
                    arrcount = "-";
                }
                // Fpsmarks.Sheets[0].AddSpanCell(5, Fpsmarks.Sheets[0].ColumnCount - 2, 1, 1);
                Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 2].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 2].Text = Convert.ToString(arrcount);
                Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 2].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 2].VerticalAlign = VerticalAlign.Middle;
                //     Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 2].Font.Size = FontUnit.Medium;
                string cgpav = Calculete_CGPA(hcrollno, semesterv, degreecodev, batchyearv, latmode);
                if (cgpav == null || cgpav == "")
                {
                    cgpav = "-";
                }
                Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 1].Text = cgpav.ToString();
                Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 1].VerticalAlign = VerticalAlign.Middle;
                //         Fpsmarks.Sheets[0].Cells[5, Fpsmarks.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].AddSpanCell(6, 0, 2, Fpsmarks.Sheets[0].ColumnCount);
                Fpsmarks.Sheets[0].AutoPostBack = true;
            }
        }
        catch (Exception exy)
        {
            string vetri = exy.ToString();
        }
    }

    public void persentmonthcal(string examdate, string strtdate)
    {
        Boolean isadm = false;
        // try
        {
            int my_un_mark = 0;
            int njdate_mng = 0, njdate_evng = 0;
            int per_holidate_mng = 0, per_holidate_evng = 0;
            mng_conducted_half_days = 0;
            evng_conducted_half_days = 0;
            notconsider_value = 0;
            int demfcal, demtcal;
            string monthcal;
            conduct_hour_new = 0;
            //  if (rows_count == 0)
            {
                string dt = strtdate;//"semstartdate"
                string[] dsplit = dt.Split(new Char[] { '/' });
                strtdate = dsplit[2].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[0].ToString();
                demfcal = int.Parse(dsplit[2].ToString());
                demfcal = demfcal * 12;
                cal_from_date = demfcal + int.Parse(dsplit[1].ToString());
                monthcal = cal_from_date.ToString();
                dt = examdate;//examconductdate
                dsplit = dt.Split(new Char[] { '/' });
                examdate = dsplit[2].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[0].ToString();
                demtcal = int.Parse(dsplit[2].ToString());
                demtcal = demtcal * 12;
                cal_to_date = demtcal + int.Parse(dsplit[1].ToString());
                per_from_date = Convert.ToDateTime(strtdate);
                per_to_date = Convert.ToDateTime(examdate);
            }
            dumm_from_date = per_from_date;
            string admdate = admdatev.ToString();//rows_count===0 coz roll no fror loop
            string[] admdatesp = admdate.Split(new Char[] { '/' });
            admdate = admdatesp[2].ToString() + "/" + admdatesp[1].ToString() + "/" + admdatesp[0].ToString();
            Admission_date = Convert.ToDateTime(admdate);
            dd = Convert.ToString(hcrollno);
            hat.Clear();
            hat.Add("std_rollno", hcrollno);
            hat.Add("from_month", cal_from_date);
            hat.Add("to_month", cal_to_date);
            ds2 = d2.select_method("STUD_ATTENDANCE", hat, "sp");
            mmyycount = ds2.Tables[0].Rows.Count;
            moncount = mmyycount - 1;
            if (rows_count == 0)
            {
                hat.Clear();
                hat.Add("degree_code", int.Parse(degreecodev));
                hat.Add("sem", int.Parse(semesterv));
                hat.Add("from_date", strtdate.ToString());
                hat.Add("to_date", examdate.ToString());
                hat.Add("coll_code", int.Parse(Session["collegecode"].ToString()));
                //------------------------------------------------------------------
                int iscount = 0;
                holidaycon.Close();
                holidaycon.Open();
                string sqlstr_holiday = "select  isnull(count(holiday_date),0)as cnt FROM holidayStudents where holiday_date between '" + strtdate.ToString() + "' and '" + examdate.ToString() + "' and degree_code=" + semesterv + " and semester=" + semesterv + "";
                SqlCommand cmdholiday = new SqlCommand(sqlstr_holiday, holidaycon);
                SqlDataAdapter daholiday = new SqlDataAdapter(cmdholiday);
                DataSet dsholiday = new DataSet();
                daholiday.Fill(dsholiday);
                if (dsholiday.Tables[0].Rows.Count > 0)
                {
                    iscount = Convert.ToInt16(dsholiday.Tables[0].Rows[0]["cnt"].ToString());
                }
                hat.Add("iscount", iscount);
                ds3 = d2.select_method("ALL_HOLIDATE_DETAILS", hat, "sp");
                Dictionary<string, int> holiday_table1 = new Dictionary<string, int>();
                Dictionary<string, int> holiday_table2 = new Dictionary<string, int>();
                Dictionary<string, int> holiday_table3 = new Dictionary<string, int>();
                holiday_table11.Clear();
                holiday_table21.Clear();
                holiday_table31.Clear();
                if (ds3.Tables[0].Rows.Count != 0)
                {
                    for (int k = 0; k < ds3.Tables[0].Rows.Count; k++)
                    {
                        if (ds3.Tables[0].Rows[0]["halforfull"].ToString() == "False")
                        {
                            halforfull = "0";
                        }
                        else
                        {
                            halforfull = "1";
                        }
                        if (ds3.Tables[0].Rows[0]["morning"].ToString() == "False")
                        {
                            mng = "0";
                        }
                        else
                        {
                            mng = "1";
                        }
                        if (ds3.Tables[0].Rows[0]["evening"].ToString() == "False")
                        {
                            evng = "0";
                        }
                        else
                        {
                            evng = "1";
                        }
                        holiday_sched_details = halforfull + "*" + mng + "*" + evng;
                        string[] split_date_time1 = ds3.Tables[0].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                        string[] dummy_split = split_date_time1[0].Split('/');
                        holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                    }
                }
                if (ds3.Tables[1].Rows.Count != 0)
                {
                    for (int k = 0; k < ds3.Tables[1].Rows.Count; k++)
                    {
                        string[] split_date_time1 = ds3.Tables[1].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                        string[] dummy_split = split_date_time1[0].Split('/');
                        holiday_table21.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
                        if (ds3.Tables[1].Rows[k]["halforfull"].ToString() == "False")
                        {
                            halforfull = "0";
                        }
                        else
                        {
                            halforfull = "1";
                        }
                        if (ds3.Tables[1].Rows[k]["morning"].ToString() == "False")
                        {
                            mng = "0";
                        }
                        else
                        {
                            mng = "1";
                        }
                        if (ds3.Tables[1].Rows[k]["evening"].ToString() == "False")
                        {
                            evng = "0";
                        }
                        else
                        {
                            evng = "1";
                        }
                        holiday_sched_details = halforfull + "*" + mng + "*" + evng;
                        if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                        }
                        holiday_table2.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
                    }
                }
                if (ds3.Tables[2].Rows.Count != 0)
                {
                    int k = 0;
                lbl:
                    for (; k < ds3.Tables[2].Rows.Count; k++)
                    {
                        string[] split_date_time1 = ds3.Tables[2].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                        string[] dummy_split = split_date_time1[0].Split('/');
                        string vholidaydate = string.Empty;
                        vholidaydate = dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0];
                        if (holiday_table31.Contains(Convert.ToString(vholidaydate)))
                        {
                            k = k + 1;
                            goto lbl;
                        }
                        else
                        {
                            holiday_table31.Add(vholidaydate, k);
                        }
                        if (ds3.Tables[2].Rows[k]["halforfull"].ToString() == "False")
                        {
                            halforfull = "0";
                        }
                        else
                        {
                            halforfull = "1";
                        }
                        if (ds3.Tables[2].Rows[k]["morning"].ToString() == "False")
                        {
                            mng = "0";
                        }
                        else
                        {
                            mng = "1";
                        }
                        if (ds3.Tables[2].Rows[k]["evening"].ToString() == "False")
                        {
                            evng = "0";
                        }
                        else
                        {
                            evng = "1";
                        }
                        holiday_sched_details = halforfull + "*" + mng + "*" + evng;
                        if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                        }
                        holiday_table3.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
                    }
                }
                //=====================================14/5/12 PRABHA
                con.Close();
                cmd.CommandText = "select rights from  special_hr_rights where usercode='30'";
                cmd.Connection = con;
                con.Open();
                SqlDataReader dr_rights_spl_hr = cmd.ExecuteReader();
                if (dr_rights_spl_hr.HasRows)
                {
                    while (dr_rights_spl_hr.Read())
                    {
                        string spl_hr_rights = string.Empty;
                        Hashtable od_has = new Hashtable();
                        spl_hr_rights = dr_rights_spl_hr["rights"].ToString();
                        if (spl_hr_rights == "True" || spl_hr_rights == "true")
                        {
                            splhr_flag = true;
                        }
                    }
                }
            }
            //===================================
            //------------------------------------------------------------------
            if (ds3.Tables[0].Rows.Count != 0)
            {
                ts = DateTime.Parse(ds3.Tables[0].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                diff_date = Convert.ToString(ts.Days);
                dif_date1 = double.Parse(diff_date.ToString());
            }
            next = 0;
            if (ds2.Tables[0].Rows.Count != 0)
            {
                int rowcount = 0;
                int ccount;
                ccount = ds3.Tables[1].Rows.Count;
                ccount = ccount - 1;
                //if ( == ds2.Tables [0].Rows [mmyycount].["Month_year"])
                while (dumm_from_date <= (per_to_date))
                {
                    isadm = false;
                    if (dumm_from_date >= Admission_date)
                    {
                        isadm = true;
                        int temp_unmark = 0;
                        if (splhr_flag == true)
                        {
                            getspecial_hr();
                        }
                        for (int i = 1; i <= mmyycount; i++)
                        {
                            if (cal_from_date == int.Parse(ds2.Tables[0].Rows[next]["month_year"].ToString()))
                            {
                                string[] split_date_time1 = dumm_from_date.ToString().Split(' ');
                                string[] dummy_split = split_date_time1[0].Split('/');
                                if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()))
                                {
                                    holiday_table11.Add(((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()), "3*0*0");
                                }
                                if (holiday_table11.Contains((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()))
                                {
                                    value_holi_status = GetCorrespondingKey(dummy_split[1].ToString() + "/" + dummy_split[0].ToString() + "/" + dummy_split[2].ToString(), holiday_table11).ToString();
                                    split_holiday_status = value_holi_status.Split('*');
                                    if (split_holiday_status[0].ToString() == "3")//=========ful day working day
                                    {
                                        split_holiday_status_1 = "1";
                                        split_holiday_status_2 = "1";
                                    }
                                    else if (split_holiday_status[0].ToString() == "1")//=============half day working day
                                    {
                                        if (split_holiday_status[1].ToString() == "1")//==============mng holiday//evng working day
                                        {
                                            split_holiday_status_1 = "0";
                                            split_holiday_status_2 = "1";
                                        }
                                        if (split_holiday_status[2].ToString() == "1")//==============evng holiday//mng working day
                                        {
                                            split_holiday_status_1 = "1";
                                            split_holiday_status_2 = "0";
                                        }
                                    }
                                    else if (split_holiday_status[0].ToString() == "0")
                                    {
                                        dumm_from_date = dumm_from_date.AddDays(1);
                                        if (dumm_from_date.Day == 1)
                                        {
                                            cal_from_date++;
                                            if (moncount > next)
                                            {
                                                next++;
                                            }
                                        }
                                        break;
                                    }
                                    if (ds3.Tables[1].Rows.Count != 0)
                                    {
                                        ts = DateTime.Parse(ds3.Tables[1].Rows[rowcount]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                                        diff_date = Convert.ToString(ts.Days);
                                        dif_date = double.Parse(diff_date.ToString());
                                    }
                                    else
                                    {
                                        dif_date = 0;
                                    }
                                    if (dif_date == 1)
                                    {
                                        leave_pointer = holi_leav;
                                        absent_pointer = holi_absent;
                                    }
                                    else if (dif_date == -1)
                                    {
                                        leave_pointer = holi_leav;
                                        absent_pointer = holi_absent;
                                        if (ccount > rowcount)
                                        {
                                            rowcount += 1;
                                        }
                                    }
                                    else
                                    {
                                        leave_pointer = leav_pt;
                                        absent_pointer = absent_pt;
                                    }
                                    if (ds3.Tables[2].Rows.Count != 0)
                                    {
                                        ts = DateTime.Parse(ds3.Tables[2].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                                        diff_date = Convert.ToString(ts.Days);
                                        dif_date = double.Parse(diff_date.ToString());
                                        if (dif_date == 1)
                                        {
                                            leave_pointer = holi_leav;
                                            absent_pointer = holi_absent;
                                        }
                                    }
                                    if (dif_date1 == -1)
                                    {
                                        leave_pointer = holi_leav;
                                        absent_pointer = holi_absent;
                                    }
                                    dif_date1 = 0;
                                    if (split_holiday_status_1 == "1")
                                    {
                                        for (i = 1; i <= fnhrs; i++)
                                        {
                                            date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
                                            value = ds2.Tables[0].Rows[next][date].ToString();
                                            if (value != null && value != "0" && value != "7" && value != "")
                                            {
                                                if (tempvalue != value)
                                                {
                                                    tempvalue = value;
                                                    for (int j = 0; j < count; j++)
                                                    {
                                                        if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                                        {
                                                            ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                                            j = count;
                                                        }
                                                    }
                                                }
                                                if (ObtValue == 1)
                                                {
                                                    per_abshrs += 1;
                                                }
                                                else if (ObtValue == 2)
                                                {
                                                    notconsider_value += 1;
                                                    njhr += 1;
                                                }
                                                else if (ObtValue == 0)
                                                {
                                                    per_perhrs += 1;
                                                    tot_per_hrs += 1;
                                                }
                                                if (value == "3")
                                                {
                                                    per_ondu += 1;
                                                    tot_ondu += 1;
                                                }
                                                else if (value == "10")
                                                {
                                                    per_leave += 1;
                                                }
                                                else if (value == "4")
                                                {
                                                    tot_ml += 1;
                                                }
                                            }
                                            else if (value == "7")
                                            {
                                                per_hhday += 1;
                                            }
                                            else
                                            {
                                                unmark += 1;
                                                temp_unmark++;
                                                my_un_mark++;//added 080812
                                            }
                                        }
                                        //  if (per_perhrs >= minpresI)
                                        if (per_perhrs + njhr >= minpresI)
                                        {
                                            Present += 0.5;
                                        }
                                        else if (per_leave >= 1)
                                        {
                                            leave_point += leave_pointer / 2;
                                            Leave += 0.5;
                                        }
                                        else if (per_abshrs >= 1)
                                        {
                                            Absent += 0.5;
                                            absent_point += absent_pointer / 2;
                                        }
                                        if (njhr >= minpresI)
                                        {
                                            njdate += 0.5;
                                            njdate_mng += 1;
                                        }
                                        if (per_ondu >= 1)
                                        {
                                            Onduty += 0.5;
                                        }
                                        if (temp_unmark == fnhrs)
                                        {
                                            per_holidate_mng += 1;
                                            per_holidate += 0.5;
                                            unmark = 0;
                                        }
                                        else
                                        {
                                            dum_unmark = temp_unmark;
                                        }
                                        if (fnhrs - temp_unmark >= minpresI)
                                        {
                                            workingdays += 0.5;
                                        }
                                        mng_conducted_half_days += 1;
                                    }
                                    per_perhrs = 0;
                                    per_ondu = 0;
                                    per_leave = 0;
                                    per_abshrs = 0;
                                    //   unmark = 0;
                                    temp_unmark = 0;
                                    njhr = 0;
                                    int k = fnhrs + 1;
                                    if (split_holiday_status_2 == "1")
                                    {
                                        for (i = k; i <= NoHrs; i++)
                                        {
                                            date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
                                            value = ds2.Tables[0].Rows[next][date].ToString();
                                            if (value != null && value != "0" && value != "7" && value != "")
                                            {
                                                if (tempvalue != value)
                                                {
                                                    tempvalue = value;
                                                    for (int j = 0; j < count; j++)
                                                    {
                                                        if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                                        {
                                                            ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                                            j = count;
                                                        }
                                                    }
                                                }
                                                if (ObtValue == 1)
                                                {
                                                    per_abshrs += 1;
                                                }
                                                else if (ObtValue == 2)
                                                {
                                                    notconsider_value += 1;
                                                    njhr += 1;
                                                }
                                                else if (ObtValue == 0)
                                                {
                                                    per_perhrs += 1;
                                                    tot_per_hrs += 1;
                                                }
                                                if (value == "3")
                                                {
                                                    per_ondu += 1;
                                                    tot_ondu += 1;
                                                }
                                                else if (value == "10")
                                                {
                                                    per_leave += 1;
                                                }
                                                if (value == "4")
                                                {
                                                    tot_ml += 1;
                                                }
                                            }
                                            else if (value == "7")
                                            {
                                                per_hhday += 1;
                                            }
                                            else
                                            {
                                                unmark += 1;
                                                temp_unmark++;
                                                my_un_mark++; //added 080812
                                            }
                                        }
                                        //   if (per_perhrs >= minpresII)
                                        if (per_perhrs + njhr >= minpresII)
                                        {
                                            Present += 0.5;
                                        }
                                        else if (per_leave >= 1)
                                        {
                                            leave_point += leave_pointer / 2;
                                            Leave += 0.5;
                                        }
                                        else if (per_abshrs >= 1)
                                        {
                                            Absent += 0.5;
                                            absent_point += absent_pointer / 2;
                                        }
                                        if (njhr >= minpresII)
                                        {
                                            njdate_evng += 1;
                                            njdate += 0.5;
                                        }
                                        if (per_ondu >= 1)
                                        {
                                            Onduty += 0.5;
                                        }
                                        if (temp_unmark == NoHrs - fnhrs)
                                        {
                                            per_holidate_evng += 1;
                                            per_holidate += 0.5;
                                            unmark = 0;
                                        }
                                        else
                                        {
                                            dum_unmark += unmark;
                                        }
                                        if ((NoHrs - fnhrs) - temp_unmark >= minpresII)
                                        {
                                            workingdays += 0.5;
                                        }
                                        evng_conducted_half_days += 1;
                                    }
                                    per_perhrs = 0;
                                    per_ondu = 0;
                                    per_leave = 0;
                                    per_abshrs = 0;
                                    unmark = 0; //hided
                                    njhr = 0;
                                    dumm_from_date = dumm_from_date.AddDays(1);
                                    if (dumm_from_date.Day == 1)
                                    {
                                        cal_from_date++;
                                        if (moncount > next)
                                        {
                                            next++;
                                        }
                                    }
                                    per_perhrs = 0;
                                }
                            }
                            else
                            {
                                //DateTime dumm_fdate = dumm_from_date.AddDays(1 - Convert.ToInt16(dumm_from_date.Day.ToString()));
                                //dumm_fdate = dumm_fdate.AddMonths(1);
                                //dumm_from_date = dumm_fdate;
                                dumm_from_date = dumm_from_date.AddDays(1);
                                if (dumm_from_date.Day == 1)
                                {
                                    cal_from_date++;
                                    if (moncount > next)
                                    {
                                        next++; //  next++;
                                    }
                                }
                                //if (moncount > next)
                                //{
                                //    i--;
                                //}
                            }
                        }
                    }
                    if (isadm == false)
                    {
                        dumm_from_date = dumm_from_date.AddDays(1);
                        if (dumm_from_date.Day == 1)
                        {
                            cal_from_date++;
                            if (moncount > next)
                            {
                                next++;
                            }
                        }
                    }
                }
                int diff_Date = per_from_date.Day - dumm_from_date.Day;
            }
            per_tot_ondu = tot_ondu;
            per_tot_ml = tot_ml;
            per_njdate = njdate;
            pre_present_date = Present - njdate;
            per_per_hrs = tot_per_hrs;
            per_absent_date = Absent;
            pre_ondu_date = Onduty;
            pre_leave_date = Leave;
            // per_workingdays = workingdays - per_holidate - per_njdate;
            per_workingdays = workingdays - per_njdate;
            per_workingdays1 = ((mng_conducted_half_days * fnhrs) + (evng_conducted_half_days * (NoHrs - fnhrs))) - ((Convert.ToInt16(per_holidate_mng) * fnhrs) + (Convert.ToInt16(per_holidate_evng) * (NoHrs - fnhrs))) - notconsider_value - dum_unmark; //dum_unmark hided on 08.08.12 // ((Convert.ToInt16(njdate_mng) * fnhrs) + (Convert.ToInt16(njdate_evng) * (NoHrs - fnhrs)));
            per_workingdays1 = (((mng_conducted_half_days * fnhrs) + (evng_conducted_half_days * (NoHrs - fnhrs))) - my_un_mark) - notconsider_value; //added on 08.08.12,notconsider value added for hr suspension,09.08.12 mythili
            //  per_workingdays1 = ((mng_conducted_half_days * fnhrs) + (evng_conducted_half_days * (NoHrs - fnhrs))) -  notconsider_value - dum_unmark;
            per_dum_unmark = dum_unmark; //hided on 08.08.12
            Present = 0;
            tot_per_hrs = 0;
            Absent = 0;
            Onduty = 0;
            Leave = 0;
            workingdays = 0;
            per_holidate = 0;
            dum_unmark = 0;
            absent_point = 0;
            leave_point = 0;
            njdate = 0;
            tot_ondu = 0;
            tot_ml = 0;
        }
        //   catch
        {
        }
    }

    public void getspecial_hr()
    {
        //  try
        {
            con_splhr_query_master.Close();
            con_splhr_query_master.Open();
            DataSet ds_splhr_query_master = new DataSet();
            //  no_stud_flag = false;
            string splhr_query_master = "select attendance from specialhr_attendance sa,registration r where hrdet_no in(select hrdet_no from specialhr_details where hrentry_no=(select hrentry_no from  specialhr_master where batch_year=" + batchyearv + " and semester=" + semesterv + " and degree_code=" + degreecodev + " and date='" + dumm_from_date + "')  ) and r.roll_no=sa.roll_no and batch_year=" + batchyearv + " and current_semester=" + semesterv + " and degree_code=" + degreecodev + "  and (CC = 0)  AND (DelFlag = 0)  AND (Exam_Flag <> 'debar') and sa.roll_no='" + dd + "' ";
            SqlDataReader dr_splhr_query_master;
            cmd = new SqlCommand(splhr_query_master, con_splhr_query_master);
            dr_splhr_query_master = cmd.ExecuteReader();
            while (dr_splhr_query_master.Read())
            {
                if (dr_splhr_query_master.HasRows)
                {
                    value = dr_splhr_query_master[0].ToString();
                    if (value != null && value != "0" && value != "7" && value != "")
                    {
                        if (tempvalue != value)
                        {
                            tempvalue = value;
                            for (int j = 0; j < count; j++)
                            {
                                if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                {
                                    ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                    j = count;
                                }
                            }
                        }
                        if (ObtValue == 1)
                        {
                            per_abshrs_spl += 1;
                        }
                        else if (ObtValue == 2)
                        {
                            notconsider_value += 1;
                            njhr += 1;
                        }
                        else if (ObtValue == 0)
                        {
                            tot_per_hrs_spl += 1;
                        }
                        if (value == "3")
                        {
                            tot_ondu_spl += 1;
                        }
                        else if (value == "10")
                        {
                            per_leave += 1;
                        }
                        if (value == "4")
                        {
                            tot_ml_spl += 1;
                        }
                        tot_conduct_hr_spl++;
                    }
                    else if (value == "7")
                    {
                        per_hhday_spl += 1;
                        tot_conduct_hr_spl--;
                    }
                    else
                    {
                        unmark_spl += 1;
                        tot_conduct_hr_spl--;
                    }
                }
            }
            per_abshrs_spl_fals = per_abshrs_spl;
            tot_per_hrs_spl_fals = tot_per_hrs_spl;
            per_leave_fals = per_leave;
            tot_conduct_hr_spl_fals = tot_conduct_hr_spl;
            tot_ondu_spl_fals = tot_ondu_spl;
            tot_ml_spl_fals = tot_ml_spl;
        }
        //  catch
        {
        }
    }

    private string Calculete_CGPA(string RollNo, string semval, string degree_code, string batch_year, string latmode)
    {
        string sqlcmdgraderstotal = string.Empty;
        sqlcmdgraderstotal = " select distinct frange,trange,credit_points,mark_grade  from grade_master where degree_code=" + degree_code + " and batch_year=" + batch_year + " and college_code=" + Session["collegecode"] + "";
        dggradetot = d2.select_method(sqlcmdgraderstotal, hat, "Text");
        int jvalue = 0;
        string gradestr = string.Empty;
        string ccva = string.Empty;
        string strgrade = string.Empty;
        double creditval = 0;
        double finalgpa1 = 0;
        double creditsum1 = 0;
        double gpacal1 = 0;
        int se = 0;
        string latsem = string.Empty;
        string latsemmax = string.Empty;
        string strsubcrd = string.Empty;
        string graders = string.Empty;
        for (jvalue = 1; jvalue <= Convert.ToInt32(semval); jvalue++)
        {
            gtempejval = jvalue;
            syll_code = GetFunction("select distinct syll_code from syllabus_master where degree_code=" + degree_code + " and semester =" + jvalue + " and batch_year=" + batch_year + "");
            if (syll_code != "")
            {
                if (jvalue == Convert.ToInt32(semval))
                {
                    examcodevalg = GetFunction("select distinct exam_code from exam_details where degree_code='" + degree_code + "' and batch_year=" + batch_year + " and current_semester='" + jvalue + "' ");
                    if (examcodevalg != "" && examcodevalg != null)
                    {
                        strsubcrd = " Select Subject.credit_points,Mark_Entry.total,Mark_Entry.grade from Mark_Entry,Subject where Mark_Entry.Subject_No = Subject.Subject_No and Exam_Code = " + examcodevalg + "  and roll_no='" + RollNo + "' and (result='Pass' or result='pass') and attempts=1";
                    }
                    else
                    {
                    }
                }
                else
                {
                    strsubcrd = "Select Subject.credit_points,Mark_Entry.total,Mark_Entry.grade from Mark_Entry,Subject where Mark_Entry.Subject_No = Subject.Subject_No and syll_Code = " + syll_code + "  and roll_no='" + RollNo + "' and (result='Pass' or result='pass')and exam_code in (select distinct exam_code from exam_details where degree_code=" + degree_code + " and batch_year=" + batch_year + " and current_semester<=" + semval + ")";
                }
            }
            if (strsubcrd != null && strsubcrd != "")
            {
                SqlCommand cmd_subcrd = new SqlCommand(strsubcrd, con_subcrd);
                con_subcrd.Close();
                con_subcrd.Open();
                SqlDataReader dr_subcrd;
                dr_subcrd = cmd_subcrd.ExecuteReader();
                while (dr_subcrd.Read())
                {
                    if (dr_subcrd.HasRows)
                    {
                        if ((dr_subcrd["total"].ToString() != string.Empty))
                        {
                            if (dggradetot != null && dggradetot.Tables[0] != null && dggradetot.Tables[0].Rows.Count > 0)
                            {
                                strtot = Convert.ToDouble(dr_subcrd["total"].ToString());
                                foreach (DataRow gratemp in dggradetot.Tables[0].Rows)
                                {
                                    if (gratemp["frange"].ToString() != null && gratemp["frange"].ToString() != "" && gratemp["trange"].ToString() != null && gratemp["trange"].ToString() != "")
                                    {
                                        strgradetempfrm = Convert.ToDouble(gratemp["frange"].ToString());
                                        strgradetempto = Convert.ToDouble(gratemp["trange"].ToString());
                                        if (strgradetempfrm <= strtot && strgradetempto >= strtot)
                                        {
                                            strgrade = gratemp["credit_points"].ToString();
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        else if ((dr_subcrd["grade"].ToString() != string.Empty))
                        {
                            if (dggradetot != null && dggradetot.Tables[0] != null && dggradetot.Tables[0].Rows.Count > 0)
                            {
                                strtotgrac = Convert.ToString(dr_subcrd["grade"].ToString());
                                foreach (DataRow gratemp in dggradetot.Tables[0].Rows)
                                {
                                    strgradetempgrade = Convert.ToString(gratemp["mark_grade"].ToString());
                                    if (strgradetempgrade.ToString().Trim() == strtotgrac.ToString().Trim())
                                    {
                                        strgrade = gratemp["credit_points"].ToString();
                                        break;
                                    }
                                }
                            }
                        }
                        creditval = Convert.ToDouble(dr_subcrd["credit_points"].ToString());
                        if (creditsum1 == 0)
                        {
                            creditsum1 = Convert.ToDouble(dr_subcrd["credit_points"].ToString());
                        }
                        else
                        {
                            creditsum1 = creditsum1 + Convert.ToDouble(dr_subcrd["credit_points"].ToString());
                        }
                        if (gpacal1 == 0)
                        {
                            if (strgrade != "")
                            {
                                gpacal1 = Convert.ToDouble(strgrade) * creditval;
                            }
                        }
                        else
                        {
                            if (strgrade != "")
                            {
                                gpacal1 = gpacal1 + (Convert.ToDouble(strgrade) * creditval);
                            }
                        }
                    }
                }
            }
            if (creditsum1 != 0)
            {
                if (finalgpa1 == 0)
                {
                    finalgpa1 = Math.Round((gpacal1 / creditsum1), 2);
                }
                else
                {
                    finalgpa1 = finalgpa1 + Math.Round((gpacal1 / creditsum1), 2);
                }
            }
            creditsum1 = 0;
            gpacal1 = 0;
            creditval = 0;
            strgrade = string.Empty;
        }
        string strlatsem = "select min(semester) as semmin,max(semester) as semmax from subjectchooser where roll_no='" + RollNo + "'";
        dssem = d2.select_method(strlatsem, hat, "TEXT");
        if (dssem != null && dssem.Tables[0] != null && dssem.Tables[0].Rows.Count > 0)
        {
            latsem = Convert.ToString(dssem.Tables[0].Rows[0]["semmin"]);
            latsemmax = Convert.ToString(dssem.Tables[0].Rows[0]["semmax"]);
        }
        int latsemes = 0;
        string calculate = string.Empty;
        if (Convert.ToInt32(semval) >= Convert.ToInt32(latsem) && Convert.ToInt32(latsemmax) >= Convert.ToInt32(semval))
        {
            for (se = Convert.ToInt32(latsem); se <= Convert.ToInt32(semval); se++)
            {
                latsemes = latsemes + 1;
            }
        }
        else if (Convert.ToInt32(semval) >= Convert.ToInt32(latsemmax) && Convert.ToInt32(latsemmax) >= Convert.ToInt32(latsem))
        {
            for (se = Convert.ToInt32(latsem); se <= Convert.ToInt32(latsemmax); se++)
            {
                latsemes = latsemes + 1;
            }
        }
        if (Convert.ToInt32(latmode) == 1)
        {
            calculate = Math.Round((finalgpa1 / Convert.ToInt32(latsemes)), 2).ToString();
        }
        else
        {
            calculate = Math.Round((finalgpa1 / Convert.ToInt32(latsemes)), 2).ToString();
        }
        return calculate;
    }

    protected string overallperformprint(string mcriteriano, string hcrollno)
    {
        int subjectcount = 0;
        string rankov = string.Empty;
        Session["rank1roll"] = string.Empty;
        string sem = semesterv;
        string sec = sectionv;
        string test = mcriteriano;
        //'-------------------------------------------------------mythili start----------------------------------------'
        //'-------------------------------------------- Query for Get the subjectno,sub code,acronym ,examdate,minmrk,maxmrk,entrydate and examcode
        string filterwithsection = "a.app_no=r.app_no and r.degree_code='" + degreecodev.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + batchyearv.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no ='" + mcriteriano.ToString() + "' and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0   and r.sections='" + sectionv.ToString() + "' ORDER BY s.subject_no";
        string filterwithoutsection = "a.app_no=r.app_no and r.degree_code='" + degreecodev.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + batchyearv.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no ='" + mcriteriano.ToString() + "' and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0 ORDER BY s.subject_no";
        hat.Clear();
        hat.Add("filterwithsection", filterwithsection.ToString());
        hat.Add("filterwithoutsection", filterwithoutsection.ToString());
        hat.Clear();
        hat.Add("batchyear", batchyearv);
        hat.Add("degreecode", degreecodev);
        hat.Add("criteria_no", mcriteriano.ToString());
        hat.Add("sections", sectionv);
        hat.Add("filterwithsection", filterwithsection.ToString());
        hat.Add("filterwithoutsection", filterwithoutsection.ToString());
        ds2.Clear();
        ds2.Reset();
        ds2 = d2.select_method("PROC_STUD_ALL_SUBMARK", hat, "sp");
        string sections = string.Empty;
        string strsec = string.Empty;
        double find_total = 0;
        int sum_max_mark = 0;
        double percent = 0;
        int fail_sub_cnt = 0;
        int ra_nk = 0;
        sections = sectionv;
        ds4.Clear();
        ds4.Reset();
        ds4 = d2.select_method_wo_parameter("Delete_Rank_Table", "sp");
        if (ds2.Tables[0].Rows.Count > 0)
        {
            ds1.Clear();
            ds1.Reset();
            sqlStr = "select distinct len(registration.Roll_No),registration.Roll_No as roll,registration.Reg_No as regno,registration.stud_name as studname,registration.stud_type as studtype,registration.App_No as ApplicationNumber from registration, applyn a,exam_type et,result rt where a.app_no=registration.app_no and registration.degree_code=" + degreecodev + "   and registration.batch_year=" + batchyearv + "  and RollNo_Flag<>0 and cc=0 and exam_flag <> 'DEBAR' and delflag=0   and registration.sections='" + sectionv + "' and  rt.exam_code=et.exam_code and registration.roll_no=rt.roll_no and et.criteria_no =" + mcriteriano + " order by  len(registration.Roll_No),roll";
            ds1 = d2.select_method(sqlStr, hat, "Text");
            int subrow = 0;
            if (ds1.Tables[0].Rows.Count > 0)
            {
                for (int row = 0; row < ds1.Tables[0].Rows.Count; row++)
                {
                    fail_sub_cnt = 0;
                    find_total = 0;
                    sum_max_mark = 0;
                    for (int j = 0; j < ds2.Tables[1].Rows.Count; j++)
                    {
                        if (subrow < Convert.ToInt32(ds2.Tables[0].Rows.Count))
                        {
                            if (ds1.Tables[0].Rows[row]["roll"].ToString() == ds2.Tables[0].Rows[subrow]["roll"].ToString())
                            {
                                if (ds2.Tables[1].Rows[j]["min_mark"].ToString() != "" && ds2.Tables[1].Rows[j]["min_mark"].ToString() != null)
                                {
                                    if (double.Parse(ds2.Tables[0].Rows[subrow]["mark"].ToString()) != -2 && double.Parse(ds2.Tables[0].Rows[subrow]["mark"].ToString()) != -1 && double.Parse(ds2.Tables[0].Rows[subrow]["mark"].ToString()) != -3 && (double.Parse(ds2.Tables[0].Rows[subrow]["mark"].ToString()) < double.Parse(ds2.Tables[1].Rows[j]["min_mark"].ToString())))
                                    {
                                        fail_sub_cnt++;
                                    }
                                    if (double.Parse(ds2.Tables[0].Rows[subrow]["mark"].ToString()) >= 0 && (double.Parse(ds2.Tables[0].Rows[subrow]["mark"].ToString()) >= Convert.ToDouble(ds2.Tables[1].Rows[j]["min_mark"].ToString())))
                                    {
                                        //'---------------total,percent,rank-------------------------------
                                        find_total = (Convert.ToDouble(find_total) + Convert.ToDouble(ds2.Tables[0].Rows[subrow]["mark"].ToString()));
                                        sum_max_mark = sum_max_mark + Convert.ToInt32(ds2.Tables[1].Rows[j]["max_mark"].ToString());
                                        percent = Convert.ToDouble((Convert.ToDouble(find_total) / sum_max_mark) * 100);
                                    }
                                }
                            }
                        }
                        subrow++;
                    }
                    if (fail_sub_cnt == 0)
                    {
                        hat.Clear();
                        hat.Add("RollNumber", ds1.Tables[0].Rows[row]["roll"].ToString());
                        hat.Add("criteria_no", mcriteriano.ToString());
                        hat.Add("Total", find_total.ToString());
                        hat.Add("avg", percent.ToString());
                        hat.Add("rank", "");
                        int o = d2.insert_method("INSERT_RANK", hat, "sp");
                    }
                }
                //'--------------------------------insert the rank---------------------------------
                ra_nk = 1;
                ds3.Clear();
                ds3.Reset();
                ds3 = d2.select_method_wo_parameter("SELECT_RANK", "sp");
                if (ds3.Tables[0].Rows.Count != 0)
                {
                    //---------------------new rank 030412
                    double temp_rank = 0;
                    int zx = 1;
                    for (int rank = 0; rank < ds3.Tables[0].Rows.Count; rank++)
                    {
                        if (temp_rank == 0)
                        {
                            ra_nk = 1;
                            hat.Clear();
                            hat.Add("RollNumber", ds3.Tables[0].Rows[rank]["Rollno"].ToString());
                            hat.Add("criteria_no", degreecodev);
                            hat.Add("Total", Convert.ToString(find_total));
                            hat.Add("avg", Convert.ToString(percent));
                            hat.Add("rank", ra_nk.ToString());
                            int o = d2.insert_method("INSERT_RANK", hat, "sp");
                            temp_rank = double.Parse(ds3.Tables[0].Rows[rank]["Total"].ToString());
                            if (hcrollno == ds3.Tables[0].Rows[rank]["Rollno"].ToString())
                            {
                                break;
                            }
                        }
                        else if (temp_rank != 0)
                        {
                            if (temp_rank > double.Parse(ds3.Tables[0].Rows[rank]["Total"].ToString()))
                            {
                                //   ra_nk += 1;
                                ra_nk = zx;
                                hat.Clear();
                                hat.Add("RollNumber", ds3.Tables[0].Rows[rank]["Rollno"].ToString());
                                hat.Add("criteria_no", degreecodev);
                                hat.Add("Total", Convert.ToString(find_total));
                                hat.Add("avg", Convert.ToString(percent)); ;
                                hat.Add("rank", ra_nk.ToString());
                                int o = d2.insert_method("INSERT_RANK", hat, "sp");
                                temp_rank = double.Parse(ds3.Tables[0].Rows[rank]["Total"].ToString());
                                if (hcrollno == ds3.Tables[0].Rows[rank]["Rollno"].ToString())
                                {
                                    break;
                                }
                            }
                            else if (temp_rank == double.Parse(ds3.Tables[0].Rows[rank]["Total"].ToString()))
                            {
                                hat.Clear();
                                hat.Add("RollNumber", ds3.Tables[0].Rows[rank]["Rollno"].ToString());
                                hat.Add("criteria_no", degreecodev);
                                hat.Add("Total", Convert.ToString(find_total));
                                hat.Add("avg", Convert.ToString(percent));
                                hat.Add("rank", ra_nk.ToString());
                                int o = d2.insert_method("INSERT_RANK", hat, "sp");
                                temp_rank = double.Parse(ds3.Tables[0].Rows[rank]["Total"].ToString());
                                if (hcrollno == ds3.Tables[0].Rows[rank]["Rollno"].ToString())
                                {
                                    break;
                                }
                            }
                        }
                        zx++;
                    }
                }
            }
            if (ds3.Tables[0].Rows.Count > 0)
            {
                if (ds3.Tables[0].Rows.Count != 0)
                {
                    ds3.Clear();
                    ds3.Reset();
                    ds3 = d2.select_method_wo_parameter("SELECT_RANK", "sp");
                    for (int i = 0; i < ds3.Tables[0].Rows.Count; i++)
                    {
                        if (hcrollno == ds3.Tables[0].Rows[i]["rollno"].ToString())
                        {
                            rnkv = ds3.Tables[0].Rows[i]["Rank"].ToString();
                            break;
                        }
                    }
                }
            }
        }
        rankov = rnkv;
        return rankov;
    }

    public string GetFunction(string Att_strqueryst)
    {
        string sqlstr = string.Empty;
        sqlstr = Att_strqueryst;
        getsql.Close();
        getsql.Open();
        SqlDataReader drnew;
        SqlCommand cd = new SqlCommand(sqlstr);
        cd.Connection = getsql;
        drnew = cd.ExecuteReader();
        drnew.Read();
        if (drnew.HasRows == true)
        {
            return drnew[0].ToString();
        }
        else
        {
            return "";
        }
    }

    protected void Buttoninmark_Click(object sender, EventArgs e)
    {
        initmarks();
        int excode = -1;
        string tot = "0";
        int len1 = 0, len2 = 0;
        Fpsmarks.Visible = true;
        Fpsmarks.Sheets[0].ColumnCount = 4;
        Fpsmarks.ColumnHeader.Visible = true;
        Fpsmarks.Columns.Default.Width = 200;
        Fpsmarks.Rows.Default.Height = 20;
        Fpsmarks.TitleInfo.Text = "Internal Marks";
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpsmarks.Columns[0].Width = 40;
        Fpsmarks.Columns[0].HorizontalAlign = HorizontalAlign.Center;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Subject Code";
        Fpsmarks.Columns[1].Width = 90;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Subject Name";
        Fpsmarks.Columns[2].Width = 480;
        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Marks Obtained";
        Fpsmarks.Columns[3].Width = 80;
        Fpsmarks.Columns[3].HorizontalAlign = HorizontalAlign.Center;
        cmd.CommandText = "Select degree_code,current_semester,batch_year,Roll_No from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            {
                cmd.CommandText = "Select Exam_Code from Exam_Details where Degree_Code = " + rroll.GetValue(0).ToString() + " and Current_Semester = " + rroll.GetValue(1).ToString() + " and Batch_Year = " + rroll.GetValue(2).ToString() + "";
                cmd.Connection = con1;
                con1.Open();
                SqlDataReader rex = cmd.ExecuteReader();
                if (rex.Read())
                    excode = Convert.ToInt32(rex.GetValue(0).ToString());
                con1.Close();
                rex.Close();
            }
            cmd.CommandText = "Select S.Subject_Code,subject_name, S.Subject_no, S.max_int_marks,SS.Subject_Type from Subject as s, Sub_Sem as ss ,Syllabus_Master as SMas where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code and  SS.Syll_Code = S.Syll_Code and S.SubType_no = SS.Subtype_no and SS.Promote_Count = 1 and SMas.Degree_Code = " + rroll.GetValue(0).ToString() + "and SMas.Batch_Year =" + rroll.GetValue(2).ToString() + " and SMas.Semester = " + rroll.GetValue(1).ToString() + " order by SS.SubType_No, s.subject_no";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rexam = cmd.ExecuteReader();
            if (rexam.HasRows)
                while (rexam.Read())
                {
                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = Fpsmarks.Sheets[0].RowCount.ToString();
                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text = rexam.GetValue(0).ToString();
                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = rexam.GetValue(1).ToString();
                    int l1 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text.Length;
                    if (len1 < l1)
                        len1 = l1;
                    int l2 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text.Length;
                    if (len2 < l2)
                        len2 = l2;
                    if (excode == -1)
                    {
                        cmd.CommandText = "Select isnull(total,0)  from camarks where subject_no =" + rexam.GetValue(2).ToString() + " and roll_no='" + rroll.GetValue(3).ToString() + "'";
                        cmd.Connection = con2;
                        con2.Open();
                        SqlDataReader rtemp = cmd.ExecuteReader();
                        if (rtemp.Read())
                            tot = rtemp.GetValue(0).ToString();
                        rtemp.Close();
                        con2.Close();
                    }
                    else
                    {
                        cmd.CommandText = "Select isnull(internal_mark,0)  from mark_entry where subject_no =" + rexam.GetValue(2).ToString() + " and roll_no='" + rroll.GetValue(3).ToString() + "' and exam_code=" + excode.ToString() + "";
                        cmd.Connection = con2;
                        con2.Open();
                        SqlDataReader rtemp = cmd.ExecuteReader();
                        if (rtemp.Read())
                            tot = rtemp.GetValue(0).ToString();
                        rtemp.Close();
                        con2.Close();
                    }
                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = tot;
                }
            rexam.Close();
            con1.Close();
        }
        rroll.Close();
        con.Close();
        if (Fpsmarks.Sheets[0].RowCount > 0)
        {
            for (int j = 0; j < Fpsmarks.Sheets[0].RowCount; j++)
            {
                Fpsmarks.Rows[j].Font.Name = "Book Antiqua";
                Fpsmarks.Rows[j].Font.Size = FontUnit.Medium;
            }
            int lenth = len1 * 11;
            if (lenth < 65)
                lenth = 65;
            Fpsmarks.Columns[1].Width = lenth;
            Fpsmarks.Columns[2].Width = len2 * 11;
            int widt = 0; int heights = 0;
            for (int len = 0; len < Fpsmarks.Sheets[0].ColumnCount; len++)
                widt = widt + Fpsmarks.Sheets[0].Columns[len].Width;
            if (widt > 900)
            {
                heights = 16;
                widt = 900;
                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            }
            else
            {
                Fpsmarks.Width = widt;
                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            }
            heights = heights + (Fpsmarks.Rows.Default.Height * Fpsmarks.Sheets[0].RowCount) + 75;
            if (heights >= 500)
            {
                Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                Fpsmarks.Height = 500;
                Fpsmarks.Width = widt + 16;
            }
            else if (heights < 500)
            {
                Fpsmarks.Height = heights;
                Fpsmarks.Width = widt;
            }
            Fpsmarks.SaveChanges();
        }
        else
        {
            Fpsmarks.Sheets[0].ColumnCount = 0;
            Fpsmarks.Sheets[0].RowCount = 0;
            Fpsmarks.ColumnHeader.Columns.Default.Width = 150;
            Fpsmarks.Sheets[0].ColumnCount = 4;
            Fpsmarks.Sheets[0].RowCount = 1;
            Fpsmarks.ColumnHeader.Columns.Default.Width = 150;
            Fpsmarks.ColumnHeader.Visible = false;
            Fpsmarks.Sheets[0].SpanModel.Add(0, 0, 1, 4);
            Fpsmarks.Width = 600;
            Fpsmarks.Height = 45;
            Fpsmarks.Sheets[0].Cells[0, 0].Text = "No information Available";
            Fpsmarks.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpsmarks.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
            Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpsmarks.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
            Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            Fpsmarks.SaveChanges();
        }
    }

    protected void Buttonextmark_Click(object sender, EventArgs e)
    {
        initmarks();
        Fpsmarks.Visible = true;
        Fpsmarks.ColumnHeader.Visible = true;
        Fpsmarks.Columns.Default.Width = 100;
        int excode = -1, sem = 0, count = 0, l = 0, temp = 0;
        Fpsmarks.TitleInfo.Text = "External Marks";
        string sql = string.Empty; int len1 = 0, len2 = 0;
        cmd.CommandText = "Select degree_code,current_semester,batch_year,Roll_No from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            sem = Convert.ToInt32(rroll.GetValue(1).ToString());
            for (int k = 1; k <= sem; k++)
            {
                {
                    cmd.CommandText = "Select top 1 isnull(Exam_Code,-1),exam_month,exam_year from Exam_Details where Degree_Code = " + rroll.GetValue(0).ToString() + " and Current_Semester = " + k + " and Batch_Year = " + rroll.GetValue(2).ToString() + " order by exam_year desc";
                    cmd.Connection = con1;
                    con1.Open();
                    SqlDataReader rex = cmd.ExecuteReader();
                    if (rex.Read())
                    {
                        excode = Convert.ToInt32(rex.GetValue(0).ToString());
                        if (excode == -1)
                        {
                            rex.Close();
                            con1.Close();
                            break;
                        }
                        cmd.CommandText = "Select grade_flag from grademaster where degree_code=" + rroll.GetValue(0).ToString() + " and exam_month= " + rex.GetValue(1).ToString() + " and exam_year=" + rex.GetValue(2).ToString() + " and batch_year=" + rroll.GetValue(2).ToString();
                        cmd.Connection = con2;
                        con2.Open();
                        SqlDataReader rgrade = cmd.ExecuteReader();
                        if (rgrade.HasRows)
                        {
                            count = 1;
                            Fpsmarks.Sheets[0].ColumnCount = 8;
                        }
                        else
                        {
                            Fpsmarks.Sheets[0].ColumnCount = 7;
                            count = 0;
                        }
                        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Subject Code";
                        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Subject Name";
                        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Internal Marks";
                        Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 4].Text = "External Marks";
                        Fpsmarks.Columns[0].Width = 40;
                        Fpsmarks.Columns[0].HorizontalAlign = HorizontalAlign.Center;
                        Fpsmarks.Columns[3].HorizontalAlign = HorizontalAlign.Center;
                        Fpsmarks.Columns[4].HorizontalAlign = HorizontalAlign.Center;
                        Fpsmarks.Columns[1].Width = 80;
                        Fpsmarks.Columns[3].Width = 65;
                        Fpsmarks.Columns[4].Width = 65;
                        if (count > 0)
                        {
                            Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Grade";
                            Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Total";
                            Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Result";
                            Fpsmarks.Columns[5].Width = 50;
                            Fpsmarks.Columns[6].Width = 50;
                            Fpsmarks.Columns[7].Width = 50;
                            Fpsmarks.Columns[5].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Columns[6].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Columns[7].HorizontalAlign = HorizontalAlign.Center;
                        }
                        else
                        {
                            Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Total";
                            Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Result";
                            Fpsmarks.Columns[5].Width = 50;
                            Fpsmarks.Columns[6].Width = 50;
                            Fpsmarks.Columns[5].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Columns[6].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (rgrade.Read())
                        {
                            if (rgrade.GetValue(0).ToString() == "3")
                            {
                                sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select datename(mm,str(exam_month) + '/01/2000') + str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
                                sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
                                sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
                                sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  and result='pass' ";
                                sql = sql + " and roll_no = '" + rroll.GetValue(3).ToString() + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no and syllabus_master.semester=" + k + "  and me.exam_code =" + excode + "";
                                temp = 3;
                            }
                            else if (rgrade.GetValue(0).ToString() == "2")
                            {
                                sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select datename(mm,str(exam_month) + '/01/2000') + str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
                                sql = sql + "case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then maxtotal else null end,";
                                sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.grade from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
                                sql = sql + "and result='pass' ";
                                sql = sql + " and roll_no = '" + rroll.GetValue(3).ToString() + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no and syllabus_master.semester=" + k + "  and me.exam_code =" + excode + "";
                                temp = 2;
                            }
                            else if (rgrade.GetValue(0).ToString() == "1")
                            {
                                sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select datename(mm,str(exam_month) + '/01/2000') + str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
                                sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
                                sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points,me.grade from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
                                sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  and result='pass' ";
                                sql = sql + " and roll_no = '" + rroll.GetValue(3).ToString() + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no and syllabus_master.semester=" + k + "  and me.exam_code =" + excode + "";
                                temp = 1;
                            }
                        }
                        else
                        {
                            sql = "select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select datename(mm,str(exam_month) + '/01/2000') + str(exam_year) from exam_details where exam_code=me.exam_code) as mon_year,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,";
                            sql = sql + "case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,";
                            sql = sql + "case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no ";
                            sql = sql + " and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks  and result='pass' ";
                            sql = sql + " and roll_no = '" + rroll.GetValue(3).ToString() + "' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no and syllabus_master.semester=" + k + "  and me.exam_code =" + excode + "";
                        }
                        rgrade.Close();
                        con2.Close();
                        cmd.CommandText = sql;
                        cmd.Connection = con2;
                        con2.Open();
                        SqlDataReader rmark = cmd.ExecuteReader();
                        if (rmark.HasRows)
                        {
                            l = 0;
                            while (rmark.Read())
                            {
                                if (l == 0)
                                {
                                    Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                                    Fpsmarks.Sheets[0].SpanModel.Add(Fpsmarks.Sheets[0].RowCount - 1, 0, 1, Fpsmarks.Sheets[0].ColumnCount);
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = lbl_semOrTerm.Text + "-" + k.ToString();
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                                }
                                Fpsmarks.Sheets[0].RowCount = Fpsmarks.Sheets[0].RowCount + 1;
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 0].Text = (l + 1).ToString();
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text = rmark["subject_code"].ToString();
                                Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text = rmark["subject_name"].ToString();
                                int l1 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 1].Text.Length;
                                if (len1 < l1)
                                    len1 = l1;
                                int l2 = Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 2].Text.Length;
                                if (len2 < l2)
                                    len2 = l2;
                                if (count > 0)
                                {
                                    if (temp == 3)
                                    {
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = rmark.GetValue(7).ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 4].Text = rmark.GetValue(10).ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 6].Text = rmark.GetValue(13).ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 7].Text = rmark.GetValue(14).ToString();
                                    }
                                    else if (temp == 2)
                                    {
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = rmark.GetValue(7).ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 4].Text = rmark.GetValue(10).ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 5].Text = rmark["grade"].ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 7].Text = rmark.GetValue(12).ToString();
                                    }
                                    else if (temp == 3)
                                    {
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = rmark.GetValue(7).ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 4].Text = rmark.GetValue(10).ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 5].Text = rmark["grade"].ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 6].Text = rmark.GetValue(13).ToString();
                                        Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 7].Text = rmark.GetValue(14).ToString();
                                    }
                                }
                                else
                                {
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 3].Text = rmark.GetValue(7).ToString();
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 4].Text = rmark.GetValue(10).ToString();
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 5].Text = rmark.GetValue(13).ToString();
                                    Fpsmarks.Sheets[0].Cells[Fpsmarks.Sheets[0].RowCount - 1, 6].Text = rmark.GetValue(14).ToString();
                                }
                                l = l + 1;
                            }
                        }
                        rmark.Close();
                        con2.Close();
                    }
                    rex.Close();
                    con1.Close();
                }
            }
        }
        rroll.Close();
        con.Close();
        if (Fpsmarks.Sheets[0].RowCount > 0)
        {
            int lenth = len1 * 11;
            if (lenth < 65)
                lenth = 65;
            Fpsmarks.Columns[1].Width = lenth;
            Fpsmarks.Columns[2].Width = len2 * 11;
            int widt = 0; int heights = 0;
            for (int len = 0; len < Fpsmarks.Sheets[0].ColumnCount; len++)
                widt = widt + Fpsmarks.Columns[len].Width;
            if (widt > 900)
            {
                heights = 16;
                widt = 900;
                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            }
            else
            {
                Fpsmarks.Width = widt;
                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            }
            heights = heights + (Fpsmarks.Rows.Default.Height * Fpsmarks.Sheets[0].RowCount) + 65;
            if (heights >= 500)
            {
                Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                Fpsmarks.Height = 500;
                Fpsmarks.Width = widt + 16;
            }
            else if (heights < 500)
            {
                Fpsmarks.Height = heights;
                Fpsmarks.Width = widt;
            }
        }
        else
        {
            Fpsmarks.Sheets[0].ColumnCount = 0;
            Fpsmarks.Sheets[0].RowCount = 0;
            Fpsmarks.Sheets[0].ColumnCount = 4;
            Fpsmarks.Sheets[0].RowCount = 1;
            Fpsmarks.ColumnHeader.Columns.Default.Width = 150;
            Fpsmarks.ColumnHeader.Visible = false;
            Fpsmarks.Sheets[0].SpanModel.Add(0, 0, 1, 4);
            Fpsmarks.Width = 600;
            Fpsmarks.Height = 50;
            Fpsmarks.Sheets[0].Cells[0, 0].Text = "No information Available";
            Fpsmarks.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpsmarks.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
            Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpsmarks.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
            Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        }
        Fpsmarks.SaveChanges();
    }

    protected void Buttonmis_Click(object sender, EventArgs e)
    {
        Fpslesson.Visible = true;
        if (tbto.Text == "" && tbfrom.Text == "")
        {
            labeldatevalid.Text = "Select date";
            labeldatevalid.Visible = true;
            Fpslesson.Visible = false;
            return;
        }
        int days = 0;
        string datefad, dtfromad;
        string datefromad;
        string yr4, m4, d4;
        datefad = tbfrom.Text.ToString();
        string[] split4 = datefad.Split(new Char[] { '-' });
        datefromad = split4[0].ToString() + "-" + split4[1].ToString() + "-" + split4[2].ToString();
        yr4 = split4[2].ToString();
        m4 = split4[1].ToString();
        d4 = split4[0].ToString();
        dtfromad = m4 + "-" + d4 + "-" + yr4;
        string date2ad;
        string datetoad;
        string yr5, m5, d5;
        date2ad = tbto.Text.ToString();
        string[] split5 = date2ad.Split(new Char[] { '-' });
        datetoad = split5[0].ToString() + "-" + split5[1].ToString() + "-" + split5[2].ToString();
        yr5 = split5[2].ToString();
        m5 = split5[1].ToString();
        d5 = split5[0].ToString();
        datetoad = m5 + "-" + d5 + "-" + yr5;
        DateTime dt1 = Convert.ToDateTime(dtfromad);
        DateTime dt2 = Convert.ToDateTime(datetoad);
        TimeSpan ts = dt2 - dt1;
        days = ts.Days;
        if (days < 0)
        {
            labeldatevalid.Text = "To Date Must be greater than from date";
            labeldatevalid.Visible = true;
            Fpslesson.Visible = false;
            return;
        }
        else
        {
            Fpslesson.Visible = true;
            Session["lesson"] = "2";
            labeldatevalid.Visible = false;
            initlesson();
            Fpslesson.Visible = true;
            Fpslesson.Sheets[0].ColumnCount = 7;
            Fpslesson.Sheets[0].RowCount = 0;
            Fpslesson.ColumnHeader.Visible = true;
            Fpslesson.RowHeader.Visible = false;
            Fpslesson.CommandBar.Visible = false;
            Fpslesson.Sheets[0].GridLines = GridLines.Both;
            Fpslesson.Sheets[0].DefaultColumnWidth = 150;
            Fpslesson.Sheets[0].DefaultRowHeight = 20;
            Fpslesson.TitleInfo.Visible = true;
            Fpslesson.TitleInfo.Text = "LESSON STATUS- Missed";
            Fpslesson.TitleInfo.Font.Size = FontUnit.Large;
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Absent Hours";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Hour Timings";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Subject Code";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Subject Name";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Staff Name";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Topics";
            Fpslesson.Sheets[0].Columns[0].Width = 40;
            Fpslesson.Sheets[0].Columns[1].Width = 100;
            Fpslesson.Sheets[0].Columns[2].Width = 130;
            Fpslesson.Sheets[0].Columns[3].Width = 60;
            Fpslesson.Sheets[0].Columns[4].Width = 210;
            Fpslesson.Sheets[0].Columns[5].Width = 160;
            Fpslesson.Sheets[0].Columns[6].Width = 200;
            tbto.Visible = true;
            tbfrom.Visible = true;
            Fpslesson.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
            int i = 0;
            string byr = string.Empty;
            string deg = string.Empty;
            string sem = string.Empty;
            string sec = string.Empty;
            string sno = string.Empty;
            string edate = string.Empty;
            string query = string.Empty;
            string rno = string.Empty;
            cmd.CommandText = "select batch_year,degree_code,current_semester,isnull(sections,''),roll_no from registration where App_No='" + appno + "'";
            cmd.Connection = con;
            con.Open();
            SqlDataReader rtoday = cmd.ExecuteReader();
            if (rtoday.Read())
            {
                byr = rtoday.GetValue(0).ToString();
                deg = rtoday.GetValue(1).ToString();
                sem = rtoday.GetValue(2).ToString();
                sec = rtoday.GetValue(3).ToString();
                rno = rtoday.GetValue(4).ToString();
                if (sec != "")
                    query = " and sections='" + sec + "' ";
            }
            rtoday.Close();
            con.Close();
            int jvalue = 0;
            string subno = string.Empty;
            string subname = string.Empty;
            string staffno = string.Empty;
            string subno1 = string.Empty;
            string subjno1 = string.Empty;
            string staffno1 = string.Empty;
            string stafno = string.Empty;
            string[] no = new string[5];
            string[] sub = new string[5];
            string[] subject = new string[5];
            string[] staff = new string[5];
            int[] count = new int[5];
            string no1 = string.Empty;
            string no2 = string.Empty;
            string l1, l;
            rtoday.Close();
            con.Close();
            string fdate = DateTime.Now.ToString("yyyy-MM-dd");
            string tday = string.Empty;
            string temp = string.Empty;
            string temp1 = string.Empty;
            string temps = string.Empty;
            string tempt = string.Empty;
            string st = string.Empty;
            string str = string.Empty;
            string[] splithr;
            string[] split;
            string[] split1;
            string[] split2;
            int len = 0;
            int col = 0;
            int hrlen = 0;
            string[] hr = new string[1000];
            string lvcode = string.Empty;
            string calc = string.Empty;
            int attendancemark = 0;
            long de1 = 0;
            string hr1 = string.Empty;
            int cnt = 0;
            int allot = 0;
            string av = string.Empty;
            int hrcount = 0;
            string leavecode = "0";
            DateTime datestart = new DateTime();
            DateTime dateend = new DateTime();
            datestart = Convert.ToDateTime(dtfromad);
            dateend = Convert.ToDateTime(datetoad);
            while (datestart <= dateend)
            {
                string day = datestart.ToString("dddd");
                if (day == "Sunday")
                    continue;
                de1 = (Convert.ToInt64(datestart.ToString("MM")) + (Convert.ToInt64(datestart.ToString("yyyy"))) * 12);
                hr1 = string.Empty;
                cnt = 0;
                allot = 0;
                av = string.Empty;
                for (int t = 1; t < 8; t++)
                {
                    cmd.CommandText = "select d" + datestart.Day.ToString() + "d" + t + "  from attendance where month_year='" + de1 + "' and  roll_no='" + Session["RollNo"] + "'";
                    cmd.Connection = con;
                    con.Open();
                    SqlDataReader rabsent = cmd.ExecuteReader();
                    if (rabsent.Read())
                    {
                        leavecode = rabsent.GetValue(0).ToString();
                        if (rabsent.GetValue(0).ToString() == null || rabsent.GetValue(0).ToString() == "-1" || rabsent.GetValue(0).ToString() == "")
                            leavecode = "0";
                        cmd.CommandText = "select calcflag from attmastersetting where leavecode=" + leavecode + "";
                        cmd.Connection = con1;
                        con1.Open();
                        SqlDataReader rcal = cmd.ExecuteReader();
                        if (rcal.Read())
                            calc = rcal.GetValue(0).ToString();
                        rcal.Close();
                        con1.Close();
                        if (calc == "1")
                        {
                            if (av != "" && cnt >= 1)
                            {
                                hr1 = hr1 + "," + t.ToString();
                                cnt = cnt + 1;
                            }
                            else if (av != "" && cnt == 0)
                            {
                                hr1 = av + "," + t.ToString();
                                cnt = cnt + 1;
                            }
                            else
                                av = t.ToString();
                        }
                    }
                    rabsent.Close();
                    con.Close();
                }
                if (hr1 != "")
                {
                    Fpslesson.Sheets[0].RowCount = Fpslesson.Sheets[0].RowCount + 1;
                    Fpslesson.Sheets[0].SpanModel.Add(Fpslesson.Sheets[0].RowCount - 1, 0, 1, Fpslesson.Sheets[0].ColumnCount);
                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Text = datestart.ToString("dd-MM-yyyy");
                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    cmd.CommandText = "Select CONVERT(VARCHAR(10),start_date,103),CONVERT(VARCHAR(10),end_date,103),semester,batch_year from seminfo where degree_code='" + deg + "' and semester='" + sem + "' and batch_year='" + byr + "'";
                    cmd.Connection = con;
                    con.Open();
                    SqlDataReader rbs = cmd.ExecuteReader();
                    if (!rbs.HasRows)
                    {
                        con.Close();
                        break;
                    }
                    if (rbs.Read())
                    {
                        if (hr1.Contains(","))
                        {
                            splithr = hr1.Split(new Char[] { ',' });
                            hrlen = splithr.Length;
                            for (int c = 0; c < splithr.Length; c++)
                            {
                                hr[c] = splithr[c].ToString();
                            }
                        }
                        else
                        {
                            hr[0] = hr1.ToString();
                            hrlen = 1;
                        }
                        jvalue = 0;
                        for (hrcount = 1; hrcount <= hrlen; hrcount++)
                        {
                            cmd.CommandText = "select desc1,RIGHT(CONVERT(VARCHAR(20),start_time,100),7),RIGHT(CONVERT(VARCHAR(20),end_time,100),7),period1 from bellschedule where  degree_code='" + deg + "' and semester='" + sem + "' and period1=" + hr[hrcount - 1].ToString() + "";
                            cmd.Connection = con1;
                            con1.Open();
                            SqlDataReader rbsed = cmd.ExecuteReader();
                            if (rbsed.Read())
                            {
                                Fpslesson.Sheets[0].RowCount = Fpslesson.Sheets[0].RowCount + 1;
                                jvalue = jvalue + 1;
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Text = jvalue.ToString();
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 1].Text = rbsed.GetValue(0).ToString();
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 2].Text = rbsed.GetValue(1).ToString() + "-" + rbsed.GetValue(2).ToString();
                            }
                            rbsed.Close();
                            con1.Close();
                            tday = datestart.ToString("ddd") + hr[hrcount - 1].ToString();
                            cmd.CommandText = "select " + tday + " from semester_schedule where degree_code='" + deg + "' and batch_year='" + byr + "' and semester='" + sem + "'and  fromDate >= " + rbs.GetValue(0).ToString() + query + " Order by FromDate Desc";
                            cmd.Connection = con2;
                            con2.Open();
                            SqlDataReader rsub = cmd.ExecuteReader();
                            if (!rsub.HasRows)
                            {
                                con2.Close();
                                break;
                            }
                            if (rsub.Read())
                            {
                                sno = rsub.GetValue(0).ToString();
                                if (sno != "")
                                {
                                    if (sno.Contains(";"))
                                    {
                                        split = sno.Split(new Char[] { ';' });
                                        len = split.Length;
                                        for (int c = 0; c < split.Length; c++)
                                        {
                                            no[c] = split[c].ToString();
                                        }
                                    }
                                    else
                                    {
                                        no[0] = sno.ToString();
                                        len = 1;
                                    }
                                    for (int c = 0; c < len; c++)
                                    {
                                        if (no[c] != "" && no[c] != null)
                                        {
                                            if (no[c].Contains("-"))
                                            {
                                                split1 = no[c].Split(new Char[] { '-' });
                                                sub[c] = split1[0].ToString() + "-" + split1[1].ToString();
                                                subject[c] = split1[0].ToString();
                                                staff[c] = split1[1].ToString();
                                            }
                                            else
                                            {
                                                subject[c] = no[c].ToString();
                                                staff[c] = string.Empty;
                                            }
                                            long result;
                                            if (long.TryParse(subject[c], out result))
                                            {
                                                cmd.CommandText = "select  subject_code,subject_name from subject where subject_No=" + subject[c] + "";
                                                cmd.Connection = con1;
                                                con1.Open();
                                                SqlDataReader rsubj = cmd.ExecuteReader();
                                                if (rsubj.Read())
                                                {
                                                    if (temp == "" && temp1 == "")
                                                    {
                                                        temp = rsubj.GetValue(0).ToString();
                                                        temp1 = rsubj.GetValue(1).ToString();
                                                        subcode.Add(rsubj.GetValue(0).ToString());
                                                        sname.Add(rsubj.GetValue(1).ToString());
                                                    }
                                                    else
                                                    {
                                                        if (temp != rsubj.GetValue(0).ToString())
                                                        {
                                                            temp = temp + ", " + rsubj.GetValue(0).ToString();
                                                            temp1 = temp1 + ", " + rsubj.GetValue(1).ToString();
                                                        }
                                                        subcode.Add(rsubj.GetValue(0).ToString());
                                                        sname.Add(rsubj.GetValue(1).ToString());
                                                    }
                                                }
                                                else
                                                {
                                                    subcode.Add("");
                                                    sname.Add("");
                                                }
                                                rsubj.Close();
                                                con1.Close();
                                                if (staff[c] != "")
                                                {
                                                    if (staff[c].Contains("-"))
                                                    {
                                                        split2 = staff[c].Split(new Char[] { '-' });
                                                        st = split2[0].ToString() + "-" + split2[1].ToString();
                                                        str = split2[0].ToString();
                                                    }
                                                    else
                                                    {
                                                        if (staff[c] != "S" || staff[c] != "s" || staff[c] != "L" || staff[c] != "L")
                                                        {
                                                            str = staff[c];
                                                        }
                                                        else
                                                        {
                                                            str = string.Empty;
                                                        }
                                                    }
                                                    if (str != "")
                                                    {
                                                        {
                                                            cmd.CommandText = "select  staff_name from staffmaster where staff_code='" + str + "'";
                                                            cmd.Connection = con1;
                                                            con1.Open();
                                                            SqlDataReader rstaf = cmd.ExecuteReader();
                                                            if (rstaf.Read())
                                                            {
                                                                if (temps == "")
                                                                {
                                                                    temps = str + "-" + rstaf.GetValue(0).ToString();
                                                                    staffname.Add(rstaf.GetValue(0).ToString());
                                                                }
                                                                else
                                                                {
                                                                    temps = temps + ", " + str + "-" + rstaf.GetValue(0).ToString();
                                                                    staffname.Add(rstaf.GetValue(0).ToString());
                                                                }
                                                            }
                                                            else
                                                            {
                                                                staffname.Add("");
                                                            }
                                                            rstaf.Close();
                                                            con1.Close();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        staffname.Add("");
                                                    }
                                                }
                                                string[] topics = new string[5];
                                                string top = string.Empty;
                                                int ln = 0;
                                                cmd.CommandText = "select distinct topics from dailyEntdet where  subject_no=" + subject[c] + " and hr=" + hr[hrcount - 1] + " and lp_code in (select lp_code from dailyStaffEntry where degree_code=" + deg + " and batch_year='" + byr + "' and semester= '" + sem + "' and sch_date='" + datestart.ToString("yyyy-MM-dd") + "' " + query + ")";
                                                cmd.Connection = con1;
                                                con1.Open();
                                                SqlDataReader rtop = cmd.ExecuteReader();
                                                if (rtop.Read())
                                                {
                                                    top = rtop.GetValue(0).ToString();
                                                    if (top != "" && top != null)
                                                    {
                                                        if (top.Contains("/"))
                                                        {
                                                            split = top.Split(new Char[] { '/' });
                                                            ln = split.Length;
                                                            for (int t = 0; t < split.Length; t++)
                                                            {
                                                                topics[t] = split[t].ToString();
                                                            }
                                                        }
                                                        else
                                                        {
                                                            ln = 1;
                                                            topics[0] = top;
                                                        }
                                                        for (int t = 0; t < ln; t++)
                                                        {
                                                            if (long.TryParse(topics[t], out result))
                                                            {
                                                                cmd.CommandText = "select distinct unit_name from sub_unit_details where topic_no=" + topics[t] + "";
                                                                cmd.Connection = con3;
                                                                con3.Open();
                                                                SqlDataReader rstop = cmd.ExecuteReader();
                                                                if (rstop.Read())
                                                                {
                                                                    if (tempt == "")
                                                                    {
                                                                        tempt = rstop.GetValue(0).ToString();
                                                                    }
                                                                    else
                                                                    {
                                                                        tempt = tempt + ", " + rstop.GetValue(0).ToString();
                                                                    }
                                                                }
                                                                rstop.Close();
                                                                con3.Close();
                                                            }
                                                        }
                                                    }
                                                }
                                                rtop.Close();
                                                con1.Close();
                                            }
                                        }
                                    }
                                }
                            }
                            rsub.Close();
                            con2.Close();
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 3].Text = temp;
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 4].Text = temp1;
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 5].Text = temps;
                            if (tempt == "")
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 6].Text = "Not Entered";
                            else
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 6].Text = tempt;
                            temp = string.Empty;
                            temp1 = string.Empty;
                            temps = string.Empty;
                            tempt = string.Empty;
                        }
                    }
                    rbs.Close();
                    con.Close();
                }
                datestart = datestart.AddDays(1);
            }
            if (Fpslesson.Sheets[0].RowCount < 2)
            {
                Fpslesson.Sheets[0].RowCount = 0;
                Fpslesson.Sheets[0].ColumnCount = 0;
                Fpslesson.Columns.Default.Width = 150;
                Fpslesson.Sheets[0].RowCount = 1;
                Fpslesson.Sheets[0].ColumnCount = 4;
                Fpslesson.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpslesson.Sheets[0].Cells[0, 0].Text = "Not Entered";
                Fpslesson.ColumnHeader.Visible = false;
                Fpslesson.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpslesson.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpslesson.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpslesson.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                Fpslesson.Width = 600;
                Fpslesson.Height = 45;
            }
            else
            {
                Fpslesson.Width = 920;
                int height = (Fpslesson.Sheets[0].RowCount * 30) + 100;
                if (height > 500)
                    Fpslesson.Height = 500;
                else
                    Fpslesson.Height = height;
                Fpslesson.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            }
        }
        Fpslesson.SaveChanges();
    }

    protected void Buttonyet_Click(object sender, EventArgs e)
    {
        Fpslesson.Visible = true;
        if (tbto.Text == "" && tbfrom.Text == "")
        {
            labeldatevalid.Text = "Select date";
            labeldatevalid.Visible = true;
            Fpslesson.Visible = false;
            return;
        }
        int days = 0;
        string datefad, dtfromad;
        string datefromad;
        string yr4, m4, d4;
        datefad = tbfrom.Text.ToString();
        string[] split4 = datefad.Split(new Char[] { '-' });
        datefromad = split4[0].ToString() + "-" + split4[1].ToString() + "-" + split4[2].ToString();
        yr4 = split4[2].ToString();
        m4 = split4[1].ToString();
        d4 = split4[0].ToString();
        dtfromad = m4 + "-" + d4 + "-" + yr4;
        string date2ad;
        string datetoad;
        string yr5, m5, d5;
        date2ad = tbto.Text.ToString();
        string[] split5 = date2ad.Split(new Char[] { '-' });
        datetoad = split5[0].ToString() + "-" + split5[1].ToString() + "-" + split5[2].ToString();
        yr5 = split5[2].ToString();
        m5 = split5[1].ToString();
        d5 = split5[0].ToString();
        datetoad = m5 + "-" + d5 + "-" + yr5;
        DateTime dt1 = Convert.ToDateTime(dtfromad);
        DateTime dt2 = Convert.ToDateTime(datetoad);
        TimeSpan ts = dt2 - dt1;
        days = ts.Days;
        if (days < 0)
        {
            labeldatevalid.Text = "To Date Must be greater than from date";
            labeldatevalid.Visible = true;
            Fpslesson.Visible = false;
            return;
        }
        else
        {
            Session["lesson"] = "3";
            labeldatevalid.Visible = false;
            Fpslesson.Visible = true;
            tbfrom.Visible = true;
            tbto.Visible = true;
            initlesson();
            Fpslesson.Visible = true;
            Fpslesson.Sheets[0].ColumnCount = 8;
            Fpslesson.Sheets[0].RowCount = 0;
            Fpslesson.ColumnHeader.Visible = true;
            Fpslesson.RowHeader.Visible = false;
            Fpslesson.CommandBar.Visible = false;
            Fpslesson.Sheets[0].GridLines = GridLines.Both;
            Fpslesson.Sheets[0].DefaultRowHeight = 20;
            Fpslesson.TitleInfo.Visible = true;
            Fpslesson.TitleInfo.Text = "LESSON STATUS- Yet";
            Fpslesson.TitleInfo.Font.Size = FontUnit.Large;
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Hour";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Start Time";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 3].Text = "End Time";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Subject Code";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Subject Name";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Staff Name";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Topics";
            Fpslesson.Sheets[0].Columns[0].Width = 40;
            Fpslesson.Sheets[0].Columns[1].Width = 100;
            Fpslesson.Sheets[0].Columns[2].Width = 75;
            Fpslesson.Sheets[0].Columns[3].Width = 75;
            Fpslesson.Sheets[0].Columns[4].Width = 150;
            Fpslesson.Sheets[0].Columns[5].Width = 200;
            Fpslesson.Sheets[0].Columns[6].Width = 160;
            Fpslesson.Sheets[0].Columns[7].Width = 100;
            tbto.Visible = true;
            tbfrom.Visible = true;
            int i = 0;
            string byr = string.Empty;
            string deg = string.Empty;
            string sem = string.Empty;
            string sec = string.Empty;
            string sno = string.Empty;
            string stdate = string.Empty;
            string edate = string.Empty;
            string query = string.Empty;
            Fpslesson.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
            cmd.CommandText = "select batch_year,degree_code,current_semester,isnull(sections,'') from registration where App_No='" + appno + "'";
            cmd.Connection = con;
            con.Open();
            SqlDataReader rtoday = cmd.ExecuteReader();
            if (rtoday.Read())
            {
                byr = rtoday.GetValue(0).ToString();
                deg = rtoday.GetValue(1).ToString();
                sem = rtoday.GetValue(2).ToString();
                sec = rtoday.GetValue(3).ToString();
                if (sec != "")
                    query = " and sections='" + sec + "' ";
            }
            rtoday.Close();
            con.Close();
            string subno = string.Empty;
            string subname = string.Empty;
            string staffno = string.Empty;
            string subno1 = string.Empty;
            string subjno1 = string.Empty;
            string staffno1 = string.Empty;
            string stafno = string.Empty;
            string[] no = new string[5];
            string[] sub = new string[5];
            string[] subject = new string[5];
            string[] staff = new string[5];
            int[] count = new int[5];
            string no1 = string.Empty;
            string no2 = string.Empty;
            string l1, l;
            int cnt = 0;
            rtoday.Close();
            con.Close();
            string s = DateTime.Now.DayOfWeek.ToString().Substring(0, 3);
            string fdate = DateTime.Now.ToString("yyyy-MM-dd");
            string tday = string.Empty;
            string temp = string.Empty;
            string temp1 = string.Empty;
            string temps = string.Empty;
            string tempt = string.Empty;
            string st = string.Empty;
            string str = string.Empty;
            string[] split;
            string[] split1;
            string[] split2;
            int len = 0;
            int serialno = 0;
            if (days >= 0)
            {
                string[] difdays = new string[days + 1];
                for (int loop = 0; loop <= days; loop++)
                {
                    difdays[loop] = dt1.AddDays(loop).ToString();
                    DateTime tdaydate = Convert.ToDateTime(difdays[loop]);
                    string day = tdaydate.ToString("dddd");
                    if (day == "Sunday")
                    {
                        Fpslesson.Sheets[0].RowCount = Fpslesson.Sheets[0].RowCount + 1;
                        Fpslesson.Sheets[0].SpanModel.Add(Fpslesson.Sheets[0].RowCount - 1, 0, 1, Fpslesson.Sheets[0].ColumnCount);
                        Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Text = dt1.AddDays(loop).ToString("dd-MM-yyyy") + "-" + day;
                        Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                        Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].BackColor = Color.AliceBlue;
                        continue;
                    }
                    {
                        cmd.CommandText = "Select CONVERT(VARCHAR(10),start_date,103),CONVERT(VARCHAR(10),end_date,103),semester,batch_year from seminfo where degree_code='" + deg + "' and semester='" + sem + "' and batch_year='" + byr + "'";
                        cmd.Connection = con1;
                        con1.Open();
                        SqlDataReader rbs = cmd.ExecuteReader();
                        if (!rbs.HasRows)
                        {
                            con1.Close();
                            break;
                        }
                        if (rbs.Read())
                        {
                            Fpslesson.Sheets[0].RowCount = Fpslesson.Sheets[0].RowCount + 1;
                            Fpslesson.Sheets[0].SpanModel.Add(Fpslesson.Sheets[0].RowCount - 1, 0, 1, Fpslesson.Sheets[0].ColumnCount);
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Text = dt1.AddDays(loop).ToString("dd-MM-yyyy") + "-" + day;
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                            stdate = rbs.GetValue(0).ToString();
                            edate = rbs.GetValue(1).ToString();
                            cmd.CommandText = "select desc1,RIGHT(CONVERT(VARCHAR(20),start_time,100),7),RIGHT(CONVERT(VARCHAR(20),end_time,100),7),period1 from bellschedule where  degree_code='" + deg + "' and semester='" + sem + "' order by period1";
                            cmd.Connection = con2;
                            con2.Open();
                            SqlDataReader rbsed = cmd.ExecuteReader();
                            if (rbsed.HasRows)
                            {
                                i = 0; serialno = 1;
                                while (rbsed.Read())
                                {
                                    Fpslesson.Sheets[0].RowCount = Fpslesson.Sheets[0].RowCount + 1;
                                    int j = 0;
                                    for (j = 0; j < 4; j++)
                                    {
                                        Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Text = serialno.ToString();
                                        Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, j + 1].Text = rbsed.GetValue(j).ToString();
                                        if (j == 3)
                                        {
                                            int result;
                                            if (int.TryParse(rbsed.GetValue(j).ToString(), out result))
                                                i++;
                                        }
                                    }
                                    serialno = serialno + 1;
                                }
                            }
                            rbsed.Close();
                            con2.Close();
                        }
                        rbs.Close();
                        con1.Close();
                    }
                    int col = i;
                    for (int k = 1; k <= col; k++)
                    {
                        tday = tdaydate.ToString("ddd") + k.ToString();
                        cmd.CommandText = "select " + tday + " from semester_schedule where degree_code='" + deg + "' and batch_year='" + byr + "' and semester='" + sem + "'and  fromDate >= " + stdate + query + " Order by FromDate Desc";
                        cmd.Connection = con;
                        con.Open();
                        SqlDataReader rsub = cmd.ExecuteReader();
                        if (!rsub.HasRows)
                        {
                            con.Close();
                            break;
                        }
                        if (rsub.Read())
                        {
                            sno = rsub.GetValue(0).ToString();
                            if (sno != "")
                            {
                                if (sno.Contains(";"))
                                {
                                    split = sno.Split(new Char[] { ';' });
                                    len = split.Length;
                                    for (int c = 0; c < split.Length; c++)
                                    {
                                        no[c] = split[c].ToString();
                                    }
                                }
                                else
                                {
                                    no[0] = sno.ToString();
                                    len = 1;
                                }
                                for (int c = 0; c < len; c++)
                                {
                                    if (no[c] != "" && no[c] != null)
                                    {
                                        if (no[c].Contains("-"))
                                        {
                                            split1 = no[c].Split(new Char[] { '-' });
                                            sub[c] = split1[0].ToString() + "-" + split1[1].ToString();
                                            subject[c] = split1[0].ToString();
                                            staff[c] = split1[1].ToString();
                                        }
                                        else
                                        {
                                            subject[c] = no[c].ToString();
                                            staff[c] = string.Empty;
                                        }
                                        long result;
                                        if (long.TryParse(subject[c], out result))
                                        {
                                            cmd.CommandText = "select  subject_code,subject_name from subject where subject_No='" + subject[c] + "'";
                                            cmd.Connection = con1;
                                            con1.Open();
                                            SqlDataReader rsubj = cmd.ExecuteReader();
                                            if (rsubj.Read())
                                            {
                                                if (temp == "" && temp1 == "")
                                                {
                                                    temp = rsubj.GetValue(0).ToString();
                                                    temp1 = rsubj.GetValue(1).ToString();
                                                    subcode.Add(rsubj.GetValue(0).ToString());
                                                    sname.Add(rsubj.GetValue(1).ToString());
                                                }
                                                else
                                                {
                                                    if (temp != rsubj.GetValue(0).ToString())
                                                    {
                                                        temp = temp + ", " + rsubj.GetValue(0).ToString();
                                                        temp1 = temp1 + ", " + rsubj.GetValue(1).ToString();
                                                    }
                                                    subcode.Add(rsubj.GetValue(0).ToString());
                                                    sname.Add(rsubj.GetValue(1).ToString());
                                                }
                                            }
                                            else
                                            {
                                                subcode.Add("");
                                                sname.Add("");
                                            }
                                            rsubj.Close();
                                            con1.Close();
                                            if (staff[c] != "")
                                            {
                                                if (staff[c].Contains("-"))
                                                {
                                                    split2 = staff[c].Split(new Char[] { '-' });
                                                    st = split2[0].ToString() + "-" + split2[1].ToString();
                                                    str = split2[0].ToString();
                                                }
                                                else
                                                {
                                                    if (staff[c] != "S" || staff[c] != "s" || staff[c] != "L" || staff[c] != "L")
                                                    {
                                                        str = staff[c];
                                                    }
                                                    else
                                                    {
                                                        str = string.Empty;
                                                    }
                                                }
                                                if (str != "")
                                                {
                                                    {
                                                        cmd.CommandText = "select  staff_name from staffmaster where staff_code='" + str + "'";
                                                        cmd.Connection = con1;
                                                        con1.Open();
                                                        SqlDataReader rstaf = cmd.ExecuteReader();
                                                        if (rstaf.Read())
                                                        {
                                                            if (temps == "")
                                                            {
                                                                temps = str + "-" + rstaf.GetValue(0).ToString();
                                                                staffname.Add(rstaf.GetValue(0).ToString());
                                                            }
                                                            else
                                                            {
                                                                temps = temps + ", " + str + "-" + rstaf.GetValue(0).ToString();
                                                                staffname.Add(rstaf.GetValue(0).ToString());
                                                            }
                                                        }
                                                        else
                                                        {
                                                            staffname.Add("");
                                                        }
                                                        rstaf.Close();
                                                        con1.Close();
                                                    }
                                                }
                                                else
                                                {
                                                    staffname.Add("");
                                                }
                                            }
                                            string[] topics = new string[5];
                                            string top = string.Empty;
                                            int ln = 0;
                                            cmd.CommandText = "select distinct topics from lessonplantopics where  subject_no=" + subject[c] + " and hr=" + k + " and lp_code in (select lp_code from lesson_plan where degree_code=" + deg + " and batch_year='" + byr + "' and semester= '" + sem + "' and sch_date='" + tdaydate + "' " + query + ")";
                                            cmd.Connection = con1;
                                            con1.Open();
                                            SqlDataReader rtop = cmd.ExecuteReader();
                                            if (rtop.Read())
                                            {
                                                top = rtop.GetValue(0).ToString();
                                                if (top != "" && top != null)
                                                {
                                                    if (top.Contains("/"))
                                                    {
                                                        split = top.Split(new Char[] { '/' });
                                                        ln = split.Length;
                                                        for (int t = 0; t < split.Length; t++)
                                                        {
                                                            topics[t] = split[t].ToString();
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ln = 1;
                                                        topics[0] = top;
                                                    }
                                                    for (int t = 0; t < ln; t++)
                                                    {
                                                        if (long.TryParse(topics[t], out result))
                                                        {
                                                            cmd.CommandText = "select distinct unit_name from sub_unit_details where topic_no=" + topics[t] + "";
                                                            cmd.Connection = con2;
                                                            con2.Open();
                                                            SqlDataReader rstop = cmd.ExecuteReader();
                                                            if (rstop.Read())
                                                            {
                                                                if (tempt == "")
                                                                {
                                                                    tempt = rstop.GetValue(0).ToString();
                                                                }
                                                                else
                                                                {
                                                                    tempt = tempt + ", " + rstop.GetValue(0).ToString();
                                                                }
                                                            }
                                                            rstop.Close();
                                                            con2.Close();
                                                        }
                                                    }
                                                }
                                            }
                                            rtop.Close();
                                            con1.Close();
                                        }
                                    }
                                }
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 4].Text = temp;
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 5].Text = temp1;
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 6].Text = temps;
                                if (tempt == "")
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 7].Text = "Not Planned";
                                else
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 7].Text = tempt;
                            }
                        }
                        else
                        {
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 4].Text = string.Empty;
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 5].Text = string.Empty;
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 6].Text = string.Empty;
                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 7].Text = string.Empty;
                        }
                        rsub.Close();
                        con.Close();
                        temp = string.Empty;
                        temp1 = string.Empty;
                        temps = string.Empty;
                        tempt = string.Empty;
                    }
                }
            }
            if (Fpslesson.Sheets[0].RowCount < 2)
            {
                Fpslesson.Sheets[0].RowCount = 0;
                Fpslesson.Sheets[0].ColumnCount = 0;
                Fpslesson.Columns.Default.Width = 150;
                Fpslesson.Sheets[0].RowCount = 1;
                Fpslesson.Sheets[0].ColumnCount = 4;
                Fpslesson.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpslesson.Sheets[0].Cells[0, 0].Text = "Not Entered";
                Fpslesson.ColumnHeader.Visible = false;
                Fpslesson.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpslesson.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpslesson.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpslesson.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                Fpslesson.Width = 600;
                Fpslesson.Height = 45;
            }
            else
            {
                Fpslesson.Width = 916;
                Fpslesson.Height = 400;
                Fpslesson.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            }
            Fpslesson.SaveChanges();
        }
    }

    protected void Buttontodaya_Click(object sender, EventArgs e)
    {

        initattendence();
        string byr = string.Empty;
        string deg = string.Empty;
        string sem = string.Empty;
        string sec = string.Empty;
        string stdate = string.Empty;
        string edate = string.Empty;
        string cc = string.Empty;
        string gender = string.Empty;
        string rollno = string.Empty;
        DateTime dtStartDate = new DateTime();
        DateTime dtEndDate = new DateTime();
        Fpsattendence.Sheets[0].AutoPostBack = false;
        //// FpSgen.Visible = true;
        semperc = false;
        //  paged();
        Boolean fflag = false;
        int starth = 0, endh = 0;
        string att = string.Empty;
        Fpsattendence.Visible = true;
        Fpsattendence.TitleInfo.Text = "TODAY ATTENDANCE DETAILS";
        Fpsattendence.TitleInfo.Font.Name = "Book Antiqua";
        Fpsattendence.ColumnHeader.Visible = true;
        Fpsattendence.Columns.Default.Width = 80;
        Fpsattendence.Rows.Default.Height = 20;

        cmd.CommandText = "select r.batch_year,r.degree_code,r.CC,r.current_semester,r.roll_no,LTRIM(RTRIM(isnull(sections,''))) as sections,case when a.sex=0 then 'Male' when a.sex=1 then 'Female' else 'Other' end as gender from registration r,applyn a where a.app_no=r.App_No and r.App_No='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rtodaya = cmd.ExecuteReader();
        if (rtodaya.Read())
        {
            byr = rtodaya.GetValue(0).ToString();
            deg = rtodaya.GetValue(1).ToString();
            cc = rtodaya.GetValue(2).ToString();
            sem = rtodaya.GetValue(3).ToString();
            rollno = rtodaya.GetValue(4).ToString();
            sec = rtodaya.GetValue(5).ToString();
            gender = rtodaya.GetValue(6).ToString();

            if (cc.ToLower() == "false")
            {
                cmd.CommandText = "Select CONVERT(VARCHAR(10),start_date,103),CONVERT(VARCHAR(10),end_date,103),semester,batch_year from seminfo where degree_code='" + deg + "' and semester='" + sem + "' and batch_year='" + byr + "'";
                cmd.Connection = con1;
                con1.Open();
                SqlDataReader rbs = cmd.ExecuteReader();
                if (rbs.Read())
                {
                    stdate = rbs.GetValue(0).ToString();
                    edate = rbs.GetValue(1).ToString();

                    DateTime.TryParseExact(stdate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtStartDate);
                    DateTime.TryParseExact(edate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtEndDate);
                    if (DateTime.Today >= dtStartDate && DateTime.Today <= dtEndDate)
                    {
                        con1.Close();
                        cmd.CommandText = "select No_of_hrs_per_day ,no_of_hrs_I_half_day ,no_of_hrs_II_half_day  from PeriodAttndSchedule where  No_of_hrs_per_day is not null and degree_code ='" + rtodaya.GetValue(1).ToString() + "' and semester='" + rtodaya.GetValue(3).ToString() + "'";
                        cmd.Connection = con1;
                        con1.Open();
                        SqlDataReader rperiod = cmd.ExecuteReader();
                        if (rperiod.Read())
                        {
                            int count = 0;
                            string s = string.Empty;
                            string qs = string.Empty;
                            count = Convert.ToInt32(rperiod.GetValue(0).ToString());
                            Fpsattendence.Sheets[0].ColumnCount = 2 + count;
                            Fpsattendence.Sheets[0].RowCount = 1;
                            Fpsattendence.ColumnHeader.Visible = true;
                            Fpsattendence.ColumnHeader.Cells[0, 0].Text = "S.No";
                            Fpsattendence.ColumnHeader.Cells[0, 1].Text = "Date";
                            Fpsattendence.Columns[0].Width = 40;
                            Fpsattendence.Columns[0].HorizontalAlign = HorizontalAlign.Center;
                            Fpsattendence.Sheets[0].Cells[0, 0].Text = "1";
                            Fpsattendence.Sheets[0].Cells[0, 1].Text = DateTime.Now.ToString("dd-MM-yyyy");
                            for (int i = 1; i <= count; i++)
                            {
                                Fpsattendence.ColumnHeader.Cells[0, i + 1].Text = i.ToString();
                                s = DateTime.Now.Day.ToString();
                                qs = qs + "d" + s + "d" + i.ToString() + ",";
                            }
                            string day = DateTime.Now.ToString("dddd");
                            if (day == "Sunday")
                            {
                                for (int i = 1; i <= count; i++)
                                    Fpsattendence.Sheets[0].Cells[0, i + 1].Text = "H";
                            }
                            else
                            {
                                int t = Convert.ToInt32(DateTime.Now.ToString("MM"));
                                int t1 = Convert.ToInt32(DateTime.Now.ToString("yyyy"));
                                int my = (t1 * 12) + t;
                                cmd.CommandText = "select " + qs + " roll_no  from attendance where month_year='" + my.ToString() + "' and roll_no='" + rtodaya.GetValue(4).ToString() + "'";
                                cmd.Connection = con2;
                                con2.Open();
                                SqlDataReader raten = cmd.ExecuteReader();
                                if (raten.Read())
                                {
                                    cmd.CommandText = "select halforfull,morning,evening from registration as r,holidaystudents as h where r.app_no='" + appno + "' and h.holiday_date='" + DateTime.Now.ToString("yyyy-MM-dd") + "' and h.degree_code=r.degree_code and r.current_semester=h.semester";
                                    cmd.Connection = con3;
                                    con3.Open();
                                    SqlDataReader rhol = cmd.ExecuteReader();
                                    if (rhol.Read())
                                    {
                                        string halforfull = rhol.GetValue(0).ToString().Trim().ToLower();
                                        string mor = rhol.GetValue(1).ToString().Trim().ToLower();
                                        string eve = rhol.GetValue(2).ToString().Trim().ToLower();
                                        if (halforfull == "0" || halforfull == "false")
                                        {
                                            for (int i = 2; i < Fpsattendence.Sheets[0].ColumnCount; i++)
                                            {
                                                Fpsattendence.Sheets[0].Cells[0, i].Text = "H";
                                                fflag = true;
                                            }
                                        }
                                        //else if (rhol.GetValue(0).ToString() == "1" && rhol.GetValue(1).ToString() == "1")
                                        else if ((halforfull == "1" && mor == "1") || (halforfull == "true" && mor == "true"))
                                        {
                                            for (int i = 0; i < Convert.ToInt32(rperiod.GetValue(1).ToString()); i++)
                                            {
                                                Fpsattendence.Sheets[0].Cells[0, i + 2].Text = "H";
                                                // flag=true;
                                            }
                                            starth = Convert.ToInt32(rperiod.GetValue(1).ToString());
                                            endh = count;
                                        }
                                        //else if (rperiod.GetValue(0).ToString() == "1" && rperiod.GetValue(2).ToString() == "1")
                                        else if ((halforfull == "1" && mor == "1") || (halforfull == "true" && mor == "true"))
                                        {
                                            for (int i = Convert.ToInt32(rperiod.GetValue(1).ToString()) - 1; i < count; i++)
                                            {
                                                Fpsattendence.Sheets[0].Cells[0, i + 2].Text = "H";
                                                //flag=true;
                                            }
                                            starth = 0;
                                            endh = Convert.ToInt32(rperiod.GetValue(1).ToString());
                                        }
                                    }
                                    else
                                    {
                                        starth = 0;
                                        endh = count;
                                    }
                                    rhol.Close();
                                    con3.Close();
                                    if (fflag == false)
                                    {
                                        for (int i = starth; i < endh; i++)
                                        {
                                            switch (raten.GetValue(i).ToString())
                                            {
                                                case "1":
                                                    att = "P";
                                                    break;
                                                case "2":
                                                    att = "A";
                                                    break;
                                                case "3":
                                                    att = "OD";
                                                    break;
                                                case "4":
                                                    att = "ML";
                                                    break;
                                                case "5":
                                                    att = "SOD";
                                                    break;
                                                case "6":
                                                    att = "NSS";
                                                    break;
                                                case "7":
                                                    att = "H";
                                                    break;
                                                case "8":
                                                    att = "NJ";
                                                    break;
                                                case "9":
                                                    att = "S";
                                                    break;
                                                case "10":
                                                    att = "L";
                                                    break;
                                                case "11":
                                                    att = "NCC";
                                                    break;
                                                case "12":
                                                    att = "HS";
                                                    break;
                                                case "13":
                                                    att = "PP";
                                                    break;
                                                case "14":
                                                    att = "SYOD";
                                                    break;
                                                case "15":
                                                    att = "COD";
                                                    break;
                                                case "16":
                                                    att = "OOD";
                                                    break;
                                                case "-1":
                                                    att = "NE";
                                                    break;
                                                case "0":
                                                    att = "NE";
                                                    break;
                                                case null:
                                                    att = "NE";
                                                    break;
                                                default:
                                                    att = "NE";
                                                    break;
                                            }
                                            Fpsattendence.Sheets[0].Cells[0, i + 2].Text = att;
                                            att = string.Empty;
                                        }
                                    }
                                }
                                else
                                {
                                    //Added by Srinath 25/03/2014 ==========Start
                                    string STRHOLIDAY = "select halforfull,morning,evening from registration as r,holidaystudents as h where r.app_no='" + appno + "' and h.holiday_date='" + DateTime.Now.ToString("MM/dd/yyyy") + "' and h.degree_code=r.degree_code and r.current_semester=h.semester";
                                    DataSet dsholidya = d2.select_method_wo_parameter(STRHOLIDAY, "Text");
                                    if (dsholidya.Tables[0].Rows.Count > 0)
                                    {
                                        string halforfull = dsholidya.Tables[0].Rows[0]["halforfull"].ToString().Trim().ToLower();
                                        string mor = dsholidya.Tables[0].Rows[0]["morning"].ToString().Trim().ToLower();
                                        string eve = dsholidya.Tables[0].Rows[0]["evening"].ToString().Trim().ToLower();
                                        if (halforfull == "0" || halforfull == "false")
                                        {
                                            for (int i = 2; i < Fpsattendence.Sheets[0].ColumnCount; i++)
                                            {
                                                Fpsattendence.Sheets[0].Cells[0, i].Text = "H";
                                                fflag = true;
                                            }
                                            starth = count;
                                            endh = count;
                                        }
                                        else if ((halforfull == "1" && mor == "1") || (halforfull == "true" && mor == "true"))
                                        {
                                            for (int i = 0; i < Convert.ToInt32(rperiod.GetValue(1).ToString()); i++)
                                            {
                                                Fpsattendence.Sheets[0].Cells[0, i + 2].Text = "H";
                                            }
                                            starth = Convert.ToInt32(rperiod.GetValue(1).ToString());
                                            endh = count;
                                        }
                                        else if ((halforfull == "1" && eve == "1") || (halforfull == "true" && eve == "true"))
                                        {
                                            for (int i = Convert.ToInt32(rperiod.GetValue(1).ToString()) - 1; i < count; i++)
                                            {
                                                Fpsattendence.Sheets[0].Cells[0, i + 2].Text = "H";
                                            }
                                            starth = 0;
                                            endh = Convert.ToInt32(rperiod.GetValue(1).ToString());
                                        }
                                        if (starth < count)
                                        {
                                            for (int i = starth; i < endh; i++)
                                            {
                                                Fpsattendence.Sheets[0].Cells[0, i + 2].Text = att;
                                            }
                                        }
                                    }
                                    else //==================end
                                    {
                                        for (int i = 1; i <= count; i++)
                                            Fpsattendence.Sheets[0].Cells[0, i + 1].Text = "NE";
                                    }
                                }
                                raten.Close();
                                con2.Close();
                            }
                            for (int k = 1; k <= 11; k++)
                            {
                                Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 2;
                                Fpsattendence.Sheets[0].SpanModel.Add(Fpsattendence.Sheets[0].RowCount - 1, 0, 1, Fpsattendence.Sheets[0].ColumnCount);
                                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                switch (k)
                                {
                                    case 1:
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = "  P  -   PRESENT";
                                        break;
                                    case 2:
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = "  A  -   ABSENT";
                                        break;
                                    case 3:
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " OD  -   ON DUTY";
                                        break;
                                    case 4:
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " ML  -   MEDICAL LEAVE";
                                        break;
                                    case 5:
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " SOD  -   SPORTS ON DUTY";
                                        break;
                                    case 6:
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " NSS  -   NATIONAL SOCIAL SERVICE";
                                        break;
                                    case 7:
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " H  -   HOLIDAY";
                                        break;
                                    case 8:
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " S  -   SUSPEND";
                                        break;
                                    case 9:
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " L  -   LEAVE";
                                        break;
                                    case 10:
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = "NE -   NOT ENTERED";
                                        break;
                                }
                            }
                            Fpsattendence.Width = (Fpsattendence.Columns.Default.Width * Fpsattendence.Sheets[0].ColumnCount);
                            Fpsattendence.Height = (Fpsattendence.Rows.Default.Height * Fpsattendence.Sheets[0].RowCount) + Fpsattendence.Sheets[0].ColumnHeader.Height + 30;
                        }
                        else
                        {
                            Fpsattendence.Sheets[0].ColumnCount = 0;
                            Fpsattendence.Sheets[0].RowCount = 0;
                            Fpsattendence.Sheets[0].ColumnCount = 4;
                            Fpsattendence.Sheets[0].RowCount = 1;
                            Fpsattendence.Columns.Default.Width = 150;
                            Fpsattendence.ColumnHeader.Visible = false;
                            Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                            Fpsattendence.Sheets[0].Cells[0, 0].Text = "No information Available";
                            Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                            Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                            Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                            Fpsattendence.Width = 600;
                            Fpsattendence.Height = 45;
                        }
                        rperiod.Close();
                        con1.Close();
                    }
                    else
                    {
                        if (DateTime.Today < dtStartDate)
                        {
                            string prefix = "th";
                            if (sem == "1")
                                prefix = "st";
                            else if (sem == "2")
                                prefix = "nd";
                            else if (sem == "3")
                                prefix = "rd";

                            Fpsattendence.Sheets[0].ColumnCount = 0;
                            Fpsattendence.Sheets[0].RowCount = 0;
                            Fpsattendence.Sheets[0].ColumnCount = 4;
                            Fpsattendence.Sheets[0].RowCount = 1;
                            Fpsattendence.ColumnHeader.Columns.Default.Width = 150;
                            Fpsattendence.ColumnHeader.Visible = false;
                            Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                            Fpsattendence.Width = 600;
                            Fpsattendence.Height = 40;
                            Fpsattendence.Sheets[0].Cells[0, 0].Text = "Sorry. Your " + sem + prefix + " " + lbl_semOrTerm.Text + " starts on " + dtStartDate.ToString("dd/MM/yyyy");
                            Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                            Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                            Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                        }
                        if (DateTime.Today > dtEndDate)
                        {
                            string prefix = "th";
                            if (sem == "1")
                                prefix = "st";
                            else if (sem == "2")
                                prefix = "nd";
                            else if (sem == "3")
                                prefix = "rd";

                            Fpsattendence.Sheets[0].ColumnCount = 0;
                            Fpsattendence.Sheets[0].RowCount = 0;
                            Fpsattendence.Sheets[0].ColumnCount = 4;
                            Fpsattendence.Sheets[0].RowCount = 1;
                            Fpsattendence.ColumnHeader.Columns.Default.Width = 150;
                            Fpsattendence.ColumnHeader.Visible = false;
                            Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                            Fpsattendence.Width = 600;
                            Fpsattendence.Height = 40;
                            Fpsattendence.Sheets[0].Cells[0, 0].Text = "Sorry. Your " + sem + prefix + " " + lbl_semOrTerm.Text + " got over on " + dtEndDate.ToString("dd/MM/yyyy");
                            Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                            Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                            Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                        }
                    }



                }


                rbs.Close();
                con1.Close();
            }
            else
            {
                if (gender == "Male")
                {
                    Fpsattendence.Sheets[0].ColumnCount = 0;
                    Fpsattendence.Sheets[0].RowCount = 0;
                    Fpsattendence.Sheets[0].ColumnCount = 4;
                    Fpsattendence.Sheets[0].RowCount = 1;
                    Fpsattendence.ColumnHeader.Columns.Default.Width = 150;
                    Fpsattendence.ColumnHeader.Visible = false;
                    Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    Fpsattendence.Width = 600;
                    Fpsattendence.Height = 40;
                    Fpsattendence.Sheets[0].Cells[0, 0].Text = "Sorry. You are alumnus now. ";
                    Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";


                }
                else
                {
                    Fpsattendence.Sheets[0].ColumnCount = 0;
                    Fpsattendence.Sheets[0].RowCount = 0;
                    Fpsattendence.Sheets[0].ColumnCount = 4;
                    Fpsattendence.Sheets[0].RowCount = 1;
                    Fpsattendence.ColumnHeader.Columns.Default.Width = 150;
                    Fpsattendence.ColumnHeader.Visible = false;
                    Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    Fpsattendence.Width = 600;
                    Fpsattendence.Height = 40;
                    Fpsattendence.Sheets[0].Cells[0, 0].Text = "Sorry. You are alumna now. ";
                    Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";


                }
            }
            //----------------
        }
        rtodaya.Close();
        con.Close();



        Fpsattendence.SaveChanges();
    }

    protected void Buttonweeka_Click(object sender, EventArgs e)
    {
        initattendence();
        string byr = string.Empty;
        string deg = string.Empty;
        string sem = string.Empty;
        string sec = string.Empty;
        string stdate = string.Empty;
        string edate = string.Empty;
        string cc = string.Empty;
        string gender = string.Empty;
        string rollno = string.Empty;
        DateTime dtStartDate = new DateTime();
        DateTime dtEndDate = new DateTime();
        Fpsattendence.Sheets[0].AutoPostBack = false;
        //// FpSgen.Visible = true;
        semperc = false;
        Boolean fflag = false;
        int starth = 0, endh = 0;
        string att = string.Empty;
        Fpsattendence.Visible = true;
        Fpsattendence.ColumnHeader.Visible = true;
        Fpsattendence.Columns.Default.Width = 50;
        Fpsattendence.Rows.Default.Height = 20;
        Fpsattendence.Sheets[0].ColumnCount = 2;
        Fpsattendence.ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpsattendence.ColumnHeader.Cells[0, 1].Text = "Date";
        Fpsattendence.Columns[0].Width = 40;
        Fpsattendence.Columns[0].HorizontalAlign = HorizontalAlign.Center;
        Fpsattendence.Columns[1].Width = 90;
        Fpsattendence.TitleInfo.Text = "WEEKLY ATTENDANCE DETAILS";
        Fpsattendence.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;

        cmd.CommandText = "select r.batch_year,r.degree_code,r.roll_no,r.CC,r.current_semester,LTRIM(RTRIM(isnull(sections,''))) as sections,case when a.sex=0 then 'Male' when a.sex=1 then 'Female' else 'Other' end as gender from registration r,applyn a where a.app_no=r.App_No and r.App_No='" + appno + "' and CC=0 and DelFlag=0 and Exam_Flag<>'Debar'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rtodaya = cmd.ExecuteReader();
        if (rtodaya.Read())
        {
            byr = rtodaya.GetValue(0).ToString();
            deg = rtodaya.GetValue(1).ToString();
            rollno = rtodaya.GetValue(2).ToString();
            cc = rtodaya.GetValue(3).ToString();
            sem = rtodaya.GetValue(4).ToString();
            sec = rtodaya.GetValue(5).ToString();
            gender = rtodaya.GetValue(6).ToString();

            if (cc.ToLower() == "false")
            {
                cmd.CommandText = "Select CONVERT(VARCHAR(10),start_date,103),CONVERT(VARCHAR(10),end_date,103),semester,batch_year from seminfo where degree_code='" + deg + "' and semester='" + sem + "' and batch_year='" + byr + "'";
                cmd.Connection = con1;
                con1.Open();
                SqlDataReader rbs = cmd.ExecuteReader();
                if (rbs.Read())
                {
                    stdate = rbs.GetValue(0).ToString();
                    edate = rbs.GetValue(1).ToString();

                    DateTime.TryParseExact(stdate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtStartDate);
                    DateTime.TryParseExact(edate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtEndDate);
                    //if (DateTime.Today.AddDays(-6) >= dtStartDate && DateTime.Today <= dtEndDate)
                    //{
                    con1.Close();

                    cmd.CommandText = "select No_of_hrs_per_day ,no_of_hrs_I_half_day ,no_of_hrs_II_half_day  from PeriodAttndSchedule where  No_of_hrs_per_day is not null and degree_code ='" + deg + "' and semester='" + sem + "'";
                    cmd.Connection = con1;
                    con1.Open();
                    SqlDataReader rperiod = cmd.ExecuteReader();
                    if (rperiod.Read())
                    {
                        int count = 0;
                        string qs = string.Empty;
                        count = Convert.ToInt32(rperiod.GetValue(0).ToString());
                        Fpsattendence.Sheets[0].ColumnCount = Fpsattendence.Sheets[0].ColumnCount + count;
                        // Fpsattendence.Sheets[0].Cells[0, 0].Text = "1";
                        // Fpsattendence.Sheets[0].Cells[0, 1].Text = DateTime.Now.ToString("dd-MM-yyyy");
                        for (int i = 1; i <= count; i++)
                            Fpsattendence.ColumnHeader.Cells[0, i + 1].Text = i.ToString();
                        DateTime date = new DateTime();
                        date = DateTime.Now;
                        //  s = DateTime.Now.Day.ToString();
                        for (int j = 0; j < 6; j++)
                        {
                            if (date >= dtStartDate && date <= dtEndDate)
                            {
                                fflag = false;
                                qs = string.Empty;
                                // int td = Convert.ToInt32(s);
                                for (int i = 1; i <= count; i++)
                                {
                                    qs = qs + "d" + date.Day.ToString() + "d" + i.ToString() + ",";
                                }
                                int t = Convert.ToInt32(date.ToString("MM"));
                                int t1 = Convert.ToInt32(date.ToString("yyyy"));
                                int my = (t1 * 12) + t;
                                Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 1;
                                Fpsattendence.Sheets[0].Cells[j, 0].Text = (j + 1).ToString();
                                Fpsattendence.Sheets[0].Cells[j, 1].Text = date.ToString("dd-MM-yyyy");
                                string day = date.ToString("dddd");
                                if (day == "Sunday")
                                {
                                    for (int i = 1; i <= count; i++)
                                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, i + 1].Text = "H";
                                }
                                else
                                {
                                    cmd.CommandText = "select " + qs + " roll_no  from attendance where month_year='" + my.ToString() + "' and roll_no='" + rtodaya.GetValue(2).ToString() + "'";
                                    cmd.Connection = con2;
                                    con2.Open();
                                    SqlDataReader raten = cmd.ExecuteReader();
                                    if (raten.Read())
                                    {
                                        //modified by srinath 22/03/2014
                                        //cmd.CommandText = "select halforfull,morning,evening from registration as r,holidaystudents as h where r.app_no='" + appno + "' and h.holiday_date='" + DateTime.Now.ToString("yyyy-MM-dd") + "' and h.degree_code=r.degree_code and r.current_semester=h.semester";
                                        cmd.CommandText = "select halforfull,morning,evening from registration as r,holidaystudents as h where r.app_no='" + appno + "' and h.holiday_date='" + date.ToString("MM/dd/yyyy") + "' and h.degree_code=r.degree_code and r.current_semester=h.semester";
                                        cmd.Connection = con3;
                                        con3.Open();
                                        SqlDataReader rhol = cmd.ExecuteReader();
                                        if (rhol.Read())
                                        {
                                            string halforfull = rhol.GetValue(0).ToString().Trim().ToLower();
                                            if (rhol.GetValue(0).ToString() == "0" || halforfull == "false")
                                            {
                                                for (int i = 2; i < Fpsattendence.Sheets[0].ColumnCount; i++)
                                                {
                                                    Fpsattendence.Sheets[0].Cells[j, i].Text = "H";
                                                    fflag = true;
                                                }
                                            }
                                            else if ((rhol.GetValue(0).ToString() == "1" && rhol.GetValue(1).ToString() == "1") || (halforfull == "true" && rhol.GetValue(1).ToString() == "1"))
                                            {
                                                for (int i = 0; i < Convert.ToInt32(rperiod.GetValue(1).ToString()); i++)
                                                {
                                                    Fpsattendence.Sheets[0].Cells[j, i + 2].Text = "H";
                                                    // flag=true;
                                                }
                                                starth = Convert.ToInt32(rperiod.GetValue(1).ToString());
                                                endh = count;
                                            }
                                            else if ((rperiod.GetValue(0).ToString() == "1" && rperiod.GetValue(2).ToString() == "1") || (halforfull == "true" && rhol.GetValue(2).ToString() == "1"))
                                            {
                                                for (int i = Convert.ToInt32(rperiod.GetValue(1).ToString()) - 1; i < count; i++)
                                                {
                                                    Fpsattendence.Sheets[0].Cells[j, i + 2].Text = "H";
                                                    //flag=true;
                                                }
                                                starth = 0;
                                                endh = Convert.ToInt32(rperiod.GetValue(1).ToString());
                                            }
                                        }
                                        else
                                        {
                                            starth = 0;
                                            endh = count;
                                        }
                                        rhol.Close();
                                        con3.Close();
                                        if (fflag == false)
                                        {
                                            for (int i = starth; i < endh; i++)
                                            {
                                                switch (raten.GetValue(i).ToString())
                                                {
                                                    case "1":
                                                        att = "P";
                                                        break;
                                                    case "2":
                                                        att = "A";
                                                        break;
                                                    case "3":
                                                        att = "OD";
                                                        break;
                                                    case "4":
                                                        att = "ML";
                                                        break;
                                                    case "5":
                                                        att = "SOD";
                                                        break;
                                                    case "6":
                                                        att = "NSS";
                                                        break;
                                                    case "7":
                                                        att = "H";
                                                        break;
                                                    case "8":
                                                        att = "NJ";
                                                        break;
                                                    case "9":
                                                        att = "S";
                                                        break;
                                                    case "10":
                                                        att = "L";
                                                        break;
                                                    case "11":
                                                        att = "NCC";
                                                        break;
                                                    case "12":
                                                        att = "HS";
                                                        break;
                                                    case "13":
                                                        att = "PP";
                                                        break;
                                                    case "14":
                                                        att = "SYOD";
                                                        break;
                                                    case "15":
                                                        att = "COD";
                                                        break;
                                                    case "16":
                                                        att = "OOD";
                                                        break;
                                                    case "-1":
                                                        att = "NE";
                                                        break;
                                                    case "0":
                                                        att = "NE";
                                                        break;
                                                    case null:
                                                        att = "NE";
                                                        break;
                                                    default:
                                                        att = "NE";
                                                        break;
                                                }
                                                Fpsattendence.Sheets[0].Cells[j, i + 2].Text = att;
                                                att = string.Empty;
                                            }
                                        }
                                    }
                                    else
                                    {//Added by Srinath 25/03/2014 ==========Start
                                        string STRHOLIDAY = "select halforfull,morning,evening from registration as r,holidaystudents as h where r.app_no='" + appno + "' and h.holiday_date='" + date.ToString("MM/dd/yyyy") + "' and h.degree_code=r.degree_code and r.current_semester=h.semester";
                                        DataSet dsholidya = d2.select_method_wo_parameter(STRHOLIDAY, "Text");
                                        if (dsholidya.Tables[0].Rows.Count > 0)
                                        {
                                            string halforfull = dsholidya.Tables[0].Rows[0]["halforfull"].ToString().Trim().ToLower();
                                            string mor = dsholidya.Tables[0].Rows[0]["morning"].ToString().Trim().ToLower();
                                            string eve = dsholidya.Tables[0].Rows[0]["evening"].ToString().Trim().ToLower();
                                            if (halforfull == "0" || halforfull == "false")
                                            {
                                                for (int i = 2; i < Fpsattendence.Sheets[0].ColumnCount; i++)
                                                {
                                                    Fpsattendence.Sheets[0].Cells[j, i].Text = "H";
                                                    fflag = true;
                                                }
                                                starth = count;
                                                endh = count;
                                            }
                                            else if ((halforfull == "1" && mor == "1") || (halforfull == "true" && mor == "true"))
                                            {
                                                for (int i = 0; i < Convert.ToInt32(rperiod.GetValue(1).ToString()); i++)
                                                {
                                                    Fpsattendence.Sheets[0].Cells[j, i + 2].Text = "H";
                                                }
                                                starth = Convert.ToInt32(rperiod.GetValue(1).ToString());
                                                endh = count;
                                            }
                                            else if ((halforfull == "1" && eve == "1") || (halforfull == "true" && eve == "true"))
                                            {
                                                for (int i = Convert.ToInt32(rperiod.GetValue(1).ToString()) - 1; i < count; i++)
                                                {
                                                    Fpsattendence.Sheets[0].Cells[j, i + 2].Text = "H";
                                                }
                                                starth = 0;
                                                endh = Convert.ToInt32(rperiod.GetValue(1).ToString());
                                            }
                                            if (starth < count)
                                            {
                                                for (int i = starth; i < endh; i++)
                                                {
                                                    Fpsattendence.Sheets[0].Cells[j, i + 2].Text = att;
                                                }
                                            }
                                        }
                                        else
                                        {//==========================end
                                            for (int i = 1; i <= count; i++)
                                                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, i + 1].Text = "NE";
                                        }
                                    }
                                    raten.Close();
                                    con2.Close();
                                }
                            }
                            else
                            {
                                if (date < dtStartDate)
                                {
                                    string prefix = "th";
                                    if (sem == "1")
                                        prefix = "st";
                                    else if (sem == "2")
                                        prefix = "nd";
                                    else if (sem == "3")
                                        prefix = "rd";

                                    //Fpsattendence.Sheets[0].ColumnCount = 0;
                                    //Fpsattendence.Sheets[0].RowCount = 0;
                                    //Fpsattendence.Sheets[0].ColumnCount = 4;
                                    //Fpsattendence.Sheets[0].RowCount = 1;
                                    //Fpsattendence.ColumnHeader.Columns.Default.Width = 150;
                                    //Fpsattendence.ColumnHeader.Visible = false;

                                    Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 1;
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = (j + 1).ToString();
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 1].Text = date.ToString("dd-MM-yyyy");
                                    Fpsattendence.Width = 600;
                                    Fpsattendence.Height = 40;
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Text = "Sorry. Your " + sem + prefix + " " + lbl_semOrTerm.Text + " starts on " + dtStartDate.ToString("dd/MM/yyyy");
                                    Fpsattendence.Sheets[0].SpanModel.Add(Fpsattendence.Sheets[0].RowCount - 1, 2, 1, Fpsattendence.Sheets[0].ColumnCount - 2);
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].ForeColor = Color.Blue;
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                                }
                                else if (date > dtEndDate)
                                {
                                    string prefix = "th";
                                    if (sem == "1")
                                        prefix = "st";
                                    else if (sem == "2")
                                        prefix = "nd";
                                    else if (sem == "3")
                                        prefix = "rd";

                                    //Fpsattendence.Sheets[0].ColumnCount = 0;
                                    //Fpsattendence.Sheets[0].RowCount = 0;
                                    //Fpsattendence.Sheets[0].ColumnCount = 4;
                                    //Fpsattendence.Sheets[0].RowCount = 1;
                                    //Fpsattendence.ColumnHeader.Columns.Default.Width = 150;
                                    //Fpsattendence.ColumnHeader.Visible = false;
                                    Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 1;
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = (j + 1).ToString();
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 1].Text = date.ToString("dd-MM-yyyy");

                                    Fpsattendence.Width = 600;
                                    Fpsattendence.Height = 40;
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Text = "Sorry. Your " + sem + prefix + " " + lbl_semOrTerm.Text + " got over on " + dtEndDate.ToString("dd/MM/yyyy");
                                    Fpsattendence.Sheets[0].SpanModel.Add(Fpsattendence.Sheets[0].RowCount - 1, 2, 1, Fpsattendence.Sheets[0].ColumnCount - 2);
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].ForeColor = Color.Blue;
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                                }
                            }
                            date = date.AddDays(-1);
                        }
                        for (int k = 1; k <= 11; k++)
                        {
                            Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 2;
                            Fpsattendence.Sheets[0].SpanModel.Add(Fpsattendence.Sheets[0].RowCount - 1, 0, 1, Fpsattendence.Sheets[0].ColumnCount);
                            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;

                            switch (k)
                            {
                                case 1:
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = "  P  -   PRESENT";
                                    break;
                                case 2:
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = "  A  -   ABSENT";
                                    break;
                                case 3:
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " OD  -   ON DUTY";
                                    break;
                                case 4:
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " ML  -   MEDICAL LEAVE";
                                    break;
                                case 5:
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " SOD  -   SPORTS ON DUTY";
                                    break;
                                case 6:
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " NSS  -   NATIONAL SOCIAL SERVICE";
                                    break;
                                case 7:
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " H  -   HOLIDAY";
                                    break;
                                case 8:
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " S  -   SUSPEND";
                                    break;
                                case 9:
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = " L  -   LEAVE";
                                    break;
                                case 10:
                                    Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = "NE -   NOT ENTERED";
                                    break;
                            }
                        }
                        Fpsattendence.Width = (Fpsattendence.Columns.Default.Width * Fpsattendence.Sheets[0].ColumnCount) + 20;
                        Fpsattendence.Height = (Fpsattendence.Rows.Default.Height * Fpsattendence.Sheets[0].RowCount) + Fpsattendence.ColumnHeader.Height + 50;
                    }
                    else
                    {
                        Fpsattendence.Sheets[0].ColumnCount = 0;
                        Fpsattendence.Sheets[0].RowCount = 0;
                        Fpsattendence.Sheets[0].ColumnCount = 4;
                        Fpsattendence.Sheets[0].RowCount = 1;
                        Fpsattendence.Columns.Default.Width = 150;
                        Fpsattendence.ColumnHeader.Visible = false;
                        Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                        Fpsattendence.Sheets[0].Cells[0, 0].Text = "No information Available";
                        Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                        Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                        Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                        Fpsattendence.Width = 600;
                        Fpsattendence.Height = 45;
                    }
                    rperiod.Close();
                    con1.Close();

                    //}
                    //else
                    //{
                    //    if (DateTime.Today < dtStartDate)
                    //    {
                    //        string prefix = "th";
                    //        if (sem == "1")
                    //            prefix = "st";
                    //        else if (sem == "2")
                    //            prefix = "nd";
                    //        else if (sem == "3")
                    //            prefix = "rd";

                    //        Fpsattendence.Sheets[0].ColumnCount = 0;
                    //        Fpsattendence.Sheets[0].RowCount = 0;
                    //        Fpsattendence.Sheets[0].ColumnCount = 4;
                    //        Fpsattendence.Sheets[0].RowCount = 1;
                    //        Fpsattendence.ColumnHeader.Columns.Default.Width = 150;
                    //        Fpsattendence.ColumnHeader.Visible = false;
                    //        Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    //        Fpsattendence.Width = 600;
                    //        Fpsattendence.Height = 40;
                    //        Fpsattendence.Sheets[0].Cells[0, 0].Text = "Sorry. Your " + sem + prefix + " Semester starts on " + dtStartDate.ToString("dd/MM/yyyy");
                    //        Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    //        Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    //        Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    //        Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                    //    }
                    //    else if (DateTime.Today > dtEndDate)
                    //    {
                    //        string prefix = "th";
                    //        if (sem == "1")
                    //            prefix = "st";
                    //        else if (sem == "2")
                    //            prefix = "nd";
                    //        else if (sem == "3")
                    //            prefix = "rd";

                    //        Fpsattendence.Sheets[0].ColumnCount = 0;
                    //        Fpsattendence.Sheets[0].RowCount = 0;
                    //        Fpsattendence.Sheets[0].ColumnCount = 4;
                    //        Fpsattendence.Sheets[0].RowCount = 1;
                    //        Fpsattendence.ColumnHeader.Columns.Default.Width = 150;
                    //        Fpsattendence.ColumnHeader.Visible = false;
                    //        Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    //        Fpsattendence.Width = 600;
                    //        Fpsattendence.Height = 40;
                    //        Fpsattendence.Sheets[0].Cells[0, 0].Text = "Sorry. Your " + sem + prefix + " Semester got over on " + dtEndDate.ToString("dd/MM/yyyy");
                    //        Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    //        Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    //        Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    //        Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                    //    }
                    //}



                }


                rbs.Close();
                con1.Close();
            }
            else
            {
                if (gender == "Male")
                {
                    Fpsattendence.Sheets[0].ColumnCount = 0;
                    Fpsattendence.Sheets[0].RowCount = 0;
                    Fpsattendence.Sheets[0].ColumnCount = 4;
                    Fpsattendence.Sheets[0].RowCount = 1;
                    Fpsattendence.ColumnHeader.Columns.Default.Width = 150;
                    Fpsattendence.ColumnHeader.Visible = false;
                    Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    Fpsattendence.Width = 600;
                    Fpsattendence.Height = 60;
                    Fpsattendence.Sheets[0].Cells[0, 0].Text = "Sorry. You are alumnus now. ";
                    Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";


                }
                else
                {
                    Fpsattendence.Sheets[0].ColumnCount = 0;
                    Fpsattendence.Sheets[0].RowCount = 0;
                    Fpsattendence.Sheets[0].ColumnCount = 4;
                    Fpsattendence.Sheets[0].RowCount = 1;
                    Fpsattendence.ColumnHeader.Columns.Default.Width = 150;
                    Fpsattendence.ColumnHeader.Visible = false;
                    Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    Fpsattendence.Width = 600;
                    Fpsattendence.Height = 60;
                    Fpsattendence.Sheets[0].Cells[0, 0].Text = "Sorry. You are alumna now. ";
                    Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                }
            }




        }
        rtodaya.Close();
        con.Close();
        Fpsattendence.SaveChanges();
    }

    protected void Buttonsema_Click(object sender, EventArgs e)
    {
        Boolean day_flag_str = false;
        Boolean hr_flag_str = false;
        string Master = string.Empty;
        Master = "select * from Master_Settings where usercode in(select user_code from usermaster where user_id='admin') and (settings='Day Wise' or settings='Hour Wise')";
        readcon.Close();
        readcon.Open();
        SqlDataReader mtrdr;
        SqlCommand mtcmd = new SqlCommand(Master, readcon);
        mtrdr = mtcmd.ExecuteReader();
        if (mtrdr.HasRows)
        {
            while (mtrdr.Read())
            {
                if (mtrdr["settings"].ToString() == "Day Wise" && mtrdr["value"].ToString() == "1")
                {
                    day_flag_str = true;
                }
                if (mtrdr["settings"].ToString() == "Hour Wise" && mtrdr["value"].ToString() == "1")
                {
                    hr_flag_str = true;
                }
            }
        }
        initattendence();
        //// FpSgen.Visible = true;
        Fpsattendence.Sheets[0].ColumnHeader.Visible = true;
        Fpsattendence.Visible = true;
        Fpsattendence.TitleInfo.Text = lbl_semOrTerm.Text + " ATTENDENCE DETAILS";
        string deg = string.Empty;
        string sem = string.Empty;
        string sec = string.Empty;
        string query = string.Empty;
        string rno = string.Empty;
        string col_code = string.Empty;
        int days = 0;
        long fmyear = 0;
        long tmyear = 0;
        DateTime cur_start_date;
        DateTime cur_end_date;
        int cur_working_days;
        double nop = 0;
        double noa = 0;
        double noh = 0;
        double now1 = 0;
        double perc = 0;
        double pres = 0;
        int cntvalue = 0;
        int attcnt = 0;
        int divval = 0;
        double wdays1 = 0;
        Fpsattendence.Sheets[0].ColumnCount = 11;
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 1].Text = "No of Conducted Days ";
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 2].Text = "No of days Attended";
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 3].Text = "No of Days Absent";
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Attendance Days %";
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 5].Text = "No of Conducted Hours ";
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 6].Text = "No of Hours Attended";
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 7].Text = "No of Hours Absent";
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 8].Text = "Attendance Hours %";
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 9].Text = "Attendance Mark";
        Fpsattendence.Sheets[0].ColumnHeader.Cells[0, 10].Text = "View";
        Fpsattendence.Sheets[0].Columns[10].Font.Underline = true;
        Fpsattendence.Sheets[0].Columns[10].ForeColor = Color.Blue;
        semperc = true;
        Fpsattendence.Sheets[0].Columns[0].Width = 40;
        Fpsattendence.Sheets[0].Columns[1].Width = 50;
        Fpsattendence.Sheets[0].Columns[2].Width = 50;
        Fpsattendence.Sheets[0].Columns[3].Width = 50;
        Fpsattendence.Sheets[0].Columns[4].Width = 80;
        Fpsattendence.Sheets[0].Columns[10].Width = 150;
        cmd.CommandText = "select batch_year,degree_code,current_semester,isnull(sections,''),roll_no,(select college_code from degree as d where d.degree_code=registration.degree_code) from registration where App_No='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rtoday = cmd.ExecuteReader();
        if (rtoday.Read())
        {
            byr = rtoday.GetValue(0).ToString();
            deg = rtoday.GetValue(1).ToString();
            sem = rtoday.GetValue(2).ToString();
            sec = rtoday.GetValue(3).ToString();
            rno = rtoday.GetValue(4).ToString();
            col_code = rtoday.GetValue(5).ToString();
            if (sec != "")
                query = " and sections='" + sec + "' ";
        }
        rtoday.Close();
        con_rset.Close();
        int semester = 0;
        double wdays = 0;
        cmd.CommandText = "select semester,start_date,end_date,no_of_working_days from seminfo where degree_code=" + deg + " and semester <=" + sem + " and batch_year= " + byr + "  order by semester  ";
        cmd.Connection = con_rset;
        con_rset.Open();
        SqlDataReader rsat = cmd.ExecuteReader();
        if (rsat.HasRows)
        {
            while (rsat.Read())
            {
                semester = Convert.ToInt32(rsat.GetValue(0).ToString());
                cur_start_date = Convert.ToDateTime(rsat.GetValue(1).ToString());
                cur_end_date = Convert.ToDateTime(rsat.GetValue(2).ToString());
                cur_working_days = Convert.ToInt32(rsat.GetValue(3).ToString());
                //  getnoofpresent(rno, cur_start_date, cur_end_date, deg, semester, col_code, out  nop, out  noa, out noh, out  now1);
                //pres = nop + (noh / 2);
                //if (now1 != 0)
                //    perc = (pres / now1) * 100;
                Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 1;
                Fpsattendence.Sheets[0].SpanModel.Add(Fpsattendence.Sheets[0].RowCount - 1, 0, 1, 11);
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = lbl_semOrTerm.Text + "  - " + semester.ToString() + "";
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 1;
                find_values(rno, cur_start_date.ToString(), cur_end_date.ToString(), deg, semester.ToString());
                string strattpercen = string.Empty;
                strattpercen = Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 8].Note;
                if (strattpercen != "" && strattpercen != "NaN" && deg != "" && semester != 0)
                {
                    ds.Dispose();
                    ds.Reset();
                    string straddmark = "select dm.semester,dm.markAccPerc,dm.atnd_mark_total,dd.frange,dd.trange,dd.attnd_mark from PeriodAttndSchedule as dm left join attnd_para as dd on dm.para_code=dd.para_code where dm.degree_code= " + deg + " and semester= " + semester + " and " + strattpercen + " between frange and trange order by semester ";
                    ds = d2.select_method(straddmark, hat, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 9].HorizontalAlign = HorizontalAlign.Center;
                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 9].Text = ds.Tables[0].Rows[i]["attnd_mark"].ToString();
                    }
                }
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 1].Text = per_workingdays.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Text = pre_present_date.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 3].Text = per_dum_unmark.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 4].Text = dum_tage_date.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 5].Text = per_con_hrs.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 6].Text = per_per_hrs.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 7].Text = per_absent_date.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 8].Text = dum_tage_hrs.ToString();
                cntvalue = cntvalue + 1;
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = cntvalue.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 1].Text = now1.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Text = pres.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 3].Text = noa.ToString();
                //Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 4].Text = (Math.Round(perc, 2)).ToString();
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 10].Text = "Click Here To View";
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 10].Note = cur_start_date + "-" + cur_end_date;
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 10].Tag = semester.ToString() + "-" + deg;
                wdays1 = wdays1 + cur_working_days;
            }
        }
        rsat.Close();
        con.Close();
        string overallperc = string.Empty;
        double overallperc1 = 0;
        string overallhourc = string.Empty;
        double overallhour1 = 0;
        double temp_perc = 0;
        int k = 0;
        for (k = 0; k < Fpsattendence.Sheets[0].RowCount; k++)
        {
            overallperc = Fpsattendence.Sheets[0].GetText(k, 4);
            overallhourc = Fpsattendence.Sheets[0].GetText(k, 8);
            if (overallperc != "")
            {
                if (double.TryParse(overallperc, out temp_perc))
                {
                    overallperc1 = overallperc1 + Convert.ToDouble(overallperc);
                    attcnt = attcnt + 1;
                    overallhour1 = overallhour1 + Convert.ToDouble(overallhourc);
                }
            }
        }
        //---------------------------------------------------------
        if (day_flag_str == true)
        {
            Fpsattendence.Sheets[0].Columns[1].Visible = true;
            Fpsattendence.Sheets[0].Columns[2].Visible = true;
            Fpsattendence.Sheets[0].Columns[3].Visible = true;
            Fpsattendence.Sheets[0].Columns[4].Visible = true;
        }
        else if (day_flag_str == false)
        {
            Fpsattendence.Sheets[0].Columns[1].Visible = false;
            Fpsattendence.Sheets[0].Columns[2].Visible = false;
            Fpsattendence.Sheets[0].Columns[3].Visible = false;
            Fpsattendence.Sheets[0].Columns[4].Visible = false;
        }
        if (hr_flag_str == true)
        {
            Fpsattendence.Sheets[0].Columns[5].Visible = true;
            Fpsattendence.Sheets[0].Columns[6].Visible = true;
            Fpsattendence.Sheets[0].Columns[7].Visible = true;
            Fpsattendence.Sheets[0].Columns[8].Visible = true;
        }
        else if (hr_flag_str == false)
        {
            Fpsattendence.Sheets[0].Columns[5].Visible = false;
            Fpsattendence.Sheets[0].Columns[6].Visible = false;
            Fpsattendence.Sheets[0].Columns[7].Visible = false;
            Fpsattendence.Sheets[0].Columns[8].Visible = false;
        }
        //---------------------------------------------------------
        if (Fpsattendence.Sheets[0].RowCount > 0)
        {
            Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 2;
            Fpsattendence.Sheets[0].SpanModel.Add(Fpsattendence.Sheets[0].RowCount - 1, 0, 1, Fpsattendence.Sheets[0].ColumnCount);
            Fpsattendence.Sheets[0].SpanModel.Add(Fpsattendence.Sheets[0].RowCount - 2, 0, 1, Fpsattendence.Sheets[0].ColumnCount);
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 2, 0].Font.Size = FontUnit.Medium;
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 2, 0].ForeColor = Color.Blue;
            //divval = k;
            double overperc = 0;
            double overhourc = 0;
            if (attcnt != 0)
            {
                overperc = overallperc1 / attcnt;
                overhourc = overallhour1 / attcnt;
            }
            if (overallperc1 != 0)
            {
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 2, 0].Text = "OVER ALL  DAYWISE ATTENDANCE PERCENTAGE  :  " + Math.Round(overperc, 2, MidpointRounding.AwayFromZero) + " ";
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = "OVER ALL HOURWISE ATTENDANCE PERCENTAGE  :  " + Math.Round(overhourc, 2, MidpointRounding.AwayFromZero) + " ";
            }
            else
            {
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 2, 0].Text = "OVER ALL DAYWISE ATTENDANCE PERCENTAGE  :     -";
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = "OVER ALL HOURWISE ATTENDANCE PERCENTAGE  :     -";
            }
            Fpsattendence.Sheets[0].AutoPostBack = true;
            Fpsattendence.Width = 800;
        }
        else
        {
            Fpsattendence.Sheets[0].ColumnCount = 0;
            Fpsattendence.Sheets[0].RowCount = 0;
            Fpsattendence.Sheets[0].ColumnCount = 4;
            Fpsattendence.Sheets[0].RowCount = 1;
            Fpsattendence.Columns.Default.Width = 150;
            Fpsattendence.ColumnHeader.Visible = false;
            Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
            Fpsattendence.Sheets[0].Cells[0, 0].Text = "No information Available";
            Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
            Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
            Fpsattendence.Width = 600;
            Fpsattendence.Height = 45;
        }
    }

    public void persentmonthcal_attnd(string roll_no, string cur_start_date_date, string cur_end_date_date, string deg, string sem)
    {
        // try
        {
            //per_tot_ondu = tot_ondu;
            //per_njdate = njdate;
            //pre_present_date = Present - njdate;
            //per_per_hrs = tot_per_hrs;
            //per_absent_date = Absent;
            //pre_ondu_date = Absent;
            //pre_leave_date = Leave;
            //per_workingdays = workingdays - per_holidate - per_njdate;
            //per_workingdays1 = ((mng_conducted_half_days * fnhrs) + (evng_conducted_half_days * (NoHrs - fnhrs))) - ((Convert.ToInt16(NoHrs) * fnhrs) + (Convert.ToInt16(per_holidate_evng) * (NoHrs - fnhrs))) - notconsider_value;// ((Convert.ToInt16(njdate_mng) * fnhrs) + (Convert.ToInt16(njdate_evng) * (NoHrs - fnhrs)));
            //per_dum_unmark = dum_unmark;
            int conducthrs = 0;
            tot_ondu = 0; dum_unmark = 0; per_holidate_mng = 0;
            njdate = 0; Present = 0; tot_per_hrs = 0; Absent = 0; Leave = 0; workingdays = 0; absent_hours = 0;
            per_holidate = 0; per_njdate = 0; mng_conducted_half_days = 0;
            evng_conducted_half_days = 0; per_holidate_evng = 0; notconsider_value = 0;
            mng_conducted_half_days = 0;
            evng_conducted_half_days = 0;
            Boolean splhr_flag = false;
            notconsider_value = 0;
            int demfcal, demtcal;
            string monthcal;
            conduct_hour_new = 0;
            hat.Clear();
            hat.Add("colege_code", Session["collegecode"].ToString());
            ds1 = d2.select_method("ATT_MASTER_SETTING", hat, "sp");
            count = ds1.Tables[0].Rows.Count;
            //      dd = ds4.Tables[0].Rows[rows_count]["ROLL_NO"].ToString();
            hat.Clear();
            hat.Add("std_rollno", roll_no);
            hat.Add("from_month", cal_from_date);
            hat.Add("to_month", cal_to_date);
            ds2 = d2.select_method("STUD_ATTENDANCE", hat, "sp");
            mmyycount = ds2.Tables[0].Rows.Count;
            moncount = mmyycount - 1;
            {
                hat.Clear();
                hat.Add("degree_code", deg);
                hat.Add("sem", sem);
                hat.Add("from_date", cur_start_date_date.ToString());
                hat.Add("to_date", cur_end_date_date.ToString());
                hat.Add("coll_code", int.Parse(Session["collegecode"].ToString()));
                //------------------------------------------------------------------
                int iscount = 0;
                holidaycon.Close();
                holidaycon.Open();
                string sqlstr_holiday = "select  isnull(count(holiday_date),0)as cnt FROM holidayStudents where holiday_date between '" + cur_start_date_date.ToString() + "' and '" + cur_end_date_date.ToString() + "' and degree_code=" + deg + " and semester=" + sem + "";
                SqlCommand cmdholiday = new SqlCommand(sqlstr_holiday, holidaycon);
                SqlDataAdapter daholiday = new SqlDataAdapter(cmdholiday);
                DataSet dsholiday = new DataSet();
                daholiday.Fill(dsholiday);
                if (dsholiday.Tables[0].Rows.Count > 0)
                {
                    iscount = Convert.ToInt16(dsholiday.Tables[0].Rows[0]["cnt"].ToString());
                }
                hat.Add("iscount", iscount);
                ds3 = d2.select_method("ALL_HOLIDATE_DETAILS", hat, "sp");
                Dictionary<string, int> holiday_table1 = new Dictionary<string, int>();
                Dictionary<string, int> holiday_table2 = new Dictionary<string, int>();
                Dictionary<string, int> holiday_table3 = new Dictionary<string, int>();
                holiday_table11.Clear();
                holiday_table21.Clear();
                holiday_table31.Clear();
                if (ds3.Tables[0].Rows.Count != 0)
                {
                    for (int k = 0; k < ds3.Tables[0].Rows.Count; k++)
                    {
                        if (ds3.Tables[0].Rows[0]["halforfull"].ToString() == "False")
                        {
                            halforfull = "0";
                        }
                        else
                        {
                            halforfull = "1";
                        }
                        if (ds3.Tables[0].Rows[0]["morning"].ToString() == "False")
                        {
                            mng = "0";
                        }
                        else
                        {
                            mng = "1";
                        }
                        if (ds3.Tables[0].Rows[0]["evening"].ToString() == "False")
                        {
                            evng = "0";
                        }
                        else
                        {
                            evng = "1";
                        }
                        holiday_sched_details = halforfull + "*" + mng + "*" + evng;
                        string[] split_date_time1 = ds3.Tables[0].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                        string[] dummy_split = split_date_time1[0].Split('/');
                        if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                            holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                        // holiday_table1.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], holiday_sched_details);
                    }
                }
                if (ds3.Tables[1].Rows.Count != 0)
                {
                    for (int k = 0; k < ds3.Tables[1].Rows.Count; k++)
                    {
                        string[] split_date_time1 = ds3.Tables[1].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                        string[] dummy_split = split_date_time1[0].Split('/');
                        if (!holiday_table21.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                            holiday_table21.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
                        if (ds3.Tables[1].Rows[k]["halforfull"].ToString() == "False")
                        {
                            halforfull = "0";
                        }
                        else
                        {
                            halforfull = "1";
                        }
                        if (ds3.Tables[1].Rows[k]["morning"].ToString() == "False")
                        {
                            mng = "0";
                        }
                        else
                        {
                            mng = "1";
                        }
                        if (ds3.Tables[1].Rows[k]["evening"].ToString() == "False")
                        {
                            evng = "0";
                        }
                        else
                        {
                            evng = "1";
                        }
                        holiday_sched_details = halforfull + "*" + mng + "*" + evng;
                        if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                        }
                        if (!holiday_table2.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table2.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
                        }
                    }
                }
                if (ds3.Tables[2].Rows.Count != 0)
                {
                    for (int k = 0; k < ds3.Tables[2].Rows.Count; k++)
                    {
                        string[] split_date_time1 = ds3.Tables[2].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                        string[] dummy_split = split_date_time1[0].Split('/');
                        if (!holiday_table31.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                            holiday_table31.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
                        if (ds3.Tables[2].Rows[k]["halforfull"].ToString() == "False")
                        {
                            halforfull = "0";
                        }
                        else
                        {
                            halforfull = "1";
                        }
                        if (ds3.Tables[2].Rows[k]["morning"].ToString() == "False")
                        {
                            mng = "0";
                        }
                        else
                        {
                            mng = "1";
                        }
                        if (ds3.Tables[2].Rows[k]["evening"].ToString() == "False")
                        {
                            evng = "0";
                        }
                        else
                        {
                            evng = "1";
                        }
                        holiday_sched_details = halforfull + "*" + mng + "*" + evng;
                        if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                        }
                        if (!holiday_table3.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table3.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
                        }
                    }
                }
                //=====================================14/5/12 PRABHA
                con.Close();
                cmd.CommandText = "select rights from  special_hr_rights ";
                cmd.Connection = con;
                con.Open();
                SqlDataReader dr_rights_spl_hr = cmd.ExecuteReader();
                if (dr_rights_spl_hr.HasRows)
                {
                    while (dr_rights_spl_hr.Read())
                    {
                        string spl_hr_rights = string.Empty;
                        Hashtable od_has = new Hashtable();
                        spl_hr_rights = dr_rights_spl_hr["rights"].ToString();
                        if (spl_hr_rights == "True" || spl_hr_rights == "true")
                        {
                            splhr_flag = true;
                            //getspecial_hr();
                        }
                    }
                }
            }
            //===================================
            //------------------------------------------------------------------
            if (ds3.Tables[0].Rows.Count != 0)
            {
                ts = DateTime.Parse(ds3.Tables[0].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                diff_date = Convert.ToString(ts.Days);
                dif_date1 = double.Parse(diff_date.ToString());
            }
            next = 0;
            if (ds2.Tables[0].Rows.Count != 0)
            {
                int rowcount = 0;
                int ccount;
                ccount = ds3.Tables[1].Rows.Count;
                ccount = ccount - 1;
                //if ( == ds2.Tables [0].Rows [mmyycount].["Month_year"])
                while (dumm_from_date <= (per_to_date))
                {
                    int temp_unmark = 0;
                    if (splhr_flag == true)
                    {
                        getspecial_hr(roll_no, cur_start_date_date, cur_end_date_date, deg, sem);
                    }
                    for (int i = 1; i <= mmyycount; i++)
                    {
                        if (cal_from_date == int.Parse(ds2.Tables[0].Rows[next]["month_year"].ToString()))
                        {
                            string[] split_date_time1 = dumm_from_date.ToString().Split(' ');
                            string[] dummy_split = split_date_time1[0].Split('/');
                            if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[1])).ToString().TrimStart('0') + "/" + (Convert.ToInt16(dummy_split[0])).ToString().TrimStart('0') + "/" + (Convert.ToInt16(dummy_split[2])).ToString()))//.TrimStart('0')  added barath 26.01.18
                            {
                                holiday_table11.Add(((Convert.ToInt16(dummy_split[1])).ToString().TrimStart('0') + "/" + (Convert.ToInt16(dummy_split[0])).ToString().TrimStart('0') + "/" + (Convert.ToInt16(dummy_split[2])).ToString()), "3*0*0");
                            }
                            if (holiday_table11.Contains((Convert.ToInt16(dummy_split[1])).ToString().TrimStart('0') + "/" + (Convert.ToInt16(dummy_split[0])).ToString().TrimStart('0') + "/" + (Convert.ToInt16(dummy_split[2])).ToString()))
                            {
                                value_holi_status = GetCorrespondingKey(dummy_split[1].ToString().TrimStart('0') + "/" + dummy_split[0].ToString().TrimStart('0') + "/" + dummy_split[2].ToString(), holiday_table11).ToString();
                                split_holiday_status = value_holi_status.Split('*');
                                if (split_holiday_status[0].ToString() == "3")//=========ful day working day
                                {
                                    split_holiday_status_1 = "1";
                                    split_holiday_status_2 = "1";
                                }
                                else if (split_holiday_status[0].ToString() == "1")//=============half day working day
                                {
                                    if (split_holiday_status[1].ToString() == "1")//==============mng holiday//evng working day
                                    {
                                        split_holiday_status_1 = "0";
                                        split_holiday_status_2 = "1";
                                    }
                                    if (split_holiday_status[2].ToString() == "1")//==============evng holiday//mng working day
                                    {
                                        split_holiday_status_1 = "1";
                                        split_holiday_status_2 = "0";
                                    }
                                }
                                else if (split_holiday_status[0].ToString() == "0")
                                {
                                    dumm_from_date = dumm_from_date.AddDays(1);
                                    if (dumm_from_date.Day == 1)
                                    {
                                        cal_from_date++;
                                        if (moncount > next)
                                        {
                                            next++;
                                        }
                                    }
                                    break;
                                }
                                if (ds3.Tables[1].Rows.Count != 0)
                                {
                                    ts = DateTime.Parse(ds3.Tables[1].Rows[rowcount]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                                    diff_date = Convert.ToString(ts.Days);
                                    dif_date = double.Parse(diff_date.ToString());
                                }
                                else
                                {
                                    dif_date = 0;
                                }
                                if (dif_date == 1)
                                {
                                    leave_pointer = holi_leav;
                                    absent_pointer = holi_absent;
                                }
                                else if (dif_date == -1)
                                {
                                    leave_pointer = holi_leav;
                                    absent_pointer = holi_absent;
                                    if (ccount > rowcount)
                                    {
                                        rowcount += 1;
                                    }
                                }
                                else
                                {
                                    leave_pointer = leav_pt;
                                    absent_pointer = absent_pt;
                                }
                                if (ds3.Tables[2].Rows.Count != 0)
                                {
                                    ts = DateTime.Parse(ds3.Tables[2].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                                    diff_date = Convert.ToString(ts.Days);
                                    dif_date = double.Parse(diff_date.ToString());
                                    if (dif_date == 1)
                                    {
                                        leave_pointer = holi_leav;
                                        absent_pointer = holi_absent;
                                    }
                                }
                                if (dif_date1 == -1)
                                {
                                    leave_pointer = holi_leav;
                                    absent_pointer = holi_absent;
                                }
                                dif_date1 = 0;
                                if (split_holiday_status_1 == "1")
                                {
                                    for (i = 1; i <= fnhrs; i++)
                                    {
                                        date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
                                        value = ds2.Tables[0].Rows[next][date].ToString();
                                        if (value != null && value != "0" && value != "7" && value != "")
                                        {
                                            if (value != "12")
                                                conducthrs = conducthrs + 1;
                                            if (tempvalue != value)
                                            {
                                                tempvalue = value;
                                                for (int j = 0; j < count; j++)
                                                {
                                                    if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                                    {
                                                        ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                                        j = count;
                                                    }
                                                }
                                            }
                                            if (ObtValue == 1)
                                            {
                                                per_abshrs += 1;
                                                absent_hours = absent_hours + 1;
                                            }
                                            else if (ObtValue == 2)
                                            {
                                                notconsider_value += 1;
                                                njhr += 1;
                                            }
                                            else if (ObtValue == 0)
                                            {
                                                per_perhrs += 1;
                                                tot_per_hrs += 1;
                                            }
                                            if (value == "3")
                                            {
                                                per_ondu += 1;
                                                tot_ondu += 1;
                                            }
                                            else if (value == "10")
                                            {
                                                per_leave += 1;
                                            }
                                        }
                                        else if (value == "7")
                                        {
                                            per_hhday += 1;
                                        }
                                        else
                                        {
                                            unmark += 1;
                                            temp_unmark++;
                                        }
                                    }
                                    //  if (per_perhrs >= minpresI)
                                    if (per_perhrs + njhr >= minpresI)
                                    {
                                        Present += 0.5;
                                    }
                                    else if (per_leave >= 1)
                                    {
                                        leave_point += leave_pointer / 2;
                                        Leave += 0.5;
                                    }
                                    else if (per_abshrs >= 1)
                                    {
                                        Absent += 0.5;
                                        absent_point += absent_pointer / 2;
                                    }
                                    if (njhr >= minpresI)
                                    {
                                        njdate += 0.5;
                                        njdate_mng += 1;
                                    }
                                    if (per_ondu >= 1)
                                    {
                                        Onduty += 0.5;
                                    }
                                    if (temp_unmark == fnhrs)
                                    {
                                        per_holidate_mng += 1;
                                        per_holidate += 0.5;
                                        unmark = 0;
                                    }
                                    else
                                    {
                                        dum_unmark = temp_unmark;
                                    }
                                    if (fnhrs - temp_unmark >= minpresI)
                                    {
                                        workingdays += 0.5;
                                    }
                                    mng_conducted_half_days += 1;
                                }
                                per_perhrs = 0;
                                per_ondu = 0;
                                per_leave = 0;
                                per_abshrs = 0;
                                temp_unmark = 0;
                                njhr = 0;
                                int k = fnhrs + 1;
                                if (split_holiday_status_2 == "1")
                                {
                                    for (i = k; i <= NoHrs; i++)
                                    {
                                        date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
                                        value = ds2.Tables[0].Rows[next][date].ToString();
                                        if (value != null && value != "0" && value != "7" && value != "")
                                        {
                                            if (value != "12")
                                                conducthrs = conducthrs + 1;
                                            if (tempvalue != value)
                                            {
                                                tempvalue = value;
                                                for (int j = 0; j < count; j++)
                                                {
                                                    if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                                    {
                                                        ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                                        j = count;
                                                    }
                                                }
                                            }
                                            if (ObtValue == 1)
                                            {
                                                per_abshrs += 1;
                                                absent_hours = absent_hours + 1;
                                            }
                                            else if (ObtValue == 2)
                                            {
                                                notconsider_value += 1;
                                                njhr += 1;
                                            }
                                            else if (ObtValue == 0)
                                            {
                                                per_perhrs += 1;
                                                tot_per_hrs += 1;
                                            }
                                            if (value == "3")
                                            {
                                                per_ondu += 1;
                                                tot_ondu += 1;
                                            }
                                            else if (value == "10")
                                                per_leave += 1;
                                        }
                                        else if (value == "7")
                                        {
                                            per_hhday += 1;
                                        }
                                        else
                                        {
                                            unmark += 1;
                                            temp_unmark++;
                                        }
                                    }
                                    //   if (per_perhrs >= minpresII)
                                    if (per_perhrs + njhr >= minpresII)
                                    {
                                        Present += 0.5;
                                    }
                                    else if (per_leave >= 1)
                                    {
                                        leave_point += leave_pointer / 2;
                                        Leave += 0.5;
                                    }
                                    else if (per_abshrs >= 1)
                                    {
                                        Absent += 0.5;
                                        absent_point += absent_pointer / 2;
                                    }
                                    if (njhr >= minpresII)
                                    {
                                        njdate_evng += 1;
                                        njdate += 0.5;
                                    }
                                    if (per_ondu >= 1)
                                    {
                                        Onduty += 0.5;
                                    }
                                    if (temp_unmark == NoHrs - fnhrs)
                                    {
                                        per_holidate_evng += 1;
                                        per_holidate += 0.5;
                                        unmark = 0;
                                    }
                                    else
                                    {
                                        dum_unmark += unmark;
                                    }
                                    if ((NoHrs - fnhrs) - temp_unmark >= minpresII)
                                    {
                                        workingdays += 0.5;
                                    }
                                    evng_conducted_half_days += 1;
                                }
                                per_perhrs = 0;
                                per_ondu = 0;
                                per_leave = 0;
                                per_abshrs = 0;
                                unmark = 0;
                                njhr = 0;
                                dumm_from_date = dumm_from_date.AddDays(1);
                                if (dumm_from_date.Day == 1)
                                {
                                    cal_from_date++;
                                    if (moncount > next)
                                    {
                                        next++;
                                    }
                                }
                                per_perhrs = 0;
                            }
                        }
                        else
                        {
                            dumm_from_date = dumm_from_date.AddDays(1);
                            if (dumm_from_date.Day == 1)
                            {
                                cal_from_date++;
                                if (moncount > next)
                                {
                                    //next++; //  next++;
                                }
                            }
                            //DateTime dumm_fdate = dumm_from_date.AddDays(1 - Convert.ToInt16(dumm_from_date.Day.ToString()));
                            //dumm_fdate = dumm_fdate.AddMonths(1);
                            //dumm_from_date = dumm_fdate;
                            //if (dumm_from_date.Day == 1)
                            //{
                            //    cal_from_date++;
                            //    if (moncount > next)
                            //    {
                            //        //  next++;
                            //    }
                            //}
                            //if (moncount > next)
                            //{
                            //    i--;
                            //}
                        }
                    }
                }
                int diff_Date = per_from_date.Day - dumm_from_date.Day;
            }
            per_tot_ondu = tot_ondu;
            per_njdate = njdate;
            pre_present_date = Present - njdate;
            per_per_hrs = tot_per_hrs;
            per_absent_date = Absent;
            pre_ondu_date = Onduty;
            pre_leave_date = Leave;
            per_workingdays = workingdays - per_njdate;
            per_workingdays1 = conducthrs; // ((mng_conducted_half_days * fnhrs) + (evng_conducted_half_days * (NoHrs - fnhrs))) - ((Convert.ToInt16(per_holidate_mng) * fnhrs) + (Convert.ToInt16(per_holidate_evng) * (NoHrs - fnhrs))) - notconsider_value - dum_unmark;// ((Convert.ToInt16(njdate_mng) * fnhrs) + (Convert.ToInt16(njdate_evng) * (NoHrs - fnhrs)));
            per_dum_unmark = dum_unmark;
            Present = 0;
            tot_per_hrs = 0;
            Absent = 0;
            Onduty = 0;
            Leave = 0;
            workingdays = 0;
            per_holidate = 0;
            dum_unmark = 0;
            absent_point = 0;
            leave_point = 0;
            njdate = 0;
            tot_ondu = 0;
        }
        //   catch
        {
        }
    }

    public void find_values(string roll_no, string cur_start_date_date, string cur_end_date_date, string deg, string sem)
    {
        string cur_start_date = "", cur_end_date = string.Empty;
        int tot_abs_hrs = 0;
        hat.Clear();
        ds.Clear();
        hat.Add("degree_code", deg);
        hat.Add("sem_ester", sem);
        ds = d2.select_method("period_attnd_schedule", hat, "sp");
        if (ds.Tables[0].Rows.Count != 0)
        {
            NoHrs = int.Parse(ds.Tables[0].Rows[0]["PER DAY"].ToString());
            fnhrs = int.Parse(ds.Tables[0].Rows[0]["I_HALF_DAY"].ToString());
            anhrs = int.Parse(ds.Tables[0].Rows[0]["II_HALF_DAY"].ToString());
            minpresI = int.Parse(ds.Tables[0].Rows[0]["MIN PREE I DAY"].ToString());
            minpresII = int.Parse(ds.Tables[0].Rows[0]["MIN PREE II DAY"].ToString());
        }
        //   persentmonthcal();
        string[] cur_start_date_splt = cur_start_date_date.Split(' ');
        cur_start_date = cur_start_date_splt[0].ToString();
        string[] cur_end_date_splt = cur_end_date_date.Split(' ');
        cur_end_date = cur_end_date_splt[0].ToString();
        string dt = cur_start_date;
        string[] dsplit = dt.Split(new Char[] { '/' });
        cur_start_date = dsplit[0].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[2].ToString();
        demfcal = int.Parse(dsplit[2].ToString());
        demfcal = demfcal * 12;
        cal_from_date = demfcal + int.Parse(dsplit[0].ToString());
        monthcal = cal_from_date.ToString();
        dt = cur_end_date;
        dsplit = dt.Split(new Char[] { '/' });
        cur_end_date = dsplit[0].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[2].ToString();
        demtcal = int.Parse(dsplit[2].ToString());
        demtcal = demtcal * 12;
        cal_to_date = demtcal + int.Parse(dsplit[0].ToString());
        per_from_date = Convert.ToDateTime(cur_start_date_date);
        per_to_date = Convert.ToDateTime(cur_end_date_date);
        dumm_from_date = per_from_date;
        persentmonthcal_attnd(roll_no, cur_start_date, cur_end_date, deg, sem);
        double dum_tage_hrs = 0;
        dum_tage_date = ((pre_present_date / per_workingdays) * 100);
        if (dum_tage_date > 100)
        {
            dum_tage_date = 100;
        }
        else
        {
            dum_tage_date = Math.Round(dum_tage_date, 2, MidpointRounding.AwayFromZero);
        }
        per_con_hrs = (per_workingdays1 - dum_unmark) + tot_conduct_hr_spl_fals;
        dum_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / per_con_hrs) * 100);
        // per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / per_con_hrs) * 100);
        if (dum_tage_hrs > 100)
        {
            dum_tage_hrs = 100;
        }
        else
        {
            dum_tage_hrs = Math.Round(dum_tage_hrs, 2, MidpointRounding.AwayFromZero);
        }
        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 1].Text = per_workingdays.ToString();
        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Text = pre_present_date.ToString();
        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 3].Text = per_absent_date.ToString(); //per_dum_unmark.ToString();
        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 4].Text = dum_tage_date.ToString();
        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 5].Text = per_con_hrs.ToString();
        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 6].Text = (per_per_hrs + tot_per_hrs_spl_fals).ToString();
        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 7].Text = absent_hours.ToString(); //(per_absent_date + per_abshrs_spl).ToString();
        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 8].Text = dum_tage_hrs.ToString();
        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 8].Note = dum_tage_hrs.ToString();
        //string dd = roll_no;
        //hat.Clear();
        //hat.Add("std_rollno", roll_no);
        //hat.Add("from_month", cal_from_date);
        //hat.Add("to_month", cal_to_date);
        //ds2 = d2.select_method("STUD_ATTENDANCE", hat, "sp");
        //hat.Clear();
        //hat.Add("degree_code", deg);
        //hat.Add("sem", sem);
        //hat.Add("from_date", cur_start_date.ToString());
        //hat.Add("to_date", cur_end_date.ToString());
        //hat.Add("coll_code", int.Parse(Session["collegecode"].ToString()));
        //int moncount = 0, mmyycount = 0;
        ////------------------------------------------------------------------
        //int iscount = 0;
        //holidaycon.Close();
        //holidaycon.Open();
        //string sqlstr_holiday = "select  isnull(count(holiday_date),0)as cnt FROM holidayStudents where holiday_date between '" + cur_start_date.ToString() + "' and '" + cur_end_date.ToString() + "' and degree_code=" + deg + " and semester=" + sem + "";
        //SqlCommand cmdholiday = new SqlCommand(sqlstr_holiday, holidaycon);
        //SqlDataAdapter daholiday = new SqlDataAdapter(cmdholiday);
        //DataSet dsholiday = new DataSet();
        //daholiday.Fill(dsholiday);
        //if (dsholiday.Tables[0].Rows.Count > 0)
        //{
        //    iscount = Convert.ToInt16(dsholiday.Tables[0].Rows[0]["cnt"].ToString());
        //}
        //hat.Add("iscount", iscount);
        //mmyycount = ds2.Tables[0].Rows.Count;
        //moncount = mmyycount - 1;
        //ds3 = d2.select_method("ALL_HOLIDATE_DETAILS", hat, "sp");
        //Dictionary<string, int> holiday_table1 = new Dictionary<string, int>();
        //Dictionary<string, int> holiday_table2 = new Dictionary<string, int>();
        //Dictionary<string, int> holiday_table3 = new Dictionary<string, int>();
        //holiday_table11.Clear();
        //holiday_table21.Clear();
        //holiday_table31.Clear();
        ////if (ds3.Tables[0].Rows.Count != 0)
        ////{
        ////    for (int k = 0; k < ds3.Tables[0].Rows.Count; k++)
        ////    {
        ////        string[] split_date_time1 = ds3.Tables[0].Rows[k]["HOLI_DATE"].ToString().Split(' ');
        ////        string[] dummy_split = split_date_time1[0].Split('/');
        ////        holiday_table11.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        ////        holiday_table1.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        ////    }
        ////}
        ////if (ds3.Tables[1].Rows.Count != 0)
        ////{
        ////    for (int k = 0; k < ds3.Tables[1].Rows.Count; k++)
        ////    {
        ////        string[] split_date_time1 = ds3.Tables[1].Rows[k]["HOLI_DATE"].ToString().Split(' ');
        ////        string[] dummy_split = split_date_time1[0].Split('/');
        ////        holiday_table21.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        ////        holiday_table2.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        ////    }
        ////}
        ////if (ds3.Tables[2].Rows.Count != 0)
        ////{
        ////    for (int k = 0; k < ds3.Tables[2].Rows.Count; k++)
        ////    {
        ////        string[] split_date_time1 = ds3.Tables[2].Rows[k]["HOLI_DATE"].ToString().Split(' ');
        ////        string[] dummy_split = split_date_time1[0].Split('/');
        ////        holiday_table31.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        ////        holiday_table3.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        ////    }
        ////}
        //if (ds3.Tables[0].Rows.Count != 0)
        //{
        //    for (int k = 0; k < ds3.Tables[0].Rows.Count; k++)
        //    {
        //        string[] split_date_time1 = ds3.Tables[0].Rows[k]["HOLI_DATE"].ToString().Split(' ');
        //        string[] dummy_split = split_date_time1[0].Split('/');
        //        if (!holiday_table11.ContainsKey(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0]))
        //        {
        //            holiday_table11.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        //        }
        //        if (!holiday_table1.ContainsKey(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0]))
        //        {
        //            holiday_table1.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        //        }
        //    }
        //}
        //if (ds3.Tables[1].Rows.Count != 0)
        //{
        //    for (int k = 0; k < ds3.Tables[1].Rows.Count; k++)
        //    {
        //        string[] split_date_time1 = ds3.Tables[1].Rows[k]["HOLI_DATE"].ToString().Split(' ');
        //        string[] dummy_split = split_date_time1[0].Split('/');
        //        if (!holiday_table21.ContainsKey(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0]))
        //        {
        //            holiday_table21.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        //        }
        //        if (!holiday_table2.ContainsKey(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0]))
        //        {
        //            holiday_table2.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        //        }
        //    }
        //}
        //if (ds3.Tables[2].Rows.Count != 0)
        //{
        //    for (int k = 0; k < ds3.Tables[2].Rows.Count; k++)
        //    {
        //        string[] split_date_time1 = ds3.Tables[2].Rows[k]["HOLI_DATE"].ToString().Split(' ');
        //        string[] dummy_split = split_date_time1[0].Split('/');
        //        if (!holiday_table31.ContainsKey(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0]))
        //        {
        //            holiday_table31.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        //        }
        //        if (!holiday_table3.ContainsKey(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0]))
        //        {
        //            holiday_table3.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
        //        }
        //    }
        //}
        //con.Close();
        //con.Open();
        //string attnd_points = "select *from leave_points";
        //SqlDataAdapter da_attnd_pts;
        //da_attnd_pts = new SqlDataAdapter(attnd_points, con);
        //da_attnd_pts.Fill(ds_attnd_pts);
        //if (ds_attnd_pts.Tables[0].Rows.Count > 0)
        //{
        //    holi_leav = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["leave_bef_aft"].ToString());
        //    holi_absent = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["absent_bef_aft"].ToString());
        //    leav_pt = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["leave"].ToString());
        //    absent_pt = Convert.ToInt16(ds_attnd_pts.Tables[0].Rows[0]["absent"].ToString());
        //}
        //int count = 0;
        //ds1.Clear();
        //hat.Clear();
        //hat.Add("colege_code", Session["collegecode"].ToString());
        //ds1 = d2.select_method("ATT_MASTER_SETTING", hat, "sp");
        //count = ds1.Tables[0].Rows.Count;
        //TimeSpan ts;
        //string diff_date  = string.Empty;
        //double dif_date1 = 0, dif_date = 0;
        //int next = 0;
        ////------------------------------------------------------------------
        //if (ds3.Tables[0].Rows.Count != 0)
        //{
        //    ts = DateTime.Parse(ds3.Tables[0].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
        //    diff_date = Convert.ToString(ts.Days);
        //    dif_date1 = double.Parse(diff_date.ToString());
        //}
        //next = 0;
        //if (ds2.Tables[0].Rows.Count != 0)
        //{
        //    int rowcount = 0;
        //    int ccount;
        //    ccount = ds3.Tables[1].Rows.Count;
        //    ccount = ccount - 1;
        //    //if ( == ds2.Tables [0].Rows [mmyycount].["Month_year"])
        //    while (dumm_from_date <= (per_to_date))
        //    {
        //        for (int i = 1; i <= mmyycount; i++)
        //        {
        //            if (cal_from_date == int.Parse(ds2.Tables[0].Rows[next]["month_year"].ToString()))
        //            {
        //                string[] split_date_time1 = dumm_from_date.ToString().Split(' ');
        //                string[] dummy_split = split_date_time1[0].Split('/');
        //                if (!holiday_table11.Contains(dummy_split[0].ToString() + "/" + dummy_split[1].ToString() + "/" + dummy_split[2].ToString()))
        //                //if (dumm_from_date != DateTime.Parse(ds3.Tables[1].Rows[rowcount]["HOLI_DATE"].ToString()))
        //                {
        //                    //if (ds3.Tables[1].Rows.Count != 0)
        //                    //{
        //                    //    ts = DateTime.Parse(ds3.Tables[1].Rows[rowcount]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
        //                    //    //ts = DateTime.Parse(ds3.Tables[1].Rows[rowcount]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
        //                    //    diff_date = Convert.ToString(ts.Days);
        //                    //    dif_date = double.Parse(diff_date.ToString());
        //                    //}
        //                    //else
        //                    //{
        //                    //    dif_date = 0;
        //                    //}
        //                    //if (dif_date == 1)
        //                    //{
        //                    //    leave_pointer = holi_leav;
        //                    //    absent_pointer = holi_absent;
        //                    //}
        //                    //else if (dif_date == -1)
        //                    //{
        //                    //    leave_pointer = holi_leav;
        //                    //    absent_pointer = holi_absent;
        //                    //    if (ccount > rowcount)
        //                    //    {
        //                    //        rowcount += 1;
        //                    //    }
        //                    //}
        //                    //else
        //                    //{
        //                    //    leave_pointer = leav_pt;
        //                    //    absent_pointer = absent_pt;
        //                    //}
        //                    //if (ds3.Tables[2].Rows.Count != 0)
        //                    //{
        //                    //    ts = DateTime.Parse(ds3.Tables[2].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
        //                    //    diff_date = Convert.ToString(ts.Days);
        //                    //    dif_date = double.Parse(diff_date.ToString());
        //                    //    if (dif_date == 1)
        //                    //    {
        //                    //        leave_pointer = holi_leav;
        //                    //        absent_pointer = holi_absent;
        //                    //    }
        //                    //}
        //                    //if (dif_date1 == -1)
        //                    //{
        //                    //    leave_pointer = holi_leav;
        //                    //    absent_pointer = holi_absent;
        //                    //}
        //                    dif_date1 = 0;
        //                    for (i = 1; i <= fnhrs; i++)
        //                    {
        //                        date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
        //                        value = ds2.Tables[0].Rows[next][date].ToString();
        //                        if (value != null && value != "0" && value != "7" && value != "")
        //                        {
        //                            if (tempvalue != value)
        //                            {
        //                                tempvalue = value;
        //                                for (int j = 0; j < count; j++)
        //                                {
        //                                    if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
        //                                    {
        //                                        ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
        //                                        j = count;
        //                                    }
        //                                }
        //                            }
        //                            if (ObtValue == 1)
        //                            {
        //                                per_abshrs += 1;
        //                                tot_abs_hrs = tot_abs_hrs + 1;
        //                            }
        //                            else if (ObtValue == 2)
        //                            {
        //                                njhr += 1;
        //                            }
        //                            else if (ObtValue == 0)
        //                            {
        //                                per_perhrs += 1;
        //                                tot_per_hrs += 1;
        //                            }
        //                            if (value == "3")
        //                            {
        //                                per_ondu += 1;
        //                                tot_ondu += 1;
        //                            }
        //                            else if (value == "10")
        //                            {
        //                                per_leave += 1;
        //                            }
        //                        }
        //                        else if (value == "7")
        //                        {
        //                            per_hhday += 1;
        //                        }
        //                        else
        //                        {
        //                            unmark += 1;
        //                        }
        //                    }
        //                    if (per_perhrs >= minpresI)
        //                    {
        //                        Present += 0.5;
        //                    }
        //                    else if (per_leave >= 1)
        //                    {
        //                        leave_point += leave_pointer / 2;
        //                        Leave += 0.5;
        //                    }
        //                    else if (per_abshrs >= 1)
        //                    {
        //                        Absent += 0.5;
        //                        absent_point += absent_pointer / 2;
        //                    }
        //                    else if (njhr >= minpresI)
        //                    {
        //                        njdate += 0.5;
        //                    }
        //                    if (per_ondu >= 1)
        //                    {
        //                        Onduty += 0.5;
        //                    }
        //                    per_perhrs = 0;
        //                    per_ondu = 0;
        //                    per_leave = 0;
        //                    per_abshrs = 0;
        //                    // unmark = 0;
        //                    njhr = 0;
        //                    int k = i;
        //                    for (i = k; i <= NoHrs; i++)
        //                    {
        //                        date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
        //                        value = ds2.Tables[0].Rows[next][date].ToString();
        //                        if (value != null && value != "0" && value != "7" && value != "")
        //                        {
        //                            if (tempvalue != value)
        //                            {
        //                                tempvalue = value;
        //                                for (int j = 0; j < count; j++)
        //                                {
        //                                    if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
        //                                    {
        //                                        ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
        //                                        j = count;
        //                                    }
        //                                }
        //                            }
        //                            if (ObtValue == 1)
        //                            {
        //                                per_abshrs += 1;
        //                                tot_abs_hrs = tot_abs_hrs + 1;
        //                            }
        //                            else if (ObtValue == 2)
        //                            {
        //                                njhr += 1;
        //                            }
        //                            else if (ObtValue == 0)
        //                            {
        //                                per_perhrs += 1;
        //                                tot_per_hrs += 1;
        //                            }
        //                            if (value == "3")
        //                            {
        //                                per_ondu += 1;
        //                                tot_ondu += 1;
        //                            }
        //                            else if (value == "10")
        //                                per_leave += 1;
        //                        }
        //                        else if (value == "7")
        //                        {
        //                            per_hhday += 1;
        //                        }
        //                        else
        //                        {
        //                            unmark += 1;
        //                        }
        //                    }
        //                    if (per_perhrs >= minpresII)
        //                    {
        //                        Present += 0.5;
        //                    }
        //                    else if (per_leave >= 1)
        //                    {
        //                        leave_point += leave_pointer / 2;
        //                        Leave += 0.5;
        //                    }
        //                    else if (per_abshrs >= 1)
        //                    {
        //                        Absent += 0.5;
        //                        absent_point += absent_pointer / 2;
        //                    }
        //                    else if (njhr >= minpresII)
        //                    {
        //                        njdate += 0.5;
        //                    }
        //                    if (per_ondu >= 1)
        //                    {
        //                        Onduty += 0.5;
        //                    }
        //                    if (unmark == NoHrs)
        //                    {
        //                        per_holidate += 1;
        //                        unmark = 0;
        //                    }
        //                    else
        //                    {
        //                        dum_unmark += unmark;
        //                    }
        //                    per_perhrs = 0;
        //                    per_ondu = 0;
        //                    per_leave = 0;
        //                    per_abshrs = 0;
        //                    unmark = 0;
        //                    njhr = 0;
        //                    dumm_from_date = dumm_from_date.AddDays(1);
        //                    if (dumm_from_date.Day == 1)
        //                    {
        //                        cal_from_date++;
        //                        if (moncount > next)
        //                        {
        //                            next++;
        //                        }
        //                    }
        //                    workingdays += 1;
        //                    per_perhrs = 0;
        //                }
        //                else
        //                {
        //                    workingdays += 1;
        //                    dumm_from_date = dumm_from_date.AddDays(1);
        //                    if (dumm_from_date.Day == 1)
        //                    {
        //                        cal_from_date++;
        //                        if (moncount > next)
        //                        {
        //                            next++;
        //                        }
        //                    }
        //                    per_holidate += 1;
        //                }
        //            }
        //            else
        //            {
        //                DateTime dumm_fdate = dumm_from_date.AddDays(1 - Convert.ToInt16(dumm_from_date.Day.ToString()));
        //                // dumm_from_date = dumm_fdate;
        //                dumm_fdate = dumm_fdate.AddMonths(1);
        //                dumm_from_date = dumm_fdate;
        //                if (dumm_from_date.Day == 1)
        //                {
        //                    cal_from_date++;
        //                    if (moncount > next)
        //                    {
        //                        next++;
        //                    }
        //                }
        //                if (moncount > next)
        //                {
        //                    i--;
        //                }
        //            }
        //        }
        //    }
        //    int diff_Date = per_from_date.Day - dumm_from_date.Day;
        //}
        //per_dum_unmark = 0;
        //per_tot_ondu = 0;
        //pre_present_date = 0;
        //per_workingdays = 0;
        //per_dum_unmark = 0;
        //per_tot_ondu = tot_ondu;
        //per_njdate = njdate;
        //pre_present_date = Present;//-att day
        //per_per_hrs = tot_per_hrs;//--pres hr
        //per_absent_date = tot_abs_hrs;//-abs hr
        //pre_ondu_date = Onduty;
        //pre_leave_date = Leave;
        //per_workingdays = workingdays - per_holidate - per_njdate;//tot day
        //per_dum_unmark = Absent;   //-abs date    
        //per_tage_date = ((pre_present_date / per_workingdays) * 100);
        //if (per_tage_date > 100)
        //{
        //    per_tage_date = 100;
        //}
        //per_con_hrs = ((per_workingdays * NoHrs) - per_dum_unmark);
        //per_tage_hrs = ((per_per_hrs / per_con_hrs) * 100);
        //if (per_tage_hrs > 100)
        //{
        //    per_tage_hrs = 100;
        //}
        //dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_date.ToString()));//---------percent date
        //if (dum_tage_date == "NaN")
        //{
        //    dum_tage_date = "0";
        //}
        //else if (dum_tage_date == "Infinity")
        //{
        //    dum_tage_date = "0";
        //}
        //dum_tage_hrs = String.Format("{0:0,0.00}", float.Parse(per_tage_hrs.ToString()));//------percent hrs
        //if (dum_tage_hrs == "NaN")
        //{
        //    dum_tage_hrs = "0";
        //}
        //else if (dum_tage_hrs == "Infinity")
        //{
        //    dum_tage_hrs = "0";
        //}
        //per_con_hrs = ((per_workingdays * NoHrs) - per_dum_unmark);//----------con hr
        //tot_ondu = 0;
        //njdate = 0;
        //Present = 0;
        //tot_per_hrs = 0;
        //tot_abs_hrs = 0;
        //Onduty = 0;
        //Leave = 0;
        //workingdays = 0;
        //per_holidate = 0;
        //per_njdate = 0;
        //Absent = 0;
    }

    public void getnoofpresent(string rollno, DateTime fromdate, DateTime todate, string degree, int semester, string colege_code, out double noofpresent, out double noofabsent, out double noofHalfDay, out double noofWorkingDays)
    {
        //int tempvalue = -1;
        string tempvalue = "-1";
        int ObtValue = -1;
        long LngOD = 0;
        long LngML = 0;
        long LngNSS = 0;
        long LngHS = 0;
        long LngNCC = 0;
        long LngL = 0;
        long LngSOD = 0;
        DateTime dummydate;
        double Present = 0;
        double Absent = 0;
        double halfday = 0;
        double workingdays = 0;
        long my = 0;
        //string datefad, dtfromad;
        //string datefromad;
        //string yr4, m4, d4;
        //datefad = fromdate.ToString();
        //string[] split4 = datefad.Split(new Char[] { '-' });
        //datefromad = split4[0].ToString() + "-" + split4[1].ToString() + "-" + split4[2].ToString();
        //yr4 = split4[2].ToString();
        //m4 = split4[1].ToString();
        //d4 = split4[0].ToString();
        //dtfromad = m4 + "-" + d4 + "-" + yr4;
        //string date2ad;
        //string datetoad;
        //string yr5, m5, d5;
        //date2ad = todate.ToString();
        //string[] split5 = date2ad.Split(new Char[] { '-' });
        //datetoad = split5[0].ToString() + "-" + split5[1].ToString() + "-" + split5[2].ToString();
        //yr5 = split5[2].ToString();
        //m5 = split5[1].ToString();
        //d5 = split5[0].ToString();
        //datetoad = m5 + "-" + d5 + "-" + yr5;
        //DateTime dt1 = Convert.ToDateTime(dtfromad);
        //DateTime dt2 = Convert.ToDateTime(datetoad);
        //TimeSpan ts = dt2 - dt1;
        //int days = ts.Days;
        long fmyear = (Convert.ToInt64(fromdate.ToString("yyyy")) * 12) + Convert.ToInt64(fromdate.ToString("MM"));
        long tmyear = (Convert.ToInt64(todate.ToString("yyyy")) * 12) + Convert.ToInt64(todate.ToString("MM"));
        int hdflag = 0;
        int unmark = 0;
        int wdflag = 0;
        int fir_ctr = 0;
        int hhday = 0;
        int hdflag1 = 0;
        int unmark1 = 0;
        int wdflag1 = 0;
        int sec_ctr = 0;
        Boolean absentsetting = false;
        {
            cmd.CommandText = "select linkvalue from inssettings where college_code=" + colege_code + " and linkname='Attendance Settings'";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rlink = cmd.ExecuteReader();
            if (rlink.Read())
            {
                if (rlink.GetValue(0).ToString() == "1")
                    absentsetting = true;
                else
                    absentsetting = false;
            }
            else
                absentsetting = false;
            rlink.Close();
            con1.Close();
        }
        int i = 0;
        if (absentsetting == true)
        {
            cmd.CommandText = "select * from PeriodAttndSchedule where degree_code = " + degree + " and semester=" + semester + "";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rperiod = cmd.ExecuteReader();
            if (rperiod.Read())
            {
                dummydate = fromdate;
                my = 0;
                while (dummydate <= todate)
                {
                    my = (Convert.ToInt64(dummydate.ToString("MM")) + (Convert.ToInt64(dummydate.ToString("yyyy"))) * 12);
                    cmd.CommandText = "select * from attendance where roll_no='" + rollno + "' and month_year =" + my + "";
                    cmd.Connection = con2;
                    con2.Open();
                    SqlDataReader ratt = cmd.ExecuteReader();
                    if (ratt.Read())
                    {
                        hdflag = 0;
                        unmark = 0;
                        wdflag = 0;
                        fir_ctr = 0;
                        hhday = 0;
                        for (i = 1; i <= Convert.ToInt32(rperiod["no_of_hrs_I_half_day"].ToString()); i++)
                        {
                            string value = ratt[("d" + dummydate.Day.ToString("") + "d" + i.ToString())].ToString();
                            //int value = 0;
                            //if (int.TryParse(val, out value))
                            //    value = Convert.ToInt32(val);
                            if (value != null && value != "0" && value != "7" && value != "" && value != "12")
                            {
                                if (tempvalue != value)
                                {
                                    tempvalue = value;
                                    cmd.CommandText = "select * from AttMasterSetting  where LeaveCode= " + value + " and collegecode=" + colege_code + "";
                                    cmd.Connection = con3;
                                    con3.Open();
                                    SqlDataReader rleave = cmd.ExecuteReader();
                                    if (rleave.Read())
                                        ObtValue = Convert.ToInt32(rleave["CalcFlag"].ToString());
                                    rleave.Close();
                                    con3.Close();
                                    if (ObtValue == -1)
                                    {
                                        ratt.Close();
                                        // return;
                                    }
                                }
                                if (ObtValue == 1)
                                {
                                    fir_ctr = fir_ctr + 1;
                                    wdflag = 1;
                                }
                                else if (ObtValue == 2)
                                    wdflag = 0;
                                else if (ObtValue == 0)
                                    wdflag = 1;
                                if (value == "3")
                                    LngOD = LngOD + 1;
                                else if (value == "4")
                                    LngML = LngML + 1;
                                else if (value == "6")
                                    LngNSS = LngNSS + 1;
                                else if (value == "11")
                                    LngNCC = LngNCC + 1;
                                else if (value == "12")
                                    LngHS = LngHS + 1;
                                else if (value == "10")
                                    LngL = LngL + 1;
                                else if (value == "5")
                                    LngSOD = LngSOD + 1;
                            }
                            else if (value == "7")
                            {
                                hhday = 1;
                                wdflag = 1;
                            }
                            else
                                unmark = 1;
                        }
                        int k = i;
                        if (fir_ctr > (Convert.ToInt32(rperiod["no_of_hrs_I_half_day"]) - Convert.ToInt32(rperiod["min_pres_I_half_day"])) || wdflag == 0)
                            hdflag = 1;
                        else
                            hdflag = 0;
                        hdflag1 = 0;
                        unmark1 = 0;
                        wdflag1 = 0;
                        sec_ctr = 0;
                        // tempvalue = "-1";
                        for (i = k; i <= Convert.ToInt32(rperiod["no_of_hrs_per_day"].ToString()); i++)
                        {
                            string value = ratt[("d" + dummydate.Day.ToString() + "d" + i.ToString())].ToString();
                            // int value = 0;
                            //if (int.TryParse(val, out value))
                            //    value = Convert.ToInt32(val);
                            if (value != null && value != "0" && value != "7" && value != "" && value != "12")
                            {
                                if (tempvalue != value)
                                {
                                    tempvalue = value;
                                    cmd.CommandText = "select * from AttMasterSetting  where LeaveCode='" + value + "'and collegecode='" + colege_code + "' ";
                                    cmd.Connection = con3;
                                    con3.Open();
                                    SqlDataReader rleave = cmd.ExecuteReader();
                                    if (rleave.Read())
                                        ObtValue = Convert.ToInt32(rleave["CalcFlag"].ToString());
                                    rleave.Close();
                                    con3.Close();
                                    if (ObtValue == -1)
                                    {
                                        ratt.Close();
                                        //return;
                                    }
                                }
                                if (ObtValue == 1)
                                {
                                    sec_ctr = sec_ctr + 1;
                                    wdflag1 = 1;
                                }
                                else if (ObtValue == 2)
                                    wdflag1 = 0;
                                else if (ObtValue == 0)
                                    wdflag1 = 1;
                                if (value == "3")
                                    LngOD = LngOD + 1;
                                else if (value == "4")
                                    LngML = LngML + 1;
                                else if (value == "6")
                                    LngNSS = LngNSS + 1;
                                else if (value == "11")
                                    LngNCC = LngNCC + 1;
                                else if (value == "12")
                                    LngHS = LngHS + 1;
                                else if (value == "10")
                                    LngL = LngL + 1;
                                else if (value == "5")
                                    LngSOD = LngSOD + 1;
                            }
                            else if (value == "7")
                            {
                                hhday = 1;
                                wdflag1 = 1;
                            }
                            else if (value != "")
                                unmark1 = 1;
                        }
                        if (sec_ctr > (Convert.ToInt32(rperiod["no_of_hrs_II_half_day"].ToString()) - Convert.ToInt32(rperiod["min_pres_II_half_day"].ToString())) || wdflag1 == 0)
                            hdflag1 = 1;
                        else
                            hdflag1 = 0;
                        if (hdflag == 0 && hdflag1 == 0 && unmark == 0 && unmark1 == 0)
                        {
                            if (hhday == 1)
                                Present = Present + 0.5;
                            else
                                Present = Present + 1;
                        }
                        else if (hdflag == 1 && hdflag1 == 0 && unmark == 0 && unmark1 == 0 && hhday == 0)
                        {
                            halfday = halfday + 1;
                            Absent = Absent + 0.5;
                        }
                        else if (hdflag == 0 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && hhday == 0)
                        {
                            halfday = halfday + 1;
                            Absent = Absent + 0.5;
                        }
                        else if (hdflag == 1 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 1;
                        else if (hdflag == 1 && hdflag1 == 0 && unmark == 0 && unmark1 == 0 && hhday == 1 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 0.5;
                        else if (hdflag == 0 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && hhday == 1 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 0.5;
                        if (wdflag == 1 || wdflag1 == 1 && unmark == 0 && unmark1 == 0)
                        {
                            if (hhday == 1)
                            {
                                if (wdflag == 1)
                                    workingdays = workingdays + 0.5;
                                else if (wdflag1 == 1)
                                    workingdays = workingdays + 0.5;
                            }
                            else
                            {
                                if (wdflag == 1)
                                    workingdays = workingdays + 1;
                                else if (wdflag1 == 1)
                                    workingdays = workingdays + 1;
                            }
                        }
                    }
                    hhday = 0;
                    dummydate = dummydate.AddDays(1);
                    ratt.Close();
                    con2.Close();
                }
            }
            rperiod.Close();
            con1.Close();
        }
        else
        {
            cmd.CommandText = "select * from PeriodAttndSchedule where degree_code = " + degree + " and semester=" + semester + "";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rperiod = cmd.ExecuteReader();
            if (rperiod.Read())
            {
                dummydate = fromdate;
                my = 0;
                while (dummydate <= todate)
                {
                    my = (Convert.ToInt64(dummydate.ToString("MM")) + (Convert.ToInt64(dummydate.ToString("yyyy"))) * 12);
                    cmd.CommandText = "select * from attendance where roll_no='" + rollno + "' and month_year =" + my + "";
                    cmd.Connection = con2;
                    con2.Open();
                    SqlDataReader ratt = cmd.ExecuteReader();
                    if (ratt.Read())
                    {
                        hdflag = 0;
                        unmark = 0;
                        wdflag = 0;
                        fir_ctr = 0;
                        hhday = 0;
                        for (i = 1; i <= Convert.ToInt32(rperiod["no_of_hrs_I_half_day"].ToString()); i++)
                        {
                            string value = ratt[("d" + dummydate.Day.ToString() + "d" + i.ToString())].ToString();
                            //int value = 0;
                            //if (int.TryParse(val, out value))
                            //    value = Convert.ToInt32(val);
                            if (value != null && value != "0 " && value != "7")
                            {
                                if (tempvalue != value)
                                {
                                    tempvalue = value;
                                    cmd.CommandText = "select * from AttMasterSetting LeaveCode='" + value + "'and collegecode='" + colege_code + "' ";
                                    cmd.Connection = con3;
                                    con3.Open();
                                    SqlDataReader rleave = cmd.ExecuteReader();
                                    if (rleave.Read())
                                        ObtValue = Convert.ToInt32(rleave["CalcFlag"].ToString());
                                    rleave.Close();
                                    con3.Close();
                                    if (ObtValue == -1)
                                    {
                                        ratt.Close();
                                    }
                                }
                                if (ObtValue == 1)
                                {
                                    fir_ctr = fir_ctr + 1;
                                    wdflag = 1;
                                }
                                else if (ObtValue == 2)
                                    wdflag = 0;
                                else if (ObtValue == 0)
                                    wdflag = 1;
                                if (value == "3")
                                    LngOD = LngOD + 1;
                                else if (value == "4")
                                    LngML = LngML + 1;
                                else if (value == "6")
                                    LngNSS = LngNSS + 1;
                                else if (value == "11")
                                    LngNCC = LngNCC + 1;
                                else if (value == "12")
                                    LngHS = LngHS + 1;
                            }
                            else if (value == "7")
                            {
                                hhday = 1;
                                wdflag = 1;
                            }
                            else
                                unmark = 1;
                        }
                        if (fir_ctr > (Convert.ToInt32(rperiod["no_of_hrs_I_half_day"]) - Convert.ToInt32(rperiod["min_pres_I_half_day"])) || wdflag == 0)
                            hdflag = 1;
                        else
                            hdflag = 0;
                        hdflag1 = 0;
                        unmark1 = 0;
                        wdflag1 = 0;
                        sec_ctr = 0;
                        int k = i;
                        for (i = k; i <= Convert.ToInt32(rperiod["no_of_hrs_per_day"].ToString()); i++)
                        {
                            string value = ratt[("d" + dummydate.Day.ToString() + "d" + i.ToString())].ToString();
                            //int value = 0;
                            //if (int.TryParse(val, out value))
                            //    value = Convert.ToInt32(val);
                            if (value != null && value != "0" && value != "7" && value != "12" && value != "")
                            {
                                if (tempvalue != value)
                                {
                                    tempvalue = value;
                                    cmd.CommandText = "select * from AttMasterSetting  where LeaveCode='" + value + "'and collegecode='" + colege_code + "' ";
                                    cmd.Connection = con3;
                                    con3.Open();
                                    SqlDataReader rleave = cmd.ExecuteReader();
                                    if (rleave.Read())
                                        ObtValue = Convert.ToInt32(rleave["CalcFlag"].ToString());
                                    rleave.Close();
                                    con3.Close();
                                    if (ObtValue == -1)
                                    {
                                        ratt.Close();
                                    }
                                }
                                if (ObtValue == 1)
                                {
                                    sec_ctr = sec_ctr + 1;
                                    wdflag1 = 1;
                                }
                                else if (ObtValue == 2)
                                    wdflag1 = 0;
                                else if (ObtValue == 0)
                                    wdflag1 = 1;
                                if (value == "3")
                                    LngOD = LngOD + 1;
                                else if (value == "4")
                                    LngML = LngML + 1;
                                else if (value == "6")
                                    LngNSS = LngNSS + 1;
                                else if (value == "11")
                                    LngNCC = LngNCC + 1;
                                else if (value == "12")
                                    LngHS = LngHS + 1;
                            }
                            else if (value == "7")
                            {
                                hhday = 1;
                                wdflag1 = 1;
                            }
                            else
                                unmark1 = 1;
                        }
                        if (sec_ctr > (Convert.ToInt32(rperiod["no_of_hrs_II_half_day"].ToString()) - Convert.ToInt32(rperiod["min_pres_II_half_day"].ToString())) || wdflag1 == 0)
                            hdflag1 = 1;
                        else
                            hdflag1 = 0;
                        if (hdflag == 0 && hdflag1 == 0 && unmark == 0 && unmark1 == 0)
                        {
                            if (hhday == 1)
                                Present = Present + 0.5;
                            else
                                Present = Present + 1;
                        }
                        else if (hdflag == 1 && hdflag1 == 0 && unmark == 0 && unmark1 == 0 && hhday == 0)
                        {
                            halfday = halfday + 1;
                            Absent = Absent + 0.5;
                        }
                        else if (hdflag == 0 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && hhday == 0)
                        {
                            halfday = halfday + 1;
                            Absent = Absent + 0.5;
                        }
                        else if (hdflag == 1 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 1;
                        else if (hdflag == 1 && hdflag1 == 0 && unmark == 0 && unmark1 == 0 && hhday == 1 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 0.5;
                        else if (hdflag == 0 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && hhday == 1 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 0.5;
                        if (wdflag == 1 || wdflag1 == 1 && unmark == 0 && unmark1 == 0)
                        {
                            if (hhday == 1)
                            {
                                if (wdflag == 1)
                                    workingdays = workingdays + 0.5;
                                else if (wdflag1 == 1)
                                    workingdays = workingdays + 0.5;
                            }
                            else
                            {
                                if (wdflag == 1)
                                    workingdays = workingdays + 1;
                                else if (wdflag1 == 1)
                                    workingdays = workingdays + 1;
                            }
                        }
                    }
                    hhday = 0;
                    dummydate = dummydate.AddDays(1);
                    ratt.Close();
                    con2.Close();
                }
            }
            rperiod.Close();
            con1.Close();
        }
        noofpresent = Present;
        noofabsent = Absent;
        noofHalfDay = halfday;
        noofWorkingDays = workingdays;
        long noofODHours = LngOD;
        long noofMLHours = LngML;
        long noofNSSHours = LngNSS;
        long noofHSHours = LngHS;
        long noofNCCHours = LngNCC;
        long noLeaveHours = LngL;
        long noSODHours = LngSOD;
        return;
    }

    protected void Buttonsemdate_Click(object sender, EventArgs e)
    {
        initattendence();
        Fpsattendence.Sheets[0].AutoPostBack = false;
        //// FpSgen.Visible = true;
        semperc = false;
        Fpsattendence.Visible = true;
        Fpsattendence.ColumnHeader.Visible = true;
        Fpsattendence.Sheets[0].ColumnCount = 0;
        Fpsattendence.Sheets[0].ColumnCount = 9;
        Fpsattendence.Sheets[0].DefaultColumnWidth = 120;
        Fpsattendence.Sheets[0].DefaultRowHeight = 20;
        Fpsattendence.TitleInfo.Text = lbl_semOrTerm.Text + " DATE DETAILS";
        Fpsattendence.ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpsattendence.ColumnHeader.Cells[0, 1].Text = lbl_semOrTerm.Text + " Starting Date";
        Fpsattendence.ColumnHeader.Cells[0, 2].Text = lbl_semOrTerm.Text + " End Date";
        Fpsattendence.ColumnHeader.Cells[0, 3].Text = "No Of Days";
        Fpsattendence.ColumnHeader.Cells[0, 4].Text = lbl_semOrTerm.Text;
        Fpsattendence.Columns[0].Width = 40;
        Fpsattendence.Columns[0].HorizontalAlign = HorizontalAlign.Center;
        Fpsattendence.Columns[1].Width = 100;
        Fpsattendence.Columns[2].Width = 100;
        Fpsattendence.Columns[3].Width = 90;
        Fpsattendence.Columns[4].Width = 72;
        cmd.CommandText = "Select degree_code,current_semester,batch_year from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rsem = cmd.ExecuteReader();
        if (rsem.Read())
        {
            cmd.CommandText = "select CONVERT(VARCHAR(10),start_date,103),CONVERT(VARCHAR(10),end_date,103),no_of_working_days from seminfo where degree_code='" + rsem.GetValue(0).ToString() + "' and semester='" + rsem.GetValue(1).ToString() + "' and batch_year= '" + rsem.GetValue(2).ToString() + "'  order by semester desc ";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rperiod = cmd.ExecuteReader();

            #region excluding holiday based on from date and to date //modified by Deepali on March 19 2018

            dttemp.Clear();
            dttemp = idirAcc.selectDataTable("select CONVERT(VARCHAR(10),start_date,103) as start_date,CONVERT(VARCHAR(10),end_date,103) as end_date,no_of_working_days from seminfo where degree_code='" + rsem.GetValue(0).ToString() + "' and semester='" + rsem.GetValue(1).ToString() + "' and batch_year= '" + rsem.GetValue(2).ToString() + "'  order by semester desc ");
            int totdays = 0;
            int holidaycount = 0;
            if (dttemp.Rows.Count > 0)
            {
                string startdatestr = Convert.ToString(dttemp.Rows[0]["start_date"]);
                string enddatestr = Convert.ToString(dttemp.Rows[0]["end_date"]);

                string[] startdatestr1 = Convert.ToString(dttemp.Rows[0]["start_date"]).Split('/');
                string[] enddatestr1 = Convert.ToString(dttemp.Rows[0]["end_date"]).Split('/');
                DateTime dtstart = Convert.ToDateTime(startdatestr1[1] + "-" + startdatestr1[0] + "-" + startdatestr1[2]);
                DateTime dtend = Convert.ToDateTime(enddatestr1[1] + "-" + enddatestr1[0] + "-" + enddatestr1[2]);

                dttemp.Clear();
                dttemp = getHolidayDates(startdatestr1[1] + "-" + startdatestr1[0] + "-" + startdatestr1[2], enddatestr1[1] + "-" + enddatestr1[0] + "-" + enddatestr1[2], rsem.GetValue(0).ToString());

                if (dttemp.Rows.Count > 0)
                {
                    holidaycount = dttemp.Rows.Count;
                }

                while (dtstart < dtend)
                {
                    totdays++;
                    dtstart = dtstart.AddDays(1);
                }
            }
            dttemp.Clear();

            #endregion


            if (rperiod.Read())
            {
                Fpsattendence.Sheets[0].RowCount = 1;
                Fpsattendence.Sheets[0].Cells[0, 0].Text = "1";
                for (int i = 0; i < 2; i++)              //modified by Deepali on March 19 2018
                    Fpsattendence.Sheets[0].Cells[0, i + 1].Text = rperiod.GetValue(i).ToString();
                Fpsattendence.Sheets[0].Cells[0, 3].Text = (totdays - holidaycount).ToString();  //modified by Deepali on March 19 2018
                Fpsattendence.Sheets[0].Cells[0, 4].Text = rsem.GetValue(1).ToString();
            }
            rperiod.Close();
            con1.Close();
            Fpsattendence.Height = (Fpsattendence.Rows.Default.Height * Fpsattendence.Sheets[0].RowCount) + Fpsattendence.ColumnHeader.Height + 50;
        }
        rsem.Close();
        con.Close();
        Fpsattendence.Width = 400;
        Fpsattendence.SaveChanges();
        if (Fpsattendence.Sheets[0].RowCount == 0)
        {
            Fpsattendence.Sheets[0].ColumnCount = 0;
            Fpsattendence.Sheets[0].RowCount = 0;
            Fpsattendence.Sheets[0].ColumnCount = 4;
            Fpsattendence.Sheets[0].RowCount = 1;
            Fpsattendence.Columns.Default.Width = 150;
            Fpsattendence.ColumnHeader.Visible = false;
            Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
            Fpsattendence.Sheets[0].Cells[0, 0].Text = "No information Available";
            Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
            Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpsattendence.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
            Fpsattendence.Height = 45;
            Fpsattendence.Width = 600;
            Fpsattendence.SaveChanges();
            return;
        }
    }

    protected void Buttonevents_Click(object sender, EventArgs e)
    {
        initattendence();
        Fpsattendence.Sheets[0].AutoPostBack = false;
        //// FpSgen.Visible = true;
        semperc = false;
        Fpsattendence.Visible = true;
        Fpsattendence.ColumnHeader.Visible = true;
        Fpsattendence.Sheets[0].ColumnCount = 5;
        Fpsattendence.Sheets[0].RowCount = 0;
        Fpsattendence.Rows.Default.Height = 20;
        Fpsattendence.Columns.Default.Width = 140;
        Fpsattendence.Sheets[0].GridLines = GridLines.None;
        Fpsattendence.ColumnHeader.Visible = false;
        Fpsattendence.Columns[0].Width =
                   Fpsattendence.Columns[0].Width = 10;
        Fpsattendence.Columns[1].Width = 10;
        Fpsattendence.Columns[2].Width = 150;
        Fpsattendence.Columns[3].Width = 200;
        Fpsattendence.Columns[4].Width = 200;
        Fpsattendence.TitleInfo.Text = "EVENTS DETAILS";
        string rno = string.Empty;
        cmd.CommandText = "Select Roll_No from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            rno = rroll.GetValue(0).ToString();
            cmd.CommandText = "select company_flag,cpy_name,inorout,a.event_name,event_start_date,start_time,end_time,conducted_location,a.action_name from cpydetails,Participants_Student as a,Event_program_schedule as b,Action_Plans as c where c.prog_id=a.prog_id  and roll_no= '" + rroll.GetValue(0).ToString() + "'";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rsem = cmd.ExecuteReader();
            if (rsem.Read())
            {
                Fpsattendence.Sheets[0].RowCount = 10;
                Fpsattendence.Sheets[0].Rows[0].Height = 5;
                Fpsattendence.Sheets[0].Rows[1].Height = 5;
                for (int i = 2; i < 10; i++)
                    Fpsattendence.Sheets[0].Cells[i, 3].Text = ":";
                Fpsattendence.Sheets[0].Cells[2, 2].Text = "EVENT ORGANIZER";
                Fpsattendence.Sheets[0].Cells[3, 2].Text = "NAME OF THE ORGANIZER";
                Fpsattendence.Sheets[0].Cells[4, 2].Text = "EVENT PLACE";
                Fpsattendence.Sheets[0].Cells[5, 2].Text = "EVENT NAME";
                Fpsattendence.Sheets[0].Cells[6, 2].Text = "DATE";
                Fpsattendence.Sheets[0].Cells[7, 2].Text = "START TIME";
                Fpsattendence.Sheets[0].Cells[8, 2].Text = "END TIME";
                Fpsattendence.Sheets[0].Cells[9, 2].Text = "EVENT LOCATION";
                string val = string.Empty;
                val = rsem.GetValue(0).ToString();
                switch (val)
                {
                    case "1":
                        val = "COMPANY";
                        break;
                    case "2":
                        val = "OWN INSTITUTE";
                        break;
                    case "3":
                        val = "INDIVIJUAL";
                        break;
                    case "4":
                        val = "OTHER INSTITUTE";
                        break;
                }
                Fpsattendence.Sheets[0].Cells[2, 4].Text = val;
                Fpsattendence.Sheets[0].Cells[3, 4].Text = rsem.GetValue(1).ToString();
                val = string.Empty;
                val = rsem.GetValue(2).ToString();
                if (val == "1")
                    val = "INDOOR";
                else
                    val = "OUTDOOR";
                Fpsattendence.Sheets[0].Cells[4, 4].Text = val;
                Fpsattendence.Sheets[0].Cells[5, 4].Text = rsem.GetValue(3).ToString();
                Fpsattendence.Sheets[0].Cells[6, 4].Text = rsem.GetValue(4).ToString();
                Fpsattendence.Sheets[0].Cells[7, 4].Text = rsem.GetValue(5).ToString();
                Fpsattendence.Sheets[0].Cells[8, 4].Text = rsem.GetValue(6).ToString();
                Fpsattendence.Sheets[0].Cells[9, 4].Text = rsem.GetValue(7).ToString();
                Fpsattendence.Sheets[0].Cells[10, 4].Text = rsem.GetValue(8).ToString();
            }
            rsem.Close();
            con1.Close();
        }
        rroll.Close();
        con.Close();
        cmd.CommandText = "select distinct a.action_name,a.start_time,a.end_time from Action_Plans as a,Participants_Student as b where a.action_name<>b.action_name and a.prog_id=b.prog_id and roll_no='" + rno + "'";
        cmd.Connection = con1;
        con1.Open();
        SqlDataReader revt = cmd.ExecuteReader();
        if (revt.HasRows)
        {
            Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 2;
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 3].Text = "ATTENDEE";
            Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 2;
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Text = "EVENT NAME";
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 3].Text = "START TIME";
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 4].Text = "END TIME";
            while (revt.Read())
            {
                Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 1;
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Text = revt.GetValue(0).ToString();
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Text = revt.GetValue(1).ToString();
                Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 2].Text = revt.GetValue(2).ToString();
            }
        }
        revt.Close();
        con1.Close();
        Fpsattendence.Width = 600;
        Fpsattendence.Height = (Fpsattendence.Rows.Default.Height * Fpsattendence.Sheets[0].RowCount) + Fpsattendence.ColumnHeader.Height + 70;
        if (Fpsattendence.Sheets[0].RowCount == 0)
        {
            Fpsattendence.Sheets[0].ColumnCount = 0;
            Fpsattendence.Columns.Default.Width = 150;
            Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 1;
            Fpsattendence.Sheets[0].ColumnCount = 4;
            Fpsattendence.ColumnHeader.Visible = false;
            Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Text = "No information available";
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
            Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
            Fpsattendence.Height = 45;
            Fpsattendence.Width = 600;
            Fpsattendence.SaveChanges();
            return;
        }
        Fpsattendence.SaveChanges();
    }

    protected void Buttonexamseat_Click(object sender, EventArgs e)
    {
        initattendence();
        Fpsattendence.Sheets[0].AutoPostBack = false;
        //// FpSgen.Visible = true;
        semperc = false;
        Fpsattendence.Visible = true;
        Fpsattendence.ColumnHeader.Visible = true;
        Fpsattendence.Sheets[0].ColumnCount = 6;
        Fpsattendence.Rows.Default.Height = 20;
        Fpsattendence.TitleInfo.Text = "EXAM DATE DETAILS";
        Fpsattendence.ColumnHeader.Cells[0, 0].Text = "EXAM DATE";
        Fpsattendence.ColumnHeader.Cells[0, 1].Text = "SUBJECT NAME";
        Fpsattendence.ColumnHeader.Cells[0, 2].Text = "SUBJECT CODE";
        Fpsattendence.ColumnHeader.Cells[0, 3].Text = "SESSION";
        Fpsattendence.ColumnHeader.Cells[0, 4].Text = "BLOCK NAME";
        Fpsattendence.ColumnHeader.Cells[0, 5].Text = "ROOM NAME";
        Fpsattendence.Sheets[0].Columns[0].Width = 80;
        Fpsattendence.Sheets[0].Columns[1].Width = 320;
        Fpsattendence.Sheets[0].Columns[2].Width = 80;
        Fpsattendence.Sheets[0].Columns[3].Width = 60;
        Fpsattendence.Sheets[0].Columns[4].Width = 80;
        Fpsattendence.Sheets[0].Columns[5].Width = 80;
        cmd.CommandText = "Select Roll_No from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            cmd.CommandText = "select distinct CONVERT(VARCHAR(10),e.edate,103),s.subject_name,e.subject_no,e.ses_sion,e.block,e.roomno from exam_seating e,subject s where e.regno='" + rroll.GetValue(0).ToString() + "' and s.subject_code=e.subject_no";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rsem = cmd.ExecuteReader();
            if (rsem.HasRows)
            {
                while (rsem.Read())
                {
                    Fpsattendence.Sheets[0].RowCount = Fpsattendence.Sheets[0].RowCount + 1;
                    for (int i = 0; i < 6; i++)
                        Fpsattendence.Sheets[0].Cells[Fpsattendence.Sheets[0].RowCount - 1, i].Text = rsem.GetValue(i).ToString();
                }
                Fpsattendence.Height = (Fpsattendence.Rows.Default.Height * Fpsattendence.Sheets[0].RowCount) + Fpsattendence.ColumnHeader.Height + 30;
            }
            else
            {
                Fpsattendence.Sheets[0].ColumnCount = 0;
                Fpsattendence.Sheets[0].RowCount = 0;
                Fpsattendence.Sheets[0].ColumnCount = 4;
                Fpsattendence.Sheets[0].RowCount = 1;
                Fpsattendence.Columns.Default.Width = 150;
                Fpsattendence.ColumnHeader.Visible = false;
                Fpsattendence.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpsattendence.Width = 600;
                Fpsattendence.Height = 45;
                Fpsattendence.ColumnHeader.Visible = false;
                Fpsattendence.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpsattendence.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpsattendence.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpsattendence.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpsattendence.SaveChanges();
                return;
            }
            rsem.Close();
            con1.Close();
        }
        rroll.Close();
        con.Close();
        Fpsattendence.Width = 700;
        // Fpsattendence.Width = 600;
        Fpsattendence.SaveChanges();
    }

    protected void Buttonfees_Click(object sender, EventArgs e)
    {
        try
        {
            divHostelInfo.Visible = false;
            feedlbl.Visible = false;
            questiondiv.Visible = false;
            //radScrType.Visible = false;
            btnsTrans.Visible = false;
            tblSelScr.Visible = false;
            lblfeestatus.Visible = true;
            DataView dvnew = new DataView();
            string rights = d2.GetFunction("select value from Master_Settings where settings='Fees Rights' and usercode in(select user_code from usermaster where user_id='admin')");
            if (rights == "1")
            {
                // initfee();
                Fpspreadfee.Visible = true;
                Fpspreadfee.Sheets[0].RowCount = 0;
                Fpspreadfee.Sheets[0].ColumnCount = 0;
                Fpspreadfee.CommandBar.Visible = false;
                Fpspreadfee.Sheets[0].AutoPostBack = false;
                Fpspreadfee.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspreadfee.Sheets[0].RowHeader.Visible = false;
                Fpspreadfee.Sheets[0].ColumnCount = 10;

                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
                darkstyle.ForeColor = Color.White;

                Fpspreadfee.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
                Fpspreadfee.Sheets[0].RowCount = 0;

                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[0].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[0].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[0].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Header";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Left;
                Fpspreadfee.Sheets[0].Columns[1].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[1].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[1].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Ledger";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[2].HorizontalAlign = HorizontalAlign.Left;
                Fpspreadfee.Sheets[0].Columns[2].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[2].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[2].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Allot";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[3].HorizontalAlign = HorizontalAlign.Right;
                Fpspreadfee.Sheets[0].Columns[3].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[3].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[3].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Paid";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[4].HorizontalAlign = HorizontalAlign.Right;
                Fpspreadfee.Sheets[0].Columns[4].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[4].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[4].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Balance";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 5].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[5].HorizontalAlign = HorizontalAlign.Right;
                Fpspreadfee.Sheets[0].Columns[5].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[5].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[5].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Due Date";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 6].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[6].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[6].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[6].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[6].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].Columns[6].Visible = false;

                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 7].Text = lbl_semOrTerm.Text;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 7].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 7].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 7].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 7].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 7].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[7].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[7].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[7].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[7].Font.Size = FontUnit.Medium;



                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 8].Text = "Deduction Amount";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 8].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 8].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 8].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 8].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 8].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[8].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[8].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[8].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[8].Font.Size = FontUnit.Medium;


                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 9].Text = "Deduction Reason";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 9].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 9].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 9].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 9].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 9].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[9].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[9].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[9].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[9].Font.Size = FontUnit.Medium;


                Fpspreadfee.Columns[0].Width = 40;
                Fpspreadfee.Columns[1].Width = 230;
                Fpspreadfee.Columns[2].Width = 210;
                Fpspreadfee.Columns[3].Width = 80;
                Fpspreadfee.Columns[4].Width = 80;
                Fpspreadfee.Columns[5].Width = 100;
                Fpspreadfee.Columns[6].Width = 120;
                Fpspreadfee.Columns[7].Width = 150;

                Fpspreadfee.Columns[8].Width = 120;
                Fpspreadfee.Columns[9].Width = 150;

                string selq = string.Empty;
                string bal = string.Empty;
                string paid = string.Empty;
                // selq = "select distinct f.HeaderFK,f.LedgerFK,HeaderName,LedgerName,FeeAmount,PaidAmount,BalAmount,Convert(varchar(10),PayStartDate,103) as PayStartDate from Registration r,FT_FeeAllot f,FeesDueExt fd,FM_HeaderMaster h,FM_LedgerMaster l where r.App_No=f.App_No and r.App_No=fd.App_No and f.HeaderFK=h.HeaderPK and f.HeaderFK=fd.HeaderFK and f.LedgerFK=l.LedgerPK and f.LedgerFK=fd.LedgerFK and r.App_No='" + appno + "'";
                selq = " select f.HeaderFK,f.LedgerFK,HeaderName,LedgerName,FeeAmount,PaidAmount,BalAmount,Convert(varchar(10),PayStartDate,103) as PayStartDate,FeeCategory,deductamout,(select distinct textval from textvaltable t where textcriteria='DedRe' and t.textcode=f.deductreason) as deductReason from Registration r,FT_FeeAllot f,FM_HeaderMaster h,FM_LedgerMaster l where r.App_No=f.App_No and f.HeaderFK=h.HeaderPK and f.LedgerFK=l.LedgerPK and  r.App_No='" + appno + "'";
                //selq = selq + " select f.HeaderFK,f.LedgerFK,HeaderName,LedgerName,FeeAmount,PaidAmount,BalAmount,Convert(varchar(10),PayStartDate,103) as PayStartDate,Convert(varchar(10),ExtDueDate,103) as ExtDueDate from Registration r,applyn a,FT_FeeAllot f,FeesDueExt fd,FM_HeaderMaster h,FM_LedgerMaster l where r.App_No=a.app_no and r.App_No=f.App_No and a.app_no=f.App_No and r.App_No=fd.App_No and a.app_no=fd.App_No and f.App_No=fd.App_No and f.HeaderFK=h.HeaderPK and f.LedgerFK=l.LedgerPK and f.HeaderFK=fd.HeaderFK and f.LedgerFK=fd.LedgerFK and r.App_No='" + appno + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selq, "Text");
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        //int count = 0;
                        for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                        {
                            Fpspreadfee.Sheets[0].RowCount++;
                            Fpspreadfee.Sheets[0].Cells[row, 0].Text = Convert.ToString(row + 1);
                            //colidx++;
                            Fpspreadfee.Sheets[0].Cells[row, 1].Text = Convert.ToString(ds.Tables[0].Rows[row]["HeaderName"]);
                            //colidx++;
                            Fpspreadfee.Sheets[0].Cells[row, 2].Text = Convert.ToString(ds.Tables[0].Rows[row]["LedgerName"]);
                            //colidx++;
                            Fpspreadfee.Sheets[0].Cells[row, 3].Text = Convert.ToString(ds.Tables[0].Rows[row]["FeeAmount"]);
                            //colidx++;
                            Fpspreadfee.Sheets[0].Cells[row, 4].Text = Convert.ToString(ds.Tables[0].Rows[row]["PaidAmount"]);
                            //colidx++;
                            Fpspreadfee.Sheets[0].Cells[row, 5].Text = Convert.ToString(ds.Tables[0].Rows[row]["BalAmount"]);
                            //colidx++;
                            Fpspreadfee.Sheets[0].Cells[row, 6].Text = Convert.ToString(ds.Tables[0].Rows[row]["PayStartDate"]);

                            string feecatogery = Convert.ToString(ds.Tables[0].Rows[row]["FeeCategory"]);
                            Fpspreadfee.Sheets[0].Cells[row, 1].Note = feecatogery;
                            selq = "select * from textvaltable where TextCode='" + Fpspreadfee.Sheets[0].Cells[row, 1].Note.Trim() + "' ";

                            SqlDataAdapter dataAdapt = new SqlDataAdapter();
                            cmd.Connection = con;
                            con.Open();
                            cmd.CommandText = selq;
                            dataAdapt.SelectCommand = cmd;
                            DataTable dataTable = new DataTable();
                            dataAdapt.Fill(dataTable);
                            con.Close();
                            string[] semsester = new string[5];
                            foreach (DataRow dr in dataTable.Rows)
                            {
                                semsester = dr["TextVal"].ToString().Split(' ');
                                Fpspreadfee.Sheets[0].Cells[row, 7].Text = semsester[0];
                            }
                            Fpspreadfee.Sheets[0].Cells[row, 7].Text = Convert.ToString(dataTable.Rows[0]["textval"]);

                            bal = Convert.ToString(ds.Tables[0].Rows[row]["BalAmount"]);
                            paid = Convert.ToString(ds.Tables[0].Rows[row]["PaidAmount"]);
                            if (bal == "0" || bal == "0.00")
                            {
                                Fpspreadfee.Sheets[0].Rows[row].BackColor = ColorTranslator.FromHtml("#90EE90");
                            }
                            else
                            {
                                Fpspreadfee.Sheets[0].Rows[row].BackColor = ColorTranslator.FromHtml("#7BC1F7");
                            }


                            Fpspreadfee.Sheets[0].Cells[row, 8].Text = Convert.ToString(ds.Tables[0].Rows[row]["deductamout"]);
                            Fpspreadfee.Sheets[0].Cells[row, 9].Text = Convert.ToString(ds.Tables[0].Rows[row]["deductReason"]);
                        }
                        for (int k = 0; k < Fpspreadfee.Sheets[0].Rows.Count; k++)
                        {
                            Fpspreadfee.Sheets[0].Rows[k].Locked = true;
                        }
                        Fpspreadfee.Sheets[0].PageSize = Fpspreadfee.Sheets[0].RowCount;
                        Fpspreadfee.ShowHeaderSelection = false;
                        Fpspreadfee.SaveChanges();
                        Fpspreadfee.Width = 781;
                        Fpspreadfee.Height = 150;
                        Fpspreadfee.Visible = true;

                        #region Added By Deepali on 19/03/2018
                        selq = "select sum(feeamount) as Feeamount,sum(totalamount) as TotalAmount,sum(paidamount) as paidamount,sum(balamount) as balance from ft_feeallot  where app_no='" + appno + "' ";
                        selq += "select sum(debit) as Debit from ft_findailytransaction where  app_no='" + appno + "' ";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(selq, "Text");
                        if (ds.Tables.Count > 0)
                        {
                            if (ds.Tables[0].Rows.Count > 0)
                            {

                                double balamnt = 0;
                                double paidamnt = 0;
                                double feeamnt = 0;
                                double totalamnt = 0;
                                for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                                {
                                    balamnt = Convert.ToDouble(Convert.ToString(ds.Tables[0].Rows[row]["Balance"]));
                                    paidamnt = Convert.ToDouble(Convert.ToString(ds.Tables[0].Rows[row]["PaidAmount"]));
                                    feeamnt = Convert.ToDouble(Convert.ToString(ds.Tables[0].Rows[row]["FeeAmount"]));
                                    totalamnt = Convert.ToDouble(Convert.ToString(ds.Tables[0].Rows[row]["TotalAmount"]));
                                }
                                if (balamnt == 0)
                                {
                                    lblfeestatus.Visible = true;
                                    //Fpspreadfee.Visible = false;//comment by abarna
                                    lblfeestatus.Text = "Fully Paid";
                                }
                                if (paidamnt != 0)
                                {
                                    lblfeestatus.Visible = true;
                                    //Fpspreadfee.Visible = false;//comment by abarna
                                    lblfeestatus.Text = "Partially Paid";
                                }
                                if (feeamnt == balamnt)
                                {
                                    lblfeestatus.Visible = true;
                                    //Fpspreadfee.Visible = false;//comment by abarna
                                    lblfeestatus.Text = "Not Paid";
                                }
                            }
                        }
                        #endregion
                    }
                    else
                    {
                        Fpspreadfee.Visible = false;
                        lblfeeerr.Visible = true;
                        lblfeeerr.Text = "No Information Available!";
                    }
                }
            }
            else if (rights == "2")
            {
                Fpspreadfee.Visible = true;
                Fpspreadfee.Sheets[0].RowCount = 0;
                Fpspreadfee.Sheets[0].ColumnCount = 0;
                Fpspreadfee.CommandBar.Visible = false;
                Fpspreadfee.Sheets[0].AutoPostBack = false;
                Fpspreadfee.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspreadfee.Sheets[0].RowHeader.Visible = false;
                Fpspreadfee.Sheets[0].ColumnCount = 4;
                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
                darkstyle.ForeColor = Color.White;
                Fpspreadfee.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
                Fpspreadfee.Sheets[0].RowCount = 0;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[0].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[0].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[0].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Header";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Left;
                Fpspreadfee.Sheets[0].Columns[1].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[1].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[1].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Ledger";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[2].HorizontalAlign = HorizontalAlign.Left;
                Fpspreadfee.Sheets[0].Columns[2].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[2].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[2].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Paid Status";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].ForeColor = ColorTranslator.FromHtml("#000000");
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                Fpspreadfee.Sheets[0].Columns[3].HorizontalAlign = HorizontalAlign.Left;
                Fpspreadfee.Sheets[0].Columns[3].Font.Name = "Book Antiqua";
                Fpspreadfee.Sheets[0].Columns[3].Font.Bold = true;
                Fpspreadfee.Sheets[0].Columns[3].Font.Size = FontUnit.Medium;
                Fpspreadfee.Columns[0].Width = 40;
                Fpspreadfee.Columns[1].Width = 350;
                Fpspreadfee.Columns[2].Width = 350;
                Fpspreadfee.Columns[3].Width = 100;
                string selq = string.Empty;

                //Fpspreadfee.Sheets[0].ColumnCount = 5;
                //Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].Text = "S.No";
                //Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].ForeColor = ColorTranslator.FromHtml("#000000");
                //Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
                //Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
                //Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
                //Fpspreadfee.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                //Fpspreadfee.Sheets[0].Columns[4].HorizontalAlign = HorizontalAlign.Center;
                //Fpspreadfee.Sheets[0].Columns[4].Font.Name = "Book Antiqua";
                //Fpspreadfee.Sheets[0].Columns[4].Font.Bold = true;
                //Fpspreadfee.Sheets[0].Columns[4].Font.Size = FontUnit.Medium;
                //Fpspreadfee.Columns[3].Width = 200;

                //  selq = "select distinct f.HeaderFK,f.LedgerFK,HeaderName,LedgerName,FeeAmount,PaidAmount,BalAmount from Registration r,FT_FeeAllot f,FeesDueExt fd,FM_HeaderMaster h,FM_LedgerMaster l where r.App_No=f.App_No and r.App_No=fd.App_No and f.HeaderFK=h.HeaderPK and f.HeaderFK=fd.HeaderFK and f.LedgerFK=l.LedgerPK and f.LedgerFK=fd.LedgerFK and r.App_No='" + appno + "'";
                selq = " select  f.HeaderFK,f.LedgerFK,HeaderName,LedgerName,FeeAmount,PaidAmount,BalAmount,FeeCategory from Registration r,FT_FeeAllot f,FM_HeaderMaster h,FM_LedgerMaster l where r.App_No=f.App_No  and f.HeaderFK=h.HeaderPK  and f.LedgerFK=l.LedgerPK and r.App_No='" + appno + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selq, "Text");
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                        {
                            Fpspreadfee.Sheets[0].RowCount++;
                            Fpspreadfee.Sheets[0].Cells[row, 0].Text = Convert.ToString(row + 1);
                            Fpspreadfee.Sheets[0].Cells[row, 1].Text = Convert.ToString(ds.Tables[0].Rows[row]["HeaderName"]);
                            Fpspreadfee.Sheets[0].Cells[row, 2].Text = Convert.ToString(ds.Tables[0].Rows[row]["LedgerName"]);

                            string feecatogery = Convert.ToString(ds.Tables[0].Rows[row]["FeeCategory"]);
                            Fpspreadfee.Sheets[0].Cells[row, 1].Note = feecatogery;
                            selq = "select * from textvaltable where TextCode='" + Fpspreadfee.Sheets[0].Cells[row, 1].Note.Trim() + "' ";

                            //SqlDataAdapter dataAdapt = new SqlDataAdapter();
                            //cmd.Connection = con;
                            //con.Open();
                            //cmd.CommandText = selq;
                            //dataAdapt.SelectCommand = cmd;
                            //DataTable dataTable = new DataTable();
                            //dataAdapt.Fill(dataTable);
                            //con.Close();
                            //foreach (DataRow dr in dataTable.Rows)
                            //{
                            //    feecatogery = dr["TextVal"].ToString();
                            //    Fpspreadfee.Sheets[0].Cells[row, 7].Text = feecatogery;
                            //}

                            double remain = 0.0;
                            string remainbal = string.Empty;
                            double balamnt = Convert.ToDouble(Convert.ToString(ds.Tables[0].Rows[row]["BalAmount"]));
                            double paidamnt = Convert.ToDouble(Convert.ToString(ds.Tables[0].Rows[row]["PaidAmount"]));
                            if (balamnt == 0 && paidamnt > balamnt)
                            {
                                Fpspreadfee.Sheets[0].Cells[row, 3].Text = "Paid";
                                Fpspreadfee.Sheets[0].Rows[row].BackColor = ColorTranslator.FromHtml("#90EE90");
                            }
                            else
                            {
                                Fpspreadfee.Sheets[0].Cells[row, 3].Text = "Not Paid";
                                Fpspreadfee.Sheets[0].Rows[row].BackColor = ColorTranslator.FromHtml("#7BC1F7");
                            }
                        }
                        for (int k = 0; k < Fpspreadfee.Sheets[0].Rows.Count; k++)
                        {
                            Fpspreadfee.Sheets[0].Rows[k].Locked = true;
                        }
                        Fpspreadfee.Sheets[0].PageSize = Fpspreadfee.Sheets[0].RowCount;
                        Fpspreadfee.ShowHeaderSelection = false;
                        Fpspreadfee.SaveChanges();
                        Fpspreadfee.Width = 860;
                        Fpspreadfee.Height = 150;
                    }
                    else
                    {
                        Fpspreadfee.Visible = false;
                        lblfeeerr.Visible = true;
                        lblfeeerr.Text = "No Information Available!";
                    }
                }
            }
            else
            {
                string selq = string.Empty;
                //  selq = "select distinct f.HeaderFK,f.LedgerFK,HeaderName,LedgerName,FeeAmount,PaidAmount,BalAmount from Registration r,FT_FeeAllot f,FeesDueExt fd,FM_HeaderMaster h,FM_LedgerMaster l where r.App_No=f.App_No and r.App_No=fd.App_No and f.HeaderFK=h.HeaderPK and f.HeaderFK=fd.HeaderFK and f.LedgerFK=l.LedgerPK and f.LedgerFK=fd.LedgerFK and r.App_No='" + appno + "'";
                selq = " select  f.HeaderFK,f.LedgerFK,HeaderName,LedgerName,FeeAmount,PaidAmount,BalAmount,FeeCategory from Registration r,FT_FeeAllot f,FM_HeaderMaster h,FM_LedgerMaster l where r.App_No=f.App_No and f.HeaderFK=h.HeaderPK  and f.LedgerFK=l.LedgerPK and r.App_No='" + appno + "' and BalAmount<>0";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selq, "Text");
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        int paidcount = 0;
                        int unpaidcount = 0;
                        //for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                        //{
                        //    double remain = 0.0;
                        //    string remainbal  = string.Empty;
                        //    double bal = Convert.ToDouble(Convert.ToString(ds.Tables[0].Rows[row]["BalAmount"]));
                        //    double paid = Convert.ToDouble(Convert.ToString(ds.Tables[0].Rows[row]["PaidAmount"]));
                        //    if (bal != 0.0 && bal > paid)
                        //    {
                        //        remain = bal - paid;
                        //        remainbal = Convert.ToString(remain);
                        //    }
                        //    else
                        //    {
                        //        remainbal = Convert.ToString(bal);
                        //    }
                        //    if (remainbal == "0.0" || remainbal == "0")
                        //    {
                        //        paidcount++;
                        //    }
                        //    else
                        //    {
                        //        unpaidcount++;
                        //    }
                        //}
                        //if (paidcount == ds.Tables[0].Rows.Count)
                        //{
                        //    lblfeestatus.Visible = true;
                        //    Fpspreadfee.Visible = false;
                        //    lblfeestatus.Text = "Fully Paid";
                        //}
                        //if (unpaidcount == ds.Tables[0].Rows.Count)
                        //{
                        //    lblfeestatus.Visible = true;
                        //    Fpspreadfee.Visible = false;
                        //    lblfeestatus.Text = "Not Paid";
                        //}
                        //  lblfeestatus.Visible = true;
                        Fpspreadfee.Visible = false;
                        lblfeestatus.Text = "Not Paid";
                        // divfee.Attributes.Add("Style", "height:auto;");
                    }
                    else
                    {
                        // lblfeestatus.Visible = true;
                        Fpspreadfee.Visible = false;
                        lblfeestatus.Text = "Fully Paid";
                        //Fpspreadfee.Visible = false;
                        //lblfeeerr.Visible = true;
                        //lblfeeerr.Text = "No Information Available!";
                        //lblfeestatus.Visible = false;
                    }
                }
            }
        }
        catch
        {
        }
        //initgeneral();
        //Fpsgeneral.Visible = false;
        //initgeneral();
        //Fpsgeneral.Visible = true;
        //Fpsgeneral.ColumnHeader.Visible = true;
        //Fpsgeneral.Sheets[0].ColumnCount = 6;
        //Fpsgeneral.TitleInfo.Text = "FEES DETAILS";
        //Fpsgeneral.Sheets[0].DefaultColumnWidth = 100;
        //Fpsgeneral.Sheets[0].DefaultRowHeight = 20;
        //Fpsgeneral.Sheets[0].GridLines = GridLines.Both;
        //Fpsgeneral.ColumnHeader.Cells[0, 0].Text = "S.NO";
        //Fpsgeneral.ColumnHeader.Cells[0, 1].Text = "FEE CATEGORY";
        //Fpsgeneral.Columns[1].Width = 160;
        //Fpsgeneral.ColumnHeader.Cells[0, 2].Text = "FEETYPE";
        //Fpsgeneral.ColumnHeader.Cells[0, 3].Text = "ALLOTED AMOUNT";
        //Fpsgeneral.ColumnHeader.Cells[0, 4].Text = "PAID AMOUNT";
        //Fpsgeneral.ColumnHeader.Cells[0, 5].Text = "BALANCE";
        //Fpsgeneral.Columns[0].Width = 40;
        //Fpsgeneral.Columns[2].Width = 75;
        //Fpsgeneral.Columns[0].HorizontalAlign = HorizontalAlign.Center;
        //Fpsgeneral.Columns[3].HorizontalAlign = HorizontalAlign.Right;
        //Fpsgeneral.Columns[4].HorizontalAlign = HorizontalAlign.Right;
        //Fpsgeneral.Columns[5].HorizontalAlign = HorizontalAlign.Right;
        //string hid = "", rollname = "", temp  = string.Empty;
        //string rollno = "", sname = "", famount  = string.Empty;
        //int len1 = 0, len2 = 0;
        //long amt = 0, paid = 0, bal = 0;
        //cmd.CommandText = "Select Roll_Admit from registration where app_no='" + appno + "'";
        //cmd.Connection = con;
        //con.Open();
        //SqlDataReader rroll = cmd.ExecuteReader();
        //if (rroll.Read())
        //{
        //    cmd.CommandText = "select linkvalue from inssettings where linkname='Receipt Display'";
        //    cmd.Connection = con1;
        //    con1.Open();
        //    SqlDataReader rfee = cmd.ExecuteReader();
        //    if (rfee.Read())
        //    {
        //        if (rfee.GetValue(0).ToString() == "0")
        //        {
        //            cmd.CommandText = "select DISTINCT roll_no,stud_name,isnull(fee_amount,0)-isnull(deduct,0)[fee_amount],header_id,(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=fee_category ),fee_allot.fee_code from registration,fee_allot,fee_info,degree,course,department where fee_allot.roll_admit=registration.roll_admit and fee_allot.fee_code=fee_info.fee_code   and registration.degree_code=degree.degree_code and degree.course_id=course.course_id and degree.dept_code=department.dept_code and fee_allot.roll_admit ='" + rroll.GetValue(0).ToString() + "' order by fee_allot.fee_code,roll_no,stud_name";
        //            cmd.Connection = con3;
        //            con3.Open();
        //            SqlDataReader rfees = cmd.ExecuteReader();
        //            if (rfees.HasRows)
        //            {
        //                int i = 0;
        //                while (rfees.Read())
        //                {
        //                    Fpsgeneral.Sheets[0].RowCount = Fpsgeneral.Sheets[0].RowCount + 1;
        //                    rollno = rfees.GetValue(0).ToString();
        //                    sname = rfees.GetValue(1).ToString();
        //                    famount = rfees.GetValue(2).ToString();
        //                    amt += Convert.ToInt64(famount);
        //                    rollname = rollno + "-" + sname;
        //                    Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 0].Text = (i + 1).ToString();
        //                    Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 1].Text = rfees.GetValue(4).ToString();
        //                    int l1 = Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 1].Text.Length;
        //                    if (len1 < l1)
        //                        len1 = l1;
        //                    cmd.CommandText = "select distinct fee_type from fee_info where fee_code='" + rfees.GetValue(5).ToString() + "'";
        //                    cmd.Connection = con2;
        //                    con2.Open();
        //                    SqlDataReader rtemp = cmd.ExecuteReader();
        //                    if (rtemp.Read())
        //                    {
        //                        Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 2].Text = rtemp.GetValue(0).ToString();
        //                        int l2 = Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 2].Text.Length;
        //                        if (len2 < l2)
        //                            len2 = l2;
        //                    }
        //                    rtemp.Close();
        //                    con2.Close();
        //                    Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 3].Text = famount;
        //                    cmd.CommandText = "select isnull(sum(credit),0)[paid] from dailytransaction[d] inner join fee_info[i] on i.fee_code=d.fee_code where name='" + rollname + "' and d.fee_code='" + rfees.GetValue(5).ToString() + "'";
        //                    cmd.Connection = con2;
        //                    con2.Open();
        //                    SqlDataReader rtemp1 = cmd.ExecuteReader();
        //                    if (rtemp1.Read())
        //                    {
        //                        Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 4].Text = rtemp1.GetValue(0).ToString();
        //                        temp = rtemp1.GetValue(0).ToString();
        //                        paid += Convert.ToInt64(temp);
        //                    }
        //                    rtemp1.Close();
        //                    con2.Close();
        //                    long t = Convert.ToInt32(famount) - Convert.ToInt32(temp);
        //                    Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 5].Text = t.ToString();
        //                    bal += t;
        //                    i++;
        //                }
        //                Fpsgeneral.Sheets[0].RowCount = Fpsgeneral.Sheets[0].RowCount + 1;
        //                Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 1].Text = "TOTAL";
        //                Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 3].Text = amt.ToString();
        //                Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 4].Text = paid.ToString();
        //                Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 5].Text = bal.ToString();
        //                rfees.Close();
        //                con3.Close();
        //                int lenghth = len2 * 11;
        //                if (lenghth < 75)
        //                    lenghth = 75;
        //                Fpsgeneral.Columns[1].Width = len1 * 11;
        //                Fpsgeneral.Columns[2].Width = lenghth;
        //                int widt = 0;
        //                for (int w = 0; w < Fpsgeneral.Sheets[0].ColumnCount; w++)
        //                    widt = widt + Fpsgeneral.Columns[w].Width;
        //                Fpsgeneral.Width = widt;
        //                Fpsgeneral.Height = (Fpsgeneral.Rows.Default.Height * Fpsgeneral.Sheets[0].RowCount) + Fpsgeneral.ColumnHeader.Height + 55;
        //                //aruna 11mar2013========================================
        //                if (Convert.ToDouble(paid) > 0 && Convert.ToDouble(bal) > 0)
        //                {
        //                    lblfeestatus.Text = "Partially Paid";
        //                }
        //                else if (Convert.ToDouble(paid) > 0 && Convert.ToDouble(bal) == 0)
        //                {
        //                    lblfeestatus.Text = "Fully Paid";
        //                }
        //                else if (Convert.ToDouble(paid) == 0)
        //                {
        //                    lblfeestatus.Text = "Not Paid";
        //                }
        //                //Modified by srinath 28/2/2014
        //                if (Session["UserName"] != null)
        //                {
        //                    if (Session["UserName"].ToString() == "admin")
        //                    {
        //                        Fpsgeneral.Visible = true;
        //                        lblfeestatus.Visible = false;
        //                    }
        //                    //else
        //                    //{
        //                    //    Fpsgeneral.Visible = false;
        //                    //    lblfeestatus.Visible = true;
        //                    //}
        //                }
        //                else
        //                {
        //                    Fpsgeneral.Visible = false;
        //                    lblfeestatus.Visible = true;
        //                }
        //                //=======================================================
        //            }
        //            else
        //            {
        //                Fpsgeneral.Sheets[0].ColumnCount = 0;
        //                Fpsgeneral.Sheets[0].RowCount = 0;
        //                Fpsgeneral.Sheets[0].ColumnCount = 4;
        //                Fpsgeneral.Sheets[0].RowCount = 1;
        //                Fpsgeneral.Columns.Default.Width = 150;
        //                Fpsgeneral.ColumnHeader.Visible = false;
        //                Fpsgeneral.Sheets[0].SpanModel.Add(0, 0, 1, 4);
        //                Fpsgeneral.Sheets[0].Cells[0, 0].Text = "No information Available";
        //                Fpsgeneral.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
        //                Fpsgeneral.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
        //                Fpsgeneral.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
        //                Fpsgeneral.Height = 45;
        //                Fpsgeneral.Width = 600;
        //            }
        //        }
        //    }
        //    rfee.Close();
        //    con1.Close();
        //}
        //rroll.Close();
        //con.Close();
        //Fpsgeneral.CommandBar.Visible = false;
        //Fpsgeneral.SaveChanges();
    }


    public void Init_Spread(Farpoint.FpSpread FpSpread1, int type = 0)
    {
        try
        {
            #region FpSpread Style

            FpSpread1.Visible = false;
            FpSpread1.Sheets[0].ColumnCount = 0;
            FpSpread1.Sheets[0].RowCount = 0;
            FpSpread1.Sheets[0].SheetCorner.ColumnCount = 0;
            FpSpread1.CommandBar.Visible = false;

            #endregion FpSpread Style

            #region SpreadStyles

            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Size = FontUnit.Medium;
            darkstyle.Font.Bold = true;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.VerticalAlign = VerticalAlign.Middle;
            darkstyle.ForeColor = System.Drawing.Color.Black;
            darkstyle.Border.BorderSize = 1;
            darkstyle.Border.BorderColor = System.Drawing.Color.Black;
            FarPoint.Web.Spread.StyleInfo sheetstyle = new FarPoint.Web.Spread.StyleInfo();
            sheetstyle.Font.Name = "Book Antiqua";
            sheetstyle.Font.Size = FontUnit.Medium;
            sheetstyle.Font.Bold = true;
            sheetstyle.HorizontalAlign = HorizontalAlign.Center;
            sheetstyle.VerticalAlign = VerticalAlign.Middle;
            sheetstyle.ForeColor = System.Drawing.Color.Black;
            sheetstyle.Border.BorderSize = 1;
            sheetstyle.Border.BorderColor = System.Drawing.Color.Black;

            #endregion SpreadStyles

            FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
            FpSpread1.Sheets[0].DefaultStyle = sheetstyle;
            FpSpread1.Sheets[0].ColumnHeader.RowCount = 2;
            FpSpread1.HorizontalScrollBarPolicy = Farpoint.ScrollBarPolicy.AsNeeded;
            FpSpread1.VerticalScrollBarPolicy = Farpoint.ScrollBarPolicy.AsNeeded;
            FpSpread1.CommandBar.Visible = false;
            FpSpread1.RowHeader.Visible = false;
            FpSpread1.Sheets[0].AutoPostBack = true;
            FpSpread1.Sheets[0].RowCount = 0;
            FpSpread1.Sheets[0].ColumnCount = 0;

            if (type == 0)
            {
                FpSpread1.Sheets[0].FrozenRowCount = 1;
                FpSpread1.Sheets[0].ColumnCount = 8;

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Hall No";
                FpSpread1.Sheets[0].Columns[2].Width = 150;

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Dept";
                FpSpread1.Sheets[0].Columns[3].Width = 150;

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Total";
                FpSpread1.Sheets[0].Columns[4].Width = 100;
                FpSpread1.Sheets[0].Columns[4].Locked = true;
                FpSpread1.Sheets[0].Columns[4].Resizable = false;
                FpSpread1.Sheets[0].Columns[4].Visible = true;
                FpSpread1.Sheets[0].Columns[4].HorizontalAlign = HorizontalAlign.Center;
                FpSpread1.Sheets[0].Columns[4].VerticalAlign = VerticalAlign.Middle;
                FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 4, 2, 1);

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 5].Text = "From";
                FpSpread1.Sheets[0].Columns[5].Width = 150;
                FpSpread1.Sheets[0].Columns[5].Locked = true;
                FpSpread1.Sheets[0].Columns[5].Resizable = false;
                FpSpread1.Sheets[0].Columns[5].Visible = true;
                FpSpread1.Sheets[0].Columns[5].HorizontalAlign = HorizontalAlign.Center;
                FpSpread1.Sheets[0].Columns[5].VerticalAlign = VerticalAlign.Middle;
                FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 5, 2, 1);

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 6].Text = "To";
                FpSpread1.Sheets[0].Columns[6].Width = 150;
                FpSpread1.Sheets[0].Columns[6].Locked = true;
                FpSpread1.Sheets[0].Columns[6].Resizable = false;
                FpSpread1.Sheets[0].Columns[6].Visible = true;
                FpSpread1.Sheets[0].Columns[6].HorizontalAlign = HorizontalAlign.Center;
                FpSpread1.Sheets[0].Columns[6].VerticalAlign = VerticalAlign.Middle;
                FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 6, 2, 1);

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 7].Text = "degreecode";
                FpSpread1.Sheets[0].Columns[7].Locked = true;
                FpSpread1.Sheets[0].Columns[7].Resizable = false;
                FpSpread1.Sheets[0].Columns[7].Visible = false;
                FpSpread1.Sheets[0].Columns[7].HorizontalAlign = HorizontalAlign.Center;
                FpSpread1.Sheets[0].Columns[7].VerticalAlign = VerticalAlign.Middle;
                FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 7, 2, 1);

            }

            else
            {
                FpSpread1.Sheets[0].ColumnCount = 4;

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Hostel Name";

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Room Type";
                FpSpread1.Sheets[0].Columns[2].Width = 600;

                FpSpread1.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Room No";
                FpSpread1.Sheets[0].Columns[3].Width = 150;

            }

            FpSpread1.Sheets[0].Columns[0].Width = 40;
            FpSpread1.Sheets[0].Columns[0].Locked = true;
            FpSpread1.Sheets[0].Columns[0].Resizable = false;
            FpSpread1.Sheets[0].Columns[0].Visible = true;
            FpSpread1.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
            FpSpread1.Sheets[0].Columns[0].VerticalAlign = VerticalAlign.Middle;
            FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 0, 2, 1);

            FpSpread1.Sheets[0].Columns[1].Width = 150;
            FpSpread1.Sheets[0].Columns[1].Locked = false;
            FpSpread1.Sheets[0].Columns[1].Resizable = false;
            FpSpread1.Sheets[0].Columns[1].Visible = true;
            FpSpread1.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Center;
            FpSpread1.Sheets[0].Columns[1].VerticalAlign = VerticalAlign.Middle;
            FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 1, 2, 1);

            FpSpread1.Sheets[0].Columns[2].Locked = true;
            FpSpread1.Sheets[0].Columns[2].Resizable = false;
            FpSpread1.Sheets[0].Columns[2].Visible = true;
            FpSpread1.Sheets[0].Columns[2].Width = 80;
            FpSpread1.Sheets[0].Columns[2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread1.Sheets[0].Columns[2].VerticalAlign = VerticalAlign.Middle;
            FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 2, 2, 1);

            FpSpread1.Sheets[0].Columns[3].Locked = true;
            FpSpread1.Sheets[0].Columns[3].Resizable = false;
            FpSpread1.Sheets[0].Columns[3].Visible = true;
            FpSpread1.Sheets[0].Columns[3].Width = 80;
            FpSpread1.Sheets[0].Columns[3].HorizontalAlign = HorizontalAlign.Center;
            FpSpread1.Sheets[0].Columns[3].VerticalAlign = VerticalAlign.Middle;
            FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 3, 2, 1);

        }
        catch (Exception ex)
        {
        }
    }

    protected void btnHostel_Click(object sender, EventArgs e)
    {
        try
        {
            Fpspreadfee.Visible = false;

            btnsTrans.Visible = false;
            tblSelScr.Visible = false;
            Fpsgeneral.Visible = false;

            questiondiv.Visible = false;

            //Fpsgeneral_title.Visible = false;

            string q = "select (select Room_Name from Room_Detail r where r.RoomPK=h.roomFk) Room_Name,(select Room_type from Room_Detail r where r.RoomPK=h.roomFk) Room_type,(select Floor_Name from Floor_Master f where f.Floorpk=h.FloorFk) Floor_Name,(select Building_Name from Building_Master b where b.Code=H.BuildingFk) Building_Name,(select HostelName from HM_HostelMaster hos where hos.HostelMasterPK=H.HostelMasterFK) HostelName from registration r,applyn a ,ht_hostelRegistration h,Building_Master B,Room_detail Rd,Floor_Master F where r.app_no=a.app_no and h.app_no=r.app_no and h.app_no=a.app_no and B.Code =H.BuildingFk  and B.Building_Name=F.Building_Name and f.Floor_Name =Rd.Floor_name and B.Building_Name=Rd.Building_Name and f.Floorpk=h.FloorFK and rd.RoomPK=h.RoomFK and r.app_no='" + appno + "'";
            DataSet dsHostel = new DataSet();
            dsHostel = d2.select_method_wo_parameter(q, "text");
            Init_Spread(FpHostel, 1);
            FpHostel.Sheets[0].RowCount = 0;
            divHostelInfo.Visible = true;
            if (dsHostel.Tables.Count > 0 && dsHostel.Tables[0].Rows.Count > 0)
            {
                int sno = 0;
                foreach (DataRow drHostel in dsHostel.Tables[0].Rows)
                {
                    string hostelName = Convert.ToString(drHostel["HostelName"]).Trim();
                    string roomType = Convert.ToString(drHostel["Room_type"]).Trim();
                    string roomNo = Convert.ToString(drHostel["Room_Name"]).Trim();
                    FpHostel.Sheets[0].RowCount++;
                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 0].Text = FpHostel.Sheets[0].RowCount.ToString();

                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 1].Text = hostelName;
                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 1].VerticalAlign = VerticalAlign.Middle;
                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 1].Locked = true;

                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 2].Text = roomType;
                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 2].VerticalAlign = VerticalAlign.Middle;
                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 2].Locked = true;

                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 3].Text = roomNo;
                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 3].VerticalAlign = VerticalAlign.Middle;
                    FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 3].Locked = true;

                }
                FpHostel.Sheets[0].PageSize = FpHostel.Sheets[0].RowCount;
                FpHostel.Height = 500;
                FpHostel.SaveChanges();
                FpHostel.Visible = true;
                divHostelInfo.Visible = true;
                //FpHostel.Width = 300;
            }
            else
            {
                divHostelInfo.Visible = true;
                FpHostel.Sheets[0].RowCount++;
                FpHostel.Sheets[0].Cells[FpHostel.Sheets[0].RowCount - 1, 0].Text = "No Hostel Informations are Available";
                FpHostel.Sheets[0].AddSpanCell(FpHostel.Sheets[0].RowCount - 1, 0, 1, 4);
                FpHostel.Sheets[0].PageSize = FpHostel.Sheets[0].RowCount;
                FpHostel.Height = 500;
                FpHostel.SaveChanges();
                FpHostel.Visible = true;
                divHostelInfo.Visible = true;

            }
        }
        catch (Exception ex)
        {

        }

    }

    protected void vehiclecheck_checkedchanged(object sender, EventArgs e)
    {
        txt_vech.Text = "--Select--";
        if (vehiclecheck.Checked == true)
        {
            for (int i = 0; i < vehiclechecklist.Items.Count; i++)
            {
                vehiclechecklist.Items[i].Selected = true;
                txt_vech.Text = lbl_semOrTerm.Text + "(" + (vehiclechecklist.Items.Count) + ")";
            }
        }
        else
        {
            for (int i = 0; i < vehiclechecklist.Items.Count; i++)
            {
                vehiclechecklist.Items[i].Selected = false;
                txt_vech.Text = "--Select--";
            }
        }
    }

    protected void vehiclechecklist_selectedchanged(object sender, EventArgs e)
    {
        try
        {
            txt_vech.Text = "--Select--";
            string value = string.Empty;
            string code = string.Empty;
            for (int i = 0; i < vehiclechecklist.Items.Count; i++)
            {
                if (vehiclechecklist.Items[i].Selected == true)
                {
                    value = vehiclechecklist.Items[i].Text;
                    code = vehiclechecklist.Items[i].Value.ToString();
                    ddlcount = ddlcount + 1;
                    txt_vech.Text = lbl_semOrTerm.Text + "(" + ddlcount.ToString() + ")";
                }
            }
            if (ddlcount == 0)
                txt_vech.Text = "---Select---";
        }
        catch
        {
        }
    }

    protected void Buttontransport_Click(object sender, EventArgs e)
    {
        divHostelInfo.Visible = false;
        Fpspreadfee.Visible = false;
        lblfeestatus.Visible = false;
        Fpspreadfee.Visible = false;
        //lblfeestatus.Visible = false;
        //radScrType.Visible = true;
        //radScrType.Items[0].Selected = true;
        //radScrType.Items[1].Selected = false;
        btnsTrans.Visible = true;
        btnSelect.BackColor = ColorTranslator.FromHtml("#FFCC66");
        btnReport.BackColor = Color.White;
        bindStage();
        tblSelScr.Visible = true;
        lblStgErr.Visible = false;
        Fpsgeneral.Visible = false;
        initgeneral();
        Fpsgeneral.ColumnHeader.Visible = false;
        feedlbl.Visible = false;
        questiondiv.Visible = false;
        initgeneral();
    }

    protected void btnSelect_Click(object sender, EventArgs e)
    {
        Fpspreadfee.Visible = false;
        lblfeestatus.Visible = false;
        Fpsgeneral.Visible = false;
        bindStage();
        tblSelScr.Visible = true;
        lblStgErr.Visible = false;
        btnSelect.BackColor = ColorTranslator.FromHtml("#FFCC66");
        btnReport.BackColor = Color.White;
    }

    protected void btnReport_Click(object sender, EventArgs e)
    {
        Fpspreadfee.Visible = false;
        lblfeestatus.Visible = false;
        Fpsgeneral.Visible = false;
        tblSelScr.Visible = false;
        LoadTransportInfo();
        btnSelect.BackColor = Color.White;
        btnReport.BackColor = ColorTranslator.FromHtml("#FFCC66");
    }

    //protected void radScrType_changed(object sender, EventArgs e)
    //{
    //    Fpspreadfee.Visible = false;
    //    lblfeestatus.Visible = false;
    //    Fpsgeneral.Visible = false;
    //    if (radScrType.Items[0].Selected == true)
    //    {
    //        bindStage();
    //        tblSelScr.Visible = true;
    //        lblStgErr.Visible = false;
    //    }
    //    else if (radScrType.Items[1].Selected == true)
    //    {
    //        tblSelScr.Visible = false;
    //        LoadTransportInfo();
    //    }
    //}

    protected void btnAdd_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddlStageScr.SelectedIndex != 0 && ddlStageScr.SelectedItem.Text != "Select")
            {
                lblStgErr.Visible = false;
                string StageID = Convert.ToString(ddlStageScr.SelectedItem.Value);
                int updC = d2.update_method_wo_parameter("update Registration set Boarding='" + StageID + "' where App_No='" + appno + "'", "Text");
                if (updC > 0)
                {
                    lblStgErr.Visible = true;
                    lblStgErr.Text = "Saved Successfully!";
                    bindStage();
                }
            }
            else
            {
                lblStgErr.Visible = true;
            }
        }
        catch { }
    }

    private void bindStage()
    {
        try
        {
            ddlStageScr.Items.Clear();
            string SelQ = " select Stage_id,Stage_Name from Stage_Master order by Ltrim(Stage_Name) asc ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(SelQ, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlStageScr.DataSource = ds;
                ddlStageScr.DataTextField = "Stage_Name";
                ddlStageScr.DataValueField = "Stage_id";
                ddlStageScr.DataBind();
                ddlStageScr.Items.Insert(0, "Select");
            }
            else
            {
                ddlStageScr.Items.Insert(0, "Select");
            }
        }
        catch { }
    }

    private void LoadTransportInfos()
    {
        Fpsgeneral.Visible = true;
        string rno = "", sem = string.Empty;
        Fpsgeneral.Sheets[0].ColumnCount = 4;
        Fpsgeneral.Sheets[0].RowCount = 0;
        Fpsgeneral.Columns.Default.Width = 250;
        Fpsgeneral.Rows.Default.Height = 20;
        Fpsgeneral.Sheets[0].GridLines = GridLines.None;
        Fpsgeneral.Columns[0].Width = 30;
        Fpsgeneral.Columns[1].Width = 120;
        Fpsgeneral.Columns[2].Width = 30;
        Fpsgeneral.Columns[3].Width = 300;
        Fpsgeneral.TitleInfo.Text = "TRANSPORT DETAILS";
        cmd.CommandText = "Select Roll_Admit,Current_Semester from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            if (rroll.GetValue(0).ToString() != "" && rroll.GetValue(1).ToString() != "0")
            {
                cmd.CommandText = "select trans_code,route_id,place,fee_amount from student_list where roll_no='" + rroll.GetValue(0).ToString() + "'";
                cmd.Connection = con1;
                con1.Open();
                SqlDataReader rtrans = cmd.ExecuteReader();
                if (rtrans.Read())
                {
                    cmd.CommandText = "select trans_code,vehicle_type from transinfo where trans_code='" + rtrans.GetValue(0).ToString() + "'";
                    cmd.Connection = con2;
                    con2.Open();
                    SqlDataReader rtransport = cmd.ExecuteReader();
                    if (rtransport.Read())
                    {
                        cmd.CommandText = "select route_id,start_place_AM,start_time_AM,end_time_AM,end_place_AM,start_place_PM,start_time_PM,end_time_PM,end_place_PM from routeinfo where route_id='" + rtrans.GetValue(1).ToString() + "'";
                        cmd.Connection = con3;
                        con3.Open();
                        SqlDataReader rv = cmd.ExecuteReader();
                        if (rv.Read())
                        {
                            Fpsgeneral.Sheets[0].RowCount = 13;
                            Fpsgeneral.Sheets[0].Cells[0, 1].Text = "Transport Code";
                            Fpsgeneral.Sheets[0].Cells[1, 1].Text = "Vehicle Type";
                            Fpsgeneral.Sheets[0].Cells[2, 1].Text = "Route ID";
                            Fpsgeneral.Sheets[0].Cells[3, 1].Text = "Start Place";
                            Fpsgeneral.Sheets[0].Cells[4, 1].Text = "Start Time";
                            Fpsgeneral.Sheets[0].Cells[5, 1].Text = "End Time";
                            Fpsgeneral.Sheets[0].Cells[6, 1].Text = "End Place";
                            Fpsgeneral.Sheets[0].Cells[7, 1].Text = "Boarding Point";
                            Fpsgeneral.Sheets[0].Cells[8, 1].Text = "Start Place";
                            Fpsgeneral.Sheets[0].Cells[9, 1].Text = "Start Time";
                            Fpsgeneral.Sheets[0].Cells[10, 1].Text = "End Time";
                            Fpsgeneral.Sheets[0].Cells[11, 1].Text = "End Place";
                            Fpsgeneral.Sheets[0].Cells[12, 1].Text = "Fee Amount";
                            Fpsgeneral.Sheets[0].Cells[0, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[1, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[2, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[3, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[4, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[5, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[6, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[7, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[8, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[9, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[10, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[11, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[12, 2].Text = ":";
                            Fpsgeneral.Sheets[0].Cells[0, 3].Text = rtransport.GetValue(0).ToString();
                            Fpsgeneral.Sheets[0].Cells[1, 3].Text = rtransport.GetValue(1).ToString();
                            Fpsgeneral.Sheets[0].Cells[2, 3].Text = rv.GetValue(0).ToString();
                            Fpsgeneral.Sheets[0].Cells[3, 3].Text = rv.GetValue(1).ToString();
                            Fpsgeneral.Sheets[0].Cells[4, 3].Text = rv.GetValue(2).ToString();
                            Fpsgeneral.Sheets[0].Cells[5, 1].Text = rv.GetValue(3).ToString();
                            Fpsgeneral.Sheets[0].Cells[6, 3].Text = rv.GetValue(4).ToString();
                            Fpsgeneral.Sheets[0].Cells[7, 3].Text = rtrans.GetValue(2).ToString();
                            Fpsgeneral.Sheets[0].Cells[8, 3].Text = rv.GetValue(5).ToString();
                            Fpsgeneral.Sheets[0].Cells[9, 3].Text = rv.GetValue(6).ToString();
                            Fpsgeneral.Sheets[0].Cells[10, 3].Text = rv.GetValue(7).ToString();
                            Fpsgeneral.Sheets[0].Cells[11, 3].Text = rv.GetValue(8).ToString();
                            Fpsgeneral.Sheets[0].Cells[12, 3].Text = rtrans.GetValue(3).ToString();
                        }
                        else
                        {
                        }
                        rv.Close();
                        con3.Close();
                    }
                    rtransport.Close();
                    con2.Close();
                }
                rtrans.Close();
                con1.Close();
            }
        }
        rroll.Close();
        con.Close();
        //Fpsgeneral.Width = (Fpsgeneral.Columns.Default.Width * Fpsgeneral.Sheets[0].ColumnCount);
        //Fpsgeneral.Height = (Fpsgeneral.Rows.Default.Height * 13) + Fpsgeneral.ColumnHeader.Height ;
        Fpsgeneral.Width = 480;
        Fpsgeneral.Height = 285;
        if (Fpsgeneral.Sheets[0].RowCount == 0)
        {
            Fpsgeneral.Sheets[0].ColumnCount = 0;
            Fpsgeneral.Sheets[0].RowCount = 0;
            Fpsgeneral.Sheets[0].ColumnCount = 4;
            Fpsgeneral.Sheets[0].RowCount = 1;
            Fpsgeneral.Columns.Default.Width = 150;
            Fpsgeneral.ColumnHeader.Visible = false;
            Fpsgeneral.Sheets[0].SpanModel.Add(0, 0, 1, 4);
            Fpsgeneral.Sheets[0].Cells[0, 0].Text = "No information Available";
            Fpsgeneral.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpsgeneral.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
            Fpsgeneral.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
            Fpsgeneral.ColumnHeader.Visible = false;
            Fpsgeneral.Height = 45;
            Fpsgeneral.Width = 600;
        }
        Fpsgeneral.SaveChanges();
    }
    private void LoadTransportInfo()
    {
        Fpsgeneral.Visible = true;
        string rno = "", sem = string.Empty;
        Fpsgeneral.Sheets[0].ColumnCount = 4;
        Fpsgeneral.Sheets[0].RowCount = 0;
        Fpsgeneral.Columns.Default.Width = 250;
        Fpsgeneral.Rows.Default.Height = 20;
        Fpsgeneral.Sheets[0].GridLines = GridLines.None;
        Fpsgeneral.Columns[0].Width = 30;
        Fpsgeneral.Columns[1].Width = 120;
        Fpsgeneral.Columns[2].Width = 30;
        Fpsgeneral.Columns[3].Width = 300;
        Fpsgeneral.ColumnHeader.Visible = false;
        Fpsgeneral.TitleInfo.Text = "TRANSPORT DETAILS";
        string selQ = "select distinct r.app_no, roll_no[Roll No],r.reg_no [Reg No],roll_admit[Admission No],stud_name[Student Name],vehid,route,sm.stage_name,r.college_code,r.seat_no,endplace,cost,Arr_Time,Dep_Time,veh_type from registration r,routemaster rm,stage_master sm,vehicle_master vm,feeinfo fi where cast(rm.stage_name as int)=sm.stage_id and vm.route=rm.route_id and r.vehid=vm.veh_id and r.bus_routeid=rm.route_id and cast(r.boarding as int)=cast(rm.stage_name as int) and cast(r.boarding as int)=sm.stage_id and  cast(rm.stage_name as int)=cast(fi.StrtPlace as int) and cast(fi.StrtPlace as int) =sm.stage_id and   cast(r.boarding as int)=cast(fi.StrtPlace as int) AND   Bus_RouteID is not null and Bus_RouteID<>'' and VehID is not null and  VehID<>'' and Boarding is not null and Boarding<>'' and app_no='" + appno + "'";
        DataSet dsVal = d2.select_method_wo_parameter(selQ, "Text");
        if (dsVal.Tables.Count > 0 && dsVal.Tables[0].Rows.Count > 0)
        {
            for (int row = 0; row < dsVal.Tables[0].Rows.Count; row++)
            {
                Fpsgeneral.Sheets[0].RowCount = 8;
                // Fpsgeneral.Sheets[0].Cells[0, 1].Text = "Transport Code";
                Fpsgeneral.Sheets[0].Cells[1, 1].Text = "Vehicle Type";
                Fpsgeneral.Sheets[0].Cells[2, 1].Text = "Route ID";
                Fpsgeneral.Sheets[0].Cells[3, 1].Text = "Start Place";
                Fpsgeneral.Sheets[0].Cells[4, 1].Text = "Start Time";
                Fpsgeneral.Sheets[0].Cells[5, 1].Text = "End Time";
                Fpsgeneral.Sheets[0].Cells[6, 1].Text = "End Place";
                //Fpsgeneral.Sheets[0].Cells[7, 1].Text = "Boarding Point";
                //Fpsgeneral.Sheets[0].Cells[8, 1].Text = "Start Place";
                //Fpsgeneral.Sheets[0].Cells[9, 1].Text = "Start Time";
                //Fpsgeneral.Sheets[0].Cells[10, 1].Text = "End Time";
                //Fpsgeneral.Sheets[0].Cells[11, 1].Text = "End Place";
                Fpsgeneral.Sheets[0].Cells[7, 1].Text = "Fee Amount";
                // Fpsgeneral.Sheets[0].Cells[0, 2].Text = ":";
                Fpsgeneral.Sheets[0].Cells[1, 2].Text = ":";
                Fpsgeneral.Sheets[0].Cells[2, 2].Text = ":";
                Fpsgeneral.Sheets[0].Cells[3, 2].Text = ":";
                Fpsgeneral.Sheets[0].Cells[4, 2].Text = ":";
                Fpsgeneral.Sheets[0].Cells[5, 2].Text = ":";
                Fpsgeneral.Sheets[0].Cells[6, 2].Text = ":";
                Fpsgeneral.Sheets[0].Cells[7, 2].Text = ":";
                //Fpsgeneral.Sheets[0].Cells[8, 2].Text = ":";
                //Fpsgeneral.Sheets[0].Cells[9, 2].Text = ":";
                //Fpsgeneral.Sheets[0].Cells[10, 2].Text = ":";
                //Fpsgeneral.Sheets[0].Cells[11, 2].Text = ":";
                //Fpsgeneral.Sheets[0].Cells[12, 2].Text = ":";
                // Fpsgeneral.Sheets[0].Cells[0, 3].Text =Convert.ToString(dsVal.Tables[].Rows[row][""]);
                Fpsgeneral.Sheets[0].Cells[1, 3].Text = Convert.ToString(dsVal.Tables[0].Rows[row]["veh_type"]);
                Fpsgeneral.Sheets[0].Cells[2, 3].Text = Convert.ToString(dsVal.Tables[0].Rows[row]["route"]);
                Fpsgeneral.Sheets[0].Cells[3, 3].Text = Convert.ToString(dsVal.Tables[0].Rows[row]["stage_name"]);
                Fpsgeneral.Sheets[0].Cells[4, 3].Text = Convert.ToString(dsVal.Tables[0].Rows[row]["dep_time"]);
                Fpsgeneral.Sheets[0].Cells[5, 3].Text = Convert.ToString(dsVal.Tables[0].Rows[row]["arr_time"]);
                Fpsgeneral.Sheets[0].Cells[6, 3].Text = Convert.ToString(dsVal.Tables[0].Rows[row]["endplace"]);
                //    Fpsgeneral.Sheets[0].Cells[7, 3].Text = Convert.ToString(dsVal.Tables[].Rows[row][""]);
                //    Fpsgeneral.Sheets[0].Cells[8, 3].Text = Convert.ToString(dsVal.Tables[].Rows[row][""]);
                //    Fpsgeneral.Sheets[0].Cells[9, 3].Text = Convert.ToString(dsVal.Tables[].Rows[row][""]);
                //    Fpsgeneral.Sheets[0].Cells[10, 3].Text =Convert.ToString(dsVal.Tables[].Rows[row][""]);
                Fpsgeneral.Sheets[0].Cells[7, 3].Text = Convert.ToString(dsVal.Tables[0].Rows[row]["cost"]);
                //    Fpsgeneral.Sheets[0].Cells[12, 3].Text =Convert.ToString(dsVal.Tables[].Rows[row]["cost"]);
                //}
            }




            //cmd.Connection = con;
            //con.Open();
            //SqlDataReader rroll = cmd.ExecuteReader();
            //if (rroll.Read())
            //{
            //    if (rroll.GetValue(0).ToString() != "" && rroll.GetValue(1).ToString() != "0")
            //    {
            //        cmd.CommandText = "select trans_code,route_id,place,fee_amount from student_list where roll_no='" + rroll.GetValue(0).ToString() + "'";
            //        cmd.Connection = con1;
            //        con1.Open();
            //        SqlDataReader rtrans = cmd.ExecuteReader();
            //        if (rtrans.Read())
            //        {
            //            cmd.CommandText = "select trans_code,vehicle_type from transinfo where trans_code='" + rtrans.GetValue(0).ToString() + "'";
            //            cmd.Connection = con2;
            //            con2.Open();
            //            SqlDataReader rtransport = cmd.ExecuteReader();
            //            if (rtransport.Read())
            //            {
            //                cmd.CommandText = "select route_id,start_place_AM,start_time_AM,end_time_AM,end_place_AM,start_place_PM,start_time_PM,end_time_PM,end_place_PM from routeinfo where route_id='" + rtrans.GetValue(1).ToString() + "'";
            //                cmd.Connection = con3;
            //                con3.Open();
            //                SqlDataReader rv = cmd.ExecuteReader();
            //                if (rv.Read())
            //                {
            //                    Fpsgeneral.Sheets[0].RowCount = 13;
            //                    Fpsgeneral.Sheets[0].Cells[0, 1].Text = "Transport Code";
            //                    Fpsgeneral.Sheets[0].Cells[1, 1].Text = "Vehicle Type";
            //                    Fpsgeneral.Sheets[0].Cells[2, 1].Text = "Route ID";
            //                    Fpsgeneral.Sheets[0].Cells[3, 1].Text = "Start Place";
            //                    Fpsgeneral.Sheets[0].Cells[4, 1].Text = "Start Time";
            //                    Fpsgeneral.Sheets[0].Cells[5, 1].Text = "End Time";
            //                    Fpsgeneral.Sheets[0].Cells[6, 1].Text = "End Place";
            //                    Fpsgeneral.Sheets[0].Cells[7, 1].Text = "Boarding Point";
            //                    Fpsgeneral.Sheets[0].Cells[8, 1].Text = "Start Place";
            //                    Fpsgeneral.Sheets[0].Cells[9, 1].Text = "Start Time";
            //                    Fpsgeneral.Sheets[0].Cells[10, 1].Text = "End Time";
            //                    Fpsgeneral.Sheets[0].Cells[11, 1].Text = "End Place";
            //                    Fpsgeneral.Sheets[0].Cells[12, 1].Text = "Fee Amount";
            //                    Fpsgeneral.Sheets[0].Cells[0, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[1, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[2, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[3, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[4, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[5, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[6, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[7, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[8, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[9, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[10, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[11, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[12, 2].Text = ":";
            //                    Fpsgeneral.Sheets[0].Cells[0, 3].Text = rtransport.GetValue(0).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[1, 3].Text = rtransport.GetValue(1).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[2, 3].Text = rv.GetValue(0).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[3, 3].Text = rv.GetValue(1).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[4, 3].Text = rv.GetValue(2).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[5, 1].Text = rv.GetValue(3).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[6, 3].Text = rv.GetValue(4).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[7, 3].Text = rtrans.GetValue(2).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[8, 3].Text = rv.GetValue(5).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[9, 3].Text = rv.GetValue(6).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[10, 3].Text = rv.GetValue(7).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[11, 3].Text = rv.GetValue(8).ToString();
            //                    Fpsgeneral.Sheets[0].Cells[12, 3].Text = rtrans.GetValue(3).ToString();
            //                }
            //                else
            //                {
            //                }
            //                rv.Close();
            //                con3.Close();
            //            }
            //            rtransport.Close();
            //            con2.Close();
            //        }
            //        rtrans.Close();
            //        con1.Close();
            //    }
        }
        //rroll.Close();
        //con.Close();
        //Fpsgeneral.Width = (Fpsgeneral.Columns.Default.Width * Fpsgeneral.Sheets[0].ColumnCount);
        //Fpsgeneral.Height = (Fpsgeneral.Rows.Default.Height * 13) + Fpsgeneral.ColumnHeader.Height ;
        Fpsgeneral.Width = 480;
        Fpsgeneral.Height = 225;
        if (Fpsgeneral.Sheets[0].RowCount == 0)
        {
            Fpsgeneral.Sheets[0].ColumnCount = 0;
            Fpsgeneral.Sheets[0].RowCount = 0;
            Fpsgeneral.Sheets[0].ColumnCount = 4;
            Fpsgeneral.Sheets[0].RowCount = 1;
            Fpsgeneral.Columns.Default.Width = 150;
            Fpsgeneral.ColumnHeader.Visible = false;
            Fpsgeneral.Sheets[0].SpanModel.Add(0, 0, 1, 4);
            Fpsgeneral.Sheets[0].Cells[0, 0].Text = "No information Available";
            Fpsgeneral.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpsgeneral.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
            Fpsgeneral.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
            Fpsgeneral.ColumnHeader.Visible = false;
            Fpsgeneral.Height = 45;
            Fpsgeneral.Width = 600;
        }
        Fpsgeneral.SaveChanges();
    }

    protected void Buttonlibcards_Click(object sender, EventArgs e)
    {
        // FpSgen.Visible = true;
        initlibrary();
        Fpslibrary.Visible = true;
        string strid = string.Empty;
        Boolean libid = false;
        int locked = 0, issued = 0, available = 0, tot = 0;
        Fpslibrary.Columns.Default.Width = 100;
        Fpslibrary.Rows.Default.Height = 20;
        Fpslibrary.Sheets[0].GridLines = GridLines.None;
        Fpslibrary.CommandBar.Visible = false;
        Fpslibrary.ColumnHeader.Visible = false;
        Fpslibrary.TitleInfo.Text = "LIBRARY CARDS DETAILS";
        cmd.CommandText = "Select Roll_No,lib_id from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            cmd.CommandText = "select linkvalue from inssettings where linkname ='Library id'";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rlid = cmd.ExecuteReader();
            if (rlid.Read())
            {
                if (rlid.GetValue(0).ToString() == "1")
                {
                    libid = true;
                    strid = rlid.GetValue(0).ToString();
                }
                else
                {
                    libid = false;
                    strid = rroll.GetValue(0).ToString();
                }
            }
            else
            {
                libid = false;
                strid = rroll.GetValue(0).ToString();
            }
            rlid.Close();
            con1.Close();
            Fpslibrary.Sheets[0].ColumnCount = 4;
            Fpslibrary.Columns[0].Width = 10;
            Fpslibrary.Columns[1].Width = 150;
            Fpslibrary.Columns[2].Width = 20;
            Fpslibrary.Columns[3].Width = 370;
            Fpslibrary.Sheets[0].RowCount = 10;
            for (int i = 2; i < 8; i++)
                Fpslibrary.Sheets[0].Cells[i, 2].Text = ":";
            Fpslibrary.Sheets[0].Cells[2, 1].Text = "Name";
            Fpslibrary.Sheets[0].Cells[3, 1].Text = "Department";
            Fpslibrary.Sheets[0].Cells[4, 1].Text = "Total Cards";
            Fpslibrary.Sheets[0].Cells[5, 1].Text = "Issued Cards";
            Fpslibrary.Sheets[0].Cells[6, 1].Text = "Locked Cards";
            Fpslibrary.Sheets[0].Cells[7, 1].Text = "Available Cards";
            cmd.CommandText = "select tokendetails.stud_name,tokendetails.dept_name from tokendetails,registration where registration.roll_no='" + rroll.GetValue(0).ToString() + "' and tokendetails.roll_no = '" + strid.ToString() + "'";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rlib = cmd.ExecuteReader();
            if (rlib.Read())
            {
                cmd.CommandText = "select count(*) from tokendetails,registration where registration.roll_no='" + rroll.GetValue(0).ToString() + "' and tokendetails.roll_no = '" + strid.ToString() + "'";
                cmd.Connection = con2;
                con2.Open();
                SqlDataReader rtot = cmd.ExecuteReader();
                if (rtot.Read())
                    tot = Convert.ToInt32(rtot.GetValue(0).ToString());
                rtot.Close();
                con2.Close();
                cmd.CommandText = "select count(*) from tokendetails,registration where registration.roll_no='" + rroll.GetValue(0).ToString() + "' and tokendetails.roll_no = '" + strid.ToString() + "'  and is_locked=2";
                cmd.Connection = con2;
                con2.Open();
                SqlDataReader rlock = cmd.ExecuteReader();
                if (rlock.Read())
                    locked = Convert.ToInt32(rlock.GetValue(0).ToString());
                rlock.Close();
                con2.Close();
                cmd.CommandText = "select count(*) from tokendetails,registration where registration.roll_no='" + rroll.GetValue(0).ToString() + "' and tokendetails.roll_no = '" + strid.ToString() + "'  and is_locked=1";
                cmd.Connection = con2;
                con2.Open();
                SqlDataReader rissue = cmd.ExecuteReader();
                if (rissue.Read())
                    issued = Convert.ToInt32(rissue.GetValue(0).ToString());
                rissue.Close();
                con2.Close();
                cmd.CommandText = "select count(*) from tokendetails,registration where registration.roll_no='" + rroll.GetValue(0).ToString() + "' and tokendetails.roll_no = '" + strid.ToString() + "'  and is_locked=0";
                cmd.Connection = con2;
                con2.Open();
                SqlDataReader ravail = cmd.ExecuteReader();
                if (ravail.Read())
                    available = Convert.ToInt32(ravail.GetValue(0).ToString());
                ravail.Close();
                con2.Close();
                Fpslibrary.Sheets[0].Cells[2, 3].Text = rlib.GetValue(0).ToString();
                Fpslibrary.Sheets[0].Cells[3, 3].Text = rlib.GetValue(1).ToString();
                Fpslibrary.Sheets[0].Cells[4, 3].Text = tot.ToString();
                Fpslibrary.Sheets[0].Cells[5, 3].Text = issued.ToString();
                Fpslibrary.Sheets[0].Cells[6, 3].Text = locked.ToString();
                Fpslibrary.Sheets[0].Cells[7, 3].Text = available.ToString();
                Fpslibrary.Height = (20 * Fpslibrary.Sheets[0].RowCount) + 30;
                Fpslibrary.Width = 550;
            }
            else
            {
                Fpslibrary.Sheets[0].ColumnCount = 0;
                Fpslibrary.Sheets[0].RowCount = 0;
                Fpslibrary.Sheets[0].ColumnCount = 4;
                Fpslibrary.Sheets[0].RowCount = 1;
                Fpslibrary.Columns.Default.Width = 150;
                Fpslibrary.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpslibrary.Height = 50;
                Fpslibrary.Width = 600;
                Fpslibrary.ColumnHeader.Visible = false;
                Fpslibrary.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpslibrary.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpslibrary.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpslibrary.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpslibrary.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
            }
            rlib.Close();
            con1.Close();
        }
        rroll.Close();
        con.Close();
        // Fpslibrary.Width = (Fpslibrary.Columns.Default.Width * Fpslibrary.Sheets[0].ColumnCount);
        //Fpslibrary.Height = (Fpslibrary.Rows.Default.Height * 10) + Fpslibrary.ColumnHeader.Height ;
        Fpslibrary.Width = 400;
        Fpslibrary.SaveChanges();
    }

    protected void Buttonbukt_Click(object sender, EventArgs e)
    {
        // FpSgen.Visible = true;
        string strid = string.Empty;
        Boolean libid = false;
        initlibrary();
        Fpslibrary.Visible = true;
        Fpslibrary.Sheets[0].ColumnCount = 8;
        Fpslibrary.ColumnHeader.Visible = true;
        Fpslibrary.Columns.Default.Width = 100;
        Fpslibrary.Rows.Default.Height = 20;
        Fpslibrary.Sheets[0].GridLines = GridLines.Both;
        Fpslibrary.CommandBar.Visible = false;
        Fpslibrary.TitleInfo.Text = "BOOK TAKEN DETAILS";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Token no";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Access No";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Title";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Author";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Issue Date";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Due Date";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Library Name";
        int len1 = 0, len2 = 0, len3 = 0, len4 = 0, len7 = 0;
        Fpslibrary.Sheets[0].Columns[0].Width = 40;
        Fpslibrary.Sheets[0].Columns[1].Width = 60;
        Fpslibrary.Sheets[0].Columns[2].Width = 60;
        Fpslibrary.Sheets[0].Columns[3].Width = 60;
        Fpslibrary.Sheets[0].Columns[4].Width = 60;
        Fpslibrary.Sheets[0].Columns[5].Width = 90;
        Fpslibrary.Sheets[0].Columns[6].Width = 90;
        Fpslibrary.Sheets[0].Columns[7].Width = 60;
        Fpslibrary.Sheets[0].AutoPostBack = true;
        cmd.CommandText = "Select Roll_No,lib_id from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            cmd.CommandText = "select linkvalue from inssettings where linkname ='Library id'";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rlid = cmd.ExecuteReader();
            if (rlid.Read())
            {
                if (rlid.GetValue(0).ToString() == "1")
                {
                    libid = true;
                    strid = rlid.GetValue(0).ToString();
                }
                else
                {
                    libid = false;
                    strid = rroll.GetValue(0).ToString();
                }
            }
            else
            {
                libid = false;
                strid = rroll.GetValue(0).ToString();
            }
            rlid.Close();
            con1.Close();
            cmd.CommandText = "select isnull(token_no,''),isnull(acc_no,''),isnull(title,''),isnull(author,''),isnull(borrow_date,''),isnull(due_date,''),isnull(lib_code,''),b.stud_name from borrow  as b, registration where registration.roll_no='" + rroll.GetValue(0).ToString() + "' and b.roll_no = '" + strid + "' and return_flag=0 ";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rlib = cmd.ExecuteReader();
            int i = 0;
            if (rlib.HasRows)
            {
                while (rlib.Read())
                {
                    Fpslibrary.Sheets[0].RowCount = Fpslibrary.Sheets[0].RowCount + 1;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 0].Text = (i + 1).ToString();
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 1].Text = rlib.GetValue(0).ToString();
                    int l1 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 1].Text.Length;
                    if (len1 < l1)
                        len1 = l1;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 2].Text = rlib.GetValue(1).ToString();
                    int l2 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 2].Text.Length;
                    if (len2 < l2)
                        len2 = l2;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 3].Text = rlib.GetValue(2).ToString();
                    int l3 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 3].Text.Length;
                    if (len3 < l3)
                        len3 = l3;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 4].Text = rlib.GetValue(3).ToString();
                    int l4 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 4].Text.Length;
                    if (len4 < l4)
                        len4 = l4;
                    if (rlib.GetValue(5).ToString() == "")
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 5].Text = rlib.GetValue(4).ToString();
                    else
                    {
                        DateTime datetemp = Convert.ToDateTime(rlib.GetValue(4).ToString());
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 5].Text = datetemp.ToString("dd-MM-yyyy");
                    }
                    if (rlib.GetValue(5).ToString() == "")
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 6].Text = rlib.GetValue(5).ToString();
                    else
                    {
                        DateTime datetemp = Convert.ToDateTime(rlib.GetValue(5).ToString());
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 6].Text = datetemp.ToString("dd-MM-yyyy");
                    }
                    if (rlib.GetValue(6).ToString() == "")
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 7].Text = rlib.GetValue(6).ToString();
                    else
                    {
                        cmd.CommandText = "Select lib_name from library where lib_code='" + rlib.GetValue(6).ToString() + "'";
                        cmd.Connection = con2;
                        con2.Open();
                        SqlDataReader rlib1 = cmd.ExecuteReader();
                        if (rlib1.Read())
                        {
                            Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 7].Text = rlib1.GetValue(0).ToString();
                        }
                        rlib1.Close();
                        con2.Close();
                    }
                    int l7 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 7].Text.Length;
                    if (len7 < l7)
                        len7 = l7;
                    i++;
                }
                rlib.Close();
                con1.Close();
                if (len1 > 5)
                    Fpslibrary.Sheets[0].Columns[1].Width = len1 * 10;
                if (len2 > 5)
                    Fpslibrary.Sheets[0].Columns[2].Width = len2 * 10;
                if (len3 > 5)
                    Fpslibrary.Sheets[0].Columns[3].Width = len3 * 10;
                if (len4 > 5)
                    Fpslibrary.Sheets[0].Columns[4].Width = len4 * 10;
                if (len7 > 5)
                    Fpslibrary.Sheets[0].Columns[7].Width = len7 * 10;
                Fpslibrary.Sheets[0].Columns[3].Width = 450;
                int widt = 0, h = 0;
                for (int count = 0; count < Fpslibrary.Sheets[0].ColumnCount; count++)
                    widt = widt + Fpslibrary.Sheets[0].Columns[count].Width;
                if (widt > 900)
                {
                    h = 16;
                    Fpslibrary.Width = 916;
                    Fpslibrary.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                }
                else
                {
                    Fpslibrary.Width = widt;
                    Fpslibrary.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                }
                Fpslibrary.ColumnHeader.Height = 20;
                int hh = h + (20 * Fpslibrary.Sheets[0].RowCount) + 65;
                Fpslibrary.Height = hh;

                Fpslibrary.SaveChanges();
            }
            else
            {
                Fpslibrary.Sheets[0].ColumnCount = 0;
                Fpslibrary.Sheets[0].RowCount = 0;
                Fpslibrary.Sheets[0].ColumnCount = 4;
                Fpslibrary.Sheets[0].RowCount = 1;
                Fpslibrary.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpslibrary.Columns.Default.Width = 150;
                Fpslibrary.Height = 45;
                Fpslibrary.Width = 600;
                Fpslibrary.ColumnHeader.Visible = false;
                Fpslibrary.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpslibrary.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpslibrary.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpslibrary.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpslibrary.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                Fpslibrary.ColumnHeader.Visible = false;
            }
        }
        rroll.Close();
        con.Close();
        Fpslibrary.SaveChanges();
    }

    protected void Buttonremind_Click(object sender, EventArgs e)
    {
        Fpslibrary.Sheets[0].AutoPostBack = false;
        // FpSgen.Visible = true;
        initlibrary();
        Fpslibrary.Visible = true;
        Fpslibrary.Sheets[0].ColumnCount = 5;
        Fpslibrary.Sheets[0].RowCount = 4;
        Fpslibrary.Columns.Default.Width = 300;
        Fpslibrary.Rows.Default.Height = 20;
        Fpslibrary.Sheets[0].GridLines = GridLines.None;
        Fpslibrary.TitleInfo.Text = "BOOK REMINDER DETAILS";
        Fpslibrary.ColumnHeader.Visible = false;
        Fpslibrary.Columns[0].Width = 10;
        Fpslibrary.Columns[1].Width = 150;
        Fpslibrary.Columns[2].Width = 20;
        Fpslibrary.Columns[3].Width = 470;
        cmd.CommandText = "Select Stud_Name,Roll_No from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            Fpslibrary.Sheets[0].Cells[1, 1].Text = "STUDENT NAME";
            Fpslibrary.Sheets[0].Cells[1, 2].Text = ":";
            Fpslibrary.Sheets[0].Cells[1, 3].Text = rroll.GetValue(0).ToString();
            cmd.CommandText = "select acc_no,title,isnull(due_date,'') from borrow where roll_no='" + rroll.GetValue(1).ToString() + "' and return_flag=0 ";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rrem = cmd.ExecuteReader();
            int i = 1;
            if (rrem.HasRows)
            {
                while (rrem.Read())
                {
                    Fpslibrary.Sheets[0].RowCount = Fpslibrary.Sheets[0].RowCount + 4;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 4, 1].Text = i.ToString() + "." + "Access No";
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 4, 2].Text = ":";
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 4, 3].Text = rrem.GetValue(0).ToString();
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 3, 1].Text = "Title";
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 3, 2].Text = ":";
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 3, 3].Text = rrem.GetValue(1).ToString();
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 2, 1].Text = "Due Date";
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 2, 2].Text = ":";
                    if (rrem.GetValue(2).ToString() == "")
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 2, 3].Text = rrem.GetValue(2).ToString();
                    else
                    {
                        DateTime datetemp = Convert.ToDateTime(rrem.GetValue(2).ToString());
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 2, 3].Text = datetemp.ToString("dd-MM-yyyy");
                    }
                    i++;
                }
                rrem.Close();
                con1.Close();
                Fpslibrary.Height = (Fpslibrary.Rows.Default.Height * Fpslibrary.Sheets[0].RowCount) + 30;
                Fpslibrary.Width = 650;
            }
            else
            {
                Fpslibrary.Sheets[0].ColumnCount = 0;
                Fpslibrary.Sheets[0].RowCount = 0;
                Fpslibrary.Sheets[0].ColumnCount = 4;
                Fpslibrary.Sheets[0].RowCount = 1;
                Fpslibrary.Columns.Default.Width = 150;
                Fpslibrary.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpslibrary.Height = 45;
                Fpslibrary.Width = 600;
                Fpslibrary.ColumnHeader.Visible = false;
                Fpslibrary.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpslibrary.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpslibrary.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpslibrary.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
            }
        }
        rroll.Close();
        con.Close();
        // Fpslibrary.Width = (Fpslibrary.Columns.Default.Width * Fpslibrary.Sheets[0].ColumnCount);
        Fpslibrary.SaveChanges();
    }

    protected void Buttonbukr_Click(object sender, EventArgs e)
    {
        // FpSgen.Visible = true;
        initlibrary();
        string strid = string.Empty;
        Boolean libid = false;
        Fpslibrary.Visible = true;
        Fpslibrary.Sheets[0].ColumnCount = 8;
        Fpslibrary.ColumnHeader.Visible = true;
        Fpslibrary.Columns.Default.Width = 100;
        Fpslibrary.Rows.Default.Height = 20;
        Fpslibrary.Sheets[0].GridLines = GridLines.Both;
        Fpslibrary.CommandBar.Visible = false;
        Fpslibrary.TitleInfo.Text = "BOOK RETURN DETAILS";
        Fpslibrary.ColumnHeader.Visible = true;
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Token no";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Access No";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Title";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Author";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Issue Date";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Due Date";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Library Name";
        Fpslibrary.Sheets[0].Columns[0].Width = 40;
        Fpslibrary.Sheets[0].Columns[1].Width = 60;
        Fpslibrary.Sheets[0].Columns[2].Width = 60;
        Fpslibrary.Sheets[0].Columns[3].Width = 60;
        Fpslibrary.Sheets[0].Columns[4].Width = 60;
        Fpslibrary.Sheets[0].Columns[5].Width = 90;
        Fpslibrary.Sheets[0].Columns[6].Width = 90;
        Fpslibrary.Sheets[0].Columns[7].Width = 60;
        int len1 = 0, len2 = 0, len3 = 0, len4 = 0, len7 = 0;
        cmd.CommandText = "Select Roll_No,lib_id from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            cmd.CommandText = "select linkvalue from inssettings where linkname ='Library id'";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rlid = cmd.ExecuteReader();
            if (rlid.Read())
            {
                if (rlid.GetValue(0).ToString() == "1")
                {
                    libid = true;
                    strid = rlid.GetValue(0).ToString();
                }
                else
                {
                    libid = false;
                    strid = rroll.GetValue(0).ToString();
                }
            }
            else
            {
                libid = false;
                strid = rroll.GetValue(0).ToString();
            }
            rlid.Close();
            con1.Close();
            cmd.CommandText = "select isnull(token_no,''),isnull(acc_no,''),isnull(title,''),isnull(author,''),isnull(borrow_date,''),isnull(due_date,''),isnull(lib_code,''),b.stud_name from borrow  as b, registration where registration.roll_no='" + rroll.GetValue(0).ToString() + "' and b.roll_no = '" + strid + "' and return_flag=0 ";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rlib = cmd.ExecuteReader();
            int i = 0;
            if (rlib.HasRows)
            {
                while (rlib.Read())
                {
                    Fpslibrary.Sheets[0].RowCount = Fpslibrary.Sheets[0].RowCount + 1;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 0].Text = (i + 1).ToString();
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 1].Text = rlib.GetValue(0).ToString();
                    int l1 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 1].Text.Length;
                    if (len1 < l1)
                        len1 = l1;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 2].Text = rlib.GetValue(1).ToString();
                    int l2 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 2].Text.Length;
                    if (len2 < l2)
                        len2 = l2;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 3].Text = rlib.GetValue(2).ToString();
                    int l3 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 3].Text.Length;
                    if (len3 < l3)
                        len3 = l3;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 4].Text = rlib.GetValue(3).ToString();
                    int l4 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 4].Text.Length;
                    if (len4 < l4)
                        len4 = l4;
                    if (rlib.GetValue(5).ToString() == "")
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 5].Text = rlib.GetValue(4).ToString();
                    else
                    {
                        DateTime datetemp = Convert.ToDateTime(rlib.GetValue(4).ToString());
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 5].Text = datetemp.ToString("dd-MM-yyyy");
                    }
                    if (rlib.GetValue(5).ToString() == "")
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 6].Text = rlib.GetValue(5).ToString();
                    else
                    {
                        DateTime datetemp = Convert.ToDateTime(rlib.GetValue(5).ToString());
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 6].Text = datetemp.ToString("dd-MM-yyyy");
                    }
                    if (rlib.GetValue(6).ToString() == "")
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 7].Text = rlib.GetValue(6).ToString();
                    else
                    {
                        cmd.CommandText = "Select lib_name from library where lib_code='" + rlib.GetValue(6).ToString() + "'";
                        cmd.Connection = con2;
                        con2.Open();
                        SqlDataReader rlib1 = cmd.ExecuteReader();
                        if (rlib1.Read())
                        {
                            Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 7].Text = rlib1.GetValue(0).ToString();
                        }
                        rlib1.Close();
                        con2.Close();
                    }
                    int l7 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 7].Text.Length;
                    if (len7 < l7)
                        len7 = l7;
                    i++;
                }
                rlib.Close();
                con1.Close();
                if (len1 > 5)
                    Fpslibrary.Sheets[0].Columns[1].Width = len1 * 11;
                if (len2 > 5)
                    Fpslibrary.Sheets[0].Columns[2].Width = len2 * 11;
                if (len3 > 5)
                    Fpslibrary.Sheets[0].Columns[3].Width = len3 * 11;
                if (len4 > 5)
                    Fpslibrary.Sheets[0].Columns[4].Width = len4 * 11;
                if (len7 > 5)
                    Fpslibrary.Sheets[0].Columns[7].Width = len7 * 11;
                int widt = 0, h = 0;
                for (int count = 0; count < Fpslibrary.Sheets[0].ColumnCount; count++)
                    widt = widt + Fpslibrary.Sheets[0].Columns[count].Width;
                if (widt > 900)
                {
                    h = 16;
                    Fpslibrary.Width = 916;
                    Fpslibrary.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                }
                else
                {
                    Fpslibrary.Width = widt;
                    Fpslibrary.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                }
                Fpslibrary.ColumnHeader.Height = 20;
                Fpslibrary.Height = h + (Fpslibrary.Rows.Default.Height * Fpslibrary.Sheets[0].RowCount) + 65;
                Fpslibrary.SaveChanges();
            }
            else
            {
                Fpslibrary.Sheets[0].ColumnCount = 0;
                Fpslibrary.Sheets[0].RowCount = 0;
                Fpslibrary.Sheets[0].ColumnCount = 4;
                Fpslibrary.Sheets[0].RowCount = 1;
                Fpslibrary.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpslibrary.Columns.Default.Width = 150;
                Fpslibrary.Height = 45;
                Fpslibrary.Width = 600;
                Fpslibrary.ColumnHeader.Visible = false;
                Fpslibrary.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpslibrary.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpslibrary.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpslibrary.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpslibrary.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
            }
        }
        rroll.Close();
        con.Close();
        Fpslibrary.Visible = true;
        Fpslibrary.SaveChanges();
    }

    protected void Buttonfine_Click(object sender, EventArgs e)
    {
        initlibrary();
        string strid = string.Empty;
        Boolean libid = false;
        DateTime datetemp, datet;
        int ndays = 0, fine = 0;
        Fpslibrary.Visible = true;
        Fpslibrary.Columns.Default.Width = 100;
        Fpslibrary.Rows.Default.Height = 20;
        Fpslibrary.Sheets[0].ColumnCount = 9;
        Fpslibrary.TitleInfo.Text = "BOOK FINE DETAILS";
        Fpslibrary.ColumnHeader.Visible = true;
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Token no";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Access No";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Title";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Author";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Issue Date";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Due Date";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Fine";
        Fpslibrary.Sheets[0].ColumnHeader.Cells[0, 8].Text = "Library Name";
        Fpslibrary.Sheets[0].Columns[0].Width = 40;
        Fpslibrary.Sheets[0].Columns[1].Width = 60;
        Fpslibrary.Sheets[0].Columns[2].Width = 60;
        Fpslibrary.Sheets[0].Columns[3].Width = 60;
        Fpslibrary.Sheets[0].Columns[4].Width = 60;
        Fpslibrary.Sheets[0].Columns[5].Width = 90;
        Fpslibrary.Sheets[0].Columns[6].Width = 90;
        Fpslibrary.Sheets[0].Columns[7].Width = 60;
        Fpslibrary.Sheets[0].Columns[7].Width = 60;
        int len1 = 0, len2 = 0, len3 = 0, len4 = 0, len7 = 0;
        cmd.CommandText = "Select Roll_No,(select case degree.Course_ID when '-1' then ' ' else degree.Course_ID end from degree where degree.Degree_Code=registration.degree_code),(select case degree.Dept_Code when '-1' then ' ' else degree.Dept_Code end from degree where degree.Degree_Code=registration.degree_code),batch_year from registration where app_no='" + appno + "'";
        cmd.Connection = con;
        con.Open();
        SqlDataReader rroll = cmd.ExecuteReader();
        if (rroll.Read())
        {
            cmd.CommandText = "select linkvalue from inssettings where linkname ='Library id'";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rlid = cmd.ExecuteReader();
            if (rlid.Read())
            {
                if (rlid.GetValue(0).ToString() == "1")
                {
                    libid = true;
                    strid = rlid.GetValue(0).ToString();
                }
                else
                {
                    libid = false;
                    strid = rroll.GetValue(0).ToString();
                }
            }
            else
            {
                libid = false;
                strid = rroll.GetValue(0).ToString();
            }
            rlid.Close();
            con1.Close();
            cmd.CommandText = "select isnull(token_no,''),isnull(acc_no,''),isnull(title,''),isnull(author,''),isnull(borrow_date,''),isnull(lib_code,'') from borrow  as b, registration where registration.roll_no='" + rroll.GetValue(0).ToString() + "' and b.roll_no = '" + strid + "' and return_flag=0 ";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rlib = cmd.ExecuteReader();
            int i = 0;
            if (rlib.HasRows)
            {
                while (rlib.Read())
                {
                    Fpslibrary.Sheets[0].RowCount = Fpslibrary.Sheets[0].RowCount + 1;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 0].Text = (i + 1).ToString();
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 1].Text = rlib.GetValue(0).ToString();
                    int l1 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 1].Text.Length;
                    if (len1 < l1)
                        len1 = l1;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 2].Text = rlib.GetValue(1).ToString();
                    int l2 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 2].Text.Length;
                    if (len2 < l2)
                        len2 = l2;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 3].Text = rlib.GetValue(2).ToString();
                    int l3 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 3].Text.Length;
                    if (len3 < l3)
                        len3 = l3;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 4].Text = rlib.GetValue(3).ToString();
                    int l4 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 4].Text.Length;
                    if (len4 < l4)
                        len4 = l4;
                    if (rlib.GetValue(5).ToString() == "")
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 5].Text = rlib.GetValue(4).ToString();
                    else
                    {
                        datet = Convert.ToDateTime(rlib.GetValue(4).ToString());
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 5].Text = datet.ToString("dd-MM-yyyy");
                    }
                    {
                        cmd.CommandText = "Select no_of_days,fine from lib_master where code='" + rroll.GetValue(1).ToString() + "~" + rroll.GetValue(2).ToString() + "' and batch_year='" + rroll.GetValue(3).ToString() + "'";
                        cmd.Connection = con2;
                        con2.Open();
                        SqlDataReader rfine = cmd.ExecuteReader();
                        if (rfine.Read())
                        {
                            ndays = Convert.ToInt32(rfine.GetValue(0).ToString());
                            fine = Convert.ToInt32(rfine.GetValue(1).ToString());
                        }
                        rfine.Close();
                        con2.Close();
                    }
                    datetemp = Convert.ToDateTime(rlib.GetValue(4).ToString()).AddDays(ndays);
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 6].Text = datetemp.ToString("dd-MM-yyyy");
                    TimeSpan span = DateTime.Now.Subtract(datetemp);
                    if (span.Days > 0)
                        fine = fine * span.Days;
                    else
                        fine = 0;
                    Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 7].Text = fine.ToString();
                    if (rlib.GetValue(5).ToString() == "")
                        Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 8].Text = rlib.GetValue(5).ToString();
                    else
                    {
                        cmd.CommandText = "Select lib_name from library where lib_code='" + rlib.GetValue(5).ToString() + "'";
                        cmd.Connection = con2;
                        con2.Open();
                        SqlDataReader rlib1 = cmd.ExecuteReader();
                        if (rlib1.Read())
                            Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 8].Text = rlib1.GetValue(0).ToString();
                        rlib1.Close();
                        con2.Close();
                    }
                    int l7 = Fpslibrary.Sheets[0].Cells[Fpslibrary.Sheets[0].RowCount - 1, 8].Text.Length;
                    if (len7 < l7)
                        len7 = l7;
                    i++;
                }
                rlib.Close();
                con1.Close();
                if (len1 > 5)
                    Fpslibrary.Sheets[0].Columns[1].Width = len1 * 10;
                if (len2 > 5)
                    Fpslibrary.Sheets[0].Columns[2].Width = len2 * 10;
                if (len3 > 5)
                    Fpslibrary.Sheets[0].Columns[3].Width = len3 * 10;
                if (len4 > 5)
                    Fpslibrary.Sheets[0].Columns[4].Width = len4 * 10;
                if (len7 > 5)
                    Fpslibrary.Sheets[0].Columns[8].Width = len7 * 10;
                int widt = 0, h = 0;
                for (int count = 0; count < Fpslibrary.Sheets[0].ColumnCount; count++)
                    widt = widt + Fpslibrary.Sheets[0].Columns[count].Width;
                if (widt > 900)
                {
                    h = 16;
                    Fpslibrary.Width = 916;
                    Fpslibrary.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                }
                else
                {
                    Fpslibrary.Width = widt;
                    Fpslibrary.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                }
                Fpslibrary.ColumnHeader.Height = 20;
                Fpslibrary.Height = h + (Fpslibrary.Rows.Default.Height * Fpslibrary.Sheets[0].RowCount) + 65;
                Fpslibrary.SaveChanges();
            }
            else
            {
                Fpslibrary.Sheets[0].ColumnCount = 0;
                Fpslibrary.Sheets[0].RowCount = 0;
                Fpslibrary.Sheets[0].ColumnCount = 4;
                Fpslibrary.Sheets[0].RowCount = 1;
                Fpslibrary.Columns.Default.Width = 150;
                Fpslibrary.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpslibrary.Height = 45;
                Fpslibrary.Width = 600;
                Fpslibrary.ColumnHeader.Visible = false;
                Fpslibrary.Sheets[0].Cells[0, 0].Text = "No information Available";
                Fpslibrary.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpslibrary.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpslibrary.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpslibrary.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                Fpslibrary.SaveChanges();
            }
        }
        rroll.Close();
        con.Close();
        //Fpslibrary.Width = (Fpslibrary.Columns.Default.Width * Fpslibrary.Sheets[0].ColumnCount);
        Fpslibrary.CommandBar.Visible = false;
        Fpslibrary.SaveChanges();
    }

    protected void Buttonconduct_Click(object sender, EventArgs e)
    {
        initlesson();
        Fpslesson.Visible = true;
        if (tbto.Text == "" && tbfrom.Text == "")
        {
            labeldatevalid.Text = "Select date";
            labeldatevalid.Visible = true;
            Fpslesson.Visible = false;
            return;
        }
        int days = 0;
        string datefad, dtfromad;
        string datefromad;
        string yr4, m4, d4;
        datefad = tbfrom.Text.ToString();
        string[] split4 = datefad.Split(new Char[] { '-' });
        datefromad = split4[0].ToString() + "-" + split4[1].ToString() + "-" + split4[2].ToString();
        yr4 = split4[2].ToString();
        m4 = split4[1].ToString();
        d4 = split4[0].ToString();
        dtfromad = m4 + "-" + d4 + "-" + yr4;
        string date2ad;
        string datetoad;
        string yr5, m5, d5;
        date2ad = tbto.Text.ToString();
        string[] split5 = date2ad.Split(new Char[] { '-' });
        datetoad = split5[0].ToString() + "-" + split5[1].ToString() + "-" + split5[2].ToString();
        yr5 = split5[2].ToString();
        m5 = split5[1].ToString();
        d5 = split5[0].ToString();
        datetoad = m5 + "-" + d5 + "-" + yr5;
        DateTime dt1 = Convert.ToDateTime(dtfromad);
        DateTime dt2 = Convert.ToDateTime(datetoad);
        TimeSpan ts = dt2 - dt1;
        days = ts.Days;
        if (days < 0)
        {
            labeldatevalid.Text = "To Date Must be greater than from date";
            labeldatevalid.Visible = true;
            Fpslesson.Visible = false;
        }
        else
        {
            Session["lesson"] = "1";
            DateTime dtStartDate = new DateTime();
            DateTime dtEndDate = new DateTime();
            // FpSgen.Visible = true;
            labeldatevalid.Visible = false;
            tbfrom.Visible = true;
            tbto.Visible = true;
            Fpslesson.Visible = true;
            Fpslesson.Sheets[0].ColumnCount = 8;
            Fpslesson.Sheets[0].RowCount = 0;
            Fpslesson.ColumnHeader.Visible = true;
            Fpslesson.RowHeader.Visible = false;
            //   Fpslesson.Width = 900;
            // Fpslesson.Height = 520;
            Fpslesson.CommandBar.Visible = false;
            Fpslesson.Sheets[0].GridLines = GridLines.Both;
            Fpslesson.Sheets[0].DefaultColumnWidth = 150;
            Fpslesson.Sheets[0].DefaultRowHeight = 20;
            // Fpslesson.Sheets[0].BackColor = Color.CornflowerBlue;
            Fpslesson.TitleInfo.Visible = true;
            Fpslesson.TitleInfo.Text = "LESSON STATUS- Conducted";
            Fpslesson.TitleInfo.Font.Size = FontUnit.Large;
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Hour";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Start Time";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 3].Text = "End Time";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Subject Code";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Subject Name";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Staff Name";
            Fpslesson.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Topics";
            Fpslesson.Sheets[0].Columns[0].Width = 40;
            Fpslesson.Sheets[0].Columns[1].Width = 100;
            Fpslesson.Sheets[0].Columns[2].Width = 75;
            Fpslesson.Sheets[0].Columns[3].Width = 75;
            Fpslesson.Sheets[0].Columns[4].Width = 100;
            Fpslesson.Sheets[0].Columns[5].Width = 175;
            Fpslesson.Sheets[0].Columns[6].Width = 160;
            Fpslesson.Sheets[0].Columns[7].Width = 175;
            //string dts = dt.ToString("dd-MM-yyyy");
            tbto.Visible = true;
            tbfrom.Visible = true;
            Fpslesson.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
            //string query;
            int i = 0;
            string byr = string.Empty;
            string deg = string.Empty;
            string sem = string.Empty;
            string sec = string.Empty;
            string sno = string.Empty;
            string stdate = string.Empty;
            string edate = string.Empty;
            string query = string.Empty;
            cmd.CommandText = "select batch_year,degree_code,current_semester,isnull(sections,'') from registration where App_No='" + appno + "'";
            cmd.Connection = con;
            con.Open();
            SqlDataReader rtoday = cmd.ExecuteReader();
            if (rtoday.Read())
            {
                byr = rtoday.GetValue(0).ToString();
                deg = rtoday.GetValue(1).ToString();
                sem = rtoday.GetValue(2).ToString();
                sec = rtoday.GetValue(3).ToString();
                if (sec != "")
                    query = " and sections='" + sec + "' ";
            }
            rtoday.Close();
            con.Close();
            //magesh 7.7.81
            cmd.CommandText = "Select CONVERT(VARCHAR(10),start_date,103),CONVERT(VARCHAR(10),end_date,103),semester,batch_year from seminfo where degree_code='" + deg + "' and semester='" + sem + "' and batch_year='" + byr + "'";
            cmd.Connection = con1;
            con1.Open();
            SqlDataReader rbs1 = cmd.ExecuteReader();
            if (rbs1.Read())
            {
                stdate = rbs1.GetValue(0).ToString();
                edate = rbs1.GetValue(1).ToString();

                DateTime.TryParseExact(stdate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtStartDate);
                DateTime.TryParseExact(edate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtEndDate);
                rbs1.Close();
                con1.Close();
                if (DateTime.Today >= dtStartDate && DateTime.Today <= dtEndDate)
                {//magesh 7.7.18
                    string subno = string.Empty;
                    string subname = string.Empty;
                    string staffno = string.Empty;
                    string subno1 = string.Empty;
                    string subjno1 = string.Empty;
                    string staffno1 = string.Empty;
                    string stafno = string.Empty;
                    string[] no = new string[5];
                    string[] sub = new string[5];
                    string[] subject = new string[5];
                    string[] staff = new string[5];
                    int[] count = new int[5];
                    string no1 = string.Empty;
                    string no2 = string.Empty;
                    string l1, l;
                    int cnt = 0;
                    rtoday.Close();
                    con.Close();
                    string s = DateTime.Now.DayOfWeek.ToString().Substring(0, 3);
                    string fdate = DateTime.Now.ToString("yyyy-MM-dd");
                    string tday = string.Empty;
                    string temp = string.Empty;
                    string temp1 = string.Empty;
                    string temps = string.Empty;
                    string tempt = string.Empty;
                    string st = string.Empty;
                    string str = string.Empty;
                    string[] split;
                    string[] split1;
                    string[] split2;
                    int len = 0;
                    int serialno = 0;
                    //arrCount = Split(MyString, TargetCharacter, -1 1)
                    //CharacterCount = UBound(arrCount)
                    if (days >= 0)
                    {
                        string[] difdays = new string[days + 1];
                        for (int loop = 0; loop <= days; loop++)
                        {
                            difdays[loop] = dt1.AddDays(loop).ToString();
                            DateTime tdaydate = Convert.ToDateTime(difdays[loop]);
                            string day = tdaydate.ToString("dddd");
                            if (day == "Sunday")
                            {
                                Fpslesson.Sheets[0].RowCount = Fpslesson.Sheets[0].RowCount + 1;
                                Fpslesson.Sheets[0].SpanModel.Add(Fpslesson.Sheets[0].RowCount - 1, 0, 1, Fpslesson.Sheets[0].ColumnCount);
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Text = dt1.AddDays(loop).ToString("dd-MM-yyyy") + "-" + day;
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].BackColor = Color.AliceBlue;
                                continue;
                            }
                            {
                                cmd.CommandText = "Select CONVERT(VARCHAR(10),start_date,103),CONVERT(VARCHAR(10),end_date,103),semester,batch_year from seminfo where degree_code='" + deg + "' and semester='" + sem + "' and batch_year='" + byr + "'";
                                cmd.Connection = con1;
                                con1.Open();
                                SqlDataReader rbs = cmd.ExecuteReader();
                                if (!rbs.HasRows)
                                {
                                    con1.Close();
                                    break;
                                }
                                if (rbs.Read())
                                {
                                    Fpslesson.Sheets[0].RowCount = Fpslesson.Sheets[0].RowCount + 1;
                                    Fpslesson.Sheets[0].SpanModel.Add(Fpslesson.Sheets[0].RowCount - 1, 0, 1, Fpslesson.Sheets[0].ColumnCount);
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Text = dt1.AddDays(loop).ToString("dd-MM-yyyy") + "-" + day;
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].BackColor = Color.LightCyan;
                                    stdate = rbs.GetValue(0).ToString();
                                    edate = rbs.GetValue(1).ToString();
                                    cmd.CommandText = "select desc1,RIGHT(CONVERT(VARCHAR(20),start_time,100),7),RIGHT(CONVERT(VARCHAR(20),end_time,100),7),period1 from bellschedule where  degree_code='" + deg + "' and semester='" + sem + "' order by period1";
                                    cmd.Connection = con2;
                                    con2.Open();
                                    SqlDataReader rbsed = cmd.ExecuteReader();
                                    if (rbsed.HasRows)
                                    {
                                        i = 0; serialno = 1;
                                        while (rbsed.Read())
                                        {
                                            Fpslesson.Sheets[0].RowCount = Fpslesson.Sheets[0].RowCount + 1;
                                            int j = 0;
                                            for (j = 0; j < 4; j++)
                                            {
                                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, 0].Text = serialno.ToString();
                                                if (j == 3)
                                                {
                                                    int result;
                                                    if (int.TryParse(rbsed.GetValue(j).ToString(), out result))
                                                        i++;
                                                }
                                                Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - 1, j + 1].Text = rbsed.GetValue(j).ToString();
                                            }
                                            serialno = serialno + 1;
                                        }
                                    }
                                    rbsed.Close();
                                    con2.Close();
                                }
                                rbs.Close();
                                con1.Close();
                            }
                            int col = i;
                            for (int k = 1; k <= col; k++)
                            {
                                // DateTime tdaydate = Convert.ToDateTime(difdays[loop]);
                                tday = tdaydate.ToString("ddd") + k.ToString();
                                // tday = s + k.ToString();
                                cmd.CommandText = "select " + tday + " from semester_schedule where degree_code='" + deg + "' and batch_year='" + byr + "' and semester='" + sem + "'and  fromDate >= " + stdate + query + " Order by FromDate Desc";
                                cmd.Connection = con;
                                con.Open();
                                SqlDataReader rsub = cmd.ExecuteReader();
                                if (!rsub.HasRows)
                                {
                                    con.Close();
                                    break;
                                }
                                if (rsub.Read())
                                {
                                    sno = rsub.GetValue(0).ToString();
                                    if (sno != "")
                                    {
                                        if (sno.Contains(";"))
                                        {
                                            split = sno.Split(new Char[] { ';' });
                                            len = split.Length;
                                            for (int c = 0; c < split.Length; c++)
                                            {
                                                no[c] = split[c].ToString();
                                            }
                                        }
                                        else
                                        {
                                            no[0] = sno.ToString();
                                            len = 1;
                                        }
                                        for (int c = 0; c < len; c++)
                                        {
                                            if (no[c] != "" && no[c] != null)
                                            {
                                                if (no[c].Contains("-"))
                                                {
                                                    split1 = no[c].Split(new Char[] { '-' });
                                                    sub[c] = split1[0].ToString() + "-" + split1[1].ToString();
                                                    subject[c] = split1[0].ToString();
                                                    staff[c] = split1[1].ToString();
                                                }
                                                else
                                                {
                                                    subject[c] = no[c].ToString();
                                                    staff[c] = string.Empty;
                                                }
                                                long result;
                                                if (long.TryParse(subject[c], out result))
                                                {
                                                    cmd.CommandText = "select  subject_code,subject_name from subject where subject_No=" + subject[c] + "";
                                                    cmd.Connection = con1;
                                                    con1.Open();
                                                    SqlDataReader rsubj = cmd.ExecuteReader();
                                                    if (rsubj.Read())
                                                    {
                                                        if (temp == "" && temp1 == "")
                                                        {
                                                            temp = rsubj.GetValue(0).ToString();
                                                            temp1 = rsubj.GetValue(1).ToString();
                                                            subcode.Add(rsubj.GetValue(0).ToString());
                                                            sname.Add(rsubj.GetValue(1).ToString());
                                                        }
                                                        else
                                                        {
                                                            if (temp != rsubj.GetValue(0).ToString())
                                                            {
                                                                temp = temp + ", " + rsubj.GetValue(0).ToString();
                                                                temp1 = temp1 + ", " + rsubj.GetValue(1).ToString();
                                                            }
                                                            subcode.Add(rsubj.GetValue(0).ToString());
                                                            sname.Add(rsubj.GetValue(1).ToString());
                                                        }
                                                    }
                                                    else
                                                    {
                                                        subcode.Add("");
                                                        sname.Add("");
                                                    }
                                                    rsubj.Close();
                                                    con1.Close();
                                                    if (staff[c] != "")
                                                    {
                                                        if (staff[c].Contains("-"))
                                                        {
                                                            split2 = staff[c].Split(new Char[] { '-' });
                                                            st = split2[0].ToString() + "-" + split2[1].ToString();
                                                            str = split2[0].ToString();
                                                        }
                                                        else
                                                        {
                                                            if (staff[c] != "S" || staff[c] != "s" || staff[c] != "L" || staff[c] != "L")
                                                            {
                                                                str = staff[c];
                                                            }
                                                            else
                                                            {
                                                                str = string.Empty;
                                                            }
                                                        }
                                                        if (str != "")
                                                        {
                                                            // if (long.TryParse(str, out result))
                                                            {
                                                                cmd.CommandText = "select  staff_name from staffmaster where staff_code='" + str + "'";
                                                                cmd.Connection = con1;
                                                                con1.Open();
                                                                SqlDataReader rstaf = cmd.ExecuteReader();
                                                                if (rstaf.Read())
                                                                {
                                                                    if (temps == "")
                                                                    {
                                                                        temps = str + "-" + rstaf.GetValue(0).ToString();
                                                                        staffname.Add(rstaf.GetValue(0).ToString());
                                                                    }
                                                                    else
                                                                    {
                                                                        temps = temps + ", " + str + "-" + rstaf.GetValue(0).ToString();
                                                                        staffname.Add(rstaf.GetValue(0).ToString());
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    staffname.Add("");
                                                                }
                                                                rstaf.Close();
                                                                con1.Close();
                                                            }
                                                        }
                                                        else
                                                        {
                                                            staffname.Add("");
                                                        }
                                                    }
                                                    string[] topics = new string[15];
                                                    string top = string.Empty;
                                                    int ln = 0;
                                                    cmd.CommandText = "select distinct topics from dailyEntdet where  subject_no=" + subject[c] + " and hr=" + k + " and lp_code in (select lp_code from dailyStaffEntry where degree_code=" + deg + " and batch_year='" + byr + "' and semester= '" + sem + "' and sch_date='" + tdaydate + "' " + query + ")";
                                                    cmd.Connection = con1;
                                                    con1.Open();
                                                    SqlDataReader rtop = cmd.ExecuteReader();
                                                    if (rtop.Read())
                                                    {
                                                        top = rtop.GetValue(0).ToString();
                                                        if (top != "" && top != null)
                                                        {
                                                            if (top.Contains("/"))
                                                            {
                                                                split = top.Split(new Char[] { '/' });
                                                                ln = split.Length;
                                                                for (int t = 0; t < ln; t++)
                                                                {
                                                                    topics[t] = split[t].ToString();
                                                                }
                                                            }
                                                            else
                                                            {
                                                                ln = 1;
                                                                topics[0] = top;
                                                            }
                                                            for (int t = 0; t < ln; t++)
                                                            {
                                                                // if (long.TryParse(topics[t], out result))
                                                                {
                                                                    cmd.CommandText = "select distinct unit_name from sub_unit_details where topic_no=" + topics[t] + "";
                                                                    cmd.Connection = con2;
                                                                    con2.Open();
                                                                    SqlDataReader rstop = cmd.ExecuteReader();
                                                                    if (rstop.Read())
                                                                    {
                                                                        if (tempt == "")
                                                                        {
                                                                            tempt = rstop.GetValue(0).ToString();
                                                                            // staffname.Add(rstaf.GetValue(0).ToString());
                                                                        }
                                                                        else
                                                                        {
                                                                            tempt = tempt + ", " + rstop.GetValue(0).ToString();
                                                                            //staffname.Add(rstaf.GetValue(0).ToString());
                                                                        }
                                                                    }
                                                                    rstop.Close();
                                                                    con2.Close();
                                                                }
                                                            }
                                                        }
                                                    }
                                                    rtop.Close();
                                                    con1.Close();
                                                }
                                            }
                                        }
                                        Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 4].Text = temp;
                                        Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 5].Text = temp1;
                                        Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 6].Text = temps;
                                        if (tempt == "")
                                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 7].Text = "Not Entered";
                                        else
                                            Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 7].Text = tempt;
                                    }
                                }
                                else
                                {
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 4].Text = string.Empty;
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 5].Text = string.Empty;
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 6].Text = string.Empty;
                                    Fpslesson.Sheets[0].Cells[Fpslesson.Sheets[0].RowCount - col + k - 1, 7].Text = string.Empty;
                                }
                                rsub.Close();
                                con.Close();
                                temp = string.Empty;
                                temp1 = string.Empty;
                                temps = string.Empty;
                                tempt = string.Empty;
                            }
                        }
                    }
                    if (Fpslesson.Sheets[0].RowCount < 2)
                    {
                        Fpslesson.Sheets[0].RowCount = 0;
                        Fpslesson.Sheets[0].ColumnCount = 0;
                        Fpslesson.Columns.Default.Width = 150;
                        Fpslesson.Sheets[0].RowCount = 1;
                        Fpslesson.Sheets[0].ColumnCount = 4;
                        Fpslesson.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                        Fpslesson.Sheets[0].Cells[0, 0].Text = "Not Entered";
                        Fpslesson.ColumnHeader.Visible = false;
                        Fpslesson.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpslesson.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                        Fpslesson.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                        Fpslesson.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                        Fpslesson.Width = 600;
                        Fpslesson.Height = 45;
                    }
                    else
                    {
                        Fpslesson.Width = 916;
                        Fpslesson.Height = 400;
                        Fpslesson.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                        Fpslesson.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
                    }
                    // Fpslesson.Height = (Fpslesson.Rows.Default.Height * Fpslesson.Sheets[0].RowCount) + Fpslesson.ColumnHeader.Height + 50;
                    Fpslesson.SaveChanges();
                }//magesh 7.7.18
                else
                {
                    if (DateTime.Today < dtStartDate)
                    {
                        string prefix = "th";
                        if (sem == "1")
                            prefix = "st";
                        else if (sem == "2")
                            prefix = "nd";
                        else if (sem == "3")
                            prefix = "rd";

                        Fpslesson.Sheets[0].ColumnCount = 0;
                        Fpslesson.Sheets[0].RowCount = 0;
                        Fpslesson.Sheets[0].ColumnCount = 4;
                        Fpslesson.Sheets[0].RowCount = 1;
                        Fpslesson.ColumnHeader.Columns.Default.Width = 150;
                        Fpslesson.ColumnHeader.Visible = false;
                        Fpslesson.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                        Fpslesson.Width = 600;
                        Fpslesson.Height = 40;
                        Fpslesson.Sheets[0].Cells[0, 0].Text = "Sorry. Your " + sem + prefix + " Semester starts on " + dtStartDate.ToString("dd/MM/yyyy");
                        Fpslesson.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpslesson.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                        Fpslesson.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                        Fpslesson.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                    }
                    if (DateTime.Today > dtEndDate)
                    {
                        string prefix = "th";
                        if (sem == "1")
                            prefix = "st";
                        else if (sem == "2")
                            prefix = "nd";
                        else if (sem == "3")
                            prefix = "rd";

                        Fpslesson.Sheets[0].ColumnCount = 0;
                        Fpslesson.Sheets[0].RowCount = 0;
                        Fpslesson.Sheets[0].ColumnCount = 4;
                        Fpslesson.Sheets[0].RowCount = 1;
                        Fpslesson.ColumnHeader.Columns.Default.Width = 150;
                        Fpslesson.ColumnHeader.Visible = false;
                        Fpslesson.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                        Fpslesson.Width = 600;
                        Fpslesson.Height = 40;
                        Fpslesson.Sheets[0].Cells[0, 0].Text = "Sorry. Your " + sem + prefix + " Semester got over on " + dtEndDate.ToString("dd/MM/yyyy");
                        Fpslesson.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpslesson.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                        Fpslesson.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                        Fpslesson.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

                    }
                }//magesh 7.7.18
            }
        }
    }

    protected void Fpsattendence_SelectedIndexChanged(Object sender, EventArgs e)
    {
        //Fpsattendence.Sheets[0].AutoPostBack = true;
        Fpsattendence.SaveChanges();
        if (cellclick == true)
        {
            //if (semperc == true)
            {
                if (Fpsattendence.Sheets[0].RowCount > 0)
                {
                    string activerow = string.Empty;
                    string activecol = string.Empty;
                    activerow = Fpsattendence.ActiveSheetView.ActiveRow.ToString();
                    activecol = Fpsattendence.ActiveSheetView.ActiveColumn.ToString();
                    int ar;
                    int ac;
                    ar = Convert.ToInt32(activerow.ToString());
                    ac = Convert.ToInt32(activecol.ToString());
                    if (ar != -1)
                    {
                        if (ac == 10)
                        {
                            semdates = Fpsattendence.Sheets[0].Cells[ar, 10].Note.ToString();
                            semesterval = Fpsattendence.Sheets[0].Cells[ar, 10].Tag.ToString();
                            absentdays();
                        }
                    }
                }
            }
        }
        cellclick = false;
    }

    protected void Fpsattendence_CellClick(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        Fpsattendence.Sheets[0].AutoPostBack = true;
        cellclick = true;
    }

    public void absentdays()
    {
        Fpsematen.Visible = true;
        Fpsematen.Sheets[0].RowCount = 0;
        Fpsematen.Sheets[0].ColumnCount = 0;
        Fpsematen.CommandBar.Visible = false;
        Fpsematen.ColumnHeader.Visible = false;
        Fpsematen.RowHeader.Visible = false;
        Fpsematen.TitleInfo.Visible = true;
        Fpsematen.TitleInfo.Text = " Absent days";
        string[] split = new string[2];
        string deg = string.Empty;
        string sem = string.Empty;
        if (semesterval.Contains('-'))
        {
            split = semesterval.Split(new char[] { '-' });
            sem = split[0].ToString();
            deg = split[1].ToString();
        }
        else
        {
            return;
        }
        Fpsematen.Sheets[0].RowCount = Fpsematen.Sheets[0].RowCount + 1;
        Fpsematen.Sheets[0].ColumnCount = 2;
        Fpsematen.Sheets[0].DefaultColumnWidth = 130;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Text = lbl_semOrTerm.Text + " " + sem + "";
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Font.Bold = true;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Locked = true;
        Fpsematen.Sheets[0].SpanModel.Add(Fpsematen.Sheets[0].RowCount - 1, 0, 1, 2);
        Fpsematen.Sheets[0].RowCount++;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Text = "Date";
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Font.Bold = true;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Locked = true;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 1].Text = "Hours";
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 1].Font.Bold = true;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 1].ForeColor = Color.Blue;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
        Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 1].Locked = true;
        string[] spl = new string[2];
        string dtp1 = string.Empty;
        string dtp2 = string.Empty;
        if (semdates.Contains('-'))
        {
            spl = semdates.Split(new char[] { '-' });
            dtp1 = spl[0].ToString();
            dtp2 = spl[1].ToString();
        }
        else
        {
            return;
        }
        string no_of_hrs = string.Empty;
        string min1 = string.Empty;
        string min2 = string.Empty;
        string half1 = string.Empty;
        string half2 = string.Empty;
        string sqlperiod = "Select * from PeriodAttndSchedule where degree_code=" + deg + " and semester=" + sem;
        con.Open();
        SqlCommand cmdper = new SqlCommand(sqlperiod, con);
        SqlDataReader drperiod;
        drperiod = cmdper.ExecuteReader();
        if (drperiod.Read())
        {
            half1 = drperiod["no_of_hrs_I_half_day"].ToString();
            min1 = drperiod["min_pres_I_half_day"].ToString();
            half2 = drperiod["no_of_hrs_I_half_day"].ToString();
            min2 = drperiod["min_pres_I_half_day"].ToString();
            no_of_hrs = drperiod["no_of_hrs_per_day"].ToString();
        }
        else
            return;
        drperiod.Close();
        con.Close();
        long de1 = 0;
        string hr1 = string.Empty;
        int cnt = 0;
        int allot = 0;
        string av = string.Empty;
        DateTime datestart = new DateTime();
        DateTime dateend = new DateTime();
        datestart = Convert.ToDateTime(dtp1);
        dateend = Convert.ToDateTime(dtp2);
        while (datestart <= dateend)
        {
            de1 = (Convert.ToInt64(datestart.ToString("MM")) + (Convert.ToInt64(datestart.ToString("yyyy"))) * 12);
            hr1 = string.Empty;
            cnt = 0;
            allot = 0;
            av = string.Empty;
            int abs1 = 0;
            int abs2 = 0;
            // first half day
            int t = 1;
            for (t = 1; t <= Convert.ToInt32(half1); t++)
            {
                cmd.CommandText = "select d" + datestart.Day.ToString() + "d" + t + "  from attendance where month_year='" + de1 + "' and  roll_no='" + Session["RollNo"] + "'";
                cmd.Connection = con;
                con.Open();
                SqlDataReader rabsent = cmd.ExecuteReader();
                if (rabsent.Read())
                {
                    string value = rabsent.GetValue(0).ToString();
                    if (value != null && value != "0" && value != "7" && value != "")
                    {
                        cmd.CommandText = "select CalcFlag from AttMasterSetting  where LeaveCode= " + value;// +" and collegecode=" + Session["colege_code"].ToString() + "";
                        cmd.Connection = con3;
                        con3.Open();
                        SqlDataReader rleave = cmd.ExecuteReader();
                        if (rleave.Read())
                        {
                            if (rleave.GetValue(0).ToString() != null && rleave.GetValue(0).ToString() == "1" && rleave.GetValue(0).ToString() != "")
                            {
                                if (av != "" && cnt >= 1)
                                {
                                    abs1 = abs1 + 1;
                                    hr1 = hr1 + "," + t.ToString();
                                    cnt = cnt + 1;
                                }
                                else if (av != "" && cnt == 0)
                                {
                                    abs1 = abs1 + 1;
                                    hr1 = av + "," + t.ToString();
                                    cnt = cnt + 1;
                                }
                                else
                                {
                                    abs1 = abs1 + 1;
                                    av = t.ToString();
                                    hr1 = hr1 + "," + t.ToString();
                                }
                            }
                        }
                        rleave.Close();
                        con3.Close();
                    }
                }
                rabsent.Close();
                con.Close();
            }
            double absent = 0;
            if (abs1 != 0)
            {
                int temp1 = Convert.ToInt32(half1) - Convert.ToInt32(min1);
                if (abs1 > temp1)
                    absent = absent + 0.5;
            }
            //2nd half day
            for (int T = t; T <= Convert.ToInt32(no_of_hrs); T++)
            {
                cmd.CommandText = "select d" + datestart.Day.ToString() + "d" + T + "  from attendance where month_year='" + de1 + "' and  roll_no='" + Session["RollNo"] + "'";
                cmd.Connection = con;
                con.Open();
                SqlDataReader rabsent = cmd.ExecuteReader();
                if (rabsent.Read())
                {
                    string value = rabsent.GetValue(0).ToString();
                    if (value != null && value != "0" && value != "7" && value != "")
                    {
                        cmd.CommandText = "select CalcFlag from AttMasterSetting  where LeaveCode= " + value;// +" and collegecode=" + Session["colege_code"].ToString() + "";
                        cmd.Connection = con3;
                        con3.Open();
                        SqlDataReader rleave = cmd.ExecuteReader();
                        if (rleave.Read())
                        {
                            if (rleave.GetValue(0).ToString() != null && rleave.GetValue(0).ToString() == "1" && rleave.GetValue(0).ToString() != "")
                            {
                                if (av != "" && cnt >= 1)
                                {
                                    hr1 = hr1 + "," + T.ToString();
                                    cnt = cnt + 1;
                                    abs2 = abs2 + 1;
                                }
                                else if (av != "" && cnt == 0)
                                {
                                    hr1 = av + "," + T.ToString();
                                    cnt = cnt + 1;
                                    abs2 = abs2 + 1;
                                }
                                else
                                {
                                    abs2 = abs2 + 1;
                                    av = t.ToString();
                                    hr1 = hr1 + "," + T.ToString();
                                }
                            }
                        }
                        rleave.Close();
                        con3.Close();
                    }
                }
                rabsent.Close();
                con.Close();
            }
            if (abs2 != 0)
            {
                int temp1 = Convert.ToInt32(half2) - Convert.ToInt32(min2);
                if (abs2 > temp1)
                    absent = absent + 0.5;
            }
            if (hr1 != "" && absent > 0.0)
            {
                if (Math.Round(absent, 1) == 0.5)
                {
                    Fpsematen.Sheets[0].RowCount = Fpsematen.Sheets[0].RowCount + 1;
                    Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Text = datestart.ToString("dd-MM-yyyy") + "( Half Day)";
                    Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                }
                else
                {
                    Fpsematen.Sheets[0].RowCount = Fpsematen.Sheets[0].RowCount + 1;
                    Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Text = datestart.ToString("dd-MM-yyyy");
                    Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                }
                Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 1].Text = hr1.ToString();
                Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 1].Font.Bold = true;
                Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 1].Locked = true;
                Fpsematen.Sheets[0].Cells[Fpsematen.Sheets[0].RowCount - 1, 0].Locked = true;
            }
            datestart = datestart.AddDays(1);
        }
        if (Fpsematen.Sheets[0].RowCount > 1)
            Fpsematen.ActiveSheetView.PageSize = Fpsematen.Sheets[0].RowCount;
        else
            Fpsematen.Sheets[0].Cells[0, 0].Text = "No information";
        Fpsematen.Width = 275;
        Fpsattendence.Sheets[0].AutoPostBack = true;
    }

    public void initattendence()
    {
        Fpsattendence.Sheets[0].AutoPostBack = false;
        Fpsattendence.Sheets[0].ColumnCount = 0;
        Fpsattendence.Sheets[0].RowCount = 0;
        Fpsattendence.TitleInfo.Visible = true;
        Fpsattendence.TitleInfo.Height = 20;
        Fpsattendence.TitleInfo.Font.Name = "Book Antiqua";
        Fpsattendence.TitleInfo.Font.Size = FontUnit.Large;
        Fpsattendence.TitleInfo.Font.Bold = true;
        Fpsattendence.TitleInfo.BackColor = Color.DeepSkyBlue;
        Fpsattendence.ColumnHeader.Visible = false;
        Fpsattendence.RowHeader.Visible = false;
        Fpsattendence.Sheets[0].ColumnHeader.DefaultStyle.BackColor = Color.LightSlateGray;
        Fpsattendence.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        Fpsattendence.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        Fpsattendence.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        Fpsattendence.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpsattendence.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpsattendence.Sheets[0].Columns.Default.HorizontalAlign = HorizontalAlign.Left;
        Fpsattendence.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
        Fpsattendence.Sheets[0].Columns.Default.Locked = true;
        Fpsattendence.Sheets[0].Columns.Default.Font.Name = "Book Antiqua";
        Fpsattendence.Sheets[0].Rows.Default.Font.Name = "Book Antiqua";
        Fpsattendence.Sheets[0].Rows.Default.Font.Size = FontUnit.Medium;
        Fpsattendence.Sheets[0].Columns.Default.Font.Size = FontUnit.Medium;
        //Fpsattendence.Sheets[0].DefaultColumnWidth = 80;
        //Fpsattendence.Sheets[0].DefaultRowHeight = 20;
        Fpsattendence.ColumnHeader.Height = 60;
        Fpsattendence.Sheets[0].PageSize = 1115;
        Fpsattendence.CommandBar.Visible = false;
        Fpsattendence.Visible = false;
        Fpsematen.Visible = false;
        Fpsattendence.Sheets[0].GridLines = GridLines.Both;
        Fpsattendence.SaveChanges();
    }

    protected void LinkButton1_Click(object sender, EventArgs e)
    {
    }

    public void initpersonal()
    {
        Fpspersonal.Sheets[0].ColumnCount = 0;
        Fpspersonal.Sheets[0].RowCount = 0;
        Fpspersonal.TitleInfo.Visible = true;
        Fpspersonal.ColumnHeader.Visible = false;
        Fpspersonal.RowHeader.Visible = false;
        Fpspersonal.Sheets[0].ColumnHeader.DefaultStyle.BackColor = Color.LightSlateGray;
        Fpspersonal.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        Fpspersonal.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        Fpspersonal.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        Fpspersonal.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpspersonal.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpspersonal.Sheets[0].Columns.Default.HorizontalAlign = HorizontalAlign.Left;
        Fpspersonal.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
        Fpspersonal.Sheets[0].Columns.Default.Locked = true;
        Fpspersonal.Sheets[0].Columns.Default.Font.Name = "Book Antiqua";
        Fpspersonal.Sheets[0].Columns.Default.Font.Size = FontUnit.Medium;
        Fpspersonal.Sheets[0].Rows.Default.Font.Name = "Book Antiqua";
        Fpspersonal.Sheets[0].Rows.Default.Font.Size = FontUnit.Medium;
        //Fpspersonal.Sheets[0].DefaultColumnWidth = 80;
        //Fpspersonal.Sheets[0].DefaultRowHeight = 20;
        Fpspersonal.Sheets[0].PageSize = 55;
        Fpspersonal.ColumnHeader.Height = 60;
        Fpspersonal.TitleInfo.Height = 20;
        Fpspersonal.TitleInfo.Font.Name = "Book Antiqua";
        Fpspersonal.TitleInfo.Font.Size = FontUnit.Large;
        Fpspersonal.TitleInfo.Font.Bold = true;
        Fpspersonal.TitleInfo.BackColor = Color.DeepSkyBlue;
        Fpspersonal.Visible = false;
        Fpspersonal.CommandBar.Visible = false;
    }

    public void inittimetable()
    {
        Fpstimetable.Sheets[0].ColumnCount = 0;
        Fpstimetable.Sheets[0].RowCount = 0;
        Fpstimetable.TitleInfo.Visible = true;
        Fpstimetable.TitleInfo.Height = 20;
        Fpstimetable.Sheets[0].ColumnHeader.Visible = false;
        Fpstimetable.RowHeader.Visible = false;
        Fpstimetable.Sheets[0].ColumnHeader.DefaultStyle.BackColor = Color.LightSlateGray;
        Fpstimetable.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        Fpstimetable.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        Fpstimetable.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        Fpstimetable.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpstimetable.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpstimetable.Sheets[0].Columns.Default.HorizontalAlign = HorizontalAlign.Left;
        Fpstimetable.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
        Fpstimetable.Sheets[0].Columns.Default.Locked = true;
        Fpstimetable.Sheets[0].Columns.Default.Font.Name = "Book Antiqua";
        Fpstimetable.Sheets[0].Columns.Default.Font.Size = FontUnit.Medium;
        Fpstimetable.Sheets[0].Rows.Default.Font.Name = "Book Antiqua";
        Fpstimetable.Sheets[0].Rows.Default.Font.Size = FontUnit.Medium;
        //Fpstimetable.Sheets[0].DefaultColumnWidth = 80;
        //Fpstimetable.Sheets[0].DefaultRowHeight = 20;
        Fpstimetable.ColumnHeader.Height = 60;
        Fpstimetable.Sheets[0].PageSize = 1115;
        Fpstimetable.CommandBar.Visible = false;
        Fpstimetable.Visible = false;
        Fpstimetable.TitleInfo.Font.Bold = true;
        Fpstimetable.TitleInfo.Font.Name = "Book Antiqua";
        Fpstimetable.TitleInfo.BackColor = Color.DeepSkyBlue;
        Fpstimetable.TitleInfo.Font.Size = FontUnit.Large;
    }

    public void initlesson()
    {
        Fpslesson.Sheets[0].ColumnCount = 0;
        Fpslesson.Sheets[0].RowCount = 0;
        Fpslesson.TitleInfo.Visible = true;
        Fpslesson.TitleInfo.Height = 20;
        Fpslesson.ColumnHeader.Visible = false;
        Fpslesson.RowHeader.Visible = false;
        Fpslesson.Sheets[0].ColumnHeader.DefaultStyle.BackColor = Color.LightSlateGray;
        Fpslesson.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        Fpslesson.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        Fpslesson.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        Fpslesson.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpslesson.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpslesson.Sheets[0].Columns.Default.HorizontalAlign = HorizontalAlign.Left;
        Fpslesson.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
        Fpslesson.Sheets[0].Columns.Default.Locked = true;
        Fpslesson.Sheets[0].Columns.Default.Font.Name = "Book Antiqua";
        Fpslesson.Sheets[0].Columns.Default.Font.Size = FontUnit.Medium;
        Fpslesson.Sheets[0].Rows.Default.Font.Name = "Book Antiqua";
        Fpslesson.Sheets[0].Rows.Default.Font.Size = FontUnit.Medium;
        //Fpslesson.Sheets[0].DefaultColumnWidth = 80;
        //Fpslesson.Sheets[0].DefaultRowHeight = 20;
        Fpslesson.ColumnHeader.Height = 60;
        Fpslesson.Sheets[0].PageSize = 115;
        Fpslesson.CommandBar.Visible = false;
        Fpslesson.Visible = false;
        Fpslesson.TitleInfo.Height = 20;
        Fpslesson.TitleInfo.Font.Bold = true;
        Fpslesson.TitleInfo.Font.Name = "Book Antiqua";
        Fpslesson.TitleInfo.BackColor = Color.DeepSkyBlue;
        Fpslesson.TitleInfo.Font.Size = FontUnit.Large;
    }

    public void initlibrary()
    {
        Fpslibrary.TitleInfo.Height = 20;
        Fpslibrary.Sheets[0].ColumnCount = 0;
        Fpslibrary.Sheets[0].RowCount = 0;
        Fpslibrary.TitleInfo.Visible = true;
        Fpslibrary.ColumnHeader.Visible = false;
        Fpslibrary.RowHeader.Visible = false;
        Fpslibrary.Sheets[0].ColumnHeader.DefaultStyle.BackColor = Color.LightSlateGray;
        Fpslibrary.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        Fpslibrary.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        Fpslibrary.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        Fpslibrary.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpslibrary.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpslibrary.Sheets[0].Columns.Default.HorizontalAlign = HorizontalAlign.Left;
        Fpslibrary.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
        Fpslibrary.Sheets[0].Columns.Default.Locked = true;
        Fpslibrary.Sheets[0].Columns.Default.Font.Name = "Book Antiqua";
        Fpslibrary.Sheets[0].Columns.Default.Font.Size = FontUnit.Medium;
        Fpslibrary.Sheets[0].Rows.Default.Font.Name = "Book Antiqua";
        Fpslibrary.Sheets[0].Rows.Default.Font.Size = FontUnit.Medium;
        //Fpslibrary.Sheets[0].DefaultColumnWidth = 80;
        //Fpslibrary.Sheets[0].DefaultRowHeight = 20;
        Fpslibrary.ColumnHeader.Height = 60;
        Fpslibrary.Sheets[0].PageSize = 1115;
        Fpslibrary.Visible = false;
        Fpslibrary.TitleInfo.Font.Bold = true;
        Fpslibrary.TitleInfo.Font.Name = "Book Antiqua";
        Fpslibrary.TitleInfo.Font.Size = FontUnit.Large;
        Fpslibrary.TitleInfo.BackColor = Color.DeepSkyBlue;
        Fpslibrary.CommandBar.Visible = false;
    }

    public void initgeneral()
    {
        Fpsgeneral.Sheets[0].ColumnCount = 0;
        Fpsgeneral.Sheets[0].RowCount = 0;
        Fpsgeneral.TitleInfo.Visible = true;
        Fpsgeneral.ColumnHeader.Visible = true;
        Fpsgeneral.RowHeader.Visible = false;
        Fpsgeneral.TitleInfo.Height = 20;
        Fpsgeneral.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        Fpsgeneral.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        Fpsgeneral.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        Fpsgeneral.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpsgeneral.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpsgeneral.Sheets[0].Columns.Default.HorizontalAlign = HorizontalAlign.Left;
        Fpsgeneral.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
        Fpsgeneral.Sheets[0].Columns.Default.Locked = true;
        Fpsgeneral.Sheets[0].Columns.Default.Font.Name = "Book Antiqua";
        Fpsgeneral.Sheets[0].Columns.Default.Font.Name = "Book Antiqua";
        Fpsgeneral.Sheets[0].Rows.Default.Font.Size = FontUnit.Medium;
        Fpsgeneral.Sheets[0].Rows.Default.Font.Size = FontUnit.Medium;
        //Fpsgeneral.Sheets[0].DefaultColumnWidth = 80;
        //Fpsgeneral.Sheets[0].DefaultRowHeight = 20;
        Fpsgeneral.ColumnHeader.Height = 60;
        Fpsgeneral.Sheets[0].PageSize = 1115;
        Fpsgeneral.CommandBar.Visible = false;
        Fpsgeneral.TitleInfo.Font.Bold = true;
        Fpsgeneral.TitleInfo.Font.Name = "Book Antiqua";
        Fpsgeneral.TitleInfo.Font.Size = FontUnit.Large;
        Fpsgeneral.TitleInfo.BackColor = Color.DeepSkyBlue;
        Fpsgeneral.Visible = false;
    }

    public void initfee()
    {
        Fpspreadfee.Sheets[0].ColumnCount = 0;
        Fpspreadfee.Sheets[0].RowCount = 0;
        Fpspreadfee.TitleInfo.Visible = true;
        Fpspreadfee.ColumnHeader.Visible = true;
        Fpspreadfee.RowHeader.Visible = false;
        //  Fpspreadfee.TitleInfo.Height = 20;
        Fpspreadfee.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        Fpspreadfee.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        Fpspreadfee.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        Fpspreadfee.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpspreadfee.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpspreadfee.Sheets[0].Columns.Default.HorizontalAlign = HorizontalAlign.Left;
        Fpspreadfee.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
        Fpspreadfee.Sheets[0].Columns.Default.Locked = true;
        Fpspreadfee.Sheets[0].Columns.Default.Font.Name = "Book Antiqua";
        Fpspreadfee.Sheets[0].Columns.Default.Font.Name = "Book Antiqua";
        Fpspreadfee.Sheets[0].Rows.Default.Font.Size = FontUnit.Medium;
        Fpspreadfee.Sheets[0].Rows.Default.Font.Size = FontUnit.Medium;
        //Fpsgeneral.Sheets[0].DefaultColumnWidth = 80;
        //Fpsgeneral.Sheets[0].DefaultRowHeight = 20;
        Fpspreadfee.ColumnHeader.Height = 30;
        Fpspreadfee.Sheets[0].PageSize = 1115;
        Fpspreadfee.CommandBar.Visible = false;
        Fpspreadfee.TitleInfo.Font.Bold = true;
        Fpspreadfee.TitleInfo.Font.Name = "Book Antiqua";
        Fpspreadfee.TitleInfo.Font.Size = FontUnit.Large;
        Fpspreadfee.TitleInfo.BackColor = Color.DeepSkyBlue;
        Fpspreadfee.Visible = false;
    }

    public void initmarks()
    {
        Fpsmarks.Sheets[0].ColumnCount = 0;
        Fpsmarks.Sheets[0].RowCount = 0;
        Fpsmarks.TitleInfo.Visible = true;
        Fpsmarks.ColumnHeader.Visible = false;
        Fpsmarks.RowHeader.Visible = false;
        Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.BackColor = Color.LightSlateGray;
        Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
        Fpsmarks.Sheets[0].Columns.Default.HorizontalAlign = HorizontalAlign.Left;
        Fpsmarks.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
        Fpsmarks.Sheets[0].Columns.Default.Locked = true;
        Fpsmarks.Sheets[0].Columns.Default.Font.Name = "Book Antiqua";
        Fpsmarks.Sheets[0].Columns.Default.Font.Size = FontUnit.Medium;
        Fpsmarks.Sheets[0].Rows.Default.Font.Name = "Book Antiqua";
        Fpsmarks.Sheets[0].Rows.Default.Font.Size = FontUnit.Medium;
        //Fpsmarks.Sheets[0].DefaultColumnWidth = 80;
        //Fpsmarks.Sheets[0].DefaultRowHeight = 20;
        Fpsmarks.ColumnHeader.Height = 60;
        Fpsmarks.Sheets[0].PageSize = 1115;
        Fpsmarks.CommandBar.Visible = false;
        Fpsmarks.Visible = false;
        Fpsmarks.TitleInfo.Height = 20;
        Fpsmarks.TitleInfo.Font.Bold = true;
        Fpsmarks.TitleInfo.Font.Name = "Book Antiqua";
        Fpsmarks.TitleInfo.Font.Size = FontUnit.Large;
        Fpsmarks.TitleInfo.BackColor = Color.DeepSkyBlue;
        Fpsmarks.ColumnHeader.Height = 60;
    }

    protected void Fpspersonal_SelectedIndexChanged(Object sender, EventArgs e)
    {
    }

    protected void ImageButtonfeedback_Click(object sender, EventArgs e)
    {
        divHostelInfo.Visible = false;
        Fpspreadfee.Visible = false;
        lblfeestatus.Visible = false;
        //radScrType.Visible = false;
        btnsTrans.Visible = false;
        tblSelScr.Visible = false;
        feedtxt.Visible = false;
        feedbtn.Visible = false;
        feedlbl.Visible = true;
        questiondiv.Visible = true;
        // string Reg_no = txtuname.Text;
        string selqry;
        selqry = " select r.degree_code,r.Current_Semester ,r.Sections ,r.Batch_Year  from Registration r, applyn a where a.app_no =r.App_No and r.Reg_No ='" + Reg_no + "'";
        ds = d2.select_method_wo_parameter(selqry, "Text");
        if (ds.Tables.Count > 0)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                // div1.Visible = false;
                questiondiv.Visible = true;
                acd();
                //  generel();
            }
            else
            {
                imgdiv2.Visible = true;
                lbl_alert1.Text = "Registration Numbers Not valid Try Again";
                FpSpread2.Visible = false;
                //div1.Visible = false;
                // div1.Visible = true;
                //feedback.Visible = false;
            }
        }
        else
        {
            imgdiv2.Visible = true;
            lbl_alert1.Text = "registration.No Not valid";
            FpSpread1.Visible = false;
            //div1.Visible = false;
        }
        //txt_Rg_No.Text="";
        //txt_Dob.Text  = string.Empty;
    }

    public void online()
    {
        try
        {
            int activerow = FpSpread4.ActiveSheetView.ActiveRow;
            int activecol = FpSpread4.ActiveSheetView.ActiveColumn;
            string feedbackpk = FpSpread4.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Tag.ToString();
            string appno1 = d2.GetFunction("select r.App_No from Registration r, applyn a where a.app_no =r.App_No and r.Reg_No ='" + Reg_no + "'");
            string enterdregno = GetFunction("select App_No from CO_StudFeedBack where App_No= '" + appno1 + "' and FeedBackMasterFK='" + feedbackpk + "'");
            if (enterdregno != "")
            {
                imgdiv2.Visible = true;
                lbl_alert1.Text = "Sorry You Already Attend this FeedBack Test";
                FpSpread2.Visible = false;
                rptprint1.Visible = false;
                return;
            }
            string type = string.Empty;
            if (rb_Acad.Checked == true)
            {
                type = "1";
            }
            else if (rb_Gend.Checked == true)
            {
                type = "2";
            }
            btn_save_fb.Visible = true;
            //   string Reg_no = txtuname.Text.ToString();
            FpSpread2.Sheets[0].RowCount = 0;
            FpSpread2.Sheets[0].ColumnCount = 0;
            FpSpread2.CommandBar.Visible = false;
            FpSpread2.Sheets[0].AutoPostBack = false;
            FpSpread2.Sheets[0].ColumnHeader.RowCount = 2;
            FpSpread2.Sheets[0].RowHeader.Visible = false;
            FpSpread2.Sheets[0].ColumnCount = 3;
            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
            darkstyle.ForeColor = Color.White;
            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
            FpSpread2.Visible = true;
            FarPoint.Web.Spread.ComboBoxCellType cmb = new FarPoint.Web.Spread.ComboBoxCellType();
            cmb.UseValue = true;
            cmb.ShowButton = true;
            cmb.AutoPostBack = false;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
            FpSpread2.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Text = " Evaluation name";
            //FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            //FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            //FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            //FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Description";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 0, 2, 1);
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 1, 2, 1);
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 2, 2, 1);
            FpSpread2.Sheets[0].ColumnHeader.Columns[0].Width = 52;
            FpSpread2.Sheets[0].ColumnHeader.Columns[1].Width = 472;
            // FpSpread2.Sheets[0].ColumnHeader.Columns[2].Width = 422;
            string selqry = string.Empty;
            string question = string.Empty;
            DataView dv = new DataView();
            DataView dv_hd = new DataView();
            selqry = "  select r.degree_code,r.Current_Semester ,r.Sections ,r.Batch_Year,r.college_Code ,r.Stud_Name,r.App_no  from Registration r, applyn a where a.app_no =r.App_No and r.Reg_No ='" + Reg_no + "'";
            selqry += "select isnull(Acadamic_Isgeneral,0)Acadamic_Isgeneral,isnull(IsType_Individual,0)IsType_Individual  from CO_FeedBackMaster where InclueCommon='0' and FeedBackMasterPK='" + feedbackpk + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables != null && ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0 && ds.Tables[1].Rows.Count > 0)
                {
                    ViewState["Acadamic_Isgeneral"] = null;//barath 17.2.17
                    string Acadamic_Isgeneral = ds.Tables[1].Rows[0]["Acadamic_Isgeneral"].ToString();
                    string Optiontypefilter = ds.Tables[1].Rows[0]["IsType_Individual"].ToString();
                    if (Acadamic_Isgeneral.Trim() == "0" || Acadamic_Isgeneral.Trim() == "False")
                    {
                        #region acadamic
                        string Deg_code = ds.Tables[0].Rows[0]["degree_code"].ToString();
                        string Batch = ds.Tables[0].Rows[0]["Batch_Year"].ToString();
                        string Semester = ds.Tables[0].Rows[0]["Current_Semester"].ToString();
                        string collegecode = Convert.ToString(ds.Tables[0].Rows[0]["college_Code"]);
                        string section = ds.Tables[0].Rows[0]["Sections"].ToString();
                        App_no.Text = ds.Tables[0].Rows[0]["App_no"].ToString();
                        question = "select  qm.HeaderCode, (select TextVal from TextValTable where TextCode= HeaderCode) as HeaderName,qm.Question,qm.QuestionMasterPK,FeedBackName, FeedBackMasterPK ,isnull(Acadamic_Isgeneral,0)Acadamic_Isgeneral,isnull(IsType_Individual,0)IsType_Individual,InclueCommon from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm where  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK and DegreeCode ='" + Deg_code + "' and FeedBackType ='" + type + "' and Batch_Year ='" + Batch + "' and semester ='" + Semester + "' and FeedBackMasterPK='" + feedbackpk + "' and isnull(InclueCommon,0)='0' ";
                        if (section != "")
                        {
                            question = question + "and Section= '" + section + "'";
                        }
                        if (Optiontypefilter.Trim() == "1" || Optiontypefilter.Trim() == "True")
                        {
                            question = question + " select distinct m.MarkMasterPK,m.MarkType,qt.QuestionmasterFK,qt.FeedbackFk from Co_Question_Type qt,CO_MarkMaster m,CO_QuestionMaster q where qt.MarkMasterFK=m.MarkMasterPK and qt.QuestionmasterFK=q.QuestionMasterPK and qt.HeaderCode=q.HeaderCode and m.CollegeCode=q.CollegeCode and q.CollegeCode='" + collegecode + "'";
                        }
                        else
                        {
                            question = question + " select distinct MarkType,MarkMasterPK   from CO_MarkMaster where CollegeCode ='" + collegecode + "'";
                        }
                        question = question + " select c.subject_no,subject_code,subject_name from Registration r,subjectChooser c ,subject s,sub_sem su where r.Roll_No = c.roll_no and r.Current_Semester = c.semester and c.subject_no = s.subject_no and Current_Semester = '" + Semester + "' and s.subType_no =su.subType_no and  r.Reg_No = '" + Reg_no + "'";
                        question = question + "  select distinct ss.staff_code,s.staff_name,ss.subject_no   from staff_selector ss,staffmaster s where ss.staff_code =s.staff_code and batch_year = " + Batch + " ";
                        if (section != "")
                        {
                            question = question + " and Sections= '" + section + "'";
                        }
                        question = question + "select  FeedBackMasterPK, FeedBackName,Subject_Type   from CO_FeedBackMaster where  DegreeCode ='" + Deg_code + "' and FeedBackType ='" + type + "'and Batch_Year ='" + Batch + "' and semester ='" + Semester + "' and FeedBackMasterPK='" + feedbackpk + "'";
                        if (section != "")
                        {
                            question = question + "and Section= '" + section + "'";
                        }
                        question = question + "order by StartDate desc";
                        question = question + "  select distinct  qm.HeaderCode, (select TextVal from TextValTable where TextCode= HeaderCode) as HeaderName  from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm where  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK and DegreeCode ='" + Deg_code + "' and FeedBackType ='" + type + "' and Batch_Year ='" + Batch + "' and semester ='" + Semester + "' and FeedBackMasterPK='" + feedbackpk + "' ";
                        if (section != "")
                        {
                            question = question + "and Section= '" + section + "'";
                        }
                        ds = d2.select_method_wo_parameter(question, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            string st_type = string.Empty;
                            string sub_type = string.Empty;
                            if (ds.Tables[4].Rows.Count > 0)
                            {
                                lbl_Name.Text = ds.Tables[4].Rows[0]["FeedBackName"].ToString();
                                st_type = ds.Tables[4].Rows[0]["Subject_Type"].ToString();
                                string[] split = st_type.Split(',');
                                for (int i = 0; i < split.Length; i++)
                                {
                                    if (sub_type == "")
                                    {
                                        sub_type = split[i];
                                    }
                                    else
                                    {
                                        sub_type += "','" + split[i];
                                    }
                                }
                            }
                            lbl_Name.Visible = true;
                            string subquery = " select c.subject_no,subject_code,subject_name from Registration r,subjectChooser c ,subject s,sub_sem su where r.Roll_No = c.roll_no and r.Current_Semester = c.semester and c.subject_no = s.subject_no and Current_Semester = '" + Semester + "' and s.subType_no =su.subType_no and su.subject_type in ('" + sub_type + "') and  r.Reg_No = '" + Reg_no + "'";
                            if (section != "")
                            {
                                subquery = subquery + " and r.Sections= '" + section + "'";
                            }
                            ds_sub = d2.select_method_wo_parameter(subquery, "Text");
                            if (ds.Tables[0].Rows.Count > 0 && ds.Tables[1].Rows.Count > 0 && ds_sub.Tables[0].Rows.Count > 0 && ds.Tables[3].Rows.Count > 0)
                            {
                                if (ds_sub.Tables[0].Rows.Count > 0)
                                {
                                    for (int row = 0; row < ds_sub.Tables[0].Rows.Count; row++)
                                    {
                                        int col = 0;
                                        if (ds.Tables[3].Rows.Count > 0)
                                        {
                                            ds.Tables[3].DefaultView.RowFilter = "subject_no='" + Convert.ToString(ds_sub.Tables[0].Rows[row]["subject_no"]) + "'";
                                            dv = ds.Tables[3].DefaultView;
                                            if (dv.Count > 0)
                                            {
                                                FpSpread2.Sheets[0].ColumnCount++;
                                                col = FpSpread2.Sheets[0].ColumnCount - 1;
                                                FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].Text = Convert.ToString(ds_sub.Tables[0].Rows[row]["subject_name"]);
                                                FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].Tag = Convert.ToString(ds_sub.Tables[0].Rows[row]["subject_no"]);
                                                FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].Font.Bold = true;
                                                FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                                                FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                                                FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                                for (int d = 0; d < dv.Count; d++)
                                                {
                                                    if (d == 0)
                                                    {
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Text = Convert.ToString(dv[d]["staff_name"]);
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Tag = Convert.ToString(dv[d]["staff_code"]);
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Font.Bold = true;
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                                    }
                                                    else
                                                    {
                                                        FpSpread2.Sheets[0].ColumnCount++;
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Text = Convert.ToString(dv[d]["staff_name"]);
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Tag = Convert.ToString(dv[d]["staff_code"]);
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Font.Bold = true;
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                                        FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].Tag = Convert.ToString(ds_sub.Tables[0].Rows[row]["subject_no"]);
                                                    }
                                                }
                                                // FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, col, 1, dv.Count);
                                            }
                                        }
                                    }
                                }
                                //string[] arraysize = new string[ds.Tables[1].Rows.Count + 1];
                                //arraysize[0] = Convert.ToString("Select");
                                //for (int jk = 0; jk < ds.Tables[1].Rows.Count; jk++)
                                //{
                                //    arraysize[jk + 1] = Convert.ToString(ds.Tables[1].Rows[jk]["MarkType"]);
                                //}
                                //FarPoint.Web.Spread.ComboBoxCellType cb = new FarPoint.Web.Spread.ComboBoxCellType(arraysize);
                                FarPoint.Web.Spread.ComboBoxCellType cb = new FarPoint.Web.Spread.ComboBoxCellType();
                                cb.UseValue = true;
                                cb.ShowButton = true;
                                int sno = 0;
                                DataView filteroption_dv = new DataView();
                                for (int i = 0; i < ds.Tables[5].Rows.Count; i++)
                                {
                                    FpSpread2.Sheets[0].RowCount++;
                                    // leadgername = ds.Tables[0].Rows[i]["header_id"].ToString();
                                    FpSpread2.Sheets[0].SpanModel.Add(FpSpread2.Sheets[0].RowCount - 1, 0, 1, FpSpread2.Sheets[0].ColumnCount);
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Tag = ds.Tables[5].Rows[i]["HeaderCode"].ToString();
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Text = ds.Tables[5].Rows[i]["HeaderName"].ToString();
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Locked = true;
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        ds.Tables[0].DefaultView.RowFilter = "HeaderCode='" + ds.Tables[5].Rows[i]["HeaderCode"].ToString() + "'";
                                        dv_hd = ds.Tables[0].DefaultView;
                                        if (dv_hd.Count > 0)
                                        {
                                            for (int rs = 0; rs < dv_hd.Count; rs++)
                                            {
                                                FpSpread2.Sheets[0].RowCount++;
                                                sno++;
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno); FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Tag = dv_hd[rs]["FeedBackMasterPK"].ToString();
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].Tag = dv_hd[rs]["QuestionMasterPK"].ToString();
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Text = dv_hd[rs]["Question"].ToString();
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Locked = true;
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Locked = true;
                                                //barath 16.02.17
                                                if (Optiontypefilter.Trim() == "1" || Optiontypefilter.Trim() == "True")
                                                {
                                                    ds.Tables[1].DefaultView.RowFilter = " QuestionmasterFK='" + dv_hd[rs]["QuestionMasterPK"].ToString() + "' and FeedbackFk='" + dv_hd[rs]["FeedBackMasterPK"].ToString() + "'";
                                                    filteroption_dv = ds.Tables[1].DefaultView;
                                                    cb = new FarPoint.Web.Spread.ComboBoxCellType();
                                                    cb.DataSource = filteroption_dv.ToTable();
                                                    cb.DataTextField = "MarkType";
                                                    cb.DataValueField = "MarkType";
                                                }
                                                else
                                                {
                                                    cb = new FarPoint.Web.Spread.ComboBoxCellType();
                                                    cb.DataSource = ds.Tables[1];
                                                    cb.DataTextField = "MarkType";
                                                    cb.DataValueField = "MarkType";
                                                }
                                                for (int r = 3; r < FpSpread2.Sheets[0].ColumnCount; r++)
                                                {
                                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, r].CellType = cb;
                                                    FpSpread2.Sheets[0].Columns[r].HorizontalAlign = HorizontalAlign.Center;
                                                }
                                            }
                                        }
                                    }
                                    //FpSpread2.Sheets[0].Columns[0].Locked = true;
                                    //FpSpread2.Sheets[0].Columns[1].Locked = true;
                                    FpSpread2.Sheets[0].PageSize = FpSpread2.Sheets[0].RowCount;
                                    FpSpread2.Sheets[0].Columns[2].Visible = false;
                                    FpSpread2.Width = 800;
                                    FpSpread2.Height = 500;
                                    FpSpread2.SaveChanges();
                                    btn_save_fb.Visible = true;
                                }
                            }
                            else
                            {
                                imgdiv2.Visible = true;
                                lbl_alert1.Text = "No Records Found";
                                btn_save_fb.Visible = false;
                                FpSpread2.Visible = false;
                            }
                        }
                        #endregion
                    }
                    if (Acadamic_Isgeneral.Trim() == "1" || Acadamic_Isgeneral.Trim() == "True")
                    {
                        #region Acadamic_Isgeneral
                        //DataView dv_hd = new DataView();
                        ViewState["Acadamic_Isgeneral"] = "1";
                        hat.Clear();
                        string Withoutquestiontype = "0";
                        if (Optiontypefilter.Trim() == "1" || Optiontypefilter.Trim() == "True")
                            Withoutquestiontype = "1";
                        hat.Add("FeedbackFK", feedbackpk);
                        hat.Add("CollegeCode", collegecode1);
                        hat.Add("Withoutquestiontypematch", Withoutquestiontype);//barath change procedure
                        ds.Reset();
                        ds.Clear();
                        ds = d2.select_method("Feedback_acadamic_general", hat, "sp");
                        if (ds.Tables != null && ds.Tables.Count > 0)
                        {
                            if (ds.Tables[0].Rows.Count > 0 && ds.Tables[1].Rows.Count > 0 && ds.Tables[2].Rows.Count > 0 && ds.Tables[3].Rows.Count > 0)
                            {
                                lbl_Name.Text = ds.Tables[2].Rows[0]["FeedBackName"].ToString();
                                lbl_Name.Visible = true;
                                FpSpread2.Columns[2].Visible = false;
                                FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Question";
                                for (int row = 0; row < ds.Tables[1].Rows.Count; row++)
                                {
                                    FpSpread2.Sheets[0].ColumnCount++;
                                    FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, FpSpread2.Sheets[0].ColumnCount - 1, 2, 1);
                                    FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].Text = Convert.ToString(ds.Tables[1].Rows[row]["MarkType"]);
                                    FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].Tag = Convert.ToString(ds.Tables[1].Rows[row]["MarkMasterPK"]);
                                    FpSpread2.Sheets[0].Columns[FpSpread2.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                }
                                FarPoint.Web.Spread.CheckBoxCellType chk = new FarPoint.Web.Spread.CheckBoxCellType();
                                chk.AutoPostBack = true;
                                int sno = 0; string headername = string.Empty;
                                for (int i = 0; i < ds.Tables[3].Rows.Count; i++)
                                {
                                    if (headername.Trim() != ds.Tables[3].Rows[i]["HeaderCode"].ToString())
                                    {
                                        FpSpread2.Sheets[0].RowCount++;
                                        FpSpread2.Sheets[0].SpanModel.Add(FpSpread2.Sheets[0].RowCount - 1, 0, 1, FpSpread2.Sheets[0].ColumnCount);
                                        //FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Tag = ds.Tables[3].Rows[i]["HeaderCode"].ToString();
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Text = ds.Tables[3].Rows[i]["HeaderName"].ToString();
                                        headername = ds.Tables[3].Rows[i]["HeaderCode"].ToString();
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Locked = true;
                                    }
                                    ds.Tables[0].DefaultView.RowFilter = " HeaderCode='" + ds.Tables[3].Rows[i]["HeaderCode"].ToString() + "' and QuestionMasterPK='" + ds.Tables[3].Rows[i]["QuestionMasterPK"].ToString() + "'";
                                    dv_hd = ds.Tables[0].DefaultView; string prewquestionmasterfk = string.Empty; bool checklock = false;
                                    if (dv_hd.Count > 0)
                                    {
                                        for (int rs = 0; rs < dv_hd.Count; rs++)
                                        {
                                            if (prewquestionmasterfk.Trim() != dv_hd[rs]["QuestionMasterPK"].ToString())
                                            {
                                                FpSpread2.Sheets[0].RowCount++;
                                                sno++;
                                                checklock = true;
                                            }
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Tag = dv_hd[rs]["FeedBackMasterPK"].ToString();
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Note = dv_hd[rs]["FeedBackMasterPK"].ToString();
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Text = dv_hd[rs]["Question"].ToString();
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Tag = dv_hd[rs]["QuestionMasterPK"].ToString();
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Locked = true;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Locked = true;
                                            prewquestionmasterfk = dv_hd[rs]["QuestionMasterPK"].ToString();
                                            //optionfilter
                                            if (Optiontypefilter.Trim() == "1" || Optiontypefilter.Trim() == "True")
                                            {
                                                for (int r = 3; r < FpSpread2.Sheets[0].ColumnHeader.Columns.Count; r++)
                                                {
                                                    string markfk = Convert.ToString(FpSpread2.Sheets[0].ColumnHeader.Cells[0, r].Tag);
                                                    if (Convert.ToString(dv_hd[rs]["MarkMasterFK"]) == markfk)
                                                    {
                                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, r].Locked = false;
                                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, r].CellType = chk;
                                                    }
                                                    else
                                                    {
                                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, r].CellType = chk;
                                                        if (checklock == true)
                                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, r].Locked = true;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                for (int r = 3; r < FpSpread2.Sheets[0].ColumnHeader.Columns.Count; r++)
                                                {
                                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, r].Locked = false;
                                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, r].CellType = chk;
                                                }
                                            }
                                            checklock = false;
                                        }
                                    }
                                }
                                FpSpread2.Sheets[0].PageSize = FpSpread2.Sheets[0].RowCount;
                                FpSpread2.Width = 800;
                                FpSpread2.Height = 500;
                                btn_save.Visible = true;
                                FpSpread2.Visible = true;
                                FpSpread2.SaveChanges();
                            }
                            else
                            {
                                imgdiv2.Visible = true;
                                lbl_alert1.Text = "No Records Found";
                                FpSpread2.Visible = false;
                                btn_save.Visible = false;
                            }
                        }
                        else
                        {
                            imgdiv2.Visible = true;
                            lbl_alert1.Text = "No Records Found";
                            FpSpread2.Visible = false;
                            btn_save.Visible = false;
                        }
                        #endregion
                    }
                }
                else
                {
                    imgdiv2.Visible = true;
                    lbl_alert1.Text = "No Records Found";
                    FpSpread2.Visible = false;
                    rptprint1.Visible = false;
                }
            }
            else
            {
                lbl_alert1.Text = "No Records Found";
                FpSpread2.Visible = false;
                rptprint1.Visible = false;
            }
        }
        catch (Exception ex)
        {
            lbl_alert1.Visible = true;
            lbl_alert1.Text = "No Records Found";
            FpSpread2.Visible = false;
            rptprint1.Visible = false;
        }
        //for (int i = 0; i < FpSpread2.Sheets[0].Columns.Count - 1; i++)
        //{
        //    FpSpread2.Sheets[0].Columns[i].Locked = false;
        //}
    }

    public void generel()
    {
        try
        {
            int activerow = FpSpread4.ActiveSheetView.ActiveRow;
            int activecol = FpSpread4.ActiveSheetView.ActiveColumn;
            string feedbackpk = FpSpread4.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Tag.ToString();
            string type = string.Empty;
            if (rb_Acad.Checked == true)
            {
                type = "1";
            }
            else if (rb_Gend.Checked == true)
            {
                type = "2";
            }
            btn_save_fb.Visible = true;
            // string Reg_no = txtuname.Text.ToString();
            FpSpread2.Sheets[0].RowCount = 0;
            FpSpread2.Sheets[0].ColumnCount = 0;
            FpSpread2.CommandBar.Visible = false;
            FpSpread2.Sheets[0].AutoPostBack = false;
            FpSpread2.Sheets[0].ColumnHeader.RowCount = 2;
            FpSpread2.Sheets[0].RowHeader.Visible = false;
            FpSpread2.Sheets[0].ColumnCount = 3;
            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
            darkstyle.ForeColor = Color.White;
            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
            FpSpread2.Visible = true;
            FarPoint.Web.Spread.ComboBoxCellType cmb = new FarPoint.Web.Spread.ComboBoxCellType();
            cmb.AutoPostBack = true;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
            FpSpread2.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Description";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread2.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Questions";
            //FpSpread2.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            //FpSpread2.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            //FpSpread2.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
            //FpSpread2.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 0, 2, 1);
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 1, 2, 1);
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 2, 2, 1);
            FpSpread2.Sheets[0].ColumnHeader.Columns[0].Width = 82;
            FpSpread2.Sheets[0].ColumnHeader.Columns[1].Width = 317;
            FpSpread2.Sheets[0].ColumnHeader.Columns[2].Width = 229;
            string selqry = string.Empty;
            string question = string.Empty;
            DataView dv = new DataView();
            DataView dv_hd = new DataView();
            //question = "select  qm.HeaderCode, (select TextVal from TextValTable where TextCode= HeaderCode) as HeaderName,qm.Question,qm.QuestionMasterPK,FeedBackMasterPK  from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm where  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK and FeedBackType ='" + type + "'  ";
            question = "select  qm.HeaderCode, (select TextVal from TextValTable where TextCode= HeaderCode) as HeaderName,qm.Question,qm.QuestionMasterPK,FeedBackMasterPK from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm where  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK  and FeedBackType ='2' and FeedBackMasterPK in (select top 1 FeedBackMasterPK  from CO_FeedBackMaster where FeedBackType ='" + type + "'and FeedBackMasterPK='" + feedbackpk + "' order by StartDate desc)";
            question = question + " select distinct MarkType, MarkMasterPK   from CO_MarkMaster where CollegeCode ='" + collegecode1 + "'";
            question = question + " select FeedBackMasterPK, FeedBackName, CONVERT(varchar(10), StartDate,103) as StartDate,CONVERT(varchar(10), EndDate,103) as EndDate   from CO_FeedBackMaster where FeedBackType ='" + type + "' and FeedBackMasterPK='" + feedbackpk + "' order by StartDate desc";
            question = question + "  select distinct qm.HeaderCode, (select TextVal from TextValTable where TextCode= HeaderCode) as HeaderName from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm where  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK  and FeedBackType ='2' and FeedBackMasterPK in (select top 1 FeedBackMasterPK  from CO_FeedBackMaster where FeedBackType ='" + type + "' and FeedBackMasterPK='" + feedbackpk + "' order by StartDate desc)";
            ds = d2.select_method_wo_parameter(question, "Text");
            if (ds.Tables[2].Rows.Count > 0)
            {
                lbl_Name.Text = ds.Tables[2].Rows[0]["FeedBackName"].ToString();
            }
            lbl_Name.Visible = true;
            if (ds.Tables[0].Rows.Count > 0 && ds.Tables[1].Rows.Count > 0)
            {
                for (int row = 0; row < ds.Tables[1].Rows.Count; row++)
                {
                    FpSpread2.Sheets[0].ColumnCount++;
                    FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, FpSpread2.Sheets[0].ColumnCount - 1, 2, 1);
                    FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].Text = Convert.ToString(ds.Tables[1].Rows[row]["MarkType"]);
                    FpSpread2.Sheets[0].ColumnHeader.Cells[1, FpSpread2.Sheets[0].ColumnCount - 1].Tag = Convert.ToString(ds.Tables[1].Rows[row]["MarkMasterPK"]);
                    FpSpread2.Sheets[0].Columns[FpSpread2.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                    FpSpread2.Sheets[0].ColumnHeader.Cells[0, FpSpread2.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                }
                FarPoint.Web.Spread.CheckBoxCellType chk = new FarPoint.Web.Spread.CheckBoxCellType();
                chk.AutoPostBack = true;
                int sno = 0;
                for (int i = 0; i < ds.Tables[3].Rows.Count; i++)
                {
                    FpSpread2.Sheets[0].RowCount++;
                    FpSpread2.Sheets[0].SpanModel.Add(FpSpread2.Sheets[0].RowCount - 1, 0, 1, FpSpread2.Sheets[0].ColumnCount);
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Tag = ds.Tables[3].Rows[i]["HeaderCode"].ToString();
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Text = ds.Tables[3].Rows[i]["HeaderName"].ToString();
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        ds.Tables[0].DefaultView.RowFilter = "HeaderCode='" + ds.Tables[3].Rows[i]["HeaderCode"].ToString() + "'";
                        dv_hd = ds.Tables[0].DefaultView;
                        if (dv_hd.Count > 0)
                        {
                            for (int rs = 0; rs < dv_hd.Count; rs++)
                            {
                                FpSpread2.Sheets[0].RowCount++;
                                sno++;
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Tag = dv_hd[rs]["FeedBackMasterPK"].ToString();
                                //FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Tag = ds.Tables[0].Rows[rs]["FeedBackMasterPK"].ToString();
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Text = dv_hd[rs]["Question"].ToString();
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].Tag = dv_hd[rs]["QuestionMasterPK"].ToString();
                                //FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].Tag = ds.Tables[0].Rows[rs]["QuestionMasterPK"].ToString();
                                for (int r = 3; r < FpSpread2.Sheets[0].ColumnCount; r++)
                                {
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, r].CellType = chk;
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, r].Locked = false;
                                }
                            }
                        }
                    }
                }
                FpSpread2.Sheets[0].PageSize = FpSpread2.Sheets[0].RowCount;
                FpSpread2.Width = 800;
                FpSpread2.Height = 500;
                FpSpread2.SaveChanges();
            }
            else
            {
                btn_save_fb.Visible = false;
                imgdiv2.Visible = true;
                lbl_alert1.Text = "No Records Found";
                FpSpread2.Visible = false;
            }
        }
        catch
        {
            lbl_alert1.Visible = true;
            lbl_alert1.Text = "No Records Found";
            btn_save_fb.Visible = false;
            imgdiv2.Visible = true;
            FpSpread2.Visible = false;
        }
        FpSpread2.Sheets[0].Columns[2].Visible = false;
    }

    public void acd()
    {
        try
        {
            lbl_Name.Visible = false;
            FpSpread2.Visible = false;
            btn_save_fb.Visible = false;
            string type = string.Empty;
            if (rb_Acad.Checked == true)
            {
                type = "1";
            }
            else if (rb_Gend.Checked == true)
            {
                type = "2";
            }
            btn_save_fb.Visible = false;
            string selqry = string.Empty;
            string question = string.Empty;
            DataView dv = new DataView();
            DataView dv_hd = new DataView();
            selqry = "  select r.degree_code,r.Current_Semester ,r.Sections ,r.Batch_Year,r.college_Code ,r.Stud_Name,r.App_no  from Registration r, applyn a where a.app_no =r.App_No and r.Reg_No ='" + Reg_no + "'";
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)//barath 17.2.17
                {
                    string Deg_code = ds.Tables[0].Rows[0]["degree_code"].ToString();
                    string Batch = ds.Tables[0].Rows[0]["Batch_Year"].ToString();
                    string Semester = ds.Tables[0].Rows[0]["Current_Semester"].ToString();
                    string collegecode = Convert.ToString(ds.Tables[0].Rows[0]["college_Code"]);
                    string section = ds.Tables[0].Rows[0]["Sections"].ToString();
                    App_no.Text = ds.Tables[0].Rows[0]["App_no"].ToString();
                    question = "select  FeedBackMasterPK, FeedBackName,CONVERT(varchar(10), StartDate,103) as StartDate,CONVERT(varchar(10), EndDate,103) as EndDate   from CO_FeedBackMaster where  DegreeCode ='" + Deg_code + "' and FeedBackType ='" + type + "'and Batch_Year ='" + Batch + "' and semester ='" + Semester + "' and StartDate <='" + DateTime.Now.Date.ToString("MM/dd/yyyy") + "'  and EndDate >='" + DateTime.Now.Date.ToString("MM/dd/yyyy") + "' ";
                    if (section != "")
                    {
                        question = question + "and Section= '" + section + "'";
                    }
                    question = question + "order by StartDate desc";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(question, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        lbl_Name.Text = ds.Tables[0].Rows[0]["FeedBackName"].ToString();
                    }
                    btn_save.Visible = false;
                    FpSpread4.Sheets[0].RowCount = 0;
                    FpSpread4.Sheets[0].ColumnCount = 0;
                    FpSpread4.CommandBar.Visible = false;
                    FpSpread4.Sheets[0].AutoPostBack = true;
                    FpSpread4.Sheets[0].ColumnHeader.RowCount = 1;
                    FpSpread4.Sheets[0].RowHeader.Visible = false;
                    FpSpread4.Sheets[0].ColumnCount = 4;
                    FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                    darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
                    darkstyle.ForeColor = Color.White;
                    FpSpread4.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
                    FpSpread4.Visible = true;
                    FpSpread4.Width = 785;
                    FpSpread4.Height = 172;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                    FpSpread4.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 1].Text = "FeedBackName";
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 2].Text = "StartDate";
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 3].Text = "End Date";
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                    FpSpread4.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                    FpSpread4.Sheets[0].ColumnHeader.Columns[0].Width = 124;
                    FpSpread4.Sheets[0].ColumnHeader.Columns[1].Width = 399;
                    FpSpread4.Sheets[0].ColumnHeader.Columns[2].Width = 124;
                    FpSpread4.Sheets[0].ColumnHeader.Columns[3].Width = 124;
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                        {
                            FpSpread4.Sheets[0].RowCount++;
                            FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(j + 1);
                            FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                            FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 1].Text = ds.Tables[0].Rows[j]["FeedBackName"].ToString();
                            FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                            FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 1].Tag = ds.Tables[0].Rows[j]["FeedBackMasterPK"].ToString();
                            FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 2].Text = ds.Tables[0].Rows[j]["StartDate"].ToString();
                            FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";
                            FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 3].Text = ds.Tables[0].Rows[j]["EndDate"].ToString();
                            FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                        }
                        FpSpread4.Sheets[0].PageSize = FpSpread4.Sheets[0].RowCount;
                        for (int s = 0; s < ds.Tables[0].Columns.Count; s++)
                        {
                            FpSpread4.Sheets[0].Columns[s].Locked = true;
                        }
                    }
                    else
                    {
                        imgdiv2.Visible = true;
                        lbl_alert1.Text = "No Records Found";
                        FpSpread4.Visible = false;
                    }
                }
            }
        }
        catch
        {
        }
    }

    protected void FpSpread4_OnCellClick(object sender, EventArgs e)
    {
        cellclick4 = true;
    }

    protected void FpSpread4_Selectedindexchange(object sender, EventArgs e)
    {
        try
        {
            if (cellclick4 == true)
            {
                int activerow = FpSpread4.ActiveSheetView.ActiveRow;
                int activecol = FpSpread4.ActiveSheetView.ActiveColumn;
                if (activerow >= 0 && activecol >= 0)
                {
                    string startdate = FpSpread4.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text.ToString();
                    string enddate = FpSpread4.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text.ToString();
                    DateTime dtm = DateTime.Now.Date;
                    DateTime dt1 = new DateTime();
                    DateTime dt2 = new DateTime();
                    string firstdate = startdate.ToString();
                    string[] split = firstdate.Split('/');
                    dt1 = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
                    string seconddate = enddate.ToString();
                    string[] split1 = seconddate.Split('/');
                    dt2 = Convert.ToDateTime(split1[1] + "/" + split1[0] + "/" + split1[2]);
                    if (dtm >= dt1 && dtm <= dt2)
                    {
                        FpSpread2.Visible = true;
                        if (rb_Acad.Checked == true)
                        {
                            FpSpread4.Visible = true;
                            online();
                        }
                        if (rb_Gend.Checked == true)
                        {
                            FpSpread4.Visible = true;
                            generel();
                        }
                    }
                    else
                    {
                        imgdiv2.Visible = true;
                        lbl_alert1.Text = "Today Not Valid for FeedBack Test Date";
                    }
                }
            }
        }
        catch
        {
        }
    }

    protected void rb_Gend_CheckedChanged(object sender, EventArgs e)
    {
        FpSpread2.Visible = false;
        btn_save_fb.Visible = false;
        lbl_Name.Visible = false;
        string type = string.Empty;
        if (rb_Acad.Checked == true)
        {
            type = "1";
        }
        else if (rb_Gend.Checked == true)
        {
            type = "2";
        }
        string question = string.Empty;
        question = "select FeedBackMasterPK, FeedBackName, CONVERT(varchar(10), StartDate,103) as StartDate,CONVERT(varchar(10), EndDate,103) as EndDate   from CO_FeedBackMaster where FeedBackType ='" + type + "'  order by StartDate desc";
        ds = d2.select_method_wo_parameter(question, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            lbl_Name.Text = ds.Tables[0].Rows[0]["FeedBackName"].ToString();
        }
        lbl_Name.Visible = false;
        try
        {
            FpSpread4.Sheets[0].RowCount = 0;
            FpSpread4.Sheets[0].ColumnCount = 0;
            FpSpread4.CommandBar.Visible = false;
            FpSpread4.Sheets[0].AutoPostBack = true;
            FpSpread4.Sheets[0].ColumnHeader.RowCount = 1;
            FpSpread4.Sheets[0].RowHeader.Visible = false;
            FpSpread4.Sheets[0].ColumnCount = 4;
            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
            darkstyle.ForeColor = Color.White;
            FpSpread4.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
            FpSpread4.Visible = true;
            FpSpread4.Width = 785;
            FpSpread4.Height = 172;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
            FpSpread4.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 1].Text = "FeedBackName";
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 2].Text = "StartDate";
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 3].Text = "End Date";
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
            FpSpread4.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
            FpSpread4.Sheets[0].ColumnHeader.Columns[0].Width = 124;
            FpSpread4.Sheets[0].ColumnHeader.Columns[1].Width = 399;
            FpSpread4.Sheets[0].ColumnHeader.Columns[2].Width = 124;
            FpSpread4.Sheets[0].ColumnHeader.Columns[3].Width = 124;
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                {
                    FpSpread4.Sheets[0].RowCount++;
                    FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(j + 1);
                    FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 1].Text = ds.Tables[0].Rows[j]["FeedBackName"].ToString();
                    FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 1].Tag = ds.Tables[0].Rows[j]["FeedBackMasterPK"].ToString();
                    FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 2].Text = ds.Tables[0].Rows[j]["StartDate"].ToString();
                    FpSpread4.Sheets[0].Cells[FpSpread4.Sheets[0].RowCount - 1, 3].Text = ds.Tables[0].Rows[j]["EndDate"].ToString();
                }
                FpSpread4.Sheets[0].PageSize = FpSpread4.Sheets[0].RowCount;
                for (int s = 0; s < ds.Tables[0].Columns.Count; s++)
                {
                    FpSpread4.Sheets[0].Columns[s].Locked = true;
                }
            }
            else
            {
                imgdiv2.Visible = true;
                lbl_alert1.Text = "No Records Found";
                FpSpread4.Visible = false;
            }
        }
        catch
        {
        }
    }

    //protected void rb_Gend_CheckedChanged(object sender, EventArgs e)
    //{
    //    //  string Reg_no = txtuname.Text.Trim();
    //    string selqry;
    //    selqry = " select r.degree_code,r.Current_Semester ,r.Sections ,r.Batch_Year  from Registration r, applyn a where a.app_no =r.App_No and r.Reg_No ='" + Reg_no + "'";
    //    ds = d2.select_method_wo_parameter(selqry, "Text");
    //    if (ds.Tables.Count > 0)
    //    {
    //        if (ds.Tables[0].Rows.Count > 0)
    //        {
    //            if (rb_Acad.Checked == true)
    //            {
    //                online();
    //            }
    //            else if (rb_Gend.Checked == true)
    //            {
    //                generel();
    //            }
    //        }
    //        else
    //        {
    //            imgdiv2.Visible = true;
    //            lbl_alert1.Text = "No Records Found";
    //            FpSpread2.Visible = false;
    //            //div1.Visible = false;
    //        }
    //    }
    //    else
    //    {
    //        imgdiv2.Visible = true;
    //        lbl_alert1.Text = "No Records Found";
    //        FpSpread2.Visible = false;
    //        // div1.Visible = false;
    //    }
    //}

    protected void rb_Acad_CheckedChanged(object sender, EventArgs e)
    {
        //string Reg_no = txtuname.Text.Trim();
        string selqry;
        selqry = " select r.degree_code,r.Current_Semester ,r.Sections ,r.Batch_Year  from Registration r, applyn a where a.app_no =r.App_No and r.Reg_No ='" + Reg_no + "'";
        ds = d2.select_method_wo_parameter(selqry, "Text");
        if (ds.Tables.Count > 0)
        {
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (rb_Acad.Checked == true)
                {
                    acd();
                }
            }
            else
            {
                imgdiv2.Visible = true;
                lbl_alert1.Text = "No Records Found";
                FpSpread2.Visible = false;
                // div1.Visible = false;
            }
        }
        else
        {
            imgdiv2.Visible = true;
            lbl_alert1.Text = "No Records Found";
            FpSpread2.Visible = false;
            // div1.Visible = false;
        }
    }

    protected void btn_save_fb_Click(object sender, EventArgs e)
    {
        FpSpread2.SaveChanges();
        // FpSpread2.Sheets[0].RowCount++;
        if (rb_Acad.Checked == true)
        {
            string H_code = string.Empty;
            string QuestionMaster_PK = string.Empty;
            string MarkMaster_Pk = string.Empty;
            string appl_id = string.Empty;
            string name = lbl_Name.Text.ToString();
            string AppNO = App_no.Text.ToString();
            bool inschk = false; int insert = 0;
            if (ViewState["Acadamic_Isgeneral"] == null)
            {
                for (int rselct = 0; rselct < FpSpread2.Sheets[0].Rows.Count; rselct++)
                {
                    H_code = Convert.ToString(FpSpread2.Sheets[0].Cells[rselct, 1].Tag);
                    QuestionMaster_PK = Convert.ToString(FpSpread2.Sheets[0].Cells[rselct, 2].Tag);
                    if (QuestionMaster_PK != "")
                    {
                        for (int scol = 3; scol < FpSpread2.Sheets[0].ColumnCount; scol++)
                        {
                            string subject_no1 = Convert.ToString(FpSpread2.Sheets[0].ColumnHeader.Cells[0, scol].Tag);
                            if (subject_no1.Trim() != "")
                            {
                                string getselect = Convert.ToString(FpSpread2.Sheets[0].Cells[rselct, scol].Text);
                                if (getselect == "Select")
                                {
                                    imgdiv2.Visible = true;
                                    lbl_alert1.Text = "Please Select All Answers";
                                    return;
                                }
                            }
                        }
                    }
                }
                H_code = string.Empty;
                QuestionMaster_PK = string.Empty;
                for (int row = 0; row < FpSpread2.Sheets[0].Rows.Count; row++)
                {
                    H_code = Convert.ToString(FpSpread2.Sheets[0].Cells[row, 1].Tag);
                    QuestionMaster_PK = Convert.ToString(FpSpread2.Sheets[0].Cells[row, 2].Tag);
                    if (QuestionMaster_PK != "")
                    {
                        for (int col = 3; col < FpSpread2.Sheets[0].ColumnCount; col++)
                        {
                            string subject_no = Convert.ToString(FpSpread2.Sheets[0].ColumnHeader.Cells[0, col].Tag);
                            if (subject_no.Trim() != "")
                            {
                                string staff_code = Convert.ToString(FpSpread2.Sheets[0].ColumnHeader.Cells[1, col].Tag);
                                string getvalue = Convert.ToString(FpSpread2.Sheets[0].Cells[row, col].Text);
                                string getpkcode = Convert.ToString(FpSpread2.Sheets[0].Cells[row, 0].Tag);
                                MarkMaster_Pk = d2.GetFunction("select MarkMasterPK from CO_MarkMaster where MarkType ='" + getvalue + "'");
                                if (staff_code.Trim() != "" && getvalue.Trim() != "" && getpkcode.Trim() != "")
                                {
                                    appl_id = d2.GetFunction(" select appl_id from staff_appl_master sa,staffmaster s where sa.appl_no=s.appl_no and s.staff_code ='" + staff_code + "'");
                                    string insertquery = "if exists (select * from CO_StudFeedBack where FeedBackMasterFK ='" + getpkcode + "' and QuestionMasterFK ='" + QuestionMaster_PK + "' and App_No='" + AppNO + "' and SubjectNo ='" + subject_no + "' and StaffApplNo='" + appl_id + "') update CO_StudFeedBack set MarkMasterPK ='" + MarkMaster_Pk + "' where FeedBackMasterFK ='" + getpkcode + "' and QuestionMasterFK ='" + QuestionMaster_PK + "' and App_No='" + AppNO + "' and SubjectNo ='" + subject_no + "' and StaffApplNo='" + appl_id + "' else insert into CO_StudFeedBack (App_No,FeedBackMasterFK,QuestionMasterFK,MarkMasterPK,StaffApplNo,SubjectNo) values ('" + AppNO + "','" + getpkcode + "','" + QuestionMaster_PK + "','" + MarkMaster_Pk + "','" + appl_id + "','" + subject_no + "')";
                                    insert = d2.update_method_wo_parameter(insertquery, "Text");
                                    if (insert != 0)
                                        inschk = true;
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                #region Acadamic General
                for (int row = 0; row < FpSpread2.Sheets[0].Rows.Count; row++)
                {
                    QuestionMaster_PK = Convert.ToString(FpSpread2.Sheets[0].Cells[row, 1].Tag);
                    if (QuestionMaster_PK.Trim() != "")
                    {
                        for (int col = 3; col < FpSpread2.Sheets[0].ColumnCount; col++)
                        {
                            hat.Clear();
                            MarkMaster_Pk = Convert.ToString(FpSpread2.Sheets[0].ColumnHeader.Cells[0, col].Tag);
                            string feedbackFK = Convert.ToString(FpSpread2.Sheets[0].Cells[row, 0].Tag);
                            int getvalue = Convert.ToInt32(FpSpread2.Sheets[0].Cells[row, col].Value);
                            if (getvalue == 1)
                            {
                                if (MarkMaster_Pk.Trim() != "" && feedbackFK.Trim() != null)
                                {
                                    hat.Add("feedbackfk", feedbackFK);
                                    hat.Add("questionfk", QuestionMaster_PK);
                                    hat.Add("markmasterfk", MarkMaster_Pk);
                                    hat.Add("app_no", AppNO);
                                    insert = d2.update_method_with_parameter("IndividualfeedbackIsgeneralsave", hat, "sp");
                                    if (insert != 0)
                                        inschk = true;
                                }
                            }
                        }
                    }
                }
                #endregion
            }
            if (inschk == true)
            {
                imgdiv2.Visible = true;
                lbl_alert1.Text = "Saved Successfully";
            }
        }
        else if (rb_Gend.Checked == true)
        {
            string AppNO = App_no.Text.ToString();
            string QuestionMaster_PK = string.Empty;
            string MarkMaster_Pk = string.Empty;
            string FeedBackMasterPK = string.Empty;
            for (int row = 0; row < FpSpread2.Sheets[0].Rows.Count; row++)
            {
                QuestionMaster_PK = Convert.ToString(FpSpread2.Sheets[0].Cells[row, 2].Tag);
                FeedBackMasterPK = Convert.ToString(FpSpread2.Sheets[0].Cells[row, 0].Tag);
                for (int col = 3; col < FpSpread2.Sheets[0].ColumnCount; col++)
                {
                    int getvalue = Convert.ToInt32(FpSpread2.Sheets[0].Cells[row, col].Value);
                    if (getvalue == 1)
                    {
                        MarkMaster_Pk = Convert.ToString(FpSpread2.Sheets[0].ColumnHeader.Cells[1, col].Tag);
                        string insertquery = "    if exists (select * from CO_StudFeedBack where FeedBackMasterFK ='" + FeedBackMasterPK + "' and QuestionMasterFK ='" + QuestionMaster_PK + "' and App_No='" + AppNO + "') update CO_StudFeedBack set MarkMasterPK ='" + MarkMaster_Pk + "' where FeedBackMasterFK ='" + FeedBackMasterPK + "' and QuestionMasterFK ='" + QuestionMaster_PK + "'  and App_No='" + AppNO + "'    else insert into CO_StudFeedBack (App_No,FeedBackMasterFK,QuestionMasterFK,MarkMasterPK) values ('" + AppNO + "','" + FeedBackMasterPK + "','" + QuestionMaster_PK + "','" + MarkMaster_Pk + "')";
                        //string insertquery = "insert into CO_StudFeedBack (App_No,FeedBackMasterFK,QuestionMasterFK,MarkMasterPK) values ('" + AppNO + "','" + FeedBackMasterPK + "','" + QuestionMaster_PK + "','" + MarkMaster_Pk + "')";
                        int insert = d2.update_method_wo_parameter(insertquery, "Text");
                    }
                }
            }
            imgdiv2.Visible = true;
            lbl_alert1.Text = "Saved Successfully";
        }
    }

    protected void btnExcel1_Click(object sender, EventArgs e)
    {
        try
        {
            string reportname = txtexcelname1.Text;
            if (reportname.ToString().Trim() != "")
            {
                if (FpSpread2.Visible == true)
                {
                    d2.printexcelreport(FpSpread2, reportname);
                }
                lbl_norec1.Visible = false;
            }
            else
            {
                lbl_norec1.Text = "Please Enter Your Report Name";
                lbl_norec1.Visible = true;
                txtexcelname1.Focus();
            }
        }
        catch
        {
        }
    }

    protected void btnprintmaster1_Click(object sender, EventArgs e)
    {
        try
        {
            string dptname = "Online_FeedBack";
            string pagename = "Online_FeedBack.aspx";
            if (FpSpread2.Visible == true)
            {
                Printcontrol1.loadspreaddetails(FpSpread2, pagename, dptname);
            }
            else
            {
                Printcontrol1.loadspreaddetails(FpSpread2, pagename, dptname);
            }
            Printcontrol1.Visible = true;
            lbl_norec1.Visible = false;
        }
        catch
        {
        }
    }

    protected void btn_exit_Click(object sender, EventArgs e)
    {
    }

    protected void FpSpread2_OnButtonCommand(object sender, EventArgs e)
    {
        FpSpread2.SaveChanges();
        int activerow = FpSpread2.ActiveSheetView.ActiveRow;
        int activecol = FpSpread2.ActiveSheetView.ActiveColumn;
        int checkval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[activerow, activecol].Value);
        if (checkval == 1)
        {
            for (int i = 3; i < FpSpread2.Sheets[0].ColumnCount; i++)
            {
                if (i == Convert.ToInt32(activecol))
                {
                    FpSpread2.Sheets[0].Cells[activerow, i].Value = 1;
                }
                else
                {
                    FpSpread2.Sheets[0].Cells[activerow, i].Value = 0;
                }
            }
        }
    }

    protected void btn_errorclose_Click(object sender, EventArgs e)
    {
        imgdiv2.Visible = false;
    }

    protected void feedbtn_Click(object sender, EventArgs e)
    {
        string send_mail = string.Empty;
        string send_pw = string.Empty;
        cmd.CommandText = "select massemail,masspwd from collinfo where college_code=" + Session["college_code"].ToString();
        cmd.Connection = con;
        con.Open();
        SqlDataReader rcol = cmd.ExecuteReader();
        if (rcol.Read())
        {
            send_mail = rcol.GetValue(0).ToString();
            send_pw = rcol.GetValue(1).ToString();
        }
        rcol.Close();
        con.Close();
        //if (send_mail == "" || send_pw == "")
        //{
        //    Panellable.Visible = true;
        //    lblsendmail.Text = "There is know E-mail information available. Contact your College Admin";
        //}
        string paswrd = string.Empty;
        SmtpClient Mail = new SmtpClient("smtp.gmail.com", 587);
        MailMessage mailmsg = new MailMessage();
        con.Close();
        con.Open();
        string mail_id_user = string.Empty;
        string pw_user = string.Empty;
        // mail_id_user=Session["email_userid"].ToString();
        //pw_user=Session["pw_user"].ToString();
        try
        {
            // Panellable.Visible = true;
            cmd.ExecuteNonQuery();
            MailAddress mfrom = new MailAddress(send_mail);
            mailmsg.From = mfrom;
            mailmsg.To.Add(send_mail);
            mailmsg.Subject = "FeedBack";
            mailmsg.IsBodyHtml = true;
            mailmsg.Body = "Name: " + Session["StudName"];
            mailmsg.Body = mailmsg.Body + "\n" + "Roll No: " + Session["RollNo"];
            mailmsg.Body = mailmsg.Body + "\n" + "Course: " + Session["course"];
            mailmsg.Body = mailmsg.Body + "\n" + lbl_semOrTerm.Text + ": " + Session["semeste"];
            mailmsg.Body = mailmsg.Body + "\n" + "Batch: " + Session["batch"];
            mailmsg.Body = mailmsg.Body + "\n" + feedtxt.Text;
            // SmtpMail.Host = "localhost";
            //SmtpMail.Port = 2168;
            Mail.EnableSsl = true; //ssl must be enabled for Gmail
            //our Gmail account credentials
            NetworkCredential credentials = new NetworkCredential(send_mail, send_pw);
            //add credentials to our smtp client
            Mail.UseDefaultCredentials = false;
            Mail.Credentials = credentials;
            Mail.Send(mailmsg);
            feedlbl.Visible = true;
            feedlbl.Text = "Your Feedback has been successfully sent to Institution";
            //Response.Write(paswrd);
        }
        catch (Exception ex)
        {
            feedlbl.Visible = true;
            feedlbl.ForeColor = Color.Red;
            feedlbl.Text = "Send Email Failed." + ex.Message;
        }
        con.Close();
    }

    #region logout back home

    protected void lblogout_Click(object sender, EventArgs e)
    {
        Session.Abandon();
        Session.Clear();
        Session.RemoveAll();
        System.Web.Security.FormsAuthentication.SignOut();
        Response.Redirect("~/Default.aspx", false);
    }

    protected void lnkHome_Click(object sender, EventArgs e)
    {
        Response.Redirect("Default_LoginPage.aspx");
        //if (split1[1] == null)
        //{
        //    Response.Redirect("~/Default_LoginPage.aspx");
        //}
        //else
        //{
        //    Response.Redirect("stud_login_rollno.aspx?");
        //}
    }

    protected void lnkback_Click(object sender, EventArgs e)
    {
        //Response.Redirect("Default.aspx?");
        if (Convert.ToString(Session["studentmentor"]) == "studentmentor")
        {
            Session["studentmentor"] = null;
            Response.Redirect("~/StudentMod/StudentMentorReport.aspx");
        }
        else
        {
            if (split1[1] == null)
            {
                Response.Redirect("~/OfficeMOD/About.aspx");
            }
            else
            {
                Response.Redirect("stud_login_rollno.aspx?");
            }
        }
    }

    #endregion

    protected void ImageButton2_Click(object sender, EventArgs e)
    {
        load_click();
    }

    void load_click()
    {
        ptest.Visible = true;
        pquestion.Visible = false;
        fptest.CommandBar.Visible = true;
        fptest.Sheets[0].BackColor = Color.White;
        lblwrong.Visible = false;
        fptest.Sheets[0].DefaultRowHeight = 20;
        fptest.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        fptest.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        fptest.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        fptest.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
        fptest.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
        fptest.Sheets[0].DefaultStyle.Font.Bold = false;
        fptest.Sheets[0].SheetCorner.Cells[0, 0].Text = "S.No";
        fptest.Sheets[0].SheetCorner.Cells[0, 0].Font.Size = FontUnit.Medium;
        fptest.Sheets[0].SheetCorner.Cells[0, 0].Font.Name = "Book Antiqua";
        //FpSpread1.SheetCorner.Cells[0, 0].Font.Bold = true;
        // FpSpread1.Sheets[0].PageSize = 10;
        fptest.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
        fptest.Pager.Mode = FarPoint.Web.Spread.PagerMode.Both;
        fptest.Pager.Align = HorizontalAlign.Right;
        fptest.Pager.Font.Bold = true;
        fptest.Pager.Font.Name = "Book Antiqua";
        fptest.Pager.ForeColor = Color.DarkGreen;
        fptest.Pager.BackColor = Color.Beige;
        fptest.Pager.BackColor = Color.AliceBlue;
        fptest.Pager.PageCount = 5;
        fptest.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        fptest.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        fptest.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        fptest.Sheets[0].RowHeader.Visible = false;
        fptest.Sheets[0].ColumnCount = 0;
        fptest.Sheets[0].ColumnCount = 8;
        fptest.Sheets[0].RowCount = 0;
        fptest.Width = 800;
        fptest.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.no";
        fptest.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Exam Date";
        fptest.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Start  Time";
        fptest.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Subject";
        fptest.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Exam Name";
        fptest.Sheets[0].SetColumnWidth(3, 200);
        fptest.Sheets[0].ColumnHeader.Cells[0, 5].Text = "No Of Question";
        fptest.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Duration";
        fptest.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Marks";
        fptest.Sheets[0].AutoPostBack = true;
        //  lblsendmail.Visible = false;
        string haspaswrd = string.Empty;
        // string a = txtpass.Text.Trim();
        //haspaswrd = FormsAuthentication.HashPasswordForStoringInConfigFile(txtpass.Text.Trim(), "SHA1");
        string type = string.Empty;
        string randomtype = string.Empty;
        if (rdo_random.Checked == true)
        {
            randomtype = "0";
        }
        else if (rdo_random.Checked == false)
        {
            randomtype = "1";
        }
        if (rbo_subject.Checked == true)
        {
            type = "1";
        }
        else if (rbo_general.Checked == true)
        {
            type = "0";
        }
        cmd.CommandText = "Select r.app_no,r.stud_name,r.roll_no,r.degree_code,r.current_semester,r.batch_year from applyn a,registration r where a.app_no=r.app_no and r.roll_no='" + Session["RollNo"] + "' ";
        cmd.Connection = con4;
        con4.Close();
        con4.Open();
        SqlDataReader readpwd = cmd.ExecuteReader();
        string roll_no = string.Empty;
        string degree_code = string.Empty;
        string sem = string.Empty;
        string batch_year = string.Empty;
        if (readpwd.Read())
        {
            pradio.Visible = true;
            roll_no = readpwd["roll_no"].ToString();
            degree_code = readpwd["degree_code"].ToString();
            sem = readpwd["current_semester"].ToString();
            batch_year = readpwd["batch_year"].ToString();
            string today = DateTime.Now.ToString();
            string[] splitdate = today.Split(' ');
            string sql = string.Empty;
            int sno = 0;
            if (rbo_subject.Checked == true)
            {
                if (rdo_random.Checked == true)
                {
                    sql = "select distinct convert(varchar(10),epr.exam_date,103) as examdate,epr.Exam_name,right(CONVERT(nvarchar(100),epr.exam_time ,100),7) as examtime,qrg.subject_no as subjectno,convert(varchar(20),epr.Duration,108) as Duration,s.subject_name,exam_date as date from ExamSchedulePreparation_randomQuestions epr,questionrandom_generation qrg,subject s where epr.exam_name=qrg.exam_name and qrg.subject_no=s.subject_no and epr.batch_year='" + batch_year + "' and epr.degree_code='" + degree_code + "' and epr.semester='" + sem + "' and qrg.type=1";
                }
                else
                {
                    sql = "select distinct convert(varchar(10),examdate,103) as examdate,textval,right(CONVERT(nvarchar(100),examtime ,100),7) as examtime,ex.subjectno,noofquestions,convert(varchar(20),Duration,108) as Duration,subject_name,examdate as date,ExamNo,examdate as date from ExamSchedulePreparation ex,subject s,textvaltable_new t where t.textcode=ex.examno and   ex.subjectno=s.subject_NO and  degreecode='" + degree_code + "' and batchyear='" + batch_year + "' and semester='" + sem + "'"; //and examdate>='" + splitdate[0] + "' ";
                }
                SqlDataAdapter daexam = new SqlDataAdapter(sql, mysql);
                mysql.Close();
                mysql.Open();
                DataSet dsexam = new DataSet();
                daexam.Fill(dsexam);
                if (dsexam.Tables[0].Rows.Count > 0)
                {
                    for (int ex = 0; ex < dsexam.Tables[0].Rows.Count; ex++)
                    {
                        fptest.Visible = true;
                        string datetim = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                        string[] dt = datetim.Split(new char[] { '/' });
                        datetim = dt[1].ToString() + "/" + dt[0].ToString() + "/" + dt[2].ToString();
                        DateTime Datt = Convert.ToDateTime(datetim.ToString());
                        string datet = DateTime.Now.ToString("dd-MM-yyyy");
                        string[] datete = datet.Split(new char[] { '-' });
                        datet = datete[1].ToString() + "-" + datete[0].ToString() + "-" + datete[2].ToString();
                        DateTime CurDate = Convert.ToDateTime(datet);
                        DateTime Time = Convert.ToDateTime(dsexam.Tables[0].Rows[ex]["examtime"].ToString());
                        DateTime Dur = Convert.ToDateTime(dsexam.Tables[0].Rows[ex]["Duration"].ToString());
                        TimeSpan ts = Time.TimeOfDay.Add(Dur.TimeOfDay);
                        DateTime CurTime = Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt"));
                        if (rdo_not_take.Checked == true)
                        {
                            if (Datt == CurDate)
                            {
                                if (ts > CurTime.TimeOfDay)
                                {
                                    sno++;
                                    int rc = fptest.Sheets[0].RowCount++;
                                    fptest.Sheets[0].Cells[rc, 0].Text = sno.ToString();
                                    fptest.Sheets[0].Cells[rc, 0].HorizontalAlign = HorizontalAlign.Center;
                                    fptest.Sheets[0].Cells[rc, 1].Text = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                                    fptest.Sheets[0].Cells[rc, 1].Tag = degree_code;
                                    fptest.Sheets[0].Cells[rc, 2].Tag = batch_year;
                                    fptest.Sheets[0].Cells[rc, 4].Tag = sem;
                                    fptest.Sheets[0].Cells[rc, 2].Text = dsexam.Tables[0].Rows[ex]["examtime"].ToString();
                                    fptest.Sheets[0].Cells[rc, 3].Text = dsexam.Tables[0].Rows[ex]["subject_name"].ToString();
                                    fptest.Sheets[0].Cells[rc, 3].Tag = dsexam.Tables[0].Rows[ex]["subjectno"].ToString();
                                    if (rdo_random.Checked == false)
                                    {
                                        fptest.Sheets[0].Cells[rc, 5].Text = dsexam.Tables[0].Rows[ex]["noofquestions"].ToString();
                                        fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["textval"].ToString();
                                        fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["ExamNo"].ToString();
                                    }
                                    else
                                    {
                                        string getnoofqtn = "select count(*) as nofqtn from questionrandom_generation where exam_name='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and batch_year=" + batch_year + " and degree_code=" + degree_code + " and semester=" + sem + "";
                                        string noofqtn = GetFunction(getnoofqtn);
                                        fptest.Sheets[0].Cells[rc, 5].Text = noofqtn;
                                        fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                        fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                    }
                                    fptest.Sheets[0].Cells[rc, 5].HorizontalAlign = HorizontalAlign.Center;
                                    fptest.Sheets[0].Cells[rc, 6].Text = dsexam.Tables[0].Rows[ex]["duration"].ToString();
                                    fptest.Sheets[0].Cells[rc, 5].Tag = roll_no.ToString();
                                    fptest.Sheets[0].Cells[rc, 4].ForeColor = Color.Blue;
                                    fptest.Sheets[0].Cells[rc, 4].Font.Underline = true;
                                }
                            }
                            else if (Datt > CurDate)
                            {
                                sno++;
                                int rc = fptest.Sheets[0].RowCount++;
                                fptest.Sheets[0].Cells[rc, 0].Text = sno.ToString();
                                fptest.Sheets[0].Cells[rc, 0].HorizontalAlign = HorizontalAlign.Center;
                                fptest.Sheets[0].Cells[rc, 1].Text = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                                fptest.Sheets[0].Cells[rc, 1].Tag = degree_code;
                                fptest.Sheets[0].Cells[rc, 2].Tag = batch_year;
                                fptest.Sheets[0].Cells[rc, 4].Tag = sem;
                                fptest.Sheets[0].Cells[rc, 2].Text = dsexam.Tables[0].Rows[ex]["examtime"].ToString();
                                fptest.Sheets[0].Cells[rc, 3].Text = dsexam.Tables[0].Rows[ex]["subject_name"].ToString();
                                fptest.Sheets[0].Cells[rc, 3].Tag = dsexam.Tables[0].Rows[ex]["subjectno"].ToString();
                                if (rdo_random.Checked == false)
                                {
                                    fptest.Sheets[0].Cells[rc, 5].Text = dsexam.Tables[0].Rows[ex]["noofquestions"].ToString();
                                    fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["textval"].ToString();
                                    fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["ExamNo"].ToString();
                                }
                                else
                                {
                                    string getnoofqtn = "select count(*) as nofqtn from questionrandom_generation where exam_name='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and batch_year=" + batch_year + " and degree_code=" + degree_code + " and semester=" + sem + "";
                                    string noofqtn = GetFunction(getnoofqtn);
                                    fptest.Sheets[0].Cells[rc, 5].Text = noofqtn;
                                    fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                    fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                }
                                fptest.Sheets[0].Cells[rc, 5].HorizontalAlign = HorizontalAlign.Center;
                                fptest.Sheets[0].Cells[rc, 6].Text = dsexam.Tables[0].Rows[ex]["duration"].ToString();
                                fptest.Sheets[0].Cells[rc, 5].Tag = roll_no.ToString();
                            }
                        }
                        else if (rdo_take.Checked == true)
                        {
                            if (Datt == CurDate)
                            {
                                if (ts < CurTime.TimeOfDay)
                                {
                                    sno++;
                                    int rc = fptest.Sheets[0].RowCount++;
                                    fptest.Sheets[0].Cells[rc, 0].Text = sno.ToString();
                                    fptest.Sheets[0].Cells[rc, 0].HorizontalAlign = HorizontalAlign.Center;
                                    fptest.Sheets[0].Cells[rc, 1].Text = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                                    fptest.Sheets[0].Cells[rc, 1].Tag = degree_code;
                                    fptest.Sheets[0].Cells[rc, 2].Tag = batch_year;
                                    fptest.Sheets[0].Cells[rc, 4].Tag = sem;
                                    fptest.Sheets[0].Cells[rc, 2].Text = dsexam.Tables[0].Rows[ex]["examtime"].ToString();
                                    fptest.Sheets[0].Cells[rc, 3].Text = dsexam.Tables[0].Rows[ex]["subject_name"].ToString();
                                    fptest.Sheets[0].Cells[rc, 3].Tag = dsexam.Tables[0].Rows[ex]["subjectno"].ToString();
                                    string marks = string.Empty;
                                    if (rdo_random.Checked == false)
                                    {
                                        fptest.Sheets[0].Cells[rc, 5].Text = dsexam.Tables[0].Rows[ex]["noofquestions"].ToString();
                                        fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["textval"].ToString();
                                        fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["ExamNo"].ToString();
                                        marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["ExamNo"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "' and type=" + type + " and randomtype=" + randomtype + "");
                                        if (marks != "")
                                        {
                                            fptest.Sheets[0].Rows[rc].ForeColor = Color.RosyBrown;
                                        }
                                        fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                                        fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                    }
                                    else
                                    {
                                        marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                        if (marks != "")
                                        {
                                            fptest.Sheets[0].Rows[rc].ForeColor = Color.RosyBrown;
                                        }
                                        fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                                        fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                        string getnoofqtn = "select count(*) as nofqtn from questionrandom_generation where exam_name='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and batch_year=" + batch_year + " and degree_code=" + degree_code + " and semester=" + sem + "";
                                        string noofqtn = GetFunction(getnoofqtn);
                                        fptest.Sheets[0].Cells[rc, 5].Text = noofqtn;
                                        fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                        fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["Exam_name"].ToString();
                                    }
                                    fptest.Sheets[0].Cells[rc, 5].HorizontalAlign = HorizontalAlign.Center;
                                    fptest.Sheets[0].Cells[rc, 6].Text = dsexam.Tables[0].Rows[ex]["duration"].ToString();
                                    fptest.Sheets[0].Cells[rc, 5].Tag = roll_no.ToString();
                                }
                            }
                            else if (Datt < CurDate)
                            {
                                sno++;
                                int rc = fptest.Sheets[0].RowCount++;
                                fptest.Sheets[0].Cells[rc, 0].Text = sno.ToString();
                                fptest.Sheets[0].Cells[rc, 0].HorizontalAlign = HorizontalAlign.Center;
                                fptest.Sheets[0].Cells[rc, 1].Text = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                                fptest.Sheets[0].Cells[rc, 1].Tag = degree_code;
                                fptest.Sheets[0].Cells[rc, 2].Tag = batch_year;
                                fptest.Sheets[0].Cells[rc, 4].Tag = sem;
                                fptest.Sheets[0].Cells[rc, 2].Text = dsexam.Tables[0].Rows[ex]["examtime"].ToString();
                                fptest.Sheets[0].Cells[rc, 3].Text = dsexam.Tables[0].Rows[ex]["subject_name"].ToString();
                                fptest.Sheets[0].Cells[rc, 3].Tag = dsexam.Tables[0].Rows[ex]["subjectno"].ToString();
                                string marks = string.Empty;
                                if (rdo_random.Checked == false)
                                {
                                    fptest.Sheets[0].Cells[rc, 5].Text = dsexam.Tables[0].Rows[ex]["noofquestions"].ToString();
                                    fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["textval"].ToString();
                                    fptest.Sheets[0].Cells[rc, 5].HorizontalAlign = HorizontalAlign.Center;
                                    fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["ExamNo"].ToString();
                                    marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["ExamNo"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                    fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                                    fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                }
                                else
                                {
                                    marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                    fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                                    fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                    string getnoofqtn = "select count(*) as nofqtn from questionrandom_generation where exam_name='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and batch_year=" + batch_year + " and degree_code=" + degree_code + " and semester=" + sem + "";
                                    string noofqtn = GetFunction(getnoofqtn);
                                    fptest.Sheets[0].Cells[rc, 5].Text = noofqtn;
                                    fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                    fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                }
                                fptest.Sheets[0].Cells[rc, 6].Text = dsexam.Tables[0].Rows[ex]["duration"].ToString();
                                fptest.Sheets[0].Cells[rc, 5].Tag = roll_no.ToString();
                            }
                        }
                        else if (rdo_both.Checked == true)
                        {
                            sno++;
                            int rc = fptest.Sheets[0].RowCount++;
                            fptest.Sheets[0].Cells[rc, 0].Text = sno.ToString();
                            fptest.Sheets[0].Cells[rc, 0].HorizontalAlign = HorizontalAlign.Center;
                            fptest.Sheets[0].Cells[rc, 1].Text = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                            fptest.Sheets[0].Cells[rc, 1].Tag = degree_code;
                            fptest.Sheets[0].Cells[rc, 2].Tag = batch_year;
                            fptest.Sheets[0].Cells[rc, 4].Tag = sem;
                            fptest.Sheets[0].Cells[rc, 2].Text = dsexam.Tables[0].Rows[ex]["examtime"].ToString();
                            fptest.Sheets[0].Cells[rc, 3].Text = dsexam.Tables[0].Rows[ex]["subject_name"].ToString();
                            fptest.Sheets[0].Cells[rc, 3].Tag = dsexam.Tables[0].Rows[ex]["subjectno"].ToString();
                            string marks = string.Empty;
                            if (rdo_random.Checked == false)
                            {
                                fptest.Sheets[0].Cells[rc, 5].Text = dsexam.Tables[0].Rows[ex]["noofquestions"].ToString();
                                fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["textval"].ToString();
                                fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["ExamNo"].ToString();
                                marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["ExamNo"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                            }
                            else
                            {
                                marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                string getnoofqtn = "select count(*) as nofqtn from questionrandom_generation where exam_name='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and batch_year=" + batch_year + " and degree_code=" + degree_code + " and semester=" + sem + "";
                                string noofqtn = GetFunction(getnoofqtn);
                                fptest.Sheets[0].Cells[rc, 5].Text = noofqtn;
                                fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                            }
                            fptest.Sheets[0].Cells[rc, 5].HorizontalAlign = HorizontalAlign.Center;
                            fptest.Sheets[0].Cells[rc, 6].Text = dsexam.Tables[0].Rows[ex]["duration"].ToString();
                            fptest.Sheets[0].Cells[rc, 5].Tag = roll_no.ToString();
                            if (marks == "")
                            {
                                fptest.Sheets[0].Cells[rc, 4].ForeColor = Color.Blue;
                                fptest.Sheets[0].Cells[rc, 4].Font.Underline = true;
                            }
                            else
                            {
                                fptest.Sheets[0].Cells[rc, 4].ForeColor = Color.Green;
                                // fptest.Sheets[0].Cells[rc, 4].Font.Underline = true;
                            }
                            fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                        }
                    }
                }
            }
            else if (rbo_general.Checked == true)
            {
                if (rdo_random.Checked == true)
                {
                    sql = "select distinct convert(varchar(10),epr.exam_date,103) as examdate,exam_name,right(CONVERT(nvarchar(100),epr.exam_time ,100),7) as examtime,convert(varchar(20),epr.Duration,108) as Duration,exam_name,exam_date as date from ExamSchedulePreparation_randomQuestions epr where  type=0";
                }
                else
                {
                    sql = "select distinct convert(varchar(10),examdate,103) as examdate,textval,right(CONVERT(nvarchar(100),examtime ,100),7) as examtime,ex.subjectno,noofquestions,convert(varchar(20),Duration,108) as Duration,examdate as date,ExamNo from ExamSchedulePreparation ex,textvaltable_new t where t.textcode=ex.examno   and type=0"; //and examdate>='" + splitdate[0] + "' ";
                }
                SqlDataAdapter daexam = new SqlDataAdapter(sql, mysql);
                mysql.Close();
                mysql.Open();
                DataSet dsexam = new DataSet();
                daexam.Fill(dsexam);
                if (dsexam.Tables[0].Rows.Count > 0)
                {
                    for (int ex = 0; ex < dsexam.Tables[0].Rows.Count; ex++)
                    {
                        fptest.Visible = true;
                        string datetim = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                        string[] dt = datetim.Split(new char[] { '/' });
                        datetim = dt[1].ToString() + "/" + dt[0].ToString() + "/" + dt[2].ToString();
                        DateTime Datt = Convert.ToDateTime(datetim.ToString());
                        string datet = DateTime.Now.ToString("dd-MM-yyyy");
                        string[] datete = datet.Split(new char[] { '-' });
                        datet = datete[1].ToString() + "-" + datete[0].ToString() + "-" + datete[2].ToString();
                        DateTime CurDate = Convert.ToDateTime(datet);
                        DateTime Time = Convert.ToDateTime(dsexam.Tables[0].Rows[ex]["examtime"].ToString());
                        DateTime Dur = Convert.ToDateTime(dsexam.Tables[0].Rows[ex]["Duration"].ToString());
                        TimeSpan ts = Time.TimeOfDay.Add(Dur.TimeOfDay);
                        DateTime CurTime = Convert.ToDateTime(DateTime.Now.ToString("hh:mm tt"));
                        if (rdo_not_take.Checked == true)
                        {
                            if (Datt == CurDate)
                            {
                                if (ts > CurTime.TimeOfDay)
                                {
                                    sno++;
                                    int rc = fptest.Sheets[0].RowCount++;
                                    fptest.Sheets[0].Cells[rc, 0].Text = sno.ToString();
                                    fptest.Sheets[0].Cells[rc, 0].HorizontalAlign = HorizontalAlign.Center;
                                    fptest.Sheets[0].Cells[rc, 1].Text = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                                    fptest.Sheets[0].Cells[rc, 1].Tag = degree_code;
                                    fptest.Sheets[0].Cells[rc, 2].Tag = batch_year;
                                    fptest.Sheets[0].Cells[rc, 4].Tag = sem;
                                    fptest.Sheets[0].Cells[rc, 2].Text = dsexam.Tables[0].Rows[ex]["examtime"].ToString();
                                    fptest.Sheets[0].Cells[rc, 3].Text = "General";
                                    // fptest.Sheets[0].Cells[rc, 3].Text = dsexam.Tables[0].Rows[ex]["subject_name"].ToString();
                                    if (rdo_random.Checked == false)
                                    {
                                        fptest.Sheets[0].Cells[rc, 3].Tag = dsexam.Tables[0].Rows[ex]["subjectno"].ToString();
                                        fptest.Sheets[0].Cells[rc, 5].Text = dsexam.Tables[0].Rows[ex]["noofquestions"].ToString();
                                        fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["textval"].ToString();
                                        fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["ExamNo"].ToString();
                                    }
                                    else if (rdo_random.Checked == true)
                                    {
                                        string marks = GetFunction("select mark from individual_stud_mark where ExamNo=" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + " and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                        fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                                        fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                        string getnoofqtn = "select count(*) as nofqtn from questionrandom_generation where exam_name='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and batch_year=" + batch_year + " and degree_code=" + degree_code + " and semester=" + sem + "";
                                        string noofqtn = GetFunction(getnoofqtn);
                                        fptest.Sheets[0].Cells[rc, 5].Text = noofqtn;
                                        fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                        fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["Exam_name"].ToString();
                                    }
                                    fptest.Sheets[0].Cells[rc, 5].HorizontalAlign = HorizontalAlign.Center;
                                    fptest.Sheets[0].Cells[rc, 6].Text = dsexam.Tables[0].Rows[ex]["duration"].ToString();
                                    fptest.Sheets[0].Cells[rc, 5].Tag = roll_no.ToString();
                                    fptest.Sheets[0].Cells[rc, 4].ForeColor = Color.Blue;
                                    fptest.Sheets[0].Cells[rc, 4].Font.Underline = true;
                                }
                            }
                            else if (Datt > CurDate)
                            {
                                sno++;
                                int rc = fptest.Sheets[0].RowCount++;
                                fptest.Sheets[0].Cells[rc, 0].Text = sno.ToString();
                                fptest.Sheets[0].Cells[rc, 0].HorizontalAlign = HorizontalAlign.Center;
                                fptest.Sheets[0].Cells[rc, 1].Text = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                                fptest.Sheets[0].Cells[rc, 1].Tag = degree_code;
                                fptest.Sheets[0].Cells[rc, 2].Tag = batch_year;
                                fptest.Sheets[0].Cells[rc, 4].Tag = sem;
                                fptest.Sheets[0].Cells[rc, 2].Text = dsexam.Tables[0].Rows[ex]["examtime"].ToString();
                                fptest.Sheets[0].Cells[rc, 3].Text = "General";
                                if (rdo_random.Checked == false)
                                {
                                    fptest.Sheets[0].Cells[rc, 3].Tag = dsexam.Tables[0].Rows[ex]["subjectno"].ToString();
                                    fptest.Sheets[0].Cells[rc, 5].Text = dsexam.Tables[0].Rows[ex]["noofquestions"].ToString();
                                    fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["textval"].ToString();
                                    fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["ExamNo"].ToString();
                                }
                                else if (rdo_random.Checked == true)
                                {
                                    string marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                    fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                                    fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                    string getnoofqtn = "select count(*) as nofqtn from questionrandom_generation where exam_name='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and batch_year=" + batch_year + " and degree_code=" + degree_code + " and semester=" + sem + "";
                                    string noofqtn = GetFunction(getnoofqtn);
                                    fptest.Sheets[0].Cells[rc, 5].Text = noofqtn;
                                    fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                    fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["Exam_name"].ToString();
                                }
                                fptest.Sheets[0].Cells[rc, 5].HorizontalAlign = HorizontalAlign.Center;
                                fptest.Sheets[0].Cells[rc, 6].Text = dsexam.Tables[0].Rows[ex]["duration"].ToString();
                                fptest.Sheets[0].Cells[rc, 5].Tag = roll_no.ToString();
                            }
                        }
                        else if (rdo_take.Checked == true)
                        {
                            if (Datt == CurDate)
                            {
                                if (ts < CurTime.TimeOfDay)
                                {
                                    sno++;
                                    int rc = fptest.Sheets[0].RowCount++;
                                    fptest.Sheets[0].Cells[rc, 0].Text = sno.ToString();
                                    fptest.Sheets[0].Cells[rc, 0].HorizontalAlign = HorizontalAlign.Center;
                                    fptest.Sheets[0].Cells[rc, 1].Text = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                                    fptest.Sheets[0].Cells[rc, 1].Tag = degree_code;
                                    fptest.Sheets[0].Cells[rc, 2].Tag = batch_year;
                                    fptest.Sheets[0].Cells[rc, 4].Tag = sem;
                                    fptest.Sheets[0].Cells[rc, 2].Text = dsexam.Tables[0].Rows[ex]["examtime"].ToString();
                                    fptest.Sheets[0].Cells[rc, 3].Text = "General";
                                    // fptest.Sheets[0].Cells[rc, 3].Text = dsexam.Tables[0].Rows[ex]["subject_name"].ToString();
                                    if (rdo_random.Checked == false)
                                    {
                                        fptest.Sheets[0].Cells[rc, 3].Tag = dsexam.Tables[0].Rows[ex]["subjectno"].ToString();
                                        fptest.Sheets[0].Cells[rc, 5].Text = dsexam.Tables[0].Rows[ex]["noofquestions"].ToString();
                                        fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["textval"].ToString();
                                        fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["ExamNo"].ToString();
                                        string marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["ExamNo"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                        if (marks != "")
                                        {
                                            fptest.Sheets[0].Rows[rc].ForeColor = Color.RosyBrown;
                                        }
                                        fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                                        fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                    }
                                    else if (rdo_random.Checked == true)
                                    {
                                        string marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                        fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                                        fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                        string getnoofqtn = "select count(*) as nofqtn from questionrandom_generation where exam_name='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and batch_year=" + batch_year + " and degree_code=" + degree_code + " and semester=" + sem + "";
                                        string noofqtn = GetFunction(getnoofqtn);
                                        fptest.Sheets[0].Cells[rc, 5].Text = noofqtn;
                                        fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                        fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["Exam_name"].ToString();
                                    }
                                    fptest.Sheets[0].Cells[rc, 5].HorizontalAlign = HorizontalAlign.Center;
                                    fptest.Sheets[0].Cells[rc, 6].Text = dsexam.Tables[0].Rows[ex]["duration"].ToString();
                                    fptest.Sheets[0].Cells[rc, 5].Tag = roll_no.ToString();
                                }
                            }
                            else if (Datt < CurDate)
                            {
                                sno++;
                                int rc = fptest.Sheets[0].RowCount++;
                                fptest.Sheets[0].Cells[rc, 0].Text = sno.ToString();
                                fptest.Sheets[0].Cells[rc, 0].HorizontalAlign = HorizontalAlign.Center;
                                fptest.Sheets[0].Cells[rc, 1].Text = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                                fptest.Sheets[0].Cells[rc, 1].Tag = degree_code;
                                fptest.Sheets[0].Cells[rc, 2].Tag = batch_year;
                                fptest.Sheets[0].Cells[rc, 4].Tag = sem;
                                fptest.Sheets[0].Cells[rc, 2].Text = dsexam.Tables[0].Rows[ex]["examtime"].ToString();
                                fptest.Sheets[0].Cells[rc, 3].Text = "General";
                                if (rdo_random.Checked == false)
                                {
                                    fptest.Sheets[0].Cells[rc, 3].Tag = dsexam.Tables[0].Rows[ex]["subjectno"].ToString();
                                    fptest.Sheets[0].Cells[rc, 5].Text = dsexam.Tables[0].Rows[ex]["noofquestions"].ToString();
                                    fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["textval"].ToString();
                                    fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["ExamNo"].ToString();
                                    string marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["ExamNo"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                    fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                                    fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                }
                                else if (rdo_random.Checked == true)
                                {
                                    string marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                                    fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                                    fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                                    string getnoofqtn = "select count(*) as nofqtn from questionrandom_generation where exam_name='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and batch_year=" + batch_year + " and degree_code=" + degree_code + " and semester=" + sem + "";
                                    string noofqtn = GetFunction(getnoofqtn);
                                    fptest.Sheets[0].Cells[rc, 5].Text = noofqtn;
                                    fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                    fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["Exam_name"].ToString();
                                }
                                fptest.Sheets[0].Cells[rc, 5].HorizontalAlign = HorizontalAlign.Center;
                                fptest.Sheets[0].Cells[rc, 6].Text = dsexam.Tables[0].Rows[ex]["duration"].ToString();
                                fptest.Sheets[0].Cells[rc, 5].Tag = roll_no.ToString();
                            }
                        }
                        else if (rdo_both.Checked == true)
                        {
                            sno++;
                            int rc = fptest.Sheets[0].RowCount++;
                            fptest.Sheets[0].Cells[rc, 0].Text = sno.ToString();
                            fptest.Sheets[0].Cells[rc, 0].HorizontalAlign = HorizontalAlign.Center;
                            fptest.Sheets[0].Cells[rc, 1].Text = dsexam.Tables[0].Rows[ex]["examdate"].ToString();
                            fptest.Sheets[0].Cells[rc, 1].Tag = degree_code;
                            fptest.Sheets[0].Cells[rc, 2].Tag = batch_year;
                            fptest.Sheets[0].Cells[rc, 4].Tag = sem;
                            fptest.Sheets[0].Cells[rc, 2].Text = dsexam.Tables[0].Rows[ex]["examtime"].ToString();
                            fptest.Sheets[0].Cells[rc, 3].Text = "General";
                            // fptest.Sheets[0].Cells[rc, 3].Text = dsexam.Tables[0].Rows[ex]["subject_name"].ToString();
                            if (rdo_random.Checked == false)
                            {
                                fptest.Sheets[0].Cells[rc, 3].Tag = dsexam.Tables[0].Rows[ex]["subjectno"].ToString();
                                fptest.Sheets[0].Cells[rc, 5].Text = dsexam.Tables[0].Rows[ex]["noofquestions"].ToString();
                                fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["textval"].ToString();
                            }
                            else
                            {
                                string getnoofqtn = "select count(*) as nofqtn from questionrandom_generation where exam_name='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and batch_year=" + batch_year + " and degree_code=" + degree_code + " and semester=" + sem + "";
                                string noofqtn = GetFunction(getnoofqtn);
                                fptest.Sheets[0].Cells[rc, 5].Text = noofqtn;
                                fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                                fptest.Sheets[0].Cells[rc, 4].Text = dsexam.Tables[0].Rows[ex]["exam_name"].ToString();
                            }
                            fptest.Sheets[0].Cells[rc, 5].HorizontalAlign = HorizontalAlign.Center;
                            fptest.Sheets[0].Cells[rc, 6].Text = dsexam.Tables[0].Rows[ex]["duration"].ToString();
                            fptest.Sheets[0].Cells[rc, 5].Tag = roll_no.ToString();
                            string marks = string.Empty;
                            if (rdo_random.Checked == false)
                            {
                                fptest.Sheets[0].Cells[rc, 6].Tag = dsexam.Tables[0].Rows[ex]["ExamNo"].ToString();
                                marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["ExamNo"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                            }
                            else if (rdo_random.Checked == true)
                            {
                                marks = GetFunction("select mark from individual_stud_mark where ExamNo='" + dsexam.Tables[0].Rows[ex]["exam_name"].ToString() + "' and roll_no='" + roll_no + "' and examdate='" + dsexam.Tables[0].Rows[ex]["Date"].ToString() + "'and type=" + type + " and randomtype=" + randomtype + "");
                            }
                            if (marks == "")
                            {
                                fptest.Sheets[0].Cells[rc, 4].ForeColor = Color.Blue;
                                fptest.Sheets[0].Cells[rc, 4].Font.Underline = true;
                            }
                            else
                            {
                                fptest.Sheets[0].Cells[rc, 4].ForeColor = Color.Green;
                                // fptest.Sheets[0].Cells[rc, 4].Font.Underline = true;
                            }
                            fptest.Sheets[0].Cells[rc, 7].Text = marks.ToString();
                            fptest.Sheets[0].Cells[rc, 7].HorizontalAlign = HorizontalAlign.Center;
                        }
                    }
                }
            }
            if (sno == 0)
            {
                fptest.Visible = false;
                pquestion.Visible = false;
            }
        }
    }

    protected void fptest_CellClick(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        cellclick = true;
        // load_spreadclick();
    }

    protected void fptest_SelectedIndexChanged(Object sender, EventArgs e)
    {
        load_spreadclick();
    }

    void load_spreadclick()
    {
        if (cellclick == true)
        {
            int studentnmbr = 0;
            int studpatrn = 0;
            int ptrn1 = 1;
            string activerow = fptest.ActiveSheetView.ActiveRow.ToString();
            int ar = Convert.ToInt32(activerow);
            if (ar != -1)
            {
                string type = string.Empty;
                string randomtype = string.Empty;
                if (rdo_random.Checked == true)
                {
                    randomtype = "0";
                }
                else if (rdo_random.Checked == false)
                {
                    randomtype = "1";
                }
                if (rbo_subject.Checked == true)
                {
                    type = "1";
                }
                else if (rbo_general.Checked == true)
                {
                    type = "0";
                }
                lblwrong.Visible = false;
                pquestion.Visible = true;
                FpSpread1.Visible = true;
                FpSpread1.Width = 400;
                FpSpread1.Sheets[0].DefaultRowHeight = 20;
                FpSpread1.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                FpSpread1.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                FpSpread1.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
                FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
                FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
                FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
                FpSpread1.Sheets[0].SheetCorner.Cells[0, 0].Text = "S.No";
                FpSpread1.Sheets[0].SheetCorner.Cells[0, 0].Font.Size = FontUnit.Medium;
                FpSpread1.Sheets[0].SheetCorner.Cells[0, 0].Font.Name = "Book Antiqua";
                //FpSpread1.SheetCorner.Cells[0, 0].Font.Bold = true;
                fptest.CommandBar.Visible = false;
                // FpSpread1.Sheets[0].PageSize = 10;
                FpSpread1.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
                FpSpread1.Pager.Mode = FarPoint.Web.Spread.PagerMode.Both;
                FpSpread1.Pager.Align = HorizontalAlign.Right;
                FpSpread1.Pager.Font.Bold = true;
                FpSpread1.Pager.Font.Name = "Book Antiqua";
                FpSpread1.Pager.ForeColor = Color.DarkGreen;
                FpSpread1.Pager.BackColor = Color.Beige;
                FpSpread1.Pager.BackColor = Color.AliceBlue;
                FpSpread1.Pager.PageCount = 5;
                FpSpread1.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                FpSpread1.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                FpSpread1.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
                FpSpread1.Sheets[0].RowCount = 0;
                FpSpread1.Sheets[0].RowHeader.Visible = false;
                FpSpread1.Columns[0].Locked = true;
                FpSpread1.Columns[2].Locked = true;
                FpSpread1.ColumnHeader.Visible = false;
                FpSpread1.Sheets[0].ColumnCount = 3;
                FpSpread1.CommandBar.Visible = false;
                string degree = Convert.ToString(fptest.Sheets[0].Cells[ar, 1].Tag);
                FpSpread1.Sheets[0].SetColumnWidth(2, 180);
                string batchyear = Convert.ToString(fptest.Sheets[0].Cells[ar, 2].Tag);
                string subjectno = Convert.ToString(fptest.Sheets[0].Cells[ar, 3].Tag);
                string sem = Convert.ToString(fptest.Sheets[0].Cells[ar, 4].Tag);
                string exdate = Convert.ToString(fptest.Sheets[0].Cells[ar, 1].Text);
                string noofquestion = Convert.ToString(fptest.Sheets[0].Cells[ar, 5].Text);
                string rollno = Convert.ToString(fptest.Sheets[0].Cells[ar, 5].Tag);
                string textno = Convert.ToString(fptest.Sheets[0].Cells[ar, 6].Tag);
                int no_of_ques = Convert.ToInt32(noofquestion);
                string[] splitdate = exdate.Split('/');
                string examdate = splitdate[1] + "/" + splitdate[0] + "/" + splitdate[2];
                //========give pattern for particular student...........
                string pattern = string.Empty;
                if (rdo_random.Checked == true)
                {
                    hashforpattern.Clear();
                    string getpattrn = "select max(pattern) as totpat from questionrandom_generation where exam_name='" + textno + "' and batch_year='" + batchyear + "' and degree_code='" + degree + "' and semester=" + sem + "";
                    if (rbo_subject.Checked == true)
                    {
                        getpattrn = "select max(pattern) as totpat from questionrandom_generation where exam_name='" + textno + "' and batch_year='" + batchyear + "' and degree_code='" + degree + "' and semester=" + sem + "";
                    }
                    else if (rbo_general.Checked == true)
                    {
                        getpattrn = "select max(pattern) as totpat from questionrandom_generation where exam_name='" + textno + "' and treepath='General%'";
                    }
                    SqlDataAdapter dagetpattrn = new SqlDataAdapter(getpattrn, mysql3);
                    DataSet dsgetpattrn = new DataSet();
                    mysql3.Close();
                    mysql3.Open();
                    dagetpattrn.Fill(dsgetpattrn);
                    if (dsgetpattrn.Tables[0].Rows.Count > 0)
                    {
                        pattern = dsgetpattrn.Tables[0].Rows[0]["totpat"].ToString();
                        for (int ptrn = 1; ptrn <= Convert.ToInt32(pattern); ptrn++)
                        {
                            string noofcopies = "select distinct copies,pattern from questionrandom_generation where exam_name='" + textno + "' and pattern=" + pattern + " and batch_year='" + batchyear + "' and degree_code='" + degree + "' and semester=" + sem + "";
                            if (rbo_subject.Checked == true)
                            {
                                noofcopies = "select distinct copies,pattern from questionrandom_generation where exam_name='" + textno + "' and pattern=" + pattern + " and batch_year='" + batchyear + "' and degree_code='" + degree + "' and semester=" + sem + "";
                            }
                            else if (rbo_general.Checked == true)
                            {
                                noofcopies = "select distinct copies,pattern from questionrandom_generation where exam_name='" + textno + "' and pattern=" + pattern + " and treepath='General%'";
                            }
                            SqlDataAdapter danoofcopies = new SqlDataAdapter(noofcopies, mysql3);
                            DataSet dsnoofcopies = new DataSet();
                            mysql3.Close();
                            mysql3.Open();
                            danoofcopies.Fill(dsnoofcopies);
                            if (dsnoofcopies.Tables[0].Rows.Count > 0)
                            {
                                string copies = dsnoofcopies.Tables[0].Rows[0]["copies"].ToString();
                                hashforpattern.Add(ptrn, copies);
                            }
                        }
                    }
                    string getroll = "select roll_no from registration where batch_year=" + batchyear + " and degree_code=" + degree + " and current_Semester=" + sem + " order by roll_no asc";
                    SqlDataAdapter dagetroll = new SqlDataAdapter(getroll, con2);
                    DataSet dsgetroll = new DataSet();
                    con1.Close();
                    con1.Open();
                    dagetroll.Fill(dsgetroll);
                    string rolln2 = string.Empty;
                    ///rolln2 = "11BIT1053";
                    if (dsgetroll.Tables[0].Rows.Count > 0)
                    {
                        for (int startroll = 0; startroll < dsgetroll.Tables[0].Rows.Count; startroll++)
                        {
                        label:
                            if (ptrn1 <= Convert.ToInt32(pattern))
                            {
                                string rollno1 = dsgetroll.Tables[0].Rows[startroll]["roll_no"].ToString();
                            // rollno1 = rolln2;
                            label1:
                                int copy = Convert.ToInt32(GetCorrespondingKey(ptrn1, hashforpattern));
                                if (copy != 0)
                                {
                                    copy--;
                                    hashforpattern[ptrn1] = copy;
                                    if (rollno1 == Session["rollno"].ToString())
                                    {
                                        studpatrn = ptrn1;
                                        studentnmbr = startroll;
                                        startroll = dsgetroll.Tables[0].Rows.Count;
                                    }
                                    ptrn1++;
                                }
                                else if (copy == 0)
                                {
                                    ptrn1++;
                                    if (ptrn1 < Convert.ToInt32(pattern))
                                    {
                                        pquestion.Visible = true;
                                        goto label1;
                                    }
                                    else
                                    {
                                        lblwrong.Visible = true;
                                        lblwrong.Text = "Question Pattern Not Found for this Student Plz Create Pattern and Proceed";
                                        pquestion.Visible = false;
                                    }
                                }
                                rolln2 = string.Empty;
                                //string pattern=
                            }
                            else
                            {
                                pquestion.Visible = true;
                                ptrn1 = 1;
                                goto label;
                            }
                        }
                    }
                }
                string gettotquestion = "select count(*) as tot,pattern from questionrandom_generation where exam_name='" + textno + "' and pattern=" + studpatrn + " and batch_year='" + batchyear + "' and degree_code='" + degree + "' and semester=" + sem + " group by pattern";
                SqlDataAdapter dagettotquestion = new SqlDataAdapter(gettotquestion, con2);
                DataSet dsgettotquestion = new DataSet();
                con1.Close();
                con1.Open();
                dagettotquestion.Fill(dsgettotquestion);
                if (dsgettotquestion.Tables[0].Rows.Count > 0)
                {
                    no_of_ques = Convert.ToInt32(dsgettotquestion.Tables[0].Rows[0]["tot"]);
                    lbldisplaypatrn.Text = "Pattern" + " " + ":" + " " + studpatrn + " " + "Questions" + " " + ":" + " " + no_of_ques;
                }
                if (roll_no != "")
                {
                    string sql3 = "select * from individual_stud_mark where roll_no='" + rollno + "' and degree_code='" + degree + "' and batch_year='" + batchyear + "' and examno='" + textno + "' and examdate='" + examdate + "'and type=" + type + " and randomtype=" + randomtype + "";
                    SqlCommand cmd3 = new SqlCommand(sql3, mysql1);
                    mysql1.Close();
                    mysql1.Open();
                    SqlDataReader dr3 = cmd3.ExecuteReader();
                    //  dr3 = cmd3.ExecuteReader();
                    if (dr3.HasRows == false)
                    {
                        if (rbo_subject.Checked == true)
                        {
                            int timeoutflag = 0;
                            string sql2 = string.Empty;
                            if (rdo_random.Checked == false)
                            {
                                sql2 = "select distinct qd.question,qd.question_no,qd.choices,qd.correct_ans,convert(varchar(10),examdate,103) as examdate,right(CONVERT(nvarchar(100),examtime ,100),7) as examtime,convert(varchar(20),esp.duration,108) as duration  from questionaddition qd,ExamSchedulePreparation esp where qd.question_no=esp.questionNo and esp.subjectno=qd.subject_no and esp.degreecode=qd.degree_code";
                                sql2 = sql2 + " and esp.examdate='" + examdate + "' and esp.batchyear='" + batchyear + "' and esp.subjectno='" + subjectno + "' and esp.examno='" + textno + "'";
                                sql2 = sql2 + " and esp.degreecode='" + degree + "' and esp.semester='" + sem + "' order by qd.question_no ";
                            }
                            else if (rdo_random.Checked == true)
                            {
                                sql2 = "select distinct qd.question,qd.question_no,qd.choices,qd.correct_ans,esp.exam_name,convert(varchar(10),esp.exam_date,103) as examdate,right(CONVERT(nvarchar(100),exam_time ,100),7) as examtime,convert(varchar(20),esp.duration,108) as duration  from ";
                                sql2 = sql2 + " questionaddition qd,ExamSchedulePreparation_randomQuestions esp,questionrandom_generation qrp where qd.question_no=qrp.question_No and qrp.subject_no=qd.subject_no ";
                                sql2 = sql2 + "and qrp.degree_code=qd.degree_code and esp.exam_date='" + examdate + "' and qrp.batch_year='" + batchyear + "' and qrp.subject_no='" + subjectno + "' and qrp.degree_code='" + degree + "' and qrp.semester='" + sem + "' and qrp.exam_name=esp.exam_name and esp.exam_name='" + textno + "' and qrp.pattern=" + studpatrn + " order by qd.question_no";
                            }
                            FarPoint.Web.Spread.CheckBoxCellType chkcell = new FarPoint.Web.Spread.CheckBoxCellType();
                            chkcell.AutoPostBack = true;
                            FpSpread1.SaveChanges();
                            daques = new SqlDataAdapter(sql2, mysql3);
                            mysql3.Close();
                            mysql3.Open();
                            dsques.Clear();
                            daques.Fill(dsques);
                            if (dsques.Tables[0].Rows.Count > 0)
                            {
                                if (quecnt != -1)
                                {
                                    if (quecnt < dsques.Tables[0].Rows.Count)
                                    {
                                        string examdateallot = dsques.Tables[0].Rows[quecnt]["examdate"].ToString();
                                        string exmdt = examdateallot;
                                        string[] examdateallot2 = examdateallot.Split(new char[] { '/' });
                                        examdateallot = examdateallot2[2].ToString() + "-" + examdateallot2[1].ToString() + "-" + examdateallot2[0].ToString();
                                        DateTime examdateallot1 = Convert.ToDateTime(examdateallot);
                                        string currentdate = DateTime.Now.ToString("yyyy/MM/dd");
                                        DateTime currentdate1 = Convert.ToDateTime(currentdate);
                                        TimeSpan tsdate = currentdate1.Subtract(examdateallot1);
                                        if (tsdate.Days == 0)
                                        {
                                            string examtime = dsques.Tables[0].Rows[quecnt]["examtime"].ToString();
                                            string duration = dsques.Tables[0].Rows[quecnt]["duration"].ToString();
                                            DateTime examtime1 = Convert.ToDateTime(examtime);
                                            DateTime starttime = Convert.ToDateTime(examtime1.ToString("hh:mm"));
                                            DateTime duration1 = Convert.ToDateTime(duration);
                                            DateTime dt = Convert.ToDateTime(duration1.ToString("hh:mm"));
                                            TimeSpan ts = examtime1.TimeOfDay.Add(duration1.TimeOfDay);
                                            string currenttime = DateTime.Now.ToString("hh:mmtt");
                                            DateTime currenttime1 = Convert.ToDateTime(currenttime);
                                            if (ts >= currenttime1.TimeOfDay && currenttime1.TimeOfDay > examtime1.TimeOfDay)
                                            {
                                                timeoutflag = 1;
                                                btn_previous.Enabled = true;
                                                int no = quecnt + 1;
                                                if (hsanswer.Contains(quecnt + 1))
                                                {
                                                    hsanswer[quecnt + 1] = dsques.Tables[0].Rows[quecnt]["correct_ans"].ToString();
                                                }
                                                else
                                                {
                                                    hsanswer.Add(quecnt + 1, dsques.Tables[0].Rows[quecnt]["correct_ans"].ToString());
                                                }
                                                lbl_no_of_question.Text = "question " + "  " + no + "/" + no_of_ques;
                                                string chice = dsques.Tables[0].Rows[quecnt]["choices"].ToString();
                                                string[] splitchoce = chice.Split('?');
                                                lblquset.Text = dsques.Tables[0].Rows[quecnt]["question"].ToString();
                                                int choice2 = 0;
                                                for (int b = 0; b <= splitchoce.GetUpperBound(0); b++)
                                                {
                                                    if (splitchoce[b] != "")
                                                    {
                                                        int rowquestio = FpSpread1.Sheets[0].RowCount++;
                                                        string choice = string.Empty;
                                                        if (choice2 == 0)
                                                        {
                                                            choice = "A";
                                                        }
                                                        if (choice2 == 1)
                                                        {
                                                            choice = "B";
                                                        }
                                                        if (choice2 == 2)
                                                        {
                                                            choice = "C";
                                                        }
                                                        if (choice2 == 3)
                                                        {
                                                            choice = "D";
                                                        }
                                                        if (choice2 == 4)
                                                        {
                                                            choice = "E";
                                                        }
                                                        if (choice2 == 5)
                                                        {
                                                            choice = "F";
                                                        }
                                                        choice2++;
                                                        FpSpread1.Sheets[0].Cells[rowquestio, 0].Text = choice.ToString();
                                                        FpSpread1.Sheets[0].Cells[rowquestio, 0].HorizontalAlign = HorizontalAlign.Center;
                                                        FpSpread1.Sheets[0].Cells[rowquestio, 1].CellType = chkcell;
                                                        FpSpread1.Sheets[0].Cells[rowquestio, 1].HorizontalAlign = HorizontalAlign.Center;
                                                        FpSpread1.Sheets[0].Cells[rowquestio, 2].Text = splitchoce[b].ToString();
                                                        FpSpread1.Sheets[0].PageSize = choice2;
                                                    }
                                                }
                                                foreach (DictionaryEntry parameter1 in hstap)
                                                {
                                                    string tickedkey = Convert.ToString(parameter1.Key);
                                                    string tickedvalue = Convert.ToString(parameter1.Value);
                                                    string tickedanswer = string.Empty;
                                                    if (no == Convert.ToInt32(tickedkey))
                                                    {
                                                        tickedanswer = Convert.ToString(GetCorrespondingKey(tickedkey, hstap));
                                                        for (int i = 0; i < FpSpread1.Sheets[0].RowCount; i++)
                                                        {
                                                            string answers = FpSpread1.Sheets[0].Cells[i, 2].Text;
                                                            if (answers == tickedanswer)
                                                            {
                                                                FpSpread1.Sheets[0].Cells[i, 1].Value = true;
                                                            }
                                                        }
                                                    }
                                                }
                                                FpSpread1.Height = 35 + (FpSpread1.Sheets[0].RowCount * 25);
                                            }
                                            else
                                            {
                                                pquestion.Visible = false;
                                                lblwrong.Visible = true;
                                                lblwrong.Text = "Time mismatch occurs with your alloted start time" + examtime + "";
                                                if (timeoutflag == 1)
                                                {
                                                    pquestion.Visible = true;
                                                    lblwrong.Visible = true;
                                                    lblwrong.Text = "Time Exceeds";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            pquestion.Visible = false;
                                            lblwrong.Visible = true;
                                            lblwrong.Text = "Date Mismatch Occurs with your alloted date " + exmdt + "";
                                        }
                                    }
                                    else
                                    {
                                        btn_next.Enabled = false;
                                    }
                                }
                                if (quecnt == -1)
                                {
                                    btn_previous.Enabled = false;
                                }
                            }
                            if (dsques.Tables[0].Rows.Count - 1 == quecnt)
                            {
                                btn_save.Enabled = true;
                                btn_next.Enabled = false;
                                btn_previous.Enabled = true;
                            }
                            else
                            {
                                btn_save.Enabled = false;
                                btn_next.Enabled = true;
                                btn_previous.Enabled = true;
                                if (quecnt == 0)
                                {
                                    btn_previous.Enabled = false;
                                }
                                //btn_skip.Enabled = false;
                            }
                            if (quecnt == 0)
                            {
                                btn_previous.Enabled = false;
                            }
                            cellclick = false;
                        }
                        else if (rbo_general.Checked == true)
                        {
                            int timeoutflag = 0;
                            //string sql2 = "select distinct qd.question,qd.question_no,qd.choices,convert(varchar(10),examdate,103) as examdate,right(CONVERT(nvarchar(100),examtime ,100),7) as examtime,qd.correct_ans,convert(varchar(20),esp.duration,108) as duration  from questionaddition qd,ExamSchedulePreparation esp  ";
                            //sql2 = sql2 + "  where qd.question_no=esp.questionno and  esp.examno='" + textno + "'   and esp.examdate='" + examdate + "' and type=0 ";
                            //sql2 = sql2 + " order by qd.question_no ";
                            string sql2 = string.Empty;
                            if (rdo_random.Checked == true)
                            {
                                sql2 = "select distinct qd.question,qd.question_no,qd.choices,qd.correct_ans,esp.exam_name,convert(varchar(10),esp.exam_date,103) as examdate,right(CONVERT(nvarchar(100),exam_time ,100),7) as examtime,convert(varchar(20),esp.duration,108) as duration  from ";
                                sql2 = sql2 + " questionaddition qd,ExamSchedulePreparation_randomQuestions esp,questionrandom_generation qrp where qd.question_no=qrp.question_No ";
                                sql2 = sql2 + "and esp.exam_date='" + examdate + "'  and qrp.exam_name=esp.exam_name and esp.exam_name='" + textno + "'  order by qd.question_no";
                            }
                            FarPoint.Web.Spread.CheckBoxCellType chkcell = new FarPoint.Web.Spread.CheckBoxCellType();
                            chkcell.AutoPostBack = true;
                            FpSpread1.SaveChanges();
                            daques = new SqlDataAdapter(sql2, mysql3);
                            mysql3.Close();
                            mysql3.Open();
                            daques.Fill(dsques);
                            if (dsques.Tables[0].Rows.Count > 0)
                            {
                                if (quecnt != -1)
                                {
                                    if (quecnt < dsques.Tables[0].Rows.Count)
                                    {
                                        string examdateallot = dsques.Tables[0].Rows[quecnt]["examdate"].ToString();
                                        string exmdt = examdateallot;
                                        string[] examdateallot2 = examdateallot.Split(new char[] { '/' });
                                        examdateallot = examdateallot2[2].ToString() + "-" + examdateallot2[1].ToString() + "-" + examdateallot2[0].ToString();
                                        DateTime examdateallot1 = Convert.ToDateTime(examdateallot);
                                        string currentdate = DateTime.Now.ToString("yyyy/MM/dd");
                                        DateTime currentdate1 = Convert.ToDateTime(currentdate);
                                        TimeSpan tsdate = currentdate1.Subtract(examdateallot1);
                                        if (tsdate.Days == 0)
                                        {
                                            string examtime = dsques.Tables[0].Rows[quecnt]["examtime"].ToString();
                                            string duration = dsques.Tables[0].Rows[quecnt]["duration"].ToString();
                                            DateTime examtime1 = Convert.ToDateTime(examtime);
                                            DateTime starttime = Convert.ToDateTime(examtime1.ToString("hh:mm"));
                                            DateTime duration1 = Convert.ToDateTime(duration);
                                            DateTime dt = Convert.ToDateTime(duration1.ToString("hh:mm"));
                                            TimeSpan ts = examtime1.TimeOfDay.Add(duration1.TimeOfDay);
                                            string currenttime = DateTime.Now.ToString("hh:mmtt");
                                            DateTime currenttime1 = Convert.ToDateTime(currenttime);
                                            if (ts >= currenttime1.TimeOfDay && currenttime1.TimeOfDay > examtime1.TimeOfDay)
                                            {
                                                timeoutflag = 1;
                                                btn_previous.Enabled = true;
                                                int no = quecnt + 1;
                                                if (hsanswer.Contains(quecnt + 1))
                                                {
                                                    hsanswer[quecnt + 1] = dsques.Tables[0].Rows[quecnt]["correct_ans"].ToString();
                                                }
                                                else
                                                {
                                                    hsanswer.Add(quecnt + 1, dsques.Tables[0].Rows[quecnt]["correct_ans"].ToString());
                                                }
                                                lbl_no_of_question.Text = "question " + "  " + no + "/" + no_of_ques;
                                                string chice = dsques.Tables[0].Rows[quecnt]["choices"].ToString();
                                                string[] splitchoce = chice.Split('?');
                                                lblquset.Text = dsques.Tables[0].Rows[quecnt]["question"].ToString();
                                                int choice2 = 0;
                                                for (int b = 0; b <= splitchoce.GetUpperBound(0); b++)
                                                {
                                                    if (splitchoce[b] != "")
                                                    {
                                                        int rowquestio = FpSpread1.Sheets[0].RowCount++;
                                                        string choice = string.Empty;
                                                        if (choice2 == 0)
                                                        {
                                                            choice = "A";
                                                        }
                                                        if (choice2 == 1)
                                                        {
                                                            choice = "B";
                                                        }
                                                        if (choice2 == 2)
                                                        {
                                                            choice = "C";
                                                        }
                                                        if (choice2 == 3)
                                                        {
                                                            choice = "D";
                                                        }
                                                        if (choice2 == 4)
                                                        {
                                                            choice = "E";
                                                        }
                                                        if (choice2 == 5)
                                                        {
                                                            choice = "F";
                                                        }
                                                        choice2++;
                                                        FpSpread1.Sheets[0].Cells[rowquestio, 0].Text = choice.ToString();
                                                        FpSpread1.Sheets[0].Cells[rowquestio, 0].HorizontalAlign = HorizontalAlign.Center;
                                                        FpSpread1.Sheets[0].Cells[rowquestio, 1].CellType = chkcell;
                                                        FpSpread1.Sheets[0].Cells[rowquestio, 1].HorizontalAlign = HorizontalAlign.Center;
                                                        FpSpread1.Sheets[0].Cells[rowquestio, 2].Text = splitchoce[b].ToString();
                                                        FpSpread1.Sheets[0].PageSize = choice2;
                                                    }
                                                }
                                                foreach (DictionaryEntry parameter1 in hstap)
                                                {
                                                    string tickedkey = Convert.ToString(parameter1.Key);
                                                    string tickedvalue = Convert.ToString(parameter1.Value);
                                                    string tickedanswer = string.Empty;
                                                    if (no == Convert.ToInt32(tickedkey))
                                                    {
                                                        tickedanswer = Convert.ToString(GetCorrespondingKey(tickedkey, hstap));
                                                        for (int i = 0; i < FpSpread1.Sheets[0].RowCount; i++)
                                                        {
                                                            string answers = FpSpread1.Sheets[0].Cells[i, 2].Text;
                                                            if (answers == tickedanswer)
                                                            {
                                                                FpSpread1.Sheets[0].Cells[i, 1].Value = true;
                                                            }
                                                        }
                                                    }
                                                }
                                                FpSpread1.Height = 35 + (FpSpread1.Sheets[0].RowCount * 25);
                                            }
                                            else
                                            {
                                                pquestion.Visible = false;
                                                lblwrong.Visible = true;
                                                lblwrong.Text = "Time mismatch occurs with your alloted Start time" + examtime + "";
                                                if (timeoutflag == 1)
                                                {
                                                    pquestion.Visible = true;
                                                    lblwrong.Visible = true;
                                                    lblwrong.Text = "Time Exceeds";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            pquestion.Visible = false;
                                            lblwrong.Visible = true;
                                            lblwrong.Text = "Date Mismatch Occurs with your alloted date " + exmdt + "";
                                        }
                                    }
                                    else
                                    {
                                        btn_next.Enabled = false;
                                    }
                                }
                                if (quecnt == -1)
                                {
                                    btn_previous.Enabled = false;
                                }
                            }
                            if (dsques.Tables[0].Rows.Count - 1 == quecnt)
                            {
                                btn_previous.Enabled = true;
                                btn_save.Enabled = true;
                                btn_next.Enabled = false;
                            }
                            else
                            {
                                btn_previous.Enabled = true;
                                btn_save.Enabled = false;
                                btn_next.Enabled = true;
                                //btn_skip.Enabled = false;
                            }
                            if (quecnt == 1)
                            {
                                btn_previous.Enabled = false;
                            }
                            else
                            {
                                btn_previous.Enabled = false;
                            }
                            cellclick = false;
                        }
                    }
                    else
                    {
                        lblwrong.Visible = true;
                        lblwrong.Text = "Text Already Taken";
                        pquestion.Visible = false;
                    }
                }
                else
                {
                    lblwrong.Visible = true;
                    pquestion.Visible = false;
                }
            }
        }
    }

    protected void btn_previous_Click(object sender, EventArgs e)
    {
        btn_next.Enabled = true;
        quecnt--;
        cellclick = true;
        load_spreadclick();
    }

    protected void btn_next_Click(object sender, EventArgs e)
    {
        quecnt++;
        cellclick = true;
        load_spreadclick();
    }

    //protected void btn_skip_Click(object sender, EventArgs e)
    //{
    //    quecnt++;
    //    cellclick = true;
    //    load_spreadclick();
    //}

    protected void FpSpread1_UpdateCommand(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        string actrow = e.SheetView.ActiveRow.ToString();
        string ticked = string.Empty;
        int activerow = Convert.ToInt32(actrow);
        for (int row = 0; row < FpSpread1.Sheets[0].RowCount; row++)
        {
            if (row != Convert.ToInt32(actrow))
            {
                FpSpread1.Sheets[0].Cells[row, 1].Value = false;
            }
        }
        if (hstap.Contains(quecnt + 1))
        {
            if (savflag == 0)
            {
                savflag = 1;
                FpSpread1.SaveChanges();
            }
            ticked = Convert.ToString(FpSpread1.Sheets[0].Cells[activerow, 1].Value);
            if (ticked == "0")
            {
                hstap[quecnt + 1] = FpSpread1.Sheets[0].Cells[activerow, 2].Text;
            }
            else if (ticked == "1")
            {
                hstap.Remove(quecnt + 1);
            }
        }
        else
        {
            hstap.Add(quecnt + 1, FpSpread1.Sheets[0].Cells[activerow, 2].Text);
        }
    }

    protected void btn_save_Click(object sender, EventArgs e)
    {
        int marks = 0;
        foreach (DictionaryEntry parameter1 in hstap)
        {
            string getchooseqno = Convert.ToString(parameter1.Key);
            string getchooseans = Convert.ToString(parameter1.Value);
            foreach (DictionaryEntry parameter2 in hsanswer)
            {
                string getcorrectqno = Convert.ToString(parameter2.Key);
                string getcorrectans = Convert.ToString(parameter2.Value);
                if (getchooseqno == getcorrectqno)
                {
                    if (getchooseans == getcorrectans)
                    {
                        marks = marks + 1;
                    }
                }
            }
        }
        string activerow = fptest.ActiveSheetView.ActiveRow.ToString();
        int ar = Convert.ToInt32(activerow);
        string degree = Convert.ToString(fptest.Sheets[0].Cells[ar, 1].Tag);
        FpSpread1.Sheets[0].SetColumnWidth(2, 180);
        string batchyear = Convert.ToString(fptest.Sheets[0].Cells[ar, 2].Tag);
        string subjectno = Convert.ToString(fptest.Sheets[0].Cells[ar, 3].Tag);
        string rollno = Convert.ToString(fptest.Sheets[0].Cells[ar, 5].Tag);
        string sem = Convert.ToString(fptest.Sheets[0].Cells[ar, 4].Tag);
        string examno = Convert.ToString(fptest.Sheets[0].Cells[ar, 6].Tag);
        string examdate = Convert.ToString(fptest.Sheets[0].Cells[ar, 1].Text);
        string[] splitdate = examdate.Split('/');
        string exdate = splitdate[1].ToString() + "/" + splitdate[0] + "/" + splitdate[2];
        string insertquery = string.Empty;
        string type = string.Empty;
        string randomtype = string.Empty;
        if (rdo_random.Checked == true)
        {
            randomtype = "0";
        }
        else if (rdo_random.Checked == false)
        {
            randomtype = "1";
        }
        if (rbo_subject.Checked == true)
        {
            type = "1";
        }
        else
        {
            type = "0";
        }
        if (rbo_subject.Checked == true)
        {
            insertquery = "insert into individual_stud_mark (roll_no,batch_year,degree_code,semester,subject_no,mark,examno,examdate,collegecode,type,randomtype) values('" + rollno + "'," + batchyear + "," + degree + "," + sem + "," + subjectno + "," + marks + ",'" + examno + "','" + exdate + "','" + Session["collegecode"] + "'," + type + "," + randomtype + " )";
        }
        if (rbo_general.Checked == true)
        {
            insertquery = "insert into individual_stud_mark (roll_no,batch_year,degree_code,semester,mark,examno,examdate,collegecode,type,randomtype) values('" + rollno + "'," + batchyear + "," + degree + "," + sem + "," + marks + ",'" + examno + "','" + exdate + "','" + Session["collegecode"] + "'," + type + "," + randomtype + " )";
        }
        SqlCommand insertquerycmd = new SqlCommand(insertquery, con1);
        con1.Close();
        con1.Open();
        insertquerycmd.ExecuteNonQuery();
        ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Thank You')", true);
        pquestion.Visible = false;
        btn_save.Enabled = false;
        // if(hsanswer.)
    }

    protected void rdo_not_take_CheckedChanged(object sender, EventArgs e)
    {
        load_click();
    }

    protected void rdo_take_CheckedChanged(object sender, EventArgs e)
    {
        load_click();
    }

    protected void rdo_both_CheckedChanged(object sender, EventArgs e)
    {
        load_click();
    }

    protected void rbo_subject_CheckedChanged(object sender, EventArgs e)
    {
        load_click();
    }

    protected void rbo_general_CheckedChanged(object sender, EventArgs e)
    {
        load_click();
    }

    protected void rdo_random_CheckedChanged(object sender, EventArgs e)
    {
        rbo_general.Checked = false;
        rbo_subject.Checked = false;
        pradio.Visible = false;
        pquestion.Visible = false;
        ptest.Visible = false;
        //string getreginfo = "select * from registration where roll_no='"+Session["rollno"].ToString()+"'";
        //SqlDataAdapter dagetrollnoquery = new SqlDataAdapter(getreginfo, con1);
        //DataSet dsgetrollnoquery = new DataSet();
        //con1.Close();
        //con1.Open();
        //dagetrollnoquery.Fill(dsgetrollnoquery);
        //if (dsgetrollnoquery.Tables[0].Rows.Count > 0)
        //{
        //    int studentnmbr = 0;
        //    string batchyear = dsgetrollnoquery.Tables[0].Rows[0]["batch_year"].ToString();
        //    string degreecode = dsgetrollnoquery.Tables[0].Rows[0]["degree_code"].ToString();
        //    string semester = dsgetrollnoquery.Tables[0].Rows[0]["current_semester"].ToString();
        //    string getroll = "select roll_no from registration where batch_year="+batchyear +" and degree_code="+degreecode +" and current_Semester="+semester +" order by roll_no asc";
        //    SqlDataAdapter dagetroll = new SqlDataAdapter(getroll, con2);
        //    DataSet dsgetroll = new DataSet();
        //    con1.Close();
        //    con1.Open();
        //    dagetroll.Fill(dsgetroll);
        //    if (dsgetroll.Tables[0].Rows.Count > 0)
        //    {
        //        for (int startroll = 0; startroll < dsgetroll.Tables[0].Rows.Count; startroll++)
        //        {
        //            string rollno=dsgetroll.Tables[0].Rows[startroll]["roll_no"].ToString();
        //            if (rollno == Session["rollno"].ToString())
        //            {
        //                studentnmbr = startroll;
        //                //load_click();
        //            }
        //        }
        //    }
        //}
    }

    protected void ddlsubjects_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlsubjects.SelectedIndex != 0)
        {
            bindtree();
            spread_question.Visible = false;
            treepanel.Visible = true;
            Session["sub"] = ddlsubjects.SelectedValue.ToString();
            con_roll.Close();
            con_roll.Open();
            string query = "select distinct marks from attendance_question_addition where batch_year=" + Session["b_year"] + " and degree_code=" + Session["deg_code"] + " and semester=" + Session["semes"] + " and subject_no=" + Session["sub"] + " order by marks asc";
            SqlDataAdapter sda_get = new SqlDataAdapter(query, con_roll);
            DataSet ds_get = new DataSet();
            sda_get.Fill(ds_get);
            if (ds_get.Tables[0].Rows.Count > 0)
            {
                ddlcat.DataSource = ds_get;
                ddlcat.DataTextField = "marks";
                ddlcat.DataBind();
                ddlcat.Items.Insert(0, "Select");
                ddlcat.Items.Insert(1, "All");
                FpSpread3.Visible = true;
                //retrivespreadfornotes(Session["b_year"].ToString(), Session["deg_code"].ToString(), Session["semes"].ToString(), Session["sub"].ToString());//==========================18/6/12 PRABHA
            }
            else
            {
                ddlcat.Items.Clear();
                treepanel.Visible = false;
                //retrivespreadfornotes(Session["b_year"].ToString(), Session["deg_code"].ToString(), Session["semes"].ToString(), Session["sub"].ToString());//==========================18/6/12 PRABHA
            }
            retrivespreadfornotes(Session["b_year"].ToString(), Session["deg_code"].ToString(), Session["semes"].ToString(), Session["sub"].ToString());//==========================18/6/12 PRABHA
            if (FpSpread3.Sheets[0].RowCount > 0)
            {
                FpSpread3.Visible = true;
            }
            else
            {
                FpSpread3.Visible = false;
                FpSpread3.Sheets[0].ColumnCount = 0;
                FpSpread3.Sheets[0].RowCount = 0;
                FpSpread3.Sheets[0].ColumnCount = 4;
                FpSpread3.Sheets[0].RowCount = 1;
                FpSpread3.ColumnHeader.Columns.Default.Width = 150;
                FpSpread3.ColumnHeader.Visible = false;
                FpSpread3.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                FpSpread3.Width = 600;
                FpSpread3.Height = 150;
                FpSpread3.Sheets[0].TitleInfo.Text = "Subject Notes";
                FpSpread3.TitleInfo.Font.Size = FontUnit.Large;
                FpSpread3.TitleInfo.Visible = true;
                FpSpread3.Sheets[0].Cells[0, 0].Text = "There is no Notes were Found For Selected Subject!!!";
                FpSpread3.Sheets[0].Cells[0, 0].Locked = true;
                FpSpread3.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                FpSpread3.Sheets[0].Cells[0, 0].ForeColor = Color.Red;
                FpSpread3.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                FpSpread3.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                FpSpread3.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                FpSpread3.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                FpSpread3.Visible = true;
            }
        }
        else
        {
            FpSpread3.Visible = false;
            spread_question.Visible = false;
        }
    }

    public void retrivespreadfornotes(string batchyear, string degree_code, string semester, string subject_no)
    {
        FpSpread3.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
        FpSpread3.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
        FpSpread3.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
        FpSpread3.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
        FarPoint.Web.Spread.HyperLinkCellType hypertext = new FarPoint.Web.Spread.HyperLinkCellType();
        FpSpread3.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
        FpSpread3.Sheets[0].DefaultStyle.Font.Bold = false;
        FpSpread3.Sheets[0].RowHeader.Visible = false;
        FpSpread3.Sheets[0].RowCount = 0;
        FpSpread3.Sheets[0].ColumnCount = 5;
        FpSpread3.Sheets[0].TitleInfo.Text = "Subject Notes";
        FpSpread3.TitleInfo.Font.Size = FontUnit.Large;
        FpSpread3.TitleInfo.Visible = true;
        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Date";
        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Subject";
        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Topic";
        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Path";
        FpSpread3.Sheets[0].Columns[4].CellType = hypertext;
        FpSpread3.Sheets[0].Columns[4].ForeColor = Color.Black;
        FpSpread3.Sheets[0].Columns[0].Width = 60;
        FpSpread3.Sheets[0].Columns[1].Width = 80;
        FpSpread3.Sheets[0].Columns[2].Width = 120;
        FpSpread3.Sheets[0].Columns[3].Width = 80;
        FpSpread3.Sheets[0].Columns[4].Width = 200;
        FarPoint.Web.Spread.TextCellType txt1 = new FarPoint.Web.Spread.TextCellType();
        FpSpread3.Sheets[0].Columns[1].CellType = txt1;
        //  string getdate = "select date,path,subject_name,subject.subject_no,treeview from attendance_document_save,subject where subject.subject_no=attendance_document_save.subject_no and batch_year=" + batchyear + " and degree_code=" + degree_code + " and semester=" + semester + " and treeview like'" + selectedpath + "%' and attendance_document_save.subject_no=" + subject_no + "";// and convert(varchar(20),attendance_document_save.date,105)='" + datenew + "'";
        //   string getdate = "select date,path,subject_name,subject.subject_no,treeview from attendance_document_save,subject where subject.subject_no=attendance_document_save.subject_no and batch_year=" + batchyear + " and degree_code=" + degree_code + " and semester=" + semester + " and attendance_document_save.subject_no=" + subject_no + "";//-------21/6/12 PRABHA
        string getdate = "select filename,date,subject_name,subject_no,treeview from notestbl where subject_no=" + subject_no + " and batch=" + batchyear + " and degree_code=" + degree_code + " and sem=" + semester + "";// and treeview like'" + selectedpath + "%'";//and convert(varchar(20),attendance_document_save.date,105)='" + datenew + "'";//-------21/6/12 PRABHA
        SqlDataAdapter dagetdate = new SqlDataAdapter(getdate, ssql);
        DataSet dsgetdate = new DataSet();
        ssql.Close();
        ssql.Open();
        dagetdate.Fill(dsgetdate);
        if (dsgetdate.Tables[0].Rows.Count > 0)
        {
            FpSpread3.Visible = true;
            string date = string.Empty;
            string subject = string.Empty;
            string path = string.Empty;
            string subjectno = string.Empty;
            string treepath = string.Empty;
            int sno = 0;
            for (int i = 0; i < dsgetdate.Tables[0].Rows.Count; i++)
            {
                string selecttopic = string.Empty;
                string date1 = string.Empty;
                string[] treepath1 = new string[10];
                string getpathname = string.Empty;
                string topic = string.Empty;
                int maxpath = 0;
                sno++;
                date = dsgetdate.Tables[0].Rows[i]["date"].ToString();
                string[] spdate = date.Split(new Char[] { '/' });
                string[] spyear = spdate[2].Split(new char[] { ' ' });
                if (spdate[0].Length == 1)
                {
                    spdate[0] = "0" + spdate[0];
                }
                if (spdate[1].Length == 1)
                {
                    spdate[1] = "0" + spdate[1];
                }
                date1 = spdate[1] + "-" + spdate[0] + "-" + spyear[0];
                subject = dsgetdate.Tables[0].Rows[i]["subject_name"].ToString();
                subjectno = dsgetdate.Tables[0].Rows[i]["subject_no"].ToString();
                path = dsgetdate.Tables[0].Rows[i]["filename"].ToString();
                treepath = dsgetdate.Tables[0].Rows[i]["treeview"].ToString();
                string[] treepath2 = treepath.Split(new char[] { '=' });
                if (treepath2.GetUpperBound(0) > 0)
                {
                    for (int i1 = 0; i1 <= treepath2.GetUpperBound(0); i1++)
                    {
                        treepath1 = treepath2[i1].Split(new char[] { '/' });
                        maxpath = treepath1.GetUpperBound(0);
                        if (treepath1.GetUpperBound(0) > 1)
                        {
                            topic = treepath1[maxpath];
                            getpathname = "select * from sub_unit_details where subject_no = " + subjectno + " and topic_no=" + topic + " order by topic_no";
                        }
                        else
                        {
                            topic = treepath1[0];
                            getpathname = "select * from sub_unit_details where subject_no = " + subjectno + "  order by topic_no";
                        }
                        //  lblerrorquestionadd_att.Visible = false;
                        SqlDataAdapter dagetpathname = new SqlDataAdapter(getpathname, con2);
                        DataSet dsgetpathname = new DataSet();
                        con2.Close();
                        con2.Open();
                        dagetpathname.Fill(dsgetpathname);
                        if (dsgetpathname.Tables[0].Rows.Count > 0)
                        {
                            if (selecttopic == "")
                            {
                                selecttopic = dsgetpathname.Tables[0].Rows[0]["unit_name"].ToString();
                            }
                            else
                            {
                                selecttopic = selecttopic + "," + dsgetpathname.Tables[0].Rows[0]["unit_name"].ToString();
                            }
                        }
                        if (selecttopic == "")
                        {
                            selecttopic = treepath1[0];
                        }
                    }
                }
                else
                {
                    treepath1 = treepath.Split(new char[] { '/' });
                    maxpath = treepath1.GetUpperBound(0);
                    if (treepath1.GetUpperBound(0) > 1)
                    {
                        topic = treepath1[maxpath];
                        getpathname = "select * from sub_unit_details where subject_no = " + subjectno + " and topic_no=" + topic + " order by topic_no";
                    }
                    else
                    {
                        topic = treepath1[0];
                        getpathname = "select * from sub_unit_details where subject_no = " + subjectno + "  order by topic_no";
                    }
                    // lblerrorquestionadd_att.Visible = false;
                    SqlDataAdapter dagetpathname = new SqlDataAdapter(getpathname, con2);
                    DataSet dsgetpathname = new DataSet();
                    con2.Close();
                    con2.Open();
                    dagetpathname.Fill(dsgetpathname);
                    if (dsgetpathname.Tables[0].Rows.Count > 0)
                    {
                        if (selecttopic == "")
                        {
                            selecttopic = dsgetpathname.Tables[0].Rows[0]["unit_name"].ToString();
                        }
                        else
                        {
                            selecttopic = selecttopic + "," + dsgetpathname.Tables[0].Rows[0]["unit_name"].ToString();
                        }
                    }
                    if (selecttopic == "")
                    {
                        selecttopic = treepath1[0];
                    }
                }
                if (treepath != "" && selecttopic != "")
                {
                    FpSpread3.Sheets[0].RowCount = FpSpread3.Sheets[0].RowCount + 1;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].Text = date1;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].Text = subject;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 3].Text = selecttopic;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 4].Text = path;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Tag = batchyear;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].Tag = degree_code;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].Tag = semester;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 3].Tag = subjectno;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 4].ForeColor = Color.Black;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 4].BackColor = Color.Blue;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 4].Font.Underline = true;
                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 4].Tag = batchyear + "@" + degree_code + "@" + semester + "@" + subject_no;//-------21/6/12 PRABHA
                }
            }
        }
        else
        {
            FpSpread3.Sheets[0].RowCount = 0;
            FpSpread3.Visible = false;
        }
        FpSpread3.Height = dsgetdate.Tables[0].Rows.Count * 100;
        FpSpread3.Sheets[0].PageSize = dsgetdate.Tables[0].Rows.Count * 50;
    }

    //public void retrivespreadfornotes(string batchyear, string degree_code, string semester, string subject_no, string datenew)
    //{
    //    FpSpread3.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //    FpSpread3.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
    //    FpSpread3.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
    //    FpSpread3.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
    //    FpSpread3.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
    //    FpSpread3.Sheets[0].DefaultStyle.Font.Bold = false;
    //    FpSpread3.Sheets[0].RowHeader.Visible = false;
    //    FpSpread3.Sheets[0].RowCount = 0;
    //    FpSpread3.Sheets[0].ColumnCount = 5;
    //    FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
    //    FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Date";
    //    FpSpread3.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Subject";
    //    FpSpread3.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Topic";
    //    FpSpread3.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Path";
    //    FpSpread3.Sheets[0].Columns[4].CellType = hypertext;
    //    FpSpread3.Sheets[0].Columns[4].ForeColor = Color.Black;
    //    FpSpread3.Sheets[0].Columns[0].Width = 60;
    //    FpSpread3.Sheets[0].Columns[1].Width = 80;
    //    FpSpread3.Sheets[0].Columns[2].Width = 120;
    //    FpSpread3.Sheets[0].Columns[3].Width = 80;
    //    FpSpread3.Sheets[0].Columns[4].Width = 200;
    //    FarPoint.Web.Spread.TextCellType txt1 = new FarPoint.Web.Spread.TextCellType();
    //    FpSpread3.Sheets[0].Columns[1].CellType = txt1;
    //    // string getdate = "select date,path,subject_name,subject.subject_no,treeview from attendance_document_save,subject where subject.subject_no=attendance_document_save.subject_no and batch_year=" + batchyear + " and degree_code=" + degree_code + " and semester=" + semester + " and treeview like'" + selectedpath + "%' and attendance_document_save.subject_no=" + subject_no + " and convert(varchar(20),attendance_document_save.date,105)='" + datenew + "'";
    //    string getdate = "select filename,date,subject_name,subject_no,treeview from notestbl where subject_no=" + subject_no + " and batch=" + batchyear + " and degree_code=" + degree_code + " and sem=" + semester + " and subject_no=" + subject_no + " and treeview like'" + selectedpath + "%'";//and convert(varchar(20),attendance_document_save.date,105)='" + datenew + "'";
    //    SqlDataAdapter dagetdate = new SqlDataAdapter(getdate, ssql);
    //    DataSet dsgetdate = new DataSet();
    //    ssql.Close();
    //    ssql.Open();
    //    dagetdate.Fill(dsgetdate);
    //    if (dsgetdate.Tables[0].Rows.Count > 0)
    //    {
    //        FpSpread3.Visible = true;
    //        string date  = string.Empty;
    //        string subject  = string.Empty;
    //        string path  = string.Empty;
    //        string subjectno  = string.Empty;
    //        string treepath  = string.Empty;
    //        int sno = 0;
    //        for (int i = 0; i < dsgetdate.Tables[0].Rows.Count; i++)
    //        {
    //            string selecttopic  = string.Empty;
    //            string date1  = string.Empty;
    //            string[] treepath1 = new string[10];
    //            string getpathname  = string.Empty;
    //            string topic  = string.Empty;
    //            int maxpath = 0;
    //            sno++;
    //            date = dsgetdate.Tables[0].Rows[i]["date"].ToString();
    //            string[] spdate = date.Split(new Char[] { '/' });
    //            string[] spyear = spdate[2].Split(new char[] { ' ' });
    //            if (spdate[0].Length == 1)
    //            {
    //                spdate[0] = "0" + spdate[0];
    //            }
    //            if (spdate[1].Length == 1)
    //            {
    //                spdate[1] = "0" + spdate[1];
    //            }
    //            date1 = spdate[1] + "-" + spdate[0] + "-" + spyear[0];
    //            subject = dsgetdate.Tables[0].Rows[i]["subject_name"].ToString();
    //            subjectno = dsgetdate.Tables[0].Rows[i]["subject_no"].ToString();
    //            path = dsgetdate.Tables[0].Rows[i]["filename"].ToString();
    //            treepath = dsgetdate.Tables[0].Rows[i]["treeview"].ToString();
    //            string[] treepath2 = treepath.Split(new char[] { '=' });
    //            if (treepath2.GetUpperBound(0) > 0)
    //            {
    //                for (int i1 = 0; i1 <= treepath2.GetUpperBound(0); i1++)
    //                {
    //                    treepath1 = treepath2[i1].Split(new char[] { '/' });
    //                    maxpath = treepath1.GetUpperBound(0);
    //                    if (treepath1.GetUpperBound(0) > 1)
    //                    {
    //                        topic = treepath1[maxpath];
    //                        getpathname = "select * from sub_unit_details where subject_no = " + subjectno + " and topic_no=" + topic + " order by topic_no";
    //                    }
    //                    else
    //                    {
    //                        topic = treepath1[0];
    //                        getpathname = "select * from sub_unit_details where subject_no = " + subjectno + "  order by topic_no";
    //                    }
    //                    lblerrorquestionadd_att.Visible = false;
    //                    SqlDataAdapter dagetpathname = new SqlDataAdapter(getpathname, con2);
    //                    DataSet dsgetpathname = new DataSet();
    //                    con2.Close();
    //                    con2.Open();
    //                    dagetpathname.Fill(dsgetpathname);
    //                    if (dsgetpathname.Tables[0].Rows.Count > 0)
    //                    {
    //                        if (selecttopic == "")
    //                        {
    //                            selecttopic = dsgetpathname.Tables[0].Rows[0]["unit_name"].ToString();
    //                        }
    //                        else
    //                        {
    //                            selecttopic = selecttopic + "," + dsgetpathname.Tables[0].Rows[0]["unit_name"].ToString();
    //                        }
    //                    }
    //                    if (selecttopic == "")
    //                    {
    //                        selecttopic = treepath1[0];
    //                    }
    //                }
    //            }
    //            else
    //            {
    //                treepath1 = treepath.Split(new char[] { '/' });
    //                maxpath = treepath1.GetUpperBound(0);
    //                if (treepath1.GetUpperBound(0) > 1)
    //                {
    //                    topic = treepath1[maxpath];
    //                    getpathname = "select * from sub_unit_details where subject_no = " + subjectno + " and topic_no=" + topic + " order by topic_no";
    //                }
    //                else
    //                {
    //                    topic = treepath1[0];
    //                    getpathname = "select * from sub_unit_details where subject_no = " + subjectno + "  order by topic_no";
    //                }
    //                lblerrorquestionadd_att.Visible = false;
    //                SqlDataAdapter dagetpathname = new SqlDataAdapter(getpathname, con2);
    //                DataSet dsgetpathname = new DataSet();
    //                con2.Close();
    //                con2.Open();
    //                dagetpathname.Fill(dsgetpathname);
    //                if (dsgetpathname.Tables[0].Rows.Count > 0)
    //                {
    //                    if (selecttopic == "")
    //                    {
    //                        selecttopic = dsgetpathname.Tables[0].Rows[0]["unit_name"].ToString();
    //                    }
    //                    else
    //                    {
    //                        selecttopic = selecttopic + "," + dsgetpathname.Tables[0].Rows[0]["unit_name"].ToString();
    //                    }
    //                }
    //                if (selecttopic == "")
    //                {
    //                    selecttopic = treepath1[0];
    //                }
    //            }
    //            if (treepath != "" && selecttopic != "")
    //            {
    //                FpSpread3.Sheets[0].RowCount = FpSpread3.Sheets[0].RowCount + 1;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].Text = date1;
    //                //FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].Tag = spdate[0] + "-" + spdate[1] + "-" + spyear[0];
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].Text = subject;
    //                // FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].Tag = subjectno;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 3].Text = selecttopic;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 4].Text = path;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Tag = batchyear;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].Tag = degree_code;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].Tag = semester;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 3].Tag = subjectno;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 4].ForeColor = Color.Black;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 4].BackColor = Color.Blue;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 4].Font.Underline = true;
    //                //batchyear + "@" + degree_code + "@" + semester + "@" + subject_no;
    //                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 4].Tag = batchyear + "@" + degree_code + "@" + semester + "@" + subject_no;
    //            }
    //        }
    //    }
    //    else
    //    {
    //        FpSpread3.Sheets[0].RowCount = 0;
    //        FpSpread3.Visible = false;
    //    }
    //    FpSpread3.Height = dsgetdate.Tables[0].Rows.Count * 50;
    //    FpSpread3.Sheets[0].PageSize = dsgetdate.Tables[0].Rows.Count * 50;
    //}

    protected void fpspread3_click(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        cellclick3 = true;
        // fpspread3prerender(sender, e);
        //Backbtn.Visible = true;
    }

    //protected void fpspread3prerender(Object sender, EventArgs e)
    //{
    //    if (cellclick3 == true)
    //    {
    //        string activerow  = string.Empty;
    //        string activecol  = string.Empty;
    //        activerow = FpSpread3.ActiveSheetView.ActiveRow.ToString();
    //        activecol = FpSpread3.ActiveSheetView.ActiveColumn.ToString();
    //        if (Convert.ToInt32(activecol) == 4)
    //        {
    //            path1 = FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), 4].Text;
    //            //string appPath = HttpContext.Current.Server.MapPath("~");
    //            //if (path1 != "")
    //            //{
    //            //    cellclick3 = false;
    //            //    appPath = path1.Replace("\\", "/");
    //            //    string strpath = "file:///" + appPath;
    //            //    try
    //            //    {
    //            //        strpath = "file://///192.168.1.31/x/file.txt";
    //            //    }
    //            //    catch
    //            //    {
    //            //        strpath = "file:///" + appPath;
    //            //    }
    //            //    System.Diagnostics.Process.Start(strpath);
    //            //}
    //            myHyperLink mycell = new myHyperLink((FarPoint.Web.Spread.Model.DefaultSheetDataModel)FpSpread3.Sheets[0].DataModel);
    //            FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), 4].CellType = mycell;
    //            cellclick3 = false;
    //        }
    //    }
    //    FpSpread3.Sheets[0].ActiveColumn = 0;
    //    FpSpread3.Sheets[0].ActiveRow = 0;
    //}

    protected void fpspread3prerender(Object sender, EventArgs e)
    {
        bool x = FpSpread3.Sheets[0].AutoPostBack;
        if (cellclick3 == true)
        {
            string activerow = string.Empty;
            string activecol = string.Empty;
            activerow = FpSpread3.ActiveSheetView.ActiveRow.ToString();
            activecol = FpSpread3.ActiveSheetView.ActiveColumn.ToString();
            if (Convert.ToInt32(activecol) == 4)
            {
                string fileName = string.Empty;
                //  string fileid = FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), Convert.ToInt32(activecol)].Tag + "@" + FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), Convert.ToInt32(activecol)].Text + "@" + FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), Convert.ToInt32(activecol)].Tag + "@" + FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), Convert.ToInt32(activecol)].Text;
                string fileid = FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), 4].Tag.ToString();
                path1 = FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), 4].Text;
                //---------------------------------------19/6/12 PRABHA
                SqlCommand cmd = new SqlCommand("SELECT filename,filedata,filetype FROM notestbl WHERE fileid='" + fileid + "' and filename='" + path1 + "'", con);// and degree_code="++", con);
                con.Open();
                SqlDataReader dReader = cmd.ExecuteReader();
                while (dReader.Read())
                {
                    Response.ContentType = dReader["filetype"].ToString();
                    Response.AddHeader("Content-Disposition", "attachment;filename=\"" + dReader["filename"] + "\"");
                    Response.BinaryWrite((byte[])dReader["filedata"]);
                    Response.End();
                    cellclick3 = false;
                    //fileName = dReader["filename"].ToString();
                    //byte[] documentBinary = (byte[])dReader["filedata"];
                    ////--------create a folder 20/6/12 PRABHA
                    //string activeDir = string.Empty;
                    //activeDir = Server.MapPath("Docs");
                    //if (!Directory.Exists(Server.MapPath("Docs")))
                    //{
                    //    Directory.CreateDirectory(Server.MapPath("docs"));
                    //}
                    //else
                    //{
                    //    Directory.Delete(Server.MapPath("Docs"), true);
                    //    Directory.CreateDirectory(Server.MapPath("docs"));
                    //}
                    ////  ---------------------------------------
                    //FileStream fStream = new FileStream(Server.MapPath("Docs") + @"\" + fileName, FileMode.Create);
                    //fStream.Write(documentBinary, 0, documentBinary.Length);
                    //fStream.Close();
                    //fStream.Dispose();
                    //Response.Redirect(@"Docs\" + fileName);
                    //myHyperLink mycell = new myHyperLink((FarPoint.Web.Spread.Model.DefaultSheetDataModel)FpSpread3.Sheets[0].DataModel);
                    //FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), 4].CellType = mycell;
                    //cellclick3 = false;
                }
                // //-------------------------------------------------------
            }
        }
    }

    protected void ddlcat_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (FpSpread3.Sheets[0].RowCount > 0)
        {
            FpSpread3.Visible = true;
        }
        else
        {
            FpSpread3.Visible = false;
        }
        int a = 0;
        string b = string.Empty;
        int s_no = 1, last = 0;
        string temp = string.Empty;
        if (ddlcat.SelectedIndex != 0 && ddlcat.SelectedIndex != 1)///1001170
        {
            spread_question.Sheets[0].RowHeader.Columns[0].Width = 50;
            FarPoint.Web.Spread.StyleInfo style = new FarPoint.Web.Spread.StyleInfo();
            spread_question.Sheets[0].RowHeader.DefaultStyle = new FarPoint.Web.Spread.StyleInfo(style);
            spread_question.Sheets[0].SheetCorner.Cells[0, 0].Font.Bold = true;
            spread_question.Sheets[0].Columns[1].Width = 50;
            spread_question.Sheets[0].RowCount = 0;
            spread_question.Sheets[0].ColumnHeader.RowCount = 1;
            spread_question.Sheets[0].ColumnCount = 3;
            spread_question.Sheets[0].Columns[0].Width = 150;
            spread_question.Sheets[0].Columns[1].Width = 50;
            spread_question.Sheets[0].Columns[2].Width = 250;
            spread_question.Sheets[0].SheetCorner.Cells[0, 0].Text = "Sl.No";
            spread_question.Sheets[0].SheetCorner.Cells[0, 0].Font.Bold = true;
            spread_question.Sheets[0].SheetCorner.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            spread_question.Sheets[0].RowHeader.DefaultStyle.HorizontalAlign = HorizontalAlign.Center;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 0].Text = "Topic";
            spread_question.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Mark";
            spread_question.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Questions";
            spread_question.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            string query_topic = "select treeviewpath,marks,question from attendance_question_addition where batch_year=" + Session["b_year"] + " and degree_code=" + Session["deg_code"] + " and semester=" + Session["semes"] + " and subject_no=" + Session["sub"] + " and marks=" + ddlcat.SelectedValue.ToString() + " ";
            con_roll.Close();
            con_roll.Open();
            SqlDataAdapter sda_top = new SqlDataAdapter(query_topic, con_roll);
            DataSet ds_top = new DataSet();
            sda_top.Fill(ds_top);
            if (0 < ds_top.Tables[0].Rows.Count)
            {
                for (int i = 0; i < ds_top.Tables[0].Rows.Count; i++)
                {
                    string dd = ds_top.Tables[0].Rows[i]["treeviewpath"].ToString();
                    string[] parentsplit = new string[2];
                    parentsplit = dd.Split(new char[] { '/' });
                    if (parentsplit[1] == "")
                    {
                        spread_question.Sheets[0].RowCount++;
                        spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 0].Text = parentsplit[0].ToString();
                        spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].Text = ddlcat.SelectedItem.Text;
                        spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                        spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 2].Text = ds_top.Tables[0].Rows[i]["question"].ToString();
                    }
                    else
                    {
                        a = 0;
                        string[] equal = dd.Split(new char[] { '=' });
                        if (equal.GetUpperBound(0) == 0)
                        {
                            string[] slahsplit = equal[0].Split(new char[] { '/' });
                            if (a == 0)
                            {
                                b = slahsplit[0];
                            }
                            a++;
                            for (int k = 0; k <= slahsplit.GetUpperBound(0); k++)
                            {
                                temp = slahsplit[k];
                            }
                            string query = "select unit_name from sub_unit_details where topic_no=" + temp + " and subject_no=" + Session["sub"] + "";
                            string getunit = GetFunction(query);
                            if (getunit != "")
                            {
                                spread_question.Sheets[0].RowCount++;
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 0].Text = b.ToString();
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].Text = ddlcat.SelectedItem.Text;
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 2].Text = getunit.ToString();
                            }
                        }
                        for (int j = 0; j < equal.GetUpperBound(0); j++)
                        {
                            string[] slahsplit = equal[j].Split(new char[] { '/' });
                            if (a == 0)
                            {
                                b = slahsplit[0];
                            }
                            a++;
                            for (int k = 0; k <= slahsplit.GetUpperBound(0); k++)
                            {
                                temp = slahsplit[k];
                            }
                            string query = "select unit_name from sub_unit_details where topic_no=" + temp + " and subject_no=" + Session["sub"] + "";
                            string getunit = GetFunction(query);
                            if (getunit != "")
                            {
                                spread_question.Sheets[0].RowCount++;
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 0].Text = b.ToString();
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].Text = ddlcat.SelectedItem.Text;
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 2].Text = getunit.ToString();
                            }
                        }
                    }
                }
            }
            spread_question.Visible = true;
            //spread_question.Sheets[0].PageSize = spread_question.Sheets[0].RowCount;
        }
        else if (ddlcat.SelectedItem.Text == "All")
        {
            spread_question.Sheets[0].RowHeader.Columns[0].Width = 40;
            FarPoint.Web.Spread.StyleInfo style = new FarPoint.Web.Spread.StyleInfo();
            spread_question.Sheets[0].RowHeader.DefaultStyle = new FarPoint.Web.Spread.StyleInfo(style);
            spread_question.Sheets[0].RowCount = 0;
            spread_question.Sheets[0].ColumnHeader.RowCount = 1;
            spread_question.Sheets[0].ColumnCount = 3;
            spread_question.Sheets[0].Columns[0].Width = 150;
            spread_question.Sheets[0].Columns[1].Width = 50;
            spread_question.Sheets[0].Columns[2].Width = 250;
            spread_question.Sheets[0].SheetCorner.Cells[0, 0].Text = "S.No";
            spread_question.Sheets[0].SheetCorner.Cells[0, 0].Font.Bold = true;
            spread_question.Sheets[0].SheetCorner.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            spread_question.Sheets[0].RowHeader.DefaultStyle.HorizontalAlign = HorizontalAlign.Center;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 0].Text = "Topic";
            spread_question.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Mark";
            spread_question.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Questions";
            spread_question.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            spread_question.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            string query_all = "select treeviewpath,marks,question from attendance_question_addition where batch_year=" + Session["b_year"] + " and degree_code=" + Session["deg_code"] + " and semester=" + Session["semes"] + " and subject_no=" + Session["sub"] + " order by marks";
            con_all.Close();
            con_all.Open();
            SqlDataAdapter sda_all = new SqlDataAdapter(query_all, con_all);
            DataSet ds_all = new DataSet();
            sda_all.Fill(ds_all);
            if (0 < ds_all.Tables[0].Rows.Count)
            {
                for (int i = 0; i < ds_all.Tables[0].Rows.Count; i++)
                {
                    string dd = ds_all.Tables[0].Rows[i]["treeviewpath"].ToString();
                    string[] parentsplit = new string[2];
                    parentsplit = dd.Split(new char[] { '/' });
                    if (parentsplit[1] == "")
                    {
                        spread_question.Sheets[0].RowCount++;
                        spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 0].Text = parentsplit[0].ToString();
                        spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].Text = ds_all.Tables[0].Rows[i]["marks"].ToString();
                        spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                        spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 2].Text = ds_all.Tables[0].Rows[i]["question"].ToString();
                    }
                    else
                    {
                        a = 0;
                        string[] equal = dd.Split(new char[] { '=' });
                        if (equal.GetUpperBound(0) == 0)
                        {
                            string[] slahsplit = equal[0].Split(new char[] { '/' });
                            if (a == 0)
                            {
                                b = slahsplit[0];
                            }
                            a++;
                            for (int k = 0; k <= slahsplit.GetUpperBound(0); k++)
                            {
                                temp = slahsplit[k];
                            }
                            string query = "select unit_name from sub_unit_details where topic_no=" + temp + " and subject_no=" + Session["sub"] + "";
                            string getunit = GetFunction(query);
                            if (getunit != "")
                            {
                                spread_question.Sheets[0].RowCount++;
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 0].Text = b.ToString();
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].Text = ds_all.Tables[0].Rows[i]["marks"].ToString();
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 2].Text = getunit.ToString();
                            }
                        }
                        for (int j = 0; j < equal.GetUpperBound(0); j++)
                        {
                            string[] slahsplit = equal[j].Split(new char[] { '/' });
                            if (a == 0)
                            {
                                b = slahsplit[0];
                            }
                            a++;
                            for (int k = 0; k <= slahsplit.GetUpperBound(0); k++)
                            {
                                temp = slahsplit[k];
                            }
                            string query = "select unit_name from sub_unit_details where topic_no=" + temp + " and subject_no=" + Session["sub"] + "";
                            string getunit = GetFunction(query);
                            if (getunit != "")
                            {
                                spread_question.Sheets[0].RowCount++;
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 0].Text = b.ToString();
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].Text = ds_all.Tables[0].Rows[i]["marks"].ToString();
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 2].Text = getunit.ToString();
                            }
                        }
                    }
                }
                spread_question.Visible = true;
                //spread_question.Sheets[0].PageSize = spread_question.Sheets[0].RowCount;
            }
        }
        else if (ddlcat.SelectedItem.Text == "Select")
        {
            spread_question.Visible = false;
            //spread_question.Sheets[0].ColumnCount = 0;
            //spread_question.Sheets[0].RowCount = 0;
            //spread_question.Sheets[0].ColumnCount = 4;
            //spread_question.Sheets[0].RowCount = 1;
            //spread_question.ColumnHeader.Columns.Default.Width = 150;
            //spread_question.ColumnHeader.Visible = false;
            //spread_question.Sheets[0].SpanModel.Add(0, 0, 1, 4);
            //spread_question.Width = 600;
            //spread_question.Height = 150;
            //spread_question.Sheets[0].Cells[0, 0].Text = "No Records Found";
            //spread_question.Sheets[0].Cells[0, 0].Locked = true;
            //spread_question.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            //spread_question.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
            //spread_question.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
            //spread_question.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
            //spread_question.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            //spread_question.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            //spread_question.Visible = true;
        }
        spread_question.Width = 450;
        spread_question.Height = 500;
    }

    public void bindtree()
    {
        //if (RadioSubject.Checked == true)
        //{
        TreeView2.Nodes.Clear();
        //TreeView1.Nodes.Clear();
        string subject = string.Empty;
        string subjectno = ddlsubjects.SelectedValue.ToString();
        string noofatns = getfunction(subject);
        subject = ddlsubjects.SelectedItem.Text;
        mm9 = new System.Web.UI.WebControls.TreeNode(subject + " " + "(" + noofatns + ")");
        mm1 = new System.Web.UI.WebControls.TreeNode(subject + " " + "(" + noofatns + ")");
        //TreeView1.Nodes.Add(mm9);
        TreeView2.Nodes.Add(mm1);
        string gettreequery = "select unit_name,topic_no from sub_unit_details where parent_code=0 and subject_no = " + subjectno + " and unit_name is not null order by parent_code,topic_no";
        SqlDataAdapter dagettreequery = new SqlDataAdapter(gettreequery, con1);
        DataSet dsgettreequery = new DataSet();
        con1.Close();
        con1.Open();
        dagettreequery.Fill(dsgettreequery);
        if (dsgettreequery.Tables[0].Rows.Count > 0)
        {
            for (int i = 0; i < dsgettreequery.Tables[0].Rows.Count; i++)
            {
                string getparent_parentcode = dsgettreequery.Tables[0].Rows[i]["topic_no"].ToString();
                noofatns = getfunction(getparent_parentcode);
                mm1.ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgettreequery.Tables[0].Rows[i]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgettreequery.Tables[0].Rows[i]["topic_no"].ToString()));
                mm9.ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgettreequery.Tables[0].Rows[i]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgettreequery.Tables[0].Rows[i]["topic_no"].ToString()));
                string getchild = "select unit_name,topic_no from sub_unit_details where parent_code=" + getparent_parentcode + "";
                SqlDataAdapter dagetchild = new SqlDataAdapter(getchild, con2);
                DataSet dsgetchild = new DataSet();
                con2.Close();
                con2.Open();
                dagetchild.Fill(dsgetchild);
                if (dsgetchild.Tables[0].Rows.Count > 0)
                {
                    for (int i1 = 0; i1 < dsgetchild.Tables[0].Rows.Count; i1++)
                    {
                        string getparent_parentcode1 = dsgetchild.Tables[0].Rows[i1]["topic_no"].ToString();
                        noofatns = getfunction(getparent_parentcode + "/" + getparent_parentcode1);
                        mm9.ChildNodes[i].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild.Tables[0].Rows[i1]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild.Tables[0].Rows[i1]["topic_no"].ToString()));
                        mm1.ChildNodes[i].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild.Tables[0].Rows[i1]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild.Tables[0].Rows[i1]["topic_no"].ToString()));
                        string getchild1 = "select unit_name,topic_no from sub_unit_details where parent_code=" + getparent_parentcode1 + "";
                        SqlDataAdapter dagetchild1 = new SqlDataAdapter(getchild1, con2);
                        DataSet dsgetchild1 = new DataSet();
                        con2.Close();
                        con2.Open();
                        dagetchild1.Fill(dsgetchild1);
                        if (dsgetchild1.Tables[0].Rows.Count > 0)
                        {
                            for (int i2 = 0; i2 < dsgetchild1.Tables[0].Rows.Count; i2++)
                            {
                                string getparent_parentcode2 = dsgetchild1.Tables[0].Rows[i2]["topic_no"].ToString();
                                noofatns = getfunction(getparent_parentcode + "/" + getparent_parentcode1 + "/" + getparent_parentcode2);
                                mm9.ChildNodes[i].ChildNodes[i1].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild1.Tables[0].Rows[i2]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild1.Tables[0].Rows[i2]["topic_no"].ToString()));
                                mm1.ChildNodes[i].ChildNodes[i1].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild1.Tables[0].Rows[i2]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild1.Tables[0].Rows[i2]["topic_no"].ToString()));
                                string getchild2 = "select unit_name,topic_no from sub_unit_details where parent_code=" + getparent_parentcode2 + "";
                                SqlDataAdapter dagetchild2 = new SqlDataAdapter(getchild2, con2);
                                DataSet dsgetchild2 = new DataSet();
                                con2.Close();
                                con2.Open();
                                dagetchild2.Fill(dsgetchild2);
                                if (dsgetchild2.Tables[0].Rows.Count > 0)
                                {
                                    for (int i3 = 0; i3 < dsgetchild2.Tables[0].Rows.Count; i3++)
                                    {
                                        string getparent_parentcode3 = dsgetchild2.Tables[0].Rows[i3]["topic_no"].ToString();
                                        noofatns = getfunction(getparent_parentcode + "/" + getparent_parentcode1 + "/" + getparent_parentcode2 + "/" + getparent_parentcode3);
                                        mm9.ChildNodes[i].ChildNodes[i1].ChildNodes[i2].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild2.Tables[0].Rows[i3]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild2.Tables[0].Rows[i3]["topic_no"].ToString()));
                                        mm1.ChildNodes[i].ChildNodes[i1].ChildNodes[i2].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild2.Tables[0].Rows[i3]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild2.Tables[0].Rows[i3]["topic_no"].ToString()));
                                        string getchild3 = "select unit_name,topic_no from sub_unit_details where parent_code=" + getparent_parentcode3 + "";
                                        SqlDataAdapter dagetchild3 = new SqlDataAdapter(getchild3, con2);
                                        DataSet dsgetchild3 = new DataSet();
                                        con2.Close();
                                        con2.Open();
                                        dagetchild3.Fill(dsgetchild3);
                                        if (dsgetchild3.Tables[0].Rows.Count > 0)
                                        {
                                            for (int i4 = 0; i4 < dsgetchild3.Tables[0].Rows.Count; i4++)
                                            {
                                                string getparent_parentcode4 = dsgetchild3.Tables[0].Rows[i4]["topic_no"].ToString();
                                                noofatns = getfunction(getparent_parentcode + "/" + getparent_parentcode1 + "/" + getparent_parentcode2 + "/" + getparent_parentcode3 + "/" + getparent_parentcode4);
                                                mm9.ChildNodes[i].ChildNodes[i1].ChildNodes[i2].ChildNodes[i3].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild3.Tables[0].Rows[i4]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild3.Tables[0].Rows[i4]["topic_no"].ToString()));
                                                mm1.ChildNodes[i].ChildNodes[i1].ChildNodes[i2].ChildNodes[i3].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild3.Tables[0].Rows[i4]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild3.Tables[0].Rows[i4]["topic_no"].ToString()));
                                                string getchild4 = "select unit_name,topic_no from sub_unit_details where parent_code=" + getparent_parentcode4 + "";
                                                SqlDataAdapter dagetchild4 = new SqlDataAdapter(getchild4, con2);
                                                DataSet dsgetchild4 = new DataSet();
                                                con2.Close();
                                                con2.Open();
                                                dagetchild4.Fill(dsgetchild4);
                                                if (dsgetchild4.Tables[0].Rows.Count > 0)
                                                {
                                                    for (int i5 = 0; i5 < dsgetchild4.Tables[0].Rows.Count; i5++)
                                                    {
                                                        string getparent_parentcode5 = dsgetchild4.Tables[0].Rows[i5]["topic_no"].ToString();
                                                        noofatns = getfunction(getparent_parentcode + "/" + getparent_parentcode1 + "/" + getparent_parentcode2 + "/" + getparent_parentcode3 + "/" + getparent_parentcode4 + "/" + getparent_parentcode5);
                                                        mm9.ChildNodes[i].ChildNodes[i1].ChildNodes[i2].ChildNodes[i3].ChildNodes[i4].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild4.Tables[0].Rows[i5]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild4.Tables[0].Rows[i5]["topic_no"].ToString()));
                                                        mm1.ChildNodes[i].ChildNodes[i1].ChildNodes[i2].ChildNodes[i3].ChildNodes[i4].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild4.Tables[0].Rows[i5]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild4.Tables[0].Rows[i5]["topic_no"].ToString()));
                                                        string getchild5 = "select unit_name,topic_no from sub_unit_details where parent_code=" + getparent_parentcode5 + "";
                                                        SqlDataAdapter dagetchild5 = new SqlDataAdapter(getchild5, con2);
                                                        DataSet dsgetchild5 = new DataSet();
                                                        con2.Close();
                                                        con2.Open();
                                                        dagetchild5.Fill(dsgetchild5);
                                                        if (dsgetchild5.Tables[0].Rows.Count > 0)
                                                        {
                                                            for (int i6 = 0; i6 < dsgetchild5.Tables[0].Rows.Count; i6++)
                                                            {
                                                                string getparent_parentcode6 = dsgetchild5.Tables[0].Rows[i6]["topic_no"].ToString();
                                                                noofatns = getfunction(getparent_parentcode + "/" + getparent_parentcode1 + "/" + getparent_parentcode2 + "/" + getparent_parentcode3 + "/" + getparent_parentcode4 + "/" + getparent_parentcode5 + "/" + getparent_parentcode6);
                                                                mm9.ChildNodes[i].ChildNodes[i1].ChildNodes[i2].ChildNodes[i3].ChildNodes[i4].ChildNodes[i5].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild5.Tables[0].Rows[i6]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild5.Tables[0].Rows[i6]["topic_no"].ToString()));
                                                                mm1.ChildNodes[i].ChildNodes[i1].ChildNodes[i2].ChildNodes[i3].ChildNodes[i4].ChildNodes[i5].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild5.Tables[0].Rows[i6]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild5.Tables[0].Rows[i6]["topic_no"].ToString()));
                                                                string getchild6 = "select unit_name,topic_no from sub_unit_details where parent_code=" + getparent_parentcode6 + "";
                                                                SqlDataAdapter dagetchild6 = new SqlDataAdapter(getchild6, con2);
                                                                DataSet dsgetchild6 = new DataSet();
                                                                con2.Close();
                                                                con2.Open();
                                                                dagetchild6.Fill(dsgetchild6);
                                                                if (dsgetchild6.Tables[0].Rows.Count > 0)
                                                                {
                                                                    for (int i7 = 0; i7 < dsgetchild6.Tables[0].Rows.Count; i7++)
                                                                    {
                                                                        string getparent_parentcode7 = dsgetchild6.Tables[0].Rows[i6]["topic_no"].ToString();
                                                                        noofatns = getfunction(getparent_parentcode + "/" + getparent_parentcode1 + "/" + getparent_parentcode2 + "/" + getparent_parentcode3 + "/" + getparent_parentcode4 + "/" + getparent_parentcode5 + "/" + getparent_parentcode6 + "/" + getparent_parentcode7);
                                                                        mm9.ChildNodes[i].ChildNodes[i1].ChildNodes[i2].ChildNodes[i3].ChildNodes[i4].ChildNodes[i5].ChildNodes[i6].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild6.Tables[0].Rows[i7]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild6.Tables[0].Rows[i7]["topic_no"].ToString()));
                                                                        mm1.ChildNodes[i].ChildNodes[i1].ChildNodes[i2].ChildNodes[i3].ChildNodes[i4].ChildNodes[i5].ChildNodes[i6].ChildNodes.Add(new System.Web.UI.WebControls.TreeNode(dsgetchild6.Tables[0].Rows[i7]["unit_name"].ToString() + " " + "(" + noofatns + ")", dsgetchild6.Tables[0].Rows[i7]["topic_no"].ToString()));
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        //}
    }

    public string getfunction(string parent)
    {
        string count = "0";
        string subject = ddlsubjects.SelectedItem.Text;
        if (subject != "")
        {
            string path = string.Empty;
            if (parent != "")
            {
                path = subject + " " + "/" + ddlsubjects.SelectedValue.ToString() + "/" + parent;
            }
            else
            {
                path = subject;
            }
            string getcount = "select count(*) as tot from attendance_question_addition where treeviewpath like '" + path + "%'";
            SqlDataAdapter dagetcount = new SqlDataAdapter(getcount, con1);
            DataSet dsgetcount = new DataSet();
            con1.Close();
            con1.Open();
            dagetcount.Fill(dsgetcount);
            if (dsgetcount.Tables[0].Rows.Count > 0)
            {
                count = dsgetcount.Tables[0].Rows[0]["tot"].ToString();
            }
        }
        return count;
    }

    protected void TreeView2_SelectedNodeChanged(object sender, EventArgs e)
    {
        FarPoint.Web.Spread.StyleInfo style2 = new FarPoint.Web.Spread.StyleInfo();
        spread_question.Sheets[0].RowHeader.DefaultStyle = new FarPoint.Web.Spread.StyleInfo(style2);
        spread_question.Sheets[0].RowCount = 0;
        spread_question.Sheets[0].ColumnHeader.RowCount = 1;
        spread_question.Sheets[0].ColumnCount = 4;
        spread_question.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Center;
        spread_question.Sheets[0].Columns[0].Width = 150;
        spread_question.Sheets[0].Columns[1].Width = 100;
        spread_question.Sheets[0].Columns[2].Width = 50;
        spread_question.Sheets[0].Columns[3].Width = 250;
        spread_question.Sheets[0].SheetCorner.Cells[0, 0].Text = "S.No";
        spread_question.Sheets[0].SheetCorner.Cells[0, 0].Font.Bold = true;
        spread_question.Sheets[0].SheetCorner.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
        spread_question.Sheets[0].RowHeader.DefaultStyle.HorizontalAlign = HorizontalAlign.Center;
        spread_question.Sheets[0].ColumnHeader.Cells[0, 0].Text = "Date";
        spread_question.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
        spread_question.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
        spread_question.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Topic";
        spread_question.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
        spread_question.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
        spread_question.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Mark";
        spread_question.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
        spread_question.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
        spread_question.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Questions";
        spread_question.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
        spread_question.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
        spread_question.Sheets[0].RowCount = 0;
        string path = string.Empty;
        if (TreeView2.SelectedNode != null)
        {
            path = TreeView2.SelectedNode.ValuePath;
            string[] path1 = path.Split(new char[] { '(' });
            if (path1.GetUpperBound(0) > 0)
            {
                string path2 = path1[1].ToString();
                string[] path3 = path.Split(new char[] { ')' });
                if (path3.GetUpperBound(0) >= 1)
                {
                    string path4 = path3[1].ToString();
                    if (path3[1].ToString() != "")
                    {
                        path = path1[0].ToString() + "/" + Session["sub"] + path3[1].ToString() + "%";
                    }
                    else
                    {
                        path = path1[0].ToString() + "/" + "%";
                    }
                }
                else
                {
                    path = path1[0].ToString();
                }
            }
        }
        string[] f = path.Split(new char[] { '/' });
        string query = string.Empty;
        query = "select distinct convert(varchar(10),date,103) as date,marks,question from attendance_question_addition where treeviewpath like '" + path + "'";
        con_tree.Open();
        SqlDataAdapter sda_tree = new SqlDataAdapter(query, con_tree);
        DataSet ds_tree = new DataSet();
        sda_tree.Fill(ds_tree);
        if (0 < ds_tree.Tables[0].Rows.Count)
        {
            for (int d = 0; d < ds_tree.Tables[0].Rows.Count; d++)
            {
                spread_question.Sheets[0].RowCount++;
                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 0].Text = ds_tree.Tables[0].Rows[d]["date"].ToString();
                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 1].Text = f[0].ToString();
                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 2].Text = ds_tree.Tables[0].Rows[d]["marks"].ToString();
                spread_question.Sheets[0].Cells[spread_question.Sheets[0].RowCount - 1, 3].Text = ds_tree.Tables[0].Rows[d]["question"].ToString();
            }
            spread_question.Visible = true;
            spread_question.Sheets[0].PageSize = spread_question.Sheets[0].RowCount;
        }
        else
        {
            spread_question.Visible = false;
        }
        spread_question.Width = 450;
    }

    public void getspecial_hr(string roll_no, string cur_start_date_date, string cur_end_date_date, string deg, string sem)
    {
        //  try
        {
            con_splhr_query_master.Close();
            con_splhr_query_master.Open();
            DataSet ds_splhr_query_master = new DataSet();
            //  no_stud_flag = false;
            string splhr_query_master = "select attendance from specialhr_attendance sa,registration r where hrdet_no in(select hrdet_no from specialhr_details where hrentry_no in (select hrentry_no from  specialhr_master where batch_year=" + byr + " and semester=" + sem + " and degree_code=" + deg + " and date='" + dumm_from_date + "')  ) and r.roll_no=sa.roll_no and batch_year=" + byr + " and current_semester=" + sem + " and degree_code=" + deg + "  and (CC = 0)  AND (DelFlag = 0)  AND (Exam_Flag <> 'debar') and sa.roll_no='" + roll_no + "'  order by r.roll_no asc";
            SqlDataReader dr_splhr_query_master;
            cmd = new SqlCommand(splhr_query_master, con_splhr_query_master);
            dr_splhr_query_master = cmd.ExecuteReader();
            while (dr_splhr_query_master.Read())
            {
                if (dr_splhr_query_master.HasRows)
                {
                    value = dr_splhr_query_master[0].ToString();
                    if (value != null && value != "0" && value != "7" && value != "" && value != "12")
                    {
                        if (tempvalue != value)
                        {
                            tempvalue = value;
                            for (int j = 0; j < count; j++)
                            {
                                if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                {
                                    ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                    j = count;
                                }
                            }
                        }
                        if (ObtValue == 1)
                        {
                            per_abshrs_spl += 1;
                        }
                        else if (ObtValue == 2)
                        {
                            notconsider_value += 1;
                            njhr += 1;
                        }
                        else if (ObtValue == 0)
                        {
                            tot_per_hrs_spl += 1;
                        }
                        if (value == "3")
                        {
                            tot_ondu_spl += 1;
                        }
                        else if (value == "10")
                        {
                            per_leave += 1;
                        }
                        tot_conduct_hr_spl++;
                    }
                    else if (value == "7")
                    {
                        per_hhday_spl += 1;
                        tot_conduct_hr_spl--;
                    }
                    else
                    {
                        unmark_spl += 1;
                        tot_conduct_hr_spl--;
                    }
                }
            }
            per_abshrs_spl_fals = per_abshrs_spl;
            tot_per_hrs_spl_fals = tot_per_hrs_spl;
            per_leave_fals = per_leave;
            tot_conduct_hr_spl_fals = tot_conduct_hr_spl;
            tot_ondu_spl_fals = tot_ondu_spl;
        }
        //  catch
        {
        }
    }

    // Key management for scrambling support
    public byte[] ScrambleKey
    {
        set
        {
            byte[] key = value;
            if (null == key)
            {
                // Use existing key if non provided
                key = ScrambleKey;
            }
            Session["ScrambleKey"] = key;
        }
        get
        {
            byte[] key = (byte[])Session["ScrambleKey"];
            if (null == key)
            {
                RC2CryptoServiceProvider rc2 = new RC2CryptoServiceProvider();
                rc2.GenerateKey();
                key = rc2.Key;
                Session["ScrambleKey"] = key;
            }
            return key;
        }
    }

    // Initialization vector management for scrambling support
    public byte[] ScrambleIV
    {
        set
        {
            byte[] key = value;
            if (null == key)
            {
                key = ScrambleIV;
            }
            Session["ScrambleIV"] = key;
        }
        get
        {
            byte[] key = (byte[])Session["ScrambleIV"];
            if (null == key)
            {
                RC2CryptoServiceProvider rc2 = new RC2CryptoServiceProvider();
                rc2.GenerateIV();
                key = rc2.IV;
                Session["ScrambleIV"] = key;
            }
            return key;
        }
    }

    public string Encrypt(string message)
    {
        UTF8Encoding textConverter = new UTF8Encoding();
        RC2CryptoServiceProvider rc2CSP = new RC2CryptoServiceProvider();
        //Convert the data to a byte array.
        byte[] toEncrypt = textConverter.GetBytes(message);
        //Get an encryptor.
        ICryptoTransform encryptor = rc2CSP.CreateEncryptor(ScrambleKey, ScrambleIV);
        //Encrypt the data.
        MemoryStream msEncrypt = new MemoryStream();
        CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);
        //Write all data to the crypto stream and flush it.
        // Encode length as first 4 bytes
        byte[] length = new byte[4];
        length[0] = (byte)(message.Length & 0xFF);
        length[1] = (byte)((message.Length >> 8) & 0xFF);
        length[2] = (byte)((message.Length >> 16) & 0xFF);
        length[3] = (byte)((message.Length >> 24) & 0xFF);
        csEncrypt.Write(length, 0, 4);
        csEncrypt.Write(toEncrypt, 0, toEncrypt.Length);
        csEncrypt.FlushFinalBlock();
        //Get encrypted array of bytes.
        byte[] encrypted = msEncrypt.ToArray();
        // Convert to Base64 string
        string b64 = Convert.ToBase64String(encrypted);
        // Protect against URLEncode/Decode problem
        string b64mod = b64.Replace('+', '@');
        // Return a URL encoded string
        return HttpUtility.UrlEncode(b64mod);
    }

    public string Decrypt(string scrambledMessage)
    {
        UTF8Encoding textConverter = new UTF8Encoding();
        RC2CryptoServiceProvider rc2CSP = new RC2CryptoServiceProvider();
        // URL decode , replace and convert from Base64
        string b64mod = HttpUtility.UrlDecode(scrambledMessage);
        // Replace '@' back to '+' (avoid URLDecode problem)
        string b64 = b64mod.Replace('@', '+');
        // Base64 decode
        byte[] encrypted = Convert.FromBase64String(b64);
        //Get a decryptor that uses the same key and IV as the encryptor.
        ICryptoTransform decryptor = rc2CSP.CreateDecryptor(ScrambleKey, ScrambleIV);
        //Now decrypt the previously encrypted message using the decryptor
        // obtained in the above step.
        MemoryStream msDecrypt = new MemoryStream(encrypted);
        CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
        byte[] fromEncrypt = new byte[encrypted.Length - 4];
        //Read the data out of the crypto stream.
        byte[] length = new byte[4];
        csDecrypt.Read(length, 0, 4);
        csDecrypt.Read(fromEncrypt, 0, fromEncrypt.Length);
        int len = (int)length[0] | (length[1] << 8) | (length[2] << 16) | (length[3] << 24);
        //Convert the byte array back into a string.
        return textConverter.GetString(fromEncrypt).Substring(0, len);
    }

    public string getYear(int semester)
    {
        int sem = 0;
        string getYear = string.Empty;
        if (Convert.ToInt16(semester) % 2 == 0)
        {
            sem = (semester / 2);
        }
        else
        {
            sem = (semester + 1) / 2;
        }
        switch (sem)
        {
            case 1:
                getYear = "I";
                break;
            case 2:
                getYear = "II";
                break;
            case 3:
                getYear = "III";
                break;
            case 4:
                getYear = "IV";
                break;
            case 5:
                getYear = "V";
                break;
        }
        return getYear;
    }

    private void PopulateTreeview(string subjectno)
    {
        DataSet dstopic = new DataSet();
        this.subjecttree.Nodes.Clear();
        HierarchyTrees hierarchyTrees = new HierarchyTrees();
        HierarchyTrees.HTree objHTree = null;
        string query = "select topic_no,parent_code,unit_name from sub_unit_details where subject_no='" + subjectno + "'  order by parent_code,topic_no";
        dstopic = d2.select_method_wo_parameter(query, "Text");
        for (int i = 0; i < dstopic.Tables[0].Rows.Count; i++)
        {
            objHTree = new HierarchyTrees.HTree();
            objHTree.topic_no = int.Parse(dstopic.Tables[0].Rows[i]["Topic_no"].ToString());
            objHTree.parent_code = int.Parse(dstopic.Tables[0].Rows[i]["parent_code"].ToString());
            objHTree.unit_name = dstopic.Tables[0].Rows[i]["unit_name"].ToString();
            hierarchyTrees.Add(objHTree);
        }
        foreach (HierarchyTrees.HTree hTree in hierarchyTrees)
        {
            HierarchyTrees.HTree parentNode = hierarchyTrees.Find(delegate(HierarchyTrees.HTree emp) { return emp.topic_no == hTree.parent_code; });
            if (parentNode != null)
            {
                foreach (TreeNode tn in subjecttree.Nodes)
                {
                    if (tn.Value == parentNode.topic_no.ToString())
                    {
                        tn.ChildNodes.Add(new TreeNode(hTree.unit_name.ToString(), hTree.topic_no.ToString()));
                    }
                    if (tn.ChildNodes.Count > 0)
                    {
                        foreach (TreeNode ctn in tn.ChildNodes)
                        {
                            RecursiveChild(ctn, parentNode.topic_no.ToString(), hTree);
                        }
                    }
                }
            }
            else
            {
                subjecttree.Nodes.Add(new TreeNode(hTree.unit_name, hTree.topic_no.ToString()));
            }
            subjecttree.ExpandAll();
        }
    }

    public void RecursiveChild(TreeNode tn, string searchValue, HierarchyTrees.HTree hTree)
    {
        if (tn.Value == searchValue)
        {
            tn.ChildNodes.Add(new TreeNode(hTree.unit_name.ToString(), hTree.topic_no.ToString()));
        }
        if (tn.ChildNodes.Count > 0)
        {
            foreach (TreeNode ctn in tn.ChildNodes)
            {
                RecursiveChild(ctn, searchValue, hTree);
            }
        }
    }

    public class HierarchyTrees : List<HierarchyTrees.HTree>
    {
        public class HTree
        {
            private int m_topic_no;
            private int m_parent_code;
            private string m_unit_name;
            public int topic_no
            {
                get { return m_topic_no; }
                set { m_topic_no = value; }
            }
            public int parent_code
            {
                get { return m_parent_code; }
                set { m_parent_code = value; }
            }
            public string unit_name
            {
                get { return m_unit_name; }
                set { m_unit_name = value; }
            }
        }
    }

    protected void Fpsmarks_CellClick(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        questionflag = true;
        Fpsmarks.Visible = true;
        lblqa.Visible = true;
        txttype.Visible = true;
        lblmarks.Visible = true;
        ddlmarks.Visible = true;
        ptype.Visible = true;
    }

    protected void Fpsmarks_PreRender(Object sender, EventArgs e)
    {
        try
        {
            if (questionflag == true)
            {
                FpQuestions.Visible = false;
                FpQuestions.Sheets[0].ColumnHeader.RowCount = 0;
                FpQuestions.SheetCorner.ColumnCount = 0;
                FpQuestions.Sheets[0].ColumnCount = 1;
                FpQuestions.Sheets[0].RowCount = 0;
                string ar = Fpsmarks.Sheets[0].ActiveRow.ToString();
                string ac = Fpsmarks.Sheets[0].ActiveColumn.ToString();
                if (Fpsmarks.Sheets[0].Cells[int.Parse(ar), 2].Tag != null && ac != "0")
                {
                    string subject = Fpsmarks.Sheets[0].Cells[int.Parse(ar), 2].Tag.ToString();
                    if (int.Parse(ac) != 4)
                    {
                        PopulateTreeview(subject);
                        int columnvalue = 0;
                        string subjecttext = string.Empty;
                        string topiccode = string.Empty;
                        if (subjecttree.Nodes.Count > 0)
                        {
                            // subjecttree.Visible = true;
                            for (int n1 = 0; n1 < subjecttree.Nodes.Count; n1++)
                            {
                                if (columnvalue <= 1)
                                {
                                    columnvalue = 1;
                                }
                                if (subjecttree.Nodes[n1].ChildNodes.Count <= 0)
                                {
                                    if (subjecttext == "")
                                    {
                                        subjecttext = subjecttree.Nodes[n1].Text;
                                        topiccode = subjecttree.Nodes[n1].Value;
                                    }
                                    else
                                    {
                                        subjecttext = subjecttext + '^' + subjecttree.Nodes[n1].Text;
                                        topiccode = topiccode + '^' + subjecttree.Nodes[n1].Value;
                                    }
                                }
                                else
                                {
                                    for (int n2 = 0; n2 < subjecttree.Nodes[n1].ChildNodes.Count; n2++)
                                    {
                                        if (columnvalue <= 2)
                                        {
                                            columnvalue = 2;
                                        }
                                        if (subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes.Count <= 0)
                                        {
                                            if (subjecttext == "")
                                            {
                                                subjecttext = subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text;
                                                topiccode = subjecttree.Nodes[n1].ChildNodes[n2].Value;
                                            }
                                            else
                                            {
                                                subjecttext = subjecttext + '^' + subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text;
                                                topiccode = topiccode + '^' + subjecttree.Nodes[n1].ChildNodes[n2].Value;
                                            }
                                        }
                                        else
                                        {
                                            for (int n3 = 0; n3 < subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes.Count; n3++)
                                            {
                                                if (columnvalue <= 3)
                                                {
                                                    columnvalue = 3;
                                                }
                                                if (subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes.Count <= 0)
                                                {
                                                    if (subjecttext == "")
                                                    {
                                                        subjecttext = subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Text;
                                                        topiccode = subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Value;
                                                    }
                                                    else
                                                    {
                                                        subjecttext = subjecttext + '^' + subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Text;
                                                        topiccode = topiccode + '^' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Value;
                                                    }
                                                }
                                                else
                                                {
                                                    for (int n4 = 0; n4 < subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes.Count; n4++)
                                                    {
                                                        if (columnvalue <= 4)
                                                        {
                                                            columnvalue = 4;
                                                        }
                                                        if (subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes.Count <= 0)
                                                        {
                                                            if (subjecttext == "")
                                                            {
                                                                subjecttext = subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].Text;
                                                                topiccode = subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].Value;
                                                            }
                                                            else
                                                            {
                                                                subjecttext = subjecttext + '^' + subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].Text;
                                                                topiccode = topiccode + '^' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].Value;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            for (int n5 = 0; n5 < subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes.Count; n5++)
                                                            {
                                                                if (columnvalue <= 5)
                                                                {
                                                                    columnvalue = 5;
                                                                }
                                                                if (subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes.Count <= 0)
                                                                {
                                                                    if (subjecttext == "")
                                                                    {
                                                                        subjecttext = subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].Text;
                                                                        topiccode = subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].Value;
                                                                    }
                                                                    else
                                                                    {
                                                                        subjecttext = subjecttext + '^' + subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].Text;
                                                                        topiccode = topiccode + '^' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].Value;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    for (int n6 = 0; n6 < subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes.Count; n6++)
                                                                    {
                                                                        if (columnvalue <= 6)
                                                                        {
                                                                            columnvalue = 6;
                                                                        }
                                                                        if (subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes[n6].ChildNodes.Count <= 0)
                                                                        {
                                                                            if (subjecttext == "")
                                                                            {
                                                                                subjecttext = subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes[n6].Text;
                                                                                topiccode = subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes[n6].Value;
                                                                            }
                                                                            else
                                                                            {
                                                                                subjecttext = subjecttext + '^' + subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes[n6].Text;
                                                                                topiccode = topiccode + '^' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes[n6].Value;
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            for (int n7 = 0; n7 < subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes[n6].ChildNodes.Count; n7++)
                                                                            {
                                                                                if (columnvalue <= 7)
                                                                                {
                                                                                    columnvalue = 7;
                                                                                }
                                                                                if (subjecttext == "")
                                                                                {
                                                                                    subjecttext = subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes[n6].ChildNodes[7].Text;
                                                                                    topiccode = subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes[n6].ChildNodes[7].Value;
                                                                                }
                                                                                else
                                                                                {
                                                                                    subjecttext = subjecttext + '^' + subjecttree.Nodes[n1].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].Text + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes[n6].ChildNodes[7].Text;
                                                                                    topiccode = topiccode + '^' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].Value + '/' + subjecttree.Nodes[n1].ChildNodes[n2].ChildNodes[n3].ChildNodes[n4].ChildNodes[n5].ChildNodes[n6].ChildNodes[7].Value;
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            ddlmarks.Items.Clear();
                            string strquery = "select distinct marks from tbl_question_bank_details where subject_no='" + subject + "'";
                            ds.Reset();
                            ds.Dispose();
                            ds = d2.select_method_wo_parameter(strquery, "Text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                ddlmarks.DataSource = ds;
                                ddlmarks.DataTextField = "marks";
                                ddlmarks.DataValueField = "marks";
                                ddlmarks.DataBind();
                                ddlmarks.Items.Add(" ");
                                ddlmarks.SelectedIndex = ddlmarks.Items.Count - 1;
                            }
                            FpQuestions.Visible = false;
                            FpQuestions.Sheets[0].ColumnHeader.RowCount = 1;
                            FpQuestions.SheetCorner.ColumnCount = 0;
                            FpQuestions.Sheets[0].RowCount = 0;
                            FpQuestions.Sheets[0].ColumnCount = columnvalue + 4;
                            FpQuestions.Sheets[0].ColumnHeader.Cells[0, columnvalue].Text = "Topic";
                            FpQuestions.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                            FpQuestions.Sheets[0].ColumnHeader.Rows[0].Font.Bold = true;
                            FpQuestions.Sheets[0].ColumnHeader.Rows[0].BackColor = Color.LightCyan;
                            FpQuestions.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Subject Unit";
                            FpQuestions.Sheets[0].ColumnHeaderSpanModel.Add(0, 1, 1, columnvalue - 1);
                            FpQuestions.Sheets[0].Columns[0].Width = 50;
                            FpQuestions.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
                            FpQuestions.Sheets[0].ColumnHeader.Cells[0, FpQuestions.Sheets[0].ColumnCount - 3].Text = "University";
                            FpQuestions.Sheets[0].ColumnHeader.Cells[0, FpQuestions.Sheets[0].ColumnCount - 2].Text = "Unit";
                            FpQuestions.Sheets[0].ColumnHeader.Cells[0, FpQuestions.Sheets[0].ColumnCount - 1].Text = "Self";
                            for (int prec = 0; prec < FpQuestions.Sheets[0].ColumnCount - 3; prec++)
                            {
                                if (prec != 1)
                                {
                                    FpQuestions.Sheets[0].SetColumnMerge(prec, FarPoint.Web.Spread.Model.MergePolicy.Always);
                                }
                            }
                            int srno = 0;
                            string[] spittext = subjecttext.Split('^');
                            string[] spitcode = topiccode.Split('^');
                            for (int i = 0; i <= spittext.GetUpperBound(0); i++)
                            {
                                FpQuestions.Visible = true;
                                FpQuestions.Sheets[0].RowCount++;
                                srno++;
                                FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 0].Text = srno.ToString();
                                FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 0].Font.Bold = false;
                                FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 0].Note = subject;
                                string[] spilsubtext = spittext[i].Split('/');
                                int reversecolumn = FpQuestions.Sheets[0].ColumnCount - 3;
                                string code = spitcode[i].ToString();
                                for (int j = spilsubtext.GetUpperBound(0); j >= 0; j--)
                                {
                                    reversecolumn--;
                                    string textvalu = spilsubtext[j].ToString();
                                    if (j > 0)
                                    {
                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].Text = textvalu;
                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].Note = code;
                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].HorizontalAlign = HorizontalAlign.Left;
                                        FpQuestions.Sheets[0].Columns[reversecolumn].Width = 150;
                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].Font.Name = "Book Antiqua";
                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].Font.Bold = false;
                                        if (reversecolumn == FpQuestions.Sheets[0].ColumnCount - 4)
                                        {
                                            FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].ForeColor = Color.Blue;
                                            FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].Font.Underline = true;
                                        }
                                    }
                                    else if (j == 0)
                                    {
                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 1].Text = textvalu;
                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 1].Tag = value;
                                        if (reversecolumn > 1)
                                        {
                                            FpQuestions.Sheets[0].SpanModel.Add(FpQuestions.Sheets[0].RowCount - 1, 1, 1, columnvalue - spilsubtext.GetUpperBound(0));
                                        }
                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                                        FpQuestions.Sheets[0].Columns[1].Width = 150;
                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 1].Font.Bold = false;
                                        if (0 == spilsubtext.GetUpperBound(0))
                                        {
                                            FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 1].Note = code;
                                            FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 1].ForeColor = Color.Blue;
                                            FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 1].Font.Underline = true;
                                        }
                                    }
                                }
                                /////============================== Load Exams====================
                                int startrow = FpQuestions.Sheets[0].RowCount - 1;
                                string tempval = string.Empty;
                                for (int k = 1; k <= 3; k++)
                                {
                                    strquery = "select  m.Questionid,exam,exam_month,exam_year,q.Syllabus,m.exam from tbl_question_bank_master m,tbl_question_bank_questions q where m.Subject_no=q.Subject_no and m.questionid=q.questionid and m.Subject_no='" + subject + "' and m.exam_type='" + k + "' and q.Syllabus is not null order by m.questionid";
                                    DataSet dsquestions = d2.select_method_wo_parameter(strquery, "Text");
                                    Boolean setfalg = false;
                                    if (dsquestions.Tables[0].Rows.Count > 0)
                                    {
                                        int rows = startrow - 1;
                                        for (int r = 0; r < dsquestions.Tables[0].Rows.Count; r++)
                                        {
                                            string exam = dsquestions.Tables[0].Rows[r]["exam"].ToString();
                                            string Exam_month = dsquestions.Tables[0].Rows[r]["exam_month"].ToString();
                                            string Exam_year = dsquestions.Tables[0].Rows[r]["exam_year"].ToString();
                                            string Questionid = dsquestions.Tables[0].Rows[r]["Questionid"].ToString();
                                            string[] spitsyllabus = dsquestions.Tables[0].Rows[r]["Syllabus"].ToString().Split('/');
                                            string getexamval = exam + '/' + Exam_year + '-' + Exam_month;
                                            if (tempval != getexamval || setfalg == false)
                                            {
                                                tempval = getexamval;
                                                for (int spp = 0; spp <= spitsyllabus.GetUpperBound(0); spp++)
                                                {
                                                    if (code == spitsyllabus[spp].ToString())
                                                    {
                                                        setfalg = true;
                                                        if (k == 1)
                                                        {
                                                            if (exam.Trim() != null && exam != "")
                                                            {
                                                                rows++;
                                                                if (rows >= FpQuestions.Sheets[0].RowCount)
                                                                {
                                                                    FpQuestions.Sheets[0].RowCount++;
                                                                    for (int prec = 0; prec < FpQuestions.Sheets[0].ColumnCount - 3; prec++)
                                                                    {
                                                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, prec].Text = FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 2, prec].Text;
                                                                        if (prec == 0)
                                                                        {
                                                                            FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 0].Note = subject;
                                                                            FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                                                            FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 0].Font.Bold = false;
                                                                            FpQuestions.Sheets[0].SpanModel.Add(FpQuestions.Sheets[0].RowCount - 1, 1, 1, columnvalue - spilsubtext.GetUpperBound(0));
                                                                        }
                                                                        if (prec == FpQuestions.Sheets[0].ColumnCount - 4)
                                                                        {
                                                                            FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].ForeColor = Color.Blue;
                                                                            FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].Font.Underline = true;
                                                                        }
                                                                    }
                                                                }
                                                                FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 3].Text = getexamval;
                                                                FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 3].Tag = Questionid;
                                                                FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 3].Note = code;
                                                                FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 3].Font.Name = "Book Antiqua";
                                                                FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 3].Font.Bold = false;
                                                                FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 3].ForeColor = Color.Blue;
                                                                FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 3].Font.Underline = true;
                                                            }
                                                        }
                                                        else if (k == 2)
                                                        {
                                                            rows++;
                                                            if (rows >= FpQuestions.Sheets[0].RowCount)
                                                            {
                                                                FpQuestions.Sheets[0].RowCount++;
                                                                for (int prec = 0; prec < FpQuestions.Sheets[0].ColumnCount - 3; prec++)
                                                                {
                                                                    FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, prec].Text = FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 2, prec].Text;
                                                                    FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, 0].Note = subject;
                                                                    FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, prec].Font.Name = "Book Antiqua";
                                                                    FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, prec].Font.Bold = false;
                                                                    FpQuestions.Sheets[0].SpanModel.Add(FpQuestions.Sheets[0].RowCount - 1, 1, 1, columnvalue - spilsubtext.GetUpperBound(0));
                                                                    if (prec == FpQuestions.Sheets[0].ColumnCount - 4)
                                                                    {
                                                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].ForeColor = Color.Blue;
                                                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].Font.Underline = true;
                                                                    }
                                                                }
                                                            }
                                                            exam = GetFunction("select Criteria from criteriaforinternal where Criteria_no='" + exam + "'");
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 2].Text = exam;
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 2].Tag = Questionid;
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 2].Note = code;
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 2].Font.Name = "Book Antiqua";
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 2].Font.Bold = false;
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 2].ForeColor = Color.Blue;
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 2].Font.Underline = true;
                                                        }
                                                        else if (k == 3)
                                                        {
                                                            rows++;
                                                            if (rows >= FpQuestions.Sheets[0].RowCount)
                                                            {
                                                                FpQuestions.Sheets[0].RowCount++;
                                                                for (int prec = 0; prec < FpQuestions.Sheets[0].ColumnCount - 3; prec++)
                                                                {
                                                                    FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, prec].Text = FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 2, prec].Text;
                                                                    FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, prec].Font.Name = "Book Antiqua";
                                                                    FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, prec].Font.Bold = false;
                                                                    FpQuestions.Sheets[0].SpanModel.Add(FpQuestions.Sheets[0].RowCount - 1, 1, 1, columnvalue - spilsubtext.GetUpperBound(0));
                                                                    if (prec == FpQuestions.Sheets[0].ColumnCount - 4)
                                                                    {
                                                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].ForeColor = Color.Blue;
                                                                        FpQuestions.Sheets[0].Cells[FpQuestions.Sheets[0].RowCount - 1, reversecolumn].Font.Underline = true;
                                                                    }
                                                                }
                                                            }
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 1].Text = "Self";
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 1].Tag = Questionid;
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 1].Note = code;
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 1].Font.Bold = false;
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 1].ForeColor = Color.Blue;
                                                            FpQuestions.Sheets[0].Cells[rows, FpQuestions.Sheets[0].ColumnCount - 1].Font.Underline = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            int startspanrow = 0;
                            int spanrow = 1;
                            int prerow = 0;
                            int tempcolspan = 1;
                            for (int i = 0; i < FpQuestions.Sheets[0].RowCount; i++)
                            {
                                string getvalue = FpQuestions.Sheets[0].Cells[i, 1].Text.ToString();
                                int colspan = FpQuestions.Sheets[0].Cells[i, 1].ColumnSpan;
                                prerow = i + 1;
                                if (prerow < FpQuestions.Sheets[0].RowCount)
                                {
                                    tempcolspan = FpQuestions.Sheets[0].Cells[prerow, 1].ColumnSpan;
                                    if (colspan != tempcolspan)
                                    {
                                        FpQuestions.Sheets[0].SpanModel.Add(startspanrow, 1, spanrow, colspan);
                                        spanrow = 1;
                                        startspanrow = prerow;
                                        tempcolspan = colspan;
                                    }
                                    else
                                    {
                                        if (getvalue == FpQuestions.Sheets[0].Cells[prerow, 1].Text.ToString())
                                        {
                                            spanrow++;
                                        }
                                        else
                                        {
                                            FpQuestions.Sheets[0].SpanModel.Add(startspanrow, 1, spanrow, tempcolspan);
                                            startspanrow = prerow;
                                            spanrow = 1;
                                        }
                                    }
                                }
                                else
                                {
                                    FpQuestions.Sheets[0].SpanModel.Add(startspanrow, 1, spanrow, colspan);
                                    startspanrow = prerow;
                                }
                            }
                        }
                        else
                        {
                            lblnorec.Visible = true;
                            lblnorec.Text = "Please Add Topic Details";
                            lblqa.Visible = false;
                            txttype.Visible = false;
                            lblmarks.Visible = false;
                            ddlmarks.Visible = false;
                            ptype.Visible = false;
                        }
                        FpQuestions.Sheets[0].PageSize = FpQuestions.Sheets[0].RowCount;
                        FpQuestions.Sheets[0].AutoPostBack = true;
                    }
                    else
                    {
                        if (Fpsmarks.Sheets[0].Cells[int.Parse(ar), 4].Text != "")
                        {
                            string date = Fpsmarks.Sheets[0].Cells[int.Parse(ar), 4].Note.ToString();
                            string fileid = Fpsmarks.Sheets[0].Cells[int.Parse(ar), 4].Tag.ToString();
                            string getquery = "select * from notestbl where subject_no='" + subject + "' and fileid='" + fileid + "' and date='" + date + "' ";
                            ds.Dispose();
                            ds.Reset();
                            ds = d2.select_method_wo_parameter(getquery, "Text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                string file_data = ds.Tables[0].Rows[0]["filedata"].ToString();
                                if (file_data.Trim() != "" && file_data != "0")
                                {
                                    Response.ContentType = ds.Tables[0].Rows[0]["filetype"].ToString();
                                    Response.AddHeader("Content-Disposition", "attachment;filename=\"" + ds.Tables[0].Rows[0]["filename"] + "\"");
                                    Response.BinaryWrite((byte[])ds.Tables[0].Rows[0]["filedata"]);
                                    Response.End();
                                }
                            }
                        }
                    }
                }
                questionflag = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void FpQuestions_CellClick(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        getquestionflag = true;
        FpQuestions.Visible = true;
        Fpsmarks.Visible = true;
        Fpquestionbank.Visible = true;
        FpQuestions.Sheets[0].AutoPostBack = true;
        lblqa.Visible = true;
        txttype.Visible = true;
        lblmarks.Visible = true;
        ddlmarks.Visible = true;
        ptype.Visible = true;
    }

    protected void FpQuestions_PreRender(Object sender, EventArgs e)
    {
        try
        {
            if (getquestionflag == true)
            {
                string filtertype = string.Empty;
                for (int i = 0; i < chklstype.Items.Count; i++)
                {
                    if (chklstype.Items[i].Selected == true)
                    {
                        if (filtertype == "")
                        {
                            filtertype = chklstype.Items[i].Text;
                        }
                        else
                        {
                            filtertype = filtertype + '/' + chklstype.Items[i].Text;
                        }
                    }
                }
                string marks = string.Empty;
                if (ddlmarks.Text.Trim() != "")
                {
                    marks = "and marks='" + ddlmarks.SelectedItem.ToString() + "'";
                }
                string qar = FpQuestions.Sheets[0].ActiveRow.ToString();
                string qac = FpQuestions.Sheets[0].ActiveColumn.ToString();
                string query = string.Empty;
                string getquestionsid = string.Empty;
                string getquestionentryid = string.Empty;
                string subject = string.Empty;
                Boolean questionflag = false;
                Fpquestionbank.Visible = false;
                if (qar != "-1" && qac != "-1")
                {
                    string unitcode1 = FpQuestions.Sheets[0].Cells[int.Parse(qar), int.Parse(qac)].Note.ToString();
                    if (unitcode1.Trim() != "" || int.Parse(qac) >= FpQuestions.Sheets[0].ColumnCount - 4)
                    {
                        Fpquestionbank.Sheets[0].ColumnHeader.RowCount = 1;
                        Fpquestionbank.SheetCorner.ColumnCount = 0;
                        Fpquestionbank.Sheets[0].RowCount = 0;
                        Fpquestionbank.Sheets[0].ColumnCount = 4;
                        Fpquestionbank.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                        Fpquestionbank.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Questions";
                        Fpquestionbank.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Answers";
                        Fpquestionbank.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Attachements";
                        Fpquestionbank.Sheets[0].ColumnHeader.Rows[0].Font.Bold = true;
                        Fpquestionbank.Sheets[0].ColumnHeader.Rows[0].BackColor = Color.LightCyan;
                        Fpquestionbank.Sheets[0].Columns[0].Width = 10;
                        Fpquestionbank.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
                        if (filtertype != "")
                        {
                            Fpquestionbank.Sheets[0].Columns[1].Visible = false;
                            Fpquestionbank.Sheets[0].Columns[2].Visible = false;
                            Fpquestionbank.Sheets[0].Columns[3].Visible = false;
                            string[] spit = filtertype.Split('/');
                            for (int i = 0; i <= spit.GetUpperBound(0); i++)
                            {
                                string val = spit[i].ToString();
                                if (val == "Questions")
                                {
                                    Fpquestionbank.Sheets[0].Columns[1].Visible = true;
                                }
                                else if (val == "Answers")
                                {
                                    Fpquestionbank.Sheets[0].Columns[2].Visible = true;
                                }
                                else if (val == "Attachements")
                                {
                                    Fpquestionbank.Sheets[0].Columns[3].Visible = true;
                                }
                            }
                        }
                        else
                        {
                            Fpquestionbank.Sheets[0].Columns[1].Visible = true;
                            Fpquestionbank.Sheets[0].Columns[2].Visible = true;
                            Fpquestionbank.Sheets[0].Columns[3].Visible = true;
                        }
                        string questionid = string.Empty;
                        getquestionsid = string.Empty;
                        if (int.Parse(qac) >= FpQuestions.Sheets[0].ColumnCount - 3)
                        {
                            if (FpQuestions.Sheets[0].Cells[int.Parse(qar), int.Parse(qac)].Tag != null)
                            {
                                questionid = FpQuestions.Sheets[0].Cells[int.Parse(qar), int.Parse(qac)].Tag.ToString();
                                getquestionsid = FpQuestions.Sheets[0].Cells[int.Parse(qar), int.Parse(qac)].Tag.ToString();
                            }
                            else
                            {
                                lblnorec.Visible = true;
                                lblnorec.Text = "No Questions Available";
                                return;
                            }
                        }
                        subject = FpQuestions.Sheets[0].Cells[int.Parse(qar), 0].Note;
                        if (int.Parse(qac) <= FpQuestions.Sheets[0].ColumnCount - 3)
                        {
                            questionid = " ";
                        }
                        else
                        {
                            questionid = "and Questionid = " + questionid + "";
                        }
                        query = "select * from tbl_question_bank_questions where subject_no=" + subject + " " + questionid + " and syllabus is not null";
                        if (marks != "")
                        {
                            if (questionid.Trim() != "")
                            {
                                questionid = "and q.Questionid =" + FpQuestions.Sheets[0].Cells[int.Parse(qar), int.Parse(qac)].Tag.ToString() + "";
                            }
                            query = "select Questionentryid,questions,syllabus,marks,Questionid from tbl_question_bank_questions q,tbl_question_bank_details d where q.subject_no=d.subject_no and d.Questionid=q.Questionid and q.subject_no=" + subject + " and q.qsection_no=d.qsection_no " + marks + " " + questionid + " order by Questionid,Questionentryid";
                        }
                        ds.Dispose();
                        ds.Reset();
                        ds = d2.select_method_wo_parameter(query, "Text");
                        int srno = 0;
                        getquestionentryid = string.Empty;
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                string[] syllabussp = ds.Tables[0].Rows[i]["Syllabus"].ToString().Split('/');
                                for (int j = 0; j <= syllabussp.GetUpperBound(0); j++)
                                {
                                    if (unitcode1 == syllabussp[j].ToString())
                                    {
                                        questionflag = true;
                                        srno++;
                                        string val = string.Empty;
                                        string answer = string.Empty;
                                        Fpquestionbank.Sheets[0].RowCount++;
                                        getquestionentryid = ds.Tables[0].Rows[i]["Questionentryid"].ToString();
                                        Fpquestionbank.Sheets[0].Cells[Fpquestionbank.Sheets[0].RowCount - 1, 0].Text = srno.ToString();
                                        Fpquestionbank.Sheets[0].Cells[Fpquestionbank.Sheets[0].RowCount - 1, 1].Text = ds.Tables[0].Rows[i]["Questions"].ToString();
                                        Fpquestionbank.Sheets[0].Cells[Fpquestionbank.Sheets[0].RowCount - 1, 1].Tag = ds.Tables[0].Rows[i]["Questionentryid"].ToString();
                                        if (Fpquestionbank.Sheets[0].Columns[2].Visible == true)
                                        {
                                            getquestionsid = ds.Tables[0].Rows[i]["Questionid"].ToString();
                                            if (getquestionsid != "")
                                            {
                                                val = "and questionid='" + getquestionsid + "'";
                                            }
                                            query = "select manual_answer,file_name from question_answer where Questionentryid='" + getquestionentryid + "' and subject_no=" + subject + " " + val + " ";
                                            DataSet dsquestion = d2.select_method_wo_parameter(query, "Text");
                                            if (dsquestion.Tables[0].Rows.Count > 0)
                                            {
                                                answer = dsquestion.Tables[0].Rows[0]["manual_answer"].ToString();
                                                Fpquestionbank.Sheets[0].Cells[Fpquestionbank.Sheets[0].RowCount - 1, 2].Text = answer;
                                                if (Fpquestionbank.Sheets[0].Columns[3].Visible == true)
                                                {
                                                    answer = dsquestion.Tables[0].Rows[0]["file_name"].ToString();
                                                    Fpquestionbank.Sheets[0].Cells[Fpquestionbank.Sheets[0].RowCount - 1, 3].Text = answer;
                                                    Fpquestionbank.Sheets[0].Cells[Fpquestionbank.Sheets[0].RowCount - 1, 3].Font.Underline = true;
                                                    Fpquestionbank.Sheets[0].Cells[Fpquestionbank.Sheets[0].RowCount - 1, 3].ForeColor = Color.Blue;
                                                    Fpquestionbank.Sheets[0].Cells[Fpquestionbank.Sheets[0].RowCount - 1, 3].Tag = getquestionentryid;
                                                    Fpquestionbank.Sheets[0].Cells[Fpquestionbank.Sheets[0].RowCount - 1, 3].Note = getquestionsid;
                                                    Fpquestionbank.Sheets[0].Cells[Fpquestionbank.Sheets[0].RowCount - 1, 0].Note = subject;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (questionflag == true)
                        {
                            Fpquestionbank.Visible = true;
                        }
                        else
                        {
                            lblnorec.Visible = true;
                            lblnorec.Text = "No Questions Available";
                        }
                    }
                }
                getquestionflag = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void Fpquestionbank_PreRender(Object sender, EventArgs e)
    {
        try
        {
            if (questionbankflag == true)
            {
                string qarb = Fpquestionbank.Sheets[0].ActiveRow.ToString();
                string qacb = Fpquestionbank.Sheets[0].ActiveColumn.ToString();
                if (qacb.Trim() == "3")
                {
                    string subject = Fpquestionbank.Sheets[0].Cells[int.Parse(qarb), 0].Note;
                    if (Fpquestionbank.Sheets[0].Cells[int.Parse(qarb), int.Parse(qacb)].Tag != null)
                    {
                        string getquestionsid = Fpquestionbank.Sheets[0].Cells[int.Parse(qarb), int.Parse(qacb)].Note.ToString();
                        string questionentryid = Fpquestionbank.Sheets[0].Cells[int.Parse(qarb), int.Parse(qacb)].Tag.ToString();
                        string strquery = "select file_data,file_name,file_type from question_answer where questionentryid='" + questionentryid + "' and subject_no='" + subject + "' and questionid='" + getquestionsid + "'";
                        ds.Reset();
                        ds.Dispose();
                        ds = d2.select_method_wo_parameter(strquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            string file_data = ds.Tables[0].Rows[0]["file_data"].ToString();
                            if (file_data.Trim() != "" && file_data != "0")
                            {
                                Response.ContentType = ds.Tables[0].Rows[0]["file_type"].ToString();
                                Response.AddHeader("Content-Disposition", "attachment;filename=\"" + ds.Tables[0].Rows[0]["file_name"] + "\"");
                                Response.BinaryWrite((byte[])ds.Tables[0].Rows[0]["file_data"]);
                                Response.End();
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void Fpquestionbank_CellClick(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        questionbankflag = true;
        FpQuestions.Visible = true;
        Fpsmarks.Visible = true;
        Fpquestionbank.Visible = true;
        FpQuestions.Sheets[0].AutoPostBack = true;
        lblqa.Visible = true;
        txttype.Visible = true;
        lblmarks.Visible = true;
        ddlmarks.Visible = true;
        ptype.Visible = true;
    }

    protected void chktype_ChekedChange(object sender, EventArgs e)
    {
        lblqa.Visible = true;
        txttype.Visible = true;
        lblmarks.Visible = true;
        ddlmarks.Visible = true;
        ptype.Visible = true;
        Fpsmarks.Visible = true;
        if (chktype.Checked == true)
        {
            for (int i = 0; i < chklstype.Items.Count; i++)
            {
                chklstype.Items[i].Selected = true;
                txttype.Text = "Type(" + chklstype.Items.Count + ")";
            }
        }
        else
        {
            for (int i = 0; i < chklstype.Items.Count; i++)
            {
                chklstype.Items[i].Selected = false;
                txttype.Text = "Type(" + chklstype.Items.Count + ")";
            }
            txttype.Text = "--Select--";
        }
    }

    protected void chklstype_SelectedIndexChanged(object sender, EventArgs e)
    {
        lblqa.Visible = true;
        txttype.Visible = true;
        lblmarks.Visible = true;
        ddlmarks.Visible = true;
        ptype.Visible = true;
        Fpsmarks.Visible = true;
        Fpquestionbank.Visible = true;
        int commcount = 0;
        for (int i = 0; i < chklstype.Items.Count; i++)
        {
            if (chklstype.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                txttype.Text = "Type(" + commcount.ToString() + ")";
            }
            else
            {
                chktype.Checked = false;
            }
        }
        if (commcount == 0)
        {
            chktype.Checked = false;
            txttype.Text = "--Select--";
        }
        if (commcount == chklstype.Items.Count)
        {
            chktype.Checked = true;
        }
    }

    protected void btnnotification_Click(object sender, EventArgs e)
    {
        try
        {
            divHostelInfo.Visible = false;
            Fpspreadfee.Visible = false;
            questiondiv.Visible = false;
            lblfeestatus.Visible = false;
            //radScrType.Visible = false;
            btnsTrans.Visible = false;
            tblSelScr.Visible = false;
            initgeneral();
            Fpsgeneral.Visible = true;
            string strquery = "select filename,r.stud_name,viewrs,convert(varchar(10),notification_date,103) date,RIGHT(CONVERT(VARCHAR, notification_time, 100),7) as Time,CONVERT(VARCHAR, notification_time, 108) as Time1,subject,n.status from tbl_notification n,Registration r where n.isstaff=0 and n.viewrs=r.Roll_No and r.CC=0 and r.DelFlag=0 and r.Exam_Flag<>'debar' and n.college_code='" + Session["college_code"].ToString() + "' and r.Roll_No='" + Session["RollNo"] + "' order by notification_date,notification_time desc";
            ds = d2.select_method_wo_parameter(strquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                Fpsgeneral.Sheets[0].ColumnHeader.RowCount = 1;
                Fpsgeneral.Sheets[0].ColumnHeader.Height = 25;
                Fpsgeneral.ColumnHeader.Visible = true;
                Fpsgeneral.Sheets[0].ColumnCount = 4;
                Fpsgeneral.TitleInfo.Text = "NOTIFICATION DETAILS";
                Fpsgeneral.Sheets[0].DefaultColumnWidth = 100;
                Fpsgeneral.Sheets[0].DefaultRowHeight = 20;
                Fpsgeneral.Sheets[0].GridLines = GridLines.Both;
                Fpsgeneral.ColumnHeader.Cells[0, 0].Text = "S.NO";
                Fpsgeneral.ColumnHeader.Cells[0, 1].Text = "Date";
                Fpsgeneral.ColumnHeader.Cells[0, 2].Text = "Time";
                Fpsgeneral.ColumnHeader.Cells[0, 3].Text = "Attachement Link";
                Fpsgeneral.Columns[3].Width = 361;
                Fpsgeneral.Columns[0].Width = 40;
                Fpsgeneral.Columns[2].Width = 100;
                Fpsgeneral.Columns[1].Width = 100;
                Fpsgeneral.Columns[0].HorizontalAlign = HorizontalAlign.Center;
                Fpsgeneral.Columns[1].HorizontalAlign = HorizontalAlign.Left;
                Fpsgeneral.Columns[2].HorizontalAlign = HorizontalAlign.Left;
                Fpsgeneral.Columns[3].HorizontalAlign = HorizontalAlign.Left;
                Fpsgeneral.Sheets[0].RowCount = 0;
                int srno = 0;
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string date = ds.Tables[0].Rows[i]["date"].ToString();
                    string time = ds.Tables[0].Rows[i]["Time"].ToString();
                    string subject = ds.Tables[0].Rows[i]["filename"].ToString();
                    string roll = ds.Tables[0].Rows[i]["viewrs"].ToString();
                    string tagtime = ds.Tables[0].Rows[i]["Time1"].ToString();
                    srno++;
                    Fpsgeneral.Sheets[0].RowCount++;
                    string status = ds.Tables[0].Rows[i]["status"].ToString();
                    if (status == "1")
                    {
                        Fpsgeneral.Sheets[0].Rows[Fpsgeneral.Sheets[0].RowCount - 1].BackColor = Color.Green;
                    }
                    Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 0].Text = srno.ToString();
                    Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 1].Text = date.ToString();
                    Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 2].Text = time.ToString();
                    Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 2].Tag = tagtime;
                    Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 0].Tag = roll;
                    Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 3].Text = subject.ToString();
                }
            }
            else
            {
                Fpsgeneral.Sheets[0].ColumnCount = 0;
                Fpsgeneral.Sheets[0].RowCount = 0;
                Fpsgeneral.Sheets[0].ColumnCount = 4;
                Fpsgeneral.Sheets[0].RowCount = 1;
                Fpsgeneral.Columns.Default.Width = 150;
                Fpsgeneral.ColumnHeader.Visible = false;
                Fpsgeneral.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpsgeneral.TitleInfo.Text = "NOTIFICATION DETAILS";
                Fpsgeneral.Sheets[0].Cells[0, 0].Text = "No Records Found";
                Fpsgeneral.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpsgeneral.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpsgeneral.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpsgeneral.Sheets[0].Cells[Fpsgeneral.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                Fpsgeneral.ColumnHeader.Visible = false;
                Fpsgeneral.Height = 45;
                Fpsgeneral.Width = 600;
            }
            Fpsgeneral.CommandBar.Visible = false;
            Fpsgeneral.Sheets[0].PageSize = Fpsgeneral.Sheets[0].RowCount;
            Fpsgeneral.Height = 25 + (Fpsgeneral.Sheets[0].RowCount * 30);
            int widt = 0;
            for (int w = 0; w < Fpsgeneral.Sheets[0].ColumnCount; w++)
                widt = widt + Fpsgeneral.Columns[w].Width;
            Fpsgeneral.Width = widt;
            Fpsgeneral.Sheets[0].AutoPostBack = true;
        }
        catch (Exception ex)
        {
        }
    }

    protected void Fpspreadfee_CellClick(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
    }

    protected void Fpspreadfee_PreRender(Object sender, EventArgs e)
    {
    }

    protected void Fpsgeneral_CellClick(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        Cellclick = true;
        Fpsgeneral.Visible = true;
    }

    protected void Fpsgeneral_PreRender(Object sender, EventArgs e)
    {
        try
        {
            if (Cellclick == true)
            {
                Fpsgeneral.Visible = true;
                int ar = Convert.ToInt32(Fpsgeneral.ActiveSheetView.ActiveRow.ToString());
                int ac = Convert.ToInt32(Fpsgeneral.ActiveSheetView.ActiveColumn.ToString());
                if (Fpsgeneral.Sheets[0].Cells[ar, 0].Tag != null)
                {
                    //panelnotification.Visible = true;
                    MemoryStream memoryStream = new MemoryStream();
                    string roll = Fpsgeneral.Sheets[0].Cells[ar, 0].Tag.ToString();
                    string date = Fpsgeneral.Sheets[0].Cells[ar, 1].Text.ToString();
                    string subject = Fpsgeneral.Sheets[0].Cells[ar, 3].Text.ToString();
                    string isstaff = "0";
                    Fpsgeneral.Sheets[0].Rows[ar].BackColor = Color.Green;
                    string[] dt = date.Split('/');
                    date = dt[1] + '/' + dt[0] + '/' + dt[2];
                    string time = Fpsgeneral.Sheets[0].Cells[ar, 2].Tag.ToString();
                    string strquery = "select filename,filetype,viewrs,subject,fileupload,convert(varchar(10),notification_date,103) date,RIGHT(CONVERT(VARCHAR, notification_time, 100),7) as Time,notification,status,attche_filetype,attache_file from tbl_notification where viewrs='" + roll + "' and College_Code='" + Session["college_code"].ToString() + "' and notification_date='" + date + "'  and notification_time='" + time + "'";
                    ds.Dispose();
                    ds.Reset();
                    ds = d2.select_method_wo_parameter(strquery, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        roll = ds.Tables[0].Rows[0]["viewrs"].ToString();
                        subject = ds.Tables[0].Rows[0]["Subject"].ToString();
                        txtnotification.Text = ds.Tables[0].Rows[0]["notification"].ToString();
                        if (ds.Tables[0].Rows[0]["status"].ToString().Trim() != "1")
                        {
                            strquery = "update tbl_notification set status=1 where viewrs='" + roll + "' and isstaff=" + isstaff + " and notification_date='" + date + "' and notification_time='" + time + "'";
                            int update = d2.update_method_wo_parameter(strquery, "text");
                        }
                        date = ds.Tables[0].Rows[0]["date"].ToString();
                        lblsubject.Text = subject;
                        string[] spdt = date.Split('/');
                        time = ds.Tables[0].Rows[0]["Time"].ToString();
                        string[] spti = Fpsgeneral.Sheets[0].Cells[ar, 2].Tag.ToString().Split(':');
                        string notificationimage = roll + spdt[0] + spdt[1] + spdt[2] + spti[0] + spti[1] + spti[2];
                        lblndate.Text = spdt[0] + '/' + spdt[1] + '/' + spdt[2] + ' ' + time;
                        try
                        {
                            if (ac == 3)
                            {
                                #region Download Attachement
                                if (ds.Tables[0].Rows[0]["attache_file"].ToString().Length > 0 && ds.Tables[0].Rows[0]["attache_file"] != null)
                                {
                                    byte[] file = (byte[])ds.Tables[0].Rows[0]["attache_file"];
                                    memoryStream.Write(file, 0, file.Length);
                                    if (file.Length > 0)
                                    {
                                        Response.ContentType = ds.Tables[0].Rows[i]["attche_filetype"].ToString();
                                        Response.AddHeader("Content-Disposition", "attachment;filename=\"" + ds.Tables[0].Rows[i]["filename"] + "\"");
                                        Response.BinaryWrite(file);
                                        Response.End();
                                    }
                                    memoryStream.Dispose();
                                    memoryStream.Close();
                                }
                                #endregion
                            }
                            else
                            {
                                #region UploadImage And Notification Message
                                if (ds.Tables[0].Rows[0]["fileupload"].ToString().Length > 0 && ds.Tables[0].Rows[0]["fileupload"] != null)
                                {
                                    if (!File.Exists(HttpContext.Current.Server.MapPath("~/college/" + notificationimage + ".jpeg")))
                                    {
                                        byte[] file = (byte[])ds.Tables[0].Rows[0]["fileupload"];
                                        memoryStream.Write(file, 0, file.Length);
                                        if (file.Length > 0)
                                        {
                                            System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                            System.Drawing.Image thumb = imgx.GetThumbnailImage(400, 400, null, IntPtr.Zero);
                                            thumb.Save(HttpContext.Current.Server.MapPath("~/college/" + notificationimage + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                            //Response.ContentType = ds.Tables[0].Rows[i]["attche_filetype"].ToString();
                                            //Response.AddHeader("Content-Disposition", "attachment;filename=\"" + ds.Tables[0].Rows[i]["filename"] + "\"");
                                            //Response.BinaryWrite(file);
                                            //Response.End();
                                        }
                                        memoryStream.Dispose();
                                        memoryStream.Close();
                                        //}
                                        Image3.ImageUrl = "~/college/" + notificationimage + ".jpeg";
                                    }
                                    else
                                    {
                                        Image3.ImageUrl = "~/college/" + notificationimage + ".jpeg";
                                    }
                                }
                                else
                                {
                                    Image3.ImageUrl = "~/college/NoImage.jpeg";
                                }
                                panelnotification.Visible = true;
                                #endregion
                            }
                        }
                        catch (Exception ex)
                        {
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnnok_Click(Object sender, EventArgs e)
    {
        panelnotification.Visible = false;
        Fpsgeneral.Visible = true;
    }

    //protected void Buttonopac_Click(Object sender, EventArgs e)
    //{
    //    Response.Redirect("OPAC.aspx");
    //}

    protected void btnsubjectchooser_Click(Object sender, EventArgs e)
    {
        try
        {
            divMarks.Visible = false;
            string batchyear = Session["b_year"].ToString();
            string degree_code = Session["deg_code"].ToString();
            string sem = Session["semes"].ToString();
            string subjname = string.Empty;
            string Syllabus_year = GetFunction("select syllabus_year from syllabus_master where degree_code=" + degree_code + " and semester =" + sem + " and batch_year=" + batchyear + " ");
            if (Syllabus_year.Trim() != "" && Syllabus_year.Trim() != "0" && Syllabus_year.Trim() != "-1" && Syllabus_year != null)
            {
                btnsubjectchoosesave.Visible = true;
                Fpsmarks.Sheets[0].AutoPostBack = false;
                Fpsmarks.Sheets[0].SheetName = " ";
                Fpsmarks.ColumnHeader.Visible = false;
                Fpsmarks.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
                Fpsmarks.Pager.Mode = FarPoint.Web.Spread.PagerMode.Both;
                Fpsmarks.Pager.Align = HorizontalAlign.Left;
                Fpsmarks.Pager.Font.Bold = true;
                Fpsmarks.Pager.Font.Name = "Book Antiqua";
                Fpsmarks.Pager.ForeColor = Color.DarkGreen;
                Fpsmarks.Pager.BackColor = Color.Beige;
                Fpsmarks.Pager.BackColor = Color.AliceBlue;
                Fpsmarks.Sheets[0].Columns.Default.VerticalAlign = VerticalAlign.Middle;
                Fpsmarks.Sheets[0].Rows.Default.HorizontalAlign = HorizontalAlign.Left;
                Fpsmarks.Sheets[0].Rows.Default.VerticalAlign = VerticalAlign.Middle;
                Fpsmarks.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
                Fpsmarks.Sheets[0].DefaultStyle.Font.Size = FontUnit.Small;
                Fpsmarks.Sheets[0].DefaultStyle.Font.Bold = false;
                Fpsmarks.SheetCorner.Columns[0].Visible = false;
                FarPoint.Web.Spread.StyleInfo style2 = new FarPoint.Web.Spread.StyleInfo();
                style2.Font.Size = 12;
                style2.Font.Bold = true;
                style2.HorizontalAlign = HorizontalAlign.Center;
                style2.ForeColor = System.Drawing.Color.Black;
                Fpsmarks.Sheets[0].SheetCornerStyle = new FarPoint.Web.Spread.StyleInfo(style2);
                Fpsmarks.Sheets[0].SheetCorner.DefaultStyle = new FarPoint.Web.Spread.StyleInfo(style2);
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle = new FarPoint.Web.Spread.StyleInfo(style2);
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Small;
                Fpsmarks.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                Fpsmarks.Sheets[0].DefaultStyle.Font.Bold = false;
                Fpsmarks.Sheets[0].DefaultStyle.Font.Size = FontUnit.Small;
                Fpsmarks.Width = 780;
                Fpsmarks.TitleInfo.Text = "Subject Chooser";
                Fpsmarks.CommandBar.Visible = false;
                Fpsmarks.TitleInfo.Visible = true;
                Fpsmarks.TitleInfo.Font.Size = FontUnit.Large;
                Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                Fpsmarks.Sheets[0].RowCount = 0;
                Fpsmarks.Sheets[0].RowCount = 1;
                Fpsmarks.Sheets[0].ColumnCount = 3;
                Fpsmarks.Sheets[0].Cells[0, 0].Text = "S.No";
                Fpsmarks.Sheets[0].Cells[0, 1].Text = "Subject Type";
                Fpsmarks.Sheets[0].Cells[0, 2].Text = "Subject Name";
                Fpsmarks.Sheets[0].Cells[0, 2].Locked = true;
                Fpsmarks.Sheets[0].Rows[0].BackColor = Color.AliceBlue;
                Fpsmarks.Sheets[0].Rows[0].Font.Bold = true;
                Fpsmarks.Sheets[0].Rows[0].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Columns[0].Width = 80;
                Fpsmarks.Sheets[0].Columns[1].Width = 200;
                Fpsmarks.Sheets[0].Columns[2].Width = 500;
                Fpsmarks.Sheets[0].Columns[0].Locked = true;
                Fpsmarks.Sheets[0].Columns[1].Locked = true;
                Fpsmarks.Sheets[0].Columns[0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Columns[1].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Columns[2].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Columns[0].Font.Name = "Book Antiqua";
                Fpsmarks.Sheets[0].Columns[1].Font.Name = "Book Antiqua";
                Fpsmarks.Sheets[0].Columns[2].Font.Name = "Book Antiqua";
                Fpsmarks.Sheets[0].SetColumnMerge(1, FarPoint.Web.Spread.Model.MergePolicy.Always);
                int srno = 0;
                string CONTYPE = "", othertyoe = string.Empty;
                //string getrights  = string.Empty;
                //if ((Session["group_code"].ToString().Trim() != "") && (Session["group_code"].ToString().Trim() != "0") && (Session["group_code"].ToString().Trim() != "-1"))
                //{
                //    string group_user = Session["group_code"].ToString();
                //    if (group_user.Contains(';'))
                //    {
                //        string[] group_semi = group_user.Split(';');
                //        group_user = group_semi[0].ToString();
                //    }
                //    getrights = "and group_code='" + group_user + "'";
                //}
                //else
                //{
                //    getrights = "and usercode='" + Session["UserCode"] + "'";
                //}
                string sdgs = GetFunction("select value from Master_Settings where settings='Subject Type'");
                if (sdgs != null && sdgs.Trim() != "0" && sdgs.Trim() != "")
                {
                    string[] spsubt = sdgs.Split(',');
                    for (int stu = 0; stu <= spsubt.GetUpperBound(0); stu++)
                    {
                        if (othertyoe == "")
                        {
                            othertyoe = "'" + spsubt[stu].ToString() + "'";
                        }
                        else
                        {
                            othertyoe = othertyoe + ",'" + spsubt[stu].ToString() + "'";
                        }
                    }
                    if (othertyoe.Trim() != "")
                    {
                        othertyoe = " and subject_type in(" + othertyoe + ")";
                    }
                    if (!sdgs.Contains("Theory"))
                    {
                        CONTYPE = " AND (subject_type NOT LIKE 'THE%'";
                    }
                    else
                    {
                        CONTYPE = " AND (subject_type LIKE 'THE%'";
                    }
                    if (!sdgs.Contains("Practical"))
                    {
                        CONTYPE = CONTYPE + " or subject_type NOT LIKE 'pra%' or subject_type NOT LIKE 'lab%'";
                    }
                    else
                    {
                        CONTYPE = CONTYPE + " or subject_type LIKE 'pra%' or subject_type LIKE 'lab%'";
                    }
                    if (!sdgs.Contains("Others"))
                    {
                        CONTYPE = CONTYPE + " or subject_type NOT LIKE 'oth%' ";
                    }
                    else
                    {
                        CONTYPE = CONTYPE + " or subject_type LIKE 'oth%' ";
                    }
                    if (!sdgs.Contains("Elective"))
                    {
                        CONTYPE = CONTYPE + " or subject_type NOT LIKE 'ele%')";
                    }
                    else
                    {
                        CONTYPE = CONTYPE + " or subject_type LIKE 'ele%' )";
                    }
                }
                string query = "select distinct subject.subtype_no,subject_type from subject,sub_sem where sub_sem.subtype_no=subject.subtype_no and subject.syll_code=(select syll_code from syllabus_master where degree_code=" + degree_code + " and semester=" + sem + " and syllabus_year = " + Syllabus_year + " and batch_year = " + batchyear + ") " + CONTYPE + " " + othertyoe + " ";
                DataSet dssubTypeRs = d2.select_method(query, hat, "Text");
                if (dssubTypeRs.Tables[0].Rows.Count > 0)
                {
                    hat.Clear();
                    string sqlquery = "select distinct sc.subject_no,sc.subtype_no,paper_order,s.subject_name,s.subject_code from subjectChooser sc,subject s where sc.subject_no=s.subject_no and roll_no='" + Session["RollNo"].ToString() + "' and semester=" + sem + " order by paper_order";
                    DataSet dssub = d2.select_method_wo_parameter(sqlquery, "Text");
                    for (int stsu = 0; stsu < dssub.Tables[0].Rows.Count; stsu++)
                    {
                        if (!hat.Contains(dssub.Tables[0].Rows[stsu]["subject_no"].ToString()))
                        {
                            hat.Add(dssub.Tables[0].Rows[stsu]["subject_no"].ToString(), dssub.Tables[0].Rows[stsu]["subject_no"].ToString());
                        }
                    }
                    DataTable dtstudfill = dssub.Tables[0];
                    Fpsmarks.Visible = true;
                    int subtype = 0;
                    int startcount = 0;
                    for (int i = 0; i < dssubTypeRs.Tables[0].Rows.Count; i++)
                    {
                        if ((dssubTypeRs.Tables[0].Rows[i]["subject_type"].ToString()) != "0")
                        {
                            query = "select subject.subtype_no,subject_type,subject_no,subject_name,subject_code from subject,sub_sem where sub_sem.subtype_no=subject.subtype_no and subject.syll_code=(select syll_code from syllabus_master where degree_code=" + degree_code + " and semester=" + sem + " and syllabus_year = " + Syllabus_year + " and batch_year = " + batchyear + ") and subject.subtype_no=" + dssubTypeRs.Tables[0].Rows[i]["subtype_no"].ToString() + " order by subject.subtype_no,subject.subject_no";
                            DataSet subTypeRs1 = d2.select_method_wo_parameter(query, "Text");
                            FarPoint.Web.Spread.ComboBoxCellType cmd = new FarPoint.Web.Spread.ComboBoxCellType();
                            string[] subject = new string[(subTypeRs1.Tables[0].Rows.Count + 1)];
                            subject[0] = string.Empty;
                            int count = 0;
                            subtype++;
                            startcount = Fpsmarks.Sheets[0].RowCount;
                            string strsubtype = dssubTypeRs.Tables[0].Rows[i]["subtype_no"].ToString();
                            int cou = startcount - 1;
                            Fpsmarks.Sheets[0].RowCount = subTypeRs1.Tables[0].Rows.Count + Fpsmarks.Sheets[0].RowCount;
                            dtstudfill.DefaultView.RowFilter = " subtype_no='" + strsubtype + "' ";
                            DataView dv1 = new DataView();
                            dv1 = dtstudfill.DefaultView;
                            foreach (DataRowView datarowviewUsers in dv1)
                            {
                                //  count++;
                                //  subject[count] = datarowviewUsers["subject_name"].ToString() + '-' + datarowviewUsers["subject_no"].ToString();
                                cou++;
                                // Fpsmarks.Sheets[0].RowCount++;
                                Fpsmarks.Sheets[0].Rows[cou].Font.Name = "Book Antiqua";
                                Fpsmarks.Sheets[0].Rows[cou].Font.Size = FontUnit.Medium;
                                Fpsmarks.Sheets[0].Cells[cou, 0].Note = datarowviewUsers["subject_no"].ToString();
                                if (hat.Contains(datarowviewUsers["subject_no"].ToString()))
                                {
                                    hat[datarowviewUsers["subject_no"].ToString()] = datarowviewUsers["subject_name"].ToString() + '-' + datarowviewUsers["subject_no"].ToString();
                                }
                            }
                            for (int selsu = 0; selsu < subTypeRs1.Tables[0].Rows.Count; selsu++)
                            {
                                count++;
                                subject[count] = subTypeRs1.Tables[0].Rows[selsu]["subject_name"].ToString() + '-' + subTypeRs1.Tables[0].Rows[selsu]["subject_no"].ToString();
                            }
                            cmd = new FarPoint.Web.Spread.ComboBoxCellType(subject);
                            for (int l = startcount; l < Fpsmarks.Sheets[0].RowCount; l++)
                            {
                                Fpsmarks.Sheets[0].Cells[l, 1].Text = dssubTypeRs.Tables[0].Rows[i]["subject_type"].ToString();
                                Fpsmarks.Sheets[0].Cells[l, 1].Note = dssubTypeRs.Tables[0].Rows[i]["subtype_no"].ToString();
                                Fpsmarks.Sheets[0].Cells[l, 1].Tag = subtype.ToString();
                                Fpsmarks.Sheets[0].Cells[l, 2].CellType = cmd;
                                string sunbo = Fpsmarks.Sheets[0].Cells[l, 0].Note.ToString();
                                if (hat.Contains(sunbo))
                                {
                                    string val = hat[sunbo].ToString();
                                    Fpsmarks.Sheets[0].Cells[l, 2].Text = val;
                                }
                            }
                        }
                    }
                    int sno = 0;
                    for (int srn = 1; srn < Fpsmarks.Sheets[0].RowCount; srn++)
                    {
                        sno++;
                        Fpsmarks.Sheets[0].Cells[srn, 0].Text = sno.ToString();
                    }
                    Fpsmarks.Sheets[0].PageSize = Fpsmarks.Sheets[0].RowCount;
                    Fpsmarks.Height = 80 + (Fpsmarks.Sheets[0].RowCount * 25);
                    Fpsmarks.SaveChanges();
                }
                else
                {
                    btnsubjectchoosesave.Visible = false;
                    Fpsmarks.Sheets[0].ColumnCount = 0;
                    Fpsmarks.Sheets[0].RowCount = 0;
                    Fpsmarks.Sheets[0].ColumnCount = 4;
                    Fpsmarks.Sheets[0].RowCount = 1;
                    Fpsmarks.ColumnHeader.Columns.Default.Width = 150;
                    Fpsmarks.ColumnHeader.Visible = false;
                    Fpsmarks.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                    Fpsmarks.Width = 600;
                    Fpsmarks.Height = 150;
                    Fpsmarks.Sheets[0].Cells[0, 0].Text = "No Records Found";
                    Fpsmarks.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpsmarks.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                    Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpsmarks.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                    Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                    Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                    Fpsmarks.Visible = true;
                }
            }
            else
            {
                btnsubjectchoosesave.Visible = false;
                Fpsmarks.Sheets[0].ColumnCount = 0;
                Fpsmarks.Sheets[0].RowCount = 0;
                Fpsmarks.Sheets[0].ColumnCount = 4;
                Fpsmarks.Sheets[0].RowCount = 1;
                Fpsmarks.ColumnHeader.Columns.Default.Width = 150;
                Fpsmarks.ColumnHeader.Visible = false;
                Fpsmarks.Sheets[0].SpanModel.Add(0, 0, 1, 4);
                Fpsmarks.Width = 600;
                Fpsmarks.Height = 150;
                Fpsmarks.Sheets[0].Cells[0, 0].Text = "No Records Found";
                Fpsmarks.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                Fpsmarks.Sheets[0].Cells[0, 0].ForeColor = Color.Blue;
                Fpsmarks.Sheets[0].Cells[0, 0].Font.Size = FontUnit.Medium;
                Fpsmarks.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";
                Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                Fpsmarks.Visible = true;
            }
        }
        catch
        {
        }
    }

    protected void btnsubjectchoosesave_Click(Object sender, EventArgs e)
    {
        Boolean saveflag = false;
        btnsubjectchoosesave.Visible = true;
        Fpsmarks.Visible = true;
        Fpsmarks.SaveChanges();
        hat.Clear();
        string batchyear = Session["b_year"].ToString();
        string degree_code = Session["deg_code"].ToString();
        string sem = Session["semes"].ToString();
        int insert = 0;
        for (int i = 1; i < Fpsmarks.Sheets[0].RowCount; i++)
        {
            string suname = Fpsmarks.Sheets[0].Cells[i, 2].Text.ToString();
            if (suname != "")
            {
                if (!hat.Contains(suname))
                {
                    hat.Add(suname, suname);
                }
                else
                {
                    lblnorec.Visible = true;
                    lblnorec.Text = "Same Subject Not Allow";
                    return;
                }
            }
        }
        hat.Clear();
        string sqlquery = "select distinct subject_no,subtype_no,paper_order from subjectChooser where roll_no='" + Session["RollNo"].ToString() + "' and semester=" + sem + "";
        DataSet dssub = d2.select_method_wo_parameter(sqlquery, "Text");
        if (dssub.Tables[0].Rows.Count > 0)
        {
            for (int su = 0; su < dssub.Tables[0].Rows.Count; su++)
            {
                string subno = dssub.Tables[0].Rows[su]["subject_no"].ToString();
                string paperorder = dssub.Tables[0].Rows[su]["paper_order"].ToString();
                if (!hat.Contains(subno))
                {
                    hat.Add(subno, paperorder);
                }
            }
        }
        int paper_order = 0;
        string tempsubtype = string.Empty;
        for (int i = 1; i < Fpsmarks.Sheets[0].RowCount; i++)
        {
            string subject = Fpsmarks.Sheets[0].Cells[i, 2].Text.ToString();
            string subtype = Fpsmarks.Sheets[0].Cells[i, 1].Note.ToString();
            string subpaperorde = Fpsmarks.Sheets[0].Cells[i, 1].Tag.ToString();
            if (tempsubtype != subtype)
            {
                tempsubtype = subtype;
                paper_order = 1;
            }
            else
            {
                paper_order++;
            }
            if (subject != "")
            {
                string[] spno = subject.Split('-');
                string subno = spno[spno.GetUpperBound(0)].ToString();
                if (!hat.Contains(subno))
                {
                    int subcount = Convert.ToInt32(GetFunction("select isnull(COUNT(*),'0') from subjectChooser where subject_no='" + subno + "' and semester='" + sem + "'"));
                    int totcount = 0;
                    try
                    {
                        totcount = Convert.ToInt32(GetFunction("select isnull(maxstud,'0') from subject where subject_no='" + subno + "'"));
                    }
                    catch
                    {
                    }
                    if (totcount == 0)
                    {
                        totcount = subcount + 10;
                    }
                    if (subcount < totcount)
                    {
                        sqlquery = "insert into subjectChooser (roll_no,semester,subject_no,subtype_no,paper_order) values('" + Session["RollNo"].ToString() + "','" + sem + "','" + subno + "','" + subtype + "','" + paper_order + "')";
                    }
                    else
                    {
                        lblnorec.Visible = true;
                        lblnorec.Text = "'" + spno[0] + "' Subject will be Allow for " + totcount + " Students Only";
                        //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Subject Will Allow " + totcount + " Students Only')", true);
                        return;
                    }
                }
                else
                {
                    int subcount = Convert.ToInt32(GetFunction("select isnull(COUNT(*),'0') from subjectChooser where subject_no='" + subno + "' and semester='" + sem + "'"));
                    int totcount = 0;
                    try
                    {
                        totcount = Convert.ToInt32(GetFunction("select isnull(maxstud,'0') from subject where subject_no='" + subno + "'"));
                    }
                    catch
                    {
                    }
                    if (totcount == 0)
                    {
                        totcount = subcount + 10;
                    }
                    if (subcount <= totcount)
                    {
                        subpaperorde = hat[subno].ToString();
                        sqlquery = "update subjectChooser set subtype_no='" + subtype + "',paper_order='" + paper_order + "' where roll_no='" + Session["RollNo"].ToString() + "' and semester=" + sem + " and subject_no='" + subno + "'";
                        hat.Remove(subno);
                    }
                    else
                    {
                        lblnorec.Visible = true;
                        lblnorec.Text = "'" + spno[0] + "' Subject will be Allow for " + totcount + " Students Only";
                        //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Subject Will Allow " + totcount + " Students Only')", true);
                        return;
                    }
                }
                insert = d2.update_method_wo_parameter(sqlquery, "Text");
                saveflag = true;
            }
        }
        for (int i = 0; i < dssub.Tables[0].Rows.Count; i++)
        {
            string subno = dssub.Tables[0].Rows[i]["subject_no"].ToString();
            if (hat.Contains(subno))
            {
                string deletequery = "delete from subjectChooser where roll_no='" + Session["RollNo"].ToString() + "' and semester='" + sem + "' and subject_no='" + subno + "'";
                insert = d2.update_method_wo_parameter(deletequery, "Text");
            }
        }
        if (saveflag == true)
        {
            lblnorec.Visible = true;
            lblnorec.ForeColor = Color.Green;
            lblnorec.Text = "Saved Successfully";
            //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Record Saved  Successfully!')", true);
        }
        else
        {
            lblnorec.Visible = true;
            lblnorec.Text = "Please Chosose Subject";
            return;
        }
    }

    public void databindchart()
    {
        string hex = "#FFFF00";
        string hex1 = "#9900FF";
        Color chcolor3 = System.Drawing.ColorTranslator.FromHtml(hex1);
        string hex2 = "#189ded";
        Color chcolor2 = System.Drawing.ColorTranslator.FromHtml(hex2);
        Color chcolor1 = System.Drawing.ColorTranslator.FromHtml(hex);
        try
        {
            ds.Clear();
            dataf.Visible = true;
            DataSet attsem = new DataSet();
            double grademark = 0;
            string value = string.Empty;
            string sqldatabind = " select distinct Mark_Grade,Credit_Points from Grade_Master where Degree_Code='" + Session["deg_code"] + "' and batch_year='" + lblyear.Text + "' order by Credit_Points desc";
            datagrade = d2.select_method_wo_parameter(sqldatabind, "text");
            if (datagrade.Tables[0].Rows.Count > 0)
            {
                for (int l = 0; l < datagrade.Tables[0].Rows.Count; l++)
                {
                    value = datagrade.Tables[0].Rows[0]["Mark_Grade"].ToString();
                    ht.Add(datagrade.Tables[0].Rows[l]["Mark_Grade"], "" + datagrade.Tables[0].Rows[l]["Credit_Points"] + "");
                }
            }
            if (lblsem.Text != "")
            {
                for (int i = 1; i <= Convert.ToInt32(lblsem.Text); i++)
                {
                    chartbol = false;
                    f = i.ToString();
                    string sqlsybmaster = "select * from syllabus_master where semester in(" + f + ") and degree_code='" + Session["deg_code"] + "'and Batch_Year=" + lblyear.Text + "";
                    datauniv = d2.select_method_wo_parameter(sqlsybmaster, "text");
                    string sqlsubject = "select distinct sem.subject_type,s.subject_code,S.subject_no,subject_name,s.acronym from subject as S,syllabus_master  as SM,subjectchooser as SC,Sub_sem as Sem where S.subject_no=SC.Subject_no and  s.syll_code=SM.syll_code  and SM.degree_code='" + Session["deg_code"] + "' and SM.semester='" + f + "' and  S.subtype_no = Sem.subtype_no and promote_count=1 and SM.batch_year='" + lblyear.Text + "' and roll_no='" + Session["RollNo"] + "' order by S.subject_no ";
                    //string sqlsubject = "select distinct subjectchooser.subject_no,subject.acronym,subject_type  from staff_selector ss,subject,staffmaster sm,subjectchooser,registration, sub_sem,exam_type e where  ss.subject_no=subject.subject_no and sm.staff_code=ss.staff_code and sub_sem.subType_no=subject.subType_no   and delflag = 0 and  sub_sem.syll_code =  subject.syll_code   and subject.subject_no =   subjectchooser.subject_no and subjectchooser.roll_no =registration.roll_no and  registration.degree_code='' and registration.batch_year=" + lblyear.Text + " and Registration.roll_no='" + Session["RollNo"] + "' and subject.syll_code  in (" + datauniv.Tables[0].Rows[0]["syll_code"] + ")order by subjectchooser.subject_no";
                    datachart = d2.select_method_wo_parameter(sqlsubject, "text");
                    datachart.Tables[0].Columns.Add("univmark", typeof(string));
                    datachart.Tables[0].Columns.Add("cammark", typeof(string));
                    datachart.Tables[0].Columns.Add("attendanceave", typeof(string));
                    string sql = " Select distinct Current_Semester,Exam_Code,exam_month,exam_year from Exam_Details where Degree_Code = '" + Session["deg_code"] + "' and Current_Semester in(" + f + ") and Batch_Year = " + lblyear.Text + "";
                    ds3 = d2.select_method_wo_parameter(sql, "text");
                    string sql2 = "select semester,start_date,end_date,no_of_working_days from seminfo where degree_code=" + Session["deg_code"] + " and semester =" + f + " and batch_year= " + lblyear.Text + "  order by semester  ";
                    attsem = d2.select_method_wo_parameter(sql2, "text");
                    if (attsem.Tables[0].Rows.Count > 0)
                    {
                        //find_values(Session["RollNo"].ToString(), attsem.Tables[0].Rows[0]["start_date"].ToString(), attsem.Tables[0].Rows[0]["end_date"].ToString(), Session["deg_code"].ToString(), f.ToString());
                        cur_start_date_date = attsem.Tables[0].Rows[0]["start_date"].ToString();
                        cur_end_date_date = attsem.Tables[0].Rows[0]["end_date"].ToString();
                        string[] cur_start_date_splt = cur_start_date_date.Split(' ');
                        cur_start_date = cur_start_date_splt[0].ToString();
                        string[] cur_end_date_splt = cur_end_date_date.Split(' ');
                        cur_end_date = cur_end_date_splt[0].ToString();
                        string strsec1 = string.Empty;
                        string dt = cur_start_date;
                        string[] dsplit = dt.Split(new Char[] { '/' });
                        cur_start_date = dsplit[0].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[2].ToString();
                        demfcal = int.Parse(dsplit[2].ToString());
                        demfcal = demfcal * 12;
                        cal_from_date = demfcal + int.Parse(dsplit[0].ToString());
                        monthcal = cal_from_date.ToString();
                        dt = cur_end_date;
                        dsplit = dt.Split(new Char[] { '/' });
                        cur_end_date = dsplit[0].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[2].ToString();
                        demtcal = int.Parse(dsplit[2].ToString());
                        demtcal = demtcal * 12;
                        cal_to_date = demtcal + int.Parse(dsplit[0].ToString());
                        per_from_date = Convert.ToDateTime(cur_start_date_date);
                        per_to_date = Convert.ToDateTime(cur_end_date_date);
                        dumm_from_date = per_from_date;
                        loadsubject();
                        loadstudent();
                    }
                    if (ds3.Tables[0].Rows.Count > 0)
                    {
                        DataSet university = new DataSet();
                        string sqlquery = "Select grade_flag from grademaster where exam_month='" + ds3.Tables[0].Rows[0]["exam_month"] + "' and exam_year='" + ds3.Tables[0].Rows[0]["exam_year"] + "' and Batch_year='" + lblyear.Text + "' and degree_code='" + Session["deg_code"] + "'";
                        university = da.select_method_wo_parameter(sqlquery, "text");
                        string sql1 = "Select acronym as subject_name,subject_code,subject.subject_no,result,internal_mark,external_mark,total,grade, cp,m.subject_no,subject.min_ext_marks,subject.min_int_marks,subject.max_int_marks,subject.max_ext_marks,isnull(m.internal_mark,0)  as internal_mark ,isnull(m..external_mark,0) as external_mark,semester from Mark_Entry m,Subject, sub_sem,syllabus_master,Registration r where r.Roll_No=m.roll_no and syllabus_master.syll_code=subject.syll_code and m..Subject_No = Subject.Subject_No and  subject.subtype_no= sub_sem.subtype_no and  Exam_Code in('" + ds3.Tables[0].Rows[0]["Exam_Code"] + "')  and r.roll_no='" + Session["RollNo"] + "'  and result!='fail'  and cc=0 and delflag=0 and exam_flag<>'debar'  order by semester desc,subject_type desc,subject.subject_no asc";
                        //" Select acronym as subject_name,subject_code,subject.subject_no,result,total,grade, cp,mark_entry.subject_no,subject.min_ext_marks,subject.min_int_marks,isnull(Mark_Entry.internal_mark,0)  as internal_mark ,isnull(Mark_Entry.external_mark,0) as external_mark,semester from Mark_Entry,Subject, sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and  subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(" + ds3.Tables[0].Rows[0]["Exam_Code"] + ")  and roll_no='" + + "'  and result!='fail'    order by semester desc,subject_type desc,subject.subject_no asc";
                        ds1 = d2.select_method_wo_parameter(sql1, "text");
                        if (university.Tables[0].Rows.Count > 0)
                        {
                            if (university.Tables[0].Rows[0]["grade_flag"].ToString() == "2")
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                                    {
                                        if (ds1.Tables[0].Rows[j]["cp"] == DBNull.Value || ds1.Tables[0].Rows[j]["cp"].ToString() == "0")
                                        {
                                        }
                                        else
                                        {
                                            string mark = ds1.Tables[0].Rows[j]["grade"].ToString();
                                            double mark2 = Convert.ToInt32(ht[value]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                            double mark1 = 0;
                                            foreach (DictionaryEntry child in ht)
                                            {
                                                if (mark.ToString() == child.Key.ToString())
                                                {
                                                    mark1 = Convert.ToInt32(child.Value) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                                    grademark = ((mark1 / mark2) * 100);
                                                }
                                                if (mark1 != 0)
                                                {
                                                    for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                                                    {
                                                        if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                                        {
                                                            datachart.Tables[0].Rows[k]["univmark"] = Math.Round(grademark);
                                                            chartbol = true;
                                                        }
                                                    }
                                                }
                                            }
                                            //else if (mark == "A")
                                            //{
                                            //    mark1 = Convert.ToInt32(ht["A"]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                            //    grademark = ((mark1 / mark2) * 100);
                                            //}
                                            //else if (mark == "B")
                                            //{
                                            //    mark1 = Convert.ToInt32(ht["B"]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                            //    grademark = ((mark1 / mark2) * 100);
                                            //}
                                            //else if (mark == "C")
                                            //{
                                            //    mark1 = Convert.ToInt32(ht["C"]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                            //    grademark = ((mark1 / mark2) * 100);
                                            //}
                                            //else if (mark == "D")
                                            //{
                                            //    mark1 = Convert.ToInt32(ht["D"]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                            //    grademark = ((mark1 / mark2) * 100);
                                            //}
                                            //else if (mark == "E")
                                            //{
                                            //    mark1 = Convert.ToInt32(ht["E"]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                            //    grademark = ((mark1 / mark2) * 100);
                                            //}
                                            //else if (mark == "U" && mark == "UA")
                                            //{
                                            //    grademark = 0;
                                            //}
                                        }
                                    }
                                }
                            }
                            else if (university.Tables[0].Rows[0]["grade_flag"].ToString() == "3")
                            {
                                string dd = "select linkvalue from inssettings where linkname='corresponding grade' and college_code='" + Session["collegecode"].ToString() + "'";
                                double total = 0.0;
                                DataSet df1 = new DataSet();
                                df1 = da.select_method_wo_parameter(dd, "text");
                                if (df1.Tables[0].Rows[0]["linkvalue"].ToString() == "0")
                                {
                                    if (ds1.Tables[0].Rows.Count > 0)
                                    {
                                        for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                                        {
                                            double internal1 = Convert.ToDouble(ds1.Tables[0].Rows[j]["internal_mark"]);
                                            double external = Convert.ToDouble(ds1.Tables[0].Rows[j]["external_mark"]);
                                            double mark1 = Convert.ToDouble(ds1.Tables[0].Rows[j]["min_ext_marks"]);
                                            double mark2 = Convert.ToDouble(ds1.Tables[0].Rows[j]["min_int_marks"]);
                                            if (internal1 >= mark2 && external >= mark1)
                                            {
                                                for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                                                {
                                                    if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                                    {
                                                        total = (Convert.ToDouble(ds1.Tables[0].Rows[j]["total"]) / (Convert.ToDouble(ds1.Tables[0].Rows[j]["max_int_marks"]) + Convert.ToDouble(ds1.Tables[0].Rows[j]["max_ext_marks"]))) * 100;
                                                        datachart.Tables[0].Rows[k]["univmark"] = Math.Round(total);
                                                        chartbol = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (df1.Tables[0].Rows[0]["linkvalue"].ToString() == "1")
                                {
                                    if (ds1.Tables[0].Rows.Count > 0)
                                    {
                                        for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                                        {
                                            if (ds1.Tables[0].Rows[j]["cp"] == DBNull.Value || ds1.Tables[0].Rows[j]["cp"].ToString() == "0")
                                            {
                                            }
                                            else
                                            {
                                                string mark = ds1.Tables[0].Rows[j]["grade"].ToString();
                                                double mark2 = Convert.ToInt32(ht[value]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                                double mark1 = 0;
                                                foreach (DictionaryEntry child in ht)
                                                {
                                                    if (mark.ToString() == child.Key.ToString())
                                                    {
                                                        mark1 = Convert.ToInt32(child.Value) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                                        grademark = ((mark1 / mark2) * 100);
                                                    }
                                                    if (mark1 != 0)
                                                    {
                                                        for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                                                        {
                                                            if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                                            {
                                                                datachart.Tables[0].Rows[k]["univmark"] = Math.Round(grademark);
                                                                chartbol = true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else if (university.Tables[0].Rows[0]["grade_flag"].ToString() == "1")
                            {
                                double total = 0.0;
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                                    {
                                        double internal1 = Convert.ToDouble(ds1.Tables[0].Rows[j]["internal_mark"]);
                                        double external = Convert.ToDouble(ds1.Tables[0].Rows[j]["external_mark"]);
                                        double mark1 = Convert.ToDouble(ds1.Tables[0].Rows[j]["min_ext_marks"]);
                                        double mark2 = Convert.ToDouble(ds1.Tables[0].Rows[j]["min_int_marks"]);
                                        if (internal1 >= mark2 && external >= mark1)
                                        {
                                            for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                                            {
                                                if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                                {
                                                    total = (Convert.ToDouble(ds1.Tables[0].Rows[j]["total"]) / (Convert.ToDouble(ds1.Tables[0].Rows[j]["max_int_marks"]) + Convert.ToDouble(ds1.Tables[0].Rows[j]["max_ext_marks"]))) * 100;
                                                    datachart.Tables[0].Rows[k]["univmark"] = Math.Round(total);
                                                    chartbol = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (datachart.Tables[0].Rows.Count > 0)
                    {
                        for (int j = 0; j < datachart.Tables[0].Rows.Count; j++)
                        {
                            string sqlcam = "select syllabus_master.semester,syllabus_master.syll_code,criteria_no,criteria_no from criteriaforinternal,syllabus_master syllabus_master  where  criteriaforinternal.syll_code=syllabus_master.syll_code and syllabus_master.degree_code='" + Session["deg_code"] + "' and syllabus_master.semester in(" + i + ") and syllabus_year=syllabus_master.syllabus_year and syllabus_master.batch_year=" + lblyear.Text + " order by semester,criteria";
                            datacre_no = d2.select_method_wo_parameter(sqlcam, "text");
                            string criteria_no = string.Empty;
                            if (datacre_no.Tables[0].Rows.Count > 0)
                            {
                                for (int g = 0; g < datacre_no.Tables[0].Rows.Count; g++)
                                {
                                    if (criteria_no.ToString() == "")
                                    {
                                        criteria_no = datacre_no.Tables[0].Rows[g]["criteria_no"].ToString();
                                    }
                                    else
                                    {
                                        criteria_no = criteria_no + "," + datacre_no.Tables[0].Rows[g]["criteria_no"].ToString();
                                    }
                                }
                            }
                            if (criteria_no.ToString() != "")
                            {
                                string sqldata = "select distinct c.criteria,c.criteria_no,r.marks_obtained,s.acronym,e.subject_no,s.subject_name,e.min_mark,e.max_mark from criteriaforinternal c, result r,exam_type e,subject s,syllabus_master sn,Registration re where re.Roll_No=r.roll_no and cc=0 and delflag=0 and exam_flag<>'debar'and r.exam_code=e.exam_code and c.Criteria_no=e.criteria_no and e.batch_year=" + lblyear.Text + " and r.roll_no='" + Session["RollNo"] + "' and c.Criteria_no  in(" + criteria_no + ")  and acronym='" + datachart.Tables[0].Rows[j]["acronym"] + "'  and s.subject_code='" + datachart.Tables[0].Rows[j]["subject_code"] + "' and s.subject_no=e.subject_no  order by criteria";
                                datacam = d2.select_method_wo_parameter(sqldata, "text");
                                double cammark = 0;
                                double camavamark = 0;
                                if (datacam.Tables[0].Rows.Count > 0)
                                {
                                    for (int h = 0; h < datacam.Tables[0].Rows.Count; h++)
                                    {
                                        double maxmark = 0;
                                        double markobtained = Convert.ToDouble(datacam.Tables[0].Rows[h]["marks_obtained"]);
                                        if (datacam.Tables[0].Rows[h]["max_mark"].ToString() != "")
                                        {
                                            maxmark = Convert.ToDouble(datacam.Tables[0].Rows[h]["max_mark"]);
                                            cammark = cammark + ((markobtained / maxmark) * 100);
                                        }
                                    }
                                    camavamark = cammark / datacam.Tables[0].Rows.Count;
                                    for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                                    {
                                        if (datachart.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                        {
                                            datachart.Tables[0].Rows[k]["cammark"] = Math.Round(camavamark);
                                            chartbol = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    Table tb = new Table();
                    if (chartbol == true)
                    {
                        Chart data = new Chart();
                        data.Series.Add("Series1");
                        data.Series.Add("Series2");
                        data.Series.Add("Series3");
                        Title da = data.Titles.Add(lbl_semOrTerm.Text + " " + f + " (University,Cam and Attendance Report)");
                        da.Font = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                        data.ChartAreas.Add("0");
                        data.DataSource = datachart;
                        data.Height = 500;
                        data.Width = 500;
                        data.ChartAreas[0].AxisX.Interval = 1;
                        data.ChartAreas[0].AxisY.Maximum = 110;
                        data.ChartAreas[0].AxisX.TitleAlignment = StringAlignment.Center;
                        data.ChartAreas[0].AxisY.TitleAlignment = StringAlignment.Center;
                        data.ChartAreas[0].AxisX.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                        data.ChartAreas[0].AxisY.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                        data.Series["Series1"].IsValueShownAsLabel = true;
                        data.Series["Series2"].IsValueShownAsLabel = true;
                        data.Series["Series3"].IsValueShownAsLabel = true;
                        data.Series["Series1"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                        data.Series["Series2"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                        data.Series["Series3"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                        data.ChartAreas[0].AxisX.MajorGrid.Enabled = false;
                        data.ChartAreas[0].AxisX.Title = "Subject Name";
                        data.ChartAreas[0].AxisY.Title = "Marks and Attendance";
                        data.Series["Series1"].Color = Color.DeepSkyBlue;
                        data.Series["Series1"].BorderWidth = 3;
                        data.Series["Series1"].XValueMember = "acronym";
                        data.Series["Series1"].YValueMembers = "univmark";
                        data.Series["Series2"].Color = chcolor1;
                        data.Series["Series2"].BorderWidth = 3;
                        data.Series["Series2"].XValueMember = "acronym";
                        data.Series["Series2"].YValueMembers = "cammark";
                        data.Series["Series3"].Color = Color.OrangeRed;
                        data.Series["Series3"].BorderWidth = 3;
                        data.Series["Series3"].XValueMember = "acronym";
                        data.Series["Series3"].YValueMembers = "attendanceave";
                        data.Series["Series1"].Name = "University Mark";
                        data.Series["Series2"].Name = "Cam Mark";
                        data.Series["Series3"].Name = "Attendance Percentage";
                        Legend lg = new Legend();
                        data.Legends.Add(lg);
                        lg.LegendStyle = LegendStyle.Row;
                        lg.Docking = Docking.Top;
                        lg.Alignment = System.Drawing.StringAlignment.Center;
                        data.DataBind();
                        Panel8.Controls.Add(data);
                    }
                    else
                    {
                        Label lblerror = new Label();
                        lblerror.Text = "No Records Found For " + lbl_semOrTerm.Text + f + " (University,Cam and Attendance Report)";
                        lblerror.ForeColor = Color.Red;
                        lblerror.Font.Size = FontUnit.Medium;
                        lblerror.Font.Bold = true;
                        lblerror.Font.Name = "Book Antiqua";
                        TableCell tc1 = new TableCell();
                        TableRow tr1 = new TableRow();
                        tc1.Controls.Add(lblerror);
                        tr1.Cells.Add(tc1);
                        tb.Rows.Add(tr1);
                        Panel8.Controls.Add(tb);
                    }
                    pn = new AjaxControlToolkit.AccordionPane();
                    pn.ID = "Pane" + f;
                    pnchart1 = new Panel();
                    pnchart1.ID = "pnel" + f;
                    pnchart1.Height = 1000;
                    Label lbTitle;
                    lbTitle = new Label();
                    lbTitle.Text = lbl_semOrTerm.Text + "  " + f + "";
                    pn.HeaderContainer.Controls.Add(lbTitle);
                    lblerror1 = new Label();
                    lblerror1.Text = string.Empty;
                    for (int l = 0; l < datachart.Tables[0].Rows.Count; l++)
                    {
                        if (datachart.Tables[0].Rows[l]["univmark"] == DBNull.Value)
                        {
                            datachart.Tables[0].Rows[l]["univmark"] = "0";
                        }
                        if (datachart.Tables[0].Rows[l]["cammark"] == DBNull.Value)
                        {
                            datachart.Tables[0].Rows[l]["cammark"] = "0";
                        }
                        if (datachart.Tables[0].Rows[l]["attendanceave"] == DBNull.Value)
                        {
                            datachart.Tables[0].Rows[l]["attendanceave"] = "0";
                        }
                    }
                    if (chartbol == true)
                    {
                        Chart data1 = new Chart();
                        data1.Series.Add("Series1");
                        data1.Series.Add("Series2");
                        data1.Series.Add("Series3");
                        data1.Series["Series1"].ChartType = SeriesChartType.Line;
                        data1.Series["Series2"].ChartType = SeriesChartType.Line;
                        data1.Series["Series3"].ChartType = SeriesChartType.Line;
                        data1.Series["Series1"].LabelAngle = 90;
                        data1.Series["Series2"].LabelAngle = 90;
                        data1.Series["Series3"].LabelAngle = 90;
                        Title da1 = data1.Titles.Add(lbl_semOrTerm.Text + " " + f + " (University,Cam and Attendance Report)");
                        da1.Font = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                        data1.ChartAreas.Add("0");
                        data1.DataSource = datachart;
                        data1.Height = 500;
                        data1.Width = 450;
                        data1.ChartAreas[0].AxisX.Interval = 1;
                        data1.ChartAreas[0].AxisY.Maximum = 100;
                        data1.ChartAreas[0].AxisX.TitleAlignment = StringAlignment.Center;
                        data1.ChartAreas[0].AxisY.TitleAlignment = StringAlignment.Center;
                        data1.ChartAreas[0].AxisX.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                        data1.ChartAreas[0].AxisY.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                        data1.ChartAreas[0].AxisX.LabelStyle.Font.Bold.ToString();
                        data1.ChartAreas[0].AxisY.LabelStyle.Font.Bold.ToString();
                        data1.Series["Series1"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                        data1.Series["Series2"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                        data1.Series["Series3"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                        data1.Series["Series1"].IsValueShownAsLabel = true;
                        data1.Series["Series2"].IsValueShownAsLabel = true;
                        data1.Series["Series3"].IsValueShownAsLabel = true;
                        data1.ChartAreas[0].AxisX.MajorGrid.Enabled = false;
                        data1.ChartAreas[0].AxisX.Title = "Subject Name";
                        data1.ChartAreas[0].AxisY.Title = "Marks and Attendance";
                        data1.Series["Series1"].Color = Color.BlueViolet;
                        data1.Series["Series1"].BorderWidth = 3;
                        data1.Series["Series1"].XValueMember = "acronym";
                        data1.Series["Series1"].YValueMembers = "univmark";
                        data1.Series["Series2"].Color = Color.Green;
                        data1.Series["Series2"].BorderWidth = 3;
                        data1.Series["Series2"].XValueMember = "acronym";
                        data1.Series["Series2"].YValueMembers = "cammark";
                        data1.Series["Series3"].Color = Color.OrangeRed;
                        data1.Series["Series3"].BorderWidth = 3;
                        data1.Series["Series3"].XValueMember = "acronym";
                        data1.Series["Series3"].YValueMembers = "attendanceave";
                        data1.Series["Series1"].Name = "University Mark";
                        data1.Series["Series2"].Name = "Cam Mark";
                        data1.Series["Series3"].Name = "Attendance Percentage";
                        Legend lg1 = new Legend();
                        data1.Legends.Add(lg1);
                        lg1.LegendStyle = LegendStyle.Row;
                        lg1.Docking = Docking.Top;
                        lg1.Alignment = System.Drawing.StringAlignment.Center;
                        data1.DataBind();
                        accordace.Panes.Add(pn);
                        pnchart1.Controls.Add(data1);
                        pn.ContentContainer.Controls.Add(pnchart1);
                        bindcamchart();
                    }
                    else
                    {
                        lblerror1.Text = Environment.NewLine + "No Records Found For " + lbl_semOrTerm.Text + f + " (University,Cam and Attendance Report) ";
                        lblerror1.ForeColor = Color.Red;
                        lblerror1.Font.Size = FontUnit.Medium;
                        lblerror1.Font.Bold = true;
                        lblerror1.Font.Name = "Book Antiqua";
                        bindcamchart();
                    }


                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void bindcamchart()
    {
        Boolean camchartbool = false;
        Boolean universitydata = false;
        Boolean camuniversity = false;
        try
        {
            DataSet camchartaver = new DataSet();
            DataSet camsubject = new DataSet();
            double cammark = 0;
            double camavamark = 0;
            double camaverage = 0;
            //if (lblsem.Text != "")
            //{
            //    for (int i = 1; i <= Convert.ToInt32(lblsem.Text); i++)
            //    {
            string sqlcam = "select syllabus_master.semester,syllabus_master.syll_code,criteria,criteria_no from criteriaforinternal,syllabus_master syllabus_master  where  criteriaforinternal.syll_code=syllabus_master.syll_code and syllabus_master.degree_code='" + Session["deg_code"] + "' and syllabus_master.semester in(" + f + ") and syllabus_year=syllabus_master.syllabus_year and syllabus_master.batch_year=" + lblyear.Text + " order by semester,criteria";
            datacre_no = d2.select_method_wo_parameter(sqlcam, "text");
            string criteria_no = string.Empty;
            if (datacre_no.Tables[0].Rows.Count > 0)
            {
                for (int l = 0; l < datacre_no.Tables[0].Rows.Count; l++)
                {
                    if (criteria_no.ToString() == "")
                    {
                        criteria_no = datacre_no.Tables[0].Rows[l]["criteria_no"].ToString();
                    }
                    else
                    {
                        criteria_no = criteria_no + "," + datacre_no.Tables[0].Rows[l]["criteria_no"].ToString();
                    }
                }
            }
            if (criteria_no.ToString() != "")
            {
                string datachart1 = "select distinct s.acronym,e.subject_no from criteriaforinternal c, result r,exam_type e,subject s,syllabus_master sn where r.exam_code=e.exam_code and c.Criteria_no=e.criteria_no and e.batch_year='" + lblyear.Text + "' and r.roll_no='" + Session["Rollno"] + "' and c.Criteria_no  in(" + criteria_no + ")  and s.subject_no=e.subject_no";
                camsubject = da.select_method_wo_parameter(datachart1, "text");
                datacre_no.Tables[0].Columns.Add("univmark", typeof(string));
                cammark = 0;
            }
            if (datacre_no.Tables[0].Rows.Count > 0)
            {
                for (int g = 0; g < datacre_no.Tables[0].Rows.Count; g++)
                {
                    string sqlquery = "select distinct c.criteria,c.criteria_no,r.marks_obtained,s.acronym,e.subject_no,s.subject_name,e.min_mark,e.max_mark from criteriaforinternal c, result r,exam_type e,subject s,syllabus_master sn,Registration re where re.Roll_No=r.roll_no and cc=0 and delflag=0 and exam_flag<>'debar' and r.exam_code=e.exam_code and c.Criteria_no=e.criteria_no and e.batch_year='" + lblyear.Text + "' and r.roll_no='" + Session["Rollno"] + "' and c.Criteria_no  in(" + datacre_no.Tables[0].Rows[g]["criteria_no"] + ") and s.subject_no=e.subject_no  order by criteria,e.subject_no";
                    datachart = d2.select_method_wo_parameter(sqlquery, "text");
                    datachart.Tables[0].Columns.Add("univmark", typeof(string));
                    if (g == 0)
                    {
                        camchartaver = camsubject.Copy();
                        camchartaver.Tables[0].Columns.Remove("subject_no");
                    }
                    if (datachart.Tables[0].Rows.Count > 0)
                    {
                        if (camchartaver.Tables[0].Columns.Contains(datachart.Tables[0].Rows[0]["criteria"].ToString()))
                        {
                            camchartaver.Tables[0].Columns.Add("" + datachart.Tables[0].Rows[0]["criteria"].ToString() + "" + i + "", typeof(string));
                            cammark = 0;
                        }
                        else
                        {
                            camchartaver.Tables[0].Columns.Add("" + datachart.Tables[0].Rows[0]["criteria"].ToString() + "", typeof(string));
                            cammark = 0;
                        }
                    }
                    if (datachart.Tables[0].Rows.Count > 0)
                    {
                        for (int j = 0; j < datachart.Tables[0].Rows.Count; j++)
                        {
                            double markobtained = Convert.ToDouble(datachart.Tables[0].Rows[j]["marks_obtained"]);
                            if (datachart.Tables[0].Rows[j]["max_mark"].ToString() != "")
                            {
                                double maxmark = Convert.ToDouble(datachart.Tables[0].Rows[j]["max_mark"]);
                                camaverage = (markobtained / maxmark) * 100;
                                cammark = cammark + camaverage;
                            }
                            if (camaverage > 0)
                            {
                                datachart.Tables[0].Rows[j]["univmark"] = Math.Round(camaverage, 2);
                            }
                            else
                            {
                                datachart.Tables[0].Rows[j]["univmark"] = 0;
                            }
                            for (int t = 0; t < camsubject.Tables[0].Rows.Count; t++)
                            {
                                if (datachart.Tables[0].Rows[j]["subject_no"].ToString() == camsubject.Tables[0].Rows[t]["subject_no"].ToString())
                                {
                                    if (camaverage > 0)
                                    {
                                        camchartaver.Tables[0].Rows[t]["" + datachart.Tables[0].Rows[0]["criteria"].ToString() + ""] = Math.Round(camaverage, 2);
                                        camchartbool = true;
                                    }
                                    else
                                    {
                                        camchartaver.Tables[0].Rows[t]["" + datachart.Tables[0].Rows[0]["criteria"].ToString() + ""] = "0";
                                    }
                                }
                            }
                        }
                        camavamark = cammark / (datachart.Tables[0].Rows.Count);
                    }
                }
            }
            lblerror2 = new Label();
            lblerror2.Text = string.Empty;
            Boolean dbnull = false;
            Boolean ddnull1 = false;
            //  string data = camchartaver.Tables[0].Rows[2]["Retest1"].ToString();
            //if (camchartaver.Tables.Count != 0)
            //{
            //    if (camchartaver.Tables[0].Rows.Count > 0)
            //    {
            //        for (int j = 1; j < camchartaver.Tables[0].Columns.Count; j++)
            //        {
            //            dbnull = false;
            //            for (int p = 0; p < camchartaver.Tables[0].Rows.Count; p++)
            //            {
            //                if (camchartaver.Tables[0].Rows[p][j].ToString() != "" ||camchartaver.Tables[0].Rows[p][j].ToString() !="")
            //                {
            //                    dbnull = true;
            //                }
            //                else
            //                {
            //                    ddnull1 = true;
            //                }
            //            }
            //            if (ddnull1 == true && dbnull == false)
            //            {
            //                camchartaver.Tables[0].Columns.Remove(camchartaver.Tables[0].Columns[j]);
            //            }
            //        }
            //    }
            //}
            if (camchartbool == true)
            {
                Chart data1 = new Chart();
                data1.DataSource = camchartaver;
                data1.ChartAreas.Add("ChartArea1");
                ArrayList al = new ArrayList();
                Series ss;
                Series dw;
                ht.Clear();
                int i = 0;
                //  data1.ChartType = ChartType.StackColumnChart;
                // data1.ColumnChart.ColumnSpacing = 1;
                data1.ChartAreas[0].AxisX.Interval = 1;
                // data1.Series["series1"].XValueMember = "acronym";
                // data1.Series["series1"].YValueMembers = "" + camchartaver.Tables[0].Columns[k].ColumnName + "";
                data1.Height = 500;
                data1.Width = 500;
                data1.ChartAreas[0].AxisX.MajorGrid.Enabled = false;
                Title datitle = data1.Titles.Add("Cam Testwise Average");
                datitle.Font = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                for (int x = 0; x < camchartaver.Tables[0].Rows.Count; x++)
                {
                    ss = new Series();
                    string name1 = camchartaver.Tables[0].Rows[x]["acronym"].ToString();
                    ss.Name = name1;
                    if (ht.ContainsKey(name1))
                    {
                    }
                    else
                    {
                        ht.Add(name1, "");
                        data1.Series.Add(ss);
                        Legend lg4 = new Legend("Legend1" + ss.ToString());
                        data1.Legends.Add(lg4);
                        lg4.Alignment = StringAlignment.Center;
                        lg4.LegendStyle = LegendStyle.Table;
                        lg4.Docking = Docking.Top;
                        data1.ChartAreas[0].AxisY.Interval = 100;
                        data1.ChartAreas[0].AxisX.Title = "Cam Test Name";
                        data1.ChartAreas[0].AxisY.Title = "Marks";
                        data1.ChartAreas[0].AxisX.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                        data1.ChartAreas[0].AxisY.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                    }
                    for (int k = 1; k < camchartaver.Tables[0].Columns.Count; k++)
                    {
                        if (camchartaver.Tables[0].Rows[x]["" + camchartaver.Tables[0].Columns[k].ColumnName + ""].ToString() != "")
                        {
                            ss.ChartType = SeriesChartType.StackedColumn;
                            ss["" + camchartaver.Tables[0].Columns[k].ColumnName + ""] = camchartaver.Tables[0].Rows[x]["" + camchartaver.Tables[0].Columns[k].ColumnName + ""].ToString();
                            ss.Points.AddXY(camchartaver.Tables[0].Columns["" + camchartaver.Tables[0].Columns[k].ColumnName + ""].ToString(), camchartaver.Tables[0].Rows[x]["" + camchartaver.Tables[0].Columns[k].ColumnName + ""]);
                            foreach (System.Web.UI.DataVisualization.Charting.DataPoint point in ss.Points)
                            {
                                if (point.YValues.Length > 0 && (double)point.YValues.GetValue(0) == 0)
                                {
                                    point.IsValueShownAsLabel = false;
                                }
                                else
                                {
                                    ss.IsValueShownAsLabel = true;
                                }
                            }
                            ss.Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                            var cc1 = System.Drawing.ColorTranslator.FromHtml("#E8E8E8");
                            ss.LabelForeColor = cc1;
                        }
                        else
                        {
                            ss.Points.AddXY("", "");
                            foreach (System.Web.UI.DataVisualization.Charting.DataPoint point in ss.Points)
                            {
                                if (point.YValues.Length > 0 && (double)point.YValues.GetValue(0) == 0)
                                {
                                    point.IsValueShownAsLabel = false;
                                }
                                else
                                {
                                    ss.IsValueShownAsLabel = true;
                                }
                            }
                        }
                    }
                }
                data1.DataBind();
                accordace.Panes.Add(pn);
                pnchart1.Controls.Add(data1);
                pn.ContentContainer.Controls.Add(pnchart1);
            }
            else
            {
                lblerror2.Text = Environment.NewLine + "No Records Found For Cam Testwise Average";
                lblerror2.ForeColor = Color.Red;
                lblerror2.Font.Size = FontUnit.Medium;
                lblerror2.Font.Bold = true;
                lblerror2.Font.Name = "Book Antiqua";
            }
            //-----------------------------------------------------
            Boolean camtestwise = false;
            for (int g = 0; g < datacre_no.Tables[0].Rows.Count; g++)
            {
                string sqlquery = "select distinct c.criteria,c.criteria_no,r.marks_obtained,s.acronym,e.subject_no,s.subject_name,e.min_mark,e.max_mark from criteriaforinternal c, result r,exam_type e,subject s,syllabus_master sn,Registration re where re.Roll_No=r.roll_no and cc=0 and delflag=0 and exam_flag<>'debar' and r.exam_code=e.exam_code and c.Criteria_no=e.criteria_no and e.batch_year='" + lblyear.Text + "' and r.roll_no='" + Session["Rollno"] + "' and c.Criteria_no  in(" + datacre_no.Tables[0].Rows[g]["criteria_no"] + ") and s.subject_no=e.subject_no  order by criteria,e.subject_no";
                datachart = d2.select_method_wo_parameter(sqlquery, "text");
                datachart.Tables[0].Columns.Add("univmark", typeof(string));
                if (datachart.Tables[0].Rows.Count > 0)
                {
                    for (int j = 0; j < datachart.Tables[0].Rows.Count; j++)
                    {
                        double markobtained = Convert.ToDouble(datachart.Tables[0].Rows[j]["marks_obtained"]);
                        if (datachart.Tables[0].Rows[j]["max_mark"].ToString() != "")
                        {
                            double maxmark = Convert.ToDouble(datachart.Tables[0].Rows[j]["max_mark"]);
                            camaverage = (markobtained / maxmark) * 100;
                            cammark = cammark + camaverage;
                        }
                        if (camaverage > 0)
                        {
                            datachart.Tables[0].Rows[j]["univmark"] = Math.Round(camaverage, 2);
                            camtestwise = true;
                        }
                        else
                        {
                            datachart.Tables[0].Rows[j]["univmark"] = " ";
                            camtestwise = false;
                        }
                    }
                    camavamark = cammark / (datachart.Tables[0].Rows.Count);
                    Chart data2 = new Chart();
                    Title radarchart = data2.Titles.Add("" + datacre_no.Tables[0].Rows[g]["criteria"] + "");
                    radarchart.Font = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                    ChartArea ca = new ChartArea("0");
                    data2.Series.Add("Series1");
                    data2.ChartAreas.Add(ca);
                    data2.ChartAreas[0].AxisY.MajorGrid.LineColor = Color.MediumBlue;
                    data2.ChartAreas[0].AxisX.MajorGrid.LineColor = Color.MediumBlue;
                    data2.Series["Series1"]["RadarDrawingStyle"] = "marker";
                    data2.Series["Series1"]["CircularLabelsStyle"] = "Horizontal";
                    data2.Series["Series1"].BorderWidth = 3;
                    data2.Series["Series1"].MarkerSize = 7;
                    data2.Series["Series1"].MarkerStyle = MarkerStyle.Star4;
                    data2.Series["Series1"].MarkerColor = Color.DarkBlue;
                    data2.ChartAreas[0].AxisY.Interval = 25;
                    data2.ChartAreas[0].AxisY.Maximum = 100;
                    data2.ChartAreas[0].AxisY.TitleForeColor = data2.ForeColor;
                    data2.Series["Series1"].ChartType = SeriesChartType.Radar;
                    data2.Series["Series1"]["RadarDrawingStyle"] = "Line";
                    data2.Series["Series1"].Color = Color.OrangeRed;
                    data2.DataSource = datachart;
                    data2.Height = 300;
                    data2.Width = 300;
                    data2.ChartAreas[0].AxisX.TitleAlignment = StringAlignment.Center;
                    data2.ChartAreas[0].AxisY.TitleAlignment = StringAlignment.Center;
                    data2.ChartAreas[0].AxisX.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                    data2.ChartAreas[0].AxisY.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                    data2.Series["Series1"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                    data2.Series["Series1"].IsValueShownAsLabel = true;
                    data2.ChartAreas[0].AxisX.MinorGrid.Enabled = false;
                    data2.ChartAreas[0].AxisX.IsLabelAutoFit = false;
                    data2.Series["Series1"].BorderWidth = 3;
                    data2.Series["Series1"].XValueMember = "acronym";
                    data2.Series["Series1"].YValueMembers = "univmark";
                    data2.Series["Series1"].Name = "Cam Subjectwise Mark";
                    Legend lg = new Legend();
                    data2.Legends.Add(lg);
                    lg.LegendStyle = LegendStyle.Row;
                    lg.Alignment = StringAlignment.Center;
                    lg.Docking = Docking.Top;
                    data2.DataBind();
                    accordace.Panes.Add(pn);
                    pnchart1.Controls.Add(data2);
                    pn.ContentContainer.Controls.Add(pnchart1);
                    if (camavamark > 0)
                    {
                        datacre_no.Tables[0].Rows[g]["univmark"] = Math.Round(camavamark, 2);
                    }
                    else
                    {
                        datacre_no.Tables[0].Rows[g]["univmark"] = string.Empty;
                    }
                }
            }
            string sqlsubject = "select distinct sem.subject_type,s.subject_code,S.subject_no,subject_name,s.acronym from subject as S,syllabus_master  as SM,subjectchooser as SC,Sub_sem as Sem where S.subject_no=SC.Subject_no and  s.syll_code=SM.syll_code  and SM.degree_code='" + Session["deg_code"] + "' and SM.semester='" + f + "' and  S.subtype_no = Sem.subtype_no and promote_count=1 and SM.batch_year='" + lblyear.Text + "' and roll_no='" + Session["RollNo"] + "' order by S.subject_no ";
            datachart = da.select_method_wo_parameter(sqlsubject, "text");
            datachart.Tables[0].Columns.Add("cammark", typeof(string));
            if (datachart.Tables[0].Rows.Count > 0)
            {
                for (int j = 0; j < datachart.Tables[0].Rows.Count; j++)
                {
                    string sqlcam1 = "select syllabus_master.semester,syllabus_master.syll_code,criteria_no,criteria_no from criteriaforinternal,syllabus_master syllabus_master  where  criteriaforinternal.syll_code=syllabus_master.syll_code and syllabus_master.degree_code='" + Session["deg_code"] + "' and syllabus_master.semester in(" + f + ") and syllabus_year=syllabus_master.syllabus_year and syllabus_master.batch_year=" + lblyear.Text + " order by semester,criteria";
                    datacre_no = d2.select_method_wo_parameter(sqlcam1, "text");
                    string criteria_no1 = string.Empty;
                    if (datacre_no.Tables[0].Rows.Count > 0)
                    {
                        for (int g = 0; g < datacre_no.Tables[0].Rows.Count; g++)
                        {
                            if (criteria_no1.ToString() == "")
                            {
                                criteria_no1 = datacre_no.Tables[0].Rows[g]["criteria_no"].ToString();
                            }
                            else
                            {
                                criteria_no1 = criteria_no1 + "," + datacre_no.Tables[0].Rows[g]["criteria_no"].ToString();
                            }
                        }
                    }
                    datacam.Clear();
                    if (criteria_no1.ToString() != "")
                    {
                        string sqldata = "select distinct c.criteria,c.criteria_no,r.marks_obtained,s.acronym,e.subject_no,s.subject_name,e.min_mark,e.max_mark from criteriaforinternal c, result r,exam_type e,subject s,syllabus_master sn ,Registration re where re.Roll_No=r.roll_no and cc=0 and delflag=0 and exam_flag<>'debar' and r.exam_code=e.exam_code and c.Criteria_no=e.criteria_no and e.batch_year=" + lblyear.Text + " and r.roll_no='" + Session["RollNo"] + "' and c.Criteria_no  in(" + criteria_no1 + ")  and acronym='" + datachart.Tables[0].Rows[j]["acronym"] + "' and s.subject_code='" + datachart.Tables[0].Rows[j]["subject_code"] + "'and s.subject_no=e.subject_no  order by criteria";
                        datacam = d2.select_method_wo_parameter(sqldata, "text");
                        double cammark1 = 0;
                        double camavamark1 = 0;
                        if (datacam.Tables[0].Rows.Count > 0)
                        {
                            for (int h = 0; h < datacam.Tables[0].Rows.Count; h++)
                            {
                                double markobtained = Convert.ToDouble(datacam.Tables[0].Rows[h]["marks_obtained"]);
                                if (datacam.Tables[0].Rows[h]["max_mark"].ToString() != "")
                                {
                                    double maxmark = Convert.ToDouble(datacam.Tables[0].Rows[h]["max_mark"]);
                                    cammark1 = cammark1 + ((markobtained / maxmark) * 100);
                                }
                            }
                            camavamark1 = cammark1 / datacam.Tables[0].Rows.Count;
                            for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                            {
                                if (datachart.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                {
                                    if (camavamark1 > 0)
                                    {
                                        datachart.Tables[0].Rows[k]["cammark"] = Math.Round(camavamark1);
                                        camuniversity = true;
                                    }
                                    else
                                    {
                                        datachart.Tables[0].Rows[k]["cammark"] = 0;
                                        camuniversity = true;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            lblerror3 = new Label();
            lblerror3.Text = string.Empty;
            if (camuniversity == true)
            {
                Chart datacam1 = new Chart();
                datacam1.Series.Add("Series1");
                datacam1.ChartAreas.Add("0");
                datacam1.DataSource = datachart;
                Title da4 = datacam1.Titles.Add("Cam Subjectwise Mark");
                da4.Font = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                // datacam1.BackColor = Color.Yellow;
                datacam1.Height = 450;
                datacam1.Width = 450;
                datacam1.ChartAreas[0].AxisX.Interval = 1;
                datacam1.ChartAreas[0].AxisY.Maximum = 110;
                datacam1.ChartAreas[0].AxisX.TitleAlignment = StringAlignment.Center;
                datacam1.ChartAreas[0].AxisY.TitleAlignment = StringAlignment.Center;
                datacam1.ChartAreas[0].AxisX.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                datacam1.ChartAreas[0].AxisY.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                datacam1.Series["Series1"].IsValueShownAsLabel = true;
                datacam1.ChartAreas[0].AxisX.MajorGrid.Enabled = false;
                datacam1.Series["Series1"].Color = Color.Green;
                datacam1.Series["Series1"].BorderWidth = 3;
                datacam1.Series["Series1"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                datacam1.Series["Series1"].XValueMember = "acronym";
                datacam1.Series["Series1"].YValueMembers = "cammark";
                datacam1.Series["Series1"].Name = "Cam Mark";
                datacam1.ChartAreas[0].AxisX.Title = "Subject Name";
                datacam1.ChartAreas[0].AxisY.Title = "Marks";
                Legend lg2 = new Legend();
                datacam1.Legends.Add(lg2);
                lg2.LegendStyle = LegendStyle.Row;
                lg2.Alignment = StringAlignment.Center;
                lg2.Docking = Docking.Top;
                datacam1.DataBind();
                accordace.Panes.Add(pn);
                pnchart1.Controls.Add(datacam1);
                pn.ContentContainer.Controls.Add(pnchart1);
            }
            else
            {
                lblerror3.Text = Environment.NewLine + "No Records Found For Cam Subjectwise Mark";
                lblerror3.ForeColor = Color.Red;
                lblerror3.Font.Size = FontUnit.Medium;
                lblerror3.Font.Bold = true;
                lblerror3.Font.Name = "Book Antiqua";
            }
            dataf.Visible = true;
            double grademark = 0;
            string value = string.Empty;
            ht.Clear();
            string sqldatabind = " select distinct Mark_Grade,Credit_Points from Grade_Master where Degree_Code='" + Session["deg_code"] + "'   and batch_year='" + lblyear.Text + "' order by Credit_Points desc";
            datagrade = d2.select_method_wo_parameter(sqldatabind, "text");
            if (datagrade.Tables[0].Rows.Count > 0)
            {
                for (int l = 0; l < datagrade.Tables[0].Rows.Count; l++)
                {
                    value = datagrade.Tables[0].Rows[0]["Mark_Grade"].ToString();
                    ht.Add(datagrade.Tables[0].Rows[l]["Mark_Grade"], "" + datagrade.Tables[0].Rows[l]["Credit_Points"] + "");
                }
            }
            string sqlsybmaster = "select * from syllabus_master where semester in(" + f + ") and degree_code='" + Session["deg_code"] + "'and Batch_Year=" + lblyear.Text + "";
            datauniv = d2.select_method_wo_parameter(sqlsybmaster, "text");
            if (ds3.Tables[0].Rows.Count > 0)
            {
                string sqlsubject1 = "Select acronym as subject_name,subject_code,subject.subject_no,result,total,grade, cp,mark_entry.subject_no,subject.min_ext_marks,subject.min_int_marks,isnull(Mark_Entry.internal_mark,0)  as internal_mark ,isnull(Mark_Entry.external_mark,0) as external_mark,semester from Mark_Entry,Subject, sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and  subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(" + ds3.Tables[0].Rows[0]["Exam_Code"] + ")  and roll_no='" + Session["RollNo"] + "'  order by semester desc,subject_type desc,subject.subject_no asc";
                datachart = d2.select_method_wo_parameter(sqlsubject1, "text");
                datachart.Tables[0].Columns.Add("univmark", typeof(string));
            }
            string sql = " Select distinct Current_Semester,Exam_Code,exam_month,exam_year from Exam_Details where Degree_Code = '" + Session["deg_code"] + "' and Current_Semester in(" + f + ") and Batch_Year = " + lblyear.Text + "";
            ds3 = d2.select_method_wo_parameter(sql, "text");
            datachart.Tables[0].Columns.Add("result1", typeof(string));
            DataSet df1 = new DataSet();
            double total = 0.0;
            if (ds3.Tables[0].Rows.Count > 0)
            {
                DataSet university = new DataSet();
                string sqlquery = "Select grade_flag from grademaster where exam_month='" + ds3.Tables[0].Rows[0]["exam_month"] + "' and exam_year='" + ds3.Tables[0].Rows[0]["exam_year"] + "' and Batch_year='" + lblyear.Text + "' and degree_code='" + Session["deg_code"] + "'";
                university = da.select_method_wo_parameter(sqlquery, "text");
                string sql1 = " Select acronym as subject_name,subject_code,subject.subject_no,result,total,grade, cp,mark_entry.subject_no,subject.min_ext_marks,subject.min_int_marks,subject.max_ext_marks,subject.max_int_marks,isnull(Mark_Entry.internal_mark,0)  as internal_mark ,isnull(Mark_Entry.external_mark,0) as external_mark,semester from Mark_Entry,Subject, sub_sem,syllabus_master ,Registration r where r.Roll_No=mark_entry.roll_no and cc=0 and delflag=0 and exam_flag<>'debar' and syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and  subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(" + ds3.Tables[0].Rows[0]["Exam_Code"] + ")  and mark_entry.roll_no='" + Session["RollNo"] + "'  order by semester desc,subject_type desc,subject.subject_no asc";
                ds1 = d2.select_method_wo_parameter(sql1, "text");
                if (ds1.Tables[0].Rows.Count > 0)
                {
                    if (university.Tables[0].Rows.Count > 0)
                    {
                        if (university.Tables[0].Rows[0]["grade_flag"].ToString() == "2")
                        {
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                                {
                                    if (ds1.Tables[0].Rows[j]["cp"] == DBNull.Value || ds1.Tables[0].Rows[j]["cp"].ToString() == "0")
                                    {
                                    }
                                    else
                                    {
                                        string mark = ds1.Tables[0].Rows[j]["grade"].ToString();
                                        double mark2 = Convert.ToInt32(ht[value]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                        double mark1 = 0;
                                        foreach (DictionaryEntry child in ht)
                                        {
                                            if (mark.ToString() == child.Key.ToString())
                                            {
                                                mark1 = Convert.ToInt32(child.Value) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                                grademark = ((mark1 / mark2) * 100);
                                            }
                                            if (mark1 != 0)
                                            {
                                                for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                                                {
                                                    if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                                    {
                                                        datachart.Tables[0].Rows[k]["univmark"] = Math.Round(grademark);
                                                        datachart.Tables[0].Rows[k]["result1"] = "Pass";
                                                        universitydata = true;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                                                {
                                                    if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                                    {
                                                        datachart.Tables[0].Rows[k]["univmark"] = mark1;
                                                        datachart.Tables[0].Rows[k]["result1"] = "Fail";
                                                        universitydata = true;
                                                    }
                                                }
                                            }
                                        }
                                        //else if (mark == "A")
                                        //{
                                        //    mark1 = Convert.ToInt32(ht["A"]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                        //    grademark = ((mark1 / mark2) * 100);
                                        //}
                                        //else if (mark == "B")
                                        //{
                                        //    mark1 = Convert.ToInt32(ht["B"]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                        //    grademark = ((mark1 / mark2) * 100);
                                        //}
                                        //else if (mark == "C")
                                        //{
                                        //    mark1 = Convert.ToInt32(ht["C"]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                        //    grademark = ((mark1 / mark2) * 100);
                                        //}
                                        //else if (mark == "D")
                                        //{
                                        //    mark1 = Convert.ToInt32(ht["D"]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                        //    grademark = ((mark1 / mark2) * 100);
                                        //}
                                        //else if (mark == "E")
                                        //{
                                        //    mark1 = Convert.ToInt32(ht["E"]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                        //    grademark = ((mark1 / mark2) * 100);
                                        //}
                                        //else if (mark == "U" && mark == "UA")
                                        //{
                                        //    grademark = 0;
                                        //}
                                    }
                                }
                            }
                        }
                        else if (university.Tables[0].Rows[0]["grade_flag"].ToString() == "3")
                        {
                            string dd = "select linkvalue from inssettings where linkname='corresponding grade' and college_code='" + Session["collegecode"].ToString() + "'";
                            df1 = da.select_method_wo_parameter(dd, "text");
                            if (df1.Tables[0].Rows[0]["linkvalue"].ToString() == "0")
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                                    {
                                        for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                                        {
                                            double internal1 = Convert.ToDouble(ds1.Tables[0].Rows[j]["internal_mark"]);
                                            double external = Convert.ToDouble(ds1.Tables[0].Rows[j]["external_mark"]);
                                            double mark1 = Convert.ToDouble(ds1.Tables[0].Rows[j]["min_ext_marks"]);
                                            double mark2 = Convert.ToDouble(ds1.Tables[0].Rows[j]["min_int_marks"]);
                                            if (internal1 >= mark2 && external >= mark1)
                                            {
                                                if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                                {
                                                    total = (Convert.ToDouble(ds1.Tables[0].Rows[j]["total"]) / (Convert.ToDouble(ds1.Tables[0].Rows[j]["max_int_marks"]) + Convert.ToDouble(ds1.Tables[0].Rows[j]["max_ext_marks"]))) * 100;
                                                    datachart.Tables[0].Rows[k]["univmark"] = Math.Round(total);
                                                    datachart.Tables[0].Rows[k]["result1"] = "Pass";
                                                    universitydata = true;
                                                }
                                            }
                                            else
                                            {
                                                if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                                {
                                                    total = (Convert.ToDouble(ds1.Tables[0].Rows[j]["total"]) / (Convert.ToDouble(ds1.Tables[0].Rows[j]["max_int_marks"]) + Convert.ToDouble(ds1.Tables[0].Rows[j]["max_ext_marks"]))) * 100;
                                                    datachart.Tables[0].Rows[k]["univmark"] = Math.Round(total);
                                                    datachart.Tables[0].Rows[k]["result1"] = "Fail";
                                                    universitydata = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else if (df1.Tables[0].Rows[0]["linkvalue"].ToString() == "1")
                            {
                                if (ds1.Tables[0].Rows.Count > 0)
                                {
                                    for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                                    {
                                        if (ds1.Tables[0].Rows[j]["cp"] == DBNull.Value || ds1.Tables[0].Rows[j]["cp"].ToString() == "0")
                                        {
                                        }
                                        else
                                        {
                                            string mark = ds1.Tables[0].Rows[j]["grade"].ToString();
                                            double mark2 = Convert.ToInt32(ht[value]) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                            double mark1 = 0;
                                            foreach (DictionaryEntry child in ht)
                                            {
                                                if (mark.ToString() == child.Key.ToString())
                                                {
                                                    mark1 = Convert.ToInt32(child.Value) * Convert.ToInt32(ds1.Tables[0].Rows[j]["cp"]);
                                                    grademark = ((mark1 / mark2) * 100);
                                                }
                                                if (mark1 != 0)
                                                {
                                                    for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                                                    {
                                                        if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                                        {
                                                            datachart.Tables[0].Rows[k]["univmark"] = Math.Round(grademark);
                                                            universitydata = true;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (university.Tables[0].Rows[0]["grade_flag"].ToString() == "1")
                        {
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                for (int j = 0; j < ds1.Tables[0].Rows.Count; j++)
                                {
                                    for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                                    {
                                        double internal1 = Convert.ToDouble(ds1.Tables[0].Rows[j]["internal_mark"]);
                                        double external = Convert.ToDouble(ds1.Tables[0].Rows[j]["external_mark"]);
                                        double mark1 = Convert.ToDouble(ds1.Tables[0].Rows[j]["min_ext_marks"]);
                                        double mark2 = Convert.ToDouble(ds1.Tables[0].Rows[j]["min_int_marks"]);
                                        if (internal1 >= mark2 && external >= mark1)
                                        {
                                            if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                            {
                                                total = (Convert.ToDouble(ds1.Tables[0].Rows[j]["total"]) / (Convert.ToDouble(ds1.Tables[0].Rows[j]["max_int_marks"]) + Convert.ToDouble(ds1.Tables[0].Rows[j]["max_ext_marks"]))) * 100;
                                                datachart.Tables[0].Rows[k]["univmark"] = Math.Round(total);
                                                datachart.Tables[0].Rows[k]["result1"] = "Pass";
                                                universitydata = true;
                                            }
                                        }
                                        else
                                        {
                                            if (ds1.Tables[0].Rows[j]["subject_code"].ToString() == datachart.Tables[0].Rows[k]["subject_code"].ToString())
                                            {
                                                total = (Convert.ToDouble(ds1.Tables[0].Rows[j]["total"]) / (Convert.ToDouble(ds1.Tables[0].Rows[j]["max_int_marks"]) + Convert.ToDouble(ds1.Tables[0].Rows[j]["max_ext_marks"]))) * 100;
                                                datachart.Tables[0].Rows[k]["univmark"] = Math.Round(total);
                                                datachart.Tables[0].Rows[k]["result1"] = "Fail";
                                                universitydata = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            lblerror4 = new Label();
            lblerror4.Text = string.Empty;
            if (universitydata == true)
            {
                Chart dataunivr = new Chart();
                Title da1 = dataunivr.Titles.Add("University Subjectwise Mark");
                da1.Font = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                dataunivr.Series.Add("Series2");
                dataunivr.Series["Series2"]["RadarDrawingStyle"] = "marker";
                dataunivr.Series["Series2"]["RadarDrawingStyle"] = "marker";
                dataunivr.Series["Series2"]["CircularLabelsStyle"] = "Horizontal";
                dataunivr.Series["Series2"].MarkerSize = 4;
                dataunivr.Series["Series2"].MarkerStyle = MarkerStyle.Square;
                dataunivr.Series["Series2"].MarkerBorderWidth = 7;
                dataunivr.ChartAreas.Add("0");
                dataunivr.DataSource = datachart;
                dataunivr.Height = 450;
                dataunivr.Width = 450;
                dataunivr.ChartAreas[0].AxisX.Interval = 1;
                dataunivr.ChartAreas[0].AxisY.Maximum = 110;
                dataunivr.ChartAreas[0].AxisX.TitleAlignment = StringAlignment.Center;
                dataunivr.ChartAreas[0].AxisY.TitleAlignment = StringAlignment.Center;
                dataunivr.ChartAreas[0].AxisX.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                dataunivr.ChartAreas[0].AxisY.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                dataunivr.Series["Series2"].IsValueShownAsLabel = true;
                dataunivr.Series["Series2"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                dataunivr.ChartAreas[0].AxisX.MajorGrid.Enabled = false;
                dataunivr.Series["Series2"].Color = Color.BlueViolet;
                dataunivr.Series["Series2"].BorderWidth = 3;
                Random random = new Random();
                for (int k = 0; k < datachart.Tables[0].Rows.Count; k++)
                {
                    dataunivr.Series["Series2"].Points.AddXY(datachart.Tables[0].Rows[k]["Subject_name"].ToString(), datachart.Tables[0].Rows[k]["univmark"]);
                }
                int q = 0;
                foreach (Series series in dataunivr.Series)
                {
                    foreach (DataPoint point in series.Points)
                    {
                        for (int b = 0; b < datachart.Tables[0].Rows.Count; b++)
                        {
                            string data = point.ToString();
                            string[] spl_date1 = data.Split(new char[] { '{', ',', '=', '}' });
                            string all_flag = datachart.Tables[0].Rows[b]["result1"].ToString();
                            if (all_flag.ToString() == "Pass" && datachart.Tables[0].Rows[b]["univmark"].ToString() == spl_date1[4].ToString())
                            {
                                dataunivr.Series["Series2"].Points[q].Color = Color.BlueViolet;
                                dataunivr.Series["Series2"].Points[q].MarkerColor = Color.BlueViolet;
                            }
                            else if (all_flag.ToString() == "Fail" && datachart.Tables[0].Rows[b]["univmark"].ToString() == spl_date1[4].ToString())
                            {
                                point.Color = Color.Red;
                                point.MarkerColor = Color.Red;
                            }
                        }
                        q++;
                    }
                }
                dataunivr.Series["Series2"].Name = "University Mark";
                dataunivr.ChartAreas[0].AxisX.Title = "Subject Name";
                dataunivr.ChartAreas[0].AxisY.Title = "Marks";
                Legend lg1 = new Legend();
                dataunivr.Legends.Add(lg1);
                lg1.LegendStyle = LegendStyle.Row;
                lg1.Alignment = StringAlignment.Center;
                lg1.Docking = Docking.Top;
                dataunivr.DataBind();
                accordace.Panes.Add(pn);
                pnchart1.Controls.Add(dataunivr);
                pn.ContentContainer.Controls.Add(pnchart1);
                chart1();
            }
            else
            {
                lblerror4.Text = Environment.NewLine + "No Records Found For University Subjectwise Mark";
                lblerror4.ForeColor = Color.Red;
                lblerror4.Font.Size = FontUnit.Medium;
                lblerror4.Font.Bold = true;
                lblerror4.Font.Name = "Book Antiqua";
                chart1();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void chart1()
    {
        Boolean attendancebol = false;
        try
        {
            DAccess2 da = new DAccess2();
            Chart Chart1 = new Chart();
            Boolean day_flag_str = false;
            Boolean hr_flag_str = false;
            ds1.Clear();
            string Master = string.Empty;
            string rno = string.Empty;
            Master = "select * from Master_Settings where usercode in(select user_code from usermaster where user_id='admin') and (settings='Day Wise' or settings='Hour Wise')";
            ds = da.select_method_wo_parameter(Master, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    if (ds.Tables[0].Rows[i]["settings"].ToString() == "Day Wise" && ds.Tables[0].Rows[i]["value"].ToString() == "1")
                    {
                        day_flag_str = true;
                    }
                    if (ds.Tables[0].Rows[i]["settings"].ToString() == "Hour Wise" && ds.Tables[0].Rows[i]["value"].ToString() == "1")
                    {
                        hr_flag_str = true;
                    }
                }
            }
            string deg = string.Empty;
            string sem = string.Empty;
            string batch = string.Empty;
            string sec = string.Empty;
            string query = string.Empty;
            string studentdetails = "select batch_year,degree_code,current_semester,isnull(sections,'') sem,roll_no,(select college_code from degree as d where d.degree_code=registration.degree_code)college_code from registration where App_No='" + appno + "'";
            ds1 = da.select_method_wo_parameter(studentdetails, "text");
            if (ds1.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                {
                    deg = ds1.Tables[0].Rows[0]["degree_code"].ToString();
                    sem = ds1.Tables[0].Rows[0]["current_semester"].ToString();
                    batch = ds1.Tables[0].Rows[0]["batch_year"].ToString();
                    sec = ds1.Tables[0].Rows[0]["sem"].ToString();
                    rno = ds1.Tables[0].Rows[0]["roll_no"].ToString();
                    if (sec != "")
                    {
                        query = " and section='" + sec + "' ";
                    }
                }
                string semester = string.Empty;
                string cur_working_days = string.Empty;
                string demfcal = string.Empty;
                decimal absdat = 0;
                decimal abshour = 0;
                string sqlseminfo = "select semester,start_date,end_date,no_of_working_days from seminfo where degree_code=" + deg + " and semester =" + f + " and batch_year= " + batch + "  order by semester";
                ds4 = da.select_method_wo_parameter(sqlseminfo, "text");
                ds4.Tables[0].Columns.Add("daywise", typeof(string));
                ds4.Tables[0].Columns.Add("hourwise", typeof(string));
                if (ds4.Tables[0].Rows.Count > 0)
                {
                    for (int j = 0; j < ds4.Tables[0].Rows.Count; j++)
                    {
                        semester = ds4.Tables[0].Rows[j]["semester"].ToString();
                        cur_start_date = ds4.Tables[0].Rows[j]["start_date"].ToString();
                        cur_end_date = ds4.Tables[0].Rows[j]["end_date"].ToString();
                        cur_working_days = ds4.Tables[0].Rows[j]["no_of_working_days"].ToString();
                        string sql1 = "period_attnd_schedule " + deg + "," + semester + "";
                        ds3 = d2.select_method_wo_parameter(sql1, "text");
                        find_value1(rno, cur_start_date.ToString(), cur_end_date.ToString(), deg, semester.ToString());
                        ds4.Tables[0].Rows[j][4] = attday.ToString();
                        ds4.Tables[0].Rows[j][5] = atthour.ToString();
                        absdat = 100 - Convert.ToDecimal(attday);
                        abshour = 100 - Convert.ToDecimal(atthour);
                        if (attday.ToString() == "0" && atthour.ToString() == "0")
                        {
                            attendancebol = false;
                        }
                        else
                        {
                            attendancebol = true;
                        }
                    }
                    lblerror5 = new Label();
                    lblerror5.Text = string.Empty;
                    if (attendancebol == true)
                    {
                        Chart1.DataSource = ds4;
                        Chart1.Series.Add("Series1");
                        Chart1.Series.Add("Series2");
                        Chart1.ChartAreas.Add("ChartArea1");
                        foreach (DataRow row in ds4.Tables[0].Rows)
                        {
                            Title da4 = Chart1.Titles.Add("Attendance");
                            da4.Font = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                            Chart1.Series["Series1"].ToolTip = "Series1: Total no.of.present days";
                            Chart1.Series["Series2"].ToolTip = "Series2 :Total no.of.conducted days";
                            Chart1.Series["Series1"].ChartArea = "ChartArea1";
                            Chart1.Series["Series2"].PostBackValue = "#VALX,#VALY";
                            Chart1.Series["Series1"].PostBackValue = "#VALX,#VALY";
                            Chart1.Series["Series1"].CustomProperties = "DrawingStyle=Cylinder, MaxPixelPointWidth=72";
                            Chart1.Series["Series1"].Points.AddXY(row["semester"].ToString(), (row["daywise"].ToString()));
                            Chart1.Series["Series2"].ChartArea = "ChartArea1";
                            Chart1.Series["Series1"].IsValueShownAsLabel = true;
                            Chart1.Series["Series2"].IsValueShownAsLabel = true;
                            Chart1.ChartAreas[0].AxisX.MajorGrid.Enabled = false;
                            Chart1.Height = 450;
                            Chart1.Width = 450;
                            Chart1.Series["Series1"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                            Chart1.Series["Series2"].Font = new System.Drawing.Font("Trebuchet MS", 9, FontStyle.Bold);
                            Chart1.Series["Series2"].CustomProperties = "DrawingStyle=Cylinder, MaxPixelPointWidth=72";
                            Chart1.Series["Series2"].Points.AddXY(row["semester"].ToString(), (row["hourwise"].ToString()));
                            Chart1.Series["Series1"].Name = "Total no.of.present days";
                            Chart1.Series["Series2"].Name = "Total no.of.conducted days";
                            Chart1.ChartAreas[0].AxisX.TitleAlignment = StringAlignment.Center;
                            Chart1.ChartAreas[0].AxisY.TitleAlignment = StringAlignment.Center;
                            Chart1.ChartAreas[0].AxisX.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                            Chart1.ChartAreas[0].AxisY.TitleFont = new System.Drawing.Font("Book Antiqua", 15, FontStyle.Bold);
                            Legend lg = new Legend();
                            Chart1.Legends.Add(lg);
                            lg.LegendStyle = LegendStyle.Row;
                            lg.Alignment = StringAlignment.Center;
                            lg.Docking = Docking.Top;
                            Chart1.ChartAreas[0].AxisX.Title = lbl_semOrTerm.Text;
                            Chart1.ChartAreas[0].AxisY.Title = "Attendance Percentage";
                        }
                        Chart1.DataBind();
                        accordace.Panes.Add(pn);
                        pnchart1.Controls.Add(Chart1);
                        pn.ContentContainer.Controls.Add(pnchart1);
                        pn.ContentContainer.Height = 100;
                    }
                    else
                    {
                        lblerror5.Text = Environment.NewLine + "No Records Found For Attendance";
                        lblerror5.ForeColor = Color.Red;
                        lblerror5.Font.Size = FontUnit.Medium;
                        lblerror5.Font.Bold = true;
                        lblerror5.Font.Name = "Book Antiqua";
                    }
                }
                else
                {
                }
                Table tb = new Table();
                if (lblerror1 != null)
                {
                    TableCell tc1 = new TableCell();
                    TableRow tr1 = new TableRow();
                    tc1.Controls.Add(lblerror1);
                    tr1.Cells.Add(tc1);
                    tb.Rows.Add(tr1);
                    accordace.Panes.Add(pn);
                    pnchart1.Controls.Add(tb);
                    pn.ContentContainer.Controls.Add(pnchart1);
                }
                // Panel1.Controls.Add(lb1);
                if (lblerror2 != null)
                {
                    TableCell tc2 = new TableCell();
                    TableRow tr2 = new TableRow();
                    tc2.Controls.Add(lblerror2);
                    tr2.Cells.Add(tc2);
                    tb.Rows.Add(tr2);
                    accordace.Panes.Add(pn);
                    pnchart1.Controls.Add(tb);
                    pn.ContentContainer.Controls.Add(pnchart1);
                }
                //Panel1.Controls.Add(lb1);
                if (lblerror3 != null)
                {
                    TableCell tc3 = new TableCell();
                    TableRow tr3 = new TableRow();
                    tc3.Controls.Add(lblerror3);
                    tr3.Cells.Add(tc3);
                    tb.Rows.Add(tr3);
                    accordace.Panes.Add(pn);
                    pnchart1.Controls.Add(tb);
                    pn.ContentContainer.Controls.Add(pnchart1);
                }
                // Panel1.Controls.Add(lb1);
                if (lblerror4 != null)
                {
                    TableCell tc4 = new TableCell();
                    TableRow tr4 = new TableRow();
                    tc4.Controls.Add(lblerror4);
                    tr4.Cells.Add(tc4);
                    tb.Rows.Add(tr4);
                    accordace.Panes.Add(pn);
                    pnchart1.Controls.Add(tb);
                    pn.ContentContainer.Controls.Add(pnchart1);
                }
                //Panel1.Controls.Add(lb1);
                if (lblerror5 != null)
                {
                    TableCell tc5 = new TableCell();
                    TableRow tr5 = new TableRow();
                    tc5.Controls.Add(lblerror5);
                    tr5.Cells.Add(tc5);
                    tb.Rows.Add(tr5);
                    accordace.Panes.Add(pn);
                    pnchart1.Controls.Add(tb);
                    pn.ContentContainer.Controls.Add(pnchart1);
                }
                //accordace.Panes.Add(pn);
                //pnchart1.Controls.Add(tb);
                //pn.ContentContainer.Controls.Add(pnchart1);
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void find_value1(string roll_no, string cur_start_date_date, string cur_end_date_date, string deg, string sem)
    {
        try
        {
            string cur_start_date = "", cur_end_date = string.Empty;
            int tot_abs_hrs = 0;
            hat.Clear();
            ds.Clear();
            hat.Add("degree_code", deg);
            hat.Add("sem_ester", sem);
            ds = d2.select_method("period_attnd_schedule", hat, "sp");
            if (ds.Tables[0].Rows.Count != 0)
            {
                NoHrs = int.Parse(ds.Tables[0].Rows[0]["PER DAY"].ToString());
                fnhrs = int.Parse(ds.Tables[0].Rows[0]["I_HALF_DAY"].ToString());
                anhrs = int.Parse(ds.Tables[0].Rows[0]["II_HALF_DAY"].ToString());
                minpresI = int.Parse(ds.Tables[0].Rows[0]["MIN PREE I DAY"].ToString());
                minpresII = int.Parse(ds.Tables[0].Rows[0]["MIN PREE II DAY"].ToString());
            }
            //   persentmonthcal();
            string[] cur_start_date_splt = cur_start_date_date.Split(' ');
            cur_start_date = cur_start_date_splt[0].ToString();
            string[] cur_end_date_splt = cur_end_date_date.Split(' ');
            cur_end_date = cur_end_date_splt[0].ToString();
            string dt = cur_start_date;
            string[] dsplit = dt.Split(new Char[] { '/' });
            cur_start_date = dsplit[0].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[2].ToString();
            demfcal = int.Parse(dsplit[2].ToString());
            demfcal = demfcal * 12;
            cal_from_date = demfcal + int.Parse(dsplit[0].ToString());
            monthcal = cal_from_date.ToString();
            dt = cur_end_date;
            dsplit = dt.Split(new Char[] { '/' });
            cur_end_date = dsplit[0].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[2].ToString();
            demtcal = int.Parse(dsplit[2].ToString());
            demtcal = demtcal * 12;
            cal_to_date = demtcal + int.Parse(dsplit[0].ToString());
            per_from_date = Convert.ToDateTime(cur_start_date_date);
            per_to_date = Convert.ToDateTime(cur_end_date_date);
            dumm_from_date = per_from_date;
            persentmonthcal_attnd(roll_no, cur_start_date, cur_end_date, deg, sem);
            double dum_tage_date = 0, dum_tage_hrs = 0;
            attday = pre_present_date;
            atthour = per_workingdays;
        }
        catch (Exception ex)
        {
        }
    }

    public void loadsubject()
    {
        try
        {
            ds.Clear();
            string studentdetails = "select batch_year,degree_code,current_semester,isnull(sections,'') sem,roll_no,(select college_code from degree as d where d.degree_code=registration.degree_code)college_code from registration where App_No='" + appno + "'";
            ds = da.select_method_wo_parameter(studentdetails, "text");
            hat.Clear();
            string semester = string.Empty;
            if (ds.Tables[0].Rows[0]["sem"] == "")
            {
                semester = string.Empty;
            }
            else
            {
                semester = "and sections='" + ds.Tables[0].Rows[0]["sem"] + "'";
            }
            hat.Add("Batch_Year", lblyear.Text);
            hat.Add("semester", f);
            hat.Add("degree_code", Session["deg_code"]);
            hat.Add("stdsec", ds.Tables[0].Rows[0]["sem"].ToString());
            hat.Add("sc_code", Session["collegecode"]);
            hat.Add("ff_date", cal_from_date);
            hat.Add("tt_date", cal_to_date);
            hat.Add("ssf_cdate", Convert.ToDateTime(cur_start_date));
            hat.Add("sst_cdate", Convert.ToDateTime(cur_end_date));
            hat.Add("rollno", Session["RollNo"]);
            ds = da.select_method("load_subject_student", hat, "sp");
            if (ds.Tables[1].Rows.Count > 0)
            {
                string sql = "select distinct registration.Roll_Admit as Roll_Admit,registration.Roll_No as RollNumber,registration.Reg_No as RegistrationNumber,registration.stud_name as Student_Name,registration.stud_type as StudentType,registration.App_No as ApplicationNumber, convert(varchar(15),adm_date,103) as adm_date from registration, applyn a where a.app_no=registration.app_no and registration.degree_code='" + Session["deg_code"] + "'   and registration.batch_year='" + lblyear.Text + "'  and RollNo_Flag<>0 and cc=0 and exam_flag <> 'DEBAR' and delflag=0   " + semester + " and ((registration.mode=1) or (registration.mode=3) or (registration.mode=2))and ((registration.mode=1) or (registration.mode=3) or (registration.mode=2)) and Registration.Roll_No='" + Session["RollNo"] + "'  ORDER BY registration.roll_no,registration.Stud_Name";
                roll_data = da.select_method_wo_parameter(sql, "text");
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadstudent()
    {
        string noofhrs = string.Empty;
        int no_of_hrs = 0;
        string mng_hrs = string.Empty;
        int first_half = 0;
        string evng_hrs = string.Empty;
        int sec_half = 0;
        int subject_count;
        string noofday = string.Empty;
        int no_of_days = 0;
        string str_order;
        int strorder = 0;
        string start_date = string.Empty;
        DateTime s_date;
        string get_date_holiday = string.Empty;
        Hashtable holiday = new Hashtable();
        string srt_day = string.Empty;
        string grouporusercode;
        double attnd_perc_val;
        string attnd_perc;
        string total_hrs = "0";
        string da1 = string.Empty;
        string subject_num_spl = string.Empty;
        int spl_total_conducted_hrs = 0, spl_total_attended_hrs = 0;
        ArrayList rol_no = new ArrayList();
        try
        {
            int sturollcount = 0;
            if (ds.Tables[2].Rows.Count != 0)
            {
                noofhrs = ds.Tables[2].Rows[0][0].ToString();
                no_of_hrs = Convert.ToInt16(noofhrs.ToString());
                mng_hrs = ds.Tables[2].Rows[0][1].ToString();
                first_half = Convert.ToInt16(mng_hrs.ToString());
                evng_hrs = ds.Tables[2].Rows[0][2].ToString();
                sec_half = Convert.ToInt16(evng_hrs.ToString());
            }
            string[] dm_splt_new = cur_start_date.ToString().Split('/');
            string[] date_increment_splt_new = cur_end_date.ToString().Split('/');
            DateTime alt;
            from_date = Convert.ToDateTime(cur_start_date.ToString());
            to_date = Convert.ToDateTime(cur_end_date.ToString());
            t_date = to_date;
            f_date = from_date;
            int[] array_subject = new int[47];
            int[] array_value = new int[47];
            int[] array_attnd = new int[47];
            int[] array_subject_hour_count = new int[47];
            int[] array_individualsubject_hour_count = new int[47];
            int[] array_attnd_individualsubject_hour_count = new int[47];
            int[] array_lab_hour_count = new int[47];
            Array.Clear(array_subject_hour_count, 0, array_subject_hour_count.Length);
            Array.Clear(array_subject, 0, array_subject.Length);
            Array.Clear(array_value, 0, array_value.Length);
            Array.Clear(array_attnd, 0, array_attnd.Length);
            Array.Clear(array_individualsubject_hour_count, 0, array_individualsubject_hour_count.Length);
            Array.Clear(array_attnd_individualsubject_hour_count, 0, array_attnd_individualsubject_hour_count.Length);
            Array.Clear(array_lab_hour_count, 0, array_lab_hour_count.Length);
            List<string> roll_no = new List<string>();
            List<string> daily = new List<string>();
            List<string> present_table = new List<string>();
            List<string> roll_count = new List<string>();
            Dictionary<string, string> special = new Dictionary<string, string>();
            //  List<string> holiday = new List<string>();
            Dictionary<string, string> dayvalue = new Dictionary<string, string>();
            // Dictionary<string, string> null_table = new Dictionary<string, string>();
            Dictionary<string, string> attend_table = new Dictionary<string, string>();
            Dictionary<string, string> subject = new Dictionary<string, string>();
            Dictionary<string, string> lab = new Dictionary<string, string>();
            i = 0;
            for (i = 0; i < ds.Tables[1].Rows.Count; i++)
            {
                array_subject[i] = Convert.ToInt16(ds.Tables[1].Rows[i][1].ToString());
            }
            subject_count = ds.Tables[1].Rows.Count;
            if ((ds.Tables[15].Rows.Count != 0 || ds.Tables[17].Rows.Count != 0))
                //{
                //    if (ds.Tables[11].Rows.Count != 0)
                //    {
                //        for (int k = 0; k < ds.Tables[11].Rows.Count; k++)
                //        {
                //            roll_no.Add(ds.Tables[11].Rows[k][0].ToString() + "-" + ds.Tables[11].Rows[k][5].ToString());
                //        }
                //    }
                //    if (ds.Tables[9].Rows.Count != 0)
                //    {
                //        for (int k = 0; k < ds.Tables[9].Rows.Count; k++)
                //        {
                //            present_table.Add(ds.Tables[9].Rows[k][1].ToString());
                //        }
                //    }
                //    if (ds.Tables[16].Rows.Count != 0)
                //    {
                //        for (int k = 0; k < ds.Tables[16].Rows.Count; k++)
                //        {
                //            special.Add(ds.Tables[16].Rows[k][1].ToString() + "-" + ds.Tables[16].Rows[k][2].ToString() + "-" + ds.Tables[16].Rows[k][3].ToString(), ds.Tables[16].Rows[k][4].ToString());
                //        }
                //    }
                //    if (ds.Tables[2].Rows.Count != 0)
                //    {
                //        noofhrs = ds.Tables[2].Rows[0][0].ToString();
                //        no_of_hrs = Convert.ToInt16(noofhrs.ToString());
                //    }
                //    if (ds.Tables[3].Rows.Count != 0)
                //    {
                //         noofday = ds.Tables[3].Rows[0][0].ToString();
                //        no_of_days = Convert.ToInt16(noofday.ToString());
                //    }
                //    if (ds.Tables[5].Rows.Count != 0)
                //    {
                //        str_order = ds.Tables[5].Rows[0][0].ToString();
                //        strorder = Convert.ToInt16(str_order.ToString());
                //    }
                //    if (ds.Tables[4].Rows.Count != 0)
                //    {
                //        start_date = ds.Tables[4].Rows[0][0].ToString();
                //        s_date = Convert.ToDateTime(start_date);
                //    }
                //    if (ds.Tables[18].Rows.Count != 0)
                //    {
                //        for (int k = 0; k < ds.Tables[18].Rows.Count; k++)
                //        {
                //            if (!subject.ContainsKey(ds.Tables[18].Rows[k][0].ToString() + "-" + ds.Tables[18].Rows[k][1].ToString()))
                //            {
                //                subject.Add(ds.Tables[18].Rows[k][0].ToString() + "-" + ds.Tables[18].Rows[k][1].ToString(), ds.Tables[18].Rows[k][2].ToString());
                //            }
                //        }
                //    }
                //    if (ds.Tables[19].Rows.Count != 0)
                //    {
                //        for (int k = 0; k < ds.Tables[19].Rows.Count; k++)
                //        {
                //            get_date_holiday = ds.Tables[19].Rows[k][0].ToString();
                //            string[] split_date = ds.Tables[19].Rows[k][0].ToString().Split('/');
                //            get_date_holiday = ((split_date[1].ToString())).ToString() + "/" + ((split_date[0].ToString())).ToString() + "/" + ((split_date[2].ToString())).ToString();
                //            if (ds.Tables[19].Rows[k]["halforfull"].ToString() == "False")
                //            {
                //                halforfull = "0";
                //            }
                //            else
                //            {
                //                halforfull = "1";
                //            }
                //            if (ds.Tables[19].Rows[k]["morning"].ToString() == "False")
                //            {
                //                mng = "0";
                //            }
                //            else
                //            {
                //                mng = "1";
                //            }
                //            if (ds.Tables[19].Rows[k]["evening"].ToString() == "False")
                //            {
                //                evng = "0";
                //            }
                //            else
                //            {
                //                evng = "1";
                //            }
                //            holiday_sched_details = halforfull + "*" + mng + "*" + evng;
                //            if (!holiday.ContainsKey(get_date_holiday))
                //            {
                //                holiday.Add(get_date_holiday, holiday_sched_details);
                //            }
                //        }
                //    }
                //    if (ds.Tables[20].Rows.Count != 0)
                //    {
                //        for (int k = 0; k < ds.Tables[20].Rows.Count; k++)
                //        {
                //            if (!dayvalue.ContainsKey(ds.Tables[20].Rows[k][0].ToString() + "-" + ds.Tables[20].Rows[k][2].ToString() + "-" + ds.Tables[20].Rows[k][3].ToString()))
                //            {
                //                dayvalue.Add(ds.Tables[20].Rows[k][0].ToString() + "-" + ds.Tables[20].Rows[k][2].ToString() + "-" + ds.Tables[20].Rows[k][3].ToString(), ds.Tables[20].Rows[k][1].ToString());
                //            }
                //        }
                //    }
                //    while (rollcount < roll_data.Tables[0].Rows.Count)
                //    {
                //        tval = 0;
                //        Array.Clear(array_subject_hour_count, 0, array_subject_hour_count.Length);
                //        Array.Clear(array_subject, 0, array_subject.Length);
                //        Array.Clear(array_value, 0, array_value.Length);
                //        Array.Clear(array_attnd, 0, array_attnd.Length);
                //        // Array.Clear(array_attnd_individualsubject_hour_count, 0, array_attnd_individualsubject_hour_count.Length);
                //        Array.Clear(array_individualsubject_hour_count, 0, array_individualsubject_hour_count.Length);
                //        total_conducted_hrs = 0;
                //        total_attended_hrs = 0;
                //        whole_total_conducted_hrs = 0;
                //        int daily_count = 0;
                //        if (ds.Tables[15].Rows.Count != 0)
                //        {
                //            while (daily_count < ds.Tables[15].Rows.Count)
                //            {
                //                d  = string.Empty;
                //                d1  = string.Empty;
                //                d = ds.Tables[15].Rows[daily_count][1].ToString();
                //                f_date = Convert.ToDateTime(d);
                //                d1 = "d" + f_date.Day.ToString() + "d" + ds.Tables[15].Rows[daily_count]["hr"].ToString();
                //                rollcolumncount = (Convert.ToInt32(f_date.Month.ToString()) + (Convert.ToInt32(f_date.Year.ToString()) * 12));
                //                if (roll_no.Contains(roll_data.Tables[0].Rows[rollcount][1].ToString() + "-" + rollcolumncount.ToString()))
                //                {
                //                    rollcolumncount = roll_no.IndexOf(roll_data.Tables[0].Rows[rollcount][1].ToString() + "-" + rollcolumncount.ToString());
                //                    s_code = ds.Tables[15].Rows[daily_count][6].ToString().Split(';');
                //                    if (s_code.GetUpperBound(0) >= 0)
                //                    {
                //                        for (int upper_bnd = 0; upper_bnd <= s_code.GetUpperBound(0); upper_bnd++)
                //                        {
                //                            dummy_split = s_code[upper_bnd].ToString().Split('-');
                //                            if (subject.ContainsKey(ds.Tables[11].Rows[rollcolumncount]["roll_no"].ToString() + "-" + dummy_split[0].ToString()))
                //                            {
                //                                da1 = subject[ds.Tables[11].Rows[rollcolumncount]["roll_no"].ToString() + "-" + dummy_split[0].ToString()];
                //                                if (da1 == "")
                //                                {
                //                                    for (k = 0; k < ds.Tables[1].Rows.Count; k++)
                //                                    {
                //                                        if (s_code[upper_bnd].Contains(ds.Tables[1].Rows[k][1].ToString()))
                //                                        {
                //                                            array_value[k] = array_value[k] + 1;
                //                                            if (present_table.Contains(ds.Tables[11].Rows[rollcolumncount][d1].ToString()))
                //                                            {
                //                                                sume = (f_date).ToString("M/d/yyyy");
                //                                                h  = string.Empty;
                //                                                if (attend_table.ContainsKey(sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                //                                                {
                //                                                    h = attend_table[sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
                //                                                    attend_table[sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
                //                                                }
                //                                                else
                //                                                {
                //                                                    attend_table.Add(sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
                //                                                }
                //                                                array_attnd[k] = array_attnd[k] + 1;
                //                                                k = ds.Tables[1].Rows.Count;
                //                                                upper_bnd = s_code.GetUpperBound(0);
                //                                            }
                //                                            else if ((ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "") || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == null) || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "0") || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "8"))
                //                                            {
                //                                                array_value[k] = array_value[k] - 1;
                //                                                k = ds.Tables[1].Rows.Count;
                //                                                upper_bnd = s_code.GetUpperBound(0);
                //                                            }
                //                                            else
                //                                            {
                //                                                sume = (f_date).ToString("M/d/yyyy");
                //                                                h  = string.Empty;
                //                                                if (attend_table.ContainsKey(sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                //                                                {
                //                                                    h = attend_table[sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
                //                                                    attend_table[sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
                //                                                }
                //                                                else
                //                                                {
                //                                                    attend_table.Add(sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
                //                                                }
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                              srt_day = f_date.ToString("ddd");
                //                                if (dayvalue.ContainsKey(srt_day + "-" + dummy_split[0].ToString() + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString()))
                //                                {
                //                                    davalue = dayvalue[srt_day + "-" + dummy_split[0].ToString() + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString()];
                //                                    if (da1 == davalue)
                //                                    {
                //                                        for (k = 0; k < ds.Tables[1].Rows.Count; k++)
                //                                        {
                //                                            if (s_code[upper_bnd].Contains(ds.Tables[1].Rows[k][1].ToString()))
                //                                            {
                //                                                array_subject_hour_count[k] = array_subject_hour_count[k] + 1;
                //                                                tval = tval + 1;
                //                                                array_value[k] = array_value[k] + 1;
                //                                                if (present_table.Contains(ds.Tables[11].Rows[rollcolumncount][d1].ToString()))
                //                                                {
                //                                                    sume = (f_date).ToString("M/d/yyyy");
                //                                                    h  = string.Empty;
                //                                                    if (lab.ContainsKey(sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                //                                                    {
                //                                                        h = lab[sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
                //                                                        lab[sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
                //                                                    }
                //                                                    else
                //                                                    {
                //                                                        lab.Add(sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
                //                                                    }
                //                                                    array_attnd[k] = array_attnd[k] + 1;
                //                                                    k = ds.Tables[1].Rows.Count;
                //                                                    upper_bnd = s_code.GetUpperBound(0);
                //                                                }
                //                                                else if ((ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "") || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == null) || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "0") || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "8"))
                //                                                {
                //                                                    array_value[k] = array_value[k] - 1;
                //                                                    k = ds.Tables[1].Rows.Count;
                //                                                    upper_bnd = s_code.GetUpperBound(0);
                //                                                }
                //                                                else
                //                                                {
                //                                                    sume = (f_date).ToString("M/d/yyyy");
                //                                                    h  = string.Empty;
                //                                                    if (lab.ContainsKey(sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                //                                                    {
                //                                                        h = lab[sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
                //                                                        lab[sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
                //                                                    }
                //                                                    else
                //                                                    {
                //                                                        lab.Add(sume + "-" + ds.Tables[15].Rows[daily_count]["hr"].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
                //                                                    }
                //                                                }
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                            }
                //                        }
                //                    }
                //                }
                //                daily_count++;
                //            }
                //        }
                //        else if (ds.Tables[16].Rows.Count != 0)
                //        {
                //            daily_count = 0;
                //            bg  = string.Empty;
                //            if ((Session["group_code"].ToString().Trim() != "") && (Session["group_code"].ToString().Trim() != "0") && (Session["group_code"].ToString().Trim() != "-1"))
                //            {
                //                grouporusercode = " group_code=" + Session["group_code"].ToString().Trim() + "";
                //            }
                //            else
                //            {
                //                grouporusercode = " usercode=" + Session["usercode"].ToString().Trim() + "";
                //            }
                //            con.Close();
                //            cmd = new SqlCommand("select rights from  special_hr_rights where " + grouporusercode + "", con);
                //            con.Open();
                //            SqlDataReader dr_rights_spl_hr = cmd.ExecuteReader();
                //            if (dr_rights_spl_hr.HasRows)
                //            {
                //                while (dr_rights_spl_hr.Read())
                //                {
                //                    string spl_hr_rights  = string.Empty;
                //                    Hashtable od_has = new Hashtable();
                //                    spl_hr_rights = dr_rights_spl_hr["rights"].ToString();
                //                    if (spl_hr_rights == "True" || spl_hr_rights == "true")
                //                    {
                //                        spl_hrs();
                //                    }
                //                }
                //            }
                //            while (daily_count < ds.Tables[17].Rows.Count)
                //            {
                //                if (special.ContainsKey(ds.Tables[17].Rows[daily_count][1].ToString() + "-" + ds.Tables[17].Rows[daily_count][2].ToString() + "-" + ds.Tables[16].Rows[rollcount][3].ToString()))
                //                {
                //                    bg = special[ds.Tables[17].Rows[daily_count][1].ToString() + "-" + ds.Tables[17].Rows[daily_count][2].ToString() + "-" + ds.Tables[16].Rows[rollcount][3].ToString()];
                //                    d  = string.Empty;
                //                    d1  = string.Empty;
                //                    d = ds.Tables[17].Rows[daily_count][0].ToString();
                //                    f_date = Convert.ToDateTime(d);
                //                    //  d1 = "d" + f_date .Day.ToString()+ "d" + ds.Tables[15].Rows[daily_count]["hr"].ToString();
                //                    rollcolumncount = (Convert.ToInt32(f_date.Month.ToString()) + (Convert.ToInt32(f_date.Year.ToString()) * 12));
                //                    if (roll_no.Contains(roll_data.Tables[0].Rows[rollcount][1].ToString() + "-" + rollcolumncount.ToString()))
                //                    {
                //                        rollcolumncount = roll_no.IndexOf(roll_data.Tables[0].Rows[rollcount][1].ToString() + "-" + rollcolumncount.ToString());
                //                        s_code = ds.Tables[17].Rows[daily_count][1].ToString().Split(';');
                //                        if (s_code.GetUpperBound(0) >= 0)
                //                        {
                //                            for (int upper_bnd = 0; upper_bnd <= s_code.GetUpperBound(0); upper_bnd++)
                //                            {
                //                                for (k = 0; k < ds.Tables[1].Rows.Count; k++)
                //                                {
                //                                    if (s_code[upper_bnd].Contains(ds.Tables[1].Rows[k][1].ToString()))
                //                                    {
                //                                        // array_subject_hour_count[k] = array_subject_hour_count[k] + 1;
                //                                        array_value[k] = array_value[k] + 1;
                //                                        if (present_table.Contains(bg))
                //                                        {
                //                                            sume = (f_date).ToString("M/d/yyyy");
                //                                            h  = string.Empty;
                //                                            if (attend_table.ContainsKey(sume + "-" + ds.Tables[17].Rows[daily_count][2].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                //                                            {
                //                                                h = attend_table[sume + "-" + ds.Tables[17].Rows[daily_count][2].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
                //                                                attend_table[sume + "-" + ds.Tables[17].Rows[daily_count][2].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
                //                                            }
                //                                            else
                //                                            {
                //                                                attend_table.Add(sume + "-" + ds.Tables[17].Rows[daily_count][2].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
                //                                            }
                //                                            array_attnd[k] = array_attnd[k] + 1;
                //                                            k = ds.Tables[1].Rows.Count;
                //                                            upper_bnd = s_code.GetUpperBound(0);
                //                                        }
                //                                        else if ((bg == "") || (bg == null) || (bg == "0") || (bg == "8"))
                //                                        {
                //                                            array_value[k] = array_value[k] - 1;
                //                                            k = ds.Tables[1].Rows.Count;
                //                                            upper_bnd = s_code.GetUpperBound(0);
                //                                        }
                //                                        else
                //                                        {
                //                                            sume = (f_date).ToString("M/d/yyyy");
                //                                            h  = string.Empty;
                //                                            if (attend_table.ContainsKey(sume + "-" + ds.Tables[17].Rows[daily_count][2].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                //                                            {
                //                                                h = attend_table[sume + "-" + ds.Tables[17].Rows[daily_count][2].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
                //                                                attend_table[sume + "-" + ds.Tables[17].Rows[daily_count][2].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
                //                                            }
                //                                            else
                //                                            {
                //                                                attend_table.Add(sume + "-" + ds.Tables[17].Rows[daily_count][2].ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
                //                                            }
                //                                        }
                //                                    }
                //                                }
                //                            }
                //                        }
                //                    }
                //                }
                //                daily_count++;
                //            }
                //        }
                //        int row = 5;
                //        for (i = 5; i < (ds.Tables[1].Rows.Count * 2) + 4; i = i + 2)
                //        {
                //            total_conducted_hrs = ((total_conducted_hrs) + Convert.ToInt16(array_value[row - 4].ToString()));
                //            total_attended_hrs = ((total_attended_hrs) + Convert.ToInt16(array_attnd[row - 4].ToString()));
                //            if (array_value[row - 4] == 0)
                //            {
                //                string dara = "-";
                //                string da = "-";
                //            }
                //            //else if (array_attnd[row - 5] == 0)
                //            else if (array_attnd[row - 4] == 0)
                //            {
                //                string dara = "0";
                //                string sa = "0";
                //            }
                //            else
                //            {
                //                // attnd_perc_val = ((Convert.ToDouble(array_attnd[row - 5]) / Convert.ToDouble(array_value[row - 5])) * 100);
                //                attnd_perc_val = ((Convert.ToDouble(array_attnd[row - 4]) / Convert.ToDouble(array_value[row - 4])) * 100);
                //                avgstudent1 = Convert.ToDecimal(attnd_perc_val);
                //                avgstudent2 = Math.Round(avgstudent1);
                //                avgstudent3 = Convert.ToDouble(avgstudent2);
                //                attnd_perc = Convert.ToString(avgstudent3);
                //                string dara = array_attnd[row - 4].ToString();
                //                string da = attnd_perc.ToString();
                //            }
                //            row++;
                //        }
                //        if (total_conducted_hrs == 0)
                //        {
                //            attnd_perc = "-";
                //        }
                //        else if (total_attended_hrs == 0)
                //        {
                //            attnd_perc = "0";
                //        }
                //        else
                //        {
                //            if (ds.Tables[7].Rows.Count != 0)
                //            {
                //                if (ds.Tables[7].Rows[0][0].ToString() == "1")
                //                {
                //                    if (ds.Tables[8].Rows.Count != 0)
                //                    {
                //                        if (Convert.ToInt16(total_attended_hrs) >= Convert.ToInt16(ds.Tables[8].Rows[0][0].ToString()))
                //                        {
                //                            attnd_perc = "100";
                //                        }
                //                        else
                //                        {
                //                            attnd_perc_val = (Convert.ToDouble(total_attended_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
                //                            //-------convert
                //                            avgstudent1 = Convert.ToDecimal(attnd_perc_val);
                //                            avgstudent2 = Math.Round(avgstudent1);
                //                            avgstudent3 = Convert.ToDouble(avgstudent2);
                //                            attnd_perc = Convert.ToString(avgstudent3);
                //                        }
                //                    }
                //                    else
                //                    {
                //                        attnd_perc_val = (Convert.ToDouble(total_attended_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
                //                        //-------convert
                //                        avgstudent1 = Convert.ToDecimal(attnd_perc_val);
                //                        avgstudent2 = Math.Round(avgstudent1);
                //                        avgstudent3 = Convert.ToDouble(avgstudent2);
                //                        attnd_perc = Convert.ToString(avgstudent3);
                //                    }
                //                }
                //                else
                //                {
                //                    attnd_perc_val = (Convert.ToDouble(total_attended_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
                //                    //-------convert
                //                    avgstudent1 = Convert.ToDecimal(attnd_perc_val);
                //                    avgstudent2 = Math.Round(avgstudent1);
                //                    avgstudent3 = Convert.ToDouble(avgstudent2);
                //                    attnd_perc = Convert.ToString(avgstudent3);
                //                }
                //            }
                //            else
                //            {
                //                attnd_perc_val = (Convert.ToDouble(total_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
                //                //-------convert
                //                avgstudent1 = Convert.ToDecimal(attnd_perc_val);
                //                avgstudent2 = Math.Round(avgstudent1);
                //                avgstudent3 = Convert.ToDouble(avgstudent2);
                //                attnd_perc = Convert.ToString(avgstudent3);
                //            }
                //        }
                //        i = (ds.Tables[1].Rows.Count * 2) + 5;
                //        if (total_conducted_hrs == 0)
                //        {
                //           string dara = "-";
                //        }
                //        else
                //        {
                //            string de = total_attended_hrs.ToString();
                //        }
                //    string da2= attnd_perc.ToString();
                //        for (i = 5; i < (ds.Tables[1].Rows.Count * 2) + 5; i = i + 2)
                //        {
                //            if (array_individualsubject_hour_count[row - 5] > 0)
                //            {
                //                array_attnd_individualsubject_hour_count[row - 5] = (array_attnd_individualsubject_hour_count[row - 5] + array_individualsubject_hour_count[row - 4]);
                //            }
                //            row++;
                //        }
                //        rollcount++;
                //    }
                //    f_date = from_date;
                //    f_date = from_date;
                //    int count = 0;
                //    tval = 0;
                //    while (f_date <= t_date)
                //    {
                //        sume = f_date.Month.ToString() + "/" + f_date.Day.ToString() + "/" + f_date.Year.ToString();
                //        for (int sdate = 1; sdate <= no_of_hrs; sdate++)
                //        {
                //            count = 0;
                //            for (k = 0; k < ds.Tables[1].Rows.Count; k++)
                //            {
                //                if (attend_table.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                //                {
                //                    count++;
                //                    array_attnd_individualsubject_hour_count[k] = array_attnd_individualsubject_hour_count[k] + 1;
                //                    k = ds.Tables[1].Rows.Count;
                //                }
                //            }
                //            if (count == 0)
                //            {
                //                for (k = 0; k < ds.Tables[1].Rows.Count; k++)
                //                {
                //                    if (lab.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                //                    {
                //                        count++;
                //                        array_lab_hour_count[k] = array_lab_hour_count[k] + 1;
                //                    }
                //                }
                //                if (count > 0)
                //                {
                //                    tval = tval + 1;
                //                }
                //            }
                //        }
                //        f_date = f_date.AddDays(1);
                //    }
                //    for (i = 5; i < (ds.Tables[1].Rows.Count * 2) + 5; i = i + 2)
                //    {
                //        string data = (array_attnd_individualsubject_hour_count[row - 5] + array_lab_hour_count[row - 5]).ToString();
                //        whole_total_conducted_hrs = whole_total_conducted_hrs + (array_attnd_individualsubject_hour_count[row - 5]);
                //        row++;
                //    }
                //    i = (ds.Tables[1].Rows.Count * 2) + 5;
                //    if (whole_total_conducted_hrs == 0)
                //    {
                //        string data = "-";
                //    }
                //    else
                //    {
                //        string data = (whole_total_conducted_hrs + tval).ToString();
                //    }
                //lab: out1  = string.Empty;
                //}
                array_subject = new int[47];
            array_value = new int[47];
            array_attnd = new int[47];
            array_subject_hour_count = new int[47];
            //  int[] array_individualsubject_hour_count = new int[subject_report.Sheets[0].ColumnCount - 7];
            array_attnd_individualsubject_hour_count = new int[47];
            array_individualsubject_hour_count = new int[no_of_hrs];
            array_lab_hour_count = new int[47];
            Array.Clear(array_subject_hour_count, 0, array_subject_hour_count.Length);
            Array.Clear(array_subject, 0, array_subject.Length);
            Array.Clear(array_value, 0, array_value.Length);
            Array.Clear(array_attnd, 0, array_attnd.Length);
            Array.Clear(array_individualsubject_hour_count, 0, array_individualsubject_hour_count.Length);
            Array.Clear(array_attnd_individualsubject_hour_count, 0, array_attnd_individualsubject_hour_count.Length);
            Array.Clear(array_lab_hour_count, 0, array_lab_hour_count.Length);
            roll_no = new List<string>();
            List<string> alternate = new List<string>();
            List<string> semester = new List<string>();
            present_table.Clear();
            subject = new Dictionary<string, string>();
            Dictionary<string, string> find_day = new Dictionary<string, string>();
            //  List<string> holiday = new List<string>();
            dayvalue = new Dictionary<string, string>();
            Dictionary<string, string> null_table = new Dictionary<string, string>();
            attend_table = new Dictionary<string, string>();
            lab = new Dictionary<string, string>();
            i = 0;
            for (i = 0; i < ds.Tables[1].Rows.Count; i++)
            {
                array_subject[i] = Convert.ToInt16(ds.Tables[1].Rows[i][1].ToString());
            }
            subject_count = ds.Tables[1].Rows.Count;
            {
                if ((ds.Tables[12].Rows.Count != 0 || ds.Tables[13].Rows.Count != 0))
                {
                    if (ds.Tables[12].Rows.Count != 0)
                    {
                        for (int k = 0; k < ds.Tables[12].Rows.Count; k++)
                        {
                            alt = Convert.ToDateTime(ds.Tables[12].Rows[k][1].ToString());
                            alternate.Add(alt.Month.ToString() + "/" + alt.Day.ToString() + "/" + alt.Year.ToString());
                        }
                    }
                    if (ds.Tables[11].Rows.Count != 0)
                    {
                        for (int k = 0; k < ds.Tables[11].Rows.Count; k++)
                        {
                            if (!rol_no.Contains(ds.Tables[11].Rows[k][0].ToString() + "-" + ds.Tables[11].Rows[k][5].ToString()))//Added By Srinath 14/8/2013
                            {
                                roll_no.Add(ds.Tables[11].Rows[k][0].ToString() + "-" + ds.Tables[11].Rows[k][5].ToString());
                            }
                        }
                    }
                    if (ds.Tables[9].Rows.Count != 0)
                    {
                        for (int k = 0; k < ds.Tables[9].Rows.Count; k++)
                        {
                            if (!present_table.Contains(ds.Tables[9].Rows[k][1].ToString()))//added by srinath 14/8/2013
                            {
                                present_table.Add(ds.Tables[9].Rows[k][1].ToString());
                            }
                        }
                    }
                    con.Close();
                    cmd = new SqlCommand("select rights from  special_hr_rights", con);
                    con.Open();
                    SqlDataReader dr_rights_spl_hr = cmd.ExecuteReader();
                    if (dr_rights_spl_hr.HasRows)
                    {
                        while (dr_rights_spl_hr.Read())
                        {
                            string spl_hr_rights = string.Empty;
                            Hashtable od_has = new Hashtable();
                            spl_hr_rights = dr_rights_spl_hr["rights"].ToString();
                            if (spl_hr_rights == "True" || spl_hr_rights == "true")
                            {
                                spl_hrs();
                            }
                        }
                    }
                    if (ds.Tables[2].Rows.Count != 0)
                    {
                        noofhrs = ds.Tables[2].Rows[0][0].ToString();
                        no_of_hrs = Convert.ToInt16(noofhrs.ToString());
                    }
                    if (ds.Tables[3].Rows.Count != 0)
                    {
                        noofday = ds.Tables[3].Rows[0][0].ToString();
                        no_of_days = Convert.ToInt16(noofday.ToString());
                    }
                    if (ds.Tables[5].Rows.Count != 0)
                    {
                        str_order = ds.Tables[5].Rows[0][0].ToString();
                        strorder = Convert.ToInt16(str_order.ToString());
                    }
                    if (ds.Tables[4].Rows.Count != 0)
                    {
                        start_date = ds.Tables[4].Rows[0][0].ToString();
                        s_date = Convert.ToDateTime(start_date);
                        while (s_date <= t_date)
                        {
                            day_find = findday1(no_of_days, s_date.Month.ToString() + "/" + s_date.Day.ToString() + "/" + s_date.Year.ToString(), t_date.Month.ToString() + "/" + t_date.Day.ToString() + "/" + t_date.Year.ToString());
                            find_day.Add(s_date.Month.ToString() + "/" + s_date.Day.ToString() + "/" + s_date.Year.ToString(), day_find);
                            s_date = s_date.AddDays(1);
                        }
                        string sectionvalue = string.Empty;
                        sectionvalue = hat["stdsec"].ToString();
                        string subjectlab = "select distinct subject_no,lab from  subjectChooser s,Registration r,sub_sem se where r.roll_no=s.roll_no and s.semester=r.Current_Semester and s.subtype_no=se.subType_no and r.degree_code='" + Session["deg_code"] + "' and r.Batch_Year='" + lblyear.Text + "' and r.Current_Semester=" + f + " and r.Sections='" + sectionvalue + "' and lab=1";
                        DataSet dslab = da.select_method_wo_parameter(subjectlab, "Text");
                        Hashtable hatlab = new Hashtable();
                        for (int la = 0; la < dslab.Tables[0].Rows.Count; la++)
                        {
                            if (!hatlab.Contains(dslab.Tables[0].Rows[la]["subject_no"].ToString()))
                            {
                                hatlab.Add(dslab.Tables[0].Rows[la]["subject_no"].ToString(), "1");
                            }
                        }
                        if (ds.Tables[18].Rows.Count != 0)
                        {
                            for (int k = 0; k < ds.Tables[18].Rows.Count; k++)
                            {
                                if (!subject.ContainsKey(ds.Tables[18].Rows[k][0].ToString() + "-" + ds.Tables[18].Rows[k][1].ToString()))//Added By Srinath 14/8/2013
                                {
                                    if (hatlab.Contains(ds.Tables[18].Rows[k][1].ToString()))
                                    {
                                        subject.Add(ds.Tables[18].Rows[k][0].ToString() + "-" + ds.Tables[18].Rows[k][1].ToString(), ds.Tables[18].Rows[k][2].ToString());
                                    }
                                    else
                                    {
                                        subject.Add(ds.Tables[18].Rows[k][0].ToString() + "-" + ds.Tables[18].Rows[k][1].ToString(), "");
                                    }
                                }
                            }
                        }
                        if (ds.Tables[19].Rows.Count != 0)
                        {
                            for (int k = 0; k < ds.Tables[19].Rows.Count; k++)
                            {
                                get_date_holiday = ds.Tables[19].Rows[k][0].ToString();
                                string[] split_date = ds.Tables[19].Rows[k][0].ToString().Split('/');
                                get_date_holiday = ((split_date[1].ToString())).ToString() + "/" + ((split_date[0].ToString())).ToString() + "/" + ((split_date[2].ToString())).ToString();
                                if (ds.Tables[19].Rows[k]["halforfull"].ToString() == "False")
                                {
                                    halforfull = "0";
                                }
                                else
                                {
                                    halforfull = "1";
                                }
                                if (ds.Tables[19].Rows[k]["morning"].ToString() == "False")
                                {
                                    mng = "0";
                                }
                                else
                                {
                                    mng = "1";
                                }
                                if (ds.Tables[19].Rows[k]["evening"].ToString() == "False")
                                {
                                    evng = "0";
                                }
                                else
                                {
                                    evng = "1";
                                }
                                holiday_sched_details = halforfull + "*" + mng + "*" + evng;
                                if (!holiday.ContainsKey(get_date_holiday))
                                {
                                    holiday.Add(get_date_holiday, holiday_sched_details);
                                }
                            }
                        }
                        if (ds.Tables[20].Rows.Count != 0)
                        {
                            for (int k = 0; k < ds.Tables[20].Rows.Count; k++)
                            {
                                if (!dayvalue.ContainsKey(ds.Tables[20].Rows[k][0].ToString().ToLower() + "-" + ds.Tables[20].Rows[k][2].ToString() + "-" + ds.Tables[20].Rows[k][3].ToString()))
                                {
                                    string value = ds.Tables[20].Rows[k][0].ToString().ToLower() + "-" + ds.Tables[20].Rows[k][2].ToString() + "-" + ds.Tables[20].Rows[k][3].ToString();
                                    dayvalue.Add(ds.Tables[20].Rows[k][0].ToString().ToLower() + "-" + ds.Tables[20].Rows[k][2].ToString() + "-" + ds.Tables[20].Rows[k][3].ToString(), ds.Tables[20].Rows[k][1].ToString());
                                }
                            }
                        }
                        DateTime Admission_date;
                        rollcount = 0;
                        while (rollcount < roll_data.Tables[0].Rows.Count)
                        // while (rollcount < ds.Tables[6].Rows.Count)
                        {
                            tval = 0;
                            Array.Clear(array_subject_hour_count, 0, array_subject_hour_count.Length);
                            Array.Clear(array_subject, 0, array_subject.Length);
                            Array.Clear(array_value, 0, array_value.Length);
                            Array.Clear(array_attnd, 0, array_attnd.Length);
                            //  Array.Clear(array_attnd_individualsubject_hour_count, 0, array_attnd_individualsubject_hour_count.Length);
                            Array.Clear(array_individualsubject_hour_count, 0, array_individualsubject_hour_count.Length);
                            total_conducted_hrs = 0;
                            total_attended_hrs = 0;
                            whole_total_conducted_hrs = 0;
                            string admdate = roll_data.Tables[0].Rows[rollcount]["adm_date"].ToString();
                            string[] admdatesp = admdate.Split(new Char[] { '/' });
                            admdate = admdatesp[2].ToString() + "/" + admdatesp[1].ToString() + "/" + admdatesp[0].ToString();
                            Admission_date = Convert.ToDateTime(admdate);
                            t_date = to_date;
                            f_date = from_date;
                            split_date_time1 = f_date.ToString().Split(' ');
                            dummy_split = split_date_time1[0].Split('/');
                            tot_mnth = (Convert.ToInt32(dummy_split[0].ToString()) + (Convert.ToInt32(dummy_split[2].ToString()) * 12));
                            split_date_time1 = t_date.ToString().Split(' ');
                            dummy_split = split_date_time1[0].Split('/');
                            tempfdate = (Convert.ToInt32(dummy_split[0].ToString()) + (Convert.ToInt32(dummy_split[2].ToString()) * 12));
                            f_month_year = tot_mnth;
                        label: if (roll_no.Contains(roll_data.Tables[0].Rows[rollcount][1].ToString() + "-" + tot_mnth.ToString()))
                            {
                                rollcolumncount = roll_no.IndexOf(roll_data.Tables[0].Rows[rollcount][1].ToString() + "-" + tot_mnth.ToString());
                                if (tot_mnth == f_month_year && tot_mnth == tempfdate)
                                {
                                    t_date = to_date;
                                }
                                else if (tot_mnth == tempfdate)
                                {
                                    t_date = to_date;
                                }
                                else if (tot_mnth == f_month_year)
                                {
                                    t_date = f_date.AddMonths(1);
                                    t_date = t_date.AddDays(-Convert.ToInt16(f_date.Day.ToString()));
                                }
                                else
                                {
                                    t_date = f_date.AddMonths(1);
                                }
                            while_loop:
                                while (f_date <= t_date)
                                {
                                    if (f_date >= Admission_date)
                                    {
                                        if (!holiday.ContainsKey(f_date.ToString("dd") + "/" + f_date.ToString("MM") + "/" + f_date.ToString("yyyy")))
                                        {
                                            holiday.Add(f_date.ToString("dd") + "/" + f_date.ToString("MM") + "/" + f_date.ToString("yyyy"), "3*0*0");
                                        }
                                        value_holi_status = GetCorrespondingKey(f_date.ToString("dd") + "/" + f_date.ToString("MM") + "/" + f_date.ToString("yyyy"), holiday).ToString();
                                        split_holiday_status = value_holi_status.Split('*');
                                        if (split_holiday_status[0].ToString() == "3")
                                        {
                                            split_holiday_status_1 = "1";
                                            split_holiday_status_2 = no_of_hrs.ToString();
                                        }
                                        else if (split_holiday_status[0].ToString() == "1")
                                        {
                                            if (split_holiday_status[1].ToString() == "1")
                                            {
                                                split_holiday_status_1 = (first_half + 1).ToString();
                                                split_holiday_status_2 = no_of_hrs.ToString();
                                            }
                                            if (split_holiday_status[2].ToString() == "1")
                                            {
                                                split_holiday_status_1 = "1";
                                                split_holiday_status_2 = first_half.ToString();
                                            }
                                        }
                                        else if (split_holiday_status[0].ToString() == "0")
                                        {
                                            f_date = f_date.AddDays(1);
                                            goto while_loop;
                                        }
                                        //=========================
                                        sume = (f_date).ToString("M/d/yyyy");
                                        if (strorder == 1)
                                        {
                                            srt_day = f_date.ToString("ddd");
                                        }
                                        else
                                        {
                                            if (find_day.ContainsKey(sume))
                                            {
                                                srt_day = find_day[sume];
                                            }
                                        }
                                        d = string.Empty;
                                        d1 = string.Empty;
                                        row = 0;
                                        table = 0;
                                        if (alternate.Contains(sume))
                                        {
                                            row = alternate.IndexOf(sume);
                                            table = 12;
                                        }
                                        else
                                        {
                                            row = 0;
                                            table = 13;
                                        }
                                        for (int sdate = Convert.ToInt32(split_holiday_status_1); sdate <= Convert.ToInt32(split_holiday_status_2); sdate++)
                                        {
                                            d = srt_day + sdate.ToString();
                                            d1 = "d" + f_date.Day.ToString() + "d" + sdate.ToString();
                                            if (ds.Tables[table].Rows[row][d].ToString() != "" || ds.Tables[table].Rows[row][d].ToString() == null)
                                            {
                                                s_code = ds.Tables[table].Rows[row][d].ToString().Split(';');
                                            }
                                            else
                                            {
                                                s_code = ds.Tables[13].Rows[0][d].ToString().Split(';');
                                            }
                                            if (s_code.GetUpperBound(0) >= 0)
                                            {
                                                for (int upper_bnd = 0; upper_bnd <= s_code.GetUpperBound(0); upper_bnd++)
                                                {
                                                    dummy_split = s_code[upper_bnd].ToString().Split('-');
                                                    if (subject.ContainsKey(ds.Tables[11].Rows[rollcolumncount]["roll_no"].ToString() + "-" + dummy_split[0].ToString()))
                                                    {
                                                        da1 = subject[ds.Tables[11].Rows[rollcolumncount]["roll_no"].ToString() + "-" + dummy_split[0].ToString()];
                                                        if (da1 == "")
                                                        {
                                                            for (k = 0; k < ds.Tables[1].Rows.Count; k++)
                                                            {
                                                                if (s_code[upper_bnd].Contains(ds.Tables[1].Rows[k][1].ToString()))
                                                                {
                                                                    array_value[k] = array_value[k] + 1;
                                                                    string[] spitdatevalue = f_date.ToString().Split(' ');
                                                                    string[] spitmointh = spitdatevalue[0].Split('/');
                                                                    int year = Convert.ToInt32(spitmointh[2]);
                                                                    int month = Convert.ToInt32(spitmointh[0]);
                                                                    int monthvalue = (12 * year) + month;
                                                                    String attendancequery = GetFunction("Select " + d1 + " from attendance where month_year='" + monthvalue + "' and roll_no='" + roll_data.Tables[0].Rows[rollcount][1].ToString() + "'");
                                                                    if (present_table.Contains(attendancequery))
                                                                    {
                                                                        sume = (f_date).ToString("M/d/yyyy");
                                                                        h = string.Empty;
                                                                        if (attend_table.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                                                                        {
                                                                            h = attend_table[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
                                                                            attend_table[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
                                                                        }
                                                                        else
                                                                        {
                                                                            attend_table.Add(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
                                                                        }
                                                                        array_attnd[k] = array_attnd[k] + 1;
                                                                        k = ds.Tables[1].Rows.Count;
                                                                        upper_bnd = s_code.GetUpperBound(0);
                                                                    }
                                                                    else if (attendancequery == "" || attendancequery == null || attendancequery == "0" || attendancequery == "8")
                                                                    {
                                                                        array_value[k] = array_value[k] - 1;
                                                                        k = ds.Tables[1].Rows.Count;
                                                                        upper_bnd = s_code.GetUpperBound(0);
                                                                    }
                                                                    else
                                                                    {
                                                                        sume = (f_date).ToString("M/d/yyyy");
                                                                        h = string.Empty;
                                                                        if (attend_table.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                                                                        {
                                                                            h = attend_table[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
                                                                            attend_table[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
                                                                        }
                                                                        else
                                                                        {
                                                                            attend_table.Add(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (dayvalue.ContainsKey(srt_day.ToString().ToLower() + "-" + dummy_split[0].ToString() + "-" + sdate.ToString()))
                                                        {
                                                            davalue = dayvalue[srt_day.ToString().ToLower() + "-" + dummy_split[0].ToString() + "-" + sdate.ToString()];
                                                            if (da1 == davalue)
                                                            {
                                                                for (k = 0; k < ds.Tables[1].Rows.Count; k++)
                                                                {
                                                                    if (s_code[upper_bnd].Contains(ds.Tables[1].Rows[k][1].ToString()))
                                                                    {
                                                                        tval = tval + 1;
                                                                        array_value[k] = array_value[k] + 1;
                                                                        if (present_table.Contains(ds.Tables[11].Rows[rollcolumncount][d1].ToString()))
                                                                        {
                                                                            sume = (f_date).ToString("M/d/yyyy");
                                                                            h = string.Empty;
                                                                            if (lab.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                                                                            {
                                                                                h = lab[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
                                                                                lab[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
                                                                            }
                                                                            else
                                                                            {
                                                                                lab.Add(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
                                                                            }
                                                                            array_attnd[k] = array_attnd[k] + 1;
                                                                            k = ds.Tables[1].Rows.Count;
                                                                            upper_bnd = s_code.GetUpperBound(0);
                                                                        }
                                                                        else if ((ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "") || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == null) || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "0") || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "8"))
                                                                        {
                                                                            array_value[k] = array_value[k] - 1;
                                                                            k = ds.Tables[1].Rows.Count;
                                                                            upper_bnd = s_code.GetUpperBound(0);
                                                                        }
                                                                        else
                                                                        {
                                                                            sume = (f_date).ToString("M/d/yyyy");
                                                                            h = string.Empty;
                                                                            if (lab.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                                                                            {
                                                                                h = lab[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
                                                                                lab[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
                                                                            }
                                                                            else
                                                                            {
                                                                                lab.Add(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    f_date = f_date.AddDays(1);
                                }
                                if (tot_mnth <= tempfdate)
                                {
                                    tot_mnth = tot_mnth + 1;
                                    if (tot_mnth > tempfdate)
                                    {
                                        goto label1;
                                    }
                                    goto label;
                                }
                            }
                            else
                            {
                                if (f_date < Admission_date)
                                {
                                    f_date = f_date.AddMonths(1);
                                    tot_mnth = tot_mnth + 1;
                                    if (tot_mnth > tempfdate)
                                    {
                                        goto label1;
                                    }
                                    goto label;
                                }
                                else
                                {
                                    f_date = f_date.AddMonths(1);
                                    f_date = f_date.AddDays(-Convert.ToInt16(f_date.Day.ToString()));
                                    tot_mnth = tot_mnth + 1;
                                    if (tot_mnth > tempfdate)
                                    {
                                        goto label1;
                                    }
                                    goto label;
                                }
                            }
                        label1: row = 5;
                            int x = 0;
                            for (i = 5; i < (ds.Tables[1].Rows.Count * 2) + 5; i = i + 2)
                            {
                                //   whole_total_conducted_hrs = ((whole_total_conducted_hrs) + Convert.ToInt16(array_subject_hour_count[row-4].ToString()));
                                total_conducted_hrs = ((total_conducted_hrs) + Convert.ToInt16(array_value[row - 5].ToString()));
                                total_attended_hrs = ((total_attended_hrs) + Convert.ToInt16(array_attnd[row - 5].ToString()));
                                //------------------------------spl hrs 16/6/12(PRABHA)
                                subject_num_spl = ds.Tables[1].Rows[x][1].ToString();
                                spl_total_conducted_hrs = 0;
                                spl_total_attended_hrs = 0;
                                x++;
                                for (DateTime temp_date = from_date; temp_date <= to_date; temp_date = temp_date.AddDays(1))
                                {
                                    spl_total_conducted_hrs = spl_total_conducted_hrs + Convert.ToInt32(GetCorrespondingKey(roll_data.Tables[0].Rows[rollcount][1].ToString() + "$" + temp_date + "$" + subject_num_spl, hasspl_tot));
                                    spl_total_attended_hrs = spl_total_attended_hrs + Convert.ToInt32(GetCorrespondingKey(roll_data.Tables[0].Rows[rollcount][1].ToString() + "$" + temp_date + "$" + subject_num_spl, hasspl_pres));
                                }
                                total_conducted_hrs = total_conducted_hrs + spl_total_conducted_hrs;
                                total_attended_hrs = total_attended_hrs + spl_total_attended_hrs;
                                //--------------------------------------------------------
                                if (array_value[row - 5] == 0 && spl_total_attended_hrs == 0)
                                {
                                }
                                else if (array_attnd[row - 5] == 0 && spl_total_conducted_hrs == 0)
                                {
                                    string data = "0";
                                    string das = "0";
                                }
                                else
                                {
                                    attnd_perc_val = (((Convert.ToDouble(array_attnd[row - 5]) + spl_total_attended_hrs) / (Convert.ToDouble(array_value[row - 5]) + spl_total_conducted_hrs)) * 100);
                                    avgstudent1 = Convert.ToDecimal(attnd_perc_val);
                                    avgstudent2 = Math.Round(avgstudent1);
                                    avgstudent3 = Convert.ToDouble(avgstudent2);
                                    attnd_perc = Convert.ToString(avgstudent3);
                                    string data = (Convert.ToInt32(array_attnd[row - 5]) + spl_total_attended_hrs).ToString();
                                    string daf = attnd_perc.ToString();
                                    for (int g = 0; g < datachart.Tables[0].Rows.Count; g++)
                                    {
                                        if (datachart.Tables[0].Rows[g]["subject_no"].ToString() == ds.Tables[1].Rows[row - 5]["Subject_no"].ToString())
                                        {
                                            datachart.Tables[0].Rows[g]["attendanceave"] = daf;
                                            chartbol = true;
                                        }
                                    }
                                }
                                row++;
                            }
                            if (total_conducted_hrs == 0)
                            {
                                attnd_perc = "-";
                            }
                            else if (total_attended_hrs == 0)
                            {
                                attnd_perc = "0";
                            }
                            else
                            {
                                if (ds.Tables[7].Rows.Count != 0)
                                {
                                    if (ds.Tables[7].Rows[0][0].ToString() == "1")
                                    {
                                        if (ds.Tables[8].Rows.Count != 0)
                                        {
                                            if (Convert.ToInt16(total_attended_hrs) >= Convert.ToInt16(ds.Tables[8].Rows[0][0].ToString()))
                                            {
                                                attnd_perc = "100";
                                            }
                                            else
                                            {
                                                attnd_perc_val = (Convert.ToDouble(total_attended_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
                                                //-------convert
                                                avgstudent1 = Convert.ToDecimal(attnd_perc_val);
                                                avgstudent2 = Math.Round(avgstudent1);
                                                avgstudent3 = Convert.ToDouble(avgstudent2);
                                                attnd_perc = Convert.ToString(avgstudent3);
                                            }
                                        }
                                        else
                                        {
                                            attnd_perc_val = (Convert.ToDouble(total_attended_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
                                            //-------convert
                                            avgstudent1 = Convert.ToDecimal(attnd_perc_val);
                                            avgstudent2 = Math.Round(avgstudent1);
                                            avgstudent3 = Convert.ToDouble(avgstudent2);
                                            attnd_perc = Convert.ToString(avgstudent3);
                                        }
                                    }
                                    else
                                    {
                                        attnd_perc_val = (Convert.ToDouble(total_attended_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
                                        //-------convert
                                        avgstudent1 = Convert.ToDecimal(attnd_perc_val);
                                        avgstudent2 = Math.Round(avgstudent1);
                                        avgstudent3 = Convert.ToDouble(avgstudent2);
                                        attnd_perc = Convert.ToString(avgstudent3);
                                    }
                                }
                                else
                                {
                                    attnd_perc_val = (Convert.ToDouble(total_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
                                    //-------convert
                                    avgstudent1 = Convert.ToDecimal(attnd_perc_val);
                                    avgstudent2 = Math.Round(avgstudent1);
                                    avgstudent3 = Convert.ToDouble(avgstudent2);
                                    attnd_perc = Convert.ToString(avgstudent3);
                                }
                            }
                            i = (ds.Tables[1].Rows.Count * 2) + 5;
                            if (total_conducted_hrs == 0)
                            {
                                string data = "-";
                            }
                            else
                            {
                                string data = total_attended_hrs.ToString();
                            }
                            string dgh = attnd_perc.ToString();
                            rollcount++;
                        }  ///////////////////
                        f_date = from_date;
                        int count = 0;
                        tval = 0;
                        while (f_date <= t_date)
                        {
                            sume = f_date.Month.ToString() + "/" + f_date.Day.ToString() + "/" + f_date.Year.ToString();
                            for (int sdate = Convert.ToInt32(split_holiday_status_1); sdate <= Convert.ToInt32(split_holiday_status_2); sdate++)
                            {
                                count = 0;
                                for (k = 0; k < ds.Tables[1].Rows.Count; k++)
                                {
                                    if (attend_table.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                                    {
                                        count++;
                                        array_attnd_individualsubject_hour_count[k] = array_attnd_individualsubject_hour_count[k] + 1;
                                        k = ds.Tables[1].Rows.Count;
                                    }
                                }
                                if (count == 0)
                                {
                                    for (k = 0; k < ds.Tables[1].Rows.Count; k++)
                                    {
                                        if (lab.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
                                        {
                                            count++;
                                            array_lab_hour_count[k] = array_lab_hour_count[k] + 1;
                                        }
                                    }
                                    if (count > 0)
                                    {
                                        tval = tval + 1;
                                    }
                                }
                            }
                            f_date = f_date.AddDays(1);
                        }
                        row = 5;
                        int spl_total_attended_hrs_tot = 0;
                        int y = 0;
                        for (i = 5; i < (ds.Tables[1].Rows.Count * 2) + 5; i = i + 2)
                        {
                            //------------------------29/6/12 PRABHA
                            subject_num_spl = ds.Tables[1].Rows[y][1].ToString();
                            spl_total_conducted_hrs = 0;
                            spl_total_attended_hrs = 0;
                            y++;
                            for (DateTime temp_date = from_date; temp_date <= to_date; temp_date = temp_date.AddDays(1))
                            {
                                spl_total_conducted_hrs = spl_total_conducted_hrs + Convert.ToInt32(GetCorrespondingKey(roll_data.Tables[0].Rows[0][1].ToString() + "$" + temp_date + "$" + subject_num_spl, hasspl_tot));
                                spl_total_attended_hrs_tot = spl_total_attended_hrs_tot + spl_total_conducted_hrs;// = spl_total_attended_hrs + Convert.ToInt32(GetCorrespondingKey(roll_data.Tables[0].Rows[rollcount][1].ToString() + "$" + temp_date + "$" + subject_num_spl, hasspl_pres));
                            }
                            //---------------------------------------
                            string data = (array_attnd_individualsubject_hour_count[row - 5] + array_lab_hour_count[row - 5] + spl_total_conducted_hrs).ToString();
                            whole_total_conducted_hrs = whole_total_conducted_hrs + (array_attnd_individualsubject_hour_count[row - 5]);
                            row++;
                        }
                        i = (ds.Tables[1].Rows.Count * 2) + 5;
                        if (whole_total_conducted_hrs == 0)
                        {
                            string data = "-";
                        }
                        else
                        {
                            string data = (whole_total_conducted_hrs + tval + spl_total_attended_hrs_tot).ToString();
                        }
                    }
                }
            }
            //else
            //{
            //    int[] array_subject = new int[subject_report.Sheets[0].ColumnCount - 7];
            //    int[] array_value = new int[subject_report.Sheets[0].ColumnCount - 7];
            //    int[] array_attnd = new int[subject_report.Sheets[0].ColumnCount - 7];
            //    int[] array_subject_hour_count = new int[subject_report.Sheets[0].ColumnCount - 7];
            //    int[] array_individualsubject_hour_count = new int[subject_report.Sheets[0].ColumnCount - 7];
            //    int[] array_attnd_individualsubject_hour_count = new int[subject_report.Sheets[0].ColumnCount - 7];
            //    int[] array_lab_hour_count = new int[subject_report.Sheets[0].ColumnCount - 7];
            //    Array.Clear(array_subject_hour_count, 0, array_subject_hour_count.Length);
            //    Array.Clear(array_subject, 0, array_subject.Length);
            //    Array.Clear(array_value, 0, array_value.Length);
            //    Array.Clear(array_attnd, 0, array_attnd.Length);
            //    Array.Clear(array_individualsubject_hour_count, 0, array_individualsubject_hour_count.Length);
            //    Array.Clear(array_attnd_individualsubject_hour_count, 0, array_attnd_individualsubject_hour_count.Length);
            //    Array.Clear(array_lab_hour_count, 0, array_lab_hour_count.Length);
            //    List<string> roll_no = new List<string>();
            //    List<string> direct = new List<string>();
            //    List<string> present_table = new List<string>();
            //    //  List<string> criteria_roll = new List<string>();
            //    //  List<string> holiday = new List<string>();
            //    Dictionary<string, string> dayvalue = new Dictionary<string, string>();
            //    //Dictionary<string, string> null_table = new Dictionary<string, string>();
            //    Dictionary<string, string> subject = new Dictionary<string, string>();
            //    Dictionary<string, string> attend_table = new Dictionary<string, string>();
            //    Dictionary<string, string> lab = new Dictionary<string, string>();
            //    i = 0;
            //    for (i = 0; i < ds.Tables[1].Rows.Count; i++)
            //    {
            //        array_subject[i] = Convert.ToInt16(ds.Tables[1].Rows[i][1].ToString());
            //    }
            //    subject_count = ds.Tables[1].Rows.Count;
            //    if (ds.Tables[11].Rows.Count != 0)
            //    {
            //        if (ds.Tables[14].Rows.Count != 0)
            //        {
            //            if (ds.Tables[14].Rows.Count != 0)
            //            {
            //                for (int k = 0; k < ds.Tables[14].Rows.Count; k++)
            //                {
            //                    direct.Add(ds.Tables[14].Rows[k]["month_year"].ToString());
            //                }
            //            }
            //            if (ds.Tables[11].Rows.Count != 0)
            //            {
            //                for (int k = 0; k < ds.Tables[11].Rows.Count; k++)
            //                {
            //                    roll_no.Add(ds.Tables[11].Rows[k][0].ToString() + "-" + ds.Tables[11].Rows[k][5].ToString());
            //                }
            //            }
            //            if (ds.Tables[9].Rows.Count != 0)
            //            {
            //                for (int k = 0; k < ds.Tables[9].Rows.Count; k++)
            //                {
            //                    present_table.Add(ds.Tables[9].Rows[k][1].ToString());
            //                }
            //            }
            //            if (ds.Tables[2].Rows.Count != 0)
            //            {
            //                noofhrs = ds.Tables[2].Rows[0][0].ToString();
            //                no_of_hrs = Convert.ToInt16(noofhrs.ToString());
            //            }
            //            if (ds.Tables[3].Rows.Count != 0)
            //            {
            //                noofday = ds.Tables[3].Rows[0][0].ToString();
            //                no_of_days = Convert.ToInt16(noofday.ToString());
            //            }
            //            if (ds.Tables[5].Rows.Count != 0)
            //            {
            //                str_order = ds.Tables[3].Rows[0][0].ToString();
            //                strorder = Convert.ToInt16(str_order.ToString());
            //            }
            //            if (ds.Tables[4].Rows.Count != 0)
            //            {
            //                start_date = ds.Tables[4].Rows[0][0].ToString();
            //                s_date = Convert.ToDateTime(start_date);
            //            }
            //            if (ds.Tables[18].Rows.Count != 0)
            //            {
            //                for (int k = 0; k < ds.Tables[18].Rows.Count; k++)
            //                {
            //                    subject.Add(ds.Tables[18].Rows[k][0].ToString() + "-" + ds.Tables[18].Rows[k][1].ToString(), ds.Tables[18].Rows[k][2].ToString());
            //                }
            //            }
            //            if (ds.Tables[19].Rows.Count != 0)
            //            {
            //                for (int k = 0; k < ds.Tables[19].Rows.Count; k++)
            //                {
            //                    get_date_holiday = ds.Tables[19].Rows[k][0].ToString();
            //                    string[] split_date = ds.Tables[19].Rows[k][0].ToString().Split('/');
            //                    get_date_holiday = ((split_date[1].ToString())).ToString() + "/" + ((split_date[0].ToString())).ToString() + "/" + ((split_date[2].ToString())).ToString();
            //                    if (ds.Tables[19].Rows[k]["halforfull"].ToString() == "False")
            //                    {
            //                        halforfull = "0";
            //                    }
            //                    else
            //                    {
            //                        halforfull = "1";
            //                    }
            //                    if (ds.Tables[19].Rows[k]["morning"].ToString() == "False")
            //                    {
            //                        mng = "0";
            //                    }
            //                    else
            //                    {
            //                        mng = "1";
            //                    }
            //                    if (ds.Tables[19].Rows[k]["evening"].ToString() == "False")
            //                    {
            //                        evng = "0";
            //                    }
            //                    else
            //                    {
            //                        evng = "1";
            //                    }
            //                    holiday_sched_details = halforfull + "*" + mng + "*" + evng;
            //                    if (!holiday.ContainsKey(get_date_holiday))
            //                    {
            //                        holiday.Add(get_date_holiday, holiday_sched_details);
            //                    }
            //                }
            //            }
            //            if (ds.Tables[20].Rows.Count != 0)
            //            {
            //                for (int k = 0; k < ds.Tables[20].Rows.Count; k++)
            //                {
            //                    dayvalue.Add(ds.Tables[20].Rows[k][0].ToString() + "-" + ds.Tables[20].Rows[k][2].ToString() + "-" + ds.Tables[20].Rows[k][3].ToString(), ds.Tables[20].Rows[k][1].ToString());
            //                }
            //            }
            //            while (rollcount < roll_data.Tables[0].Rows.Count)
            //            // while (rollcount < ds.Tables[6].Rows.Count)
            //            {
            //                tval = 0;
            //                Array.Clear(array_subject_hour_count, 0, array_subject_hour_count.Length);
            //                Array.Clear(array_subject, 0, array_subject.Length);
            //                Array.Clear(array_value, 0, array_value.Length);
            //                Array.Clear(array_attnd, 0, array_attnd.Length);
            //                Array.Clear(array_individualsubject_hour_count, 0, array_individualsubject_hour_count.Length);
            //                //   Array.Clear(array_attnd_individualsubject_hour_count, 0, array_attnd_individualsubject_hour_count.Length);
            //                total_conducted_hrs = 0;
            //                total_attended_hrs = 0;
            //                whole_total_conducted_hrs = 0;
            //                t_date = to_date;
            //                f_date = from_date;
            //                split_date_time1 = f_date.ToString().Split(' ');
            //                dummy_split = split_date_time1[0].Split('/');
            //                tot_mnth = (Convert.ToInt32(dummy_split[0].ToString()) + (Convert.ToInt32(dummy_split[2].ToString()) * 12));
            //                split_date_time1 = t_date.ToString().Split(' ');
            //                dummy_split = split_date_time1[0].Split('/');
            //                tempfdate = (Convert.ToInt32(dummy_split[0].ToString()) + (Convert.ToInt32(dummy_split[2].ToString()) * 12));
            //                f_month_year = tot_mnth;
            //            label: if (roll_no.Contains(roll_data.Tables[0].Rows[rollcount][1].ToString() + "-" + tot_mnth.ToString()))
            //                //   label: if (roll_no.Contains(ds.Tables[6].Rows[rollcount][1].ToString() + "-" + tot_mnth.ToString()))                    
            //                {
            //                    //rollcolumncount = roll_no.IndexOf(ds.Tables[6].Rows[rollcount][1].ToString() + "-" + tot_mnth.ToString());
            //                    rollcolumncount = roll_no.IndexOf(roll_data.Tables[0].Rows[rollcount][1].ToString() + "-" + tot_mnth.ToString());
            //                    if (tot_mnth == f_month_year && tot_mnth == tempfdate)
            //                    {
            //                        t_date = to_date;
            //                    }
            //                    else if (tot_mnth == tempfdate)
            //                    {
            //                        t_date = to_date;
            //                    }
            //                    else
            //                    {
            //                        t_date = f_date.AddMonths(1);
            //                        t_date = t_date.AddDays(-1);
            //                    }
            //                while_loop1:
            //                    while (f_date <= t_date)
            //                    {
            //                        if (!holiday.ContainsKey(f_date.ToString("dd") + "/" + f_date.ToString("MM") + "/" + f_date.ToString("yyyy")))
            //                        {
            //                            holiday.Add(f_date.ToString("dd") + "/" + f_date.ToString("MM") + "/" + f_date.ToString("yyyy"), "3*0*0");
            //                        }
            //                        //========================
            //                        value_holi_status = GetCorrespondingKey(f_date.ToString("dd") + "/" + f_date.ToString("MM") + "/" + f_date.ToString("yyyy"), holiday).ToString();
            //                        split_holiday_status = value_holi_status.Split('*');
            //                        if (split_holiday_status[0].ToString() == "3")//=========ful day working day
            //                        {
            //                            split_holiday_status_1 = 1;
            //                            split_holiday_status_2 = no_of_hrs;
            //                        }
            //                        else if (split_holiday_status[0].ToString() == "1")//=============half day working day
            //                        {
            //                            if (split_holiday_status[1].ToString() == "1")//==============mng holiday//evng working day
            //                            {
            //                                split_holiday_status_1 = first_half + 1;
            //                                split_holiday_status_2 = no_of_hrs;
            //                            }
            //                            if (split_holiday_status[2].ToString() == "1")//==============evng holiday//mng working day
            //                            {
            //                                split_holiday_status_1 = 1;
            //                                split_holiday_status_2 = first_half;
            //                            }
            //                        }
            //                        else if (split_holiday_status[0].ToString() == "0")
            //                        {
            //                            f_date = f_date.AddDays(1);
            //                            goto while_loop1;
            //                        }
            //                        row = 0;
            //                        table = 0;
            //                        if (direct.Contains(tot_mnth.ToString()))
            //                        {
            //                            row = direct.IndexOf(tot_mnth.ToString());
            //                            table = 14;
            //                            d1  = string.Empty;
            //                        }
            //                        else
            //                        {
            //                            goto lkl;
            //                        }
            //                        for (int sdate = split_holiday_status_1; sdate <= split_holiday_status_2; sdate++)
            //                        {
            //                            d1 = "d" + f_date.Day.ToString() + "d" + sdate.ToString();
            //                            s_code = ds.Tables[table].Rows[row][d].ToString().Split(';');
            //                            if (s_code.GetUpperBound(0) >= 0)
            //                            {
            //                                for (upper_bnd = 0; upper_bnd <= s_code.GetUpperBound(0); upper_bnd++)
            //                                {
            //                                    dummy_split = s_code[upper_bnd].ToString().Split('-');
            //                                    if (subject.ContainsKey(ds.Tables[11].Rows[rollcolumncount]["roll_no"].ToString() + "-" + dummy_split[0].ToString()))
            //                                    {
            //                                        da1 = subject[ds.Tables[11].Rows[rollcolumncount]["roll_no"].ToString() + "-" + dummy_split[0].ToString()];
            //                                        if (da1 == "")
            //                                        {
            //                                            for (k = 0; k < ds.Tables[1].Rows.Count; k++)
            //                                            {
            //                                                if (s_code[upper_bnd].Contains(ds.Tables[1].Rows[k][1].ToString()))
            //                                                {
            //                                                    sume = (f_date).ToString("M/d/yyyy");
            //                                                    h  = string.Empty;
            //                                                    if (attend_table.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
            //                                                    {
            //                                                        h = attend_table[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
            //                                                        attend_table[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
            //                                                    }
            //                                                    else
            //                                                    {
            //                                                        attend_table.Add(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
            //                                                    }
            //                                                    array_value[k] = array_value[k] + 1;
            //                                                    if (present_table.Contains(ds.Tables[11].Rows[rollcolumncount][d1].ToString()))
            //                                                    {
            //                                                        array_attnd[k] = array_attnd[k] + 1;
            //                                                        k = ds.Tables[1].Rows.Count;
            //                                                        upper_bnd = s_code.GetUpperBound(0);
            //                                                    }
            //                                                    else if ((ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "") || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == null) || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "0") || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "8"))
            //                                                    {
            //                                                        array_value[k] = array_value[k] - 1;
            //                                                        k = ds.Tables[1].Rows.Count;
            //                                                        upper_bnd = s_code.GetUpperBound(0);
            //                                                    }
            //                                                    else
            //                                                    {
            //                                                        sume = (f_date).ToString("M/d/yyyy");
            //                                                        h  = string.Empty;
            //                                                        if (attend_table.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
            //                                                        {
            //                                                            h = attend_table[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
            //                                                            attend_table[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
            //                                                        }
            //                                                        else
            //                                                        {
            //                                                            attend_table.Add(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
            //                                                        }
            //                                                    }
            //                                                }
            //                                            }
            //                                        }
            //                                        if (dayvalue.ContainsKey(srt_day + "-" + dummy_split[0].ToString() + "-" + sdate.ToString()))
            //                                        {
            //                                            davalue = dayvalue[srt_day + "-" + dummy_split[0].ToString() + "-" + sdate.ToString()];
            //                                            if (da1 == davalue)
            //                                            {
            //                                                for (k = 0; k < ds.Tables[1].Rows.Count; k++)
            //                                                {
            //                                                    if (s_code[upper_bnd].Contains(ds.Tables[1].Rows[k][1].ToString()))
            //                                                    {
            //                                                        array_value[k] = array_value[k] + 1;
            //                                                        if (present_table.Contains(ds.Tables[11].Rows[rollcolumncount][d1].ToString()))
            //                                                        {
            //                                                            sume = (f_date).ToString("M/d/yyyy");
            //                                                            h  = string.Empty;
            //                                                            if (lab.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
            //                                                            {
            //                                                                h = lab[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
            //                                                                lab[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
            //                                                            }
            //                                                            else
            //                                                            {
            //                                                                lab.Add(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
            //                                                            }
            //                                                            array_attnd[k] = array_attnd[k] + 1;
            //                                                            k = ds.Tables[1].Rows.Count;
            //                                                            upper_bnd = s_code.GetUpperBound(0);
            //                                                        }
            //                                                        else if ((ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "") || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == null) || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "0") || (ds.Tables[11].Rows[rollcolumncount][d1].ToString() == "8"))
            //                                                        {
            //                                                            array_value[k] = array_value[k] - 1;
            //                                                            k = ds.Tables[1].Rows.Count;
            //                                                            upper_bnd = s_code.GetUpperBound(0);
            //                                                        }
            //                                                        else
            //                                                        {
            //                                                            sume = (f_date).ToString("M/d/yyyy");
            //                                                            h  = string.Empty;
            //                                                            if (lab.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
            //                                                            {
            //                                                                h = lab[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()];
            //                                                                lab[sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()] = (Convert.ToInt16(h) + 1).ToString();
            //                                                            }
            //                                                            else
            //                                                            {
            //                                                                lab.Add(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString(), "1");
            //                                                            }
            //                                                        }
            //                                                    }
            //                                                }
            //                                            }
            //                                        }
            //                                    }
            //                                }
            //                            }
            //                        }
            //                    lkl: f_date = f_date.AddDays(1);
            //                    }
            //                    if (tot_mnth <= tempfdate)
            //                    {
            //                        tot_mnth = tot_mnth + 1;
            //                        if (tot_mnth > tempfdate)
            //                        {
            //                            goto label1;
            //                        }
            //                        goto label;
            //                    }
            //                }
            //                else
            //                {
            //                    f_date = f_date.AddMonths(1);
            //                    f_date = f_date.AddDays(-Convert.ToInt16(f_date.Day.ToString()));
            //                    tot_mnth = tot_mnth + 1;
            //                    if (tot_mnth > tempfdate)
            //                    {
            //                        goto label1;
            //                    }
            //                    goto label;
            //                }
            //            label1: row = 5;
            //                for (i = 5; i < (ds.Tables[1].Rows.Count * 2) + 5; i = i + 2)
            //                {
            //                    total_conducted_hrs = ((total_conducted_hrs) + Convert.ToInt16(array_value[row - 5].ToString()));
            //                    total_attended_hrs = ((total_attended_hrs) + Convert.ToInt16(array_attnd[row - 5].ToString()));
            //                    if (array_value[row - 5] == 0)
            //                    {
            //                        string data = "-";
            //                        string data = "-";
            //                    }
            //                    else if (array_attnd[row - 5] == 0)
            //                    {
            //                        string data = "0";
            //                        string data = "0";
            //                    }
            //                    else
            //                    {
            //                        attnd_perc_val = ((Convert.ToDouble(array_attnd[row - 5]) / Convert.ToDouble(array_value[row - 5])) * 100);
            //                        avgstudent1 = Convert.ToDecimal(attnd_perc_val);
            //                        avgstudent2 = Math.Round(avgstudent1);
            //                        avgstudent3 = Convert.ToDouble(avgstudent2);
            //                        attnd_perc = Convert.ToString(avgstudent3);
            //                        string data = array_attnd[row - 5].ToString();
            //                        string data = attnd_perc.ToString();
            //                    }
            //                    row++;
            //                }
            //                if (total_conducted_hrs == 0)
            //                {
            //                    attnd_perc = "-";
            //                }
            //                else if (total_attended_hrs == 0)
            //                {
            //                    attnd_perc = "0";
            //                }
            //                else
            //                {
            //                    if (ds.Tables[7].Rows.Count != 0)
            //                    {
            //                        if (ds.Tables[7].Rows[0][0].ToString() == "1")
            //                        {
            //                            if (ds.Tables[8].Rows.Count != 0)
            //                            {
            //                                if (Convert.ToInt16(total_attended_hrs) >= Convert.ToInt16(ds.Tables[8].Rows[0][0].ToString()))
            //                                {
            //                                    attnd_perc = "100";
            //                                }
            //                                else
            //                                {
            //                                    attnd_perc_val = (Convert.ToDouble(total_attended_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
            //                                    //-------convert
            //                                    avgstudent1 = Convert.ToDecimal(attnd_perc_val);
            //                                    avgstudent2 = Math.Round(avgstudent1);
            //                                    avgstudent3 = Convert.ToDouble(avgstudent2);
            //                                    attnd_perc = Convert.ToString(avgstudent3);
            //                                }
            //                            }
            //                            else
            //                            {
            //                                attnd_perc_val = (Convert.ToDouble(total_attended_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
            //                                //-------convert
            //                                avgstudent1 = Convert.ToDecimal(attnd_perc_val);
            //                                avgstudent2 = Math.Round(avgstudent1);
            //                                avgstudent3 = Convert.ToDouble(avgstudent2);
            //                                attnd_perc = Convert.ToString(avgstudent3);
            //                            }
            //                        }
            //                        else
            //                        {
            //                            attnd_perc_val = (Convert.ToDouble(total_attended_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
            //                            //-------convert
            //                            avgstudent1 = Convert.ToDecimal(attnd_perc_val);
            //                            avgstudent2 = Math.Round(avgstudent1);
            //                            avgstudent3 = Convert.ToDouble(avgstudent2);
            //                            attnd_perc = Convert.ToString(avgstudent3);
            //                        }
            //                    }
            //                    else
            //                    {
            //                        attnd_perc_val = (Convert.ToDouble(total_hrs) / Convert.ToDouble(total_conducted_hrs)) * 100;
            //                        //-------convert
            //                        avgstudent1 = Convert.ToDecimal(attnd_perc_val);
            //                        avgstudent2 = Math.Round(avgstudent1);
            //                        avgstudent3 = Convert.ToDouble(avgstudent2);
            //                        attnd_perc = Convert.ToString(avgstudent3);
            //                    }
            //                }
            //                i = (ds.Tables[1].Rows.Count * 2) + 5;
            //                if (total_conducted_hrs == 0)
            //                {
            //                    string data = "-";
            //                }
            //                else
            //                {
            //                    string data = total_attended_hrs.ToString();
            //                }
            //                string data = attnd_perc.ToString();
            //                if (percheck.Checked == true)
            //                {
            //                    if (pertxt.Text != "")
            //                    {
            //                        find_filter(attnd_perc);
            //                        if (filter_flag == false)
            //                        {
            //                        }
            //                        else
            //                        {
            //                            sturollcount++;
            //                            string data = sturollcount.ToString();
            //                        }
            //                    }
            //                }
            //                row = 5;
            //                for (i = 5; i < (ds.Tables[1].Rows.Count * 2) + 5; i = i + 2)
            //                {
            //                    if (array_individualsubject_hour_count[row - 5] > 0)
            //                    {
            //                        array_attnd_individualsubject_hour_count[row - 5] = (array_attnd_individualsubject_hour_count[row - 5] + array_individualsubject_hour_count[row - 5]);
            //                    }
            //                    row++;
            //                }
            //                rollcount++;
            //            }
            //            f_date = from_date;
            //            int count = 0;
            //            tval = 0;
            //            while (f_date <= t_date)
            //            {
            //                sume = f_date.Month.ToString() + "/" + f_date.Day.ToString() + "/" + f_date.Year.ToString();
            //                for (int sdate = 1; sdate <= no_of_hrs; sdate++)
            //                {
            //                    count = 0;
            //                    for (k = 0; k < ds.Tables[1].Rows.Count; k++)
            //                    {
            //                        if (attend_table.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
            //                        {
            //                            count++;
            //                            array_attnd_individualsubject_hour_count[k] = array_attnd_individualsubject_hour_count[k] + 1;
            //                            k = ds.Tables[1].Rows.Count;
            //                        }
            //                    }
            //                    if (count == 0)
            //                    {
            //                        for (k = 0; k < ds.Tables[1].Rows.Count; k++)
            //                        {
            //                            if (lab.ContainsKey(sume + "-" + sdate.ToString() + "-" + ds.Tables[1].Rows[k][1].ToString()))
            //                            {
            //                                count++;
            //                                array_lab_hour_count[k] = array_lab_hour_count[k] + 1;
            //                            }
            //                        }
            //                        if (count > 0)
            //                        {
            //                            tval = tval + 1;
            //                        }
            //                    }
            //                }
            //                f_date = f_date.AddDays(1);
            //            }
            //            row = 5;
            //            for (i = 5; i < (ds.Tables[1].Rows.Count * 2) + 5; i = i + 2)
            //            {
            //                string data = (array_attnd_individualsubject_hour_count[row - 5] + array_lab_hour_count[row - 5]).ToString();
            //                whole_total_conducted_hrs = whole_total_conducted_hrs + (array_attnd_individualsubject_hour_count[row - 5]);
            //                row++;
            //            }
            //            i = (ds.Tables[1].Rows.Count * 2) + 5;
            //            if (whole_total_conducted_hrs == 0)
            //            {
            //                string data = "-";
            //            }
            //            else
            //            {
            //                string data = (whole_total_conducted_hrs + tval).ToString();
            //            }
            //        }
            //    }
            //}
        }
        catch (Exception ex)
        {
        }
    }

    public void spl_hrs()
    {
        try
        {
            List<string> present_table = new List<string>();
            hasspl_tot.Clear();
            hasspl_pres.Clear();
            //-------------set section value
            string splhrsec = string.Empty;
            splhrsec = "and sm.sections='A' and sm.sections=r.sections";
            con_splhr_query_master.Close();
            con_splhr_query_master.Open();
            DataSet ds_splhr_query_master = new DataSet();
            //  no_stud_flag = false;
            string splhr_query_master = "select attendance,sa.roll_no,sm.date,sd.subject_no from specialhr_attendance sa,registration r,specialhr_master sm ,specialhr_details sd where  r.roll_no=sa.roll_no and r.batch_year=" + lblyear.Text + " and r.current_semester=1 and r.degree_code=45  and (CC = 0)  AND (DelFlag = 0)  AND (Exam_Flag <> 'debar')  and  sd.hrdet_no=sa.hrdet_no and sd.hrentry_no=sm.hrentry_no and r.batch_year=sm.batch_year and r.degree_code=sm.degree_code and date between '" + from_date + "' and '" + to_date + "' " + splhrsec + " and r.roll_no='" + Session[""] + "'  order by r.roll_no asc";
            SqlDataReader dr_splhr_query_master;
            cmd = new SqlCommand(splhr_query_master, con_splhr_query_master);
            dr_splhr_query_master = cmd.ExecuteReader();
            while (dr_splhr_query_master.Read())
            {
                if (dr_splhr_query_master.HasRows)
                {
                    key_value = dr_splhr_query_master[1].ToString() + "$" + dr_splhr_query_master[2].ToString() + "$" + dr_splhr_query_master[3].ToString();
                    if (!hasspl_tot.ContainsKey(key_value))
                    {
                        //  hasspl_tot.Add(key_value,Convert.ToInt32( dr_splhr_query_master[0].ToString()));
                        hasspl_tot.Add(key_value, "1");
                    }
                    else
                    {
                        attnd_val = Convert.ToString(GetCorrespondingKey(key_value, hasspl_tot));
                        hasspl_tot[key_value] = (Convert.ToInt32(attnd_val) + 1).ToString();
                    }
                    if (present_table.Contains((dr_splhr_query_master[0].ToString())))
                    {
                        if (!hasspl_pres.ContainsKey(key_value))
                        {
                            hasspl_pres.Add(key_value, "1");
                        }
                        else
                        {
                            attnd_val = Convert.ToString(GetCorrespondingKey(key_value, hasspl_pres));
                            hasspl_pres[key_value] = (Convert.ToInt32(attnd_val) + 1).ToString();
                        }
                    }
                    else
                    {
                        if (!hasspl_pres.ContainsKey(key_value))
                        {
                            hasspl_pres.Add(key_value, "0");
                        }
                    }
                }
            }
        }
        catch
        {
        }
    }

    private string findday1(int no, string sdate, string todate)//------------------find day order 
    {
        int order, holino;
        holino = 0;
        string day_order = string.Empty;
        string from_date = string.Empty;
        string fdate = string.Empty;
        int diff_work_day = 0;
        con.Close();
        con.Open();
        SqlDataReader dr;
        cmd = new SqlCommand("select count(*) from holidaystudents where degree_code='" + Session["deg_code"] + "' and semester='" + f + "' and holiday_date between '" + sdate.ToString() + "' and  '" + todate.ToString() + "' and halforfull='0'", con);
        dr = cmd.ExecuteReader();
        dr.Read();
        if (dr.HasRows == true)
        {
            holino = Convert.ToInt16(dr[0].ToString());
        }
        //  DateTime dt1 = Convert.ToDateTime(fdate.ToString());
        DateTime dt1 = Convert.ToDateTime(todate.ToString());
        DateTime dt2 = Convert.ToDateTime(sdate.ToString());
        TimeSpan t = dt1.Subtract(dt2);
        int days = t.Days;
        diff_work_day = days - holino;
        order = Convert.ToInt16(diff_work_day.ToString()) % no;
        if (order.ToString() == "0")
        {
            order = no;
        }
        if (order.ToString() == "1")
        {
            day_order = "mon";
        }
        else if (order.ToString() == "2")
        {
            day_order = "tue";
        }
        else if (order.ToString() == "3")
        {
            day_order = "wed";
        }
        else if (order.ToString() == "4")
        {
            day_order = "thu";
        }
        else if (order.ToString() == "5")
        {
            day_order = "fri";
        }
        else if (order.ToString() == "6")
        {
            day_order = "sat";
        }
        else if (order.ToString() == "7")
        {
            day_order = "sun";
        }
        con.Close();
        return (day_order);
    }

    protected void txtfromdatereq_TextChanged(object sender, EventArgs e)
    {
    }

    protected void txttodatereq_TextChanged(object sender, EventArgs e)
    {
    }

    protected void loadreqval()
    {
        try
        {
            DataSet dsgetreq = new DataSet();
            ViewState["app_no"] = string.Empty;
            string rollno = Convert.ToString(Reg_no);
            string query = "select a.parent_name,a.stud_name,r.App_No,r.Roll_no,r.Stud_Type,c.Course_Name,dt.Dept_Name,r.Sections ,r.Current_Semester,r.Batch_Year,d.Degree_Code,a.parent_addressP,a.parent_pincodec,Streetp,Cityp,StuPer_Id,Student_Mobile,(select TextVal from TextValTable where TextCode =ISNULL( parent_statep,0))as State,co.collname,co.college_code,C.type   from applyn a,Registration r ,Degree d,course c,Department dt,collinfo co where a.app_no=r.app_no and r.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.Dept_Code=dt.Dept_Code and co.college_code =d.college_code  and r.Reg_No='" + rollno + "'";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ViewState["app_no"] = Convert.ToString(ds.Tables[0].Rows[0]["App_No"]);
                    ViewState["staffcode"] = Convert.ToString(ds.Tables[0].Rows[0]["Degree_Code"]);
                    ViewState["studtype"] = Convert.ToString(ds.Tables[0].Rows[0]["Stud_Type"]);
                    string studtype = Convert.ToString(ViewState["studtype"]);
                    if (studtype.Trim() == "Hostler")
                    {
                        grdshow.Visible = true;
                        divright.Visible = true;
                    }
                    if (studtype.Trim() == "Day Scholar")
                    {
                        grdshow.Visible = false;
                        divright.Visible = false;
                    }
                    //string getreq = "select GateReqReason,Convert(varchar(10),GateReqEntryDate,103) as GateReqEntryDate,GateReqEntryTime,Convert(varchar(10),GateReqExitDate,103) as GateReqExitDate,GateReqExitTime from RQ_Requisition where ReqAppNo='" + app_no + "' and RequestType='6'";
                    //dsgetreq.Clear();
                    //dsgetreq = d2.select_method_wo_parameter(getreq, "Text");
                    //if (dsgetreq.Tables.Count > 0)
                    //{
                    //    if (dsgetreq.Tables[0].Rows.Count > 0)
                    //    {
                    //        if (Convert.ToString(dsgetreq.Tables[0].Rows[0]["GateReqReason"]).Trim() != "")
                    //        {
                    //            ddlgatepass.SelectedItem.Value = Convert.ToString(dsgetreq.Tables[0].Rows[0]["GateReqReason"]);
                    //        }
                    //        else
                    //        {
                    //            ddlgatepass.SelectedIndex = 0;
                    //        }
                    //        txtfromdatereq.Text = Convert.ToString(dsgetreq.Tables[0].Rows[0]["GateReqEntryDate"]);
                    //        txttodatereq.Text = Convert.ToString(dsgetreq.Tables[0].Rows[0]["GateReqExitDate"]);
                    //        string getfromtime = Convert.ToString(dsgetreq.Tables[0].Rows[0]["GateReqEntryTime"]);
                    //        string gettotime = Convert.ToString(dsgetreq.Tables[0].Rows[0]["GateReqExitTime"]);
                    //        if (getfromtime.Trim() != "")
                    //        {
                    //            string[] split = getfromtime.Split(':');
                    //            ddlhourreq.SelectedItem.Text = split[0];
                    //            ddlminreq.SelectedItem.Text = split[1];
                    //            ddlsessionreq.SelectedItem.Text = split[2];
                    //        }
                    //        if (gettotime.Trim() != "")
                    //        {
                    //            string[] spltotime = gettotime.Split(':');
                    //            ddlendhourreq.SelectedItem.Text = spltotime[0];
                    //            ddlendminreq.SelectedItem.Text = spltotime[1];
                    //            ddlenssessionreq.SelectedItem.Text = spltotime[2];
                    //        }
                    //    }
                    //}
                }
            }
        }
        catch
        {
        }
    }

    public void CheckBox_column4_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (CheckBox_column4.Checked == true)
            {
                ItemList_gate.Clear();
                for (int i = 0; i < cblcolumnorder4.Items.Count; i++)
                {
                    string si = Convert.ToString(i);
                    cblcolumnorder4.Items[i].Selected = true;
                    LinkButton6.Visible = true;
                    ItemList_gate.Add(cblcolumnorder4.Items[i].Text.ToString());
                    Itemindex_gate.Add(si);
                }
                LinkButton6.Visible = true;
                tborder4.Visible = true;
                tborder4.Text = string.Empty;
                int j = 0;
                for (int i = 0; i < ItemList_gate.Count; i++)
                {
                    j = j + 1;
                    tborder4.Text = tborder4.Text + ItemList_gate[i].ToString();
                    tborder4.Text = tborder4.Text + "(" + (j).ToString() + ")  ";
                }
            }
            else
            {
                for (int i = 0; i < cblcolumnorder4.Items.Count; i++)
                {
                    cblcolumnorder4.Items[i].Selected = false;
                    LinkButton6.Visible = false;
                    ItemList_gate.Clear();
                    Itemindex_gate.Clear();
                    cblcolumnorder4.Items[0].Enabled = false;
                }
                tborder4.Text = string.Empty;
                tborder4.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void LinkButtonsremove4_Click(object sender, EventArgs e)
    {
        try
        {
            cblcolumnorder4.ClearSelection();
            CheckBox_column4.Checked = false;
            LinkButton6.Visible = false;
            ItemList_gate.Clear();
            Itemindex_gate.Clear();
            tborder4.Text = string.Empty;
            tborder4.Visible = false;
        }
        catch (Exception ex)
        {
        }
    }

    public void cblcolumnorder4_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CheckBox_column4.Checked = false;
            string value = string.Empty;
            int index;
            cblcolumnorder4.Items[0].Selected = true;
            cblcolumnorder4.Items[0].Enabled = false;
            value = string.Empty;
            string result = Request.Form["__EVENTTARGET"];
            string[] checkedBox = result.Split('$');
            index = int.Parse(checkedBox[checkedBox.Length - 1]);
            string sindex = Convert.ToString(index);
            if (cblcolumnorder4.Items[index].Selected)
            {
                if (!Itemindex_gate.Contains(sindex))
                {
                    if (tborder4.Text == "")
                    {
                        ItemList_gate.Add("Roll No");
                    }
                    ItemList_gate.Add(cblcolumnorder4.Items[index].Text.ToString());
                    Itemindex_gate.Add(sindex);
                }
            }
            else
            {
                ItemList_gate.Remove(cblcolumnorder4.Items[index].Text.ToString());
                Itemindex_gate.Remove(sindex);
            }
            for (int i = 0; i < cblcolumnorder4.Items.Count; i++)
            {
                if (cblcolumnorder4.Items[i].Selected == false)
                {
                    sindex = Convert.ToString(i);
                    ItemList_gate.Remove(cblcolumnorder4.Items[i].Text.ToString());
                    Itemindex_gate.Remove(sindex);
                }
            }
            LinkButton6.Visible = true;
            tborder4.Visible = true;
            tborder4.Text = string.Empty;
            for (int i = 0; i < ItemList_gate.Count; i++)
            {
                tborder4.Text = tborder4.Text + ItemList_gate[i].ToString();
                tborder4.Text = tborder4.Text + "(" + (i + 1).ToString() + ")  ";
            }
            if (ItemList_gate.Count == 14)
            {
                CheckBox_column4.Checked = true;
            }
            if (ItemList_gate.Count == 0)
            {
                tborder4.Visible = false;
                LinkButton6.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void imgbuttonreq_Click(object sender, EventArgs e)
    {
        hostelreq.Visible = false;
        gate_div.Visible = false;
        string hostler = d2.GetFunction("select distinct Stud_Type from HT_HostelRegistration hs,Registration r,HM_HostelMaster hd where hd.HostelMasterPK=hs.HostelMasterFK and hs.App_No=r.APP_No and  r.App_No='" + appno + "'");
        if (hostler == "Hostler")
        {
            divreq.Visible = true;
            gate_div.Visible = false;
            loadreason();
            loadhour();
            loadmins();
            timevalue();
            loadreqval();
            //  bindgrid();
            bindgridleave();
            ddlgatepass.SelectedIndex = 0;
            txt_appldatereq.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txtfromdatereq.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txttodatereq.Text = DateTime.Now.ToString("dd/MM/yyyy");
        }
        else
        {
            lbl_show_err.Visible = true;
            lbl_show_err.Text = "GatePass Request Only For Hostler Student";
        }
    }

    protected void imgbuttonreqapp_click(object sender, EventArgs e)
    {
        lbl_show_err.Visible = false;
        lbl_err_mag.Visible = false;
        gate_div.Visible = true;
        divreq.Visible = false;
        divright.Visible = false;
        txt_fromdt.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_todt.Text = DateTime.Now.ToString("dd/MM/yyyy");
        hostelreq.Visible = false;
    }

    protected void imgbuttonreqhostel_click(object sender, EventArgs e)
    {
        lbl_show_err.Visible = false;
        lbl_err_mag.Visible = false;
        gate_div.Visible = false;
        divreq.Visible = false;
        divright.Visible = false;
        txt_fromdt.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_todt.Text = DateTime.Now.ToString("dd/MM/yyyy");
        hostelreq.Visible = true;
    }

    protected void btn_hostelreq_Click(object sender, EventArgs e)
    {
        int ins = 0;
        if (rdbhostelreq.Checked == true)
            ins = d2.update_method_wo_parameter("update applyn set CampusReq='1' where app_no='" + appno + "'", "text");
        else
            ins = d2.update_method_wo_parameter("update applyn set CampusReq='0' where app_no='" + appno + "'", "text");
        if (ins != 0)
        {
            lbl_hostel.ForeColor = Color.Green;
            lbl_hostel.Text = "Saved Successfully";
        }
        else
        {
            lbl_hostel.ForeColor = Color.Red;
            lbl_hostel.Text = "Not Saved";
        }
    }

    protected void btn_goreqapp_click(object sender, EventArgs e)
    {
        gate();
    }

    //public void gatepassrights()
    //{
    //    try
    //    {
    //        string query  = string.Empty;
    //        string Master1  = string.Empty;
    //        string stud  = string.Empty;
    //        string values  = string.Empty;
    //        string sms  = string.Empty;
    //        string sms1  = string.Empty;
    //        string sms2  = string.Empty;
    //        if ((Session["group_code"].ToString().Trim() != "") && (Session["group_code"].ToString().Trim() != "0") && (Session["group_code"].ToString().Trim() != "-1"))
    //        {
    //            string group = Session["group_code"].ToString();
    //            if (group.Contains(';'))
    //            {
    //                string[] group_semi = group.Split(';');
    //                Master1 = group_semi[0].ToString();
    //            }
    //            query = "select * from Master_Settings where settings ='Request Gatepass Rights' and group_code ='" + Master1 + "'";
    //        }
    //        else
    //        {
    //            Master1 = Session["usercode"].ToString();
    //            query = "select * from Master_Settings where settings ='Request Gatepass Rights' and usercode ='" + Master1 + "'";
    //        }
    //        ds = d2.select_method_wo_parameter(query, "Text");
    //        if (ds.Tables[0].Rows.Count > 0)
    //        {
    //            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
    //            {
    //                string val = Convert.ToString(ds.Tables[0].Rows[i]["value"]);
    //                if (val == "1")
    //                {
    //                    gatepass_staffdept = "1";
    //                }
    //                else if (val == "2")
    //                {
    //                    gatepass_staffdept = "2";
    //                }
    //                else
    //                {
    //                    gatepass_staffdept  = string.Empty;
    //                }
    //            }
    //        }
    //    }
    //    catch
    //    {
    //    }
    //}

    protected void fpspread6_ButtonCommand(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            string activerow = string.Empty;
            string activecol = string.Empty;
            activerow = Fpspread6.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread6.ActiveSheetView.ActiveColumn.ToString();
            string actrow = e.SheetView.ActiveRow.ToString();
            string actcol = e.SheetView.ActiveColumn.ToString();
            if (Convert.ToInt32(activecol) == 2)
            {
                //popview.Visible = true;
                //div_itmreqst.Visible = false;
                //panelrollnopop.Visible = true;
                //pan_gatepass.Visible = true;
                //div_itmreqst.Visible = false;
                //div_service.Visible = false;
                //div_visitor.Visible = false;
                //view6();
                //div_complaints.Visible = false;
                //div_leavereq.Visible = false;
                //div_event_app.Visible = false;
            }
        }
        catch
        {
        }
    }

    public void gate()
    {
        //gatepassrights();
        lbl_err_mag.Visible = true;
        Fpspread6.Sheets[0].Visible = true;
        FarPoint.Web.Spread.StyleInfo darkstyle111 = new FarPoint.Web.Spread.StyleInfo();
        darkstyle111.BackColor = ColorTranslator.FromHtml("#0CA6CA");
        darkstyle111.ForeColor = Color.Black;
        darkstyle111.HorizontalAlign = HorizontalAlign.Center;
        Fpspread6.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle111;
        Fpspread6.Sheets[0].RowHeader.Visible = false;
        Fpspread6.CommandBar.Visible = false;
        Fpspread6.Sheets[0].AutoPostBack = false;
        Fpspread6.Sheets[0].RowCount = 0;
        string[] ay = txt_fromdt.Text.Split('/');
        string[] ay1 = txt_todt.Text.Split('/');
        DateTime dt = new DateTime();
        DateTime dt1 = new DateTime();
        dt = Convert.ToDateTime(ay[1] + "/" + ay[0] + "/" + ay[2]);
        dt1 = Convert.ToDateTime(ay1[1] + "/" + ay1[0] + "/" + ay1[2]);
        string app = string.Empty;
        string query = string.Empty;
        string deptapp = string.Empty;
        string staff_dept = string.Empty;
        string getappno = string.Empty;
        query = "SELECT RequisitionPK,ReqApproveStage,ReqAppStatus,CASE WHEN RequestType = 6 THEN 'Gate Pass' END RequestType,RequestCode,ReqStaffAppNo,CONVERT(VARCHAR(11),GateReqExitDate,103) as GateReqExitDate,GateReqExitTime,CONVERT(VARCHAR(11),GateReqEntryDate,103) as GateReqEntryDate,GateReqEntryTime,CONVERT(VARCHAR(11),RequestDate,103) as RequestDate,(Select TextVal FROM TextValTable T WHERE R.RequestBy = T.TextCode) RequestBy,(Select TextVal FROM TextValTable T WHERE R.RequestMode = T.TextCode) RequestMode,Roll_No,Stud_Name,Staff_Code,Staff_Name,case when MemType=2 then 'Staff' when MemType =1 then 'Student' end as memtype FROM RQ_Requisition R,Registration S,staff_appl_master A,staffmaster M WHERE R.ReqAppNo = S.App_No AND R.ReqStaffAppNo = A.appl_id AND A.appl_no = M.appl_no and RequestDate between '" + dt.ToString("MM/dd/yyyy") + "' and '" + dt1.ToString("MM/dd/yyyy") + "' and RequestType=6 and ReqAppNo='" + appno + "'";
        if (query == "")
        {
            Fpspread6.Sheets[0].Visible = false;
            lbl_err_mag.Visible = true;
            lbl_err_mag.Text = "Kindly Select All List ";
            //div_report.Visible = false;
            //btn_del_stud.Visible = false;
            //div_report.Visible = false;
            pheaderfilter4.Visible = false;
            pcolumnorder4.Visible = false;
            //btn_del_stud.Visible = false;
        }
        else
        {
            if (query != "")
            {
                ds = d2.select_method(query, hat, "Text");
                if (ds.Tables[0].Rows.Count == 0)
                {
                    Fpspread6.Sheets[0].Visible = false;
                    Fpspread6.Visible = false;
                    lbl_err_mag.Visible = true;
                    lbl_err_mag.Text = "No Records Found";
                    btn_reqdelete.Visible = false;
                    //div_report.Visible = false;
                    pheaderfilter4.Visible = false;
                    pcolumnorder4.Visible = false;
                    //btn_del_stud.Visible = false;
                }
                else
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        btn_reqdelete.Visible = true;
                        lbl_err_mag.Visible = false;
                        for (int i = 0; i < cblcolumnorder4.Items.Count; i++)
                        {
                            if (cblcolumnorder4.Items[i].Selected == true)
                            {
                                hat5.Add(cblcolumnorder4.Items[i].Text, cblcolumnorder4.Items[i].Value);
                                string colvalue = cblcolumnorder4.Items[i].Text;
                                if (ItemList_gate.Contains(colvalue) == false)
                                {
                                    ItemList_gate.Add(cblcolumnorder4.Items[i].Text);
                                }
                                tborder4.Text = string.Empty;
                                for (int j = 0; j < ItemList_gate.Count; j++)
                                {
                                    tborder4.Text = tborder4.Text + ItemList_gate[j].ToString();
                                    tborder4.Text = tborder4.Text + "(" + (j + 1).ToString() + ")  ";
                                }
                            }
                            cblcolumnorder4.Items[0].Enabled = false;
                        }
                        if (ItemList_gate.Count == 0)
                        {
                            for (int i = 0; i < 3; i++)
                            {
                                cblcolumnorder4.Items[i].Selected = true;
                                hat5.Add(cblcolumnorder4.Items[i].Text, cblcolumnorder4.Items[i].Value);
                                string colvalue = cblcolumnorder4.Items[i].Text;
                                if (ItemList_gate.Contains(colvalue) == false)
                                {
                                    ItemList_gate.Add(cblcolumnorder4.Items[i].Text);
                                }
                                tborder4.Text = string.Empty;
                                for (int j = 0; j < ItemList_gate.Count; j++)
                                {
                                    tborder4.Text = tborder4.Text + ItemList_gate[j].ToString();
                                    tborder4.Text = tborder4.Text + "(" + (j + 1).ToString() + ")  ";
                                }
                            }
                        }
                        Fpspread6.Sheets[0].ColumnHeader.RowCount = 1;
                        Fpspread6.Sheets[0].ColumnCount = 2;
                        Fpspread6.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                        Fpspread6.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                        Fpspread6.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                        Fpspread6.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                        Fpspread6.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpspread6.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                        Fpspread6.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                        Fpspread6.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                        Fpspread6.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                        Fpspread6.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                        FarPoint.Web.Spread.StyleInfo style2 = new FarPoint.Web.Spread.StyleInfo();
                        style2.Font.Size = 15;
                        style2.Font.Name = "Book Antiqua";
                        style2.Font.Bold = true;
                        style2.HorizontalAlign = HorizontalAlign.Center;
                        style2.ForeColor = Color.Black;
                        style2.BackColor = Color.AliceBlue;
                        Fpspread6.Sheets[0].PageSize = Fpspread6.Sheets[0].RowCount;
                        for (int i = 0; i < ItemList_gate.Count; i++)
                        {
                            string value1 = ItemList_gate[i].ToString();
                            int a = value1.Length;
                            Fpspread6.Sheets[0].ColumnCount++;
                            Fpspread6.Sheets[0].ColumnHeader.Cells[Fpspread6.Sheets[0].ColumnHeader.RowCount - 1, Fpspread6.Sheets[0].ColumnCount - 1].Text = ItemList_gate[i].ToString();
                            Fpspread6.Sheets[0].ColumnHeader.Cells[Fpspread6.Sheets[0].ColumnHeader.RowCount - 1, Fpspread6.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                            Fpspread6.Sheets[0].ColumnHeader.Cells[Fpspread6.Sheets[0].ColumnHeader.RowCount - 1, Fpspread6.Sheets[0].ColumnCount - 1].Font.Bold = true;
                            Fpspread6.Sheets[0].ColumnHeader.Cells[Fpspread6.Sheets[0].ColumnHeader.RowCount - 1, Fpspread6.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        }
                        Fpspread6.Sheets[0].RowCount = 0;
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            Fpspread6.Sheets[0].RowCount++;
                            count++;
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 0].Text = count.ToString();
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(ds.Tables[0].Rows[i]["RequisitionPK"]);
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                            FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                            cb.AutoPostBack = true;
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 1].CellType = cb;
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                            Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                            //string staffap = d2.GetFunction("select ReqAppNo from RQ_Requisition where ReqAppNo='" + app + "'");
                            //if (app != staffap)
                            //{
                            //    Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 2].Column.Locked = true;
                            //}
                            int c = 1;
                            string appstage = string.Empty;
                            if (ItemList_gate.Count > 0 && hat5.Count > 0)
                            {
                                for (int j = 0; j < ItemList_gate.Count; j++)
                                {
                                    string k = Convert.ToString(ItemList_gate[j].ToString());
                                    string names = Convert.ToString(hat5[k].ToString());
                                    c++;
                                    string val = ds.Tables[0].Rows[i][names].ToString();
                                    string staffname = string.Empty;
                                    if (names == "ReqAppNo")
                                    {
                                        if (val != "")
                                        {
                                            string staffcode = d2.GetFunction("select staff_code  from staff_appl_master a, staffmaster s where a.appl_no=s.appl_no and appl_id='" + val + "'");
                                            staffname = d2.GetFunction("select staff_name from staffmaster where staff_code='" + staffcode + "'");
                                        }
                                        else
                                        {
                                            staffname = string.Empty;
                                        }
                                    }
                                    if (names == "ReqAppStatus")
                                    {
                                        if (val == "0")
                                        {
                                            appstage = "Not Approved";
                                        }
                                        else if (val == "1")
                                        {
                                            appstage = "Approved";
                                        }
                                        else if (val == "2")
                                        {
                                            appstage = "Reject";
                                        }
                                    }
                                    if (names == "ReqAppStatus")
                                    {
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].Text = appstage;
                                    }
                                    else if (names == "ReqAppNo")
                                    {
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].Text = staffname;
                                    }
                                    else if (names == "ReqApproveStage")
                                    {
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].HorizontalAlign = HorizontalAlign.Center;
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].Text = ds.Tables[0].Rows[i][names].ToString();
                                    }
                                    else if (names == "ReqStaffAppNo")
                                    {
                                        string stfname = string.Empty;
                                        if (val != "")
                                        {
                                            stfname = d2.GetFunction("select appl_name from staff_appl_master where appl_id='" + val + "'");
                                        }
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].Text = stfname;
                                    }
                                    else
                                    {
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].Text = ds.Tables[0].Rows[i][names].ToString();
                                    }
                                    FarPoint.Web.Spread.TextCellType textcel_type = new FarPoint.Web.Spread.TextCellType();
                                    Fpspread6.Sheets[0].Columns[2].CellType = textcel_type;
                                    string ReqAppStatus = Convert.ToString(ds.Tables[0].Rows[i]["ReqAppStatus"]);
                                    if (ReqAppStatus == "1")
                                    {
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].BackColor = ColorTranslator.FromHtml("#A4F9C9");
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 1].BackColor = ColorTranslator.FromHtml("#A4F9C9");
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 0].BackColor = ColorTranslator.FromHtml("#A4F9C9");
                                    }
                                    else
                                    {
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].BackColor = ColorTranslator.FromHtml("#F0A3CC");
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 1].BackColor = ColorTranslator.FromHtml("#F0A3CC");
                                        Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, 0].BackColor = ColorTranslator.FromHtml("#F0A3CC");
                                    }
                                    Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].Font.Size = FontUnit.Medium;
                                    Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].Column.Width = 150;
                                    Fpspread6.Sheets[0].Cells[Fpspread6.Sheets[0].RowCount - 1, c].Column.Locked = true;
                                }
                            }
                        }
                    }
                    Fpspread6.Sheets[0].PageSize = Fpspread6.Sheets[0].RowCount;
                    Fpspread6.Width = 900;
                    Fpspread6.Height = 420;
                    pheaderfilter4.Visible = true;
                    pcolumnorder4.Visible = true;
                    Fpspread6.Visible = true;
                    //div_report.Visible = true;
                }
            }
        }
    }

    public void bindgrid()
    {
        try
        {
            Hashtable monthlst = new Hashtable();
            monthlst.Clear();
            DataTable dt = new DataTable();
            dt.Columns.Add("Sno");
            dt.Columns.Add("month");
            dt.Columns.Add("monthno");
            dt.Columns.Add("allleave");
            dt.Columns.Add("grantleave");
            dt.Columns.Add("Remainlev");
            DataRow dr;
            monthlst.Add(01, "January");
            monthlst.Add(02, "Feburary");
            monthlst.Add(03, "March");
            monthlst.Add(04, "April");
            monthlst.Add(05, "May");
            monthlst.Add(06, "June");
            monthlst.Add(07, "July");
            monthlst.Add(08, "August");
            monthlst.Add(09, "September");
            monthlst.Add(10, "October");
            monthlst.Add(11, "November");
            monthlst.Add(12, "December");
            string app_no = Convert.ToString(ViewState["app_no"]);
            string alllev = string.Empty;
            string allotleave = d2.GetFunction("select HostelGatePassPerCount from HM_HostelMaster hm,HT_HostelRegistration hr where hm.HostelmasterPK=hr.HostelMasterFK and App_No='" + app_no + "' and MemType='1'");
            if (allotleave.Trim() != "0" || allotleave != "")
            {
                alllev = allotleave;
            }
            else
            {
                alllev = "0";
            }
            for (int i = 1; i <= 12; i++)
            {
                dr = dt.NewRow();
                dr["Sno"] = i;
                dr["month"] = Convert.ToString(monthlst[i]);
                dr["allleave"] = Convert.ToString(alllev);
                string val = Convert.ToString(i);
                if (val.Length == 1)
                {
                    val = "0" + val;
                }
                else
                {
                    val = Convert.ToString(i);
                }
                string selquery = "select ISNULL(HostelGatePassPerCount,0)-COUNT(ISNULL(ReqAppStatus,0)) as Gatepasscount,COUNT(ReqAppStatus) as Approvecount from HM_HostelMaster hm,HT_HostelRegistration hr,RQ_Requisition req where hm.HostelMasterPK=hr.HostelMasterFK and hr.APP_No=req.ReqAppNo and hr.MemType='1' and hr.APP_No='" + app_no + "' and MONTH(RequestDate)=MONTH(GateReqEntryDate) and SUBSTRING(CONVERT(varchar(10), RequestDate, 105), 4, 2)='" + val + "' group by HostelGatePassPerCount";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selquery, "Text");
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dr["grantleave"] = Convert.ToString(ds.Tables[0].Rows[0]["Approvecount"]);
                        dr["Remainlev"] = Convert.ToString(ds.Tables[0].Rows[0]["Gatepasscount"]);
                    }
                    else
                    {
                        dr["grantleave"] = 0;
                        int grantcount = Convert.ToInt32(dr["grantleave"]);
                        if (alllev != "" && grantcount != 0)
                        {
                            if (grantcount != 0)
                            {
                                dr["Remainlev"] = Convert.ToInt32(alllev) - grantcount;
                            }
                            else
                            {
                                dr["Remainlev"] = 0;
                            }
                        }
                        else
                        {
                            dr["Remainlev"] = 0;
                        }
                    }
                }
                dt.Rows.Add(dr);
            }
            grdshow.DataSource = dt;
            grdshow.DataBind();
            grdshow.Visible = true;
            divright.Visible = true;
        }
        catch
        {
        }
    }

    public string ItemReqNo()
    {
        string newitemcode = string.Empty;
        string selectquery = "select Requisition_Acr ,Requisition_Size,Requisition_StNo  from InvCode_Settings where Latestrec =1";
        ds = d2.select_method_wo_parameter(selectquery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            string itemacronym = Convert.ToString(ds.Tables[0].Rows[0]["Requisition_Acr"]);
            string itemstarno = Convert.ToString(ds.Tables[0].Rows[0]["Requisition_StNo"]);
            if (itemacronym.Trim() != "" && itemstarno.Trim() != "")
            {
                selectquery = "select distinct top (1)  RequestCode  from RQ_Requisition where RequestCode like '" + Convert.ToString(itemacronym) + "%' order by RequestCode desc";
                //select distinct top (1) item_code  from item_master where item_code like '" + Convert.ToString(itemacronym) + "%' order by item_code desc";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selectquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string itemcode = Convert.ToString(ds.Tables[0].Rows[0]["RequestCode"]);
                    string itemacr = Convert.ToString(itemacronym);
                    int len = itemacr.Length;
                    itemcode = itemcode.Remove(0, len);
                    int len1 = Convert.ToString(itemcode).Length;
                    string newnumber = Convert.ToString((Convert.ToInt32(itemcode) + 1));
                    len = Convert.ToString(newnumber).Length;
                    len1 = len1 - len;
                    if (len1 == 2)
                    {
                        newitemcode = "00" + newnumber;
                    }
                    else if (len1 == 1)
                    {
                        newitemcode = "0" + newnumber;
                    }
                    else if (len1 == 4)
                    {
                        newitemcode = "0000" + newnumber;
                    }
                    else if (len1 == 3)
                    {
                        newitemcode = "000" + newnumber;
                    }
                    else
                    {
                        newitemcode = Convert.ToString(newnumber);
                    }
                    if (newitemcode.Trim() != "")
                    {
                        newitemcode = itemacr + "" + newitemcode;
                    }
                }
                else
                {
                    newitemcode = Convert.ToString(itemacronym) + "" + Convert.ToString(itemstarno);
                }
            }
        }
        return newitemcode;
    }

    protected void btnreq_click(object sender, EventArgs e)
    {
        try
        {
            string reason = string.Empty;
            string insertquery = string.Empty;
            string app_no = Convert.ToString(ViewState["app_no"]);
            string staffno = Convert.ToString(ViewState["staffcode"]);
            string appdate = txt_appldatereq.Text;
            string[] spl = appdate.Split('/');
            string date = Convert.ToString(spl[1] + "/" + spl[0] + "/" + spl[2]);
            DateTime newdate = Convert.ToDateTime(date);
            string mon = Convert.ToString(spl[1]);
            string addinfo = Convert.ToString(txt_studdetail.Text);
            int not = 0;
            string getentry = ddlhourreq.SelectedItem.Text + ":" + ddlminreq.SelectedItem.Text + ":" + ddlsessionreq.SelectedItem.Text;
            string getexit = ddlendhourreq.SelectedItem.Text + ":" + ddlendminreq.SelectedItem.Text + ":" + ddlenssessionreq.SelectedItem.Text;
            string reqcode = ItemReqNo();
            if (ddlgatepass.SelectedItem.Value != "Select")
            {
                if (ddlgatepass.SelectedItem.Value != "Others")
                {
                    reason = Convert.ToString(ddlgatepass.SelectedItem.Value);
                }
                else
                {
                    string txtreason = Convert.ToString(txt_ddlgatepassreson.Text);
                    reason = subjectcode("GRRea", txtreason);
                }
            }
            DateTime frmdate = new DateTime();
            frmdate = TextToDate(txtfromdatereq);
            DateTime todate = new DateTime();
            todate = TextToDate(txttodatereq);
            DateTime RequestfromDate = new DateTime();
            RequestfromDate = TextToDate(txtfromdatereq);
            int exithr = Convert.ToInt32(ddlendhourreq.SelectedItem.Text);
            int entryhr = Convert.ToInt32(ddlhourreq.SelectedItem.Text);
            int exitmin = Convert.ToInt32(ddlendminreq.SelectedItem.Text);
            int entrymin = Convert.ToInt32(ddlminreq.SelectedItem.Text);
            string exitday = Convert.ToString(ddlenssessionreq.SelectedItem.Text);
            string entryday = Convert.ToString(ddlsessionreq.SelectedItem.Text);
            string cuurentdate = DateTime.Now.ToString("dd/MM/yyyy");
            string fdate = Convert.ToString(txtfromdatereq.Text);
            int hrrr = Convert.ToInt32(hrr);
            string time = DateTime.Now.ToString("HH:mm:ss");
            string[] ay = time.Split(':');
            string val_min = ay[1].ToString();
            int v_min = Convert.ToInt32(val_min);
            if (frmdate > todate)
            {
                lblerrreq.Visible = true;
                lblerrreq.Text = "Enter Valid Date";
                return;
            }
            if (frmdate == todate && exitday == "PM" && entryday == "AM")
            {
                lblerrreq.Visible = true;
                lblerrreq.Text = "Kindly Select The Valid Time";
                return;
            }
            if (ddlgatepass.SelectedItem.Text == "Select")
            {
                lblerrreq.Visible = true;
                lblerrreq.Text = "Kindly Select The Reason";
                return;
            }
            if ((ddlenssessionreq.SelectedItem.Text == ddlsessionreq.SelectedItem.Text) && (ddlendhourreq.SelectedItem.Text == ddlhourreq.SelectedItem.Text))
            {
                if (exitmin >= entrymin)
                {
                    lblerrreq.Visible = true;
                    lblerrreq.Text = "Kindly Select The Valid Time";
                    return;
                }
            }
            if ((ddlenssessionreq.SelectedItem.Text == ddlsessionreq.SelectedItem.Text) && (exitmin == entrymin))
            {
                if (exithr >= entryhr)
                {
                    lblerrreq.Visible = true;
                    lblerrreq.Text = "Kindly Select The Valid Time";
                    return;
                }
            }
            if (cuurentdate == fdate && exitday == entryday)
            {
                if ((hrrr > exithr) || (v_min > exitmin) || (hrrr > exithr && v_min > exitmin))
                {
                    lblerrreq.Visible = true;
                    lblerrreq.Text = "Kindly Select The Valid Time";
                    return;
                }
            }
            if (((frmdate == todate) && (Convert.ToInt32(ddlhourreq.SelectedItem.Text)) == Convert.ToInt32(ddlendhourreq.SelectedItem.Text) && ddlminreq.SelectedItem.Text == ddlendminreq.SelectedItem.Text && exitday == entryday))
            {
                lblerrreq.Visible = true;
                lblerrreq.Text = "End time should be greater than Start time!";
                return;
            }
            else
            {
                /// validation for date (already)
                string appstage = d2.GetFunction("select Max(ReqAppStatus) from RQ_Requisition where RequestType='6' and MONTH(RequestDate)=MONTH(GateReqEntryDate) and ReqAppNo='" + app_no + "'");
                string getstudappno1 = d2.GetFunction("select ReqAppNo from RQ_Requisition where RequestType=6  and ReqAppNo='" + app_no + "'");
                if (getstudappno1 == appno)
                {
                    string qur = "select GateReqEntryDate from RQ_Requisition where RequestType=6 and ReqAppNo='" + getstudappno1 + "' and  MONTH(RequestDate)=MONTH(GateReqEntryDate) and  (GateReqEntryTime >='" + getexit + "') and GateReqEntryDate>='" + todate + "' ";
                    ds = d2.select_method_wo_parameter(qur, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        not = 1;
                    }
                }
                // totleave permission count
                string totleavecount = d2.GetFunction("select hm.HostelGatePassPerCount from HT_HostelRegistration ht,HM_HostelMaster hm where app_no='" + app_no + "'and hm.hostelmasterpk=ht.hostelmasterfk");
                int tolcount = Convert.ToInt32(totleavecount);
                // appno of not approve
                string getstudappno = d2.GetFunction("select ReqAppNo from RQ_Requisition where RequestType=6 and ReqAppStatus='0' and ReqAppNo='" + app_no + "'");
                // approve count of current month
                string approvcount = d2.GetFunction("select count(ReqAppNo) as Approvecount from RQ_Requisition  where ReqAppNo='" + app_no + "' and ReqAppStatus='1' and RequestType=6 and MONTH(RequestDate)=MONTH(GateReqEntryDate) ");
                string approvcountnot = d2.GetFunction("select count(ReqAppNo) as Approvecount from RQ_Requisition  where ReqAppNo='" + app_no + "' and ReqAppStatus='0' and RequestType=6 and MONTH(RequestDate)=MONTH(GateReqEntryDate) ");
                int appcount = Convert.ToInt32(approvcount);
                int approvcountnot1 = Convert.ToInt32(approvcountnot);
                //string validate = d2.GetFunction("select count(*) from RQ_Requisition where RequestType=6 and ReqAppNo='"+app_no+"' and  MONTH(RequestDate)=MONTH(GateReqEntryDate) and GateReqExitDate>='"+RequestfromDate+"' ");
                //if (validate == "0")
                //{
                //    lblerrreq.Visible = true;
                //    lblerrreq.Text = "Already You Are Requested In This Date/Time";
                //    return;
                //}
                if (approvcountnot1 >= 3)
                {
                    lblerrreq.Visible = true;
                    lblerrreq.Text = "You Cannot Give The More Than of 3 Request WithOut Of Approval Permission";
                    return;
                }
                if (appcount <= tolcount)
                {
                    if (not != 0)
                    {
                        lblerrreq.Visible = true;
                        lblerrreq.Text = "Already You Are Requested In This Date/Time";
                        return;
                    }
                    else
                    {
                        insertquery = "Insert into RQ_Requisition (RequestType,RequestDate,RequestCode,ReqAppNo,MemType,ReqStaffAppNo,GateReqEntryDate,GateReqExitDate,GateReqEntryTime,GateReqExitTime,GateReqReason,ReqApproveStage,AddInformation) values ('6','" + newdate.ToString("MM/dd/yyyy") + "','" + reqcode + "','" + app_no.Trim() + "','1','" + staffno.Trim() + "','" + todate + "','" + frmdate + "','" + getentry + "','" + getexit + "','" + reason + "','0','" + addinfo + "')";
                        int count = d2.update_method_wo_parameter(insertquery, "Text");
                        if (count > 0)
                        {
                            lblerrreq.Visible = true;
                            lblerrreq.Text = "You have requested Successfully!";
                            timevalue();
                            txtfromdatereq.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            txttodatereq.Text = DateTime.Now.ToString("dd/MM/yyyy");
                            bindgridleave();
                            txt_studdetail.Text = string.Empty;
                            loadreason();
                        }
                    }
                }
                else
                {
                    lblerrreq.Visible = true;
                    lblerrreq.Text = "You donn't have The Leave Permission";
                    return;
                }
            }
            bindgridleave();
        }
        catch
        {
        }
    }

    protected void imgbutton_Click(object sender, EventArgs e)
    {
        databindchart();
    }

    public void clearreq()
    {
    }

    public void loadhour()
    {
        ddlhourreq.Items.Clear();
        ddlendhourreq.Items.Clear();
        for (int i = 1; i <= 12; i++)
        {
            ddlhourreq.Items.Add(Convert.ToString(i));
            ddlendhourreq.Items.Add(Convert.ToString(i));
            ddlhourreq.SelectedIndex = ddlhourreq.Items.Count - 1;
            ddlendhourreq.SelectedIndex = ddlendhourreq.Items.Count - 1;
        }
    }

    public void loadmins()
    {
        ddlminreq.Items.Clear();
        ddlendminreq.Items.Clear();
        for (int i = 0; i <= 59; i++)
        {
            string val = Convert.ToString(i);
            if (val.Length == 1)
            {
                val = "0" + val;
            }
            ddlminreq.Items.Add(val);
            ddlendminreq.Items.Add(val);
        }
    }

    public void timevalue()
    {
        string time = DateTime.Now.ToString("HH:mm:ss");
        //string time =Convert.ToString(txt_viewtime.Text);
        string[] ay = time.Split(':');
        string val_hr = ay[0].ToString();
        int hr = Convert.ToInt16(val_hr);
        if (val_hr == "01")
        {
            hrr = "1";
        }
        else if (val_hr == "02")
        {
            hrr = "2";
        }
        else if (val_hr == "03")
        {
            hrr = "3";
        }
        else if (val_hr == "04")
        {
            hrr = "4";
        }
        else if (val_hr == "05")
        {
            hrr = "5";
        }
        else if (val_hr == "06")
        {
            hrr = "6";
        }
        else if (val_hr == "07")
        {
            hrr = "7";
        }
        else if (val_hr == "08")
        {
            hrr = "8";
        }
        else if (val_hr == "09")
        {
            hrr = "9";
        }
        else if (val_hr == "13")
        {
            hrr = "1";
        }
        else if (val_hr == "14")
        {
            hrr = "2";
        }
        else if (val_hr == "15")
        {
            hrr = "3";
        }
        else if (val_hr == "16")
        {
            hrr = "4";
        }
        else if (val_hr == "17")
        {
            hrr = "5";
        }
        else if (val_hr == "18")
        {
            hrr = "6";
        }
        else if (val_hr == "19")
        {
            hrr = "7";
        }
        else if (val_hr == "20")
        {
            hrr = "8";
        }
        else if (val_hr == "21")
        {
            hrr = "9";
        }
        else if (val_hr == "22")
        {
            hrr = "10";
        }
        else if (val_hr == "23")
        {
            hrr = "11";
        }
        else if (val_hr == "24")
        {
            hrr = "12";
        }
        if (val_hr == "10" || val_hr == "11" || val_hr == "12")
        {
            ddlhourreq.Text = val_hr;
            ddlminreq.Text = ay[1].ToString();
            ddlendhourreq.Text = val_hr;
            ddlendminreq.Text = ay[1].ToString();
        }
        else
        {
            ddlhourreq.Text = hrr;
            ddlminreq.Text = ay[1].ToString();
            ddlendhourreq.Text = hrr;
            ddlendminreq.Text = ay[1].ToString();
        }
        if (val_hr == "12" || val_hr == "13" || val_hr == "14" || val_hr == "15" || val_hr == "16" || val_hr == "17" || val_hr == "18" || val_hr == "19" || val_hr == "20" || val_hr == "21" || val_hr == "22" || val_hr == "23" || val_hr == "24")
        {
            ddlsessionreq.Text = "PM";
            ddlenssessionreq.Text = "PM";
        }
        else
        {
            ddlsessionreq.Text = "AM";
            ddlenssessionreq.Text = "AM";
        }
    }

    public string subjectcode(string textcri, string subjename)
    {
        string subjec_no = string.Empty;
        try
        {
            string select_subno = "select Mastercode from CO_MasterValues where MasterCriteria='" + textcri + "' and CollegeCode =" + collegecode1 + " and MasterValue='" + subjename + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(select_subno, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["Mastercode"]);
            }
            else
            {
                string insertquery = "insert into CO_MasterValues(MasterCriteria,MasterValue,CollegeCode) values('" + textcri + "','" + subjename + "','" + collegecode1 + "')";
                int result = d2.update_method_wo_parameter(insertquery, "Text");
                if (result != 0)
                {
                    string select_subno1 = "select Mastercode from CO_MasterValues where MasterCriteria='" + textcri + "' and CollegeCode =" + collegecode1 + " and MasterValue='" + subjename + "'";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(select_subno1, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["Mastercode"]);
                    }
                }
            }
        }
        catch
        {
        }
        return subjec_no;
    }

    protected void btnprintmaster_Click(Object sender, EventArgs e)
    {
        try
        {
            string degreedetails = "Marks Report " + '@' + "Name : " + nameprint + '@' + "Degree : " + departmentprint + '@' + "Sem : " + semprint + '@' + "Batch : " + batchprint + '@' + "Date :" + DateTime.Now.ToString();
            string pagename = "IndReport.aspx";
            Printcontrol.loadspreaddetails(Fpsmarks, pagename, degreedetails);
            Fpsmarks.Visible = true;
            Printcontrol.Visible = true;
            lblrptname.Visible = true;
            txtexcelname.Visible = true;
            btnxl.Visible = true;
            //Fpsmarks.Visible = true;
            //Printcontrol.Visible = true;
            //Fpsmarks.Visible = true;
            //Printcontrol.loadspreaddetails(Fpsmarks, "IndReport.aspx", "Marks Report");
        }
        catch
        {
        }
    }

    protected void Buttonmarks_Click(object sender, EventArgs e)
    {
        try
        {
            lblsemester.Text = lbl_semOrTerm.Text;
            bindsem();
            divMarks.Visible = true;
            lblsemester.Visible = true;
            UpdatePanel3.Visible = true;
            btnmarkgo.Visible = true;
            ddlExamType.Visible = true;
            //Buttonextmark_Click(sender, e);

        }
        catch
        {
        }
    }

    public void loadreason()
    {
        ds.Tables.Clear();
        string sql = "select MasterCode,MasterValue from CO_MasterValues where MasterCriteria='GRRea' and MasterValue<>'NULL'";
        ds = d2.select_method_wo_parameter(sql, "TEXT");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlgatepass.DataSource = ds;
            ddlgatepass.DataTextField = "MasterValue";
            ddlgatepass.DataValueField = "MasterCode";
            ddlgatepass.DataBind();
            ddlgatepass.Items.Insert(0, "Select");
        }
        else
        {
            ddlgatepass.Items.Insert(0, "Select");
        }
        ddlgatepass.Items.Insert(ddlgatepass.Items.Count, "Others");
    }

    public void bindsem()
    {
        try
        {
            //--------------------semester load
            DataSet ds3 = new DataSet();
            vehiclechecklist.Items.Clear();
            Boolean first_year;
            first_year = false;
            int duration = 0;
            int i = 0;
            string sqluery = "select distinct ndurations,first_year_nonsemester from ndegree where college_code=" + Session["college_code"].ToString() + " and degree_code=" + Session["degree_code"].ToString() + " and batch_year=" + lblyear.Text + " ";
            ds3 = d2.select_method_wo_parameter(sqluery, "text");
            if (ds3.Tables[0].Rows.Count > 0)
            {
                first_year = Convert.ToBoolean(ds3.Tables[0].Rows[0]["first_year_nonsemester"]);
                duration = Convert.ToInt16(ds3.Tables[0].Rows[0]["ndurations"]);
                for (i = 1; i <= duration; i++)
                {
                    if (first_year == false)
                    {
                        vehiclechecklist.Items.Add(i.ToString());
                    }
                    else if (first_year == true && i != 2)
                    {
                        vehiclechecklist.Items.Add(i.ToString());
                    }
                }
            }
            else
            {
                sqluery = "select distinct duration,first_year_nonsemester  from degree where degree_code=" + Session["degree_code"].ToString() + "  and college_code=" + Session["college_code"].ToString() + "";
                vehiclechecklist.Items.Clear();
                ds3 = d2.select_method_wo_parameter(sqluery, "text");
                if (ds3.Tables[0].Rows.Count > 0)
                {
                    first_year = Convert.ToBoolean(ds3.Tables[0].Rows[0]["first_year_nonsemester"]);
                    duration = Convert.ToInt16(ds3.Tables[0].Rows[0]["duration"]);
                    for (i = 1; i <= duration; i++)
                    {
                        if (first_year == false)
                        {
                            vehiclechecklist.Items.Add(i.ToString());
                        }
                        else if (first_year == true && i != 2)
                        {
                            vehiclechecklist.Items.Add(i.ToString());
                        }
                    }
                }
            }
        }
        catch
        {
        }
    }

    protected void btnxl_Click(object sender, EventArgs e)
    {
        try
        {
            string reportname = txtexcelname.Text;
            if (reportname.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpsmarks, reportname);
            }
            else
            {
                errmsg.Text = "Please Enter Your Report Name";
                errmsg.Visible = true;
                Fpsmarks.Visible = true;
                lblrptname.Visible = true;
                txtexcelname.Visible = true;
                btnxl.Visible = true;
                btnprintmaster.Visible = true;
            }
        }
        catch
        {
        }
    }

    public string GetNumberOridinalCartinal(string s)
    {
        int no = 0;
        string rst = string.Empty;
        bool re = int.TryParse(s, out no);
        if (no % 100 == 0)
            rst = no.ToString();
        if (no % 10 == 0)
            rst = no.ToString();
        else
        {
            int nn = no % 10;
            if (nn <= 9 && nn >= 1)
            {
                switch (nn)
                {
                    case 1:
                        rst = no.ToString() + "st";
                        break;
                    case 2:
                        rst = no.ToString() + "nd";
                        break;
                    case 3:
                        rst = no.ToString() + "rd";
                        break;
                    default:
                        rst = no.ToString() + "th";
                        break;
                }
            }
        }
        return rst;
    }

    public void BindReqby()
    {
        try
        {
            string[] reqname = { "Self" };
            for (int i = 0; i < 1; i++)
            {
                ddl_requestedbyk.Items.Add(new System.Web.UI.WebControls.ListItem(reqname[i], Convert.ToString(i + 1)));
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void btn_reqdelete_Click(object sender, EventArgs e)
    {
        string checkvalue = string.Empty;
        string activerow = string.Empty;
        int s = 0;
        for (int i = 0; i < Fpspread6.Sheets[0].RowCount; i++)
        {
            checkvalue = Convert.ToString(Fpspread6.Sheets[0].Cells[i, 1].Value);
            if (checkvalue == "1")
            {
                activerow = Fpspread6.ActiveSheetView.ActiveRow.ToString();
                string val = Convert.ToString(Fpspread6.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                string appstatus = d2.GetFunction("select ReqApproveStage from RQ_Requisition where RequisitionPK='" + val + "'");
                if (appstatus == "0")
                {
                    string del_query1 = "delete RQ_RequisitionDet where RequisitionFK=" + val + "";
                    s = d2.update_method_wo_parameter(del_query1, "Text");
                    string del_query = "delete RQ_Requisition where RequisitionPK='" + val + "'";
                    s = d2.update_method_wo_parameter(del_query, "Text");
                }
                else
                {
                    //imgdiv2.Visible = true;
                    lbl_errview.Text = "You Cannot Delete This Record";
                }
            }
        }
        if (s != 0)
        {
            //imgdiv2.Visible = true;
            lbl_errview.Text = "Deleted Successfully";
        }
        gate();
    }

    public void bindgridleave()
    {
        try
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("Month");
            dt.Columns.Add("allleave");
            dt.Columns.Add("grantleave");
            dt.Columns.Add("balleave");
            Hashtable monthlst = new Hashtable();
            monthlst.Clear();
            monthlst.Add(01, "January");
            monthlst.Add(02, "Feburary");
            monthlst.Add(03, "March");
            monthlst.Add(04, "April");
            monthlst.Add(05, "May");
            monthlst.Add(06, "June");
            monthlst.Add(07, "July");
            monthlst.Add(08, "August");
            monthlst.Add(09, "September");
            monthlst.Add(10, "October");
            monthlst.Add(11, "November");
            monthlst.Add(12, "December");
            DataRow dr = null;
            string activerow = string.Empty;
            string req_no = string.Empty;
            string alllev = string.Empty;
            string allotleave = d2.GetFunction("select HostelGatePassPerCount from HM_HostelMaster hm,HT_HostelRegistration hr where hm.HostelmasterPK=hr.HostelMasterFK and App_No='" + appno + "' and MemType='1'");
            if (allotleave.Trim() != "0")
            {
                alllev = allotleave;
            }
            else
            {
                alllev = "0";
            }
            for (int i = 1; i <= 12; i++)
            {
                dr = dt.NewRow();
                dr["month"] = Convert.ToString(monthlst[i]);
                dr["allleave"] = Convert.ToString(alllev);
                string val = Convert.ToString(i);
                if (val.Length == 1)
                {
                    val = "0" + val;
                }
                else
                {
                    val = Convert.ToString(i);
                }
                string selquery = "select ISNULL(HostelGatePassPerCount,0)-SUM(ISNULL(ReqAppStatus,0)) as Gatepasscount,SUM(ReqAppStatus) as Approvecount from HM_HostelMaster hm,HT_HostelRegistration hr,RQ_Requisition req where hm.HostelMasterPK=hr.HostelMasterFK and hr.APP_No=req.ReqAppNo and hr.MemType='1' and ReqAppStatus='1' and hr.APP_No='" + appno + "' and MONTH(RequestDate)=MONTH(GateReqEntryDate) and SUBSTRING(CONVERT(varchar(10), RequestDate, 105), 4, 2)='" + val + "' group by HostelGatePassPerCount";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selquery, "Text");
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        dr["grantleave"] = Convert.ToString(ds.Tables[0].Rows[0]["Approvecount"]);
                        dr["balleave"] = Convert.ToString(ds.Tables[0].Rows[0]["Gatepasscount"]);
                    }
                    else
                    {
                        dr["grantleave"] = 0;
                        dr["balleave"] = Convert.ToInt32(alllev) - Convert.ToInt32(dr["grantleave"]);
                    }
                }
                dt.Rows.Add(dr);
            }
            if (dt.Rows.Count > 0)
            {
                grdshow.DataSource = dt;
                grdshow.DataBind();
                grdshow.Visible = true;
                divright.Visible = true;
            }
        }
        catch
        {
        }
    }

    public object GetCorrespondingKey(object key, Hashtable hashTable)
    {
        IDictionaryEnumerator e = hashTable.GetEnumerator();
        while (e.MoveNext())
        {
            if (e.Key.ToString() == key.ToString())
            {
                return e.Value;
            }
        }
        return null;
    }

    #region Added for Revaluation Application Process

    //#region myvariables

    //DateTime tdydate = DateTime.Now;
    //DateTime dtxeroxdatestart;
    //DateTime dtxeroxdateend;
    //DateTime dtrevaldatestart;
    //DateTime dtrevaldateend;
    //string sqlqry = string.Empty;
    //String rollNo = string.Empty;
    //string Exammnthndyr = string.Empty;
    //string[] yrandmntharr;
    //string RevalXeroxdate = string.Empty;
    //string[] Xeroxarr;
    //string RevalDate = string.Empty;
    //string[] revalarr;
    //string appliedsubject = string.Empty;
    //string subjectno = string.Empty;

    //string exammnthndyr = string.Empty;
    //string exmmnth = string.Empty;
    //string exmyr = string.Empty;
    //string examcode = string.Empty;
    //string sqlinsert = string.Empty;
    //string sqlselect = string.Empty;
    //string sqlupdate = string.Empty;
    //string now=string.Empty;
    //string MaximumRevalSubjects = string.Empty;
    //short maxxeroxsub;
    //short maxrevalsub;
    //string MaximumXeroxSubjects = string.Empty;
    //Dictionary<int, string> dic = new Dictionary<int, string>();

    //#endregion

    //public void getvalues()  
    //{
    //    Exammnthndyr = dir.selectScalarString("select value from Master_Settings where settings='Revaluation Exam Year and Month'");
    //    yrandmntharr = Exammnthndyr.Split(',');//0- year ,1-month
    //    exmmnth = yrandmntharr[1];
    //    exmyr = yrandmntharr[0];

    //    RevalXeroxdate = dir.selectScalarString("select value from Master_Settings where settings='Revaluation XeroxDate'");
    //    Xeroxarr = RevalXeroxdate.Split('@');
    //    dtxeroxdatestart = DateTime.ParseExact(Xeroxarr[0].ToString().Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
    //    dtxeroxdateend = DateTime.ParseExact(Xeroxarr[1].ToString().Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture);

    //    RevalDate = dir.selectScalarString("select value from Master_Settings where settings='Revaluation Date'");
    //    revalarr = RevalDate.Split('@');
    //    dtrevaldatestart = DateTime.ParseExact(revalarr[0].ToString().Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture);
    //    dtrevaldateend = DateTime.ParseExact(revalarr[1].ToString().Trim(), "dd/MM/yyyy", CultureInfo.InvariantCulture);

    //    MaximumRevalSubjects = dir.selectScalarString("select value from Master_Settings where settings='Revaluation Maximum Reval Subjects'");
    //    Int16.TryParse(MaximumRevalSubjects, out maxrevalsub);

    //    MaximumXeroxSubjects = dir.selectScalarString("select value from Master_Settings where settings='Revaluation Maximum Xerox Subjects'");
    //    Int16.TryParse(MaximumXeroxSubjects, out maxxeroxsub);

    //    now = tdydate.ToShortDateString();

    //}

    //public void btnXeroxApplication_OnClick(object sender, EventArgs e)   
    //{
    //    getvalues();
    //    divgridXeroxApplication.Visible = true;
    //    btnXeroxSubmit.Visible = divgridXeroxApplication.Visible;

    //    btnRevalSubmit.Visible = false;
    //    divRevaluationApplication.Visible = btnRevalSubmit.Visible;
    //    try
    //    {
    //        rollNo = dir.selectScalarString("Select Roll_No from registration where app_no='" + appno + "'");

    //        sqlqry = "select sm.semester,isnull(s.subjectpriority,'0') as subjectpriority,subject_code,subject_name,s.subject_no,me.exam_code,ed.Exam_year,ed.Exam_Month from mark_entry me,subject s,Exam_Details ed,syllabus_master sm where ed.exam_code=me.exam_code and s.subject_no=me.subject_no and s.syll_code=sm.syll_code and sm.Batch_Year=ed.batch_year and ed.degree_code=sm.degree_code and external_mark>='0' and ed.Exam_Month='" + yrandmntharr[1] + "' and ed.Exam_year='" + yrandmntharr[0] + "' and roll_no='" + rollNo + "' order by subjectpriority,s.subject_no";//from security settings ( and ed.Exam_Month='4' and ed.Exam_year='2017')

    //        btnXeroxSubmit.Enabled = (tdydate >= dtxeroxdatestart && tdydate <= dtxeroxdateend) ? true : false;

    //        DataTable dtSubjectList = new DataTable();
    //        dtSubjectList = dir.selectDataTable(sqlqry);
    //        if (dtSubjectList.Rows.Count > 0)
    //        {
    //            gvdReval.DataSource = dtSubjectList;
    //            gvdReval.DataBind();
    //            lblAlertReval.Visible = false;
    //        }
    //    }
    //    catch { }
    //}

    //public void btnRevaluationApplication_OnClick(object sender, EventArgs e)   
    //{
    //    getvalues();
    //    lblRevalSubmitApplication.Visible = true;
    //    divgridXeroxApplication.Visible = false;
    //    btnXeroxSubmit.Visible = divgridXeroxApplication.Visible;
    //    lblRevalSubmitApplication.Visible = false;
    //    btnRevalSubmit.Visible = true;
    //    divRevaluationApplication.Visible = true;
    //    DataTable dsstudedetailrevalapply = new DataTable();
    //    try
    //    {
    //        String studdetailreval = "select rxa.examMonth,rxa.examYear,rxa.isApproved,rxa.subjectNo,s.subject_code,s.subject_name  from revaluationXeroxApplication rxa,subject s where s.subject_no=rxa.subjectNo and rxa.examMonth='" + exmmnth + "' and rxa.examYear='" + exmyr + "' and rxa.appNo='" + appno + "' order by s.subject_no "; 

    //        dsstudedetailrevalapply = dir.selectDataTable(studdetailreval);
    //        if (dsstudedetailrevalapply.Rows.Count > 0)
    //        {
    //            grdRevalApply.DataSource = dsstudedetailrevalapply;
    //            grdRevalApply.DataBind();
    //            divRevaluationApplication.Visible = true;
    //        }
    //        else
    //            btnRevalSubmit.Visible = false;

    //        btnRevalSubmit.Enabled = (tdydate >= dtrevaldatestart && tdydate <= dtrevaldateend) ? true : false;
    //    }
    //    catch { }
    //}

    //public void gvdReval_OnDataBinding(object sender, EventArgs e) //Xerox Grid  
    //{
    //    getvalues();
    //    DataTable applsub = new DataTable();
    //    appliedsubject = "select subjectNo from revaluationXeroxApplication where examMonth='" + exmmnth + "' and examYear='" + exmyr + "' and appNo='" + appno + "'";
    //    applsub = dir.selectDataTable(appliedsubject);
    //    int i = 0;
    //    dic.Clear();
    //    foreach (DataRow dr in applsub.Rows)
    //    {
    //        if (!dic.ContainsValue(Convert.ToString(dr["subjectNo"]).Trim()))
    //        {
    //            dic.Add(i, Convert.ToString(dr["subjectNo"]).Trim());
    //        }
    //        i++;
    //    }
    //    CheckBox cbgrd = new CheckBox();
    //    foreach (GridViewRow row in gvdReval.Rows)
    //    {
    //        string subjectno = ((Label)row.FindControl("lblgridSubjectNo")).Text.Trim();
    //        cbgrd = row.FindControl("gridcb") as CheckBox;
    //        if (dic.ContainsValue(subjectno))
    //        {
    //            cbgrd.Checked = true;
    //            cbgrd.Enabled = false;
    //        }
    //    }
    //}

    //protected void grdRevalApply_OnDataBinding(object sender, EventArgs e) //Revaluation Grid   
    //{
    //    getvalues();
    //    DataTable applsub = new DataTable();
    //    appliedsubject = "select subjectNo from revaluationXeroxApplication where examMonth='" + exmmnth + "' and examYear='" + exmyr + "' and appNo='" + appno + "' and isXeroxOrReval='1'";
    //    applsub = dir.selectDataTable(appliedsubject);
    //    dic.Clear();
    //    int i = 0;

    //    foreach (DataRow dr in applsub.Rows)
    //    {
    //        if (!dic.ContainsValue(Convert.ToString(dr["subjectNo"]).Trim()))
    //        {
    //            dic.Add(i, Convert.ToString(dr["subjectNo"]).Trim());
    //        }
    //        i++;
    //    }

    //    CheckBox cbgrdreval = new CheckBox();
    //    foreach (GridViewRow row in grdRevalApply.Rows)
    //    {
    //        string subjectno = ((Label)row.FindControl("lblgridsubjectnoreval")).Text.Trim();
    //        cbgrdreval = row.FindControl("gridcbreval") as CheckBox;
    //        if (dic.ContainsValue(subjectno))
    //        {
    //            cbgrdreval.Checked = true;
    //            cbgrdreval.Enabled = false;
    //        }
    //    }

    //}

    //public void btnXeroxSubmit_OnClick(object sender, EventArgs e)   
    //{
    //    getvalues();

    //    int selectedcount = 0;

    //    DataTable applsub = new DataTable();
    //    appliedsubject = "select subjectNo from revaluationXeroxApplication where examMonth='" + exmmnth + "' and examYear='" + exmyr + "' and appNo='" + appno + "' ";
    //    applsub = dir.selectDataTable(appliedsubject);
    //    int appl = applsub.Rows.Count;
    //    int i = 0;
    //    dic.Clear();
    //    foreach (DataRow dr in applsub.Rows)
    //    {
    //        if (!dic.ContainsValue(Convert.ToString(dr["subjectNo"]).Trim()))
    //        {
    //            dic.Add(i, Convert.ToString(dr["subjectNo"]).Trim());
    //        }
    //        i++;
    //    }

    //    foreach (GridViewRow row in gvdReval.Rows)
    //    {
    //        CheckBox cbgrd = row.FindControl("gridcb") as CheckBox;
    //        if (cbgrd.Checked)
    //        {
    //            selectedcount++;
    //        }
    //    }
    //    if (selectedcount <= maxxeroxsub)
    //        foreach (GridViewRow row in gvdReval.Rows)
    //        {
    //            CheckBox cbgrd = row.FindControl("gridcb") as CheckBox;
    //            if (cbgrd.Checked)
    //            {
    //                examcode = ((Label)row.FindControl("lblgridExamCode")).Text.Trim();
    //                string subjectno = ((Label)row.FindControl("lblgridSubjectNo")).Text.Trim();
    //                if (!dic.ContainsValue(subjectno))
    //                {
    //                    //query to be changed incase charges for Applying Xerox to be added
    //                    sqlinsert = "insert into revaluationXeroxApplication(examMonth ,examYear ,appNo,subjectNo,isApproved,isXeroxOrReval,applieddate) values ('" + exmmnth + "','" + exmyr + "','" + appno + "','" + subjectno + "','0','0','" + now + "')";   //hardcoded
    //                    sqlselect = "select subjectNo from revaluationXeroxApplication where examMonth='" + exmmnth + "' and examYear='" + exmyr + "' and appNo='" + appno + "' and subjectNo='" + subjectno + "'";
    //                    sqlupdate = "update revaluationXeroxApplication  set examMonth='" + exmmnth + "' , examYear='" + exmyr + "' , appNo='" + appno + "' , subjectNo='" + subjectno + "' where examMonth='" + exmmnth + "' and examYear='" + exmyr + "' and appNo='" + appno + "' ";
    //                    string sqlqry = "if exists(" + sqlselect + ") " + sqlupdate + " else " + sqlinsert + "";

    //                    int res = dir.insertData(sqlqry);
    //                    btnXeroxApplication_OnClick(sender, e);

    //                }
    //            }
    //        }
    //    else
    //    {
    //        lblAlertReval.Visible = true;
    //        lblAlertReval.Text = "Maximum Allowed Subject For Xerox Application Limit Exceeded";
    //        lblAlertReval.ForeColor = Color.Red;
    //    }
    //}

    //protected void btnRevalSubmit_OnClick(object sender, EventArgs e)   
    //{
    //    getvalues();
    //    DataTable dtsubjectdetails = new DataTable();
    //    aroll =dir.selectScalarString("select r.Roll_No from applyn a,Registration r  where r.App_No=a.app_no and DelFlag='0' and r.app_no='" + appno + "'");

    //    examcode = dir.selectScalarString("select distinct me.exam_code from mark_entry me,subject s,Exam_Details ed,syllabus_master sm where ed.exam_code=me.exam_code and s.subject_no=me.subject_no and s.syll_code=sm.syll_code and sm.Batch_Year=ed.batch_year and ed.degree_code=sm.degree_code and external_mark>='0' and ed.Exam_Month='" + exmmnth + "' and ed.Exam_year='" + exmyr + "' and roll_no='" + aroll + "'");

    //    DataTable applsub = new DataTable();
    //    appliedsubject = "select subjectNo from revaluationXeroxApplication where examMonth='" + exmmnth + "' and examYear='" + exmyr + "' and appNo='" + appno + "' and isXeroxOrReval='1'";
    //    applsub = dir.selectDataTable(appliedsubject);
    //    dic.Clear();
    //    int i = 0;
    //    int selectedcount = 0;
    //    foreach (DataRow dr in applsub.Rows)
    //    {
    //        if (!dic.ContainsValue(Convert.ToString(dr["subjectNo"]).Trim()))
    //        {
    //            dic.Add(i, Convert.ToString(dr["subjectNo"]).Trim());
    //        }
    //        i++;
    //    }

    //    foreach (GridViewRow row in grdRevalApply.Rows)
    //    {
    //        CheckBox cbgrd = row.FindControl("gridcbreval") as CheckBox;
    //        if (cbgrd.Checked)
    //        {
    //            selectedcount++;
    //        }
    //    }
    //    int delstudentappliedsubjects = dir.deleteData("delete  from revaluationXeroxApplication where examMonth='" + exmmnth + "' and examYear='" + exmyr + "' and appNo='" + appno + "' ");
    //    DateTime dtnow = DateTime.Now;
    //    if (selectedcount <= maxrevalsub)
    //    {
    //        foreach (GridViewRow row in grdRevalApply.Rows)
    //        {
    //            CheckBox cbgrd = row.FindControl("gridcbreval") as CheckBox;
    //            if (cbgrd.Checked)
    //            {
    //                string subjectno = ((Label)row.FindControl("lblgridsubjectnoreval")).Text.Trim();
    //                if (!dic.ContainsValue(subjectno))
    //                {
    //                    //query to be changed incase charges for Applying Revaluation to be added
    //                    sqlinsert = "insert into revaluationXeroxApplication(examMonth ,examYear ,appNo,subjectNo,isApproved,isXeroxOrReval,applieddate) values ('" + exmmnth + "','" + exmyr + "','" + appno + "','" + subjectno + "','0','1','"+now+"')";   //hardcoded
    //                    sqlselect = "select subjectNo from revaluationXeroxApplication where examMonth='" + exmmnth + "' and examYear='" + exmyr + "' and appNo='" + appno + "' and subjectNo='" + subjectno + "'";
    //                    sqlupdate = "update revaluationXeroxApplication  set examMonth='" + exmmnth + "' , examYear='" + exmyr + "' , appNo='" + appno + "' , subjectNo='" + subjectno + "',isXeroxOrReval='1' where examMonth='" + exmmnth + "' and examYear='" + exmyr + "' and appNo='" + appno + "' ";

    //                    int res = dir.insertData("if exists(" + sqlselect + ") " + sqlupdate + " else " + sqlinsert + "");

    //                    //if exists (select * from exam_application where roll_no ='315SW0490' and exam_code ='8931' and Exam_type ='2')update exam_application set applied_date ='10/20/2017 3:04:11 PM' where roll_no ='315SW0490' and exam_code ='8931' and Exam_type ='2' else insert into exam_application (roll_no,Exam_type,applied_date,total_fee,exam_code,extra_fee,fine,cost_appl,cost_mark,LastDate) values ('315SW0490','2','10/20/2017 3:04:11 PM',0,'8931',0,0,0,0,'10/20/2017 3:04:11 PM')

    //                    sqlselect = "select * from exam_application where roll_no ='" + aroll + "' and exam_code ='" + examcode + "' and Exam_type ='2'";
    //                    sqlupdate = "update exam_application set applied_date ='" + dtnow + "' where roll_no ='" + aroll + "' and exam_code ='" + examcode + "' and Exam_type ='2'";
    //                    sqlinsert = "insert into exam_application (roll_no,Exam_type,applied_date,total_fee,exam_code,extra_fee,fine,cost_appl,cost_mark,LastDate) values ('" + aroll + "','2','" + now + "',0,'" + examcode + "',0,0,0,0,'" + dtrevaldateend + "')";

    //                    res = dir.insertData("if exists(" + sqlselect + ") " + sqlupdate + " else " + sqlinsert + "");
    //                    if (res > 0)
    //                        grdRevalApply_OnDataBinding(sender, e);

    //                }
    //            }
    //        }
    //    }
    //    else
    //    {
    //        lblRevalSubmitApplication.Visible = true;
    //        lblRevalSubmitApplication.Text = "Maximum Allowed Subject For Revaluation Application Limit Exceeded";
    //        lblRevalSubmitApplication.ForeColor = Color.Red;
    //    }    
    //}

    #endregion



    public void attendance_status(object sender, EventArgs e)
    {

    }

    private void setLabelText()
    {
        string grouporusercode = string.Empty;
        if (Session["group_code"] != null && (Convert.ToString(Session["group_code"]).Trim() != "") && (Convert.ToString(Session["group_code"]).Trim() != "0") && (Convert.ToString(Session["group_code"]).Trim() != "-1"))
        {
            grouporusercode = " group_code=" + Convert.ToString(Session["group_code"]).Trim() + "";
        }
        else if (Session["usercode"] != null)
        {
            grouporusercode = " usercode=" + Convert.ToString(Session["usercode"]).Trim() + "";
        }
        List<Label> lbl = new List<Label>();
        List<byte> fields = new List<byte>();
        //lbl.Add(lblcollege);
        //lbl.Add(lbl_stuDegree);
        //lbl.Add(lbl_branchT);
        lbl.Add(lbl_semOrTerm);

        //fields.Add(0);
        // fields.Add(2);
        // fields.Add(3);
        fields.Add(4);
        //  lbl.Add(lbl_semT);
        // fields.Add(4);
        new HeaderLabelText().setLabels(grouporusercode, ref lbl, fields);
    }

    private byte checkSchoolSetting()
    {
        byte getVal = 0;
        byte.TryParse(Convert.ToString(d2.GetFunction("select  value from Master_Settings where settings='schoolorcollege' and usercode='" + usercode + "'")), out getVal);
        return getVal;
    }

    #region  Grade Display For School Modified By Prabha

    private bool CheckSchoolOrCollege(string appno)
    {
        bool isSchoolOrCollege = false;
        try
        {
            if (!string.IsNullOrEmpty(appno))
            {
                //qry = "select ISNULL(InstType,'0') as InstType,case when ISNULL(InstType,'0')='0' then 'College' when ISNULL(InstType,'0')='1' then 'School' end as CollegeOrSchool from collinfo where college_code='" + collegeCode + "'";
                string qry = "select ISNULL(InstType,'0') as InstType from collinfo a,registration r  where r.college_code=a.college_code and r.App_No='" + appno + "'";
                string insType = dirAcc.selectScalarString(qry).Trim();
                if (string.IsNullOrEmpty(insType) || insType.Trim() == "0")
                {
                    isSchoolOrCollege = false;
                }
                else if (!string.IsNullOrEmpty(insType) && insType.Trim() == "1")
                {
                    isSchoolOrCollege = true;
                }
                else
                {
                    isSchoolOrCollege = false;
                }
            }
            return isSchoolOrCollege;
        }
        catch (Exception ex)
        {
            //lblErrSearch.Text = Convert.ToString(ex);
            //lblErrSearch.Visible = true;
            //da.sendErrorMail(ex, ((Session["collegecode"] != null) ? Convert.ToString(Session["collegecode"]).Trim() : ((ddlCollege.Items.Count > 0) ? Convert.ToString(ddlCollege.SelectedValue).Trim() : "13")), Convert.ToString(System.IO.Path.GetFileName(Request.Url.AbsolutePath)).Trim());
            return false;
        }
    }

    private void SchoolFunction()
    {
        try
        {
            DataTable dtSubjectStrength = new DataTable();
            DataTable dtSubjectTotal = new DataTable();
            DataTable dtSubjectMaxMark = new DataTable();
            string TextCode = string.Empty;
            string TestName = string.Empty;
            string batchYear = string.Empty;
            string collegeCode = string.Empty;
            string degreeCode = string.Empty;
            string semester = string.Empty;
            string qry = string.Empty;

            string qrySem = string.Empty;
            for (int i = 0; i < vehiclechecklist.Items.Count; i++)
            {
                if (vehiclechecklist.Items[i].Selected == true)
                {
                    if (!string.IsNullOrEmpty(qrySem))
                    {
                        qrySem += ",'" + vehiclechecklist.Items[i].Value + "'";
                    }
                    else
                    {
                        qrySem = "'" + vehiclechecklist.Items[i].Value + "'";
                    }
                }
            }

            qry = " select distinct ci.Criteria_no,ci.criteria from CriteriaForInternal ci,syllabus_master sm,Exam_type e,Result re,Registration r where ci.syll_code=sm.syll_code and ci.Criteria_no=e.criteria_no and e.exam_code=re.exam_code and re.roll_no=r.Roll_No and r.Batch_Year=sm.Batch_Year and r.degree_code=sm.degree_code and sm.semester in(" + qrySem + ") and r.App_No='" + appno + "' order by ci.Criteria_no";


            DataTable dtCriteriaNo = new DataTable();

            dtCriteriaNo = dirAcc.selectDataTable(qry);

            TextCode = string.Empty;
            if (dtCriteriaNo.Rows.Count > 0)
            {
                //TextCode = dtCriteriaNo.AsEnumerable().Select(r => r.Field("").toList());

                List<Decimal> lstTextCode = dtCriteriaNo.AsEnumerable().Select(r => r.Field<Decimal>("Criteria_no")).ToList();
                TextCode = string.Join(",", lstTextCode.ToArray());
            }

            string GetValueQuery = "SELECT Count(re.roll_no) as Count,e.subject_no FROM CriteriaForInternal c,Exam_type e,Result re where c.Criteria_no=e.criteria_no and e.exam_code=re.exam_code  and c.criteria_no IN( " + TextCode + ") and marks_obtained >=0";

            string SecValueForStudent = dirAcc.selectScalarString("select Sections from Registration where App_No='" + appno + "'");
            if (!string.IsNullOrEmpty(TextCode))
            {
                if (String.IsNullOrEmpty(SecValueForStudent) || SecValueForStudent.Trim() == "")
                {
                    GetValueQuery += "  and e.sections ='" + SecValueForStudent + "' ";
                }
                GetValueQuery += " group by e.subject_no";

                GetValueQuery += " SELECT Max(re.marks_obtained) as Count,e.subject_no FROM CriteriaForInternal c,Exam_type e,Result re where c.Criteria_no=e.criteria_no and e.exam_code=re.exam_code and c.criteria_no IN ( " + TextCode + ") and marks_obtained >=0";
                if (String.IsNullOrEmpty(SecValueForStudent) || SecValueForStudent.Trim() == "")
                {
                    GetValueQuery += "  and e.sections ='" + SecValueForStudent + "' ";
                }
                GetValueQuery += " group by e.subject_no";
                GetValueQuery += " SELECT Sum(re.marks_obtained) as Count,e.subject_no FROM CriteriaForInternal c,Exam_type e,Result re where c.Criteria_no=e.criteria_no and e.exam_code=re.exam_code and c.criteria_no IN (" + TextCode + ") and marks_obtained >=0";
                if (String.IsNullOrEmpty(SecValueForStudent) || SecValueForStudent.Trim() == "")
                {
                    GetValueQuery += "  and e.sections ='" + SecValueForStudent + "' ";
                }
                GetValueQuery += " group by e.subject_no";

                ds.Clear();
                ds = da.select_method_wo_parameter(GetValueQuery, "Text");
            }
            DataTable studentinfo = dirAcc.selectDataTable("select Batch_Year,degree_code ,college_code,Branch_code,Current_Semester from Registration where App_No='" + appno + "'");
            if (studentinfo.Rows.Count > 0)
            {
                batchYear = Convert.ToString(studentinfo.Rows[0]["Batch_Year"]).Trim();
                collegeCode = Convert.ToString(studentinfo.Rows[0]["college_code"]).Trim();
                degreeCode = Convert.ToString(studentinfo.Rows[0]["degree_code"]).Trim();
                semester = Convert.ToString(studentinfo.Rows[0]["Current_Semester"]).Trim();
            }
            //testName = Convert.ToString(ddlTest.SelectedItem.Text).Trim();

            qry = "select gm.College_Code,gm.batch_year,gm.Degree_Code,ISNULL(gm.Semester,'0') as Semester,gm.Credit_Points,gm.Mark_Grade,gm.Frange,gm.Trange,LTRIM(RTRIM(ISNULL(gm.Criteria,''))) as Criteria,gm.classify,CONVERT(Varchar(50),gm.Frange)+' - '+CONVERT(Varchar(50),gm.Trange) as Ranges from Grade_Master gm where gm.batch_year='" + batchYear.Trim() + "' and gm.College_Code='" + collegeCode.Trim() + "' and gm.Degree_Code='" + degreeCode.Trim() + "' and ISNULL(gm.Semester,'0')='" + semester.Trim() + "' union select gm.College_Code,gm.batch_year,gm.Degree_Code,ISNULL(gm.Semester,'0') as Semester,gm.Credit_Points,gm.Mark_Grade,gm.Frange,gm.Trange,LTRIM(RTRIM(ISNULL(gm.Criteria,''))) as Criteria,gm.classify,CONVERT(Varchar(50),gm.Frange)+' - '+CONVERT(Varchar(50),gm.Trange) as Ranges from Grade_Master gm where gm.batch_year='" + batchYear.Trim() + "' and gm.College_Code='" + collegeCode.Trim() + "' and gm.Degree_Code='" + degreeCode.Trim() + "' and ISNULL(gm.Semester,'0')='0' order by gm.College_Code,gm.batch_year,gm.Degree_Code,gm.Semester,gm.Criteria,gm.Trange desc,gm.Frange desc";

            DataTable dtGradeDetails = dirAcc.selectDataTable(qry);
            DataTable dtGeneralGrade = new DataTable();
            if (dtGradeDetails.Rows.Count > 0)
            {
                dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batchYear + "' and College_Code='" + collegeCode + "' and Degree_Code='" + degreeCode + "' and Semester='" + semester + "' and Criteria='General'";
                dtGeneralGrade = dtGradeDetails.DefaultView.ToTable(true, "Mark_Grade", "Frange", "Trange", "Ranges");
            }
            if (dtGeneralGrade.Rows.Count == 0)
            {
                dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batchYear + "' and College_Code='" + collegeCode + "' and Degree_Code='" + degreeCode + "' and Semester='0' and Criteria='General'";
                dtGeneralGrade = dtGradeDetails.DefaultView.ToTable(true, "Mark_Grade", "Frange", "Trange", "Ranges");
            }
            if (dtGeneralGrade.Rows.Count == 0)
            {
                dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batchYear + "' and College_Code='" + collegeCode + "' and Degree_Code='" + degreeCode + "' and Semester='" + semester + "' and Criteria=''";
                dtGeneralGrade = dtGradeDetails.DefaultView.ToTable(true, "Mark_Grade", "Frange", "Trange", "Ranges");
            }
            if (dtGeneralGrade.Rows.Count == 0)
            {
                dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batchYear + "' and College_Code='" + collegeCode + "' and Degree_Code='" + degreeCode + "' and Semester='0' and Criteria=''";
                dtGeneralGrade = dtGradeDetails.DefaultView.ToTable(true, "Mark_Grade", "Frange", "Trange", "Ranges");
            }

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                dtSubjectStrength = ds.Tables[0].DefaultView.ToTable();
                dtSubjectTotal = ds.Tables[2].DefaultView.ToTable();
                dtSubjectMaxMark = ds.Tables[1].DefaultView.ToTable();



                StringBuilder SbHtml = new StringBuilder();
                string App_no = string.Empty;
                string StudName = string.Empty;
                string RollNo = string.Empty;
                string Section = string.Empty;
                bool check = false;
                bool checkNewCheck = false;
                bool SelectFalg = false;
                if (SecValueForStudent.Trim() == "" || String.IsNullOrEmpty(SecValueForStudent))
                {
                    Section = SecValueForStudent;
                }
                Fpsmarks.SaveChanges();
                DataTable DtRank = RankCalculation(TextCode);
                //for (int intFp = 1; intFp < Fpsmarks.Sheets[0].RowCount; intFp++)
                //{

                SelectFalg = true;

                DataTable studedetails = dirAcc.selectDataTable("select a.stud_name,r.Roll_No,r.App_No from Registration r,applyn a where r.App_No=a.app_no and  r.App_No='" + appno + "'");

                if (studedetails.Rows.Count > 0)
                {
                    App_no = Convert.ToString(studedetails.Rows[0]["App_No"]);
                    StudName = Convert.ToString(studedetails.Rows[0]["stud_name"]);
                    RollNo = Convert.ToString(studedetails.Rows[0]["Roll_No"]);

                    checkNewCheck = StudentMarkDetails1(App_no, SbHtml, TextCode, StudName, dtSubjectMaxMark, dtSubjectStrength, dtSubjectTotal, dtGradeDetails, DtRank, Section, RollNo.Trim());
                }
                if (checkNewCheck == true)
                {
                    check = true;
                }

                //}
                //if (SelectFalg && !check)
                //{
                //    divPopAlert.Visible = true;
                //    lblAlertMsg.Text = "Test Mark Not Entered";
                //}
                //else if (!SelectFalg)
                //{
                //    divPopAlert.Visible = true;
                //    lblAlertMsg.Text = "Please Select Any One Students";
                //}
            }
            else
            {
                //divPopAlert.Visible = true;
                //lblAlertMsg.Text = "Test Mark Not Entered";
            }

        }
        catch
        {

        }
    }

    public DataTable RankCalculation(string TestCode)
    {
        DataTable DtRank = new DataTable();
        try
        {
            DataTable dtStudent = new DataTable();
            DataView dvSubject = new DataView();
            StringBuilder AppNoAdd = new StringBuilder();
            DataTable dtSum = new DataTable();
            Dictionary<string, double> AddMarkDetails = new Dictionary<string, double>();
            Dictionary<string, double> AddMarkDetailsNEw = new Dictionary<string, double>();
            string TotalSTudentQuery = string.Empty;
            string Sections = string.Empty;
            string batchYear = string.Empty;
            string collegeCode = string.Empty;
            string degreeCode = string.Empty;
            string semester = string.Empty;

            string SecValueForStudent = dirAcc.selectScalarString("select Sections from Registration where App_No='" + appno + "'");

            DataTable studentinfo = dirAcc.selectDataTable("select Batch_Year degree_code ,college_code,Branch_code,Current_Semester from Registration where App_No='" + appno + "'");
            if (studentinfo.Rows.Count > 0)
            {
                batchYear = Convert.ToString(studentinfo.Rows[0]["Batch_Year"]).Trim();
                collegeCode = Convert.ToString(studentinfo.Rows[0]["college_code"]).Trim();
                degreeCode = Convert.ToString(studentinfo.Rows[0]["degree_code"]).Trim();
                semester = Convert.ToString(studentinfo.Rows[0]["Current_Semester"]).Trim();
            }


            if (SecValueForStudent.Trim() == "" || String.IsNullOrEmpty(SecValueForStudent))
            {
                Sections += "  and r.sections ='" + SecValueForStudent + "' ";
            }
            TotalSTudentQuery = "  select case when ISNULL(c.App_no,'')<>'' then c.App_no when ISNULL(s.App_no,'')<>'' then s.App_no end as App_no,ISNULL(c.totalSubject,'0')+ISNULL(s.totalSubject,'0') as totalSubject from (select  LTRIM(RTRIM(ISNULL(Convert(varchar(500),r.App_No),''))) App_no,Count(distinct sc.subject_no) totalSubject from subject s,sub_sem ss,syllabus_master sm,subjectChooser sc,Registration r  ,CriteriaForInternal c,Exam_type e  where e.subject_no=s.subject_no and c.criteria_no=c.criteria_no and c.syll_code=sm.syll_code and r.Roll_No=sc.roll_no and r.Batch_Year=sm.Batch_Year and sm.degree_code=r.degree_code and sm.semester=r.Current_Semester and s.syll_code=ss.syll_code and s.syll_code=sm.syll_code and ss.syll_code=sm.syll_code and ss.subType_no=s.subType_no and s.subject_no=sc.subject_no and sc.semester=sm.semester and ISNULL(ss.isSingleSubject,'0')=0 and sm.Batch_year='" + batchYear.Trim() + "' and sm.semester='" + semester.Trim() + "' and sm.degree_code='" + degreeCode.Trim() + "' and c.criteria_no IN (" + TestCode + ")  " + Sections + " /*and ss.promote_count=1*/ group by r.App_No) as c  full join (select LTRIM(RTRIM(ISNULL(Convert(varchar(500),r.App_No),''))) App_no,Count(distinct ss.subType_no) totalSubject from subject s,sub_sem ss,syllabus_master sm,subjectChooser sc,Registration r ,CriteriaForInternal c,Exam_type e  where e.subject_no=s.subject_no and c.criteria_no=c.criteria_no and c.syll_code=sm.syll_code and r.Roll_No=sc.roll_no and r.Batch_Year=sm.Batch_Year and sm.degree_code=r.degree_code and sm.semester=r.Current_Semester and s.syll_code=ss.syll_code and s.syll_code=sm.syll_code and ss.syll_code=sm.syll_code and ss.subType_no=s.subType_no and s.subject_no=sc.subject_no and sc.semester=sm.semester and ISNULL(ss.isSingleSubject,'0')=1 and sm.Batch_year='" + batchYear.Trim() + "' and sm.semester='" + semester.Trim() + "' and sm.degree_code='" + degreeCode.Trim() + "' and c.criteria_no IN (" + TestCode + ")  " + Sections + "  /*and ss.promote_count=1*/ group by r.App_No) as s on c.App_no=s.App_no order by s.App_No";

            TotalSTudentQuery += " SELECT r.App_no,r.Roll_no,r.college_Code,r.Reg_No,r.Batch_Year,r.degree_Code,r.current_semester,c.Criteria_no as TestNo,c.criteria as TestName,c.min_mark as TestMinMark,c.max_mark as TestMaxMark,s.subject_code,s.subject_name,s.subjectpriority,s.subject_no,s.min_int_marks as SubjectMinINT,s.max_int_marks as SubjectMaxINT,s.min_ext_marks as SubjectMinEXT,s.max_ext_marks as SubjectMaxEXT,s.mintotal as SubjectMinTotal,s.maxtotal as SubjectMaxTotal,e.exam_code,e.min_mark as ConductedMinMark,e.max_mark as ConductedMaxMark,CAST(ISNULL(CONVERT(VARCHAR(100),re.marks_obtained),'0') as float) as TestMark,CAST(ISNULL(CONVERT(VARCHAR(100),re.Retest_Marks_obtained),'0') as float) as RetestMark,marks_obtained,ss.subject_type,ss.subtype_no FROM CriteriaForInternal c,Exam_type e,Result re,registration r,syllabus_master sm,subject s ,sub_sem ss where ss.subType_no=s.subType_no and s.subject_no=e.subject_no and s.syll_code=sm.syll_code and s.syll_code=c.syll_code and sm.syll_code=c.syll_code and c.Criteria_no=e.criteria_no and e.exam_code=re.exam_code and r.Batch_Year=sm.Batch_Year and r.degree_Code=sm.degree_code and r.current_semester=sm.semester and r.Roll_no=re.roll_no and LTRIM(RTRIM(ISNULL(e.sections,'')))=LTRIM(RTRIM(ISNULL(r.sections,'')))  and c.criteria_no IN (" + TestCode + ")  and re.marks_obtained>= e.min_mark and ISNULL(ss.isSingleSubject,'0')='0'";
            //and re.marks_obtained>= e.min_mark
            if (SecValueForStudent.Trim() == "" || String.IsNullOrEmpty(SecValueForStudent))
            {
                TotalSTudentQuery += "  and e.sections ='" + SecValueForStudent.Trim() + "' ";
            }
            TotalSTudentQuery += " order by r.App_no,s.subject_code";
            TotalSTudentQuery += " SELECT r.App_no,r.Roll_no,r.college_Code,r.Reg_No,r.Batch_Year,r.degree_Code,r.current_semester,c.Criteria_no as TestNo,c.criteria as TestName,c.min_mark as TestMinMark,c.max_mark as TestMaxMark,s.subject_code,s.subject_name,s.subjectpriority,s.subject_no,s.min_int_marks as SubjectMinINT,s.max_int_marks as SubjectMaxINT,s.min_ext_marks as SubjectMinEXT,s.max_ext_marks as SubjectMaxEXT,s.mintotal as SubjectMinTotal,s.maxtotal as SubjectMaxTotal,e.exam_code,e.min_mark as ConductedMinMark,e.max_mark as ConductedMaxMark,CAST(ISNULL(CONVERT(VARCHAR(100),re.marks_obtained),'0') as float) as TestMark,CAST(ISNULL(CONVERT(VARCHAR(100),re.Retest_Marks_obtained),'0')  as float) as RetestMark,marks_obtained,ss.subject_type,ss.subtype_no FROM CriteriaForInternal c,Exam_type e,Result re,registration r,syllabus_master sm,subject s,sub_sem ss where ss.subType_no=s.subType_no and s.subject_no=e.subject_no and s.syll_code=sm.syll_code and s.syll_code=c.syll_code and sm.syll_code=c.syll_code and c.Criteria_no=e.criteria_no and e.exam_code=re.exam_code and r.Batch_Year=sm.Batch_Year and r.degree_Code=sm.degree_code and r.current_semester=sm.semester and r.Roll_no=re.roll_no and LTRIM(RTRIM(ISNULL(e.sections,'')))=LTRIM(RTRIM(ISNULL(r.sections,'')))  and c.criteria_no IN (" + TestCode + ")  and ISNULL(ss.isSingleSubject,'0')='1'";
            if (SecValueForStudent.Trim() == "" || String.IsNullOrEmpty(SecValueForStudent))
            {
                TotalSTudentQuery += "  and e.sections ='" + SecValueForStudent.Trim() + "'";
            }
            TotalSTudentQuery += " order by r.App_no,s.subject_code";
            ds.Clear();
            ds = da.select_method_wo_parameter(TotalSTudentQuery, "Text");
            DataView DvSubcount = new DataView();
            int TotalSubCunt = 0;
            int PassSubCount = 0;
            double TotalSubjectMark = 0;
            double TotalMaxSubjectMark = 0;
            double AvgMarkSubjectMark = 0;
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                for (int intSTno = 0; intSTno < ds.Tables[0].Rows.Count; intSTno++)
                {
                    string AppNo = Convert.ToString(ds.Tables[0].Rows[intSTno]["App_no"]);
                    string SubCount = Convert.ToString(ds.Tables[0].Rows[intSTno]["totalSubject"]);
                    PassSubCount = 0;
                    int.TryParse(SubCount, out TotalSubCunt);
                    if (TotalSubCunt > 0)
                    {
                        if (ds.Tables[1].Rows.Count > 0)
                        {
                            ds.Tables[1].DefaultView.RowFilter = "App_no='" + AppNo + "'";
                            DvSubcount = ds.Tables[1].DefaultView;
                            if (DvSubcount.Count > 0)
                            {
                                DataTable sumSubjectMark = DvSubcount.ToTable();
                                PassSubCount += DvSubcount.Count;
                                double.TryParse(Convert.ToString(sumSubjectMark.Compute("sum(TestMark)", "")), out TotalSubjectMark);
                                double.TryParse(Convert.ToString(sumSubjectMark.Compute("sum(ConductedMaxMark)", "")), out TotalMaxSubjectMark);
                            }
                        }
                        if (ds.Tables[2].Rows.Count > 0)
                        {
                            ds.Tables[2].DefaultView.RowFilter = "App_no='" + AppNo + "'";
                            DvSubcount = ds.Tables[2].DefaultView;
                            if (DvSubcount.Count > 0)
                            {
                                DataTable dtMultiSubject = DvSubcount.ToTable();
                                DataTable dtMultSubType = DvSubcount.ToTable(true, "subType_no", "subject_type");
                                if (dtMultSubType.Rows.Count > 0)
                                {
                                    for (int intM = 0; intM < dtMultSubType.Rows.Count; intM++)
                                    {
                                        dtMultiSubject.DefaultView.RowFilter = "subType_no='" + Convert.ToString(dtMultSubType.Rows[intM]["subType_no"]) + "'";
                                        DataTable dtSubjectSum = dtMultiSubject.DefaultView.ToTable();
                                        if (dtSubjectSum.Rows.Count > 0)
                                        {
                                            double subTypeMark = 0;
                                            double subTypeMax = 0;
                                            double subTypeMin = 0;
                                            double.TryParse(Convert.ToString(dtSubjectSum.Compute("sum(TestMark)", "TestMark>=0")), out subTypeMark);
                                            double.TryParse(Convert.ToString(dtSubjectSum.Compute("sum(ConductedMaxMark)", "")), out subTypeMax);
                                            double.TryParse(Convert.ToString(dtSubjectSum.Compute("sum(ConductedMinMark)", "")), out subTypeMin);
                                            if (subTypeMin <= subTypeMark)
                                            {
                                                PassSubCount += 1;
                                                TotalSubjectMark += subTypeMark;
                                                TotalMaxSubjectMark += subTypeMax;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (TotalSubCunt == PassSubCount)
                        {
                            double Percent = ((TotalSubjectMark / TotalSubCunt) * 100);
                            AddMarkDetails.Add(Convert.ToString(AppNo), TotalSubjectMark);
                            AddMarkDetailsNEw.Add(Convert.ToString(AppNo), Math.Round(Percent));
                        }
                    }
                }
                if (AddMarkDetails.Count > 0 && AddMarkDetailsNEw.Count > 0)
                {
                    CalculateRankByPercentage(AddMarkDetails, AddMarkDetailsNEw, ref DtRank, true);
                }
            }
        }
        catch
        {

        }
        return DtRank;
    }

    public void CalculateRankByPercentage(Dictionary<string, double> dicTotalMarks, Dictionary<string, double> dicTotalPercentage, ref DataTable dtRankList, bool rankOnePlus = false, byte forPercentageOrTotal = 0)
    {
        try
        {
            dicTotalPercentage = dicTotalPercentage.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
            dicTotalMarks = dicTotalMarks.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
            dtRankList = new DataTable();
            dtRankList.Clear();
            dtRankList.Columns.Add("AppNo");
            dtRankList.Columns.Add("Total");
            dtRankList.Columns.Add("Percentage");
            dtRankList.Columns.Add("Rank");
            dtRankList.Columns.Add("RankOnePlus");
            DataRow drRankList;
            int rank = 1;
            int rankOnePlusBy = 1;
            int actualRank = 0;
            double previousPercentage = 0;
            double previousTotal = 0;

            if (forPercentageOrTotal == 0)
            {
                foreach (KeyValuePair<string, double> keyPercentage in dicTotalPercentage)
                {
                    string keyAppNo = keyPercentage.Key.Trim();
                    double currentPercentage = keyPercentage.Value;
                    double totalMark = 0;
                    if (dicTotalMarks.ContainsKey(keyAppNo))
                    {
                        totalMark = dicTotalMarks[keyAppNo];
                    }
                    bool equalToPrevious = true;
                    if (previousPercentage != 0 && previousPercentage != currentPercentage)
                    {
                        if (rankOnePlus && actualRank != 0)
                        {
                            rankOnePlusBy = actualRank;
                        }
                        rank++;
                        rankOnePlusBy++;
                        equalToPrevious = false;
                    }
                    actualRank++;
                    previousPercentage = currentPercentage;
                    drRankList = dtRankList.NewRow();
                    drRankList["AppNo"] = keyAppNo;
                    drRankList["Total"] = totalMark;
                    drRankList["Percentage"] = currentPercentage;
                    drRankList["Rank"] = rank;
                    drRankList["RankOnePlus"] = rankOnePlusBy;
                    dtRankList.Rows.Add(drRankList);
                }
            }
            else
            {
                foreach (KeyValuePair<string, double> keyTotal in dicTotalMarks)
                {
                    string keyAppNo = keyTotal.Key.Trim();
                    double currentPercentage = 0;
                    double totalMark = keyTotal.Value;
                    if (dicTotalPercentage.ContainsKey(keyAppNo))
                    {
                        currentPercentage = dicTotalPercentage[keyAppNo];

                        bool equalToPrevious = true;
                        if (previousTotal != 0 && previousTotal != totalMark)
                        {
                            if (rankOnePlus && actualRank != 0)
                            {
                                rankOnePlusBy = actualRank;
                            }
                            rank++;
                            rankOnePlusBy++;
                            equalToPrevious = false;
                        }
                        actualRank++;
                        previousTotal = totalMark;
                        drRankList = dtRankList.NewRow();
                        drRankList["AppNo"] = keyAppNo;
                        drRankList["Total"] = totalMark;
                        drRankList["Percentage"] = currentPercentage;
                        drRankList["Rank"] = rank;
                        drRankList["RankOnePlus"] = rankOnePlusBy;
                        dtRankList.Rows.Add(drRankList);
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public bool StudentMarkDetails1(string App_no, StringBuilder SbHtml, string TestCode1, string Studname, DataTable dtSubjectMaxMark, DataTable dtSubjectStrength, DataTable dtSubjectTotal, DataTable dtGradeDetails, DataTable DtRank, string Section, string RollNo)
    {
        bool ConditionFlag = false;
        try
        {
            string convertionCAMMArk = "100";
            DataTable dtStudentCAMMark = new DataTable();
            dtStudentCAMMark.Columns.Add("subjectNo");
            dtStudentCAMMark.Columns.Add("subjectName");
            dtStudentCAMMark.Columns.Add("testNo");
            dtStudentCAMMark.Columns.Add("testName");
            dtStudentCAMMark.Columns.Add("mark");
            dtStudentCAMMark.Columns.Add("Grade");

            string batchYear = string.Empty;
            string collegeCode = string.Empty;
            string degreeCode = string.Empty;
            string semester = string.Empty;
            string qrySection = string.Empty;
            string qry = string.Empty;

            string SecValueForStudent = dirAcc.selectScalarString("select Sections from Registration where App_No='" + appno + "'");

            DataTable studentinfo = dirAcc.selectDataTable("select Batch_Year, degree_code ,college_code,Branch_code,Current_Semester from Registration where App_No='" + appno + "'");
            if (studentinfo.Rows.Count > 0)
            {
                batchYear = Convert.ToString(studentinfo.Rows[0]["Batch_Year"]).Trim();
                collegeCode = Convert.ToString(studentinfo.Rows[0]["college_code"]).Trim();
                degreeCode = Convert.ToString(studentinfo.Rows[0]["degree_code"]).Trim();
                semester = Convert.ToString(studentinfo.Rows[0]["Current_Semester"]).Trim();
            }

            DataView dvsubstrength = new DataView();
            DataView dvsubMax = new DataView();
            DataView dvsubTotal = new DataView();
            DataTable dtSingleSubject = new DataTable();
            DataTable dtMultiSubject = new DataTable();
            DataTable dtSubjectPriority = new DataTable();
            double subStrenth = 0;
            double SubMax = 0;
            double subTotal = 0;
            double subjectMark = 0;
            double ConvertionOutofMark = 0;
            double SubjectMaxMark = 0;
            double convertionSubjectMaxMArk = 0;

            double ConvertMark = 0;
            double convertAvarageMark = 0;
            double ConverhighestMark = 0;

            int rovalue = 0;

            double TotalSecureMark = 0;
            double TotalMaxMark = 0;
            string Acrdemicyear = da.GetFunction("select value from master_settings where settings='Academic year'");
            string[] split = Acrdemicyear.Split(',');
            string Acr = da.GetFunction("select acr from collinfo where college_code ='" + collegeCode + "'");

            string Query = "SELECT r.App_no,r.Roll_no,r.college_Code,r.Reg_No,r.Batch_Year,r.degree_Code,r.current_semester,sm.semester,c.Criteria_no as TestNo,c.criteria as TestName,c.min_mark as TestMinMark,c.max_mark as TestMaxMark,s.subject_code,s.subject_name,s.subjectpriority,s.subject_no,s.min_int_marks as SubjectMinINT,s.max_int_marks as SubjectMaxINT,s.min_ext_marks as SubjectMinEXT,s.max_ext_marks as SubjectMaxEXT,s.mintotal as SubjectMinTotal,s.maxtotal as SubjectMaxTotal,e.exam_code,e.min_mark as ConductedMinMark,e.max_mark as ConductedMaxMark,ISNULL(CONVERT(VARCHAR(100),re.marks_obtained),'') as TestMark,ISNULL(CONVERT(VARCHAR(100),re.Retest_Marks_obtained),'') as RetestMark,ISNULL(ss.isSingleSubject,'0') as isSingleSubject,ss.subject_type,ss.subType_no FROM CriteriaForInternal c,Exam_type e,Result re,registration r,syllabus_master sm,subject s,sub_sem ss where ss.subType_no=s.subType_no and s.subject_no=e.subject_no and s.syll_code=sm.syll_code and s.syll_code=c.syll_code and sm.syll_code=c.syll_code and c.Criteria_no=e.criteria_no and e.exam_code=re.exam_code and r.Batch_Year=sm.Batch_Year and r.degree_Code=sm.degree_code and r.current_semester=sm.semester and r.Roll_no=re.roll_no and LTRIM(RTRIM(ISNULL(e.sections,'')))=LTRIM(RTRIM(ISNULL(r.sections,''))) and r.App_no='" + App_no + "' and c.criteria_no IN(" + TestCode1 + ")   order by r.App_no,s.subjectpriority,s.subject_code";
            ds.Clear();
            ds = da.select_method_wo_parameter(Query, "Text");
            if (SecValueForStudent.Trim() != "" && string.IsNullOrEmpty(SecValueForStudent))//saran
            {
                if (!string.IsNullOrEmpty(SecValueForStudent.Trim()) && SecValueForStudent.Trim().ToLower() != "all" && SecValueForStudent.Trim().ToLower() != "-1")
                {
                    qrySection = "  and LTRIM(RTRIM(ISNULL(e.sections,'')))='" + SecValueForStudent.Trim() + "'";
                }
            }

            DataTable dtSubSubjectMarkList = new DataTable();
            DataTable dtSubSubjectMarkDetails = new DataTable();
            string qry2 = "select distinct s.subjectId, s.subSubjectName,su.subject_no,ss.subType_no,ss.isSingleSubject,ss.subject_type,criteria_no as TestNo from subsubjectTestDetails s,subSubjectWiseMarkEntry sm,Exam_type e,subject su,sub_sem ss  where s.subjectId=sm.subjectId and s.examCode=e.exam_code and su.syll_code=ss.syll_code and ss.subType_no=su.subType_no and su.subject_no=e.subject_no and criteria_no IN (" + TestCode1 + ")  " + qrySection;
            dtSubSubjectMarkList = dirAcc.selectDataTable(qry2);

            qry2 = "select distinct s.subjectId,s.subSubjectName,s.maxMark,s.minMark,ss.subType_no,ss.isSingleSubject,ss.subject_type,su.subject_no,e.criteria_no,sm.appNo,sm.testMark,ISNULL(sm.ReTestMark,'0') as ReTestMark,sm.remarks,criteria_no as TestNo from subsubjectTestDetails s,subSubjectWiseMarkEntry sm,Exam_type e,subject su,sub_sem ss  where s.subjectId=sm.subjectId and s.examCode=e.exam_code and su.syll_code=ss.syll_code and ss.subType_no=su.subType_no and su.subject_no=e.subject_no and sm.appNo='" + App_no + "' and e.criteria_no IN (" + TestCode1 + ") " + qrySection;
            dtSubSubjectMarkDetails = dirAcc.selectDataTable(qry2);

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                string batch = Convert.ToString(ds.Tables[0].Rows[0]["Batch_Year"]).Trim();
                string college = Convert.ToString(ds.Tables[0].Rows[0]["college_code"]).Trim();
                string degree = Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]).Trim();
                string sems = Convert.ToString(ds.Tables[0].Rows[0]["semester"]).Trim();

                string[] testNo = TestCode1.Split(',');

                foreach (string TestCode in testNo)
                {
                    string testNames = Convert.ToString(ds.Tables[0].Rows[0]["TestName"]).Trim();
                    string testNos = Convert.ToString(ds.Tables[0].Rows[0]["TestNo"]).Trim();

                    ds.Tables[0].DefaultView.RowFilter = "TestNo='" + TestCode + "'";
                    DataView dvTestName = ds.Tables[0].DefaultView;
                    if (dvTestName.Count > 0)
                    {
                        testNames = Convert.ToString(dvTestName[0]["TestName"]).Trim();
                        testNos = Convert.ToString(dvTestName[0]["TestNo"]).Trim();
                    }



                    ds.Tables[0].DefaultView.RowFilter = "isSingleSubject='False' and TestNo='" + TestCode + "'";
                    dtSingleSubject = ds.Tables[0].DefaultView.ToTable();
                    dtSubjectPriority = ds.Tables[0].DefaultView.ToTable(true, "subjectpriority", "subject_no");

                    ds.Tables[0].DefaultView.RowFilter = "isSingleSubject='True'  and TestNo='" + TestCode + "'";
                    dtMultiSubject = ds.Tables[0].DefaultView.ToTable();



                    //string TestCode = string.Empty;
                    DataRow dr;
                    DataView DvSubTypeSubject = new DataView();
                    DataTable dtSubjectType = dtMultiSubject.DefaultView.ToTable(true, "subject_Type", "SubType_no");
                    if (dtSubjectType.Rows.Count > 0)
                    {
                        for (int intST = 0; intST < dtSubjectType.Rows.Count; intST++)
                        {
                            dtMultiSubject.DefaultView.RowFilter = "SubType_no='" + Convert.ToString(dtSubjectType.Rows[intST]["SubType_no"]) + "'";
                            DvSubTypeSubject = dtMultiSubject.DefaultView;
                            DvSubTypeSubject.Sort = "subjectpriority asc";
                            if (DvSubTypeSubject.Count > 0)
                            {
                                dr = dtSubjectPriority.NewRow();
                                dr[0] = Convert.ToString(DvSubTypeSubject[0]["subjectpriority"]);
                                dr[1] = Convert.ToString(DvSubTypeSubject[0]["SubType_no"]);
                                dtSubjectPriority.Rows.Add(dr);
                            }
                        }
                    }
                    DvSubTypeSubject = dtSubjectPriority.DefaultView;
                    DvSubTypeSubject.Sort = "subjectpriority asc";
                    dtSubjectPriority = DvSubTypeSubject.ToTable();
                    ConditionFlag = true;

                    #region I Page

                    SbHtml.Append("<div style='height:845px; width: 655px; border:1px solid black; margin:0px; margin-left: 5px;page-break-after: always;'>");

                    #endregion

                    #region Header



                    #endregion

                    #region Student Details


                    #endregion

                    #region Subject Details

                    string OutofMark = Convert.ToString(convertionCAMMArk);
                    double.TryParse(OutofMark, out ConvertionOutofMark);


                    if (OutofMark.Trim() != "" && OutofMark.Trim() != "0")
                    {
                        SbHtml.Append("<td>");
                        SbHtml.Append("<span>Mark (Out of " + OutofMark + ")</span>");
                        SbHtml.Append("</td>");
                    }
                    else
                    {
                        SbHtml.Append("<td>");
                        SbHtml.Append("<span>Mark</span>");
                        SbHtml.Append("</td>");
                    }

                    DataView DvSubjectOrder = new DataView();
                    if (dtSubjectPriority.Rows.Count > 0)
                    {
                        for (int intPri = 0; intPri < dtSubjectPriority.Rows.Count; intPri++)
                        {
                            string Priority = Convert.ToString(dtSubjectPriority.Rows[intPri]["subjectpriority"]);
                            string subjectNo = Convert.ToString(dtSubjectPriority.Rows[intPri]["subject_no"]);
                            dtSingleSubject.DefaultView.RowFilter = "subject_no='" + subjectNo.ToString() + "' and subjectpriority='" + Priority.ToString() + "'";
                            DvSubjectOrder = dtSingleSubject.DefaultView;
                            string displayGrade = string.Empty;
                            if (DvSubjectOrder.Count > 0)
                            {
                                string SubjectNo = Convert.ToString(DvSubjectOrder[0]["subject_no"]);
                                string Mark = Convert.ToString(DvSubjectOrder[0]["TestMark"]);
                                double.TryParse(Mark, out subjectMark);
                                string SubTestMaxMark = Convert.ToString(DvSubjectOrder[0]["ConductedMaxMark"]);
                                double.TryParse(SubTestMaxMark, out SubjectMaxMark);
                                dtSubjectStrength.DefaultView.RowFilter = "subject_no ='" + SubjectNo + "'";
                                dvsubstrength = dtSubjectStrength.DefaultView;
                                if (dvsubstrength.Count > 0)
                                {
                                    double.TryParse(Convert.ToString(dvsubstrength[0]["count"]), out subStrenth);
                                }
                                dtSubjectMaxMark.DefaultView.RowFilter = "subject_no ='" + SubjectNo + "'";
                                dvsubMax = dtSubjectMaxMark.DefaultView;
                                if (dvsubMax.Count > 0)
                                {
                                    double.TryParse(Convert.ToString(dvsubMax[0]["count"]), out SubMax);
                                }
                                dtSubjectTotal.DefaultView.RowFilter = "subject_no ='" + SubjectNo + "'";
                                dvsubTotal = dtSubjectTotal.DefaultView;
                                if (dvsubstrength.Count > 0)
                                {
                                    double.TryParse(Convert.ToString(dvsubTotal[0]["count"]), out subTotal);
                                }
                                double outof100 = subjectMark;
                                if (subjectMark >= 0 && SubjectMaxMark > 0)
                                    outof100 = Math.Round((subjectMark / SubjectMaxMark) * 100, 0, MidpointRounding.AwayFromZero);
                                if (ConvertionOutofMark != 0)
                                {
                                    ConvertMark = Math.Round((subjectMark / SubjectMaxMark) * ConvertionOutofMark, 0, MidpointRounding.AwayFromZero);
                                    //ConvertMark = (subjectMark / SubjectMaxMark) * ConvertionOutofMark;
                                    ConverhighestMark = (SubMax / SubjectMaxMark) * ConvertionOutofMark;
                                    convertAvarageMark = ((subTotal / subStrenth) / SubjectMaxMark) * ConvertionOutofMark;
                                    convertionSubjectMaxMArk = ConvertionOutofMark;
                                }
                                else
                                {
                                    ConverhighestMark = SubMax;
                                    convertAvarageMark = (subTotal / subStrenth);
                                    ConvertMark = Math.Round(subjectMark, 0, MidpointRounding.AwayFromZero);
                                    convertionSubjectMaxMArk = SubjectMaxMark;
                                }
                                string displayMark = Convert.ToString(Math.Round(ConvertMark)).Trim();
                                if (subjectMark < 0)
                                {
                                    displayMark = getMarkText(Convert.ToString(subjectMark).Trim());
                                }
                                else
                                    TotalSecureMark += ConvertMark;
                                TotalMaxMark += convertionSubjectMaxMArk;

                                DataView dvGrade = new DataView();
                                if (dtGradeDetails.Rows.Count > 0)
                                {
                                    dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='" + sems + "' and Criteria='" + testNames.Trim() + "' and Frange<='" + ConvertMark + "' and Trange>='" + ConvertMark + "'";
                                    dvGrade = dtGradeDetails.DefaultView;
                                    if (dvGrade.Count == 0)
                                    {
                                        dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='0' and Criteria='" + testNames.Trim() + "' and Frange<='" + ConvertMark + "' and Trange>='" + ConvertMark + "'";
                                        dvGrade = dtGradeDetails.DefaultView;
                                    }
                                    if (dvGrade.Count == 0)
                                    {
                                        dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='" + sems + "' and Frange<='" + outof100 + "' and Trange>='" + outof100 + "'";
                                        dvGrade = dtGradeDetails.DefaultView;
                                    }
                                    if (dvGrade.Count == 0)
                                    {
                                        dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='0' and Frange<='" + outof100 + "' and Trange>='" + outof100 + "'";
                                        dvGrade = dtGradeDetails.DefaultView;
                                    }
                                }
                                if (dvGrade.Count > 0)
                                {
                                    displayGrade = Convert.ToString(dvGrade[0]["Mark_Grade"]).Trim();
                                }

                                dtSubSubjectMarkList.DefaultView.RowFilter = "subject_no='" + SubjectNo + "' and isSingleSubject='false' and TestNo='" + TestCode + "'";

                                DataTable dtSubSubjectName = dtSubSubjectMarkList.DefaultView.ToTable(true, "subSubjectName", "subjectId");
                                if (dtSubSubjectName.Rows.Count > 0)
                                {
                                    //SbHtml.Append("<tr>");
                                    //SbHtml.Append("<td rowspan='" + dtSubSubjectName.Rows.Count + "'>");
                                    //SbHtml.Append("<span>" + Convert.ToString(DvSubjectOrder[0]["Subject_name"]) + "</span>");

                                    //SbHtml.Append("</td>");
                                    int rowSub = 0;
                                    foreach (DataRow drSubSubject in dtSubSubjectName.Rows)
                                    {
                                        string subSubjectName = Convert.ToString(drSubSubject["subSubjectName"]).Trim();
                                        string subSubjectId = Convert.ToString(drSubSubject["subjectId"]).Trim();

                                        dtSubSubjectMarkDetails.DefaultView.RowFilter = "subjectId='" + subSubjectId + "' and isSingleSubject='false' and TestNo='" + TestCode + "'";
                                        DataView dvSubSubjectMark = new DataView();
                                        dvSubSubjectMark = dtSubSubjectMarkDetails.DefaultView;
                                        if (rowSub != 0)
                                        {
                                            SbHtml.Append("<tr>");
                                        }
                                        SbHtml.Append("<td>");
                                        SbHtml.Append("<span>" + subSubjectName + "</span>");

                                        SbHtml.Append("</td>");
                                        if (dvSubSubjectMark.Count > 0)
                                        {
                                            //s.subjectId, s.subSubjectName,s.maxMark,s.minMark,subject_no,e.criteria_no,sm.appNo,sm.testMark,sm.ReTestMark,sm.remarks
                                            string testMark = Convert.ToString(dvSubSubjectMark[0]["testMark"]).Trim();
                                            string testMinMark = Convert.ToString(dvSubSubjectMark[0]["minMark"]).Trim();
                                            string testMaxMark = Convert.ToString(dvSubSubjectMark[0]["maxMark"]).Trim();
                                            string reTestMark = Convert.ToString(dvSubSubjectMark[0]["ReTestMark"]).Trim();

                                            double testMarks = 0;
                                            double testMinMarks = 0;
                                            double testMaxMarks = 0;
                                            double reTestMarks = 0;

                                            double.TryParse(testMark, out testMarks);
                                            double.TryParse(testMinMark, out testMinMarks);
                                            double.TryParse(testMaxMark, out testMaxMarks);
                                            double.TryParse(reTestMark, out reTestMarks);

                                            double subSubjectOutOf100 = 0;
                                            displayMark = testMark;
                                            if (testMarks < 0)
                                            {
                                                displayMark = getMarkText(Convert.ToString(testMarks).Trim());
                                            }
                                            if (testMaxMarks > 0 && testMarks > 0)
                                            {
                                                subSubjectOutOf100 = (testMarks / testMaxMarks) * 100;
                                            }
                                            subSubjectOutOf100 = Math.Round(subSubjectOutOf100, 0, MidpointRounding.AwayFromZero);

                                            dvGrade = new DataView();
                                            if (dtGradeDetails.Rows.Count > 0)
                                            {
                                                dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='" + sems + "' and Criteria='" + testNames.Trim() + "' and Frange<='" + subSubjectOutOf100 + "' and Trange>='" + ConvertMark + "'";
                                                dvGrade = dtGradeDetails.DefaultView;
                                                if (dvGrade.Count == 0)
                                                {
                                                    dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='0' and Criteria='" + testNames.Trim() + "' and Frange<='" + subSubjectOutOf100 + "' and Trange>='" + ConvertMark + "'";
                                                    dvGrade = dtGradeDetails.DefaultView;
                                                }
                                                if (dvGrade.Count == 0)
                                                {
                                                    dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='" + sems + "' and Frange<='" + subSubjectOutOf100 + "' and Trange>='" + subSubjectOutOf100 + "'";
                                                    dvGrade = dtGradeDetails.DefaultView;
                                                }
                                                if (dvGrade.Count == 0)
                                                {
                                                    dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='0' and Frange<='" + subSubjectOutOf100 + "' and Trange>='" + subSubjectOutOf100 + "'";
                                                    dvGrade = dtGradeDetails.DefaultView;
                                                }
                                            }
                                            if (dvGrade.Count > 0)
                                            {
                                                displayGrade = Convert.ToString(dvGrade[0]["Mark_Grade"]).Trim();
                                            }
                                            SbHtml.Append("<td style='text-align:center;'>");
                                            SbHtml.Append("<span>" + displayMark + "</span>");
                                            SbHtml.Append("</td>");

                                            SbHtml.Append("<td style='text-align:center;'>");
                                            SbHtml.Append("<span>" + displayGrade + "</span>");
                                            SbHtml.Append("</td>");
                                        }
                                        if (rowSub == 0)
                                        {
                                            SbHtml.Append("<td rowspan='" + dtSubSubjectName.Rows.Count + "' style='text-align:center;'>");
                                            SbHtml.Append("<span>" + Math.Round(convertAvarageMark) + "</span>");
                                            SbHtml.Append("</td>");

                                            SbHtml.Append("<td rowspan='" + dtSubSubjectName.Rows.Count + "' style='text-align:center;'>");
                                            SbHtml.Append("<span>" + Math.Round(ConverhighestMark) + "</span>");
                                            SbHtml.Append("</td>");
                                            SbHtml.Append("</tr>");
                                        }
                                        else
                                        {
                                            SbHtml.Append("</tr>");
                                        }
                                        rowSub++;
                                    }
                                }
                                else
                                {
                                    SbHtml.Append("<tr>");
                                    SbHtml.Append("<td colspan='2'>");
                                    SbHtml.Append("<span>" + Convert.ToString(DvSubjectOrder[0]["Subject_name"]) + "</span>");
                                    SbHtml.Append("</td>");

                                    SbHtml.Append("<td style='text-align:center;'>");
                                    SbHtml.Append("<span>" + displayMark + "</span>");
                                    SbHtml.Append("</td>");

                                    SbHtml.Append("<td style='text-align:center;'>");
                                    SbHtml.Append("<span>" + displayGrade + "</span>");
                                    SbHtml.Append("</td>");
                                }

                                DataRow drnew = dtStudentCAMMark.NewRow();
                                drnew["subjectNo"] = Convert.ToString(subjectNo);
                                drnew["subjectName"] = Convert.ToString(DvSubjectOrder[0]["Subject_name"]);
                                drnew["testNo"] = testNos;
                                drnew["testName"] = testNames;
                                drnew["mark"] = displayMark;
                                drnew["Grade"] = displayGrade;
                                dtStudentCAMMark.Rows.Add(drnew);
                                rovalue++;
                            }
                            else
                            {
                                dtMultiSubject.DefaultView.RowFilter = "SubType_no='" + Convert.ToString(subjectNo) + "' ";
                                DvSubTypeSubject = dtMultiSubject.DefaultView;
                                StringBuilder SbSubject = new StringBuilder();
                                if (DvSubTypeSubject.Count > 0)
                                {
                                    for (int intDvSub = 0; intDvSub < DvSubTypeSubject.Count; intDvSub++)
                                    {
                                        SbSubject.Append(Convert.ToString(DvSubTypeSubject[intDvSub]["subject_no"]) + ",");
                                    }
                                    if (SbSubject.Length > 0)
                                    {
                                        SbSubject.Remove(SbSubject.Length - 1, 1);
                                    }
                                    string GetQuery = " SELECT sum(e.Max_Mark) as MaxMark FROM CriteriaForInternal c,Exam_type e where c.Criteria_no=e.criteria_no and c.criteria_no IN (" + TestCode + ")  and e.subject_no in (" + SbSubject + ")";
                                    if (Section.Trim() != "")
                                    {
                                        GetQuery += "  and e.sections ='" + Section + "' ";
                                    }
                                    string MaxMark = da.GetFunction(GetQuery);
                                    double Max = 0;
                                    double.TryParse(MaxMark, out  Max);
                                    double convert = 0;
                                    if (convertionCAMMArk.Trim() != "" && convertionCAMMArk.Trim() != "0")
                                    {
                                        double.TryParse(Convert.ToString(convertionCAMMArk), out convert);
                                    }
                                    if (convert == 0)
                                    {
                                        convert = Max;
                                    }
                                    string GetValueQuery = " SELECT round((sum(re.marks_obtained)/" + Max + " )*" + convert + ",0) as Count,re.roll_no FROM CriteriaForInternal c,Exam_type e,Result re where c.Criteria_no=e.criteria_no and e.exam_code=re.exam_code and c.criteria_no IN (" + TestCode + ")  and marks_obtained >=0 and e.subject_no in (" + SbSubject + ")";
                                    if (Section.Trim() != "")
                                    {
                                        GetValueQuery += "  and e.sections ='" + Section + "' ";
                                    }
                                    GetValueQuery += " group by re.roll_no order by sum(re.marks_obtained) desc";
                                    DataSet dsmulti = da.select_method_wo_parameter(GetValueQuery, "Text");

                                    qry = "SELECT SUM(e.max_mark) as MaxMark FROM CriteriaForInternal c,Exam_type e,subject s where s.subject_no=e.subject_no and s.syll_code=c.syll_code and c.Criteria_no=e.criteria_no and c.criteria_no IN (" + TestCode + ")  and s.subType_no='" + Convert.ToString(subjectNo) + "'" + ((Section.Trim() != "") ? "  and e.sections ='" + Section + "' " : "") + " group by s.subType_no";
                                    double subjectTypeMaxMark = dirAcc.selectScalarDouble(qry);
                                    double MaxSubjectMark = 0;
                                    double MinSubjectMark = 0;
                                    double SumSubjectMark = 0;

                                    double AvgMark = 0;
                                    ConvertMark = 0;
                                    if (dsmulti.Tables.Count > 0 && dsmulti.Tables[0].Rows.Count > 0)
                                    {
                                        dsmulti.Tables[0].DefaultView.RowFilter = "roll_no='" + RollNo + "'";
                                        DataView dvSubMark = dsmulti.Tables[0].DefaultView;
                                        if (dvSubMark.Count > 0)
                                        {
                                            double.TryParse(Convert.ToString(dvSubMark[0]["Count"]), out  ConvertMark);
                                        }
                                        double.TryParse(Convert.ToString(dsmulti.Tables[0].Rows[0][0]), out MaxSubjectMark);
                                        double.TryParse(Convert.ToString(dsmulti.Tables[0].Rows[dsmulti.Tables[0].Rows.Count - 1][0]), out MinSubjectMark);
                                        double.TryParse(Convert.ToString(dsmulti.Tables[0].Compute("sum(Count)", "")), out SumSubjectMark);
                                        AvgMark = (SumSubjectMark / dsmulti.Tables[0].Rows.Count);
                                    }
                                    double outof100 = ConvertMark;
                                    if (convert == 0)
                                    {
                                        if (ConvertMark >= 0 && subjectTypeMaxMark > 0)
                                            outof100 = Math.Round((ConvertMark / subjectTypeMaxMark) * 100, 0, MidpointRounding.AwayFromZero);
                                    }

                                    DataView dvGrade = new DataView();
                                    if (dtGradeDetails.Rows.Count > 0)
                                    {
                                        dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='" + sems + "' and Criteria='" + testNames.Trim() + "' and Frange<='" + ConvertMark + "' and Trange>='" + ConvertMark + "'";
                                        dvGrade = dtGradeDetails.DefaultView;
                                        if (dvGrade.Count == 0)
                                        {
                                            dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='0' and Criteria='" + testNames.Trim() + "' and Frange<='" + ConvertMark + "' and Trange>='" + ConvertMark + "'";
                                            dvGrade = dtGradeDetails.DefaultView;
                                        }
                                        if (dvGrade.Count == 0)
                                        {
                                            dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='" + sems + "' and Frange<='" + outof100 + "' and Trange>='" + outof100 + "'";
                                            dvGrade = dtGradeDetails.DefaultView;
                                        }
                                        if (dvGrade.Count == 0)
                                        {
                                            dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='0' and Frange<='" + outof100 + "' and Trange>='" + outof100 + "'";
                                            dvGrade = dtGradeDetails.DefaultView;
                                        }
                                    }
                                    if (dvGrade.Count > 0)
                                    {
                                        displayGrade = Convert.ToString(dvGrade[0]["Mark_Grade"]).Trim();
                                    }
                                    string displayMark = Convert.ToString(ConvertMark).Trim();
                                    if (ConvertMark < 0)
                                    {
                                        displayMark = getMarkText(Convert.ToString(ConvertMark).Trim());
                                    }
                                    dtSubSubjectMarkList.DefaultView.RowFilter = "SubType_no='" + Convert.ToString(subjectNo) + "' and isSingleSubject='true'";

                                    DataTable dtSubSubjectName = dtSubSubjectMarkList.DefaultView.ToTable(true, "subSubjectName");
                                    if (dtSubSubjectName.Rows.Count > 0)
                                    {
                                        SbHtml.Append("<tr>");
                                        SbHtml.Append("<td rowspan='" + dtSubSubjectName.Rows.Count + "'>");
                                        SbHtml.Append("<span>" + Convert.ToString(DvSubTypeSubject[0]["subject_Type"]) + "</span>");
                                        SbHtml.Append("</td>");
                                        int rowSub = 0;
                                        foreach (DataRow drSubSubject in dtSubSubjectName.Rows)
                                        {
                                            string subSubjectName = Convert.ToString(drSubSubject["subSubjectName"]).Trim();
                                            //string subSubjectId = Convert.ToString(drSubSubject["subjectId"]).Trim();

                                            dtSubSubjectMarkDetails.DefaultView.RowFilter = "subSubjectName='" + Convert.ToString(drSubSubject["subSubjectName"]).Trim() + "' and SubType_no='" + Convert.ToString(subjectNo).Trim() + "' and isSingleSubject='true' and TestNo='" + TestCode + "'";
                                            DataView dvSubSubjectMark = new DataView();
                                            dvSubSubjectMark = dtSubSubjectMarkDetails.DefaultView;
                                            if (rowSub != 0)
                                            {
                                                SbHtml.Append("<tr>");
                                            }
                                            SbHtml.Append("<td>");
                                            SbHtml.Append("<span>" + subSubjectName + "</span>");

                                            SbHtml.Append("</td>");
                                            if (dvSubSubjectMark.Count > 0)
                                            {
                                                //s.subjectId, s.subSubjectName,s.maxMark,s.minMark,subject_no,e.criteria_no,sm.appNo,sm.testMark,sm.ReTestMark,sm.remarks
                                                object testMark = dvSubSubjectMark.ToTable().Compute("SUM(testMark)", "testMark>=0 and subSubjectName='" + Convert.ToString(drSubSubject["subSubjectName"]).Trim() + "' and SubType_no='" + Convert.ToString(subjectNo).Trim() + "' and isSingleSubject='true'  and TestNo='" + TestCode + "'"); //Convert.ToString(dvSubSubjectMark[0]["testMark"]).Trim();
                                                object testMinMark = dvSubSubjectMark.ToTable().Compute("SUM(minMark)", "minMark>=0 and subSubjectName='" + Convert.ToString(drSubSubject["subSubjectName"]).Trim() + "' and SubType_no='" + Convert.ToString(subjectNo).Trim() + "' and isSingleSubject='true'  and TestNo='" + TestCode + "'"); //Convert.ToString(dvSubSubjectMark[0]["minMark"]).Trim();
                                                object testMaxMark = dvSubSubjectMark.ToTable().Compute("SUM(maxMark)", "maxMark>=0 and subSubjectName='" + Convert.ToString(drSubSubject["subSubjectName"]).Trim() + "' and SubType_no='" + Convert.ToString(subjectNo).Trim() + "' and isSingleSubject='true' and TestNo='" + TestCode + "'"); //Convert.ToString(dvSubSubjectMark[0]["maxMark"]).Trim();
                                                object reTestMark = dvSubSubjectMark.ToTable().Compute("SUM(ReTestMark)", "ReTestMark>=0 and subSubjectName='" + Convert.ToString(drSubSubject["subSubjectName"]).Trim() + "' and SubType_no='" + Convert.ToString(subjectNo).Trim() + "' and isSingleSubject='true' and TestNo='" + TestCode + "'"); //Convert.ToString(dvSubSubjectMark[0]["ReTestMark"]).Trim();

                                                double testMarks = 0;
                                                double testMinMarks = 0;
                                                double testMaxMarks = 0;
                                                double reTestMarks = 0;

                                                double.TryParse(Convert.ToString(testMark).Trim(), out testMarks);
                                                double.TryParse(Convert.ToString(testMinMark).Trim(), out testMinMarks);
                                                double.TryParse(Convert.ToString(testMaxMark).Trim(), out testMaxMarks);
                                                double.TryParse(Convert.ToString(reTestMark).Trim(), out reTestMarks);

                                                double subSubjectOutOf100 = 0;
                                                displayMark = Convert.ToString(testMark).Trim();
                                                if (testMarks < 0)
                                                {
                                                    displayMark = getMarkText(Convert.ToString(testMarks).Trim());
                                                }
                                                if (testMaxMarks > 0 && testMarks > 0)
                                                {
                                                    subSubjectOutOf100 = (testMarks / testMaxMarks) * 100;
                                                }
                                                subSubjectOutOf100 = Math.Round(subSubjectOutOf100, 0, MidpointRounding.AwayFromZero);

                                                dvGrade = new DataView();
                                                if (dtGradeDetails.Rows.Count > 0)
                                                {
                                                    dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='" + sems + "' and Criteria='" + testNames.Trim() + "' and Frange<='" + subSubjectOutOf100 + "' and Trange>='" + ConvertMark + "'";
                                                    dvGrade = dtGradeDetails.DefaultView;
                                                    if (dvGrade.Count == 0)
                                                    {
                                                        dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='0' and Criteria='" + testNames.Trim() + "' and Frange<='" + subSubjectOutOf100 + "' and Trange>='" + ConvertMark + "'";
                                                        dvGrade = dtGradeDetails.DefaultView;
                                                    }
                                                    if (dvGrade.Count == 0)
                                                    {
                                                        dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='" + sems + "' and Frange<='" + subSubjectOutOf100 + "' and Trange>='" + subSubjectOutOf100 + "'";
                                                        dvGrade = dtGradeDetails.DefaultView;
                                                    }
                                                    if (dvGrade.Count == 0)
                                                    {
                                                        dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and College_Code='" + college + "' and Degree_Code='" + degree + "' and Semester='0' and Frange<='" + subSubjectOutOf100 + "' and Trange>='" + subSubjectOutOf100 + "'";
                                                        dvGrade = dtGradeDetails.DefaultView;
                                                    }
                                                }
                                                if (dvGrade.Count > 0)
                                                {
                                                    displayGrade = Convert.ToString(dvGrade[0]["Mark_Grade"]).Trim();
                                                }
                                                SbHtml.Append("<td style='text-align:center;'>");
                                                SbHtml.Append("<span>" + displayMark + "</span>");
                                                SbHtml.Append("</td>");

                                                SbHtml.Append("<td style='text-align:center;'>");
                                                SbHtml.Append("<span>" + displayGrade + "</span>");
                                                SbHtml.Append("</td>");
                                            }
                                            else
                                            {
                                                SbHtml.Append("<td style='text-align:center;'>");
                                                SbHtml.Append("<span>" + displayMark + "</span>");
                                                SbHtml.Append("</td>");

                                                SbHtml.Append("<td style='text-align:center;'>");
                                                SbHtml.Append("<span>" + displayGrade + "</span>");
                                                SbHtml.Append("</td>");
                                            }
                                            if (rowSub == 0)
                                            {
                                                SbHtml.Append("<td rowspan='" + dtSubSubjectName.Rows.Count + "' style='text-align:center;'>");
                                                SbHtml.Append("<span>" + Math.Round(convertAvarageMark) + "</span>");
                                                SbHtml.Append("</td>");

                                                SbHtml.Append("<td rowspan='" + dtSubSubjectName.Rows.Count + "' style='text-align:center;'>");
                                                SbHtml.Append("<span>" + Math.Round(ConverhighestMark) + "</span>");
                                                SbHtml.Append("</td>");
                                                SbHtml.Append("</tr>");
                                            }
                                            else
                                            {
                                                SbHtml.Append("</tr>");
                                            }
                                            rowSub++;
                                        }
                                    }
                                    else
                                    {

                                        SbHtml.Append("<tr>");
                                        SbHtml.Append("<td colspan='2'>");
                                        SbHtml.Append("<span>" + Convert.ToString(DvSubTypeSubject[0]["subject_Type"]) + "</span>");
                                        SbHtml.Append("</td>");

                                        SbHtml.Append("<td style='text-align:center;'>");
                                        SbHtml.Append("<span>" + displayMark + "</span>");
                                        SbHtml.Append("</td>");

                                        SbHtml.Append("<td style='text-align:center;'>");
                                        SbHtml.Append("<span>" + displayGrade + "</span>");
                                        SbHtml.Append("</td>");

                                        SbHtml.Append("<td style='text-align:center;'>");
                                        SbHtml.Append("<span>" + Math.Round(AvgMark) + "</span>");
                                        SbHtml.Append("</td>");

                                        SbHtml.Append("<td style='text-align:center;'>");
                                        SbHtml.Append("<span>" + Math.Round(MaxSubjectMark) + "</span>");
                                        SbHtml.Append("</td>");

                                        SbHtml.Append("</tr>");
                                    }
                                    if (ConvertMark >= 0)
                                        TotalSecureMark += ConvertMark;
                                    TotalMaxMark += convert;


                                    DataRow drnew = dtStudentCAMMark.NewRow();
                                    drnew["subjectNo"] = Convert.ToString(subjectNo);
                                    drnew["subjectName"] = Convert.ToString(DvSubTypeSubject[0]["subject_Type"]);
                                    drnew["testNo"] = testNos;
                                    drnew["testName"] = testNames;
                                    drnew["mark"] = displayMark;
                                    drnew["Grade"] = displayGrade;
                                    dtStudentCAMMark.Rows.Add(drnew);
                                    rovalue++;
                                }
                            }
                        }
                    }
                }
                int j = dtStudentCAMMark.Rows.Count;
                    #endregion
                if (dtStudentCAMMark.Rows.Count > 0)
                {
                    DataTable dtDistinctSubjectName = new DataTable();
                    DataTable dtDistinctTestName = new DataTable();

                    dtDistinctSubjectName = dtStudentCAMMark.DefaultView.ToTable(true, "subjectNo", "subjectName");
                    dtDistinctTestName = dtStudentCAMMark.DefaultView.ToTable(true, "testNo", "testName");

                    Fpsmarks.Sheets[0].ColumnCount = 1;
                    Fpsmarks.Sheets[0].RowCount = 0;
                    Fpsmarks.ColumnHeader.Visible = true;
                    Fpsmarks.RowHeader.Visible = false;
                    Fpsmarks.ActiveSheetView.GridLines = GridLines.Both;
                    Fpsmarks.TitleInfo.Text = "Student Result";
                    Fpsmarks.CommandBar.Visible = false;
                    Fpsmarks.Sheets[0].DefaultColumnWidth = 30;
                    Fpsmarks.Sheets[0].DefaultRowHeight = 20;
                    Fpsmarks.TitleInfo.Visible = true;
                    Fpsmarks.Sheets[0].AutoPostBack = true;
                    Fpsmarks.TitleInfo.Font.Size = FontUnit.Large;
                    Fpsmarks.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                    Fpsmarks.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
                    Fpsmarks.Columns[0].HorizontalAlign = HorizontalAlign.Center;
                    Fpsmarks.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Left;
                    Fpsmarks.Sheets[0].Columns[0].Locked = true;
                    //Fpsmarks.Sheets[0].Columns[1].VerticalAlign = VerticalAlign.Middle;
                    //Fpsmarks.Sheets[0].Columns[2].VerticalAlign = VerticalAlign.Middle;
                    Fpsmarks.ColumnHeader.RowCount = 2;
                    Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 0].Text = "Subject Name";
                    Fpsmarks.Sheets[0].ColumnHeaderSpanModel.Add(0, 0, 2, 1);
                    Fpsmarks.Columns[0].Width = 200;
                    Fpsmarks.Columns[0].HorizontalAlign = HorizontalAlign.Center;
                    //Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Mark";
                    //Fpsmarks.Columns[1].Width = 100;
                    //Fpsmarks.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Grade";
                    //Fpsmarks.Columns[2].Width = 100;



                    int ivalue = 0;
                    for (int sub = 0; sub < dtDistinctSubjectName.Rows.Count; sub++)
                    {
                        string subjectCode = Convert.ToString(dtDistinctSubjectName.Rows[sub]["subjectNo"]).Trim();
                        string subjectName = Convert.ToString(dtDistinctSubjectName.Rows[sub]["subjectName"]).Trim();
                        int columnValue = 0;
                        for (int test = 0; test < dtDistinctTestName.Rows.Count; test++)
                        {
                            string testNoN = Convert.ToString(dtDistinctTestName.Rows[test]["testNo"]).Trim();
                            string testName = Convert.ToString(dtDistinctTestName.Rows[test]["testName"]).Trim();

                            dtStudentCAMMark.DefaultView.RowFilter = "testNo='" + testNoN + "' and subjectNo='" + subjectCode + "'";
                            DataView dvSubjectMark = new DataView();
                            dvSubjectMark = dtStudentCAMMark.DefaultView;
                            if (sub == 0)
                            {
                                //Fpsmarks.Sheets[0].RowCount++;
                                Fpsmarks.Sheets[0].ColumnCount += 2;
                                Fpsmarks.Sheets[0].ColumnHeader.Cells[0, Fpsmarks.Sheets[0].ColumnCount - 2].Text = testName;
                                Fpsmarks.Sheets[0].Columns[Fpsmarks.Sheets[0].ColumnCount - 2].HorizontalAlign = HorizontalAlign.Left;
                                Fpsmarks.Sheets[0].Columns[Fpsmarks.Sheets[0].ColumnCount - 2].VerticalAlign = VerticalAlign.Middle;
                                Fpsmarks.Sheets[0].Columns[Fpsmarks.Sheets[0].ColumnCount - 2].Locked = true;
                                Fpsmarks.Sheets[0].ColumnHeaderSpanModel.Add(0, Fpsmarks.Sheets[0].ColumnCount - 2, 1, 2);


                                Fpsmarks.Sheets[0].ColumnHeader.Cells[1, Fpsmarks.Sheets[0].ColumnCount - 2].Text = "Mark";
                                Fpsmarks.Sheets[0].Columns[Fpsmarks.Sheets[0].ColumnCount - 2].HorizontalAlign = HorizontalAlign.Left;
                                Fpsmarks.Sheets[0].Columns[Fpsmarks.Sheets[0].ColumnCount - 2].VerticalAlign = VerticalAlign.Middle;
                                Fpsmarks.Sheets[0].Columns[Fpsmarks.Sheets[0].ColumnCount - 2].Locked = true;
                                //Fpsmarks.Sheets[0].ColumnHeaderSpanModel.Add(0, Fpsmarks.Sheets[0].ColumnCount - 2, 1, 2);

                                Fpsmarks.Sheets[0].ColumnHeader.Cells[1, Fpsmarks.Sheets[0].ColumnCount - 1].Text = "Grade";
                                Fpsmarks.Sheets[0].Columns[Fpsmarks.Sheets[0].ColumnCount - 2].HorizontalAlign = HorizontalAlign.Left;
                                Fpsmarks.Sheets[0].Columns[Fpsmarks.Sheets[0].ColumnCount - 2].VerticalAlign = VerticalAlign.Middle;
                                Fpsmarks.Sheets[0].Columns[Fpsmarks.Sheets[0].ColumnCount - 2].Locked = true;

                            }
                            else
                            {
                                //columnValue = 1;
                            }
                            if (test == 0)
                            {
                                Fpsmarks.Sheets[0].RowCount++;
                            }
                            Fpsmarks.Sheets[0].Cells[sub, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[sub, 0].VerticalAlign = VerticalAlign.Top;
                            Fpsmarks.Sheets[0].Cells[sub, 0].Font.Size = FontUnit.Medium;
                            Fpsmarks.Sheets[0].Cells[sub, 0].Font.Name = "Book Antiqua";

                            Fpsmarks.Sheets[0].Cells[sub, test + 1 + columnValue].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[sub, test + 1 + columnValue].VerticalAlign = VerticalAlign.Top;
                            Fpsmarks.Sheets[0].Cells[sub, test + 1 + columnValue].Font.Size = FontUnit.Medium;
                            Fpsmarks.Sheets[0].Cells[sub, test + 1 + columnValue].Font.Name = "Book Antiqua";

                            Fpsmarks.Sheets[0].Cells[sub, test + 2 + columnValue].HorizontalAlign = HorizontalAlign.Center;
                            Fpsmarks.Sheets[0].Cells[sub, test + 2 + columnValue].VerticalAlign = VerticalAlign.Top;
                            Fpsmarks.Sheets[0].Cells[sub, test + 2 + columnValue].Font.Size = FontUnit.Medium;
                            Fpsmarks.Sheets[0].Cells[sub, test + 2 + columnValue].Font.Name = "Book Antiqua";
                            if (dvSubjectMark.Count > 0)
                            {
                                Fpsmarks.Sheets[0].Cells[sub, 0].Text = Convert.ToString(dvSubjectMark[0]["subjectName"]);
                                Fpsmarks.Sheets[0].Cells[sub, test + 1 + columnValue].Text = Convert.ToString(dvSubjectMark[0]["mark"]);
                                Fpsmarks.Sheets[0].Cells[sub, test + 2 + columnValue].Text = Convert.ToString(dvSubjectMark[0]["Grade"]);
                            }
                            else
                            {
                                Fpsmarks.Sheets[0].Cells[sub, 0].Text = Convert.ToString(subjectName);
                                Fpsmarks.Sheets[0].Cells[sub, test + 1 + columnValue].Text = Convert.ToString("--");
                                Fpsmarks.Sheets[0].Cells[sub, test + 2 + columnValue].Text = Convert.ToString("--");
                            }
                            columnValue++;
                        }
                    }

                    Fpsmarks.Sheets[0].PageSize = Fpsmarks.Sheets[0].RowCount;
                    Fpsmarks.SaveChanges();
                }

            }
        }
        catch
        {

        }
        return ConditionFlag;

    }

    private string getMarkText(string mark)
    {
        try
        {
            mark = mark.Trim().ToLower();
            switch (mark)
            {
                case "-1":
                    mark = "AAA";
                    break;
                case "-2":
                    mark = "EL";
                    break;
                case "-3":
                    mark = "EOD";
                    break;
                case "-4":
                    mark = "ML";
                    break;
                case "-5":
                    mark = "SOD";
                    break;
                case "-6":
                    mark = "NSS";
                    break;
                case "-7":
                    mark = "NJ";
                    break;
                case "-8":
                    mark = "S";
                    break;
                case "-9":
                    mark = "L";
                    break;
                case "-10":
                    mark = "NCC";
                    break;
                case "-11":
                    mark = "HS";
                    break;
                case "-12":
                    mark = "PP";
                    break;
                case "-13":
                    mark = "SYOD";
                    break;
                case "-14":
                    mark = "COD";
                    break;
                case "-15":
                    mark = "OOD";
                    break;
                case "-16":
                    mark = "OD";
                    break;
                case "-17":
                    mark = "LA";
                    break;
                case "-18":
                    mark = "RAA";
                    break;
            }
        }
        catch
        {
        }
        return mark;
    }

    #endregion


    private DataTable getHolidayDates(string semStart, string semEnd, string degcode)
    {
        DataTable dtHolidayDates = new DataTable();
        try
        {
            dtHolidayDates = idirAcc.selectDataTable("Select distinct convert(varchar(10),holiday_date,101) as Hday,holiday_desc,degree_code,isnull(halforfull,'0') as halforfull,isnull(morning,'0') as morning,isnull(evening,'0') as evening from holidaystudents where holiday_date between '" + semStart + "' and '" + semEnd + "' and degree_code in (" + degcode + ")");
        }
        catch { dtHolidayDates.Clear(); }
        return dtHolidayDates;
    }

    #region added by Deepali on  March 19 2018
    private bool feeStatusSettings()
    {
        try
        {
            string value = d2.GetFunction("select value from Master_Settings where settings = 'ExcludeUnpaidStudents'");
            if (value == "1")
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            //d2.sendErrorMail(ex, collegecode, "NewSecuritySettings");
            return false;
        }
    }

    private bool checkFeeStatus(string sem)
    {

        try
        {
            double balance = 0.00;
            string feeCat = d2.GetFunction("select TextCode from textvaltable where textcriteria='feeca' and TextVal='" + (sem + " Semester") + "' and college_code='" + collegecode1 + "' ");
            Double.TryParse(d2.GetFunction("select sum(BalAmount)Balance from ft_feeallot where app_no='" + appno + "' and feeCategory='" + feeCat + "' "), out balance);

            if (balance == 0.00)
                return true;
            else
                return false;
        }
        catch (Exception ex)
        {

            //d2.sendErrorMail(ex, collegecode, "NewSecuritySettings");
            return false;
        }
    }
    #endregion
}
