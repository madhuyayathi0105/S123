using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Configuration;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using Gios.Pdf;
using System.IO;
using System.Net;
using System.Net.Mail;
using System.Text;

public partial class Commom_Selection_Process : System.Web.UI.Page
{
    ReuasableMethods reuse = new ReuasableMethods();
    DataSet ds = new DataSet();
    DataSet ds1 = new DataSet();
    DAccess2 dt = new DAccess2();
    DAccess2 d2 = new DAccess2();
    DataSet ddummy = new DataSet();
    Hashtable hat = new Hashtable();
    static string college_code = "";
    string user_code = "";
    static int spvl = 0;
    static int spsearch = 0;
    int fg = 6;
    string textcode = "";
    bool orderflage = false;
    bool checkvalue_flage = false;
    bool managementflage = false;
    bool savechange = false;
    static string formatevalue = "";
    static string admisionvalue = "";
    string usercode = string.Empty;
    static bool recptset = false;
    static bool editableRights = false;
    SqlConnection con = new SqlConnection(ConfigurationManager.AppSettings["con"]);
    static string appnovalueacr = "";
    static string eqltohsc = "";
    ReuasableMethods rs = new ReuasableMethods();
    protected void Page_Load(object sender, EventArgs e)
    {
        user_code = Session["usercode"].ToString();
        usercode = Session["usercode"].ToString();
        // college_code = Session["collegecode"].ToString();
        lblmg.Visible = false;
        lblmg1.Visible = false;
        lblmg2.Visible = false;
        lblmg3.Visible = false;
        // Div2.Visible = false;
        panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display:none;");
        if (!IsPostBack)
        {
            txtrowcount.Text = "50";
            setLabelText();
            formatevalue = "";
            applicationPdfFormateRights();
            btnFeeUpdate.Visible = false;
            lblstudmsg.Visible = false;
            BindCollege();
            if (ddl_collegename.Items.Count > 0)
            {
                college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
            }

            poperrjs.Visible = false;
            bindbatch();
            loadreligion();
            loadcommunity();
            txt_curdate.Text = DateTime.Now.ToString("dd/MM/yyyy");

            string set = "select CONVERT(VARCHAR(2),DATEPART(DAY, fromdate))+'/'+ CONVERT(VARCHAR(2),DATEPART(MONTH, fromdate)) +'/'+ CONVERT(VARCHAR(4),DATEPART(YEAR, fromdate))as fromdate,CONVERT(VARCHAR(2),DATEPART(DAY, todate))+'/'+ CONVERT(VARCHAR(2),DATEPART(MONTH, todate)) +'/'+ CONVERT(VARCHAR(4),DATEPART(YEAR, todate))as todate from setting_application where type_College='DAY' and Edu_level='UG' and college_code='13' and setting_type='Apply Settings'";
            ds = dt.select_method_wo_parameter(set, "text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                TextBox2.Text = ds.Tables[0].Rows[0]["fromdate"].ToString();
                TextBox2.Attributes.Add("readonly", "readonly");
                TextBox3.Text = ds.Tables[0].Rows[0]["todate"].ToString();
                TextBox3.Attributes.Add("readonly", "readonly");

            }
            else
            {
                TextBox2.Text = DateTime.Now.ToString("dd/MM/yyyy");
                TextBox2.Attributes.Add("readonly", "readonly");
                TextBox3.Text = DateTime.Now.ToString("dd/MM/yyyy");
                TextBox3.Attributes.Add("readonly", "readonly");
            }
            ddlreason.Attributes.Add("onfocus", "flg()");
            btnrejectreason.Attributes.Add("onfocus", "flg1()");
            rights();
            spvl = 1;
            ViewState["spvl"] = spvl;
            spsearch = 0;
            type();
            edu();
            degree();
            branch();
            bindseattype();
            bindConcessionReason();
            //if (user_code != "30")
            //{
            //    linksetting.Visible = false;
            //}
            //else
            //{
            //    linksetting.Visible = true;
            //}

            lodaTextval();
            //tabpanel2.HeaderText = "ShortList [New 1]*";
            loadBoardUniv();
            loadAttempts();
            Button9.Visible = false;
            txt_AdmissionDate.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txt_AdmissionDate.Attributes.Add("readonly", "readonly");
            txtCounsellingDt.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txtCounsellingDt.Attributes.Add("readonly", "readonly");
            //loadHostel();
            //loadHostelRoom();
            EquivalentToHSC();
            bindsem();
        }
        //  comm();

        fg = 6;
        if (ddl_collegename.Items.Count > 0)
            college_code = ddl_collegename.SelectedValue;
    }
    protected void applicationPdfFormateRights()
    {
        try
        {
            string value = d2.GetFunction("select value from Master_Settings where settings ='Application Pdf Format Setting' and usercode ='" + user_code + "'");
            if (value == "0")
            {
                formatevalue = "0";
            }
            else
            {
                formatevalue = "";
            }
        }
        catch { }
    }
    protected void admissionNoGeneration()
    {
        try
        {
            string value = d2.GetFunction("select value from Master_Settings where settings ='Admission No Rights' and usercode ='" + user_code + "'");
            if (value == "1")
            {
                admisionvalue = "1";
            }
            else
            {
                admisionvalue = "0";
            }
        }
        catch { }
    }
    void BindCollege()
    {
        try
        {

            ds.Clear();
            //ds = d2.BindCollege();
            string group_code = Session["group_code"].ToString();
            string columnfield = "";
            if (group_code.Contains(';'))
            {
                string[] group_semi = group_code.Split(';');
                group_code = group_semi[0].ToString();
            }
            if ((group_code.ToString().Trim() != "") && (Session["single_user"].ToString() != "1" && Session["single_user"].ToString() != "true" && Session["single_user"].ToString() != "TRUE" && Session["single_user"].ToString() != "True"))
            {
                columnfield = " and group_code='" + group_code + "'";
            }
            else
            {
                columnfield = " and user_code='" + Session["usercode"] + "'";
            }
            Hashtable hat = new Hashtable();
            hat.Clear();
            hat.Add("column_field", columnfield.ToString());
            ds = d2.select_method("bind_college", hat, "sp");
            ddl_collegename.Items.Clear();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_collegename.DataSource = ds;
                ddl_collegename.DataTextField = "collname";
                ddl_collegename.DataValueField = "college_code";
                ddl_collegename.DataBind();
            }
        }
        catch
        {
        }
    }
    public void ddl_collegename_SelectedIndexchange(object sender, EventArgs e)
    {
        if (ddl_collegename.Items.Count > 0)
        {
            college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
        }

        edu();
        degree();
        branch();
        bindsem();
        loadreligion();
        loadcommunity();
        bindseattype();
        bindConcessionReason();
        loadBoardUniv();
        loadAttempts();
        FpSpread3.Visible = false;
        FpSpread1.Visible = false;
        FpSpread2.Visible = false;
        FpSpread4.Visible = false;
        Label66.Visible = false;
        Label68.Visible = false;
        loadadmitedvalue();
    }
    public void cb_religion_checkedchange(object sender, EventArgs e)
    {
        try
        {

            if (cb_religion.Checked == true)
            {
                for (int i = 0; i < cbl_religion.Items.Count; i++)
                {
                    cbl_religion.Items[i].Selected = true;
                }
                txt_religion.Text = "Religion(" + (cbl_religion.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_religion.Items.Count; i++)
                {
                    cbl_religion.Items[i].Selected = false;
                }
                txt_religion.Text = "--Select--";
            }
        }
        catch
        {
        }
    }
    public void cbl_religion_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            int commcount = 0;
            txt_religion.Text = "--Select--";
            cb_religion.Checked = false;
            for (int i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount == cbl_religion.Items.Count)
            {
                txt_religion.Text = "Religion(" + commcount.ToString() + ")";
                cb_religion.Checked = true;
            }
            else if (commcount == 0)
            {
                txt_religion.Text = "--Select--";
            }
            else
            {
                txt_religion.Text = "Religion(" + commcount.ToString() + ")";
            }
        }
        catch
        {
        }
    }
    public void cb_comm_checkedchange(object sender, EventArgs e)
    {
        try
        {

            if (cb_comm.Checked == true)
            {
                for (int i = 0; i < cbl_comm.Items.Count; i++)
                {
                    cbl_comm.Items[i].Selected = true;
                }
                txt_comm.Text = "Community(" + (cbl_comm.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_comm.Items.Count; i++)
                {
                    cbl_comm.Items[i].Selected = false;
                }
                txt_comm.Text = "--Select--";
            }
        }
        catch
        {
        }
    }
    public void cbl_comm_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            int commcount = 0;
            txt_comm.Text = "--Select--";
            cb_comm.Checked = false;
            for (int i = 0; i < cbl_comm.Items.Count; i++)
            {
                if (cbl_comm.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount == cbl_comm.Items.Count)
            {
                txt_comm.Text = "Community(" + commcount.ToString() + ")";
                cb_comm.Checked = true;
            }
            else if (commcount == 0)
            {
                txt_comm.Text = "--Select--";
            }
            else
            {
                txt_comm.Text = "Community(" + commcount.ToString() + ")";
            }
        }
        catch
        {
        }
    }
    public void lodaTextval()
    {
        Hashtable Texthash = new Hashtable();
        try
        {
            string txtquery = "select TextVal,TextCode  from TextValTable where TextCriteria in('state','comm','caste','mton','relig','cours','branc','foccu','citi','cocur','Plang','Scast') and college_code =" + college_code + "";
            ds.Clear();
            ds = dt.select_method_wo_parameter(txtquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int ik = 0; ik < ds.Tables[0].Rows.Count; ik++)
                {
                    Texthash.Add(Convert.ToString(ds.Tables[0].Rows[ik]["TextCode"]), Convert.ToString(ds.Tables[0].Rows[ik]["TextVal"]));
                }
                ViewState["Texthash"] = Texthash;
            }
        }
        catch
        {

        }
    }
    //public void batch()
    //{
    //    try
    //    {

    //        ds = dt.select_method_wo_parameter(" select MAX(Batch_Year) as batch from applyn ", "Text");
    //        int count = ds.Tables[0].Rows.Count;
    //        if (count > 0)
    //        {
    //            txtbatch.Text = ds.Tables[0].Rows[0]["batch"].ToString();
    //            //txtbatch.Text = DateTime.Now.ToString("yyyy");
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //    }
    //}
    public void type()
    {
        try
        {
            ddltype.Items.Clear();
            ds = dt.select_method_wo_parameter("select distinct type from degree,course,deptprivilages where     course.course_id=degree.course_id and course.college_code = degree.college_code and  degree.college_code='" + college_code + "' and deptprivilages.Degree_code=degree.Degree_code and user_code='" + user_code + "' and type is not null and type<>''", "Text");

            int count = ds.Tables[0].Rows.Count;
            if (count > 0)
            {
                ddltype.DataSource = ds;
                ddltype.DataTextField = "type";
                ddltype.DataValueField = "type";
                ddltype.DataBind();
                //ddltype.Items.Insert(0, "All");
            }
            else
            {
                ddltype.Items.Insert(0, "--Select--");
            }
        }
        catch (Exception ex)
        {

        }
    }
    public void edu()
    {
        try
        {
            ddledu.Items.Clear();
            ds = dt.select_method_wo_parameter("select distinct Edu_Level from degree,course,deptprivilages where     course.course_id=degree.course_id and course.college_code = degree.college_code and  degree.college_code='" + ddl_collegename.SelectedItem.Value + "' and deptprivilages.Degree_code=degree.Degree_code and user_code='" + user_code + "' and degree.college_code='" + ddl_collegename.SelectedItem.Value + "'  order by Edu_Level desc", "Text");

            int count = ds.Tables[0].Rows.Count;
            if (count > 0)
            {
                ddledu.DataSource = ds;
                ddledu.DataTextField = "Edu_Level";
                ddledu.DataValueField = "Edu_Level";
                ddledu.DataBind();

            }
            else
            {
                ddledu.Items.Insert(0, "--Select--");
            }
        }
        catch (Exception ex)
        {

        }
    }
    public void degree()
    {
        try
        {
            string query = "";
            string edulvl = "";
            if (ddledu.SelectedItem.Text == "--Select--")
            {
                query = "select distinct d.Course_Id,c.Course_Name from Degree d,course c where d.Course_Id=c.Course_Id and d.college_code=c.college_code and d.college_code='" + ddl_collegename.SelectedItem.Value + "'";
            }
            else
            {
                edulvl = Convert.ToString(ddledu.SelectedItem.Value);
                query = "select distinct d.Course_Id,c.Course_Name from Degree d,course c where d.Course_Id=c.Course_Id and d.college_code=c.college_code and d.college_code='" + ddl_collegename.SelectedItem.Value + "' and Edu_Level in('" + edulvl + "')";
            }
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            int count1 = ds.Tables[0].Rows.Count;
            if (count1 > 0)
            {
                ddldegree.DataSource = ds;
                ddldegree.DataTextField = "course_name";
                ddldegree.DataValueField = "course_id";
                ddldegree.DataBind();
            }

        }
        catch (Exception ex)
        {
        }
    }
    public void branch()
    {
        try
        {
            ddldept.Items.Clear();
            string deg = ddldegree.SelectedValue;
            if (deg != "--Select--" && deg != null && ddldegree.SelectedItem.Text != "All")
            {
                ds = dt.select_method_wo_parameter("select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course,deptprivilages where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.course_id in('" + deg + "') and degree.college_code='" + ddl_collegename.SelectedItem.Value + "' and deptprivilages.Degree_code=degree.Degree_code and user_code='" + user_code + "'", "Text");
            }
            else
            {
                ds = dt.select_method_wo_parameter("select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course,deptprivilages where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and deptprivilages.Degree_code=degree.Degree_code and degree.college_code='" + ddl_collegename.SelectedItem.Value + "' and user_code='" + user_code + "'", "Text");
            }
            int count = ds.Tables[0].Rows.Count;
            if (count > 0)
            {

                ddldept.DataSource = ds;
                ddldept.DataTextField = "dept_name";
                ddldept.DataValueField = "degree_code";
                ddldept.DataBind();

            }
            else
            {
                ddldept.Items.Insert(0, "--Select--");
            }
        }
        catch (Exception ex)
        {
        }
    }
    protected void ddltype_select(object sender, EventArgs e)
    {
        lbltotalcount.Visible = false;
        lbltotalcount1.Visible = false;
        lbltotalcount2.Visible = false;
        lbltotalcount3.Visible = false;
        FpSpread4.Visible = false;
        FpSpread3.Visible = false;
        FpSpread2.Visible = false;
        FpSpread1.Visible = false;
        Label66.Visible = false;
        // lblnew2.Text = "0" + "New";
        Label68.Visible = false;

        btnapprove.Visible = false;
        btnSendSmsOpenPop.Visible = false;
        Button2.Visible = false;
        Button3.Visible = false;
        Button9.Visible = false;
        lbltotalfeepaid.Visible = false;
        lbltotalfeepaid_value.Visible = false;
        ckbx.Visible = false;
        btnconform.Visible = false;
        btnunpaid.Visible = false;
        btnadmitcard.Visible = false;
        btnadmitprint.Visible = false;
        btnleft.Visible = false;
        edu();
        degree();
        branch();
        loadBoardUniv();
    }
    protected void Logout_btn_Click(object sender, EventArgs e)
    {
        Session.Abandon();
        Session.Clear();
        Session.RemoveAll();
        System.Web.Security.FormsAuthentication.SignOut();
        Response.Redirect("default.aspx", false);
    }
    protected void bttnsavekclick(object sender, EventArgs e)
    {
        try
        {
            int isval1 = 0;
            FpSpread3.SaveChanges();
            for (int i = 0; i < FpSpread3.Sheets[0].Rows.Count; i++)
            {
                isval1 = Convert.ToInt32(FpSpread3.Sheets[0].Cells[i, 1].Value);

                if (isval1 == 1)
                {
                    string approve = "if exists(select * from selectcriteria where app_no='" + FpSpread3.Sheets[0].Cells[i, 11].Text + "' and usercode='" + user_code + "' and degree_code='" + FpSpread3.Sheets[0].Cells[i, 12].Text + "' and college_code='" + college_code + "') delete from selectcriteria where app_no='" + FpSpread3.Sheets[0].Cells[i, 11].Text + "' and usercode='" + user_code + "' and degree_code='" + FpSpread3.Sheets[0].Cells[i, 12].Text + "' and college_code='" + college_code + "' insert into selectcriteria (app_no,usercode,degree_code,college_code,isapprove) values('" + FpSpread3.Sheets[0].Cells[i, 11].Text + "','" + user_code + "','" + FpSpread3.Sheets[0].Cells[i, 12].Text + "','" + college_code + "','1')";
                    int a = dt.update_method_wo_parameter(approve, "text");
                    string reg = "  if exists(select * from Registration where App_No='" + FpSpread3.Sheets[0].Cells[i, 11].Text + "' and Adm_Date='" + System.DateTime.Now.ToString("yyy/MM/dd") + "' and Stud_Name='" + FpSpread3.Sheets[0].Cells[i, 2].Text + "' and Batch_Year='" + ddl_batch.SelectedItem.Value + "' and   degree_code='" + FpSpread3.Sheets[0].Cells[i, 12].Text + "' and  college_code='" + college_code + "' )  delete from Registration where App_No='" + FpSpread3.Sheets[0].Cells[i, 11].Text + "' and Adm_Date='" + System.DateTime.Now.ToString("yyy/MM/dd") + "' and Stud_Name='" + FpSpread3.Sheets[0].Cells[i, 2].Text + "' and Batch_Year='" + ddl_batch.SelectedItem.Value + "' and   degree_code='" + FpSpread3.Sheets[0].Cells[i, 12].Text + "' and  college_code='" + college_code + "' insert into Registration (App_No,Adm_Date,Roll_Admit,Roll_No,RollNo_Flag,Reg_No,Stud_Name,Batch_Year,degree_code,college_code,CC,DelFlag,Exam_Elg)values('" + FpSpread3.Sheets[0].Cells[i, 11].Text + "','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','" + FpSpread3.Sheets[0].Cells[i, 11].Text + "','" + FpSpread3.Sheets[0].Cells[i, 11].Text + "','1','" + FpSpread3.Sheets[0].Cells[i, 11].Text + "','" + FpSpread3.Sheets[0].Cells[i, 2].Text + "','" + ddl_batch.SelectedItem.Value + "','" + FpSpread3.Sheets[0].Cells[i, 12].Text + "','" + college_code + "','0','0','OK')";
                    int b = dt.update_method_wo_parameter(reg, "text");
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> Getroll(string prefixText)
    {
        string cs = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        using (SqlConnection sqlconn = new SqlConnection(cs))
        {

            sqlconn.Open();
            string nm = "select  stud_name from applyn where stud_name like '" + prefixText + "%'  ";
            SqlCommand cmd = new SqlCommand(nm, sqlconn);

            cmd.Parameters.AddWithValue("@Title", prefixText);

            SqlDataAdapter da = new SqlDataAdapter(cmd);

            DataTable dt = new DataTable();

            da.Fill(dt);

            List<string> roll = new List<string>();

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                roll.Add(dt.Rows[i]["stud_name"].ToString());

            }

            return roll;

        }

    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> Getroll1(string prefixText)
    {
        string cs = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        using (SqlConnection sqlconn = new SqlConnection(cs))
        {

            sqlconn.Open();
            string nm = "select  Student_Mobile from applyn where Student_Mobile like '" + prefixText + "%'  ";
            SqlCommand cmd = new SqlCommand(nm, sqlconn);

            cmd.Parameters.AddWithValue("@Title", prefixText);

            SqlDataAdapter da = new SqlDataAdapter(cmd);

            DataTable dt = new DataTable();

            da.Fill(dt);

            List<string> roll = new List<string>();

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                roll.Add(dt.Rows[i]["Student_Mobile"].ToString());

            }

            return roll;

        }

    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> Getapp(string prefixText)
    {
        string cs = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
        using (SqlConnection sqlconn = new SqlConnection(cs))
        {

            sqlconn.Open();
            string nm = "select  app_no from applyn where app_no like '" + prefixText + "%'  ";
            SqlCommand cmd = new SqlCommand(nm, sqlconn);

            cmd.Parameters.AddWithValue("@Title", prefixText);

            SqlDataAdapter da = new SqlDataAdapter(cmd);

            DataTable dt = new DataTable();

            da.Fill(dt);

            List<string> roll = new List<string>();

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                roll.Add(dt.Rows[i]["app_no"].ToString());

            }

            return roll;

        }

    }
    protected void Buttonsearch_Click(object sender, EventArgs e)
    {
        try
        {
            spsearch = 1;

            spsearch = 0;
            //if (TabContainer1.ActiveTabIndex == 0)
            //{
            //    spread();
            //    TextBox4.Text = "";
            //    TextBox5.Text = "";
            //    TextBox6.Text = "";
            //    spsearch = 0;
            //}
            //else if (TabContainer1.ActiveTabIndex == 3)
            //{
            //    spread1();
            //    TextBox4.Text = "";
            //    TextBox5.Text = "";
            //    TextBox6.Text = "";
            //    spsearch = 0;
            //}
            //else if (TabContainer1.ActiveTabIndex == 1)
            //{
            //    spread2();
            //    TextBox4.Text = "";
            //    TextBox5.Text = "";
            //    TextBox6.Text = "";
            //    spsearch = 0;
            //}
            //else if (TabContainer1.ActiveTabIndex == 2)
            //{
            //    spread3();
            //    TextBox4.Text = "";
            //    TextBox5.Text = "";
            //    TextBox6.Text = "";
            //    spsearch = 0;

            //}

        }
        catch (Exception ex)
        {

        }
    }
    protected void bttnsaveexitclick(object sender, EventArgs e)
    {
        Panel23.Visible = false;
    }
    protected void btnappclick1(object sender, EventArgs e)
    {
        try
        {
            int isval1 = 0;
            int fllg = 0;
            int val = 0;
            FpSpread1.SaveChanges();
            FpSpread3.SaveChanges();
            bool set = false;

            bool checkflage = false;

            if (checkflage == false)
            {

                for (int i = 0; i < FpSpread1.Sheets[0].Rows.Count; i++)
                {
                    isval1 = Convert.ToInt32(FpSpread1.Sheets[0].Cells[i, 1].Value);
                    if (isval1 == 1)
                    {
                        fllg = 1;
                        val++;
                        // string approve = "if exists(select * from selectcriteria where app_no='" + FpSpread1.Sheets[0].Cells[i, 11].Text + "' and usercode='" + user_code + "' and degree_code='" + FpSpread1.Sheets[0].Cells[i, 12].Text + "' and college_code='" + college_code + "' and isapprove='2') delete from selectcriteria where app_no='" + FpSpread1.Sheets[0].Cells[i, 11].Text + "' and usercode='" + user_code + "' and degree_code='" + FpSpread1.Sheets[0].Cells[i, 12].Text + "' and college_code='" + college_code + "' and isapprove='2' insert into selectcriteria (app_no,usercode,degree_code,college_code,isapprove) values('" + FpSpread1.Sheets[0].Cells[i, 11].Text + "','" + user_code + "','" + FpSpread1.Sheets[0].Cells[i, 12].Text + "','" + college_code + "','2')";
                        string approve = "update selectcriteria set isapprove='2' , isview='0'  , select_date='" + System.DateTime.Now.ToString("yyy/MM/dd") + "' where app_no='" + Convert.ToString(FpSpread1.Sheets[0].Cells[i, 0].Tag) + "'  and degree_code='" + returnStudDeg(Convert.ToString(FpSpread1.Sheets[0].Cells[i, 0].Tag)) + "' and college_code='" + college_code + "' and  isapprove='1'";
                        approve = approve + " update applyn set selection_status='1' where app_no ='" + FpSpread1.Sheets[0].Cells[i, 2].Text + "'";
                        int a = dt.update_method_wo_parameter(approve, "text");

                    }
                }
                if (val == 0)
                {
                    if (set == false && checkflage == false)
                    {

                        for (int i = 0; i < FpSpread3.Sheets[0].Rows.Count; i++)
                        {
                            isval1 = Convert.ToInt32(FpSpread3.Sheets[0].Cells[i, 1].Value);
                            if (isval1 == 1)
                            {

                                fllg = 1;
                                string approve = "if exists(select * from selectcriteria where app_no='" + Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag) + "' and degree_code='" + returnStudDeg(Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag)) + "' and college_code='" + college_code + "') delete from selectcriteria where app_no='" + FpSpread3.Sheets[0].Cells[i, 2].Text + "'  and degree_code='" + returnStudDeg(Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag)) + "' and college_code='" + college_code + "' insert into selectcriteria(app_no,usercode,degree_code,college_code,isapprove,select_date,isview,criteria_Code) values('" + Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag) + "','" + user_code + "','" + returnStudDeg(Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag)) + "','" + college_code + "','2','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','0','" + Convert.ToString(ViewState["text_code_value"]) + "')";
                                //string approve = " insert into selectcriteria(app_no,usercode,degree_code,college_code,isapprove,select_date,isview,criteria_Code) values('" + FpSpread3.Sheets[0].Cells[i, 2].Text + "','" + user_code + "','" + ddldept.SelectedValue + "','" + college_code + "','2','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','0','" + Convert.ToString(ViewState["text_code_value"]) + "')";
                                approve = approve + " update applyn set selection_status='1' where app_no ='" + Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag) + "'";
                                int a = dt.update_method_wo_parameter(approve, "text");

                            }
                        }
                    }
                    else
                    {
                        errorspan.InnerHtml = "Please Select Any one Category";
                        poperrjs.Visible = true;
                        //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Select Any one Category\");", true);
                    }
                }

                if (fllg == 1)
                {
                    Button1_Click(sender, e);
                    errorspan.InnerHtml = "Recommended Successfully";
                    poperrjs.Visible = true;
                    //  ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Recommended Successfully')", true);
                    // ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Recommended Successfully\");", true);

                }
                else
                {
                    errorspan.InnerHtml = "Choose Atleast One Student And Than Proceed";
                    poperrjs.Visible = true;
                    // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Choose Atleast One Student And Than Proceed')", true);
                    //  ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Choose Atleast One Student And Than Proceed\");", true);

                }
            }
            else
            {
                errorspan.InnerHtml = "Please Select Any one Category";
                poperrjs.Visible = true;
                // ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Select Any one Category\");", true);
            }

        }
        catch (Exception ex)
        {
        }
    }
    //alter by sudhagar 17.12.2016
    protected void btnadmit_Click(object sender, EventArgs e)
    {
        bool checK = false;
        if (TabContainer1.ActiveTabIndex == 0)
        {
            if (farPointCheck(FpSpread3))
            {
                savechange = true;
                imgdiv2.Visible = true;
                checkEditablerights();
                if (editableRights)
                {
                    tdconces.Visible = true;
                    bindConcessionReason();
                }
                else
                    tdconces.Visible = false;

                bindAdmLedgerGrid();
                checK = true;
            }
        }
        else if (TabContainer1.ActiveTabIndex == 1)
        {
            if (farPointCheck(FpSpread1))
            {
                savechange = true;
                imgdiv2.Visible = true;
                checkEditablerights();
                if (editableRights)
                {
                    tdconces.Visible = true;
                    bindConcessionReason();
                }
                else
                    tdconces.Visible = false;

                bindAdmLedgerGrid();
                checK = true;
            }
        }

        if (!checK)
        {
            errorspan.InnerHtml = "Please Select Any One Student";
            poperrjs.Visible = true;
        }
    }

    public void reason()
    {
        try
        {
            ddlreason.Items.Clear();
            ds = dt.select_method_wo_parameter("select distinct TextCode,TextVal from textvaltable where TextCriteria = 'adres' and college_code = '" + college_code + "'", "Text");
            int count = ds.Tables[0].Rows.Count;
            if (count > 0)
            {
                ddlreason.DataSource = ds;
                ddlreason.DataTextField = "TextVal";
                ddlreason.DataValueField = "TextCode";
                ddlreason.DataBind();

            }

        }
        catch (Exception ex)
        {
        }
    }
    public void reason1()
    {
        try
        {
            btnrejectreason.Items.Clear();
            ds = dt.select_method_wo_parameter("select distinct TextCode,TextVal from textvaltable where TextCriteria = 'reres' and college_code = '" + college_code + "'", "Text");
            int count = ds.Tables[0].Rows.Count;
            if (count > 0)
            {
                btnrejectreason.DataSource = ds;
                btnrejectreason.DataTextField = "TextVal";
                btnrejectreason.DataValueField = "TextCode";
                btnrejectreason.DataBind();

            }

        }
        catch (Exception ex)
        {
        }
    }
    protected void btnadd1_Click(object sender, EventArgs e)
    {
        try
        {
            string add = " if exists(select * from textvaltable where TextVal='" + txtadd.Text + "' and TextCriteria='adres'and college_code='" + college_code + "' ) update textvaltable set TextVal='" + txtadd.Text + "',TextCriteria='adres',college_code='" + college_code + "' where TextVal='" + txtadd.Text + "' and TextCriteria='adres'and college_code='" + college_code + "' else insert into textvaltable (TextVal,TextCriteria,college_code) values ('" + txtadd.Text + "','adres','" + college_code + "')";
            int a = dt.update_method_wo_parameter(add, "text");
            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Added Successfully')", true);
            reason();
            txtadd.Text = "";
        }
        catch (Exception ex)
        {
        }
    }
    protected void btnexit1_Click(object sender, EventArgs e)
    {
        Panel10.Visible = false;
        txtadd.Text = "";
        reason();
    }
    protected void btnadd_Click(object sender, EventArgs e)
    {
        reason();

        Panel10.Visible = true;
    }
    protected void btnminus_Click(object sender, EventArgs e)
    {
        try
        {
            string add = "delete from textvaltable where TextCode='" + ddlreason.SelectedValue + "'and TextCriteria='adres' and college_code='" + college_code + "' ";
            int a = dt.update_method_wo_parameter(add, "text");
            reason();
            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Deleted Successfully')", true);

        }
        catch (Exception ex)
        {
        }
    }
    protected void btnreason_click(object sender, EventArgs e)
    {
        panel2.Visible = false;
    }
    protected void btnadd1ret_Click(object sender, EventArgs e)
    {
        try
        {
            string add = " if exists(select * from textvaltable where TextVal='" + TextBox1.Text + "' and TextCriteria='reres'and college_code='" + college_code + "' ) update textvaltable set TextVal='" + TextBox1.Text + "',TextCriteria='reres',college_code='" + college_code + "' where TextVal='" + TextBox1.Text + "' and TextCriteria='reres'and college_code='" + college_code + "' else insert into textvaltable (TextVal,TextCriteria,college_code) values ('" + TextBox1.Text + "','reres','" + college_code + "')";
            int a = dt.update_method_wo_parameter(add, "text");
            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Added Successfully')", true);
            reason1();
            txtadd.Text = "";
            Panel12.Visible = false;
        }
        catch (Exception ex)
        {
        }
    }
    protected void btnexit1rejt_Click(object sender, EventArgs e)
    {

        Panel12.Visible = false;
        TextBox1.Text = "";
    }
    protected void btnaddrejt_Click(object sender, EventArgs e)
    {
        reason1();
        Panel12.Visible = true;
    }
    protected void btnminusrejt_Click(object sender, EventArgs e)
    {
        try
        {
            string add = "delete from textvaltable where TextCode='" + btnrejectreason.SelectedValue + "'and TextCriteria='reres' and college_code='" + college_code + "' ";
            int a = dt.update_method_wo_parameter(add, "text");
            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Deleted Successfully')", true);
            reason1();
        }
        catch (Exception ex)
        {
        }
    }
    protected void btnrct_Click(object sender, EventArgs e)
    {
        try
        {
            int isval1 = 0;
            int fllg = 0;
            FpSpread2.SaveChanges();
            FpSpread3.SaveChanges();
            FpSpread1.SaveChanges();
            if (TabContainer1.ActiveTabIndex == 3)
            {
                for (int i = 1; i < FpSpread2.Sheets[0].Rows.Count; i++)
                {
                    isval1 = Convert.ToInt32(FpSpread2.Sheets[0].Cells[i, 1].Value);
                    if (isval1 == 1)
                    {
                        fllg = 1;
                        string sel = "select * from textvaltable where TextVal='" + btnrejectreason.SelectedItem.Text + "' and TextCriteria='reres'and college_code='" + college_code + "'";
                        ds = dt.select_method_wo_parameter(sel, "text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            string approve = "update selectcriteria set isapprove='3',usercode='" + user_code + "',isview='0',  select_date='" + System.DateTime.Now.ToString("yyy/MM/dd") + "',textcode='" + ds.Tables[0].Rows[0]["TextCode"].ToString() + "' where app_no='" + Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag) + "'  and degree_code='" + returnStudDeg(Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag)) + "' and college_code='" + college_code + "' ";
                            approve = approve + "update applyn set admission_status='0',selection_status='0' where app_no ='" + FpSpread2.Sheets[0].Cells[i, 0].Tag + "'";
                            int a = dt.update_method_wo_parameter(approve, "text");
                        }
                    }
                }
            }
            if (TabContainer1.ActiveTabIndex == 0)
            {
                if (fllg == 0)
                {
                    for (int i = 0; i < FpSpread3.Sheets[0].Rows.Count; i++)
                    {
                        isval1 = Convert.ToInt32(FpSpread3.Sheets[0].Cells[i, 1].Value);
                        if (isval1 == 1)
                        {
                            fllg = 1;
                            string sel = "select * from textvaltable where TextVal='" + btnrejectreason.SelectedItem.Text + "' and TextCriteria='reres'and college_code='" + college_code + "'";
                            ds = dt.select_method_wo_parameter(sel, "text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                // string approve = "if exists(select * from selectcriteria where app_no='" + FpSpread1.Sheets[0].Cells[i, 11].Text + "' and usercode='" + user_code + "' and degree_code='" + FpSpread1.Sheets[0].Cells[i, 12].Text + "' and college_code='" + college_code + "' and isapprove='2') delete from selectcriteria where app_no='" + FpSpread1.Sheets[0].Cells[i, 11].Text + "' and usercode='" + user_code + "' and degree_code='" + FpSpread1.Sheets[0].Cells[i, 12].Text + "' and college_code='" + college_code + "' and isapprove='2' insert into selectcriteria (app_no,usercode,degree_code,college_code,isapprove) values('" + FpSpread1.Sheets[0].Cells[i, 11].Text + "','" + user_code + "','" + FpSpread1.Sheets[0].Cells[i, 12].Text + "','" + college_code + "','2')";
                                string approve = " insert into selectcriteria(app_no,usercode,degree_code,college_code,isapprove,select_date,isview,textcode) values('" + Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag) + "','" + user_code + "','" + returnStudDeg(Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag)) + "','" + college_code + "','3','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','0','" + ds.Tables[0].Rows[0]["TextCode"].ToString() + "')";
                                approve = approve + "update applyn set admission_status='0',selection_status='0' where app_no ='" + Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag) + "'";
                                int a = dt.update_method_wo_parameter(approve, "text");
                            }
                        }
                    }
                }
            }
            if (TabContainer1.ActiveTabIndex == 1)
            {
                if (fllg == 0)
                {
                    for (int i = 1; i < FpSpread1.Sheets[0].Rows.Count; i++)
                    {
                        isval1 = Convert.ToInt32(FpSpread1.Sheets[0].Cells[i, 1].Value);
                        if (isval1 == 1)
                        {
                            fllg = 1;
                            string sel = "select * from textvaltable where TextVal='" + btnrejectreason.SelectedItem.Text + "' and TextCriteria='reres'and college_code='" + college_code + "'";
                            ds = dt.select_method_wo_parameter(sel, "text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                // string approve = "if exists(select * from selectcriteria where app_no='" + FpSpread1.Sheets[0].Cells[i, 11].Text + "' and usercode='" + user_code + "' and degree_code='" + FpSpread1.Sheets[0].Cells[i, 12].Text + "' and college_code='" + college_code + "' and isapprove='2') delete from selectcriteria where app_no='" + FpSpread1.Sheets[0].Cells[i, 11].Text + "' and usercode='" + user_code + "' and degree_code='" + FpSpread1.Sheets[0].Cells[i, 12].Text + "' and college_code='" + college_code + "' and isapprove='2' insert into selectcriteria (app_no,usercode,degree_code,college_code,isapprove) values('" + FpSpread1.Sheets[0].Cells[i, 11].Text + "','" + user_code + "','" + FpSpread1.Sheets[0].Cells[i, 12].Text + "','" + college_code + "','2')";
                                string approve = "update selectcriteria set isapprove='0',isview='0',usercode='" + user_code + "', select_date='" + System.DateTime.Now.ToString("yyy/MM/dd") + "',textcode='" + ds.Tables[0].Rows[0]["TextCode"].ToString() + "' where app_no='" + Convert.ToString(FpSpread1.Sheets[0].Cells[i, 0].Tag) + "' and degree_code='" + returnStudDeg(Convert.ToString(FpSpread1.Sheets[0].Cells[i, 0].Tag)) + "' and college_code='" + college_code + "' ";
                                approve = approve + "update applyn set admission_status='0',selection_status='0' where app_no ='" + Convert.ToString(FpSpread1.Sheets[0].Cells[i, 0].Tag) + "'";
                                int a = dt.update_method_wo_parameter(approve, "text");
                            }
                        }
                    }
                }
            }
            if (TabContainer1.ActiveTabIndex == 2)
            {
                if (fllg == 0)
                {
                    for (int i = 1; i < FpSpread2.Sheets[0].Rows.Count; i++)
                    {
                        isval1 = Convert.ToInt32(FpSpread2.Sheets[0].Cells[i, 1].Value);
                        if (isval1 == 1)
                        {
                            fllg = 1;
                            string sel = "select * from textvaltable where TextVal='" + btnrejectreason.SelectedItem.Text + "' and TextCriteria='reres'and college_code='" + college_code + "'";
                            ds = dt.select_method_wo_parameter(sel, "text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                // string approve = "if exists(select * from selectcriteria where app_no='" + FpSpread1.Sheets[0].Cells[i, 11].Text + "' and usercode='" + user_code + "' and degree_code='" + FpSpread1.Sheets[0].Cells[i, 12].Text + "' and college_code='" + college_code + "' and isapprove='2') delete from selectcriteria where app_no='" + FpSpread1.Sheets[0].Cells[i, 11].Text + "' and usercode='" + user_code + "' and degree_code='" + FpSpread1.Sheets[0].Cells[i, 12].Text + "' and college_code='" + college_code + "' and isapprove='2' insert into selectcriteria (app_no,usercode,degree_code,college_code,isapprove) values('" + FpSpread1.Sheets[0].Cells[i, 11].Text + "','" + user_code + "','" + FpSpread1.Sheets[0].Cells[i, 12].Text + "','" + college_code + "','2')";
                                string approve = "update selectcriteria set isapprove='0',isview='0',usercode='" + user_code + "', select_date='" + System.DateTime.Now.ToString("yyy/MM/dd") + "',textcode='" + ds.Tables[0].Rows[0]["TextCode"].ToString() + "' where app_no='" + Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag) + "' and degree_code='" + returnStudDeg(Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag)) + "' and college_code='" + college_code + "' ";
                                approve = approve + "update applyn set admission_status='0',selection_status='0' where app_no ='" + Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag) + "'";
                                approve = approve + " delete from FT_FeeAllot where App_No ='" + Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag) + "'";
                                int a = dt.update_method_wo_parameter(approve, "text");
                            }
                        }
                    }
                }
            }
            if (fllg == 1)
            {
                Button1_Click(sender, e);
                errorspan.InnerHtml = "Reject Successfully";
                poperrjs.Visible = true;
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Reject Successfully')", true);
                //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Reject Successfully\");", true);
                panel2.Visible = false;

            }
            else
            {
                errorspan.InnerHtml = "Choose Atleast One Student And Than Proceed";
                poperrjs.Visible = true;
                // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Choose Atleast One Student And Than Proceed')", true);
                // ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Choose Atleast One Student And Than Proceed\");", true);
                panel2.Visible = false;

            }
        }
        catch (Exception ex)
        {

        }
    }
    protected void btnrjt_click(object sender, EventArgs e)
    {
        panel2.Visible = false;
        TextBox1.Text = "";
    }
    protected void btnappreject(object sender, EventArgs e)
    {
        try
        {
            int isval1 = 0;
            int fllg = 0;
            FpSpread2.SaveChanges();
            FpSpread3.SaveChanges();
            FpSpread1.SaveChanges();
            FpSpread4.SaveChanges();
            reason1();
            for (int i = 1; i < FpSpread2.Sheets[0].Rows.Count; i++)
            {
                isval1 = Convert.ToInt32(FpSpread2.Sheets[0].Cells[i, 1].Value);
                if (isval1 == 1)
                {
                    fllg = 1;
                    panel2.Visible = true;
                    panel9.Visible = false;
                    panel11.Visible = true;
                    Panel10.Visible = false;
                }
            }
            for (int i = 0; i < FpSpread3.Sheets[0].Rows.Count; i++)
            {
                isval1 = Convert.ToInt32(FpSpread3.Sheets[0].Cells[i, 1].Value);
                if (isval1 == 1)
                {
                    fllg = 1;
                    panel2.Visible = true;
                    panel9.Visible = false;
                    panel11.Visible = true;
                    Panel10.Visible = false;
                }
            }
            for (int i = 0; i < FpSpread1.Sheets[0].Rows.Count; i++)
            {
                isval1 = Convert.ToInt32(FpSpread1.Sheets[0].Cells[i, 1].Value);
                if (isval1 == 1)
                {
                    fllg = 1;
                    panel2.Visible = true;
                    panel9.Visible = false;
                    panel11.Visible = true;
                    Panel10.Visible = false;
                }
            }
            for (int i = 0; i < FpSpread4.Sheets[0].Rows.Count; i++)
            {
                isval1 = Convert.ToInt32(FpSpread4.Sheets[0].Cells[i, 3].Value);
                if (isval1 == 1)
                {
                    fllg = 1;
                    panel2.Visible = true;
                    panel9.Visible = false;
                    panel11.Visible = true;
                    Panel10.Visible = false;
                }
            }
            if (fllg != 1)
            {
                errorspan.InnerHtml = "Choose Atleast One Student And Than Proceed";
                poperrjs.Visible = true;

                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Choose Atleast One Student And Than Proceed')", true);

            }


        }
        catch (Exception ex)
        {
        }
    }

    protected void btnappclick2(object sender, EventArgs e)
    {
        try
        {
            btnadmit_Click(sender, e);
            //Button1_Click(sender, e);
        }
        catch (Exception ex)
        {
        }
    }
    //added by sudhagar
    protected void buttnleft_Click(object sender, EventArgs e)
    {
        try
        {
            FpSpread2.SaveChanges();
            bool check = false;
            string UpdQ = "";
            int value = 0;
            for (int sel = 0; sel < FpSpread2.Sheets[0].Rows.Count; sel++)
            {
                if (sel == 0)
                    continue;
                value = Convert.ToInt32(FpSpread2.Sheets[0].Cells[sel, 1].Value);
                if (value == 1)
                {
                    string appno = Convert.ToString(FpSpread2.Sheets[0].Cells[sel, 0].Tag);
                    if (appno != "" && appno != "0")
                    {
                        string setting = Convert.ToString(AdmConfFormat());
                        if (setting == "1")
                        {
                            UpdQ = "update applyn set Admission_Status='2',AdmitedDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "' where app_no='" + appno + "'";
                        }
                        else
                        {
                            UpdQ = "update Registration set DelFlag=1 where App_No='" + appno + "'";
                            UpdQ = UpdQ + " update applyn set Admission_Status='2',AdmitedDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "' where app_no='" + appno + "'";
                        }
                        int upd = d2.update_method_wo_parameter(UpdQ, "Text");
                        check = true;
                    }
                }
            }
            if (check == true)
            {
                Button1_Click(sender, e);
                errorspan.InnerHtml = "Lefted Successfully";
                poperrjs.Visible = true;
            }
            else
            {
                errorspan.InnerHtml = "Please Select Any Any One Students";
                poperrjs.Visible = true;
            }
        }
        catch { }
    }
    public DateTime TextToDate(TextBox txt)
    {
        DateTime dt = new DateTime();
        string firstdate = Convert.ToString(txt.Text);

        string[] split = firstdate.Split('/');
        dt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
        return dt;
    }

    protected void btnappclick(object sender, EventArgs e)
    {
        shortlistsave();
        Button1_Click(sender, e);
    }
    // zzz 5.5.2016
    public void shortlistsave()
    {
        try
        {
            int i1 = 0;
            int isval1 = 0;
            int fllg = 0;
            FpSpread3.SaveChanges();
            bool checkflage = false;

            DateTime applycurrentdate = new DateTime();
            applycurrentdate = TextToDate(txt_curdate);
            if (checkflage == false)
            {
                for (int i = 1; i < FpSpread3.Sheets[0].Rows.Count; i++)
                {
                    isval1 = Convert.ToInt32(FpSpread3.Sheets[0].Cells[i, 1].Value);

                    if (isval1 == 1)
                    {
                        //  string seattype = Convert.ToString(ddl_seattype.SelectedItem.Value);
                        fllg = 1;
                        //string approve = "if exists(select * from selectcriteria where app_no='" + FpSpread3.Sheets[0].Cells[i, 0].Tag + "'  and degree_code='" + ddldept.SelectedValue + "' and college_code='" + college_code + "' and isapprove='1') delete from selectcriteria where app_no='" + FpSpread3.Sheets[0].Cells[i, 0].Tag + "'  and degree_code='" + ddldept.SelectedValue + "' and college_code='" + college_code + "' and isapprove='1' insert into selectcriteria (app_no,usercode,degree_code,college_code,isapprove,select_date,isview,criteria_Code) values('" + FpSpread3.Sheets[0].Cells[i, 0].Tag + "','" + user_code + "','" + ddldept.SelectedValue + "','" + college_code + "','1','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','0','" + Convert.ToString(ViewState["text_code_value"]) + "')";
                        string approve = " update applyn set selection_status='1',AdmitedDate='" + applycurrentdate + "' where app_no ='" + FpSpread3.Sheets[0].Cells[i, 0].Tag + "'";
                        int a = dt.update_method_wo_parameter(approve, "text");
                    }

                }

                if (fllg == 1)
                {
                    errorspan.InnerHtml = "ShortListed Successfully";
                    poperrjs.Visible = true;
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('ShortListed Successfully')", true);
                    // ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"ShortListed Successfully\");", true);

                }
                else
                {
                    errorspan.InnerHtml = "Choose Atleast One Student And Than Proceed";
                    poperrjs.Visible = true;
                    // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Choose Atleast One Student And Than Proceed')", true);
                    // ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Choose Atleast One Student And Than Proceed\");", true);

                }
            }
            else
            {
                errorspan.InnerHtml = "Please Select Any one Category";
                poperrjs.Visible = true;
                //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Select Any one Category\");", true);
            }


        }
        catch (Exception ex)
        {
        }
    }

    protected void getInsertValues(int type, ref double totalamount, ref double consAmt, ref double deduct)
    {
        try
        {
            if (type == 0)
            {
                totalamount = totalamount - consAmt;
                deduct += consAmt;
            }
            else
            {
                double percent = 0;
                percent = Math.Round((totalamount / 100) * consAmt);
                totalamount = totalamount - percent;
                deduct += percent;
            }
        }
        catch { }
    }


    //alter by sudhagar 21.12.2016
    public void admitsave(bool showFee)
    {
        int isval1 = 0;
        int fllg = 0;
        int k = 0;
        string app_no = "";
        FpSpread3.SaveChanges();
        string degreecode = "";
        string seattype = "";
        string headerfk = "";
        string leadgerfk = "";
        double feeamount = 0;
        double deduct = 0;
        string deductrea = "";
        double totalamount = 0;
        string refund = "";
        string feecatg = "";
        double finamount = 0;
        string paymode = "";
        string Generalfeeallot = "";
        bool blAppNo = false;
        ArrayList alAppNo = new ArrayList();
        string textcode = string.Empty;
        ListItem feecat = new ListItem();
        string batchyear = Convert.ToString(ddl_batch.SelectedItem.Value);
        bool checkflage = false;
        DateTime applycurrentdate = new DateTime();
        applycurrentdate = TextToDate(txt_curdate);
        seattype = Convert.ToString(ddl_seattype.SelectedItem.Value);
        degreecode = Convert.ToString(ddldept.SelectedItem.Value);
        batchyear = Convert.ToString(ddl_batch.SelectedItem.Value);
        string cursem = ddl_sem.Items.Count > 0 ? ddl_sem.SelectedItem.Value : "1";
        string getfinid = d2.getCurrentFinanceYear(user_code, Convert.ToString(ddl_collegename.SelectedItem.Value));
        Generalfeeallot = d2.GetFunction("select value from Master_Settings where settings ='GeneralFeeAllot' and usercode ='" + user_code + "'");

        string includeMulsem = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='IncludeMultipleTermSettings' and user_code ='" + user_code + "' and college_code ='" + ddl_collegename.SelectedItem.Value + "'");
        if (includeMulsem == "1")
        {
            string MulsemCode = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='SelectedMultipleFeecategoryCode' and user_code ='" + user_code + "' and college_code ='" + ddl_collegename.SelectedItem.Value + "'");
            textcode = MulsemCode != "0" ? MulsemCode : "0";
        }
        if (textcode == "0" || string.IsNullOrEmpty(textcode))
        {
            feecat = getFeecategoryNEW(ddl_sem.SelectedItem.Value);
            textcode = feecat.Value;
        }

        if (textcode != "0" && getfinid != "" && getfinid != "0")
        {
            string[] splcode = textcode.Split(',');
            for (int row = 0; row < splcode.Length; row++)
            {
                textcode = Convert.ToString(splcode[row]);
                string checkfee = "select LedgerFK,HeaderFK,PayMode,FeeAmount,deductAmout,DeductReason,TotalAmount,RefundAmount,FeeCategory,FineAmount from FT_FeeAllotDegree where DegreeCode='" + degreecode + "' and BatchYear ='" + batchyear + "' and SeatType ='" + seattype + "' and FeeCategory ='" + textcode + "' and FinYearFK ='" + getfinid + "'";
                ds = d2.select_method_wo_parameter(checkfee, "text");
                if (Generalfeeallot == "1" && ds.Tables[0].Rows.Count == 0 && textcode != "-1")
                {
                    errorspan.InnerHtml = "Please Allot The General Fee";
                    poperrjs.Visible = true;
                }
                else
                {
                    #region
                    bool validate = false;
                    bool cheCkSave = false;
                    //concession setting
                    double consAmt = 0;
                    string consReason = string.Empty;
                    int type = 0;
                    Hashtable conHeaderfk = new Hashtable();
                    Hashtable conLedgerfk = new Hashtable();
                    string conDeductRes = string.Empty;
                    checkEditablerights();
                    if (editableRights)
                    {
                        if (rbtype.SelectedIndex == 0)
                            type = 0;
                        else
                            type = 1;
                        if (ddlconces.Items.Count > 0 && ddlconces.SelectedItem.Text.Trim() != "Select")
                        {
                            consReason = Convert.ToString(ddlconces.SelectedItem.Value);
                            deductionAmount(degreecode, consReason, textcode, type, ref conHeaderfk, ref conLedgerfk);
                            validate = conLedgerfk.Count != 0 ? true : false;
                        }
                        else
                        {
                            validate = true;
                            consAmt = 0;
                            consReason = "0";
                        }
                    }
                    else
                        validate = true;
                    if (validate)
                    {
                        string IsGeneralFeeAllot = d2.GetFunction("select value from Master_Settings where settings='GeneralFeeAllot' and usercode='" + usercode + "'");
                        if (TabContainer1.ActiveTabIndex == 0)
                        {
                            #region 1
                            if (checkflage == false)
                            {
                                FpSpread3.SaveChanges();
                                int a = 0;
                                for (int i = 1; i < FpSpread3.Sheets[0].Rows.Count; i++)
                                {
                                    int.TryParse(Convert.ToString(FpSpread3.Sheets[0].Cells[i, 1].Value), out isval1);
                                    if (isval1 == 1)
                                    {
                                        //string approve = "";
                                        app_no = Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag);
                                        batchyear = d2.GetFunction("select batch_year from applyn where app_no='" + app_no + "'").Trim();
                                        // degreecode = d2.GetFunction("select degree_code  from applyn where app_no ='" + app_no + "'");
                                        degreecode = returnStudDeg(Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag));
                                        seattype = d2.GetFunction("select seattype from applyn where app_no ='" + app_no + "'");
                                        if (getfinid.Trim() != "" && getfinid.Trim() != "0" && seattype.Trim() != "" && seattype.Trim() != "0")
                                        {
                                            if (!showFee)  // Note::::::
                                            {
                                                if (IsGeneralFeeAllot.Trim() == "1")
                                                {
                                                    generalFeeallot(degreecode, seattype, batchyear, getfinid, app_no, conHeaderfk, conLedgerfk, ref  cheCkSave, ref  fllg, type, consReason, textcode);
                                                }
                                                else
                                                {
                                                    cheCkSave = true;
                                                    fllg = 1;
                                                }
                                                #region general
                                                //string qur = "select LedgerFK,HeaderFK,PayMode,FeeAmount,deductAmout,DeductReason,TotalAmount,RefundAmount,FeeCategory,FineAmount from FT_FeeAllotDegree where DegreeCode='" + degreecode + "' and BatchYear ='" + batchyear + "' and SeatType ='" + seattype + "' and FeeCategory ='" + textcode + "' and FinYearFK ='" + getfinid + "'";
                                                //ds = d2.select_method_wo_parameter(qur, "text");
                                                //if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                                //{
                                                //    for (k = 0; k < ds.Tables[0].Rows.Count; k++)
                                                //    {
                                                //        headerfk = Convert.ToString(ds.Tables[0].Rows[k]["HeaderFK"]);
                                                //        leadgerfk = Convert.ToString(ds.Tables[0].Rows[k]["LedgerFK"]).Trim();
                                                //        double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["FeeAmount"]), out feeamount);
                                                //        double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["deductAmout"]), out deduct);
                                                //        deductrea = Convert.ToString(ds.Tables[0].Rows[k]["DeductReason"]);
                                                //        double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["TotalAmount"]), out totalamount);
                                                //        double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["FineAmount"]), out finamount);
                                                //        refund = Convert.ToString(ds.Tables[0].Rows[k]["RefundAmount"]);
                                                //        feecatg = Convert.ToString(ds.Tables[0].Rows[k]["FeeCategory"]);
                                                //        paymode = Convert.ToString(ds.Tables[0].Rows[k]["PayMode"]);
                                                //        if (conHeaderfk.ContainsKey(Convert.ToString(headerfk)) && conLedgerfk.ContainsKey(Convert.ToString(leadgerfk)) && totalamount != 0)
                                                //        {
                                                //            double.TryParse(Convert.ToString(conLedgerfk[leadgerfk]), out consAmt);
                                                //            getInsertValues(type, ref totalamount, ref consAmt, ref deduct);
                                                //            deductrea = consReason;
                                                //        }
                                                //        else
                                                //            getInsertValues(type, ref totalamount, ref consAmt, ref deduct);

                                                //        string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + textcode + "')  and App_No in('" + app_no + "')) update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='1',FeeAmount='" + feeamount + "',PaidAmount='0' ,DeductAmout='" + deduct + "',DeductReason='" + deductrea + "',FromGovtAmt='0',TotalAmount='" + totalamount + "',RefundAmount='" + refund + "',IsFeeDeposit='0',FeeAmountMonthly='',PayMode='" + paymode + "',PayStartDate='',PaidStatus='0',DueDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',DueAmount='0',FineAmount='" + finamount + "',BalAmount='" + totalamount + "' where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + feecatg + "') and App_No in('" + app_no + "') else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1," + app_no + ",'" + leadgerfk + "','" + headerfk + "','" + feeamount + "','" + deduct + "'," + deductrea + ",'0','" + totalamount + "','" + refund + "','0','','" + paymode + "','" + feecatg + "','','0','','0','" + finamount + "','" + totalamount + "','" + getfinid + "')";
                                                //        a = dt.update_method_wo_parameter(insupdquery, "text");
                                                //        cheCkSave = true;
                                                //        fllg = 1;
                                                //    }
                                                //}
                                                #endregion
                                            }
                                            else
                                            {
                                                #region grid
                                                for (int gRow = 0; gRow < gridAdmLedge.Rows.Count; gRow++)
                                                {
                                                    Label hdrid = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmHeaderId");
                                                    Label lgrid = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmLedgerId");
                                                    TextBox feeamt = (TextBox)gridAdmLedge.Rows[gRow].FindControl("txtAdmFeeAllot");
                                                    TextBox dedamt = (TextBox)gridAdmLedge.Rows[gRow].FindControl("txtAdmDeduc");
                                                    Label dedrea = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmDedRes");
                                                    Label totamt = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmFeeTotal");
                                                    Label finamt = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmFine");
                                                    Label paymo = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmPaymode");
                                                    Label refamt = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmRefund");

                                                    headerfk = hdrid.Text;
                                                    leadgerfk = lgrid.Text;
                                                    double.TryParse(Convert.ToString(feeamt.Text), out feeamount);
                                                    double.TryParse(Convert.ToString(dedamt.Text), out deduct);
                                                    double.TryParse(Convert.ToString(totamt.Text), out totalamount);
                                                    deductrea = dedrea.Text;
                                                    totalamount = feeamount - deduct;
                                                    if (conHeaderfk.ContainsKey(Convert.ToString(headerfk)) && conLedgerfk.ContainsKey(Convert.ToString(leadgerfk)) && totalamount != 0)
                                                    {
                                                        double.TryParse(Convert.ToString(conLedgerfk[leadgerfk]), out consAmt);
                                                        getInsertValues(type, ref totalamount, ref consAmt, ref deduct);
                                                        deductrea = consReason;
                                                    }
                                                    else
                                                        getInsertValues(type, ref totalamount, ref consAmt, ref deduct);
                                                    double.TryParse(Convert.ToString(finamt.Text), out finamount);
                                                    refund = refamt.Text;
                                                    // feecatg = feecat.Value;
                                                    feecatg = textcode;
                                                    paymode = paymo.Text;
                                                    string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + textcode + "')  and App_No in('" + app_no + "')) update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='1',FeeAmount='" + feeamount + "',PaidAmount='0' ,DeductAmout='" + deduct + "',DeductReason='" + deductrea + "',FromGovtAmt='0',TotalAmount='" + totalamount + "',RefundAmount='" + refund + "',IsFeeDeposit='0',FeeAmountMonthly='',PayMode='" + paymode + "',PayStartDate='',PaidStatus='0',DueDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',DueAmount='0',FineAmount='" + finamount + "',BalAmount='" + totalamount + "' where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + feecatg + "') and App_No in('" + app_no + "') else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1," + app_no + ",'" + leadgerfk + "','" + headerfk + "','" + feeamount + "','" + deduct + "'," + deductrea + ",'0','" + totalamount + "','" + refund + "','0','','" + paymode + "','" + feecatg + "','','0','','0','" + finamount + "','" + totalamount + "','" + getfinid + "')";
                                                    a = dt.update_method_wo_parameter(insupdquery, "text");
                                                    cheCkSave = true;
                                                    fllg = 1;
                                                }
                                                #endregion
                                            }
                                            if (!alAppNo.Contains(app_no) && cheCkSave)
                                            {
                                                alAppNo.Add(app_no);
                                                blAppNo = true;
                                            }

                                            #region registration
                                            if (AdmConfFormat() == 0 && blAppNo && cheCkSave)
                                            {
                                                //Admit
                                                admissionNumGeneration(app_no, seattype, degreecode, batchyear, cursem, ref blAppNo, applycurrentdate);
                                            }
                                            #endregion
                                        }
                                    }
                                }
                            }
                            else
                            {
                                errorspan.InnerHtml = "Please Select Any one Category";
                                poperrjs.Visible = true;
                            }
                            #endregion
                        }
                        else if (TabContainer1.ActiveTabIndex == 1)
                        {
                            #region 2
                            int a = 0;
                            if (checkflage == false)
                            {
                                FpSpread1.SaveChanges();
                                for (int i = 1; i < FpSpread1.Sheets[0].Rows.Count; i++)
                                {
                                    isval1 = Convert.ToInt32(FpSpread1.Sheets[0].Cells[i, 1].Value);

                                    if (isval1 == 1)
                                    {
                                        //string approve = "";
                                        app_no = Convert.ToString(FpSpread1.Sheets[0].Cells[i, 0].Tag);
                                        batchyear = d2.GetFunction("select batch_year from applyn where app_no='" + app_no + "'").Trim();
                                        degreecode = returnStudDeg(Convert.ToString(FpSpread1.Sheets[0].Cells[i, 0].Tag));
                                        //approve = approve + " update applyn set Admission_Status='1',selection_status='1',AdmitedDate='" + applycurrentdate + "',seattype='" + seattype + "' where app_no ='" + FpSpread1.Sheets[0].Cells[i, 0].Tag + "'";
                                        //a = dt.update_method_wo_parameter(approve, "text");
                                        seattype = d2.GetFunction("select seattype  from applyn where app_no ='" + app_no + "'");
                                        if (getfinid.Trim() != "" && getfinid.Trim() != "0" && seattype.Trim() != "" && seattype.Trim() != "0")
                                        {
                                            if (!showFee)
                                            {
                                                if (IsGeneralFeeAllot.Trim() == "1")
                                                {
                                                    generalFeeallot(degreecode, seattype, batchyear, getfinid, app_no, conHeaderfk, conLedgerfk, ref  cheCkSave, ref  fllg, type, consReason, textcode);
                                                }
                                                else
                                                {
                                                    cheCkSave = true;
                                                    fllg = 1;
                                                }
                                                #region general allot
                                                //string qur = "select LedgerFK,HeaderFK,PayMode,FeeAmount,deductAmout,DeductReason,TotalAmount,RefundAmount,FeeCategory,FineAmount from FT_FeeAllotDegree where DegreeCode='" + degreecode + "' and BatchYear ='" + batchyear + "' and SeatType ='" + seattype + "' and FeeCategory ='" + textcode + "' and FinYearFK ='" + getfinid + "'";
                                                //ds = d2.select_method_wo_parameter(qur, "text");
                                                //if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                                //{
                                                //    for (k = 0; k < ds.Tables[0].Rows.Count; k++)
                                                //    {

                                                //        headerfk = Convert.ToString(ds.Tables[0].Rows[k]["HeaderFK"]);
                                                //        leadgerfk = Convert.ToString(ds.Tables[0].Rows[k]["LedgerFK"]).Trim();
                                                //        double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["FeeAmount"]), out feeamount);
                                                //        double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["deductAmout"]), out deduct);
                                                //        deductrea = Convert.ToString(ds.Tables[0].Rows[k]["DeductReason"]);
                                                //        double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["TotalAmount"]), out totalamount);
                                                //        double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["FineAmount"]), out finamount);
                                                //        refund = Convert.ToString(ds.Tables[0].Rows[k]["RefundAmount"]);
                                                //        feecatg = Convert.ToString(ds.Tables[0].Rows[k]["FeeCategory"]);
                                                //        paymode = Convert.ToString(ds.Tables[0].Rows[k]["PayMode"]);

                                                //        if (conHeaderfk.ContainsKey(Convert.ToString(headerfk)) && conLedgerfk.ContainsKey(Convert.ToString(leadgerfk)) && totalamount != 0)
                                                //        {
                                                //            double.TryParse(Convert.ToString(conLedgerfk[leadgerfk]), out consAmt);
                                                //            getInsertValues(type, ref totalamount, ref consAmt, ref deduct);
                                                //            deductrea = consReason;
                                                //        }
                                                //        else
                                                //            getInsertValues(type, ref totalamount, ref consAmt, ref deduct);

                                                //        string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + textcode + "')  and App_No in('" + app_no + "')) update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='1',FeeAmount='" + feeamount + "',PaidAmount='0' ,DeductAmout='" + deduct + "',DeductReason='" + deductrea + "',FromGovtAmt='0',TotalAmount='" + totalamount + "',RefundAmount='" + refund + "',IsFeeDeposit='0',FeeAmountMonthly='',PayMode='" + paymode + "',PayStartDate='',PaidStatus='0',DueDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',DueAmount='0',FineAmount='" + finamount + "',BalAmount='" + totalamount + "' where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + feecatg + "') and App_No in('" + app_no + "') else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1," + app_no + ",'" + leadgerfk + "','" + headerfk + "','" + feeamount + "','" + deduct + "'," + deductrea + ",'0','" + totalamount + "','" + refund + "','0','','" + paymode + "','" + feecatg + "','','0','','0','" + finamount + "','" + totalamount + "','" + getfinid + "')";
                                                //        a = dt.update_method_wo_parameter(insupdquery, "text");
                                                //        cheCkSave = true;
                                                //        fllg = 1;
                                                //    }
                                                //}
                                                #endregion
                                            }
                                            else
                                            {
                                                #region grid
                                                for (int gRow = 0; gRow < gridAdmLedge.Rows.Count; gRow++)
                                                {
                                                    Label hdrid = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmHeaderId");
                                                    Label lgrid = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmLedgerId");
                                                    TextBox feeamt = (TextBox)gridAdmLedge.Rows[gRow].FindControl("txtAdmFeeAllot");
                                                    TextBox dedamt = (TextBox)gridAdmLedge.Rows[gRow].FindControl("txtAdmDeduc");
                                                    Label dedrea = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmDedRes");
                                                    Label totamt = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmFeeTotal");
                                                    Label finamt = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmFine");
                                                    Label paymo = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmPaymode");
                                                    Label refamt = (Label)gridAdmLedge.Rows[gRow].FindControl("lblAdmRefund");

                                                    headerfk = hdrid.Text;
                                                    leadgerfk = lgrid.Text;
                                                    deductrea = dedrea.Text;
                                                    double.TryParse(Convert.ToString(feeamt.Text), out feeamount);
                                                    double.TryParse(Convert.ToString(dedamt.Text), out deduct);
                                                    double.TryParse(Convert.ToString(totamt.Text), out totalamount);
                                                    totalamount = feeamount - deduct;
                                                    if (conHeaderfk.ContainsKey(Convert.ToString(headerfk)) && conLedgerfk.ContainsKey(Convert.ToString(leadgerfk)) && totalamount != 0)
                                                    {
                                                        double.TryParse(Convert.ToString(conLedgerfk[leadgerfk]), out consAmt);
                                                        getInsertValues(type, ref totalamount, ref consAmt, ref deduct);
                                                        deductrea = consReason;
                                                    }
                                                    else
                                                        getInsertValues(type, ref totalamount, ref consAmt, ref deduct);

                                                    double.TryParse(Convert.ToString(finamt.Text), out finamount);
                                                    refund = refamt.Text;
                                                    feecatg = textcode;
                                                    paymode = paymo.Text;

                                                    string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + textcode + "')  and App_No in('" + app_no + "')) update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='1',FeeAmount='" + feeamount + "',PaidAmount='0' ,DeductAmout='" + deduct + "',DeductReason='" + deductrea + "',FromGovtAmt='0',TotalAmount='" + totalamount + "',RefundAmount='" + refund + "',IsFeeDeposit='0',FeeAmountMonthly='',PayMode='" + paymode + "',PayStartDate='',PaidStatus='0',DueDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',DueAmount='0',FineAmount='" + finamount + "',BalAmount='" + totalamount + "' where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + feecatg + "') and App_No in('" + app_no + "') else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1," + app_no + ",'" + leadgerfk + "','" + headerfk + "','" + feeamount + "','" + deduct + "'," + deductrea + ",'0','" + totalamount + "','" + refund + "','0','','" + paymode + "','" + feecatg + "','','0','','0','" + finamount + "','" + totalamount + "','" + getfinid + "')";
                                                    a = dt.update_method_wo_parameter(insupdquery, "text");
                                                    cheCkSave = true;
                                                    fllg = 1;
                                                }
                                                #endregion
                                            }
                                            if (!alAppNo.Contains(app_no) && cheCkSave)
                                            {
                                                alAppNo.Add(app_no);
                                                blAppNo = true;
                                            }
                                            #region registration
                                            if (AdmConfFormat() == 0 && blAppNo && cheCkSave)
                                            {
                                                //Admit
                                                admissionNumGeneration(app_no, seattype, degreecode, batchyear, cursem, ref blAppNo, applycurrentdate);
                                                //string rolladmit = "";
                                                //string stud_name = string.Empty;
                                                //string app_fromno = string.Empty;
                                                //string batchYr = string.Empty;
                                                //string Mode = string.Empty;
                                                //admissionNoGeneration();
                                                //string selQ = "select seattype,stud_name,app_formno,batch_year,mode from applyn where app_no ='" + app_no + "'";
                                                //DataSet dsval = d2.select_method_wo_parameter(selQ, "Text");
                                                //if (dsval.Tables.Count > 0 && dsval.Tables[0].Rows.Count > 0)
                                                //{
                                                //    seattype = Convert.ToString(dsval.Tables[0].Rows[0]["seattype"]);
                                                //    stud_name = Convert.ToString(dsval.Tables[0].Rows[0]["stud_name"]);
                                                //    app_fromno = Convert.ToString(dsval.Tables[0].Rows[0]["app_formno"]);
                                                //    batchYr = Convert.ToString(dsval.Tables[0].Rows[0]["batch_year"]);
                                                //    Mode = Convert.ToString(dsval.Tables[0].Rows[0]["mode"]);
                                                //}
                                                //if (string.IsNullOrEmpty(Mode))
                                                //    Mode = "1";
                                                //college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
                                                //if (admisionvalue == "1")
                                                //    rolladmit = genearateAdmissionNo(college_code, degreecode, batchYr);
                                                //else
                                                //    rolladmit = app_fromno;
                                                //if (rolladmit.Trim() == "0" || string.IsNullOrEmpty(rolladmit))
                                                //    rolladmit = app_fromno;

                                                //string regEntry = "  if exists(select * from Registration where App_No='" + app_no + "')  delete from Registration where App_No='" + app_no + "' insert into Registration (App_No,Adm_Date,Roll_Admit,Roll_No,RollNo_Flag,Reg_No,Stud_Name,Batch_Year,degree_code,college_code,CC,DelFlag,Exam_Flag,Current_Semester,mode)values('" + app_no + "','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','" + rolladmit + "','" + app_fromno + "','1','" + app_fromno + "','" + stud_name + "','" + batchyear + "','" + degreecode + "','" + ddl_collegename.SelectedItem.Value + "','0','0','OK','" + cursem + "','" + Mode + "')";
                                                //int s = d2.update_method_wo_parameter(regEntry, "Text");
                                                //blAppNo = false;
                                            }
                                            #endregion
                                        }
                                    }
                                }
                            }
                            else
                            {
                                errorspan.InnerHtml = "Please Select Any one Category";
                                poperrjs.Visible = true;

                            }
                            #endregion
                        }

                    }
                    else
                        fllg = 2;

                    #endregion
                }
            }
            if (fllg == 0)
            {
                errorspan.InnerHtml = "No Fees Available Please Set General FeeAllot";
                poperrjs.Visible = true;
            }
            else if (fllg == 1)
            {
                errorspan.InnerHtml = "Admitted Successfully";
                poperrjs.Visible = true;
            }
            else if (fllg == 2)
            {
                errorspan.InnerHtml = "Please Set Concession Settings";
                poperrjs.Visible = true;
            }
            else if (fllg == -1)
            {
                errorspan.InnerHtml = "Choose Atleast One Student And Than Proceed";
                poperrjs.Visible = true;
            }
        }
        else
        {
            errorspan.InnerHtml = "Please Select Financial Year";
            poperrjs.Visible = true;
        }
    }

    protected void generalFeeallot(string degreecode, string seattype, string batchyear, string getfinid, string app_no, Hashtable conHeaderfk, Hashtable conLedgerfk, ref bool cheCkSave, ref int fllg, int type, string consReason, string textcode)
    {
        #region general
        string headerfk = "";
        string leadgerfk = "";
        double feeamount = 0;
        double deduct = 0;
        string deductrea = "";
        double totalamount = 0;
        string refund = "";
        string feecatg = "";
        double finamount = 0;
        string paymode = "";
        double consAmt = 0;
        string qur = "select LedgerFK,HeaderFK,PayMode,FeeAmount,deductAmout,DeductReason,TotalAmount,RefundAmount,FeeCategory,FineAmount from FT_FeeAllotDegree where DegreeCode='" + degreecode + "' and BatchYear ='" + batchyear + "' and SeatType ='" + seattype + "' and FeeCategory ='" + textcode + "' and FinYearFK ='" + getfinid + "'";
        ds = d2.select_method_wo_parameter(qur, "text");
        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            for (int k = 0; k < ds.Tables[0].Rows.Count; k++)
            {
                headerfk = Convert.ToString(ds.Tables[0].Rows[k]["HeaderFK"]);
                leadgerfk = Convert.ToString(ds.Tables[0].Rows[k]["LedgerFK"]).Trim();
                double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["FeeAmount"]), out feeamount);
                double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["deductAmout"]), out deduct);
                deductrea = Convert.ToString(ds.Tables[0].Rows[k]["DeductReason"]);
                double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["TotalAmount"]), out totalamount);
                double.TryParse(Convert.ToString(ds.Tables[0].Rows[k]["FineAmount"]), out finamount);
                refund = Convert.ToString(ds.Tables[0].Rows[k]["RefundAmount"]);
                feecatg = Convert.ToString(ds.Tables[0].Rows[k]["FeeCategory"]);
                paymode = Convert.ToString(ds.Tables[0].Rows[k]["PayMode"]);
                consAmt = 0;
                if (conHeaderfk.ContainsKey(Convert.ToString(headerfk)) && conLedgerfk.ContainsKey(Convert.ToString(leadgerfk)) && totalamount != 0)
                {
                    double.TryParse(Convert.ToString(conLedgerfk[leadgerfk]), out consAmt);
                    getInsertValues(type, ref totalamount, ref consAmt, ref deduct);
                    deductrea = consReason;
                }
                else
                    getInsertValues(type, ref totalamount, ref consAmt, ref deduct);

                string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + textcode + "')  and App_No in('" + app_no + "')) update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='1',FeeAmount='" + feeamount + "',PaidAmount='0' ,DeductAmout='" + deduct + "',DeductReason='" + deductrea + "',FromGovtAmt='0',TotalAmount='" + totalamount + "',RefundAmount='" + refund + "',IsFeeDeposit='0',FeeAmountMonthly='',PayMode='" + paymode + "',PayStartDate='',PaidStatus='0',DueDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',DueAmount='0',FineAmount='" + finamount + "',BalAmount='" + totalamount + "' where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + feecatg + "') and App_No in('" + app_no + "') else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1," + app_no + ",'" + leadgerfk + "','" + headerfk + "','" + feeamount + "','" + deduct + "'," + deductrea + ",'0','" + totalamount + "','" + refund + "','0','','" + paymode + "','" + feecatg + "','','0','','0','" + finamount + "','" + totalamount + "','" + getfinid + "')";
                int a = dt.update_method_wo_parameter(insupdquery, "text");
                cheCkSave = true;
                fllg = 1;
            }
        }
        #endregion
    }


    protected void admissionNumGeneration(string app_no, string seattype, string degreecode, string batchyear, string cursem, ref bool blAppNo, DateTime applycurrentdate)
    {
        try
        {
            //Admit
            string rolladmit = "";
            string approve = "";
            string stud_name = string.Empty;
            string app_fromno = string.Empty;
            string batchYr = string.Empty;
            string Mode = string.Empty;
            admissionNoGeneration();
            string selQ = "select seattype,stud_name,app_formno,batch_year,mode from applyn where app_no ='" + app_no + "'";
            DataSet dsval = d2.select_method_wo_parameter(selQ, "Text");
            if (dsval.Tables.Count > 0 && dsval.Tables[0].Rows.Count > 0)
            {
                seattype = Convert.ToString(dsval.Tables[0].Rows[0]["seattype"]);
                stud_name = Convert.ToString(dsval.Tables[0].Rows[0]["stud_name"]);
                app_fromno = Convert.ToString(dsval.Tables[0].Rows[0]["app_formno"]);
                batchYr = Convert.ToString(dsval.Tables[0].Rows[0]["batch_year"]);
                Mode = Convert.ToString(dsval.Tables[0].Rows[0]["mode"]);
            }
            if (string.IsNullOrEmpty(Mode))
                Mode = "1";
            college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
            if (admisionvalue == "1")
                rolladmit = genearateAdmissionNo(college_code, degreecode, batchYr);
            else
                rolladmit = app_fromno;
            if (rolladmit.Trim() == "0" || string.IsNullOrEmpty(rolladmit))
                rolladmit = app_fromno;

            string regEntry = "  if exists(select * from Registration where App_No='" + app_no + "')  delete from Registration where App_No='" + app_no + "' insert into Registration (App_No,Adm_Date,Roll_Admit,Roll_No,RollNo_Flag,Reg_No,Stud_Name,Batch_Year,degree_code,college_code,CC,DelFlag,Exam_Flag,Current_Semester,mode)values('" + app_no + "','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','" + rolladmit + "','" + app_fromno + "','1','" + app_fromno + "','" + stud_name + "','" + batchyear + "','" + degreecode + "','" + ddl_collegename.SelectedItem.Value + "','0','0','OK','" + cursem + "','" + Mode + "')";
            int s = d2.update_method_wo_parameter(regEntry, "Text");
            blAppNo = false;
            approve = " update applyn set Admission_Status='1',selection_status='1',seattype='" + seattype + "',AdmitedDate='" + applycurrentdate + "' where app_no ='" + app_no + "'";
            int a = dt.update_method_wo_parameter(approve, "text");
        }
        catch { }
    }


    public void btn_errorclose_Click(object sender, EventArgs e)
    {
        if (ShowFeeStruct() == 0)
        {
            imgdiv2.Visible = false;

            if ((TabContainer1.ActiveTabIndex == 0 && FpSpread3.Visible == true) || (TabContainer1.ActiveTabIndex == 1 && FpSpread1.Visible == true))
            {
                admitsave(false);
            }
            string errMsg = errorspan.InnerHtml;
            Button1_Click(sender, e);
            errorspan.InnerHtml = errMsg;
        }
        else
        {
            if (gridAdmLedge.Rows.Count > 0)
            {
                imgdiv2.Visible = false;

                if ((TabContainer1.ActiveTabIndex == 0 && FpSpread3.Visible == true) || (TabContainer1.ActiveTabIndex == 1 && FpSpread1.Visible == true))
                {
                    admitsave(true);
                }
                string errMsg = errorspan.InnerHtml;
                Button1_Click(sender, e);
                errorspan.InnerHtml = errMsg;
            }
            else
            {
                poperrjs.Visible = true;
                errorspan.InnerHtml = "No Fees Available";
            }
        }

        #region old
        //bool AdmLedgerOk = true;
        //bool sameLedg = false;
        //if (cbAdmLedgeFee.Checked)
        //{
        //    AdmLedgerOk = false;
        //    if ((ddlAdmLedge1.SelectedIndex != 0 && txtAdmledge1Amt.Text.Trim('.').Length > 0) || (ddlAdmLedge2.SelectedIndex != 0 && txtAdmledge2Amt.Text.Trim('.').Length > 0))
        //    {
        //        AdmLedgerOk = true;
        //    }
        //    if (ddlAdmLedge1.SelectedIndex != 0 && ddlAdmLedge2.SelectedIndex != 0)
        //    {
        //        if (ddlAdmLedge1.SelectedValue == ddlAdmLedge2.SelectedValue)
        //        {
        //            sameLedg = true;
        //            AdmLedgerOk = false;
        //        }
        //    }
        //}
        //if (AdmLedgerOk)
        //{
        //imgdiv2.Visible = false;

        //if ((TabContainer1.ActiveTabIndex == 0 && FpSpread3.Visible == true) || (TabContainer1.ActiveTabIndex == 1 && FpSpread1.Visible == true))
        //{
        //    admitsave();
        //}
        //string errMsg = errorspan.InnerHtml;
        //Button1_Click(sender, e);
        //errorspan.InnerHtml = errMsg;
        //}
        //else
        //{
        //    poperrjs.Visible = true;
        //    if (sameLedg)
        //    {
        //        errorspan.InnerHtml = "Ledger1 and Ledger2 should not be same";
        //    }
        //    else
        //    {
        //        errorspan.InnerHtml = "Please Enter Ledger Details ";
        //    }
        //}
        #endregion
    }
    public void bindseattype()
    {
        try
        {
            ddl_seattype.Items.Clear();
            string seat = "";
            string deptquery = "select distinct TextVal,TextCode  from TextValTable where TextCriteria ='Seat' and college_code=" + ddl_collegename.SelectedItem.Value + "";
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_seattype.DataSource = ds;
                ddl_seattype.DataTextField = "TextVal";
                ddl_seattype.DataValueField = "TextCode";
                ddl_seattype.DataBind();
            }
        }
        catch
        {
        }

    }
    // zzz 6.5.2016
    public void btn_print_click(object sender, EventArgs e)
    {
        string attendance = "";
        string pagename = "Commom_Selection_Process.aspx";
        if (TabContainer1.ActiveTabIndex == 0)
        {
            attendance = "Applied Report";
            Printcontrol.loadspreaddetails(FpSpread3, pagename, attendance);
        }
        else if (TabContainer1.ActiveTabIndex == 1)
        {
            attendance = "Shortlist Report";
            Printcontrol.loadspreaddetails(FpSpread1, pagename, attendance);
        }
        else if (TabContainer1.ActiveTabIndex == 2)
        {
            attendance = "Admitted Report";
            Printcontrol.loadspreaddetails(FpSpread2, pagename, attendance);
        }
        Printcontrol.Visible = true;
    }
    public void btn_popclose_Click(object sender, EventArgs e)
    {
        imgdiv2.Visible = false;
    }
    public void btn_excel_click(object sender, EventArgs e)
    {
        try
        {
            string report = txt_excelname.Text;
            if (report.ToString().Trim() != "")
            {
                if (TabContainer1.ActiveTabIndex == 0)
                {
                    d2.printexcelreport(FpSpread3, report);
                    poperrjs.Visible = false;
                }
                else if (TabContainer1.ActiveTabIndex == 1)
                {
                    d2.printexcelreport(FpSpread1, report);
                    poperrjs.Visible = false;
                }
                else if (TabContainer1.ActiveTabIndex == 2)
                {
                    d2.printexcelreport(FpSpread2, report);
                    poperrjs.Visible = false;
                }
            }
            else
            {
                errorspan.InnerHtml = "Please Enter Your Report Name";
                poperrjs.Visible = true;
            }
            btn_excel.Focus();
        }

        catch (Exception ex)
        {
            errorspan.InnerHtml = ex.ToString();
        }
    }
    public void txtexcelname_TextChanged(object sender, EventArgs e)
    {
        txt_excelname.Visible = true;
        btn_excel.Visible = true;
        btn_print.Visible = true;
        lbl_reportname.Visible = true;
        btn_excel.Focus();
        if (txt_excelname.Text == "")
        {
            poperrjs.Visible = true;
        }
        else
        {
            poperrjs.Visible = false;
        }
    }
    protected void FpSpread4_command(object sender, EventArgs e)
    {
        try
        {
            tnspan.Visible = false;
            Tancetspan.Visible = false;
            string activerow = FpSpread4.ActiveSheetView.ActiveRow.ToString();
            string activecol = FpSpread4.ActiveSheetView.ActiveColumn.ToString();
            if (activecol == "4")
            {
                string app_no = Convert.ToString(FpSpread4.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                Session["pdfapp_no"] = Convert.ToString(app_no);
                //string jg = "update applyn set isview='1' where app_no='" + FpSpread4.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text + "'  and degree_code='" + ddldept.SelectedValue + "' and college_code='" + college_code + "'";
                //int k = dt.update_method_wo_parameter(jg, "text");
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                string type = ddltype.SelectedItem.Text;
                string edulevel = ddledu.SelectedItem.Text;
                string grduation = ddldegree.SelectedItem.Text;
                string course = ddldept.SelectedItem.Text;
                if (edulevel.ToString().ToUpper() == "PG")
                {
                    pgdiv_verification.Visible = true;
                    ugdiv_verification.Visible = false;
                }
                else if (edulevel.ToString().ToUpper() == "UG")
                {
                    pgdiv_verification.Visible = false;
                    ugdiv_verification.Visible = true;
                }

                string query = "select app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name,sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,parent_occu,mother_tongue,religion,citizen,community,caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet,degree_code from applyn a where a.app_no='" + app_no + "'";
                query = query + " select course_entno,course_code,university_code,Vocational_stream,Institute_name,percentage,instaddress,medium,branch_code ,Part1Language,Part2Language,isgrade,uni_state,registration_no,type_semester,majorallied_percent,major_percent,type_major,tancet_mark,tancetmark_year from Stud_prev_details where app_no ='" + app_no + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "text");
                if (ds.Tables[0].Rows.Count > 0)
                {

                    college_span.InnerHtml = ":  " + Convert.ToString(type);
                    degree_Span.InnerHtml = ":  " + Convert.ToString(edulevel);
                    graduation_span.InnerHtml = ":  " + Convert.ToString(d2.GetFunction("select c.Course_Name from degree d,Department dt,Course c  where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and  degree_code=" + Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]) + ""));
                    course_span.InnerHtml = ":  " + Convert.ToString(d2.GetFunction("select dt.Dept_Name from degree d,Department dt,Course c  where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and  degree_code=" + Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]) + ""));

                    applicantname_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]);

                    dob_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["dob"]);
                    if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "0")
                    {
                        gender_span.InnerHtml = ":  Male";
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "1")
                    {
                        gender_span.InnerHtml = ":  Female";
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "2")
                    {
                        gender_span.InnerHtml = ":  Transgender";
                    }
                    parent_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_name"]);

                    string occupation = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["parent_occu"]));
                    occupation_span.InnerHtml = ":  " + occupation.ToString();

                    string mothertonge = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["mother_tongue"]));
                    mothertongue_span.InnerHtml = ":  " + Convert.ToString(mothertonge);


                    string relisgion = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["religion"]));
                    religion_span.InnerHtml = ":  " + Convert.ToString(relisgion);

                    string city = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["citizen"]));
                    nationality_span.InnerHtml = ":  " + Convert.ToString(city);

                    string coummnity = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["community"]));
                    commuity_span.InnerHtml = ":  " + Convert.ToString(coummnity);

                    if (Convert.ToString(ds.Tables[0].Rows[0]["caste"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["caste"]) != "0")
                    {
                        string scas = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["caste"]));
                        Caste_span.InnerHtml = ":  " + Convert.ToString(scas);
                    }
                    else
                    {
                        Caste_span.InnerHtml = ":  -";
                    }

                    if (Convert.ToString(ds.Tables[0].Rows[0]["TamilOrginFromAndaman"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["TamilOrginFromAndaman"]) != "False")
                    {
                        tamilorigin_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        tamilorigin_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["IsExService"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["IsExService"]) != "False")
                    {
                        Ex_service_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Ex_service_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["isdisable"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["isdisable"]) != "False")
                    {
                        Differentlyable_Span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Differentlyable_Span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["first_graduate"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["first_graduate"]) != "False")
                    {
                        first_generation_Span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        first_generation_Span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]) != "False")
                    {
                        residancerequired_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        residancerequired_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]) != "0")
                    {
                        string disy = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]));
                        sport_span.InnerHtml = ":  " + Convert.ToString(disy);
                    }
                    else
                    {
                        sport_span.InnerHtml = ":  -";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]) != "0")
                    {
                        string cocour = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]));
                        Co_Curricular_span.InnerHtml = ":  " + Convert.ToString(cocour);
                    }
                    else
                    {
                        Co_Curricular_span.InnerHtml = ":  -";
                    }

                    if (Convert.ToString(ds.Tables[0].Rows[0]["ncccadet"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["ncccadet"]) != "False")
                    {
                        ncccadetspan.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        ncccadetspan.InnerHtml = ":  No";
                    }

                    if (Convert.ToString(ds.Tables[1].Rows[0]["Vocational_stream"]).Trim() != "" && Convert.ToString(ds.Tables[1].Rows[0]["Vocational_stream"]) != "False")
                    {
                        Vocationalspan.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Vocationalspan.InnerHtml = ":  No";
                    }

                    caddressline1_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_addressC"]);
                    string address = Convert.ToString(ds.Tables[0].Rows[0]["Streetc"]);
                    if (ds.Tables[0].Rows[0]["Streetc"].ToString().Trim() != "")
                    {

                        string[] split = address.Split('/');
                        if (split.Length > 1)
                        {
                            if (Convert.ToString(split[0]).Trim() != "")
                            {
                                Addressline2_span.InnerHtml = ":  " + Convert.ToString(split[0]);
                            }
                            else
                            {
                                Addressline2_span.InnerHtml = ":  -";
                            }
                            if (Convert.ToString(split[1]).Trim() != "")
                            {
                                Addressline3_span.InnerHtml = ":  " + Convert.ToString(split[1]);
                            }
                            else
                            {
                                Addressline3_span.InnerHtml = ":  -";
                            }
                        }
                        else
                        {
                            Addressline2_span.InnerHtml = ":  " + Convert.ToString(split[0]);
                        }

                    }
                    else
                    {
                        Addressline2_span.InnerHtml = ":  -";
                        Addressline3_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Cityc"].ToString().Trim() != "")
                    {
                        city_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Cityc"]);
                    }
                    else
                    {
                        city_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_statec"].ToString().Trim() != "")
                    {
                        string state = subjectcode(ds.Tables[0].Rows[0]["parent_statec"].ToString());
                        state_span.InnerHtml = ":  " + Convert.ToString(state);
                    }
                    else
                    {
                        state_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Countryc"].ToString().Trim() != "")
                    {
                        string country = subjectcode(ds.Tables[0].Rows[0]["Countryc"].ToString());
                        Country_span.InnerHtml = ":  " + Convert.ToString(country);
                    }
                    else
                    {
                        Country_span.InnerHtml = "-";
                    }
                    if (ds.Tables[0].Rows[0]["parent_pincodec"].ToString().Trim() != "")
                    {
                        Postelcode_Span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodec"]);
                    }
                    else
                    {
                        Postelcode_Span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["Student_Mobile"].ToString().Trim() != "")
                    {
                        Mobilenumber_Span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Student_Mobile"]);
                    }
                    else
                    {
                        Mobilenumber_Span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["alter_mobileno"].ToString().Trim() != "")
                    {
                        Alternatephone_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["alter_mobileno"]);
                    }
                    else
                    {
                        Alternatephone_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["StuPer_Id"].ToString().Trim() != "")
                    {
                        emailid_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["StuPer_Id"]);
                    }
                    else
                    {
                        emailid_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_phnoc"].ToString().Trim() != "")
                    {
                        std_ist_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_phnoc"]);
                    }
                    else
                    {
                        std_ist_span.InnerHtml = "-";
                    }

                    // permnant

                    paddressline1_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_addressP"]);
                    if (ds.Tables[0].Rows[0]["Streetp"].ToString().Trim() != "")
                    {
                        string streat = Convert.ToString(ds.Tables[0].Rows[0]["Streetp"]);
                        if (streat.Trim() != "")
                        {
                            string[] splitstreat = streat.Split('/');
                            if (splitstreat.Length > 1)
                            {
                                if (Convert.ToString(splitstreat[0]).Trim() != "")
                                {
                                    paddressline2_span.InnerHtml = ":  " + Convert.ToString(splitstreat[0]);
                                }
                                else
                                {
                                    paddressline2_span.InnerHtml = ":  -";
                                }
                                if (Convert.ToString(splitstreat[0]).Trim() != "")
                                {
                                    paddressline3_span.InnerHtml = ":  " + Convert.ToString(splitstreat[1]);
                                }
                                else
                                {
                                    paddressline3_span.InnerHtml = ":  -";
                                }
                            }
                            else
                            {
                                paddressline2_span.InnerHtml = ":  " + Convert.ToString(splitstreat[0]);
                            }
                        }
                        paddressline2_span.InnerHtml = ":  -";
                        paddressline3_span.InnerHtml = ":  -";
                    }
                    else
                    {
                        paddressline2_span.InnerHtml = ":  -";
                        paddressline3_span.InnerHtml = ":  -";
                    }


                    if (ds.Tables[0].Rows[0]["Cityp"].ToString().Trim() != "")
                    {
                        pcity_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Cityp"]);
                    }
                    else
                    {
                        pcity_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_statep"].ToString().Trim() != "")
                    {
                        string state = subjectcode(ds.Tables[0].Rows[0]["parent_statep"].ToString());
                        pstate_span.InnerHtml = ":  " + Convert.ToString(state);
                    }
                    else
                    {
                        pstate_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Countryp"].ToString().Trim() != "")
                    {
                        string country = subjectcode(ds.Tables[0].Rows[0]["Countryp"].ToString());
                        pcountry_span.InnerHtml = ":  " + Convert.ToString(country);
                    }
                    else
                    {
                        pcountry_span.InnerHtml = "-";
                    }
                    if (ds.Tables[0].Rows[0]["parent_pincodep"].ToString().Trim() != "")
                    {
                        ppostelcode_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodep"]);
                    }
                    else
                    {
                        ppostelcode_span.InnerHtml = "-";
                    }


                    if (ds.Tables[0].Rows[0]["parent_phnop"].ToString().Trim() != "")
                    {
                        pstdisd_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_phnop"]);
                    }
                    else
                    {
                        pstdisd_span.InnerHtml = "-";
                    }
                }
                if (ds.Tables[1].Rows.Count > 0)
                {
                    if (ddledu.SelectedItem.Text == "UG")
                    {
                        ugtotaldiv.Visible = true;
                        pgtotaldiv.Visible = false;
                        string courseentronumber = Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]);
                        string coursecode = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);
                        string university_code = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                        string institutename = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);
                        string percentage = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                        string institueaddress = Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]);
                        string medium = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);
                        string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Part1Language"]);
                        string part2language = Convert.ToString(ds.Tables[1].Rows[0]["Part2Language"]);
                        string isgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]);
                        string university_state = Convert.ToString(ds.Tables[1].Rows[0]["uni_state"]);
                        // string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);

                        if (coursecode.Trim() != "")
                        {
                            string course1 = subjectcode(coursecode);
                            qualifyingexam_span.InnerHtml = ":  " + Convert.ToString(course1);
                        }
                        else
                        {
                            qualifyingexam_span.InnerHtml = ":  -";
                        }


                        if (institutename.Trim() != "")
                        {
                            Nameofschool_span.InnerHtml = ":  " + Convert.ToString(institutename);
                        }
                        else
                        {
                            Nameofschool_span.InnerHtml = "";
                        }
                        if (institueaddress.Trim() != "")
                        {
                            locationofschool_Span.InnerHtml = ":  " + Convert.ToString(institueaddress);
                        }
                        else
                        {
                            locationofschool_Span.InnerHtml = "";
                        }
                        if (medium.Trim() != "")
                        {
                            string m = subjectcode(medium);
                            mediumofstudy_span.InnerHtml = ":  " + Convert.ToString(m);
                        }
                        else
                        {
                            mediumofstudy_span.InnerHtml = ":  -";
                        }
                        if (university_code.Trim() != "")
                        {
                            string univ = subjectcode(university_code);
                            qualifyingboard_span.InnerHtml = ":  " + Convert.ToString(univ);

                        }
                        else
                        {
                            qualifyingboard_span.InnerHtml = ":  -";
                        }
                        if (isgrade.Trim() != "")
                        {
                            if (isgrade == "True")
                            {
                                marksgrade_span.InnerHtml = ":  Grade";
                            }
                            else
                            {
                                marksgrade_span.InnerHtml = ":  Marks";
                            }
                        }

                        string markquery = "select psubjectno,registerno,acual_marks,max_marks,noofattempt,pass_month,pass_year,semyear ,grade from perv_marks_history  where course_entno ='" + courseentronumber + "'";
                        ds.Clear();
                        ds = dt.select_method_wo_parameter(markquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataTable data = new DataTable();
                            DataRow dr = null;
                            Hashtable hash = new Hashtable();
                            data.Columns.Add("Language", typeof(string));
                            data.Columns.Add("Subject", typeof(string));
                            data.Columns.Add("Marks Obtained", typeof(string));
                            data.Columns.Add("Month", typeof(string));
                            data.Columns.Add("Year", typeof(string));
                            data.Columns.Add("Register No / Roll No", typeof(string));
                            data.Columns.Add("No of Attempts", typeof(string));
                            data.Columns.Add("Maximum Marks", typeof(string));

                            hash.Add(0, "Language1");
                            hash.Add(1, "Language2");
                            hash.Add(2, " Subject1");
                            hash.Add(3, " Subject2");
                            hash.Add(4, " Subject3");
                            hash.Add(5, " Subject4");
                            hash.Add(6, " Subject5");
                            hash.Add(7, " Subject6");
                            hash.Add(8, " Subject7");
                            hash.Add(9, " Subject8");
                            hash.Add(10, " Subject9");
                            hash.Add(11, " Subject10");
                            hash.Add(12, " Subject11");

                            int totalmark = 0;
                            int maxtotal = 0;

                            for (int mark = 0; mark < ds.Tables[0].Rows.Count; mark++)
                            {
                                string subjectno = Convert.ToString(ds.Tables[0].Rows[mark]["psubjectno"]);
                                string actualmark = "";
                                if (isgrade == "True")
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[mark]["grade"]);
                                }
                                else
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[mark]["acual_marks"]);
                                }
                                string month = Convert.ToString(ds.Tables[0].Rows[mark]["pass_month"]);
                                string year = Convert.ToString(ds.Tables[0].Rows[mark]["pass_year"]);
                                string regno = Convert.ToString(ds.Tables[0].Rows[mark]["registerno"]);
                                string noofattenm = Convert.ToString(ds.Tables[0].Rows[mark]["noofattempt"]);
                                string maxmark = Convert.ToString(ds.Tables[0].Rows[mark]["max_marks"]);
                                dr = data.NewRow();
                                string lang = Convert.ToString(hash[mark]);
                                dr[0] = Convert.ToString(lang);
                                string sub = subjectcode(subjectno);
                                dr[1] = Convert.ToString(sub);
                                dr[2] = Convert.ToString(actualmark);
                                dr[3] = Convert.ToString(month);
                                dr[4] = Convert.ToString(year);
                                dr[5] = Convert.ToString(regno);
                                dr[6] = Convert.ToString(noofattenm);
                                dr[7] = Convert.ToString(maxmark);
                                data.Rows.Add(dr);
                                if (isgrade != "True")
                                {
                                    totalmark = totalmark + Convert.ToInt32(actualmark);
                                    maxtotal = maxtotal + Convert.ToInt32(maxmark);
                                }
                            }
                            if (isgrade != "True")
                            {
                                total_marks_secured.InnerHtml = ":  " + Convert.ToString(totalmark);
                                maximum_marks.InnerHtml = ":  " + Convert.ToString(maxtotal);
                                percentage_span.InnerHtml = ":  " + percentage;
                            }

                            VerificationGridug.DataSource = data;
                            VerificationGridug.DataBind();
                            if (VerificationGridug.Rows.Count > 0)
                            {
                                for (int v = 0; v < VerificationGridug.Rows.Count; v++)
                                {
                                    VerificationGridug.Rows[v].Cells[2].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[3].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[4].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[5].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[6].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[7].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                        }
                    }
                    else if (ddledu.SelectedItem.Text == "PG")
                    {
                        ugtotaldiv.Visible = false;
                        pgtotaldiv.Visible = true;
                        string courseentronumber = Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]);
                        string coursecode = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);
                        string university_code = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                        string institutename = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);
                        string percentage = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                        string institueaddress = Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]);
                        string medium = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);
                        string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Part1Language"]);
                        string part2language = Convert.ToString(ds.Tables[1].Rows[0]["Part2Language"]);
                        string isgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]);
                        string university_state = Convert.ToString(ds.Tables[1].Rows[0]["uni_state"]);
                        string typeofsubject = Convert.ToString(ds.Tables[1].Rows[0]["type_major"]);
                        string typeofsemester = Convert.ToString(ds.Tables[1].Rows[0]["type_semester"]);
                        string regno = Convert.ToString(ds.Tables[1].Rows[0]["registration_no"]);
                        string major = Convert.ToString(ds.Tables[1].Rows[0]["branch_code"]);
                        string majorpercentage = Convert.ToString(ds.Tables[1].Rows[0]["major_percent"]);
                        string majorallidepercentage = Convert.ToString(ds.Tables[1].Rows[0]["majorallied_percent"]);
                        string Tancet = Convert.ToString(ds.Tables[1].Rows[0]["tancet_mark"]);
                        string Tancetyear = Convert.ToString(ds.Tables[1].Rows[0]["tancetmark_year"]);

                        percentagemajorspan.InnerHtml = ":  " + Convert.ToString(percentage);
                        majorsubjectspan.InnerHtml = ":  " + Convert.ToString(majorpercentage);
                        alliedmajorspan.InnerHtml = ":  " + Convert.ToString(majorallidepercentage);

                        if (coursecode.Trim() != "")
                        {
                            string course1 = subjectcode(coursecode);
                            ugqualifyingexam_span.InnerHtml = ":  " + Convert.ToString(course1);
                        }
                        else
                        {
                            ugqualifyingexam_span.InnerHtml = ":  -";
                        }
                        if (institutename.Trim() != "")
                        {
                            nameofcollege_Sapn.InnerHtml = ":  " + Convert.ToString(institutename);
                        }
                        else
                        {
                            nameofcollege_Sapn.InnerHtml = "";
                        }
                        if (institueaddress.Trim() != "")
                        {
                            locationofcollege_sapn.InnerHtml = ":  " + Convert.ToString(institueaddress);
                        }
                        else
                        {
                            locationofcollege_sapn.InnerHtml = "";
                        }
                        if (major.Trim() != "")
                        {
                            string major1 = subjectcode(major);
                            major_span.InnerHtml = ":  " + Convert.ToString(major1);
                        }
                        else
                        {
                            major_span.InnerHtml = "";
                        }
                        if (typeofsubject.Trim() != "")
                        {
                            if (typeofsubject == "1")
                            {
                                typeofsubject = "Single";
                            }
                            else if (typeofsubject == "2")
                            {
                                typeofsubject = "Double";
                            }
                            else if (typeofsubject == "3")
                            {
                                typeofsubject = "Triple";
                            }
                            typeofmajor_span.InnerHtml = ":  " + Convert.ToString(typeofsubject);
                        }
                        if (typeofsemester.Trim() != "")
                        {
                            if (typeofsemester == "True")
                            {
                                typeofsemester = "Semester";
                            }
                            else
                            {
                                typeofsemester = "Non Semester";
                            }
                            typeofsemester_span.InnerHtml = ":  " + Convert.ToString(typeofsemester);
                        }
                        if (medium.Trim() != "")
                        {
                            string lang = subjectcode(medium);
                            mediumofstudy_spanug.InnerHtml = ":  " + Convert.ToString(lang);
                        }

                        if (isgrade.Trim() != "")
                        {
                            if (isgrade == "True")
                            {
                                marksorgradeug_span.InnerHtml = ":  Grade";
                            }
                            else
                            {
                                marksorgradeug_span.InnerHtml = ":  Marks";
                            }
                        }

                        //if (isgrade.Trim() != "")
                        //{
                        //    marksorgradeug_span.InnerHtml = ":  " + Convert.ToString(isgrade);
                        //}
                        if (regno.Trim() != "")
                        {
                            reg_no_span.InnerHtml = ":  " + Convert.ToString(regno);
                        }
                        if (type == "MCA")
                        {
                            tnspan.Visible = true;
                            Tancetspan.Visible = true;
                            Tancetspan.InnerHtml = ": " + Convert.ToString(Tancet) + " - " + Convert.ToString(Tancetyear);
                        }

                        string pgquery = "select psubjectno,subject_typeno,acual_marks,max_marks,pass_month,pass_year,semyear ,grade from perv_marks_history where course_entno ='" + courseentronumber + "'";
                        ds.Clear();
                        ds = dt.select_method_wo_parameter(pgquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataTable data = new DataTable();
                            DataRow dr = null;
                            Hashtable hash = new Hashtable();
                            data.Columns.Add("S.No", typeof(string));
                            //  data.Columns.Add("Sem/Year", typeof(string));
                            data.Columns.Add("Subject", typeof(string));
                            data.Columns.Add("Subject type", typeof(string));
                            data.Columns.Add("Marks", typeof(string));
                            data.Columns.Add("Month", typeof(string));
                            data.Columns.Add("Year", typeof(string));
                            data.Columns.Add("Maximum Marks", typeof(string));
                            int sno = 0;
                            for (int pg = 0; pg < ds.Tables[0].Rows.Count; pg++)
                            {
                                sno++;
                                string subjectno = Convert.ToString(ds.Tables[0].Rows[pg]["psubjectno"]);
                                string subjecttypeno = Convert.ToString(ds.Tables[0].Rows[pg]["subject_typeno"]);
                                string actualmark = "";
                                if (isgrade == "True")
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[pg]["grade"]);
                                }
                                else
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[pg]["acual_marks"]);
                                }

                                string month = Convert.ToString(ds.Tables[0].Rows[pg]["pass_month"]);
                                string year = Convert.ToString(ds.Tables[0].Rows[pg]["pass_year"]);
                                // string noofattenm = Convert.ToString(ds.Tables[0].Rows[pg]["noofattempt"]);
                                string maxmark = Convert.ToString(ds.Tables[0].Rows[pg]["max_marks"]);
                                dr = data.NewRow();
                                dr[0] = Convert.ToString(sno);
                                string subject = subjectcode(subjectno);
                                dr[1] = Convert.ToString(subject);
                                string typesub = subjectcode(subjecttypeno);
                                dr[2] = Convert.ToString(typesub);
                                dr[3] = Convert.ToString(actualmark);
                                dr[4] = Convert.ToString(month);
                                dr[5] = Convert.ToString(year);
                                dr[6] = Convert.ToString(maxmark);
                                data.Rows.Add(dr);
                            }
                            Verificationgridpg.DataSource = data;
                            Verificationgridpg.DataBind();
                            if (VerificationGridug.Rows.Count > 0)
                            {
                                for (int v = 0; v < Verificationgridpg.Rows.Count; v++)
                                {
                                    Verificationgridpg.Rows[v].Cells[3].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[4].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[5].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[6].HorizontalAlign = HorizontalAlign.Center;

                                }
                            }
                        }

                    }
                }
            }

        }
        catch (Exception ex)
        {

        }

    }
    protected void btn_click(object sender, EventArgs e)
    {
        panel4.Visible = false;
        //    mdl_full_employee_details.Hide();
    }
    protected void Checkselect_CheckedChanged(object sender, EventArgs e)
    {
        if (Convert.ToInt32(ViewState["spvl"]) == 0)
        {
            if (ckbx.Checked == true)
            {
                for (int j = 0; j < FpSpread3.Sheets[0].RowCount; j++)
                {
                    FpSpread3.Sheets[0].Cells[j, 1].Value = 1;
                }
            }
            else if (ckbx.Checked == false)
            {
                for (int j = 0; j < FpSpread3.Sheets[0].RowCount; j++)
                {
                    FpSpread3.Sheets[0].Cells[j, 1].Value = 0;
                }
            }
            btnapprove.Focus();
        }
        if (Convert.ToInt32(ViewState["spvl"]) == 1)
        {
            if (ckbx.Checked == true)
            {
                for (int j = 0; j < FpSpread3.Sheets[0].RowCount; j++)
                {
                    FpSpread3.Sheets[0].Cells[j, 1].Value = 1;
                }
            }
            else if (ckbx.Checked == false)
            {
                for (int j = 0; j < FpSpread3.Sheets[0].RowCount; j++)
                {
                    FpSpread3.Sheets[0].Cells[j, 1].Value = 0;
                }
            }
            btnapprove.Focus();
        }
        else if (Convert.ToInt32(ViewState["spvl"]) == 2)
        {
            if (ckbx.Checked == true)
            {
                for (int j = 0; j < FpSpread1.Sheets[0].RowCount; j++)
                {
                    FpSpread1.Sheets[0].Cells[j, 1].Value = 1;
                }
            }
            else if (ckbx.Checked == false)
            {
                for (int j = 0; j < FpSpread1.Sheets[0].RowCount; j++)
                {
                    FpSpread1.Sheets[0].Cells[j, 1].Value = 0;
                }
            }
            Button2.Focus();
        }
        else if (Convert.ToInt32(ViewState["spvl"]) == 3)
        {
            if (ckbx.Checked == true)
            {
                for (int j = 0; j < FpSpread2.Sheets[0].RowCount; j++)
                {
                    FpSpread2.Sheets[0].Cells[j, 1].Value = 1;
                }
            }
            else if (ckbx.Checked == false)
            {
                for (int j = 0; j < FpSpread2.Sheets[0].RowCount; j++)
                {
                    FpSpread2.Sheets[0].Cells[j, 1].Value = 0;
                }
            }
            Button3.Focus();
        }
        else if (Convert.ToInt32(ViewState["spvl"]) == 4)
        {
            if (ckbx.Checked == true)
            {
                for (int j = 0; j < FpSpread4.Sheets[0].RowCount; j++)
                {
                    FpSpread4.Sheets[0].Cells[j, 3].Value = 1;
                }
            }
            else if (ckbx.Checked == false)
            {
                for (int j = 0; j < FpSpread4.Sheets[0].RowCount; j++)
                {
                    FpSpread4.Sheets[0].Cells[j, 3].Value = 0;
                }
            }
            Button9.Focus();
        }
    }

    //tab selected changed
    protected void TabContainer1_ActiveTabChanged(object sender, EventArgs e)
    {
        btnconformrecpt.Visible = false;
        btnFeeUpdate.Visible = false;
        lblstudmsg.Visible = false;
        Button9.Visible = false;
        ckbx.Checked = false;
        ShowAllCb.Visible = false;
        TabContainer1.Width = 960;
        spvl = 0;
        ViewState["spvl"] = spvl;
        rights();
        FpSpread1.Visible = false;
        FpSpread3.Visible = false;
        buttnleft.Visible = false;
        loadadmitedvalue();
        if (fg != 6)
        {
            TabContainer1.ActiveTabIndex = fg;
        }
        if (TabContainer1.ActiveTabIndex == 0)
        {
            spvl = 1;
            ViewState["spvl"] = spvl;
            firsttable.Attributes.Add("Style", "border-bottom-style: solid; border-top-style: solid;border-left-style: solid; border-right-style: solid; background-color: #e3e3ef;border-width: 0.2px; border-color: indigo; border-radius: 5px; left: 16px; top: 0px;position: absolute; width: 950px;");
            Label61.Visible = false;
            DropDownList2.Visible = false;
            btn_pdf.Visible = true;
            Button9.Visible = false;
            FpSpread1.Visible = false;
            FpSpread2.Visible = false;
            FpSpread4.Visible = false;
            FpSpread3.Visible = true;
            btnadmitcard.Visible = false;
            btnadmitprint.Visible = false;
            btnleft.Visible = false;
            btnconform.Visible = false;
            btnunpaid.Visible = false;
            btn_ch_gen.Visible = false;
            btnconform.Visible = false;
            btn_calltr.Visible = false;
            cbpersonal.Visible = false;
            //
            coursedetails.Visible = false;
            ugtotaldiv.Visible = false;
            Academicinfo.Visible = false;
            Button6.Visible = false;
            divstuddt.Visible = false;
            trtotal.Visible = false;
            cbpersonal.Checked = false;
            string set = "select CONVERT(VARCHAR(2),DATEPART(DAY, fromdate))+'/'+ CONVERT(VARCHAR(2),DATEPART(MONTH, fromdate)) +'/'+ CONVERT(VARCHAR(4),DATEPART(YEAR, fromdate))as fromdate,CONVERT(VARCHAR(2),DATEPART(DAY, todate))+'/'+ CONVERT(VARCHAR(2),DATEPART(MONTH, todate)) +'/'+ CONVERT(VARCHAR(4),DATEPART(YEAR, todate))as todate from setting_application where type_College='DAY' and Edu_level='UG' and college_code='13' and setting_type='Apply Settings'";
            ds = dt.select_method_wo_parameter(set, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                TextBox2.Text = ds.Tables[0].Rows[0]["fromdate"].ToString();
                TextBox2.Attributes.Add("readonly", "readonly");
                TextBox3.Text = ds.Tables[0].Rows[0]["todate"].ToString();
                TextBox3.Attributes.Add("readonly", "readonly");
            }


        }
        if (TabContainer1.ActiveTabIndex == 3)
        {
            spvl = 4;
            ViewState["spvl"] = spvl;
            firsttable.Attributes.Add("Style", "border-bottom-style: solid; border-top-style: solid;border-left-style: solid; border-right-style: solid; background-color: #e3e3ef;border-width: 0.2px; border-color: indigo; border-radius: 5px; left: 16px; top: 0px;position: absolute; width: 950px;");
            TextBox2.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            TextBox3.Text = System.DateTime.Now.ToString("dd/MM/yyyy");

            btnapprove.Visible = false;
            btnSendSmsOpenPop.Visible = false;
            Button2.Visible = false;
            Button3.Visible = false;
            Button9.Visible = true;

            FpSpread4.Visible = true;
            FpSpread1.Visible = false;
            FpSpread2.Visible = false;
            FpSpread3.Visible = false;

            Label61.Visible = true;
            Label66.Visible = true;
            Label68.Visible = true;
            btn_ch_gen.Visible = false;
            DropDownList2.Visible = false;
            btnconform.Visible = false;
            btn_calltr.Visible = false;
            cbpersonal.Visible = false;
            //
            btn_pdf.Visible = false;
            coursedetails.Visible = false;
            ugtotaldiv.Visible = false;
            Academicinfo.Visible = false;
            Button6.Visible = false;
            divstuddt.Visible = false;
            trtotal.Visible = false;
            cbpersonal.Checked = false;
        }
        if (TabContainer1.ActiveTabIndex == 1)
        {
            spvl = 2;
            ViewState["spvl"] = spvl;
            firsttable.Attributes.Add("Style", "border-bottom-style: solid; border-top-style: solid;border-left-style: solid; border-right-style: solid; background-color: #e3e3ef;border-width: 0.2px; border-color: indigo; border-radius: 5px; left: 16px; top: 0px;position: absolute; width: 950px;");
            TextBox2.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            TextBox3.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            btn_pdf.Visible = false;
            btnapprove.Visible = false;
            btnSendSmsOpenPop.Visible = false;

            FpSpread1.Visible = true;
            FpSpread3.Visible = false;
            FpSpread2.Visible = false;
            FpSpread4.Visible = false;
            Label61.Visible = false;
            btn_ch_gen.Visible = false;
            DropDownList2.Visible = false;
            btnconform.Visible = false;
            btn_calltr.Visible = true;
            cbpersonal.Visible = false;
            //
            coursedetails.Visible = false;
            ugtotaldiv.Visible = false;
            Academicinfo.Visible = false;
            Button6.Visible = false;
            divstuddt.Visible = false;
            trtotal.Visible = false;
            cbpersonal.Checked = false;
        }
        if (TabContainer1.ActiveTabIndex == 2)
        {

            rightsadmit();
            spvl = 3;
            ViewState["spvl"] = spvl;
            firsttable.Attributes.Add("Style", "border-bottom-style: solid; border-top-style: solid;border-left-style: solid; border-right-style: solid; background-color: #e3e3ef;border-width: 0.2px; border-color: indigo; border-radius: 5px; left: 16px; top: 0px;position: absolute; width: 950px;");
            TextBox2.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            TextBox3.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
            btn_pdf.Visible = false;
            btnapprove.Visible = false;
            btnSendSmsOpenPop.Visible = false;
            Button2.Visible = false;
            Button9.Visible = true;
            Button3.Visible = false;
            FpSpread2.Visible = true;
            FpSpread1.Visible = false;
            FpSpread3.Visible = false;
            FpSpread4.Visible = false;
            Label61.Visible = false;
            DropDownList2.Visible = true;
            if (AdmConfFormat() == 1)
            {
                btnconform.Visible = true;
                btn_ch_gen.Visible = true;
            }
            else if (AdmConfFormat() == 0)
            {
                btnconform.Visible = false;
                btn_ch_gen.Visible = false;
            }
            btn_calltr.Visible = false;
            cbpersonal.Visible = true;
            //
            coursedetails.Visible = false;
            ugtotaldiv.Visible = false;
            Academicinfo.Visible = false;
            Button6.Visible = false;
            divstuddt.Visible = false;
            trtotal.Visible = false;
            cbpersonal.Checked = false;

        }

        fg = TabContainer1.ActiveTabIndex;

        Button1_Click(sender, e);
    }


    //public int sub_count { get; set; }
    public void rights()
    {
        try
        {
            Session["admissionrights"] = "";
            string rights = "select * from security_user_right where rights_desc='Online Admission' and user_code='" + user_code + "' and college_code='" + college_code + "'";
            ds = dt.select_method_wo_parameter(rights, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int h = 0; h < ds.Tables[0].Rows.Count; h++)
                {
                    string value = ds.Tables[0].Rows[h]["rights_code"].ToString();

                    if (value == "0")
                    {
                        tabpanel1.Visible = true;
                        Button9.Visible = true;
                        //btnapprove.Visible = true;

                    }
                    else if (value == "1")
                    {
                        lblnew.Visible = true;
                        tabpanel2.Visible = true;
                        // Button2.Visible = true;
                        //Button3.Visible = false;
                        //Button9.Visible = false;
                        btnapprove.Visible = true;
                        btnSendSmsOpenPop.Visible = true;
                        Button9.Visible = true;
                    }
                    else if (value == "2")
                    {

                        lblnew1.Visible = true;
                        tabpanel3.Visible = true;


                        Button9.Visible = true;
                        //Button3.Visible = true;
                        //Button9.Visible = true;
                    }
                    else if (value == "3")
                    {
                        lblnew2.Visible = true;
                        tabpanel4.Visible = false;
                        Button3.Visible = true;
                        Button9.Visible = true;

                        Session["admissionrights"] = "1";
                        //lnkchirstian.Visible = false;
                        //lnkbc.Visible = false;
                        //lnkbcm.Visible = false;
                        //lnkoc.Visible = false;
                        //lnksc.Visible = false;
                        //lnksca.Visible = false;
                        //lnkst.Visible = false;
                        //lnkmbcdnc.Visible = false;

                    }
                }
            }
            //else
            //{
            //    lblmg.Visible = true;
            //    lblmg.Text = "Please Select Column Names";
            //    return;
            //}
        }
        catch (Exception ex)
        {

        }
    }
    protected void rightsadmit()
    {
        try
        {
            string value = d2.GetFunction("select value from New_InsSettings where LinkName ='AdmissionConfirmSetting' and user_code ='" + usercode + "'");
            if (value == "0")
            {
                btn_ch_gen.Visible = false;
                btnconform.Visible = false;
            }
            else
            {
                btn_ch_gen.Visible = true;
                btnconform.Visible = true;
            }
        }
        catch { }
    }
    public void bindsum()
    {
        try
        {
            if (orderflage == false && checkvalue_flage == false)
            {

                string query = "select SUM(allot) as total from admitcolumnset where  college_code='" + college_code + "' and user_code='" + user_code + "' and (textcriteria='relig' or textcriteria ='community') and setcolumn ='" + ddldept.SelectedItem.Value + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string alote = Convert.ToString(ds.Tables[0].Rows[0]["total"]);
                    if (alote.Trim() != "" && alote != null)
                    {
                        lbltotalfeepaid.Text = "Selected :  " + alote + "";
                        lbltotalfeepaid.Visible = true;

                        lbltotalfeepaid_value.Text = "Admitted :  0";
                        lbltotalfeepaid_value.Visible = true;
                        //lbltotalfeepaid_value.Visible = false;
                    }
                    else
                    {
                        lbltotalfeepaid.Text = "Selected :  0";
                        lbltotalfeepaid.Visible = true;

                        lbltotalfeepaid_value.Text = "Admitted :  0";
                        lbltotalfeepaid_value.Visible = true;
                    }

                }
            }
        }
        catch
        {
        }
    }
    public void loadreligion()
    {
        try
        {
            string religion = "";
            cbl_religion.Items.Clear();
            string reliquery = "select distinct Textval,textcode from Textvaltable t,applyn a where a.religion=t.TextCode and TextCriteria ='relig' and batch_year='" + Convert.ToString(ddl_batch.SelectedItem.Value) + "' and a.college_code ='" + ddl_collegename.SelectedItem.Value + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(reliquery, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_religion.DataSource = ds;
                    cbl_religion.DataTextField = "TextVal";
                    cbl_religion.DataValueField = "textcode";
                    cbl_religion.DataBind();
                    //if (cbl_religion.Items.Count > 0)
                    //{
                    //    for (int i = 0; i < cbl_religion.Items.Count; i++)
                    //    {
                    //        cbl_religion.Items[i].Selected = true;
                    //        religion = Convert.ToString(cbl_religion.Items[i].Text);
                    //    }
                    //    if (cbl_religion.Items.Count == 1)
                    //    {
                    //        txt_religion.Text = "" + religion + "";
                    //    }
                    //    else
                    //    {
                    //        txt_religion.Text = "Religion(" + cbl_religion.Items.Count + ")";
                    //    }
                    //    cb_religion.Checked = true;
                    //}
                }
            }
            else
            {
                txt_religion.Text = "--Select--";
                cb_religion.Checked = false;
            }
        }
        catch
        {
        }
    }
    public void loadcommunity()
    {
        try
        {
            string comm = "";
            string selq = "SELECT Distinct community,T.TextVal  FROM applyn A,TextValTable T WHERE  T.TextCode =A.community  AND TextVal<>'' AND a.college_code ='" + ddl_collegename.SelectedItem.Value + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(selq, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_comm.DataSource = ds;
                    cbl_comm.DataTextField = "TextVal";
                    cbl_comm.DataValueField = "community";
                    cbl_comm.DataBind();
                    //if (cbl_comm.Items.Count > 0)
                    //{
                    //    for (int i = 0; i < cbl_comm.Items.Count; i++)
                    //    {
                    //        cbl_comm.Items[i].Selected = true;
                    //        comm = Convert.ToString(cbl_comm.Items[i].Text);
                    //    }
                    //    if (cbl_comm.Items.Count == 1)
                    //    {
                    //        txt_comm.Text = "" + comm + "";
                    //    }
                    //    else
                    //    {
                    //        txt_comm.Text = "Community(" + cbl_comm.Items.Count + ")";
                    //    }
                    //    cb_comm.Checked = true;
                    //}
                }
            }
            else
            {
                txt_comm.Text = "--Select--";
                cb_comm.Checked = false;
            }
        }
        catch
        {

        }
    }

    //go button
    protected void Button1_Click(object sender, EventArgs e)
    {
        string typefor = dt.GetFunction(" select setcolumn from admitcolumnset where textcriteria='Section process Format' and user_code='" + user_code + "' and college_code='" + college_code + "'");
        bool includeMarks = retrieveIncMarks();
        if (TabContainer1.ActiveTabIndex == 0)
        {
            if (typefor == "0")
            {
                if (includeMarks)
                {
                    appliedSchool();
                }
                else
                {
                    applied();
                }
            }
            if (typefor == "1")
            {
                applied2();
            }
        }
        else if (TabContainer1.ActiveTabIndex == 1)
        {
            if (includeMarks)
            {
                shortlistSchool();
            }
            else
            {
                shortlist();
            }
        }
        else if (TabContainer1.ActiveTabIndex == 2)
        {
            rightsadmit();
            feesStructureSetting();
            if (includeMarks)
            {
                admittedSchool();
            }
            else
            {
                admitted();
            }
        }
    }


    // zzz 4.5.2016
    public void applied()
    {
        try
        {
            string orderval = "";
            string orderby = "";
            string ordervalue = "";
            string orderbyvalue = "select value from Master_Settings where settings='OrderBy Marks Setting' and usercode='" + user_code + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(orderbyvalue, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                orderval = Convert.ToString(ds.Tables[0].Rows[0]["value"]);
            }

            string basicorder = "select value from Master_Settings where settings='orderbymarks'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(basicorder, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                orderby = Convert.ToString(ds.Tables[0].Rows[0]["value"]);
            }
            string percentagevalue = dt.GetFunction("select column_name from admitcolumnset where textcriteria='percent'");
            if (percentagevalue == "0")
            {
                percentagevalue = "percentage";
            }

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                string[] spl = orderby.Split(',');
                for (int y = 0; y < spl.Length; y++)
                {
                    if (ordervalue == "")
                    {
                        if (spl[y] == "Mark")
                        {
                            if (ddledu.SelectedItem.Text == "UG")
                            {
                                if (orderval.Trim() == "0")
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " P." + percentagevalue + " desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                    }
                                }
                                else
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " securedmark desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " securedmark desc";
                                    }
                                }
                            }
                            else
                            {
                                if (ordervalue.Trim() == "")
                                {
                                    ordervalue = " P." + percentagevalue + " desc";
                                }
                                else
                                {
                                    ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                }
                            }

                        }
                        else
                        {
                            ordervalue = spl[y];
                        }
                    }
                    else
                    {
                        if (spl[y] == "Mark")
                        {
                            if (ddledu.SelectedItem.Text == "UG")
                            {
                                if (orderval.Trim() == "0")
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " P." + percentagevalue + " desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                    }
                                }
                                else
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " securedmark desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " securedmark desc";
                                    }
                                }
                            }
                            else
                            {
                                if (ordervalue.Trim() == "")
                                {
                                    ordervalue = " P." + percentagevalue + " desc";
                                }
                                else
                                {
                                    ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                }
                            }

                        }
                        else
                        {
                            ordervalue = ordervalue + "," + spl[y];
                        }
                    }
                }
            }
            string marksaddquery = "";
            EquivalentToHSC();
            if (ddledu.SelectedItem.Text == "UG")
            {
                marksaddquery = ",((ISNULL((securedmark / NULLIF( totalmark, 0 )),0))*1200) as securedmark";
                marksaddquery = eqltohsc;
            }
            else
            {
                marksaddquery = "," + percentagevalue + "";
            }

            FpSpread3.Sheets[0].ColumnCount = 0;
            FpSpread3.Sheets[0].RowCount = 0;
            FpSpread3.SaveChanges();
            int count = 0;
            int i = 0;
            int cc = 0;
            string addbatch = "";
            string adddeg = "";
            string addrelival = "";
            string addcommval = "";
            string addsem = Convert.ToString(ddl_sem.SelectedItem.Value);
            for (i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    string addrelival1 = cbl_religion.Items[i].Value.ToString();
                    if (addrelival == "")
                    {
                        addrelival = addrelival1;
                    }
                    else
                    {
                        addrelival = addrelival + "'" + "," + "'" + addrelival1;
                    }
                }
            }


            for (i = 0; i < cbl_comm.Items.Count; i++)
            {
                if (cbl_comm.Items[i].Selected == true)
                {
                    string addcommval1 = cbl_comm.Items[i].Value.ToString();

                    if (addcommval == "")
                    {
                        addcommval = addcommval1;
                    }
                    else
                    {
                        addcommval = addcommval + "'" + "," + "'" + addcommval1;
                    }
                }
            }
            string univBoard = string.Empty;
            for (i = 0; i < cbl_BoardUniv.Items.Count; i++)
            {
                if (cbl_BoardUniv.Items[i].Selected == true)
                {
                    string univBoard1 = cbl_BoardUniv.Items[i].Value.ToString();

                    if (univBoard == "")
                    {
                        univBoard = univBoard1;
                    }
                    else
                    {
                        univBoard = univBoard + "," + univBoard1;
                    }
                }
            }
            string attemp = string.Empty;
            for (i = 0; i < cblAttempt.Items.Count; i++)
            {
                if (cblAttempt.Items[i].Selected == true)
                {
                    string attemp1 = cblAttempt.Items[i].Value.ToString();

                    if (attemp == "")
                    {
                        attemp = "max(ISNULL(noofattempt,'0')) =" + attemp1 + "";
                    }
                    else
                    {
                        attemp = attemp + " or max(ISNULL(noofattempt,'0')) =" + attemp1 + "";
                    }
                }
            }
            string addcomreli = "";
            if (addrelival != "")
            {
                addcomreli = " and religion in('" + addrelival + "')";
            }
            if (addcommval != "")
            {
                addcomreli = addcomreli + " and community in('" + addcommval + "')";
            }
            if (univBoard != "")
            {
                addcomreli = addcomreli + " and p.Course_code in(" + univBoard + ") ";
            }
            //if (attemp != "")
            //{
            //    addcomreli = addcomreli + " and isnull(ph.noofattempt,'') in('" + attemp + "') ";
            //}
            string[] ay = TextBox2.Text.Split('/');
            string[] ay1 = TextBox3.Text.Split('/');
            DateTime dtt = new DateTime();
            DateTime dt1 = new DateTime();
            dtt = Convert.ToDateTime(ay[1] + "/" + ay[0] + "/" + ay[2]);
            dt1 = Convert.ToDateTime(ay1[1] + "/" + ay1[0] + "/" + ay1[2]);
            string addsearch = "";
            if (txt_searchstudname.Text != "")
            {
                addsearch = " and a.stud_name='" + txt_searchstudname.Text + "'";
            }
            else if (txt_searchappno.Text != "")
            {
                addsearch = addsearch + " and a.app_formno='" + txt_searchappno.Text + "'";
            }
            else if (txt_searchmobno.Text != "")
            {
                addsearch = addsearch + " and a.Student_Mobile='" + txt_searchmobno.Text + "'";
            }
            else
            {
                addsearch = "";
            }

            addbatch = Convert.ToString(Convert.ToString(ddl_batch.SelectedItem.Value));
            adddeg = Convert.ToString(ddldept.SelectedItem.Value);
            string degCodeOp = string.Empty;
            if (cbAltCourse.Checked)
            {
                degCodeOp = "  and   a.alternativedegree_code in ('" + adddeg + "') ";
            }
            else
            {
                degCodeOp = "  and  a.degree_code in('" + adddeg + "')  ";
            }
            FpSpread3.Sheets[0].PageSize = 5;
            FpSpread3.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
            FpSpread3.Pager.Mode = FarPoint.Web.Spread.PagerMode.NextPrev;
            FpSpread3.Pager.Align = HorizontalAlign.Right;
            FpSpread3.Pager.Font.Bold = true;
            FarPoint.Web.Spread.StyleInfo darkstyle2 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle2.BackColor = ColorTranslator.FromHtml("#008B8B");
            darkstyle2.ForeColor = Color.Black;
            darkstyle2.HorizontalAlign = HorizontalAlign.Center;
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle2;
            FpSpread3.Pager.PageCount = 5;
            FpSpread3.ActiveSheetView.SheetCorner.DefaultStyle.Font.Bold = false;
            FpSpread3.ActiveSheetView.DefaultRowHeight = 25;
            FpSpread3.ActiveSheetView.Rows.Default.Font.Name = "Book Antiqua";
            FpSpread3.ActiveSheetView.Rows.Default.Font.Size = FontUnit.Small;
            FpSpread3.ActiveSheetView.Rows.Default.Font.Bold = false;
            FpSpread3.ActiveSheetView.Columns.Default.Font.Bold = false;
            FpSpread3.ActiveSheetView.Columns.Default.Font.Size = FontUnit.Small;
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            FpSpread3.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            FpSpread3.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            FpSpread3.ShowHeaderSelection = false;
            FpSpread3.Sheets[0].ColumnCount = 3;
            FpSpread3.Sheets[0].RowCount = 0;
            string query = "";
            //string seattype = Convert.ToString(ddl_seattype.SelectedItem.Value);
            //query = " select distinct a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,p.tancet_mark,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,p.percentage,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,p.totalmark,p.securedmark,p.course_entno,P.instaddress,a.App_No,uni_state,type_semester,university_code,ISNULL(pt.TExtVal,'') Part2Language,ISNULL(Cc.TExtVal,'') Part1Language,ISNULL(Cc.TExtVal,'') Course,ISNULL(U.TextVal,'') University,ISNULL(Institute_Name,'') Institute_Name,ISNULL(PassMonth,'') PassMonth,ISNULL(PassYear,'') PassYear,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate,case when  isnull(p.vocational_stream,'0')='0' then 'No' when isnull(p.vocational_stream,'0')='1' then 'Yes' end as vocational_stream,(select TextVal  from TextValTable  where TextCode =p.course_code) as  course_code from degree d,Department dt,Course C ,Stud_prev_details P INNER JOIN applyn A ON P.app_no = A.app_no left join perv_marks_history ph on ph.course_entno =p.course_entno LEFT JOIN TextValTable Cc ON Cc.TextCode = P.course_code  LEFT JOIN TextValTable U ON U.TextCode = P.university_code LEFT JOIN TextValTable pa ON pa.TextCode = P.Part1Language LEFT JOIN TextValTable pt ON pt.TextCode = P.Part2Language Where p.app_no = a.app_no  and d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')=0 and ISNULL(markPriority,1)=1  and ISNULL(selection_status,'0')=0  and a.Batch_Year in('" + addbatch + "')  and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code ";

            query = "select distinct a.stud_type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,p.tancet_mark,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,p.percentage,p.major_percent,p.majorallied_percent,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion" + marksaddquery + ", a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,p.totalmark,religion,community,ISNULL (tt.priority2,0) as priority2 ,isnull(ts.priority1,0) as priority1,noofattempts,p.course_entno,P.instaddress,a.App_No,uni_state,type_semester,university_code,ISNULL(pt.TExtVal,'') Part2Language,ISNULL(Cc.TExtVal,'') Part1Language,ISNULL(Cc.TExtVal,'') Course,ISNULL(U.TextVal,'') University,ISNULL(Institute_Name,'') Institute_Name,ISNULL(PassMonth,'') PassMonth,ISNULL(PassYear,'') PassYear,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate,case when  isnull(p.vocational_stream,'0')='0' then 'No' when isnull(p.vocational_stream,'0')='1' then 'Yes' end as vocational_stream,(select TextVal  from TextValTable  where TextCode =p.course_code) as  course_code from degree d,Department dt,Course C,Stud_prev_details P INNER JOIN applyn A ON P.app_no = A.app_no left join perv_marks_history ph on ph.course_entno =p.course_entno LEFT JOIN TextValTable Cc ON Cc.TextCode = P.course_code  LEFT JOIN TextValTable U ON U.TextCode = P.university_code LEFT JOIN TextValTable pa ON pa.TextCode = P.Part1Language LEFT JOIN TextValTable pt ON pt.TextCode = P.Part2Language left join TextValTable tt on tt.TextCode =a.religion left join TextValTable ts on ts.TextCode =a.community Where p.app_no = a.app_no  and d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')=0 and ISNULL(markPriority,1)=1  and ISNULL(selection_status,'0')=0  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code";
            if (attemp != "")
            {
                query = query + " and a.app_no in (select a.app_no from applyn a,Stud_prev_details s,perv_marks_history ph where a.app_no =s.app_no and s.course_entno =ph.course_entno and isconfirm ='1' and ISNULL(admission_status,'0')=0   and ISNULL(selection_status,'0')=0  and a.Batch_Year in('" + addbatch + "')  and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  group by a.app_no  having (" + attemp + "))";
            }
            if (addsearch != "")
            {
                query += " " + addsearch + " ";
            }
            else
            {
                query += " " + degCodeOp + " " + addcomreli + "and date_applied between '" + dtt.ToString("MM/dd/yyyy") + "' and '" + dt1.ToString("MM/dd/yyyy") + "'  ";
            }
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ordervalue != "" && ordervalue != "0")
                {
                    if (orderval.Trim() == "0")
                    {
                        query += " order by " + ordervalue + "";
                    }
                    else
                    {
                        query += " order by " + ordervalue + "";
                    }
                }

            }
            else
            {
                if (ddledu.SelectedItem.Text == "UG")
                {
                    if (orderval.Trim() == "0")
                    {
                        query += " order by P." + percentagevalue + " desc";
                    }
                    else
                    {
                        query += " order by  securedmark desc";
                    }
                }
                else
                {
                    query += " order by P." + percentagevalue + " desc";
                }
            }
            ds.Clear();
            ds = dt.select_method_wo_parameter(query, "Text");

            if (query == "")
            {
                FpSpread3.Visible = false;
                //lbl_err_stud.Visible = true;
                //lbl_err_stud.Text = "Kindly Select All List ";
                Label66.Visible = false;
                Label68.Visible = false;
                btn_print.Visible = false;
                btn_excel.Visible = false;
                txt_excelname.Visible = false;
                lbl_reportname.Visible = false;
                btnapprove.Visible = false;
                btnSendSmsOpenPop.Visible = false;
                Button3.Visible = false;
                buttnleft.Visible = false;
                return;
            }
            else
            {
                if (query != "")
                {
                    //ds = dt.select_method(query, hat, "Text");
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        Label66.Visible = false;
                        Label68.Visible = false;
                        FpSpread3.Visible = false;
                        errorspan.InnerHtml = "No Records Found";
                        poperrjs.Visible = true;
                        btn_excel.Visible = false;
                        txt_excelname.Visible = false;
                        lbl_reportname.Visible = false;
                        btn_print.Visible = false;
                        btnapprove.Visible = false;
                        btnSendSmsOpenPop.Visible = false;
                        Button3.Visible = false;
                        buttnleft.Visible = false;
                        return;
                    }
                    else
                    {
                        //lbl_err_stud.Visible = false;
                        Dictionary<int, double> dicsubcol = new Dictionary<int, double>();
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                string Getmark = "";
                                string Totalmark = "";
                                string percentage = "";
                                if (ddledu.SelectedItem.Text == "UG")
                                {
                                    Getmark = Convert.ToString(ds.Tables[0].Rows[i]["securedmark"]);
                                    Totalmark = Convert.ToString(ds.Tables[0].Rows[i]["totalmark"]);
                                }

                                percentage = Convert.ToString(ds.Tables[0].Rows[i]["" + percentagevalue + ""]);
                                double totlmark = 0;
                                DataView dv = new DataView();

                                if (ddledu.SelectedItem.Text == "UG")
                                {
                                    //if (Getmark.Trim() != "" && Totalmark.Trim() != "")
                                    //{
                                    //    if (!dicsubcol.ContainsKey(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"])))
                                    //    {
                                    //        totlmark = (Convert.ToDouble(Getmark) / Convert.ToDouble(Totalmark)) * Convert.ToDouble(1200);
                                    //        dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark, 2)));
                                    //    }
                                    //}
                                    //else if (Getmark.Trim() != "" && Totalmark.Trim() == "")
                                    //{
                                    if (Getmark.Trim() == "")
                                    {
                                        Getmark = "0";
                                    }
                                    totlmark = Convert.ToDouble(Getmark);
                                    if (!dicsubcol.ContainsKey(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"])))
                                    {
                                        dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark)));
                                    }
                                    //}
                                }
                                else
                                {
                                    if (percentage.Trim() == "")
                                    {
                                        percentage = "0";
                                    }
                                    totlmark = Convert.ToDouble(percentage);
                                    if (!dicsubcol.ContainsKey(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"])))
                                    {
                                        dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark, 2)));
                                    }
                                }
                            }
                            // dicsubcol = dicsubcol.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
                        }
                        if (dicsubcol.Count > 0)
                        {
                            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 2].Text = "View";
                            cc = 2;
                            if (checkSchoolSetting() == 0)
                                FpSpread3.Sheets[0].Columns[2].Visible = false;
                            else
                                FpSpread3.Sheets[0].Columns[2].Visible = true;
                            string columnorder_query = "select * from admitcolumnset where   user_code='" + user_code + "' and  textcriteria='column' order by Convert(int,priority) asc";
                            // college_code='" + ddl_collegename.SelectedItem.Value + "' and
                            ds1.Clear();
                            ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
                            {

                                for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                                {
                                    string percentage = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                    if (percentage.Trim() == "Hostel Name" || percentage.Trim() == "Room Type" || percentage.Trim() == "Boarding")
                                    {
                                    }
                                    else
                                    {
                                        cc++;
                                        FpSpread3.Sheets[0].ColumnCount = cc + 1;

                                        FpSpread3.Sheets[0].ColumnHeader.Cells[0, cc].Text = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                        if (ddledu.SelectedItem.Text == "PG")
                                        {
                                            if (percentage == "Marks")
                                            {
                                                FpSpread3.Sheets[0].ColumnHeader.Cells[0, cc].Text = "Percentage";
                                            }
                                        }

                                    }

                                }
                            }
                            else
                            {
                                FpSpread3.Visible = false;
                                errorspan.InnerHtml = "Please Set The Column Order Setting";
                                poperrjs.Visible = true;
                                return;
                            }

                            FarPoint.Web.Spread.CheckBoxCellType cball = new FarPoint.Web.Spread.CheckBoxCellType();
                            cball.AutoPostBack = true;
                            FarPoint.Web.Spread.TextCellType txtCt = new FarPoint.Web.Spread.TextCellType();


                            FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                            cb.AutoPostBack = false;
                            FarPoint.Web.Spread.ButtonCellType btn = new FarPoint.Web.Spread.ButtonCellType("MyCommand", FarPoint.Web.Spread.ButtonType.ImageButton, "~/images/view11.png");
                            DataView dv = new DataView();

                            FpSpread3.Sheets[0].RowCount++;
                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].CellType = cball;
                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread3.Sheets[0].Rows[FpSpread3.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].Locked = false;
                            foreach (var kvp in dicsubcol)
                            {
                                string app_no = kvp.Key.ToString();
                                string percentage = kvp.Value.ToString();

                                FpSpread3.Sheets[0].RowCount++;
                                count++;

                                ds.Tables[0].DefaultView.RowFilter = "app_no='" + app_no + "'";
                                dv = ds.Tables[0].DefaultView;
                                if (dv.Count > 0)
                                {
                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Text = count.ToString();
                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(dv[0]["app_no"]);
                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Locked = true;
                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].CellType = cb;
                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].CellType = btn;
                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].Column.Width = 50;
                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                                    cc = 2;
                                    columnorder_query = "select * from admitcolumnset where   user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
                                    // college_code='" + ddl_collegename.SelectedItem.Value + "' and
                                    ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                                    if (ds1.Tables[0].Rows.Count > 0)
                                    {

                                        for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                                        {
                                            string columname = Convert.ToString(ds1.Tables[0].Rows[u]["column_name"]);
                                            if (columname == "HostelRegistrationPK" || columname == "RoomFK" || columname == "Boarding")
                                            {
                                            }
                                            else
                                            {
                                                cc++;

                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].CellType = txtCt;
                                                if (columname == "Alternativedegree_code")
                                                {
                                                    string altercourse = dt.GetFunction("select distinct dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddl_collegename.SelectedItem.Value + "' and d.Degree_Code='" + Convert.ToString(dv[0]["Alternativedegree_code"]) + "' ");
                                                    if (altercourse == "0")
                                                    {
                                                        altercourse = "";
                                                    }
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = altercourse;
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                                }

                                                else if (columname == "DistinctSport")
                                                {
                                                    string value = Convert.ToString(dv[0][columname]);
                                                    if (value == "Yes")
                                                    {
                                                        string val = d2.GetFunction("select textval from applyn a,textvaltable t where app_no='" + app_no + "' and textcode=DistinctSport");
                                                        if (val != "0")
                                                        {
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = value + "-" + val;
                                                        }
                                                        else
                                                        {
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = value;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = value;
                                                    }
                                                }
                                                else if (columname == "totalfees")
                                                {
                                                    FpSpread3.Sheets[0].Columns[cc].Visible = false;
                                                }
                                                else if (columname == "remarks")
                                                {
                                                    string VocationStream = Convert.ToString(dv[0]["vocational_stream"]);
                                                    string Nationality = Convert.ToString(dv[0]["citizen"]);
                                                    string CourseCode = Convert.ToString(dv[0]["course_code"]);
                                                    string Concatvalue = "";
                                                    if (VocationStream.Trim() != "No")
                                                    {
                                                        Concatvalue = "Vocational";
                                                    }
                                                    if (Nationality.Trim().ToUpper() != "INDIAN")
                                                    {
                                                        if (Concatvalue.Trim() == "")
                                                        {
                                                            Concatvalue = Nationality;
                                                        }
                                                        else
                                                        {
                                                            Concatvalue = Concatvalue + " - " + Nationality;
                                                        }
                                                    }
                                                    if (CourseCode.Trim().ToUpper() == "CBSE")
                                                    {
                                                        if (Concatvalue.Trim() == "")
                                                        {
                                                            Concatvalue = CourseCode;
                                                        }
                                                        else
                                                        {
                                                            Concatvalue = Concatvalue + " - " + CourseCode;
                                                        }
                                                    }
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(Concatvalue);

                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                    // FpSpread3.Sheets[0].Columns[cc].Visible = false;
                                                }
                                                else if (columname == "securedmark")
                                                {
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(percentage);
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                }
                                                else if (columname != "PaidAmount")
                                                {

                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(dv[0][columname]);
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                            FpSpread3.Visible = true;
                            FpSpread3.Sheets[0].PageSize = 51;
                            FpSpread3.TitleInfo.Height = 30;
                            FpSpread3.CommandBar.Visible = false;
                            FpSpread3.Sheets[0].RowHeader.Visible = false;
                            FpSpread3.Width = 930;
                            FpSpread3.Height = 390;
                            Label66.Visible = true;
                            btn_print.Visible = true;
                            Label68.Visible = true;
                            btn_excel.Visible = true;
                            txt_excelname.Visible = true;
                            lbl_reportname.Visible = true;
                            btnapprove.Visible = true;
                            btnSendSmsOpenPop.Visible = true;
                            Button3.Visible = true;
                            buttnleft.Visible = false;
                            Label66.Text = "Total No Of Applied :";
                            Label68.Text = Convert.ToString(dicsubcol.Count);
                        }
                        else
                        {
                            Label66.Visible = false;
                            Label68.Visible = false;
                            FpSpread3.Visible = false;
                            errorspan.InnerHtml = "No Records Found";
                            poperrjs.Visible = true;
                            btn_excel.Visible = false;
                            txt_excelname.Visible = false;
                            lbl_reportname.Visible = false;
                            btn_print.Visible = false;
                            btnapprove.Visible = false;
                            btnSendSmsOpenPop.Visible = false;
                            Button3.Visible = false;
                            buttnleft.Visible = false;
                        }
                    }
                }
            }


        }
        catch (Exception ewx)
        {

        }
    }
    public void applied2()
    {
        try
        {
            if (Convert.ToString(txtrowcount.Text).Trim() == "")
            {
                errorspan.InnerHtml = "Please Set Row Count Size";
                poperrjs.Visible = true;
                return;
            }

            string orderval = "";
            string orderby = ""; string or = "";
            string ordervalue = "";
            string orderbyvalue = "select value from Master_Settings where settings='OrderBy Marks Setting' and usercode='" + user_code + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(orderbyvalue, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                orderval = Convert.ToString(ds.Tables[0].Rows[0]["value"]);
            }
            string basicorder = "select value from Master_Settings where settings='orderbymarks'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(basicorder, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                orderby = Convert.ToString(ds.Tables[0].Rows[0]["value"]);
            }
            if (orderby.Trim() == "")
            {
                if (ddledu.SelectedItem.Text == "UG")
                {
                    or = " ,securedmark desc";
                }
                else
                {
                    or = " ,p.percentage desc";
                }
                orderby = "  ISNULL (tt.priority2,0) asc,noofattempts asc " + or + " ";
            }
            string percentagevalue = dt.GetFunction("select column_name from admitcolumnset where textcriteria='percent'");
            if (percentagevalue == "0")
            {
                percentagevalue = "percentage";
            }

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                string[] spl = orderby.Split(',');
                for (int y = 0; y < spl.Length; y++)
                {
                    if (ordervalue == "")
                    {
                        if (spl[y] == "Mark")
                        {
                            if (ddledu.SelectedItem.Text == "UG")
                            {
                                if (orderval.Trim() == "0")
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " P." + percentagevalue + " desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                    }
                                }
                                else
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " securedmark desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " securedmark desc";
                                    }
                                }
                            }
                            else
                            {
                                if (ordervalue.Trim() == "")
                                {
                                    ordervalue = " P." + percentagevalue + " desc";
                                }
                                else
                                {
                                    ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                }
                            }

                        }
                        else
                        {
                            ordervalue = spl[y];
                        }
                    }
                    else
                    {
                        if (spl[y] == "Mark")
                        {
                            if (ddledu.SelectedItem.Text == "UG")
                            {
                                if (orderval.Trim() == "0")
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " P." + percentagevalue + " desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                    }
                                }
                                else
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " securedmark desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " securedmark desc";
                                    }
                                }
                            }
                            else
                            {
                                if (ordervalue.Trim() == "")
                                {
                                    ordervalue = " P." + percentagevalue + " desc";
                                }
                                else
                                {
                                    ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                }
                            }

                        }
                        else
                        {
                            ordervalue = ordervalue + "," + spl[y];
                        }
                    }
                }
            }
            string marksaddquery = "";
            EquivalentToHSC();
            if (ddledu.SelectedItem.Text == "UG")
            {
                marksaddquery = ",((ISNULL((securedmark / NULLIF( totalmark, 0 )),0))*1200) as securedmark";
                marksaddquery = eqltohsc;
            }
            else
            {
                marksaddquery = "," + percentagevalue + "";
            }

            FpSpread3.Sheets[0].ColumnCount = 0;
            FpSpread3.Sheets[0].RowCount = 0;
            FpSpread3.SaveChanges();
            int count = 0;
            int i = 0;
            int cc = 0;
            string addbatch = "";
            string adddeg = "";
            string addrelival = "";
            string addcommval = "";
            string addsem = Convert.ToString(ddl_sem.SelectedItem.Value);
            for (i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    string addrelival1 = cbl_religion.Items[i].Value.ToString();
                    if (addrelival == "")
                    {
                        addrelival = addrelival1;
                    }
                    else
                    {
                        addrelival = addrelival + "'" + "," + "'" + addrelival1;
                    }
                }
            }
            for (i = 0; i < cbl_comm.Items.Count; i++)
            {
                if (cbl_comm.Items[i].Selected == true)
                {
                    string addcommval1 = cbl_comm.Items[i].Value.ToString();

                    if (addcommval == "")
                    {
                        addcommval = addcommval1;
                    }
                    else
                    {
                        addcommval = addcommval + "'" + "," + "'" + addcommval1;
                    }
                }
            }
            string univBoard = string.Empty;
            for (i = 0; i < cbl_BoardUniv.Items.Count; i++)
            {
                if (cbl_BoardUniv.Items[i].Selected == true)
                {
                    string univBoard1 = cbl_BoardUniv.Items[i].Value.ToString();

                    if (univBoard == "")
                    {
                        univBoard = univBoard1;
                    }
                    else
                    {
                        univBoard = univBoard + "," + univBoard1;
                    }
                }
            }
            string attemp = string.Empty;
            for (i = 0; i < cblAttempt.Items.Count; i++)
            {
                if (cblAttempt.Items[i].Selected == true)
                {
                    string attemp1 = cblAttempt.Items[i].Value.ToString();

                    if (attemp == "")
                    {
                        attemp = "max(ISNULL(noofattempt,'0')) =" + attemp1 + "";
                    }
                    else
                    {
                        attemp = attemp + " or max(ISNULL(noofattempt,'0')) =" + attemp1 + "";
                    }
                }
            }
            string addcomreli = "";
            if (addrelival != "")
            {
                addcomreli = " and religion in('" + addrelival + "')";
            }
            if (addcommval != "")
            {
                addcomreli = addcomreli + " and community in('" + addcommval + "')";
            }
            if (univBoard != "")
            {
                addcomreli = addcomreli + " and p.Course_code in(" + univBoard + ") ";
            }
            string[] ay = TextBox2.Text.Split('/');
            string[] ay1 = TextBox3.Text.Split('/');
            DateTime dtt = new DateTime();
            DateTime dt1 = new DateTime();
            dtt = Convert.ToDateTime(ay[1] + "/" + ay[0] + "/" + ay[2]);
            dt1 = Convert.ToDateTime(ay1[1] + "/" + ay1[0] + "/" + ay1[2]);
            string addsearch = "";
            if (txt_searchstudname.Text != "")
            {
                addsearch = " and a.stud_name='" + txt_searchstudname.Text + "'";
            }
            else if (txt_searchappno.Text != "")
            {
                addsearch = addsearch + " and a.app_formno='" + txt_searchappno.Text + "'";
            }
            else if (txt_searchmobno.Text != "")
            {
                addsearch = addsearch + " and a.Student_Mobile='" + txt_searchmobno.Text + "'";
            }
            else
            {
                addsearch = "";
            }
            addbatch = Convert.ToString(Convert.ToString(ddl_batch.SelectedItem.Value));
            adddeg = Convert.ToString(ddldept.SelectedItem.Value);
            string degCodeOp = string.Empty;
            if (cbAltCourse.Checked)
            {
                degCodeOp = "  and   a.alternativedegree_code in ('" + adddeg + "') ";
            }
            else
            {
                degCodeOp = "  and  a.degree_code in('" + adddeg + "')  ";
            }
            FpSpread3.Sheets[0].PageSize = 5;
            FpSpread3.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
            FpSpread3.Pager.Mode = FarPoint.Web.Spread.PagerMode.NextPrev;
            FpSpread3.Pager.Align = HorizontalAlign.Right;
            FpSpread3.Pager.Font.Bold = true;
            FarPoint.Web.Spread.StyleInfo darkstyle2 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle2.BackColor = ColorTranslator.FromHtml("#008B8B");
            darkstyle2.ForeColor = Color.Black;
            darkstyle2.HorizontalAlign = HorizontalAlign.Center;
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle2;
            FpSpread3.Pager.PageCount = 5;
            FpSpread3.ActiveSheetView.SheetCorner.DefaultStyle.Font.Bold = false;
            FpSpread3.ActiveSheetView.DefaultRowHeight = 25;
            FpSpread3.ActiveSheetView.Rows.Default.Font.Name = "Book Antiqua";
            FpSpread3.ActiveSheetView.Rows.Default.Font.Size = FontUnit.Small;
            FpSpread3.ActiveSheetView.Rows.Default.Font.Bold = false;
            FpSpread3.ActiveSheetView.Columns.Default.Font.Bold = false;
            FpSpread3.ActiveSheetView.Columns.Default.Font.Size = FontUnit.Small;
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            FpSpread3.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            FpSpread3.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            FpSpread3.ShowHeaderSelection = false;
            FpSpread3.Sheets[0].ColumnCount = 3;
            FpSpread3.Sheets[0].RowCount = 0;
            string query = "";

            query = "select distinct a.stud_type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,p.tancet_mark,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,p.percentage,p.major_percent,p.majorallied_percent,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion" + marksaddquery + ", a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,p.totalmark,religion,community,ISNULL (tt.priority2,0) as priority2 ,isnull(ts.priority1,0) as priority1,noofattempts,p.course_entno,P.instaddress,a.App_No,uni_state,type_semester,university_code,ISNULL(pt.TExtVal,'') Part2Language,ISNULL(Cc.TExtVal,'') Part1Language,ISNULL(Cc.TExtVal,'') Course,ISNULL(U.TextVal,'') University,ISNULL(Institute_Name,'') Institute_Name,ISNULL(PassMonth,'') PassMonth,ISNULL(PassYear,'') PassYear,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate,case when  isnull(p.vocational_stream,'0')='0' then 'No' when isnull(p.vocational_stream,'0')='1' then 'Yes' end as vocational_stream,(select TextVal  from TextValTable  where TextCode =p.course_code) as  course_code from degree d,Department dt,Course C,Stud_prev_details P INNER JOIN applyn A ON P.app_no = A.app_no left join perv_marks_history ph on ph.course_entno =p.course_entno LEFT JOIN TextValTable Cc ON Cc.TextCode = P.course_code  LEFT JOIN TextValTable U ON U.TextCode = P.university_code LEFT JOIN TextValTable pa ON pa.TextCode = P.Part1Language LEFT JOIN TextValTable pt ON pt.TextCode = P.Part2Language left join TextValTable tt on tt.TextCode =a.religion left join TextValTable ts on ts.TextCode =a.community Where p.app_no = a.app_no  and d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')=0 and ISNULL(markPriority,1)=1  and ISNULL(selection_status,'0')=0  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code";
            if (attemp != "")
            {
                query = query + " and a.app_no in (select a.app_no from applyn a,Stud_prev_details s,perv_marks_history ph where a.app_no =s.app_no and s.course_entno =ph.course_entno and isconfirm ='1' and ISNULL(admission_status,'0')=0   and ISNULL(selection_status,'0')=0  and a.Batch_Year in('" + addbatch + "')  and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  group by a.app_no  having (" + attemp + "))";
            }
            if (addsearch != "")
            {
                query += " " + addsearch + " ";
            }
            else
            {
                query += " " + degCodeOp + " " + addcomreli + "and date_applied between '" + dtt.ToString("MM/dd/yyyy") + "' and '" + dt1.ToString("MM/dd/yyyy") + "'  ";
            }
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ordervalue != "" && ordervalue != "0")
                {
                    if (orderval.Trim() == "0")
                    {
                        query += " order by " + ordervalue + "";
                    }
                    else
                    {
                        query += " order by " + ordervalue + "";
                    }
                }
            }
            else
            {
                if (ddledu.SelectedItem.Text == "UG")
                {
                    if (orderval.Trim() == "0")
                    {
                        query += " order by P." + percentagevalue + " desc";
                    }
                    else
                    {
                        query += " order by  securedmark desc";
                    }
                }
                else
                {
                    query += " order by P." + percentagevalue + " desc";
                }
                // query = query + "  select textcode,textval from textvaltable order by ISNULL (priority2,0) desc";
            }
            query = query + "  select * from admitcolumnset where   user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
            query = query + "  select value from Master_Settings  where settings='orderbymarks' and value<>''";

            query = query + "   select mastercriteriavalue1,mastervalue from CO_MasterValues where MasterCriteria ='Region header' and mastercriteriavalue1<>''  order by mastercriteria1 asc";
            ds.Clear();
            ds = dt.select_method_wo_parameter(query, "Text");


            if (query == "")
            {
                FpSpread3.Visible = false;
                Label66.Visible = false;
                Label68.Visible = false;
                btn_print.Visible = false;
                btn_excel.Visible = false;
                txt_excelname.Visible = false;
                lbl_reportname.Visible = false;
                btnapprove.Visible = false;
                btnSendSmsOpenPop.Visible = false;
                Button3.Visible = false;
                buttnleft.Visible = false;
                return;
            }
            else
            {
                if (query != "")
                {
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        Label66.Visible = false;
                        Label68.Visible = false;
                        FpSpread3.Visible = false;
                        errorspan.InnerHtml = "No Records Found";
                        poperrjs.Visible = true;
                        btn_excel.Visible = false;
                        txt_excelname.Visible = false;
                        lbl_reportname.Visible = false;
                        btn_print.Visible = false;
                        btnapprove.Visible = false;
                        btnSendSmsOpenPop.Visible = false;
                        Button3.Visible = false;
                        buttnleft.Visible = false;
                        return;
                    }
                    else
                    {
                        Dictionary<int, double> dicsubcol = new Dictionary<int, double>();
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                string Getmark = "";
                                string Totalmark = "";
                                string percentage = "";
                                if (ddledu.SelectedItem.Text == "UG")
                                {
                                    Getmark = Convert.ToString(ds.Tables[0].Rows[i]["securedmark"]);
                                    Totalmark = Convert.ToString(ds.Tables[0].Rows[i]["totalmark"]);
                                }
                                percentage = Convert.ToString(ds.Tables[0].Rows[i]["" + percentagevalue + ""]);
                                double totlmark = 0;
                                DataView dv = new DataView();
                                if (ddledu.SelectedItem.Text == "UG")
                                {
                                    if (Getmark.Trim() == "")
                                    {
                                        Getmark = "0";
                                    }
                                    totlmark = Convert.ToDouble(Getmark);
                                    if (!dicsubcol.ContainsKey(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"])))
                                    {
                                        dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark)));
                                    }
                                }
                                else
                                {
                                    if (percentage.Trim() == "")
                                    {
                                        percentage = "0";
                                    }
                                    totlmark = Convert.ToDouble(percentage);
                                    if (!dicsubcol.ContainsKey(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"])))
                                    {
                                        dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark, 2)));
                                    }
                                }
                            }
                        }
                        if (dicsubcol.Count > 0)
                        {
                            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 2].Text = "View";
                            cc = 2;
                            if (checkSchoolSetting() == 0)
                                FpSpread3.Sheets[0].Columns[2].Visible = false;
                            else
                                FpSpread3.Sheets[0].Columns[2].Visible = true;
                            string columnorder_query = "select * from admitcolumnset where   user_code='" + user_code + "' and  textcriteria='column' order by Convert(int,priority) asc";
                            ds1.Clear();
                            ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
                            {
                                for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                                {
                                    string percentage = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                    if (percentage.Trim() == "Hostel Name" || percentage.Trim() == "Room Type" || percentage.Trim() == "Boarding")
                                    {
                                    }
                                    else
                                    {
                                        cc++;
                                        FpSpread3.Sheets[0].ColumnCount = cc + 1;

                                        FpSpread3.Sheets[0].ColumnHeader.Cells[0, cc].Text = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                        if (ddledu.SelectedItem.Text == "PG")
                                        {
                                            if (percentage == "Marks")
                                            {
                                                FpSpread3.Sheets[0].ColumnHeader.Cells[0, cc].Text = "Percentage";
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                FpSpread3.Visible = false;
                                errorspan.InnerHtml = "Please Set The Column Order Setting";
                                poperrjs.Visible = true;
                                return;
                            }
                            FarPoint.Web.Spread.CheckBoxCellType cball = new FarPoint.Web.Spread.CheckBoxCellType();
                            cball.AutoPostBack = true;
                            FarPoint.Web.Spread.TextCellType txtCt = new FarPoint.Web.Spread.TextCellType();

                            FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                            cb.AutoPostBack = false;
                            FarPoint.Web.Spread.ButtonCellType btn = new FarPoint.Web.Spread.ButtonCellType("MyCommand", FarPoint.Web.Spread.ButtonType.ImageButton, "~/images/view11.png");
                            DataView dv = new DataView();

                            FpSpread3.Sheets[0].RowCount++;
                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].CellType = cball;
                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread3.Sheets[0].Rows[FpSpread3.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].Locked = false;
                            string oldregion = ""; string attempts = "";
                            Dictionary<string, string> prioritydic = new Dictionary<string, string>();
                            bool notregionsetting = false; bool notregioncount = false; bool notsetreli = false;
                        bb:
                            if (notregionsetting == false)
                            {
                                string valuereligion = "";
                                if (ds.Tables[3].Rows.Count > 0)
                                {
                                    for (int k = 0; k < ds.Tables[3].Rows.Count; k++)
                                    {
                                        if (valuereligion == "")
                                        {
                                            valuereligion = Convert.ToString(ds.Tables[3].Rows[k][0]);
                                        }
                                        else
                                        {
                                            valuereligion = valuereligion + "," + Convert.ToString(ds.Tables[3].Rows[k][0]);
                                        }
                                    }
                                }
                                if (ds.Tables[3].Rows.Count > 0)
                                {
                                    for (int k = 0; k < ds.Tables[3].Rows.Count; k++)
                                    {
                                        ds.Tables[0].DefaultView.RowFilter = " religion1 in(" + Convert.ToString(ds.Tables[3].Rows[k][0]) + ")  ";
                                        dv = ds.Tables[0].DefaultView;
                                        if (notregioncount == true)
                                        {
                                            notregionsetting = true;
                                            ds.Tables[0].DefaultView.RowFilter = " religion1 not in(" + valuereligion + ") ";
                                            dv = ds.Tables[0].DefaultView;
                                            dv.Sort = "noofattempts ASC " + or;
                                            if (notsetreli == true)
                                            {
                                                break;
                                            }
                                        }
                                        if (dv.Count > 0)
                                        {
                                            for (int p = 0; p < dv.Count; p++)
                                            {
                                                FpSpread3.Sheets[0].RowCount++;
                                                count++;
                                                if (ds.Tables[1].Rows.Count > 0)
                                                {
                                                    if (notregioncount == false)
                                                    {
                                                        if (oldregion.Trim() != Convert.ToString(ds.Tables[3].Rows[k][1]))//Convert.ToString(dv[p]["religion"]))
                                                        {
                                                            oldregion = Convert.ToString(ds.Tables[3].Rows[k][1]);

                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(ds.Tables[3].Rows[k][1]);//) Convert.ToString(dv[p]["religion"]);
                                                            FpSpread3.Sheets[0].SpanModel.Add(FpSpread3.Sheets[0].RowCount - 1, 0, 1, ds.Tables[1].Rows.Count - 1);
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue;
                                                            FpSpread3.Sheets[0].Rows[FpSpread3.Sheets[0].RowCount - 1].Locked = true;
                                                            FpSpread3.Sheets[0].RowCount++;
                                                            if (attempts.Trim() != Convert.ToString(dv[p]["noofattempts"]))
                                                            {
                                                                attempts = Convert.ToString(dv[p]["noofattempts"]);
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(dv[p]["noofattempts"]) + " Attempts";
                                                                FpSpread3.Sheets[0].SpanModel.Add(FpSpread3.Sheets[0].RowCount - 1, 0, 1, ds.Tables[1].Rows.Count - 1);
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue; FpSpread3.Sheets[0].Rows[FpSpread3.Sheets[0].RowCount - 1].Locked = true;
                                                                FpSpread3.Sheets[0].RowCount++;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if (attempts.Trim() != Convert.ToString(dv[p]["noofattempts"]))
                                                            {
                                                                attempts = Convert.ToString(dv[p]["noofattempts"]);
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(dv[p]["noofattempts"]) + " Attempts";
                                                                FpSpread3.Sheets[0].SpanModel.Add(FpSpread3.Sheets[0].RowCount - 1, 0, 1, ds.Tables[1].Rows.Count - 1);
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue; FpSpread3.Sheets[0].Rows[FpSpread3.Sheets[0].RowCount - 1].Locked = true;
                                                                FpSpread3.Sheets[0].RowCount++;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (oldregion.Trim() != "Others")
                                                        {
                                                            oldregion = "Others";
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Text = "Others";
                                                            FpSpread3.Sheets[0].SpanModel.Add(FpSpread3.Sheets[0].RowCount - 1, 0, 1, ds.Tables[1].Rows.Count - 1);
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue; FpSpread3.Sheets[0].Rows[FpSpread3.Sheets[0].RowCount - 1].Locked = true;
                                                            FpSpread3.Sheets[0].RowCount++;
                                                        }
                                                        if (attempts.Trim() != Convert.ToString(dv[p]["noofattempts"]))
                                                        {
                                                            attempts = Convert.ToString(dv[p]["noofattempts"]);
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(dv[p]["noofattempts"]) + " Attempts";
                                                            FpSpread3.Sheets[0].SpanModel.Add(FpSpread3.Sheets[0].RowCount - 1, 0, 1, ds.Tables[1].Rows.Count - 1);
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].ForeColor = Color.Blue; FpSpread3.Sheets[0].Rows[FpSpread3.Sheets[0].RowCount - 1].Locked = true;
                                                            FpSpread3.Sheets[0].RowCount++;
                                                            notsetreli = true;
                                                        }
                                                    }
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Text = count.ToString();
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(dv[p]["app_no"]);
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Locked = true;
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].CellType = cb;
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].CellType = btn;
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].Column.Width = 50;
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                                                    cc = 2;
                                                    for (int u = 0; u < ds.Tables[1].Rows.Count; u++)
                                                    {
                                                        string columname = Convert.ToString(ds.Tables[1].Rows[u]["column_name"]);
                                                        if (columname == "HostelRegistrationPK" || columname == "RoomFK" || columname == "Boarding")
                                                        {
                                                        }
                                                        else
                                                        {
                                                            cc++;
                                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].CellType = txtCt;
                                                            if (columname == "Alternativedegree_code")
                                                            {
                                                                string altercourse = dt.GetFunction("select distinct dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddl_collegename.SelectedItem.Value + "' and d.Degree_Code='" + Convert.ToString(dv[0]["Alternativedegree_code"]) + "' ");
                                                                if (altercourse == "0")
                                                                {
                                                                    altercourse = "";
                                                                }
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = altercourse;
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                                            }

                                                            else if (columname == "DistinctSport")
                                                            {
                                                                string value = Convert.ToString(dv[p][columname]);
                                                                if (value == "Yes")
                                                                {
                                                                    string val = d2.GetFunction("select textval from applyn a,textvaltable t where app_no='" + Convert.ToString(dv[p]["app_no"]) + "' and textcode=DistinctSport");
                                                                    if (val != "0")
                                                                    {
                                                                        FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = value + "-" + val;
                                                                    }
                                                                    else
                                                                    {
                                                                        FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = value;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = value;
                                                                }
                                                            }
                                                            else if (columname == "totalfees")
                                                            {
                                                                FpSpread3.Sheets[0].Columns[cc].Visible = false;
                                                            }
                                                            else if (columname == "remarks")
                                                            {
                                                                string VocationStream = Convert.ToString(dv[p]["vocational_stream"]);
                                                                string Nationality = Convert.ToString(dv[p]["citizen"]);
                                                                string CourseCode = Convert.ToString(dv[p]["course_code"]);
                                                                string Concatvalue = "";
                                                                if (VocationStream.Trim() != "No")
                                                                {
                                                                    Concatvalue = "Vocational";
                                                                }
                                                                if (Nationality.Trim().ToUpper() != "INDIAN")
                                                                {
                                                                    if (Concatvalue.Trim() == "")
                                                                    {
                                                                        Concatvalue = Nationality;
                                                                    }
                                                                    else
                                                                    {
                                                                        Concatvalue = Concatvalue + " - " + Nationality;
                                                                    }
                                                                }
                                                                if (CourseCode.Trim().ToUpper() == "CBSE")
                                                                {
                                                                    if (Concatvalue.Trim() == "")
                                                                    {
                                                                        Concatvalue = CourseCode;
                                                                    }
                                                                    else
                                                                    {
                                                                        Concatvalue = Concatvalue + " - " + CourseCode;
                                                                    }
                                                                }
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(Concatvalue);

                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                            }
                                                            else if (columname == "securedmark")
                                                            {
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(dicsubcol[Convert.ToInt32(dv[p]["app_no"])]);
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                            }
                                                            else if (columname != "PaidAmount")
                                                            {
                                                                //if (columname == "religion")
                                                                //{
                                                                //oldregion = Convert.ToString(ds.Tables[3].Rows[k][1]);
                                                                //}
                                                                if (columname == "noofattempts")
                                                                {
                                                                    attempts = Convert.ToString(dv[p][columname]);
                                                                }
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(dv[p][columname]);
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            attempts = "";
                                        }
                                    }
                                }
                                if (notregionsetting == false)
                                {
                                    notregioncount = true;
                                    goto bb;
                                }
                            }
                            FpSpread3.Visible = true;
                            FpSpread3.Sheets[0].PageSize = Convert.ToInt32(txtrowcount.Text) + 3;
                            FpSpread3.TitleInfo.Height = 30;
                            FpSpread3.CommandBar.Visible = false;
                            FpSpread3.Sheets[0].RowHeader.Visible = false;
                            FpSpread3.Width = 930;
                            FpSpread3.Height = 390;
                            Label66.Visible = true;
                            btn_print.Visible = true;
                            Label68.Visible = true;
                            btn_excel.Visible = true;
                            txt_excelname.Visible = true;
                            lbl_reportname.Visible = true;
                            btnapprove.Visible = true;
                            btnSendSmsOpenPop.Visible = true;
                            Button3.Visible = true;
                            buttnleft.Visible = false;
                            Label66.Text = "Total No Of Applied :";
                            Label68.Text = Convert.ToString(count);
                        }
                        else
                        {
                            Label66.Visible = false;
                            Label68.Visible = false;
                            FpSpread3.Visible = false;
                            errorspan.InnerHtml = "No Records Found";
                            poperrjs.Visible = true;
                            btn_excel.Visible = false;
                            txt_excelname.Visible = false;
                            lbl_reportname.Visible = false;
                            btn_print.Visible = false;
                            btnapprove.Visible = false;
                            btnSendSmsOpenPop.Visible = false;
                            Button3.Visible = false;
                            buttnleft.Visible = false;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, college_code, "Common_SelectionProcess");
        }
    }
    public void shortlist()
    {
        try
        {
            string orderval = "";
            string orderby = "";
            string ordervalue = "";
            string orderbyvalue = "select value from Master_Settings where settings='OrderBy Marks Setting' and usercode='" + user_code + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(orderbyvalue, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                orderval = Convert.ToString(ds.Tables[0].Rows[0]["value"]);
            }
            string percentagevalue = dt.GetFunction("select column_name from admitcolumnset where textcriteria='percent'");
            if (percentagevalue == "0")
            {
                percentagevalue = "percentage";
            }

            string basicorder = "select value from Master_Settings where settings='orderbymarks'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(basicorder, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                string[] spl = orderby.Split(',');
                for (int y = 0; y < spl.Length; y++)
                {
                    if (ordervalue == "")
                    {
                        if (spl[y] == "Mark")
                        {
                            if (ddledu.SelectedItem.Text == "UG")
                            {
                                if (orderval.Trim() == "0")
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " P." + percentagevalue + " desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                    }
                                }
                                else
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " securedmark desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " securedmark desc";
                                    }
                                }
                            }
                            else
                            {
                                if (ordervalue.Trim() == "")
                                {
                                    ordervalue = " P.percentage desc";
                                }
                                else
                                {
                                    ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                }
                            }
                        }
                        else
                        {
                            ordervalue = spl[y];
                        }
                    }
                    else
                    {
                        if (spl[y] == "Mark")
                        {
                            if (ddledu.SelectedItem.Text == "UG")
                            {
                                if (orderval.Trim() == "0")
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " P." + percentagevalue + " desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                    }
                                }
                                else
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " securedmark desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " securedmark desc";
                                    }
                                }
                            }
                            else
                            {
                                if (ordervalue.Trim() == "")
                                {
                                    ordervalue = " P.percentage desc";
                                }
                                else
                                {
                                    ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                }
                            }

                        }
                        else
                        {
                            ordervalue = ordervalue + "," + spl[y];
                        }
                    }
                }
            }
            EquivalentToHSC();
            string marksaddquery = "";
            if (ddledu.SelectedItem.Text == "UG")
            {
                marksaddquery = ",((ISNULL((securedmark / NULLIF( totalmark, 0 )),0))*1200) as securedmark";
                marksaddquery = eqltohsc;
            }
            else
            {
                marksaddquery = "," + percentagevalue + "";
            }

            int count = 0;
            int i = 0;
            string addbatch = "";
            string adddeg = "";
            string addrelival = "";
            string addcommval = "";
            string addsem = Convert.ToString(ddl_sem.SelectedItem.Value);
            for (i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    string addrelival1 = cbl_religion.Items[i].Value.ToString();
                    if (addrelival == "")
                    {
                        addrelival = addrelival1;
                    }
                    else
                    {
                        addrelival = addrelival + "'" + "," + "'" + addrelival1;
                    }
                }
            }


            for (i = 0; i < cbl_comm.Items.Count; i++)
            {
                if (cbl_comm.Items[i].Selected == true)
                {
                    string addcommval1 = cbl_comm.Items[i].Value.ToString();

                    if (addcommval == "")
                    {
                        addcommval = addcommval1;
                    }
                    else
                    {
                        addcommval = addcommval + "'" + "," + "'" + addcommval1;
                    }
                }
            }
            string univBoard = string.Empty;
            for (i = 0; i < cbl_BoardUniv.Items.Count; i++)
            {
                if (cbl_BoardUniv.Items[i].Selected == true)
                {
                    string univBoard1 = cbl_BoardUniv.Items[i].Value.ToString();

                    if (univBoard == "")
                    {
                        univBoard = univBoard1;
                    }
                    else
                    {
                        univBoard = univBoard + "," + univBoard1;
                    }
                }
            }
            string attemp = string.Empty;
            for (i = 0; i < cblAttempt.Items.Count; i++)
            {
                if (cblAttempt.Items[i].Selected == true)
                {
                    string attemp1 = cblAttempt.Items[i].Value.ToString();

                    if (attemp == "")
                    {
                        attemp = "max(ISNULL(noofattempt,'0')) =" + attemp1 + "";
                    }
                    else
                    {
                        attemp = attemp + " or max(ISNULL(noofattempt,'0')) =" + attemp1 + "";
                    }
                }
            }
            string addcomreli = "";
            if (addrelival != "")
            {
                addcomreli = " and religion in('" + addrelival + "')";
            }
            if (addcommval != "")
            {
                addcomreli = addcomreli + " and community in('" + addcommval + "')";
            }
            if (univBoard != "")
            {
                addcomreli = addcomreli + " and p.Course_code in(" + univBoard + ") ";
            }
            //if (attemp != "")
            //{
            //    addcomreli = addcomreli + " and isnull(ph.noofattempt,'') in('" + attemp + "') ";
            //}
            string[] ay = TextBox2.Text.Split('/');
            string[] ay1 = TextBox3.Text.Split('/');
            DateTime dtt = new DateTime();
            DateTime dt1 = new DateTime();
            dtt = Convert.ToDateTime(ay[1] + "/" + ay[0] + "/" + ay[2]);
            dt1 = Convert.ToDateTime(ay1[1] + "/" + ay1[0] + "/" + ay1[2]);
            string addsearch = "";
            if (txt_searchstudname.Text != "")
            {
                addsearch = " and a.stud_name='" + txt_searchstudname.Text + "'";
            }
            else if (txt_searchappno.Text != "")
            {
                addsearch = addsearch + " and a.app_formno='" + txt_searchappno.Text + "'";
            }
            else if (txt_searchmobno.Text != "")
            {
                addsearch = addsearch + " and a.Student_Mobile='" + txt_searchmobno.Text + "'";
            }
            else
            {
                addsearch = "";
            }
            int cc = 0;
            addbatch = Convert.ToString(Convert.ToString(ddl_batch.SelectedItem.Value));
            adddeg = Convert.ToString(ddldept.SelectedItem.Value);
            string degCodeOp = string.Empty;
            if (cbAltCourse.Checked)
            {
                degCodeOp = "  and   a.alternativedegree_code in ('" + adddeg + "') ";
            }
            else
            {
                degCodeOp = "  and  a.degree_code in('" + adddeg + "')  ";
            }
            FpSpread1.Visible = true;
            FpSpread1.Sheets[0].PageSize = 5;
            FpSpread1.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
            FpSpread1.Pager.Mode = FarPoint.Web.Spread.PagerMode.NextPrev;
            FpSpread1.Pager.Align = HorizontalAlign.Right;
            FpSpread1.Pager.Font.Bold = true;
            FpSpread1.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            FpSpread1.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            FarPoint.Web.Spread.StyleInfo darkstyle22 = new FarPoint.Web.Spread.StyleInfo();
            FpSpread1.CommandBar.Visible = false;
            FpSpread1.Sheets[0].RowHeader.Visible = false;
            darkstyle22.BackColor = ColorTranslator.FromHtml("#008B8B");
            darkstyle22.ForeColor = Color.Black;
            darkstyle22.HorizontalAlign = HorizontalAlign.Center;
            FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle22;
            FpSpread1.Sheets[0].ColumnCount = 3;
            FpSpread1.Sheets[0].RowCount = 0;
            FpSpread1.Pager.PageCount = 5;
            FpSpread1.ShowHeaderSelection = false;
            string query = "";
            query = "    select distinct a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No' else 'Yes' end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,p.tancet_mark,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,p.percentage,p.major_percent,p.majorallied_percent,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.stud_type,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,p.totalmark" + marksaddquery + ",p.course_entno,P.instaddress,a.App_No,uni_state,type_semester,university_code,ISNULL(pt.TExtVal,'') Part2Language,ISNULL(Cc.TExtVal,'') Part1Language,ISNULL(Cc.TExtVal,'') Course,ISNULL(U.TextVal,'') University,ISNULL(Institute_Name,'') Institute_Name,ISNULL(PassMonth,'') PassMonth,ISNULL(PassYear,'') PassYear,a.ApplBankRefNumber,CONVERT(varchar(10), a.ApplBankRefDate,103) as ApplBankRefDate,case when  isnull(p.vocational_stream,'0')='0' then 'No' when isnull(p.vocational_stream,'0')='1' then 'Yes' end as vocational_stream,(select TextVal  from TextValTable  where TextCode =p.course_code) as  course_code,religion,ISNULL (tt.priority2,0) ,a.community,isnull(ts.priority1,0),noofattempts  from degree d,Department dt,Course C ,Stud_prev_details P INNER JOIN applyn A ON P.app_no = A.app_no  left join perv_marks_history ph on ph.course_entno =p.course_entno LEFT JOIN TextValTable Cc ON Cc.TextCode = P.course_code  LEFT JOIN TextValTable U ON U.TextCode = P.university_code LEFT JOIN TextValTable pa ON pa.TextCode = P.Part1Language LEFT JOIN TextValTable pt ON pt.TextCode = P.Part2Language left join TextValTable tt on tt.TextCode =a.religion left join TextValTable ts on ts.TextCode =a.community Where p.app_no = a.app_no  and d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')=0 and ISNULL(markPriority,1)=1 and selection_status='1'  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code ";
            if (attemp != "")
            {
                query = query + " and a.app_no in (select a.app_no from applyn a,Stud_prev_details s,perv_marks_history ph where a.app_no =s.app_no and s.course_entno =ph.course_entno and isconfirm ='1' and ISNULL(admission_status,'0')='0'   and ISNULL(selection_status,'0')='1'  and a.Batch_Year in('" + addbatch + "')  and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  group by a.app_no  having (" + attemp + "))";
            }
            if (addsearch != "")
            {
                query += " " + addsearch + " ";
            }
            else
            {
                query += " " + degCodeOp + " " + addcomreli + "and AdmitedDate between '" + dtt.ToString("MM/dd/yyyy") + "' and '" + dt1.ToString("MM/dd/yyyy") + "' ";
            }
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ordervalue != "" && ordervalue != "0")
                {
                    if (orderval.Trim() == "0")
                    {
                        query += " order by " + ordervalue + "";
                    }
                    else
                    {
                        query += " order by " + ordervalue + "";
                    }
                }
            }
            else
            {
                if (ddledu.SelectedItem.Text == "UG")
                {
                    if (orderval.Trim() == "0")
                    {
                        query += " order by p." + percentagevalue + " desc";
                    }
                    else
                    {
                        query += " order by securedmark desc";
                    }
                }
                else
                {
                    query += " order by p." + percentagevalue + " desc";
                }
            }

            ds.Clear();
            ds = dt.select_method_wo_parameter(query, "Text");

            if (query == "")
            {
                FpSpread1.Visible = false;
                Label66.Visible = false;
                Label68.Visible = false;
                //lbl_err_stud.Visible = true;
                //lbl_err_stud.Text = "Kindly Select All List ";
                btn_print.Visible = false;
                btn_excel.Visible = false;
                txt_excelname.Visible = false;
                lbl_reportname.Visible = false;
                btnapprove.Visible = false;
                btnSendSmsOpenPop.Visible = false;
                Button3.Visible = false;
                buttnleft.Visible = false;
                return;
            }
            else
            {
                if (query != "")
                {
                    //ds = dt.select_method(query, hat, "Text");
                    if (ds.Tables.Count == 0 || ds.Tables[0].Rows.Count == 0)
                    {
                        Label66.Visible = false;
                        Label68.Visible = false;
                        FpSpread1.Visible = false;
                        errorspan.InnerHtml = "No Records Found";
                        btn_print.Visible = false;
                        poperrjs.Visible = true;
                        btn_excel.Visible = false;
                        txt_excelname.Visible = false;
                        lbl_reportname.Visible = false;
                        btnapprove.Visible = false;
                        btnSendSmsOpenPop.Visible = false;
                        Button3.Visible = false;
                        buttnleft.Visible = false;
                        return;

                    }
                    else
                    {
                        //lbl_err_stud.Visible = false;
                        Dictionary<int, double> dicsubcol = new Dictionary<int, double>();
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                string Getmark = "";
                                string Totalmark = "";
                                string percentage = "";
                                if (ddledu.SelectedItem.Text == "UG")
                                {
                                    Getmark = Convert.ToString(ds.Tables[0].Rows[i]["securedmark"]);
                                    Totalmark = Convert.ToString(ds.Tables[0].Rows[i]["totalmark"]);
                                }

                                double totlmark = 0;
                                percentage = Convert.ToString(ds.Tables[0].Rows[i]["" + percentagevalue + ""]);
                                if (ddledu.SelectedItem.Text == "UG")
                                {
                                    //if (Getmark.Trim() != "" && Totalmark.Trim() != "")
                                    //{
                                    //    totlmark = (Convert.ToDouble(Getmark) / Convert.ToDouble(Totalmark)) * Convert.ToDouble(1200);
                                    //    if (!dicsubcol.ContainsKey(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"])))
                                    //    {
                                    //        dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark, 2)));
                                    //    }
                                    //}
                                    //else if (Getmark.Trim() != "" && Totalmark.Trim() == "")
                                    //{
                                    if (Getmark.Trim() == "")
                                    {
                                        Getmark = "0";
                                    }
                                    totlmark = Convert.ToDouble(Getmark);
                                    if (!dicsubcol.ContainsKey(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"])))
                                    {
                                        dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark)));
                                    }
                                    // }
                                }
                                else
                                {
                                    if (percentage.Trim() == "")
                                    {
                                        percentage = "0";
                                    }
                                    totlmark = Convert.ToDouble(percentage);
                                    if (!dicsubcol.ContainsKey(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"])))
                                    {
                                        dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark, 2)));
                                    }
                                }
                            }
                            // dicsubcol = dicsubcol.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
                        }
                        if (dicsubcol.Count > 0)
                        {

                            FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                            FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                            FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].Text = "View";
                            cc = 2;
                            if (checkSchoolSetting() == 0)
                                FpSpread1.Sheets[0].Columns[2].Visible = false;
                            else
                                FpSpread1.Sheets[0].Columns[2].Visible = true;
                            string columnorder_query = "select * from admitcolumnset where   user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
                            // college_code='" + ddl_collegename.SelectedItem.Value + "' and
                            ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                            if (ds1.Tables[0].Rows.Count > 0)
                            {

                                for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                                {
                                    string percentage = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                    if (percentage == "Hostel Name" || percentage == "Room Type" || percentage == "Boarding")
                                    {
                                    }
                                    else
                                    {
                                        cc++;
                                        FpSpread1.Sheets[0].ColumnCount = cc + 1;
                                        FpSpread1.Sheets[0].ColumnHeader.Cells[0, cc].Text = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);

                                        if (ddledu.SelectedItem.Text == "PG")
                                        {
                                            if (percentage == "Marks")
                                            {
                                                FpSpread1.Sheets[0].ColumnHeader.Cells[0, cc].Text = "Percentage";
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                FpSpread1.Visible = false;
                                errorspan.InnerHtml = "Please Set The Column Order Setting";
                                poperrjs.Visible = true;
                                return;
                            }
                            FarPoint.Web.Spread.TextCellType txtct = new FarPoint.Web.Spread.TextCellType();
                            FarPoint.Web.Spread.CheckBoxCellType cball = new FarPoint.Web.Spread.CheckBoxCellType();
                            cball.AutoPostBack = true;
                            FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                            cb.AutoPostBack = false;
                            FarPoint.Web.Spread.ButtonCellType btn = new FarPoint.Web.Spread.ButtonCellType("MyCommand", FarPoint.Web.Spread.ButtonType.ImageButton, "~/images/view11.png");
                            FpSpread1.Sheets[0].RowCount++;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].CellType = cball;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Locked = false;
                            DataView dv = new DataView();
                            foreach (var kvp in dicsubcol)
                            {
                                string app_no = kvp.Key.ToString();
                                string percentage = kvp.Value.ToString();

                                ds.Tables[0].DefaultView.RowFilter = "app_no='" + app_no + "'";
                                dv = ds.Tables[0].DefaultView;
                                if (dv.Count > 0)
                                {

                                    FpSpread1.Sheets[0].RowCount++;
                                    count++;

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = count.ToString();
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Locked = true;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(dv[0]["app_no"]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].CellType = cb;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].CellType = btn;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Column.Width = 50;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;


                                    cc = 2;
                                    columnorder_query = "select * from admitcolumnset where  user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
                                    //college_code='" + ddl_collegename.SelectedItem.Value + "' and
                                    ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                                    if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
                                    {

                                        for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                                        {
                                            string columname = Convert.ToString(ds1.Tables[0].Rows[u]["column_name"]);
                                            if (columname == "HostelRegistrationPK" || columname == "RoomFK" || columname == "Boarding")
                                            {
                                            }
                                            else
                                            {
                                                cc++;

                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].CellType = txtct;
                                                if (columname == "Alternativedegree_code")
                                                {
                                                    string altercourse = dt.GetFunction("select distinct dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddl_collegename.SelectedItem.Value + "' and d.Degree_Code='" + Convert.ToString(dv[0]["Alternativedegree_code"]) + "' ");
                                                    if (altercourse == "0")
                                                    {
                                                        altercourse = "";
                                                    }
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = altercourse;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Locked = true;
                                                }
                                                else if (columname == "DistinctSport")
                                                {
                                                    string value = Convert.ToString(dv[0][columname]);
                                                    if (value == "Yes")
                                                    {
                                                        string val = d2.GetFunction("select textval from applyn a,textvaltable t where app_no='" + app_no + "' and textcode=DistinctSport");
                                                        if (val != "0")
                                                        {
                                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = value + "-" + val;
                                                        }
                                                        else
                                                        {
                                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = value;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = value;
                                                    }
                                                }
                                                else if (columname == "totalfees")
                                                {
                                                    FpSpread1.Sheets[0].Columns[cc].Visible = false;
                                                }

                                                else if (columname == "remarks")
                                                {
                                                    string VocationStream = Convert.ToString(dv[0]["vocational_stream"]);
                                                    string Nationality = Convert.ToString(dv[0]["citizen"]);
                                                    string CourseCode = Convert.ToString(dv[0]["course_code"]);
                                                    string Concatvalue = "";
                                                    if (VocationStream.Trim() != "No")
                                                    {
                                                        Concatvalue = "Vocational";
                                                    }
                                                    if (Nationality.Trim().ToUpper() != "INDIAN")
                                                    {
                                                        if (Concatvalue.Trim() == "")
                                                        {
                                                            Concatvalue = Nationality;
                                                        }
                                                        else
                                                        {
                                                            Concatvalue = Concatvalue + " - " + Nationality;
                                                        }
                                                    }
                                                    if (CourseCode.Trim().ToUpper() == "CBSE")
                                                    {
                                                        if (Concatvalue.Trim() == "")
                                                        {
                                                            Concatvalue = CourseCode;
                                                        }
                                                        else
                                                        {
                                                            Concatvalue = Concatvalue + " - " + CourseCode;
                                                        }
                                                    }
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(Concatvalue);
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Locked = true;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                    // FpSpread3.Sheets[0].Columns[cc].Visible = false;
                                                }
                                                else if (columname == "securedmark")
                                                {

                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(percentage);
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Locked = true;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                }
                                                else if (columname != "PaidAmount")
                                                {

                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(dv[0][columname]);
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Locked = true;

                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            FpSpread1.Visible = true;
                            FpSpread1.Sheets[0].PageSize = 51;
                            FpSpread1.TitleInfo.Height = 30;
                            FpSpread1.Width = 930;
                            FpSpread1.Height = 390;
                            Label66.Visible = true;
                            Label68.Visible = true;
                            btn_print.Visible = true;
                            btn_excel.Visible = true;
                            txt_excelname.Visible = true;
                            lbl_reportname.Visible = true;
                            // btnapprove.Visible = true;
                            Button3.Visible = true;
                            Button9.Visible = true;
                            buttnleft.Visible = false;
                            Label66.Text = "Total No Of Shortist Candidate :";
                            Label68.Text = Convert.ToString(ds.Tables[0].Rows.Count);
                        }
                    }
                }
            }

        }

        catch (NullReferenceException ex)
        {
            errorspan.InnerHtml = ("Processor Usage" + ex.Message);
            poperrjs.Visible = true;

        }
    }
    public void admitted()
    {
        try
        {
            string orderval = "";
            string orderby = "";
            string ordervalue = "";
            string orderbyvalue = "select value from Master_Settings where settings='OrderBy Marks Setting' and usercode='" + user_code + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(orderbyvalue, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                orderval = Convert.ToString(ds.Tables[0].Rows[0]["value"]);
            }

            string basicorder = "select value from Master_Settings where settings='orderbymarks'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(basicorder, "Text");
            string percentagevalue = dt.GetFunction("select column_name from admitcolumnset where textcriteria='percent'");
            if (percentagevalue == "0")
            {
                percentagevalue = "percentage";
            }

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                orderby = Convert.ToString(ds.Tables[0].Rows[0]["value"]);
                string[] spl = orderby.Split(',');
                for (int y = 0; y < spl.Length; y++)
                {
                    if (ordervalue == "")
                    {
                        if (spl[y] == "Mark")
                        {
                            if (ddledu.SelectedItem.Text == "UG")
                            {
                                if (orderval.Trim() == "0")
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " P." + percentagevalue + " desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                    }
                                }
                                else
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " securedmark desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " securedmark desc";
                                    }
                                }
                            }
                            else
                            {
                                if (ordervalue.Trim() == "")
                                {
                                    ordervalue = " P." + percentagevalue + " desc";
                                }
                                else
                                {
                                    ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                }
                            }

                        }
                        else
                        {
                            ordervalue = spl[y];
                        }
                    }
                    else
                    {
                        if (spl[y] == "Mark")
                        {
                            if (ddledu.SelectedItem.Text == "UG")
                            {
                                if (orderval.Trim() == "0")
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " P." + percentagevalue + " desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                    }
                                }
                                else
                                {
                                    if (ordervalue.Trim() == "")
                                    {
                                        ordervalue = " securedmark desc";
                                    }
                                    else
                                    {
                                        ordervalue = ordervalue + "," + " securedmark desc";
                                    }
                                }
                            }
                            else
                            {
                                if (ordervalue.Trim() == "")
                                {
                                    ordervalue = " P." + percentagevalue + " desc";
                                }
                                else
                                {
                                    ordervalue = ordervalue + "," + " P." + percentagevalue + " desc";
                                }
                            }

                        }
                        else
                        {
                            ordervalue = ordervalue + "," + spl[y];
                        }
                    }
                }

            }
            EquivalentToHSC();
            string marksaddquery = "";
            if (ddledu.SelectedItem.Text == "UG")
            {
                marksaddquery = ",((ISNULL((securedmark / NULLIF( totalmark, 0 )),0))*1200) as securedmark";
                marksaddquery = eqltohsc;
            }
            else
            {
                marksaddquery = ",percentage";
            }

            int count = 0;
            int i = 0;
            string addbatch = "";
            string adddeg = "";
            string addrelival = "";
            string addcommval = "";
            string addsem = Convert.ToString(ddl_sem.SelectedItem.Value);
            for (i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    string addrelival1 = cbl_religion.Items[i].Value.ToString();
                    if (addrelival == "")
                    {
                        addrelival = addrelival1;
                    }
                    else
                    {
                        addrelival = addrelival + "'" + "," + "'" + addrelival1;
                    }
                }
            }


            for (i = 0; i < cbl_comm.Items.Count; i++)
            {
                if (cbl_comm.Items[i].Selected == true)
                {
                    string addcommval1 = cbl_comm.Items[i].Value.ToString();

                    if (addcommval == "")
                    {
                        addcommval = addcommval1;
                    }
                    else
                    {
                        addcommval = addcommval + "'" + "," + "'" + addcommval1;
                    }
                }
            }
            string univBoard = string.Empty;
            for (i = 0; i < cbl_BoardUniv.Items.Count; i++)
            {
                if (cbl_BoardUniv.Items[i].Selected == true)
                {
                    string univBoard1 = cbl_BoardUniv.Items[i].Value.ToString();

                    if (univBoard == "")
                    {
                        univBoard = univBoard1;
                    }
                    else
                    {
                        univBoard = univBoard + "," + univBoard1;
                    }
                }
            }
            string attemp = string.Empty;
            for (i = 0; i < cblAttempt.Items.Count; i++)
            {
                if (cblAttempt.Items[i].Selected == true)
                {
                    string attemp1 = cblAttempt.Items[i].Value.ToString();

                    if (attemp == "")
                    {
                        attemp = "max(ISNULL(noofattempt,'0')) =" + attemp1 + "";
                    }
                    else
                    {
                        attemp = attemp + " or max(ISNULL(noofattempt,'0')) =" + attemp1 + "";
                    }
                }
            }
            string addcomreli = "";
            if (addrelival != "")
            {
                addcomreli = " and religion in('" + addrelival + "')";
            }
            if (addcommval != "")
            {
                addcomreli = addcomreli + " and community in('" + addcommval + "')";
            }
            if (univBoard != "")
            {
                addcomreli = addcomreli + " and p.Course_code in(" + univBoard + ") ";
            }
            //if (attemp != "")
            //{
            //    addcomreli = addcomreli + " and isnull(ph.noofattempt,'') in('" + attemp + "') ";
            //}
            string[] ay = TextBox2.Text.Split('/');
            string[] ay1 = TextBox3.Text.Split('/');
            DateTime dtt = new DateTime();
            DateTime dt1 = new DateTime();
            dtt = Convert.ToDateTime(ay[1] + "/" + ay[0] + "/" + ay[2]);
            dt1 = Convert.ToDateTime(ay1[1] + "/" + ay1[0] + "/" + ay1[2]);
            string addsearch = "";
            if (txt_searchstudname.Text != "")
            {
                addsearch = " and a.stud_name='" + txt_searchstudname.Text + "'";
            }
            else if (txt_searchappno.Text != "")
            {
                addsearch = addsearch + " and a.app_formno='" + txt_searchappno.Text + "'";
            }
            else if (txt_searchmobno.Text != "")
            {
                addsearch = addsearch + " and a.Student_Mobile='" + txt_searchmobno.Text + "'";
            }
            else
            {
                addsearch = "";
            }

            addbatch = Convert.ToString(Convert.ToString(ddl_batch.SelectedItem.Value));
            adddeg = Convert.ToString(ddldept.SelectedItem.Value);
            string degCodeOp = string.Empty;
            if (cbAltCourse.Checked)
            {
                degCodeOp = "  and   a.alternativedegree_code in ('" + adddeg + "') ";
            }
            else
            {
                degCodeOp = "  and  a.degree_code in('" + adddeg + "')  ";
            }
            FpSpread2.Sheets[0].PageSize = 5;
            FpSpread2.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
            FpSpread2.Pager.Mode = FarPoint.Web.Spread.PagerMode.NextPrev;
            FpSpread2.Pager.Align = HorizontalAlign.Right;
            FpSpread2.Pager.Font.Bold = true;
            FarPoint.Web.Spread.StyleInfo darkstyle2 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle2.BackColor = ColorTranslator.FromHtml("#008B8B");
            darkstyle2.ForeColor = Color.Black;
            darkstyle2.HorizontalAlign = HorizontalAlign.Center;
            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle2;
            FpSpread2.Pager.PageCount = 5;
            FpSpread2.ActiveSheetView.SheetCorner.DefaultStyle.Font.Bold = false;
            FpSpread2.ActiveSheetView.DefaultRowHeight = 25;
            FpSpread2.ActiveSheetView.Rows.Default.Font.Name = "Book Antiqua";
            FpSpread2.ActiveSheetView.Rows.Default.Font.Size = FontUnit.Small;
            FpSpread2.ActiveSheetView.Rows.Default.Font.Bold = false;
            FpSpread2.ActiveSheetView.Columns.Default.Font.Bold = false;
            FpSpread2.ActiveSheetView.Columns.Default.Font.Size = FontUnit.Small;
            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            FpSpread2.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            FpSpread2.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            FpSpread2.ShowHeaderSelection = false;
            FpSpread2.Sheets[0].ColumnCount = 3;
            FpSpread2.Sheets[0].RowCount = 0;
            string query = "";
            int cc = 0;
            //   if (DropDownList2.SelectedItem.Value == "1")
            if (DropDownList2.SelectedItem.Value == "3")
            {
                query = " select distinct (Select Stage_Name FROM Stage_Master T WHERE Boarding = T.stage_id) Boarding,r.Stud_Type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No' else 'Yes' end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,p.tancet_mark,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,p.percentage,p.major_percent,p.majorallied_percent,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,p.totalmark,securedmark,p.course_entno,P.instaddress,a.App_No,uni_state,type_semester,university_code,ISNULL(pt.TExtVal,'') Part2Language,ISNULL(Cc.TExtVal,'') Part1Language,ISNULL(Cc.TExtVal,'') Course,ISNULL(U.TextVal,'') University,ISNULL(Institute_Name,'') Institute_Name,ISNULL(PassMonth,'') PassMonth,ISNULL(PassYear,'') PassYear,a.ApplBankRefNumber,CONVERT(varchar(10), a.ApplBankRefDate,103) as ApplBankRefDate,case when  isnull(p.vocational_stream,'0')='0' then 'No' when isnull(p.vocational_stream,'0')='1' then 'Yes' end as vocational_stream ,(select TextVal  from TextValTable  where TextCode =p.course_code) as  course_code,a.religion,ISNULL (tt.priority2,0) ,a.community,isnull(ts.priority1,0),noofattempts from degree d,Department dt,Course C ,Stud_prev_details P INNER JOIN applyn A ON P.app_no = A.app_no left join perv_marks_history ph on ph.course_entno =p.course_entno LEFT JOIN TextValTable Cc ON Cc.TextCode = P.course_code  LEFT JOIN TextValTable U ON U.TextCode = P.university_code LEFT JOIN TextValTable pa ON pa.TextCode = P.Part1Language LEFT JOIN TextValTable pt ON pt.TextCode = P.Part2Language left join TextValTable tt on tt.TextCode =a.religion left join TextValTable ts on ts.TextCode =a.community left join Registration R on R.App_No =a.app_no Where p.app_no = a.app_no  and d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and admission_status='1' and ISNULL(markPriority,1)=1  and selection_status='1'  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code";
                if (AdmConfFormat() != 0)
                {
                    query = "  select distinct ''Boarding,Stud_Type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No' else 'Yes' end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,p.tancet_mark,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,p.percentage,p.major_percent,p.majorallied_percent,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,p.totalmark" + marksaddquery + ",p.course_entno,P.instaddress,a.App_No,uni_state,type_semester,university_code,ISNULL(pt.TExtVal,'') Part2Language,ISNULL(Cc.TExtVal,'') Part1Language,ISNULL(Cc.TExtVal,'') Course,ISNULL(U.TextVal,'') University,ISNULL(Institute_Name,'') Institute_Name,ISNULL(PassMonth,'') PassMonth,ISNULL(PassYear,'') PassYear,a.ApplBankRefNumber,CONVERT(varchar(10), a.ApplBankRefDate,103) as ApplBankRefDate,case when  isnull(p.vocational_stream,'0')='0' then 'No' when isnull(p.vocational_stream,'0')='1' then 'Yes' end as vocational_stream ,(select TextVal  from TextValTable  where TextCode =p.course_code) as  course_code,a.religion,ISNULL (tt.priority2,0) ,a.community,isnull(ts.priority1,0),noofattempts from degree d,Department dt,Course C ,Stud_prev_details P INNER JOIN applyn A ON P.app_no = A.app_no left join perv_marks_history ph on ph.course_entno =p.course_entno LEFT JOIN TextValTable Cc ON Cc.TextCode = P.course_code  LEFT JOIN TextValTable U ON U.TextCode = P.university_code LEFT JOIN TextValTable pa ON pa.TextCode = P.Part1Language LEFT JOIN TextValTable pt ON pt.TextCode = P.Part2Language left join TextValTable tt on tt.TextCode =a.religion left join TextValTable ts on ts.TextCode =a.community Where p.app_no = a.app_no  and d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and admission_status='1' and ISNULL(markPriority,1)=1  and selection_status='1'  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code";
                    query = query + "   and a.app_no not in(select app_no from Registration )";
                }

            }
            else if (DropDownList2.SelectedItem.Value == "2")
            {
                query = "  select distinct ''Boarding,a.Stud_Type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No' when DistinctSport=1 then 'Yes' end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,p.tancet_mark,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,p.percentage,p.major_percent,p.majorallied_percent,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,p.totalmark " + marksaddquery + ",p.course_entno,P.instaddress,a.App_No,uni_state,type_semester,university_code,ISNULL(pt.TExtVal,'') Part2Language,ISNULL(Cc.TExtVal,'') Part1Language,ISNULL(Cc.TExtVal,'') Course,ISNULL(U.TextVal,'') University,ISNULL(Institute_Name,'') Institute_Name,ISNULL(PassMonth,'') PassMonth,ISNULL(PassYear,'') PassYear,a.ApplBankRefNumber,CONVERT(varchar(10), a.ApplBankRefDate,103) as ApplBankRefDate,case when  isnull(p.vocational_stream,'0')='0' then 'No' when isnull(p.vocational_stream,'0')='1' then 'Yes' end as vocational_stream ,(select TextVal  from TextValTable  where TextCode =p.course_code) as  course_code,a.religion,ISNULL (tt.priority2,0) ,a.community,isnull(ts.priority1,0),noofattempts from degree d,Department dt,Course C ,Stud_prev_details P INNER JOIN applyn A ON P.app_no = A.app_no left join perv_marks_history ph on ph.course_entno =p.course_entno LEFT JOIN TextValTable Cc ON Cc.TextCode = P.course_code  LEFT JOIN TextValTable U ON U.TextCode = P.university_code LEFT JOIN TextValTable pa ON pa.TextCode = P.Part1Language LEFT JOIN TextValTable pt ON pt.TextCode = P.Part2Language left join TextValTable tt on tt.TextCode =a.religion left join TextValTable ts on ts.TextCode =a.community Where p.app_no = a.app_no  and d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and admission_status='2' and ISNULL(markPriority,1)=1  and selection_status='1'  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "')  and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code ";
            }
            else if (DropDownList2.SelectedItem.Value == "1")
            {
                query = "  select distinct (Select Stage_Name FROM Stage_Master T WHERE Boarding = T.stage_id) Boarding,r.Stud_Type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No' when DistinctSport=1 then 'Yes' end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,p.tancet_mark,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,p.percentage,p.major_percent,p.majorallied_percent,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,p.totalmark " + marksaddquery + ",p.course_entno,P.instaddress,a.App_No,uni_state,type_semester,university_code,ISNULL(pt.TExtVal,'') Part2Language,ISNULL(Cc.TExtVal,'') Part1Language,ISNULL(Cc.TExtVal,'') Course,ISNULL(U.TextVal,'') University,ISNULL(Institute_Name,'') Institute_Name,ISNULL(PassMonth,'') PassMonth,ISNULL(PassYear,'') PassYear,a.ApplBankRefNumber,CONVERT(varchar(10), a.ApplBankRefDate,103) as ApplBankRefDate,case when  isnull(p.vocational_stream,'0')='0' then 'No' when isnull(p.vocational_stream,'0')='1' then 'Yes' end as vocational_stream,(select TextVal  from TextValTable  where TextCode =p.course_code) as  course_code,isnull(ts.priority1,0),isnull(tt.priority2,0),a.religion,a.community,noofattempts  from Registration r,degree d,Department dt,Course C ,Stud_prev_details P INNER JOIN applyn A ON P.app_no = A.app_no left join perv_marks_history ph on ph.course_entno =p.course_entno LEFT JOIN TextValTable Cc ON Cc.TextCode = P.course_code  LEFT JOIN TextValTable U ON U.TextCode = P.university_code LEFT JOIN TextValTable pa ON pa.TextCode = P.Part1Language LEFT JOIN TextValTable pt ON pt.TextCode = P.Part2Language  left join TextValTable tt on tt.TextCode =a.religion left join TextValTable ts on ts.TextCode =a.community  Where p.app_no = a.app_no and r.App_No=a.app_no and CC='0' and DelFlag='0'and  p.app_no=r.App_No  and d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and admission_status='1'   and selection_status='1' and ISNULL(markPriority,1)=1 and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "')   and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code ";
                query = query + "  and a.app_no in(select distinct App_No  from FT_FinDailyTransaction)";
            }
            if (attemp != "")
            {
                query = query + " and a.app_no in (select a.app_no from applyn a,Stud_prev_details s,perv_marks_history ph where a.app_no =s.app_no and s.course_entno =ph.course_entno and isconfirm ='1' and ISNULL(admission_status,'0')='1'   and ISNULL(selection_status,'0')='1'  and a.Batch_Year in('" + addbatch + "')  and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  group by a.app_no  having (" + attemp + "))";
            }

            if (addsearch != "")
            {
                query += " " + addsearch + " ";
            }
            else
            {
                query += " " + degCodeOp + " " + addcomreli + "and AdmitedDate between '" + dtt.ToString("MM/dd/yyyy") + "' and '" + dt1.ToString("MM/dd/yyyy") + "' ";
            }
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (ordervalue != "" && ordervalue != "0")
                {
                    if (orderval.Trim() == "0")
                    {
                        query += " order by " + ordervalue + "";
                    }
                    else
                    {
                        query += " order by " + ordervalue + "";
                    }
                }
            }
            else
            {
                if (ddledu.SelectedItem.Text == "UG")
                {
                    if (orderval.Trim() == "0")
                    {
                        query += " order by p." + percentagevalue + " desc";
                    }
                    else
                    {
                        query += " order by securedmark desc";
                    }
                }
                else
                {
                    query += " order by p." + percentagevalue + " desc";
                }
            }

            ds.Clear();
            ds = dt.select_method_wo_parameter(query, "Text");

            if (query == "")
            {

                FpSpread2.Visible = false;
                Label66.Visible = false;
                Label68.Visible = false;
                //lbl_err_stud.Visible = true;
                btn_print.Visible = false;
                btn_excel.Visible = false;
                txt_excelname.Visible = false;
                lbl_reportname.Visible = false;
                btnapprove.Visible = false;
                btnSendSmsOpenPop.Visible = false;
                Button3.Visible = false;
                buttnleft.Visible = false;
                btnSendSmsOpenPop.Visible = false;
                //lbl_err_stud.Text = "Kindly Select All List ";
                return;
            }
            else
            {
                if (query != "")
                {
                    //ds = dt.select_method(query, hat, "Text");
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        Label66.Visible = false;
                        Label68.Visible = false;
                        FpSpread2.Visible = false;
                        btn_excel.Visible = false;
                        txt_excelname.Visible = false;
                        lbl_reportname.Visible = false;
                        btn_print.Visible = false;
                        btnapprove.Visible = false;
                        btnSendSmsOpenPop.Visible = false;
                        Button3.Visible = false;
                        errorspan.InnerHtml = "No Records Found";
                        poperrjs.Visible = true;
                        buttnleft.Visible = false;
                        btnSendSmsOpenPop.Visible = false;
                        return;

                    }
                    else
                    {
                        //lbl_err_stud.Visible = false;
                        Dictionary<int, double> dicsubcol = new Dictionary<int, double>();
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                string Getmark = "";
                                string Totalmark = "";
                                string percentage = "";
                                if (ddledu.SelectedItem.Text == "UG")
                                {
                                    Getmark = Convert.ToString(ds.Tables[0].Rows[i]["securedmark"]);
                                    Totalmark = Convert.ToString(ds.Tables[0].Rows[i]["totalmark"]);
                                }

                                percentage = Convert.ToString(ds.Tables[0].Rows[i]["" + percentagevalue + ""]);

                                double totlmark = 0;

                                if (ddledu.SelectedItem.Text == "UG")
                                {
                                    //if (Getmark.Trim() != "" && Totalmark.Trim() != "")
                                    //{
                                    //    totlmark = (Convert.ToDouble(Getmark) / Convert.ToDouble(Totalmark)) * Convert.ToDouble(1200);
                                    //    dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark, 2)));
                                    //}
                                    //else if (Getmark.Trim() != "" && Totalmark.Trim() == "")
                                    //{
                                    if (Getmark.Trim() == "")
                                    {
                                        Getmark = "0";
                                    }
                                    totlmark = Convert.ToDouble(Getmark);
                                    string ap_no = d2.GetFunction("select * from applyn where degree_code='" + ddldept.SelectedItem.Value + "' and app_no='" + Convert.ToString(ds.Tables[0].Rows[i]["app_no"]) + "'");
                                    if (!dicsubcol.ContainsKey(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"])))
                                    {
                                        dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark)));
                                    }
                                    //}
                                }
                                else
                                {
                                    if (percentage.Trim() == "")
                                    {
                                        percentage = "0";
                                    }
                                    totlmark = Convert.ToDouble(percentage);
                                    if (!dicsubcol.ContainsKey(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"])))
                                    {
                                        dicsubcol.Add(Convert.ToInt32(ds.Tables[0].Rows[i]["app_no"]), Convert.ToDouble(Math.Round(totlmark, 2)));
                                    }
                                }

                            }

                            //dicsubcol = dicsubcol.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
                        }

                        if (dicsubcol.Count > 0)
                        {
                            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 2].Text = "View";
                            cc = 2;
                            string columnorder_query = "select * from admitcolumnset where   user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
                            // college_code='" + ddl_collegename.SelectedItem.Value + "' and
                            ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                            if (ds1.Tables[0].Rows.Count > 0)
                            {

                                for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                                {
                                    cc++;
                                    FpSpread2.Sheets[0].ColumnCount = cc + 1;
                                    FpSpread2.Sheets[0].ColumnHeader.Cells[0, cc].Text = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                    string percentage = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                    if (ddledu.SelectedItem.Text == "PG")
                                    {
                                        if (percentage == "Marks")
                                        {
                                            FpSpread2.Sheets[0].ColumnHeader.Cells[0, cc].Text = "Percentage";
                                        }
                                    }

                                }
                                cc++;
                                FpSpread2.Sheets[0].ColumnCount = cc + 1;
                                FpSpread2.Sheets[0].ColumnHeader.Cells[0, cc].Text = "Fee Confirm";
                                FpSpread2.Sheets[0].Columns[cc].Visible = false;
                            }
                            else
                            {
                                FpSpread2.Visible = false;
                                errorspan.InnerHtml = "Please Set The Column Order Setting";
                                poperrjs.Visible = true;
                                return;
                            }
                            FarPoint.Web.Spread.TextCellType txtct = new FarPoint.Web.Spread.TextCellType();
                            FarPoint.Web.Spread.CheckBoxCellType cball = new FarPoint.Web.Spread.CheckBoxCellType();
                            cball.AutoPostBack = true;
                            FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                            cb.AutoPostBack = false;
                            FarPoint.Web.Spread.CheckBoxCellType cb1 = new FarPoint.Web.Spread.CheckBoxCellType();
                            FarPoint.Web.Spread.ButtonCellType btn = new FarPoint.Web.Spread.ButtonCellType("MyCommand", FarPoint.Web.Spread.ButtonType.ImageButton, "~/images/view11.png");
                            cb1.AutoPostBack = false;
                            FpSpread2.Sheets[0].RowCount++;
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].CellType = cball;
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread2.Sheets[0].Rows[FpSpread2.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Locked = false;
                            DataView dv = new DataView();
                            foreach (var kvp in dicsubcol)
                            {
                                string app_no = kvp.Key.ToString();
                                string percentage = kvp.Value.ToString();

                                ds.Tables[0].DefaultView.RowFilter = "app_no='" + app_no + "'";
                                dv = ds.Tables[0].DefaultView;

                                FpSpread2.Sheets[0].RowCount++;
                                count++;
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Text = count.ToString();
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Locked = true;
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(dv[0]["app_no"]);
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].CellType = cb;
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].Column.Width = 50;
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].CellType = btn;
                                cc = 2;
                                columnorder_query = "select * from admitcolumnset where   user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
                                //college_code='" + ddl_collegename.SelectedItem.Value + "' and
                                ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                                if (ds1.Tables[0].Rows.Count > 0)
                                {

                                    for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                                    {
                                        cc++;
                                        string columname = Convert.ToString(ds1.Tables[0].Rows[u]["column_name"]);
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].CellType = txtct;
                                        if (columname == "Alternativedegree_code")
                                        {
                                            string altercourse = dt.GetFunction("select distinct dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddl_collegename.SelectedItem.Value + "' and d.Degree_Code='" + Convert.ToString(dv[0]["Alternativedegree_code"]) + "' ");
                                            if (altercourse == "0")
                                            {
                                                altercourse = "";
                                            }
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = altercourse;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                        }
                                        else if (columname == "DistinctSport")
                                        {
                                            string value = Convert.ToString(dv[0][columname]);
                                            if (value == "Yes")
                                            {
                                                string val = d2.GetFunction("select textval from applyn a,textvaltable t where app_no='" + app_no + "' and textcode=DistinctSport");
                                                if (val != "0")
                                                {
                                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = value + "-" + val;
                                                }
                                                else
                                                {
                                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = value;
                                                }
                                            }
                                            else
                                            {
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = value;
                                            }
                                        }
                                        else if (columname == "totalfees")
                                        {
                                            string feecode = feecatValue(ddl_collegename.SelectedItem.Value, user_code);
                                            string amt = d2.GetFunction("select sum(Totalamount) as Total from Ft_feeallot where app_no='" + Convert.ToString(dv[0]["app_no"]) + "' and feecategory='" + feecode + "'");
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = amt;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Right;
                                        }
                                        else if (columname == "PaidAmount")
                                        {
                                            string feecode = feecatValue(ddl_collegename.SelectedItem.Value, user_code);
                                            string amt = d2.GetFunction("select sum(PaidAmount) as Total from Ft_feeallot where app_no='" + Convert.ToString(dv[0]["app_no"]) + "' and feecategory='" + feecode + "'");
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = amt;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Right;
                                        }
                                        else if (columname == "HostelRegistrationPK")
                                        {
                                            string hostelname = d2.GetFunction("select HostelName from HT_HostelRegistration hr,HM_HostelMaster hm where APP_No='" + Convert.ToString(dv[0]["app_no"]) + "' and hr.HostelMasterFK=hm.HostelMasterPK");
                                            if (hostelname == "0")
                                            {
                                                hostelname = "";
                                            }
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = hostelname;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                                        }
                                        else if (columname == "RoomFK")
                                        {
                                            string roomtype = d2.GetFunction("select  Room_type from Room_Detail r,HT_HostelRegistration h where r.RoomPK=h.RoomFK and APP_No='" + Convert.ToString(dv[0]["app_no"]) + "'");
                                            if (roomtype == "0")
                                            {
                                                roomtype = "";
                                            }
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = roomtype;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                                        }
                                        else if (columname == "remarks")
                                        {
                                            string VocationStream = Convert.ToString(dv[0]["vocational_stream"]);
                                            string Nationality = Convert.ToString(dv[0]["citizen"]);
                                            string CourseCode = Convert.ToString(dv[0]["course_code"]);
                                            string Concatvalue = "";
                                            if (VocationStream.Trim() != "No")
                                            {
                                                Concatvalue = "Vocational";
                                            }
                                            if (Nationality.Trim().ToUpper() != "INDIAN")
                                            {
                                                if (Concatvalue.Trim() == "")
                                                {
                                                    Concatvalue = Nationality;
                                                }
                                                else
                                                {
                                                    Concatvalue = Concatvalue + " - " + Nationality;
                                                }
                                            }
                                            if (CourseCode.Trim().ToUpper() == "CBSE")
                                            {
                                                if (Concatvalue.Trim() == "")
                                                {
                                                    Concatvalue = CourseCode;
                                                }
                                                else
                                                {
                                                    Concatvalue = Concatvalue + " - " + CourseCode;
                                                }
                                            }
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(Concatvalue);
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                            // FpSpread3.Sheets[0].Columns[cc].Visible = false;
                                        }
                                        else if (columname == "securedmark")
                                        {

                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(percentage);
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                        }
                                        else
                                        {

                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(dv[0][columname]);
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                        }
                                        if (columname == "noofattempts")
                                        {
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Center;
                                        }
                                    }

                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, FpSpread2.Sheets[0].ColumnCount - 1].CellType = cb1;
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, FpSpread2.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                    int ccc = cc;
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, FpSpread2.Sheets[0].ColumnCount - 1].Locked = false;
                                }

                            }
                            FpSpread2.Visible = true;
                            FpSpread2.Sheets[0].PageSize = 51;
                            FpSpread2.TitleInfo.Height = 30;
                            FpSpread2.CommandBar.Visible = false;
                            FpSpread2.Sheets[0].RowHeader.Visible = false;
                            FpSpread2.Width = 930;
                            FpSpread2.Height = 390;
                            Label66.Visible = true;
                            Label68.Visible = true;

                            btn_print.Visible = true;
                            btn_excel.Visible = true;
                            txt_excelname.Visible = true;
                            lbl_reportname.Visible = true;


                            if (AdmConfFormat() == 1)
                            {
                                btnconform.Visible = true;
                                btn_ch_gen.Visible = true;
                                if (DropDownList2.SelectedIndex != 0)
                                {
                                    btnSendSmsOpenPop.Visible = false;
                                    btn_ch_gen.Visible = false;
                                    btnconform.Visible = false;
                                    Button9.Visible = false;
                                    buttnleft.Visible = false;
                                }
                                else
                                {
                                    btnSendSmsOpenPop.Visible = true;
                                    btn_ch_gen.Visible = true;
                                    btnconform.Visible = true;
                                    Button9.Visible = true;
                                    buttnleft.Visible = true;
                                }
                            }
                            else if (AdmConfFormat() == 0)
                            {
                                btnconform.Visible = false;
                                btn_ch_gen.Visible = false;
                                if (DropDownList2.SelectedIndex != 0)
                                {
                                    btnSendSmsOpenPop.Visible = false;
                                    btn_ch_gen.Visible = false;
                                    btnconform.Visible = false;
                                    Button9.Visible = false;
                                    buttnleft.Visible = false;
                                }
                                else
                                {
                                    btnSendSmsOpenPop.Visible = true;
                                    btn_ch_gen.Visible = false;
                                    btnconform.Visible = false;
                                    Button9.Visible = true;
                                    buttnleft.Visible = true;
                                }
                            }
                            // btnapprove.Visible = true;
                            //  Button3.Visible = true;

                            Label66.Text = "Total No Of Shortist Candidate :";
                            Label68.Text = Convert.ToString(ds.Tables[0].Rows.Count);

                        }
                    }
                }
            }



        }
        catch (Exception ewx)
        {

        }

    }
    public void btnconform_onclick(object sender, EventArgs e)
    {
        try
        {
            string hdrs = "";
            int fllg = 0;
            string isval1 = "";
            Boolean checkflage = false;
            string app_no = "";
            string degreecode = "";
            string seattype = "";
            string ChallanNo = "";
            string ChallanDate = "";
            string HeaderFK = "";
            string LedgerFK = "";
            string FeeAmount = "";
            string FeeCategory = "";
            string BankFk = "";
            string FinYearFK = "";
            string acronym = "";
            string hdrSetPK = "";
            string stud_name = "";
            string app_fromno = "";
            string cursem = ddl_sem.Items.Count > 0 ? ddl_sem.SelectedItem.Value : "1";
            string batchyr = Convert.ToString(ddl_batch.SelectedItem.Value);
            if (TabContainer1.ActiveTabIndex == 2)
            {
                if (checkflage == false)
                {
                    FpSpread2.SaveChanges();

                    for (int i = 1; i < FpSpread2.Sheets[0].Rows.Count; i++)
                    {
                        int columncount = Convert.ToInt32(FpSpread2.Sheets[0].Columns.Count);
                        int v = columncount - 1;
                        isval1 = Convert.ToString(FpSpread2.Sheets[0].Cells[i, 1].Value);
                        if (isval1 == "1")
                        {
                            app_no = Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag);
                            //degreecode = d2.GetFunction("select degree_code  from applyn where app_no ='" + app_no + "'");
                            degreecode = returnStudDeg(Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag));//ddldept.SelectedValue;
                            batchyr = d2.GetFunction("select batch_year  from applyn where app_no ='" + app_no + "'");
                            seattype = d2.GetFunction("select seattype  from applyn where app_no ='" + app_no + "'");
                            stud_name = d2.GetFunction("select stud_name  from applyn where app_no ='" + app_no + "'");
                            app_fromno = d2.GetFunction("select app_formno  from applyn where app_no ='" + app_no + "'");
                            string Mode = d2.GetFunction("select mode from applyn where app_no='" + app_no + "'").Trim();
                            if (string.IsNullOrEmpty(Mode))
                                Mode = "1";
                            // string link = "select LinkValue from InsSettings where LinkName='Current Financial Year' and college_code='" + ddl_collegename.SelectedItem.Value + "'";
                            string getfinid = d2.getCurrentFinanceYear(user_code, Convert.ToString(ddl_collegename.SelectedItem.Value));
                            if (getfinid.Trim() != "" && getfinid.Trim() != "0" && seattype.Trim() != "" && seattype.Trim() != "0")
                            {
                                ListItem feecat = getFeecategoryNEW(ddl_sem.SelectedItem.Value);
                                textcode = feecat.Value;

                                string qur = " select * from FT_ChallanDet where App_No ='" + app_no + "' and FeeCategory ='" + textcode + "' and FinYearFK ='" + getfinid + "'";
                                ds = d2.select_method_wo_parameter(qur, "text");
                                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                {
                                    for (int hdr = 0; hdr < ds.Tables[0].Rows.Count; hdr++)
                                    {
                                        if (hdrs == string.Empty)
                                        {
                                            hdrs = Convert.ToString(ds.Tables[0].Rows[hdr]["HeaderFK"]);
                                        }
                                        else
                                        {
                                            hdrs += "," + Convert.ToString(ds.Tables[0].Rows[hdr]["HeaderFK"]);
                                        }
                                    }
                                    string transcode = generateReceiptNo(out acronym, out hdrSetPK, hdrs);
                                    for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                                    {
                                        ChallanNo = Convert.ToString(ds.Tables[0].Rows[j]["ChallanNo"]);
                                        ChallanDate = Convert.ToString(ds.Tables[0].Rows[j]["ChallanDate"]);
                                        HeaderFK = Convert.ToString(ds.Tables[0].Rows[j]["HeaderFK"]);
                                        LedgerFK = Convert.ToString(ds.Tables[0].Rows[j]["LedgerFK"]);
                                        FeeAmount = Convert.ToString(ds.Tables[0].Rows[j]["FeeAmount"]);
                                        FeeCategory = Convert.ToString(ds.Tables[0].Rows[j]["FeeCategory"]);
                                        BankFk = Convert.ToString(ds.Tables[0].Rows[j]["BankFk"]);
                                        FinYearFK = Convert.ToString(ds.Tables[0].Rows[j]["FinYearFK"]);
                                        string bnkCity = d2.GetFunction(" select BankBranch  from FM_FinBankMaster where BankPK ='" + BankFk + "'");
                                        string insQuery = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,IsCollected,CollectedDate) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + DateTime.Now.ToString("") + "','" + transcode + "', 1, " + app_no + ", " + LedgerFK + ", " + HeaderFK + ", " + FeeCategory + ", 0, " + FeeAmount + ", 4, '" + ChallanNo + "', '" + DateTime.Now.ToString("MM/dd/yyyy") + "', " + BankFk + ",'" + bnkCity + "', 1, '0', 0, '', '0', '0', '0', 0, " + user_code + ", " + FinYearFK + ",'1','" + DateTime.Now.ToString("MM/dd/yyyy") + "')";

                                        d2.update_method_wo_parameter(insQuery, "Text");

                                        string updateFee = "UPDATE FT_FeeAllot SET PaidAmount = isnull(PaidAmount,0) + " + FeeAmount + ",BalAmount = BalAmount-  " + FeeAmount + ",ChlTaken = ChlTaken-  " + FeeAmount + " WHERE App_No = " + app_no + " AND FeeCategory = " + FeeCategory + " AND LedgerFK = " + LedgerFK + " and HeaderFk=" + HeaderFK + "";
                                        d2.update_method_wo_parameter(updateFee, "Text");
                                        fllg = 1;
                                    }
                                    string rolladmit = "";
                                    admissionNoGeneration();
                                    if (admisionvalue == "1")
                                    {
                                        rolladmit = genearateAdmissionNo(college_code, degreecode, batchyr);
                                    }
                                    else
                                    {
                                        rolladmit = app_fromno;
                                    }
                                    if (rolladmit.Trim() == "0" || rolladmit.Trim() == null || rolladmit.Trim() == "")
                                    {
                                        rolladmit = app_fromno;
                                    }
                                    string rel = "  if exists(select * from Registration where App_No='" + app_no + "')  delete from Registration where App_No='" + app_no + "' insert into Registration (App_No,Adm_Date,Roll_Admit,Roll_No,RollNo_Flag,Reg_No,Stud_Name,Batch_Year,degree_code,college_code,CC,DelFlag,Exam_Flag,Current_Semester,mode)values('" + app_no + "','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','" + rolladmit + "','" + app_fromno + "','1','" + app_fromno + "','" + stud_name + "','" + batchyr + "','" + degreecode + "','" + ddl_collegename.SelectedItem.Value + "','0','0','OK','" + cursem + "','" + Mode + "')";
                                    int s = d2.update_method_wo_parameter(rel, "Text");

                                    string mobil = d2.GetFunction("select student_mobile from applyn where app_no ='" + app_no + "'");
                                    // sendsmsnew(mobil, app_no, 0);
                                    string Course = d2.GetFunction("select (c.Course_Name +' - '+dt.Dept_Name) as Department from applyn a,degree d,Department dt,Course c Where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.app_no ='" + app_no + "'");
                                    string Msg = "Dear Candidate,Your application no:" + app_fromno + " and you are successfully admitted in " + Course + " in " + (ddl_collegename.SelectedItem.Text) + ",Thank you.";
                                    string user_id = "";
                                    string ssr = "select * from Track_Value where college_code='" + Convert.ToString(ddl_collegename.SelectedItem.Value) + "'";
                                    ds.Clear();
                                    ds = d2.select_method_wo_parameter(ssr, "Text");
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
                                    }

                                    int d = d2.send_sms(user_id, Convert.ToString(ddl_collegename.SelectedItem.Value), usercode, mobil, Msg, "0");

                                }

                            }
                        }
                    }
                }
            }
            if (fllg == 1)
            {
                Button1_Click(sender, e);
                errorspan.InnerHtml = "Fee Confirm Successfully";
                poperrjs.Visible = true;

            }
            else
            {
                errorspan.InnerHtml = "Choose Atleast One Student And Than Proceed";
                poperrjs.Visible = true;

            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, college_code, "COmmom_selection_Process");
        }
    }
    public string generateReceiptNo(out string rcpracr, out string hdrSetPK, string hdrs)
    {
        int isHeaderwise = 0;
        hdrSetPK = string.Empty;
        rcpracr = string.Empty;
        try
        {
            string HeaderwiseQ = "select LinkValue from New_InsSettings where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + user_code + "' and college_code ='" + ddl_collegename.SelectedItem.Value + "' ";
            isHeaderwise = Convert.ToInt32(d2.GetFunction(HeaderwiseQ).Trim());
        }
        catch { isHeaderwise = 0; }
        try
        {
            string insqry1 = "select LinkValue from New_InsSettings where LinkName='ReceiptPrintFormat' and user_code ='" + user_code + "' and college_code ='" + ddl_collegename.SelectedItem.Value + "'";
            int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 5)
                return string.Empty;
        }
        catch { return string.Empty; }
        if (isHeaderwise == 0 || isHeaderwise == 2)
        {
            return getCommonReceiptNo(out rcpracr, out hdrSetPK);
        }
        else
        {
            return getHeaderwiseReceiptNo(out rcpracr, out hdrSetPK, hdrs);
        }
    }
    private string getCommonReceiptNo(out string rcpracr, out string hdrSetPK)
    {
        hdrSetPK = string.Empty;
        rcpracr = string.Empty;
        string recno = string.Empty;
        try
        {
            int receno = 0;
            string recacr = string.Empty;
            string recnoprev = string.Empty;

            // string finYearid = d2.GetFunction("select LinkValue from InsSettings where LinkName='Current Financial Year' and college_code=" + ddl_collegename.SelectedItem.Value + "");
            string finYearid = d2.getCurrentFinanceYear(user_code, Convert.ToString(ddl_collegename.SelectedItem.Value));
            string secondreciptqurey = "SELECT RcptStNo from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + ddl_collegename.SelectedItem.Value + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + ddl_collegename.SelectedItem.Value + ")";
            DataSet dsrecYr = new DataSet();
            dsrecYr = d2.select_method_wo_parameter(secondreciptqurey, "Text");
            if (dsrecYr.Tables[0].Rows.Count > 0)
            {
                recnoprev = Convert.ToString(dsrecYr.Tables[0].Rows[0][0]);
                if (recnoprev != "")
                {
                    int recno_cur = Convert.ToInt32(recnoprev);
                    receno = recno_cur;
                }

                string acronymquery = d2.GetFunction("SELECT RcptAcr from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + ddl_collegename.SelectedItem.Value + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + ddl_collegename.SelectedItem.Value + ")");
                recacr = acronymquery;
                rcpracr = recacr;

                int size = Convert.ToInt32(d2.GetFunction("SELECT  RcptSize from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + ddl_collegename.SelectedItem.Value + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + ddl_collegename.SelectedItem.Value + ")"));

                string recenoString = receno.ToString();

                if (size != recenoString.Length && size > recenoString.Length)
                {
                    while (size != recenoString.Length)
                    {
                        recenoString = "0" + recenoString;
                    }
                }
                recno = recacr + recenoString;
            }
            return recno;
        }
        catch { return recno; }
    }
    private string getHeaderwiseReceiptNo(out string rcpracr, out string hdrSetPK, string hdrs)
    {
        hdrSetPK = string.Empty;
        rcpracr = string.Empty;
        string recno = string.Empty;
        try
        {
            int receno = 0;
            string recacr = string.Empty;
            string recnoprev = string.Empty;
            string isheaderFk = hdrs;

            string finYearid = d2.getCurrentFinanceYear(user_code, Convert.ToString(ddl_collegename.SelectedItem.Value));

            DataSet dsFinHedDet = d2.select_method_wo_parameter("select distinct HeaderSettingFk from FM_HeaderFinCodeSettingsDet hs,FM_HeaderFinCodeSettings s where s.HeaderSettingPK=hs.HeaderSettingFK and HeaderFK in (" + isheaderFk + ") and CollegeCode=" + ddl_collegename.SelectedItem.Value + " and FinyearFK=" + finYearid + "", "Text");

            if (dsFinHedDet.Tables.Count > 0 && dsFinHedDet.Tables[0].Rows.Count == 1)
            {
                hdrSetPK = Convert.ToString(dsFinHedDet.Tables[0].Rows[0][0]).Trim();
                string secondreciptqurey = "select * from FM_HeaderFinCodeSettings where HeaderSettingPK =" + Convert.ToString(dsFinHedDet.Tables[0].Rows[0][0]) + " and FinyearFK=" + finYearid + " and CollegeCode=" + ddl_collegename.SelectedItem.Value + " ";
                DataSet dsrecYr = new DataSet();
                dsrecYr = d2.select_method_wo_parameter(secondreciptqurey, "Text");
                if (dsrecYr.Tables.Count > 0 && dsrecYr.Tables[0].Rows.Count > 0)
                {
                    recnoprev = Convert.ToString(dsrecYr.Tables[0].Rows[0]["RcptStNo"]);
                    if (recnoprev != "")
                    {
                        int recno_cur = Convert.ToInt32(recnoprev);
                        receno = recno_cur;
                    }
                    recacr = Convert.ToString(dsrecYr.Tables[0].Rows[0]["RcptAcr"]);
                    rcpracr = recacr;

                    int size = Convert.ToInt32(dsrecYr.Tables[0].Rows[0]["Rcptsize"]);

                    string recenoString = receno.ToString();

                    if (size != recenoString.Length && size > recenoString.Length)
                    {
                        while (size != recenoString.Length)
                        {
                            recenoString = "0" + recenoString;
                        }
                    }
                    recno = recacr + recenoString;
                }
            }
            return recno;
        }
        catch { return recno; }
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> Getname(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();

        string query = "select stud_name from applyn where isconfirm ='1' and ISNULL(admission_status,'0')=0 and stud_name like '" + prefixText + "%'";
        // string query = "select a.stud_name+'-'+ISNULL(  a.parent_name,'')+'-'+c.Course_Name+'-'+dt.Dept_Name+'-'+r.Roll_No,r.Roll_No from applyn a,Registration r ,Degree d,course c,Department dt  where a.app_no=r.app_no and r.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.Dept_Code=dt.Dept_Code  and r.CC=0 and r.DelFlag =0 and r.Exam_Flag <>'DEBAR' and a.stud_name like '" + prefixText + "%'";
        name = ws.Getname(query);
        return name;
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> getmob(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();

        string query = "select Student_Mobile from applyn where isconfirm ='1' and ISNULL(admission_status,'0')=0 and Student_Mobile like '" + prefixText + "%'";
        name = ws.Getname(query);
        return name;
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> getappfrom(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();

        string query = "select app_formno from applyn where isconfirm ='1' and ISNULL(admission_status,'0')=0 and app_formno like '" + prefixText + "%'";
        name = ws.Getname(query);
        return name;
    }
    public void txt_searchstudname_TextChanged(object sender, EventArgs e)
    {
        if (txt_searchstudname.Text != "")
        {
            txt_searchmobno.Text = "";
            txt_searchappno.Text = "";
            Button1_Click(sender, e);
        }
    }
    public void txt_searchappno_TextChanged(object sender, EventArgs e)
    {
        if (txt_searchappno.Text != "")
        {
            txt_searchmobno.Text = "";
            txt_searchstudname.Text = "";
            Button1_Click(sender, e);
        }
    }
    public void txt_searchmobno_TextChanged(object sender, EventArgs e)
    {
        if (txt_searchmobno.Text != "")
        {
            txt_searchappno.Text = "";
            txt_searchstudname.Text = "";
            Button1_Click(sender, e);
        }
    }
    protected void FpSpread2_command(object sender, EventArgs e)
    {
        try
        {
            cb_IncDayscMess.Checked = false;
            string activerow = "";
            string activecol = "";
            activerow = FpSpread2.ActiveSheetView.ActiveRow.ToString();
            activecol = FpSpread2.ActiveSheetView.ActiveColumn.ToString();
            string value = "";
            if (Convert.ToInt32(activecol) == 1 && Convert.ToInt32(activerow) == 0)
            {
                value = Convert.ToString(FpSpread2.Sheets[0].Cells[Convert.ToInt32(activerow), Convert.ToInt32(activecol)].Value);
                if (value == "1")
                {
                    for (int i = 0; i < FpSpread2.Sheets[0].Rows.Count; i++)
                    {
                        FpSpread2.Sheets[0].Cells[i, 1].Value = 1;
                    }
                }
                else
                {
                    for (int i = 0; i < FpSpread2.Sheets[0].Rows.Count; i++)
                    {
                        FpSpread2.Sheets[0].Cells[i, 1].Value = 0;
                    }
                }
            }
            else
            {
                if (Convert.ToInt32(activecol) == 1)
                {
                    int ii = 0;
                    for (int i = 0; i < FpSpread2.Sheets[0].Rows.Count; i++)
                    {
                        value = Convert.ToString(FpSpread2.Sheets[0].Cells[Convert.ToInt32(i), Convert.ToInt32(activecol)].Value);
                        if (value == "1")
                        {

                        }
                        else
                        {
                            ii = 1;
                        }
                        if (ii == 1)
                        {
                            FpSpread2.Sheets[0].Cells[0, 1].Value = 0;
                        }
                        else
                        {
                            FpSpread2.Sheets[0].Cells[0, 1].Value = 1;
                        }
                    }
                }

            }
            if (activecol == "2")
            {
                SettingReceipt();
                ddlAdmissionStudType_IndexChange(sender, e);
                string app_no = Convert.ToString(FpSpread2.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                Session["pdfapp_no"] = Convert.ToString(app_no);
                bindFeeLedgerGrid(app_no);
                //string jg = "update applyn set isview='1' where app_no='" + FpSpread4.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text + "'  and degree_code='" + ddldept.SelectedValue + "' and college_code='" + college_code + "'";
                //int k = dt.update_method_wo_parameter(jg, "text");
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                if (isFinanceLink())
                {
                    lbRcpt.Visible = true;
                }
                else
                {
                    lbRcpt.Visible = false;
                }
                string type = ddltype.SelectedItem.Text;
                string edulevel = ddledu.SelectedItem.Text;
                string grduation = ddldegree.SelectedItem.Text;
                string course = ddldept.SelectedItem.Text;
                if (edulevel.ToString().ToUpper() == "PG")
                {
                    pgdiv_verification.Visible = true;
                    ugdiv_verification.Visible = false;
                }
                else if (edulevel.ToString().ToUpper() == "UG")
                {
                    pgdiv_verification.Visible = false;
                    ugdiv_verification.Visible = true;
                }

                string query = "select app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name,sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,parent_occu,mother_tongue,religion,citizen,community,caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate, isnull(CampusReq,'0') as CampusReq, DistinctSport, co_curricular, parent_addressC, Streetc, Cityc, parent_statec, Countryc, parent_pincodec, Student_Mobile, StuPer_Id, parent_phnoc, alter_mobileno, parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet,degree_code from applyn a where a.app_no='" + app_no + "'";
                query = query + " select course_entno,course_code,university_code,Vocational_stream,Institute_name,percentage,instaddress,medium,branch_code ,Part1Language,Part2Language,isgrade,uni_state,registration_no,type_semester,majorallied_percent,major_percent,type_major,tancet_mark,tancetmark_year from Stud_prev_details where app_no ='" + app_no + "'";

                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    lblCurSemDet.Text = Convert.ToString(ds.Tables[0].Rows[0]["current_semester"]);
                    lblBatchDet.Text = Convert.ToString(ds.Tables[0].Rows[0]["batch_year"]);
                    string isCampus = Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]).Trim();
                    //if (isCampus == "0")
                    //{
                    //    ddlAdmissionStudType.SelectedIndex = 0;
                    //}
                    //else
                    //{
                    //    ddlAdmissionStudType.SelectedIndex = 1;
                    //}
                    // ddlAdmissionStudType_IndexChange(sender, e);
                    college_span.InnerHtml = ":  " + Convert.ToString(type);
                    degree_Span.InnerHtml = ":  " + Convert.ToString(edulevel);
                    graduation_span.InnerHtml = ":  " + Convert.ToString(d2.GetFunction("select c.Course_Name from degree d,Department dt,Course c  where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and  degree_code=" + Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]) + ""));
                    course_span.InnerHtml = ":  " + Convert.ToString(d2.GetFunction("select dt.Dept_Name from degree d,Department dt,Course c  where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and  degree_code=" + Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]) + ""));

                    applicantname_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]);

                    dob_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["dob"]);
                    if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "0")
                    {
                        gender_span.InnerHtml = ":  Male";
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "1")
                    {
                        gender_span.InnerHtml = ":  Female";
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "2")
                    {
                        gender_span.InnerHtml = ":  Transgender";
                    }
                    parent_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_name"]);

                    string occupation = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["parent_occu"]));
                    occupation_span.InnerHtml = ":  " + occupation.ToString();

                    string mothertonge = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["mother_tongue"]));
                    mothertongue_span.InnerHtml = ":  " + Convert.ToString(mothertonge);


                    string relisgion = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["religion"]));
                    religion_span.InnerHtml = ":  " + Convert.ToString(relisgion);

                    string city = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["citizen"]));
                    nationality_span.InnerHtml = ":  " + Convert.ToString(city);

                    string coummnity = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["community"]));
                    commuity_span.InnerHtml = ":  " + Convert.ToString(coummnity);

                    if (Convert.ToString(ds.Tables[0].Rows[0]["caste"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["caste"]) != "0")
                    {
                        string scas = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["caste"]));
                        Caste_span.InnerHtml = ":  " + Convert.ToString(scas);
                    }
                    else
                    {
                        Caste_span.InnerHtml = ":  -";
                    }

                    if (Convert.ToString(ds.Tables[0].Rows[0]["TamilOrginFromAndaman"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["TamilOrginFromAndaman"]) != "False")
                    {
                        tamilorigin_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        tamilorigin_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["IsExService"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["IsExService"]) != "False")
                    {
                        Ex_service_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Ex_service_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["isdisable"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["isdisable"]) != "False")
                    {
                        Differentlyable_Span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Differentlyable_Span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["first_graduate"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["first_graduate"]) != "False")
                    {
                        first_generation_Span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        first_generation_Span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]) != "False")
                    {
                        residancerequired_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        residancerequired_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]) != "0")
                    {
                        string disy = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]));
                        sport_span.InnerHtml = ":  " + Convert.ToString(disy);
                    }
                    else
                    {
                        sport_span.InnerHtml = ":  -";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]) != "0")
                    {
                        string cocour = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]));
                        Co_Curricular_span.InnerHtml = ":  " + Convert.ToString(cocour);
                    }
                    else
                    {
                        Co_Curricular_span.InnerHtml = ":  -";
                    }

                    if (Convert.ToString(ds.Tables[0].Rows[0]["ncccadet"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["ncccadet"]) != "False")
                    {
                        ncccadetspan.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        ncccadetspan.InnerHtml = ":  No";
                    }

                    if (Convert.ToString(ds.Tables[1].Rows[0]["Vocational_stream"]).Trim() != "" && Convert.ToString(ds.Tables[1].Rows[0]["Vocational_stream"]) != "False")
                    {
                        Vocationalspan.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Vocationalspan.InnerHtml = ":  No";
                    }

                    caddressline1_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_addressC"]);
                    string address = Convert.ToString(ds.Tables[0].Rows[0]["Streetc"]);
                    if (ds.Tables[0].Rows[0]["Streetc"].ToString().Trim() != "")
                    {

                        string[] split = address.Split('/');
                        if (split.Length > 1)
                        {
                            if (Convert.ToString(split[0]).Trim() != "")
                            {
                                Addressline2_span.InnerHtml = ":  " + Convert.ToString(split[0]);
                            }
                            else
                            {
                                Addressline2_span.InnerHtml = ":  -";
                            }
                            if (Convert.ToString(split[1]).Trim() != "")
                            {
                                Addressline3_span.InnerHtml = ":  " + Convert.ToString(split[1]);
                            }
                            else
                            {
                                Addressline3_span.InnerHtml = ":  -";
                            }
                        }
                        else
                        {
                            Addressline2_span.InnerHtml = ":  " + Convert.ToString(split[0]);
                        }

                    }
                    else
                    {
                        Addressline2_span.InnerHtml = ":  -";
                        Addressline3_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Cityc"].ToString().Trim() != "")
                    {
                        city_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Cityc"]);
                    }
                    else
                    {
                        city_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_statec"].ToString().Trim() != "")
                    {
                        string state = subjectcode(ds.Tables[0].Rows[0]["parent_statec"].ToString());
                        state_span.InnerHtml = ":  " + Convert.ToString(state);
                    }
                    else
                    {
                        state_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Countryc"].ToString().Trim() != "")
                    {
                        string country = subjectcode(ds.Tables[0].Rows[0]["Countryc"].ToString());
                        Country_span.InnerHtml = ":  " + Convert.ToString(country);
                    }
                    else
                    {
                        Country_span.InnerHtml = "-";
                    }
                    if (ds.Tables[0].Rows[0]["parent_pincodec"].ToString().Trim() != "")
                    {
                        Postelcode_Span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodec"]);
                    }
                    else
                    {
                        Postelcode_Span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["Student_Mobile"].ToString().Trim() != "")
                    {
                        Mobilenumber_Span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Student_Mobile"]);
                    }
                    else
                    {
                        Mobilenumber_Span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["alter_mobileno"].ToString().Trim() != "")
                    {
                        Alternatephone_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["alter_mobileno"]);
                    }
                    else
                    {
                        Alternatephone_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["StuPer_Id"].ToString().Trim() != "")
                    {
                        emailid_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["StuPer_Id"]);
                    }
                    else
                    {
                        emailid_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_phnoc"].ToString().Trim() != "")
                    {
                        std_ist_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_phnoc"]);
                    }
                    else
                    {
                        std_ist_span.InnerHtml = "-";
                    }

                    // permnant

                    paddressline1_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_addressP"]);
                    if (ds.Tables[0].Rows[0]["Streetp"].ToString().Trim() != "")
                    {
                        string streat = Convert.ToString(ds.Tables[0].Rows[0]["Streetp"]);
                        if (streat.Trim() != "")
                        {
                            string[] splitstreat = streat.Split('/');
                            if (splitstreat.Length > 1)
                            {
                                if (Convert.ToString(splitstreat[0]).Trim() != "")
                                {
                                    paddressline2_span.InnerHtml = ":  " + Convert.ToString(splitstreat[0]);
                                }
                                else
                                {
                                    paddressline2_span.InnerHtml = ":  -";
                                }
                                if (Convert.ToString(splitstreat[0]).Trim() != "")
                                {
                                    paddressline3_span.InnerHtml = ":  " + Convert.ToString(splitstreat[1]);
                                }
                                else
                                {
                                    paddressline3_span.InnerHtml = ":  -";
                                }
                            }
                            else
                            {
                                paddressline2_span.InnerHtml = ":  " + Convert.ToString(splitstreat[0]);
                            }
                        }
                        paddressline2_span.InnerHtml = ":  -";
                        paddressline3_span.InnerHtml = ":  -";
                    }
                    else
                    {
                        paddressline2_span.InnerHtml = ":  -";
                        paddressline3_span.InnerHtml = ":  -";
                    }


                    if (ds.Tables[0].Rows[0]["Cityp"].ToString().Trim() != "")
                    {
                        pcity_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Cityp"]);
                    }
                    else
                    {
                        pcity_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_statep"].ToString().Trim() != "")
                    {
                        string state = subjectcode(ds.Tables[0].Rows[0]["parent_statep"].ToString());
                        pstate_span.InnerHtml = ":  " + Convert.ToString(state);
                    }
                    else
                    {
                        pstate_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Countryp"].ToString().Trim() != "")
                    {
                        string country = subjectcode(ds.Tables[0].Rows[0]["Countryp"].ToString());
                        pcountry_span.InnerHtml = ":  " + Convert.ToString(country);
                    }
                    else
                    {
                        pcountry_span.InnerHtml = "-";
                    }
                    if (ds.Tables[0].Rows[0]["parent_pincodep"].ToString().Trim() != "")
                    {
                        ppostelcode_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodep"]);
                    }
                    else
                    {
                        ppostelcode_span.InnerHtml = "-";
                    }


                    if (ds.Tables[0].Rows[0]["parent_phnop"].ToString().Trim() != "")
                    {
                        pstdisd_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_phnop"]);
                    }
                    else
                    {
                        pstdisd_span.InnerHtml = "-";
                    }
                }
                if (ds.Tables[1].Rows.Count > 0)
                {
                    if (ddledu.SelectedItem.Text == "UG")
                    {
                        ugtotaldiv.Visible = true;
                        pgtotaldiv.Visible = false;
                        string courseentronumber = Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]);
                        string coursecode = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);
                        string university_code = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                        string institutename = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);
                        string percentage = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                        string institueaddress = Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]);
                        string medium = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);
                        string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Part1Language"]);
                        string part2language = Convert.ToString(ds.Tables[1].Rows[0]["Part2Language"]);
                        string isgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]);
                        string university_state = Convert.ToString(ds.Tables[1].Rows[0]["uni_state"]);
                        // string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);

                        if (coursecode.Trim() != "")
                        {
                            string course1 = subjectcode(coursecode);
                            qualifyingexam_span.InnerHtml = ":  " + Convert.ToString(course1);
                        }
                        else
                        {
                            qualifyingexam_span.InnerHtml = ":  -";
                        }


                        if (institutename.Trim() != "")
                        {
                            Nameofschool_span.InnerHtml = ":  " + Convert.ToString(institutename);
                        }
                        else
                        {
                            Nameofschool_span.InnerHtml = "";
                        }
                        if (institueaddress.Trim() != "")
                        {
                            locationofschool_Span.InnerHtml = ":  " + Convert.ToString(institueaddress);
                        }
                        else
                        {
                            locationofschool_Span.InnerHtml = "";
                        }
                        if (medium.Trim() != "")
                        {
                            string m = subjectcode(medium);
                            mediumofstudy_span.InnerHtml = ":  " + Convert.ToString(m);
                        }
                        else
                        {
                            mediumofstudy_span.InnerHtml = ":  -";
                        }
                        if (university_code.Trim() != "")
                        {
                            string univ = subjectcode(university_code);
                            qualifyingboard_span.InnerHtml = ":  " + Convert.ToString(univ);

                        }
                        else
                        {
                            qualifyingboard_span.InnerHtml = ":  -";
                        }
                        if (isgrade.Trim() != "")
                        {
                            if (isgrade == "True")
                            {
                                marksgrade_span.InnerHtml = ":  Grade";
                            }
                            else
                            {
                                marksgrade_span.InnerHtml = ":  Marks";
                            }
                        }

                        string markquery = "select psubjectno,registerno,acual_marks,max_marks,noofattempt,pass_month,pass_year,semyear ,grade from perv_marks_history  where course_entno ='" + courseentronumber + "'";
                        ds.Clear();
                        ds = dt.select_method_wo_parameter(markquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataTable data = new DataTable();
                            DataRow dr = null;
                            Hashtable hash = new Hashtable();
                            data.Columns.Add("Language", typeof(string));
                            data.Columns.Add("Subject", typeof(string));
                            data.Columns.Add("Marks Obtained", typeof(string));
                            data.Columns.Add("Month", typeof(string));
                            data.Columns.Add("Year", typeof(string));
                            data.Columns.Add("Register No / Roll No", typeof(string));
                            data.Columns.Add("No of Attempts", typeof(string));
                            data.Columns.Add("Maximum Marks", typeof(string));

                            hash.Add(0, "Language1");
                            hash.Add(1, "Language2");
                            hash.Add(2, " Subject1");
                            hash.Add(3, " Subject2");
                            hash.Add(4, " Subject3");
                            hash.Add(5, " Subject4");
                            hash.Add(6, " Subject5");
                            hash.Add(7, " Subject6");
                            hash.Add(8, " Subject7");
                            hash.Add(9, " Subject8");
                            hash.Add(10, " Subject9");
                            hash.Add(11, " Subject10");
                            hash.Add(12, " Subject11");

                            int totalmark = 0;
                            int maxtotal = 0;

                            for (int mark = 0; mark < ds.Tables[0].Rows.Count; mark++)
                            {
                                string subjectno = Convert.ToString(ds.Tables[0].Rows[mark]["psubjectno"]);
                                string actualmark = "";
                                if (isgrade == "True")
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[mark]["grade"]);
                                }
                                else
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[mark]["acual_marks"]);
                                }
                                string month = Convert.ToString(ds.Tables[0].Rows[mark]["pass_month"]);
                                string year = Convert.ToString(ds.Tables[0].Rows[mark]["pass_year"]);
                                string regno = Convert.ToString(ds.Tables[0].Rows[mark]["registerno"]);
                                string noofattenm = Convert.ToString(ds.Tables[0].Rows[mark]["noofattempt"]);
                                string maxmark = Convert.ToString(ds.Tables[0].Rows[mark]["max_marks"]);
                                dr = data.NewRow();
                                string lang = Convert.ToString(hash[mark]);
                                dr[0] = Convert.ToString(lang);
                                string sub = subjectcode(subjectno);
                                dr[1] = Convert.ToString(sub);
                                dr[2] = Convert.ToString(actualmark);
                                dr[3] = Convert.ToString(month);
                                dr[4] = Convert.ToString(year);
                                dr[5] = Convert.ToString(regno);
                                dr[6] = Convert.ToString(noofattenm);
                                dr[7] = Convert.ToString(maxmark);
                                data.Rows.Add(dr);
                                if (isgrade != "True")
                                {
                                    totalmark = totalmark + Convert.ToInt32(actualmark);
                                    maxtotal = maxtotal + Convert.ToInt32(maxmark);
                                }
                            }
                            if (isgrade != "True")
                            {
                                total_marks_secured.InnerHtml = ":  " + Convert.ToString(totalmark);
                                maximum_marks.InnerHtml = ":  " + Convert.ToString(maxtotal);
                                percentage_span.InnerHtml = ":  " + percentage;
                            }

                            VerificationGridug.DataSource = data;
                            VerificationGridug.DataBind();
                            if (VerificationGridug.Rows.Count > 0)
                            {
                                for (int v = 0; v < VerificationGridug.Rows.Count; v++)
                                {
                                    VerificationGridug.Rows[v].Cells[2].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[3].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[4].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[5].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[6].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[7].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                        }
                    }
                    else if (ddledu.SelectedItem.Text == "PG")
                    {
                        ugtotaldiv.Visible = false;
                        pgtotaldiv.Visible = true;
                        string courseentronumber = Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]);
                        string coursecode = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);
                        string university_code = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                        string institutename = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);
                        string percentage = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                        string institueaddress = Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]);
                        string medium = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);
                        string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Part1Language"]);
                        string part2language = Convert.ToString(ds.Tables[1].Rows[0]["Part2Language"]);
                        string isgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]);
                        string university_state = Convert.ToString(ds.Tables[1].Rows[0]["uni_state"]);
                        string typeofsubject = Convert.ToString(ds.Tables[1].Rows[0]["type_major"]);
                        string typeofsemester = Convert.ToString(ds.Tables[1].Rows[0]["type_semester"]);
                        string regno = Convert.ToString(ds.Tables[1].Rows[0]["registration_no"]);
                        string major = Convert.ToString(ds.Tables[1].Rows[0]["branch_code"]);
                        string majorpercentage = Convert.ToString(ds.Tables[1].Rows[0]["major_percent"]);
                        string majorallidepercentage = Convert.ToString(ds.Tables[1].Rows[0]["majorallied_percent"]);
                        string Tancet = Convert.ToString(ds.Tables[1].Rows[0]["tancet_mark"]);
                        string Tancetyear = Convert.ToString(ds.Tables[1].Rows[0]["tancetmark_year"]);

                        percentagemajorspan.InnerHtml = ":  " + Convert.ToString(percentage);
                        majorsubjectspan.InnerHtml = ":  " + Convert.ToString(majorpercentage);
                        alliedmajorspan.InnerHtml = ":  " + Convert.ToString(majorallidepercentage);

                        if (coursecode.Trim() != "")
                        {
                            string course1 = subjectcode(coursecode);
                            ugqualifyingexam_span.InnerHtml = ":  " + Convert.ToString(course1);
                        }
                        else
                        {
                            ugqualifyingexam_span.InnerHtml = ":  -";
                        }
                        if (institutename.Trim() != "")
                        {
                            nameofcollege_Sapn.InnerHtml = ":  " + Convert.ToString(institutename);
                        }
                        else
                        {
                            nameofcollege_Sapn.InnerHtml = "";
                        }
                        if (institueaddress.Trim() != "")
                        {
                            locationofcollege_sapn.InnerHtml = ":  " + Convert.ToString(institueaddress);
                        }
                        else
                        {
                            locationofcollege_sapn.InnerHtml = "";
                        }
                        if (major.Trim() != "")
                        {
                            string major1 = subjectcode(major);
                            major_span.InnerHtml = ":  " + Convert.ToString(major1);
                        }
                        else
                        {
                            major_span.InnerHtml = "";
                        }
                        if (typeofsubject.Trim() != "")
                        {
                            if (typeofsubject == "1")
                            {
                                typeofsubject = "Single";
                            }
                            else if (typeofsubject == "2")
                            {
                                typeofsubject = "Double";
                            }
                            else if (typeofsubject == "3")
                            {
                                typeofsubject = "Triple";
                            }
                            typeofmajor_span.InnerHtml = ":  " + Convert.ToString(typeofsubject);
                        }
                        if (typeofsemester.Trim() != "")
                        {
                            if (typeofsemester == "True")
                            {
                                typeofsemester = "Semester";
                            }
                            else
                            {
                                typeofsemester = "Non Semester";
                            }
                            typeofsemester_span.InnerHtml = ":  " + Convert.ToString(typeofsemester);
                        }
                        if (medium.Trim() != "")
                        {
                            string lang = subjectcode(medium);
                            mediumofstudy_spanug.InnerHtml = ":  " + Convert.ToString(lang);
                        }

                        if (isgrade.Trim() != "")
                        {
                            if (isgrade == "True")
                            {
                                marksorgradeug_span.InnerHtml = ":  Grade";
                            }
                            else
                            {
                                marksorgradeug_span.InnerHtml = ":  Marks";
                            }
                        }

                        //if (isgrade.Trim() != "")
                        //{
                        //    marksorgradeug_span.InnerHtml = ":  " + Convert.ToString(isgrade);
                        //}
                        if (regno.Trim() != "")
                        {
                            reg_no_span.InnerHtml = ":  " + Convert.ToString(regno);
                        }
                        if (type == "MCA")
                        {
                            tnspan.Visible = true;
                            Tancetspan.Visible = true;
                            Tancetspan.InnerHtml = ": " + Convert.ToString(Tancet) + " - " + Convert.ToString(Tancetyear);
                        }

                        string pgquery = "select psubjectno,subject_typeno,acual_marks,max_marks,pass_month,pass_year,semyear ,grade from perv_marks_history where course_entno ='" + courseentronumber + "'";
                        ds.Clear();
                        ds = dt.select_method_wo_parameter(pgquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataTable data = new DataTable();
                            DataRow dr = null;
                            Hashtable hash = new Hashtable();
                            data.Columns.Add("S.No", typeof(string));
                            //  data.Columns.Add("Sem/Year", typeof(string));
                            data.Columns.Add("Subject", typeof(string));
                            data.Columns.Add("Subject type", typeof(string));
                            data.Columns.Add("Marks", typeof(string));
                            data.Columns.Add("Month", typeof(string));
                            data.Columns.Add("Year", typeof(string));
                            data.Columns.Add("Maximum Marks", typeof(string));
                            int sno = 0;
                            for (int pg = 0; pg < ds.Tables[0].Rows.Count; pg++)
                            {
                                sno++;
                                string subjectno = Convert.ToString(ds.Tables[0].Rows[pg]["psubjectno"]);
                                string subjecttypeno = Convert.ToString(ds.Tables[0].Rows[pg]["subject_typeno"]);
                                string actualmark = "";
                                if (isgrade == "True")
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[pg]["grade"]);
                                }
                                else
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[pg]["acual_marks"]);
                                }

                                string month = Convert.ToString(ds.Tables[0].Rows[pg]["pass_month"]);
                                string year = Convert.ToString(ds.Tables[0].Rows[pg]["pass_year"]);
                                // string noofattenm = Convert.ToString(ds.Tables[0].Rows[pg]["noofattempt"]);
                                string maxmark = Convert.ToString(ds.Tables[0].Rows[pg]["max_marks"]);
                                dr = data.NewRow();
                                dr[0] = Convert.ToString(sno);
                                string subject = subjectcode(subjectno);
                                dr[1] = Convert.ToString(subject);
                                string typesub = subjectcode(subjecttypeno);
                                dr[2] = Convert.ToString(typesub);
                                dr[3] = Convert.ToString(actualmark);
                                dr[4] = Convert.ToString(month);
                                dr[5] = Convert.ToString(year);
                                dr[6] = Convert.ToString(maxmark);
                                data.Rows.Add(dr);
                            }
                            Verificationgridpg.DataSource = data;
                            Verificationgridpg.DataBind();
                            if (VerificationGridug.Rows.Count > 0)
                            {
                                for (int v = 0; v < Verificationgridpg.Rows.Count; v++)
                                {
                                    Verificationgridpg.Rows[v].Cells[3].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[4].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[5].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[6].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                        }
                    }
                }
                string messtype = " select isnull(IsdayscholorMess,0)IsdayscholorMess from Registration where App_No='" + app_no + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(messtype, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string IsdayscholorMess = Convert.ToString(ds.Tables[0].Rows[0]["IsdayscholorMess"]);
                    if (IsdayscholorMess.Trim() == "1" || IsdayscholorMess.Trim().ToUpper() == "TRUE")
                    {
                        cb_IncDayscMess.Checked = true;
                    }
                    if (IsdayscholorMess.Trim() == "0" || IsdayscholorMess.Trim().ToUpper() == "FALSE")
                    {
                        cb_IncDayscMess.Checked = false;
                    }
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    protected void gridFeeDet_OnRowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (recptset == true)
            {
                TextBox txtallot = (TextBox)e.Row.Cells[2].FindControl("txtAdmFeeAllot");
                TextBox txtConces = (TextBox)e.Row.Cells[3].FindControl("txtAdmDeduc");
                txtallot.Attributes.Add("readonly", "readonly");
                txtConces.Attributes.Add("readonly", "readonly");
            }
            else
            {
                TextBox txtallot = (TextBox)e.Row.Cells[2].FindControl("txtAdmFeeAllot");
                TextBox txtConces = (TextBox)e.Row.Cells[3].FindControl("txtAdmDeduc");
                txtallot.Attributes.Remove("readonly");
                txtConces.Attributes.Remove("readonly");
            }
        }

    }

    protected void FpSpread1_command(object sender, EventArgs e)
    {
        try
        {
            string activerow = "";
            string activecol = "";
            activerow = FpSpread1.ActiveSheetView.ActiveRow.ToString();
            activecol = FpSpread1.ActiveSheetView.ActiveColumn.ToString();
            string value = "";
            if (Convert.ToInt32(activecol) == 1 && Convert.ToInt32(activerow) == 0)
            {
                value = Convert.ToString(FpSpread1.Sheets[0].Cells[Convert.ToInt32(activerow), Convert.ToInt32(activecol)].Value);
                if (value == "1")
                {
                    for (int i = 0; i < FpSpread1.Sheets[0].Rows.Count; i++)
                    {
                        FpSpread1.Sheets[0].Cells[i, 1].Value = 1;
                    }
                }
                else
                {
                    for (int i = 0; i < FpSpread1.Sheets[0].Rows.Count; i++)
                    {
                        FpSpread1.Sheets[0].Cells[i, 1].Value = 0;
                    }
                }
            }
            else
            {
                if (Convert.ToInt32(activecol) == 1)
                {
                    int ii = 0;
                    for (int i = 0; i < FpSpread1.Sheets[0].Rows.Count; i++)
                    {
                        value = Convert.ToString(FpSpread1.Sheets[0].Cells[Convert.ToInt32(i), Convert.ToInt32(activecol)].Value);
                        if (value == "1")
                        {

                        }
                        else
                        {
                            ii = 1;
                        }
                        if (ii == 1)
                        {
                            FpSpread1.Sheets[0].Cells[0, 1].Value = 0;
                        }
                        else
                        {
                            FpSpread1.Sheets[0].Cells[0, 1].Value = 1;
                        }
                    }
                }

            }
            if (activecol == "2")
            {
                string app_no = Convert.ToString(FpSpread1.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                Session["pdfapp_no"] = Convert.ToString(app_no);
                //string jg = "update applyn set isview='1' where app_no='" + FpSpread1.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text + "'  and degree_code='" + ddldept.SelectedValue + "' and college_code='" + college_code + "'";
                //int k = dt.update_method_wo_parameter(jg, "text");
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                string type = ddltype.SelectedItem.Text;
                string edulevel = ddledu.SelectedItem.Text;
                string grduation = ddldegree.SelectedItem.Text;
                string course = ddldept.SelectedItem.Text;
                if (edulevel.ToString().ToUpper() == "PG")
                {
                    pgdiv_verification.Visible = true;
                    ugdiv_verification.Visible = false;
                }
                else if (edulevel.ToString().ToUpper() == "UG")
                {
                    pgdiv_verification.Visible = false;
                    ugdiv_verification.Visible = true;
                }

                string query = "select app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name,sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,parent_occu,mother_tongue,religion,citizen,community,caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet,degree_code from applyn a where a.app_no='" + app_no + "'";
                query = query + " select course_entno,course_code,university_code,Institute_name,Vocational_stream,percentage,instaddress,medium,branch_code ,Part1Language,Part2Language,isgrade,uni_state,registration_no,type_semester,majorallied_percent,major_percent,type_major,tancet_mark,tancetmark_year from Stud_prev_details where app_no ='" + app_no + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "text");
                if (ds.Tables[0].Rows.Count > 0)
                {

                    college_span.InnerHtml = ":  " + Convert.ToString(type);
                    degree_Span.InnerHtml = ":  " + Convert.ToString(edulevel);
                    graduation_span.InnerHtml = ":  " + Convert.ToString(d2.GetFunction("select c.Course_Name from degree d,Department dt,Course c  where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and  degree_code=" + Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]) + ""));
                    course_span.InnerHtml = ":  " + Convert.ToString(d2.GetFunction("select dt.Dept_Name from degree d,Department dt,Course c  where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and  degree_code=" + Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]) + ""));

                    applicantname_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]);

                    dob_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["dob"]);
                    if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "0")
                    {
                        gender_span.InnerHtml = ":  Male";
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "1")
                    {
                        gender_span.InnerHtml = ":  Female";
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "2")
                    {
                        gender_span.InnerHtml = ":  Transgender";
                    }
                    parent_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_name"]);

                    string occupation = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["parent_occu"]));
                    occupation_span.InnerHtml = ":  " + occupation.ToString();

                    string mothertonge = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["mother_tongue"]));
                    mothertongue_span.InnerHtml = ":  " + Convert.ToString(mothertonge);


                    string relisgion = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["religion"]));
                    religion_span.InnerHtml = ":  " + Convert.ToString(relisgion);

                    string city = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["citizen"]));
                    nationality_span.InnerHtml = ":  " + Convert.ToString(city);

                    string coummnity = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["community"]));
                    commuity_span.InnerHtml = ":  " + Convert.ToString(coummnity);

                    if (Convert.ToString(ds.Tables[0].Rows[0]["caste"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["caste"]) != "0")
                    {
                        string scas = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["caste"]));
                        Caste_span.InnerHtml = ":  " + Convert.ToString(scas);
                    }
                    else
                    {
                        Caste_span.InnerHtml = ":  -";
                    }

                    if (Convert.ToString(ds.Tables[0].Rows[0]["TamilOrginFromAndaman"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["TamilOrginFromAndaman"]) != "False")
                    {
                        tamilorigin_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        tamilorigin_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["IsExService"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["IsExService"]) != "False")
                    {
                        Ex_service_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Ex_service_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["isdisable"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["isdisable"]) != "False")
                    {
                        Differentlyable_Span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Differentlyable_Span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["first_graduate"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["first_graduate"]) != "False")
                    {
                        first_generation_Span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        first_generation_Span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]) != "False")
                    {
                        residancerequired_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        residancerequired_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]) != "0")
                    {
                        string disy = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]));
                        sport_span.InnerHtml = ":  " + Convert.ToString(disy);
                    }
                    else
                    {
                        sport_span.InnerHtml = ":  -";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]) != "0")
                    {
                        string cocour = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]));
                        Co_Curricular_span.InnerHtml = ":  " + Convert.ToString(cocour);
                    }
                    else
                    {
                        Co_Curricular_span.InnerHtml = ":  -";
                    }

                    if (Convert.ToString(ds.Tables[0].Rows[0]["ncccadet"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["ncccadet"]) != "False")
                    {
                        ncccadetspan.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        ncccadetspan.InnerHtml = ":  No";
                    }

                    if (Convert.ToString(ds.Tables[1].Rows[0]["Vocational_stream"]).Trim() != "" && Convert.ToString(ds.Tables[1].Rows[0]["Vocational_stream"]) != "False")
                    {
                        Vocationalspan.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Vocationalspan.InnerHtml = ":  No";
                    }


                    caddressline1_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_addressC"]);
                    string address = Convert.ToString(ds.Tables[0].Rows[0]["Streetc"]);
                    if (ds.Tables[0].Rows[0]["Streetc"].ToString().Trim() != "")
                    {

                        string[] split = address.Split('/');

                        if (split.Length > 1)
                        {
                            if (Convert.ToString(split[0]).Trim() != "")
                            {
                                Addressline2_span.InnerHtml = ":  " + Convert.ToString(split[0]);
                            }
                            else
                            {
                                Addressline2_span.InnerHtml = ":  -";
                            }
                            if (Convert.ToString(split[1]).Trim() != "")
                            {
                                Addressline3_span.InnerHtml = ":  " + Convert.ToString(split[1]);
                            }
                            else
                            {
                                Addressline3_span.InnerHtml = ":  -";
                            }
                        }
                        else
                        {
                            Addressline2_span.InnerHtml = ":  " + Convert.ToString(split[0]);
                        }

                    }
                    else
                    {
                        Addressline2_span.InnerHtml = ":  -";
                        Addressline3_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Cityc"].ToString().Trim() != "")
                    {
                        city_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Cityc"]);
                    }
                    else
                    {
                        city_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_statec"].ToString().Trim() != "")
                    {
                        string state = subjectcode(ds.Tables[0].Rows[0]["parent_statec"].ToString());
                        state_span.InnerHtml = ":  " + Convert.ToString(state);
                    }
                    else
                    {
                        state_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Countryc"].ToString().Trim() != "")
                    {
                        string country = subjectcode(ds.Tables[0].Rows[0]["Countryc"].ToString());
                        Country_span.InnerHtml = ":  " + Convert.ToString(country);
                    }
                    else
                    {
                        Country_span.InnerHtml = "-";
                    }
                    if (ds.Tables[0].Rows[0]["parent_pincodec"].ToString().Trim() != "")
                    {
                        Postelcode_Span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodec"]);
                    }
                    else
                    {
                        Postelcode_Span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["Student_Mobile"].ToString().Trim() != "")
                    {
                        Mobilenumber_Span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Student_Mobile"]);
                    }
                    else
                    {
                        Mobilenumber_Span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["alter_mobileno"].ToString().Trim() != "")
                    {
                        Alternatephone_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["alter_mobileno"]);
                    }
                    else
                    {
                        Alternatephone_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["StuPer_Id"].ToString().Trim() != "")
                    {
                        emailid_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["StuPer_Id"]);
                    }
                    else
                    {
                        emailid_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_phnoc"].ToString().Trim() != "")
                    {
                        std_ist_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_phnoc"]);
                    }
                    else
                    {
                        std_ist_span.InnerHtml = "-";
                    }

                    // permnant

                    paddressline1_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_addressP"]);
                    if (ds.Tables[0].Rows[0]["Streetp"].ToString().Trim() != "")
                    {
                        string streat = Convert.ToString(ds.Tables[0].Rows[0]["Streetp"]);
                        if (streat.Trim() != "")
                        {
                            string[] splitstreat = streat.Split('/');
                            if (splitstreat.Length > 1)
                            {
                                if (Convert.ToString(splitstreat[0]).Trim() != "")
                                {
                                    paddressline2_span.InnerHtml = ":  " + Convert.ToString(splitstreat[0]);
                                }
                                else
                                {
                                    paddressline2_span.InnerHtml = ":  -";
                                }
                                if (Convert.ToString(splitstreat[0]).Trim() != "")
                                {
                                    paddressline3_span.InnerHtml = ":  " + Convert.ToString(splitstreat[1]);
                                }
                                else
                                {
                                    paddressline3_span.InnerHtml = ":  -";
                                }
                            }
                            else
                            {
                                paddressline2_span.InnerHtml = ":  " + Convert.ToString(splitstreat[0]);
                            }
                        }
                        paddressline2_span.InnerHtml = ":  -";
                        paddressline3_span.InnerHtml = ":  -";
                    }
                    else
                    {
                        paddressline2_span.InnerHtml = ":  -";
                        paddressline3_span.InnerHtml = ":  -";
                    }


                    if (ds.Tables[0].Rows[0]["Cityp"].ToString().Trim() != "")
                    {
                        pcity_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Cityp"]);
                    }
                    else
                    {
                        pcity_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_statep"].ToString().Trim() != "")
                    {
                        string state = subjectcode(ds.Tables[0].Rows[0]["parent_statep"].ToString());
                        pstate_span.InnerHtml = ":  " + Convert.ToString(state);
                    }
                    else
                    {
                        pstate_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Countryp"].ToString().Trim() != "")
                    {
                        string country = subjectcode(ds.Tables[0].Rows[0]["Countryp"].ToString());
                        pcountry_span.InnerHtml = ":  " + Convert.ToString(country);
                    }
                    else
                    {
                        pcountry_span.InnerHtml = "-";
                    }
                    if (ds.Tables[0].Rows[0]["parent_pincodep"].ToString().Trim() != "")
                    {
                        ppostelcode_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodep"]);
                    }
                    else
                    {
                        ppostelcode_span.InnerHtml = "-";
                    }


                    if (ds.Tables[0].Rows[0]["parent_phnop"].ToString().Trim() != "")
                    {
                        pstdisd_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_phnop"]);
                    }
                    else
                    {
                        pstdisd_span.InnerHtml = "-";
                    }
                }
                if (ds.Tables[1].Rows.Count > 0)
                {
                    if (ddledu.SelectedItem.Text == "UG")
                    {
                        ugtotaldiv.Visible = true;
                        pgtotaldiv.Visible = false;
                        string courseentronumber = Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]);
                        string coursecode = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);
                        string university_code = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                        string institutename = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);
                        string percentage = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                        string institueaddress = Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]);
                        string medium = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);
                        string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Part1Language"]);
                        string part2language = Convert.ToString(ds.Tables[1].Rows[0]["Part2Language"]);
                        string isgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]);
                        string university_state = Convert.ToString(ds.Tables[1].Rows[0]["uni_state"]);
                        // string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);

                        if (coursecode.Trim() != "")
                        {
                            string course1 = subjectcode(coursecode);
                            qualifyingexam_span.InnerHtml = ":  " + Convert.ToString(course1);
                        }
                        else
                        {
                            qualifyingexam_span.InnerHtml = ":  -";
                        }


                        if (institutename.Trim() != "")
                        {
                            Nameofschool_span.InnerHtml = ":  " + Convert.ToString(institutename);
                        }
                        else
                        {
                            Nameofschool_span.InnerHtml = "";
                        }
                        if (institueaddress.Trim() != "")
                        {
                            locationofschool_Span.InnerHtml = ":  " + Convert.ToString(institueaddress);
                        }
                        else
                        {
                            locationofschool_Span.InnerHtml = "";
                        }
                        if (medium.Trim() != "")
                        {
                            string m = subjectcode(medium);
                            mediumofstudy_span.InnerHtml = ":  " + Convert.ToString(m);
                        }
                        else
                        {
                            mediumofstudy_span.InnerHtml = ":  -";
                        }
                        if (university_code.Trim() != "")
                        {
                            string univ = subjectcode(university_code);
                            qualifyingboard_span.InnerHtml = ":  " + Convert.ToString(univ);

                        }
                        else
                        {
                            qualifyingboard_span.InnerHtml = ":  -";
                        }
                        if (isgrade.Trim() != "")
                        {
                            if (isgrade == "True")
                            {
                                marksgrade_span.InnerHtml = ":  Grade";
                            }
                            else
                            {
                                marksgrade_span.InnerHtml = ":  Marks";
                            }
                        }

                        string markquery = "select psubjectno,registerno,acual_marks,max_marks,noofattempt,pass_month,pass_year,semyear ,grade from perv_marks_history  where course_entno ='" + courseentronumber + "'";
                        ds.Clear();
                        ds = dt.select_method_wo_parameter(markquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataTable data = new DataTable();
                            DataRow dr = null;
                            Hashtable hash = new Hashtable();
                            data.Columns.Add("Language", typeof(string));
                            data.Columns.Add("Subject", typeof(string));
                            data.Columns.Add("Marks Obtained", typeof(string));
                            data.Columns.Add("Month", typeof(string));
                            data.Columns.Add("Year", typeof(string));
                            data.Columns.Add("Register No / Roll No", typeof(string));
                            data.Columns.Add("No of Attempts", typeof(string));
                            data.Columns.Add("Maximum Marks", typeof(string));

                            hash.Add(0, "Language1");
                            hash.Add(1, "Language2");
                            hash.Add(2, " Subject1");
                            hash.Add(3, " Subject2");
                            hash.Add(4, " Subject3");
                            hash.Add(5, " Subject4");
                            hash.Add(6, " Subject5");
                            hash.Add(7, " Subject6");
                            hash.Add(8, " Subject7");
                            hash.Add(9, " Subject8");
                            hash.Add(10, " Subject9");
                            hash.Add(11, " Subject10");
                            hash.Add(12, " Subject11");

                            int totalmark = 0;
                            int maxtotal = 0;

                            for (int mark = 0; mark < ds.Tables[0].Rows.Count; mark++)
                            {
                                string subjectno = Convert.ToString(ds.Tables[0].Rows[mark]["psubjectno"]);
                                string actualmark = "";
                                if (isgrade == "True")
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[mark]["grade"]);
                                }
                                else
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[mark]["acual_marks"]);
                                }
                                string month = Convert.ToString(ds.Tables[0].Rows[mark]["pass_month"]);
                                string year = Convert.ToString(ds.Tables[0].Rows[mark]["pass_year"]);
                                string regno = Convert.ToString(ds.Tables[0].Rows[mark]["registerno"]);
                                string noofattenm = Convert.ToString(ds.Tables[0].Rows[mark]["noofattempt"]);
                                string maxmark = Convert.ToString(ds.Tables[0].Rows[mark]["max_marks"]);
                                dr = data.NewRow();
                                string lang = Convert.ToString(hash[mark]);
                                dr[0] = Convert.ToString(lang);
                                string sub = subjectcode(subjectno);
                                dr[1] = Convert.ToString(sub);
                                dr[2] = Convert.ToString(actualmark);
                                dr[3] = Convert.ToString(month);
                                dr[4] = Convert.ToString(year);
                                dr[5] = Convert.ToString(regno);
                                dr[6] = Convert.ToString(noofattenm);
                                dr[7] = Convert.ToString(maxmark);
                                data.Rows.Add(dr);
                                if (isgrade != "True")
                                {
                                    totalmark = totalmark + Convert.ToInt32(actualmark);
                                    maxtotal = maxtotal + Convert.ToInt32(maxmark);
                                }
                            }
                            if (isgrade != "True")
                            {
                                total_marks_secured.InnerHtml = ":  " + Convert.ToString(totalmark);
                                maximum_marks.InnerHtml = ":  " + Convert.ToString(maxtotal);
                                percentage_span.InnerHtml = ":  " + percentage;
                            }

                            VerificationGridug.DataSource = data;
                            VerificationGridug.DataBind();
                            if (VerificationGridug.Rows.Count > 0)
                            {
                                for (int v = 0; v < VerificationGridug.Rows.Count; v++)
                                {
                                    VerificationGridug.Rows[v].Cells[2].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[3].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[4].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[5].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[6].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[7].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                        }
                    }
                    else if (ddledu.SelectedItem.Text == "PG")
                    {
                        ugtotaldiv.Visible = false;
                        pgtotaldiv.Visible = true;
                        string courseentronumber = Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]);
                        string coursecode = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);
                        string university_code = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                        string institutename = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);
                        string percentage = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                        string institueaddress = Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]);
                        string medium = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);
                        string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Part1Language"]);
                        string part2language = Convert.ToString(ds.Tables[1].Rows[0]["Part2Language"]);
                        string isgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]);
                        string university_state = Convert.ToString(ds.Tables[1].Rows[0]["uni_state"]);
                        string typeofsubject = Convert.ToString(ds.Tables[1].Rows[0]["type_major"]);
                        string typeofsemester = Convert.ToString(ds.Tables[1].Rows[0]["type_semester"]);
                        string regno = Convert.ToString(ds.Tables[1].Rows[0]["registration_no"]);
                        string major = Convert.ToString(ds.Tables[1].Rows[0]["branch_code"]);
                        string majorpercentage = Convert.ToString(ds.Tables[1].Rows[0]["major_percent"]);
                        string majorallidepercentage = Convert.ToString(ds.Tables[1].Rows[0]["majorallied_percent"]);
                        string Tancet = Convert.ToString(ds.Tables[1].Rows[0]["tancet_mark"]);
                        string Tancetyear = Convert.ToString(ds.Tables[1].Rows[0]["tancetmark_year"]);

                        percentagemajorspan.InnerHtml = ":  " + Convert.ToString(percentage);
                        majorsubjectspan.InnerHtml = ":  " + Convert.ToString(majorpercentage);
                        alliedmajorspan.InnerHtml = ":  " + Convert.ToString(majorallidepercentage);

                        if (coursecode.Trim() != "")
                        {
                            string course1 = subjectcode(coursecode);
                            ugqualifyingexam_span.InnerHtml = ":  " + Convert.ToString(course1);
                        }
                        else
                        {
                            ugqualifyingexam_span.InnerHtml = ":  -";
                        }
                        if (institutename.Trim() != "")
                        {
                            nameofcollege_Sapn.InnerHtml = ":  " + Convert.ToString(institutename);
                        }
                        else
                        {
                            nameofcollege_Sapn.InnerHtml = "";
                        }
                        if (institueaddress.Trim() != "")
                        {
                            locationofcollege_sapn.InnerHtml = ":  " + Convert.ToString(institueaddress);
                        }
                        else
                        {
                            locationofcollege_sapn.InnerHtml = "";
                        }
                        if (major.Trim() != "")
                        {
                            string major1 = subjectcode(major);
                            major_span.InnerHtml = ":  " + Convert.ToString(major1);
                        }
                        else
                        {
                            major_span.InnerHtml = "";
                        }
                        if (typeofsubject.Trim() != "")
                        {
                            if (typeofsubject == "1")
                            {
                                typeofsubject = "Single";
                            }
                            else if (typeofsubject == "2")
                            {
                                typeofsubject = "Double";
                            }
                            else if (typeofsubject == "3")
                            {
                                typeofsubject = "Triple";
                            }
                            typeofmajor_span.InnerHtml = ":  " + Convert.ToString(typeofsubject);
                        }
                        if (typeofsemester.Trim() != "")
                        {
                            if (typeofsemester == "True")
                            {
                                typeofsemester = "Semester";
                            }
                            else
                            {
                                typeofsemester = "Non Semester";
                            }
                            typeofsemester_span.InnerHtml = ":  " + Convert.ToString(typeofsemester);
                        }
                        if (medium.Trim() != "")
                        {
                            string lang = subjectcode(medium);
                            mediumofstudy_spanug.InnerHtml = ":  " + Convert.ToString(lang);
                        }

                        if (isgrade.Trim() != "")
                        {
                            if (isgrade == "True")
                            {
                                marksorgradeug_span.InnerHtml = ":  Grade";
                            }
                            else
                            {
                                marksorgradeug_span.InnerHtml = ":  Marks";
                            }
                        }

                        //if (isgrade.Trim() != "")
                        //{
                        //    marksorgradeug_span.InnerHtml = ":  " + Convert.ToString(isgrade);
                        //}
                        if (regno.Trim() != "")
                        {
                            reg_no_span.InnerHtml = ":  " + Convert.ToString(regno);
                        }

                        if (type == "MCA")
                        {
                            tnspan.Visible = true;
                            Tancetspan.Visible = true;
                            Tancetspan.InnerHtml = ": " + Convert.ToString(Tancet) + " - " + Convert.ToString(Tancetyear);
                        }

                        string pgquery = "select psubjectno,subject_typeno,acual_marks,max_marks,pass_month,pass_year,semyear ,grade from perv_marks_history where course_entno ='" + courseentronumber + "'";
                        ds.Clear();
                        ds = dt.select_method_wo_parameter(pgquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataTable data = new DataTable();
                            DataRow dr = null;
                            Hashtable hash = new Hashtable();
                            data.Columns.Add("S.No", typeof(string));
                            //  data.Columns.Add("Sem/Year", typeof(string));
                            data.Columns.Add("Subject", typeof(string));
                            data.Columns.Add("Subject type", typeof(string));
                            data.Columns.Add("Marks", typeof(string));
                            data.Columns.Add("Month", typeof(string));
                            data.Columns.Add("Year", typeof(string));
                            data.Columns.Add("Maximum Marks", typeof(string));
                            int sno = 0;
                            for (int pg = 0; pg < ds.Tables[0].Rows.Count; pg++)
                            {
                                sno++;
                                string subjectno = Convert.ToString(ds.Tables[0].Rows[pg]["psubjectno"]);
                                string subjecttypeno = Convert.ToString(ds.Tables[0].Rows[pg]["subject_typeno"]);
                                string actualmark = "";
                                if (isgrade == "True")
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[pg]["grade"]);
                                }
                                else
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[pg]["acual_marks"]);
                                }
                                string month = Convert.ToString(ds.Tables[0].Rows[pg]["pass_month"]);
                                string year = Convert.ToString(ds.Tables[0].Rows[pg]["pass_year"]);
                                // string noofattenm = Convert.ToString(ds.Tables[0].Rows[pg]["noofattempt"]);
                                string maxmark = Convert.ToString(ds.Tables[0].Rows[pg]["max_marks"]);
                                dr = data.NewRow();
                                dr[0] = Convert.ToString(sno);
                                string subject = subjectcode(subjectno);
                                dr[1] = Convert.ToString(subject);
                                string typesub = subjectcode(subjecttypeno);
                                dr[2] = Convert.ToString(typesub);
                                dr[3] = Convert.ToString(actualmark);
                                dr[4] = Convert.ToString(month);
                                dr[5] = Convert.ToString(year);
                                dr[6] = Convert.ToString(maxmark);
                                data.Rows.Add(dr);
                            }
                            Verificationgridpg.DataSource = data;
                            Verificationgridpg.DataBind();
                            if (VerificationGridug.Rows.Count > 0)
                            {
                                for (int v = 0; v < Verificationgridpg.Rows.Count; v++)
                                {
                                    Verificationgridpg.Rows[v].Cells[3].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[4].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[5].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[6].HorizontalAlign = HorizontalAlign.Center;

                                }
                            }
                        }

                    }
                    coursedetails.Visible = true;
                    ugtotaldiv.Visible = true;
                    Academicinfo.Visible = true;
                    Button6.Visible = true;
                }

            }
        }
        catch (Exception ex)
        {

        }
    }
    public string subjectcode(string textcri)
    {
        string subjec_no = "";
        try
        {
            DataSet ds23 = new DataSet();
            string select_subno = "select TextVal from textvaltable where TextCode ='" + textcri + "' and college_code ='" + Session["collegecode"].ToString() + "' ";
            ds23.Clear();
            ds23 = dt.select_method_wo_parameter(select_subno, "Text");
            if (ds23.Tables[0].Rows.Count > 0)
            {
                subjec_no = Convert.ToString(ds23.Tables[0].Rows[0]["TextVal"]);
            }

        }
        catch
        {

        }
        return subjec_no;
    }
    protected void FpSpread3_command(object sender, EventArgs e)
    {
        try
        {
            string activerow = "";
            string activecol = "";
            activerow = FpSpread3.ActiveSheetView.ActiveRow.ToString();
            activecol = FpSpread3.ActiveSheetView.ActiveColumn.ToString();
            string value = "";
            if (Convert.ToInt32(activecol) == 1 && Convert.ToInt32(activerow) == 0)
            {
                value = Convert.ToString(FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), Convert.ToInt32(activecol)].Value);
                if (value == "1")
                {
                    for (int i = 0; i < FpSpread3.Sheets[0].Rows.Count; i++)
                    {
                        FpSpread3.Sheets[0].Cells[i, 1].Value = 1;
                    }
                }
                else
                {
                    for (int i = 0; i < FpSpread3.Sheets[0].Rows.Count; i++)
                    {
                        FpSpread3.Sheets[0].Cells[i, 1].Value = 0;
                    }
                }
            }
            else
            {
                if (Convert.ToInt32(activecol) == 1)
                {
                    int ii = 0;
                    for (int i = 0; i < FpSpread3.Sheets[0].Rows.Count; i++)
                    {
                        value = Convert.ToString(FpSpread3.Sheets[0].Cells[Convert.ToInt32(i), Convert.ToInt32(activecol)].Value);
                        if (value == "1")
                        {

                        }
                        else
                        {
                            ii = 1;
                        }
                        if (ii == 1)
                        {
                            FpSpread3.Sheets[0].Cells[0, 1].Value = 0;
                        }
                        else
                        {
                            FpSpread3.Sheets[0].Cells[0, 1].Value = 1;
                        }
                    }
                }

            }
            if (activecol == "2")
            {
                string app_no = Convert.ToString(FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
                Session["pdfapp_no"] = Convert.ToString(app_no);
                //string jg = "update applyn set isview='1' where app_no='" + FpSpread3.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text + "'  and degree_code='" + ddldept.SelectedValue + "' and college_code='" + college_code + "'";
                //int k = dt.update_method_wo_parameter(jg, "text");
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                string type = ddltype.SelectedItem.Text;
                string edulevel = ddledu.SelectedItem.Text;
                string grduation = ddldegree.SelectedItem.Text;
                string course = ddldept.SelectedItem.Text;
                if (edulevel.ToString().ToUpper() == "PG")
                {
                    pgdiv_verification.Visible = true;
                    ugdiv_verification.Visible = false;
                }
                else if (edulevel.ToString().ToUpper() == "UG")
                {
                    pgdiv_verification.Visible = false;
                    ugdiv_verification.Visible = true;
                }

                string query = "select app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name,sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,parent_occu,mother_tongue,religion,citizen,community,caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet,degree_code from applyn a where a.app_no='" + app_no + "'";
                query = query + " select course_entno,course_code,university_code,Institute_name,percentage,instaddress,medium,branch_code ,Part1Language,Part2Language,Vocational_stream,isgrade,uni_state,registration_no,type_semester,majorallied_percent,major_percent,type_major,tancet_mark,tancetmark_year from Stud_prev_details where app_no ='" + app_no + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "text");
                if (ds.Tables[0].Rows.Count > 0)
                {

                    college_span.InnerHtml = ":  " + Convert.ToString(type);
                    degree_Span.InnerHtml = ":  " + Convert.ToString(edulevel);
                    graduation_span.InnerHtml = ":  " + Convert.ToString(d2.GetFunction("select c.Course_Name from degree d,Department dt,Course c  where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and  degree_code=" + Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]) + ""));
                    course_span.InnerHtml = ":  " + Convert.ToString(d2.GetFunction("select dt.Dept_Name from degree d,Department dt,Course c  where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and  degree_code=" + Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]) + ""));

                    applicantname_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]);

                    dob_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["dob"]);
                    if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "0")
                    {
                        gender_span.InnerHtml = ":  Male";
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "1")
                    {
                        gender_span.InnerHtml = ":  Female";
                    }
                    else if (Convert.ToString(ds.Tables[0].Rows[0]["sex"]) == "2")
                    {
                        gender_span.InnerHtml = ":  Transgender";
                    }
                    parent_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_name"]);

                    string occupation = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["parent_occu"]));
                    occupation_span.InnerHtml = ":  " + occupation.ToString();

                    string mothertonge = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["mother_tongue"]));
                    mothertongue_span.InnerHtml = ":  " + Convert.ToString(mothertonge);


                    string relisgion = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["religion"]));
                    religion_span.InnerHtml = ":  " + Convert.ToString(relisgion);

                    string city = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["citizen"]));
                    nationality_span.InnerHtml = ":  " + Convert.ToString(city);

                    string coummnity = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["community"]));
                    commuity_span.InnerHtml = ":  " + Convert.ToString(coummnity);

                    if (Convert.ToString(ds.Tables[0].Rows[0]["caste"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["caste"]) != "0")
                    {
                        string scas = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["caste"]));
                        Caste_span.InnerHtml = ":  " + Convert.ToString(scas);
                    }
                    else
                    {
                        Caste_span.InnerHtml = ":  -";
                    }

                    if (Convert.ToString(ds.Tables[0].Rows[0]["TamilOrginFromAndaman"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["TamilOrginFromAndaman"]) != "False")
                    {
                        tamilorigin_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        tamilorigin_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["IsExService"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["IsExService"]) != "False")
                    {
                        Ex_service_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Ex_service_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["isdisable"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["isdisable"]) != "False")
                    {
                        Differentlyable_Span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Differentlyable_Span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["first_graduate"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["first_graduate"]) != "False")
                    {
                        first_generation_Span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        first_generation_Span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]) != "False")
                    {
                        residancerequired_span.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        residancerequired_span.InnerHtml = ":  No";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]) != "0")
                    {
                        string disy = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]));
                        sport_span.InnerHtml = ":  " + Convert.ToString(disy);
                    }
                    else
                    {
                        sport_span.InnerHtml = ":  -";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]) != "0")
                    {
                        string cocour = subjectcode(Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]));
                        Co_Curricular_span.InnerHtml = ":  " + Convert.ToString(cocour);
                    }
                    else
                    {
                        Co_Curricular_span.InnerHtml = ":  -";
                    }

                    if (Convert.ToString(ds.Tables[0].Rows[0]["ncccadet"]).Trim() != "" && Convert.ToString(ds.Tables[0].Rows[0]["ncccadet"]) != "False")
                    {
                        ncccadetspan.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        ncccadetspan.InnerHtml = ":  No";
                    }

                    if (Convert.ToString(ds.Tables[1].Rows[0]["Vocational_stream"]).Trim() != "" && Convert.ToString(ds.Tables[1].Rows[0]["Vocational_stream"]) != "False")
                    {
                        Vocationalspan.InnerHtml = ":  Yes";
                    }
                    else
                    {
                        Vocationalspan.InnerHtml = ":  No";
                    }


                    caddressline1_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_addressC"]);
                    string address = Convert.ToString(ds.Tables[0].Rows[0]["Streetc"]);
                    if (ds.Tables[0].Rows[0]["Streetc"].ToString().Trim() != "")
                    {

                        string[] split = address.Split('/');
                        if (split.Length > 1)
                        {
                            if (Convert.ToString(split[0]).Trim() != "")
                            {
                                Addressline2_span.InnerHtml = ":  " + Convert.ToString(split[0]);
                            }
                            else
                            {
                                Addressline2_span.InnerHtml = ":  -";
                            }
                            if (Convert.ToString(split[1]).Trim() != "")
                            {
                                Addressline3_span.InnerHtml = ":  " + Convert.ToString(split[1]);
                            }
                            else
                            {
                                Addressline3_span.InnerHtml = ":  -";
                            }
                        }
                        else
                        {
                            Addressline2_span.InnerHtml = ":  " + Convert.ToString(split[0]);
                        }

                    }
                    else
                    {
                        Addressline2_span.InnerHtml = ":  -";
                        Addressline3_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Cityc"].ToString().Trim() != "")
                    {
                        city_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Cityc"]);
                    }
                    else
                    {
                        city_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_statec"].ToString().Trim() != "")
                    {
                        string state = subjectcode(ds.Tables[0].Rows[0]["parent_statec"].ToString());
                        state_span.InnerHtml = ":  " + Convert.ToString(state);
                    }
                    else
                    {
                        state_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Countryc"].ToString().Trim() != "")
                    {
                        string country = subjectcode(ds.Tables[0].Rows[0]["Countryc"].ToString());
                        Country_span.InnerHtml = ":  " + Convert.ToString(country);
                    }
                    else
                    {
                        Country_span.InnerHtml = "-";
                    }
                    if (ds.Tables[0].Rows[0]["parent_pincodec"].ToString().Trim() != "")
                    {
                        Postelcode_Span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodec"]);
                    }
                    else
                    {
                        Postelcode_Span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["Student_Mobile"].ToString().Trim() != "")
                    {
                        Mobilenumber_Span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Student_Mobile"]);
                    }
                    else
                    {
                        Mobilenumber_Span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["alter_mobileno"].ToString().Trim() != "")
                    {
                        Alternatephone_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["alter_mobileno"]);
                    }
                    else
                    {
                        Alternatephone_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["StuPer_Id"].ToString().Trim() != "")
                    {
                        emailid_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["StuPer_Id"]);
                    }
                    else
                    {
                        emailid_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_phnoc"].ToString().Trim() != "")
                    {
                        std_ist_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_phnoc"]);
                    }
                    else
                    {
                        std_ist_span.InnerHtml = "-";
                    }

                    // permnant

                    paddressline1_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_addressP"]);
                    if (ds.Tables[0].Rows[0]["Streetp"].ToString().Trim() != "")
                    {
                        string streat = Convert.ToString(ds.Tables[0].Rows[0]["Streetp"]);
                        if (streat.Trim() != "")
                        {
                            string[] splitstreat = streat.Split('/');
                            if (splitstreat.Length > 1)
                            {
                                if (Convert.ToString(splitstreat[0]).Trim() != "")
                                {
                                    paddressline2_span.InnerHtml = ":  " + Convert.ToString(splitstreat[0]);
                                }
                                else
                                {
                                    paddressline2_span.InnerHtml = ":  -";
                                }
                                if (Convert.ToString(splitstreat[0]).Trim() != "")
                                {
                                    paddressline3_span.InnerHtml = ":  " + Convert.ToString(splitstreat[1]);
                                }
                                else
                                {
                                    paddressline3_span.InnerHtml = ":  -";
                                }
                            }
                            else
                            {
                                paddressline2_span.InnerHtml = ":  " + Convert.ToString(splitstreat[0]);
                            }
                        }
                        paddressline2_span.InnerHtml = ":  -";
                        paddressline3_span.InnerHtml = ":  -";
                    }
                    else
                    {
                        paddressline2_span.InnerHtml = ":  -";
                        paddressline3_span.InnerHtml = ":  -";
                    }


                    if (ds.Tables[0].Rows[0]["Cityp"].ToString().Trim() != "")
                    {
                        pcity_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Cityp"]);
                    }
                    else
                    {
                        pcity_span.InnerHtml = "-";
                    }

                    if (ds.Tables[0].Rows[0]["parent_statep"].ToString().Trim() != "")
                    {
                        string state = subjectcode(ds.Tables[0].Rows[0]["parent_statep"].ToString());
                        pstate_span.InnerHtml = ":  " + Convert.ToString(state);
                    }
                    else
                    {
                        pstate_span.InnerHtml = ":  -";
                    }

                    if (ds.Tables[0].Rows[0]["Countryp"].ToString().Trim() != "")
                    {
                        string country = subjectcode(ds.Tables[0].Rows[0]["Countryp"].ToString());
                        pcountry_span.InnerHtml = ":  " + Convert.ToString(country);
                    }
                    else
                    {
                        pcountry_span.InnerHtml = "-";
                    }
                    if (ds.Tables[0].Rows[0]["parent_pincodep"].ToString().Trim() != "")
                    {
                        ppostelcode_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodep"]);
                    }
                    else
                    {
                        ppostelcode_span.InnerHtml = "-";
                    }


                    if (ds.Tables[0].Rows[0]["parent_phnop"].ToString().Trim() != "")
                    {
                        pstdisd_span.InnerHtml = ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_phnop"]);
                    }
                    else
                    {
                        pstdisd_span.InnerHtml = "-";
                    }
                }
                if (ds.Tables[1].Rows.Count > 0)
                {
                    if (ddledu.SelectedItem.Text == "UG")
                    {
                        ugtotaldiv.Visible = true;
                        pgtotaldiv.Visible = false;
                        string courseentronumber = Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]);
                        string coursecode = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);
                        string university_code = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                        string institutename = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);
                        string percentage = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                        string institueaddress = Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]);
                        string medium = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);
                        string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Part1Language"]);
                        string part2language = Convert.ToString(ds.Tables[1].Rows[0]["Part2Language"]);
                        string isgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]);
                        string university_state = Convert.ToString(ds.Tables[1].Rows[0]["uni_state"]);
                        // string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);

                        if (coursecode.Trim() != "")
                        {
                            string course1 = subjectcode(coursecode);
                            qualifyingexam_span.InnerHtml = ":  " + Convert.ToString(course1);
                        }
                        else
                        {
                            qualifyingexam_span.InnerHtml = ":  -";
                        }


                        if (institutename.Trim() != "")
                        {
                            Nameofschool_span.InnerHtml = ":  " + Convert.ToString(institutename);
                        }
                        else
                        {
                            Nameofschool_span.InnerHtml = "";
                        }
                        if (institueaddress.Trim() != "")
                        {
                            locationofschool_Span.InnerHtml = ":  " + Convert.ToString(institueaddress);
                        }
                        else
                        {
                            locationofschool_Span.InnerHtml = "";
                        }
                        if (medium.Trim() != "")
                        {
                            string m = subjectcode(medium);
                            mediumofstudy_span.InnerHtml = ":  " + Convert.ToString(m);
                        }
                        else
                        {
                            mediumofstudy_span.InnerHtml = ":  -";
                        }
                        if (university_code.Trim() != "")
                        {
                            string univ = subjectcode(university_code);
                            qualifyingboard_span.InnerHtml = ":  " + Convert.ToString(univ);

                        }
                        else
                        {
                            qualifyingboard_span.InnerHtml = ":  -";
                        }
                        if (isgrade.Trim() != "")
                        {
                            if (isgrade == "True")
                            {
                                marksgrade_span.InnerHtml = ":  Grade";
                            }
                            else
                            {
                                marksgrade_span.InnerHtml = ":  Marks";
                            }
                        }

                        string markquery = "select psubjectno,registerno,acual_marks,max_marks,noofattempt,pass_month,pass_year,semyear ,grade from perv_marks_history  where course_entno ='" + courseentronumber + "'";
                        ds.Clear();
                        ds = dt.select_method_wo_parameter(markquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataTable data = new DataTable();
                            DataRow dr = null;
                            Hashtable hash = new Hashtable();
                            data.Columns.Add("Language", typeof(string));
                            data.Columns.Add("Subject", typeof(string));
                            data.Columns.Add("Marks Obtained", typeof(string));
                            data.Columns.Add("Month", typeof(string));
                            data.Columns.Add("Year", typeof(string));
                            data.Columns.Add("Register No / Roll No", typeof(string));
                            data.Columns.Add("No of Attempts", typeof(string));
                            data.Columns.Add("Maximum Marks", typeof(string));

                            hash.Add(0, "Language1");
                            hash.Add(1, "Language2");
                            hash.Add(2, " Subject1");
                            hash.Add(3, " Subject2");
                            hash.Add(4, " Subject3");
                            hash.Add(5, " Subject4");
                            hash.Add(6, " Subject5");
                            hash.Add(7, " Subject6");
                            hash.Add(8, " Subject7");
                            hash.Add(9, " Subject8");
                            hash.Add(10, " Subject9");
                            hash.Add(11, " Subject10");
                            hash.Add(12, " Subject11");

                            int totalmark = 0;
                            int maxtotal = 0;

                            for (int mark = 0; mark < ds.Tables[0].Rows.Count; mark++)
                            {
                                string subjectno = Convert.ToString(ds.Tables[0].Rows[mark]["psubjectno"]);
                                string actualmark = "";
                                if (isgrade == "True")
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[mark]["grade"]);
                                }
                                else
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[mark]["acual_marks"]);
                                }
                                string month = Convert.ToString(ds.Tables[0].Rows[mark]["pass_month"]);
                                string year = Convert.ToString(ds.Tables[0].Rows[mark]["pass_year"]);
                                string regno = Convert.ToString(ds.Tables[0].Rows[mark]["registerno"]);
                                string noofattenm = Convert.ToString(ds.Tables[0].Rows[mark]["noofattempt"]);
                                string maxmark = Convert.ToString(ds.Tables[0].Rows[mark]["max_marks"]);
                                dr = data.NewRow();
                                string lang = Convert.ToString(hash[mark]);
                                dr[0] = Convert.ToString(lang);
                                string sub = subjectcode(subjectno);
                                dr[1] = Convert.ToString(sub);
                                dr[2] = Convert.ToString(actualmark);
                                dr[3] = Convert.ToString(month);
                                dr[4] = Convert.ToString(year);
                                dr[5] = Convert.ToString(regno);
                                dr[6] = Convert.ToString(noofattenm);
                                dr[7] = Convert.ToString(maxmark);
                                data.Rows.Add(dr);
                                if (isgrade != "True")
                                {
                                    totalmark = totalmark + Convert.ToInt32(actualmark);
                                    maxtotal = maxtotal + Convert.ToInt32(maxmark);
                                }
                            }
                            if (isgrade != "True")
                            {
                                total_marks_secured.InnerHtml = ":  " + Convert.ToString(totalmark);
                                maximum_marks.InnerHtml = ":  " + Convert.ToString(maxtotal);
                                percentage_span.InnerHtml = ":  " + percentage;
                            }

                            VerificationGridug.DataSource = data;
                            VerificationGridug.DataBind();
                            if (VerificationGridug.Rows.Count > 0)
                            {
                                for (int v = 0; v < VerificationGridug.Rows.Count; v++)
                                {
                                    VerificationGridug.Rows[v].Cells[2].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[3].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[4].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[5].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[6].HorizontalAlign = HorizontalAlign.Center;
                                    VerificationGridug.Rows[v].Cells[7].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                        }
                    }
                    else if (ddledu.SelectedItem.Text == "PG")
                    {
                        ugtotaldiv.Visible = false;
                        pgtotaldiv.Visible = true;
                        string courseentronumber = Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]);
                        string coursecode = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);
                        string university_code = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                        string institutename = Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]);
                        string percentage = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                        string institueaddress = Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]);
                        string medium = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);
                        string part1language = Convert.ToString(ds.Tables[1].Rows[0]["Part1Language"]);
                        string part2language = Convert.ToString(ds.Tables[1].Rows[0]["Part2Language"]);
                        string isgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]);
                        string university_state = Convert.ToString(ds.Tables[1].Rows[0]["uni_state"]);
                        string typeofsubject = Convert.ToString(ds.Tables[1].Rows[0]["type_major"]);
                        string typeofsemester = Convert.ToString(ds.Tables[1].Rows[0]["type_semester"]);
                        string regno = Convert.ToString(ds.Tables[1].Rows[0]["registration_no"]);
                        string major = Convert.ToString(ds.Tables[1].Rows[0]["branch_code"]);
                        string majorpercentage = Convert.ToString(ds.Tables[1].Rows[0]["major_percent"]);
                        string majorallidepercentage = Convert.ToString(ds.Tables[1].Rows[0]["majorallied_percent"]);
                        string Tancet = Convert.ToString(ds.Tables[1].Rows[0]["tancet_mark"]);
                        string Tancetyear = Convert.ToString(ds.Tables[1].Rows[0]["tancetmark_year"]);

                        percentagemajorspan.InnerHtml = ":  " + Convert.ToString(percentage);
                        majorsubjectspan.InnerHtml = ":  " + Convert.ToString(majorpercentage);
                        alliedmajorspan.InnerHtml = ":  " + Convert.ToString(majorallidepercentage);

                        if (coursecode.Trim() != "")
                        {
                            string course1 = subjectcode(coursecode);
                            ugqualifyingexam_span.InnerHtml = ":  " + Convert.ToString(course1);
                        }
                        else
                        {
                            ugqualifyingexam_span.InnerHtml = ":  -";
                        }
                        if (institutename.Trim() != "")
                        {
                            nameofcollege_Sapn.InnerHtml = ":  " + Convert.ToString(institutename);
                        }
                        else
                        {
                            nameofcollege_Sapn.InnerHtml = "";
                        }
                        if (institueaddress.Trim() != "")
                        {
                            locationofcollege_sapn.InnerHtml = ":  " + Convert.ToString(institueaddress);
                        }
                        else
                        {
                            locationofcollege_sapn.InnerHtml = "";
                        }
                        if (major.Trim() != "")
                        {
                            string major1 = subjectcode(major);
                            major_span.InnerHtml = ":  " + Convert.ToString(major1);
                        }
                        else
                        {
                            major_span.InnerHtml = "";
                        }
                        if (typeofsubject.Trim() != "")
                        {
                            if (typeofsubject == "1")
                            {
                                typeofsubject = "Single";
                            }
                            else if (typeofsubject == "2")
                            {
                                typeofsubject = "Double";
                            }
                            else if (typeofsubject == "3")
                            {
                                typeofsubject = "Triple";
                            }
                            typeofmajor_span.InnerHtml = ":  " + Convert.ToString(typeofsubject);
                        }
                        if (typeofsemester.Trim() != "")
                        {
                            if (typeofsemester == "True")
                            {
                                typeofsemester = "Semester";
                            }
                            else
                            {
                                typeofsemester = "Non Semester";
                            }
                            typeofsemester_span.InnerHtml = ":  " + Convert.ToString(typeofsemester);
                        }
                        if (medium.Trim() != "")
                        {
                            string lang = subjectcode(medium);
                            mediumofstudy_spanug.InnerHtml = ":  " + Convert.ToString(lang);
                        }

                        if (isgrade.Trim() != "")
                        {
                            if (isgrade == "True")
                            {
                                marksorgradeug_span.InnerHtml = ":  Grade";
                            }
                            else
                            {
                                marksorgradeug_span.InnerHtml = ":  Marks";
                            }
                        }

                        //if (isgrade.Trim() != "")
                        //{
                        //    marksorgradeug_span.InnerHtml = ":  " + Convert.ToString(isgrade);
                        //}
                        if (regno.Trim() != "")
                        {
                            reg_no_span.InnerHtml = ":  " + Convert.ToString(regno);
                        }

                        if (type == "MCA")
                        {
                            tnspan.Visible = true;
                            Tancetspan.Visible = true;
                            Tancetspan.InnerHtml = ": " + Convert.ToString(Tancet) + " - " + Convert.ToString(Tancetyear);
                        }


                        string pgquery = "select psubjectno,subject_typeno,acual_marks,max_marks,pass_month,pass_year,semyear ,grade from perv_marks_history where course_entno ='" + courseentronumber + "'";
                        ds.Clear();
                        ds = dt.select_method_wo_parameter(pgquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            DataTable data = new DataTable();
                            DataRow dr = null;
                            Hashtable hash = new Hashtable();
                            data.Columns.Add("S.No", typeof(string));
                            //  data.Columns.Add("Sem/Year", typeof(string));
                            data.Columns.Add("Subject", typeof(string));
                            data.Columns.Add("Subject type", typeof(string));
                            data.Columns.Add("Marks", typeof(string));
                            data.Columns.Add("Month", typeof(string));
                            data.Columns.Add("Year", typeof(string));
                            data.Columns.Add("Maximum Marks", typeof(string));
                            int sno = 0;
                            for (int pg = 0; pg < ds.Tables[0].Rows.Count; pg++)
                            {
                                sno++;
                                string subjectno = Convert.ToString(ds.Tables[0].Rows[pg]["psubjectno"]);
                                string subjecttypeno = Convert.ToString(ds.Tables[0].Rows[pg]["subject_typeno"]);
                                string actualmark = "";
                                if (isgrade == "True")
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[pg]["grade"]);
                                }
                                else
                                {
                                    actualmark = Convert.ToString(ds.Tables[0].Rows[pg]["acual_marks"]);
                                }

                                string month = Convert.ToString(ds.Tables[0].Rows[pg]["pass_month"]);
                                string year = Convert.ToString(ds.Tables[0].Rows[pg]["pass_year"]);
                                // string noofattenm = Convert.ToString(ds.Tables[0].Rows[pg]["noofattempt"]);
                                string maxmark = Convert.ToString(ds.Tables[0].Rows[pg]["max_marks"]);
                                dr = data.NewRow();
                                dr[0] = Convert.ToString(sno);
                                string subject = subjectcode(subjectno);
                                dr[1] = Convert.ToString(subject);
                                string typesub = subjectcode(subjecttypeno);
                                dr[2] = Convert.ToString(typesub);
                                dr[3] = Convert.ToString(actualmark);
                                dr[4] = Convert.ToString(month);
                                dr[5] = Convert.ToString(year);
                                dr[6] = Convert.ToString(maxmark);
                                data.Rows.Add(dr);
                            }
                            Verificationgridpg.DataSource = data;
                            Verificationgridpg.DataBind();
                            if (VerificationGridug.Rows.Count > 0)
                            {
                                for (int v = 0; v < Verificationgridpg.Rows.Count; v++)
                                {
                                    Verificationgridpg.Rows[v].Cells[3].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[4].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[5].HorizontalAlign = HorizontalAlign.Center;
                                    Verificationgridpg.Rows[v].Cells[6].HorizontalAlign = HorizontalAlign.Center;

                                }
                            }
                        }

                    }
                    coursedetails.Visible = true;
                    ugtotaldiv.Visible = true;
                    Academicinfo.Visible = true;
                    Button6.Visible = true;
                }

            }
        }
        catch (Exception ex)
        {

        }
    }
    protected void ddldegreeselected(object sender, EventArgs e)
    {
        lbltotalcount.Visible = false;
        lbltotalcount1.Visible = false;
        lbltotalcount2.Visible = false;
        lbltotalcount3.Visible = false;
        FpSpread4.Visible = false;
        FpSpread3.Visible = false;
        FpSpread2.Visible = false;
        FpSpread1.Visible = false;
        Label66.Visible = false;
        // lblnew2.Text = "0" + "New";
        Label68.Visible = false;
        btnapprove.Visible = false;
        btnSendSmsOpenPop.Visible = false;
        Button2.Visible = false;
        Button3.Visible = false;
        Button9.Visible = false;
        lbltotalfeepaid.Visible = false;
        lbltotalfeepaid_value.Visible = false;
        branch();
        bindsem();
        loadBoardUniv();
    }
    protected void chirstian_Click(object sender, EventArgs e)
    {
        try
        {

            ckbx.Checked = false;
            string textval = " select TextCode from textvaltable where TextCriteria='relig' and TextVal ='Christian' and college_code='" + Session["collegecode"].ToString() + "' ";
            ds.Clear();
            ds = dt.select_method_wo_parameter(textval, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                textcode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                ViewState["text_code_value"] = textcode;
                ViewState["text_type"] = "Religion";
                string query = "select allot,priority,allot_Confirm  from admitcolumnset where  college_code='" + college_code + "' and user_code='" + user_code + "' and textcriteria ='relig' and column_name ='" + textcode + "' and setcolumn ='" + ddldept.SelectedItem.Value + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string alote = Convert.ToString(ds.Tables[0].Rows[0]["allot"]);
                    string priority = Convert.ToString(ds.Tables[0].Rows[0]["priority"]);
                    string confirmalote = Convert.ToString(ds.Tables[0].Rows[0]["allot_Confirm"]);
                    int count = 0;
                    if (priority.Trim() != "" && priority != null)
                    {
                        if (confirmalote.Trim() != "" && confirmalote != null && alote.Trim() != "" && alote != null)
                        {
                            count = Convert.ToInt32(priority) - Convert.ToInt32(confirmalote);
                            lbltotalfeepaid.Text = "Selected : " + Convert.ToInt32(alote) + "";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : " + Convert.ToInt32(confirmalote) + "";
                            lbltotalfeepaid_value.Visible = true;
                        }
                        else
                        {
                            count = Convert.ToInt32(priority);
                            lbltotalfeepaid.Text = "Selected : 0";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : 0";
                            lbltotalfeepaid_value.Visible = true;
                        }
                    }
                    else
                    {
                        lbltotalfeepaid.Text = "Selected :  0";
                        lbltotalfeepaid.Visible = true;

                        lbltotalfeepaid_value.Text = "Admitted : 0";
                        lbltotalfeepaid_value.Visible = true;
                    }


                }
                orderflage = true;
                Button1_Click(sender, e);
                // allocate();
            }

        }
        catch
        {

        }
    }
    protected void bc_Clcik(object sender, EventArgs e)
    {
        try
        {

            ckbx.Checked = false;

            string textval = " select * from textvaltable where TextCriteria='comm' and TextVal ='BC' and college_code='" + Session["collegecode"].ToString() + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(textval, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                textcode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                ViewState["text_code_value"] = textcode;
                ViewState["text_type"] = "Community";
                string query = "select allot,priority,allot_Confirm  from admitcolumnset where  college_code='" + college_code + "' and user_code='" + user_code + "' and textcriteria ='community' and column_name ='" + textcode + "' and setcolumn ='" + ddldept.SelectedItem.Value + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string alote = Convert.ToString(ds.Tables[0].Rows[0]["allot"]);
                    string priority = Convert.ToString(ds.Tables[0].Rows[0]["priority"]);
                    string confirmalote = Convert.ToString(ds.Tables[0].Rows[0]["allot_Confirm"]);
                    int count = 0;
                    if (priority.Trim() != "" && priority != null)
                    {
                        if (confirmalote.Trim() != "" && confirmalote != null && alote.Trim() != "" && alote != null)
                        {
                            count = Convert.ToInt32(priority) - Convert.ToInt32(confirmalote);
                            lbltotalfeepaid.Text = "Selected : " + Convert.ToInt32(alote) + "";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : " + Convert.ToInt32(confirmalote) + "";
                            lbltotalfeepaid_value.Visible = true;
                        }
                        else
                        {
                            count = Convert.ToInt32(priority);
                            lbltotalfeepaid.Text = "Selected : 0";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : 0";
                            lbltotalfeepaid_value.Visible = true;
                        }
                    }
                    else
                    {
                        lbltotalfeepaid.Text = "Selected :  0";
                        lbltotalfeepaid.Visible = true;

                        lbltotalfeepaid_value.Text = "Admitted : 0";
                        lbltotalfeepaid_value.Visible = true;
                    }

                }
                orderflage = true;
                Button1_Click(sender, e);
                //allocate();
            }
        }
        catch
        {

        }
    }
    protected void bcm_Clcik(object sender, EventArgs e)
    {
        try
        {

            ckbx.Checked = false;
            string textval = " select * from textvaltable where TextCriteria='comm' and TextCriteria2='comm1' and TextVal ='BCM' and college_code='" + Session["collegecode"].ToString() + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(textval, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                textcode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                ViewState["text_code_value"] = textcode;
                ViewState["text_type"] = "Community";
                string query = "select allot,priority,allot_Confirm  from admitcolumnset where  college_code='" + college_code + "' and user_code='" + user_code + "' and textcriteria ='community' and column_name ='" + textcode + "' and setcolumn ='" + ddldept.SelectedItem.Value + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string alote = Convert.ToString(ds.Tables[0].Rows[0]["allot"]);
                    string priority = Convert.ToString(ds.Tables[0].Rows[0]["priority"]);
                    string confirmalote = Convert.ToString(ds.Tables[0].Rows[0]["allot_Confirm"]);
                    int count = 0;
                    if (priority.Trim() != "" && priority != null)
                    {
                        if (confirmalote.Trim() != "" && confirmalote != null && alote.Trim() != "" && alote != null)
                        {
                            count = Convert.ToInt32(priority) - Convert.ToInt32(confirmalote);
                            lbltotalfeepaid.Text = "Selected : " + Convert.ToInt32(alote) + "";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : " + Convert.ToInt32(confirmalote) + "";
                            lbltotalfeepaid_value.Visible = true;
                        }
                        else
                        {
                            count = Convert.ToInt32(priority);
                            lbltotalfeepaid.Text = "Selected : 0";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : 0";
                            lbltotalfeepaid_value.Visible = true;
                        }
                    }
                    else
                    {
                        lbltotalfeepaid.Text = "Selected :  0";
                        lbltotalfeepaid.Visible = true;

                        lbltotalfeepaid_value.Text = "Admitted : 0";
                        lbltotalfeepaid_value.Visible = true;
                    }

                }
                orderflage = true;
                Button1_Click(sender, e);
                //allocate();
            }
        }
        catch
        {
        }
    }
    protected void mbc_Clcik(object sender, EventArgs e)
    {
        try
        {

            ckbx.Checked = false;
            string textval = " select * from textvaltable where TextCriteria='comm' and TextVal ='MBC/DNC' and college_code='" + Session["collegecode"].ToString() + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(textval, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                textcode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                ViewState["text_code_value"] = textcode;
                ViewState["text_type"] = "Community";
                string query = "select allot,priority,allot_Confirm  from admitcolumnset where  college_code='" + college_code + "' and user_code='" + user_code + "' and textcriteria ='community' and column_name ='" + textcode + "' and setcolumn ='" + ddldept.SelectedItem.Value + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string alote = Convert.ToString(ds.Tables[0].Rows[0]["allot"]);
                    string priority = Convert.ToString(ds.Tables[0].Rows[0]["priority"]);
                    string confirmalote = Convert.ToString(ds.Tables[0].Rows[0]["allot_Confirm"]);
                    int count = 0;
                    if (priority.Trim() != "" && priority != null)
                    {
                        if (confirmalote.Trim() != "" && confirmalote != null && alote.Trim() != "" && alote != null)
                        {
                            count = Convert.ToInt32(priority) - Convert.ToInt32(confirmalote);
                            lbltotalfeepaid.Text = "Selected : " + Convert.ToInt32(alote) + "";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : " + Convert.ToInt32(confirmalote) + "";
                            lbltotalfeepaid_value.Visible = true;
                        }
                        else
                        {
                            count = Convert.ToInt32(priority);
                            lbltotalfeepaid.Text = "Selected : 0";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : 0";
                            lbltotalfeepaid_value.Visible = true;
                        }
                    }
                    else
                    {
                        lbltotalfeepaid.Text = "Selected :  0";
                        lbltotalfeepaid.Visible = true;
                        lbltotalfeepaid_value.Text = "Admitted : 0";
                        lbltotalfeepaid_value.Visible = true;
                    }

                }
                orderflage = true;
                Button1_Click(sender, e);
                // allocate();
            }
        }
        catch
        {
        }
    }
    protected void sc_Clcik(object sender, EventArgs e)
    {
        try
        {

            ckbx.Checked = false;
            string textval = " select * from textvaltable where TextCriteria='comm' and TextVal ='SC' and college_code='" + Session["collegecode"].ToString() + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(textval, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                textcode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                ViewState["text_code_value"] = textcode;
                ViewState["text_type"] = "Community";
                string query = "select allot,priority,allot_Confirm  from admitcolumnset where  college_code='" + college_code + "' and user_code='" + user_code + "' and textcriteria ='community' and column_name ='" + textcode + "' and setcolumn ='" + ddldept.SelectedItem.Value + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string alote = Convert.ToString(ds.Tables[0].Rows[0]["allot"]);
                    string priority = Convert.ToString(ds.Tables[0].Rows[0]["priority"]);
                    string confirmalote = Convert.ToString(ds.Tables[0].Rows[0]["allot_Confirm"]);
                    int count = 0;
                    if (priority.Trim() != "" && priority != null)
                    {
                        if (confirmalote.Trim() != "" && confirmalote != null && alote.Trim() != "" && alote != null)
                        {
                            count = Convert.ToInt32(priority) - Convert.ToInt32(confirmalote);
                            lbltotalfeepaid.Text = "Selected : " + Convert.ToInt32(alote) + "";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : " + Convert.ToInt32(confirmalote) + "";
                            lbltotalfeepaid_value.Visible = true;
                        }
                        else
                        {
                            count = Convert.ToInt32(priority);
                            lbltotalfeepaid.Text = "Selected : 0";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : 0";
                            lbltotalfeepaid_value.Visible = true;
                        }
                    }
                    else
                    {
                        lbltotalfeepaid.Text = "Selected :  0";
                        lbltotalfeepaid.Visible = true;
                        lbltotalfeepaid_value.Text = "Admitted : 0";
                        lbltotalfeepaid_value.Visible = true;
                    }

                }
                orderflage = true;
                Button1_Click(sender, e);
                // allocate();
            }
        }
        catch
        {
        }
    }
    protected void sca_Clcik(object sender, EventArgs e)
    {
        try
        {

            ckbx.Checked = false;
            string textval = " select * from textvaltable where TextCriteria='comm' and TextVal ='SC(Arunthathiyar)' and college_code='" + Session["collegecode"].ToString() + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(textval, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                textcode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                ViewState["text_code_value"] = textcode;
                ViewState["text_type"] = "Community";
                string query = "select allot,priority,allot_Confirm  from admitcolumnset where  college_code='" + college_code + "' and user_code='" + user_code + "' and textcriteria ='community' and column_name ='" + textcode + "' and setcolumn ='" + ddldept.SelectedItem.Value + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string alote = Convert.ToString(ds.Tables[0].Rows[0]["allot"]);
                    string priority = Convert.ToString(ds.Tables[0].Rows[0]["priority"]);
                    string confirmalote = Convert.ToString(ds.Tables[0].Rows[0]["allot_Confirm"]);
                    int count = 0;
                    if (priority.Trim() != "" && priority != null)
                    {
                        if (confirmalote.Trim() != "" && confirmalote != null && alote.Trim() != "" && alote != null)
                        {
                            count = Convert.ToInt32(priority) - Convert.ToInt32(confirmalote);
                            lbltotalfeepaid.Text = "Selected : " + Convert.ToInt32(alote) + "";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : " + Convert.ToInt32(confirmalote) + "";
                            lbltotalfeepaid_value.Visible = true;
                        }
                        else
                        {
                            count = Convert.ToInt32(priority);
                            lbltotalfeepaid.Text = "Selected : 0";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : 0";
                            lbltotalfeepaid_value.Visible = true;
                        }
                    }
                    else
                    {
                        lbltotalfeepaid.Text = "Selected :  0";
                        lbltotalfeepaid.Visible = true;
                        lbltotalfeepaid_value.Text = "Admitted : 0";
                        lbltotalfeepaid_value.Visible = true;
                    }

                }
                orderflage = true;
                Button1_Click(sender, e);
                // allocate();
            }
        }
        catch
        {
        }
    }
    protected void st_Clcik(object sender, EventArgs e)
    {
        try
        {

            ckbx.Checked = false;
            string textval = " select * from textvaltable where TextCriteria='comm' and TextVal ='ST' and college_code='" + Session["collegecode"].ToString() + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(textval, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                textcode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                ViewState["text_code_value"] = textcode;
                ViewState["text_type"] = "Community";
                string query = "select allot,priority,allot_Confirm  from admitcolumnset where  college_code='" + college_code + "' and user_code='" + user_code + "' and textcriteria ='community' and column_name ='" + textcode + "' and setcolumn ='" + ddldept.SelectedItem.Value + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string alote = Convert.ToString(ds.Tables[0].Rows[0]["allot"]);
                    string priority = Convert.ToString(ds.Tables[0].Rows[0]["priority"]);
                    string confirmalote = Convert.ToString(ds.Tables[0].Rows[0]["allot_Confirm"]);
                    int count = 0;
                    if (priority.Trim() != "" && priority != null)
                    {
                        if (confirmalote.Trim() != "" && confirmalote != null && alote.Trim() != "" && alote != null)
                        {
                            count = Convert.ToInt32(priority) - Convert.ToInt32(confirmalote);
                            lbltotalfeepaid.Text = "Selected : " + Convert.ToInt32(alote) + "";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : " + Convert.ToInt32(confirmalote) + "";
                            lbltotalfeepaid_value.Visible = true;
                        }
                        else
                        {
                            count = Convert.ToInt32(priority);
                            lbltotalfeepaid.Text = "Selected : 0";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : 0";
                            lbltotalfeepaid_value.Visible = true;
                        }
                    }
                    else
                    {
                        lbltotalfeepaid.Text = "Selected :  0";
                        lbltotalfeepaid.Visible = true;

                        lbltotalfeepaid_value.Text = "Admitted : 0";
                        lbltotalfeepaid_value.Visible = true;
                    }

                }
                orderflage = true;
                Button1_Click(sender, e);
                // allocate();
            }
        }
        catch
        {
        }
    }
    protected void oc_Clcik(object sender, EventArgs e)
    {
        try
        {
            checkvalue_flage = true;

            ckbx.Checked = false;
            string textval = " select * from textvaltable where TextCriteria='comm' and TextVal ='OC' and college_code='" + Session["collegecode"].ToString() + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(textval, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                textcode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                ViewState["text_code_value"] = textcode;
                ViewState["text_type"] = "Community";
                string query = "select allot,priority,allot_Confirm  from admitcolumnset where  college_code='" + college_code + "' and user_code='" + user_code + "' and textcriteria ='community' and column_name ='" + textcode + "' and setcolumn ='" + ddldept.SelectedItem.Value + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string alote = Convert.ToString(ds.Tables[0].Rows[0]["allot"]);
                    string priority = Convert.ToString(ds.Tables[0].Rows[0]["priority"]);
                    string confirmalote = Convert.ToString(ds.Tables[0].Rows[0]["allot_Confirm"]);
                    int count = 0;
                    if (priority.Trim() != "" && priority != null)
                    {
                        if (confirmalote.Trim() != "" && confirmalote != null && alote.Trim() != "" && alote != null)
                        {
                            count = Convert.ToInt32(priority) - Convert.ToInt32(confirmalote);
                            lbltotalfeepaid.Text = "Selected : " + Convert.ToInt32(alote) + "";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : " + Convert.ToInt32(confirmalote) + "";
                            lbltotalfeepaid_value.Visible = true;
                        }
                        else
                        {
                            count = Convert.ToInt32(priority);
                            lbltotalfeepaid.Text = "Selected : 0";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : 0";
                            lbltotalfeepaid_value.Visible = true;
                        }


                    }
                    else
                    {
                        lbltotalfeepaid.Text = "Selected :  0";
                        lbltotalfeepaid.Visible = true;

                        lbltotalfeepaid_value.Text = "Admitted : 0";
                        lbltotalfeepaid_value.Visible = true;
                    }

                }
            }
            if (Convert.ToInt32(ViewState["spvl"]) != 1)
            {
                orderflage = true;
            }
            Button1_Click(sender, e);
        }
        catch
        {
        }
    }
    protected void All_Clcik(object sender, EventArgs e)
    {
        try
        {

            ckbx.Checked = false;
            Button1_Click(sender, e);
        }
        catch
        {

        }
    }
    protected void ddledu_SelectedIndexchange(object sender, EventArgs e)
    {
        try
        {
            lbltotalcount.Visible = false;
            lbltotalcount1.Visible = false;
            lbltotalcount2.Visible = false;
            lbltotalcount3.Visible = false;
            FpSpread4.Visible = false;
            FpSpread3.Visible = false;
            FpSpread2.Visible = false;
            FpSpread1.Visible = false;
            Label66.Visible = false;
            // lblnew2.Text = "0" + "New";
            Label68.Visible = false;
            btnapprove.Visible = false;
            btnSendSmsOpenPop.Visible = false;
            Button2.Visible = false;
            Button3.Visible = false;
            Button9.Visible = false;
            lbltotalfeepaid.Visible = false;
            lbltotalfeepaid_value.Visible = false;
            degree();
            branch();
            bindsem();
            loadBoardUniv();
        }
        catch
        {

        }

    }
    protected void ddldept_Change(object sender, EventArgs e)
    {
        try
        {
            lbltotalcount.Visible = false;
            lbltotalcount1.Visible = false;
            lbltotalcount2.Visible = false;
            lbltotalcount3.Visible = false;
            FpSpread4.Visible = false;
            FpSpread3.Visible = false;
            FpSpread2.Visible = false;
            FpSpread1.Visible = false;
            Label66.Visible = false;
            // lblnew2.Text = "0" + "New";
            Label68.Visible = false;
            btnapprove.Visible = false;
            btnSendSmsOpenPop.Visible = false;
            Button2.Visible = false;
            Button3.Visible = false;
            Button9.Visible = false;
            lbltotalfeepaid.Visible = false;
            lbltotalfeepaid_value.Visible = false;
            loadBoardUniv();
            bindsem();
        }
        catch
        {
        }

    }
    protected void cbreport_Change(object sender, EventArgs e)
    {
        try
        {

        }
        catch
        {
        }

    }
    protected void ddlreportype_Change(object sender, EventArgs e)
    {
        try
        {
            panelpopup.Visible = true;
            // reportnamesapn.InnerHtml = Convert.ToString(ddlreporttype.SelectedItem.Text);
            reportnamesapn.Visible = true;
            report();
        }
        catch
        {

        }
    }
    public void report()
    {
        try
        {
            FpReport.Sheets[0].RowCount = 0;
            FpReport.Sheets[0].ColumnCount = 0;
            FpReport.CommandBar.Visible = false;
            FpReport.Sheets[0].RowHeader.Visible = false;
            FpReport.Sheets[0].AutoPostBack = false;
            FpReport.Height = 500;
            FpReport.Width = 900;
            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = Color.Brown;
            darkstyle.ForeColor = Color.White;
            // FpReport.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
            FarPoint.Web.Spread.TextCellType txt1 = new FarPoint.Web.Spread.TextCellType();
            FarPoint.Web.Spread.CheckBoxCellType chkcel1 = new FarPoint.Web.Spread.CheckBoxCellType();
            chkcel1.AutoPostBack = false;
            FpReport.Sheets[0].ColumnCount = 1;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Text = "S.No";
            // FpSpread3.Sheets[0].ColumnHeader.Cells[0, FpSpread3.Sheets[0].ColumnCount - 1].BackColor = Color.MistyRose;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Bold = true;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            FpReport.Sheets[0].Columns[FpReport.Sheets[0].ColumnCount - 1].Locked = true;
            FpReport.Sheets[0].Columns[FpReport.Sheets[0].ColumnCount - 1].CellType = txt1;

            FpReport.Sheets[0].ColumnCount++;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Text = "Select Wait List";
            // FpSpread3.Sheets[0].ColumnHeader.Cells[0, FpSpread3.Sheets[0].ColumnCount - 1].BackColor = Color.MistyRose;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Bold = true;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;


            FpReport.Sheets[0].ColumnCount++;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Text = "Student Name";
            // FpSpread3.Sheets[0].ColumnHeader.Cells[0, FpSpread3.Sheets[0].ColumnCount - 1].BackColor = Color.MistyRose;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Bold = true;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;

            FpReport.Sheets[0].ColumnCount++;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Text = "Application ID";
            // FpSpread3.Sheets[0].ColumnHeader.Cells[0, FpSpread3.Sheets[0].ColumnCount - 1].BackColor = Color.MistyRose;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Bold = true;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;

            FpReport.Sheets[0].ColumnCount++;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Text = "Total Percentage";
            // FpSpread3.Sheets[0].ColumnHeader.Cells[0, FpSpread3.Sheets[0].ColumnCount - 1].BackColor = Color.MistyRose;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Bold = true;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;

            FpReport.Sheets[0].ColumnCount++;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Text = "Application Date";
            // FpSpread3.Sheets[0].ColumnHeader.Cells[0, FpSpread3.Sheets[0].ColumnCount - 1].BackColor = Color.MistyRose;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Bold = true;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;

            FpReport.Sheets[0].ColumnCount++;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Text = "Recommended by";
            // FpSpread3.Sheets[0].ColumnHeader.Cells[0, FpSpread3.Sheets[0].ColumnCount - 1].BackColor = Color.MistyRose;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Bold = true;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;

            FpReport.Sheets[0].ColumnCount++;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Text = "Mobile No";
            // FpSpread3.Sheets[0].ColumnHeader.Cells[0, FpSpread3.Sheets[0].ColumnCount - 1].BackColor = Color.MistyRose;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Bold = true;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;

            FpReport.Sheets[0].ColumnCount++;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Text = "Alter Mobile No";
            // FpSpread3.Sheets[0].ColumnHeader.Cells[0, FpSpread3.Sheets[0].ColumnCount - 1].BackColor = Color.MistyRose;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Bold = true;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;

            FpReport.Sheets[0].ColumnCount++;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Text = "City";
            // FpSpread3.Sheets[0].ColumnHeader.Cells[0, FpSpread3.Sheets[0].ColumnCount - 1].BackColor = Color.MistyRose;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Bold = true;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            FpReport.Sheets[0].ColumnHeader.Cells[0, FpReport.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;

            string firsdate = TextBox2.Text;
            string seconddate = TextBox3.Text;
            string[] spiltfirstdate = firsdate.Split('/');
            string[] spiltseconddate = seconddate.Split('/');
            DateTime dt_first = Convert.ToDateTime(spiltfirstdate[1] + "/" + spiltfirstdate[0] + "/" + spiltfirstdate[2]);
            DateTime dt_second = Convert.ToDateTime(spiltseconddate[1] + "/" + spiltseconddate[0] + "/" + spiltseconddate[2]);
            DataView dvnew = new DataView();
            DataView dvnew1 = new DataView();
            string query_value = " select distinct column_name,TextVal from admitcolumnset a,textvaltable t where a.column_name =t.TextCode and a.college_code =t.college_code  and setcolumn ='" + ddldept.SelectedValue + "' and  a.college_code='" + college_code + "' and a.user_code='" + user_code + "' and (a.textcriteria='relig' or a.textcriteria ='community' or a.textcriteria ='Management' ) order by column_name";
            query_value = query_value + " select * from selectcriteria where isapprove ='2' and degree_code ='" + ddldept.SelectedValue + "' and college_code='" + college_code + "' and select_date between '" + dt_first.ToString("MM/dd/yyyy") + "' and '" + dt_second.ToString("MM/dd/yyyy") + "'";
            //  query_value = query_value + " select * from applyn where degree_code ='" + ddldept.SelectedValue + "' and college_code ='" + Convert.ToString(Session["collegecode"]) + "' and batch_year ='" + System.DateTime.Now.ToString("yyyy") + "'";

            query_value = query_value + " select s.usercode,s.criteria_Code,a.app_no,app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,alter_mobileno,stud_name,sex,Relationship,parent_name,majorallied_percent,CONVERT(varchar(10), dob,103) as dob ,parent_occu,mother_tongue,religion,citizen,community,caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,a.degree_code,batch_year,a.college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet,Institute_name,instaddress,medium,isgrade,Part1Language,Part2Language,percentage,university_code,uni_state,psubjectno,registerno,acual_marks,max_marks,pass_month,pass_year,noofattempt,ph.grade,sd.course_code,sd.branch_code,sd.tancet_mark,Vocational_stream from applyn a,Stud_prev_details sd,perv_marks_history ph,selectcriteria s where  a.app_no =sd.app_no and  sd.course_entno =ph.course_entno and a.batch_year =" + Convert.ToString(ddl_batch.SelectedItem.Value) + " and s.app_no =a.app_no   and a.college_code ='" + college_code + "' and s.college_code =a.college_code   and s.degree_code =a.degree_code  and select_date between '" + dt_first.ToString("MM/dd/yyyy") + "' and '" + dt_second.ToString("MM/dd/yyyy") + "' and s.isapprove =2 and a.degree_code ='" + ddldept.SelectedItem.Value + "' and current_semester =1";

            string admin = "";

            string adm = "select column_name from admitcolumnset where (textcriteria ='community' or textcriteria ='relig' or textcriteria ='Management') and setcolumn ='" + ddldept.SelectedItem.Value + "' and  college_code='" + college_code + "' and user_code='" + user_code + "'";
            ds1 = dt.select_method_wo_parameter(adm, "text");
            if (ds1.Tables[0].Rows.Count > 0)
            {
                for (int w = 0; w < ds1.Tables[0].Rows.Count; w++)
                {
                    if (admin == "")
                    {
                        admin = ds1.Tables[0].Rows[w]["column_name"].ToString();
                    }
                    else
                    {
                        admin = admin + "," + ds1.Tables[0].Rows[w]["column_name"].ToString();
                    }
                }

                query_value = query_value + "and ( a.religion in (" + admin + ") or a.community in (" + admin + "))";

                // com = com + "and ( a.religion in (" + admin + ") or a.community in (" + admin + "))";
            }

            string adminlang = "";
            string adm3 = "select * from admitcolumnset where textcriteria = 'subjel' and setcolumn='" + ddldept.SelectedItem.Value + "' and  college_code='" + college_code + "' and user_code='" + user_code + "'";
            ds1.Clear();
            ds1 = dt.select_method_wo_parameter(adm3, "text");
            if (ds1.Tables[0].Rows.Count > 0)
            {
                for (int w = 0; w < ds1.Tables[0].Rows.Count; w++)
                {
                    if (adminlang == "")
                    {
                        adminlang = "" + Convert.ToString(ds1.Tables[0].Rows[w]["column_name"]);
                    }
                    else
                    {
                        adminlang = adminlang + "'" + "," + "'" + Convert.ToString(ds1.Tables[0].Rows[w]["column_name"]);
                    }
                }
            }
            if (adminlang.Trim() == "")
            {
                if (ddledu.SelectedItem.Text == "UG")
                {
                    query_value = query_value + "  and psubjectno not in(sd.Part1Language,sd.Part2Language)";
                }
            }
            else
            {
                query_value = query_value + " and (sd.Part1Language in('" + adminlang + "') or sd.Part2Language in ('" + adminlang + "'))";
                query_value = query_value + " and ( sd.Part1Language in('" + adminlang + "') or sd.Part2Language in ('" + adminlang + "') )";
            }
            if (adminlang.Trim() != "")
            {
                if (ddldept.SelectedItem.Text == "Tamil Literature")
                {
                    query_value = query_value + " and (Part1Language=psubjectno) order by acual_marks desc";
                }
                else if (ddldept.SelectedItem.Text == "English Literature" || ddldept.SelectedItem.Text == "English")
                {
                    query_value = query_value + " and (Part2Language=psubjectno) order by acual_marks desc";
                }
            }

            if (adminlang == "")
            {
                string admin1 = "";
                // string adm1 = "select * from admitcolumnset where textcriteria = 'subjec' and user_code='" + user_code + "'";
                string adm1 = "select * from admitcolumnset where textcriteria = 'subjec' and setcolumn='" + ddldept.SelectedItem.Value + "' and  college_code='" + college_code + "' and user_code='" + user_code + "'";
                ds1 = dt.select_method_wo_parameter(adm1, "text");
                if (ds1.Tables[0].Rows.Count > 0)
                {
                    for (int w = 0; w < ds1.Tables[0].Rows.Count; w++)
                    {
                        if (admin1 == "")
                        {
                            admin1 = ds1.Tables[0].Rows[w]["column_name"].ToString();
                        }
                        else
                        {
                            admin1 = admin1 + "," + ds1.Tables[0].Rows[w]["column_name"].ToString();
                        }
                    }

                    if (ddledu.SelectedItem.Text == "UG")
                    {
                        query_value = query_value + "and ph.psubjectno in (" + admin1 + ")";
                    }
                    if (ddledu.SelectedItem.Text == "PG")
                    {
                        query_value = query_value + "and st.branch_code in (" + admin1 + ")";
                    }

                }
                if (query_value.Trim() != "")
                {
                    if (ddledu.SelectedItem.Text.ToString().ToUpper() == "UG")
                    {
                        query_value = query_value + " order by percentage desc";
                        // com1 = com1 + " order by percentage desc";
                    }
                    if (ddledu.SelectedItem.Text.ToString().ToUpper() == "PG")
                    {
                        query_value = query_value + " order by majorallied_percent desc";
                        // com1 = com1 + " order by majorallied_percent desc";
                    }
                }
            }
            FarPoint.Web.Spread.TextCellType txt = new FarPoint.Web.Spread.TextCellType();
            ds.Clear();
            ds = dt.select_method_wo_parameter(query_value, "Text");
            if (ddledu.SelectedItem.Text == "UG")
            {
                if (adminlang == "")
                {
                    Dictionary<int, double> dvlaue;
                    dvlaue = (Dictionary<int, double>)ViewState["recommend"];
                    int sno_value = 0;
                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[1].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            string column_name = Convert.ToString(ds.Tables[0].Rows[i]["column_name"]);
                            ds.Tables[1].DefaultView.RowFilter = "criteria_code='" + column_name + "'";
                            dvnew = ds.Tables[1].DefaultView;
                            if (dvnew.Count > 0)
                            {
                                FpReport.Sheets[0].RowCount++;
                                FpReport.Sheets[0].SpanModel.Add(FpReport.Sheets[0].RowCount - 1, 0, 1, 9);
                                FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(ds.Tables[0].Rows[i]["TextVal"] + "(" + Convert.ToString(dvnew.Count) + ")");
                                FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                                FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
                                FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].BackColor = Color.Gray;
                                Dictionary<int, double> addsumarray = new Dictionary<int, double>();
                                ArrayList addlist = new ArrayList();
                                for (int k = 0; k < dvnew.Count; k++)
                                {
                                    ds.Tables[2].DefaultView.RowFilter = "app_no='" + Convert.ToString(dvnew[k]["app_no"]) + "'";
                                    dvnew1 = ds.Tables[2].DefaultView;
                                    if (dvnew1.Count > 0)
                                    {
                                        double value = dvlaue[Convert.ToInt32(dvnew1[0]["app_no"])];
                                        addsumarray.Add(Convert.ToInt32(dvnew1[0]["app_no"]), value);

                                    }
                                }
                                addsumarray = addsumarray.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
                                foreach (var kvp in addsumarray)
                                {
                                    string app_no = kvp.Key.ToString();
                                    string percentage = kvp.Value.ToString();

                                    ds.Tables[2].DefaultView.RowFilter = "app_no='" + Convert.ToString(app_no) + "'";
                                    dvnew1 = ds.Tables[2].DefaultView;
                                    if (dvnew1.Count > 0)
                                    {
                                        FpReport.Sheets[0].RowCount++;
                                        sno_value++;
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno_value);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 1].CellType = chkcel1;
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(dvnew1[0]["Stud_name"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(dvnew1[0]["app_formno"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;

                                        if (ddledu.SelectedItem.Text.ToString().ToUpper() == "UG")
                                        {

                                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(percentage);
                                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
                                        }
                                        if (ddledu.SelectedItem.Text.ToString().ToUpper() == "PG")
                                        {
                                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(dvnew1[0]["majorallied_percent"]);
                                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
                                        }

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(dvnew1[0]["date_applied"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Center;

                                        string usernem = dt.GetFunction("select USER_ID   from UserMaster where User_code='" + Convert.ToString(dvnew1[0]["usercode"]) + "' and college_code ='" + Session["collegecode"] + "'");

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(usernem);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Center;


                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 7].Text = Convert.ToString(dvnew1[0]["Student_Mobile"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 7].HorizontalAlign = HorizontalAlign.Center;
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 7].CellType = txt;

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 8].Text = Convert.ToString(dvnew1[0]["alter_mobileno"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 8].HorizontalAlign = HorizontalAlign.Center;
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 8].CellType = txt;

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 9].Text = Convert.ToString(dvnew1[0]["Cityp"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 9].HorizontalAlign = HorizontalAlign.Center;
                                    }
                                }

                            }

                        }
                        FpReport.Visible = true;
                        FpReport.Sheets[0].Visible = true;
                        FpReport.Sheets[0].PageSize = FpReport.Sheets[0].RowCount;
                        lblreporterror.Visible = false;
                        btn_printreport.Visible = true;
                    }
                    else
                    {
                        FpReport.Visible = false;
                        FpReport.Sheets[0].Visible = false;
                        lblreporterror.Visible = true;
                        lblreporterror.Text = "No Records Found";
                        btn_printreport.Visible = false;
                        reportnamesapn.Visible = false;
                    }

                }
                else
                {
                    Dictionary<int, double> dvlaue;
                    dvlaue = (Dictionary<int, double>)ViewState["recommend"];
                    int sno_value = 0;
                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[1].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            string column_name = Convert.ToString(ds.Tables[0].Rows[i]["column_name"]);
                            ds.Tables[1].DefaultView.RowFilter = "criteria_code='" + column_name + "'";
                            dvnew = ds.Tables[1].DefaultView;
                            if (dvnew.Count > 0)
                            {
                                FpReport.Sheets[0].RowCount++;
                                FpReport.Sheets[0].SpanModel.Add(FpReport.Sheets[0].RowCount - 1, 0, 1, 10);
                                FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(ds.Tables[0].Rows[i]["TextVal"] + "(" + Convert.ToString(dvnew.Count) + ")");
                                FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                                FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
                                FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].BackColor = Color.Gray;
                                Dictionary<int, double> addsumarray = new Dictionary<int, double>();
                                ArrayList addlist = new ArrayList();
                                for (int k = 0; k < dvnew.Count; k++)
                                {
                                    ds.Tables[2].DefaultView.RowFilter = "app_no='" + Convert.ToString(dvnew[k]["app_no"]) + "'";
                                    dvnew1 = ds.Tables[2].DefaultView;
                                    if (dvnew1.Count > 0)
                                    {
                                        double value = dvlaue[Convert.ToInt32(dvnew1[0]["app_no"])];
                                        addsumarray.Add(Convert.ToInt32(dvnew1[0]["app_no"]), value);

                                    }
                                }
                                addsumarray = addsumarray.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
                                foreach (var kvp in addsumarray)
                                {
                                    string app_no = kvp.Key.ToString();
                                    string percentage = kvp.Value.ToString();

                                    ds.Tables[2].DefaultView.RowFilter = "app_no='" + Convert.ToString(app_no) + "'";
                                    dvnew1 = ds.Tables[2].DefaultView;
                                    if (dvnew1.Count > 0)
                                    {
                                        FpReport.Sheets[0].RowCount++;
                                        sno_value++;
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno_value);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 1].CellType = chkcel1;
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(dvnew1[0]["Stud_name"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(dvnew1[0]["app_formno"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;

                                        if (ddledu.SelectedItem.Text.ToString().ToUpper() == "UG")
                                        {

                                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(percentage);
                                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
                                        }
                                        if (ddledu.SelectedItem.Text.ToString().ToUpper() == "PG")
                                        {
                                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(dvnew1[0]["majorallied_percent"]);
                                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
                                        }

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(dvnew1[0]["date_applied"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Center;

                                        string usernem = dt.GetFunction("select USER_ID   from UserMaster where User_code='" + Convert.ToString(dvnew1[0]["usercode"]) + "' and college_code ='" + Session["collegecode"] + "'");

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(usernem);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Center;


                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 7].Text = Convert.ToString(dvnew1[0]["Student_Mobile"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 7].HorizontalAlign = HorizontalAlign.Center;

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 8].Text = Convert.ToString(dvnew1[0]["alter_mobileno"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 8].HorizontalAlign = HorizontalAlign.Center;
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 8].CellType = txt;

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 9].Text = Convert.ToString(dvnew1[0]["Cityp"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 9].HorizontalAlign = HorizontalAlign.Center;
                                    }
                                }

                            }

                        }
                        FpReport.Visible = true;
                        FpReport.Sheets[0].Visible = true;
                        FpReport.Sheets[0].PageSize = FpReport.Sheets[0].RowCount;
                        lblreporterror.Visible = false;
                        btn_printreport.Visible = true;
                    }
                    else
                    {
                        FpReport.Visible = false;
                        FpReport.Sheets[0].Visible = false;
                        lblreporterror.Visible = true;
                        lblreporterror.Text = "No Records Found";
                        btn_printreport.Visible = false;
                        reportnamesapn.Visible = false;
                    }
                }
            }
            if (ddledu.SelectedItem.Text == "PG")
            {
                if (ds.Tables[0].Rows.Count > 0 && ds.Tables[1].Rows.Count > 0)
                {
                    int sno_value = 0;
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        string column_name = Convert.ToString(ds.Tables[0].Rows[i]["column_name"]);
                        ds.Tables[1].DefaultView.RowFilter = "criteria_code='" + column_name + "'";
                        dvnew = ds.Tables[1].DefaultView;
                        if (dvnew.Count > 0)
                        {
                            FpReport.Sheets[0].RowCount++;
                            FpReport.Sheets[0].SpanModel.Add(FpReport.Sheets[0].RowCount - 1, 0, 1, 9);
                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(ds.Tables[0].Rows[i]["TextVal"] + "(" + Convert.ToString(dvnew.Count) + ")");
                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
                            FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].BackColor = Color.Gray;
                            Dictionary<int, double> addsumarray = new Dictionary<int, double>();
                            ArrayList addlist = new ArrayList();
                            for (int k = 0; k < dvnew.Count; k++)
                            {
                                ds.Tables[2].DefaultView.RowFilter = "app_no='" + Convert.ToString(dvnew[k]["app_no"]) + "'";
                                dvnew1 = ds.Tables[2].DefaultView;
                                if (dvnew1.Count > 0)
                                {
                                    double value = Convert.ToDouble(dvnew1[0]["majorallied_percent"]);
                                    addsumarray.Add(Convert.ToInt32(dvnew1[0]["app_no"]), value);

                                }
                            }
                            addsumarray = addsumarray.OrderByDescending(x => x.Value).ToDictionary(x => x.Key, x => x.Value);
                            foreach (var kvp in addsumarray)
                            {
                                string app_no = kvp.Key.ToString();
                                string percentage = kvp.Value.ToString();

                                ds.Tables[2].DefaultView.RowFilter = "app_no='" + Convert.ToString(app_no) + "'";
                                dvnew1 = ds.Tables[2].DefaultView;
                                if (dvnew1.Count > 0)
                                {
                                    FpReport.Sheets[0].RowCount++;
                                    sno_value++;
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno_value);
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;

                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 1].CellType = chkcel1;
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;

                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(dvnew1[0]["Stud_name"]);
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;

                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(dvnew1[0]["app_formno"]);
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;

                                    if (ddledu.SelectedItem.Text.ToString().ToUpper() == "UG")
                                    {

                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(percentage);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
                                    }
                                    if (ddledu.SelectedItem.Text.ToString().ToUpper() == "PG")
                                    {
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(dvnew1[0]["majorallied_percent"]);
                                        FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
                                    }

                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(dvnew1[0]["date_applied"]);
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Center;

                                    string usernem = dt.GetFunction("select USER_ID   from UserMaster where User_code='" + Convert.ToString(dvnew1[0]["usercode"]) + "' and college_code ='" + Session["collegecode"] + "'");

                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(usernem);
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Center;


                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 7].Text = Convert.ToString(dvnew1[0]["Student_Mobile"]);
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 7].HorizontalAlign = HorizontalAlign.Center;
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 7].CellType = txt;

                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 8].Text = Convert.ToString(dvnew1[0]["alter_mobileno"]);
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 8].HorizontalAlign = HorizontalAlign.Center;
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 8].CellType = txt;

                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 9].Text = Convert.ToString(dvnew1[0]["Cityp"]);
                                    FpReport.Sheets[0].Cells[FpReport.Sheets[0].RowCount - 1, 9].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }

                        }

                    }
                    FpReport.Visible = true;
                    FpReport.Sheets[0].Visible = true;
                    FpReport.Sheets[0].PageSize = FpReport.Sheets[0].RowCount;
                    lblreporterror.Visible = false;
                    btn_printreport.Visible = true;
                }
                else
                {
                    FpReport.Visible = false;
                    FpReport.Sheets[0].Visible = false;
                    lblreporterror.Visible = true;
                    lblreporterror.Text = "No Records Found";
                    btn_printreport.Visible = false;
                    reportnamesapn.Visible = false;
                }

            }

        }
        catch
        {
        }

    }
    protected void btncancelreport_click(object sender, EventArgs e)
    {
        try
        {

            reportnamesapn.Visible = false;

            panelpopup.Visible = false;
        }
        catch
        {
        }
    }
    protected void btnadmitcard_click(object sender, EventArgs e)
    {
        try
        {
            txt_keyword.Text = "";
            //  Div2.Visible = true;
            //loadprint();
        }
        catch
        {

        }
    }
    public void OLDloadprint()
    {
        try
        {
            Gios.Pdf.PdfDocument mydoc;
            Gios.Pdf.PdfDocument mydocnew = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
            Font Fontbold = new Font("Book Antiqua", 18, FontStyle.Regular);
            Font fbold = new Font("Book Antiqua", 18, FontStyle.Bold);
            Font Fontsmall = new Font("Book Antiqua", 11, FontStyle.Regular);
            Font fontname = new Font("Book Antiqua", 11, FontStyle.Bold);
            Font fontmedium = new Font("Book Antiqua", 13, FontStyle.Regular);
            Font fontmediumb = new Font("Book Antiqua", 13, FontStyle.Bold);
            Boolean saveflag = false;
            //string sign = "principal" + ddlcollege.SelectedValue.ToString() + "";
            DataSet d_value = new DataSet();
            string strquery = "select * from collinfo where college_code='" + college_code + "'";
            ds.Dispose();
            ds.Reset();
            ds = dt.select_method_wo_parameter(strquery, "Text");
            string Collegename = "";
            string aff = "";
            string address = "";
            if (ds.Tables[0].Rows.Count > 0)
            {
                Collegename = ds.Tables[0].Rows[0]["Collname"].ToString();
                aff = "(Affiliated to the " + ds.Tables[0].Rows[0]["university"].ToString() + ")";
                address = ds.Tables[0].Rows[0]["address1"].ToString() + " , " + ds.Tables[0].Rows[0]["district"].ToString() + " - " + ds.Tables[0].Rows[0]["pincode"].ToString();
            }


            FpSpread1.SaveChanges();
            for (int i = 0; i < FpSpread1.Sheets[0].Rows.Count; i++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread1.Sheets[0].Cells[i, 1].Value);
                if (isval == 1)
                {
                    try
                    {
                        mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
                        saveflag = true;
                        string rollnonew = FpSpread1.Sheets[0].Cells[i, 0].Tag.ToString(); //app_formno
                        string name = d2.GetFunction("select stud_name from applyn where app_no ='" + rollnonew + "'");
                        string rollno = d2.GetFunction("select app_formno from applyn where app_no ='" + rollnonew + "'");

                        string deprt = Convert.ToString(ddldept.SelectedItem.Text);
                        string course = Convert.ToString(ddldegree.SelectedItem.Text);
                        Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();
                        Gios.Pdf.PdfPage mypdfpage1 = mydocnew.NewPage();
                        int ik = 1;
                        DateTime dt_date = Convert.ToDateTime(System.DateTime.Now.ToString("MM/dd/yyyy"));
                        string updatequery = "update applyn set admitcard_date ='" + dt_date.ToString("MM/dd/yyyy") + "' where app_no ='" + rollnonew + "'";
                        int d = dt.update_method_wo_parameter(updatequery, "Text");
                        while (ik <= 2)
                        {
                            dt_date = dt_date.AddDays(1);
                            if (dt_date.ToString("dddd") == "Sunday")
                            {
                                dt_date = dt_date.AddDays(1);
                            }
                            ik++;
                        }

                        string sign = "principal" + Convert.ToString(Session["collegecode"]) + "";

                        string mail_id = "";
                        string stud_phoneno = "";
                        string mailidquery = "select StuPer_Id,Student_Mobile  from applyn where app_formno ='" + rollno + "'";
                        d_value.Clear();
                        d_value = dt.select_method_wo_parameter(mailidquery, "Text");
                        if (d_value.Tables[0].Rows.Count > 0)
                        {
                            mail_id = Convert.ToString(d_value.Tables[0].Rows[0]["StuPer_Id"]);
                            stud_phoneno = Convert.ToString(d_value.Tables[0].Rows[0]["Student_Mobile"]);
                        }
                        //string upadte = "update applyn set enroll_date='" + dten + "',feedate='" + dtfee + "',Is_Enroll='1' where app_formno='" + rollno + "'";
                        //int a = d2.update_method_wo_parameter(upadte, "Text");

                        int xvlaue = 40;

                        PdfArea tete = new PdfArea(mydoc, 10, 10, 570, 820);

                        PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
                        mypdfpage.Add(pr1);
                        PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                                      new PdfArea(mydoc, 150, 20, 800, 30), System.Drawing.ContentAlignment.MiddleLeft, Collegename);
                        mypdfpage.Add(ptc);

                        PdfTextArea ptc01 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                                      new PdfArea(mydoc, 190, 80, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, address);
                        mypdfpage.Add(ptc01);
                        PdfTextArea ptc02 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, 180, 50, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, aff);
                        mypdfpage.Add(ptc02);

                        PdfTextArea ptc0265 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 100, 120, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, "Admission Card");
                        mypdfpage.Add(ptc0265);

                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
                        {
                            PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                            mypdfpage.Add(LogoImage, 25, 25, 300);
                        }

                        PdfTextArea ptc07 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, xvlaue, 160, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Application ID");
                        mypdfpage.Add(ptc07);

                        PdfTextArea ptc07ap = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                           new PdfArea(mydoc, 100, 160, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ": " + rollno.ToString() + "");
                        mypdfpage.Add(ptc07ap);

                        //string[] spdeg = lbldegree.Text.ToString().Split('-');

                        PdfTextArea ptc071 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                           new PdfArea(mydoc, xvlaue, 200, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Class");
                        mypdfpage.Add(ptc071);

                        PdfTextArea ptc071a = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                          new PdfArea(mydoc, 100, 200, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ": " + course.ToString() + "");
                        mypdfpage.Add(ptc071a);
                        PdfTextArea ptc08 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                            new PdfArea(mydoc, xvlaue, 180, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name");
                        mypdfpage.Add(ptc08);
                        PdfTextArea ptc08na = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                            new PdfArea(mydoc, 100, 180, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ": " + name.ToString() + "");
                        mypdfpage.Add(ptc08na);
                        PdfTextArea ptc081 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                          new PdfArea(mydoc, xvlaue, 220, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Group");
                        mypdfpage.Add(ptc081);
                        PdfTextArea ptc081a = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                          new PdfArea(mydoc, 100, 220, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ": " + deprt.ToString() + "");
                        mypdfpage.Add(ptc081a);

                        PdfTextArea ptc09 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                            new PdfArea(mydoc, xvlaue, 260, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "You are provisionally admitted to the course specified above.");
                        mypdfpage.Add(ptc09);

                        PdfTextArea ptc1 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, xvlaue, 280, 550, 40), System.Drawing.ContentAlignment.MiddleLeft, "Pay fees on or before  " + dt_date.ToString("dd/MM/yyyy") + " within 4 pm");

                        mypdfpage.Add(ptc1);
                        PdfTextArea ptc2 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, xvlaue, 310, 550, 40), System.Drawing.ContentAlignment.MiddleLeft, "Fees may be paid online or at cash counter at IOB (any branch).");


                        PdfTextArea ptc3 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, xvlaue, 340, 500, 40), System.Drawing.ContentAlignment.MiddleLeft, "Candidates paying fees at cash counter should collect fee challan from Admissions Office and submit a copy of the fee paid challan in the Admission Office on or before " + dt_date.ToString("dd/MM/yyyy") + " within 4 pm.");


                        PdfTextArea ptc4 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, xvlaue, 380, 550, 40), System.Drawing.ContentAlignment.MiddleLeft, "Admission will be automatically gets cancelled if you fail to pay fees by the date specified above.");


                        PdfTextArea ptc5 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, xvlaue, 420, 550, 40), System.Drawing.ContentAlignment.MiddleLeft, "Enrolment details will be sent to your mail id after you pay your fees.");

                        PdfTextArea ptc6 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, xvlaue, 460, 550, 40), System.Drawing.ContentAlignment.MiddleLeft, "Note :");
                        PdfTextArea ptc61 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, xvlaue + 50, 460, 450, 40), System.Drawing.ContentAlignment.MiddleLeft, "No change of date for payment of fees will be granted.");

                        PdfTextArea ptc7 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, xvlaue + 50, 500, 450, 40), System.Drawing.ContentAlignment.MiddleLeft, "Fees once paid will not be refunded.");


                        if (!File.Exists(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg")))
                        {
                            MemoryStream memoryStream = new MemoryStream();
                            ds.Dispose();
                            ds.Reset();
                            ds = dt.select_method_wo_parameter("select principal_sign from collinfo where college_code='" + Session["collegecode"] + "' and principal_sign is not null", "Text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                byte[] file = (byte[])ds.Tables[0].Rows[0]["principal_sign"];
                                memoryStream.Write(file, 0, file.Length);
                                if (file.Length > 0)
                                {
                                    System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                    System.Drawing.Image thumb = imgx.GetThumbnailImage(400, 400, null, IntPtr.Zero);
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);

                                }
                                memoryStream.Dispose();
                                memoryStream.Close();
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg")))
                        {
                            PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg"));
                            mypdfpage.Add(LogoImage, 450, 700, 300);
                        }

                        PdfTextArea ptc82 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 400, 760, 550, 30), System.Drawing.ContentAlignment.MiddleLeft, "PRINCIPAL & SECRETARY");

                        mypdfpage.Add(ptc82);
                        mypdfpage.Add(ptc2);
                        mypdfpage.Add(ptc3);
                        mypdfpage.Add(ptc4);
                        mypdfpage.Add(ptc5);
                        mypdfpage.Add(ptc6);
                        mypdfpage.Add(ptc61);
                        mypdfpage.Add(ptc7);
                        mypdfpage.SaveToDocument();



                        PdfArea tete1 = new PdfArea(mydocnew, 10, 10, 570, 820);

                        PdfRectangle pr11 = new PdfRectangle(mydocnew, tete, Color.Black);
                        mypdfpage1.Add(pr11);
                        PdfTextArea ptc11 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                                      new PdfArea(mydocnew, 150, 20, 800, 30), System.Drawing.ContentAlignment.MiddleLeft, Collegename);
                        mypdfpage1.Add(ptc11);

                        PdfTextArea ptc011 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                                      new PdfArea(mydocnew, 190, 80, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, address);
                        mypdfpage1.Add(ptc011);
                        PdfTextArea ptc021 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                                     new PdfArea(mydocnew, 180, 50, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, aff);
                        mypdfpage1.Add(ptc021);

                        PdfTextArea ptc02651 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                                    new PdfArea(mydocnew, 100, 120, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, "Admission Card");
                        mypdfpage1.Add(ptc02651);

                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
                        {
                            PdfImage LogoImage = mydocnew.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                            mypdfpage1.Add(LogoImage, 25, 25, 300);
                        }

                        PdfTextArea ptc0718 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocnew, xvlaue, 160, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Application ID");
                        mypdfpage1.Add(ptc0718);

                        PdfTextArea ptc07ap1 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                           new PdfArea(mydocnew, 100, 160, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ": " + rollno.ToString() + "");
                        mypdfpage1.Add(ptc07ap1);

                        //string[] spdeg = lbldegree.Text.ToString().Split('-');

                        PdfTextArea ptc0711 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                           new PdfArea(mydocnew, xvlaue, 200, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Class");
                        mypdfpage1.Add(ptc071);

                        PdfTextArea ptc071a1 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                          new PdfArea(mydocnew, 100, 200, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ": " + course.ToString() + "");
                        mypdfpage1.Add(ptc071a1);
                        PdfTextArea ptc0811 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                            new PdfArea(mydocnew, xvlaue, 180, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name");
                        mypdfpage1.Add(ptc0811);
                        PdfTextArea ptc08111 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                            new PdfArea(mydocnew, 100, 180, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ": " + name.ToString() + "");
                        mypdfpage1.Add(ptc08111);
                        PdfTextArea ptc08114 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                          new PdfArea(mydocnew, xvlaue, 220, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Group");
                        mypdfpage1.Add(ptc08114);
                        PdfTextArea ptc081a5 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                          new PdfArea(mydocnew, 100, 220, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ": " + deprt.ToString() + "");
                        mypdfpage1.Add(ptc081a5);

                        PdfTextArea ptc0989 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                            new PdfArea(mydocnew, xvlaue, 260, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "You are provisionally admitted to the course specified above.");
                        mypdfpage1.Add(ptc0989);

                        PdfTextArea ptc185 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydocnew, xvlaue, 280, 550, 40), System.Drawing.ContentAlignment.MiddleLeft, "Pay fees on or before  " + dt_date.ToString("dd/MM/yyyy") + " within 4 pm");

                        mypdfpage1.Add(ptc185);
                        PdfTextArea ptc28 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydocnew, xvlaue, 310, 550, 40), System.Drawing.ContentAlignment.MiddleLeft, "Fees may be paid online or at cash counter at IOB (any branch).");


                        PdfTextArea ptc38 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydocnew, xvlaue, 340, 500, 40), System.Drawing.ContentAlignment.MiddleLeft, "Candidates paying fees at cash counter should collect fee challan from Admissions Office and submit a copy of the fee paid challan in the Admission Office on or before " + dt_date.ToString("dd/MM/yyyy") + " within 4 pm.");


                        PdfTextArea ptc48 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydocnew, xvlaue, 380, 550, 40), System.Drawing.ContentAlignment.MiddleLeft, "Admission  automatically gets cancelled if you fail to pay fees by the date specified above.");


                        PdfTextArea ptc58 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydocnew, xvlaue, 420, 550, 40), System.Drawing.ContentAlignment.MiddleLeft, "Enrolment details will be sent to your mail id after you pay your fees.");

                        PdfTextArea ptc68 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                     new PdfArea(mydocnew, xvlaue, 460, 550, 40), System.Drawing.ContentAlignment.MiddleLeft, "Note :");
                        PdfTextArea ptc618 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                     new PdfArea(mydocnew, xvlaue + 50, 460, 450, 40), System.Drawing.ContentAlignment.MiddleLeft, "No change of date for payment of fees will be granted.");

                        PdfTextArea ptc78 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                     new PdfArea(mydocnew, xvlaue + 50, 500, 450, 40), System.Drawing.ContentAlignment.MiddleLeft, "Fees once paid will not be refunded.");


                        if (!File.Exists(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg")))
                        {
                            MemoryStream memoryStream = new MemoryStream();
                            ds.Dispose();
                            ds.Reset();
                            ds = dt.select_method_wo_parameter("select principal_sign from collinfo where college_code='" + Session["collegecode"] + "' and principal_sign is not null", "Text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                byte[] file = (byte[])ds.Tables[0].Rows[0]["principal_sign"];
                                memoryStream.Write(file, 0, file.Length);
                                if (file.Length > 0)
                                {
                                    System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                    System.Drawing.Image thumb = imgx.GetThumbnailImage(400, 400, null, IntPtr.Zero);
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);

                                }
                                memoryStream.Dispose();
                                memoryStream.Close();
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg")))
                        {
                            PdfImage LogoImage = mydocnew.NewImage(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg"));
                            mypdfpage1.Add(LogoImage, 450, 700, 300);
                        }

                        PdfTextArea ptc828 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                    new PdfArea(mydocnew, 400, 760, 550, 30), System.Drawing.ContentAlignment.MiddleLeft, "PRINCIPAL & SECRETARY");

                        mypdfpage1.Add(ptc828);
                        mypdfpage1.Add(ptc28);
                        mypdfpage1.Add(ptc38);
                        mypdfpage1.Add(ptc48);
                        mypdfpage1.Add(ptc58);
                        mypdfpage1.Add(ptc68);
                        mypdfpage1.Add(ptc618);
                        mypdfpage1.Add(ptc78);
                        mypdfpage1.SaveToDocument();
                        string appPath = HttpContext.Current.Server.MapPath("~");
                        if (appPath != "")
                        {
                            Response.Buffer = true;
                            Response.Clear();
                            string szPath = appPath + "/Report/";
                            string szFile = "" + rollno + ".pdf";
                            mydoc.SaveToFile(szPath + szFile);
                            //  mydocnew.SaveToFile(szPath + szFile);
                            //Response.ClearHeaders();
                            //Response.ClearHeaders();
                            //Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                            //Response.ContentType = "application/pdf";
                            //Response.WriteFile(szPath + szFile);
                        }
                        string appPath1 = HttpContext.Current.Server.MapPath("~");
                        if (appPath1 != "")
                        {
                            Response.Buffer = true;
                            Response.Clear();
                            string szPath = appPath + "/Report/";
                            string szFile = "" + ddldept.SelectedItem.Text + ".pdf";
                            // mydoc.SaveToFile(szPath + szFile);
                            mydocnew.SaveToFile(szPath + szFile);
                            Response.ClearHeaders();
                            Response.ClearHeaders();
                            Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                            Response.ContentType = "application/pdf";
                            Response.WriteFile(szPath + szFile);
                        }
                        sendmail(mail_id, name, rollno, Collegename, new StringBuilder().Append("<br>Thank You<br>"));
                        sendsms(stud_phoneno, rollno);
                        // FpSpread4.Sheets[0].Cells[i, 3].Locked = true;
                        //Div2.Visible = false;   
                    }
                    catch
                    {

                    }
                }
            }
            FpSpread4.SaveChanges();
            if (saveflag == true)
            {
                //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Admit Card Generate Generate Successfully\");", true);
                //errorspan.InnerHtml = "Admit Card Generate Generate Successfully";
                //poperrjs.Visible = true;
            }

        }
        catch
        {
        }
    }
    public void printcatewise()
    {
        try
        {
            if (FpReport.Rows.Count > 0)
            {

                string strquery = "select * from collinfo where college_code='" + Session["collegecode"].ToString() + "'";
                ds.Dispose();
                ds.Reset();
                ds = dt.select_method_wo_parameter(strquery, "Text");
                string Collegename = "";
                if (ds.Tables[0].Rows.Count > 0)
                {
                    Collegename = ds.Tables[0].Rows[0]["Collname"].ToString();

                }
                Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
                Font Fontbold = new Font("Book Antiqua", 18, FontStyle.Regular);
                Font fbold = new Font("Book Antiqua", 14, FontStyle.Bold);
                Font Fontsmall = new Font("Book Antiqua", 8, FontStyle.Regular);
                Font fontname = new Font("Book Antiqua", 11, FontStyle.Regular);
                Font fontmedium = new Font("Book Antiqua", 13, FontStyle.Regular);
                Font fontmediumb = new Font("Book Antiqua", 13, FontStyle.Bold);
                Gios.Pdf.PdfPage mypdfpage;
                mypdfpage = mydoc.NewPage();

                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
                {
                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                    mypdfpage.Add(LogoImage, 20, 20, 370);
                }
                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Right_Logo.jpeg")))//Aruna
                {
                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Right_Logo.jpeg"));
                    mypdfpage.Add(LogoImage, 510, 20, 370);
                }

                PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                                      new PdfArea(mydoc, 100, 20, 800, 30), System.Drawing.ContentAlignment.MiddleLeft, Collegename);
                mypdfpage.Add(ptc);

                PdfTextArea ptc5 = new PdfTextArea(fbold, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, 100, 45, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, "DEPARTMENT OF " + Convert.ToString(ddldegree.SelectedItem.Text) + " " + Convert.ToString(ddldept.SelectedItem.Text).ToUpper() + "");

                mypdfpage.Add(ptc5);

                PdfTextArea ptc1 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, 100, 70, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, "List Recommended for admission as on " + System.DateTime.Now.ToString("dd/MM/yyyy") + "");

                mypdfpage.Add(ptc1);


                PdfTextArea ptc10 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, 60, 100, 300, 30), System.Drawing.ContentAlignment.MiddleLeft, "Stream  : " + ddltype.SelectedItem.Text + "");

                mypdfpage.Add(ptc10);


                PdfTextArea ptc11 = new PdfTextArea(fontname, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, 60, 120, 300, 30), System.Drawing.ContentAlignment.MiddleLeft, "Course  : " + ddledu.SelectedItem.Text + "");

                mypdfpage.Add(ptc11);


                Gios.Pdf.PdfTable table1;
                ArrayList addcolumn = new ArrayList();
                if (FpReport.Rows.Count <= 25)
                {

                    for (int col = 0; col < FpReport.Columns.Count; col++)
                    {
                        if (FpReport.Sheets[0].Columns[col].Visible != false)
                        {
                            addcolumn.Add(FpReport.Sheets[0].ColumnHeader.Cells[0, col].Text);
                        }
                    }
                    table1 = mydoc.NewTable(Fontsmall, FpReport.Rows.Count + 1, addcolumn.Count, 1);
                    table1.VisibleHeaders = false;
                    table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);

                    for (int col1 = 0; col1 < addcolumn.Count; col1++)
                    {
                        string columname = Convert.ToString(Convert.ToString(addcolumn[col1]));
                        if (columname == "Total Percentage" || columname == "Application Date" || columname == "User Name")
                        {
                            table1.Cell(0, col1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1.Cell(0, col1).SetContent(Convert.ToString(addcolumn[col1]));
                        }
                        else
                        {
                            table1.Cell(0, col1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1.Cell(0, col1).SetContent(Convert.ToString(addcolumn[col1]));
                        }


                    }


                    for (int row = 0; row < FpReport.Rows.Count; row++)
                    {
                        for (int col = 0; col < addcolumn.Count; col++)
                        {
                            if (col != 1)
                            {
                                string columname = Convert.ToString(Convert.ToString(addcolumn[col]));
                                if (columname == "Total Percentage" || columname == "Application Date" || columname == "User Name" || Convert.ToString(col) == "0")
                                {
                                    table1.Cell(row + 1, col).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    table1.Cell(row + 1, col).SetContent(Convert.ToString(FpReport.Sheets[0].Cells[row, col].Text));
                                }
                                else
                                {
                                    table1.Cell(row + 1, col).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    table1.Cell(row + 1, col).SetContent(Convert.ToString(FpReport.Sheets[0].Cells[row, col].Text));
                                }
                            }
                            else
                            {
                                int vlaue = Convert.ToInt32(FpReport.Sheets[0].Cells[row, col].Value);
                                if (vlaue == 1)
                                {
                                    table1.Cell(row + 1, col).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    table1.Cell(row + 1, col).SetContent("WL");
                                }
                                else
                                {
                                    table1.Cell(row + 1, col).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    table1.Cell(row + 1, col).SetContent("");
                                }
                            }
                        }
                    }
                    Gios.Pdf.PdfTablePage myprov_pdfpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 150, 550, 550));
                    mypdfpage.Add(myprov_pdfpage1);


                    PdfTextArea ptc2 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                  new PdfArea(mydoc, 40, 750, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Hod Signature");
                    mypdfpage.Add(ptc2);

                    PdfTextArea ptc3 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, 200, 750, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Staff-in-Charge Admission");
                    mypdfpage.Add(ptc3);

                    PdfTextArea ptc4 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, 400, 750, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Principal & Secretary Signature");
                    mypdfpage.Add(ptc4);

                    string appPath = HttpContext.Current.Server.MapPath("~");
                    if (appPath != "")
                    {

                        string szPath = appPath + "/Report/";
                        string szFile = "Format1.pdf";
                        mypdfpage.SaveToDocument();
                        mydoc.SaveToFile(szPath + szFile);
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                        Response.ContentType = "application/pdf";
                        Response.WriteFile(szPath + szFile);

                    }
                }
                else
                {
                    Gios.Pdf.PdfTablePage myprov_pdfpage1;
                    int subcountvlaue = FpReport.Sheets[0].Rows.Count;
                    int columncount = 0;
                    int check = 0;

                    for (int col = 0; col < FpReport.Columns.Count; col++)
                    {
                        if (FpReport.Sheets[0].Columns[col].Visible != false)
                        {
                            addcolumn.Add(FpReport.Sheets[0].ColumnHeader.Cells[0, col].Text);
                        }
                    }

                    table1 = mydoc.NewTable(Fontsmall, 25 + 1, addcolumn.Count, 1);
                    table1.VisibleHeaders = false;
                    table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                    bool firstflage = false;

                    int count = 0;
                    while (subcountvlaue > 25)
                    {
                        if (count == 0)
                        {
                            count = 25;
                        }
                        else
                        {
                            count = count + 25;
                        }
                        subcountvlaue = subcountvlaue - 25;
                        if (check != 0)
                        {
                            if (firstflage == true)
                            {
                                myprov_pdfpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 50, 550, 700));
                                mypdfpage.Add(myprov_pdfpage1);
                                columncount = columncount + 25;
                                mypdfpage.SaveToDocument();
                            }
                            else
                            {
                                myprov_pdfpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 150, 550, 700));
                                mypdfpage.Add(myprov_pdfpage1);
                                columncount = columncount + 25;
                                mypdfpage.SaveToDocument();
                            }
                            mypdfpage = mydoc.NewPage();
                            table1 = mydoc.NewTable(Fontsmall, 25 + 1, addcolumn.Count, 1);
                            table1.VisibleHeaders = false;
                            table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                            firstflage = true;
                        }

                        for (int col1 = 0; col1 < addcolumn.Count; col1++)
                        {
                            string columname = Convert.ToString(Convert.ToString(addcolumn[col1]));
                            if (columname == "Total Percentage" || columname == "Application Date" || columname == "User Name")
                            {
                                table1.Cell(0, col1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1.Cell(0, col1).SetContent(Convert.ToString(addcolumn[col1]));
                            }
                            else
                            {
                                table1.Cell(0, col1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1.Cell(0, col1).SetContent(Convert.ToString(addcolumn[col1]));
                            }

                        }

                        int trow = 0;
                        for (int row = columncount; row < count; row++)
                        {
                            for (int col = 0; col < addcolumn.Count; col++)
                            {
                                if (col != 1)
                                {
                                    string columname = Convert.ToString(Convert.ToString(addcolumn[col]));
                                    if (columname == "Total Percentage" || columname == "Application Date" || columname == "User Name" || Convert.ToString(col) == "0")
                                    {
                                        table1.Cell(trow + 1, col).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        table1.Cell(trow + 1, col).SetContent(Convert.ToString(FpReport.Sheets[0].Cells[row, col].Text));
                                    }
                                    else
                                    {
                                        table1.Cell(trow + 1, col).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        table1.Cell(trow + 1, col).SetContent(Convert.ToString(FpReport.Sheets[0].Cells[row, col].Text));
                                    }
                                }
                                else
                                {
                                    int vlaue = Convert.ToInt32(FpReport.Sheets[0].Cells[row, col].Value);
                                    if (vlaue == 1)
                                    {
                                        table1.Cell(trow + 1, col).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        table1.Cell(trow + 1, col).SetContent("WL");
                                    }
                                    else
                                    {
                                        table1.Cell(trow + 1, col).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        table1.Cell(trow + 1, col).SetContent("");
                                    }
                                }
                            }
                            trow++;
                        }
                        check++;
                    }
                    if (firstflage == true)
                    {
                        myprov_pdfpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 50, 550, 700));
                        mypdfpage.Add(myprov_pdfpage1);
                        mypdfpage.SaveToDocument();
                    }
                    else
                    {
                        myprov_pdfpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 150, 550, 700));
                        mypdfpage.Add(myprov_pdfpage1);
                        mypdfpage.SaveToDocument();
                    }
                    if (subcountvlaue <= 25)
                    {

                        mypdfpage = mydoc.NewPage();
                        table1 = mydoc.NewTable(Fontsmall, subcountvlaue + 1, addcolumn.Count, 1);
                        table1.VisibleHeaders = false;
                        table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                        columncount = columncount + 25;

                        for (int col1 = 0; col1 < addcolumn.Count; col1++)
                        {
                            string columname = Convert.ToString(Convert.ToString(addcolumn[col1]));
                            if (columname == "Total Percentage" || columname == "Application Date" || columname == "User Name")
                            {
                                table1.Cell(0, col1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1.Cell(0, col1).SetContent(Convert.ToString(addcolumn[col1]));
                            }
                            else
                            {
                                table1.Cell(0, col1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1.Cell(0, col1).SetContent(Convert.ToString(addcolumn[col1]));
                            }

                        }

                        int trow = 0;
                        for (int row = columncount; row < FpReport.Sheets[0].Rows.Count; row++)
                        {
                            for (int col = 0; col < addcolumn.Count; col++)
                            {
                                if (col != 1)
                                {
                                    string columname = Convert.ToString(Convert.ToString(addcolumn[col]));
                                    if (columname == "Total Percentage" || columname == "Application Date" || columname == "User Name" || Convert.ToString(col) == "0")
                                    {
                                        table1.Cell(trow + 1, col).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        table1.Cell(trow + 1, col).SetContent(Convert.ToString(FpReport.Sheets[0].Cells[row, col].Text));
                                    }
                                    else
                                    {
                                        table1.Cell(trow + 1, col).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        table1.Cell(trow + 1, col).SetContent(Convert.ToString(FpReport.Sheets[0].Cells[row, col].Text));
                                    }
                                }
                                else
                                {
                                    int vlaue = Convert.ToInt32(FpReport.Sheets[0].Cells[row, col].Value);
                                    if (vlaue == 1)
                                    {
                                        table1.Cell(trow + 1, col).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        table1.Cell(trow + 1, col).SetContent("WL");
                                    }
                                    else
                                    {
                                        table1.Cell(trow + 1, col).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        table1.Cell(trow + 1, col).SetContent("");
                                    }
                                }
                            }
                            trow++;
                        }

                        myprov_pdfpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 50, 550, 700));
                        mypdfpage.Add(myprov_pdfpage1);

                        PdfTextArea ptc2 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, 40, 750, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Hod Signature");
                        mypdfpage.Add(ptc2);

                        PdfTextArea ptc3 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, 200, 750, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Staff-in-Charge Admission");
                        mypdfpage.Add(ptc3);

                        PdfTextArea ptc4 = new PdfTextArea(fontmedium, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, 400, 750, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Principal & Secretary Signature");
                        mypdfpage.Add(ptc4);


                        string appPath = HttpContext.Current.Server.MapPath("~");
                        if (appPath != "")
                        {

                            string szPath = appPath + "/Report/";
                            string szFile = "Format1.pdf";
                            mypdfpage.SaveToDocument();
                            mydoc.SaveToFile(szPath + szFile);
                            Response.ClearHeaders();
                            Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                            Response.ContentType = "application/pdf";
                            Response.WriteFile(szPath + szFile);

                        }
                    }
                }

            }
        }
        catch
        {

        }
    }
    protected void btn_printreport_Click(object sender, EventArgs e)
    {
        try
        {
            printcatewise();
        }
        catch
        {
        }
    }
    protected void btnpopup_clcik(object sender, EventArgs e)
    {
        poperrjs.Visible = false;
    }
    protected void lnkmng_Clcik(object sender, EventArgs e)
    {
        try
        {
            managementflage = true;

            ckbx.Checked = false;


            string textval = " select * from textvaltable where TextCriteria='Mngt' and college_code='" + Session["collegecode"].ToString() + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(textval, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                textcode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                ViewState["text_code_value"] = textcode;
                ViewState["text_type"] = "Community";
                string query = "select allot,priority,allot_Confirm  from admitcolumnset where  college_code='" + college_code + "' and user_code='" + user_code + "' and textcriteria ='Management' and column_name ='" + textcode + "' and setcolumn ='" + ddldept.SelectedItem.Value + "'";
                ds.Clear();
                ds = dt.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string alote = Convert.ToString(ds.Tables[0].Rows[0]["allot"]);
                    string priority = Convert.ToString(ds.Tables[0].Rows[0]["priority"]);
                    string confirmalote = Convert.ToString(ds.Tables[0].Rows[0]["allot_Confirm"]);
                    int count = 0;
                    if (priority.Trim() != "" && priority != null)
                    {
                        if (confirmalote.Trim() != "" && confirmalote != null && alote.Trim() != "" && alote != null)
                        {
                            count = Convert.ToInt32(priority) - Convert.ToInt32(confirmalote);
                            lbltotalfeepaid.Text = "Selected : " + Convert.ToInt32(alote) + "";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : " + Convert.ToInt32(confirmalote) + "";
                            lbltotalfeepaid_value.Visible = true;
                        }
                        else
                        {
                            count = Convert.ToInt32(priority);
                            lbltotalfeepaid.Text = "Selected : 0";
                            lbltotalfeepaid.Visible = true;

                            lbltotalfeepaid_value.Text = "Admitted : 0";
                            lbltotalfeepaid_value.Visible = true;
                        }


                    }
                    else
                    {
                        lbltotalfeepaid.Text = "Selected :  0";
                        lbltotalfeepaid.Visible = true;

                        lbltotalfeepaid_value.Text = "Admitted : 0";
                        lbltotalfeepaid_value.Visible = true;
                    }

                }
            }
            if (Convert.ToInt32(ViewState["spvl"]) != 1)
            {
                orderflage = true;
            }
            Button1_Click(sender, e);
        }
        catch
        {

        }
    }
    protected void Button4_clcik(object sender, EventArgs e)
    {
        try
        {
            loadprint();
        }
        catch
        {
        }
    }
    public void sendmail(string mail, string name, string app, string collegename, StringBuilder mailMessage)
    {
        try
        {
            string send_mail = "";
            string send_pw = "";
            string to_mail = Convert.ToString(mail);
            string subtext = collegename + " Admission-Regarding";
            string strstuname = Convert.ToString(name);

            string strquery = "select massemail,masspwd from collinfo where college_code = " + college_code + " ";
            ds.Clear();
            ds = dt.select_method_wo_parameter(strquery, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                send_mail = Convert.ToString(ds.Tables[0].Rows[0]["massemail"]);
                send_pw = Convert.ToString(ds.Tables[0].Rows[0]["masspwd"]);
            }
            if (send_mail.Trim() != "" && send_pw.Trim() != "" && to_mail.Trim() != "")
            {
                SmtpClient Mail = new SmtpClient("smtp.gmail.com", 587);
                MailMessage mailmsg = new MailMessage();
                MailAddress mfrom = new MailAddress(send_mail);
                mailmsg.From = mfrom;
                mailmsg.To.Add(to_mail);
                mailmsg.Subject = subtext;
                mailmsg.IsBodyHtml = true;
                // mailmsg.Body = "Hi";
                //mailmsg.Body = mailmsg.Body + strstuname;
                //mailmsg.Body = mailmsg.Body + "<br><br>Thank You...";
                mailmsg.Body = mailMessage.ToString();
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = app + ".pdf";
                    string attachementpath = szPath + szFile;
                    if (File.Exists(HttpContext.Current.Server.MapPath("~/Report/" + szFile + "")))
                    {
                        Attachment data = new Attachment(attachementpath);
                        mailmsg.Attachments.Add(data);
                    }
                }
                Mail.EnableSsl = true;
                NetworkCredential credentials = new NetworkCredential(send_mail, send_pw);
                Mail.UseDefaultCredentials = false;
                Mail.Credentials = credentials;
                Mail.Send(mailmsg);

            }

        }
        catch
        {

        }
    }
    public void sendsms(string number, string app)
    {
        try
        {
            int ik = 1;
            DateTime dt_date = Convert.ToDateTime(System.DateTime.Now.ToString("MM/dd/yyyy"));
            while (ik <= 2)
            {
                dt_date = dt_date.AddDays(1);
                if (dt_date.ToString("dddd") == "Sunday")
                {
                    dt_date = dt_date.AddDays(1);
                }
                ik++;
            }

            string Msg = "";
            string getgroup = d2.GetFunction("select c.Course_Name+'('+dt.dept_acronym+')'  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.app_formno ='" + app + "'");
            string tot = sumttoal(app);
            Msg = " Application No : " + app + ". You are provisionally selected for " + getgroup + ". Meet the Principal with your Parent on or before " + Convert.ToString(Txt_callDate.Text) + " with original certificates. Remit the College Fees Rs." + tot + " ";
            if (d2.GetFunction("select COLLNAME from collinfo where college_code='" + college_code + "'").Trim().ToUpper().Contains("JAMAL MOHAMED"))
            {
                Msg += " and the Hostel Fees Rs.19350 on the same day. - PRINCIPAL, JMC";
            }
            else
            {
                Msg = "Application No:" + app + " You are provisionally selected for " + getgroup + ". Meet the Principal with your Parent at " + ddlIntHr.SelectedItem.Text + ":" + ddlIntMin.SelectedItem.Text + " " + ddlIntMed.SelectedItem.Text + " on " + Convert.ToString(Txt_callDate.Text) + " with original certificates and DD for Rs." + Convert.ToString(txtddAmount.Text) + "(Fee) ";
            }


            //string Msg = "Application ID (Application Number) :  " + app + "; You are provisionally admitted. Last date for fee payment " + dt_date.ToString("dd/MM/yyyy") + " Refer email for Admission Card.";
            string Mobile_no = Convert.ToString(number);
            string user_id = "";
            string SenderID = "";
            string Password = "";
            string todaydate = System.DateTime.Now.ToString("dd/MM/yyyy");
            string[] splitdate = todaydate.Split('/');
            DateTime dt1 = Convert.ToDateTime(splitdate[1] + "/" + splitdate[0] + "/" + splitdate[2]);
            string ssr = "select * from Track_Value where college_code='" + Session["collegecode"] + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(ssr, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
            }

            if (user_id.Trim() != "")
            {
                string getval = dt.GetUserapi(user_id);
                string[] spret = getval.Split('-');
                if (spret.GetUpperBound(0) == 1)
                {

                    SenderID = spret[0].ToString();
                    Password = spret[0].ToString();

                }
                string strpath = "http://dnd.airsmsmarketing.info/api/sendmsg.php?user=" + SenderID + "&pass=" + Password + "&sender=" + SenderID + "&phone=" + Mobile_no + "&text=" + Msg + "&priority=ndnd&stype=normal";
                string isst = "0";

                smsreport(strpath, isst, dt1, Mobile_no, Msg);
            }

        }
        catch
        {

        }
    }
    protected void btnadmitprint_click(object sender, EventArgs e)
    {
        try
        {
            DateTime dt_date = Convert.ToDateTime(System.DateTime.Now.ToString("MM/dd/yyyy"));
            int ik = 1;
            while (ik <= 2)
            {
                dt_date = dt_date.AddDays(1);
                if (dt_date.ToString("dddd") == "Sunday")
                {
                    dt_date = dt_date.AddDays(1);
                }
                ik++;
            }
            // string degreedetails = "Office of the Controller of Examinations $Passing Board Report For Examination  - " + ddlmonth.SelectedItem.ToString() + "-" + ddlyear.SelectedItem.ToString() + " " + rename + "@" + sthe1 + sthe2 + "@" + sthe3 + sthe4 + sthe5 + "";
            string degreedetails = "Department of " + ddldept.SelectedItem.Text + " $Selection list for admission 2015 - 16" + '@' + "Stream:   " + ddltype.SelectedItem.Text + "" + '@' + "Education Level:   " + ddledu.SelectedItem.Text + "" + '@' + "Course:   " + ddldegree.SelectedItem.Text + "" + '@' + "Date: " + System.DateTime.Now.ToString("dd/MM/yyyy") + "                                                                                                               Last Date To Pay Fees: " + dt_date.ToString("dd/MM/yyyy") + "";
            string pagename = "Selection_Process.aspx";
            Printcontrol.loadspreaddetails(FpSpread4, pagename, degreedetails);
            Printcontrol.Visible = true;
        }
        catch
        {

        }
    }
    protected void btnleft_click(object sender, EventArgs e)
    {
        try
        {
            bool setflage = false;
            FpSpread4.SaveChanges();
            for (int i = 0; i < FpSpread4.Sheets[0].Rows.Count; i++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread4.Sheets[0].Cells[i, 3].Value);
                if (isval == 1)
                {
                    setflage = true;
                    string app_formno = Convert.ToString(FpSpread4.Sheets[0].Cells[i, 2].Tag);
                    string app_no = Convert.ToString(FpSpread4.Sheets[0].Cells[i, 0].Tag);
                    string name = Convert.ToString(FpSpread4.Sheets[0].Cells[i, 1].Text);
                    string criteriacode = Convert.ToString(FpSpread4.Sheets[0].Cells[i, 1].Tag);
                    string alotevalue = dt.GetFunction("select allot_Confirm  from admitcolumnset where setcolumn ='" + returnStudDeg(Convert.ToString(FpSpread4.Sheets[0].Cells[i, 0].Tag)) + "' and column_name ='" + criteriacode + "' and  college_code='" + college_code + "' and user_code='" + user_code + "'");
                    int allote = 0;
                    if (alotevalue.Trim() != "")
                    {
                        allote = Convert.ToInt32(alotevalue) - 1;
                    }
                    string updataquery = "update selectcriteria set isapprove =5,admit_confirm='0' where app_no ='" + app_no + "' and isapprove =4 and criteria_Code ='" + criteriacode + "' and degree_code ='" + returnStudDeg(app_no) + "'";
                    updataquery = updataquery + " update admitcolumnset set allot_Confirm ='" + allote + "' where setcolumn ='" + returnStudDeg(app_no) + "' and column_name ='" + criteriacode + "' and  college_code='" + college_code + "' and user_code='" + user_code + "'";
                    updataquery = updataquery + "  update applyn set selection_status='1', admission_status ='0' where app_no ='" + app_no + "'";
                    updataquery = updataquery + "  if exists(select * from Registration where App_No='" + app_no + "') update Registration set DelFlag='1' where App_No='" + app_no + "'";
                    int up = dt.update_method_wo_parameter(updataquery, "Text");
                }
            }
            if (setflage == true)
            {
                errorspan.InnerHtml = "Moved Successfully";
                poperrjs.Visible = true;
            }
            else
            {
                errorspan.InnerHtml = "Please Select Any one Student";
                poperrjs.Visible = true;
            }
            Button1_Click(sender, e);
        }
        catch
        {

        }
    }
    protected void btnfeeconfirm_clcik(object sender, EventArgs e)
    {
        try
        {
            FpSpread4.SaveChanges();
            bool testflage = false;
            // int count = 0;
            if (FpSpread4.Rows.Count > 0)
            {
                //for (int row = 0; row < FpSpread4.Rows.Count; row++)
                //{
                //    if (FpSpread4.Sheets[0].Cells[row, FpSpread4.Columns.Count - 1].Locked != true)
                //    {
                //        int isval1 = Convert.ToInt32(FpSpread4.Sheets[0].Cells[row, FpSpread4.Columns.Count - 1].Value);
                //        if (isval1 == 1)
                //        {
                //            count++;
                //        }
                //    }
                //}
                //int checkvalue = 0;
                //string value = Convert.ToString(Label69.Text);
                //if (value.Trim() != "")
                //{
                //    if (Convert.ToInt32(value) >= count)
                //    {
                //        checkvalue = Convert.ToInt32(value) - Convert.ToInt32(count);
                //    }
                //    else
                //    {
                //        checkvalue = -1;
                //    }
                //}
                //if (checkvalue >= 0)
                //{
                for (int row = 0; row < FpSpread4.Rows.Count; row++)
                {
                    if (FpSpread4.Sheets[0].Cells[row, FpSpread4.Columns.Count - 1].Locked != true)
                    {
                        int isval1 = Convert.ToInt32(FpSpread4.Sheets[0].Cells[row, FpSpread4.Columns.Count - 1].Value);
                        if (isval1 == 1)
                        {
                            //if (Label69.Text != "0")
                            //{
                            testflage = true;
                            FpSpread4.Sheets[0].Cells[row, FpSpread4.Columns.Count - 1].Locked = true;
                            FpSpread4.Sheets[0].Rows[row].BackColor = Color.LightBlue;
                            string cricode = Convert.ToString(FpSpread4.Sheets[0].Cells[row, 1].Tag);
                            string app_no = Convert.ToString(FpSpread4.Sheets[0].Cells[row, 0].Tag);
                            string app_fromno = Convert.ToString(FpSpread4.Sheets[0].Cells[row, 2].Tag);
                            string stud_name = Convert.ToString(FpSpread4.Sheets[0].Cells[row, 1].Text);
                            int inc = 0;
                            string relig = "select * from admitcolumnset where (TextCriteria='community' or TextCriteria='relig' or textcriteria='Management')  and priority!='0'  and  setcolumn='" + returnStudDeg(app_no) + "' and  college_code='" + college_code + "' and user_code='" + user_code + "' and column_name='" + cricode + "'";
                            DataSet ds21 = new DataSet();
                            ds21 = dt.select_method_wo_parameter(relig, "text");
                            if (ds21.Tables[0].Rows.Count > 0)
                            {
                                string privalue = Convert.ToString(ds21.Tables[0].Rows[0]["priority"]);
                                string seat = Convert.ToString(ds21.Tables[0].Rows[0]["allot_Confirm"]);
                                //if (privalue.Trim() != "" && privalue != null)
                                //{
                                if (seat.Trim() != "" && seat != null)
                                {
                                    //if (Convert.ToInt32(privalue) > Convert.ToInt32(seat))
                                    //{
                                    inc = Convert.ToInt32(seat) + 1;
                                    //}
                                    //else
                                    //{

                                    //}
                                }
                                else
                                {
                                    inc++;
                                }
                                //}
                                string rel = "update admitcolumnset set allot_Confirm='" + inc + "' where setcolumn='" + returnStudDeg(app_no) + "' and (TextCriteria='community' or TextCriteria='relig' or textcriteria ='Management')  college_code='" + college_code + "' and user_code='" + user_code + "' and column_name='" + cricode + "'";
                                rel = rel + "  update selectcriteria set admit_confirm='1',isapprove = 4  where app_no ='" + app_no + "' and degree_code ='" + returnStudDeg(app_no) + "' and college_code='" + college_code + "' and criteria_Code ='" + cricode + "'";
                                //rel = rel + "  insert into selectcriteria(app_no ,usercode,degree_code ,college_code ,isapprove ,select_date,isview,criteria_Code ,admit_confirm) values  ('"+app_no +"','','','','','','','','')";
                                rel = rel + "  update applyn set selection_status='1', admission_status ='1' where app_no ='" + app_no + "'";
                                rel = rel + "  if exists(select * from Registration where App_No='" + app_no + "')  delete from Registration where App_No='" + app_no + "' insert into Registration (App_No,Adm_Date,Roll_Admit,Roll_No,RollNo_Flag,Reg_No,Stud_Name,Batch_Year,degree_code,college_code,CC,DelFlag,Exam_Flag,Current_Semester)values('" + app_no + "','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','" + app_fromno + "','" + app_fromno + "','1','" + app_fromno + "','" + stud_name + "','" + Convert.ToString(ddl_batch.SelectedItem.Value) + "','" + returnStudDeg(app_no) + "','" + college_code + "','0','0','OK','1')";
                                rel = rel + "  update ChallanFeeDet set Roll_Admit ='" + app_fromno + "' where App_FormNo ='" + app_fromno + "'";
                                rel = rel + "  update fee_allot set roll_admit ='" + app_fromno + "' where app_formno ='" + app_fromno + "'";
                                rel = rel + "  update fee_status set roll_admit ='" + app_fromno + "' where app_formno ='" + app_fromno + "'";
                                int f = dt.update_method_wo_parameter(rel, "text");
                            }
                            //}
                            //else
                            //{
                            //    errorspan.InnerHtml = "No Seat Avilable In This Department Please Admit Some Other Department";
                            //    poperrjs.Visible = true;
                            //    panel2.Visible = false;
                            //    // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('No Seat Avilable In This Department Please Admit Some Other Department')", true);
                            //    //  ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"No Seat Avilable In This Category Please Admit Some Other Category\");", true);
                            //    return;
                            //}
                        }
                    }
                }
                if (testflage == true)
                {
                    errorspan.InnerHtml = "Fee Confirmed";
                    poperrjs.Visible = true;
                }
                else
                {
                    errorspan.InnerHtml = "Please Select Any one Student";
                    poperrjs.Visible = true;
                }
                //}
                //else
                //{
                //    errorspan.InnerHtml = "No Seat Avilable for Selected Student In This Department";
                //    poperrjs.Visible = true;
                //    panel2.Visible = false;
                //    // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('No Seat Avilable In This Department Please Admit Some Other Department')", true);
                //    //  ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"No Seat Avilable In This Category Please Admit Some Other Category\");", true);
                //    return;
                //}
            }

        }
        catch
        {

        }

    }
    protected void btnunpaidconfirm_clcik(object sender, EventArgs e)
    {
        try
        {
            bool setflage = false;
            FpSpread4.SaveChanges();
            for (int i = 0; i < FpSpread4.Sheets[0].Rows.Count; i++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread4.Sheets[0].Cells[i, 3].Value);
                if (isval == 1)
                {
                    setflage = true;
                    string app_formno = Convert.ToString(FpSpread4.Sheets[0].Cells[i, 2].Tag);
                    string app_no = Convert.ToString(FpSpread4.Sheets[0].Cells[i, 0].Tag);
                    string name = Convert.ToString(FpSpread4.Sheets[0].Cells[i, 1].Text);
                    string criteriacode = Convert.ToString(FpSpread4.Sheets[0].Cells[i, 1].Tag);
                    string alotevalue = dt.GetFunction("select allot  from admitcolumnset where setcolumn ='" + returnStudDeg(app_no) + "' and column_name ='" + criteriacode + "' and  college_code='" + college_code + "' and user_code='" + user_code + "'");
                    int allote = 0;
                    if (alotevalue.Trim() != "")
                    {
                        allote = Convert.ToInt32(alotevalue) - 1;
                    }
                    string updataquery = "update selectcriteria set isapprove =5 where app_no ='" + app_no + "' and isapprove =4 and criteria_Code ='" + criteriacode + "' and degree_code ='" + returnStudDeg(app_no) + "'";
                    updataquery = updataquery + " update admitcolumnset set allot ='" + allote + "' where setcolumn ='" + returnStudDeg(app_no) + "' and column_name ='" + criteriacode + "' and  college_code='" + college_code + "' and user_code='" + user_code + "'";
                    // updataquery = updataquery + "  update applyn set selection_status='1', admission_status ='0' where app_no ='" + app_no + "'";
                    // updataquery = updataquery + "  if exists(select * from Registration where App_No='" + app_no + "' and Adm_Date='" + System.DateTime.Now.ToString("yyy/MM/dd") + "' and Stud_Name='" + name + "' and Batch_Year='" + txtbatch.Text + "' and   degree_code='" + ddldept.SelectedValue + "' and  college_code='" + college_code + "' )  delete from Registration where App_No='" + app_no + "' and Adm_Date='" + System.DateTime.Now.ToString("yyy/MM/dd") + "' and Stud_Name='" + name + "' and Batch_Year='" + txtbatch.Text + "' and   degree_code='" + ddldept.SelectedValue + "' and  college_code='" + college_code + "'";
                    int up = dt.update_method_wo_parameter(updataquery, "Text");
                }
            }
            if (setflage == true)
            {
                errorspan.InnerHtml = "Moved Successfully";
                poperrjs.Visible = true;
            }
            else
            {
                errorspan.InnerHtml = "Please Select Any one Student";
                poperrjs.Visible = true;
            }
            Button1_Click(sender, e);
        }
        catch
        {

        }
    }
    protected void Button6_Clcik(object sender, EventArgs e)
    {
        try
        {
            pdf();
        }
        catch
        {

        }

    }
    public void pdf()
    {
        try
        {
            Font Fontbold = new Font("Times New Roman", 15, FontStyle.Bold);
            Font Fontsmall = new Font("Times New Roman", 10, FontStyle.Regular);
            Font Fontbold1 = new Font("Times New Roman", 10, FontStyle.Bold);
            Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
            Gios.Pdf.PdfPage mypage = mydoc.NewPage();
            Gios.Pdf.PdfPage mypage1 = mydoc.NewPage();
            Gios.Pdf.PdfPage mypage2 = mydoc.NewPage();
            bool dummyflage = false;
            if (File.Exists(HttpContext.Current.Server.MapPath("~/image/logo.jpg")))//Aruna
            {
                PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/image/logo.jpg"));
                mypage.Add(LogoImage, 20, 20, 200);
            }
            if (File.Exists(HttpContext.Current.Server.MapPath("~/image/logo1.jpg")))//Aruna
            {
                PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/image/logo1.jpg"));
                mypage.Add(LogoImage, 500, 20, 200);
            }

            string collquery = "";
            collquery = "select collname,category,university,address1,address2,address3,phoneno,faxno,email,website,district,state,pincode  from collinfo where college_Code=" + college_code + "";
            ds.Clear();
            ds = dt.select_method_wo_parameter(collquery, "Text");
            string collegename = "";
            string collegeaddress = "";
            string collegedistrict = "";
            string phonenumber = "";
            string fax = "";
            string email = "";
            string website = "";
            if (ds.Tables[0].Rows.Count > 0)
            {
                collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                collegeaddress = Convert.ToString(ds.Tables[0].Rows[0]["address1"]) + "," + Convert.ToString(ds.Tables[0].Rows[0]["address2"]) + "," + Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                collegedistrict = Convert.ToString(ds.Tables[0].Rows[0]["district"]) + "," + Convert.ToString(ds.Tables[0].Rows[0]["state"]) + "-" + Convert.ToString(ds.Tables[0].Rows[0]["pincode"]);
                phonenumber = Convert.ToString(ds.Tables[0].Rows[0]["phoneno"]);
                fax = Convert.ToString(ds.Tables[0].Rows[0]["faxno"]); ;
                email = Convert.ToString(ds.Tables[0].Rows[0]["email"]);
                website = Convert.ToString(ds.Tables[0].Rows[0]["website"]);
            }

            PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, 10, 10, 600, 30), System.Drawing.ContentAlignment.MiddleCenter, collegename);
            mypage.Add(ptc);
            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, 130, 25, 350, 30), System.Drawing.ContentAlignment.MiddleCenter, collegeaddress);
            mypage.Add(ptc);
            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, 130, 35, 350, 30), System.Drawing.ContentAlignment.MiddleCenter, collegedistrict);
            mypage.Add(ptc);
            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, 130, 45, 350, 30), System.Drawing.ContentAlignment.MiddleCenter, "Phone No: " + phonenumber + ", Fax:" + fax);
            mypage.Add(ptc);
            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, 130, 55, 350, 30), System.Drawing.ContentAlignment.MiddleCenter, email);
            mypage.Add(ptc);
            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, 130, 65, 350, 30), System.Drawing.ContentAlignment.MiddleCenter, website);

            mypage.Add(ptc);

            int y = 60;
            int line1 = 50;
            int line2 = 400;

            string query = "select app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name,sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,parent_occu,mother_tongue,religion,citizen,community,caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet from applyn a where a.app_no='" + Convert.ToString(Session["pdfapp_no"]) + "'";
            query = query + " select course_entno,course_code,university_code,Institute_name,percentage,instaddress,medium,branch_code ,Part1Language,Part2Language,Vocational_stream,isgrade,uni_state,registration_no,type_semester,majorallied_percent,major_percent,type_major,tancet_mark from Stud_prev_details where app_no ='" + Convert.ToString(Session["pdfapp_no"]) + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(query, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line1, y + 50, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Course Details");
                mypage.Add(ptc);


                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line1, y + 70, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Stream");
                mypage.Add(ptc);
                string stream = "";
                if (ddltype.SelectedItem.Text != "--Select--")
                {
                    stream = Convert.ToString(ddltype.SelectedItem.Text);
                }
                else
                {
                    stream = "";
                }
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line2, y + 70, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + stream);
                mypage.Add(ptc);

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line1, y + 90, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Graduation");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line2, y + 90, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ddledu.SelectedItem.Text));
                mypage.Add(ptc);

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line1, y + 110, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Degree");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line2, y + 110, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ddldegree.SelectedItem.Text));
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line1, y + 130, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Course");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line2, y + 130, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ddldept.SelectedItem.Text));
                mypage.Add(ptc);




                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                  new PdfArea(mydoc, line1, y + 150, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Application No");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line2, y + 150, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["app_formno"]));
                mypage.Add(ptc);

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, line1, y + 170, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Applicant Name");
                mypage.Add(ptc);

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                new PdfArea(mydoc, line2, y + 170, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]));
                mypage.Add(ptc);

                //ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //                                                new PdfArea(mydoc, line1, y + 190, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Applicant Last  Name");
                //mypage.Add(ptc);

                //ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //                                              new PdfArea(mydoc, line2, y + 190, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(Session["lastname"]));
                //mypage.Add(ptc);



                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, line1, y + 190, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Date of Birth");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, line2, y + 190, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["dob"]));
                mypage.Add(ptc);

                string gender = Convert.ToString(ds.Tables[0].Rows[0]["sex"]);
                if (gender == "0")
                {
                    gender = "Male";
                }
                else if (gender == "1")
                {
                    gender = "Female";
                }
                else if (gender == "2")
                {
                    gender = "Transgender";
                }

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, y + 210, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Gender");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line2, y + 210, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(gender));
                mypage.Add(ptc);


                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, line1, y + 230, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Parent's Name/Guardian Name");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line2, y + 230, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_name"]));
                mypage.Add(ptc);


                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, line1, y + 250, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Relationship");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line2, y + 250, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Relationship"]));
                mypage.Add(ptc);

                string occupation = Convert.ToString(ds.Tables[0].Rows[0]["parent_occu"]);
                if (occupation.Trim() != "")
                {
                    occupation = subjectcode(occupation);
                }

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, line1, y + 270, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Occupation");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line2, y + 170, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(Session["occupation"]));
                mypage.Add(ptc);

                string mothertounge = Convert.ToString(ds.Tables[0].Rows[0]["mother_tongue"]);
                if (mothertounge.Trim() != "")
                {
                    mothertounge = subjectcode(mothertounge);
                }
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, line1, y + 290, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Mother Tounge ");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line2, y + 290, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(mothertounge));
                mypage.Add(ptc);


                string Religion = Convert.ToString(ds.Tables[0].Rows[0]["religion"]);
                if (Religion.Trim() != "")
                {
                    Religion = subjectcode(Religion);
                }

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                               new PdfArea(mydoc, line1, y + 310, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Religion");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line2, y + 310, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(Religion));
                mypage.Add(ptc);

                string Nationality = Convert.ToString(ds.Tables[0].Rows[0]["citizen"]);

                if (Nationality.Trim() != "")
                {
                    Nationality = subjectcode(Nationality);
                }

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, y + 330, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Nationality");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line2, y + 330, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(Nationality));
                mypage.Add(ptc);

                string coummunity = Convert.ToString(ds.Tables[0].Rows[0]["community"]);

                if (coummunity.Trim() != "")
                {
                    coummunity = subjectcode(coummunity);
                }

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, y + 350, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Coummunity(Foriegn Students Select OC)");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                           new PdfArea(mydoc, line2, y + 350, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(coummunity));
                mypage.Add(ptc);

                string caste = Convert.ToString(ds.Tables[0].Rows[0]["caste"]);

                if (caste.Trim() != "")
                {
                    caste = subjectcode(caste);
                }

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, y + 370, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Caste");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                            new PdfArea(mydoc, line2, y + 370, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(caste));
                mypage.Add(ptc);

                string subreligion = Convert.ToString(ds.Tables[0].Rows[0]["caste"]);

                if (subreligion.Trim() != "")
                {
                    subreligion = subjectcode(subreligion);
                }

                int col = y + 370;
                if (Convert.ToString(subreligion).ToUpper() == "PROTESTANT")
                {
                    string missionarychild = Convert.ToString(ds.Tables[0].Rows[0]["MissionaryChild"]);
                    if (missionarychild == "0" || missionarychild == "False")
                    {
                        missionarychild = "No";
                    }
                    else
                    {
                        missionarychild = "Yes";
                    }
                    col += 20;
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Are You a missionary child ?");
                    mypage.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(missionarychild));
                    mypage.Add(ptc);
                }

                string tamilorgion = Convert.ToString(ds.Tables[0].Rows[0]["TamilOrginFromAndaman"]);
                if (tamilorgion.Trim() == "0" || tamilorgion.Trim() == "False")
                {
                    tamilorgion = "No";
                }
                else
                {
                    tamilorgion = "Yes";
                }

                col += 20;
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, col, 350, 30), System.Drawing.ContentAlignment.MiddleLeft, "Are You of Tamil Origin From Andaman and Nicobar Islands ? ");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, col, 350, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(tamilorgion));
                mypage.Add(ptc);
                string xserviceman = Convert.ToString(ds.Tables[0].Rows[0]["IsExService"]);
                if (xserviceman.Trim() == "0" || xserviceman.Trim() == "False")
                {
                    xserviceman = "No";
                }
                else
                {
                    xserviceman = "Yes";
                }

                col += 20;
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, col, 350, 30), System.Drawing.ContentAlignment.MiddleLeft, "Are You a Child of an Ex-serviceman of Tamil Nadu origin ?");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, col, 350, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(xserviceman));
                mypage.Add(ptc);

                string differentlyabled = Convert.ToString(ds.Tables[0].Rows[0]["isdisable"]);
                if (differentlyabled.Trim() == "0" || differentlyabled.Trim() == "False")
                {
                    differentlyabled = "No";
                }
                else
                {
                    differentlyabled = "Yes";
                }

                col += 20;
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Are you a Differently abled");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(differentlyabled));
                mypage.Add(ptc);

                string firstgeneration = Convert.ToString(ds.Tables[0].Rows[0]["first_graduate"]);
                if (firstgeneration.Trim() == "0" || firstgeneration.Trim() == "False")
                {
                    firstgeneration = "No";
                }
                else
                {
                    firstgeneration = "Yes";
                }

                col += 20;
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Are you a first genaration learner ?");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(firstgeneration));
                mypage.Add(ptc);

                string oncampus = Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]);
                if (oncampus.Trim() == "0" || oncampus.Trim() == "False")
                {
                    oncampus = "No";
                }
                else
                {
                    oncampus = "Yes";
                }

                col += 20;
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Is Residence on Campus Required ?");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(oncampus));
                mypage.Add(ptc);


                string sports = Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]);

                if (sports.Trim() != "")
                {
                    sports = subjectcode(sports);
                }
                col += 20;
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                          new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Distinction in Sports");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                          new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(sports));
                mypage.Add(ptc);

                string cocucuricular = Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]);

                if (cocucuricular.Trim() != "")
                {
                    cocucuricular = subjectcode(cocucuricular);
                }

                col += 20;
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                          new PdfArea(mydoc, line1, col, 350, 30), System.Drawing.ContentAlignment.MiddleLeft, "Extra Curricular Activites/Co-Curricular Activites");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                          new PdfArea(mydoc, line2, col, 350, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(cocucuricular));
                mypage.Add(ptc);

                col += 20;
                ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Communication Address");
                mypage.Add(ptc);


                string addressline1 = Convert.ToString(ds.Tables[0].Rows[0]["parent_addressC"]);

                col += 20;
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Address Line1");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(addressline1));
                mypage.Add(ptc);

                string addressline2 = Convert.ToString(ds.Tables[0].Rows[0]["Streetc"]);
                string addressline3 = "";
                if (addressline2.Contains('/') == true)
                {
                    string[] splitaddress = addressline2.Split('/');
                    if (splitaddress.Length > 1)
                    {
                        addressline2 = Convert.ToString(splitaddress[0]);
                        addressline3 = Convert.ToString(splitaddress[1]);
                    }
                    else
                    {
                        addressline2 = Convert.ToString(splitaddress[0]);
                    }
                }


                col += 20;
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Address Line2");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(addressline2));
                mypage.Add(ptc);

                col += 20;
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Address Line3");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(addressline3));
                mypage.Add(ptc);
                col += 20;



                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "City");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Cityc"]));
                mypage.Add(ptc);

                string pstate = Convert.ToString(ds.Tables[0].Rows[0]["parent_statec"]);

                if (pstate.Trim() != "")
                {
                    pstate = subjectcode(pstate);
                }

                col += 20;

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "State");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(pstate));
                mypage.Add(ptc);

                col += 20;

                string country = Convert.ToString(ds.Tables[0].Rows[0]["Countryc"]);

                if (country.Trim() != "")
                {
                    country = subjectcode(country);
                }

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Country");
                mypage.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, col, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(country));
                mypage.Add(ptc);

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, col + 20, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "PIN code");
                mypage.Add(ptc);

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, col + 20, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodec"]));
                mypage.Add(ptc);



                y = 40;




                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, line1, y + 30, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Mobile Number");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 30, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["Student_Mobile"]));
                mypage1.Add(ptc);

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                  new PdfArea(mydoc, line1, y + 50, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Alternate Number");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 50, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["alter_mobileno"]));
                mypage1.Add(ptc);





                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 70, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Email ID");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 70, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["StuPer_Id"]));
                mypage1.Add(ptc);


                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 90, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Phone Number With STD Code");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 90, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_phnoc"]));
                mypage1.Add(ptc);


                ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 110, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Permanent Address");
                mypage1.Add(ptc);

                string addresslinec1 = Convert.ToString(ds.Tables[0].Rows[0]["parent_addressP"]);

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, line1, y + 130, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Address Line1");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 130, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(addresslinec1));
                mypage1.Add(ptc);

                string addresslinec2 = Convert.ToString(ds.Tables[0].Rows[0]["Streetp"]);
                string addresslinec3 = "";
                if (addressline2.Contains('/') == true)
                {
                    string[] splitaddress = addressline2.Split('/');
                    if (splitaddress.Length > 1)
                    {
                        addresslinec2 = Convert.ToString(splitaddress[0]);
                        addresslinec3 = Convert.ToString(splitaddress[1]);
                    }
                    else
                    {
                        addresslinec2 = Convert.ToString(splitaddress[0]);
                    }
                }

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 150, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Address Line2");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 150, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(addresslinec2));
                mypage1.Add(ptc);


                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 170, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Address Line3");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 170, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(addresslinec3));
                mypage1.Add(ptc);

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 190, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "City");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 190, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["cityp"]));
                mypage1.Add(ptc);

                string cstate = Convert.ToString(ds.Tables[0].Rows[0]["parent_statep"]);

                if (cstate.Trim() != "")
                {
                    cstate = subjectcode(cstate);
                }


                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 210, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "State");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 210, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(cstate));
                mypage1.Add(ptc);

                string ccournty = Convert.ToString(ds.Tables[0].Rows[0]["Countryp"]);

                if (ccournty.Trim() != "")
                {
                    ccournty = subjectcode(ccournty);
                }

                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 230, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Country");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 230, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ccournty));
                mypage1.Add(ptc);


                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 250, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "PIN code");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 250, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodep"]));
                mypage1.Add(ptc);



                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 270, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Phone Number With STD Code");
                mypage1.Add(ptc);
                ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, line2, y + 270, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[0].Rows[0]["parent_phnop"]));
                mypage1.Add(ptc);





                ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 290, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Academic Details");
                mypage1.Add(ptc);

                if (ddledu.SelectedItem.Text.ToUpper() == "UG")
                {

                    string qualifyingexam = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);

                    if (qualifyingexam.Trim() != "")
                    {
                        qualifyingexam = subjectcode(qualifyingexam);
                    }

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, line1, y + 310, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Qualifying Examination Passed");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 310, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(qualifyingexam));
                    mypage1.Add(ptc);


                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, line1, y + 330, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name of School");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 330, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]));
                    mypage1.Add(ptc);


                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, line1, y + 350, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Location of School");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 350, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]));
                    mypage1.Add(ptc);

                    string mediumofstudy = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);

                    if (mediumofstudy.Trim() != "")
                    {
                        mediumofstudy = subjectcode(mediumofstudy);
                    }

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, line1, y + 370, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Medium of Study of Qualifying Examination");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 370, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(mediumofstudy));
                    mypage1.Add(ptc);

                    string qulifyboard = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);

                    if (qulifyboard.Trim() != "")
                    {
                        qulifyboard = subjectcode(qulifyboard);
                    }

                    string qulifystate = Convert.ToString(ds.Tables[1].Rows[0]["uni_state"]);

                    if (qulifystate.Trim() != "")
                    {
                        qulifystate = subjectcode(qulifystate);
                    }

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, line1, y + 390, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Qualifying Board & State");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 390, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(qulifyboard) + " " + Convert.ToString(qulifystate));
                    mypage1.Add(ptc);

                    string vocationalstream = Convert.ToString(ds.Tables[1].Rows[0]["Vocational_stream"]);
                    if (vocationalstream.Trim() == "0" || vocationalstream.Trim() == "False")
                    {
                        vocationalstream = "No";
                    }
                    else
                    {
                        vocationalstream = "Yes";
                    }
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, line1, y + 410, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Are you Vocational stream");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 410, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(vocationalstream));
                    mypage1.Add(ptc);

                    string markgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]);
                    if (markgrade.Trim() == "False")
                    {
                        markgrade = "Mark";
                    }
                    else
                    {
                        markgrade = "Grade";
                    }

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, line1, y + 430, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Marks/Grade");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 430, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(markgrade));
                    mypage1.Add(ptc);

                    string percentage = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                    int totalmark = 0;
                    int maxtotal = 0;
                    DataTable data = new DataTable();
                    DataRow dr = null;
                    Hashtable hash = new Hashtable();
                    string markquery = "select psubjectno,registerno,acual_marks,grade,max_marks,noofattempt,pass_month,pass_year from perv_marks_history  where course_entno ='" + Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]) + "'";
                    ds.Clear();
                    ds = dt.select_method_wo_parameter(markquery, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {

                        data.Columns.Add("Language", typeof(string));
                        data.Columns.Add("Subject", typeof(string));
                        data.Columns.Add("Marks Obtained", typeof(string));
                        data.Columns.Add("Month", typeof(string));
                        data.Columns.Add("Year", typeof(string));
                        data.Columns.Add("Register No / Roll No", typeof(string));
                        data.Columns.Add("No of Attempts", typeof(string));
                        data.Columns.Add("Maximum Marks", typeof(string));

                        hash.Add(0, "Language1");
                        hash.Add(1, "Language2");
                        hash.Add(2, " Subject1");
                        hash.Add(3, " Subject2");
                        hash.Add(4, " Subject3");
                        hash.Add(5, " Subject4");
                        hash.Add(6, " Subject5");
                        hash.Add(7, " Subject6");
                        hash.Add(8, " Subject7");
                        hash.Add(9, " Subject8");
                        hash.Add(10, " Subject9");
                        hash.Add(11, " Subject10");
                        hash.Add(12, " Subject11");
                        for (int mark = 0; mark < ds.Tables[0].Rows.Count; mark++)
                        {
                            string subjectno = Convert.ToString(ds.Tables[0].Rows[mark]["psubjectno"]);
                            string actualmark = "";
                            if (markgrade.Trim() == "Mark")
                            {
                                actualmark = Convert.ToString(ds.Tables[0].Rows[mark]["acual_marks"]);
                            }
                            if (markgrade.Trim() == "Grade")
                            {
                                actualmark = Convert.ToString(ds.Tables[0].Rows[mark]["grade"]);
                            }
                            string month = Convert.ToString(ds.Tables[0].Rows[mark]["pass_month"]);
                            string year = Convert.ToString(ds.Tables[0].Rows[mark]["pass_year"]);
                            string regno = Convert.ToString(ds.Tables[0].Rows[mark]["registerno"]);
                            string noofattenm = Convert.ToString(ds.Tables[0].Rows[mark]["noofattempt"]);
                            string maxmark = Convert.ToString(ds.Tables[0].Rows[mark]["max_marks"]);
                            dr = data.NewRow();
                            string lang = Convert.ToString(hash[mark]);
                            dr[0] = Convert.ToString(lang);
                            string sub = subjectcode(subjectno);
                            dr[1] = Convert.ToString(sub);
                            dr[2] = Convert.ToString(actualmark);
                            dr[3] = Convert.ToString(month);
                            dr[4] = Convert.ToString(year);
                            dr[5] = Convert.ToString(regno);
                            dr[6] = Convert.ToString(noofattenm);
                            dr[7] = Convert.ToString(maxmark);
                            data.Rows.Add(dr);
                            if (markgrade.Trim() != "Grade")
                            {
                                totalmark = totalmark + Convert.ToInt32(actualmark);
                                maxtotal = maxtotal + Convert.ToInt32(maxmark);
                            }
                        }

                        //////////////// zzz
                        int count = 0;
                        count = data.Rows.Count;
                        Gios.Pdf.PdfTable table2 = mydoc.NewTable(Fontsmall, count + 1, 7, 1);
                        table2 = mydoc.NewTable(Fontsmall, count + 1, 7, 1);
                        table2.VisibleHeaders = false;
                        table2.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                        table2.Columns[0].SetWidth(100);
                        table2.Columns[1].SetWidth(100);
                        table2.Columns[2].SetWidth(100);
                        table2.Columns[3].SetWidth(100);
                        table2.Columns[4].SetWidth(100);
                        table2.Columns[5].SetWidth(100);
                        table2.Columns[6].SetWidth(100);
                        table2.CellRange(0, 0, 0, 5).SetFont(Fontsmall);
                        table2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 0).SetContent("Subjects");

                        if (markgrade.Trim() == "Mark")
                        {
                            table2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(0, 1).SetContent("Mark");
                        }
                        if (markgrade.Trim() == "Grade")
                        {
                            table2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(0, 1).SetContent("Grade");
                        }

                        table2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 2).SetContent("Month");
                        table2.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 3).SetContent("Year");
                        table2.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 4).SetContent("Register No");
                        table2.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 5).SetContent("No.of Attempts");
                        table2.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 6).SetContent("Maximun Marks");

                        for (int add = 0; add < data.Rows.Count; add++)
                        {

                            table2.Cell(add + 1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            table2.Cell(add + 1, 0).SetContent(Convert.ToString(data.Rows[add]["Subject"]));


                            table2.Cell(add + 1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 1).SetContent(Convert.ToString(data.Rows[add]["Marks Obtained"]));


                            table2.Cell(add + 1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 2).SetContent(Convert.ToString(data.Rows[add]["Month"]));
                            // Month.First().ToString().ToUpper() + Month.Substring(1)

                            table2.Cell(add + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 3).SetContent(Convert.ToString(data.Rows[add]["Year"]));


                            table2.Cell(add + 1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 4).SetContent(Convert.ToString(data.Rows[add]["Register No / Roll No"]));


                            table2.Cell(add + 1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 5).SetContent(Convert.ToString(data.Rows[add]["No of Attempts"]));

                            table2.Cell(add + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 6).SetContent(Convert.ToString(data.Rows[add]["Maximum Marks"]));


                        }

                        Gios.Pdf.PdfTablePage myprov_pdfpage1 = table2.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 550, 550, 550));
                        mypage1.Add(myprov_pdfpage1);
                        if (Convert.ToString(markgrade).Trim() == "Mark")
                        {

                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, 40, y + 650, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Total Marks Obtained :  " + Convert.ToString(totalmark));
                            mypage1.Add(ptc);
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 250, y + 650, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Maximum Marks :  " + Convert.ToString(maxtotal));
                            mypage1.Add(ptc);
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 480, y + 650, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Percentage :  " + Convert.ToString(percentage));
                            mypage1.Add(ptc);
                        }
                    }
                }

                if (ddledu.SelectedItem.Text.ToUpper() == "PG")
                {
                    string qualifyingexam = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);

                    if (qualifyingexam.Trim() != "")
                    {
                        qualifyingexam = subjectcode(qualifyingexam);
                    }

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, line1, y + 310, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Qualifying Examination Passed");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 310, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(qualifyingexam));
                    mypage1.Add(ptc);

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, line1, y + 330, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name of the College");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 330, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[1].Rows[0]["Institute_name"]));
                    mypage1.Add(ptc);


                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, line1, y + 350, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Location of the College");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 350, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]));
                    mypage1.Add(ptc);

                    string branchcode = Convert.ToString(ds.Tables[1].Rows[0]["course_code"]);

                    if (branchcode.Trim() != "")
                    {
                        branchcode = subjectcode(branchcode);
                    }

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, line1, y + 370, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Mention Major");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 370, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(branchcode));
                    mypage1.Add(ptc);

                    string typeofmajor = Convert.ToString(ds.Tables[1].Rows[0]["type_major"]);
                    if (typeofmajor.Trim() == "1")
                    {
                        typeofmajor = "Single";
                    }
                    else if (typeofmajor.Trim() == "2")
                    {
                        typeofmajor = "Double";
                    }
                    else if (typeofmajor.Trim() == "3")
                    {
                        typeofmajor = "Triple";
                    }

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, line1, y + 390, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Type of Major");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 390, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(typeofmajor));
                    mypage1.Add(ptc);

                    string typeofsemester = Convert.ToString(ds.Tables[1].Rows[0]["type_semester"]);
                    if (typeofsemester.Trim() == "True")
                    {
                        typeofsemester = "Semester";
                    }
                    else
                    {
                        typeofsemester = "Non Semester";
                    }

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, line1, y + 410, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Type of Semester");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 410, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(typeofsemester));
                    mypage1.Add(ptc);

                    string mediumofstudy = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);

                    if (mediumofstudy.Trim() != "")
                    {
                        mediumofstudy = subjectcode(mediumofstudy);
                    }

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, line1, y + 430, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Medium of Study at UG level");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 430, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(mediumofstudy));
                    mypage1.Add(ptc);

                    string markgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]);
                    if (markgrade.Trim() == "False")
                    {
                        markgrade = "Mark";
                    }
                    else
                    {
                        markgrade = "Grade";
                    }

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 450, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Marks/Grade");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 450, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(markgrade));
                    mypage1.Add(ptc);

                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, line1, y + 470, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Registration No as Mentioned on your Mark Sheet");
                    mypage1.Add(ptc);
                    ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, line2, y + 470, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":  " + Convert.ToString(ds.Tables[1].Rows[0]["registration_no"]));
                    mypage1.Add(ptc);

                    string majorpercentage = Convert.ToString(ds.Tables[1].Rows[0]["major_percent"]);
                    string majoralliedpercentage = Convert.ToString(ds.Tables[1].Rows[0]["majorallied_percent"]);
                    string majoralliedpracticalspercentage = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);


                    DataTable data = new DataTable();
                    DataRow dr = null;
                    Hashtable hash = new Hashtable();
                    int count = 0;
                    string pgquery = "select psubjectno,subject_typeno,acual_marks,max_marks,pass_month,pass_year,semyear ,grade  from perv_marks_history where course_entno ='" + Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]) + "'";
                    ds.Clear();
                    ds = dt.select_method_wo_parameter(pgquery, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {

                        data.Columns.Add("Sem", typeof(string));
                        //  data.Columns.Add("Sem/Year", typeof(string));
                        data.Columns.Add("Subject", typeof(string));
                        data.Columns.Add("Subject type", typeof(string));
                        data.Columns.Add("Marks", typeof(string));
                        data.Columns.Add("Month", typeof(string));
                        data.Columns.Add("Year", typeof(string));
                        data.Columns.Add("Maximum Marks", typeof(string));
                        int sno = 0;
                        for (int pg = 0; pg < ds.Tables[0].Rows.Count; pg++)
                        {
                            sno++;
                            string semyear = Convert.ToString(ds.Tables[0].Rows[pg]["semyear"]);
                            string subjectno = Convert.ToString(ds.Tables[0].Rows[pg]["psubjectno"]);
                            string subjecttypeno = Convert.ToString(ds.Tables[0].Rows[pg]["subject_typeno"]);
                            string actualmark = "";
                            if (markgrade.Trim() == "Mark")
                            {
                                actualmark = Convert.ToString(ds.Tables[0].Rows[pg]["acual_marks"]);
                            }
                            else if (markgrade.Trim() == "Grade")
                            {
                                actualmark = Convert.ToString(ds.Tables[0].Rows[pg]["grade"]);
                            }
                            string month = Convert.ToString(ds.Tables[0].Rows[pg]["pass_month"]);
                            string year = Convert.ToString(ds.Tables[0].Rows[pg]["pass_year"]);
                            // string noofattenm = Convert.ToString(ds.Tables[0].Rows[pg]["noofattempt"]);
                            string maxmark = Convert.ToString(ds.Tables[0].Rows[pg]["max_marks"]);
                            dr = data.NewRow();
                            dr[0] = Convert.ToString(semyear);
                            string subject = subjectcode(subjectno);
                            dr[1] = Convert.ToString(subject);
                            string typesub = subjectcode(subjecttypeno);
                            dr[2] = Convert.ToString(typesub);
                            dr[3] = Convert.ToString(actualmark);
                            dr[4] = Convert.ToString(month);
                            dr[5] = Convert.ToString(year);
                            dr[6] = Convert.ToString(maxmark);
                            data.Rows.Add(dr);
                        }
                    }
                    count = data.Rows.Count;
                    if (count < 8)
                    {
                        Gios.Pdf.PdfTable table2 = mydoc.NewTable(Fontsmall, count + 1, 7, 1);
                        table2 = mydoc.NewTable(Fontsmall, count + 1, 7, 1);
                        table2.VisibleHeaders = false;
                        table2.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                        table2.Columns[0].SetWidth(100);
                        table2.Columns[1].SetWidth(100);
                        table2.Columns[2].SetWidth(100);
                        table2.Columns[3].SetWidth(100);
                        table2.Columns[4].SetWidth(100);
                        table2.Columns[5].SetWidth(100);
                        table2.Columns[6].SetWidth(100);
                        table2.CellRange(0, 0, 0, 5).SetFont(Fontsmall);
                        table2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 0).SetContent("Sem/Year");

                        table2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 1).SetContent("Subject");

                        table2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 2).SetContent("Type of Subject");
                        if (markgrade.Trim() == "Mark")
                        {
                            table2.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(0, 3).SetContent("Mark");
                        }
                        if (markgrade.Trim() == "Grade")
                        {
                            table2.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(0, 3).SetContent("Grade");
                        }
                        table2.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 4).SetContent("Month");
                        table2.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 5).SetContent("Year");
                        table2.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 6).SetContent("Maximun Marks");


                        for (int add = 0; add < data.Rows.Count; add++)
                        {
                            table2.Cell(add + 1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            table2.Cell(add + 1, 0).SetContent(Convert.ToString(data.Rows[add]["Sem"]));


                            table2.Cell(add + 1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 1).SetContent(Convert.ToString(Convert.ToString(data.Rows[add]["Subject"])));


                            table2.Cell(add + 1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 2).SetContent(Convert.ToString(data.Rows[add]["Subject type"]));
                            // Month.First().ToString().ToUpper() + Month.Substring(1)

                            table2.Cell(add + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 3).SetContent(Convert.ToString(data.Rows[add]["Marks"]));


                            table2.Cell(add + 1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 4).SetContent(Convert.ToString(data.Rows[add]["Month"]));


                            table2.Cell(add + 1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 5).SetContent(Convert.ToString(data.Rows[add]["Year"]));

                            table2.Cell(add + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 6).SetContent(Convert.ToString(data.Rows[add]["Maximum Marks"]));


                        }

                        Gios.Pdf.PdfTablePage myprov_pdfpage1 = table2.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 600, 550, 550));
                        mypage1.Add(myprov_pdfpage1);
                        if (markgrade.Trim() == "Mark")
                        {
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, line1, 750, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Total percentage of marks in all subjects (Language/major/Allied/Ancillary/Elective inclusive of Theory and Practical  : " + Convert.ToString(majoralliedpracticalspercentage) + "");
                            mypage1.Add(ptc);
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, line1, 770, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Total % of Marks in Major subjects alone (Including theory & Practicals)  : " + Convert.ToString(majorpercentage) + "");
                            mypage1.Add(ptc);

                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, 790, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Total percentage marks in major/Allied/Ancillary subjects alone inclusive of Theory and Practicals  : " + Convert.ToString(majoralliedpercentage) + "");
                            mypage1.Add(ptc);
                        }
                    }
                    else
                    {
                        dummyflage = true;
                        Gios.Pdf.PdfTable table2 = mydoc.NewTable(Fontsmall, count + 1, 7, 1);
                        table2 = mydoc.NewTable(Fontsmall, count + 1, 7, 1);
                        table2.VisibleHeaders = false;
                        table2.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                        table2.Columns[0].SetWidth(100);
                        table2.Columns[1].SetWidth(100);
                        table2.Columns[2].SetWidth(100);
                        table2.Columns[3].SetWidth(100);
                        table2.Columns[4].SetWidth(100);
                        table2.Columns[5].SetWidth(100);
                        table2.Columns[6].SetWidth(100);
                        table2.CellRange(0, 0, 0, 5).SetFont(Fontsmall);
                        table2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 0).SetContent("Sem/Year");

                        table2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 1).SetContent("Subject");

                        table2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 2).SetContent("Type of Subject");
                        if (markgrade.Trim() == "Mark")
                        {
                            table2.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(0, 3).SetContent("Mark");
                        }
                        if (markgrade.Trim() == "Grade")
                        {
                            table2.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(0, 3).SetContent("Grade");
                        }
                        table2.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 4).SetContent("Month");
                        table2.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 5).SetContent("Year");
                        table2.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 6).SetContent("Maximun Marks");


                        for (int add = 0; add < data.Rows.Count; add++)
                        {

                            table2.Cell(add + 1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            table2.Cell(add + 1, 0).SetContent(Convert.ToString(data.Rows[add]["Sem"]));


                            table2.Cell(add + 1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 1).SetContent(Convert.ToString(Convert.ToString(data.Rows[add]["Subject"])));


                            table2.Cell(add + 1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 2).SetContent(Convert.ToString(data.Rows[add]["Subject type"]));
                            // Month.First().ToString().ToUpper() + Month.Substring(1)

                            table2.Cell(add + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 3).SetContent(Convert.ToString(data.Rows[add]["Marks"]));


                            table2.Cell(add + 1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 4).SetContent(Convert.ToString(data.Rows[add]["Month"]));


                            table2.Cell(add + 1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 5).SetContent(Convert.ToString(data.Rows[add]["Year"]));

                            table2.Cell(add + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(add + 1, 6).SetContent(Convert.ToString(data.Rows[add]["Maximum Marks"]));

                        }


                        Gios.Pdf.PdfTablePage myprov_pdfpage1 = table2.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 40, 550, 700));
                        mypage2.Add(myprov_pdfpage1);
                        if (markgrade.Trim() == "Mark")
                        {
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, line1, 750, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Total percentage of marks in all subjects (Language/major/Allied/Ancillary/Elective inclusive of Theory and Practical  : " + Convert.ToString(majoralliedpracticalspercentage) + "");
                            mypage2.Add(ptc);
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, line1, 770, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Total % of Marks in Major subjects alone (Including theory & Practicals)  : " + Convert.ToString(majorpercentage) + "");
                            mypage2.Add(ptc);

                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, line1, 790, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Total percentage marks in major/Allied/Ancillary subjects alone inclusive of Theory and Practicals  : " + Convert.ToString(majoralliedpercentage) + "");
                            mypage2.Add(ptc);
                        }

                    }


                }
                mypage.SaveToDocument();
                mypage1.SaveToDocument();
                if (dummyflage == true)
                {
                    mypage2.SaveToDocument();
                }

                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {

                    string szPath = appPath + "/Report/";
                    string szFile = "Application.pdf";

                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);


                }
            }
        }
        catch
        {

        }
    }
    protected void btn_confirm_clcik(object sender, EventArgs e)
    {
        try
        {
            loadprint();
        }
        catch
        {
        }
    }
    // zzz 4.5.2016
    public void sendsms1()
    {
        try
        {

            string Msg = "Hi";
            string Mobile_no = Convert.ToString(Session["pmobilenumber"]);
            string user_id = "";
            string SenderID = "";
            string Password = "";
            string todaydate = System.DateTime.Now.ToString("dd/MM/yyyy");
            string[] splitdate = todaydate.Split('/');
            DateTime dt = Convert.ToDateTime(splitdate[1] + "/" + splitdate[0] + "/" + splitdate[2]);
            string ssr = "select * from Track_Value where college_code='" + Convert.ToString(Session["college_Code"]) + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(ssr, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
            }

            if (user_id.Trim() != "")
            {
                string getval = d2.GetUserapi(user_id);
                string[] spret = getval.Split('-');
                if (spret.GetUpperBound(0) == 1)
                {

                    SenderID = spret[0].ToString();
                    Password = spret[0].ToString();

                }
                int isval1 = 0;
                for (int u = 0; u < FpSpread1.Sheets[0].Rows.Count; u++)
                {
                    isval1 = Convert.ToInt32(FpSpread1.Sheets[0].Cells[u, 1].Value);

                    if (isval1 == 1)
                    {
                        Mobile_no = d2.GetFunction("select Student_Mobile from applyn where app_no='" + FpSpread1.Sheets[0].Cells[u, 0].Tag + "'");
                        string strpath = "http://dnd.airsmsmarketing.info/api/sendmsg.php?user=" + SenderID + "&pass=" + Password + "&sender=" + SenderID + "&phone=" + Mobile_no + "&text=" + Msg + "&priority=ndnd&stype=normal";
                        string isst = "0";
                        // smsreport1(strpath, isst, dt, Mobile_no, Msg);
                    }



                }
            }

        }
        catch
        {

        }
    }
    public void sendmail1()
    {
        try
        {
            string send_mail = "";
            string send_pw = "";
            string to_mail = Convert.ToString(Session["pemail"]);
            // string bodytext = "Hi Boy";
            string subtext = "";
            string strstuname = Convert.ToString(Session["student_Fullname"]);

            string strquery = "select massemail,masspwd from collinfo where college_code = " + Convert.ToString(Session["college_Code"]) + " ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(strquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                send_mail = Convert.ToString(ds.Tables[0].Rows[0]["massemail"]);
                send_pw = Convert.ToString(ds.Tables[0].Rows[0]["masspwd"]);
            }
            int isval1 = 0;
            for (int u = 0; u < FpSpread1.Sheets[0].Rows.Count; u++)
            {
                isval1 = Convert.ToInt32(FpSpread1.Sheets[0].Cells[u, 1].Value);
                to_mail = d2.GetFunction("select stuper_id from applyn where app_no='" + FpSpread1.Sheets[0].Cells[u, 0].Tag + "'");
                if (isval1 == 1)
                {
                    if (send_mail.Trim() != "" && send_pw.Trim() != "" && to_mail.Trim() != "")
                    {

                        StreamReader reader = new StreamReader(Server.MapPath("~/mail/Templetemail.html"));
                        string readFile = reader.ReadToEnd();
                        string myString = "";
                        myString = readFile;
                        myString = myString.Replace("~secretcode~", "" + Session["Application_No"] + "");
                        SmtpClient Mail = new SmtpClient("smtp.gmail.com", 587);
                        MailMessage mailmsg = new MailMessage();
                        MailAddress mfrom = new MailAddress(send_mail);
                        mailmsg.From = mfrom;
                        mailmsg.To.Add(to_mail);
                        mailmsg.Subject = subtext;
                        mailmsg.IsBodyHtml = true;
                        // mailmsg.Body = "Hi";
                        mailmsg.Body = mailmsg.Body + strstuname;
                        mailmsg.Body = mailmsg.Body + myString;
                        mailmsg.Body = mailmsg.Body + "<br><br>Thank You...";

                        Mail.EnableSsl = true;
                        NetworkCredential credentials = new NetworkCredential(send_mail, send_pw);
                        Mail.UseDefaultCredentials = false;
                        Mail.Credentials = credentials;
                        Mail.Send(mailmsg);
                    }
                }

            }

        }
        catch
        {

        }
    }
    public void smsreport(string uril, string isstaff, DateTime dt, string phone, string msg)
    {
        try
        {
            string phoneno = phone;
            string message = msg;
            string date = dt.ToString("MM/dd/yyyy") + ' ' + DateTime.Now.ToString("hh:mm:ss");
            WebRequest request = WebRequest.Create(uril);
            WebResponse response = request.GetResponse();
            Stream data = response.GetResponseStream();
            StreamReader sr = new StreamReader(data);
            string strvel = sr.ReadToEnd();
            string groupmsgid = "";
            groupmsgid = strvel;
            int sms = 0;
            string smsreportinsert = "";

            smsreportinsert = "insert into smsdeliverytrackmaster (mobilenos,groupmessageid,message,college_code,isstaff,date)values( '" + phoneno + "','" + groupmsgid + "','" + message + "','" + college_code + "','" + isstaff + "','" + date + "')";
            sms = d2.update_method_wo_parameter(smsreportinsert, "Text");

        }
        catch (Exception ex)
        {

        }

    }
    ///...........
    ///
    //Code added by Idhris 05-05-2016
    /// <summary>
    /// Event to print and generate challan
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    public void btn_challanPrintClick(object sender, EventArgs e)
    {
        try
        {
            List<string> appNoList = new List<string>();
            if (checkedOK(out appNoList))
            {
                byte format = getChallanFormat();
                //Format 0 -Not Applicable, Format 3 UIT
                if (format == 0 || format == 3)
                {
                    errorspan.InnerHtml = "Please Add Challan Format Setting";
                    poperrjs.Visible = true;
                }
                else
                {
                    printChallan(appNoList, format);
                }
            }
            else
            {
                errorspan.InnerHtml = "Please Select A Student";
                poperrjs.Visible = true;
            }
        }
        catch
        {
            errorspan.InnerHtml = "Error While Processing..";
            poperrjs.Visible = true;
        }
    }
    /// <summary>
    /// Returns the format number for the challan
    /// </summary>
    /// <returns></returns>
    public byte getChallanFormat()
    {
        if (ddl_collegename.Items.Count > 0)
        {
            college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
        }
        byte format = 0;
        string formQ = "select LinkValue from New_InsSettings where LinkName='ChallanPrintFormat' and user_code ='" + user_code + "' and college_code ='" + college_code + "'";
        byte.TryParse(d2.GetFunction(formQ), out format);
        return format;
    }
    private ListItem getFeecategory()
    {
        if (ddl_collegename.Items.Count > 0)
        {
            college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
        }
        ListItem feeCategory = new ListItem();
        string linkvalue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + user_code + "' and college_code ='" + college_code + "'");
        DataSet dsFeecat = new DataSet();
        if (linkvalue == "0")
        {
            dsFeecat = d2.select_method_wo_parameter("selECT TextCode,textval from textvaltable where TextCriteria ='FEECA' and textval = '1 Semester' and college_code=" + college_code + "", "Text");
        }
        else
        {
            dsFeecat = d2.select_method_wo_parameter("selECT TextCode,textval from textvaltable where TextCriteria ='FEECA' and textval = '1 Year' and college_code=" + college_code + "", "Text");
        }
        if (dsFeecat.Tables.Count > 0 && dsFeecat.Tables[0].Rows.Count > 0)
        {
            feeCategory.Text = Convert.ToString(dsFeecat.Tables[0].Rows[0]["textval"]);
            feeCategory.Value = Convert.ToString(dsFeecat.Tables[0].Rows[0]["TextCode"]);
        }
        else
        {
            feeCategory.Text = " ";
            feeCategory.Value = "-1";
        }
        return feeCategory;
    }
    private ListItem getFeecategoryNEW(string Sem)
    {
        if (ddl_collegename.Items.Count > 0)
        {
            college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
        }
        ListItem feeCategory = new ListItem();
        string linkvalue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + user_code + "' and college_code ='" + college_code + "'");
        DataSet dsFeecat = new DataSet();
        if (linkvalue == "0")
        {
            dsFeecat = d2.select_method_wo_parameter("selECT TextCode,textval from textvaltable where TextCriteria ='FEECA' and textval = '" + Sem + " Semester' and college_code=" + college_code + "", "Text");
        }
        else if (linkvalue == "1")
        {
            string year = newfunction(Sem);
            dsFeecat = d2.select_method_wo_parameter("selECT TextCode,textval from textvaltable where TextCriteria ='FEECA' and textval = '" + year + " Year' and college_code=" + college_code + "", "Text");
        }
        else if (linkvalue == "2")
        {
            string term = newfunction(Sem);
            dsFeecat = d2.select_method_wo_parameter("selECT TextCode,textval from textvaltable where TextCriteria ='FEECA' and textval = 'Term " + term + "' and college_code=" + college_code + "", "Text");
        }
        if (dsFeecat.Tables.Count > 0 && dsFeecat.Tables[0].Rows.Count > 0)
        {
            feeCategory.Text = Convert.ToString(dsFeecat.Tables[0].Rows[0]["textval"]);
            feeCategory.Value = Convert.ToString(dsFeecat.Tables[0].Rows[0]["TextCode"]);
        }
        else
        {
            feeCategory.Text = " ";
            feeCategory.Value = "-1";
        }
        return feeCategory;
    }
    public string newfunction(string val)
    {
        string value = "";
        if (val.Trim() == "1" || val.Trim() == "2")
        {
            value = "1";
        }
        if (val.Trim() == "3" || val.Trim() == "4")
        {
            value = "2";
        }
        if (val.Trim() == "5" || val.Trim() == "6")
        {
            value = "3";
        }
        if (val.Trim() == "7" || val.Trim() == "8")
        {
            value = "4";
        }
        if (val.Trim() == "9" || val.Trim() == "10")
        {
            value = "5";
        }
        return value;
    }
    public string generateChallanNo()
    {
        if (ddl_collegename.Items.Count > 0)
        {
            college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
        }
        string recno = string.Empty;
        try
        {
            int receno = 0;
            string recacr = string.Empty;
            string recnoprev = string.Empty;

            string finYearid = d2.getCurrentFinanceYear(user_code, Convert.ToString(ddl_collegename.SelectedItem.Value));
            string secondreciptqurey = "SELECT ChallanStNo from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + college_code + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + college_code + ")";
            DataSet dsrecYr = new DataSet();
            dsrecYr = d2.select_method_wo_parameter(secondreciptqurey, "Text");
            if (dsrecYr.Tables[0].Rows.Count > 0)
            {
                recnoprev = Convert.ToString(dsrecYr.Tables[0].Rows[0][0]);
                if (recnoprev != "")
                {
                    int recno_cur = Convert.ToInt32(recnoprev);
                    receno = recno_cur;
                }

                string acronymquery = d2.GetFunction("SELECT ChallanAcr from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + college_code + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + college_code + ")");
                recacr = acronymquery;

                int size = Convert.ToInt32(d2.GetFunction("SELECT  ChallanSize from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + college_code + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + college_code + ")"));

                string recenoString = receno.ToString();

                if (size != recenoString.Length && size > recenoString.Length)
                {
                    while (size != recenoString.Length)
                    {
                        recenoString = "0" + recenoString;
                    }
                }
                recno = recacr + recenoString;
            }
            return recno;
        }
        catch { return recno; }
    }
    public string currentFinYear()
    {
        if (ddl_collegename.Items.Count > 0)
        {
            college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
        }
        string finYearid = d2.getCurrentFinanceYear(user_code, Convert.ToString(ddl_collegename.SelectedItem.Value));
        return finYearid;
    }
    public string getCollegeBankPK()
    {
        if (ddl_collegename.Items.Count > 0)
        {
            college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
        }
        string bankQ = " select LinkValue from New_InsSettings where LinkName='AdmissionBankForChallan'  and user_code ='" + user_code + "' and college_code ='" + college_code + "'";
        string res = Convert.ToString(d2.GetFunction(bankQ));
        return res;
    }
    /// <summary>
    /// Check out for any selection and returns selected appno in Spread
    /// </summary>
    /// <returns></returns>
    public bool checkedOK(out List<string> appNoList)
    {
        appNoList = new List<string>();
        bool Ok = false;
        FpSpread2.SaveChanges();
        for (int i = 0; i < FpSpread2.Sheets[0].Rows.Count; i++)
        {
            byte check = Convert.ToByte(FpSpread2.Sheets[0].Cells[i, 1].Value);
            if (check == 1)
            {
                Ok = true;
                appNoList.Add(Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag));
            }
        }
        return Ok;
    }
    /// <summary>
    /// Challan Genereation and Print for Jmc and format2
    /// </summary>
    private void printChallan(List<string> appNoList, byte format)
    {
        try
        {
            if (ddl_collegename.Items.Count > 0)
            {
                college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
            }
            ListItem feecategory = getFeecategoryNEW(ddl_sem.SelectedItem.Value);
            if (feecategory.Value != "-1")
            {
                contentDiv.InnerHtml = string.Empty;
                StringBuilder sbError = new StringBuilder();
                int errNo = 1;
                int cnt = 0;

                foreach (string appformNo in appNoList)
                {
                    #region For Every Student
                    bool createPDFOK = false;
                    Int64 appno;
                    //string appNoQ = "select app_no from applyn where app_formno='" + appformNo + "'";
                    //Int64.TryParse(d2.GetFunction(appNoQ), out appno);
                    Int64.TryParse(appformNo, out appno);
                    if (appno > 0)
                    {
                        if (format == 1)
                        {
                            //For Mcc and Others
                        }
                        else if (format == 2)
                        {
                            //For NEC & JMC
                            createPDFOK = challanJmc(appno, feecategory);
                        }
                        else if (format == 4)
                        {
                            //For New College
                            createPDFOK = challanNewCollege(appno, feecategory);
                        }
                        if (!createPDFOK)
                        {
                            sbError.Append(errNo + " " + appformNo + "\n");
                            errNo++;
                        }
                        else
                        {
                            cnt++;
                        }
                    }
                    else
                    {
                        sbError.Append(errNo + " " + appformNo + "\n");
                        errNo++;
                    }
                    #endregion
                }
                //Final Print
                if (contentDiv.InnerHtml.Trim() != string.Empty && cnt > 0)
                {
                    contentDiv.Visible = true;
                    ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                }
                else
                {
                    //errorspan.InnerHtml = "Challan Not Generated for \n" + sbError.ToString();
                    errorspan.InnerHtml = "Challan Already Generated or No Fees Available";
                    poperrjs.Visible = true;
                }
            }
            else
            {
                errorspan.InnerHtml = "Semester/ Year Fees Not Set";
                poperrjs.Visible = true;
            }
        }
        catch
        {
            errorspan.InnerHtml = "Error While Processing..";
            poperrjs.Visible = true;
        }
    }
    private bool challanJmc(Int64 appNo, ListItem feecategory)
    {
        if (ddl_collegename.Items.Count > 0)
        {
            college_code = Convert.ToString(ddl_collegename.SelectedItem.Value);
        }
        StringBuilder sbHtml = new StringBuilder();
        bool createPDFOK = false;
        try
        {
            #region Basic Data General
            //Headerwise Only
            int challanType = 3;
            string challanNo = generateChallanNo();
            string finYearId = d2.getCurrentFinanceYear(user_code, ddl_collegename.SelectedItem.Value);
            string shift = "";
            string acaYear = System.DateTime.Now.Year.ToString();
            shift = d2.GetFunction("select UPPER(type) from course where college_code=" + college_code + "").Trim();
            if (shift == "0" || shift == "")
            {
                shift = "";
            }
            else
            {
                shift = "(" + shift + ")";
            }
            string counterName = d2.GetFunction("select LinkValue from New_InsSettings where LinkName= 'ChallanFeeCounterValue' and user_code ='" + user_code + "' and college_code ='" + college_code + "' ");
            if (counterName.Trim() == "0")
                counterName = string.Empty;

            string colName = string.Empty;
            colName = d2.GetFunction("select collname from collinfo where college_code=" + college_code + "").Trim();
            if (colName == "0" || colName == "")
                colName = string.Empty;
            if (colName != string.Empty)
            {
                string tempCName = colName.ToUpper().Replace(" ", "");
                if (tempCName.Contains("NEWCOLLEGE"))
                {
                    colName = "THE NEW COLLEGE (AUTONOMOUS) CH-14";
                }
            }
            string useIFSC = d2.GetFunction("select LinkValue from New_InsSettings where LinkName= 'DisplayIFSCForChallan' and user_code ='" + user_code + "' and college_code ='" + college_code + "' ").Trim();

            string parName = string.Empty;
            parName = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanParticular' and user_code ='" + user_code + "' and college_code =" + college_code + "").Trim();
            if (parName == "0" || parName == "")
                parName = "Particulars";
            else
                parName = "Particulars - " + parName;

            string useDegAcr = d2.GetFunction("select LinkValue from New_InsSettings where LinkName= 'DisplayAcrForChallan' and user_code ='" + user_code + "' and college_code ='" + college_code + "' ").Trim();

            int useDenom = Convert.ToInt32(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DisplayDenominationChallan' and user_code ='" + user_code + "' and college_code ='" + college_code + "'").Trim());

            string bankName = "";
            string bankPK = "";
            string bankCity = "";
            string bankAddress = "";

            bankPK = getCollegeBankPK();
            bankName = d2.GetFunction("select bankname from FM_FinBankMaster where BankPK='" + bankPK + "'").Trim();
            bankAddress = d2.GetFunction("select Street+', '+(select MasterValue from CO_MasterValues where MasterCode=District)+'-'+PinCode as address from FM_FinBankMaster where BankPK=" + bankPK + "");
            bankAddress = "(" + bankAddress + ")";
            bankCity = d2.GetFunction("select Upper(BankBranch) as city from FM_FinBankMaster where BankPK=" + bankPK + "") + " Branch";
            #endregion

            int count = 0;


            #region Basic Data Student
            string recptNo = generateChallanNo();
            string recptDt = DateTime.Now.Date.ToString();
            string studname = string.Empty;
            string batchYrSem = string.Empty;
            string appnoNew = appNo.ToString();
            string degreeCode = string.Empty;
            string stream = string.Empty;
            string feeCategory = string.Empty;
            string app_formno = string.Empty;

            feeCategory = feecategory.Value;

            string rolldisplay = "Admission No :";
            string rollvalue = "";

            string colquery = "select collname,university,address1+' '+address2+' '+address3 as address1,' - '+pincode as address2 from collinfo where college_code=" + college_code + " select a.app_formno,a.Current_Semester,a.stud_name,a.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,a.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,a.mother,a.parent_name,ISNULL( type,'') as type from  applyn a,Degree d,Department dt,Course c where  a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.App_No='" + appnoNew + "' and d.college_code=" + college_code + "";
            string collegename = "";
            string add1 = "";
            string add2 = "";
            string univ = "";
            string deg = "";
            string cursem = "";
            string batyr = "";

            ds.Clear();
            ds = d2.select_method_wo_parameter(colquery, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                    add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                    add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                }
                if (ds.Tables[1].Rows.Count > 0)
                {
                    if (useDegAcr == "0")
                    {
                        deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                    }
                    else
                    {
                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                    }
                    degreeCode = Convert.ToString(ds.Tables[1].Rows[0]["Degree_code"]);
                    cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                    batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                    stream = Convert.ToString(ds.Tables[1].Rows[0]["type"]);
                    studname = Convert.ToString(ds.Tables[1].Rows[0]["stud_name"]);
                    app_formno = Convert.ToString(ds.Tables[1].Rows[0]["app_formno"]);
                    rollvalue = app_formno;

                    acaYear = d2.GetFunction("select value from master_Settings where settings='Academic year'");
                    try
                    {
                        acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                    }
                    catch { }
                    string Termdisp = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DisplayTermForChallan' and user_code ='" + user_code + "' and college_code ='" + college_code + "' ").Trim();

                    string linkvalue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + user_code + "' and college_code ='" + college_code + "'");
                    if (linkvalue.Trim() == "1")
                    {
                        if (Termdisp == "1")
                        {
                            try
                            {
                                double cursemester = Convert.ToDouble(cursem);

                                if (cursemester % 2 == 1)
                                {
                                    cursem = reuse.romanLetter(cursemester.ToString()) + " & " + reuse.romanLetter((cursemester + 1).ToString());
                                }
                                else
                                {
                                    cursem = reuse.romanLetter((cursemester - 1).ToString()) + " & " + reuse.romanLetter(cursemester.ToString());
                                }
                            }
                            catch { }
                            cursem = "Term : " + cursem;
                        }
                        else
                        {
                            cursem = "Year : " + reuse.romanLetter(reuse.returnYearforSem(cursem));
                        }
                    }
                    else
                    {
                        if (Termdisp == "1")
                        {
                            cursem = "Term : " + reuse.romanLetter(cursem);
                        }
                        else
                        {
                            cursem = "Semester : " + reuse.romanLetter(cursem);
                        }
                    }
                }
            }
            #endregion

            #region PDF Generation
            // New Code
            string groupHdr;
            string[] hdrInGrp0;
            List<string> hdrInGrp = new List<string>();
            bool checkedHeaderOK = false;

            checkedHeaderOK = false;
            string bnkAcc = "";
            //Add new challan Page in this loop
            bool addpageOK = false;

            int y = 0;

            double ovrallcredit = 0;
            double grandtotal = 0.00;

            string text = "";

            y = -30;

            if (challanType == 3)
            {
                int heght = 380;

                int chk = 0;
                int hdrsno = 0;

                //appnoNew = "";
                string selectHeadersQ = "select distinct HeaderFK,h.HeaderName   from FT_FeeAllot a,FM_HeaderMaster h where h.HeaderPK =a.HeaderFK and App_No =" + appnoNew + " and FeeCategory ='" + feeCategory + "'";
                DataSet dsHead = new DataSet();
                dsHead = d2.select_method_wo_parameter(selectHeadersQ, "Text");
                CheckBoxList cbl_grpheader = new CheckBoxList();

                if (dsHead.Tables.Count > 0 && dsHead.Tables[0].Rows.Count > 0)
                {
                    cbl_grpheader.DataSource = dsHead;
                    cbl_grpheader.DataTextField = "HeaderName";
                    cbl_grpheader.DataValueField = "HeaderFK";
                    cbl_grpheader.DataBind();
                }
                for (int indx = 0; indx < cbl_grpheader.Items.Count; indx++)
                {
                    string HdrId = "";
                    string dispHdr = "";
                    dispHdr = Convert.ToString(cbl_grpheader.Items[indx].Text);
                    HdrId = Convert.ToString(cbl_grpheader.Items[indx].Value);

                    string QFinTot = "	SELECT App_FormNo,Stud_Name,Course_Name+'-'+Dept_Name Degree,TextVal,DispStream,ChlGroupHeader,SUM(TotalAmount) as Totamount	FROM FT_FeeAllot A,applyn P,Degree G,Course U,Department D,FS_ChlGroupHeaderSettings S,TextValTable T	WHERE A.app_no = P.app_no AND P.degree_code = G.Degree_Code AND G.Course_Id = U.Course_Id AND G.college_code = U.college_code	AND G.Dept_Code = D.Dept_Code AND G.college_code = D.college_code AND A.HeaderFK = S.HeaderFK AND A.FeeCategory = T.TextCode";
                    if (stream != "")
                    {
                        QFinTot = QFinTot + "  AND Stream = '" + stream + "'";
                    }
                    //  AND Stream = '" + stream + "' 
                    QFinTot = QFinTot + "   AND A.HeaderFK IN (" + HdrId + ")  AND A.FeeCategory in(" + feeCategory + ") and P.app_no=" + appnoNew + "	GROUP BY App_FormNo,Stud_Name,Course_Name,Dept_Name,TextVal,DispStream,ChlGroupHeader           	    SELECT isnull(SUM(TakenAmt),0) as TakenAmt	FROM FT_ChallanDet C,FS_ChlGroupHeaderSettings S,TextValTable T 	WHERE C.HeaderFK = S.HeaderFK AND C.FeeCategory = T.TextCode	 AND C.HeaderFK IN (" + HdrId + ") AND C.FeeCategory in (" + feeCategory + ") and C.app_no=" + appnoNew + " ";
                    if (stream != "")
                    {
                        QFinTot = QFinTot + " AND Stream = '" + stream + "'";
                    }

                    QFinTot = QFinTot + "  GROUP BY ChlGroupHeader ";
                    //  AND Stream = '" + stream + "'


                    DataSet ds2 = new DataSet();
                    ds2 = d2.select_method_wo_parameter(QFinTot, "Text");
                    if (ds2.Tables.Count > 0)
                    {
                        if (ds2.Tables[0].Rows.Count > 0)
                        {
                            double totalAmt = Convert.ToDouble(ds2.Tables[0].Rows[0]["Totamount"]);
                            if (ds2.Tables[1].Rows.Count > 0)
                            {
                                totalAmt -= Convert.ToDouble(ds2.Tables[1].Rows[0]["TakenAmt"]);
                            }

                            if (useIFSC == "0")
                                bnkAcc = "A/c No " + d2.GetFunction("SELECT AccNo FROM FS_ChlGroupHeaderSettings S,FM_FinBankMaster B WHERE S.BankFK = B.BankPK AND ChlGroupHeader = '" + dispHdr + "' ");
                            else
                                bnkAcc = "A/c No " + d2.GetFunction("SELECT AccNo+'-IFSC '+IFSCCode FROM FS_ChlGroupHeaderSettings S,FM_FinBankMaster B WHERE S.BankFK = B.BankPK AND ChlGroupHeader = '" + dispHdr + "' ");

                            dispHdr += " (" + bnkAcc + ")";
                            grandtotal = grandtotal + totalAmt;

                            if (grandtotal > 0)
                            {

                                addpageOK = true;
                                createPDFOK = true;
                                if (totalAmt > 0)
                                {
                                    hdrsno++;

                                    y = y + 5;

                                    recptNo = generateChallanNo();

                                    if (hdrsno == 1)
                                    {
                                        #region HTML Generation

                                        sbHtml.Append("<div style='padding-left:50px;height: 710px;'><table cellpadding='0' cellspacing='0' style='text-align:center; width: 1056px; ' class='classRegular'>");

                                        sbHtml.Append("<tr class='classBold10'><td><table  Rules='None' class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 2px solid black;'><tr><td style='font-size:16px;'><center><b>" + bankName.ToUpper() + "</b></center></td></tr><tr><td><center>" + bankAddress + "</center></td></tr><tr><td><center>" + counterName + "</center></td></tr><tr><td><center>" + bankCity + "</center></td></tr><tr><td style='font-size:15px;'><center><b>" + colName + "</b></center></td></tr><tr><td><center>COLLEGE FEES CHALLAN " + shift + "</center></td></tr></table></td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td><table  Rules='None' class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 2px solid black;'><tr><td  style='font-size:16px;'><center><b>" + bankName.ToUpper() + "</b></center></td></tr><tr><td><center>" + bankAddress + "</center></td></tr><tr><td><center>" + counterName + "</center></td></tr><tr><td><center>" + bankCity + "</center></td></tr><tr><td style='font-size:15px;'><center><b>" + colName + "</b></center></td></tr><tr><td><center>COLLEGE FEES CHALLAN " + shift + "</center></td></tr></table></td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td><table  Rules='None' class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 2px solid black;'><tr><td  style='font-size:16px;'><center><b>" + bankName.ToUpper() + "</b></center></td></tr><tr><td><center>" + bankAddress + "</center></td></tr><tr><td><center>" + counterName + "</center></td></tr><tr><td><center>" + bankCity + "</center></td></tr><tr><td style='font-size:15px;'><center><b>" + colName + "</b></center></td></tr><tr><td><center>COLLEGE FEES CHALLAN " + shift + "</center></td></tr></table></td></tr>");

                                        sbHtml.Append("<tr class='classBold10' style='text-align:center;'><td ><table  class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 1px solid black;'><tr><td style='width:120px; border: 1px solid black;'><b>ChallanNo.:" + recptNo + "</b></td><td style='width:180px; border: 1px solid black;'>Receipt No:<br/>(Office Use Only)</td><td style='width:80px; border: 1px solid black;text-align:right;'>Date:" + DateTime.Now.Date.ToString("dd/MM/yyyy") + "</td><tr></table></td><td></td><td><table  class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 1px solid black;'><tr><td style='width:120px; border: 1px solid black;'><b>ChallanNo.:" + recptNo + "</b></td><td style='width:180px; border: 1px solid black;'>Receipt No:<br/>(Office Use Only)</td><td style='width:80px; border: 1px solid black;text-align:right;'>Date:" + DateTime.Now.Date.ToString("dd/MM/yyyy") + "</td><tr></table ></td><td></td><td><table class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 1px solid black;'><tr><td style='width:120px; border: 1px solid black;'><b>ChallanNo.:" + recptNo + "</b></td><td style='width:180px; border: 1px solid black;'>Receipt No:<br/>(Office Use Only)</td><td style='width:80px; border: 1px solid black;text-align:right;'>Date:" + DateTime.Now.Date.ToString("dd/MM/yyyy") + "</td><tr></table></td></tr>");

                                        sbHtml.Append("<tr class='classBold10'><td ><table  Rules='Rows' class='classBold10' cellpadding='0' cellspacing='0' style='width:380px;border: 1px solid black;'><tr><td  style='border: 1px solid black;' colspan='2'>ORIGINAL - COLLEGE <span style='padding-left:130px;'>By D/D or Cash</span></td></tr><tr><td colspan='2'  style='border: 1px solid black;'><b>Student\'s Name:" + studname + "</b></td></tr><tr><td  colspan='2'  style='border: 1px solid black;'><b>" + rolldisplay + rollvalue + "</b><span style='padding-left:60px; width:200px; '>Class :  " + deg + "</span></td></tr><tr><td  style='width:80px;border: 1px solid black;'>" + cursem + "</td><td style='border: 1px solid black;'>Academic Year :" + acaYear + "</td></tr  style='border: 1px solid black;'><tr><td  style='border: 1px solid black;width:220px;'>" + parName + "</td><td  style='border: 1px solid black;text-align:right;'>Amount Rs.</td></tr></table></td><td></td><td><table  Rules='Rows' class='classBold10' cellpadding='0' cellspacing='0' style='width:380px;border: 1px solid black;'><tr><td  style='border: 1px solid black;' COLSPAN='2'>DUPLICATE - BANK <span style='padding-left:140px;'>By D/D or Cash</span></td></tr><tr><td colspan='2'  style='border: 1px solid black;'><b>Student\'s Name:" + studname + "</b></td></tr><tr><td  colspan='2'  style='border: 1px solid black;'><b>" + rolldisplay + rollvalue + "</b><span style='padding-left:60px; width:200px; '>Class :  " + deg + "</span></td></tr><tr><tr><td  style='width:80px;border: 1px solid black;'>" + cursem + "</td><td style='border: 1px solid black;'>Academic Year :" + acaYear + "</td></tr><tr><td  style='border: 1px solid black;width:220px;'>" + parName + "</td><td  style='border: 1px solid black;text-align:right;'>Amount Rs.</td></tr></table></td><td></td><td><table  Rules='Rows' class='classBold10' cellpadding='0' cellspacing='0' style='width:380px;border: 1px solid black;'><tr><td COLSPAN='2'  style='border: 1px solid black;'>TRIPLICATE - STUDENT <span style='padding-left:130px;'>By D/D or Cash</span></td></tr><tr><td colspan='2'  style='border: 1px solid black;'><b>Student\'s Name:" + studname + "</b></td></tr><tr><td  colspan='2'  style='border: 1px solid black;'><b>" + rolldisplay + rollvalue + "</b><span style='padding-left:60px; width:200px; '>Class :  " + deg + "</span></td></tr><tr><tr><td  style='width:80px;border: 1px solid black;'>" + cursem + "</td><td style='border: 1px solid black;'>Academic Year :" + acaYear + "</td></tr><tr><td  style='border: 1px solid black;width:220px;'>" + parName + "</td><td  style='border: 1px solid black;text-align:right;'>Amount Rs.</td></tr></table></td></tr>");
                                        #endregion

                                    }

                                    StringBuilder tempHtml = new StringBuilder();

                                    string QEachHdr = "SELECT HeaderFK,isnull(SUM(BalAmount),0) as BalAmount,isnull(SUM(TotalAmount)-SUM(ChlTaken),0) ChallanAmt,FeeCategory	FROM FT_FeeAllot WHERE HeaderFK = " + HdrId + " and App_No=" + appnoNew + "  and FeeCategory in ('" + feeCategory + "') GROUP BY HeaderFK,BalAmount,FeeCategory";

                                    DataSet dsEachHdr = new DataSet();
                                    dsEachHdr = d2.select_method_wo_parameter(QEachHdr, "Text");
                                    if (dsEachHdr.Tables.Count > 0)
                                    {
                                        if (dsEachHdr.Tables[0].Rows.Count > 0)
                                        {
                                            string selLedge = "	SELECT f.HeaderFK,LedgerFk, priority,isnull(BalAmount,0) as BalAmount,isnull(TotalAmount,0)-isnull(ChlTaken,0) ChallanAmt,FeeCategory	FROM FT_FeeAllot  f,FM_LedgerMaster l WHERE  l.Ledgerpk=f.ledgerfk   and l.headerfk=f.headerfk   and  f.HeaderFK = " + Convert.ToString(dsEachHdr.Tables[0].Rows[0]["HeaderFK"]) + " and App_No=" + appnoNew + "  and FeeCategory in ('" + feeCategory + "')  order by case when priority is null then 1 else 0 end, priority ";
                                            DataSet dsLedge = new DataSet();
                                            dsLedge = d2.select_method_wo_parameter(selLedge, "Text");
                                            if (dsLedge.Tables.Count > 0)
                                            {
                                                if (dsLedge.Tables[0].Rows.Count > 0)
                                                {
                                                    int ledsno = 0;
                                                    for (int hdri = 0; hdri < dsLedge.Tables[0].Rows.Count; hdri++)
                                                    {
                                                        double remainAmt = 0;
                                                        remainAmt = Convert.ToDouble(Convert.ToString(dsLedge.Tables[0].Rows[hdri]["ChallanAmt"]));
                                                        if (remainAmt > 0)
                                                        {
                                                            string insertChlNo = "INSERT INTO FT_ChallanDet(ChallanNo,ChallanDate,App_No,HeaderFK,FeeAmount,TakenAmt,FeeCategory,FinYearFK,BankFk,LedgerFK,challanType) VALUES('" + recptNo + "','" + recptDt + "'," + appnoNew + "," + Convert.ToString(dsEachHdr.Tables[0].Rows[0]["HeaderFK"]) + "," + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["BalAmount"]) + "," + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["ChallanAmt"]) + "," + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["FeeCategory"]) + "," + finYearId + "," + bankPK + "," + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["LedgerFk"]) + "," + challanType + ")";
                                                            d2.select_method_wo_parameter(insertChlNo, "Text");
                                                            string updateCHlTkn = " update FT_FeeAllot set ChlTaken = +" + remainAmt + "  where FeeCategory ='" + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["FeeCategory"]) + "' and HeaderFK ='" + Convert.ToString(dsEachHdr.Tables[0].Rows[0]["HeaderFK"]) + "' and LedgerFK ='" + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["LedgerFk"]) + "' and App_No='" + appnoNew + "' ";
                                                            d2.update_method_wo_parameter(updateCHlTkn, "Text");
                                                            ledsno++;
                                                            y = y + 7;
                                                            string ledidd = Convert.ToString(dsLedge.Tables[0].Rows[hdri]["LedgerFk"]);
                                                            string legername = d2.GetFunction("select ledgername from FM_LedgerMaster where Ledgerpk=" + ledidd + "");

                                                            tempHtml.Append("<br><span class='classRegular' style='font-size:11px; width:320px;PADDING-LEFT:10PX;'>" + ledsno + "." + legername + "</span>");
                                                            heght -= 12;

                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    y = y + 15;

                                    sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'  BORDER=1><tr><td style='width:320px;'>" + hdrsno + "." + dispHdr + tempHtml.ToString() + "</td><td style='text-align:right;'>" + reuse.returnIntegerPart(totalAmt) + "." + reuse.returnDecimalPart(totalAmt) + "</td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'   BORDER=1><tr><td style='width:320px;'>" + dispHdr + tempHtml.ToString() + "</td><td style='text-align:right;'>" + reuse.returnIntegerPart(totalAmt) + "." + reuse.returnDecimalPart(totalAmt) + "</td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'  BORDER=1><tr><td style='width:320px;'>" + dispHdr + tempHtml.ToString() + "</td><td style='text-align:right;'>" + reuse.returnIntegerPart(totalAmt) + "." + reuse.returnDecimalPart(totalAmt) + "</td></tr></table></td></tr>");
                                    heght -= 13;
                                }
                            }
                        }
                    }
                }

                #region Denomionation and Particulars

                sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'  BORDER=1><tr><td style='width:320px;'>Total</td><td style='text-align:right;'>" + reuse.returnIntegerPart(grandtotal) + "." + reuse.returnDecimalPart(grandtotal) + "</td></tr><tr><td colspan='2'>" + "(" + reuse.DecimalToWords((decimal)Convert.ToDouble(grandtotal)) + " Rupees Only)" + "</td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'   BORDER=1><tr><td style='width:320px;'>Total</td><td style='text-align:right;'>" + reuse.returnIntegerPart(grandtotal) + "." + reuse.returnDecimalPart(grandtotal) + "</td></tr><tr><td colspan='2'>" + "(" + reuse.DecimalToWords((decimal)Convert.ToDouble(grandtotal)) + " Rupees Only)" + "</td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'  BORDER=1><tr><td style='width:320px;'>Total</td><td style='text-align:right;'>" + reuse.returnIntegerPart(grandtotal) + "." + reuse.returnDecimalPart(grandtotal) + "</td></tr><tr><td colspan='2'>" + "(" + reuse.DecimalToWords((decimal)Convert.ToDouble(grandtotal)) + " Rupees Only)" + "</td></tr></table></td></tr>");

                sbHtml.Append("<tr><td><table style='width:380px;'  cellpadding='0' cellspacing='0' ><tr><td style='width:380px;border:solid 1px #000000;height:" + (heght - 120) + "px;'></td></tr></table><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0'  RULES='ROWS'><tr><td><br/>College Clerk</td><td style='text-align:right;'><br/>Signature of Remitter<br/></td></tr><tr><td></td><td style='text-align:right;'><br/>Bank Manager</td></tr></table></td><td></td><td><table style='width:380px;'  cellpadding='0' cellspacing='0' ><tr><td style='width:380px;border:solid 1px #000000;height:" + (heght - 120) + "px;'></td></tr></table><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' RULES='ROWS'><tr><td><br/>College Clerk</td><td style='text-align:right;'><br/>Signature of Remitter<br/></td></tr><tr><td></td><td style='text-align:right;'><br/>Bank Manager</td></tr></table></td><td></td><td><table style='width:380px;'  cellpadding='0' cellspacing='0' ><tr><td style='width:380px;border:solid 1px #000000;height:" + (heght - 120) + "px;'></td></tr></table><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' RULES='ROWS'><tr><td><br/>College Clerk</td><td style='text-align:right;'><br/>Signature of Remitter<br/></td></tr><tr><td></td><td style='text-align:right;'><br/>Bank Manager</td></tr></table></td></tr>");

                if (useDenom == 1)
                {
                    //College
                    sbHtml.Append("<tr><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td></td><td></td><td></td></tr>");

                    sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td><td></td><td></td><td></td><td></td></tr>");
                }
                if (useDenom == 2)
                {
                    //Bank
                    sbHtml.Append("<tr><td></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td></td></tr>");

                    sbHtml.Append("<tr><td></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td><td></td><td></td></tr>");
                }
                if (useDenom == 3)
                {
                    //Student
                    sbHtml.Append("<tr><td></td><td></td><td></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td></tr>");

                    sbHtml.Append("<tr><td></td><td></td><td></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td></tr>");

                }
                if (useDenom == 4)
                {
                    //All

                    sbHtml.Append("<tr><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td></tr>");

                    sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td></tr>");
                }
                if (useDenom == 5)
                {
                    //College and Bank
                    sbHtml.Append("<tr><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td></td></tr>");

                    sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td><td></td><td></td></tr>");

                }
                if (useDenom == 6)
                {
                    //Student and Bank     
                    sbHtml.Append("<tr><td></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td></tr>");

                    sbHtml.Append("<tr><td></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td></tr>");

                }
                if (useDenom == 7)
                {
                    //College and Student
                    sbHtml.Append("<tr><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td></tr>");

                    sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td><td></td><td></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' border='1' ><tr><td>1000x</td><td>500x</td><td>100x</td><td>50x</td></tr><tr><td>20x</td><td>10x</td><td>5x</td><td>Coins</td></tr><tr><td colspan='4'>Total</td></tr></table></td></tr>");

                }

                #endregion

                sbHtml.Append("</table></div>");
                if (grandtotal > 0)
                {
                    contentDiv.InnerHtml += sbHtml.ToString();
                }
                else
                {
                    sbHtml.Clear();
                }
            }

            //Bottom portion of the challan
            if (addpageOK)
            {
                string updateRecpt = " update FM_FinCodeSettings set ChallanStNo=isnull(ChallanStNo,0)+1 where CollegeCode=" + college_code + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearId + " and CollegeCode=" + college_code + ")";
                d2.update_method_wo_parameter(updateRecpt, "Text");
            }

            #endregion

        }
        catch { createPDFOK = false; }
        return createPDFOK;
    }
    private bool challanNewCollege(Int64 appNo, ListItem feecategory)
    {
        StringBuilder sbHtml = new StringBuilder();
        bool createPDFOK = false;
        try
        {
            #region Basic Data General
            //Headerwise Only
            int challanType = 3;
            string challanNo = generateChallanNo();
            string finYearid = d2.getCurrentFinanceYear(user_code, ddl_collegename.SelectedItem.Value);
            string shift = "";
            string acaYear = System.DateTime.Now.Year.ToString();
            shift = d2.GetFunction("select UPPER(type) from course where college_code=" + college_code + "").Trim();
            if (shift == "0" || shift == "")
            {
                shift = "";
            }
            else
            {
                shift = "(" + shift + ")";
            }
            string counterName = d2.GetFunction("select LinkValue from New_InsSettings where LinkName= 'ChallanFeeCounterValue' and user_code ='" + user_code + "' and college_code ='" + college_code + "' ");
            if (counterName.Trim() == "0")
                counterName = string.Empty;

            string colName = string.Empty;
            colName = "THE NEW COLLEGE (AUTONOMOUS) CH-14";

            string useIFSC = d2.GetFunction("select LinkValue from New_InsSettings where LinkName= 'DisplayIFSCForChallan' and user_code ='" + user_code + "' and college_code ='" + college_code + "' ").Trim();

            string parName = string.Empty;
            parName = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanParticular' and user_code ='" + user_code + "' and college_code =" + college_code + "").Trim();
            if (parName == "0" || parName == "")
                parName = "Particulars";
            else
                parName = "Particulars - " + parName;

            string useDegAcr = d2.GetFunction("select LinkValue from New_InsSettings where LinkName= 'DisplayAcrForChallan' and user_code ='" + user_code + "' and college_code ='" + college_code + "' ").Trim();

            int useDenom = Convert.ToInt32(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DisplayDenominationChallan' and user_code ='" + user_code + "' and college_code ='" + college_code + "'").Trim());

            string bankName = "";
            string bankPK = "";
            string bankCity = "";
            string bankAddress = "";

            bankPK = getCollegeBankPK();
            bankName = d2.GetFunction("select bankname from FM_FinBankMaster where BankPK='" + bankPK + "'").Trim();
            bankAddress = d2.GetFunction("select Street+', '+(select MasterValue from CO_MasterValues where MasterCode=District)+'-'+PinCode as address from FM_FinBankMaster where BankPK=" + bankPK + "");
            bankAddress = "(" + bankAddress + ")";
            bankCity = d2.GetFunction("select Upper(BankBranch) as city from FM_FinBankMaster where BankPK=" + bankPK + "") + " Branch";
            #endregion

            int count = 0;
            #region Basic Data Student
            string recptNo = generateChallanNo();
            string recptDt = DateTime.Now.Date.ToString();
            string studname = string.Empty;
            string batchYrSem = string.Empty;
            string appnoNew = appNo.ToString();
            string degreeCode = string.Empty;
            string stream = string.Empty;
            string feeCategory = string.Empty;
            string app_formno = string.Empty;

            feeCategory = feecategory.Value;

            string rolldisplay = "Admission No :";
            string rollvalue = string.Empty;

            string colquery = "select collname,university,address1+' '+address2+' '+address3 as address1,' - '+pincode as address2 from collinfo where college_code=" + college_code + " select a.app_formno,a.Current_Semester,a.stud_name,a.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,a.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,a.mother,a.parent_name,ISNULL( type,'') as type from Registration r, applyn a,Degree d,Department dt,Course c where  a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.App_No='" + appnoNew + "' and d.college_code=" + college_code + "";
            string collegename = "";
            string add1 = "";
            string add2 = "";
            string univ = "";
            string deg = "";
            string cursem = "";
            string batyr = "";

            ds.Clear();
            ds = d2.select_method_wo_parameter(colquery, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                    add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                    add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                }
                if (ds.Tables[1].Rows.Count > 0)
                {
                    if (useDegAcr == "0")
                    {
                        deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                    }
                    else
                    {
                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                    }
                    degreeCode = Convert.ToString(ds.Tables[1].Rows[0]["Degree_code"]);
                    cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                    batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                    stream = Convert.ToString(ds.Tables[1].Rows[0]["type"]);
                    studname = Convert.ToString(ds.Tables[1].Rows[0]["stud_name"]);
                    app_formno = Convert.ToString(ds.Tables[1].Rows[0]["app_formno"]);
                    rollvalue = app_formno;
                    acaYear = d2.GetFunction("select value from master_Settings where settings='Academic year'");
                    try
                    {
                        acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                    }
                    catch { }
                    string Termdisp = d2.GetFunction("select UPPER(type) from course where college_code=" + college_code + "").Trim();

                    string linkvalue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + user_code + "' and college_code ='" + college_code + "'");
                    if (Termdisp.Trim() == "SHIFT I")
                    {
                        try
                        {
                            double cursemester = Convert.ToDouble(cursem);

                            if (cursemester % 2 == 1)
                            {
                                cursem = reuse.romanLetter(cursemester.ToString()) + " & " + reuse.romanLetter((cursemester + 1).ToString());
                            }
                            else
                            {
                                cursem = reuse.romanLetter((cursemester - 1).ToString()) + " & " + reuse.romanLetter(cursemester.ToString());
                            }
                        }
                        catch { }
                        cursem = "Term : " + cursem;

                    }
                    else
                    {
                        cursem = "Term : " + reuse.romanLetter(cursem);
                    }
                }
            }

            #endregion

            #region PDF Generation

            string groupHdr;
            string[] hdrInGrp0;
            List<string> hdrInGrp = new List<string>();

            bool checkedHeaderOK = false;
            checkedHeaderOK = false;
            string bnkAcc = "";
            bool addpageOK = false;

            int y = 0;

            double ovrallcredit = 0;
            double grandtotal = 0.00;

            string text = "";

            y = -30;

            int heght = 380;
            int chk = 0;
            int hdrsno = 0;
            string selectHeadersQ = "select distinct HeaderFK,h.HeaderName   from FT_FeeAllot a,FM_HeaderMaster h where h.HeaderPK =a.HeaderFK and App_No =" + appnoNew + " and FeeCategory ='" + feeCategory + "'";
            DataSet dsHead = new DataSet();
            dsHead = d2.select_method_wo_parameter(selectHeadersQ, "Text");
            CheckBoxList cbl_grpheader = new CheckBoxList();

            if (dsHead.Tables.Count > 0 && dsHead.Tables[0].Rows.Count > 0)
            {
                cbl_grpheader.DataSource = dsHead;
                cbl_grpheader.DataTextField = "HeaderName";
                cbl_grpheader.DataValueField = "HeaderFK";
                cbl_grpheader.DataBind();
            }
            for (int indx = 0; indx < cbl_grpheader.Items.Count; indx++)
            {
                string HdrId = "";
                string dispHdr = "";

                dispHdr = Convert.ToString(cbl_grpheader.Items[indx].Text);
                HdrId = Convert.ToString(cbl_grpheader.Items[indx].Value);

                string QFinTot = "	SELECT App_FormNo,Stud_Name,Course_Name+'-'+Dept_Name Degree,TextVal,DispStream,ChlGroupHeader,SUM(TotalAmount) as Totamount	FROM FT_FeeAllot A,applyn P,Degree G,Course U,Department D,FS_ChlGroupHeaderSettings S,TextValTable T	WHERE A.app_no = P.app_no AND P.degree_code = G.Degree_Code AND G.Course_Id = U.Course_Id AND G.college_code = U.college_code	AND G.Dept_Code = D.Dept_Code AND G.college_code = D.college_code AND A.HeaderFK = S.HeaderFK AND A.FeeCategory = T.TextCode AND Stream = '" + stream + "' AND A.HeaderFK IN (" + HdrId + ")  AND A.FeeCategory in(" + feeCategory + ") and P.app_no=" + appnoNew + "	GROUP BY App_FormNo,Stud_Name,Course_Name,Dept_Name,TextVal,DispStream,ChlGroupHeader           	    SELECT isnull(SUM(TakenAmt),0) as TakenAmt	FROM FT_ChallanDet C,FS_ChlGroupHeaderSettings S,TextValTable T 	WHERE C.HeaderFK = S.HeaderFK AND C.FeeCategory = T.TextCode	AND Stream = '" + stream + "' AND C.HeaderFK IN (" + HdrId + ") AND C.FeeCategory in (" + feeCategory + ") and C.app_no=" + appnoNew + "  GROUP BY ChlGroupHeader ";

                DataSet ds2 = new DataSet();
                ds2 = d2.select_method_wo_parameter(QFinTot, "Text");
                if (ds2.Tables.Count > 0)
                {
                    if (ds2.Tables[0].Rows.Count > 0)
                    {
                        double totalAmt = Convert.ToDouble(ds2.Tables[0].Rows[0]["Totamount"]);
                        if (ds2.Tables[1].Rows.Count > 0)
                        {
                            totalAmt -= Convert.ToDouble(ds2.Tables[1].Rows[0]["TakenAmt"]);
                        }

                        if (useIFSC == "0")
                            bnkAcc = "A/c No " + d2.GetFunction("SELECT AccNo FROM FS_ChlGroupHeaderSettings S,FM_FinBankMaster B WHERE S.BankFK = B.BankPK AND ChlGroupHeader = '" + dispHdr + "' ");
                        else
                            bnkAcc = "A/c No " + d2.GetFunction("SELECT AccNo+'-IFSC '+IFSCCode FROM FS_ChlGroupHeaderSettings S,FM_FinBankMaster B WHERE S.BankFK = B.BankPK AND ChlGroupHeader = '" + dispHdr + "' ");

                        dispHdr += " (" + bnkAcc + ")";
                        grandtotal = grandtotal + totalAmt;

                        if (grandtotal > 0)
                        {

                            addpageOK = true;
                            createPDFOK = true;
                            if (totalAmt > 0)
                            {
                                hdrsno++;

                                y = y + 5;

                                #region Update Challan No
                                recptNo = generateChallanNo();

                                if (hdrsno == 1)
                                {
                                    #region HTML Generation

                                    sbHtml.Append("<div style='padding-left:50px;height: 710px;'><table cellpadding='0' cellspacing='0' style='text-align:center; width: 1056px; ' class='classRegular'>");

                                    sbHtml.Append("<tr><td  style='font-size:16px;text-align:center;font-weight:bold;'>BANK COPY</td><td></td><td  style='font-size:16px;text-align:center;font-weight:bold;'>COLLEGE COPY</td><td></td><td  style='font-size:16px;text-align:center;font-weight:bold;'>STUDENT COPY</td></tr>");

                                    sbHtml.Append("<tr class='classBold10'><td><table  Rules='None' class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 2px solid black;'><tr><td style='font-size:16px;'><center><b>" + bankName.ToUpper() + "</b></center></td></tr><tr><td><center>" + bankAddress + "</center></td></tr><tr><td><center>" + counterName + "</center></td></tr><tr><td><center>" + bankCity + "</center></td></tr><tr><td style='font-size:15px;'><center><b>" + colName + "</b></center></td></tr><tr><td><center>COLLEGE FEES CHALLAN " + shift + "</center></td></tr></table></td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td><table  Rules='None' class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 2px solid black;'><tr><td  style='font-size:16px;'><center><b>" + bankName.ToUpper() + "</b></center></td></tr><tr><td><center>" + bankAddress + "</center></td></tr><tr><td><center>" + counterName + "</center></td></tr><tr><td><center>" + bankCity + "</center></td></tr><tr><td style='font-size:15px;'><center><b>" + colName + "</b></center></td></tr><tr><td><center>COLLEGE FEES CHALLAN " + shift + "</center></td></tr></table></td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td><table  Rules='None' class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 2px solid black;'><tr><td  style='font-size:16px;'><center><b>" + bankName.ToUpper() + "</b></center></td></tr><tr><td><center>" + bankAddress + "</center></td></tr><tr><td><center>" + counterName + "</center></td></tr><tr><td><center>" + bankCity + "</center></td></tr><tr><td style='font-size:15px;'><center><b>" + colName + "</b></center></td></tr><tr><td><center>COLLEGE FEES CHALLAN " + shift + "</center></td></tr></table></td></tr>");

                                    sbHtml.Append("<tr class='classBold10' style='text-align:center;font-size:12px;'><td ><table  class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 1px solid black;'><tr><td style='width:120px; border: 1px solid black;'><b>CH NO.:" + recptNo + "</b></td><td style='width:180px; border: 1px solid black;'>Receipt No:<br/>(Office Use Only)</td><td style='width:80px; border: 1px solid black;text-align:right;'>Date:" + DateTime.Now.Date.ToString("dd/MM/yyyy") + "</td><tr></table></td><td></td><td><table  class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 1px solid black;'><tr><td style='width:120px; border: 1px solid black;'><b>CH NO.:" + recptNo + "</b></td><td style='width:180px; border: 1px solid black;'>Receipt No:<br/>(Office Use Only)</td><td style='width:80px; border: 1px solid black;text-align:right;'>Date:" + DateTime.Now.Date.ToString("dd/MM/yyyy") + "</td><tr></table ></td><td></td><td><table class='classBold10' cellpadding='0' cellspacing='0' style='width:380px; border: 1px solid black;'><tr><td style='width:120px; border: 1px solid black;'><b>CH NO.:" + recptNo + "</b></td><td style='width:180px; border: 1px solid black;'>Receipt No:<br/>(Office Use Only)</td><td style='width:80px; border: 1px solid black;text-align:right;'>Date:" + DateTime.Now.Date.ToString("dd/MM/yyyy") + "</td><tr></table></td></tr>");

                                    sbHtml.Append("<tr class='classBold10'><td ><table  Rules='Rows' class='classBold10' cellpadding='1' cellspacing='0' style='width:380px;border: 1px solid black;'><tr><td colspan='2'  style='border: 1px solid black;'><b>Student\'s Name:" + studname + "</b></td></tr><tr><td  colspan='2'  style='border: 1px solid black;'><b>" + rolldisplay + rollvalue + "</b><span style='padding-left:60px; width:200px; '>Class :  " + deg + "</span></td></tr><tr><td  style='width:80px;border: 1px solid black;'>" + cursem + "</td><td style='border: 1px solid black;'>Academic Year :" + acaYear + "</td></tr  style='border: 1px solid black;'><tr><td  style='border: 1px solid black;width:220px;'>" + parName + "</td><td  style='border: 1px solid black;text-align:right;'>Amount Rs.</td></tr></table></td><td></td><td><table  Rules='Rows' class='classBold10' cellpadding='1' cellspacing='0' style='width:380px;border: 1px solid black;'><tr><td colspan='2'  style='border: 1px solid black;'><b>Student\'s Name:" + studname + "</b></td></tr><tr><td  colspan='2'  style='border: 1px solid black;'><b>" + rolldisplay + rollvalue + "</b><span style='padding-left:60px; width:200px; '>Class :  " + deg + "</span></td></tr><tr><tr><td  style='width:80px;border: 1px solid black;'>" + cursem + "</td><td style='border: 1px solid black;'>Academic Year :" + acaYear + "</td></tr><tr><td  style='border: 1px solid black;width:220px;'>" + parName + "</td><td  style='border: 1px solid black;text-align:right;'>Amount Rs.</td></tr></table></td><td></td><td><table  Rules='Rows' class='classBold10' cellpadding='1' cellspacing='0' style='width:380px;border: 1px solid black;'><tr><td colspan='2'  style='border: 1px solid black;'><b>Student\'s Name:" + studname + "</b></td></tr><tr><td  colspan='2'  style='border: 1px solid black;'><b>" + rolldisplay + rollvalue + "</b><span style='padding-left:60px; width:200px; '>Class :  " + deg + "</span></td></tr><tr><tr><td  style='width:80px;border: 1px solid black;'>" + cursem + "</td><td style='border: 1px solid black;'>Academic Year :" + acaYear + "</td></tr><tr><td  style='border: 1px solid black;width:220px;'>" + parName + "</td><td  style='border: 1px solid black;text-align:right;'>Amount Rs.</td></tr></table></td></tr>");
                                    #endregion

                                }

                                StringBuilder tempHtml = new StringBuilder();

                                string QEachHdr = "SELECT HeaderFK,isnull(SUM(BalAmount),0) as BalAmount,isnull(SUM(TotalAmount)-SUM(ChlTaken),0) ChallanAmt,FeeCategory	FROM FT_FeeAllot WHERE HeaderFK = " + HdrId + " and App_No=" + appnoNew + "  and FeeCategory in ('" + feeCategory + "') GROUP BY HeaderFK,BalAmount,FeeCategory";

                                DataSet dsEachHdr = new DataSet();
                                dsEachHdr = d2.select_method_wo_parameter(QEachHdr, "Text");
                                if (dsEachHdr.Tables.Count > 0)
                                {
                                    if (dsEachHdr.Tables[0].Rows.Count > 0)
                                    {
                                        string selLedge = "	SELECT f.HeaderFK,LedgerFk, priority,isnull(BalAmount,0) as BalAmount,isnull(TotalAmount,0)-isnull(ChlTaken,0) ChallanAmt,FeeCategory	FROM FT_FeeAllot  f,FM_LedgerMaster l WHERE  l.Ledgerpk=f.ledgerfk   and l.headerfk=f.headerfk   and  f.HeaderFK = " + Convert.ToString(dsEachHdr.Tables[0].Rows[0]["HeaderFK"]) + " and App_No=" + appnoNew + "  and FeeCategory in ('" + feeCategory + "')  order by case when priority is null then 1 else 0 end, priority ";
                                        DataSet dsLedge = new DataSet();
                                        dsLedge = d2.select_method_wo_parameter(selLedge, "Text");
                                        if (dsLedge.Tables.Count > 0)
                                        {
                                            if (dsLedge.Tables[0].Rows.Count > 0)
                                            {
                                                int ledsno = 0;
                                                for (int hdri = 0; hdri < dsLedge.Tables[0].Rows.Count; hdri++)
                                                {
                                                    double remainAmt = 0;
                                                    remainAmt = Convert.ToDouble(Convert.ToString(dsLedge.Tables[0].Rows[hdri]["ChallanAmt"]));
                                                    if (remainAmt > 0)
                                                    {
                                                        string insertChlNo = "INSERT INTO FT_ChallanDet(ChallanNo,ChallanDate,App_No,HeaderFK,FeeAmount,TakenAmt,FeeCategory,FinYearFK,BankFk,LedgerFK,challanType) VALUES('" + recptNo + "','" + recptDt + "'," + appnoNew + "," + Convert.ToString(dsEachHdr.Tables[0].Rows[0]["HeaderFK"]) + "," + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["BalAmount"]) + "," + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["ChallanAmt"]) + "," + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["FeeCategory"]) + "," + finYearid + "," + bankPK + "," + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["LedgerFk"]) + "," + challanType + ")";
                                                        d2.select_method_wo_parameter(insertChlNo, "Text");
                                                        string updateCHlTkn = " update FT_FeeAllot set ChlTaken = +" + remainAmt + "  where FeeCategory ='" + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["FeeCategory"]) + "' and HeaderFK ='" + Convert.ToString(dsEachHdr.Tables[0].Rows[0]["HeaderFK"]) + "' and LedgerFK ='" + Convert.ToString(dsLedge.Tables[0].Rows[hdri]["LedgerFk"]) + "' and App_No='" + appnoNew + "' ";
                                                        d2.update_method_wo_parameter(updateCHlTkn, "Text");
                                                        ledsno++;
                                                        y = y + 7;
                                                        string ledidd = Convert.ToString(dsLedge.Tables[0].Rows[hdri]["LedgerFk"]);
                                                        string legername = d2.GetFunction("select ledgername from FM_LedgerMaster where Ledgerpk=" + ledidd + "");

                                                        tempHtml.Append("<br><span class='classRegular' style='font-size:11px; width:320px;PADDING-LEFT:10PX;'>" + ledsno + "." + legername + "</span>");
                                                        heght -= 12;

                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                #endregion

                                y = y + 15;

                                sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'  BORDER=1><tr><td style='width:300px;'>" + hdrsno + "." + dispHdr + tempHtml.ToString() + "</td><td style='text-align:right;width:60px;'>" + reuse.returnIntegerPart(totalAmt) + "&nbsp;</td></td><td style='width:20px;'>&nbsp;" + reuse.returnDecimalPart(totalAmt) + "</tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'   BORDER=1><tr><td style='width:300px;'>" + hdrsno + "." + dispHdr + tempHtml.ToString() + "</td><td style='text-align:right;width:60px;'>" + reuse.returnIntegerPart(totalAmt) + "&nbsp;</td></td><td style='width:20px;'>&nbsp;" + reuse.returnDecimalPart(totalAmt) + "</tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'  BORDER=1><tr><td style='width:300px;'>" + hdrsno + "." + dispHdr + tempHtml.ToString() + "</td><td style='text-align:right;width:60px;'>" + reuse.returnIntegerPart(totalAmt) + "&nbsp;</td></td><td style='width:20px;'>&nbsp;" + reuse.returnDecimalPart(totalAmt) + "</tr></table></td></tr>");
                                heght -= 13;
                            }
                        }
                    }
                }
            }

            #region Denomionation and Particulars

            sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'  BORDER=1><tr><td style='width:300px;'>Total</td><td style='text-align:right;width:60px;'>" + Math.Round((decimal)Convert.ToDouble(grandtotal), 2) + "&nbsp;</td><td style='width:20px;'>&nbsp;00" + "</td></tr><tr><td colspan='3'>" + "(" + reuse.DecimalToWords((decimal)Convert.ToDouble(grandtotal)) + " Rupees Only)" + "</td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'   BORDER=1><tr><td style='width:300px;'>Total</td><td style='text-align:right;width:60px;'>" + Math.Round((decimal)Convert.ToDouble(grandtotal), 2) + "&nbsp;</td><td style='width:20px;'>&nbsp;00" + "</td></tr><tr><td colspan='3'>" + "(" + reuse.DecimalToWords((decimal)Convert.ToDouble(grandtotal)) + " Rupees Only)" + "</td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'  BORDER=1><tr><td style='width:300px;'>Total</td><td style='text-align:right;width:60px;'>" + Math.Round((decimal)Convert.ToDouble(grandtotal), 2) + "&nbsp;</td><td style='width:20px;'>&nbsp;00" + "</td></tr><tr><td colspan='3'>" + "(" + reuse.DecimalToWords((decimal)Convert.ToDouble(grandtotal)) + " Rupees Only)" + "</td></tr></table></td></tr>");

            sbHtml.Append("<tr><td><table style='width:380px;'  cellpadding='0' cellspacing='0' ><tr><td style='width:380px;border:solid 1px #000000;'></td></tr></table><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'  RULES='ROWS'><tr><td>Signature of Remitter<br><br>Mobile No</td><td></td></tr></table></td><td></td><td><table style='width:380px;'  cellpadding='0' cellspacing='0' ><tr><td style='width:380px;border:solid 1px #000000;'></td></tr></table><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' RULES='ROWS'><tr><td>Signature of Remitter<br><br>Mobile No</td><td></td></tr></table></td><td></td><td><table style='width:380px;'  cellpadding='0' cellspacing='0' ><tr><td style='width:380px;border:solid 1px #000000;'></td></tr></table><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' RULES='ROWS'><tr><td>Signature of Remitter<br><br>Mobile No</td><td></td></tr></table></td></tr>");
            sbHtml.Append("<tr><td><table style='width:380px;'  cellpadding='0' cellspacing='0' ><tr><td style='width:380px;border:solid 1px #000000;height:" + (heght - 170) + "px;'></td></tr></table><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0'  RULES='ROWS'><tr><td><br/>Signature of Cashier</td><td style='text-align:right;'><br/>Manager / Acct.</td></tr></table></td><td></td><td><table style='width:380px;'  cellpadding='0' cellspacing='0' ><tr><td style='width:380px;border:solid 1px #000000;height:" + (heght - 170) + "px;'></td></tr></table><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' RULES='ROWS'><tr><td><br/>Signature of Cashier</td><td style='text-align:right;'><br/>Manager / Acct.</td></tr></table></td><td></td><td><table style='width:380px;'  cellpadding='0' cellspacing='0' ><tr><td style='width:380px;border:solid 1px #000000;height:" + (heght - 170) + "px;'></td></tr></table><table class='classBold' style='border: 1px solid black;width:380px;font-size:12px;' cellpadding='0' cellspacing='0' RULES='ROWS'><tr><td><br/>Signature of Cashier</td><td style='text-align:right;'><br/>Manager / Acct.</td></tr></table></td></tr>");
            sbHtml.Append("<tr><td style='border:none;'>&nbsp;</td><tr>");
            if (useDenom == 1)
            {
                //College
                sbHtml.Append("<tr><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td></td><td></td><td></td></tr>");

                sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table> </td><td></td><td></td><td></td><td></td></tr>");
            }
            if (useDenom == 2)
            {
                //Bank
                sbHtml.Append("<tr><td></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td></td></tr>");

                sbHtml.Append("<tr><td></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table> </td><td></td><td></td></tr>");
            }
            if (useDenom == 3)
            {
                //Student
                sbHtml.Append("<tr><td></td><td></td><td></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td></tr>");

                sbHtml.Append("<tr><td></td><td></td><td></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table> </td></tr>");

            }
            if (useDenom == 4)
            {
                //All

                sbHtml.Append("<tr><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td></tr>");

                sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table> </td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table></td></tr>");
            }
            if (useDenom == 5)
            {
                //College and Bank
                sbHtml.Append("<tr><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td></td></tr>");

                sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table> </td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table></td><td></td><td></td></tr>");

            }
            if (useDenom == 6)
            {
                //Student and Bank     
                sbHtml.Append("<tr><td></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td></tr>");

                sbHtml.Append("<tr><td></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table> </td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table></td></tr>");

            }
            if (useDenom == 7)
            {
                //College and Student
                sbHtml.Append("<tr><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td><td></td><td></td><td></td><td><table  class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td colspan='5'><center>PARTICULARS OF DEMAND DRAFT AND DENOMINATION</center></td></tr><tr><td>Name of Bank</td><td>Place of Bank</td><td>Draft Number</td><td>Date</td><td>Amount</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td></tr></table></td></tr>");

                sbHtml.Append("<tr><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table> </td><td></td><td></td><td></td><td><table class='classBold' style='border: 1px solid black;width:380px;' cellpadding='0' cellspacing='0' border='1' ><tr><td style='width:80px;'>1000 X</td><td  style='width:80px;'>&nbsp</td><td  style='width:220px;font-size:12px;text-align:center;' rowspan='9'>Bank Seal</td></tr><tr><td>500 X</td><td>&nbsp</td></tr><tr><td>100 X</td><td>&nbsp</td></tr><tr><td>50 X</td><td>&nbsp</td></tr><tr><td>20 X</td><td>&nbsp</td></tr><tr><td>10 X</td><td>&nbsp</td></tr><tr><td>5 X</td><td>&nbsp</td></tr><tr><td>Coins X</td><td>&nbsp</td></tr><tr><td>Total</td><td></td></tr></table> </td></tr>");

            }

            #endregion

            sbHtml.Append("</table></div>");
            if (grandtotal > 0)
            {
                contentDiv.InnerHtml += sbHtml.ToString();
            }
            else
            {
                sbHtml.Clear();
            }
            if (addpageOK)
            {
                string updateRecpt = " update FM_FinCodeSettings set ChallanStNo=isnull(ChallanStNo,0)+1 where CollegeCode=" + college_code + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + college_code + ")";
                d2.update_method_wo_parameter(updateRecpt, "Text");

            }

            #endregion
        }
        catch { createPDFOK = false; }
        return createPDFOK;
    }
    public bool checkedOKSpread(out List<string> appNoList)
    {
        appNoList = new List<string>();
        bool Ok = false;
        if (TabContainer1.ActiveTabIndex == 0)
        {
            FpSpread3.SaveChanges();
            for (int i = 1; i < FpSpread3.Sheets[0].Rows.Count; i++)
            {
                byte check = Convert.ToByte(FpSpread3.Sheets[0].Cells[i, 1].Value);
                if (check == 1)
                {
                    Ok = true;
                    appNoList.Add(Convert.ToString(FpSpread3.Sheets[0].Cells[i, 0].Tag));
                }
            }
        }
        else if (TabContainer1.ActiveTabIndex == 2)
        {
            FpSpread2.SaveChanges();
            for (int i = 1; i < FpSpread2.Sheets[0].Rows.Count; i++)
            {
                byte check = Convert.ToByte(FpSpread2.Sheets[0].Cells[i, 1].Value);
                if (check == 1)
                {
                    Ok = true;
                    appNoList.Add(Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag));
                }
            }
        }
        return Ok;
    }
    protected void btnSendSmsOpenPop_Click(object sender, EventArgs e)
    {
        List<string> appNoList = new List<string>();
        if (checkedOKSpread(out appNoList))
        {
            popSendSms.Visible = true;
            txt_SmsMsgPop.Text = string.Empty;
        }
        else
        {
            errorspan.InnerHtml = "No Students Selected";
            poperrjs.Visible = true;
        }
    }
    protected void btnSendSmsPop_click(object sender, EventArgs e)
    {
        poperrjs.Visible = true;
        if (txt_SmsMsgPop.Text.Trim() != string.Empty)
        {
            List<string> appNoList = new List<string>();
            checkedOKSpread(out appNoList);
            int okcnt = 0;
            int errcnt = 0;
            foreach (string appno in appNoList)
            {
                string mobile = d2.GetFunction("select student_mobile from applyn where app_no=" + appno + "").Trim();
                if (mobile != "0")
                {
                    //sendsmsnew(mobile, appno, 1);                  
                    string Msg = txt_SmsMsgPop.Text.Trim();
                    string user_id = "";
                    string ssr = "select * from Track_Value where college_code='" + Convert.ToString(ddl_collegename.SelectedItem.Value) + "'";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(ssr, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
                    }
                    mobile = "0";
                    int d = d2.send_sms(user_id, ddl_collegename.SelectedItem.Value, usercode, mobile, Msg, "0");

                    okcnt++;
                }
                else
                {
                    errcnt++;
                }
            }
            popSendSms.Visible = false;
            errorspan.InnerHtml = "<u>Sms Details</u> <br><br>Sent : " + okcnt + ". Not Sent : " + errcnt;
        }
        else
        {
            errorspan.InnerHtml = "Please Enter Message";
        }
    }
    protected void btnClosePop_click(object sender, EventArgs e)
    {
        popSendSms.Visible = false;
    }
    protected void ddlAdmLedge1_IndexChanged(object sender, EventArgs e)
    {
        if (ddlAdmLedge1.Items.Count > 0)
        {
            txtAdmledge1Amt.Text = retLedgeAmount(ddlAdmLedge1.SelectedValue).ToString();
        }
    }
    protected void ddlAdmLedge2_IndexChanged(object sender, EventArgs e)
    {
        if (ddlAdmLedge2.Items.Count > 0)
        {
            txtAdmledge2Amt.Text = retLedgeAmount(ddlAdmLedge2.SelectedValue).ToString();
        }
    }
    private double retLedgeAmount(string ledgerId)
    {
        double amount = 0;
        try
        {
            // string degCOde = returnStudDeg(appNo);
            ListItem feecat = getFeecategory();
            string finYearId = d2.getCurrentFinanceYear(user_code, ddl_collegename.SelectedItem.Value);
            string amtQ = "select isnull(TotalAmount,0) from FT_FeeAllotDegree where BatchYear ='" + Convert.ToString(ddl_batch.SelectedItem.Value) + "' and SeatType ='" + ddl_seattype.SelectedValue + "' and FeeCategory ='" + feecat.Value + "' and FinYearFK ='" + finYearId + "' and LedgerFk='" + ledgerId + "' -- and DegreeCode='degCOde '  ";
            double.TryParse(d2.GetFunction(amtQ).Trim(), out amount);
        }
        catch { }
        return amount;
    }
    private void loadAdmLedger1()
    {
        ListItem feecat = getFeecategory();
        ddlAdmLedge1.Items.Clear();
        try
        {
            string query = "  SELECT  LedgerPK,LedgerName,L.Priority FROM FM_LedgerMaster L,Ft_feeallotdegree fd WHERE  l.LedgerMode=0 and fd.Ledgerfk=L.LedgerPk  and fd.Headerfk=l.headerfk  and fd.BatchYear= " + Convert.ToString(ddl_batch.SelectedItem.Value) + "  and fd.feecategory= " + feecat.Value + "   AND L.CollegeCode = " + college_code + " order by case when priority is null then 1 else 0 end, priority --and fd.DegreeCode=" + ddldept.SelectedValue + "";

            DataSet dsLedger = d2.select_method_wo_parameter(query, "Text");
            if (dsLedger.Tables.Count > 0 && dsLedger.Tables[0].Rows.Count > 0)
            {
                ddlAdmLedge1.DataSource = dsLedger;
                ddlAdmLedge1.DataTextField = "LedgerName";
                ddlAdmLedge1.DataValueField = "LedgerPK";
                ddlAdmLedge1.DataBind();
            }
        }
        catch { }
        ddlAdmLedge1.Items.Insert(0, "Select");
    }
    private void loadAdmLedger2()
    {
        ListItem feecat = getFeecategory();
        ddlAdmLedge2.Items.Clear();
        try
        {
            string query = "   SELECT  LedgerPK,LedgerName,L.Priority FROM FM_LedgerMaster L,Ft_feeallotdegree fd WHERE  l.LedgerMode=0 and fd.Ledgerfk=L.LedgerPk  and fd.Headerfk=l.headerfk  and fd.BatchYear= " + Convert.ToString(ddl_batch.SelectedItem.Value) + " and fd.feecategory= " + feecat.Value + "  AND L.CollegeCode = " + college_code + " order by case when priority is null then 1 else 0 end, priority --and fd.DegreeCode=" + ddldept.SelectedValue + "";

            DataSet dsLedger = d2.select_method_wo_parameter(query, "Text");
            if (dsLedger.Tables.Count > 0 && dsLedger.Tables[0].Rows.Count > 0)
            {
                ddlAdmLedge2.DataSource = dsLedger;
                ddlAdmLedge2.DataTextField = "LedgerName";
                ddlAdmLedge2.DataValueField = "LedgerPK";
                ddlAdmLedge2.DataBind();
            }
        }
        catch { }
        ddlAdmLedge2.Items.Insert(0, "Select");
    }
    protected void ddl_seattype_IndexChange(object sender, EventArgs e)
    {
        bindAdmLedgerGrid();
    }
    private void bindAdmLedgerGrid()
    {
        try
        {
            SettingReceipt();
            btnconformrecpt.Visible = false;
            txt_gridAdmLedgeTot.Visible = false;
            gridAdmLedge.DataSource = null;
            gridAdmLedge.DataBind();
            pnl2.Style.Add("height", "250px");
            if (ShowFeeStruct() == 1)
            {

                pnl2.Style.Add("height", "550px");
                string seattype = string.Empty;
                if (ddl_seattype.Items.Count > 0)
                {
                    seattype = " and d.seattype=" + ddl_seattype.SelectedValue + " ";
                }
                string degCode = "-1";
                if (ddldept.Items.Count > 0)
                {
                    degCode = ddldept.SelectedValue;
                }

                if (txt_searchappno.Text.Trim() != string.Empty || txt_searchmobno.Text.Trim() != string.Empty || txt_searchstudname.Text.Trim() != string.Empty)
                {
                    string app_no = string.Empty;
                    try
                    {
                        if (TabContainer1.ActiveTabIndex == 0)
                        {
                            app_no = Convert.ToString(FpSpread3.Sheets[0].Cells[1, 0].Tag).Trim();
                        }
                        else
                            if (TabContainer1.ActiveTabIndex == 1)
                            {
                                app_no = Convert.ToString(FpSpread1.Sheets[0].Cells[1, 0].Tag).Trim();
                            }
                        if (app_no != string.Empty && app_no != null && app_no != "0")
                        {
                            degCode = d2.GetFunction("select degree_code from applyn where app_no='" + app_no + "'");
                        }
                    }
                    catch { }
                }


                string sem = Convert.ToString(ddl_sem.SelectedItem.Value);
                ListItem feecat = getFeecategoryNEW(sem);
                string finYearId = d2.getCurrentFinanceYear(user_code, ddl_collegename.SelectedItem.Value);

                string ledgerQ = "select ledgername,d.LedgerFk,isnull(FeeAmount,0) as AllotAmount,isnull(DeductAmout,0) as Deduction,isnull(TotalAmount,0) as TotalAmount,PayMode,d.HeaderFK,DeductReason,isnull(FineAmount,0) as FineAmount,isnull(RefundAmount,0) as RefundAmount from FT_FeeAllotDegree d,Fm_ledgermaster l where d.BatchYear ='" + Convert.ToString(ddl_batch.SelectedItem.Value) + "' and d.FeeCategory ='" + feecat.Value + "' and d.FinYearFK ='" + finYearId + "' and d.LedgerFk=l.ledgerpk  and DegreeCode='" + degCode + "' " + seattype + "";
                DataSet dsLedger = new DataSet();
                dsLedger = d2.select_method_wo_parameter(ledgerQ, "Text");
                if (dsLedger.Tables.Count > 0 && dsLedger.Tables[0].Rows.Count > 0)
                {
                    DataTable dtledger = new DataTable();
                    dtledger.Columns.Add("AdmLedger");
                    dtledger.Columns.Add("AdmLedgerId");
                    dtledger.Columns.Add("AdmHeaderId");
                    dtledger.Columns.Add("AdmPaymode");
                    dtledger.Columns.Add("AdmDedRes");
                    dtledger.Columns.Add("AdmFine");
                    dtledger.Columns.Add("AdmRefund");
                    dtledger.Columns.Add("FeeAlloted");
                    dtledger.Columns.Add("Deduction");
                    dtledger.Columns.Add("TotalAmt");
                    double ovTotalAmt = 0;
                    for (int ledgeCnt = 0; ledgeCnt < dsLedger.Tables[0].Rows.Count; ledgeCnt++)
                    {
                        DataRow drLedger = dtledger.NewRow();

                        double feeAllot = 0;
                        double.TryParse(Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["AllotAmount"]), out feeAllot);
                        double dedAmt = 0;
                        double.TryParse(Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["Deduction"]), out dedAmt);
                        double feeTotal = 0;
                        double.TryParse(Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["TotalAmount"]), out feeTotal);
                        ovTotalAmt += feeTotal;

                        drLedger["AdmLedger"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["ledgername"]);
                        drLedger["AdmLedgerId"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["LedgerFk"]);
                        drLedger["AdmHeaderId"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["HeaderFK"]);
                        drLedger["AdmPaymode"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["PayMode"]);
                        drLedger["AdmDedRes"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["DeductReason"]);
                        drLedger["AdmFine"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["FineAmount"]);
                        drLedger["AdmRefund"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["RefundAmount"]);
                        drLedger["FeeAlloted"] = feeAllot;
                        drLedger["Deduction"] = dedAmt;
                        drLedger["TotalAmt"] = feeTotal;
                        dtledger.Rows.Add(drLedger);
                    }
                    if (dtledger.Rows.Count > 0)
                    {
                        gridAdmLedge.DataSource = dtledger;
                        gridAdmLedge.DataBind();

                        txt_gridAdmLedgeTot.Visible = true;
                        txt_gridAdmLedgeTot.Text = "Total Amount : Rs." + ovTotalAmt + " /-";
                    }
                }
            }
        }
        catch { }
    }

    protected void gridAdmLedge_OnRowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (editableRights)
                {
                    TextBox txtallot = (TextBox)e.Row.Cells[1].FindControl("txtAdmFeeAllot");
                    TextBox txtconces = (TextBox)e.Row.Cells[2].FindControl("txtAdmDeduc");
                    txtallot.Attributes.Add("readonly", "readonly");
                    txtconces.Attributes.Add("readonly", "readonly");
                }
                else
                {
                    TextBox txtallot = (TextBox)e.Row.Cells[1].FindControl("txtAdmFeeAllot");
                    TextBox txtconces = (TextBox)e.Row.Cells[2].FindControl("txtAdmDeduc");
                    txtallot.Attributes.Remove("readonly");
                    txtconces.Attributes.Remove("readonly");
                }
                if (recptset == true)
                {
                    TextBox txtallot = (TextBox)e.Row.Cells[1].FindControl("txtAdmFeeAllot");
                    TextBox txtconces = (TextBox)e.Row.Cells[2].FindControl("txtAdmDeduc");
                    txtallot.Attributes.Add("readonly", "readonly");
                    txtconces.Attributes.Add("readonly", "readonly");
                }
                //else
                //{
                //    TextBox txtallot = (TextBox)e.Row.Cells[1].FindControl("txtAdmFeeAllot");
                //    TextBox txtconces = (TextBox)e.Row.Cells[2].FindControl("txtAdmDeduc");
                //    txtallot.Attributes.Remove("readonly");
                //    txtconces.Attributes.Remove("readonly");
                //}


            }
        }
        catch { }
    }

    private void bindFeeLedgerGrid(string appNo)
    {
        try
        {
            double allot = 0;
            double conses = 0;
            double total = 0;
            gridFeeDet.DataSource = null;
            gridFeeDet.DataBind();
            btnFeeUpdate.Visible = false;
            lblstudmsg.Visible = false;
            AddtionalInformationDiv.Visible = false;
            lblAppnoFee.Text = string.Empty;
            ShowAllCb.Visible = false;
            string degCode = returnStudDeg(appNo);
            string MemType = d2.GetFunction("select case when sex='0' then '1' when sex ='1' then '2' end  from applyn where app_no ='" + appNo + "'");
            loadHostel(MemType);
            loadHostelRoom();
            string mode = d2.GetFunction("select mode from Registration where app_no='" + appNo + "'");
            if (string.IsNullOrEmpty(mode))
                mode = "1";
            if (mode == "1")
            {
                rblModeDet.SelectedIndex = rblModeDet.Items.IndexOf(rblModeDet.Items.FindByValue("1"));

            }
            else if (mode == "2")
            {
                rblModeDet.SelectedIndex = rblModeDet.Items.IndexOf(rblModeDet.Items.FindByValue("2"));
            }
            else if (mode == "3")
            {
                rblModeDet.SelectedIndex = rblModeDet.Items.IndexOf(rblModeDet.Items.FindByValue("3"));
            }
            ListItem feecat = getFeecategoryNEW(ddl_sem.SelectedItem.Value);
            string finYearId = d2.getCurrentFinanceYear(user_code, ddl_collegename.SelectedItem.Value);

            //string 
            string ledgerQ = "select ledgername,LedgerFK,a.HeaderFK,isnull(FeeAmount,0) as AllotAmount,isnull(DeductAmout,0) as Deduction,DeductReason,isnull(TotalAmount,0) as TotalAmount,isnull(RefundAmount,0) as RefundAmount,PayMode,isnull(FineAmount,0) as FineAmount from ft_feeallot a,fm_ledgermaster l where l.ledgerPk=a.ledgerfk and a.Headerfk=l.Headerfk and  app_no =" + appNo + " and FeeCategory ='" + feecat.Value + "' and FinYearFK ='" + finYearId + "' ";
            if (ShowAllCb.Checked == true)
            {
                ledgerQ = ledgerQ + " union select ledgername,LedgerpK,HeaderFK,0 FeeAmount,0 deductAmout,0 DeductReason,0 TotalAmount,0 RefundAmount,0 PayMode,0 fineAmount  from FM_LedgerMaster where LedgerPK not in (select ledgerFk from ft_feeallot where app_no =" + appNo + " and FeeCategory ='" + feecat.Value + "' and FinYearFK ='" + finYearId + "' )";
            }
            DataSet dsLedger = new DataSet();
            dsLedger = d2.select_method_wo_parameter(ledgerQ, "Text");
            if (dsLedger.Tables.Count == 0 || dsLedger.Tables[0].Rows.Count == 0)
            {
                string seattype = d2.GetFunction("select seattype from applyn where app_no =" + appNo + "").Trim();

                ledgerQ = "select ledgername,d.LedgerFk,isnull(FeeAmount,0) as AllotAmount,isnull(DeductAmout,0) as Deduction,isnull(TotalAmount,0) as TotalAmount,PayMode,d.HeaderFK,DeductReason,isnull(FineAmount,0) as FineAmount,isnull(RefundAmount,0) as RefundAmount from FT_FeeAllotDegree d,Fm_ledgermaster l where d.BatchYear ='" + Convert.ToString(ddl_batch.SelectedItem.Value) + "' and d.FeeCategory ='" + feecat.Value + "' and d.FinYearFK ='" + finYearId + "' and d.LedgerFk=l.ledgerpk  and DegreeCode='" + degCode + "'  and d.seattype='" + seattype + "'";
                if (ShowAllCb.Checked == true)
                {
                    ledgerQ = ledgerQ + " union select ledgername,LedgerpK,HeaderFK,0 FeeAmount,0 deductAmout,0 DeductReason,0 TotalAmount,0 RefundAmount,0 PayMode,0 fineAmount  from FM_LedgerMaster where LedgerPK not in (select ledgerFk from FT_FeeAllotDegree where BatchYear ='" + Convert.ToString(ddl_batch.SelectedItem.Value) + "' and DegreeCode='" + degCode + "' and seattype='" + seattype + "' and FeeCategory ='" + feecat.Value + "' and FinYearFK ='" + finYearId + "' )";
                }
                dsLedger.Clear();
                dsLedger = d2.select_method_wo_parameter(ledgerQ, "Text");
            }
            if (dsLedger.Tables.Count > 0 && dsLedger.Tables[0].Rows.Count > 0)
            {
                DataTable dtledger = new DataTable();
                dtledger.Columns.Add("AdmLedger");
                dtledger.Columns.Add("AdmLedgerId");
                dtledger.Columns.Add("AdmHeaderId");
                dtledger.Columns.Add("AdmPaymode");
                dtledger.Columns.Add("AdmDedRes");
                dtledger.Columns.Add("AdmFine");
                dtledger.Columns.Add("AdmRefund");
                dtledger.Columns.Add("FeeAlloted");
                dtledger.Columns.Add("Deduction");
                dtledger.Columns.Add("TotalAmt");
                for (int ledgeCnt = 0; ledgeCnt < dsLedger.Tables[0].Rows.Count; ledgeCnt++)
                {
                    DataRow drLedger = dtledger.NewRow();

                    double feeAllot = 0;
                    double.TryParse(Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["AllotAmount"]), out feeAllot);
                    allot += feeAllot;
                    double dedAmt = 0;
                    double.TryParse(Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["Deduction"]), out dedAmt);
                    conses += dedAmt;
                    double feeTotal = 0;
                    double.TryParse(Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["TotalAmount"]), out feeTotal);
                    total += feeTotal;

                    drLedger["AdmLedger"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["ledgername"]);
                    drLedger["AdmLedgerId"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["LedgerFk"]);
                    drLedger["AdmHeaderId"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["HeaderFK"]);
                    drLedger["AdmPaymode"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["PayMode"]);
                    drLedger["AdmDedRes"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["DeductReason"]);
                    drLedger["AdmFine"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["FineAmount"]);
                    drLedger["AdmRefund"] = Convert.ToString(dsLedger.Tables[0].Rows[ledgeCnt]["RefundAmount"]);
                    drLedger["FeeAlloted"] = feeAllot;
                    drLedger["Deduction"] = dedAmt;
                    drLedger["TotalAmt"] = feeTotal;
                    dtledger.Rows.Add(drLedger);
                }
                if (dtledger.Rows.Count > 0)
                {
                    gridFeeDet.DataSource = dtledger;
                    gridFeeDet.DataBind();
                    lblaltamt.Text = Convert.ToString(allot);
                    lblconsamt.Text = Convert.ToString(conses);
                    lbltotamt.Text = Convert.ToString(total);
                    trtotal.Visible = true;
                    btnFeeUpdate.Visible = true;
                    divstuddt.Visible = true;
                    trtotal.Visible = true;
                    ShowAllCb.Visible = true;
                    lblstudmsg.Visible = true;
                    lblAppnoFee.Text = appNo;
                    AddtionalInformationDiv.Visible = false;


                }
            }
            string hostname = "";
            string roomtype = "";
            if (AdmConfFormat() == 0)
            {
                AddtionalInformationDiv.Visible = true;
                StudentImage.ImageUrl = "Handler3.ashx?id=" + Session["pdfapp_no"];
                string selectquery = " select Boarding,Roll_Admit,convert(varchar(10), Adm_Date,103)as Adm_Date,Roll_No,Stud_Type from Registration where App_No ='" + Session["pdfapp_no"] + "'";
                DataSet dne = new DataSet();
                dne.Clear();
                dne = d2.select_method_wo_parameter(selectquery, "Text");
                if (dne.Tables[0].Rows.Count > 0)
                {
                    admissionNoGeneration();
                    if (admisionvalue == "1")
                    {
                        txt_AdmissionNo.Enabled = false;
                    }
                    else
                    {
                        txt_AdmissionNo.Enabled = true;
                    }
                    string boarding = d2.GetFunction("select Stage_Name from stage_master where Stage_id='" + Convert.ToString(dne.Tables[0].Rows[0]["Boarding"]) + "'");
                    if (boarding != "0")
                    {
                        txtBoardPnt.Text = boarding;
                        rbldayScTrans.SelectedIndex = rbldayScTrans.Items.IndexOf(rbldayScTrans.Items.FindByValue("1"));
                        txtBoardPnt.Visible = true;
                    }
                    else
                    {
                        txtBoardPnt.Visible = false;
                        rbldayScTrans.SelectedIndex = rbldayScTrans.Items.IndexOf(rbldayScTrans.Items.FindByValue("0"));
                        txtBoardPnt.Text = "";
                    }
                    txt_AdmissionNo.Text = Convert.ToString(dne.Tables[0].Rows[0]["Roll_Admit"]);
                    txt_AdmissionDate.Text = Convert.ToString(dne.Tables[0].Rows[0]["Adm_Date"]);
                    txt_rollno.Text = Convert.ToString(dne.Tables[0].Rows[0]["Roll_No"]);
                    ddlAdmissionStudType.SelectedIndex = ddlAdmissionStudType.Items.IndexOf(ddlAdmissionStudType.Items.FindByText(Convert.ToString(dne.Tables[0].Rows[0]["Stud_Type"])));
                    if (ddlAdmissionStudType.SelectedItem.Text == "Hostler")
                    {
                        hostname = "select hostelmasterfk,RoomfK from HT_HostelRegistration where app_no='" + Session["pdfapp_no"] + "'";
                        ds1.Clear();
                        ds1 = d2.select_method_wo_parameter(hostname, "text");
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            ddlHosHostel.SelectedIndex = ddlHosHostel.Items.IndexOf(ddlHosHostel.Items.FindByValue(Convert.ToString(ds1.Tables[0].Rows[0]["hostelmasterfk"])));
                            loadHostelRoom();
                            roomtype = d2.GetFunction("select room_type from Room_Detail r, HT_HostelRegistration h where h.RoomfK='" + Convert.ToString(ds1.Tables[0].Rows[0]["RoomfK"]) + "' and h.roomfk=r.roompk");
                            if (ddlHosRoom.Items.Count > 0)
                            {
                                ddlHosRoom.SelectedIndex = ddlHosRoom.Items.IndexOf(ddlHosRoom.Items.FindByText(Convert.ToString(roomtype)));
                            }
                            // ddlHosRoom.SelectedItem.Text = roomtype;
                        }
                    }
                }
                else
                {
                    txt_AdmissionNo.Text = "";
                    txt_AdmissionDate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    txt_rollno.Text = "";
                    ddlAdmissionStudType.SelectedIndex = 0;
                    rbldayScTrans.SelectedIndex = 0;
                    rblModeDet.SelectedIndex = 0;
                }
            }
            else if (AdmConfFormat() == 1 && DropDownList2.SelectedItem.Value == "3")
            {
                AddtionalInformationDiv.Visible = true;
                StudentImage.ImageUrl = "Handler3.ashx?id=" + Session["pdfapp_no"];
                string selectquery = " select Boarding,Roll_Admit,convert(varchar(10), Adm_Date,103)as Adm_Date,Roll_No,Stud_Type from Registration where App_No ='" + Session["pdfapp_no"] + "'";
                DataSet dne = new DataSet();
                dne.Clear();
                dne = d2.select_method_wo_parameter(selectquery, "Text");
                if (dne.Tables[0].Rows.Count > 0)
                {
                    admissionNoGeneration();
                    if (admisionvalue == "1")
                    {
                        txt_AdmissionNo.Enabled = false;
                    }
                    else
                    {
                        txt_AdmissionNo.Enabled = true;
                    }
                    string boarding = d2.GetFunction("select Stage_Name from stage_master where Stage_id='" + Convert.ToString(dne.Tables[0].Rows[0]["Boarding"]) + "'");
                    if (boarding != "0")
                    {
                        txtBoardPnt.Text = boarding;
                        rbldayScTrans.SelectedIndex = rbldayScTrans.Items.IndexOf(rbldayScTrans.Items.FindByValue("1"));
                        txtBoardPnt.Visible = true;
                    }
                    else
                    {
                        txtBoardPnt.Visible = false;
                        rbldayScTrans.SelectedIndex = rbldayScTrans.Items.IndexOf(rbldayScTrans.Items.FindByValue("0"));
                    }
                    txt_AdmissionNo.Text = Convert.ToString(dne.Tables[0].Rows[0]["Roll_Admit"]);
                    txt_AdmissionDate.Text = Convert.ToString(dne.Tables[0].Rows[0]["Adm_Date"]);
                    txt_rollno.Text = Convert.ToString(dne.Tables[0].Rows[0]["Roll_No"]);
                    ddlAdmissionStudType.SelectedIndex = ddlAdmissionStudType.Items.IndexOf(ddlAdmissionStudType.Items.FindByText(Convert.ToString(dne.Tables[0].Rows[0]["Stud_Type"])));
                    if (ddlAdmissionStudType.SelectedItem.Text == "Hostler")
                    {
                        hostname = "select hostelmasterfk,RoomfK from HT_HostelRegistration where app_no='" + Session["pdfapp_no"] + "'";
                        ds1.Clear();
                        ds1 = d2.select_method_wo_parameter(hostname, "text");
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            ddlHosHostel.SelectedIndex = ddlHosHostel.Items.IndexOf(ddlHosHostel.Items.FindByValue(Convert.ToString(ds1.Tables[0].Rows[0]["hostelmasterfk"])));
                            loadHostelRoom();
                            roomtype = d2.GetFunction("select room_type from Room_Detail r, HT_HostelRegistration h where h.RoomfK='" + Convert.ToString(ds1.Tables[0].Rows[0]["RoomfK"]) + "' and h.roomfk=r.roompk");
                            ddlHosRoom.SelectedIndex = ddlHosRoom.Items.IndexOf(ddlHosRoom.Items.FindByValue(Convert.ToString(roomtype)));
                        }
                    }
                }
                else
                {
                    txt_AdmissionNo.Text = "";
                    txt_AdmissionDate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    txt_rollno.Text = "";
                    ddlAdmissionStudType.SelectedIndex = 0;
                    rbldayScTrans.SelectedIndex = 0;
                    rblModeDet.SelectedIndex = 0;
                }
            }
            if (ddlAdmissionStudType.SelectedIndex == 0)
            {
                rbldayScTrans.Visible = true;
                // lblBoardPnt.Text = "";
                lblBoardPnt.Visible = false;
                //txtBoardPnt.Text = "";
                txtBoardPnt.Visible = false;

                if (rbldayScTrans.SelectedIndex == 1)
                {
                    // lblBoardPnt.Text = "Boarding";
                    lblBoardPnt.Visible = true;
                    // txtBoardPnt.Text = "";
                    txtBoardPnt.Visible = true;
                }

                lblHosHostel.Visible = false;
                ddlHosHostel.Visible = false;
                ddlHosRoom.Visible = false;
                lblHosRoom.Visible = false;
            }
            else
            {
                rbldayScTrans.Visible = false;
                lblBoardPnt.Visible = false;
                txtBoardPnt.Visible = false;

                lblHosHostel.Visible = true;
                ddlHosHostel.Visible = true;
                ddlHosRoom.Visible = true;
                lblHosRoom.Visible = true;
                // ddlHosHostel_IndexChange(sender, e);
            }

        }
        catch { }
    }
    public void loadprint()
    {
        try
        {
            Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4); ;

            Font font16R = new Font("Arial", 16, FontStyle.Regular);
            Font font16B = new Font("Arial", 16, FontStyle.Bold);
            Font font12R = new Font("Arial", 12, FontStyle.Regular);
            Font font12R_Ti = new Font("Times New Roman", 12, FontStyle.Regular);
            Font font12B = new Font("Arial", 12, FontStyle.Bold);
            Font font14R = new Font("Arial", 14, FontStyle.Regular);
            Font font14B = new Font("Arial", 14, FontStyle.Bold);
            Boolean saveflag = false;
            //string sign = "principal" + ddlcollege.SelectedValue.ToString() + "";
            DataSet d_value = new DataSet();
            string strquery = "select * from collinfo where college_code='" + college_code + "'";
            ds.Dispose();
            ds.Reset();
            ds = dt.select_method_wo_parameter(strquery, "Text");
            string Collegename = "";
            string aff = "";
            string address = "";
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                Collegename = ds.Tables[0].Rows[0]["Collname"].ToString();
                aff = "(Affiliated to " + ds.Tables[0].Rows[0]["university"].ToString() + ")";
                //address = ds.Tables[0].Rows[0]["address1"].ToString() + " , " + ds.Tables[0].Rows[0]["district"].ToString() + " - " + ds.Tables[0].Rows[0]["pincode"].ToString();
                address = ds.Tables[0].Rows[0]["district"].ToString().ToUpper() + " - " + ds.Tables[0].Rows[0]["pincode"].ToString();
            }


            FpSpread1.SaveChanges();
            for (int i = 0; i < FpSpread1.Sheets[0].Rows.Count; i++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread1.Sheets[0].Cells[i, 1].Value);
                if (isval == 1)
                {
                    try
                    {

                        saveflag = true;
                        string rollnonew = FpSpread1.Sheets[0].Cells[i, 0].Tag.ToString(); //app_formno
                        string name = d2.GetFunction("select stud_name from applyn where app_no ='" + rollnonew + "'");
                        string rollno = d2.GetFunction("select app_formno from applyn where app_no ='" + rollnonew + "'");

                        string deprt = Convert.ToString(ddldept.SelectedItem.Text);
                        string course = Convert.ToString(ddldegree.SelectedItem.Text);

                        string degDep = course + " (" + deprt + ")";
                        Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();
                        Gios.Pdf.PdfDocument mydocnew = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
                        Gios.Pdf.PdfPage mypdfpage1 = mydocnew.NewPage();
                        int ik = 1;
                        DateTime dt_date = Convert.ToDateTime(System.DateTime.Now.ToString("MM/dd/yyyy"));
                        string updatequery = "update applyn set admitcard_date ='" + dt_date.ToString("MM/dd/yyyy") + "' where app_no ='" + rollnonew + "'";
                        int d = dt.update_method_wo_parameter(updatequery, "Text");
                        while (ik <= 2)
                        {
                            dt_date = dt_date.AddDays(1);
                            if (dt_date.ToString("dddd") == "Sunday")
                            {
                                dt_date = dt_date.AddDays(1);
                            }
                            ik++;
                        }

                        string sign = "principal" + college_code + "";

                        string mail_id = "";
                        string stud_phoneno = "";
                        string mailidquery = "select StuPer_Id,Student_Mobile  from applyn where app_formno ='" + rollno + "'";
                        d_value.Clear();
                        d_value = dt.select_method_wo_parameter(mailidquery, "Text");
                        if (d_value.Tables[0].Rows.Count > 0)
                        {
                            mail_id = Convert.ToString(d_value.Tables[0].Rows[0]["StuPer_Id"]);
                            stud_phoneno = Convert.ToString(d_value.Tables[0].Rows[0]["Student_Mobile"]);
                        }
                        //string upadte = "update applyn set enroll_date='" + dten + "',feedate='" + dtfee + "',Is_Enroll='1' where app_formno='" + rollno + "'";
                        //int a = d2.update_method_wo_parameter(upadte, "Text");

                        int xvlaue = 40;

                        #region doc1
                        PdfArea tete = new PdfArea(mydoc, 10, 10, 570, 820);

                        PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
                        mypdfpage.Add(pr1);
                        PdfTextArea ptc = new PdfTextArea(font16B, System.Drawing.Color.Black,
                                                                      new PdfArea(mydoc, 80, 20, 500, 30), System.Drawing.ContentAlignment.MiddleCenter, Collegename);
                        mypdfpage.Add(ptc);

                        PdfTextArea ptcpot = new PdfTextArea(font12B, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, 80, 40, 500, 20), System.Drawing.ContentAlignment.MiddleCenter, "College with Potential for Excellence");
                        mypdfpage.Add(ptcpot);

                        PdfTextArea ptcAcc = new PdfTextArea(font12R, System.Drawing.Color.Black,
                                                                  new PdfArea(mydoc, 80, 60, 500, 20), System.Drawing.ContentAlignment.MiddleCenter, "Accredited with \"A\" Grade by NAAC - CGPA 3.6 out of 4.0");
                        mypdfpage.Add(ptcAcc);

                        PdfTextArea ptc02 = new PdfTextArea(font12R, System.Drawing.Color.Black,
                                                                     new PdfArea(mydoc, 80, 80, 500, 20), System.Drawing.ContentAlignment.MiddleCenter, aff);
                        mypdfpage.Add(ptc02);

                        PdfTextArea ptc01 = new PdfTextArea(font14B, System.Drawing.Color.Black,
                                                                      new PdfArea(mydoc, 80, 100, 500, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
                        mypdfpage.Add(ptc01);

                        PdfTextArea ptcdt = new PdfTextArea(font12R, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 180, 130, 380, 20), System.Drawing.ContentAlignment.MiddleRight, "Date : " + DateTime.Now.Date.ToString("dd/MM/yyyy"));
                        mypdfpage.Add(ptcdt);

                        PdfTextArea ptc0265 = new PdfTextArea(font16B, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 100, 150, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, "ADMISSION LETTER");
                        mypdfpage.Add(ptc0265);

                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
                        {
                            PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                            mypdfpage.Add(LogoImage, 25, 25, 300);
                        }

                        PdfTextArea ptcappNo = new PdfTextArea(font14B, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, xvlaue, 170, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Application No : " + rollno.ToString());
                        mypdfpage.Add(ptcappNo);

                        PdfTextArea ptcappName = new PdfTextArea(font14B, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, xvlaue, 190, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name : " + name.ToString());
                        mypdfpage.Add(ptcappName);

                        PdfTextArea ptcMsg1 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, xvlaue + 20, 230, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "       We are happy to inform you that you have been provisionally selected for admission");
                        mypdfpage.Add(ptcMsg1);

                        PdfTextArea ptcMsg11 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, xvlaue + 20, 250, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "into the " + degDep + " course. You should appear before the Principal along");
                        mypdfpage.Add(ptcMsg11);

                        PdfTextArea ptcMsg12 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, xvlaue + 20, 270, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "with your parent on or before " + Txt_callDate.Text + "  with this letter, all the certificates (in original)");
                        mypdfpage.Add(ptcMsg12);

                        PdfTextArea ptcMsg13 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                  new PdfArea(mydoc, xvlaue + 20, 290, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "mentioned in the prospectus and three (one stamp size and two passport size) photographs. ");
                        mypdfpage.Add(ptcMsg13);

                        //PdfTextArea ptcMsg14 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                        //                                         new PdfArea(mydoc, xvlaue, 310, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "");
                        //mypdfpage.Add(ptcMsg14);

                        PdfTextArea ptcMsg2 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, xvlaue + 20, 340, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "       You should, on being selected, remit the prescribed fees on the same day,  else you ");
                        mypdfpage.Add(ptcMsg2);

                        PdfTextArea ptcMsg21 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                   new PdfArea(mydoc, xvlaue + 20, 360, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "forefeit your seat.");
                        mypdfpage.Add(ptcMsg21);

                        PdfTextArea ptcPrin = new PdfTextArea(font14B, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, xvlaue, 420, 500, 20), System.Drawing.ContentAlignment.MiddleRight, "PRINCIPAL");
                        mypdfpage.Add(ptcPrin);
                        #endregion
                        #region doc2
                        PdfArea ntete = new PdfArea(mydocnew, 10, 10, 570, 820);

                        PdfRectangle npr1 = new PdfRectangle(mydocnew, ntete, Color.Black);
                        mypdfpage1.Add(npr1);
                        PdfTextArea nptc = new PdfTextArea(font16B, System.Drawing.Color.Black,
                                                                      new PdfArea(mydocnew, 80, 20, 500, 30), System.Drawing.ContentAlignment.MiddleCenter, Collegename);
                        mypdfpage1.Add(nptc);

                        PdfTextArea nptcpot = new PdfTextArea(font12B, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocnew, 80, 40, 500, 20), System.Drawing.ContentAlignment.MiddleCenter, "College with Potential for Excellence");
                        mypdfpage1.Add(nptcpot);

                        PdfTextArea nptcAcc = new PdfTextArea(font12R, System.Drawing.Color.Black,
                                                                  new PdfArea(mydocnew, 80, 60, 500, 20), System.Drawing.ContentAlignment.MiddleCenter, "Accredited with \"A\" Grade by NAAC - CGPA 3.6 out of 4.0");
                        mypdfpage1.Add(nptcAcc);

                        PdfTextArea nptc02 = new PdfTextArea(font12R, System.Drawing.Color.Black,
                                                                     new PdfArea(mydocnew, 80, 80, 500, 20), System.Drawing.ContentAlignment.MiddleCenter, aff);
                        mypdfpage1.Add(nptc02);

                        PdfTextArea nptc01 = new PdfTextArea(font14B, System.Drawing.Color.Black,
                                                                      new PdfArea(mydocnew, 80, 100, 500, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
                        mypdfpage1.Add(nptc01);

                        PdfTextArea nptcdt = new PdfTextArea(font12R, System.Drawing.Color.Black,
                                                                    new PdfArea(mydocnew, 180, 130, 380, 20), System.Drawing.ContentAlignment.MiddleRight, "Date : " + DateTime.Now.Date.ToString("dd/MM/yyyy"));
                        mypdfpage1.Add(nptcdt);

                        PdfTextArea nptc0265 = new PdfTextArea(font16B, System.Drawing.Color.Black,
                                                                    new PdfArea(mydocnew, 100, 150, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, "ADMISSION LETTER");
                        mypdfpage1.Add(nptc0265);

                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
                        {
                            PdfImage LogoImage = mydocnew.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                            mypdfpage1.Add(LogoImage, 25, 25, 300);
                        }

                        PdfTextArea nptcappNo = new PdfTextArea(font14B, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocnew, xvlaue, 170, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Application No : " + rollno.ToString());
                        mypdfpage1.Add(nptcappNo);

                        PdfTextArea nptcappName = new PdfTextArea(font14B, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocnew, xvlaue, 190, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name : " + name.ToString());
                        mypdfpage1.Add(nptcappName);

                        PdfTextArea nptcMsg1 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocnew, xvlaue + 20, 230, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "       We are happy to inform you that you have been provisionally selected for admission");
                        mypdfpage1.Add(nptcMsg1);

                        PdfTextArea nptcMsg11 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocnew, xvlaue + 20, 250, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "into the " + degDep + " course. You should appear before the Principal along");
                        mypdfpage1.Add(nptcMsg11);

                        PdfTextArea nptcMsg12 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocnew, xvlaue + 20, 270, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "with your parent on or before " + Txt_callDate.Text + "  with this letter, all the certificates (in original)");
                        mypdfpage1.Add(nptcMsg12);

                        PdfTextArea nptcMsg13 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                  new PdfArea(mydocnew, xvlaue + 20, 290, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "mentioned in the prospectus and three (one stamp size and two passport size) photographs. ");
                        mypdfpage1.Add(nptcMsg13);

                        //PdfTextArea ptcMsg14 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                        //                                         new PdfArea(mydocnew, xvlaue, 310, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "");
                        //mypdfpage1.Add(ptcMsg14);

                        PdfTextArea nptcMsg2 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocnew, xvlaue + 20, 340, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "       You should, on being selected, remit the prescribed fees on the same day,  else you ");
                        mypdfpage1.Add(nptcMsg2);

                        PdfTextArea nptcMsg21 = new PdfTextArea(font12R_Ti, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocnew, xvlaue + 20, 360, 500, 20), System.Drawing.ContentAlignment.MiddleLeft, "forefeit your seat.");
                        mypdfpage1.Add(nptcMsg21);

                        PdfTextArea nptcPrin = new PdfTextArea(font14B, System.Drawing.Color.Black,
                                                                    new PdfArea(mydocnew, xvlaue, 420, 500, 20), System.Drawing.ContentAlignment.MiddleRight, "PRINCIPAL");
                        mypdfpage1.Add(nptcPrin);
                        #endregion
                        if (!File.Exists(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg")))
                        {
                            MemoryStream memoryStream = new MemoryStream();
                            ds.Dispose();
                            ds.Reset();
                            ds = dt.select_method_wo_parameter("select principal_sign from collinfo where college_code='" + Session["collegecode"] + "' and principal_sign is not null", "Text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                byte[] file = (byte[])ds.Tables[0].Rows[0]["principal_sign"];
                                memoryStream.Write(file, 0, file.Length);
                                if (file.Length > 0)
                                {
                                    System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                    System.Drawing.Image thumb = imgx.GetThumbnailImage(400, 400, null, IntPtr.Zero);
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);

                                }
                                memoryStream.Dispose();
                                memoryStream.Close();
                            }
                        }
                        mypdfpage.SaveToDocument();
                        // mypdfpage1 = mypdfpage.CreateCopy();
                        mypdfpage1.SaveToDocument();
                        string appPath = HttpContext.Current.Server.MapPath("~");
                        if (appPath != "")
                        {
                            Response.Buffer = true;
                            Response.Clear();
                            string szPath = appPath + "/Report/";
                            string szFile = "" + rollno + ".pdf";
                            mydocnew.SaveToFile(szPath + szFile);
                        }
                        Div2.Visible = false;
                        //sendmail(mail_id, name, rollno, Collegename, new StringBuilder().Append("<br>Thank You</br>"));
                        //sendsms(stud_phoneno, rollno);

                        string Msg = "";
                        string getgroup = d2.GetFunction("select c.Course_Name+'('+dt.dept_acronym+')'  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.app_formno ='" + rollno + "'");
                        string tot = sumttoal(rollno);
                        Msg = " Application No : " + rollno + ". You are provisionally selected for " + getgroup + ". Meet the Principal with your Parent on or before " + Convert.ToString(Txt_callDate.Text) + " with original certificates. Remit the College Fees Rs." + tot + " ";
                        if (d2.GetFunction("select COLLNAME from collinfo where college_code='" + ddl_collegename.SelectedItem.Value + "'").Trim().ToUpper().Contains("JAMAL MOHAMED"))
                        {
                            Msg += " and the Hostel Fees Rs.19350 on the same day. - PRINCIPAL, JMC";
                        }
                        else
                        {
                            Msg = "Application No:" + rollno + " You are provisionally selected for " + getgroup + ". Meet the Principal with your Parent at " + ddlIntHr.SelectedItem.Text + ":" + ddlIntMin.SelectedItem.Text + " " + ddlIntMed.SelectedItem.Text + " on " + Convert.ToString(Txt_callDate.Text) + " with original certificates and DD for Rs." + Convert.ToString(txtddAmount.Text) + "(Fee) ";
                        }
                        string user_id = "";
                        string ssr = "select * from Track_Value where college_code='" + Convert.ToString(ddl_collegename.SelectedItem.Value) + "'";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(ssr, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
                        }
                        int d1 = d2.send_sms(user_id, ddl_collegename.SelectedItem.Value, usercode, stud_phoneno, Msg, "0");


                    }
                    catch
                    {
                    }
                }
            }

            FpSpread4.SaveChanges();
            if (saveflag == true)
            {
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    Response.Buffer = true;
                    Response.Clear();
                    string szPath = appPath + "/Report/";
                    string szFile = "" + ddldept.SelectedItem.Text + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    //Response.ClearHeaders();
                    //Response.ClearHeaders();
                    //Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    //Response.ContentType = "application/pdf";
                    //Response.WriteFile(szPath + szFile);

                    Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");
                    errorspan.InnerHtml = "Call Letter Generated";
                    poperrjs.Visible = true;
                }
                //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Admit Card Generate Generate Successfully\");", true);
                //errorspan.InnerHtml = "Admit Card Generate Generate Successfully";
                //poperrjs.Visible = true;
            }

        }
        catch
        {
        }
    }
    protected void cb_BoardUniv_checkedchange(object sender, EventArgs e)
    {
        txtBoardUniv.Text = "Board";
        if (cb_BoardUniv.Checked)
        {
            for (int i = 0; i < cbl_BoardUniv.Items.Count; i++)
            {
                cbl_BoardUniv.Items[i].Selected = true;
            }
            txtBoardUniv.Text = "Board(" + cbl_BoardUniv.Items.Count + ")";
        }
        else
        {
            for (int i = 0; i < cbl_BoardUniv.Items.Count; i++)
            {
                cbl_BoardUniv.Items[i].Selected = false;
            }
        }
    }
    protected void cbl_BoardUniv_SelectedIndexChanged(object sender, EventArgs e)
    {
        cb_BoardUniv.Checked = false;
        int cnt = 0;
        for (int i = 0; i < cbl_BoardUniv.Items.Count; i++)
        {
            if (cbl_BoardUniv.Items[i].Selected)
            {
                cnt++;
            }
        }
        if (cnt == cbl_BoardUniv.Items.Count)
        {
            cb_BoardUniv.Checked = true;
        }
        txtBoardUniv.Text = "Board(" + cnt + ")";
    }
    public void ddl_batch_SelectedIndexChanged(object sender, EventArgs e)
    {
        bindsem();
        loadBoardUniv();
        loadreligion();
    }
    private void loadBoardUniv()
    {
        cbl_BoardUniv.Items.Clear();
        try
        {
            string query = "   select distinct TextVal,TextCode from textvaltable t,Stud_prev_details s,applyn a where T.TextCode=S.Course_code and a.app_no=s.app_no and a.batch_year=" + Convert.ToString(ddl_batch.SelectedItem.Value) + " and a.degree_code ='" + ddldept.SelectedValue + "'  and t.college_code=" + college_code + " and Textval is not null and Textval<>'' order by Textval asc";

            DataSet dsBoardUniv = d2.select_method_wo_parameter(query, "Text");
            if (dsBoardUniv.Tables.Count > 0 && dsBoardUniv.Tables[0].Rows.Count > 0)
            {
                cbl_BoardUniv.DataSource = dsBoardUniv;
                cbl_BoardUniv.DataTextField = "textval";
                cbl_BoardUniv.DataValueField = "TextCode";
                cbl_BoardUniv.DataBind();
                for (int i = 0; i < cbl_BoardUniv.Items.Count; i++)
                {
                    cbl_BoardUniv.Items[i].Selected = true;
                }
                txtBoardUniv.Text = "Board(" + cbl_BoardUniv.Items.Count + ")";
                cb_BoardUniv.Checked = true;
            }
        }
        catch { }
    }
    protected void cbAttempt_checkedchange(object sender, EventArgs e)
    {
        txtAttempt.Text = "Attempt";
        if (cbAttempt.Checked)
        {
            for (int i = 0; i < cblAttempt.Items.Count; i++)
            {
                cblAttempt.Items[i].Selected = true;
            }
            txtAttempt.Text = "Attempt(" + cblAttempt.Items.Count + ")";
        }
        else
        {
            for (int i = 0; i < cblAttempt.Items.Count; i++)
            {
                cblAttempt.Items[i].Selected = false;
            }
        }
    }
    protected void cblAttempt_SelectedIndexChanged(object sender, EventArgs e)
    {
        cbAttempt.Checked = false;
        int cnt = 0;
        for (int i = 0; i < cblAttempt.Items.Count; i++)
        {
            if (cblAttempt.Items[i].Selected)
            {
                cnt++;
            }
        }
        if (cnt == cblAttempt.Items.Count)
        {
            cbAttempt.Checked = true;
        }
        txtAttempt.Text = "Attempt(" + cnt + ")";
    }
    private void loadAttempts()
    {
        cblAttempt.Items.Clear();
        try
        {
            //string query = "  SELECT  LedgerPK,LedgerName,L.Priority FROM FM_LedgerMaster L,Ft_feeallotdegree fd WHERE  l.LedgerMode=0 and fd.Ledgerfk=L.LedgerPk  and fd.Headerfk=l.headerfk and fd.DegreeCode=" + ddldept.SelectedValue + " and fd.BatchYear= " + txtbatch.Text.Trim() + "    AND L.CollegeCode = " + college_code + " order by case when priority is null then 1 else 0 end, priority";

            //DataSet dsAttempt = d2.select_method_wo_parameter(query, "Text");
            //if (dsAttempt.Tables.Count > 0 && dsAttempt.Tables[0].Rows.Count > 0)
            //{
            //    cblAttempt.DataSource = dsAttempt;
            //    cblAttempt.DataTextField = "LedgerName";
            //    cblAttempt.DataValueField = "LedgerPK";
            //    cblAttempt.DataBind();
            //    for (int i = 0; i < cblAttempt.Items.Count; i++)
            //    {
            //        cblAttempt.Items[i].Selected = true;
            //    }

            for (int i = 0; i < 5; i++)
            {
                cblAttempt.Items.Add((i + 1).ToString());
                //cblAttempt.Items[i].Selected = true;
            }
            txtAttempt.Text = "Attempt";
            // cbAttempt.Checked = true;
            //}
        }
        catch { }
    }
    private string returnStudDeg(string appNo)
    {
        string deg = "0";
        string degQ = string.Empty;
        if (cbAltCourse.Checked)
        {
            degQ = "select degree_code from applyn where college_code=" + college_code + " and app_no =" + appNo + "";
        }
        else
        {
            degQ = "select degree_code from applyn where college_code=" + college_code + " and app_no =" + appNo + "";
        }
        deg = d2.GetFunction(degQ).Trim();
        return deg;
    }
    protected void cbAltCourse_CheckedChanged(object sender, EventArgs e)
    {
        Button1_Click(sender, e);
    }
    public bool checkedOKInterv(out List<string> appNoList)
    {
        appNoList = new List<string>();
        bool Ok = false;
        FpSpread1.SaveChanges();
        for (int i = 0; i < FpSpread1.Sheets[0].Rows.Count; i++)
        {
            byte check = Convert.ToByte(FpSpread1.Sheets[0].Cells[i, 1].Value);
            if (check == 1)
            {
                Ok = true;
                appNoList.Add(Convert.ToString(FpSpread1.Sheets[0].Cells[i, 0].Tag));
            }
        }
        return Ok;
    }
    //private void loadNewCallLetter(List<string> appNoList)
    //{
    //    try
    //    {
    //        string colQ = "select * from collinfo where college_code='" + college_code + "'";
    //        DataSet dsCol = new DataSet();
    //        dsCol = dt.select_method_wo_parameter(colQ, "Text");
    //        string collegeName = string.Empty;
    //        string collegeCateg = string.Empty;
    //        string collegeAff = string.Empty;
    //        string collegeAdd = string.Empty;
    //        string collegePhone = string.Empty;
    //        string collegeFax = string.Empty;
    //        string collegeWeb = string.Empty;
    //        string collegeEmai = string.Empty;
    //        string collegePin = string.Empty;
    //        string City = string.Empty;
    //        if (dsCol.Tables.Count > 0 && dsCol.Tables[0].Rows.Count > 0)
    //        {
    //            collegeName = Convert.ToString(dsCol.Tables[0].Rows[0]["Collname"]);

    //            City = Convert.ToString(dsCol.Tables[0].Rows[0]["address3"]);

    //            collegeAff = "(Affiliated to " + Convert.ToString(dsCol.Tables[0].Rows[0]["university"]) + ")";
    //            collegeAdd = Convert.ToString(dsCol.Tables[0].Rows[0]["address1"]) + " , " + Convert.ToString(dsCol.Tables[0].Rows[0]["address2"]) + " , " + Convert.ToString(dsCol.Tables[0].Rows[0]["district"]) + " - " + Convert.ToString(dsCol.Tables[0].Rows[0]["pincode"]);
    //            collegePin = Convert.ToString(dsCol.Tables[0].Rows[0]["pincode"]);
    //            collegePhone = "OFFICE: " + Convert.ToString(dsCol.Tables[0].Rows[0]["phoneno"]);
    //            collegeFax = "FAX: " + Convert.ToString(dsCol.Tables[0].Rows[0]["faxno"]);
    //            collegeWeb = "Website: " + Convert.ToString(dsCol.Tables[0].Rows[0]["website"]);
    //            collegeEmai = "E-Mail: " + Convert.ToString(dsCol.Tables[0].Rows[0]["email"]);
    //            collegeCateg = "(" + Convert.ToString(dsCol.Tables[0].Rows[0]["category"]) + ")";
    //        }
    //        string prepDate = txtPrepDate.Text;//Prepared date
    //        string intDate = Txt_callDate.Text;//Interview date
    //        string intTime = ddlIntHr.SelectedItem.Text + ":" + ddlIntMin.SelectedItem.Text + " " + ddlIntMed.SelectedItem.Text;
    //        string[] prepDateAr = txtPrepDate.Text.Split('/');
    //        DateTime prepDateDt = Convert.ToDateTime(prepDateAr[1] + "/" + prepDateAr[0] + "/" + prepDateAr[2]);
    //        string[] intDateAr = Txt_callDate.Text.Split('/');
    //        DateTime intDateDt = Convert.ToDateTime(intDateAr[1] + "/" + intDateAr[0] + "/" + intDateAr[2]);
    //        string intDay = intDateDt.DayOfWeek.ToString();

    //        decimal ddAmt = 0;
    //        decimal.TryParse(txtddAmount.Text, out ddAmt);
    //        string ddAmtStr = DecimalToWords(ddAmt);
    //        string venue = txtVenue.Text;

    //        contentDiv.InnerHtml = "";

    //        foreach (string appNo in appNoList)
    //        {
    //            string degCode = returnStudDeg(appNo);
    //            string course = d2.GetFunction("select course_name+'('+Dept_name+')'+' '+type from course c,Degree d,Department dt where d.course_id=c.course_id and d.dept_code=dt.dept_code and d.degree_code='" + degCode + "'").Trim();
    //            if (course == "0")
    //            {
    //                course = string.Empty;
    //            }
    //            StringBuilder sbHtml = new StringBuilder();
    //            sbHtml.Append("<div style='padding-left:5px;height: 900px; width:650px;'><table cellpadding='0' cellspacing='0' style='text-align:center; width: 650px; padding-left:15px; font-family:Times New Roman; font-size:16px;'><tr><td rowspan='5'><img src='" + "college/Left_Logo.jpeg" + "' style='height:80px; width:80px;'/></td><td colspan='7' style='align:center'>" + collegeName + " " + collegeCateg + "</td></tr><tr><td colspan='7' style='align:center'>" + collegeAff + "</td></tr><tr><td colspan='7' style='align:center'>" + collegeAdd + "</td></tr><tr><td colspan='7' style='align:center'>" + collegePhone + " " + collegeFax + "</td></tr><tr><td colspan='7' style='align:center'>" + collegeWeb + " " + collegeEmai + "</td></tr><tr><td colspan='8'><hr style='height:2px; width:650px;'></td></tr></table>");

    //            string[] splitconlname = collegeName.Split('(');
    //            collegeName = splitconlname[0];

    //            sbHtml.Append("<table cellpadding='2' cellspacing='0' style=' width: 650px; padding-left:15px;font-family:Times New Roman; font-size:14px; '><tr><td colspan='8' style='text-align:center;' ><span style='height:30px; width:230px; border:1px solid black; font-size:16px; font-weight:bold;'>INTERVIEW LETTER</span></td></tr><tr><td colspan='8' style='text-align:right;'><span style='font-size:16px;font-weight:bold;'>" + prepDate + "</span></td></tr><tr><td colspan='8' style='align:left;'>To</td></tr><tr><td colspan='8' style='align:right;'>Dear candidate,</td></tr><tr><td colspan='8' style='align:left; text-indent:20px;'><p>You have been provisionally selected for admission to </p></td></tr><tr><td colspan='8' style='align:left;'>Name of the course: <span style='font-size:16px;font-weight:bold;'>" + course + "</span></td></tr><tr><td colspan='8' style='align:left;'>* Date & Time of Interview: <span style='font-size:16px;font-weight:bold;'>" + intDay + ", " + intDate + " at " + intTime + "</span></td></tr><tr><td colspan='8' style='align:left;'>* Venue: <span style='font-size:16px;font-weight:bold;'>" + venue.ToUpper() + "</span></td></tr><tr><td colspan='8' style='align:left;'><u>Documents to be produced at the time of interview:</u></td></tr><tr><td colspan='8' style='align:left;'><u><b># For Submission: </b></u></td></tr><tr><td colspan='8'><span style='font-weight:bold;'>* A crossed DD for Rs." + ddAmt + " (Rupees " + ddAmtStr + " only) drawn in favour of \"" + collegeName + "," + City + "\".</span></td></tr><tr><td colspan='8'><span style='font-weight:bold;font-family:courier new; font-size:11px;'>[The Demand Draft can be purchased from any Nationalised Bank. The candidate need not wait till the Interview Date to purchase the draft. He is advised to purchase the Demand Draft two or three days ahead of the interview date to have the DD ready for submission.மாணவர்களின் படிப்புக்கட்டணத்தொகைக்கான வரைவோலையினை  (டிராப்ட்) தேசியமயமாக்கப்பட்ட எந்த வங்கி மூலமாகவும் எடுக்கலாம். நேர்காணலுக்கு (இண்டர்வியூக்கு) உரிய நாளன்றுதான் வரைவோலை எடுக்க வேண்டும் என்று கருதாமல், நேர்காணல் நாளுக்கு இரண்டு மூன்று நாட்களுக்கு முன்பாகவே " + collegeName + "," + City + " என்ற பெயரில்  வரைவோலை எடுத்து வைத்துக்  கொள்ளவும்.]</span></td></tr><tr><td colspan='8'>•	10th Std Mark Statement & HSC/Equivalent Course Mark Statement along with 3 photocopies of each. (Provisional Certificate in the case of  March 2016 candidates). </td></tr><tr><td colspan='8'>•	Transfer Certificate (Original plus 3 photocopies).</td></tr><tr><td colspan='8'>•	Three recently taken Passport Size Photographs – Preferably Light coloured Background.</td></tr><tr><td colspan='8'>•	  Eligibility Certificate from the University of Madras (applicable for candidates who have qualified from other State Boards/Universities).</td></tr><tr><td colspan='8'>•	Photocopies of all the documents required to be produced for verification (see below).</td></tr><tr><td colspan='8' style='align:left;'><u><b># For Verification: </b></u></td></tr><tr><td colspan='8' style='align:left;'>•	Valid Identity Card/Document for Address Proof.</td></tr><tr><td colspan='8'>•	Birth Certificate.</td></tr><tr><td>•	Community Certificate.</td></tr><tr><td colspan='8'>•	Documents in support of Distinction/participation in Sports/Athletics/NCC/NSS.</td></tr><tr><td colspan='8'>•	Differently-abled/Sons of Ex-Servicemen shall submit relevant documents. </td></tr><tr><td colspan='8' style='text-align:right; font-weight:bold;font-size:11px;'>Principal</td></tr><tr><td colspan='8'>	Failing to turn up on the above mentioned Time & Date with necessary documents and Demand Draft (as mentioned above) would imply forfeiture of the seat allotted to you.</td></tr><tr><td colspan='8'>	Fees once paid will not be refunded.</td></tr><tr><td colspan='8' style='font-weight:bold;font-family:courier new; font-size:11px;'> 	மேற்குறிப்பிடப்பட்ட நேர்காணலுக்கு உரிய நாள் மற்றும் நேரத்தில் உரிய சான்றிதழ்களுடனும் கல்விக்கட்டணத் தொகைக்கான வரைவோலையுடனும் வரத்தவறும் மாணவர்கள் தங்களுக்கு ஒதுக்கப்பட்ட இடத்தை இழந்து விடுவர். அந்த இடம் தகுதியுள்ள வேறு ஒரு மாணவருக்கு உடனே வழங்கப்படும்.</td></tr><tr><td colspan='8' style='font-weight:bold;font-family:courier new; font-size:11px;'>	செலுத்தப்பட்ட கல்விக் கட்டணத் தொகையினைத் திருப்பித்தர இயலாது.</td></tr></table></div>");
    //            contentDiv.InnerHtml += sbHtml.ToString();

    //            string name = d2.GetFunction("select stud_name from applyn where app_no ='" + appNo + "'");
    //            string rollno = d2.GetFunction("select app_formno from applyn where app_no ='" + appNo + "'");
    //            string mail_id = d2.GetFunction("select StuPer_Id from applyn where app_no ='" + appNo + "'");
    //            string stud_phoneno = d2.GetFunction("select Student_Mobile from applyn where app_no ='" + appNo + "'");

    //            sendmail(mail_id, name, rollno, collegeName, sbHtml);
    //            sendsms(stud_phoneno, rollno);
    //        }
    //        contentDiv.Visible = true;
    //        ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
    //        errorspan.InnerHtml = "Call Letter Generated";
    //        poperrjs.Visible = true;
    //    }
    //    catch { }
    //}
    private void loadNewCallLetter(List<string> appNoList)
    {
        try
        {
            string colQ = "select * from collinfo where college_code='" + college_code + "'";
            DataSet dsCol = new DataSet();
            dsCol = dt.select_method_wo_parameter(colQ, "Text");
            string collegeName = string.Empty;
            string collegeCateg = string.Empty;
            string collegeAff = string.Empty;
            string collegeAdd = string.Empty;
            string collegePhone = string.Empty;
            string collegeFax = string.Empty;
            string collegeWeb = string.Empty;
            string collegeEmai = string.Empty;
            string collegePin = string.Empty;
            string City = string.Empty;
            if (dsCol.Tables.Count > 0 && dsCol.Tables[0].Rows.Count > 0)
            {
                collegeName = Convert.ToString(dsCol.Tables[0].Rows[0]["Collname"]);

                City = Convert.ToString(dsCol.Tables[0].Rows[0]["address3"]);

                collegeAff = "(Affiliated to " + Convert.ToString(dsCol.Tables[0].Rows[0]["university"]) + ")";
                collegeAdd = Convert.ToString(dsCol.Tables[0].Rows[0]["address1"]) + " , " + Convert.ToString(dsCol.Tables[0].Rows[0]["address2"]) + " , " + Convert.ToString(dsCol.Tables[0].Rows[0]["district"]) + " - " + Convert.ToString(dsCol.Tables[0].Rows[0]["pincode"]);
                collegePin = Convert.ToString(dsCol.Tables[0].Rows[0]["pincode"]);
                collegePhone = "OFFICE: " + Convert.ToString(dsCol.Tables[0].Rows[0]["phoneno"]);
                collegeFax = "FAX: " + Convert.ToString(dsCol.Tables[0].Rows[0]["faxno"]);
                collegeWeb = "Website: " + Convert.ToString(dsCol.Tables[0].Rows[0]["website"]);
                collegeEmai = "E-Mail: " + Convert.ToString(dsCol.Tables[0].Rows[0]["email"]);
                collegeCateg = "(" + Convert.ToString(dsCol.Tables[0].Rows[0]["category"]) + ")";
            }
            string prepDate = txtPrepDate.Text;//Prepared date
            string intDate = Txt_callDate.Text;//Interview date
            string intTime = ddlIntHr.SelectedItem.Text + ":" + ddlIntMin.SelectedItem.Text + " " + ddlIntMed.SelectedItem.Text;
            string[] prepDateAr = txtPrepDate.Text.Split('/');
            DateTime prepDateDt = Convert.ToDateTime(prepDateAr[1] + "/" + prepDateAr[0] + "/" + prepDateAr[2]);
            string[] intDateAr = Txt_callDate.Text.Split('/');
            DateTime intDateDt = Convert.ToDateTime(intDateAr[1] + "/" + intDateAr[0] + "/" + intDateAr[2]);
            string intDay = intDateDt.DayOfWeek.ToString();

            decimal ddAmt = 0;
            decimal.TryParse(txtddAmount.Text, out ddAmt);
            string ddAmtStr = DecimalToWords(ddAmt);
            string venue = txtVenue.Text;

            contentDiv.InnerHtml = "";

            foreach (string appNo in appNoList)
            {
                string queryNewvalue = "select stud_name,app_formno,parent_addressP,Streetp,cityp,parent_pincodep from applyn where app_no ='" + appNo + "'";
                string Namevalue = "";
                string Addressvalue = "";
                ds.Clear();
                ds = d2.select_method_wo_parameter(queryNewvalue, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    if (Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]).Trim() != "")
                    {
                        Namevalue = Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]) + " (Appl. ID :" + Convert.ToString(ds.Tables[0].Rows[0]["app_formno"]) + ")";
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["parent_addressP"]).Trim() != "")
                    {
                        Addressvalue = Convert.ToString(ds.Tables[0].Rows[0]["parent_addressP"]);
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["Streetp"]).Trim() != "")
                    {
                        Addressvalue = Addressvalue + ", " + Convert.ToString(ds.Tables[0].Rows[0]["Streetp"]);
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["cityp"]).Trim() != "")
                    {
                        Addressvalue = Addressvalue + ", " + Convert.ToString(ds.Tables[0].Rows[0]["cityp"]);
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodep"]).Trim() != "")
                    {
                        Addressvalue = Addressvalue + " - " + Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodep"]);
                    }
                }

                string degCode = returnStudDeg(appNo);
                string course = d2.GetFunction("select type+' '+course_name+'('+Dept_name+')' from course c,Degree d,Department dt where d.course_id=c.course_id and d.dept_code=dt.dept_code and d.degree_code='" + degCode + "'").Trim();
                if (course == "0")
                {
                    course = string.Empty;
                }
                StringBuilder sbHtml = new StringBuilder();
                sbHtml.Append("<div style='padding-left:5px;height: 900px; width:650px;'><table cellpadding='0' cellspacing='0' style='text-align:center; width: 650px; padding-left:15px; font-family:Times New Roman; font-size:16px;'><tr><td rowspan='5'><img src='" + "college/Left_Logo.jpeg" + "' style='height:80px; width:80px;'/></td><td colspan='7' style='align:center'>" + collegeName + " " + collegeCateg + "</td></tr><tr><td colspan='7' style='align:center'>" + collegeAff + "</td></tr><tr><td colspan='7' style='align:center'>" + collegeAdd + "</td></tr><tr><td colspan='7' style='align:center'>" + collegePhone + " " + collegeFax + "</td></tr><tr><td colspan='7' style='align:center'>" + collegeWeb + " " + collegeEmai + "</td></tr><tr><td colspan='8'><hr style='height:2px; width:650px;'></td></tr></table>");

                string[] splitconlname = collegeName.Split('(');
                collegeName = splitconlname[0];

                string mphilPgAppend = "<tr><td colspan='8'>•	10th Std Mark Statement & HSC/Equivalent Course Mark Statement along with 3 photocopies of each. (Provisional Certificate in the case of  March " + DateTime.Now.Year + " candidates). </td></tr>";

                string pgchk = d2.GetFunction("select Upper(c.EDU_LEVEL) from degree d, course c,department dt,applyn a where d.course_id=c.course_id and d.dept_code=dt.dept_code and d.degree_code=a.degree_code and a.app_no=" + appNo + "").Trim().ToUpper();

                if (pgchk.Trim().ToUpper() == "PG")
                {
                    mphilPgAppend = "<tr><td colspan='8'>•	10th Std Mark Statement , HSC/Equivalent Course Mark Statement, UG Mark Statement of Provisional Certificate along with 3 photocopies of each.(Provisional Certificate in the case of March " + DateTime.Now.Year + " candidates)</td></tr>";

                }

                string MphilChk = d2.GetFunction("select Upper(c.EDU_LEVEL) from degree d, course c,department dt,applyn a where d.course_id=c.course_id and d.dept_code=dt.dept_code and d.degree_code=a.degree_code and a.app_no=" + appNo + "").Trim().ToUpper();

                if (MphilChk.Trim().ToUpper() == "M.PHIL" || MphilChk.Trim().ToUpper() == "M.PHIL." || MphilChk.Trim().ToUpper() == "MPHIL" || MphilChk.Trim().ToUpper() == "MPHIL.")
                {
                    mphilPgAppend = "<tr><td colspan='8'>•	10th Std Mark Statement , HSC/Equivalent Course Mark Statement, UG Mark Statement of Provisional Certificate , PG mark statement along with 3 photocopies of each.(Provisional Certificate in the case of March " + DateTime.Now.Year + " candidates)</td></tr>";

                }



                sbHtml.Append("<table cellpadding='2' cellspacing='0' style=' width: 650px; padding-left:15px;font-family:Times New Roman; font-size:14px;text-align:justify;'><tr><td colspan='8' style='text-align:center;' ><span style='height:30px; width:230px; border:1px solid black; font-size:16px; font-weight:bold;'>INTERVIEW LETTER</span></td></tr><tr><td colspan='8' style='text-align:right;'><span style='font-size:16px;font-weight:bold;'>" + prepDate + "</span></td></tr><tr><td colspan='8' style='align:left;'>To</td></tr><tr><td colspan='8' style='align:right;'>" + Namevalue + ",</td></tr><tr><td colspan='8' style='align:right;'>" + Addressvalue + ",</td></tr><tr><td colspan='8' style='align:right;'>Dear candidate,</td></tr><tr><td colspan='8' style='align:left; text-indent:20px;'><p>You have been provisionally selected for admission to <span style='font-size:16px;font-weight:bold;'>" + course + "</span></p></td></tr><tr><td colspan='8' style='align:left;'><b>*<u> Date & Time of Interview:</u></b> <span>" + intDay + ", " + intDate + " at " + intTime + "</span></td></tr><tr><td colspan='8' style='align:left;'><b>*<u>  Venue:</u></b> <span>" + venue.ToUpper() + "</span></td></tr><tr><td colspan='8' style='align:left;'><u><b>Documents to be produced at the time of interview:</b></u></td></tr><tr><td colspan='8' style='align:left;'><u><b># For Submission: </b></u></td></tr><tr><td colspan='8'><span style='font-weight:bold;'>* A crossed DD for Rs." + ddAmt + " (Rupees " + ddAmtStr + " only) drawn in favour of \" <span style='text-transform:capitalize;'>" + collegeName + "," + City + " " + collegePin + "\"</span>.</span></td></tr><tr><td colspan='8'><span style='font-weight:bold;font-family:courier new; font-size:11px;'>[The Demand Draft can be purchased from any Nationalised Bank. The candidate need not wait till the Interview Date to purchase the draft. It is advised to purchase the Demand Draft two or three days ahead of the interview date to have the DD ready for submission.]</span></td></tr>" + mphilPgAppend + "<tr><td colspan='8'>•	Transfer Certificate (Original plus 3 photocopies).</td></tr><tr><td colspan='8'>•	Three <b>recently taken</b> Passport Size Photographs (Size: 3.5 cm x 4.5 cm) – with <b>Sky Blue Background.</b></td></tr><tr><td colspan='8'>•	<u>Soft Copy of the Photograph (as mentioned above - in JPEG Format) saved in a CD. </u></td></tr><tr><td colspan='8'>•	 Eligibility Certificate from the University of Madras (applicable for candidates who have qualified from other State Boards/Universities).</td></tr><tr><td colspan='8'>•	Photocopies of all the documents required to be produced for <b>verification (see below)</b>.</td></tr><tr><td colspan='8' style='align:left;'><u><b># For Verification: </b></u></td></tr><tr><td colspan='8' style='align:left;'>•	Aadhar Card.</td></tr><tr><td colspan='8' style='align:left;'>•	Any other valid Identity Card for Address Proof.</td></tr><tr><td colspan='8'>•	Birth Certificate.</td></tr><tr><td>•	Community Certificate.</td></tr><tr><td colspan='8'>•	Documents in support of Distinction/participation in Sports/Athletics/NCC/NSS.</td></tr><tr><td colspan='8'>•	Differently-abled/Sons of Ex-Servicemen shall submit relevant documents. </td></tr><tr><td colspan='8'>-	Failing to turn up on the above mentioned Time & Date with necessary documents and Demand Draft (as mentioned above) would imply forfeiture of the seat allotted to you.</td></tr><tr><td colspan='8'>-	Fees once paid will not be refunded.</td></tr><tr><td colspan='8' style='font-weight:bold;font-family:courier new; font-size:11px;text-align:justify;'> -	மேற்குறிப்பிடப்பட்ட நேர்காணலுக்கு உரிய நாள் மற்றும் நேரத்தில் உரிய சான்றிதழ்களுடனும் கல்விக்கட்டணத் தொகைக்கான வரைவோலையுடனும் வரத்தவறும் மாணவர்கள் தங்களுக்கு ஒதுக்கப்பட்ட இடத்தை இழந்து விடுவர். அந்த இடம் தகுதியுள்ள வேறு ஒரு மாணவருக்கு உடனே வழங்கப்படும்.</td></tr><tr><td colspan='8' style='font-weight:bold;font-family:courier new; font-size:11px; text-align:justify;'>-	செலுத்தப்பட்ட கல்விக் கட்டணத் தொகையினைத் திருப்பித்தர இயலாது.</td></tr><tr><td colspan='8' style='text-align:right; font-weight:bold;font-size:14px;'>Principal</td></tr></table></div>");
                contentDiv.InnerHtml += sbHtml.ToString();

                string name = d2.GetFunction("select stud_name from applyn where app_no ='" + appNo + "'");
                string rollno = d2.GetFunction("select app_formno from applyn where app_no ='" + appNo + "'");
                string mail_id = d2.GetFunction("select StuPer_Id from applyn where app_no ='" + appNo + "'");
                string stud_phoneno = d2.GetFunction("select Student_Mobile from applyn where app_no ='" + appNo + "'");

                sendmail(mail_id, name, rollno, collegeName, sbHtml);
                //sendsms(stud_phoneno, rollno);
                string Msg = "";
                string getgroup = d2.GetFunction("select c.Course_Name+'('+dt.dept_acronym+')'  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.app_formno ='" + rollno + "'");
                string tot = sumttoal(rollno);
                Msg = " Application No : " + rollno + ". You are provisionally selected for " + getgroup + ". Meet the Principal with your Parent on or before " + Convert.ToString(Txt_callDate.Text) + " with original certificates. Remit the College Fees Rs." + tot + " ";
                if (d2.GetFunction("select COLLNAME from collinfo where college_code='" + ddl_collegename.SelectedItem.Value + "'").Trim().ToUpper().Contains("JAMAL MOHAMED"))
                {
                    Msg += " and the Hostel Fees Rs.19350 on the same day. - PRINCIPAL, JMC";
                }
                else
                {
                    Msg = "Application No:" + rollno + " You are provisionally selected for " + getgroup + ". Meet the Principal with your Parent at " + ddlIntHr.SelectedItem.Text + ":" + ddlIntMin.SelectedItem.Text + " " + ddlIntMed.SelectedItem.Text + " on " + Convert.ToString(Txt_callDate.Text) + " with original certificates and DD for Rs." + Convert.ToString(txtddAmount.Text) + "(Fee) ";
                }
                string user_id = "";
                string ssr = "select * from Track_Value where college_code='" + Convert.ToString(ddl_collegename.SelectedItem.Value) + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(ssr, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
                }
                int d1 = d2.send_sms(user_id, ddl_collegename.SelectedItem.Value, usercode, stud_phoneno, Msg, "0");
            }
            contentDiv.Visible = true;
            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
            errorspan.InnerHtml = "Call Letter Generated";
            poperrjs.Visible = true;
        }
        catch { }
    }
    public string DecimalToWords(decimal number)
    {
        if (number == 0)
            return "Zero";

        if (number < 0)
            return "Minus " + DecimalToWords(Math.Abs(number));

        string words = "";

        int intPortion = (int)number;
        decimal fraction = (number - intPortion) * 100;
        int decPortion = (int)fraction;

        words = NumberToWords(intPortion);
        if (decPortion > 0)
        {
            words += " And ";
            words += NumberToWords(decPortion);
            words += " Paise ";
        }
        return words;
    }
    public string NumberToWords(int number)
    {
        if (number == 0)
            return "Zero";

        if (number < 0)
            return "Minus " + NumberToWords(Math.Abs(number));

        string words = "";

        if ((number / 1000000) > 0)
        {
            words += NumberToWords(number / 1000000) + " Million ";
            number %= 1000000;
        }

        if ((number / 1000) > 0)
        {
            words += NumberToWords(number / 1000) + " Thousand ";
            number %= 1000;
        }

        if ((number / 100) > 0)
        {
            words += NumberToWords(number / 100) + " Hundred ";
            number %= 100;
        }

        if (number > 0)
        {
            if (words != "")
                words += "and ";

            var unitsMap = new[] { "Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };
            var tensMap = new[] { "Zero", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };

            if (number < 20)
                words += unitsMap[number];
            else
            {
                words += tensMap[number / 10];
                if ((number % 10) > 0)
                    words += " " + unitsMap[number % 10];
            }
        }

        return words;
    }
    private byte callLetterFormat()
    {
        //value 0 - Jamal, value 1 - New College
        byte format = 0;
        string callLetterQ = "select LinkValue from New_InsSettings where LinkName='AdmissionCallLetterSetting' and user_code ='" + user_code + "' ";
        format = Convert.ToByte(d2.GetFunction(callLetterQ).Trim());
        return format;
    }
    private byte AdmConfFormat()
    {
        //Format value 0 - Admit, Format value 1 - Wait to Admit
        byte format = 0;
        string AdmConQ = "select LinkValue from New_InsSettings where LinkName='AdmissionConfirmSetting' and user_code ='" + user_code + "' and college_code ='" + ddl_collegename.SelectedItem.Value + "' ";
        format = Convert.ToByte(d2.GetFunction(AdmConQ).Trim());
        return format;
    }
    private byte ShowFeeStruct()
    {
        //Format value 0 - Dont show, Format value 1 - Show Ledgers in grid
        byte format = 0;
        string ShowLedQ = "select LinkValue from New_InsSettings where LinkName='AdmissionShowFeeStructure' and user_code ='" + user_code + "' ";
        format = Convert.ToByte(d2.GetFunction(ShowLedQ).Trim());
        return format;
    }
    protected void btnFeeUpdate_Click(object sender, EventArgs e)
    {
        try
        {
            ListItem feecat = getFeecategoryNEW(ddl_sem.SelectedItem.Value);
            string getfinid = d2.getCurrentFinanceYear(user_code, ddl_collegename.SelectedItem.Value);
            string app_no = lblAppnoFee.Text;
            for (int gRow = 0; gRow < gridFeeDet.Rows.Count; gRow++)
            {
                Label hdrid = (Label)gridFeeDet.Rows[gRow].FindControl("lblAdmHeaderId");
                Label lgrid = (Label)gridFeeDet.Rows[gRow].FindControl("lblAdmLedgerId");
                TextBox feeamt = (TextBox)gridFeeDet.Rows[gRow].FindControl("txtAdmFeeAllot");
                TextBox dedamt = (TextBox)gridFeeDet.Rows[gRow].FindControl("txtAdmDeduc");
                Label dedrea = (Label)gridFeeDet.Rows[gRow].FindControl("lblAdmDedRes");
                Label totamt = (Label)gridFeeDet.Rows[gRow].FindControl("lblAdmFeeTotal");
                Label finamt = (Label)gridFeeDet.Rows[gRow].FindControl("lblAdmFine");
                Label paymo = (Label)gridFeeDet.Rows[gRow].FindControl("lblAdmPaymode");
                Label refamt = (Label)gridFeeDet.Rows[gRow].FindControl("lblAdmRefund");

                string headerfk = hdrid.Text;
                string leadgerfk = lgrid.Text;
                string feeamount = feeamt.Text;
                string deduct = dedamt.Text;
                string deductrea = dedrea.Text;
                string totalamount = totamt.Text;
                try
                {
                    totalamount = (Convert.ToDouble(feeamount) - Convert.ToDouble(deduct)).ToString();
                }
                catch { }
                string finamount = finamt.Text;
                string refund = refamt.Text;
                string feecatg = feecat.Value;
                textcode = feecatg;
                string paymode = paymo.Text;
                bool check = false;
                if (ShowAllCb.Checked == true)
                {
                    if (totalamount.Trim() != "0" && feeamount.Trim() != "0")
                    {
                        check = true;
                    }
                }
                else
                {
                    check = true;
                }
                if (check == true)
                {
                    string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + textcode + "')  and App_No in('" + app_no + "')) update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='1',FeeAmount='" + feeamount + "',DeductAmout='" + deduct + "',DeductReason='" + deductrea + "',FromGovtAmt='0',TotalAmount='" + totalamount + "',RefundAmount='" + refund + "',IsFeeDeposit='0',FeeAmountMonthly='',PayMode='" + paymode + "',PayStartDate='',PaidStatus='0',DueDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',DueAmount='0',FineAmount='" + finamount + "',BalAmount=" + totalamount + " - isnull(PaidAmount,0) where LedgerFK in('" + leadgerfk + "') and HeaderFK in('" + headerfk + "') and FeeCategory in('" + feecatg + "') and App_No in('" + app_no + "') else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1," + app_no + ",'" + leadgerfk + "','" + headerfk + "','" + feeamount + "','" + deduct + "'," + deductrea + ",'0','" + totalamount + "','" + refund + "','0','','" + paymode + "','" + feecatg + "','','0','','0','" + finamount + "','" + totalamount + "','" + getfinid + "')";
                    int res = dt.update_method_wo_parameter(insupdquery, "text");

                    string upChallanQ = "if exists (select ChallanNo  from ft_challandet where isnull(isconfirmed,0)=0 and feecategory=" + feecatg + " and app_no=" + app_no + " and Headerfk=" + headerfk + " and Ledgerfk=" + leadgerfk + " and Finyearfk=" + getfinid + ") update ft_challandet set TakenAmt=" + totalamount + ",FeeAmount=" + totalamount + "  where isnull(isconfirmed,0)=0 and feecategory=" + feecatg + " and app_no=" + app_no + " and Headerfk=" + headerfk + " and Ledgerfk=" + leadgerfk + " and Finyearfk=" + getfinid + " ";
                    int res2 = d2.update_method_wo_parameter(upChallanQ, "Text");
                }
            }
            string dayscholormess = "";
            if (cb_IncDayscMess.Checked == true)
            {
                dayscholormess = "1";
            }
            else
            {
                dayscholormess = "0";
            }

            string updatedayscholormess = " update Registration set IsdayscholorMess='" + dayscholormess + "' where App_No='" + app_no + "'";
            int reg3 = d2.update_method_wo_parameter(updatedayscholormess, "Text");
        }
        catch { }
        errorspan.InnerHtml = "Updated Successfully";
        poperrjs.Visible = true;
    }
    protected void cbCounselling_CheckedChange(object sender, EventArgs e)
    {
        txtCounsellingNo.Text = "";
        txtCounsellingDt.Text = DateTime.Now.ToString("dd/MM/yyyy");
        if (cbCounselling.Checked == false)
        {
            txtCounsellingNo.Enabled = false;
            txtCounsellingDt.Enabled = false;
        }
        else
        {
            txtCounsellingNo.Enabled = true;
            txtCounsellingDt.Enabled = true;
        }
        ViewUpdateDiv();
    }
    protected void rbldayScTrans_IndexChange(object sender, EventArgs e)
    {
        // lblBoardPnt.Text = "";
        lblBoardPnt.Visible = false;
        //txtBoardPnt.Text = "";
        txtBoardPnt.Visible = false;

        if (rbldayScTrans.SelectedIndex == 1)
        {
            // lblBoardPnt.Text = "Boarding";
            lblBoardPnt.Visible = true;
            // txtBoardPnt.Text = "";
            txtBoardPnt.Visible = true;
        }
        ViewUpdateDiv();
    }
    protected void ddlHosHostel_IndexChange(object sender, EventArgs e)
    {
        loadHostelRoom();
        ViewUpdateDiv();
    }
    public void loadHostel(string Mem)
    {
        try
        {
            ddlHosHostel.Items.Clear();
            string Q = "select HostelName,HostelMasterPK  from HM_HostelMaster where HostelType in (" + Mem + ",0) ";
            DataSet dsHost = new DataSet();
            dsHost = d2.select_method_wo_parameter(Q, "Text");
            if (dsHost.Tables.Count > 0 && dsHost.Tables[0].Rows.Count > 0)
            {
                ddlHosHostel.DataSource = dsHost;
                ddlHosHostel.DataTextField = "HostelName";
                ddlHosHostel.DataValueField = "HostelMasterPK";
                ddlHosHostel.DataBind();
            }
        }
        catch { }
        ListItem ls = new ListItem("Select", "-1");
        ddlHosHostel.Items.Insert(0, ls);
    }
    public void loadHostelRoom()
    {
        try
        {
            ddlHosRoom.Items.Clear();
            if (ddlHosHostel.Items.Count > 0)
            {
                string Q1 = "select HostelBuildingFK  from HM_HostelMaster where HostelMasterPK ='" + ddlHosHostel.SelectedValue + "'";
                DataSet dsHostPk = new DataSet();
                dsHostPk = d2.select_method_wo_parameter(Q1, "Text");
                if (dsHostPk.Tables.Count > 0 && dsHostPk.Tables[0].Rows.Count > 0)
                {
                    string Q = "select distinct Room_type from Room_Detail r,Building_Master b where r.Building_Name =b.Building_Name and b.Code in (" + Convert.ToString(dsHostPk.Tables[0].Rows[0][0]) + ") ";
                    DataSet dsHost = new DataSet();
                    dsHost = d2.select_method_wo_parameter(Q, "Text");
                    if (dsHost.Tables.Count > 0 && dsHost.Tables[0].Rows.Count > 0)
                    {
                        ddlHosRoom.DataSource = dsHost;
                        ddlHosRoom.DataTextField = "Room_type";
                        ddlHosRoom.DataValueField = "Room_type";
                        ddlHosRoom.DataBind();
                    }
                }
            }
        }
        catch { }
        ListItem ls = new ListItem("Select", "-1");
        ddlHosRoom.Items.Insert(0, ls);
    }
    protected void ddlAdmissionStudType_IndexChange(object sender, EventArgs e)
    {
        cb_IncDayscMess.Checked = false;
        cb_IncDayscMess.Visible = false;
        if (ddlAdmissionStudType.SelectedIndex == 0)
        {
            cb_IncDayscMess.Visible = true;
            rbldayScTrans.Visible = true;
            rbldayScTrans_IndexChange(sender, e);
            //lblBoardPnt.Visible = false;
            //txtBoardPnt.Visible = false;

            lblHosHostel.Visible = false;
            ddlHosHostel.Visible = false;
            ddlHosRoom.Visible = false;
            lblHosRoom.Visible = false;
        }
        else
        {
            rbldayScTrans.Visible = false;
            lblBoardPnt.Visible = false;
            txtBoardPnt.Visible = false;

            lblHosHostel.Visible = true;
            ddlHosHostel.Visible = true;
            ddlHosRoom.Visible = true;
            lblHosRoom.Visible = true;
            ddlHosHostel_IndexChange(sender, e);
        }
        ViewUpdateDiv();
    }
    public void ViewUpdateDiv()
    {
        //photo_div.Visible = true;
        if (cbpersonal.Checked == true)
        {
            panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
            coursedetails.Visible = true;
            ugtotaldiv.Visible = true;
            Academicinfo.Visible = true;
            Button6.Visible = true;
        }
        else
        {
            panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
            coursedetails.Visible = false;
            ugtotaldiv.Visible = false;
            Academicinfo.Visible = false;
            Button6.Visible = false;
        }
    }
    private bool isFinanceLink()
    {
        bool format = false;
        string ShowFinQ = "select LinkValue from New_InsSettings where LinkName='IncludeFinanceLinkInAdmission' and user_code ='" + user_code + "' ";
        format = Convert.ToByte(d2.GetFunction(ShowFinQ).Trim()) == 1 ? true : false;
        return format;
    }
    //Last modified by Idhris 13-07-2016
    protected void DropDownList2_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (DropDownList2.SelectedItem.Text == "Fee Paid")
        {
            btn_ch_gen.Visible = false;
            btnconform.Visible = false;
            buttnleft.Visible = false;
        }
        else
        {
            btn_ch_gen.Visible = false;
            btnconform.Visible = false;
            buttnleft.Visible = true;
        }

        if (DropDownList2.SelectedItem.Value == "1")
        {
            btnSendSmsOpenPop.Visible = true;
            Button9.Visible = true;
            buttnleft.Visible = true;
        }
        else
        {
            btnSendSmsOpenPop.Visible = false;
            Button9.Visible = false;
            buttnleft.Visible = false;
        }
    }
    public void sendsmsnew(string number, string app, int caller)
    {
        try
        {
            string mobil = d2.GetFunction("select app_formno from applyn where app_no ='" + app + "'");
            string Course = d2.GetFunction("select (c.Course_Name +' - '+dt.Dept_Name) as Department from applyn a,degree d,Department dt,Course c Where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.app_no ='" + app + "'");
            string Msg = "Dear Candidate,Your application no:" + mobil + " and you are successfully admitted in " + Course + " in jamal mohamed college,Thank you.";
            if (caller == 1)
            {
                Msg = txt_SmsMsgPop.Text.Trim();
            }
            string Mobile_no = Convert.ToString(number);
            string user_id = "";
            string SenderID = "";
            string Password = "";
            string todaydate = System.DateTime.Now.ToString("dd/MM/yyyy");
            string[] splitdate = todaydate.Split('/');
            DateTime dt1 = Convert.ToDateTime(splitdate[1] + "/" + splitdate[0] + "/" + splitdate[2]);
            string ssr = "select * from Track_Value where college_code='" + college_code + "'";
            ds.Clear();
            ds = dt.select_method_wo_parameter(ssr, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
            }
            if (user_id.Trim() != "")
            {
                string getval = dt.GetUserapi(user_id);
                string[] spret = getval.Split('-');
                if (spret.GetUpperBound(0) == 1)
                {

                    SenderID = spret[0].ToString();
                    Password = spret[0].ToString();

                }
                string strpath = "http://dnd.airsmsmarketing.info/api/sendmsg.php?user=" + SenderID + "&pass=" + Password + "&sender=" + SenderID + "&phone=" + Mobile_no + "&text=" + Msg + "&priority=ndnd&stype=normal";
                string isst = "0";

                smsreport(strpath, isst, dt1, Mobile_no, Msg);
            }

        }
        catch
        {

        }
    }
    protected void btnfeesave_Click(object sender, EventArgs e)
    {
        try
        {
            string firstLedgercode = "";
            string firstLedgerAmount = "";
            string firstLedgercode1 = "";
            string firstLedgerAmount1 = "";
            string concat = "";
            if (ddlAdmLedge1.SelectedItem.Text != "Select")
            {
                firstLedgercode = Convert.ToString(ddlAdmLedge1.SelectedItem.Value);
                firstLedgerAmount = Convert.ToString(txtAdmledge1Amt.Text);
                concat = firstLedgercode + ":" + firstLedgerAmount;
            }

            if (ddlAdmLedge2.SelectedItem.Text != "Select")
            {
                firstLedgercode1 = Convert.ToString(ddlAdmLedge2.SelectedItem.Value);
                firstLedgerAmount1 = Convert.ToString(txtAdmledge2Amt.Text);
                concat = concat + "/" + firstLedgercode1 + ":" + firstLedgerAmount1;
            }

            string insertupdaquery = "if exists (select * from Master_Settings where settings='LedgerSettingValue' and usercode ='" + user_code + "') update Master_Settings set value ='" + concat + "' where settings='LedgerSettingValue' and usercode ='" + user_code + "' else insert into Master_Settings (usercode,settings,value) values ('" + user_code + "','LedgerSettingValue','" + concat + "')";
            int insetquery = d2.update_method_wo_parameter(insertupdaquery, "Text");
            errorspan.InnerHtml = "Saved Successfully";
            poperrjs.Visible = true;
        }
        catch
        {

        }
    }
    protected void cbAdmLedgeFee_Change(object sender, EventArgs e)
    {
        try
        {
            if (cbAdmLedgeFee.Checked == true)
            {

                string Getvalue = d2.GetFunction("select value from Master_Settings where settings='LedgerSettingValue' and usercode ='" + user_code + "'");
                if (Getvalue.Trim() != "0" && Getvalue.Trim() != "")
                {
                    string[] splitnew = Getvalue.Split('/');
                    if (splitnew.Length > 0)
                    {
                        for (int row = 0; row <= splitnew.GetUpperBound(0); row++)
                        {
                            if (row == 0)
                            {
                                string[] splitSecond = splitnew[row].Split(':');
                                if (splitSecond.Length > 0)
                                {
                                    ddlAdmLedge1.SelectedIndex = ddlAdmLedge1.Items.IndexOf(ddlAdmLedge1.Items.FindByValue(splitSecond[0]));
                                    txtAdmledge1Amt.Text = Convert.ToString(splitSecond[1]);
                                }
                            }

                            if (row == 1)
                            {
                                string[] splitSecond = splitnew[row].Split(':');
                                if (splitSecond.Length > 0)
                                {
                                    ddlAdmLedge2.SelectedIndex = ddlAdmLedge2.Items.IndexOf(ddlAdmLedge2.Items.FindByValue(splitSecond[0]));
                                    txtAdmledge2Amt.Text = Convert.ToString(splitSecond[1]);
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                txtAdmledge1Amt.Text = string.Empty;
                txtAdmledge2Amt.Text = string.Empty;
                loadAdmLedger1();
                loadAdmLedger2();
            }
        }
        catch
        {

        }
    }
    public string sumttoal(string applno)
    {
        string total = "";
        string textcode = "";
        // string link = "select LinkValue from InsSettings where LinkName='Current Financial Year' and college_code='" + ddl_collegename.SelectedItem.Value + "'";
        string getfinid = d2.getCurrentFinanceYear(user_code, Convert.ToString(ddl_collegename.SelectedItem.Value));
        string seattype = d2.GetFunction("select TextCode from TextValTable where TextCriteria ='Seat' and college_code  ='" + ddl_collegename.SelectedItem.Value + "'");
        if (getfinid.Trim() != "" && getfinid.Trim() != "0" && seattype.Trim() != "" && seattype.Trim() != "0")
        {
            string linkvalue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + user_code + "' and college_code ='" + ddl_collegename.SelectedItem.Value + "'");
            if (linkvalue == "0")
            {
                textcode = d2.GetFunction("select TextCode from textvaltable where TextCriteria = 'FEECA'and textval like '1 Semester' and textval not like '-1%' and college_code ='" + ddl_collegename.SelectedItem.Value + "' order by textval asc");

            }
            else
            {
                textcode = d2.GetFunction("select TextCode from textvaltable where TextCriteria = 'FEECA'and textval like '1 Year' and textval not like '-1%' and college_code ='" + ddl_collegename.SelectedItem.Value + "'");
            }
            string GetDegreeCodeQuery = "";
            if (cbAltCourse.Checked == true)
            {
                GetDegreeCodeQuery = d2.GetFunction("select  Alternativedegree_code  from applyn where app_formno ='" + applno + "'");
            }
            else
            {
                GetDegreeCodeQuery = d2.GetFunction("select Degree_code from applyn where app_formno ='" + applno + "'");
            }
            string qur = d2.GetFunction("select SUM(TotalAmount) from FT_FeeAllotDegree where DegreeCode='" + GetDegreeCodeQuery + "' and BatchYear ='" + Convert.ToString(ddl_batch.SelectedItem.Value) + "' and SeatType ='" + seattype + "' and FeeCategory ='" + textcode + "' and FinYearFK ='" + getfinid + "'");
            if (qur.Trim() != "0" && qur.Trim() != "")
            {
                total = qur.ToString();
            }

        }

        return total;
    }
    protected void Okay_clcik(object sender, EventArgs e)
    {
        List<string> appnolist = new List<string>();
        if (checkedOKInterv(out appnolist))
        {
            if (callLetterFormat() == 0)
            {
                loadprint();
            }
            else if (callLetterFormat() == 1)
            {
                loadNewCallLetter(appnolist);
            }
            Div2.Visible = false;
        }
        else
        {
            errorspan.InnerHtml = "No Student Selected";
            poperrjs.Visible = true;
        }

    }
    protected void Cancel_clcik(object sender, EventArgs e)
    {
        Div2.Visible = false;
    }
    public void btn_calltr_click2(object sender, EventArgs e)
    {
        Txt_callDate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        Txt_callDate.Attributes.Add("readonly", "readonly");
        txtPrepDate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txtPrepDate.Attributes.Add("readonly", "readonly");
        Div2.Visible = true;
        ddlIntMin.Items.Clear();
        for (int i = 0; i < 60; i++)
        {
            string iv = i.ToString();
            if (i.ToString().Length == 1)
                iv = "0" + i;
            ListItem lst = new ListItem(iv, i.ToString());
            ddlIntMin.Items.Add(lst);
        }
        ddlIntMin.SelectedIndex = 0;
        ddlIntHr.SelectedIndex = 0;
        ddlIntMed.SelectedIndex = 0;
        txtVenue.Text = "";
        txtddAmount.Text = "0";

        //For different formats
        Label10.Visible = false;
        Label6.Text = "Date";
        txtPrepDate.Visible = false;
        Label13.Visible = false;
        ddlIntHr.Visible = false;
        ddlIntMed.Visible = false;
        ddlIntMin.Visible = false;
        Label11.Visible = false;
        txtVenue.Visible = false;
        Label12.Visible = false;
        txtddAmount.Visible = false;
        if (callLetterFormat() == 0)
        {
            //Jamal
            Label6.Text = "Date";
            txtVenue.Text = "-";
        }
        else if (callLetterFormat() == 1)
        {
            //New College
            Label10.Visible = true;
            Label6.Text = "Interview Date";
            txtPrepDate.Visible = true;
            Label13.Visible = true;
            ddlIntHr.Visible = true;
            ddlIntMed.Visible = true;
            ddlIntMin.Visible = true;
            Label11.Visible = true;
            txtVenue.Visible = true;
            Label12.Visible = true;
            txtddAmount.Visible = true;
        }
    }
    //sudhagar added 21-05
    protected void cbpersonal_Changed(object sender, EventArgs e)
    {
        if (cbpersonal.Checked == true)
        {
            panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
            coursedetails.Visible = true;
            ugtotaldiv.Visible = true;
            Academicinfo.Visible = true;
            Button6.Visible = true;
        }
        else
        {
            panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
            coursedetails.Visible = false;
            ugtotaldiv.Visible = false;
            Academicinfo.Visible = false;
            Button6.Visible = false;
        }
    }
    #region SemAndYear Setting
    protected string feecatValue(string collegecode, string usercode) // Modify jairam 28/06/2016
    {
        string semval = "";
        string type = "";
        string value = "";
        try
        {

            string strtype = d2.GetFunction("select LinkValue from New_InsSettings where college_code='" + collegecode + "' and LinkName='Fee Yearwise' And user_code = '" + usercode + "'");
            if (strtype == "1")
                type = "Yearly";
            else
                type = "Semester";

            if (type == "Yearly")
            {
                string value_NEw = newfunction(ddl_sem.SelectedItem.Text);
                semval = "" + value_NEw + " Year";
            }
            else if (type == "Semester")
            {
                semval = "" + ddl_sem.SelectedItem.Text + " Semester";
            }

            if (semval != "" && semval != null)
            {
                value = d2.GetFunction("select TextCode from textvaltable where TextCriteria='FEECA' and textval='" + semval + "' and college_code='" + collegecode + "'");
            }

        }
        catch { }
        return value;
    }
    #endregion
    public void btn_pdf_Click(object sender, EventArgs e)
    {
        applicationPdfFormateRights();
        if (formatevalue == "0")
        {
            pdfapplication();
        }

    }
    public void pdfapplication()
    {
        try
        {
            string checkvalue = "";
            DAccess2 da = new DAccess2();
            Gios.Pdf.PdfDocument mydocument = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
            //Gios.Pdf.PdfDocument mydocument = null;
            // mydocument.PageCount = 0;
            Gios.Pdf.PdfPage mypdfpage = mydocument.NewPage();
            Gios.Pdf.PdfPage mypdfpage1 = mydocument.NewPage();
            Font header = new Font("Arial", 15, FontStyle.Bold);
            Font header1 = new Font("Arial", 14, FontStyle.Bold);
            Font Fonthead = new Font("Arial", 12, FontStyle.Bold);
            Font Fontbold1 = new Font("Times New Roman", 10, FontStyle.Bold);
            Font Fontbold2 = new Font("Times New Roman", 9, FontStyle.Bold);
            Font Fonttimes = new Font("Times New Roman", 10, FontStyle.Regular);
            Font Fontsmall = new Font("Arial", 9, FontStyle.Regular);
            Font FontsmallBold = new Font("Arial", 10, FontStyle.Bold);
            Font fontitalic = new Font("Arial", 9, FontStyle.Italic);
            Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
            FpSpread3.SaveChanges();
            string spread = "";
            for (int i = 0; i < FpSpread3.Sheets[0].RowCount; i++)
            {
                checkvalue = Convert.ToString(FpSpread3.Sheets[0].Cells[i, 1].Value);

                if (checkvalue == "1")
                {
                    mypdfpage = mydocument.NewPage();
                    mypdfpage1 = mydocument.NewPage();
                    string app_no = Convert.ToString(FpSpread3.Sheets[0].Cells[Convert.ToInt32(i), 0].Tag);
                    Session["pdfapp_no"] = Convert.ToString(app_no);

                    string strquery = "Select * from collinfo where college_code='" + ddl_collegename.SelectedItem.Value + "'";
                    DataSet ds = da.select_method_wo_parameter(strquery, "Text");
                    string university = "";
                    string collname = "";
                    string address1 = "";
                    string address2 = "";
                    string address3 = "";
                    string pincode = "";
                    string affliated = "";
                    if (ds.Tables[0].Rows.Count > 0)
                    {

                        collname = ds.Tables[0].Rows[0]["collname"].ToString();
                        address1 = ds.Tables[0].Rows[0]["address1"].ToString();
                        address2 = ds.Tables[0].Rows[0]["address2"].ToString();
                        address3 = ds.Tables[0].Rows[0]["address3"].ToString();
                        pincode = ds.Tables[0].Rows[0]["pincode"].ToString();
                        affliated = ds.Tables[0].Rows[0]["affliatedby"].ToString();

                    }
                    string query = "select IsExService,parentF_Mobile,Degree_Code,bldgrp,parent_income,emailp,mother,motherocc,mIncome,parentM_Mobile,emailM,guardian_name,guardian_mobile,emailg,aadharno,place_birth,app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name,sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,parent_occu,mother_tongue,religion,citizen,community,caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet from applyn a where a.app_no='" + Convert.ToString(Session["pdfapp_no"]) + "'";
                    query = query + " select instaddress,course_entno,course_code,university_code,Institute_name,percentage,instaddress,medium,branch_code ,Part1Language,Part2Language,Vocational_stream,isgrade,uni_state,registration_no,type_semester,majorallied_percent,major_percent,type_major,tancet_mark from Stud_prev_details where app_no ='" + Convert.ToString(Session["pdfapp_no"]) + "' ";
                    query = query + " select * from perv_marks_history ";
                    ds1.Clear();
                    ds1 = dt.select_method_wo_parameter(query, "text");
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        int left1 = 1;
                        int left2 = 225;
                        int left4 = 470;
                        string[] split = collname.Split('(');

                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/left_logo.jpg")))
                        {
                            PdfImage LogoImage = mydocument.NewImage(HttpContext.Current.Server.MapPath("~/college/left_logo.jpg"));
                            mypdfpage.Add(LogoImage, 20, 40, 250);

                        }
                        int coltop = 15;
                        PdfTextArea ptc = new PdfTextArea(FontsmallBold, System.Drawing.Color.Black,
                                                                         new PdfArea(mydocument, 20, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Application No:  " + Convert.ToString(ds1.Tables[0].Rows[0]["app_formno"]) + "");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                         new PdfArea(mydocument, 400, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Registration No:" + Convert.ToString(ds1.Tables[0].Rows[0]["app_formno"]) + "");
                        mypdfpage.Add(ptc);
                        coltop = coltop + 10;
                        ptc = new PdfTextArea(fontitalic, System.Drawing.Color.Black,
                                                                        new PdfArea(mydocument, 400, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "(To be allotted by the College Office)");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 10;
                        ptc = new PdfTextArea(header, System.Drawing.Color.Black,
                                                                           new PdfArea(mydocument, -40, coltop, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, Convert.ToString(split[0]));
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fonthead, System.Drawing.Color.Black,
                                                                         new PdfArea(mydocument, 80, coltop - 2, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, Convert.ToString("(Autonomous)"));
                        mypdfpage.Add(ptc);

                        coltop = coltop + 10;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                new PdfArea(mydocument, -20, coltop, 650, 50), System.Drawing.ContentAlignment.MiddleCenter, address1 + " , " + address2 + " , " + address3 + " - " + pincode + ".  INDIA");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 35;
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                new PdfArea(mydocument, -20, coltop - 20, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, affliated);
                        mypdfpage.Add(ptc);

                        coltop = coltop + 10;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "APPLICATION FOR ADMISSION");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "U.G.COURSES - (2016-19)");
                        mypdfpage.Add(ptc);

                        string Timing = "";
                        if (Convert.ToString(Session["college_Code"]) == "13")
                        {
                            Timing = "(SHIFT - I : 8.30 AM - 1.30 PM)";
                        }
                        if (Convert.ToString(Session["college_Code"]) == "14")
                        {
                            Timing = "(SHIFT - II : 2.15 PM - 6.40 PM)";
                        }
                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, Timing);
                        mypdfpage.Add(ptc);

                        ////////photo/////////
                        string imgPhoto = string.Empty;
                        string appformno = Convert.ToString(ds1.Tables[0].Rows[0]["app_formno"]);
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/Upload/ApplicantPhoto/" + appformno + ".jpg")))
                        {
                            imgPhoto = HttpContext.Current.Server.MapPath("~/Upload/ApplicantPhoto/" + appformno + ".jpg");
                        }
                        if (imgPhoto.Trim() == string.Empty)
                        {
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                    new PdfArea(mydocument, left2, 40, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "Affix");
                            mypdfpage.Add(ptc);

                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocument, left2, 50, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "Passport size");
                            mypdfpage.Add(ptc);


                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                   new PdfArea(mydocument, left2, 60, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "photograph");
                            mypdfpage.Add(ptc);
                        }
                        else
                        {
                            //if (File.Exists(HttpContext.Current.Server.MapPath("~/college/" + sign + ".jpeg")))
                            //{
                            try
                            {
                                PdfImage studimg = mydocument.NewImage(imgPhoto);
                                mypdfpage.Add(studimg, 460, 50, 250);
                            }
                            catch { }
                            //}
                        }

                        coltop = coltop + 40;
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "[Please read the Prospectus carefully before filling up the application form. Use CAPITAL LETTERS only]");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 35;
                        left1 = 15;
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "COURSE APPLIED FOR");
                        mypdfpage.Add(ptc);
                        string courseid = d2.GetFunction("select c.Course_Name from Degree d,course c where Degree_Code='" + Convert.ToString(ds1.Tables[0].Rows[0]["Degree_Code"]) + "' and d.Course_Id=c.Course_Id");
                        string deptname = d2.GetFunction("select Dept_Name from Degree d,Department dd where Degree_Code='" + Convert.ToString(ds1.Tables[0].Rows[0]["Degree_Code"]) + "' and d.Dept_Code=dd.Dept_Code");
                        left1 = 140;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + courseid + "-" + deptname + "");
                        mypdfpage.Add(ptc);


                        //ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                        //                                     new PdfArea(mydocument, left1 - 90, coltop + 30, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(Session["gradutation"]) + "-" + Convert.ToString(Session["course"]) + "");
                        //mypdfpage.Add(ptc);



                        //ptc = new PdfTextArea(fontitalic, System.Drawing.Color.Black,
                        //                                      new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "* Subject to approval of affiliation from the University of Madras");
                        //mypdfpage.Add(ptc);

                        left1 = 15;

                        coltop = coltop + 25;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1, coltop + 15, 600, 50), System.Drawing.ContentAlignment.TopLeft, "PART -I LANGUAGE");
                        mypdfpage.Add(ptc);



                        coltop = coltop + 50;

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "For office use:");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 30;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, 20, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Admitted in   : _________________________________________");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                            new PdfArea(mydocument, 295, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "on  ");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                            new PdfArea(mydocument, 310, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, " _____________________");
                        mypdfpage.Add(ptc);


                        left4 = 475;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left4, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "AT / BT /NME");
                        mypdfpage.Add(ptc);

                        left1 = 20;
                        coltop = coltop + 32;
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1, coltop - 5, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Allied - 1         : ____________________________________");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, 275, coltop - 5, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Allied - 2     : ________________________________________");
                        mypdfpage.Add(ptc);


                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, 65, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, " ");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Applicant's Name (In English)");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, 200, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "  " + ds1.Tables[0].Rows[0]["stud_name"] + "");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Applicant's Name (In Tamil)");
                        mypdfpage.Add(ptc);


                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, 100, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Address for Communication");
                        mypdfpage.Add(ptc);

                        left1 = 350;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                      new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, " Permanent Address");
                        mypdfpage.Add(ptc);

                        left1 = 15;
                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "______________________________________________________________________________________________________________");
                        mypdfpage.Add(ptc);
                        string address = "";

                        address = Convert.ToString(ds1.Tables[0].Rows[0]["parent_addressP"]) + "," + Convert.ToString(ds1.Tables[0].Rows[0]["Streetp"]);



                        string address_value = "";

                        address_value = Convert.ToString(ds1.Tables[0].Rows[0]["parent_addressC"]) + "," + Convert.ToString(ds1.Tables[0].Rows[0]["Streetc"]);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(address) + "");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydocument, left1 + 280, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(address_value) + "");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "______________________________________________________________________________________________________________");
                        mypdfpage.Add(ptc);


                        string addressfist = "";

                        addressfist = Convert.ToString(ds1.Tables[0].Rows[0]["cityp"]);

                        string addressfist1 = "";

                        addressfist1 = Convert.ToString(ds1.Tables[0].Rows[0]["Cityc"]);


                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(addressfist) + "");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydocument, left1 + 280, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(addressfist1) + "");
                        mypdfpage.Add(ptc);


                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "______________________________________________________________________________________________________________");
                        mypdfpage.Add(ptc);

                        string addressscond = "";

                        addressscond = Convert.ToString(ds1.Tables[0].Rows[0]["parent_statep"]);



                        string addressscond1 = "";

                        addressscond1 = Convert.ToString(ds1.Tables[0].Rows[0]["parent_statec"]);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydocument, left1, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(addressscond) + "");
                        mypdfpage.Add(ptc);


                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydocument, left1 + 280, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(addressscond1) + "");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "______________________________________________________________________________________________________________");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Pincode:");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                          new PdfArea(mydocument, left1 + 100, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["parent_pincodep"]) + "");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "______________________________________________________________________________________________________________");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 300 - 5, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Pincode:");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 300 + 100, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["parent_pincodec"]) + "");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 14;
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                 new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "E-mail:");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                new PdfArea(mydocument, left1 + 100, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["StuPer_Id"]) + "");
                        mypdfpage.Add(ptc);


                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 300 - 5, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Mobile No:");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                 new PdfArea(mydocument, 300 + 100, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["Student_Mobile"]) + "");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 35;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Nationality ");
                        mypdfpage.Add(ptc);
                        string nationality = subjectcode(Convert.ToString(ds1.Tables[0].Rows[0]["citizen"]));
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,

                                                       new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + nationality + "");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Date of Birth");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1 + 350, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Aadhar Card No.");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 450, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(ds1.Tables[0].Rows[0]["aadharno"]));
                        mypdfpage.Add(ptc);


                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["dob"]) + "");
                        mypdfpage.Add(ptc);


                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Place of Birth");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["place_birth"]) + "");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Religion & Community");
                        mypdfpage.Add(ptc);

                        string relig = subjectcode(Convert.ToString(ds1.Tables[0].Rows[0]["religion"]));
                        string comm = subjectcode(Convert.ToString(ds1.Tables[0].Rows[0]["community"]));
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + relig + " & " + comm + "      (Attach photocopy)");
                        mypdfpage.Add(ptc);

                        string caste = subjectcode(Convert.ToString(ds1.Tables[0].Rows[0]["caste"]));
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                               new PdfArea(mydocument, left1 + 350, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Caste");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                    new PdfArea(mydocument, left1 + 450, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + caste + "");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Blood Group");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 350, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Mother Tongue");
                        mypdfpage.Add(ptc);
                        string mothertong = subjectcode(Convert.ToString(ds1.Tables[0].Rows[0]["mother_tongue"]));
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydocument, left1 + 450, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + mothertong + "");
                        mypdfpage.Add(ptc);

                        string bldgrp = subjectcode(Convert.ToString(ds1.Tables[0].Rows[0]["bldgrp"]));
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["bldgrp"]) + "");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 30;
                        if (Convert.ToString(Session["co_curricular"]) != "-")
                        {
                            ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Distinction / Participation in Sports / Athletics / NCC / NSS ");
                            mypdfpage.Add(ptc);
                        }
                        else
                        {
                            ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Distinction / Participation in Sports / Athletics / NCC / NSS : " + Convert.ToString(Session["co_curricular"]) + " ( bring relevant documents at the time of Admission)");
                            mypdfpage.Add(ptc);
                        }


                        coltop = coltop + 10;
                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "______________________________________________________________________________________________________________");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Whether differently-abled      :");
                        mypdfpage.Add(ptc);

                        if (Convert.ToString(ds1.Tables[0].Rows[0]["isdisable"]) == "1")
                        {
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + "YES" + " / If yes, bring relevant documents at the time of Admission");
                            mypdfpage.Add(ptc);
                        }
                        else
                        {
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + "No" + "");
                            mypdfpage.Add(ptc);
                        }

                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Whether son of Ex-serviceman :");
                        mypdfpage.Add(ptc);

                        if (Convert.ToString(ds1.Tables[0].Rows[0]["IsExService"]) == "1")
                        {
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                          new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + "Yes" + " / If yes, bring relevant documents at the time of Admission");
                            mypdfpage.Add(ptc);
                        }
                        else
                        {
                            ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                          new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + "No" + "");
                            mypdfpage.Add(ptc);
                        }

                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "PARTICULARS OF THE PARENTS/GUARDIAN ");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Father's Name (in English)");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["parent_name"]) + "");
                        mypdfpage.Add(ptc);


                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Father's Name (in Tamil)");
                        mypdfpage.Add(ptc);

                        string occcp = subjectcode(Convert.ToString(ds1.Tables[0].Rows[0]["parent_occu"]));
                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Occupation");
                        mypdfpage.Add(ptc);



                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 75, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "_________________________________________________");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 75, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + occcp + "");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, 340, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Annual Income");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, 410, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "__________________________");
                        mypdfpage.Add(ptc);

                        string income = subjectcode(Convert.ToString(ds1.Tables[0].Rows[0]["parent_income"]));
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                      new PdfArea(mydocument, 410, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + income + "");
                        mypdfpage.Add(ptc);

                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Contact No.");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, 90, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["parentF_Mobile"]) + "");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, 90, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "__________________________");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                    new PdfArea(mydocument, 235, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Email ID");
                        mypdfpage.Add(ptc);


                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                    new PdfArea(mydocument, 285, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "______________________________");
                        mypdfpage.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                    new PdfArea(mydocument, 285, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["emailp"]) + "");
                        mypdfpage.Add(ptc);

                        ////////////////////////////////page2///////////////////////////////////////

                        coltop = 20;

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Mother's Name");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 115, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "__________________________________________________________________________________________");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 115, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["mother"]) + "");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Occupation");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 115, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "___________________________________________");
                        mypdfpage1.Add(ptc);

                        string moth_occ = subjectcode(Convert.ToString(ds1.Tables[0].Rows[0]["motherocc"]));
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                new PdfArea(mydocument, 115, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + moth_occ + "");
                        mypdfpage1.Add(ptc);


                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 333, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Annual Income ");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                   new PdfArea(mydocument, 405, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "________________________________");
                        mypdfpage1.Add(ptc);
                        string moth_income = subjectcode(Convert.ToString(ds1.Tables[0].Rows[0]["mIncome"]));
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 405, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + moth_income + "");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Contact No.");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                 new PdfArea(mydocument, 115, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "______________________________");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                new PdfArea(mydocument, 115, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["parentM_Mobile"]) + "");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                 new PdfArea(mydocument, 280, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "E-mail ID");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                 new PdfArea(mydocument, 325, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "________________________________________________");
                        mypdfpage1.Add(ptc);
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                new PdfArea(mydocument, 325, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["emailM"]) + "");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Guardian's Name (if living with guardian)");
                        mypdfpage1.Add(ptc);
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                               new PdfArea(mydocument, 225, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "____________________________________________________________________");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                              new PdfArea(mydocument, 225, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["guardian_name"]) + "");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Contact No.");
                        mypdfpage1.Add(ptc);


                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 115, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "________________________________");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                 new PdfArea(mydocument, 115, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["guardian_mobile"]) + "");
                        mypdfpage1.Add(ptc);


                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 280, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "E-mail ID");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, 330, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "______________________________________________");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                new PdfArea(mydocument, 330, coltop - 2, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[0].Rows[0]["emailg"]) + "");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "PARTICULARS OF PREVIOUS ACADEMIC RECORD");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 45;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Qualifying exam passed");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                 new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(Session["qualifyingexam"]) + "");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 20;
                        //ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                        //                          new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Name of the Board");
                        //mypdfpage1.Add(ptc);

                        //ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                        //                          new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(Session["bordoruniversity"]) + "");
                        //mypdfpage1.Add(ptc);

                        //coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Institution last attended");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[1].Rows[0]["Institute_name"]) + "");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "(With Address & Contact Nos)");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                             new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + Convert.ToString(ds1.Tables[1].Rows[0]["instaddress"]) + "");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Language studied in X-Std");
                        mypdfpage1.Add(ptc);

                        string medium = subjectcode(Convert.ToString(ds1.Tables[1].Rows[0]["medium"]));
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, " " + medium + " ");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, 300, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Language studied in XII-Std");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                             new PdfArea(mydocument, 300 + 150, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "" + medium + "");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold2, System.Drawing.Color.Black,
                                                  new PdfArea(mydocument, left1 + 2, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "EXTRACT OF THE MARK STATEMENT(S) OF THE QUALIFYING EXAMINATION PASSED ");
                        mypdfpage1.Add(ptc);

                        ////// table////////
                        string subjectname = "";
                        string finalmarkandgrade = "";
                        string subjectwisemark = "";
                        string Month = "";
                        string year1 = "";
                        string regno = "";
                        string nofoattempts = "";
                        string max_mark = "";
                        int maxtotal = 0;
                        int mintotal = 0;
                        string grade = "";
                        DataView dv = new DataView();
                        int count = 0;
                        ds1.Tables[2].DefaultView.RowFilter = " course_entno='" + Convert.ToString(ds1.Tables[1].Rows[0]["course_entno"]) + "' ";
                        dv = ds1.Tables[2].DefaultView;
                        if (dv.Count > 0)
                        {

                            for (int u = 0; u < dv.Count; u++)
                            {
                                count++;
                                grade = Convert.ToString(dv[u]["grade"]);
                                if (grade != "")
                                {
                                    finalmarkandgrade = Convert.ToString(dv[u]["grade"]);
                                }
                                else
                                {
                                    finalmarkandgrade = Convert.ToString(dv[u]["acual_marks"]);
                                }
                                subjectname = Convert.ToString(dv[u]["psubjectno"]);

                                Month = Convert.ToString(dv[u]["pass_month"]);
                                year1 = Convert.ToString(dv[u]["pass_year"]);
                                regno = Convert.ToString(dv[u]["registerno"]);
                                nofoattempts = Convert.ToString(dv[u]["noofattempt"]);
                                max_mark = Convert.ToString(dv[u]["max_marks"]);
                                if (subjectname.Trim() != "")
                                {
                                    if (subjectwisemark == "")
                                    {
                                        subjectwisemark = subjectname + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + regno + "-" + nofoattempts + "-" + max_mark;
                                    }
                                    else
                                    {
                                        subjectwisemark = subjectwisemark + "/" + subjectname + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + regno + "-" + nofoattempts + "-" + max_mark;
                                    }

                                    if (maxtotal == 0)
                                    {
                                        maxtotal = Convert.ToInt32(max_mark);
                                    }
                                    else
                                    {
                                        maxtotal = maxtotal + Convert.ToInt32(max_mark);
                                    }

                                    if (mintotal == 0)
                                    {
                                        mintotal = Convert.ToInt32(finalmarkandgrade);
                                    }
                                    else
                                    {
                                        mintotal = mintotal + Convert.ToInt32(finalmarkandgrade);
                                    }

                                }
                            }
                        }

                        string[] splittablevlaue;

                        if (subjectwisemark.Trim() != "")
                        {
                            Session["subjectwisemark"] = subjectwisemark.ToString();
                        }
                        Gios.Pdf.PdfTable table2 = mydocument.NewTable(Fontsmall, count + 1 + 1, 7, 1);
                        table2 = mydocument.NewTable(Fontsmall, count + 1 + 1, 7, 1);
                        table2.VisibleHeaders = false;
                        table2.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                        table2.Columns[0].SetWidth(100);
                        table2.Columns[1].SetWidth(100);
                        table2.Columns[2].SetWidth(100);
                        table2.Columns[3].SetWidth(100);
                        table2.Columns[4].SetWidth(100);
                        table2.Columns[5].SetWidth(100);
                        table2.Columns[6].SetWidth(100);
                        table2.CellRange(0, 0, 0, 5).SetFont(Fontsmall);
                        table2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 0).SetContent("Subjects");


                        table2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 1).SetContent("Register No");

                        if (grade == "")
                        {
                            table2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(0, 2).SetContent("Mark");
                        }
                        else
                        {
                            table2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table2.Cell(0, 2).SetContent("Grade");
                        }

                        table2.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 3).SetContent("Maximum Marks");
                        table2.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 4).SetContent("Month");
                        table2.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 5).SetContent("Year");
                        table2.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table2.Cell(0, 6).SetContent("No.of Attempts");



                        int count_value = 0;
                        string tablevalue1 = Convert.ToString(Session["subjectwisemark"]);
                        if (tablevalue1.Trim() != "")
                        {
                            splittablevlaue = tablevalue1.Split('/');
                            if (splittablevlaue.Length > 0)
                            {
                                for (int add = 0; add <= splittablevlaue.GetUpperBound(0); add++)
                                {
                                    count_value++;
                                    string[] firstvalue = splittablevlaue[add].Split('-');
                                    if (firstvalue.Length > 0)
                                    {

                                        subjectname = Convert.ToString(firstvalue[0]);
                                        string subjectname1 = "";
                                        string selectquery = "select Textval from textvaltable where TextCode='" + subjectname + "' and college_code ='" + ddl_collegename.SelectedItem.Value + "'";
                                        ds.Clear();
                                        ds = d2.select_method_wo_parameter(selectquery, "Text");
                                        if (ds.Tables[0].Rows.Count > 0)
                                        {
                                            subjectname1 = Convert.ToString(ds.Tables[0].Rows[0]["Textval"]);
                                        }

                                        table2.Cell(add + 1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        table2.Cell(add + 1, 0).SetContent(subjectname1);

                                        table2.Cell(add + 1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        table2.Cell(add + 1, 1).SetContent(Convert.ToString(firstvalue[4]));

                                        table2.Cell(add + 1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        table2.Cell(add + 1, 2).SetContent(Convert.ToString(firstvalue[1]));


                                        table2.Cell(add + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        table2.Cell(add + 1, 3).SetContent(Convert.ToString(firstvalue[6]));


                                        table2.Cell(add + 1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        table2.Cell(add + 1, 4).SetContent(Convert.ToString(firstvalue[2].First().ToString().ToUpper() + firstvalue[2].Substring(1)));
                                        // Month.First().ToString().ToUpper() + Month.Substring(1)

                                        table2.Cell(add + 1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        table2.Cell(add + 1, 5).SetContent(Convert.ToString(firstvalue[3]));

                                        table2.Cell(add + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        table2.Cell(add + 1, 6).SetContent(Convert.ToString(firstvalue[5]));
                                    }
                                }
                                table2.Cell(count_value + 1, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                                table2.Cell(count_value + 1, 0).SetContent("Total Marks Secured");

                                foreach (PdfCell pr in table2.CellRange(count_value + 1, 0, count_value + 1, 0).Cells)
                                {
                                    pr.ColSpan = 2;
                                }

                                table2.Cell(count_value + 1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table2.Cell(count_value + 1, 2).SetContent("" + mintotal + "");
                                table2.Cell(count_value + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table2.Cell(count_value + 1, 3).SetContent("" + maxtotal + "");

                                foreach (PdfCell pr in table2.CellRange(count_value + 1, 4, count_value + 1, 4).Cells)
                                {
                                    pr.ColSpan = 3;
                                }


                            }
                        }
                        Gios.Pdf.PdfTablePage myprov_pdfpage1 = table2.CreateTablePage(new Gios.Pdf.PdfArea(mydocument, 20, coltop + 30, 550, 550));
                        mypdfpage1.Add(myprov_pdfpage1);



                        /////////////////////////////bottom////////////////////////

                        //coltop = coltop + 200;

                        //ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                        //                                   new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "");
                        //mypdfpage1.Add(ptc);
                        //coltop = coltop + 10;
                        //ptc = new PdfTextArea(tamil, System.Drawing.Color.Black,
                        //                                   new PdfArea(mydocument, left1 + 25, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "");
                        //mypdfpage1.Add(ptc);

                        ////???? ??????????????? ????????? ????????? ??????????, ????????. ???? ?????????????? ??????????????? ?????? ????????????? ???????????? ????????. ??????????? ????????? ???????????? ?????? ????????? ????? ????????. ????????, ??????? ????????? ????????? ??????????????? ??????????????.

                        coltop = coltop + 200;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "List of enclosures :");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "(i)");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                             new PdfArea(mydocument, 35, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "_______________________________");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, 225, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "(ii)");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                             new PdfArea(mydocument, 235, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "_______________________________");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                            new PdfArea(mydocument, 400, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "(iii)");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                             new PdfArea(mydocument, 415, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "_______________________________");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "(iv)");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                             new PdfArea(mydocument, 35, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "_______________________________");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, 225, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "(v)");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                             new PdfArea(mydocument, 235, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "_______________________________");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                            new PdfArea(mydocument, 400, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "(vi)");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                             new PdfArea(mydocument, 420, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "_____________________________");
                        mypdfpage1.Add(ptc);


                        coltop = coltop + 20;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                           new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Declaration:");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                           new PdfArea(mydocument, left1 + 55, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "I declare that the particulars furnished above are true and correct. I submit that i will abide by the rules and");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 15;
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                         new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, " regulations of the college, and will not take part in any activity prejudical to the interest of the college.");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 10;
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                           new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "");
                        mypdfpage1.Add(ptc);
                        coltop = coltop + 10;
                        ptc = new PdfTextArea(tamil, System.Drawing.Color.Black,
                                                           new PdfArea(mydocument, left1 + 25, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "");
                        mypdfpage1.Add(ptc);

                        //???? ??????????????? ????????? ????????? ??????????, ????????. ???? ?????????????? ??????????????? ?????? ????????????? ???????????? ????????. ??????????? ????????? ???????????? ?????? ????????? ????? ????????. ????????, ??????? ????????? ????????? ??????????????? ??????????????.




                        coltop = coltop + 40;
                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                           new PdfArea(mydocument, 75, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "________________________________");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                           new PdfArea(mydocument, 375, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "_______________________________");
                        mypdfpage1.Add(ptc);

                        coltop = coltop + 10;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                           new PdfArea(mydocument, 75, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Signature of the Parent/Guardian");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                           new PdfArea(mydocument, 400, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Signature of the Student");
                        mypdfpage1.Add(ptc);
                        bool falge = false;
                        if (falge == false)
                        {

                            coltop = coltop + 25;
                            ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                               new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "----------------------------------------------------------------FOR OFFICE USE ONLY------------------------------------------------------------");
                            mypdfpage1.Add(ptc);

                            coltop = coltop + 15;
                            ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                               new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Interviewed on");
                            mypdfpage1.Add(ptc);

                            coltop = coltop + 15;
                            ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                               new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Admitted in");
                            mypdfpage1.Add(ptc);

                            ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, 75, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "_____________________________");
                            mypdfpage1.Add(ptc);
                            ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, 225, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "by");
                            mypdfpage1.Add(ptc);
                            ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, 235, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "____________________________");
                            mypdfpage1.Add(ptc);
                            ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                              new PdfArea(mydocument, 375, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "(Staff No:");
                            mypdfpage1.Add(ptc);

                            ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                            new PdfArea(mydocument, 425, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "____________________)");
                            mypdfpage1.Add(ptc);


                            coltop = coltop + 55;
                            ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                               new PdfArea(mydocument, 420, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "_________________________");
                            mypdfpage1.Add(ptc);

                            coltop = coltop + 10;
                            ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                               new PdfArea(mydocument, 470, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Principal");
                            mypdfpage1.Add(ptc);
                        }
                        coltop = coltop + 60;
                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Place :");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                   new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, " ");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydocument, 400, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, "Date :");
                        mypdfpage1.Add(ptc);

                        ptc = new PdfTextArea(Fonttimes, System.Drawing.Color.Black,
                                                   new PdfArea(mydocument, left1, coltop, 600, 50), System.Drawing.ContentAlignment.TopLeft, " ");
                        mypdfpage1.Add(ptc);


                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
                        {
                            PdfImage LogoImage = mydocument.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                            mypdfpage.Add(LogoImage, 25, 18, 400);
                        }

                        /////////////////2ND header/////////////
                        PdfArea pa12 = new PdfArea(mydocument, 110, 40, 344, 120);
                        PdfRectangle pr12 = new PdfRectangle(mydocument, pa12, Color.Black);
                        mypdfpage.Add(pr12);

                        /////////////////////right photo//////////////////

                        PdfArea pa4 = new PdfArea(mydocument, 454, 40, 120, 120);
                        PdfRectangle pr4 = new PdfRectangle(mydocument, pa4, Color.Black);
                        mypdfpage.Add(pr4);

                        /////////////////1st header/////////////
                        PdfArea pa5 = new PdfArea(mydocument, 110, 40, 344, 60);
                        PdfRectangle pr5 = new PdfRectangle(mydocument, pa5, Color.Black);
                        mypdfpage.Add(pr5);

                        /////////////////page//////////////
                        PdfArea pa1 = new PdfArea(mydocument, 14, 12, 560, 825);
                        PdfRectangle pr3 = new PdfRectangle(mydocument, pa1, Color.Black);
                        mypdfpage.Add(pr3);
                        mypdfpage1.Add(pr3);

                        //////////////////////////for office/////////////////////
                        PdfArea pa13 = new PdfArea(mydocument, 14, 280, 540, 60);
                        PdfRectangle pr13 = new PdfRectangle(mydocument, pa13, Color.Black);
                        mypdfpage.Add(pr13);

                        //////////////////addressleft/////////////
                        PdfArea pa9 = new PdfArea(mydocument, 14, 380, 280, 95);
                        PdfRectangle pr9 = new PdfRectangle(mydocument, pa9, Color.Black);
                        mypdfpage.Add(pr9);

                        ////////////////addressright/////////////
                        PdfArea pa90 = new PdfArea(mydocument, 294.5, 380, 274, 95);
                        PdfRectangle pr90 = new PdfRectangle(mydocument, pa90, Color.Black);
                        mypdfpage.Add(pr90);

                        ////////////////////email\\\\\\\\\\\\\\\\\\\\\\\
                        //PdfArea pa91 = new PdfArea(mydocument, 14, 520, 555, 30);
                        //PdfRectangle pr91 = new PdfRectangle(mydocument, pa91, Color.Black);
                        //mypdfpage.Add(pr91);

                        mypdfpage.SaveToDocument();
                        mypdfpage1.SaveToDocument();

                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "ApplicationForm" + DateTime.Now.ToString("ddMMyyyy") + ".pdf";
                mydocument.SaveToFile(szPath + szFile);

                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
                Response.End();
            }
            else
            {

            }

        }
        catch
        {

        }

    }
    protected void ShowAllCb_CheckedChange(object sender, EventArgs e)
    {
        try
        {
            string Valueappl = Convert.ToString(Session["pdfapp_no"]);
            bindFeeLedgerGrid(Valueappl);
            if (cbpersonal.Checked == true)
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = true;
                ugtotaldiv.Visible = true;
                Academicinfo.Visible = true;
                Button6.Visible = true;
            }
            else
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = false;
                ugtotaldiv.Visible = false;
                Academicinfo.Visible = false;
                Button6.Visible = false;
            }
        }
        catch
        {

        }
    }
    protected void cbSame_CheckedChange(object sender, EventArgs e)
    {
        try
        {
            if (cbSame.Checked == true)
            {
                txt_rollno.Text = Convert.ToString(txt_AdmissionNo.Text);
                txt_rollno.Enabled = false;
            }
            else
            {
                txt_rollno.Text = "";
                txt_rollno.Enabled = true;
            }

            if (cbpersonal.Checked == true)
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = true;
                ugtotaldiv.Visible = true;
                Academicinfo.Visible = true;
                Button6.Visible = true;
            }
            else
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = false;
                ugtotaldiv.Visible = false;
                Academicinfo.Visible = false;
                Button6.Visible = false;
            }
        }
        catch
        {

        }
    }
    protected void btn_uploadclose_OnClick(object sender, EventArgs e)
    {
        try
        {
            if (cbpersonal.Checked == true)
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = true;
                ugtotaldiv.Visible = true;
                Academicinfo.Visible = true;
                Button6.Visible = true;
            }
            else
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = false;
                ugtotaldiv.Visible = false;
                Academicinfo.Visible = false;
                Button6.Visible = false;
            }
            photo_div.Visible = false;
        }
        catch
        {

        }
    }
    protected void btn_photoupload_OnClick(object sender, EventArgs e)
    {
        try
        {


            bool upflage = false;
            ViewState["stfimg"] = null;
            //string stfphoto = "";           
            //MemoryStream memoryStream = new MemoryStream();
            if (fileuploadbrowse.HasFile)
            {
                if (fileuploadbrowse.FileName.EndsWith(".jpg") || fileuploadbrowse.FileName.EndsWith(".JPG"))
                {
                    string stdphotopath = Server.MapPath("~/Student Photo/") + fileuploadbrowse.FileName;
                    string stdphotoext = System.IO.Path.GetExtension(fileuploadbrowse.FileName);
                    fileuploadbrowse.SaveAs(stdphotopath);

                    //string insphoto = "if exists (select photo from staffphoto where staff_code='" + scode + "')";
                    //insphoto = insphoto + " update staffphoto set photo=@photo where staff_code='" + scode + "'";
                    //insphoto = insphoto + " else insert into staffphoto (staff_code,photo) values('" + scode + "',@photo)";

                    // int fileSize = fileuploadbrowse.PostedFile.ContentLength;
                    // byte[] documentBinary = new byte[fileSize];

                    //// memoryStream.Read(documentBinary, 0, documentBinary.Length);
                    // memoryStream.Write(documentBinary, 0, documentBinary.Length);
                    // if (documentBinary.Length > 0)
                    // {
                    //     System.Drawing.Image imgx = System.Drawing.Image.FromStream((Stream)memoryStream, true, true);
                    //     System.Drawing.Image thumb = imgx.GetThumbnailImage(400, 400, null, IntPtr.Zero);
                    //     thumb.Save(HttpContext.Current.Server.MapPath("~/Staff Photo/" + fileuploadbrowse.FileName), System.Drawing.Imaging.ImageFormat.Jpeg);
                    // }

                    if (File.Exists(HttpContext.Current.Server.MapPath("~/Student Photo/" + fileuploadbrowse.FileName)))
                    {
                        StudentImage.ImageUrl = "~/Student Photo/" + fileuploadbrowse.FileName;
                    }
                    ViewState["stfimg"] = fileuploadbrowse.FileName;

                    //fileuploadbrowse.PostedFile.InputStream.Read(documentBinary, 0, fileSize);
                    //SqlCommand cmd = new SqlCommand(insphoto, con);
                    //SqlParameter uploadedsubject_name = new SqlParameter("@photo", SqlDbType.Binary, fileSize);
                    //uploadedsubject_name.Value = documentBinary;
                    //cmd.Parameters.Add(uploadedsubject_name);

                    //con.Close();
                    //con.Open();
                    //cmd.ExecuteNonQuery();
                    //con.Close();
                    //stf_img.ImageUrl = "~/Handler/staffphoto.ashx?staff_code=" + scode;
                }

            }

            if (cbpersonal.Checked == true)
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = true;
                ugtotaldiv.Visible = true;
                Academicinfo.Visible = true;
                Button6.Visible = true;
            }
            else
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = false;
                ugtotaldiv.Visible = false;
                Academicinfo.Visible = false;
                Button6.Visible = false;
            }
            photo_div.Visible = false;
        }
        catch
        {

        }
    }
    protected void Link_Photo(object sender, EventArgs e)
    {
        try
        {
            photo_div.Visible = true;
            if (cbpersonal.Checked == true)
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = true;
                ugtotaldiv.Visible = true;
                Academicinfo.Visible = true;
                Button6.Visible = true;
            }
            else
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = false;
                ugtotaldiv.Visible = false;
                Academicinfo.Visible = false;
                Button6.Visible = false;
            }
        }
        catch
        {

        }
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> getboard(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();

        string query = "select distinct Stage_Name  from Stage_Master where Stage_Name like '" + prefixText + "%' ";
        name = ws.Getname(query);
        return name;
    }
    protected void btnUpdateInformation_Click(object sender, EventArgs e)
    {
        try
        {
            //code added by Idhris 28-05-2016
            string counsellingNo = string.Empty;
            DateTime dtCounselling = DateTime.Now.Date;
            if (cbCounselling.Checked)
            {
                counsellingNo = txtCounsellingNo.Text;
                string[] counsDtAr = txtCounsellingDt.Text.Split('/');
                if (counsDtAr.Length == 3)
                    dtCounselling = Convert.ToDateTime(counsDtAr[1] + "/" + counsDtAr[0] + "/" + counsDtAr[2]);
            }
            string daySchHost = ddlAdmissionStudType.SelectedIndex.ToString();//0-Day 1 - Hostel
            string hostelNo = string.Empty;
            string roomNo = string.Empty;
            string boarding = string.Empty;
            string transOwnIns = string.Empty;
            //Code Ended by Idhris 
            //photo_div.Visible = true;
            // string link = "select LinkValue from InsSettings where LinkName='Current Financial Year' and college_code='" + ddl_collegename.SelectedItem.Value + "'";
            string getfinid = d2.getCurrentFinanceYear(user_code, Convert.ToString(ddl_collegename.SelectedItem.Value));

            if (ddlAdmissionStudType.SelectedIndex == 1)
            {

                hostelNo = ddlHosHostel.SelectedValue;
                roomNo = ddlHosRoom.SelectedValue;
                string Hostelfee = d2.GetFunction("select value from Master_Settings where settings ='HostelFeeAllot' and usercode ='" + user_code + "'");
                if (Hostelfee == "1")
                {
                    string val = "";

                    string header = d2.GetFunction("select hosteladmfeeheaderfk from HM_HostelMaster where hostelmasterpk='" + hostelNo + "'");
                    string ledger = d2.GetFunction("select hosteladmfeeledgerfk from HM_HostelMaster where hostelmasterpk='" + hostelNo + "'");
                    string roomcost = d2.GetFunction("select Room_Cost from RoomCost_Master where college_code='" + ddl_collegename.SelectedItem.Value + "' and Room_Type='" + roomNo + "'");
                    string renttype = d2.GetFunction("select Rent_Type from RoomCost_Master where college_code='" + ddl_collegename.SelectedItem.Value + "' and Room_Type='" + roomNo + "'");
                    if (renttype == "2")
                    {
                        val = "1 Year";
                    }
                    else
                    {
                        val = "1 Semester";
                    }
                    textcode = d2.GetFunction("select TextCode from textvaltable where TextCriteria='FEECA' and textval='" + val + "' and college_code='" + ddl_collegename.SelectedItem.Value + "'");
                    if (textcode != "" && textcode != "0")
                    {
                        if (header != "0" && ledger != "0" && roomcost != "0")
                        {
                            string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + ledger + "') and HeaderFK in('" + header + "') and FeeCategory in('" + textcode + "')  and App_No in('" + Session["pdfapp_no"] + "')) update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='1',FeeAmount='" + roomcost + "',PaidAmount='0' ,DeductAmout='0',DeductReason='0',FromGovtAmt='0',TotalAmount='" + roomcost + "',RefundAmount='0',IsFeeDeposit='0',FeeAmountMonthly='',PayMode='0',PayStartDate='',PaidStatus='0',DueDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',DueAmount='0',FineAmount='0',BalAmount='" + roomcost + "' where LedgerFK in('" + ledger + "') and HeaderFK in('" + header + "') and FeeCategory in('" + textcode + "') and App_No in('" + Session["pdfapp_no"] + "') else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1," + Session["pdfapp_no"] + ",'" + ledger + "','" + header + "','" + roomcost + "','0','0','0','" + roomcost + "','0','0','','0','" + textcode + "','','0','','0','0','" + roomcost + "','" + getfinid + "')";
                            int a = dt.update_method_wo_parameter(insupdquery, "text");

                        }
                        else
                        {
                            errorspan.InnerHtml = "Kindly Allot The Fees Or Hostel Header and Ledger";
                            poperrjs.Visible = true;
                            return;
                        }
                        hostelallotment(Convert.ToString(Session["pdfapp_no"]));
                    }
                    else
                    {
                        errorspan.InnerHtml = "Kindly Allot The Fees";
                        poperrjs.Visible = true;
                        return;
                    }
                }
            }
            else
            {
                #region Include Day scholar mess fees -- 23-07-2016
                if (cb_IncDayscMess.Checked)
                {
                    string type = "";
                    string header = "";
                    string ledger = "";

                    string cost = "";
                    string value = lblCurSemDet.Text.Trim();

                    #region Sem Year Feecat
                    string linkvalue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + user_code + "' and college_code ='" + ddl_collegename.SelectedItem.Value + "'").Trim();
                    if (linkvalue == "0")
                    {
                        value += " Semester";
                    }
                    else
                    {
                        value = returnYearforSem(value) + " Year";
                    }
                    string textcode = d2.GetFunction("select TextCode from textvaltable where TextCriteria='FEECA' and textval='" + value + "' and college_code='" + ddl_collegename.SelectedItem.Value + "'").Trim();
                    #endregion

                    string ledheadamt = d2.GetFunction("select LinkValue from InsSettings where LinkName='DayScholarStudentMessSetting'  and college_code ='" + ddl_collegename.SelectedItem.Value + "'");
                    string[] spl = ledheadamt.Split(',');

                    if (spl.Length == 3)
                    {
                        header = spl[0];
                        ledger = spl[1];
                        cost = spl[2];

                        if (textcode != "" && textcode != "0" && header != "0" && ledger != "0" && cost != "0")
                        {
                            string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + ledger + "') and HeaderFK in('" + header + "') and FeeCategory in('" + textcode + "')  and App_No in('" + Session["pdfapp_no"] + "')) update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='1',FeeAmount='" + cost + "',PaidAmount='0' ,DeductAmout='0',DeductReason='0',FromGovtAmt='0',TotalAmount='" + cost + "',RefundAmount='0',IsFeeDeposit='0',FeeAmountMonthly='',PayMode='0',PayStartDate='',PaidStatus='0',DueDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',DueAmount='0',FineAmount='0',BalAmount='" + cost + "' where LedgerFK in('" + ledger + "') and HeaderFK in('" + header + "') and FeeCategory in('" + textcode + "') and App_No in('" + Session["pdfapp_no"] + "') else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1," + Session["pdfapp_no"] + ",'" + ledger + "','" + header + "','" + cost + "','0','0','0','" + cost + "','0','0','','0','" + textcode + "','','0','','0','0','" + cost + "','" + getfinid + "')";
                            int a = dt.update_method_wo_parameter(insupdquery, "text");
                        }

                    }
                }
                #endregion
                if (rbldayScTrans.SelectedItem.Value == "1")
                {
                    string type = "";
                    string header = "";
                    string ledger = "";
                    boarding = txtBoardPnt.Text.Trim();
                    boarding = d2.GetFunction("select distinct Stage_id  from Stage_Master where Stage_Name='" + txtBoardPnt.Text + "' ");
                    transOwnIns = rbldayScTrans.SelectedIndex.ToString();

                    string transfee = d2.GetFunction("select value from Master_Settings where settings ='TransportFeeAllot' and usercode ='" + user_code + "'");
                    string[] valtranc = transfee.Split('/');
                    if (valtranc[0] == "1")
                    {
                        string cost = "";
                        string value = "";
                        string ledhead = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='TransportLedgerValue' and user_code ='" + user_code + "'");
                        string[] spl = ledhead.Split(',');
                        header = spl[0];
                        ledger = spl[1];

                        string Transportsettings = d2.GetFunction("select value  from Master_Settings where settings ='TransportFeeAllotmentSettings' and usercode ='" + user_code + "'");
                        if (Transportsettings.Trim() != "" && Transportsettings.Trim() != "0")
                        {
                            string[] transtype = Transportsettings.Split('-');
                            if (transtype[0] == "1")  // Modify by jairam 22-07-2016 ------ For New Transport Allotment 
                            {
                                //cost = d2.GetFunction("select cost from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Semester' and Fee_Code ='" + ledger + "' ");
                                //value = d2.GetFunction("select payType from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Semester' and Fee_Code ='" + ledger + "'");

                                cost = d2.GetFunction("select cost from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Semester' ");
                                value = d2.GetFunction("select payType from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Semester'");

                                type = "Semester";
                            }
                            else if (transtype[0] == "2")
                            {
                                //cost = d2.GetFunction("select cost from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Yearly' and Fee_Code ='" + ledger + "' ");
                                //value = d2.GetFunction("select payType from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Yearly' and Fee_Code ='" + ledger + "'");

                                cost = d2.GetFunction("select cost from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Yearly'");
                                value = d2.GetFunction("select payType from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Yearly'");

                                type = "Yearly";
                            }
                            else
                            {
                                //cost = d2.GetFunction("select cost from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Monthly' and Fee_Code ='" + ledger + "' ");
                                //value = d2.GetFunction("select payType from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Monthly' and Fee_Code ='" + ledger + "'");

                                cost = d2.GetFunction("select cost from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Monthly'");
                                value = d2.GetFunction("select payType from feeinfo where StrtPlace ='" + boarding + "'  and payType ='Monthly'");

                                type = "Monthly";
                            }
                            string val = "";
                            if (value == "Yearly")
                            {
                                string year = returnYearforSem(Convert.ToString(lblCurSemDet.Text));
                                val = "" + year + " Year";
                            }
                            else if (value == "Semester")
                            {
                                val = "" + lblCurSemDet.Text + " Semester";
                            }
                            else if (value == "Monthly")
                            {
                                string settingquery = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + user_code + "' and college_code ='" + ddl_collegename.SelectedItem.Value + "'");

                                if (settingquery.Trim() != "")
                                {
                                    if (settingquery == "0")
                                    {
                                        val = "" + lblCurSemDet.Text + " Semester";
                                    }
                                    else if (settingquery == "1")
                                    {
                                        string year = returnYearforSem(Convert.ToString(lblCurSemDet.Text));
                                        val = "" + year + " Year";
                                        //val = "" + lblCurSemDet.Text + " Year";
                                    }
                                }
                            }
                            string textcode = d2.GetFunction("select TextCode from textvaltable where TextCriteria='FEECA' and textval='" + val + "' and college_code='" + ddl_collegename.SelectedItem.Value + "'");
                            if (transtype[0] != "3")
                            {

                                if (textcode != "" && textcode != "0")
                                {
                                    if (header != "0" && ledger != "0" && cost != "0")
                                    {
                                        string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + ledger + "') and HeaderFK in('" + header + "') and FeeCategory in('" + textcode + "')  and App_No in('" + Session["pdfapp_no"] + "')) update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='1',FeeAmount='" + cost + "',PaidAmount='0' ,DeductAmout='0',DeductReason='0',FromGovtAmt='0',TotalAmount='" + cost + "',RefundAmount='0',IsFeeDeposit='0',FeeAmountMonthly='',PayMode='0',PayStartDate='',PaidStatus='0',DueDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',DueAmount='0',FineAmount='0',BalAmount='" + cost + "' where LedgerFK in('" + ledger + "') and HeaderFK in('" + header + "') and FeeCategory in('" + textcode + "') and App_No in('" + Session["pdfapp_no"] + "') else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1," + Session["pdfapp_no"] + ",'" + ledger + "','" + header + "','" + cost + "','0','0','0','" + cost + "','0','0','','0','" + textcode + "','','0','','0','0','" + cost + "','" + getfinid + "')";
                                        int a = dt.update_method_wo_parameter(insupdquery, "text");

                                        string querystu = "update registration set Boarding='" + boarding + "' where app_no='" + Session["pdfapp_no"] + "'";
                                        int u = d2.update_method_wo_parameter(querystu, "text");

                                    }
                                    else
                                    {
                                        errorspan.InnerHtml = "Kindly Allot The Fees";
                                        poperrjs.Visible = true;
                                        return;
                                    }
                                }
                                else
                                {
                                    errorspan.InnerHtml = "Kindly Allot The Fees";
                                    poperrjs.Visible = true;
                                    return;
                                }
                            }
                            else
                            {

                                double calcost = 0;
                                string mnthamt = "";
                                string[] yearcal = transtype[1].Split(';');
                                string[] monthcal = yearcal[0].Split(',');
                                for (int u = 0; u < monthcal.Length; u++)
                                {
                                    string year = yearcal[1];
                                    if (mnthamt == "")
                                    {
                                        mnthamt = monthcal[u] + ":" + year + ":" + cost;
                                    }
                                    else
                                    {
                                        mnthamt = mnthamt + "," + monthcal[u] + ":" + year + ":" + cost;
                                    }

                                    calcost = calcost + Convert.ToDouble(cost);

                                }

                                string querystu1 = " if exists (select * from FT_FeeAllot where App_No ='" + Session["pdfapp_no"] + "' and LedgerFK='" + ledger + "' and HeaderFK='" + header + "' and FeeCategory ='" + textcode + "' ) update FT_FeeAllot set FeeAmount='" + calcost + "',TotalAmount ='" + calcost + "' ,BalAmount ='" + calcost + "', FeeAmountMonthly='" + mnthamt + "'  where App_No ='" + Session["pdfapp_no"] + "' and LedgerFK='" + ledger + "' and HeaderFK='" + header + "' and FeeCategory ='" + textcode + "'  else insert into FT_FeeAllot (App_No,LedgerFK,HeaderFK,FinYearFK,AllotDate,FeeAmount,FeeCategory,PayStartDate,FineAmount,DeductAmount,TotalAmount,BalAmount,MemType,PayMode,DeductReason,FromGovtAmt,FeeAmountMonthly)  values ('" + Session["pdfapp_no"] + "','" + ledger + "','" + header + "','" + getfinid + "','" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + calcost + "','" + textcode + "','" + DateTime.Now.ToString("MM/dd/yyyy") + "',0,0,'" + calcost + "','" + calcost + "','1','1',0,0,'" + mnthamt + "')";
                                int iii = d2.update_method_wo_parameter(querystu1, "Text");

                                string querystu = "update registration set Boarding='" + boarding + "' where app_no='" + Session["pdfapp_no"] + "'";
                                int uh = d2.update_method_wo_parameter(querystu, "text");

                                string allotpk = d2.GetFunction(" select FeeAllotPK from FT_FeeAllot  where App_No ='" + Session["pdfapp_no"] + "' and LedgerFK='" + ledger + "' and HeaderFK='" + header + "' and FeeCategory ='" + textcode + "'");

                                if (allotpk != "")
                                {
                                    for (int u = 0; u < monthcal.Length; u++)
                                    {
                                        string year = yearcal[1];
                                        string InsertQ = "if exists(select * from FT_FeeallotMonthly where FeeAllotPK='" + allotpk + "' and AllotMonth='" + monthcal[u] + "' and AllotYear='" + year + "' and FinYearFK='" + getfinid + "')update FT_FeeallotMonthly set AllotAmount=AllotAmount+'" + cost + "',BalAmount=BalAmount+'" + cost + "' where FeeAllotPK='" + allotpk + "' and AllotMonth='" + monthcal[u] + "' and AllotYear='" + year + "' and FinYearFK='" + getfinid + "' else insert into FT_FeeallotMonthly (FeeAllotPK,AllotMonth,AllotYear,AllotAmount,FinYearFK,BalAmount) values('" + allotpk + "','" + monthcal[u] + "','" + year + "','" + cost + "','" + getfinid + "','" + cost + "')";
                                        int ins = d2.update_method_wo_parameter(InsertQ, "Text");
                                    }
                                }

                            }
                            string appnumb = Convert.ToString(Session["pdfapp_no"]);
                            travelAllotment(appnumb, type);
                        }
                    }
                }


            }

            if (cbpersonal.Checked == true)
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = true;
                ugtotaldiv.Visible = true;
                Academicinfo.Visible = true;
                Button6.Visible = true;
            }
            else
            {
                panel4.Attributes.Add("Style", "background: none repeat scroll 0 0 rgba(0, 0, 0, 0.83); border-color: inherit; border-style: none; border-width: 1px; height: 101%; left: -8px; position: absolute; top: -9px; width: 101%; display: block;");
                coursedetails.Visible = false;
                ugtotaldiv.Visible = false;
                Academicinfo.Visible = false;
                Button6.Visible = false;
            }
            int count = 0;
            string date = Convert.ToString(txt_AdmissionDate.Text);
            string[] splitdate = date.Split('/');
            DateTime newdate = Convert.ToDateTime(splitdate[1] + "/" + splitdate[0] + "/" + splitdate[2]);
            string roll_no = Convert.ToString(txt_rollno.Text);
            string mode = "";
            if (rblModeDet.SelectedItem.Value == "1")
            {
                mode = "1";
            }
            else if (rblModeDet.SelectedItem.Value == "2")
            {
                mode = "2";
            }
            else
            {
                mode = "3";
            }

            string queury = " update Registration set Roll_Admit ='" + txt_AdmissionNo.Text + "' ,Adm_Date ='" + newdate.ToString("MM/dd/yyyy") + "',Roll_No ='" + roll_no + "',Stud_Type ='" + ddlAdmissionStudType.SelectedItem.Text + "',mode='" + mode + "' where App_No ='" + Session["pdfapp_no"] + "'";
            count = d2.update_method_wo_parameter(queury, "Text");
            if (count != 0)
            {
                string img = Convert.ToString(ViewState["stfimg"]);
                if (img.Trim() != "")
                {

                    FileStream fs = new FileStream(Server.MapPath("~/Student Photo/") + img,

              FileMode.Open, FileAccess.Read);

                    BinaryReader br = new BinaryReader(fs);

                    Byte[] bytes = br.ReadBytes((Int32)fs.Length);


                    string stfphoto = Path.GetFileName("~/Student Photo/img");

                    string stdphotopath = Server.MapPath("~/Staff Photo/") + fileuploadbrowse.FileName;
                    string stdphotoext = System.IO.Path.GetExtension(fileuploadbrowse.FileName);

                    string insphoto = "if exists (select photo from StdPhoto where app_no='" + Session["pdfapp_no"] + "')";
                    insphoto = insphoto + " update StdPhoto set photo=@photo where app_no='" + Session["pdfapp_no"] + "'";
                    insphoto = insphoto + " else insert into StdPhoto (app_no,photo) values('" + Session["pdfapp_no"] + "',@photo)";

                    SqlCommand cmd = new SqlCommand(insphoto, con);
                    SqlParameter uploadedsubject_name = new SqlParameter("@photo", SqlDbType.Binary, bytes.Length);
                    uploadedsubject_name.Value = bytes;
                    cmd.Parameters.Add(uploadedsubject_name);
                    br.Close();
                    fs.Close();
                    con.Close();
                    con.Open();
                    cmd.ExecuteNonQuery();
                }
                errorspan.InnerHtml = "Updated Successfully";
                poperrjs.Visible = true;
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, ddl_collegename.SelectedItem.Value, "Commom_Selection_Process");
        }
    }
    public string returnYearforSem(string cursem)
    {
        switch (cursem)
        {
            case "1":
            case "2":
                cursem = "1";
                break;
            case "3":
            case "4":
                cursem = "2";
                break;
            case "5":
            case "6":
                cursem = "3";
                break;
            case "7":
            case "8":
                cursem = "4";
                break;
            case "9":
            case "10":
                cursem = "5";
                break;
        }
        return cursem;
    }
    public void hostelallotment(string appno)
    {

        string floor = "";
        string room = "";

        string buildingcode = d2.GetFunction("select HostelBuildingFK from HM_HostelMaster where HostelMasterPK='" + ddlHosHostel.SelectedItem.Value + "'");
        string q = "select top 1 Avl_Student,students_allowed,Roompk,Floorpk,Code,b.Building_Name,rd.Room_Name,rd.Floor_Name  from Building_Master B,Room_Detail rd,Floor_Master f where b.Building_Name =f.Building_Name and f.Floor_Name =rd.Floor_Name and b.Building_Name =rd.Building_Name and Code in (" + buildingcode + ") and rd.students_allowed <>rd.Avl_Student and rd.Room_type ='" + ddlHosRoom.SelectedItem.Value + "' order by code,Floorpk,Roompk ";
        ds1 = d2.select_method_wo_parameter(q, "text");
        if (ds1.Tables[0].Rows.Count > 0)
        {
            for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
            {
                string foolrpk = Convert.ToString(ds1.Tables[0].Rows[i]["Floorpk"]);
                string roompk = Convert.ToString(ds1.Tables[0].Rows[i]["Roompk"]);
                buildingcode = Convert.ToString(ds1.Tables[0].Rows[i]["Code"]);
                floor = Convert.ToString(ds1.Tables[0].Rows[i]["Floor_Name"]);
                room = Convert.ToString(ds1.Tables[0].Rows[i]["Room_Name"]);
                string buildingname = Convert.ToString(ds1.Tables[0].Rows[i]["Building_Name"]);

                string up = " update Room_Detail set Avl_Student= Avl_Student + 1 where Room_Type='" + ddlHosRoom.SelectedItem.Value + "' and Floor_Name='" + floor + "' and Room_Name='" + room + "' and Building_Name='" + buildingname + "'";
                int k = d2.update_method_wo_parameter(up, "text");

                string quary = "if exists(select * from HT_HostelRegistration where APP_No='" + appno + "')update HT_HostelRegistration set MemType='1',HostelAdmDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',BuildingFK='" + buildingcode + "',FloorFK='" + foolrpk + "',RoomFK='" + roompk + "',IsDiscontinued='0',HostelMasterFK='" + ddlHosHostel.SelectedValue + "',collegecode='" + ddl_collegename.SelectedItem.Value + "' else insert into HT_HostelRegistration(MemType,APP_No,HostelAdmDate,BuildingFK,FloorFK,RoomFK,IsDiscontinued,HostelMasterFK,collegecode)values(1,'" + appno + "','" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + buildingcode + "','" + foolrpk + "','" + roompk + "','0','" + ddlHosHostel.SelectedValue + "','" + ddl_collegename.SelectedItem.Value + "')";
                int h = d2.insert_method(quary, hat, "Text");
                string regupdate = " update Registration set Stud_Type='Hostler' where App_No='" + appno + "'";
                int regup = d2.update_method_wo_parameter(regupdate, "Text");

            }
        }
        else
        {

        }

    }
    public void travelAllotment(string appnumber, string type)
    {
        try
        {

            string sqlcmd = "";
            string routeid = "";
            string Dep_Time = "";
            string Arr_Time = "";
            string addrouteid = "";
            string conc = "";
            double duration = 0;
            string routid_dur = "";
            string Stage_id = "";
            string Veh_ID = "";
            string veh_ids = "";
            ArrayList route = new ArrayList();
            sqlcmd = " (select distinct v.Veh_ID,r.Route_ID,s.Stage_Name,Stage_id,Arr_Time,Dep_Time,Stages,TotalNo_Seat,nofstudents,nofStaffs from vehicle_master v,routemaster r,stage_master s";
            sqlcmd = sqlcmd + " where v.veh_id=r.veh_id and v.route=r.route_id and convert(varchar(50),s.Stage_id)=(r.Stage_Name)";
            sqlcmd = sqlcmd + " and college_code like'%" + ddl_collegename.SelectedItem.Value + "%' and s.stage_name='" + txtBoardPnt.Text + "' and sess='M')";
            sqlcmd = sqlcmd + " UNION ";
            sqlcmd = sqlcmd + " (select distinct v.Veh_ID,r.Route_ID,s.Stage_Name,Stage_id,Arr_Time,Dep_Time,Stages,TotalNo_Seat,nofstudents,nofStaffs from vehicle_master v,routemaster r,stage_master s";
            sqlcmd = sqlcmd + " where v.veh_id=r.veh_id and v.route=r.route_id and convert(varchar(50),s.Stage_id)=(r.Stage_Name)";
            sqlcmd = sqlcmd + " and (college_code is null or college_code='' or college_code not like'%" + ddl_collegename.SelectedItem.Value + "%') and s.stage_name='" + txtBoardPnt.Text + "' and sess='M')";
            ds = d2.select_method_wo_parameter(sqlcmd, "Text");
            Dictionary<int, double> routee = new Dictionary<int, double>();
            if (ds.Tables[0].Rows.Count > 0)
            {
                int count = ds.Tables[0].Rows.Count;
                //if (count > 1)
                //{
                for (int y = 0; y < ds.Tables[0].Rows.Count; y++)
                {
                    routeid = Convert.ToString(ds.Tables[0].Rows[y]["Route_ID"]);
                    Dep_Time = d2.GetFunction("select Arr_Time  from routemaster where Route_ID='" + routeid + "' and sess='M' and (Dep_Time like 'Hal%')");
                    Arr_Time = d2.GetFunction("select Dep_Time  from routemaster where Route_ID='" + routeid + "' and sess='M' and (Arr_Time like 'Ha%')");
                    duration = Convert.ToDouble(Dep_Time) - Convert.ToDouble(Arr_Time);
                    Stage_id = Convert.ToString(ds.Tables[0].Rows[y]["Stage_id"]);
                    Veh_ID = Convert.ToString(ds.Tables[0].Rows[y]["Stage_id"]);

                    if (addrouteid == "")
                    {
                        addrouteid = Convert.ToString(duration);
                        routid_dur = routeid;
                        veh_ids = Veh_ID;
                    }
                    else
                    {
                        if (Convert.ToDouble(addrouteid) > duration)
                        {
                            addrouteid = Convert.ToString(duration);
                            routid_dur = routeid;

                        }
                    }

                }
                string querystu;
                querystu = "update registration set Bus_RouteID='" + routid_dur + "',Boarding='" + Stage_id + "',VehID='" + veh_ids + "',Trans_PayType='" + type + "',Traveller_Date = '" + DateTime.Now.ToString("MM/dd/yyyy") + "' where app_no='" + appnumber + "'";
                int u = d2.update_method_wo_parameter(querystu, "text");

            }

        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, ddl_collegename.SelectedItem.Value, "Commom_Selection_Process");
        }
    }

    protected double collegewiseapplicationRights()
    {
        double RightsCode = 0;
        double.TryParse(Convert.ToString(d2.GetFunction("select linkvalue from New_InsSettings where LinkName='CollegewiseAdmissionNoRights' and user_code ='" + usercode + "' and college_code ='" + ddl_collegename.SelectedItem.Value + "'")), out RightsCode);
        return RightsCode;
    }
    private string genearateAdmissionNo(string collegecode, string degreecode, string ddl_batch)
    {
        string orginalapplication_number = "";
        try
        {
            Hashtable hat = new Hashtable();
            hat.Add(1, "0");
            hat.Add(2, "00");
            hat.Add(3, "000");
            hat.Add(4, "0000");
            hat.Add(5, "00000");
            hat.Add(6, "000000");
            hat.Add(7, "0000000");
            hat.Add(8, "00000000");
            hat.Add(9, "000000000");
            hat.Add(10, "0000000000");
            bool check = false;
            int application_No = 0;
            string appCodetemp = string.Empty;
            string selectquery = string.Empty;
            if (collegewiseapplicationRights() == 1)
            {
                appCodetemp = d2.GetFunction("select appcode from code_generation where  batch_year='" + ddl_batch + "' and college_code='" + collegecode + "' and app_code_flag ='1' and isnull(iscollege,'0')='1'");
                selectquery = "select top 1 roll_admit  from Registration where roll_admit <>'' and roll_admit like '%" + appCodetemp + "%' and batch_year='" + ddl_batch + "'  and college_code='" + collegecode + "' order by roll_admit desc";

                selectquery = selectquery + " select appcode,app_startwith,app_serial from code_generation where  batch_year='" + ddl_batch + "' and college_code='" + collegecode + "'  and app_code_flag ='1' and isnull(iscollege,'0')='1'";
            }
            else
            {
                appCodetemp = d2.GetFunction("select appcode from code_generation where  batch_year='" + ddl_batch + "' and degree_code='" + degreecode + "' and college_code='" + collegecode + "' and app_code_flag ='1'");
                selectquery = "select top 1 roll_admit  from Registration where roll_admit <>'' and roll_admit like '%" + appCodetemp + "%' and batch_year='" + ddl_batch + "' and degree_code='" + degreecode + "' and college_code='" + collegecode + "' order by roll_admit desc";
                selectquery = selectquery + " select appcode,app_startwith,app_serial from code_generation where  batch_year='" + ddl_batch + "' and degree_code='" + degreecode + "' and college_code='" + collegecode + "'  and app_code_flag ='1'";
            }
            ds.Clear();
            ds = d2.select_method_wo_parameter(selectquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                // application_No = Convert.ToInt32(ds.Tables[0].Rows[0][0]);
                string applno = Convert.ToString(ds.Tables[0].Rows[0][0]);
                if (ds.Tables[1].Rows.Count > 0)
                {
                    string appcode = Convert.ToString(ds.Tables[1].Rows[0]["appcode"]);
                    string appsiz2 = Convert.ToString(ds.Tables[1].Rows[0]["app_serial"]);
                    int len = appcode.Length;
                    applno = applno.Remove(0, len);
                    string newnumber = Convert.ToString((Convert.ToInt32(applno) + 1));
                    int val = newnumber.Length;
                    if (val == Convert.ToInt32(appsiz2))
                        orginalapplication_number = appcode + "" + newnumber;
                    else
                    {
                        int remain = Convert.ToInt32(appsiz2) - val;
                        string addnumber = Convert.ToString(hat[remain]);
                        addnumber = addnumber + "" + newnumber;
                        orginalapplication_number = appcode + "" + addnumber;
                    }
                }
                else
                    check = true;
            }
            else
                check = true;

            if (check && ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
            {
                string appcode = Convert.ToString(ds.Tables[1].Rows[0]["appcode"]);
                string appsiz2 = Convert.ToString(ds.Tables[1].Rows[0]["app_startwith"]);
                int len = appsiz2.Length;
                if (len == Convert.ToInt32(ds.Tables[1].Rows[0]["app_serial"]))
                {
                    orginalapplication_number = appcode + "" + appsiz2;
                }
                else
                {
                    int remain = Convert.ToInt32(ds.Tables[1].Rows[0]["app_serial"]) - len;
                    string addnumber = Convert.ToString(hat[remain]);
                    addnumber = addnumber + "" + appsiz2;
                    orginalapplication_number = appcode + "" + addnumber;
                }
            }
        }
        catch { }
        return orginalapplication_number;
    }
    public void bindbatch()
    {
        ddl_batch.Items.Clear();
        ds = d2.BindBatch();
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_batch.DataSource = ds;
            ddl_batch.DataTextField = "batch_year";
            ddl_batch.DataValueField = "batch_year";
            ddl_batch.DataBind();
        }
    }
    public void EquivalentToHSC()
    {
        try
        {
            string value = d2.GetFunction("select value from Master_Settings where settings ='Equivalent To HSC' and usercode ='" + user_code + "'");
            if (value == "0")
            {
                if (ddledu.SelectedItem.Text == "UG")
                {
                    eqltohsc = ",securedmark";
                }
                else
                {
                    eqltohsc = ",percentage";
                }
            }
            else
            {
                if (ddledu.SelectedItem.Text == "UG")
                {
                    eqltohsc = ",((ISNULL((securedmark / NULLIF( totalmark, 0 )),0))*1200) as securedmark";
                }
                else
                {
                    eqltohsc = ",percentage";
                }
            }
        }
        catch
        {
        }

    }
    public void bindsem()
    {
        ddl_sem.Items.Clear();

        Boolean first_year;
        first_year = false;
        int duration = 0;
        int i = 0;
        ds.Clear();
        string branch = "";
        string build = "";
        string build1 = "";
        string batch = "";

        branch = Convert.ToString(ddldept.SelectedItem.Value);

        batch = Convert.ToString(ddl_batch.SelectedItem.Value);
        //batch = build;

        if (branch.Trim() != "" && batch.Trim() != "")
        {
            // ds = d2.BindSem(branch, batch, ddlcollege.SelectedItem.Value);
            string strsql1 = "select distinct duration,first_year_nonsemester  from degree where degree_code in ('" + branch + "') and college_code='" + ddl_collegename.SelectedItem.Value + "'";
            ds = d2.select_method_wo_parameter(strsql1, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string dur = Convert.ToString(ds.Tables[0].Rows[i][0]);
                    if (dur.Trim() != "")
                    {
                        if (duration < Convert.ToInt32(dur))
                        {
                            duration = Convert.ToInt32(dur);
                        }
                    }
                }
            }
            if (duration != 0)
            {
                for (i = 1; i <= duration; i++)
                {
                    ddl_sem.Items.Add(Convert.ToString(i));
                }
            }
        }
    }
    private void setLabelText()
    {
        string grouporusercode = string.Empty;
        if (Session["group_code"] != null && (Convert.ToString(Session["group_code"]).Trim() != "") && (Convert.ToString(Session["group_code"]).Trim() != "0") && (Convert.ToString(Session["group_code"]).Trim() != "-1"))
        {
            grouporusercode = " group_code=" + Convert.ToString(Session["group_code"]).Trim() + "";
        }
        else if (Session["usercode"] != null)
        {
            grouporusercode = " usercode=" + Convert.ToString(Session["usercode"]).Trim() + "";
        }
        List<Label> lbl = new List<Label>();
        List<byte> fields = new List<byte>();
        lbl.Add(lbl_college);
        fields.Add(0);

        lbl.Add(Label3);
        fields.Add(2);

        lbl.Add(Label5);
        fields.Add(3);

        lbl.Add(lbl_org_sem);
        fields.Add(4);

        //Name -0, Stream - 1 ,Degree - 2, Branch - 3, Term - 4
        new HeaderLabelText().setLabels(grouporusercode, ref lbl, fields);
    }
    //Added by Idhris 22-11-2016
    private bool retrieveIncMarks()
    {
        bool isTrue = false;
        try
        {
            int val = 0;
            int.TryParse(d2.GetFunction("select value from Master_Settings where settings='IncludeMarksSettings' and usercode= " + usercode + ""), out val);
            isTrue = val == 1 ? true : false;
        }
        catch { isTrue = false; }
        return isTrue;
    }
    public void appliedSchool()
    {
        try
        {
            FpSpread3.Sheets[0].ColumnCount = 0;
            FpSpread3.Sheets[0].RowCount = 0;
            FpSpread3.SaveChanges();
            int count = 0;
            int i = 0;
            int cc = 0;
            string addbatch = "";
            string adddeg = "";
            string addrelival = "";
            string addcommval = "";
            string addsem = Convert.ToString(ddl_sem.SelectedItem.Value);
            for (i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    string addrelival1 = cbl_religion.Items[i].Value.ToString();
                    if (addrelival == "")
                    {
                        addrelival = addrelival1;
                    }
                    else
                    {
                        addrelival = addrelival + "'" + "," + "'" + addrelival1;
                    }
                }
            }


            for (i = 0; i < cbl_comm.Items.Count; i++)
            {
                if (cbl_comm.Items[i].Selected == true)
                {
                    string addcommval1 = cbl_comm.Items[i].Value.ToString();

                    if (addcommval == "")
                    {
                        addcommval = addcommval1;
                    }
                    else
                    {
                        addcommval = addcommval + "'" + "," + "'" + addcommval1;
                    }
                }
            }

            string addcomreli = "";
            if (addrelival != "")
            {
                addcomreli = " and religion in('" + addrelival + "')";
            }
            if (addcommval != "")
            {
                addcomreli = addcomreli + " and community in('" + addcommval + "')";
            }

            string[] ay = TextBox2.Text.Split('/');
            string[] ay1 = TextBox3.Text.Split('/');
            DateTime dtt = new DateTime();
            DateTime dt1 = new DateTime();
            dtt = Convert.ToDateTime(ay[1] + "/" + ay[0] + "/" + ay[2]);
            dt1 = Convert.ToDateTime(ay1[1] + "/" + ay1[0] + "/" + ay1[2]);
            string addsearch = "";
            if (txt_searchstudname.Text != "")
            {
                addsearch = " and a.stud_name='" + txt_searchstudname.Text + "'";
            }
            else if (txt_searchappno.Text != "")
            {
                addsearch = addsearch + " and a.app_formno='" + txt_searchappno.Text + "'";
            }
            else if (txt_searchmobno.Text != "")
            {
                addsearch = addsearch + " and a.Student_Mobile='" + txt_searchmobno.Text + "'";
            }
            else
            {
                addsearch = "";
            }

            addbatch = Convert.ToString(Convert.ToString(ddl_batch.SelectedItem.Value));
            adddeg = Convert.ToString(ddldept.SelectedItem.Value);
            string degCodeOp = string.Empty;
            if (cbAltCourse.Checked)
            {
                degCodeOp = "  and   a.alternativedegree_code in ('" + adddeg + "') ";
            }
            else
            {
                degCodeOp = "  and  a.degree_code in('" + adddeg + "')  ";
            }
            FpSpread3.Sheets[0].PageSize = 5;
            FpSpread3.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
            FpSpread3.Pager.Mode = FarPoint.Web.Spread.PagerMode.NextPrev;
            FpSpread3.Pager.Align = HorizontalAlign.Right;
            FpSpread3.Pager.Font.Bold = true;
            FarPoint.Web.Spread.StyleInfo darkstyle2 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle2.BackColor = ColorTranslator.FromHtml("#008B8B");
            darkstyle2.ForeColor = Color.Black;
            darkstyle2.HorizontalAlign = HorizontalAlign.Center;
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle2;
            FpSpread3.Pager.PageCount = 5;
            FpSpread3.ActiveSheetView.SheetCorner.DefaultStyle.Font.Bold = false;
            FpSpread3.ActiveSheetView.DefaultRowHeight = 25;
            FpSpread3.ActiveSheetView.Rows.Default.Font.Name = "Book Antiqua";
            FpSpread3.ActiveSheetView.Rows.Default.Font.Size = FontUnit.Small;
            FpSpread3.ActiveSheetView.Rows.Default.Font.Bold = false;
            FpSpread3.ActiveSheetView.Columns.Default.Font.Bold = false;
            FpSpread3.ActiveSheetView.Columns.Default.Font.Size = FontUnit.Small;
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            FpSpread3.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            FpSpread3.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            FpSpread3.ShowHeaderSelection = false;
            FpSpread3.Sheets[0].ColumnCount = 3;
            FpSpread3.Sheets[0].RowCount = 0;
            string query = "select distinct a.stud_type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,religion,community,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate from degree d,Department dt,Course C, applyn A Where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')=0   and ISNULL(selection_status,'0')=0  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code ";

            if (addsearch != "")
            {
                query += " " + addsearch + " ";
            }
            else
            {
                query += " " + degCodeOp + " " + addcomreli + "and date_applied between '" + dtt.ToString("MM/dd/yyyy") + "' and '" + dt1.ToString("MM/dd/yyyy") + "'  ";
            }
            query += "  order by a.app_formno asc ";

            ds.Clear();
            ds = dt.select_method_wo_parameter(query, "Text");

            if (query == "")
            {
                FpSpread3.Visible = false;
                //lbl_err_stud.Visible = true;
                //lbl_err_stud.Text = "Kindly Select All List ";
                Label66.Visible = false;
                Label68.Visible = false;
                btn_print.Visible = false;
                btn_excel.Visible = false;
                txt_excelname.Visible = false;
                lbl_reportname.Visible = false;
                btnapprove.Visible = false;
                btnSendSmsOpenPop.Visible = false;
                Button3.Visible = false;
                buttnleft.Visible = false;
                return;
            }
            else
            {
                if (query != "")
                {
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        Label66.Visible = false;
                        Label68.Visible = false;
                        FpSpread3.Visible = false;
                        errorspan.InnerHtml = "No Records Found";
                        poperrjs.Visible = true;
                        btn_excel.Visible = false;
                        txt_excelname.Visible = false;
                        lbl_reportname.Visible = false;
                        btn_print.Visible = false;
                        btnapprove.Visible = false;
                        btnSendSmsOpenPop.Visible = false;
                        Button3.Visible = false;
                        buttnleft.Visible = false;
                        return;
                    }
                    else
                    {
                        FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                        FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                        FpSpread3.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread3.Sheets[0].ColumnHeader.Cells[0, 2].Text = "View";
                        cc = 2;
                        if (checkSchoolSetting() == 0)
                            FpSpread3.Sheets[0].Columns[2].Visible = false;
                        else
                            FpSpread3.Sheets[0].Columns[2].Visible = true;

                        string columnorder_query = "select * from admitcolumnset where  user_code='" + user_code + "' and  textcriteria='column' order by Convert(int,priority) asc";
                        // college_code='" + ddl_collegename.SelectedItem.Value + "' and
                        ds1.Clear();
                        ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                        if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
                        {

                            for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                            {
                                string percentage = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                if (percentage.Trim() == "Hostel Name" || percentage.Trim() == "Room Type" || percentage.Trim() == "Boarding")
                                {
                                }
                                else
                                {
                                    cc++;
                                    FpSpread3.Sheets[0].ColumnCount = cc + 1;

                                    FpSpread3.Sheets[0].ColumnHeader.Cells[0, cc].Text = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                    if (ddledu.SelectedItem.Text == "PG")
                                    {
                                        if (percentage == "Marks")
                                        {
                                            FpSpread3.Sheets[0].ColumnHeader.Cells[0, cc].Text = "Percentage";
                                        }
                                    }

                                }

                            }
                        }
                        else
                        {
                            FpSpread3.Visible = false;
                            errorspan.InnerHtml = "Please Set The Column Order Setting";
                            poperrjs.Visible = true;
                            return;
                        }

                        FarPoint.Web.Spread.CheckBoxCellType cball = new FarPoint.Web.Spread.CheckBoxCellType();
                        cball.AutoPostBack = true;
                        FarPoint.Web.Spread.TextCellType txtCt = new FarPoint.Web.Spread.TextCellType();


                        FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                        cb.AutoPostBack = false;
                        FarPoint.Web.Spread.ButtonCellType btn = new FarPoint.Web.Spread.ButtonCellType("MyCommand", FarPoint.Web.Spread.ButtonType.ImageButton, "~/images/view11.png");
                        DataView dv = new DataView();

                        FpSpread3.Sheets[0].RowCount++;
                        FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].CellType = cball;
                        FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread3.Sheets[0].Rows[FpSpread3.Sheets[0].RowCount - 1].Locked = true;
                        FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].Locked = false;
                        for (int recI = 0; recI < ds.Tables[0].Rows.Count; recI++)
                        {
                            string app_no = Convert.ToString(ds.Tables[0].Rows[recI]["app_no"]);


                            FpSpread3.Sheets[0].RowCount++;
                            count++;

                            ds.Tables[0].DefaultView.RowFilter = "app_no='" + app_no + "'";
                            dv = ds.Tables[0].DefaultView;
                            if (dv.Count > 0)
                            {
                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Text = count.ToString();
                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(dv[0]["app_no"]);
                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].Locked = true;
                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 1].CellType = cb;
                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].CellType = btn;
                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].Column.Width = 50;
                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                                cc = 2;
                                columnorder_query = "select * from admitcolumnset where   user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
                                // college_code='" + ddl_collegename.SelectedItem.Value + "' and
                                ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                                if (ds1.Tables[0].Rows.Count > 0)
                                {

                                    for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                                    {
                                        string columname = Convert.ToString(ds1.Tables[0].Rows[u]["column_name"]);
                                        if (columname == "HostelRegistrationPK" || columname == "RoomFK" || columname == "Boarding")
                                        {
                                        }
                                        else
                                        {
                                            cc++;

                                            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].CellType = txtCt;
                                            if (columname == "Alternativedegree_code")
                                            {
                                                string altercourse = dt.GetFunction("select distinct dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddl_collegename.SelectedItem.Value + "' and d.Degree_Code='" + Convert.ToString(dv[0]["Alternativedegree_code"]) + "' ");
                                                if (altercourse == "0")
                                                {
                                                    altercourse = "";
                                                }
                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = altercourse;
                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                            }

                                            else if (columname == "DistinctSport")
                                            {
                                                string value = Convert.ToString(dv[0][columname]);
                                                if (value == "Yes")
                                                {
                                                    string val = d2.GetFunction("select textval from applyn a,textvaltable t where app_no='" + app_no + "' and textcode=DistinctSport");
                                                    if (val != "0")
                                                    {
                                                        FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = value + "-" + val;
                                                    }
                                                    else
                                                    {
                                                        FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = value;
                                                    }
                                                }
                                                else
                                                {
                                                    FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = value;
                                                }
                                            }
                                            else if (columname == "totalfees")
                                            {
                                                FpSpread3.Sheets[0].Columns[cc].Visible = false;
                                            }
                                            else if (columname == "remarks")
                                            {
                                                string VocationStream = Convert.ToString(dv[0]["vocational_stream"]);
                                                string Nationality = Convert.ToString(dv[0]["citizen"]);
                                                string CourseCode = Convert.ToString(dv[0]["course_code"]);
                                                string Concatvalue = "";
                                                if (VocationStream.Trim() != "No")
                                                {
                                                    Concatvalue = "Vocational";
                                                }
                                                if (Nationality.Trim().ToUpper() != "INDIAN")
                                                {
                                                    if (Concatvalue.Trim() == "")
                                                    {
                                                        Concatvalue = Nationality;
                                                    }
                                                    else
                                                    {
                                                        Concatvalue = Concatvalue + " - " + Nationality;
                                                    }
                                                }
                                                if (CourseCode.Trim().ToUpper() == "CBSE")
                                                {
                                                    if (Concatvalue.Trim() == "")
                                                    {
                                                        Concatvalue = CourseCode;
                                                    }
                                                    else
                                                    {
                                                        Concatvalue = Concatvalue + " - " + CourseCode;
                                                    }
                                                }
                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(Concatvalue);

                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                // FpSpread3.Sheets[0].Columns[cc].Visible = false;
                                            }
                                            else if (columname != "PaidAmount")
                                            {

                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(dv[0][columname]);
                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Locked = true;
                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                            }

                                        }
                                    }
                                }
                            }
                        }
                        FpSpread3.Visible = true;
                        FpSpread3.Sheets[0].PageSize = 51;
                        FpSpread3.TitleInfo.Height = 30;
                        FpSpread3.CommandBar.Visible = false;
                        FpSpread3.Sheets[0].RowHeader.Visible = false;
                        FpSpread3.Width = 930;
                        FpSpread3.Height = 390;
                        Label66.Visible = true;
                        btn_print.Visible = true;
                        Label68.Visible = true;
                        btn_excel.Visible = true;
                        txt_excelname.Visible = true;
                        lbl_reportname.Visible = true;
                        btnapprove.Visible = true;
                        btnSendSmsOpenPop.Visible = true;
                        Button3.Visible = true;
                        buttnleft.Visible = false;
                        Label66.Text = "Total No Of Applied :";
                        //Label68.Text = Convert.ToString(dicsubcol.Count);

                    }
                }
            }


        }
        catch (Exception ewx)
        {

        }
    }
    public void shortlistSchool()
    {
        try
        {
            int count = 0;
            int i = 0;
            string addbatch = "";
            string adddeg = "";
            string addrelival = "";
            string addcommval = "";
            string addsem = Convert.ToString(ddl_sem.SelectedItem.Value);
            for (i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    string addrelival1 = cbl_religion.Items[i].Value.ToString();
                    if (addrelival == "")
                    {
                        addrelival = addrelival1;
                    }
                    else
                    {
                        addrelival = addrelival + "'" + "," + "'" + addrelival1;
                    }
                }
            }


            for (i = 0; i < cbl_comm.Items.Count; i++)
            {
                if (cbl_comm.Items[i].Selected == true)
                {
                    string addcommval1 = cbl_comm.Items[i].Value.ToString();

                    if (addcommval == "")
                    {
                        addcommval = addcommval1;
                    }
                    else
                    {
                        addcommval = addcommval + "'" + "," + "'" + addcommval1;
                    }
                }
            }
            string univBoard = string.Empty;
            for (i = 0; i < cbl_BoardUniv.Items.Count; i++)
            {
                if (cbl_BoardUniv.Items[i].Selected == true)
                {
                    string univBoard1 = cbl_BoardUniv.Items[i].Value.ToString();

                    if (univBoard == "")
                    {
                        univBoard = univBoard1;
                    }
                    else
                    {
                        univBoard = univBoard + "," + univBoard1;
                    }
                }
            }
            string attemp = string.Empty;
            for (i = 0; i < cblAttempt.Items.Count; i++)
            {
                if (cblAttempt.Items[i].Selected == true)
                {
                    string attemp1 = cblAttempt.Items[i].Value.ToString();

                    if (attemp == "")
                    {
                        attemp = "max(ISNULL(noofattempt,'0')) =" + attemp1 + "";
                    }
                    else
                    {
                        attemp = attemp + " or max(ISNULL(noofattempt,'0')) =" + attemp1 + "";
                    }
                }
            }
            string addcomreli = "";
            if (addrelival != "")
            {
                addcomreli = " and religion in('" + addrelival + "')";
            }
            if (addcommval != "")
            {
                addcomreli = addcomreli + " and community in('" + addcommval + "')";
            }
            if (univBoard != "")
            {
                addcomreli = addcomreli + " and p.Course_code in(" + univBoard + ") ";
            }

            string[] ay = TextBox2.Text.Split('/');
            string[] ay1 = TextBox3.Text.Split('/');
            DateTime dtt = new DateTime();
            DateTime dt1 = new DateTime();
            dtt = Convert.ToDateTime(ay[1] + "/" + ay[0] + "/" + ay[2]);
            dt1 = Convert.ToDateTime(ay1[1] + "/" + ay1[0] + "/" + ay1[2]);
            string addsearch = "";
            if (txt_searchstudname.Text != "")
            {
                addsearch = " and a.stud_name='" + txt_searchstudname.Text + "'";
            }
            else if (txt_searchappno.Text != "")
            {
                addsearch = addsearch + " and a.app_formno='" + txt_searchappno.Text + "'";
            }
            else if (txt_searchmobno.Text != "")
            {
                addsearch = addsearch + " and a.Student_Mobile='" + txt_searchmobno.Text + "'";
            }
            else
            {
                addsearch = "";
            }
            int cc = 0;
            addbatch = Convert.ToString(Convert.ToString(ddl_batch.SelectedItem.Value));
            adddeg = Convert.ToString(ddldept.SelectedItem.Value);
            string degCodeOp = string.Empty;
            if (cbAltCourse.Checked)
            {
                degCodeOp = "  and   a.alternativedegree_code in ('" + adddeg + "') ";
            }
            else
            {
                degCodeOp = "  and  a.degree_code in('" + adddeg + "')  ";
            }
            FpSpread1.Visible = true;
            FpSpread1.Sheets[0].PageSize = 5;
            FpSpread1.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
            FpSpread1.Pager.Mode = FarPoint.Web.Spread.PagerMode.NextPrev;
            FpSpread1.Pager.Align = HorizontalAlign.Right;
            FpSpread1.Pager.Font.Bold = true;
            FpSpread1.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            FpSpread1.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            FarPoint.Web.Spread.StyleInfo darkstyle22 = new FarPoint.Web.Spread.StyleInfo();
            FpSpread1.CommandBar.Visible = false;
            FpSpread1.Sheets[0].RowHeader.Visible = false;
            darkstyle22.BackColor = ColorTranslator.FromHtml("#008B8B");
            darkstyle22.ForeColor = Color.Black;
            darkstyle22.HorizontalAlign = HorizontalAlign.Center;
            FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle22;
            FpSpread1.Sheets[0].ColumnCount = 3;
            FpSpread1.Sheets[0].RowCount = 0;
            FpSpread1.Pager.PageCount = 5;
            FpSpread1.ShowHeaderSelection = false;
            string query = "";
            query = "   select distinct a.stud_type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,religion,community,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate from degree d,Department dt,Course C, applyn A Where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')=0   and ISNULL(selection_status,'0')='1'  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code ";
            if (attemp != "")
            {
                query = query + " and a.app_no in (select a.app_no from applyn a,Stud_prev_details s,perv_marks_history ph where a.app_no =s.app_no and s.course_entno =ph.course_entno and isconfirm ='1' and ISNULL(admission_status,'0')='0'   and ISNULL(selection_status,'0')='1'  and a.Batch_Year in('" + addbatch + "')  and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  group by a.app_no  having (" + attemp + "))";
            }
            if (addsearch != "")
            {
                query += " " + addsearch + " ";
            }
            else
            {
                query += " " + degCodeOp + " " + addcomreli + "and AdmitedDate between '" + dtt.ToString("MM/dd/yyyy") + "' and '" + dt1.ToString("MM/dd/yyyy") + "' ";
            }
            query += " order by a.app_formno asc ";

            ds.Clear();
            ds = dt.select_method_wo_parameter(query, "Text");

            if (query == "")
            {
                FpSpread1.Visible = false;
                Label66.Visible = false;
                Label68.Visible = false;
                //lbl_err_stud.Visible = true;
                //lbl_err_stud.Text = "Kindly Select All List ";
                btn_print.Visible = false;
                btn_excel.Visible = false;
                txt_excelname.Visible = false;
                lbl_reportname.Visible = false;
                btnapprove.Visible = false;
                btnSendSmsOpenPop.Visible = false;
                Button3.Visible = false;
                buttnleft.Visible = false;
                return;
            }
            else
            {
                if (query != "")
                {
                    //ds = dt.select_method(query, hat, "Text");
                    if (ds.Tables.Count == 0 || ds.Tables[0].Rows.Count == 0)
                    {
                        Label66.Visible = false;
                        Label68.Visible = false;
                        FpSpread1.Visible = false;
                        errorspan.InnerHtml = "No Records Found";
                        btn_print.Visible = false;
                        poperrjs.Visible = true;
                        btn_excel.Visible = false;
                        txt_excelname.Visible = false;
                        lbl_reportname.Visible = false;
                        btnapprove.Visible = false;
                        btnSendSmsOpenPop.Visible = false;
                        Button3.Visible = false;
                        buttnleft.Visible = false;
                        return;

                    }
                    else
                    {

                        FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                        FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                        FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].Text = "View";
                        cc = 2;
                        string columnorder_query = "select * from admitcolumnset where   user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
                        // college_code='" + ddl_collegename.SelectedItem.Value + "' and
                        ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                        if (ds1.Tables[0].Rows.Count > 0)
                        {

                            for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                            {
                                string percentage = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                if (percentage == "Hostel Name" || percentage == "Room Type" || percentage == "Boarding")
                                {
                                }
                                else
                                {
                                    cc++;
                                    FpSpread1.Sheets[0].ColumnCount = cc + 1;
                                    FpSpread1.Sheets[0].ColumnHeader.Cells[0, cc].Text = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);

                                    if (ddledu.SelectedItem.Text == "PG")
                                    {
                                        if (percentage == "Marks")
                                        {
                                            FpSpread1.Sheets[0].ColumnHeader.Cells[0, cc].Text = "Percentage";
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            FpSpread1.Visible = false;
                            errorspan.InnerHtml = "Please Set The Column Order Setting";
                            poperrjs.Visible = true;
                            return;
                        }
                        FarPoint.Web.Spread.TextCellType txtct = new FarPoint.Web.Spread.TextCellType();
                        FarPoint.Web.Spread.CheckBoxCellType cball = new FarPoint.Web.Spread.CheckBoxCellType();
                        cball.AutoPostBack = true;
                        FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                        cb.AutoPostBack = false;
                        FarPoint.Web.Spread.ButtonCellType btn = new FarPoint.Web.Spread.ButtonCellType("MyCommand", FarPoint.Web.Spread.ButtonType.ImageButton, "~/images/view11.png");
                        FpSpread1.Sheets[0].RowCount++;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].CellType = cball;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Locked = false;
                        DataView dv = new DataView();
                        for (int recI = 0; recI < ds.Tables[0].Rows.Count; recI++)
                        {
                            string app_no = Convert.ToString(ds.Tables[0].Rows[recI]["app_no"]);

                            ds.Tables[0].DefaultView.RowFilter = "app_no=" + app_no + "";
                            dv = ds.Tables[0].DefaultView;
                            if (dv.Count > 0)
                            {

                                FpSpread1.Sheets[0].RowCount++;
                                count++;

                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = count.ToString();
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Locked = true;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(dv[0]["app_no"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].CellType = cb;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].CellType = btn;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Column.Width = 50;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                                cc = 2;
                                if (checkSchoolSetting() == 0)
                                    FpSpread1.Sheets[0].Columns[2].Visible = false;
                                else
                                    FpSpread1.Sheets[0].Columns[2].Visible = true;
                                columnorder_query = "select * from admitcolumnset where  user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
                                //college_code='" + ddl_collegename.SelectedItem.Value + "' and
                                ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                                if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
                                {

                                    for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                                    {
                                        string columname = Convert.ToString(ds1.Tables[0].Rows[u]["column_name"]);
                                        if (columname == "HostelRegistrationPK" || columname == "RoomFK" || columname == "Boarding")
                                        {
                                        }
                                        else
                                        {
                                            cc++;

                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].CellType = txtct;
                                            if (columname == "Alternativedegree_code")
                                            {
                                                string altercourse = dt.GetFunction("select distinct dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddl_collegename.SelectedItem.Value + "' and d.Degree_Code='" + Convert.ToString(dv[0]["Alternativedegree_code"]) + "' ");
                                                if (altercourse == "0")
                                                {
                                                    altercourse = "";
                                                }
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = altercourse;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Locked = true;
                                            }
                                            else if (columname == "DistinctSport")
                                            {
                                                string value = Convert.ToString(dv[0][columname]);
                                                if (value == "Yes")
                                                {
                                                    string val = d2.GetFunction("select textval from applyn a,textvaltable t where app_no='" + app_no + "' and textcode=DistinctSport");
                                                    if (val != "0")
                                                    {
                                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = value + "-" + val;
                                                    }
                                                    else
                                                    {
                                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = value;
                                                    }
                                                }
                                                else
                                                {
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = value;
                                                }
                                            }
                                            else if (columname == "totalfees")
                                            {
                                                FpSpread1.Sheets[0].Columns[cc].Visible = false;
                                            }

                                            else if (columname == "remarks")
                                            {
                                                string VocationStream = Convert.ToString(dv[0]["vocational_stream"]);
                                                string Nationality = Convert.ToString(dv[0]["citizen"]);
                                                string CourseCode = Convert.ToString(dv[0]["course_code"]);
                                                string Concatvalue = "";
                                                if (VocationStream.Trim() != "No")
                                                {
                                                    Concatvalue = "Vocational";
                                                }
                                                if (Nationality.Trim().ToUpper() != "INDIAN")
                                                {
                                                    if (Concatvalue.Trim() == "")
                                                    {
                                                        Concatvalue = Nationality;
                                                    }
                                                    else
                                                    {
                                                        Concatvalue = Concatvalue + " - " + Nationality;
                                                    }
                                                }
                                                if (CourseCode.Trim().ToUpper() == "CBSE")
                                                {
                                                    if (Concatvalue.Trim() == "")
                                                    {
                                                        Concatvalue = CourseCode;
                                                    }
                                                    else
                                                    {
                                                        Concatvalue = Concatvalue + " - " + CourseCode;
                                                    }
                                                }
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(Concatvalue);
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Locked = true;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                                // FpSpread3.Sheets[0].Columns[cc].Visible = false;
                                            }
                                            else if (columname != "PaidAmount")
                                            {

                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(dv[0][columname]);
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Locked = true;

                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        FpSpread1.Visible = true;
                        FpSpread1.Sheets[0].PageSize = 51;
                        FpSpread1.TitleInfo.Height = 30;
                        FpSpread1.Width = 930;
                        FpSpread1.Height = 390;
                        Label66.Visible = true;
                        Label68.Visible = true;
                        btn_print.Visible = true;
                        btn_excel.Visible = true;
                        txt_excelname.Visible = true;
                        lbl_reportname.Visible = true;
                        // btnapprove.Visible = true;
                        Button3.Visible = true;
                        Button9.Visible = true;
                        buttnleft.Visible = false;
                        Label66.Text = "Total No Of Shortist Candidate :";
                        Label68.Text = Convert.ToString(ds.Tables[0].Rows.Count);

                    }
                }
            }

        }

        catch (NullReferenceException ex)
        {
            errorspan.InnerHtml = ("Processor Usage" + ex.Message);
            poperrjs.Visible = true;

        }
    }
    public void admittedSchool()
    {
        try
        {
            int count = 0;
            int i = 0;
            string addbatch = "";
            string adddeg = "";
            string addrelival = "";
            string addcommval = "";
            string addsem = Convert.ToString(ddl_sem.SelectedItem.Value);
            for (i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    string addrelival1 = cbl_religion.Items[i].Value.ToString();
                    if (addrelival == "")
                    {
                        addrelival = addrelival1;
                    }
                    else
                    {
                        addrelival = addrelival + "'" + "," + "'" + addrelival1;
                    }
                }
            }


            for (i = 0; i < cbl_comm.Items.Count; i++)
            {
                if (cbl_comm.Items[i].Selected == true)
                {
                    string addcommval1 = cbl_comm.Items[i].Value.ToString();

                    if (addcommval == "")
                    {
                        addcommval = addcommval1;
                    }
                    else
                    {
                        addcommval = addcommval + "'" + "," + "'" + addcommval1;
                    }
                }
            }
            string univBoard = string.Empty;
            for (i = 0; i < cbl_BoardUniv.Items.Count; i++)
            {
                if (cbl_BoardUniv.Items[i].Selected == true)
                {
                    string univBoard1 = cbl_BoardUniv.Items[i].Value.ToString();

                    if (univBoard == "")
                    {
                        univBoard = univBoard1;
                    }
                    else
                    {
                        univBoard = univBoard + "," + univBoard1;
                    }
                }
            }

            string addcomreli = "";
            if (addrelival != "")
            {
                addcomreli = " and religion in('" + addrelival + "')";
            }
            if (addcommval != "")
            {
                addcomreli = addcomreli + " and community in('" + addcommval + "')";
            }
            if (univBoard != "")
            {
                addcomreli = addcomreli + " and p.Course_code in(" + univBoard + ") ";
            }
            //if (attemp != "")
            //{
            //    addcomreli = addcomreli + " and isnull(ph.noofattempt,'') in('" + attemp + "') ";
            //}
            string[] ay = TextBox2.Text.Split('/');
            string[] ay1 = TextBox3.Text.Split('/');
            DateTime dtt = new DateTime();
            DateTime dt1 = new DateTime();
            dtt = Convert.ToDateTime(ay[1] + "/" + ay[0] + "/" + ay[2]);
            dt1 = Convert.ToDateTime(ay1[1] + "/" + ay1[0] + "/" + ay1[2]);
            string addsearch = "";
            if (txt_searchstudname.Text != "")
            {
                addsearch = " and a.stud_name='" + txt_searchstudname.Text + "'";
            }
            else if (txt_searchappno.Text != "")
            {
                addsearch = addsearch + " and a.app_formno='" + txt_searchappno.Text + "'";
            }
            else if (txt_searchmobno.Text != "")
            {
                addsearch = addsearch + " and a.Student_Mobile='" + txt_searchmobno.Text + "'";
            }
            else
            {
                addsearch = "";
            }

            addbatch = Convert.ToString(Convert.ToString(ddl_batch.SelectedItem.Value));
            adddeg = Convert.ToString(ddldept.SelectedItem.Value);
            string degCodeOp = string.Empty;
            if (cbAltCourse.Checked)
            {
                degCodeOp = "  and   a.alternativedegree_code in ('" + adddeg + "') ";
            }
            else
            {
                degCodeOp = "  and  a.degree_code in('" + adddeg + "')  ";
            }
            DataSet dsfee = new DataSet();
            FpSpread2.Sheets[0].PageSize = 5;
            FpSpread2.Pager.Position = FarPoint.Web.Spread.PagerPosition.Bottom;
            FpSpread2.Pager.Mode = FarPoint.Web.Spread.PagerMode.NextPrev;
            FpSpread2.Pager.Align = HorizontalAlign.Right;
            FpSpread2.Pager.Font.Bold = true;
            FarPoint.Web.Spread.StyleInfo darkstyle2 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle2.BackColor = ColorTranslator.FromHtml("#008B8B");
            darkstyle2.ForeColor = Color.Black;
            darkstyle2.HorizontalAlign = HorizontalAlign.Center;
            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle2;
            FpSpread2.Pager.PageCount = 5;
            FpSpread2.ActiveSheetView.SheetCorner.DefaultStyle.Font.Bold = false;
            FpSpread2.ActiveSheetView.DefaultRowHeight = 25;
            FpSpread2.ActiveSheetView.Rows.Default.Font.Name = "Book Antiqua";
            FpSpread2.ActiveSheetView.Rows.Default.Font.Size = FontUnit.Small;
            FpSpread2.ActiveSheetView.Rows.Default.Font.Bold = false;
            FpSpread2.ActiveSheetView.Columns.Default.Font.Bold = false;
            FpSpread2.ActiveSheetView.Columns.Default.Font.Size = FontUnit.Small;
            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            FpSpread2.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Never;
            FpSpread2.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            FpSpread2.ShowHeaderSelection = false;
            FpSpread2.Sheets[0].ColumnCount = 3;
            FpSpread2.Sheets[0].RowCount = 0;
            string query = "";
            int cc = 0;
            string SelQ = "";
            if (DropDownList2.SelectedItem.Value == "0")
            {
                //wait to admit
                query = "    select distinct a.stud_type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,religion,community,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate from degree d,Department dt,Course C, applyn A Where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')='1'   and ISNULL(selection_status,'0')='1'  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code ";
                if (AdmConfFormat() != 0)
                {
                    query = "     select distinct a.stud_type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,religion,community,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate from degree d,Department dt,Course C, applyn A Where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')='1'   and ISNULL(selection_status,'0')='1'  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code ";
                    query = query + "   and a.app_no not in(select app_no from Registration where batch_year in ('" + addbatch + "') and college_code='" + ddl_collegename.SelectedItem.Value + "' and current_semester in('" + addsem + "') )";
                }

            }
            else if (DropDownList2.SelectedItem.Value == "2")
            {
                //left
                query = "     select distinct a.stud_type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,religion,community,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate from degree d,Department dt,Course C, applyn A Where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')='2'   and ISNULL(selection_status,'0')='1'  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code  ";
            }
            else if (DropDownList2.SelectedItem.Value == "1")
            {
                //fee paid
                query = "     select distinct a.stud_type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,religion,community,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate from degree d,Department dt,Course C, applyn A Where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')='1'   and ISNULL(selection_status,'0')='1'  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code  ";
                query = query + "  and a.app_no in(select distinct App_No  from FT_FinDailyTransaction)";

                if (AdmConfFormat() != 0 && feesStructureSetting() == 1)
                {
                    query = "     select distinct a.stud_type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,religion,community,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate from degree d,Department dt,Course C, applyn A Where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')='1'   and ISNULL(selection_status,'0')='1'  and a.Batch_Year in('" + addbatch + "') and a.current_semester in('" + addsem + "') and a.college_code='" + ddl_collegename.SelectedItem.Value + "'  and a.college_code=d.college_code ";
                    query = query + "   and a.app_no not in(select app_no from Registration where batch_year in ('" + addbatch + "') and college_code='" + ddl_collegename.SelectedItem.Value + "' and current_semester in('" + addsem + "') )";

                    SelQ = "  select f.app_no from applyn r,ft_feeallot f where f.app_no=r.app_no and r.batch_year in('" + addbatch + "') and r.current_semester in('" + addsem + "') and r.college_code='" + ddl_collegename.SelectedItem.Value + "' group by f.app_no having sum(totalamount)=sum(paidamount) and sum(balamount)='0'";
                    dsfee.Clear();
                    dsfee = dt.select_method_wo_parameter(SelQ, "Text");
                }
            }
            else if (DropDownList2.SelectedItem.Value == "3")
            {
                //admitted
                query = "     select distinct a.stud_type,a.parent_addressP,CASE WHEN co_curricular=0 then 'No' when co_curricular=1 then 'Yes' end as co_curricular,CASE WHEN DistinctSport=0 then 'No'  else 'Yes'  end as DistinctSport,CASE WHEN first_graduate=0 then 'No' when first_graduate=1 then 'Yes' end as first_graduate,CASE WHEN isdisable=0 then 'No' when isdisable=1 then 'Yes' end as isdisable,CASE WHEN IsExService=0 then 'No' when IsExService=1 then 'Yes' end as IsExService,CASE WHEN TamilOrginFromAndaman=0 then 'No' when TamilOrginFromAndaman=1 then 'Yes' end as TamilOrginFromAndaman,(Select TextVal FROM TextValTable T WHERE mother_tongue = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE parent_statep = T.TextCode) parent_statep,(Select TextVal FROM TextValTable T WHERE parent_occu = T.TextCode) parent_occu,(Select TextVal FROM TextValTable T WHERE citizen = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE caste = T.TextCode) caste,a.parent_name,CONVERT(VARCHAR(11),dob,103) as dob,CONVERT(VARCHAR(11),date_applied,103) as date_applied,a.StuPer_Id,a.remarks,CASE WHEN sex=1 then 'Female' when sex=0 then 'Male' end as sex ,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, r.app_no,a.Student_Mobile,a.Alternativedegree_code,r.stud_name,a.app_formno, r.degree_code,r.Batch_Year,r.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,religion,community,a.ApplBankRefNumber,CONVERT(varchar(10), ApplBankRefDate,103) as ApplBankRefDate from degree d,Department dt,Course C, applyn A,registration r Where  r.app_no=a.app_no and d.Degree_Code =r.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and ISNULL(admission_status,'0')='1'   and ISNULL(selection_status,'0')='1'  and r.Batch_Year in('" + addbatch + "') and r.current_semester in('" + addsem + "') and r.college_code='" + ddl_collegename.SelectedItem.Value + "'  and r.college_code=d.college_code ";

            }

            if (addsearch != "")
            {
                query += " " + addsearch + " ";
            }
            else
            {
                query += " " + degCodeOp + " " + addcomreli + "and AdmitedDate between '" + dtt.ToString("MM/dd/yyyy") + "' and '" + dt1.ToString("MM/dd/yyyy") + "' ";
            }
            query += "  order by a.app_formno asc";

            ds.Clear();
            ds = dt.select_method_wo_parameter(query, "Text");


            if (checkadmitSetting() == 1)
            {
                if (checkSchoolSetting() == 0)
                {
                    string strappno = "";
                    DataView dvfee = new DataView();
                    DataTable dtfee = new DataTable();
                    DataTable dtfees = new DataTable();
                    if (ds.Tables.Count > 0 && ds.Tables.Count > 0 && dsfee.Tables.Count > 0 && dsfee.Tables[0].Rows.Count > 0)
                    {
                        for (int j = 0; j < dsfee.Tables[0].Rows.Count; j++)
                        {
                            if (strappno == "")
                                strappno = Convert.ToString(dsfee.Tables[0].Rows[j]["app_no"]);
                            else
                                strappno = strappno + "'" + "," + "'" + Convert.ToString(dsfee.Tables[0].Rows[j]["app_no"]);
                        }
                        if (!string.IsNullOrEmpty(strappno))
                        {
                            ds.Tables[0].DefaultView.RowFilter = "app_no in('" + strappno + "')";
                            dvfee = ds.Tables[0].DefaultView;
                            if (dvfee.Count > 0)
                            {
                                dtfee = dvfee.ToTable();
                                dtfee.TableName = "PortedTable";
                                ds.Clear();
                                if (ds.Tables.Count > 0)
                                    ds.Tables.Remove(ds.Tables[0].TableName);
                                ds.Tables.Add(dtfee);
                            }
                            else
                                ds.Clear();
                        }
                    }
                }
            }
            if (query == "")
            {

                FpSpread2.Visible = false;
                Label66.Visible = false;
                Label68.Visible = false;
                //lbl_err_stud.Visible = true;
                btn_print.Visible = false;
                btn_excel.Visible = false;
                txt_excelname.Visible = false;
                lbl_reportname.Visible = false;
                btnapprove.Visible = false;
                btnSendSmsOpenPop.Visible = false;
                Button3.Visible = false;
                buttnleft.Visible = false;
                btnSendSmsOpenPop.Visible = false;
                //lbl_err_stud.Text = "Kindly Select All List ";
                return;
            }
            else
            {
                if (query != "")
                {
                    //ds = dt.select_method(query, hat, "Text");
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        Label66.Visible = false;
                        Label68.Visible = false;
                        FpSpread2.Visible = false;
                        btn_excel.Visible = false;
                        txt_excelname.Visible = false;
                        lbl_reportname.Visible = false;
                        btn_print.Visible = false;
                        btnapprove.Visible = false;
                        btnSendSmsOpenPop.Visible = false;
                        Button3.Visible = false;
                        errorspan.InnerHtml = "No Records Found";
                        poperrjs.Visible = true;
                        buttnleft.Visible = false;
                        btnSendSmsOpenPop.Visible = false;
                        btnconformrecpt.Visible = false;
                        return;

                    }
                    else
                    {



                        FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                        FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                        FpSpread2.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                        FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                        FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                        FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                        FpSpread2.Sheets[0].ColumnHeader.Cells[0, 2].Text = "View";
                        cc = 2;
                        string columnorder_query = "select * from admitcolumnset where   user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
                        // college_code='" + ddl_collegename.SelectedItem.Value + "' and
                        ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                        if (ds1.Tables[0].Rows.Count > 0)
                        {

                            for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                            {
                                cc++;
                                FpSpread2.Sheets[0].ColumnCount = cc + 1;
                                FpSpread2.Sheets[0].ColumnHeader.Cells[0, cc].Text = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                string percentage = Convert.ToString(ds1.Tables[0].Rows[u]["setcolumn"]);
                                if (ddledu.SelectedItem.Text == "PG")
                                {
                                    if (percentage == "Marks")
                                    {
                                        FpSpread2.Sheets[0].ColumnHeader.Cells[0, cc].Text = "Percentage";
                                    }
                                }

                            }
                            cc++;
                            FpSpread2.Sheets[0].ColumnCount = cc + 1;
                            FpSpread2.Sheets[0].ColumnHeader.Cells[0, cc].Text = "Fee Confirm";
                            FpSpread2.Sheets[0].Columns[cc].Visible = false;
                        }
                        else
                        {
                            FpSpread2.Visible = false;
                            errorspan.InnerHtml = "Please Set The Column Order Setting";
                            poperrjs.Visible = true;
                            return;
                        }
                        FarPoint.Web.Spread.TextCellType txtct = new FarPoint.Web.Spread.TextCellType();
                        FarPoint.Web.Spread.CheckBoxCellType cball = new FarPoint.Web.Spread.CheckBoxCellType();
                        cball.AutoPostBack = true;
                        FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                        cb.AutoPostBack = false;
                        FarPoint.Web.Spread.CheckBoxCellType cb1 = new FarPoint.Web.Spread.CheckBoxCellType();
                        FarPoint.Web.Spread.ButtonCellType btn = new FarPoint.Web.Spread.ButtonCellType("MyCommand", FarPoint.Web.Spread.ButtonType.ImageButton, "~/images/view11.png");
                        cb1.AutoPostBack = false;
                        FpSpread2.Sheets[0].RowCount++;
                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].CellType = cball;
                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread2.Sheets[0].Rows[FpSpread2.Sheets[0].RowCount - 1].Locked = true;
                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Locked = false;
                        DataView dv = new DataView();
                        for (int recI = 0; recI < ds.Tables[0].Rows.Count; recI++)
                        {
                            string app_no = Convert.ToString(ds.Tables[0].Rows[recI]["app_no"]);


                            ds.Tables[0].DefaultView.RowFilter = "app_no='" + app_no + "'";
                            dv = ds.Tables[0].DefaultView;

                            FpSpread2.Sheets[0].RowCount++;
                            count++;
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Text = count.ToString();
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Locked = true;
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(dv[0]["app_no"]);
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].CellType = cb;
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].Column.Width = 50;
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].CellType = btn;
                            cc = 2;
                            columnorder_query = "select * from admitcolumnset where   user_code='" + user_code + "' and textcriteria='column' order by  Convert(int,priority) asc";
                            //college_code='" + ddl_collegename.SelectedItem.Value + "' and
                            ds1 = d2.select_method_wo_parameter(columnorder_query, "text");
                            if (ds1.Tables[0].Rows.Count > 0)
                            {

                                for (int u = 0; u < ds1.Tables[0].Rows.Count; u++)
                                {
                                    cc++;
                                    string columname = Convert.ToString(ds1.Tables[0].Rows[u]["column_name"]);
                                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].CellType = txtct;
                                    if (columname == "Alternativedegree_code")
                                    {
                                        string altercourse = dt.GetFunction("select distinct dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddl_collegename.SelectedItem.Value + "' and d.Degree_Code='" + Convert.ToString(dv[0]["Alternativedegree_code"]) + "' ");
                                        if (altercourse == "0")
                                        {
                                            altercourse = "";
                                        }
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = altercourse;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                    }
                                    else if (columname == "DistinctSport")
                                    {
                                        string value = Convert.ToString(dv[0][columname]);
                                        if (value == "Yes")
                                        {
                                            string val = d2.GetFunction("select textval from applyn a,textvaltable t where app_no='" + app_no + "' and textcode=DistinctSport");
                                            if (val != "0")
                                            {
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = value + "-" + val;
                                            }
                                            else
                                            {
                                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = value;
                                            }
                                        }
                                        else
                                        {
                                            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = value;
                                        }
                                    }
                                    else if (columname == "totalfees")
                                    {
                                        string feecode = feecatValue(ddl_collegename.SelectedItem.Value, user_code);
                                        string amt = d2.GetFunction("select sum(Totalamount) as Total from Ft_feeallot where app_no='" + Convert.ToString(dv[0]["app_no"]) + "' and feecategory='" + feecode + "'");
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = amt;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Right;
                                    }
                                    else if (columname == "PaidAmount")
                                    {
                                        string feecode = feecatValue(ddl_collegename.SelectedItem.Value, user_code);
                                        string amt = d2.GetFunction("select sum(PaidAmount) as Total from Ft_feeallot where app_no='" + Convert.ToString(dv[0]["app_no"]) + "' and feecategory='" + feecode + "'");
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = amt;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Right;
                                    }
                                    else if (columname == "HostelRegistrationPK")
                                    {
                                        string hostelname = d2.GetFunction("select HostelName from HT_HostelRegistration hr,HM_HostelMaster hm where APP_No='" + Convert.ToString(dv[0]["app_no"]) + "' and hr.HostelMasterFK=hm.HostelMasterPK");
                                        if (hostelname == "0")
                                        {
                                            hostelname = "";
                                        }
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = hostelname;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                                    }
                                    else if (columname == "RoomFK")
                                    {
                                        string roomtype = d2.GetFunction("select  Room_type from Room_Detail r,HT_HostelRegistration h where r.RoomPK=h.RoomFK and APP_No='" + Convert.ToString(dv[0]["app_no"]) + "'");
                                        if (roomtype == "0")
                                        {
                                            roomtype = "";
                                        }
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = roomtype;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Left;
                                    }
                                    else if (columname == "remarks")
                                    {
                                        string VocationStream = Convert.ToString(dv[0]["vocational_stream"]);
                                        string Nationality = Convert.ToString(dv[0]["citizen"]);
                                        string CourseCode = Convert.ToString(dv[0]["course_code"]);
                                        string Concatvalue = "";
                                        if (VocationStream.Trim() != "No")
                                        {
                                            Concatvalue = "Vocational";
                                        }
                                        if (Nationality.Trim().ToUpper() != "INDIAN")
                                        {
                                            if (Concatvalue.Trim() == "")
                                            {
                                                Concatvalue = Nationality;
                                            }
                                            else
                                            {
                                                Concatvalue = Concatvalue + " - " + Nationality;
                                            }
                                        }
                                        if (CourseCode.Trim().ToUpper() == "CBSE")
                                        {
                                            if (Concatvalue.Trim() == "")
                                            {
                                                Concatvalue = CourseCode;
                                            }
                                            else
                                            {
                                                Concatvalue = Concatvalue + " - " + CourseCode;
                                            }
                                        }
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(Concatvalue);
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                        // FpSpread3.Sheets[0].Columns[cc].Visible = false;
                                    }
                                    else
                                    {

                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Text = Convert.ToString(dv[0][columname]);
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Locked = true;
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Name = "Book Antiqua";
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].Font.Size = FontUnit.Medium;
                                    }
                                    if (columname == "noofattempts")
                                    {
                                        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, cc].HorizontalAlign = HorizontalAlign.Center;
                                    }
                                }

                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, FpSpread2.Sheets[0].ColumnCount - 1].CellType = cb1;
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, FpSpread2.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                int ccc = cc;
                                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, FpSpread2.Sheets[0].ColumnCount - 1].Locked = false;
                            }

                        }
                        FpSpread2.Visible = true;
                        FpSpread2.Sheets[0].PageSize = 51;
                        FpSpread2.TitleInfo.Height = 30;
                        FpSpread2.CommandBar.Visible = false;
                        FpSpread2.Sheets[0].RowHeader.Visible = false;
                        FpSpread2.Width = 930;
                        FpSpread2.Height = 390;
                        Label66.Visible = true;
                        Label68.Visible = true;

                        btn_print.Visible = true;
                        btn_excel.Visible = true;
                        txt_excelname.Visible = true;
                        lbl_reportname.Visible = true;


                        if (AdmConfFormat() == 1)
                        {
                            btnconform.Visible = true;
                            btn_ch_gen.Visible = true;
                            if (DropDownList2.SelectedIndex != 0)
                            {
                                btnSendSmsOpenPop.Visible = false;
                                btn_ch_gen.Visible = false;
                                btnconform.Visible = false;
                                Button9.Visible = false;
                                buttnleft.Visible = false;
                            }
                            else
                            {
                                btnSendSmsOpenPop.Visible = true;
                                btn_ch_gen.Visible = true;
                                btnconform.Visible = true;
                                Button9.Visible = true;
                                buttnleft.Visible = true;
                            }
                            feesStructureSetting();
                        }
                        else if (AdmConfFormat() == 0)
                        {
                            btnconform.Visible = false;
                            btn_ch_gen.Visible = false;
                            if (DropDownList2.SelectedIndex != 0)
                            {
                                btnSendSmsOpenPop.Visible = false;
                                btn_ch_gen.Visible = false;
                                btnconform.Visible = false;
                                Button9.Visible = false;
                                buttnleft.Visible = false;
                            }
                            else
                            {
                                btnSendSmsOpenPop.Visible = true;
                                btn_ch_gen.Visible = false;
                                btnconform.Visible = false;
                                Button9.Visible = true;
                                buttnleft.Visible = true;
                            }
                        }
                        // btnapprove.Visible = true;
                        //  Button3.Visible = true;
                        if (checkadmitSetting() == 1)
                        {
                            if (checkSchoolSetting() == 0 && feesStructureSetting() == 1)
                            {
                                if (DropDownList2.SelectedItem.Value == "1")
                                    btnconformrecpt.Visible = true;
                                else
                                    btnconformrecpt.Visible = false;
                            }
                        }
                        Label66.Text = "Total No Of Shortist Candidate :";
                        Label68.Text = Convert.ToString(ds.Tables[0].Rows.Count);
                    }
                }
            }



        }
        catch (Exception ewx)
        {

        }

    }
    //last  modified by sudhagar  24.11.2016

    //sudhagar


    private double feesStructureSetting()
    {
        double getVal = 0;
        try
        {
            double.TryParse(Convert.ToString(d2.GetFunction("select linkvalue from New_InsSettings where LinkName='AdmissionConfirmFeesStructureSetting' and user_code ='" + user_code + "' and college_code ='" + college_code + "'")), out getVal);
            if (getVal == 0)
            {
                btn_ch_gen.Visible = true;
                btnconform.Visible = true;
                btnconformrecpt.Visible = false;
            }
            else
            {
                btn_ch_gen.Visible = false;
                btnconform.Visible = false;
                if (DropDownList2.SelectedItem.Text == "Fee Paid")
                    btnconformrecpt.Visible = true;
            }
        }
        catch { }
        return getVal;
    }

    private double checkSchoolSetting()
    {
        double getVal = 0;
        try
        {
            double.TryParse(Convert.ToString(d2.GetFunction("select  value from Master_Settings where settings='schoolorcollege' and usercode='" + user_code + "'")), out getVal);

        }
        catch { }
        return getVal;
    }

    private double checkadmitSetting()
    {
        double getVal = 0;
        try
        {
            double.TryParse(Convert.ToString(d2.GetFunction(" select LinkValue from New_InsSettings where LinkName='AdmissionConfirmSetting' and user_code ='" + user_code + "' and college_code ='" + college_code + "'")), out getVal);

        }
        catch { }
        return getVal;
    }

    private void loadadmitedvalue()
    {
        try
        {
            DropDownList2.Items.Clear();
            if (TabContainer1.ActiveTabIndex == 2)
            {
                if (checkadmitSetting() == 1)
                {
                    //if (checkSchoolSetting() == 0)
                    //{
                    if (feesStructureSetting() == 1)
                    {
                        DropDownList2.Items.Add(new ListItem("Wait to Admitted", "0"));
                        DropDownList2.Items.Add(new ListItem("Fee Paid", "1"));
                        DropDownList2.Items.Add(new ListItem("Left", "2"));
                        DropDownList2.Items.Add(new ListItem("Admitted", "3"));
                    }
                    else
                    {
                        DropDownList2.Items.Add(new ListItem("Admitted", "3"));
                        DropDownList2.Items.Add(new ListItem("Left", "2"));
                        DropDownList2.Items.Add(new ListItem("Fee Paid", "1"));
                    }
                    //}
                    //else
                    //{
                    //    DropDownList2.Items.Add(new ListItem("Admitted", "3"));
                    //    DropDownList2.Items.Add(new ListItem("Left", "2"));
                    //    DropDownList2.Items.Add(new ListItem("Fee Paid", "1"));
                    //}
                }
                else
                {
                    //if (checkSchoolSetting() == 0)
                    //{
                    //    //DropDownList2.Items.Add(new ListItem("Wait to Admitted", "0"));
                    //DropDownList2.Items.Add(new ListItem("Fee Paid", "1"));
                    //DropDownList2.Items.Add(new ListItem("Left", "2"));
                    DropDownList2.Items.Add(new ListItem("Admitted", "3"));
                    //}
                    //else
                    //{
                    //    DropDownList2.Items.Add(new ListItem("Admitted", "3"));
                    //    DropDownList2.Items.Add(new ListItem("Left", "2"));
                    //    DropDownList2.Items.Add(new ListItem("Fee Paid", "1"));
                    //}
                }
            }
            //else
            //{
            //    DropDownList2.Items.Add(new ListItem("Admitted", "1"));
            //    DropDownList2.Items.Add(new ListItem("Left", "2"));
            //    DropDownList2.Items.Add(new ListItem("Fee Paid", "3"));

            //}
        }
        catch { }
    }
    //protected void btnconformrecpt_onclick(object sender, EventArgs e)
    //{
    //}

    protected void btnconformrecpt_onclick(object sender, EventArgs e)
    {
        try
        {
            int fllg = 0;
            string isval1 = "";
            Boolean checkflage = false;
            string app_no = "";
            string degreecode = "";
            string seattype = "";
            string stud_name = "";
            string app_fromno = "";
            string cursem = ddl_sem.Items.Count > 0 ? ddl_sem.SelectedItem.Value : "1";
            string batchyr = Convert.ToString(ddl_batch.SelectedItem.Value);
            if (TabContainer1.ActiveTabIndex == 2)
            {
                if (checkflage == false)
                {
                    FpSpread2.SaveChanges();

                    for (int i = 1; i < FpSpread2.Sheets[0].Rows.Count; i++)
                    {
                        int columncount = Convert.ToInt32(FpSpread2.Sheets[0].Columns.Count);
                        int v = columncount - 1;
                        isval1 = Convert.ToString(FpSpread2.Sheets[0].Cells[i, 1].Value);
                        if (isval1 == "1")
                        {
                            app_no = Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag);
                            degreecode = returnStudDeg(Convert.ToString(FpSpread2.Sheets[0].Cells[i, 0].Tag));
                            string getfinid = d2.getCurrentFinanceYear(user_code, Convert.ToString(ddl_collegename.SelectedItem.Value));

                            string SelQ = " select batch_year,seattype,stud_name,app_formno,mode  from applyn where app_no ='" + app_no + "'";
                            ds.Clear();
                            ds = d2.select_method_wo_parameter(SelQ, "text");
                            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                            {
                                batchyr = Convert.ToString(ds.Tables[0].Rows[0]["batch_year"]);
                                seattype = Convert.ToString(ds.Tables[0].Rows[0]["seattype"]);
                                stud_name = Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]);
                                app_fromno = Convert.ToString(ds.Tables[0].Rows[0]["app_formno"]);
                                string Mode = Convert.ToString(ds.Tables[0].Rows[0]["mode"]);
                                if (string.IsNullOrEmpty(Mode))
                                    Mode = "1";
                                if (getfinid.Trim() != "0" && seattype.Trim() != "" && seattype.Trim() != "0")
                                {
                                    string rolladmit = "";
                                    admissionNoGeneration();
                                    if (admisionvalue == "1")
                                        rolladmit = genearateAdmissionNo(college_code, degreecode, batchyr);
                                    else
                                        rolladmit = app_fromno;

                                    if (string.IsNullOrEmpty(rolladmit) || rolladmit == "0")
                                        rolladmit = app_fromno;

                                    string rel = "  if exists(select * from Registration where App_No='" + app_no + "')  delete from Registration where App_No='" + app_no + "' insert into Registration (App_No,Adm_Date,Roll_Admit,Roll_No,RollNo_Flag,Reg_No,Stud_Name,Batch_Year,degree_code,college_code,CC,DelFlag,Exam_Flag,Current_Semester,mode)values('" + app_no + "','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','" + rolladmit + "','" + app_fromno + "','1','" + app_fromno + "','" + stud_name + "','" + batchyr + "','" + degreecode + "','" + ddl_collegename.SelectedItem.Value + "','0','0','OK','" + cursem + "','" + Mode + "')";
                                    int ins = d2.update_method_wo_parameter(rel, "Text");
                                    fllg++;
                                    if (ins > 0)
                                    {
                                        string mobil = d2.GetFunction("select student_mobile from applyn where app_no ='" + app_no + "'");
                                        // sendsmsnew(mobil, app_no, 0);
                                        string Course = d2.GetFunction("select (c.Course_Name +' - '+dt.Dept_Name) as Department from applyn a,degree d,Department dt,Course c Where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.app_no ='" + app_no + "'");
                                        string Msg = "Dear Candidate,Your application no:" + app_fromno + " and you are successfully admitted in " + Course + " in " + (ddl_collegename.SelectedItem.Text) + ",Thank you.";
                                        string user_id = "";
                                        string ssr = "select * from Track_Value where college_code='" + Convert.ToString(ddl_collegename.SelectedItem.Value) + "'";
                                        ds.Clear();
                                        ds = d2.select_method_wo_parameter(ssr, "Text");
                                        if (ds.Tables[0].Rows.Count > 0)
                                        {
                                            user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
                                            int d = d2.send_sms(user_id, Convert.ToString(ddl_collegename.SelectedItem.Value), usercode, mobil, Msg, "0");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (fllg == 1)
            {
                Button1_Click(sender, e);
                errorspan.InnerHtml = "Fee Confirm Successfully";
                poperrjs.Visible = true;

            }
            else
            {
                errorspan.InnerHtml = "Choose Atleast One Student And Than Proceed";
                poperrjs.Visible = true;

            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, college_code, "COmmom_selection_Process");
        }
    }

    protected void SettingReceipt()
    {
        try
        {
            if (checkadmitSetting() == 1)
            {
                if (checkSchoolSetting() == 0)
                {
                    if (feesStructureSetting() == 1)
                    {
                        recptset = true;
                    }
                    else
                        recptset = false;
                }
                else
                    recptset = false;
            }
            else
                recptset = false;
        }
        catch { }
    }

    //16.12.2016-sudhagar add concession type to fees allot
    protected void bindConcessionReason()
    {
        try
        {
            ddlconces.Items.Clear();
            ds.Clear();
            string sql = "select TextCode,TextVal from TextValTable where TextCriteria ='DedRe' and college_code ='" + college_code + "'";
            ds = d2.select_method_wo_parameter(sql, "TEXT");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlconces.DataSource = ds;
                ddlconces.DataTextField = "TextVal";
                ddlconces.DataValueField = "TextCode";
                ddlconces.DataBind();
                ddlconces.Items.Insert(0, new ListItem("Select", "0"));
            }
            else
            {
                ddlconces.Items.Insert(0, new ListItem("Select", "0"));
            }
        }
        catch
        { }
    }

    protected void deductionAmount(string degreeCode, string deductRes, string feeCode, int type, ref Hashtable conHeaderfk, ref Hashtable conLedgerfk)
    {
        double amtORper = 0;
        try
        {
            string SelQ = " select consper,consamt,headerfk,ledgerfk,fee_category,consdesc from FM_ConcessionRefundSettings where degree_code='" + degreeCode + "' and  consdesc='" + deductRes + "' and fee_category='" + feeCode + "' and RefMode='1' ";
            DataSet dsl = d2.select_method_wo_parameter(SelQ, "Text");
            if (dsl.Tables.Count > 0 && dsl.Tables[0].Rows.Count > 0)
            {
                for (int row = 0; row < dsl.Tables[0].Rows.Count; row++)
                {
                    string conHeaderfk1 = Convert.ToString(dsl.Tables[0].Rows[row]["headerfk"]);
                    string conLedgerfk1 = Convert.ToString(dsl.Tables[0].Rows[row]["ledgerfk"]);

                    if (type == 0)
                        double.TryParse(Convert.ToString(dsl.Tables[0].Rows[row]["consamt"]), out amtORper);
                    else
                        double.TryParse(Convert.ToString(dsl.Tables[0].Rows[row]["consper"]), out amtORper);
                    if (!conLedgerfk.Contains(conLedgerfk1))
                        conLedgerfk.Add(Convert.ToString(conLedgerfk1), amtORper);
                    if (!conHeaderfk.Contains(conHeaderfk1))
                        conHeaderfk.Add(Convert.ToString(conHeaderfk1), amtORper);

                }
            }
        }
        catch { }

    }

    protected void checkEditablerights()
    {
        double rightsVal = 0;
        double.TryParse(Convert.ToString(d2.GetFunction(" select LinkValue from New_InsSettings where LinkName='AdmissionFeeEditable' and user_code ='" + user_code + "' and college_code ='" + college_code + "'")), out rightsVal);
        editableRights = rightsVal == 0 ? true : false;
        //return rightsVal;
    }

    protected bool farPointCheck(FarPoint.Web.Spread.FpSpread fpSpread)
    {
        bool cheCK = false;
        try
        {
            fpSpread.SaveChanges();
            if (fpSpread.Rows.Count > 0)
            {
                for (int row = 0; row < fpSpread.Rows.Count; row++)
                {
                    double checkval = 0;
                    double.TryParse(Convert.ToString(fpSpread.Sheets[0].Cells[row, 1].Value), out checkval);
                    if (checkval == 1)
                    {
                        cheCK = true;
                    }
                }
            }
        }
        catch { cheCK = false; }
        return cheCK;
    }

}