using System;
using System.Collections;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Web.Services;
using System.Web.UI;
using System.Web.UI.WebControls;
using Gios.Pdf;
using System.Web;
using wc = System.Web.UI.WebControls;
using InsproDataAccess;
using System.Text;
public partial class StudentNewApplicationReportNew : System.Web.UI.Page
{
    InsproDirectAccess dirAcess = new InsproDirectAccess();
    string usercode = string.Empty;
    string collegecode1 = string.Empty;
    static int isHeaderwise = 0;
    string singleuser = string.Empty;
    string group_user = string.Empty;
    static string collegecode = "";
    static string appnovalue = "";
    static string formatevalue = "";
    static string appnovalueacr = "";
    DataSet ds = new DataSet();
    DataSet ds1 = new DataSet();
    DAccess2 d2 = new DAccess2();

    ReuasableMethods reUse = new ReuasableMethods();
    static byte BalanceType = 0;
    static ArrayList ItemList_item = new ArrayList();
    static ArrayList Itemindex_item = new ArrayList();
    Boolean Cellclick = false;
    Boolean Cellclicl_isconfirm = false;
    Hashtable hat = new Hashtable();
    static string Collinfo = "";
    public SqlConnection mysql = new SqlConnection(ConfigurationManager.AppSettings["LocalConn"].ToString());
    public SqlConnection con1 = new SqlConnection(ConfigurationManager.ConnectionStrings[0].ToString());
    SqlConnection con = new SqlConnection(ConfigurationManager.AppSettings["DSN"].ToString());
    SqlConnection ssql = new SqlConnection(ConfigurationManager.AppSettings["LocalConn"].ToString());
    int sel = 0;
    static string clgcode = "";
    Boolean savevalue = false;
    bool value_flage = false;
    bool delflage = false;
    static string subjno = "";
    string mtype = "";
    string mcode = "";
    static string addAcdYear = string.Empty;
    ReuasableMethods rs = new ReuasableMethods();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["collegecode"] == null)
        {
            Response.Redirect("~/Default.aspx");
        }
        usercode = Session["usercode"].ToString();
        collegecode1 = Session["collegecode"].ToString();
        singleuser = Session["single_user"].ToString();
        group_user = Session["group_code"].ToString();
        string Enquery_value = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Enquiry to Apply' and college_code='" + collegecode1 + "'");
        if (Enquery_value == "1")
        {
            btn_question.Visible = true;
            lbl_enquiry.Visible = true;
        }
        else
        {
            btn_question.Visible = false;
            lbl_enquiry.Visible = false;
        }
        if (!IsPostBack)
        {
            setLabelText();
            lbl_clgname.Text = lbl_clgT.Text;
            lbl_degree.Text = lbl_degreeT.Text;
            lbl_branch.Text = lbl_branchT.Text;
            lbl_org_sem.Text = lbl_semT.Text;
            
            lbl_clg1.Text = lbl_clgT.Text;
            lbl_clg2.Text = lbl_clgT.Text;
            BindSemester();
            //rdb_paid.Visible = true;
            //rdb_notpaid.Visible = true;
            //rdb_paid.Checked = true;
            //for (int bt = DateTime.Now.Year; bt > 1999; bt--)
            //{
            ddlbatch2.Items.Clear();
            ds = d2.BindBatch();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlbatch2.DataSource = ds;
                ddlbatch2.DataTextField = "batch_year";
                ddlbatch2.DataValueField = "batch_year";
                ddlbatch2.DataBind();
            }
            //ddlbatch2.Items.Add(bt.ToString());
            //}
            BindCollege();
            appFormateRights();
            edu_level();
            degree();
            bindbatch();
            loadstream();
            appnovalue = "";
            appnovalueacr = "";
            AcdYear();
            double curYear = 0;
            double.TryParse(DateTime.Now.ToString("yyyy"), out curYear);
            TxtAcrApplno.Text = Convert.ToString(curYear + 1);
            addAcdYear = Convert.ToString(curYear + 1);
            //TxtAcrApplno.Text = DateTime.Now.ToString("yyyy");
            loadcollege();
            if (ddlclg.Items.Count > 0)
            {
                clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
                Collinfo = clgcode;
            }
            div_cer.Visible = false;//New
            GV1.DataSource = null;
            GV1.DataBind();
            GV1.Visible = false;
            educationLevel();
            applicationNoRights();
            applicationNoRightsacr();
            loadChioce();
            loadChioce2();
            loadReligion();
            loadCommunity();
            loadreligion();
            loadcommunity();
            rbmarkmark_OnCheckedChanged(sender, e);
            ddlregl_OnSelectedIndexChanged(sender, e);
            ddlmonth.Items.Insert(0, "Month");
            ddlyear.Items.Insert(0, "Year");
            DropDownList1.Items.Insert(0, "Month");
            DropDownList2.Items.Insert(0, "Year");
            string year = System.DateTime.Now.ToString("yyyy");
            checkFun();
            int a1 = 0;
            for (int y = Convert.ToInt32(year); y >= 2005; y--)
            {
                a1++;
                ddlyear.Items.Insert(a1, Convert.ToString(y));
            }
            int a11 = 0;
            for (int y = Convert.ToInt32(year); y >= 1995; y--)
            {
                a11++;
                DropDownList2.Items.Insert(a11, Convert.ToString(y));
            }
            ddlugmnth.Items.Insert(0, "Month");
            ddlugyr.Items.Insert(0, "Year");
            int b = 0;
            for (int y = Convert.ToInt32(year); y >= 2005; y--)
            {
                b++;
                ddlugyr.Items.Insert(b, Convert.ToString(y));
            }
            loadseat();
            loadquota();
            ddlsex.Items.Insert(0, new ListItem("Male", "0"));
            ddlsex.Items.Insert(1, new ListItem("Female", "1"));
            ddlsex.Items.Insert(2, new ListItem("Transgender", "2"));
            ddlsex2.Items.Insert(0, new ListItem("Male", "0"));
            ddlsex2.Items.Insert(1, new ListItem("Female", "1"));
            ddlsex2.Items.Insert(2, new ListItem("Transgender", "2"));
            txtappldate.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txtapplno.Focus();
            pheaderfilter0.Visible = false;
            pcolumnorder0.Visible = false;
            txt_fromdate.Text = Convert.ToString(DateTime.Now.ToString("dd/MM/yyyy"));
            txt_todate.Text = Convert.ToString(DateTime.Now.ToString("dd/MM/yyyy"));
            txt_fromdate.Attributes.Add("readonly", "readonly");
            txt_todate.Attributes.Add("readonly", "readonly");
            ViewState["AppNew"] = null;
            bindseattype();
           // bindquto();//abarna
          
            //New 
            applicationFormateRights();
            //if (lbl_clgT.Text.Trim().ToUpper() == "SCHOOL")
            //{
            //    formatevalue = "1";
            //    ddlAppFormat.Enabled = false;
            //}
            //else 
            //{
            //    ddlAppFormat.Enabled = true;
            //}
            //ddlAppFormat.SelectedIndex = ddlAppFormat.Items.IndexOf(ddlAppFormat.Items.FindByValue(formatevalue));
            txtappldate.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txtapplno.Focus();
            pheaderfilter0.Visible = false;
            pcolumnorder0.Visible = false;
            txt_fromdate.Text = Convert.ToString(DateTime.Now.ToString("dd/MM/yyyy"));
            txt_todate.Text = Convert.ToString(DateTime.Now.ToString("dd/MM/yyyy"));
            txt_fromdate.Attributes.Add("readonly", "readonly");
            txt_todate.Attributes.Add("readonly", "readonly");
            txt_appliaddate.Text = Convert.ToString(DateTime.Now.ToString("dd/MM/yyyy"));
            txt_appliaddate.Attributes.Add("readonly", "readonly");
            txt_age.Attributes.Add("readonly", "readonly");
            educationLevel1();
            loadChiocenew();
            loadChioce2new();
            binduggird();
            bindnationalitymothertonguebloodgroup();
            bindexam();
            CutoffCheck();
            //ddldobdate.Items.Insert(0, "Date");
            //for (int i = 1; i <= 31; i++)
            //{
            //    ddldobdate.Items.Insert(i, Convert.ToString(i));
            //}
            ////ddlmonth.Items.Insert(0, "Month");
            //ddldobYear.Items.Insert(0, "Year");
            //string year1 = System.DateTime.Now.ToString("yyyy");
            int a2 = 0;
            //for (int y = Convert.ToInt32(year); y >= 1950; y--)
            //{
            //    a2++;
            //    ddldobYear.Items.Insert(a2, Convert.ToString(y));
            //}
            
            string year11 = System.DateTime.Now.ToString("yyyy");
            int a3 = 0;
            for (int y = Convert.ToInt32(year) - 16; y >= 1930; y--)
            {
                a2++;
                
                
            }
            
            
            //ddlsex.Items.Insert(0, new ListItem("Male", "0"));
            //ddlsex.Items.Insert(1, new ListItem("Female", "1"));
            //ddlsex.Items.Insert(2, new ListItem("Transgender", "2"));
            loadcommunity1();
            loadreligion1();
            ddlreligion.Items.Insert(0, new ListItem("Select", "0"));
            ddlreligion.Items.Insert(Convert.ToInt32(ddlreligion.Items.Count), "Others");
            ddl_quata.Items.Insert(0, new ListItem("Select", "0"));//16.06.2018
            ddl_quata.Items.Insert(Convert.ToInt32(ddl_quata.Items.Count), "Others");//16.06.2018
            pgmarkvalue.Visible = false;
            btn_fromate2update.Visible = false;
            btnDeleteStud.Visible = false;
            btnDeleteStud.Visible = false;
            loadtype();
            bindsem();
            bindMode();
            AddBatch();
            bindnewsem();
        }
        else
        {
            if (ddlclg.Items.Count > 0)
            {
                clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
                collegecode = clgcode;
            }
        }
        applicationNoRights();
        applicationNoRightsacr();
        if (IsAppNoAutoGenerate())
        {
            txt_appfromno.Enabled = false;
            txtapplno.Enabled = false;
        }
        else
        {
            txtapplno.Enabled = true;
            txt_appfromno.Enabled = true;
        }
    }
    public void bindMode()
    {
        ddlMode.Items.Clear();
        ddlMode.Items.Add(new ListItem("Regular", "1"));
        ddlMode.Items.Add(new ListItem("Lateral", "3"));
        ddlMode.Items.Add(new ListItem("Transfer", "2"));
    }
    protected void lb2_Click(object sender, EventArgs e)
    {
        try
        {
            Session.Abandon();
            Session.Clear();
            Session.RemoveAll();
            System.Web.Security.FormsAuthentication.SignOut();
            Response.Redirect("~/Default.aspx", false);
        }
        catch
        {
        }
    }
    public void AddBatch()
    {
        //ddlBatch_year.Items.Clear();
        //for (int bt = DateTime.Now.Year; bt > 1999; bt--)
        //{
        //    //ddlBatch_year.Items.Add(Convert.ToString(bt + 1));
        //    ddlBatch_year.Items.Add(Convert.ToString(bt));
        //}
        ddlBatch_year.Items.Clear();
        ds = d2.BindBatch();
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlBatch_year.DataSource = ds;
            ddlBatch_year.DataTextField = "batch_year";
            ddlBatch_year.DataValueField = "batch_year";
            ddlBatch_year.DataBind();
        }
    }
    public void loadseat()
    {
        try
        {
            cbl_seat.Items.Clear();
            string seat = "";
            string deptquery = "select Distinct TextCode,TextVal  from TextValTable where TextCriteria ='Seat' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_seat.DataSource = ds;
                cbl_seat.DataTextField = "TextVal";
                cbl_seat.DataValueField = "TextCode";
                cbl_seat.DataBind();
                if (cbl_seat.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_seat.Items.Count; i++)
                    {
                        cbl_seat.Items[i].Selected = true;
                        seat = Convert.ToString(cbl_seat.Items[i].Text);
                    }
                    if (cbl_seat.Items.Count == 1)
                    {
                        txt_seat.Text = "Seat(" + seat + ")";
                    }
                    else
                    {
                        txt_seat.Text = "Seat(" + cbl_seat.Items.Count + ")";
                    }
                    cb_seat.Checked = true;
                }
            }
            else
            {
                txt_seat.Text = "--Select--";
            }
        }
        catch
        {
        }
    }
    public void cb_seat_checkedchange(object sender, EventArgs e)
    {
        try
        {
            if (cb_seat.Checked == true)
            {
                for (int i = 0; i < cbl_seat.Items.Count; i++)
                {
                    cbl_seat.Items[i].Selected = true;
                }
                txt_seat.Text = "Seat(" + (cbl_seat.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_seat.Items.Count; i++)
                {
                    cbl_seat.Items[i].Selected = false;
                }
                txt_seat.Text = "--Select--";
            }
        }
        catch
        {
        }
    }
    public void cbl_seat_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            txt_seat.Text = "--Select--";
            cb_seat.Checked = false;
            for (int i = 0; i < cbl_seat.Items.Count; i++)
            {
                if (cbl_seat.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount == cbl_seat.Items.Count)
            {
                txt_seat.Text = "Seat(" + commcount.ToString() + ")";
                cb_seat.Checked = true;
            }
            else if (commcount == 0)
            {
                txt_seat.Text = "--Select--";
            }
            else
            {
                txt_seat.Text = "Seat(" + commcount.ToString() + ")";
            }
        }
        catch
        {
        }
    }
    public void ddlcollege_SelectedIndexChanged(object sender, EventArgs e)
    {
        edu_level();
        degree();
        bindbatch();
        loadstream();
        loadreligion();
        loadcommunity();
        loadseat();
        Collinfo = Convert.ToString(ddlcollege.SelectedItem.Value);
        cblcolumnorder0.Visible = false;
        pcolumnorder0.Visible = false;
        pheaderfilter0.Visible = false;
        div_report.Visible = false;
        // div1.Visible = true;
        Fpspread1.Visible = false;
        txt_searchstudname.Text = "";
        txt_searchappno.Text = "";
        txt_searchmobno.Text = "";
        bindsem();
        appFormateRights();//barath 11.01.18
        loadquota();//abarna
    }
    void BindCollege()
    {
        try
        {
            //string srisql = "select collname,college_code from collinfo";
            //ds.Clear();
            //ds = d2.select_method_wo_parameter(srisql, "Text");
            //ddlcollege.DataSource = ds;
            //ddlcollege.DataTextField = "collname";
            //ddlcollege.DataValueField = "college_code";
            //ddlcollege.DataBind();
            ds.Clear();
            //ds = d2.BindCollege();
            string group_code = Session["group_code"].ToString();
            string columnfield = "";
            if (group_code.Contains(';'))
            {
                string[] group_semi = group_code.Split(';');
                group_code = group_semi[0].ToString();
            }
            if ((group_code.ToString().Trim() != "") && (Session["single_user"].ToString() != "1" && Session["single_user"].ToString() != "true" && Session["single_user"].ToString() != "TRUE" && Session["single_user"].ToString() != "True"))
            {
                columnfield = " and group_code='" + group_code + "'";
            }
            else
            {
                columnfield = " and user_code='" + Session["usercode"] + "'";
            }
            Hashtable hat1 = new Hashtable();
            hat1.Clear();
            hat1.Add("column_field", columnfield.ToString());
            ds = d2.select_method("bind_college", hat1, "sp");
            ddlcollege.Items.Clear();
            ddl_college.Items.Clear();
            if (ds.Tables[0].Rows.Count > 0)
            {
                //ddlclg.DataSource = ds;
                //ddlclg.DataTextField = "collname";
                //ddlclg.DataValueField = "college_code";
                //ddlclg.DataBind();
                ddlcollege.DataSource = ds;
                ddlcollege.DataTextField = "collname";
                ddlcollege.DataValueField = "college_code";
                ddlcollege.DataBind();
                ddl_college.DataSource = ds;
                ddl_college.DataTextField = "collname";
                ddl_college.DataValueField = "college_code";
                ddl_college.DataBind();
                ddl_collegename2.DataSource = ds;
                ddl_collegename2.DataTextField = "collname";
                ddl_collegename2.DataValueField = "college_code";
                ddl_collegename2.DataBind();
            }
        }
        catch
        {
        }
    }
    public void edu_level()
    {
        try
        {
            string st = "select distinct edu_level,priority from course where college_code='" + ddlcollege.SelectedItem.Value + "' order by priority asc";
            ds = d2.select_method_wo_parameter(st, "text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cbl_graduation.DataSource = ds;
                cbl_graduation.DataTextField = "edu_level";
                cbl_graduation.DataValueField = "edu_level";
                cbl_graduation.DataBind();
                if (cbl_graduation.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_graduation.Items.Count; i++)
                    {
                        cbl_graduation.Items[i].Selected = true;
                    }
                    txt_graduation.Text = "Graduation(" + cbl_graduation.Items.Count + ")";
                    cb_graduation.Checked = true;
                }
                else
                {
                    txt_graduation.Text = "--Select--";
                    cb_graduation.Checked = false;
                    txt_degree.Text = "--Select--";
                    cb_degree.Checked = false;
                    cbl_degree.Items.Clear();
                    txt_branch.Text = "--Select--";
                    cb_branch.Checked = false;
                    cbl_branch.Items.Clear();
                }
            }
        }
        catch { }
    }
    public void bindbatch()
    {
        try
        {
            ddl_batch.Items.Clear();
            hat.Clear();
            ds = d2.BindBatch();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_batch.DataSource = ds;
                ddl_batch.DataTextField = "batch_year";
                ddl_batch.DataValueField = "batch_year";
                ddl_batch.DataBind();
                //ddl_batch1.SelectedIndex = 3;
            }
        }
        catch
        {
        }
    }
    public void degree()
    {
        try
        {
            string edulvl = "";
            usercode = Session["usercode"].ToString();
            collegecode = Convert.ToString(ddlcollege.SelectedItem.Value);
            for (int i = 0; i < cbl_graduation.Items.Count; i++)
            {
                if (cbl_graduation.Items[i].Selected == true)
                {
                    string build = cbl_graduation.Items[i].Value.ToString();
                    if (edulvl == "")
                    {
                        edulvl = build;
                    }
                    else
                    {
                        edulvl = edulvl + "','" + build;
                    }
                }
            }
            string rights = "";
            if (group_user.Contains(";"))
            {
                string[] group_semi = group_user.Split(';');
                group_user = group_semi[0].ToString();
            }
            if ((group_user.ToString().Trim() != "") && (group_user.Trim() != "0") && (group_user.ToString().Trim() != "-1"))
            {
                rights = "and group_code='" + group_user + "'";
            }
            else
            {
                rights = " and user_code='" + usercode + "'";
            }
            string query = "select distinct d.Course_Id,c.Course_Name from Degree d,course c ,DeptPrivilages p where p.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.college_code=c.college_code and d.college_code='" + ddlcollege.SelectedItem.Value + "' and Edu_Level in('" + edulvl + "') " + rights + "";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            int count1 = ds.Tables[0].Rows.Count;
            if (count1 > 0)
            {
                cbl_degree.DataSource = ds;
                cbl_degree.DataTextField = "course_name";
                cbl_degree.DataValueField = "course_id";
                cbl_degree.DataBind();
                //cbldegree.DataSource = ds;
                //cbldegree.DataTextField = "course_name";
                //cbldegree.DataValueField = "course_id";
                //cbldegree.DataBind();
                if (cbl_degree.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_degree.Items.Count; i++)
                    {
                        cbl_degree.Items[i].Selected = true;
                    }
                    txt_degree.Text = lbl_degreeT.Text + " (" + cbl_degree.Items.Count + ")";
                    cb_degree.Checked = true;
                }
                else
                {
                    txt_degree.Text = "--Select--";
                    cb_degree.Checked = false;
                }
                //if (cbldegree.Items.Count > 0)
                //{
                //    for (int i = 0; i < cbldegree.Items.Count; i++)
                //    {
                //        cbldegree.Items[i].Selected = true;
                //    }
                //    txtdegree.Text = lbl_degreeT.Text + " (" + cbldegree.Items.Count + ")";
                //    cbdegree.Checked = true;
                //}
                //else
                //{
                //    txtdegree.Text = "--Select--";
                //    cbdegree.Checked = false;
                //}
                string build = "";
                string deg = "";
                if (cbl_degree.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_degree.Items.Count; i++)
                    {
                        if (cbl_degree.Items[i].Selected == true)
                        {
                            build = cbl_degree.Items[i].Value.ToString();
                            if (deg == "")
                            {
                                deg = build;
                            }
                            else
                            {
                                deg = deg + "','" + build;
                            }
                        }
                    }
                }
                bindbranch(deg);
            }
            else
            {
                txt_degree.Text = "--Select--";
                cb_degree.Checked = false;
                cbl_degree.Items.Clear();
                txt_branch.Text = "--Select--";
                cb_branch.Checked = false;
                cbl_branch.Items.Clear();
            }
        }
        catch (Exception ex)
        {
        }
    }
    //delsi
    public void binddegree()
    {
        try
        {
            ds.Clear();
            string edulvl = "";
            usercode = Session["usercode"].ToString();
            collegecode = Convert.ToString(ddlcollege.SelectedItem.Value);
            for (int i = 0; i < cbl_graduation.Items.Count; i++)
            {
                if (cbl_graduation.Items[i].Selected == true)
                {
                    string build = cbl_graduation.Items[i].Value.ToString();
                    if (edulvl == "")
                    {
                        edulvl = build;
                    }
                    else
                    {
                        edulvl = edulvl + "','" + build;
                    }
                }
            }
            string rights = "";
            if (group_user.Contains(";"))
            {
                string[] group_semi = group_user.Split(';');
                group_user = group_semi[0].ToString();
            }
            if ((group_user.ToString().Trim() != "") && (group_user.Trim() != "0") && (group_user.ToString().Trim() != "-1"))
            {
                rights = "and group_code='" + group_user + "'";
            }
            else
            {
                rights = " and user_code='" + usercode + "'";
            }
            string query = "select distinct d.Course_Id,c.Course_Name from Degree d,course c ,DeptPrivilages p where p.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.college_code=c.college_code and d.college_code='" + ddlcollege.SelectedItem.Value + "' and Edu_Level in('" + edulvl + "') " + rights + "";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            int count1 = ds.Tables[0].Rows.Count;
            if (count1 > 0)
            {
                cbldegree.DataSource = ds;
                cbldegree.DataTextField = "course_name";
                cbldegree.DataValueField = "course_id";
                cbldegree.DataBind();
                cbldegree.DataSource = ds;
                checkBoxListselectOrDeselect(cbldegree, true);
                CallCheckboxListChange(cbdegree, cbldegree, txtdegree, lbldegree.Text, "--Select--");
            }
        }
        catch (Exception ex)
        {
        }
    }
    //
    public void bindbranch(string branch)
    {
        try
        {
            string rights = "";
            if (group_user.Contains(";"))
            {
                string[] group_semi = group_user.Split(';');
                group_user = group_semi[0].ToString();
            }
            if ((group_user.ToString().Trim() != "") && (group_user.Trim() != "0") && (group_user.ToString().Trim() != "-1"))
            {
                rights = "and group_code='" + group_user + "'";
            }
            else
            {
                rights = " and user_code='" + usercode + "'";
            }
            cbl_branch.Items.Clear();
            string commname = "";
            if (branch != "")
            {
                commname = "select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course,deptprivilages where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.course_id in('" + branch + "') and deptprivilages.Degree_code=degree.Degree_code and degree.college_code='" + ddlcollege.SelectedItem.Value + "' " + rights + " ";
            }
            else
            {
                commname = " select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course,deptprivilages where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and deptprivilages.Degree_code=degree.Degree_code and degree.college_code='" + ddlcollege.SelectedItem.Value + "' " + rights + "";
            }
            {
                ds = d2.select_method(commname, hat, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_branch.DataSource = ds;
                    cbl_branch.DataTextField = "dept_name";
                    cbl_branch.DataValueField = "degree_code";
                    cbl_branch.DataBind();
                    if (cbl_branch.Items.Count > 0)
                    {
                        for (int i = 0; i < cbl_branch.Items.Count; i++)
                        {
                            cbl_branch.Items[i].Selected = true;
                        }
                        txt_branch.Text = lbl_branchT.Text + "(" + cbl_branch.Items.Count + ")";
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void loadstream()
    {
        try
        {
            string stream = "";
            cbl_stream.Items.Clear();
            string deptquery = "select distinct type from Course where type is not null and type<>'' and college_code  in ('" + ddlcollege.SelectedItem.Value + "')";
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cbl_stream.DataSource = ds;
                cbl_stream.DataTextField = "type";
                cbl_stream.DataBind();
                if (cbl_stream.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_stream.Items.Count; i++)
                    {
                        cbl_stream.Items[i].Selected = true;
                    }
                    txt_stream.Text = "Stream(" + cbl_stream.Items.Count + ")";
                    cb_stream.Checked = true;
                    txt_stream.Enabled = true;
                }
                else
                {
                    txt_stream.Enabled = false;
                    txt_stream.Text = "--Select--";
                    cb_stream.Checked = false;
                }
            }
            else
            {
                txt_stream.Enabled = false;
                txt_stream.Text = "--Select--";
                cb_stream.Checked = false;
            }
        }
        catch
        {
        }
    }
    public void loadreligion()
    {
        try
        {
            string religion = "";
            cbl_religion.Items.Clear();
            //string reliquery = " select TextCode,textval from textvaltable where TextCriteria like '%relig%' and college_code='" + ddlcollege.SelectedItem.Value + "' and textval<>''and textval<>'-' and TextCriteria2='relig1'";
            string reliquery = "select distinct TextCode,textval from textvaltable t ,applyn a where t.TextCode=a.religion and TextCriteria like '%relig%' and a.college_code='" + ddlcollege.SelectedItem.Value + "' and textval<>'' and textval<>'-' and t.college_code=a.college_code";
            ds.Clear();
            ds = d2.select_method_wo_parameter(reliquery, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_religion.DataSource = ds;
                    cbl_religion.DataTextField = "TextVal";
                    cbl_religion.DataValueField = "TextCode";
                    cbl_religion.DataBind();
                    //if (cbl_religion.Items.Count > 0)
                    //{
                    //    for (int i = 0; i < cbl_religion.Items.Count; i++)
                    //    {
                    //        cbl_religion.Items[i].Selected = true;
                    //        religion = Convert.ToString(cbl_religion.Items[i].Text);
                    //    }
                    //    if (cbl_religion.Items.Count == 1)
                    //    {
                    //        txt_religion.Text = "" + religion + "";
                    //    }
                    //    else
                    //    {
                    //        txt_religion.Text = "Religion(" + cbl_religion.Items.Count + ")";
                    //    }
                    //    cb_religion.Checked = true;
                    //}
                }
            }
            else
            {
                txt_religion.Text = "--Select--";
                cb_religion.Checked = false;
            }
        }
        catch
        {
        }
    }
    public void loadcommunity()
    {
        try
        {
            string comm = "";
            //  string selq = "select TextCode,textval from textvaltable where TextCriteria like '%comm%' and college_code='" + ddlcollege.SelectedItem.Value + "' and textval<>''and textval<>'-' and TextCriteria2='comm1' order by textval ";
            string selq = " select distinct TextCode,textval from textvaltable t,applyn a where t.TextCode=a.community and TextCriteria like '%comm%' and t.college_code=a.college_code and  a.college_code='" + ddlcollege.SelectedItem.Value + "' and textval<>''and textval<>'-'  order by textval ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selq, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_comm.DataSource = ds;
                    cbl_comm.DataTextField = "TextVal";
                    cbl_comm.DataValueField = "TextCode";
                    cbl_comm.DataBind();
                    //if (cbl_comm.Items.Count > 0)
                    //{
                    //    for (int i = 0; i < cbl_comm.Items.Count; i++)
                    //    {
                    //        cbl_comm.Items[i].Selected = true;
                    //        comm = Convert.ToString(cbl_comm.Items[i].Text);
                    //    }
                    //    if (cbl_comm.Items.Count == 1)
                    //    {
                    //        txt_comm.Text = "" + comm + "";
                    //    }
                    //    else
                    //    {
                    //        txt_comm.Text = "Community(" + cbl_comm.Items.Count + ")";
                    //    }
                    //    cb_comm.Checked = true;
                    //}
                }
            }
            else
            {
                txt_comm.Text = "--Select--";
                cb_comm.Checked = false;
            }
        }
        catch
        {
        }
    }
    public void cb_religion_checkedchange(object sender, EventArgs e)
    {
        try
        {
            if (cb_religion.Checked == true)
            {
                for (int i = 0; i < cbl_religion.Items.Count; i++)
                {
                    cbl_religion.Items[i].Selected = true;
                }
                txt_religion.Text = "Religion(" + (cbl_religion.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_religion.Items.Count; i++)
                {
                    cbl_religion.Items[i].Selected = false;
                }
                txt_religion.Text = "--Select--";
            }
        }
        catch
        {
        }
    }
    public void cbl_religion_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            txt_religion.Text = "--Select--";
            cb_religion.Checked = false;
            for (int i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount == cbl_religion.Items.Count)
            {
                txt_religion.Text = "Religion(" + commcount.ToString() + ")";
                cb_religion.Checked = true;
            }
            else if (commcount == 0)
            {
                txt_religion.Text = "--Select--";
            }
            else
            {
                txt_religion.Text = "Religion(" + commcount.ToString() + ")";
            }
        }
        catch
        {
        }
    }
    public void cb_comm_checkedchange(object sender, EventArgs e)
    {
        try
        {
            if (cb_comm.Checked == true)
            {
                for (int i = 0; i < cbl_comm.Items.Count; i++)
                {
                    cbl_comm.Items[i].Selected = true;
                }
                txt_comm.Text = "Community(" + (cbl_comm.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_comm.Items.Count; i++)
                {
                    cbl_comm.Items[i].Selected = false;
                }
                txt_comm.Text = "--Select--";
            }
        }
        catch
        {
        }
    }
    public void cbl_comm_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            txt_comm.Text = "--Select--";
            cb_comm.Checked = false;
            for (int i = 0; i < cbl_comm.Items.Count; i++)
            {
                if (cbl_comm.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount == cbl_comm.Items.Count)
            {
                txt_comm.Text = "Community(" + commcount.ToString() + ")";
                cb_comm.Checked = true;
            }
            else if (commcount == 0)
            {
                txt_comm.Text = "--Select--";
            }
            else
            {
                txt_comm.Text = "Community(" + commcount.ToString() + ")";
            }
        }
        catch
        {
        }
    }
    public void cb_stream_checkedchange(object sender, EventArgs e)
    {
        try
        {
            if (cb_stream.Checked == true)
            {
                for (int i = 0; i < cbl_stream.Items.Count; i++)
                {
                    cbl_stream.Items[i].Selected = true;
                }
                txt_stream.Text = "Stream(" + (cbl_stream.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_stream.Items.Count; i++)
                {
                    cbl_stream.Items[i].Selected = false;
                }
                txt_stream.Text = "--Select--";
            }
        }
        catch
        {
        }
    }
    public void cbl_stream_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            txt_stream.Text = "--Select--";
            cb_stream.Checked = false;
            for (int i = 0; i < cbl_stream.Items.Count; i++)
            {
                if (cbl_stream.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount == cbl_stream.Items.Count)
            {
                txt_stream.Text = "Stream(" + commcount.ToString() + ")";
                cb_stream.Checked = true;
            }
            else if (commcount == 0)
            {
                txt_stream.Text = "--Select--";
            }
            else
            {
                txt_stream.Text = "Stream(" + commcount.ToString() + ")";
            }
        }
        catch
        {
        }
    }
    public void cb_graduation_checkedchange(object sender, EventArgs e)
    {
        try
        {
            string deg = "";
            if (cb_graduation.Checked == true)
            {
                for (int i = 0; i < cbl_graduation.Items.Count; i++)
                {
                    cbl_graduation.Items[i].Selected = true;
                }
                txt_graduation.Text = "Edu Level(" + (cbl_graduation.Items.Count) + ")";
                degree();
                if (cbl_degree.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_degree.Items.Count; i++)
                    {
                        if (cbl_degree.Items[i].Selected == true)
                        {
                            string build = cbl_degree.Items[i].Value.ToString();
                            if (deg == "")
                            {
                                deg = build;
                            }
                            else
                            {
                                deg = deg + "','" + build;
                            }
                        }
                    }
                }
                bindbranch(deg);
                bindsem();
            }
            else
            {
                for (int i = 0; i < cbl_graduation.Items.Count; i++)
                {
                    cbl_graduation.Items[i].Selected = false;
                }
                txt_graduation.Text = "--Select--";
                txt_degree.Text = "--Select--";
                cb_degree.Checked = false;
                cbl_degree.Items.Clear();
                txt_branch.Text = "--Select--";
                cb_branch.Checked = false;
                cbl_branch.Items.Clear();
            }
        }
        catch
        {
        }
    }
    public void cbl_graduation_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            string deg = "";
            txt_graduation.Text = "--Select--";
            cb_graduation.Checked = false;
            for (int i = 0; i < cbl_graduation.Items.Count; i++)
            {
                if (cbl_graduation.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount == cbl_graduation.Items.Count)
            {
                txt_graduation.Text = "Edu Level(" + commcount.ToString() + ")";
                cb_graduation.Checked = true;
            }
            else if (commcount == 0)
            {
                txt_graduation.Text = "--Select--";
                txt_graduation.Text = "--Select--";
                txt_degree.Text = "--Select--";
                cb_degree.Checked = false;
                cbl_degree.Items.Clear();
                txt_branch.Text = "--Select--";
                cb_branch.Checked = false;
                cbl_branch.Items.Clear();
            }
            else
            {
                txt_graduation.Text = "Edu Level(" + commcount.ToString() + ")";
                degree();
                if (cbl_degree.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_degree.Items.Count; i++)
                    {
                        if (cbl_degree.Items[i].Selected == true)
                        {
                            string build = cbl_degree.Items[i].Value.ToString();
                            if (deg == "")
                            {
                                deg = build;
                            }
                            else
                            {
                                deg = deg + "','" + build;
                            }
                        }
                    }
                }
                bindbranch(deg);
                bindsem();
            }
        }
        catch
        {
        }
    }
    public void cb_degree_checkedchange(object sender, EventArgs e)
    {
        try
        {
            string buildvalue1 = "";
            string build1 = "";
            if (cb_degree.Checked == true)
            {
                for (int i = 0; i < cbl_degree.Items.Count; i++)
                {
                    if (cb_degree.Checked == true)
                    {
                        cbl_degree.Items[i].Selected = true;
                        txt_degree.Text = lbl_degreeT.Text + "(" + (cbl_degree.Items.Count) + ")";
                        build1 = cbl_degree.Items[i].Value.ToString();
                        if (buildvalue1 == "")
                        {
                            buildvalue1 = build1;
                        }
                        else
                        {
                            buildvalue1 = buildvalue1 + "'" + "," + "'" + build1;
                        }
                    }
                }
                bindbranch(buildvalue1);
                bindsem();
            }
            else
            {
                for (int i = 0; i < cbl_degree.Items.Count; i++)
                {
                    cbl_degree.Items[i].Selected = false;
                    txt_degree.Text = "--Select--";
                    txt_branch.Text = "--Select--";
                    cbl_branch.ClearSelection();
                    cb_branch.Checked = false;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void cbl_degree_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int seatcount = 0;
            cb_degree.Checked = false;
            string buildvalue = "";
            string build = "";
            for (int i = 0; i < cbl_degree.Items.Count; i++)
            {
                if (cbl_degree.Items[i].Selected == true)
                {
                    seatcount = seatcount + 1;
                    txt_branch.Text = "--Select--";
                    build = cbl_degree.Items[i].Value.ToString();
                    if (buildvalue == "")
                    {
                        buildvalue = build;
                    }
                    else
                    {
                        buildvalue = buildvalue + "'" + "," + "'" + build;
                    }
                }
            }
            bindbranch(buildvalue);
            if (seatcount == cbl_degree.Items.Count)
            {
                txt_degree.Text = lbl_degreeT.Text + "(" + seatcount.ToString() + ")";
                cb_degree.Checked = true;
            }
            else if (seatcount == 0)
            {
                txt_degree.Text = "--Select--";
                txt_degree.Text = "--Select--";
            }
            else
            {
                txt_degree.Text = "Degree(" + seatcount.ToString() + ")";
            }
            bindsem();
        }
        catch (Exception ex)
        {
        }
    }
    public void cb_branch_checkedchange(object sender, EventArgs e)
    {
        try
        {
            if (cb_branch.Checked == true)
            {
                for (int i = 0; i < cbl_branch.Items.Count; i++)
                {
                    cbl_branch.Items[i].Selected = true;
                }
                txt_branch.Text = lbl_branchT.Text + "(" + (cbl_branch.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_branch.Items.Count; i++)
                {
                    cbl_branch.Items[i].Selected = false;
                }
                txt_branch.Text = "--Select--";
            }
            bindsem();
        }
        catch
        {
        }
    }
    public void cbl_branch_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            txt_branch.Text = "--Select--";
            cb_branch.Checked = false;
            for (int i = 0; i < cbl_branch.Items.Count; i++)
            {
                if (cbl_branch.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount == cbl_branch.Items.Count)
            {
                txt_branch.Text = lbl_branchT.Text + "(" + commcount.ToString() + ")";
                cb_branch.Checked = true;
            }
            else if (commcount == 0)
            {
                txt_degree.Text = "--Select--";
            }
            else
            {
                txt_branch.Text = lbl_branchT.Text + "(" + commcount.ToString() + ")";
            }
            bindsem();
        }
        catch
        {
        }
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> Getname(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();
        string query = "select stud_name from applyn where isnull( isconfirm,'0') ='1' and ISNULL(admission_status,'0')=0 and stud_name like '" + prefixText + "%' and College_code='" + Collinfo + "'";
        // string query = "select a.stud_name+'-'+ISNULL(  a.parent_name,'')+'-'+c.Course_Name+'-'+dt.Dept_Name+'-'+r.Roll_No,r.Roll_No from applyn a,Registration r ,Degree d,course c,Department dt  where a.app_no=r.app_no and r.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.Dept_Code=dt.Dept_Code  and r.CC=0 and r.DelFlag =0 and r.Exam_Flag <>'DEBAR' and a.stud_name like '" + prefixText + "%'";
        name = ws.Getname(query);
        return name;
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> getmob(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();
        string query = "select parentf_mobile from applyn where isnull( isconfirm,'0') ='1' and ISNULL(admission_status,'0')=0 and parentf_mobile like '" + prefixText + "%' and College_code='" + Collinfo + "'";
        name = ws.Getname(query);
        return name;
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> getappfrom(string prefixText)
    {
        WebService ws = new WebService();
        List<string> name = new List<string>();
        string query = "select app_formno from applyn where isnull( isconfirm,'0') ='1' and ISNULL(admission_status,'0')=0 and app_formno like '" + prefixText + "%' and College_code='" + Collinfo + "'";
        name = ws.Getname(query);
        return name;
    }
    public void btn_go_OnClick(object sender, EventArgs e)
    {
        go();
    }
    protected void btn_errorclose_Click(object sendre, EventArgs e)
    {
        imgdiv2.Visible = false;
        AcdYear();
        loadcollege();
        educationLevel();
        loadChioce();
        loadChioce2();
        loadReligion();
        loadCommunity();
        LoadUniversity();
        txtapplname.Text = "";
        AddBatch();
        txtsclname.Text = "";
        txtscladd.Text = "";
        txtgrade.Text = "";
        rbMarksGrade.SelectedIndex = 0;
        rbhsc.Checked = true;
        rbcbse.Checked = false;
        rbother.Checked = false;
        rbhsc_OnCheckedChanged(sendre, e);
        ddlcourse_OnSelectedIndexChanged(sendre, e);
        //  txtapplno.Text = "";
        txtmark.Text = "";
        txtpassyr.Text = "";
        txtrm.Text = "";
        txtmblno.Text = "";
        studimg.ImageUrl = "";
        txtapplno.Focus();
        txtugper.Text = "";
        txtugmaj.Text = "";
        txtugcourse.Text = "";
        LoadUniversity();
        LoadPgcourse();
        //9/5/2016
        lbltan.Visible = false;
        txttanmark.Visible = false;
        txttanmark.Text = "";
        txtsclname.Enabled = true;
        txtscladd.Enabled = true;
        cbsamclg.Checked = false;
        bindnewsem();
        bindMode();
        bindseattype();
    }
    public void FpSpread1_CellClick(object sender, EventArgs e)
    {
        try
        {
            Cellclick = true;
        }
        catch
        {
        }
    }
    public void FpSpread1_SelectedIndexChanged(object sender, EventArgs e)
    {
        string appl_No = string.Empty;
        if (IsAppNoAutoGenerate())
        {
            txt_appfromno.Enabled = false;
            txtapplno.Enabled = false;
        }
        else
        {
            txtapplno.Enabled = true;
            txt_appfromno.Enabled = true;
        }
        string appfromno = "";
        if (Cellclick == true)
        {
            btn_fromate2update.Visible = true;//new
            if (ddlreportTye.SelectedIndex == 0)
            {
                btnDeleteStud.Visible = false;
            }
            else
            {
                btnDeleteStud.Visible = false;
            }
            btnstept3.Visible = false;//new
            savevalue = false;
            string activerow = "";
            string activecol = "";
            string query = "";
            int i = 0;
            // txtapplno.Enabled = false;
            activerow = Fpspread1.ActiveSheetView.ActiveRow.ToString();
            activecol = Fpspread1.ActiveSheetView.ActiveColumn.ToString();
            string appfomno = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Tag);
            Session["appnum"] = appfomno;
            string batchyear = Convert.ToString(ddl_batch.SelectedItem.Text);
            // string degreecode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 4].Tag);
            applicationFormateRights();//new
            if (formatevalue == "0")
            {
                query = "select distinct a.parent_name, a.degree_code,a.Alternativedegree_code,a.remarks,a.sex,a.app_no,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion,a.parentf_mobile as Student_Mobile,a.stud_name,a.app_formno,a.college_code,seattype,convert(varchar(10),a.date_applied,103) as dtApplied, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name,a.Mode,isnull(isconfirm,'0')isconfirm from applyn a, degree d,Department dt,Course C where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isnull( isconfirm,'0') ='1' and a.app_no='" + appfomno + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(query, "text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ViewState["AppNew"] = Convert.ToString(appfomno);
                    ViewState["AppNew1"] = Convert.ToString(ds.Tables[0].Rows[0]["app_formno"]);
                    applicationNoRightsacr();
                    appfromno = Convert.ToString(ds.Tables[0].Rows[0]["app_formno"]);
                    if (appnovalueacr.Trim() == "1")
                    {
                        appfromno = Convert.ToString(ds.Tables[0].Rows[0]["app_formno"]).Substring(4);
                    }
                    txtapplno.Text = appfromno;
                    txtappldate.Text = Convert.ToString(ds.Tables[0].Rows[0]["dtApplied"]);
                    txtapplname.Text = Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]);
                    txtfather.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_name"]);
                    txtmblno.Text = Convert.ToString(ds.Tables[0].Rows[0]["Student_Mobile"]);
                    string collegenewcode = Convert.ToString(ds.Tables[0].Rows[0]["college_code"]);
                    string Batch_year = Convert.ToString(ds.Tables[0].Rows[0]["Batch_Year"]);
                    string seattype = Convert.ToString(ds.Tables[0].Rows[0]["seattype"]);
                    string StudentType = Convert.ToString(ds.Tables[0].Rows[0]["Mode"]);
                    string CurrentSemester = Convert.ToString(ds.Tables[0].Rows[0]["Current_Semester"]);
                    //ddlregl.SelectedItem.Text = Convert.ToString(ds.Tables[0].Rows[0]["religion"]);
                    //ddlcomm.SelectedItem.Text = Convert.ToString(ds.Tables[0].Rows[0]["community"]);
                    ddlclg.SelectedIndex = ddlclg.Items.IndexOf(ddlclg.Items.FindByValue(Convert.ToString(collegenewcode)));

                    string newbatch = d2.GetFunction("select r.Batch_Year from Registration r,applyn a where a.app_no=r.App_No and a.app_no='" + appfomno + "'");//Rajkumar 16/07/2018
                    if (!string.IsNullOrEmpty(newbatch) && newbatch!="0")
                        ddlBatch_year.SelectedIndex = ddlBatch_year.Items.IndexOf(ddlBatch_year.Items.FindByText(Convert.ToString(newbatch)));
                    else
                        ddlBatch_year.SelectedIndex = ddlBatch_year.Items.IndexOf(ddlBatch_year.Items.FindByText(Convert.ToString(Batch_year)));


                    ddlMode.SelectedIndex = ddlMode.Items.IndexOf(ddlMode.Items.FindByValue(Convert.ToString(StudentType)));
                    ddlSemester1.SelectedIndex = ddlSemester1.Items.IndexOf(ddlSemester1.Items.FindByText(Convert.ToString(CurrentSemester)));
                    loadReligion();
                    loadCommunity();
                    ddlregl.SelectedIndex = ddlregl.Items.IndexOf(ddlregl.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["religion"])));
                    ddlcomm.SelectedIndex = ddlcomm.Items.IndexOf(ddlcomm.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["community"])));
                    //ddlregl.SelectedIndex = ddlregl.Items.IndexOf(ddlregl.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["community"])));
                    txtrm.Text = Convert.ToString(ds.Tables[0].Rows[0]["remarks"]);
                    loadChioce();
                    loadChioce2();
                    checkFun();
                    bindseattype();
                    ddl_seattype.SelectedIndex = ddl_seattype.Items.IndexOf(ddl_seattype.Items.FindByValue(Convert.ToString(seattype)));
                    string alternate = Convert.ToString(ds.Tables[0].Rows[0]["Alternativedegree_code"]);
                    string coursetype = d2.GetFunction("select Edu_Level from course where Course_Id='" + Convert.ToString(ds.Tables[0].Rows[0]["Course_Id"]) + "' and college_code='" + ddlcollege.SelectedItem.Value + "'");
                    ddlcourse.SelectedIndex = ddlcourse.Items.IndexOf(ddlcourse.Items.FindByText(coursetype));
                    string course = coursetype;
                    ddlcourse_OnSelectedIndexChanged(sender, e);
                    //  ddlcourse.SelectedItem.Text = coursetype;
                    //  ddlchoice1.SelectedItem.Text = Convert.ToString(ds.Tables[0].Rows[0]["Dept_Name"]) + "-" + Convert.ToString(ds.Tables[0].Rows[0]["Course_Name"]);               
                    string PGname = Convert.ToString(ds.Tables[0].Rows[0]["Dept_Name"]) + "-" + Convert.ToString(ds.Tables[0].Rows[0]["Course_Name"]);
                    ddlchoice1.SelectedIndex = ddlchoice1.Items.IndexOf(ddlchoice1.Items.FindByText(PGname));
                    string option2 = d2.GetFunction("select dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddlcollege.SelectedItem.Value + "' and d.Degree_Code='" + alternate + "' ");
                    if (option2 == "0")
                    {
                        option2 = "Select";
                    }
                    ddlchoice2.SelectedIndex = ddlchoice2.Items.IndexOf(ddlchoice2.Items.FindByText(option2));
                    //ddlchoice2.SelectedItem.Text = option2;
                    string alternatedeg = Convert.ToString(ds.Tables[0].Rows[0]["remarks"]);
                    popview.Visible = true;
                    string course_entno = "";
                    string gender = Convert.ToString(ds.Tables[0].Rows[0]["sex"]);
                    if (gender == "0")
                    {
                        //  rbmale.Checked = true;
                    }
                    else
                    {
                        // rbfemale.Checked = true;
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["isconfirm"]) == "False" || Convert.ToString(ds.Tables[0].Rows[0]["isconfirm"]) == "0")
                        IsEnquiry.Checked = true;
                    else
                        IsEnquiry.Checked = false;
                    string appno = Convert.ToString(ds.Tables[0].Rows[0]["app_no"]);
                    query = "sELECT p.securedmark,p.grade,p.course_entno,P.instaddress,P.percentage,P.tancet_mark,P.branch_code,a.App_No,uni_state,type_semester,(Select TextVal FROM TextValTable T WHERE university_code = T.TextCode) university_code,ISNULL(pt.TExtVal,'') Part2Language,ISNULL(C.TExtVal,'') Part1Language,ISNULL(C.TExtVal,'') Course,ISNULL(U.TextVal,'') University,ISNULL(Institute_Name,'') Institute_Name,ISNULL(PassMonth,'') PassMonth,ISNULL(PassYear,'') PassYear, isnull(p.markPriority,1) as markPriority FROM Stud_prev_details P INNER JOIN applyn A ON P.app_no = A.app_no LEFT JOIN TextValTable C ON C.TextCode = P.course_code  LEFT JOIN TextValTable U ON U.TextCode = P.university_code LEFT JOIN TextValTable pa ON pa.TextCode = P.Part1Language LEFT JOIN TextValTable pt ON pt.TextCode = P.Part2Language Where p.app_no = a.app_no and p.app_no='" + appno + "'  ";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(query, "text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        string univercode = Convert.ToString(ds.Tables[0].Rows[0]["university_code"]);
                        ddlpg.SelectedIndex = ddlpg.Items.IndexOf(ddlpg.Items.FindByText(univercode));
                        txtsclname.Text = Convert.ToString(ds.Tables[0].Rows[0]["Institute_Name"]);
                        txtscladd.Text = Convert.ToString(ds.Tables[0].Rows[0]["instaddress"]);
                        string passmonth = Convert.ToString(ds.Tables[0].Rows[0]["PassMonth"]);
                        if (passmonth.Trim() == "")
                        {
                            passmonth = "Month";
                        }
                        string passyear = Convert.ToString(ds.Tables[0].Rows[0]["PassYear"]);
                        if (passyear == "0")
                        {
                            passyear = "Year";
                        }
                        course_entno = Convert.ToString(ds.Tables[0].Rows[0]["course_entno"]);
                        string cour = Convert.ToString(ds.Tables[0].Rows[0]["Course"]);
                        //ug
                        if (coursetype.Trim().ToUpper() == "UG")
                        {
                            edut.Visible = true;
                            edutpg.Visible = false;
                            //ddlmonth.SelectedItem.Text = passmonth;
                            ddlmonth.SelectedIndex = ddlmonth.Items.IndexOf(ddlmonth.Items.FindByText(passmonth));
                            // ddlyear.SelectedItem.Text = passyear;
                            ddlyear.SelectedIndex = ddlyear.Items.IndexOf(ddlyear.Items.FindByText(passyear));
                            if (cour.Trim() == "HSC")
                            {
                                rbhsc.Checked = true;
                            }
                            else if (cour.Trim() == "CBSE")
                            {
                                rbcbse.Checked = true;
                            }
                            else
                            {
                                rbother.Checked = true;
                                txtotherscl.Text = cour;
                                txtotherscl.Visible = true;
                            }
                            string mark = Convert.ToString(ds.Tables[0].Rows[0]["securedmark"]);
                            string grade = Convert.ToString(ds.Tables[0].Rows[0]["grade"]);
                            if (mark != "" && mark != null)
                            {
                                rbmarkmark.Checked = true;
                                txtmark.Text = mark;
                                txtmark.Visible = true;
                                lblgrade.Visible = false;
                                txtgrade.Visible = false;
                                lblmark.Visible = true;
                            }
                            else
                            {
                                rbmarkgrade.Checked = true;
                                txtgrade.Text = grade;
                                lblgrade.Visible = true;
                                txtmark.Visible = false;
                                txtgrade.Visible = true;
                                lblmark.Visible = false;
                            }
                            savevalue = false;
                            cbsamclg.Visible = false;
                            lblsclname.Text = "School Name";
                            lblscladd.Text = "School Address";
                            txtsclname.Attributes.Add("placeholder", "School Name");
                            txtscladd.Attributes.Add("placeholder", "School Address");
                        }
                        else
                        {
                            edut.Visible = false;
                            edutpg.Visible = false;
                            LoadUniversity();
                            LoadPgcourse();
                            //unviersity
                            //ugcourse
                            ddlugcourse.SelectedIndex = ddlugcourse.Items.IndexOf(ddlugcourse.Items.FindByText(course));
                            //ddlmonth.SelectedItem.Text = passmonth;
                            ddlugmnth.SelectedIndex = ddlugmnth.Items.IndexOf(ddlugmnth.Items.FindByText(passmonth));
                            // ddlyear.SelectedItem.Text = passyear;
                            ddlugyr.SelectedIndex = ddlugyr.Items.IndexOf(ddlugyr.Items.FindByText(passyear));
                            txtugper.Text = Convert.ToString(ds.Tables[0].Rows[0]["percentage"]);
                            string branchcode = Convert.ToString(ds.Tables[0].Rows[0]["branch_code"]);
                            if (branchcode != "")
                            {
                                string branchname = d2.GetFunction("select TextVal from textvaltable where TextCriteria='branc' and college_code =" + ddlcollege.SelectedItem.Value + " and TextCode='" + branchcode + "'");
                                txtugmaj.Text = branchname;
                            }
                            //9/5/2016
                            if (PGname != "")
                            {
                                string[] splitC = PGname.Split('-');
                                if (splitC.Length > 0)
                                {
                                    string cname = splitC[1].ToString();
                                    if (cname.Trim().ToUpper() == "MCA")
                                    {
                                        lbltan.Visible = true;
                                        txttanmark.Visible = true;
                                        txttanmark.Text = Convert.ToString(ds.Tables[0].Rows[0]["tancet_mark"]);
                                    }
                                    else if (cname.Trim().ToUpper() == "MBA")
                                    {
                                        lbltan.Visible = true;
                                        txttanmark.Visible = true;
                                        txttanmark.Text = Convert.ToString(ds.Tables[0].Rows[0]["tancet_mark"]);
                                    }
                                    else
                                    {
                                        lbltan.Visible = false;
                                        txttanmark.Visible = false;
                                        txttanmark.Text = "";
                                    }
                                }
                            }
                            cbsamclg.Visible = true;
                            lblsclname.Text = "College Name";
                            lblscladd.Text = "College Address";
                            txtsclname.Attributes.Add("placeholder", "College Name");
                            txtscladd.Attributes.Add("placeholder", "College Address");
                        }
                    }
                    //txtapplno.Enabled = false;
                    buttonfun("2");
                    txtapplno.Text = Convert.ToString(ViewState["AppNew1"]);
                    if (appnovalueacr.Trim() == "1")
                    {
                        txtapplno.Text = Convert.ToString(ViewState["AppNew1"]).Substring(4);
                    }
                    cbincludercpt.Visible = false;
                }
            }
            else//new
            {
                rbMarksGrade.SelectedIndex = 0;
                popaddnewF2.Visible = true;
                TabContainer1.ActiveTabIndex = 0;
                loadPartLanguages();
                loadscholarship();//Added By Saranyadevi 22.2.2018
                loadQualification();
                loadAcaDropDowns();
                loadAcademicSpread();
                loadBnkDropDowns();
                loadBnkSpread();
                loadRelDropDowns();
                loadRelSpread();
                loadRefDropDowns();
                loadStaff(); loadreferstudent(); //loadSpreadData(appfomno);
                bindnationalitymothertonguebloodgroup();
                bindexam();
                formate2view(appfomno, ddlbatch2.SelectedValue);
            }
        }
    }
    public void btn_addnew_OnClick(object sender, EventArgs e)
    {
        try
        {
            IsEnquiry.Checked = false;
            educationdet.Visible = true; ExmarkstQua.Visible = true;
            txtapplno.Text = "";
            savevalue = true;
            //txtapplno.Enabled = true;
            clearall();
            AcdYear();
            loadcollege();
            educationLevel();
            loadChioce();
            loadChioce2();
            loadChiocenew();
            loadReligion();
            loadCommunity();
            txtapplname.Text = "";
            AddBatch();
            txtsclname.Text = "";
            txtscladd.Text = "";
            txtgrade.Text = "";
            rbMarksGrade.SelectedIndex = 0;
            rbhsc.Checked = true;
            rbcbse.Checked = false;
            rbother.Checked = false;
            rbhsc_OnCheckedChanged(sender, e);
            txtmark.Text = "";
            txtpassyr.Text = "";
            txtrm.Text = "";
            txtmblno.Text = "";
            studimg.ImageUrl = "";
            checkFun();
            buttonfun("1");
            bindseattype();
            bindMode();
            AddBatch();
            bindquto();//abar
            //for (int bt = DateTime.Now.Year; bt > 1999; bt--)
            //{
            //    ddlBatch_year.Items.Add(bt.ToString());
            //}
            bindnewsem();
            // txtapplno.Text = "";
            applicationFormateRights();
            if (formatevalue == "0")
            {
                popview.Visible = true;
            }
            else
            {
                popaddnewF2.Visible = true;
                TabContainer1.ActiveTabIndex = 0;
                binduggird();
            }
            if (formatevalue == "0" && ddlAppFormat.Text == "Select")
            {
                popview.Visible = false;
            }
            bindseattype1();
            ddlcourse_OnSelectedIndexChanged(sender, e);
            Printcontrol.Visible = false;
            btn_fromate2update.Visible = false;
            btnDeleteStud.Visible = false;
            btnstept3.Visible = true;
            loadPartLanguages();
            loadscholarship();//Added By Saranyadevi 22.2.2018
            loadQualification();
            loadAcaDropDowns();
            loadAcademicSpread();
            loadBnkDropDowns();
            loadBnkSpread();
            loadRelDropDowns();
            loadRelSpread();
            loadRefDropDowns();
            loadStaff();
            loadreferstudent();
            bindnationalitymothertonguebloodgroup();
            bindexam();
            //lblBatchVal.Text = DateTime.Now.Year.ToString();
            ddlbatch2.SelectedIndex = 0;
            turnVisibility();
            Marksgrid.DataSource = null;
            Marksgrid.DataBind();
            if (checkApplicationFeeRights() == 1)
            {
                cbincludercpt.Visible = true;
                cbincludercpt.Checked = true;
            }
            else
            {
                cbincludercpt.Visible = false;
                cbincludercpt.Checked = false;
            }
            txtfather.Text = "";
            if (lbl_clgT.Text.ToLower() == "school")
            {
                pgtable.Visible = false;
                ugtable.Visible = false;
                pgaddmark.Visible = false;
                pgnewmark.Visible = false;
                pgmarkvalue.Visible = false;
                Marksgrid.Visible = false;
                educationdet.Visible = false;
                ExmarkstQua.Visible = false;
            }
            txtapplno.Focus();
            if (txtapplno.Enabled == false)
                txtapplname.Focus();
            IsEnquiry.Checked = false;
            trStfDet.Visible = false;
        }
        catch
        {
        }
    }
    public void txt_searchstudname_TextChanged(object sender, EventArgs e)
    {
        if (txt_searchstudname.Text != "")
        {
            txt_searchmobno.Text = "";
            txt_searchappno.Text = "";
            go();
        }
    }
    public void txt_searchappno_TextChanged(object sender, EventArgs e)
    {
        if (txt_searchappno.Text != "")
        {
            txt_searchmobno.Text = "";
            txt_searchstudname.Text = "";
            go();
        }
    }
    public void txt_searchmobno_TextChanged(object sender, EventArgs e)
    {
        if (txt_searchmobno.Text != "")
        {
            txt_searchappno.Text = "";
            txt_searchstudname.Text = "";
            go();
        }
    }
    public void go()
    {
        try
        {
            Printcontrol.Visible = false;
            int count = 0;
            string query = "";
            int i = 0;
            string addstream = "";
            string addgraud = "";
            string addbatch = "";
            string adddegree = "";
            string adddeg = "";
            string fromdate = Convert.ToString(txt_fromdate.Text);
            string todate = Convert.ToString(txt_todate.Text);
            for (i = 0; i < cbl_stream.Items.Count; i++)
            {
                if (cbl_stream.Items[i].Selected == true)
                {
                    string addstream1 = cbl_stream.Items[i].Value.ToString();
                    if (addstream == "")
                    {
                        addstream = addstream1;
                    }
                    else
                    {
                        addstream = addstream + "'" + "," + "'" + addstream1;
                    }
                }
            }
            for (i = 0; i < cbl_graduation.Items.Count; i++)
            {
                if (cbl_graduation.Items[i].Selected == true)
                {
                    string addgraud1 = cbl_graduation.Items[i].Value.ToString();
                    if (addgraud == "")
                    {
                        addgraud = addgraud1;
                    }
                    else
                    {
                        addgraud = addgraud + "'" + "," + "'" + addgraud1;
                    }
                }
            }
            addbatch = Convert.ToString(ddl_batch.SelectedItem.Value);
            for (i = 0; i < cbl_degree.Items.Count; i++)
            {
                if (cbl_degree.Items[i].Selected == true)
                {
                    string addstream1 = cbl_degree.Items[i].Value.ToString();
                    if (adddegree == "")
                    {
                        adddegree = addstream1;
                    }
                    else
                    {
                        adddegree = adddegree + "'" + "," + "'" + addstream1;
                    }
                }
            }
            for (i = 0; i < cbl_branch.Items.Count; i++)
            {
                if (cbl_branch.Items[i].Selected == true)
                {
                    string adddeg1 = cbl_branch.Items[i].Value.ToString();
                    if (adddeg == "")
                    {
                        adddeg = adddeg1;
                    }
                    else
                    {
                        adddeg = adddeg + "'" + "," + "'" + adddeg1;
                    }
                }
            }
            string community = "";
            for (i = 0; i < cbl_comm.Items.Count; i++)
            {
                if (cbl_comm.Items[i].Selected == true)
                {
                    string adddeg1 = cbl_comm.Items[i].Value.ToString();
                    if (community == "")
                    {
                        community = adddeg1;
                    }
                    else
                    {
                        community = community + "'" + "," + "'" + adddeg1;
                    }
                }
            }
            string Religion = "";
            for (i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    string adddeg1 = cbl_religion.Items[i].Value.ToString();
                    if (Religion == "")
                    {
                        Religion = adddeg1;
                    }
                    else
                    {
                        Religion = Religion + "'" + "," + "'" + adddeg1;
                    }
                }
            }
            string seattype = "";
            if (txt_seat.Enabled == true)
            {
                for (i = 0; i < cbl_seat.Items.Count; i++)
                {
                    if (cbl_seat.Items[i].Selected == true)
                    {
                        string adddeg1 = cbl_seat.Items[i].Value.ToString();
                        if (seattype == "")
                        {
                            seattype = adddeg1;
                        }
                        else
                        {
                            seattype = seattype + "'" + "," + "'" + adddeg1;
                        }
                    }
                }
            }
            string quota = "";//abarna
            if (txtQuota.Enabled == true)
            {
                for (i = 0; i < cblQuota.Items.Count; i++)
                {
                    if (cblQuota.Items[i].Selected == true)
                    {
                        string adddeg1 = cblQuota.Items[i].Value.ToString();
                        if (quota == "")
                        {
                            quota = adddeg1;
                        }
                        else
                        {
                            quota = quota + "'" + "," + "'" + adddeg1;
                        }
                    }
                }
            }
            string addsem = rs.GetSelectedItemsValueAsString(cbl_sem);
            //fromdate and to date            
            string[] frdate = fromdate.Split('/');
            if (frdate.Length == 3)
            {
                fromdate = frdate[1].ToString() + "/" + frdate[0].ToString() + "/" + frdate[2].ToString();
            }
            string[] tdate = todate.Split('/');
            if (tdate.Length == 3)
            {
                todate = tdate[1].ToString() + "/" + tdate[0].ToString() + "/" + tdate[2].ToString();
            }
            if (txt_searchstudname.Text == "" && txt_searchappno.Text == "" && txt_searchmobno.Text == "")
            {
                if (adddegree == "")
                {
                    lbl_errormsg.Visible = true;
                    lbl_errormsg.Text = "Kindly Select The Degree ";
                    cblcolumnorder0.Visible = false;
                    pcolumnorder0.Visible = false;
                    pheaderfilter0.Visible = false;
                    div_report.Visible = false;
                    Fpspread1.Visible = false;
                    lbl_norec.Text = "";
                    return;
                }
                if (addbatch == "")
                {
                    lbl_errormsg.Visible = true;
                    lbl_errormsg.Text = "Kindly Select The Batch Year ";
                    cblcolumnorder0.Visible = false;
                    pcolumnorder0.Visible = false;
                    pheaderfilter0.Visible = false;
                    div_report.Visible = false;
                    Fpspread1.Visible = false;
                    lbl_norec.Text = "";
                    return;
                }
                if (addgraud == "")
                {
                    lbl_errormsg.Visible = true;
                    lbl_errormsg.Text = "Kindly Select The Graduation";
                    cblcolumnorder0.Visible = false;
                    pcolumnorder0.Visible = false;
                    pheaderfilter0.Visible = false;
                    div_report.Visible = false;
                    Fpspread1.Visible = false;
                    lbl_norec.Text = "";
                    return;
                }
                if (adddeg == "")
                {
                    lbl_errormsg.Visible = true;
                    lbl_errormsg.Text = "Kindly Select The Branch ";
                    cblcolumnorder0.Visible = false;
                    pcolumnorder0.Visible = false;
                    pheaderfilter0.Visible = false;
                    div_report.Visible = false;
                    Fpspread1.Visible = false;
                    lbl_norec.Text = "";
                    return;
                }
            }
            Fpspread1.Visible = true;
            Fpspread1.Sheets[0].RowHeader.Visible = false;
            Fpspread1.CommandBar.Visible = false;
            Fpspread1.Sheets[0].AutoPostBack = true;
            Fpspread1.Sheets[0].RowCount = 0;
            Fpspread1.Sheets[0].ColumnHeader.RowCount = 1;
            Fpspread1.Sheets[0].ColumnCount = 1;
            FarPoint.Web.Spread.StyleInfo darkstyle2 = new FarPoint.Web.Spread.StyleInfo();
            darkstyle2.BackColor = ColorTranslator.FromHtml("#0CA6CA");
            darkstyle2.ForeColor = Color.Black;
            darkstyle2.HorizontalAlign = HorizontalAlign.Center;
            Fpspread1.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle2;
            FarPoint.Web.Spread.DoubleCellType txt = new FarPoint.Web.Spread.DoubleCellType();
            if (txt_searchstudname.Text != "")
            {
                //student name search
                //select a.remarks,a.sex,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, seattype,a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name from degree d,Department dt,Course C ,applyn a Where  d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isconfirm ='1' and a.college_code='13' and a.stud_name='vinotha' and ISNULL( Admission_Status,'0')='0' and ISNULL(selection_status,'0')='0'
                query = "select a.remarks,a.sex,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.parentf_mobile as Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, seattype,quota,a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name, convert(varchar(10),a.date_applied,103) as date_applied,a.stuper_id,convert(varchar(10),a.ApplBankRefDate,103) as date_paid  from degree d,Department dt,Course C ,applyn a Where  d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isnull( isconfirm,'0') ='1'  and a.college_code='" + ddlcollege.SelectedItem.Value + "' and a.stud_name like '%" + txt_searchstudname.Text + "%'   ";
                if (ddlreportTye.SelectedIndex == 1)
                {
                    query = query + " and ISNULL( Admission_Status,'0')='0' and ISNULL(selection_status,'0')='1'";
                }
                else if (ddlreportTye.SelectedIndex == 2)
                {
                    query = query + " and ISNULL( Admission_Status,'0')='1' and ISNULL(selection_status,'0')='1'";
                }
            }
            else if (txt_searchappno.Text != "")
            {
                query = "select a.remarks,a.sex,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.parentf_mobile as Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, seattype,quota,a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name, convert(varchar(10),a.date_applied,103) as date_applied,a.stuper_id,convert(varchar(10),a.ApplBankRefDate,103) as date_paid  from degree d,Department dt,Course C ,applyn a Where  d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isnull( isconfirm,'0') ='1'  and a.college_code='" + ddlcollege.SelectedItem.Value + "' and a.app_formno='" + txt_searchappno.Text + "'   ";
                if (ddlreportTye.SelectedIndex == 1)
                {
                    query = query + " and ISNULL( Admission_Status,'0')='0' and ISNULL(selection_status,'0')='1'";
                }
                else if (ddlreportTye.SelectedIndex == 2)
                {
                    query = query + " and ISNULL( Admission_Status,'0')='1' and ISNULL(selection_status,'0')='1'";
                }
            }
            else if (txt_searchmobno.Text != "")
            {
                query = "select a.remarks,a.sex,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.parentf_mobile as Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, seattype,quota,a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name, convert(varchar(10),a.date_applied,103) as date_applied,a.stuper_id,convert(varchar(10),a.ApplBankRefDate,103) as date_paid  from degree d,Department dt,Course C ,applyn a Where  d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isnull( isconfirm,'0') ='1'  and a.college_code='" + ddlcollege.SelectedItem.Value + "' and a.parentf_mobile='" + txt_searchmobno.Text + "' ";
                if (ddlreportTye.SelectedIndex == 1)
                {
                    query = query + " and ISNULL( Admission_Status,'0')='0' and ISNULL(selection_status,'0')='1'";
                }
                else if (ddlreportTye.SelectedIndex == 2)
                {
                    query = query + " and ISNULL( Admission_Status,'0')='1' and ISNULL(selection_status,'0')='1'";
                }
            }
            else
            {
                //applied
                string paidcondition = "";
                //if (rdb_paid.Checked == true)
                //    paidcondition = " and isnull( isconfirm,'0') ='1'";
                //if (rdb_notpaid.Checked == true)
                //    paidcondition = " and isnull( isconfirm,'0')='0'";
                if (addsem.Trim() != string.Empty)
                {
                    addsem = " and a.current_semester in('" + addsem + "') ";
                }
                query = "select a.remarks,a.sex,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no,a.parentf_mobile as Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, seattype,quota,a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name, convert(varchar(10),a.date_applied,103) as date_applied,a.stuper_id,convert(varchar(10),a.ApplBankRefDate,103) as date_paid  from degree d,Department dt,Course C ,applyn a Where  d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id " + paidcondition + " and a.degree_code in('" + adddeg + "')and a.Batch_Year in('" + addbatch + "')  and a.college_code='" + ddlcollege.SelectedItem.Value + "' " + addsem + " and a.college_code=d.college_code ";
                if (ddlreportTye.SelectedIndex == 3)
                {
                    query = "";
                    query = " select a.remarks,a.sex,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion, a.app_no, a.parentf_mobile as Student_Mobile,a.Alternativedegree_code,a.stud_name,a.app_formno, seattype,quota,a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id ,Dt.Dept_Name, convert(varchar(10),a.date_applied,103) as date_applied,a.stuper_id,convert(varchar(10),a.ApplBankRefDate,103) as date_paid  from degree d,Department dt,Course C ,applyn a,registration r Where r.app_no=a.app_no and  d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isnull( isconfirm,'0') ='1' and r.degree_code in('" + adddeg + "')and r.Batch_Year in('" + addbatch + "')  and r.college_code='" + ddlcollege.SelectedItem.Value + "' " + addsem + " and r.college_code=d.college_code and r.degree_code=a.degree_code ";
                }
                if (community.Trim() != "") //religion,community 
                {
                    query = query + " and community in ('" + community + "')";
                }
                if (Religion.Trim() != "")
                {
                    query = query + " and religion in ('" + Religion + "')";
                }
                if (seattype.Trim() != "")
                {
                    query = query + "  and seattype in ('" + seattype + "')";
                }
                if (quota.Trim() != "")//abarna
                {
                    query = query + "  and quota in ('" + quota + "')";
                }
                if (ddlreportTye.SelectedIndex == 0)
                {
                    query = query + " and isconfirm='1'";//and ISNULL( Admission_Status,'0')='0' and ISNULL(selection_status,'0')='0' and  barath 23.02.17
                    if (cbl_datewise.Checked == true)//if (fromdate != "" && todate != "")
                    {
                        query = query + " and  A.date_applied between '" + fromdate + "' and '" + todate + "'";
                    }
                }
                else if (ddlreportTye.SelectedIndex == 1)
                {
                    query = query + " and ISNULL( Admission_Status,'0')='0' and ISNULL(selection_status,'0')='1'";
                    if (cbl_datewise.Checked == true)//if (fromdate != "" && todate != "")
                    {
                        query = query + " and  A.AdmitedDate between '" + fromdate + "' and '" + todate + "'";
                    }
                }
                else if (ddlreportTye.SelectedIndex == 2)
                {
                    query = query + " and ISNULL( Admission_Status,'0')='1' and ISNULL(selection_status,'0')='1' and a.app_no not in( select app_no from Registration a where  a.degree_code in('" + adddeg + "')and a.Batch_Year in('" + addbatch + "')  and a.college_code='" + ddlcollege.SelectedItem.Value + "' " + addsem + ")";
                    if (cbl_datewise.Checked == true)//if (fromdate != "" && todate != "")
                    {
                        query = query + " and  A.AdmitedDate between '" + fromdate + "' and '" + todate + "'";
                    }
                }
                else if (ddlreportTye.SelectedIndex == 3)
                {
                    query = query + " and ISNULL( Admission_Status,'0')='1' and ISNULL(selection_status,'0')='1' ";
                    if (cbl_datewise.Checked == true)
                    {
                        query = query + " and  A.AdmitedDate between '" + fromdate + "' and '" + todate + "'";
                    }
                }
                //query = query + "order by isnull (securedmark,0) desc";
                query = query + " order by c.Course_Id,d.Degree_Code";
            }
            ds = d2.select_method_wo_parameter(query, "text");
            if (query == "")
            {
                Fpspread1.Sheets[0].Visible = false;
                Fpspread1.Visible = false;
                cblcolumnorder0.Visible = false;
                div_report.Visible = false;
                pcolumnorder0.Visible = false;
                pheaderfilter0.Visible = false;
                lbl_errormsg.Visible = true;
                lbl_norec.Text = "";
                // div1.Visible = false;
                lbl_errormsg.Text = "Kindly Select All List ";
                return;
            }
            else
            {
                if (query != "")
                {
                    if (ds.Tables[0].Rows.Count == 0)
                    {
                        Fpspread1.Visible = false;
                        cblcolumnorder0.Visible = false;
                        div_report.Visible = false;
                        pheaderfilter0.Visible = false;
                        pcolumnorder0.Visible = false;
                        //   div1.Visible = false;
                        lbl_norec.Text = "";
                        lbl_errormsg.Visible = true;
                        lbl_errormsg.Text = "No Records Found";
                        return;
                    }
                    else
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            lbl_errormsg.Visible = false;
                            for (i = 0; i < cblcolumnorder0.Items.Count; i++)
                            {
                                if (cblcolumnorder0.Items[i].Selected == true)
                                {
                                    cblcolumnorder0.Items[5].Text = lbl_degreeT.Text;
                                    cblcolumnorder0.Items[6].Text = lbl_branchT.Text + " (Option1)";
                                    cblcolumnorder0.Items[7].Text = lbl_branchT.Text + " (Option2)";
                                    hat.Add(cblcolumnorder0.Items[i].Text, cblcolumnorder0.Items[i].Value);
                                    string colvalue = cblcolumnorder0.Items[i].Text;
                                    if (ItemList_item.Contains(colvalue) == false)
                                    {
                                        ItemList_item.Add(cblcolumnorder0.Items[i].Text);
                                    }
                                    tborder0.Text = "";
                                    for (int j = 0; j < ItemList_item.Count; j++)
                                    {
                                        tborder0.Text = tborder0.Text + ItemList_item[j].ToString();
                                        tborder0.Text = tborder0.Text + "(" + (j + 1).ToString() + ")  ";
                                    }
                                }
                                cblcolumnorder0.Items[0].Enabled = false;
                            }
                            if (ItemList_item.Count == 0)
                            {
                                for (i = 0; i < 3; i++)
                                {
                                    cblcolumnorder0.Items[i].Selected = true;
                                    hat.Add(cblcolumnorder0.Items[i].Text, cblcolumnorder0.Items[i].Value);
                                    string colvalue = cblcolumnorder0.Items[i].Text;
                                    if (ItemList_item.Contains(colvalue) == false)
                                    {
                                        ItemList_item.Add(cblcolumnorder0.Items[i].Text);
                                    }
                                    tborder0.Text = "";
                                    for (int j = 0; j < ItemList_item.Count; j++)
                                    {
                                        tborder0.Text = tborder0.Text + ItemList_item[j].ToString();
                                        tborder0.Text = tborder0.Text + "(" + (j + 1).ToString() + ")  ";
                                    }
                                }
                            }
                            Fpspread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
                            Fpspread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
                            Fpspread1.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
                            Fpspread1.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                            Fpspread1.Sheets[0].PageSize = Fpspread1.Sheets[0].RowCount;
                            for (int j = 0; j < ItemList_item.Count; j++)
                            {
                                string value1 = ItemList_item[j].ToString();
                                int a = value1.Length;
                                Fpspread1.Sheets[0].ColumnCount++;
                                Fpspread1.Sheets[0].ColumnHeader.Cells[Fpspread1.Sheets[0].ColumnHeader.RowCount - 1, Fpspread1.Sheets[0].ColumnCount - 1].Text = ItemList_item[j].ToString();
                                Fpspread1.Sheets[0].ColumnHeader.Cells[Fpspread1.Sheets[0].ColumnHeader.RowCount - 1, Fpspread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                                Fpspread1.Sheets[0].ColumnHeader.Cells[Fpspread1.Sheets[0].ColumnHeader.RowCount - 1, Fpspread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                                Fpspread1.Sheets[0].ColumnHeader.Cells[Fpspread1.Sheets[0].ColumnHeader.RowCount - 1, Fpspread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                            }
                            Fpspread1.Sheets[0].RowCount = 0;
                            DataView dv = new DataView();
                            for (i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                Fpspread1.Sheets[0].RowCount++;
                                count++;
                                Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 0].Text = count.ToString();
                                Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(ds.Tables[0].Rows[i]["app_no"]);
                                Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                                int c = 0;
                                if (ItemList_item.Count > 0 && hat.Count > 0)
                                {
                                    FarPoint.Web.Spread.TextCellType txtTp = new FarPoint.Web.Spread.TextCellType();
                                    if (ItemList_item.Count == hat.Count)
                                    {
                                        for (int j = 0; j < ItemList_item.Count; j++)
                                        {
                                            string k = Convert.ToString(ItemList_item[j].ToString());
                                            string names = Convert.ToString(hat[k].ToString());
                                            c++;
                                            string val = ds.Tables[0].Rows[i][names].ToString();
                                            Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].CellType = txtTp;
                                            if (names == "Alternativedegree_code")
                                            {
                                                if (val != "")
                                                {
                                                    string altercourse = d2.GetFunction("select distinct c.Course_Name+'-'+ dt.Dept_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddlcollege.SelectedItem.Value + "' and d.Degree_Code='" + val + "' ");
                                                    if (altercourse != "0")
                                                    {
                                                        Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = altercourse;
                                                    }
                                                }
                                                else
                                                {
                                                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = "";
                                                }
                                            }
                                            else if (names == "seattype")
                                            {
                                                if (val != "")
                                                {
                                                    string altercourse = d2.GetFunction(" select TextVal from TextValTable  where TextCode ='" + val + "' ");
                                                    if (altercourse != "0")
                                                    {
                                                        Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = altercourse;
                                                    }
                                                }
                                                else
                                                {
                                                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = "";
                                                }
                                            }
                                            else if (names == "quota")
                                            {
                                                if (val != "")
                                                {
                                                    string altercourse = d2.GetFunction("select distinct quotaname from stu_quotaseetinges where quotaid ='" + val + "' ");
                                                    if (altercourse != "0")
                                                    {
                                                        Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = altercourse;
                                                    }
                                                }
                                                else
                                                {
                                                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = "";
                                                }
                                            }
                                            else if (names == "sex")
                                            {
                                                if (val == "0")
                                                {
                                                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = "Male";
                                                }
                                                else
                                                {
                                                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = "Female";
                                                }
                                            }
                                            else if (names == "PassYear")
                                            {
                                                if (val == "0")
                                                {
                                                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = "";
                                                }
                                                else
                                                {
                                                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = ds.Tables[0].Rows[i][names].ToString();
                                                }
                                            }
                                            else
                                            {
                                                Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Text = ds.Tables[0].Rows[i][names].ToString();
                                                if (names == "stud_name")
                                                {
                                                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Column.Width = 200;
                                                }
                                                if (names == "Dept_Name")
                                                {
                                                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Column.Width = 200;
                                                }
                                                if (names == "app_formno")
                                                {
                                                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Column.Width = 150;
                                                }
                                            }
                                            Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Font.Name = "Book Antiqua";
                                            Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].Font.Size = FontUnit.Medium;
                                            Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, c].HorizontalAlign = HorizontalAlign.Left;
                                        }
                                    }
                                }
                            }
                            Fpspread1.Sheets[0].Columns[1].CellType = txt;
                            Fpspread1.Sheets[0].PageSize = Fpspread1.Sheets[0].RowCount;
                            //Fpspread1.Width = 900;
                            //Fpspread1.Height = 160;
                            cblcolumnorder0.Visible = true;
                            pcolumnorder0.Visible = true;
                            pheaderfilter0.Visible = true;
                            div_report.Visible = true;
                            // div1.Visible = true;
                            Fpspread1.Visible = true;
                            lbl_errormsg.Text = "";
                            lbl_norec.Text = "";
                            //Fpspread1.Sheets[0].SetColumnMerge(3, FarPoint.Web.Spread.Model.MergePolicy.Always);
                            //Fpspread1.Sheets[0].SetColumnMerge(4, FarPoint.Web.Spread.Model.MergePolicy.Always);
                            //Fpspread1.Sheets[0].SetColumnMerge(5, FarPoint.Web.Spread.Model.MergePolicy.Always);
                        }
                    }
                }
            }
        }
        catch
        {
        }
    }
    public void btn_popclose_Click(object sender, EventArgs e)
    {
        popview.Visible = false;
    }
    protected void applicationNoRights()
    {
        try
        {
            string value = d2.GetFunction("select value from Master_Settings where settings ='Application No Rights' and usercode ='" + usercode + "'");
            if (value == "1")
            {
                appnovalue = "1";
            }
            else
            {
                appnovalue = "0";
            }
        }
        catch { }
    }
    protected void applicationNoRightsacr()
    {
        try
        {
            string value = d2.GetFunction("select value from Master_Settings where settings ='Add Academic year' and usercode ='" + usercode + "'");
            if (value == "1")
            {
                appnovalueacr = "1";
                TxtAcrApplno.Visible = true;
            }
            else
            {
                appnovalueacr = "0";
                TxtAcrApplno.Visible = false;
            }
        }
        catch { }
    }
    protected void AcdYear()
    {
        int year = Convert.ToInt32(DateTime.Now.Year);
        // ddlyear.Items.Add(Convert.ToString(year));
        lblyear.Text = Convert.ToString(year);
    }
    public void loadcollege()
    {
        try
        {
            ds.Clear();
            //ds = d2.BindCollege();
            string group_code = Session["group_code"].ToString();
            string columnfield = "";
            if (group_code.Contains(';'))
            {
                string[] group_semi = group_code.Split(';');
                group_code = group_semi[0].ToString();
            }
            if ((group_code.ToString().Trim() != "") && (Session["single_user"].ToString() != "1" && Session["single_user"].ToString() != "true" && Session["single_user"].ToString() != "TRUE" && Session["single_user"].ToString() != "True"))
            {
                columnfield = " and group_code='" + group_code + "'";
            }
            else
            {
                columnfield = " and user_code='" + Session["usercode"] + "'";
            }
            Hashtable hat1 = new Hashtable();
            hat1.Clear();
            hat1.Add("column_field", columnfield.ToString());
            ds = d2.select_method("bind_college", hat1, "sp");
            ddlclg.Items.Clear();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlclg.DataSource = ds;
                ddlclg.DataTextField = "collname";
                ddlclg.DataValueField = "college_code";
                ddlclg.DataBind();
            }
        }
        catch
        { }
    }
    public void loadReligion()
    {
        try
        {
            ddlregl.Items.Clear();
            //  string reliquery = "SELECT Distinct religion,T.TextVal  FROM applyn A,Registration R,TextValTable T WHERE A.app_no=R.App_No AND T.TextCode =A.religion AND R.college_code ='" + clgcode + "' and TextCriteria='relig'";
            string reliquery = " select TextCode,textval from textvaltable where TextCriteria like '%relig%' and college_code='" + ddlclg.SelectedItem.Value + "' and textval<>''and textval<>'-'  ";
            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(reliquery, "Text");
            if (ds1.Tables.Count > 0)
            {
                if (ds1.Tables[0].Rows.Count > 0)
                {
                    ddlregl.DataSource = ds1;
                    ddlregl.DataTextField = "TextVal";
                    ddlregl.DataValueField = "TextCode";
                    ddlregl.DataBind();
                }
            }
        }
        catch
        { }
    }
    public void loadCommunity()
    {
        try
        {
            // string selq = "SELECT Distinct community,T.TextVal  FROM applyn A,Registration R,TextValTable T WHERE A.app_no=R.App_No AND T.TextCode =A.community  AND TextVal<>''AND R.college_code ='" + clgcode + "'";
            string selq = " select TextCode,textval from textvaltable where TextCriteria like '%comm%' and college_code='" + ddlclg.SelectedItem.Value + "' and textval<>'' and textval<>'-'  order by textval ";
            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(selq, "Text");
            if (ds1.Tables.Count > 0)
            {
                if (ds1.Tables[0].Rows.Count > 0)
                {
                    ddlcomm.DataSource = ds1;
                    ddlcomm.DataTextField = "TextVal";
                    ddlcomm.DataValueField = "TextCode";
                    ddlcomm.DataBind();
                    ddlcomm.SelectedIndex = ddlcomm.Items.IndexOf(ddlcomm.Items.FindByText("BCM"));
                }
            }
        }
        catch
        {
        }
    }
    protected void educationLevel()
    {
        try
        {
            ddlcourse.Items.Clear();
            string clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
            string SelectQ = "select distinct Edu_Level,Priority  from course  where  college_code='" + clgcode + "'  order by Edu_Level desc";
            ds.Clear();
            ds = d2.select_method_wo_parameter(SelectQ, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlcourse.DataSource = ds;
                ddlcourse.DataTextField = "Edu_Level";
                ddlcourse.DataValueField = "Edu_Level";
                ddlcourse.DataBind();
            }
        }
        catch { }
    }
    protected void loadChioce()
    {
        try
        {
            ddlchoice1.Items.Clear();
            string clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
            string educlevel = Convert.ToString(ddlcourse.SelectedItem.Value);
            string SelectQ = "select distinct  dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + clgcode + "' "; //and Edu_Level='" + educlevel + "' ";
            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(SelectQ, "Text");
            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
            {
                ddlchoice1.DataSource = ds1;
                ddlchoice1.DataTextField = "name";
                ddlchoice1.DataValueField = "Degree_Code";
                ddlchoice1.DataBind();
            }
            string courseid = Convert.ToString(ddlchoice1.SelectedItem.Value);
            if (appnovalue == "1")
            {
                //txtapplno.Text = genearateApplNo(clgcode, courseid);
                //txtapplno.Enabled = false;
                int format = 0;
                txtapplno.Text = generateApplNo(ddlclg.SelectedValue, Convert.ToInt32(courseid), educlevel, "", "", ddlBatch_year.SelectedValue, out format); //genearateApplNo(clgcode, courseid);
                //if (txtapplno.Text.Trim() == "")
                //{
                //    //txtapplno.Enabled = true;
                //}
                //else
                //{
                //    txtapplno.Enabled = false;
                //}
            }
            else
            {
                txtapplno.Enabled = true;
            }
        }
        catch { }
    }
    protected void loadChioce2()
    {
        try
        {
            ddlchoice2.Items.Clear();
            string clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
            string educlevel = Convert.ToString(ddlcourse.SelectedItem.Value);
            string SelectQ = "select distinct  dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + clgcode + "' and Edu_Level='" + educlevel + "'";
            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(SelectQ, "Text");
            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
            {
                ddlchoice2.DataSource = ds1;
                ddlchoice2.DataTextField = "name";
                ddlchoice2.DataValueField = "Degree_Code";
                ddlchoice2.DataBind();
                //for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                //{
                //    if (ds1.Tables[0].Rows[i][2].ToString().Trim() != ddlchoice1.SelectedItem.Value)
                //    {
                //        ListItem ls = new ListItem(ds1.Tables[0].Rows[i][0].ToString().Trim(), ds1.Tables[0].Rows[i][2].ToString().Trim());
                //        ddlchoice2.Items.Add(ls);
                //    }
                //}
                ddlchoice2.Items.Insert(0, new ListItem("Select", "0"));
            }
        }
        catch { }
    }
    protected void ddlclg_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddlclg.Items.Count > 0)
        {
            clgcode = Convert.ToString(ddlclg.SelectedItem.Value);//abarna
        }
        educationLevel();
        loadChioce();
        loadChioce2();
        checkFun();
        loadCommunity();
        loadReligion();
        txtapplno.Focus();
    }
    protected void ddlcourse_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        string clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
        string courseid = Convert.ToString(ddlchoice1.SelectedItem.Value);
        string course = Convert.ToString(ddlcourse.SelectedItem.Text);
        //if (course.Trim().ToUpper() == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
        //{
        //    edut.Visible = true;
        //    edutpg.Visible = false;
        //    //9/5/2016
        //    cbsamclg.Visible = false;
        //    cbsamclg.Checked = false;
        //    lblsclname.Text = "School Name";
        //    lblscladd.Text = "School Address";
        //    txtsclname.Enabled = true;
        //    txtscladd.Enabled = true;
        //    txtsclname.Text = "";
        //    txtscladd.Text = "";
        //    txtsclname.Attributes.Add("placeholder", "School Name");
        //    txtscladd.Attributes.Add("placeholder", "School Address");
        //}
        //else
        //{
            edut.Visible = false;
            edutpg.Visible = false;
            LoadUniversity();
            LoadPgcourse();
            //9/5/2016
            cbsamclg.Visible = true;
            cbsamclg.Checked = false;
            lblsclname.Text = "College Name";
            lblscladd.Text = "College Address";
            txtsclname.Enabled = true;
            txtscladd.Enabled = true;
            txtsclname.Text = "";
            txtscladd.Text = "";
            txtsclname.Attributes.Add("placeholder", "College Name");
            txtscladd.Attributes.Add("placeholder", "College Address");
            lbltan.Visible = false;
            txttanmark.Visible = false;
            txttanmark.Text = "";
            if (course.Trim().ToUpper() == "PG")
            {
                lbl_cource.Text = "UG Course";
                lbl_totalpercentage.Text = "Total Percentage Obtained in UG";
                txtugper.Attributes.Add("placeholder", "Percentage UG");
            }
            if (course.Trim().ToUpper() == "M.PHIL")
            {
                lbl_cource.Text = "PG Course";
                lbl_totalpercentage.Text = "Total Percentage Obtained in PG";
                txtugper.Attributes.Add("placeholder", "Percentage PG");
            }
        //}
        loadChioce();
        loadChioce2();
        ddlchoice1.Focus();
    }
    protected void LoadPgcourse()
    {
        try
        {
            DataSet dspg = new DataSet();
            ddlugcourse.Items.Clear();
            string clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
            string educlevel = Convert.ToString(ddlcourse.SelectedItem.Value);
            string SelectQ = "select TextCode,textval from textvaltable where TextCriteria='cours'  and college_code='" + clgcode + "' ";
            dspg.Clear();
            dspg = d2.select_method_wo_parameter(SelectQ, "Text");
            if (dspg.Tables.Count > 0 && dspg.Tables[0].Rows.Count > 0)
            {
                ddlugcourse.DataSource = dspg;
                ddlugcourse.DataTextField = "textval";
                ddlugcourse.DataValueField = "TextCode";
                ddlugcourse.DataBind();
                ddlugcourse.Items.Add("Others");
            }
        }
        catch { }
    }
    protected void LoadUniversity()
    {
        DataSet dsu = new DataSet();
        string clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
        //string SelectQ = "select TextCode,textval from TextValTable where TextCriteria ='unive' and TextCriteria2 ='unive1' and college_code='" + clgcode + "'";
        string SelectQ = "select TextCode,textval from TextValTable where TextCriteria ='unive' and college_code='" + clgcode + "'";
        dsu.Clear();
        dsu = d2.select_method_wo_parameter(SelectQ, "Text");
        if (dsu.Tables.Count > 0 && dsu.Tables[0].Rows.Count > 0)
        {
            ddlpg.DataSource = dsu;
            ddlpg.DataTextField = "textval";
            ddlpg.DataValueField = "TextCode";
            ddlpg.DataBind();
            ddlpg.Items.Add("Others");
        }
    }
    protected void cbsamclg_OnCheckedChanged(object sender, EventArgs e)
    {
        if (cbsamclg.Checked == true)
        {
            string clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
            string SelectQ = "select collname,(address1+'-'+address2+'-'+address3) as address from collinfo where college_code='13'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(SelectQ, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                txtsclname.Text = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                txtscladd.Text = Convert.ToString(ds.Tables[0].Rows[0]["address"]);
                txtsclname.Enabled = false;
                txtscladd.Enabled = false;
            }
            else
            {
                txtsclname.Text = "";
                txtscladd.Text = "";
                txtsclname.Enabled = true;
                txtscladd.Enabled = true;
            }
            // cbsamclg.Focus();
        }
        else
        {
            txtsclname.Text = "";
            txtscladd.Text = "";
            txtsclname.Enabled = true;
            txtscladd.Enabled = true;
            // cbsamclg.Focus();
        }
        cbsamclg.Focus();
    }
    protected void ddlchoice1_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        string clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
        string courseid = Convert.ToString(ddlchoice1.SelectedItem.Value);
        //  txtapplno.Text = genearateApplNo(clgcode, courseid);
        loadChioce2();
        ddlchoice2.Focus();
        if (ddlchoice1.Items.Count > 0)
        {
            string coursename = Convert.ToString(ddlchoice1.SelectedItem.Text);
            if (coursename != "")
            {
                string[] splitC = coursename.Split('-');
                if (splitC.Length > 1)
                {
                    string Cname = splitC[1].ToString();
                    if (Cname.Trim().ToUpper() == "MCA")
                    {
                        lbltan.Visible = true;
                        txttanmark.Visible = true;
                    }
                    else if (Cname.Trim().ToUpper() == "MBA")
                    {
                        lbltan.Visible = true;
                        txttanmark.Visible = true;
                    }
                    else
                    {
                        lbltan.Visible = false;
                        txttanmark.Visible = false;
                        txttanmark.Text = "";
                    }
                }
            }
        }
    }
    public void ddlchoice1_SelectedIndexChanged(object sender, EventArgs e)
    {
        string courseid = Convert.ToString(ddlchoice1.SelectedItem.Value);
        if (appnovalue == "1")
        {
            int format = 0;
            txtapplno.Text = generateApplNo(collegecode, Convert.ToInt32(courseid), "", "", "", ddlBatch_year.SelectedValue, out format);
        }
        else
        {
            txtapplno.Enabled = true;
        }
        bindnewsem();
        ddlchoice1.Focus();
    }
    protected void ddlregl_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            //string relig = Convert.ToString(ddlregl.SelectedItem.Text);
            //if (relig.Trim() == "MUSLIM")
            //{
            //    // ddlcomm.SelectedItem.Text = "BCM";
            //    ddlcomm.SelectedIndex = ddlcomm.Items.IndexOf(ddlcomm.Items.FindByText("BCM"));
            //}
            //else
            //{
            //    loadCommunity();
            //}
            //ddlcomm.Focus();
        }
        catch { }
    }
    protected void btnsave_OnClick(object sender, EventArgs e)
    {
        try
        {
            bool flag = false;
            string year = "";
            string clgcode = "";
            string applno = "";
            string appldate = "";
            string choice1 = "";
            string choice2 = "";
            string applname = "";
            string religion = "";
            string community = "";
            string boardvalue = "";
            string mnth = "";
            string yearval = "";
            string mblno = "";
            int ins = 0;
            string courname = "";
            string pgmajorcode = "";
            //9/5/2015
            string tancetmark = "";
            string tancolnam = "";
            string tancolval = "";
            string tancolnam1 = "";
            string tancolval1 = "";
            if (ddlcourse.Items.Count > 0)
            {
                courname = Convert.ToString(ddlcourse.SelectedItem.Text);
            }
            //if (ddlyear.Items.Count > 0)
            //{
            //    year = Convert.ToString(ddlyear.SelectedItem.Value);
            //}
            applicationNoRightsacr();
            // genearateApplNo(ddlclg.SelectedItem.Value,);
            year = Convert.ToString(ddlBatch_year.SelectedItem.Text.Trim());
            if (ddlclg.Items.Count > 0)
            {
                clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
            }
            string ch2code = "";
            string checkno = "";
            string a_no = "";
            string courseid = Convert.ToString(ddlchoice1.SelectedItem.Value);
            if (appnovalue == "1")
            {
                int format = 0;
                a_no = generateApplNo(clgcode, Convert.ToInt32(courseid), "", "", "", ddlBatch_year.SelectedValue, out format);//genearateApplNo(clgcode, courseid);
            }
            if (a_no.Trim() == "" || a_no.Trim() == "0")
            {
            }
            else
            {
                txtapplno.Text = a_no;
            }
            applno = Convert.ToString(txtapplno.Text.Trim());
            if (appnovalueacr.Trim() == "1")
            {
                applno = Convert.ToString(TxtAcrApplno.Text.Trim()) + applno;
                checkno = d2.GetFunction("select app_formno from applyn where app_formno='" + applno + "'");
                if (checkno != "0")
                {
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Application No Already Exist";
                    return;
                }
            }
            else
            {
                checkno = d2.GetFunction("select app_formno from applyn where app_formno='" + applno + "'");
                if (checkno != "0")
                {
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Application No Already Exist";
                    return;
                }
            }
            appldate = Convert.ToString(txtappldate.Text);
            string[] strdatet = appldate.Split('/');
            if (strdatet.Length > 0)
            {
                string bkdt = strdatet[0].ToString();
                string bkmn = strdatet[1].ToString();
                string bkyr = strdatet[2].ToString();
                appldate = bkmn + "/" + bkdt + "/" + bkyr;
            }
            if (ddlchoice1.Items.Count > 0)
            {
                choice1 = Convert.ToString(ddlchoice1.SelectedItem.Value);
                //9/5/2015
                if (txttanmark.Visible)
                {
                    tancetmark = Convert.ToString(txttanmark.Text);
                    tancolnam = ",tancet_mark";
                    tancolval = ",'" + tancetmark + "'";
                    tancolnam1 = ",tancet_mark=";
                    tancolval1 = "'" + tancetmark + "'";
                }
                else
                    tancetmark = "";
            }
            if (ddlchoice2.Items.Count > 0)
            {
                if (ddlchoice2.SelectedItem.Value != "0")
                {
                    ch2code = " ,Alternativedegree_code";
                    choice2 = Convert.ToString(ddlchoice2.SelectedItem.Value);
                    choice2 = ",'" + choice2 + "'";
                }
            }
            string Seattype = Convert.ToString(ddl_seattype.SelectedItem.Text);
            if (Seattype.Trim() != "Select")
            {
                Seattype = Convert.ToString(ddl_seattype.SelectedItem.Value);
            }
            else
            {
                Seattype = "0";
            }
            string choicedegreecode = Convert.ToString(ddlchoice2.SelectedItem.Value);
            applname = Convert.ToString(txtapplname.Text.Trim());
            string gender = "";
            gender = Convert.ToString(ddlsex.SelectedItem.Value);
            //if (rbmale.Checked == true)
            //    gender = "0";
            //else
            //    gender = "1";
            if (ddlregl.Items.Count > 0)
            {
                religion = Convert.ToString(ddlregl.SelectedItem.Value);
            }
            string ComValue = "";
            if (ddlcomm.Items.Count > 0)
            {
                community = Convert.ToString(ddlcomm.SelectedItem.Value);
                ComValue = Convert.ToString(ddlcomm.SelectedItem.Text);
            }
            string sclname = Convert.ToString(txtsclname.Text.Trim());
            string scladd = Convert.ToString(txtscladd.Text.Trim());
            //scholl educational detail
            string board = "";
            string totmark = "";
            string univcode = "";
            string coursname = "";
            string majorcode = "";
            string percent = "";
            if (courname.Trim().ToUpper() == "UG")
            {
                if (rbhsc.Checked == true)
                    boardvalue = subjectcode("cours", "HSC");
                else if (rbcbse.Checked == true)
                    boardvalue = subjectcode("cours", "CBSE");
                else if (rbother.Checked == true)
                {
                    boardvalue = subjectcode("cours", txtotherscl.Text);
                }
                if (rbmarkmark.Checked == true)
                    totmark = Convert.ToString(txtmark.Text.Trim());
                else
                    totmark = Convert.ToString(txtgrade.Text.Trim());
                if (ddlmonth.SelectedItem.Text != "Month")
                {
                    mnth = Convert.ToString(ddlmonth.SelectedItem.Text);
                }
                if (ddlyear.SelectedItem.Text != "Year")
                {
                    yearval = Convert.ToString(ddlyear.SelectedItem.Text);
                }
            }
            else
            {
                if (ddlpg.Items.Count > 0)
                {
                    // univcode = Convert.ToString(ddlpg.SelectedItem.Value);
                    if (ddlpg.Items.Count > 0)
                    {
                        if (ddlpg.SelectedItem.Text.Trim().ToUpper() != "OTHERS")
                        {
                            coursname = Convert.ToString(ddlpg.SelectedItem.Value).Trim();
                            univcode = coursname;
                        }
                        else
                        {
                            string uniname = Convert.ToString(txtuniname.Text);
                            if (uniname != "")
                                univcode = UniversityCode(uniname);
                        }
                    }
                    //                    UniversityCode
                    if (ddlugcourse.Items.Count > 0)
                    {
                        if (ddlugcourse.SelectedItem.Text.Trim().ToUpper() != "OTHERS")
                        {
                            coursname = Convert.ToString(ddlugcourse.SelectedItem.Value).Trim();
                            boardvalue = coursname;
                        }
                        else
                        {
                            string ugname = Convert.ToString(txtugcourse.Text);
                            if (ugname != "")
                                boardvalue = subjectcode("cours", ugname);
                        }
                    }
                    if (txtugmaj.Text != "")
                    {
                        majorcode = SubjectCoursecode(txtugmaj.Text);
                    }
                    percent = Convert.ToString(txtugper.Text);
                    totmark = percent;
                    if (ddlugmnth.SelectedItem.Text != "Month")
                    {
                        mnth = Convert.ToString(ddlugmnth.SelectedItem.Text);
                    }
                    if (ddlugyr.SelectedItem.Text != "Year")
                    {
                        yearval = Convert.ToString(ddlugyr.SelectedItem.Text);
                    }
                }
            }
            string StudentType = "";
            if (ddlMode.SelectedItem.Text != "Select")
            {
                StudentType = Convert.ToString(ddlMode.SelectedItem.Value);
            }
            else
            {
                StudentType = "0";
            }
            string remark = Convert.ToString(txtrm.Text.Trim());
            mblno = Convert.ToString(txtmblno.Text.Trim());
            string isenquiry = "1";
            if (IsEnquiry.Checked)
            {
                isenquiry = "0";
            }
            if (year != "" && clgcode != "" && applno != "" && appldate != "" && choice1 != "" && applname != "" && gender != "" && religion != "" && community != "" && totmark != "" && mnth != "" && yearval != "" && boardvalue != "" && mblno != "")
            {
                //applyn
                string InsertQ = "";
                string appno = "";
                InsertQ = "insert into applyn (batch_year,college_code,app_formno,date_applied,degree_code" + ch2code + ",stud_name,sex,religion,community,remarks,Student_Mobile,IsConfirm,current_semester,admission_status,seattype,mode)values('" + year + "','" + clgcode + "','" + applno + "','" + appldate + "','" + choice1 + "'" + choice2 + ",'" + applname + "','" + gender + "','" + religion + "','" + community + "','" + remark + "','" + mblno + "','" + isenquiry + "','" + ddlSemester1.SelectedItem.Value + "','0','" + Seattype + "','" + StudentType + "')";
                int insert = d2.update_method_wo_parameter(InsertQ, "Text");
                //appno
                appno = d2.GetFunction("select app_no from applyn where app_formno ='" + Convert.ToString(applno) + "' and college_code='" + clgcode + "' and religion='" + religion + "' and community='" + community + "' and stud_name='" + applname + "' and degree_code='" + ddlchoice1.SelectedItem.Value + "'");
                //stud pre details
                string user_id = "";
                string Msg = "You have registered successfully. Please quote Your Application ID (Application Number) is : " + txtapplno.Text + " for future reference";
                string Mobile_no = Convert.ToString(txtmblno.Text);
                string ssr = "select * from Track_Value where college_code='" + Convert.ToString(ddlclg.SelectedItem.Value) + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(ssr, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
                }
                string InsertStud = "";
                if (appno != "0")
                {
                    if (courname.Trim().ToUpper() == "UG")
                    {
                        #region UG
                        if (rbmarkmark.Checked == true)
                            InsertStud = "insert into Stud_prev_details(app_no,course_code,passmonth,passyear,securedmark,Institute_name,instaddress,markPriority) values('" + appno + "','" + boardvalue + "','" + mnth + "','" + yearval + "','" + totmark + "','" + txtsclname.Text + "','" + txtscladd.Text + "',1)";
                        else
                            InsertStud = "insert into Stud_prev_details(grade,course_code,passmonth,passyear,app_no,Institute_name,instaddress,markPriority) values('" + totmark + "','" + boardvalue + "','" + mnth + "','" + yearval + "','" + appno + "','" + txtsclname.Text + "','" + txtscladd.Text + "',1)";
                        ins = d2.update_method_wo_parameter(InsertStud, "Text");
                        //sendsms(mblno, applno);
                        if (SendSmsAfterSave())
                        {
                            int d = d2.send_sms(user_id, Convert.ToString(ddlclg.SelectedItem.Value), usercode, Mobile_no, Msg, "0");
                        }
                        flag = true;
                        #endregion
                    }
                    else
                    {
                        #region PG
                        InsertStud = "insert into Stud_prev_details(app_no,course_code,branch_code,passmonth,passyear,percentage,Institute_name,instaddress,university_code,markPriority" + tancolnam + ") values('" + appno + "','" + boardvalue + "','" + majorcode + "','" + mnth + "','" + yearval + "','" + totmark + "','" + txtsclname.Text + "','" + txtscladd.Text + "','" + univcode + "',1" + tancolval + ")";
                        ins = d2.update_method_wo_parameter(InsertStud, "Text");
                        if (SendSmsAfterSave())
                        {
                            int d = d2.send_sms(user_id, Convert.ToString(ddlclg.SelectedItem.Value), usercode, Mobile_no, Msg, "0");
                        }
                        //sendsms(mblno, applno);
                        flag = true;
                        #endregion
                    }
                }
                //photo  
                #region photo
                if (ViewState["photo"] != null && ViewState["size"] != null)
                {
                    byte[] photoid = (byte[])(ViewState["photo"]);
                    int size = Convert.ToInt32(ViewState["size"]);
                    if (photoid.Length > 0 && appno != "0")
                    {
                        string InsPhoto = "";
                        if (txtapplno.Enabled == true)
                        {
                            InsPhoto = "insert into StdPhoto(app_no,Photo)values(@appno,@photoid)";
                        }
                        else
                        {
                            InsPhoto = "update StdPhoto set Photo=@photoid where app_no=@appno";
                        }
                        SqlCommand cmd = new SqlCommand(InsPhoto, con);
                        SqlParameter uploadedsubject_name = new SqlParameter("@appno", SqlDbType.Int, 50);
                        uploadedsubject_name.Value = appno;
                        cmd.Parameters.Add(uploadedsubject_name);
                        uploadedsubject_name = new SqlParameter("@photoid", SqlDbType.Binary, size);
                        uploadedsubject_name.Value = photoid;
                        cmd.Parameters.Add(uploadedsubject_name);
                        con.Close();
                        con.Open();
                        cmd.ExecuteNonQuery();
                        con.Close();
                        ViewState["photo"] = null;
                        ViewState["size"] = null;
                    }
                }
                #endregion
                if (appnovalue == "1")
                {
                    if (ins > 0)
                    {
                        updateRcptNo(clgcode, choice1);
                    }
                }
            }
            if (flag == true)
            {
                // btn_go_OnClick(sender, e);
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                lbl_alert.Text = "Saved Successfully";
                courseid = Convert.ToString(ddlchoice1.SelectedItem.Value);
                btn_errorclose.Focus();
                if (appnovalue == "1")
                {
                    int format = 0;
                    txtapplno.Text = generateApplNo(collegecode, Convert.ToInt32(courseid), "", "", "", ddlBatch_year.SelectedValue, out format);
                }
            }
        }
        catch { }
    }
    protected void btncancel_OnClick(object sender, EventArgs e)
    {
        AcdYear();
        loadcollege();
        educationLevel();
        loadChioce();
        loadChioce2();
        loadReligion();
        loadCommunity();
        txtapplname.Text = "";
        txtsclname.Text = "";
        txtscladd.Text = "";
        txtgrade.Text = "";
        rbMarksGrade.SelectedIndex = 0;
        rbhsc.Checked = true;
        rbcbse.Checked = false;
        rbother.Checked = false;
        rbhsc_OnCheckedChanged(sender, e);
        txtmark.Text = "";
        txtpassyr.Text = "";
        txtrm.Text = "";
        txtmblno.Text = "";
        studimg.ImageUrl = "";
        txtapplno.Focus();
        txtugmaj.Text = "";
        IsEnquiry.Checked = false;
    }
    protected void txtpassyr_OnTextChanged(object sender, EventArgs e)
    {
        try
        {
            string year = Convert.ToString(txtpassyr.Text);
            if (year != "")
            {
                if (year.Length == 8)
                {
                    string[] yrsplit = year.Split(' ');
                    if (yrsplit.Length > 0)
                    {
                        if (yrsplit[0].Length != 3 && yrsplit[1].Length != 4)
                            txtpassyr.Text = "";
                    }
                }
                else
                    txtpassyr.Text = "";
            }
        }
        catch { txtpassyr.Text = ""; }
    }
    protected void rbhsc_OnCheckedChanged(object sender, EventArgs e)
    {
        lblboard.Visible = false;
        txtotherscl.Visible = false;
        if (rbMarksGrade.SelectedIndex == 0)
        {
            rbhsc.Focus();
        }
        else
        {
            rbhsc.Focus();
        }
    }
    protected void rbcbse_OnCheckedChanged(object sender, EventArgs e)
    {
        lblboard.Visible = false;
        txtotherscl.Visible = false;
        if (rbMarksGrade.SelectedIndex == 0)
        {
            rbcbse.Focus();
        }
        else
        {
            rbcbse.Focus();
        }
    }
    protected void rbother_OnCheckedChanged(object sender, EventArgs e)
    {
        lblboard.Visible = true;
        txtotherscl.Visible = true;
        if (rbMarksGrade.SelectedIndex == 0)
        {
            rbother.Focus();
        }
        else
        {
            rbother.Focus();
        }
    }
    protected void rbmarkgrade_OnCheckedChanged(object sender, EventArgs e)
    {
        lblmark.Visible = false;
        txtmark.Visible = false;
        lblgrade.Visible = true;
        txtgrade.Visible = true;
    }
    public void rbmarkmark_OnCheckedChanged(object sender, EventArgs e)
    {
        lblmark.Visible = true;
        txtmark.Visible = true;
        lblgrade.Visible = false;
        txtgrade.Visible = false;
    }
    protected void upload_OnClick(object sender, EventArgs e)
    {
        try
        {
            bool upflage = false;
            if (studphoto.HasFile)
            {
                string applno = Convert.ToString(txtapplno.Text);
                if (applno != "")
                {
                    string filename = Path.GetFileName(studphoto.FileName);
                    int fileSize = studphoto.PostedFile.ContentLength;
                    byte[] documentBinary = new byte[fileSize];
                    studphoto.PostedFile.InputStream.Read(documentBinary, 0, fileSize);
                    string fname = Server.MapPath("~/Student/ApplicantPhoto/") + applno + ".jpg";
                    studphoto.SaveAs(Server.MapPath("~/Student/ApplicantPhoto/") + applno + ".jpg");
                    studimg.ImageUrl = "~/StudentApplicationHandler/Handler.ashx?filename=" + fname;
                    // studimg.ImageUrl = filename;
                    upflage = true;
                    ViewState["photo"] = documentBinary;
                    ViewState["size"] = fileSize;
                }
                else
                {
                    ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Fill The Application No\");", true);
                    return;
                }
            }
            if (upflage == true)
            {
                ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Upload Successfully\");", true);
            }
            else
            {
                ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Select Files\");", true);
            }
        }
        catch (Exception ex)
        { }
    }
    protected double collegewiseapplicationRights()
    {
        double RightsCode = 0;
        string colgCode = string.Empty;
        if (ddlAppFormat.Items.Count > 0)
        {
            if (ddlAppFormat.SelectedIndex == 0)
                colgCode = Convert.ToString(ddlclg.SelectedItem.Value);
            else
                colgCode = Convert.ToString(ddl_college.SelectedItem.Value);
        }
        double.TryParse(Convert.ToString(d2.GetFunction("select linkvalue from New_InsSettings where LinkName='CollegewiseApplicationNoRights' and user_code ='" + usercode + "' and college_code ='" + colgCode + "'")), out RightsCode);
        return RightsCode;
    }
    //private string genearateApplNo(string collegecode, string degreecode)
    //{
    //    string orginalapplication_number = "";
    //    try
    //    {
    //        Hashtable hat = new Hashtable();
    //        hat.Add(1, "0");
    //        hat.Add(2, "00");
    //        hat.Add(3, "000");
    //        hat.Add(4, "0000");
    //        hat.Add(5, "00000");
    //        hat.Add(6, "000000");
    //        hat.Add(7, "0000000");
    //        hat.Add(8, "00000000");
    //        hat.Add(9, "000000000");
    //        hat.Add(10, "0000000000");
    //        bool check = false;
    //        int application_No = 0;
    //        string colgCode = string.Empty;
    //        int year = 0;
    //        if (ddlAppFormat.Items.Count > 0)
    //        {
    //            if (ddlAppFormat.SelectedIndex == 1)
    //                int.TryParse(Convert.ToString(ddlbatch2.SelectedItem.Value), out year);
    //            else
    //            {
    //                year = Convert.ToInt32(DateTime.Now.ToString("yyyyy"));
    //                year += 1;
    //            }
    //        }
    //        string selectquery = string.Empty;
    //        if (collegewiseapplicationRights() == 1)
    //        {
    //            string appCodetemp = d2.GetFunction("select appcode from code_generation where  batch_year='" + year + "' and college_code='" + collegecode + "' and app_code_flag='0' and isnull(iscollege,'0')='1'");
    //            selectquery = "select top 1 app_formno  from applyn where app_formno <>'' and app_formno like '%" + appCodetemp + "%' and college_code='" + collegecode + "' and batch_year='" + year + "' order by app_formno desc ";// -- and batch_year='" + System.DateTime.Now.ToString("yyyy") + "'
    //            selectquery = selectquery + " select appcode,app_startwith,app_serial from code_generation where  batch_year='" + year + "'  and college_code='" + collegecode + "' and app_code_flag='0' and isnull(iscollege,'0')='1'";
    //        }
    //        else
    //        {
    //            string appCodetemp = d2.GetFunction("select appcode from code_generation where  batch_year='" + year + "' and degree_code='" + degreecode + "' and college_code='" + collegecode + "' and app_code_flag='0' and isnull(iscollege,'0')='0'");
    //            selectquery = "select top 1 app_formno  from applyn where app_formno <>'' and app_formno like '%" + appCodetemp + "%' and degree_code='" + degreecode + "' and college_code='" + collegecode + "' order by app_formno desc ";// -- and batch_year='" + System.DateTime.Now.ToString("yyyy") + "'
    //            selectquery = selectquery + " select appcode,app_startwith,app_serial from code_generation where  batch_year='" + year + "' and degree_code='" + degreecode + "' and college_code='" + collegecode + "' and app_code_flag='0'and isnull(iscollege,'0')='0'";
    //        }
    //        DataSet dsv = new DataSet();
    //        dsv = d2.select_method_wo_parameter(selectquery, "Text");
    //        if (dsv.Tables[0].Rows.Count > 0)
    //        {
    //            // application_No = Convert.ToInt32(ds.Tables[0].Rows[0][0]);
    //            string applno = Convert.ToString(dsv.Tables[0].Rows[0][0]);
    //            if (dsv.Tables.Count > 0 && dsv.Tables[1].Rows.Count > 0)
    //            {
    //                string appcode = Convert.ToString(dsv.Tables[1].Rows[0]["appcode"]);
    //                string appsiz2 = Convert.ToString(dsv.Tables[1].Rows[0]["app_serial"]);
    //                applicationNoRightsacr();
    //                int len = appcode.Length;
    //                if (appnovalueacr.Trim() == "1")
    //                {
    //                    applno = applno.Remove(0, len + 4);
    //                }
    //                else
    //                {
    //                    applno = applno.Remove(0, len);
    //                }
    //                string yyy = Convert.ToString((Convert.ToInt64(applno) + 1));
    //                string newnumber = Convert.ToString(yyy);
    //                int val = newnumber.Length;
    //                if (val == Convert.ToInt32(appsiz2))
    //                {
    //                    orginalapplication_number = appcode + "" + newnumber;
    //                    txt_appfromno.Text = orginalapplication_number;
    //                }
    //                else
    //                {
    //                    int remain = Convert.ToInt32(appsiz2) - val;
    //                    string addnumber = Convert.ToString(hat[remain]);
    //                    addnumber = addnumber + "" + newnumber;
    //                    orginalapplication_number = appcode + "" + addnumber;
    //                    txt_appfromno.Text = orginalapplication_number;
    //                }
    //            }
    //            else
    //                check = true;
    //        }
    //        else
    //            check = true;
    //        if (check && dsv.Tables.Count > 1 && dsv.Tables[1].Rows.Count > 0)
    //        {
    //            string appcode = Convert.ToString(dsv.Tables[1].Rows[0]["appcode"]);
    //            string appsiz2 = Convert.ToString(dsv.Tables[1].Rows[0]["app_startwith"]);
    //            int len = appsiz2.Length;
    //            if (len == Convert.ToInt32(dsv.Tables[1].Rows[0]["app_serial"]))
    //            {
    //                orginalapplication_number = appcode + "" + appsiz2;
    //            }
    //            else
    //            {
    //                int remain = Convert.ToInt32(dsv.Tables[1].Rows[0]["app_serial"]) - len;
    //                string addnumber = Convert.ToString(hat[remain]);
    //                addnumber = addnumber + "" + appsiz2;
    //                orginalapplication_number = appcode + "" + addnumber;
    //            }
    //        }
    //    }
    //    catch { }
    //    return orginalapplication_number;
    //}
    public void updateRcptNo(string collegecode, string degreecode)
    {
        try
        {
            string ss = " update code_generation set app_startwith=app_startwith+1  where college_code='" + collegecode + "' and degree_code ='" + degreecode + "'";
            d2.update_method_wo_parameter(ss, "Text");
        }
        catch { }
    }
    //public string subjectcode(string subjename)
    //{
    //    string subjec_no = "";
    //    try
    //    {
    //        string textcri = "";
    //        if (ddlclg.Items.Count > 0)
    //        {
    //            clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
    //        }
    //        if (ddlcourse.SelectedItem.Text.Trim().ToUpper() == "UG")
    //        {
    //            textcri = "marks";
    //            string select_subno = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + clgcode + " and TextVal='" + subjename + "'";
    //            ds.Clear();
    //            ds = d2.select_method_wo_parameter(select_subno, "Text");
    //            if (ds.Tables[0].Rows.Count > 0)
    //            {
    //                subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
    //            }
    //            else
    //            {
    //                string insertquery = "insert into textvaltable(TextCriteria,TextVal,college_code) values('" + textcri + "','" + subjename + "','" + clgcode + "')";
    //                int result = d2.update_method_wo_parameter(insertquery, "Text");
    //                if (result != 0)
    //                {
    //                    string select_subno1 = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + clgcode + " and TextVal='" + subjename + "'";
    //                    ds.Clear();
    //                    ds = d2.select_method_wo_parameter(select_subno1, "Text");
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
    //                    }
    //                }
    //            }
    //        }
    //        else
    //        {
    //            if (ddlugcourse.SelectedItem.Text.Trim().ToUpper() == "OTHERS")
    //            {
    //                textcri = "cours";
    //            }
    //            else
    //            {
    //                textcri = "cours";
    //            }
    //            string select_subno = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + clgcode + " and TextVal='" + subjename + "'";
    //            ds.Clear();
    //            ds = d2.select_method_wo_parameter(select_subno, "Text");
    //            if (ds.Tables[0].Rows.Count > 0)
    //            {
    //                subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
    //            }
    //            else
    //            {
    //                string insertquery = "insert into textvaltable(TextCriteria,TextVal,college_code) values('" + textcri + "','" + subjename + "','" + clgcode + "')";
    //                int result = d2.update_method_wo_parameter(insertquery, "Text");
    //                if (result != 0)
    //                {
    //                    string select_subno1 = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + clgcode + " and TextVal='" + subjename + "'";
    //                    ds.Clear();
    //                    ds = d2.select_method_wo_parameter(select_subno1, "Text");
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
    //                    }
    //                }
    //            }
    //        }
    //    }
    //    catch
    //    {
    //    }
    //    return subjec_no;
    //}
    protected string SubjectCoursecode(string subjename)
    {
        string subjec_no = "";
        try
        {
            if (ddlclg.Items.Count > 0)
            {
                clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
            }
            string textcri = "branc";
            string select_subno = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + clgcode + " and TextVal='" + subjename + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(select_subno, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
            }
            else
            {
                string insertquery = "insert into textvaltable(TextCriteria,TextVal,college_code) values('" + textcri + "','" + subjename + "','" + clgcode + "')";
                int result = d2.update_method_wo_parameter(insertquery, "Text");
                if (result != 0)
                {
                    string select_subno1 = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + clgcode + " and TextVal='" + subjename + "'";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(select_subno1, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                    }
                }
            }
        }
        catch { }
        return subjec_no;
    }
    protected string UniversityCode(string UnisityName)
    {
        string subjec_no = "";
        try
        {
            if (ddlclg.Items.Count > 0)
            {
                clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
            }
            string textcri = "unive";
            string crit2 = "unive1";
            string select_subno = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + clgcode + " and TextVal='" + UnisityName + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(select_subno, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
            }
            else
            {
                string insertquery = "insert into textvaltable(TextCriteria,TextVal,college_code,TextCriteria2) values('" + textcri + "','" + UnisityName + "','" + clgcode + "','" + crit2 + "')";
                int result = d2.update_method_wo_parameter(insertquery, "Text");
                if (result != 0)
                {
                    string select_subno1 = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + clgcode + " and TextVal='" + UnisityName + "'";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(select_subno1, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                    }
                }
            }
        }
        catch { }
        return subjec_no;
    }
    public void checkFun()
    {
        //if (Convert.ToInt32(ddlclg.SelectedItem.Value) == 13)
        //{
        //    ddlsex.Items.Clear();
        //    ddlsex.Items.Insert(0, new ListItem("Male", "0"));
        //}
        //else if (Convert.ToInt32(ddlclg.SelectedItem.Value) == 14)
        //{
        //    ddlsex.Items.Clear();
        //    ddlsex.Items.Insert(0, new ListItem("Male", "0"));
        //}
        //else if (Convert.ToInt32(ddlclg.SelectedItem.Value) == 15)
        //{
        //    ddlsex.Items.Clear();
        //    ddlsex.Items.Insert(0, new ListItem("Female", "1"));
        //}
    }
    #region Application No checking
    [WebMethod]
    public static string checkApplno(string applno)
    {
        string returnValue = "1";
        try
        {
            DAccess2 dd = new DAccess2();
            if (applno.Trim() != "" && applno != null)
            {
                if (appnovalueacr.Trim() == "1")
                    applno = addAcdYear + applno;
                int year = Convert.ToInt32(DateTime.Now.ToString("yyyyy"));
                year += 1;
                string queryledname = dd.GetFunction("select app_formno from applyn where app_formno='" + applno + "' and batch_year='" + year + "'");
                if (queryledname.Trim() == "" || queryledname == null || queryledname == "0" || queryledname == "-1")
                {
                    returnValue = "0";
                }
            }
            else
            {
                returnValue = "2";
            }
        }
        catch (SqlException ex)
        {
            returnValue = "error" + ex.ToString();
        }
        return returnValue;
    }
    #endregion
    public void CheckBox_column0_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            ItemList_item.Clear();
            if (CheckBox_column0.Checked == true)
            {
                ItemList_item.Clear();
                for (int i = 0; i < cblcolumnorder0.Items.Count; i++)
                {
                    string si = Convert.ToString(i);
                    cblcolumnorder0.Items[i].Selected = true;
                    LinkButton8.Visible = true;
                    ItemList_item.Add(cblcolumnorder0.Items[i].Text.ToString());
                    Itemindex_item.Add(si);
                }
                LinkButton8.Visible = true;
                tborder0.Visible = true;
                tborder0.Text = "";
                int j = 0;
                for (int i = 0; i < ItemList_item.Count; i++)
                {
                    j = j + 1;
                    tborder0.Text = tborder0.Text + ItemList_item[i].ToString();
                    tborder0.Text = tborder0.Text + "(" + (j).ToString() + ")  ";
                }
            }
            else
            {
                for (int i = 0; i < cblcolumnorder0.Items.Count; i++)
                {
                    cblcolumnorder0.Items[i].Selected = false;
                    LinkButton8.Visible = false;
                    ItemList_item.Clear();
                    Itemindex_item.Clear();
                    cblcolumnorder0.Items[0].Enabled = false;
                }
                tborder0.Text = "";
                tborder0.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void LinkButtonsremove0_Click(object sender, EventArgs e)
    {
        try
        {
            cblcolumnorder0.ClearSelection();
            CheckBox_column0.Checked = false;
            LinkButton8.Visible = false;
            ItemList_item.Clear();
            Itemindex_item.Clear();
            tborder0.Text = "";
            tborder0.Visible = false;
        }
        catch (Exception ex)
        {
        }
    }
    public void cblcolumnorder0_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            ItemList_item.Clear();
            CheckBox_column0.Checked = false;
            string value = "";
            int index;
            cblcolumnorder0.Items[0].Selected = true;
            cblcolumnorder0.Items[0].Enabled = false;
            value = string.Empty;
            string result = Request.Form["__EVENTTARGET"];
            string[] checkedBox = result.Split('$');
            index = int.Parse(checkedBox[checkedBox.Length - 1]);
            string sindex = Convert.ToString(index);
            if (cblcolumnorder0.Items[index].Selected)
            {
            }
            else
            {
                ItemList_item.Remove(cblcolumnorder0.Items[index].Text.ToString());
                Itemindex_item.Remove(sindex);
            }
            for (int i = 0; i < cblcolumnorder0.Items.Count; i++)
            {
                if (cblcolumnorder0.Items[i].Selected == false)
                {
                    sindex = Convert.ToString(i);
                    ItemList_item.Remove(cblcolumnorder0.Items[i].Text.ToString());
                    Itemindex_item.Remove(sindex);
                }
            }
            LinkButton8.Visible = true;
            tborder0.Visible = true;
            tborder0.Text = "";
            for (int i = 0; i < ItemList_item.Count; i++)
            {
                tborder0.Text = tborder0.Text + ItemList_item[i].ToString();
                tborder0.Text = tborder0.Text + "(" + (i + 1).ToString() + ")  ";
            }
            if (ItemList_item.Count == 13)
            {
                CheckBox_column0.Checked = true;
            }
            if (ItemList_item.Count == 0)
            {
                tborder0.Visible = false;
                LinkButton8.Visible = false;
            }
            //  Button2.Focus();
        }
        catch (Exception ex)
        {
        }
    }
    public void btn_printmaster_Click(object sender, EventArgs e)
    {
        try
        {
            string attendance = "Student Application Report";
            string pagename = "StudentNewApplicationReport.aspx";
            Printcontrol.loadspreaddetails(Fpspread1, pagename, attendance);
            Printcontrol.Visible = true;
        }
        catch (Exception ex)
        {
        }
    }
    public void btnExcel_Click(object sender, EventArgs e)
    {
        try
        {
            string report = txt_excelname.Text;
            if (report.ToString().Trim() != "")
            {
                d2.printexcelreport(Fpspread1, report);
                lbl_norec.Visible = false;
            }
            else
            {
                lbl_norec.Text = "Please Enter Your Report Name";
                lbl_norec.Visible = true;
            }
            btn_Excel.Focus();
        }
        catch (Exception ex)
        {
            lbl_norec.Text = ex.ToString();
        }
    }
    protected void txtexcelname_TextChanged(object sender, EventArgs e)
    {
        try
        {
            txt_excelname.Visible = true;
            btn_Excel.Visible = true;
            btn_printmaster.Visible = true;
            lbl_reportname.Visible = true;
            btn_Excel.Focus();
            if (txt_excelname.Text == "")
            {
                lbl_norec.Visible = true;
            }
            else
            {
                lbl_norec.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void sendsms(string mobil, string appl)
    {
        try
        {
            string Msg = "You have registered successfully. Please quote Your Application ID (Application Number) is : " + appl + " for future reference";
            string Mobile_no = Convert.ToString(mobil);
            Mobile_no = mobil;// "9585698019";
            string user_id = "";
            string SenderID = "";
            string Password = "";
            string todaydate = System.DateTime.Now.ToString("dd/MM/yyyy");
            string[] splitdate = todaydate.Split('/');
            DateTime dt = Convert.ToDateTime(splitdate[1] + "/" + splitdate[0] + "/" + splitdate[2]);
            string ssr = "select * from Track_Value where college_code='" + Convert.ToString(ddlclg.SelectedItem.Value) + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(ssr, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
            }
            if (user_id.Trim() != "")
            {
                string getval = d2.GetUserapi(user_id);
                string[] spret = getval.Split('-');
                if (spret.GetUpperBound(0) == 1)
                {
                    SenderID = spret[0].ToString();
                    Password = spret[0].ToString();
                }
                string strpath = "http://dnd.airsmsmarketing.info/api/sendmsg.php?user=" + SenderID + "&pass=" + Password + "&sender=" + SenderID + "&phone=" + Mobile_no + "&text=" + Msg + "&priority=ndnd&stype=normal";
                string isst = "0";
                smsreport(strpath, isst, dt, Mobile_no, Msg);
            }
        }
        catch
        {
        }
    }
    public void smsreport(string uril, string isstaff, DateTime dt, string phone, string msg)
    {
        try
        {
            string phoneno = phone;
            string message = msg;
            string date = dt.ToString("MM/dd/yyyy") + ' ' + DateTime.Now.ToString("hh:mm:ss");
            WebRequest request = WebRequest.Create(uril);
            WebResponse response = request.GetResponse();
            Stream data = response.GetResponseStream();
            StreamReader sr = new StreamReader(data);
            string strvel = sr.ReadToEnd();
            string groupmsgid = "";
            groupmsgid = strvel;
            int sms = 0;
            string smsreportinsert = "";
            smsreportinsert = "insert into smsdeliverytrackmaster (mobilenos,groupmessageid,message,college_code,isstaff,date)values( '" + phoneno + "','" + groupmsgid + "','" + message + "','" + Convert.ToString(ddlclg.SelectedItem.Value) + "','" + isstaff + "','" + date + "')";
            sms = d2.update_method_wo_parameter(smsreportinsert, "Text");
        }
        catch (Exception ex)
        {
        }
    }
    protected void ddlreportTye_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            //rdb_paid.Visible = false;
            //rdb_notpaid.Visible = false;
            if (ddlreportTye.SelectedIndex == 0)
            {
                txt_seat.Enabled = false;
                pheaderfilter0.Visible = false;
                Fpspread1.Visible = false;
                div_report.Visible = false;
                txtQuota.Enabled = false;//abar
                //rdb_paid.Visible = true;
                //rdb_notpaid.Visible = true;
            }
            if (ddlreportTye.SelectedIndex == 1)
            {
              
                txt_seat.Enabled = true;
                pheaderfilter0.Visible = false;
                Fpspread1.Visible = false;
                div_report.Visible = false;
                txtQuota.Enabled = true;//abar
            }
        }
        catch
        {
        }
    }
    //protected void btnUpdate_OnClick(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        bool flag = false;
    //        string year = "";
    //        string clgcode = "";
    //        string applno = "";
    //        string appldate = "";
    //        string choice1 = "";
    //        string choice2 = "";
    //        string applname = "";
    //        string religion = "";
    //        string community = "";
    //        string boardvalue = "";
    //        string mnth = "";
    //        string yearval = "";
    //        string mblno = "";
    //        int ins = 0;
    //        string courname = "";
    //        string pgmajorcode = "";
    //        //9/5/2015
    //        string tancetmark = "";
    //        string tancolnam = "";
    //        string tancolval = "";
    //        string tancolnam1 = "";
    //        string tancolval1 = "";
    //        if (ddlcourse.Items.Count > 0)
    //        {
    //            courname = Convert.ToString(ddlcourse.SelectedItem.Text);
    //        }
    //        //if (ddlyear.Items.Count > 0)
    //        //{
    //        //    year = Convert.ToString(ddlyear.SelectedItem.Value);
    //        //}
    //        applicationNoRightsacr();
    //        year = Convert.ToString(ddlBatch_year.Text.Trim());
    //        if (ddlclg.Items.Count > 0)
    //        {
    //            clgcode = Convert.ToString(ddlclg.SelectedItem.Value);
    //        }
    //        string ch2code = "";
    //        applno = Convert.ToString(txtapplno.Text.Trim());
    //        if (appnovalueacr.Trim() == "1")
    //        {
    //            applno = Convert.ToString(TxtAcrApplno.Text.Trim()) + applno;
    //        }
    //        appldate = Convert.ToString(txtappldate.Text);
    //        string[] strdatet = appldate.Split('/');
    //        if (strdatet.Length > 0)
    //        {
    //            string bkdt = strdatet[0].ToString();
    //            string bkmn = strdatet[1].ToString();
    //            string bkyr = strdatet[2].ToString();
    //            appldate = bkmn + "/" + bkdt + "/" + bkyr;
    //        }
    //        if (ddlchoice1.Items.Count > 0)
    //        {
    //            choice1 = Convert.ToString(ddlchoice1.SelectedItem.Value);
    //            //9/5/2015
    //            if (txttanmark.Visible)
    //            {
    //                tancetmark = Convert.ToString(txttanmark.Text);
    //                tancolnam = ",tancet_mark";
    //                tancolval = ",'" + tancetmark + "'";
    //                tancolnam1 = ",tancet_mark=";
    //                tancolval1 = "'" + tancetmark + "'";
    //            }
    //            else
    //                tancetmark = "";
    //        }
    //        if (ddlchoice2.Items.Count > 0)
    //        {
    //            if (ddlchoice2.SelectedItem.Value != "0")
    //            {
    //                ch2code = " ,Alternativedegree_code";
    //                choice2 = Convert.ToString(ddlchoice2.SelectedItem.Value);
    //                choice2 = ",'" + choice2 + "'";
    //            }
    //        }
    //        string choicedegreecode = Convert.ToString(ddlchoice2.SelectedItem.Value);
    //        applname = Convert.ToString(txtapplname.Text.Trim());
    //        string gender = "";
    //        gender = Convert.ToString(ddlsex.SelectedItem.Value);
    //        //if (rbmale.Checked == true)
    //        //    gender = "0";
    //        //else
    //        //    gender = "1";
    //        if (ddlregl.Items.Count > 0)
    //        {
    //            religion = Convert.ToString(ddlregl.SelectedItem.Value);
    //        }
    //        if (ddlcomm.Items.Count > 0)
    //        {
    //            community = Convert.ToString(ddlcomm.SelectedItem.Value);
    //        }
    //        string sclname = Convert.ToString(txtsclname.Text.Trim());
    //        string scladd = Convert.ToString(txtscladd.Text.Trim());
    //        //scholl educational detail
    //        string board = "";
    //        string totmark = "";
    //        string univcode = "";
    //        string coursname = "";
    //        string majorcode = "";
    //        string percent = "";
    //        if (courname.Trim().ToUpper() == "UG")
    //        {
    //            if (rbhsc.Checked == true)
    //                boardvalue = subjectcode("cours", "HSC");
    //            else if (rbcbse.Checked == true)
    //                boardvalue = subjectcode("cours", "CBSE");
    //            else if (rbother.Checked == true)
    //            {
    //                boardvalue = subjectcode("cours", txtotherscl.Text);
    //            }
    //            if (rbmarkmark.Checked == true)
    //                totmark = Convert.ToString(txtmark.Text.Trim());
    //            else
    //                totmark = Convert.ToString(txtgrade.Text.Trim());
    //            if (ddlmonth.SelectedItem.Text != "Month")
    //            {
    //                mnth = Convert.ToString(ddlmonth.SelectedItem.Text);
    //            }
    //            if (ddlyear.SelectedItem.Text != "Year")
    //            {
    //                yearval = Convert.ToString(ddlyear.SelectedItem.Text);
    //            }
    //        }
    //        else
    //        {
    //            if (ddlpg.Items.Count > 0)
    //            {
    //                // univcode = Convert.ToString(ddlpg.SelectedItem.Value);
    //                if (ddlpg.Items.Count > 0)
    //                {
    //                    if (ddlpg.SelectedItem.Text.Trim().ToUpper() != "OTHERS")
    //                    {
    //                        coursname = Convert.ToString(ddlpg.SelectedItem.Value).Trim();
    //                        univcode = coursname;
    //                    }
    //                    else
    //                    {
    //                        string uniname = Convert.ToString(txtuniname.Text);
    //                        if (uniname != "")
    //                            univcode = UniversityCode(uniname);
    //                    }
    //                }
    //                //                    UniversityCode
    //                if (ddlugcourse.Items.Count > 0)
    //                {
    //                    if (ddlugcourse.SelectedItem.Text.Trim().ToUpper() != "OTHERS")
    //                    {
    //                        coursname = Convert.ToString(ddlugcourse.SelectedItem.Value).Trim();
    //                        boardvalue = coursname;
    //                    }
    //                    else
    //                    {
    //                        string ugname = Convert.ToString(txtugcourse.Text);
    //                        if (ugname != "")
    //                            boardvalue = subjectcode("cours", ugname);
    //                    }
    //                }
    //                if (txtugmaj.Text != "")
    //                {
    //                    majorcode = SubjectCoursecode(txtugmaj.Text);
    //                }
    //                percent = Convert.ToString(txtugper.Text);
    //                totmark = percent;
    //                if (ddlugmnth.SelectedItem.Text != "Month")
    //                {
    //                    mnth = Convert.ToString(ddlugmnth.SelectedItem.Text);
    //                }
    //                if (ddlugyr.SelectedItem.Text != "Year")
    //                {
    //                    yearval = Convert.ToString(ddlugyr.SelectedItem.Text);
    //                }
    //            }
    //        }
    //        string Seattype = Convert.ToString(ddl_seattype.SelectedItem.Text);
    //        if (Seattype.Trim() != "Select")
    //        {
    //            Seattype = Convert.ToString(ddl_seattype.SelectedItem.Value);
    //        }
    //        else
    //        {
    //            Seattype = "0";
    //        }
    //        string StudentType = "";
    //        if (ddlMode.SelectedItem.Text != "Select")
    //        {
    //            StudentType = Convert.ToString(ddlMode.SelectedItem.Value);
    //        }
    //        else
    //        {
    //            StudentType = "0";
    //        }
    //        string remark = Convert.ToString(txtrm.Text.Trim());
    //        mblno = Convert.ToString(txtmblno.Text.Trim());
    //        if (rbmarkmark.Checked == true)
    //        {
    //        }
    //        if (year != "" && clgcode != "" && applno != "" && appldate != "" && choice1 != "" && applname != "" && gender != "" && religion != "" && community != "" && totmark != "" && mnth != "" && yearval != "" && boardvalue != "" && mblno != "")
    //        {
    //            //applyn
    //            string InsertQ = "";
    //            string appno = Convert.ToString(ViewState["AppNew"]);
    //            if (appno != "0")
    //            {
    //                InsertQ = "update applyn set  batch_year='" + year + "',Alternativedegree_code='" + choicedegreecode + "',college_code='" + clgcode + "',date_applied='" + appldate + "',degree_code='" + choice1 + "',stud_name='" + applname + "',sex='" + gender + "',religion='" + religion + "',community='" + community + "',remarks='" + remark + "',Student_Mobile='" + mblno + "',IsConfirm='1',current_semester='" + ddlSemester1.SelectedValue + "',app_formno='" + Convert.ToString(applno) + "',seattype='" + Seattype + "',Mode='" + StudentType + "' where app_no='" + appno + "'";
    //                if (ddlreportTye.SelectedIndex == 3)
    //                {
    //                    InsertQ = InsertQ + "  update Registration set Batch_Year='" + year + "' ,college_code='" + clgcode + "',degree_code='" + choice1 + "',Stud_Name='" + applname + "',mode='" + StudentType + "',Current_Semester='" + ddlSemester1.SelectedValue + "' where App_No='" + appno + "'";
    //                }
    //                int insert = d2.update_method_wo_parameter(InsertQ, "Text");
    //                //appno
    //                //  appno = d2.GetFunction("select app_no from applyn where app_formno ='" + Convert.ToString(txtapplno.Text.Trim()) + "' ");
    //                //stud pre details
    //                string InsertStud = "";
    //                if (courname.Trim().ToUpper() == "UG")
    //                {
    //                    #region UG
    //                    if (rbmarkmark.Checked == true)
    //                    {
    //                        InsertStud = "update Stud_prev_details set course_code='" + boardvalue + "',passmonth='" + mnth + "',passyear='" + yearval + "',securedmark='" + totmark + "',Institute_name='" + txtsclname.Text + "',instaddress='" + txtscladd.Text + "',markPriority=1 where app_no='" + appno + "'";
    //                    }
    //                    else
    //                    {
    //                        InsertStud = "update Stud_prev_details set course_code='" + boardvalue + "',passmonth='" + mnth + "',passyear='" + yearval + "',grade='" + totmark + "',Institute_name='" + txtsclname.Text + "',instaddress='" + txtscladd.Text + "',markPriority=1 where app_no='" + appno + "'";
    //                    }
    //                    ins = d2.update_method_wo_parameter(InsertStud, "Text");
    //                    // sendsms(mblno, applno);
    //                    flag = true;
    //                    #endregion
    //                }
    //                else
    //                {
    //                    #region PG
    //                    InsertStud = "update Stud_prev_details set course_code='" + boardvalue + "',branch_code='" + majorcode + "',passmonth='" + mnth + "',passyear='" + yearval + "',percentage='" + totmark + "',Institute_name='" + txtsclname.Text + "',instaddress='" + txtscladd.Text + "',university_code='" + univcode + "',markPriority=1 " + tancolnam1 + "" + tancolval1 + " where app_no='" + appno + "'";
    //                    ins = d2.update_method_wo_parameter(InsertStud, "Text");
    //                    //sendsms(mblno, applno);
    //                    flag = true;
    //                    #endregion
    //                }
    //            }
    //            //photo  
    //            #region photo
    //            if (ViewState["photo"] != null && ViewState["size"] != null)
    //            {
    //                byte[] photoid = (byte[])(ViewState["photo"]);
    //                int size = Convert.ToInt32(ViewState["size"]);
    //                if (photoid.Length > 0 && appno != "0")
    //                {
    //                    string InsPhoto = "";
    //                    if (txtapplno.Enabled == true)
    //                    {
    //                        InsPhoto = "insert into StdPhoto(app_no,Photo)values(@appno,@photoid)";
    //                    }
    //                    else
    //                    {
    //                        InsPhoto = "update StdPhoto set Photo=@photoid where app_no=@appno";
    //                    }
    //                    SqlCommand cmd = new SqlCommand(InsPhoto, con);
    //                    SqlParameter uploadedsubject_name = new SqlParameter("@appno", SqlDbType.Int, 50);
    //                    uploadedsubject_name.Value = appno;
    //                    cmd.Parameters.Add(uploadedsubject_name);
    //                    uploadedsubject_name = new SqlParameter("@photoid", SqlDbType.Binary, size);
    //                    uploadedsubject_name.Value = photoid;
    //                    cmd.Parameters.Add(uploadedsubject_name);
    //                    con.Close();
    //                    con.Open();
    //                    cmd.ExecuteNonQuery();
    //                    con.Close();
    //                    ViewState["photo"] = null;
    //                    ViewState["size"] = null;
    //                }
    //            }
    //            #endregion
    //            if (appnovalue == "1")
    //            {
    //                if (ins > 0)
    //                {
    //                    updateRcptNo(clgcode, choice1);
    //                }
    //            }
    //        }
    //        if (flag == true)
    //        {
    //            btn_go_OnClick(sender, e);
    //            imgdiv2.Visible = true;
    //            lbl_alert.Visible = true;
    //            popview.Visible = false;
    //            ViewState["AppNew"] = null;
    //            lbl_alert.Text = "Updated Successfully";
    //            btn_errorclose.Focus();
    //        }
    //    }
    //    catch
    //    {
    //    }
    //}
    protected void btnUpdate_OnClick(object sender, EventArgs e)
    {
        UpdateDetails();
        btn_go_OnClick(sender, e);
    }
    protected void btnDelete_OnClick(object sender, EventArgs e)
    {
        lbldelalert.Visible = true;
        lbldelalert.Text = "Do You Want Delete This Details";
        imgdel.Visible = true;
    }
    protected void DeleteMethod(object sender, EventArgs e)
    {
        try
        {
            string deletequery = "";
            bool flag = false;
            string app_newvalue = Convert.ToString(ViewState["AppNew"]);
            deletequery = "delete from perv_marks_history from Stud_prev_details s where s.course_entno =perv_marks_history.course_entno and s.app_no ='" + app_newvalue + "'";
            int upd = d2.update_method_wo_parameter(deletequery, "Text");
            deletequery = "delete from Stud_prev_details where app_no ='" + app_newvalue + "'";
            upd = d2.update_method_wo_parameter(deletequery, "Text");
            deletequery = "delete from applyn where app_no ='" + app_newvalue + "'";
            upd = d2.update_method_wo_parameter(deletequery, "Text");
            if (upd > 0)
            {
                flag = true;
            }
            if (flag == true)
            {
                btn_go_OnClick(sender, e);
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                popview.Visible = false;
                ViewState["AppNew"] = null;
                lbl_alert.Text = "Deleted Successfully";
                btn_errorclose.Focus();
            }
        }
        catch
        {
        }
    }
    protected void btndelok_Click(object sender, EventArgs e)
    {
        imgdel.Visible = false;
        DeleteMethod(sender, e);
    }
    protected void btndelcan_Click(object sender, EventArgs e)
    {
        imgdel.Visible = false;
    }
    public void buttonfun(string value)
    {
        if (value.Trim() == "1")
        {
            btnUpdate.Visible = false;
            btnDelete.Visible = false;
            btnsave.Visible = true;
            btncancel.Visible = true;
        }
        if (value.Trim() == "2")
        {
            btnUpdate.Visible = true;
            btnDelete.Visible = false;
            btnsave.Visible = false;
            btncancel.Visible = false;
        }
    }
    public void bindseattype()
    {
        try
        {
            ddl_seattype.Items.Clear();
            ddl_seattype2.Items.Clear();
            string seat = "";
            string deptquery = "select distinct TextVal,TextCode  from TextValTable where TextCriteria ='Seat' and college_code=" + ddlclg.SelectedItem.Value + "";
            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds1.Tables[0].Rows.Count > 0)
            {
                ddl_seattype.DataSource = ds1;
                ddl_seattype.DataTextField = "TextVal";
                ddl_seattype.DataValueField = "TextCode";
                ddl_seattype.DataBind();
                ddl_seattype.Items.Insert(0, "Select");
                ddl_seattype2.DataSource = ds1;
                ddl_seattype2.DataTextField = "TextVal";
                ddl_seattype2.DataValueField = "TextCode";
                ddl_seattype2.DataBind();
                ddl_seattype2.Items.Insert(0, "Select");
            }
        }
        catch
        {
        }
    }
    public void bindseattype1()
    {
        try
        {
           // ddl_seattype.Items.Clear();
            ddl_seattype2.Items.Clear();
            string seat = "";
            string deptquery = "select distinct TextVal,TextCode  from TextValTable where TextCriteria ='Seat' and college_code=" + ddlcollege.SelectedItem.Value + "";
            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds1.Tables[0].Rows.Count > 0)
            {
                //ddl_seattype.DataSource = ds1;
                //ddl_seattype.DataTextField = "TextVal";
                //ddl_seattype.DataValueField = "TextCode";
                //ddl_seattype.DataBind();
              //  ddl_seattype.Items.Insert(0, "Select");
                ddl_seattype2.DataSource = ds1;
                ddl_seattype2.DataTextField = "TextVal";
                ddl_seattype2.DataValueField = "TextCode";
                ddl_seattype2.DataBind();
                ddl_seattype2.Items.Insert(0, "Select");
            }
        }
        catch
        {
        }
    }
    //New For Format 2 changed (09-05-2016) from other file by Idhris 25-05-2016 
    protected void applicationFormateRights()
    {
        try
        {
            //string value = d2.GetFunction("select value from Master_Settings where settings ='Application Formate Setting' and usercode ='" + usercode + "'");
            if (ddlAppFormat.SelectedIndex == 0)
            {
                formatevalue = "0";
                IsEnquiry.Visible = true;
            }
            else if (ddlAppFormat.SelectedIndex == 1)
            {
                formatevalue = "1"; IsEnquiry.Visible = false;
                ddl_coursetype_OnSelectedIndexChanged(new object(), new EventArgs());//added abarna 27.03.2018
            }
        }
        catch { }
    }
    protected void appFormateRights()//delsis
    {
        try
        {
            if (ddlcollege.Items.Count > 0)
            {
                ddlAppFormat.Items.Clear();
                string value = d2.GetFunction("select LinkValue from New_InsSettings where LinkName ='Application Format' and college_code='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "'");
                if (value == "0")
                    ddlAppFormat.Items.Insert(0, new ListItem("Format1"));
                if (value == "1")
                {
                    ddlAppFormat.Items.Insert(0, new ListItem("Select"));
                    ddlAppFormat.Items.Insert(1, new ListItem("Format2"));
                }
                if (value == "2")
                {
                    ddlAppFormat.Items.Insert(0, new ListItem("Format1"));
                    ddlAppFormat.Items.Insert(1, new ListItem("Format2"));
                }
            }
        }
        catch { }
    }
    protected void educationLevel1()
    {
        try
        {
            //ddl_coursetype.Items.Clear();
            string SelectQ = "select distinct Edu_Level,Priority  from course  where  college_code='" + ddl_college.SelectedItem.Value + "'  order by Edu_Level desc";
            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(SelectQ, "Text");
            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
            {
                //ddl_coursetype.DataSource = ds1;
                //ddl_coursetype.DataTextField = "Edu_Level";
                //ddl_coursetype.DataValueField = "Edu_Level";
                //ddl_coursetype.DataBind();
            }
        }
        catch { }
    }
    protected void loadChiocenew()
    {
        try
        {
            ddl_courseone.Items.Clear();
            string clgcode = Convert.ToString(ddl_college.SelectedItem.Value);
            string educlevel = "";
            string SelectQ = "select distinct  dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + clgcode + "'  ";
            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(SelectQ, "Text");
            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
            {
                ddl_courseone.DataSource = ds1;
                ddl_courseone.DataTextField = "name";
                ddl_courseone.DataValueField = "Degree_Code";
                ddl_courseone.DataBind();
            }
            string courseid = Convert.ToString(ddl_courseone.SelectedItem.Value);
            if (appnovalue == "1")
            {
                //txt_appfromno.Text = genearateApplNo(clgcode, courseid);
                int format = 0;
                txt_appfromno.Text = generateApplNo(clgcode, Convert.ToInt32(courseid), "", "", "", ddlbatch2.SelectedValue, out format);
                if (txt_appfromno.Text.Trim() == "")
                {
                    txt_appfromno.Text = "";
                    //txt_appfromno.Enabled = true;
                }
                else
                {
                    //txt_appfromno.Enabled = false;
                }
            }
            else
            {
                //txt_appfromno.Enabled = true;
            }
        }
        catch { }
    }
    protected void loadChioce2new()
    {
        try
        {
            
            string clgcode = Convert.ToString(ddl_college.SelectedItem.Value);
            string educlevel = "";
            string SelectQ = "select distinct  dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + clgcode + "' ";
            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(SelectQ, "Text");
            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                {
                    if (ds1.Tables[0].Rows[i][2].ToString().Trim() != ddl_courseone.SelectedItem.Value)
                    {
                        ListItem ls = new ListItem(ds1.Tables[0].Rows[i][0].ToString().Trim(), ds1.Tables[0].Rows[i][2].ToString().Trim());
                       
                    }
                }
               
            }
        }
        catch { }
    }
    public void binduggird()
    {
        try
        {
            Hashtable hashlist = new Hashtable();
            DataTable dt = new DataTable();
            dt.Columns.Add("Type", typeof(string));
            dt.Columns.Add("Subject", typeof(string));
            dt.Columns.Add("reg");
            dt.Columns.Add("actmark");
            dt.Columns.Add("maximark");
            dt.Columns.Add("passmonth");
            dt.Columns.Add("passyear");
            dt.Columns.Add("noofatm");
            hashlist.Add(0, "Language1");
            hashlist.Add(1, "Language2");
            hashlist.Add(2, "Subject1");
            hashlist.Add(3, "Subject2");
            if (rbVocation1.Checked)
            {
                hashlist.Add(4, "Subject3");
                hashlist.Add(5, "Subject4");
            }
            else
            {
                hashlist.Add(4, "Practical1");
                hashlist.Add(5, "Practical2");
            }
            for (int i = 0; i < 6; i++)
            {
                string value = Convert.ToString(hashlist[i]);
                dt.Rows.Add(value, "", "", "", "", "", "", "");
            }
            // ViewState["CurrentTable"] = dt;
            UgGrid.DataSource = dt;
            UgGrid.DataBind();
        }
        catch
        {
        }
    }
    protected void bindnationalitymothertonguebloodgroup()
    {
        try
        {
            ddlbloodgroup.Items.Clear();
            ddlmothertounge.Items.Clear();
            ddlcountry.Items.Clear();
            ddloccupation.Items.Clear();
            ddlmotheroccupation.Items.Clear();
            ddlpstate.Items.Clear();
            ddlcstate.Items.Clear();
            ddlstatequalify.Items.Clear();
            ddlmediumstudy.Items.Clear();
            ddlmediumofstudyXII.Items.Clear();
            ddldistinctionsports.Items.Clear();
            DropDownList4.Items.Clear();
            ddlccountry.Items.Clear();
            ddlpcountry.Items.Clear();
            ddlpcountry.Items.Clear();
            ddlUniv.Items.Clear();
            string q = "  select distinct textval,textcode from textvaltable where TextCriteria='bgrou' and college_code='" + Convert.ToString(collegecode) + "' and textval is not null and textval<>''";
            q = q + "  select textval,textcode from textvaltable where TextCriteria='mton' and textval is not null and textval<>'' and college_code='" + Convert.ToString(collegecode) + "' and textval is not null and textval<>''  order by textval ";
            q = q + "  select textval,textcode from textvaltable where TextCriteria='citi' and textval is not null and textval<>'' and college_code='" + Convert.ToString(collegecode) + "'  ";
            //magesh 26.9.18
           // q = q + "  select distinct textval,textcode from textvaltable where TextCriteria='foccu' and college_code='" + Convert.ToString(collegecode) + "' and textval is not null and textval<>''  ";
            q = q + "  select distinct textval,textcode from textvaltable where TextCriteria='moccu' and college_code='" + Convert.ToString(collegecode) + "' and textval is not null and textval<>''  ";
            q = q + "  select TextCode,textval from textvaltable where TextCriteria like '%state%' and college_code='" + Convert.ToString(collegecode) + "' and textval<>''and textval<>'-' ";
            q = q + "  select textval,textcode from textvaltable where TextCriteria='PLang' and textval is not null and textval<>'' and college_code='" + Convert.ToString(collegecode) + "'  order by textval ";
            q = q + "  select distinct textval,textcode from textvaltable where TextCriteria='sport' and college_code='" + Convert.ToString(ddl_college.SelectedItem.Value) + "' and textval is not null and textval<>'' ";
            q = q + "  select textval,textcode from textvaltable where TextCriteria='cocur' and textval is not null and textval<>'' and college_code='" + ddl_college.SelectedItem.Value + "'  order by textval  ";
            q = q + " select TextCode,textval from TextValTable where TextCriteria ='unive' and TextCriteria2 ='unive1' and college_code='" + ddl_college.SelectedItem.Value + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(q, "TEXT");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlbloodgroup.DataSource = ds.Tables[0];
                ddlbloodgroup.DataTextField = "textval";
                ddlbloodgroup.DataValueField = "TextCode";
                ddlbloodgroup.DataBind();
            }
            if (ds.Tables[1].Rows.Count > 0)
            {
                ddlmothertounge.DataSource = ds.Tables[1];
                ddlmothertounge.DataTextField = "textval";
                ddlmothertounge.DataValueField = "TextCode";
                ddlmothertounge.DataBind();
            }
            if (ds.Tables[2].Rows.Count > 0)
            {
                ddlcountry.DataSource = ds.Tables[2];
                ddlcountry.DataTextField = "textval";
                ddlcountry.DataValueField = "TextCode";
                ddlcountry.DataBind();
            }
            if (ds.Tables[3].Rows.Count > 0)
            {
                ddloccupation.DataSource = ds.Tables[3];
                ddloccupation.DataTextField = "textval";
                ddloccupation.DataValueField = "TextCode";
                ddloccupation.DataBind();
                ddlmotheroccupation.DataSource = ds.Tables[3];
                ddlmotheroccupation.DataTextField = "textval";
                ddlmotheroccupation.DataValueField = "TextCode";
                ddlmotheroccupation.DataBind();
            }
            if (ds.Tables[4].Rows.Count > 0)
            {
                ddlpstate.DataSource = ds.Tables[4];
                ddlpstate.DataTextField = "textval";
                ddlpstate.DataValueField = "TextCode";
                ddlpstate.DataBind();
                ddlcstate.DataSource = ds.Tables[4];
                ddlcstate.DataTextField = "textval";
                ddlcstate.DataValueField = "TextCode";
                ddlcstate.DataBind();
                ddlstatequalify.DataSource = ds.Tables[4];
                ddlstatequalify.DataTextField = "textval";
                ddlstatequalify.DataValueField = "TextCode";
                ddlstatequalify.DataBind();
            }
            if (ds.Tables[5].Rows.Count > 0)
            {
                ddlmediumstudy.DataSource = ds.Tables[5];
                ddlmediumstudy.DataTextField = "textval";
                ddlmediumstudy.DataValueField = "TextCode";
                ddlmediumstudy.DataBind();
                ddlmediumofstudyXII.DataSource = ds.Tables[5];
                ddlmediumofstudyXII.DataTextField = "textval";
                ddlmediumofstudyXII.DataValueField = "TextCode";
                ddlmediumofstudyXII.DataBind();
            }
            if (ds.Tables[6].Rows.Count > 0)
            {
                ddldistinctionsports.DataSource = ds.Tables[6];
                ddldistinctionsports.DataTextField = "textval";
                ddldistinctionsports.DataValueField = "TextCode";
                ddldistinctionsports.DataBind();
            }
            ddldistinctionsports.Items.Insert(0, "Select");
            ddldistinctionsports.Items.Insert(ddldistinctionsports.Items.Count, "Others");
            if (ds.Tables[7].Rows.Count > 0)
            {
                DropDownList4.DataSource = ds.Tables[7];
                DropDownList4.DataTextField = "textval";
                DropDownList4.DataValueField = "TextCode";
                DropDownList4.DataBind();
            }
            if (ds.Tables[8].Rows.Count > 0)
            {
                ddlUniv.DataSource = ds.Tables[8];
                ddlUniv.DataTextField = "textval";
                ddlUniv.DataValueField = "TextCode";
                ddlUniv.DataBind();
            }
            ddlUniv.Items.Insert(0, new ListItem("Select", "0"));
            ddlUniv.Items.Insert(Convert.ToInt32(ddlUniv.Items.Count), "Others");
            DropDownList4.Items.Insert(0, new ListItem("Select", "0"));
            DropDownList4.Items.Insert(Convert.ToInt32(DropDownList4.Items.Count), "Others");
            ddlbloodgroup.Items.Insert(0, new ListItem("Select", "0"));
            ddlmothertounge.Items.Insert(0, new ListItem("Select", "0"));
            ddlcountry.Items.Insert(0, new ListItem("Select", "0"));
            ddlbloodgroup.Items.Insert(Convert.ToInt32(ddlbloodgroup.Items.Count), "Others");
            ddlmothertounge.Items.Insert(Convert.ToInt32(ddlmothertounge.Items.Count), "Others");
            ddlcountry.Items.Insert(Convert.ToInt32(ddlcountry.Items.Count), "Others");
            ddloccupation.Items.Insert(0, new ListItem("Select", "0"));
            ddloccupation.Items.Insert(Convert.ToInt32(ddloccupation.Items.Count), "Others");
            ddlmotheroccupation.Items.Insert(0, new ListItem("Select", "0"));
            ddlmotheroccupation.Items.Insert(Convert.ToInt32(ddlmotheroccupation.Items.Count), "Others");
            ddlpstate.Items.Insert(0, new ListItem("Select", "0"));
            ddlpstate.Items.Insert(Convert.ToInt32(ddlpstate.Items.Count), "Others");
            ddlcstate.Items.Insert(0, new ListItem("Select", "0"));
            ddlcstate.Items.Insert(Convert.ToInt32(ddlcstate.Items.Count), "Others");
            ddlmediumstudy.Items.Insert(0, new ListItem("Select", "0"));
            ddlmediumstudy.Items.Insert(Convert.ToInt32(ddlmediumstudy.Items.Count), "Others");
            ddlmediumofstudyXII.Items.Insert(0, new ListItem("Select", "0"));
            ddlmediumofstudyXII.Items.Insert(Convert.ToInt32(ddlmediumofstudyXII.Items.Count), "Others");
            ddlccountry.DataSource = countrylist();
            ddlccountry.DataBind();
           // ddlccountry.Items.Insert(0, new ListItem("Select", "0"));
            //ddlccountry.Items.Insert(Convert.ToInt32(ddlccountry.Items.Count), "Others");
            ddlpcountry.DataSource = countrylist();
            ddlpcountry.DataBind();
          //  ddlpcountry.Items.Insert(0, new ListItem("Select", "0"));

            if (ddlmothertounge.Items.Count > 0)
                ddlmothertounge.SelectedIndex = 0;
            if (ddloccupation.Items.Count > 0)
                ddloccupation.SelectedIndex = 0;
            if (ddlmotheroccupation.Items.Count > 0)
                ddlmotheroccupation.SelectedIndex = 0;
        }
        catch { }
    }
    public List<string> countrylist()
    {
        List<string> Countrylistnew = new List<string>();
        CultureInfo[] get = CultureInfo.GetCultures(CultureTypes.SpecificCultures);
        foreach (CultureInfo getcul in get)
        {
            RegionInfo getregion = new RegionInfo(getcul.LCID);
            if (!(Countrylistnew.Contains(getregion.EnglishName)))
            {
                Countrylistnew.Add(getregion.EnglishName);
            }
        }
        //Countrylistnew.Sort();
        if (Countrylistnew.Contains("India"))//delsi2702
        {
            Countrylistnew[0] = "India";
        }
        return Countrylistnew;
    }
    public void bindexam()
    {
        try
        {
            ddlexamination.Items.Clear();
            ddlexaminationug.Items.Clear();
            //string examquery = "select TextCode,TextVal  from textvaltable where TextCriteria='cours' and TextCriteria2='UG' and college_code=" + Convert.ToString(collegecode) + "";
            //examquery = examquery + " select TextCode,TextVal  from textvaltable where TextCriteria='cours' and TextCriteria2='PG' and college_code=" + Convert.ToString(collegecode) + "";
            string examquery = "select TextCode,TextVal  from textvaltable where TextCriteria='cours' and college_code=" + Convert.ToString(ddl_college.SelectedValue) + "";
            examquery = examquery + "-- select TextCode,TextVal  from textvaltable where TextCriteria='cours' and college_code=" + Convert.ToString(ddl_college.SelectedValue) + "";
            ds1 = d2.select_method_wo_parameter(examquery, "Text");
            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
            {
                ddlexamination.DataSource = ds1.Tables[0];
                ddlexamination.DataTextField = "TextVal";
                ddlexamination.DataValueField = "TextCode";
                ddlexamination.DataBind();
                //}
                //if (ds1.Tables[0].Rows.Count > 0)
                //{
                ddlexaminationug.DataSource = ds1.Tables[0];
                ddlexaminationug.DataTextField = "TextVal";
                ddlexaminationug.DataValueField = "TextCode";
                ddlexaminationug.DataBind();
            }
            ddlexamination.Items.Insert(0, "Select");
            ddlexaminationug.Items.Insert(0, "Select");
            ddlexamination.Items.Insert(Convert.ToInt32(ddlexamination.Items.Count), "Others");
            ddlexaminationug.Items.Insert(Convert.ToInt32(ddlexaminationug.Items.Count), "Others");
        }
        catch
        {
        }
    }
    public void loadreligion1()
    {
        try
        {
            string religion = "";
            cbl_religion.Items.Clear();
            ddlreligion.Items.Clear();
            //string reliquery = " select TextCode,textval from textvaltable where TextCriteria like '%relig%' and college_code='" + ddlcollege.SelectedItem.Value + "' and textval<>''and textval<>'-' and TextCriteria2='relig1'";
            string reliquery = " select TextCode,textval from textvaltable where TextCriteria like '%relig%' and college_code='" + ddlcollege.SelectedItem.Value + "' and textval<>''and textval<>'-'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(reliquery, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_religion.DataSource = ds;
                    cbl_religion.DataTextField = "TextVal";
                    cbl_religion.DataValueField = "TextCode";
                    cbl_religion.DataBind();
                    ddlreligion.DataSource = ds;
                    ddlreligion.DataTextField = "TextVal";
                    ddlreligion.DataValueField = "TextCode";
                    ddlreligion.DataBind();
                    //if (cbl_religion.Items.Count > 0)
                    //{
                    //    for (int i = 0; i < cbl_religion.Items.Count; i++)
                    //    {
                    //        cbl_religion.Items[i].Selected = true;
                    //        religion = Convert.ToString(cbl_religion.Items[i].Text);
                    //    }
                    //    if (cbl_religion.Items.Count == 1)
                    //    {
                    //        txt_religion.Text = "" + religion + "";
                    //    }
                    //    else
                    //    {
                    //        txt_religion.Text = "Religion(" + cbl_religion.Items.Count + ")";
                    //    }
                    //    cb_religion.Checked = true;
                    //}
                }
            }
            else
            {
                txt_religion.Text = "--Select--";
                cb_religion.Checked = false;
            }
        }
        catch
        {
        }
    }
    public void loadcommunity1()
    {
        try
        {
            string comm = "";
            //string selq = "select TextCode,textval from textvaltable where TextCriteria like '%comm%' and college_code='" + ddlcollege.SelectedItem.Value + "' and textval<>''and textval<>'-' and TextCriteria2='comm1' order by textval ";
            string selq = "select TextCode,textval from textvaltable where TextCriteria like '%comm%' and college_code='" + ddlcollege.SelectedItem.Value + "' and textval<>''and textval<>'-' order by textval ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selq, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ddlcoummunity.DataSource = ds;
                    ddlcoummunity.DataTextField = "TextVal";
                    ddlcoummunity.DataValueField = "TextCode";
                    ddlcoummunity.DataBind();
                }
            }
            else
            {
            }
        }
        catch
        {
        }
    }
    public void loadtype()
    {
        try
        {
            
            //string type = "";
            //string deptquery = "select distinct case when mode =1 then 'Regular' when mode =2 then 'Lateral'  when mode =3 then 'Transfer' end as Modename,mode from Registration r,Degree g where r.degree_code = g.Degree_Code and g.college_code in('" + ddl_college.SelectedItem.Value + "') order by mode";
            //ds.Clear();
            //ds = d2.select_method_wo_parameter(deptquery, "Text");
            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    ddl_mode.DataSource = ds;
            //    ddl_mode.DataTextField = "Modename";
            //    ddl_mode.DataValueField = "mode";
            //    ddl_mode.DataBind();
            //}
            
        }
        catch { }
        
    }
    public void clearall()
    {
        txt_cutofpg.Text = "";
        txt_cutof.Text = "";
        txt_FName_app.Text = "";
        txt_placeofbirth.Text = "";
        txt_LName_app.Text = "";
        txt_othernationality.Text = "";
        txtCommunity.Text = "";
        txt_otherbloodgroup.Text = "";
        txt_otherreligion.Text = "";
        txt_Caste.Text = "";
        txt_mothertounge.Text = "";
        txt_Aadharcardno.Text = "";
        txt_occupation.Text = "";
        txt_parentsname.Text = "";
        txt_fathernametamil.Text = "";
        txt_annualincome.Text = "";
        txt_occupation.Text = "";
        txt_fathercontactno.Text = "";
        txt_fathercontactno2.Text = "";//Deepali 7.4.18
        txt_mothername.Text = "";
        txt_motherannualincome.Text = "";
        txt_motheremail.Text = "";
        txt_guardiananme.Text = "";
        txt_fatheremail.Text = "";
        txt_motheroccupation.Text = "";
        txt_mothercontactno.Text = "";
        txt_guardianconatactno.Text = "";
        txt_guardianemail.Text = "";
        txt_address1.Text = "";
        txt_address2.Text = "";
        txt_address3.Text = "";
        txt_Pcity.Text = "";
        txt_potherstate.Text = "";
        txt_postelcode.Text = "";
        if (ddlpcountry.Items.Count > 0)
            ddlpcountry.SelectedIndex = 0;
        txt_pcountry.Text = "";
        
        
        txt_std.Text = "";
        txt_phonenumber.Text = "";
        
        txt_board.Text = "";
        txt_Name_of_school.Text = "";
        txt_location_scholl.Text = "";
        txt_mediumstudy.Text = "";
        txt_ddlmediumofStudyXII.Text = "";
        rbMarksGrade.SelectedIndex = 0;
        txt_totalmark.Text = "";
        avgtext.Text = "";
        txt_appfromno.Text = "";
        txt_percentage.Text = "";
        txt_allsubjectpercentage.Text = "";
        txt_majorsubjectpercentage.Text = "";
        txt_majorandalliedsubjectpercentage.Text = "";
        txt_SecMrk1.Text = "";
        txt_SecMrk2.Text = "";
        txt_SecMrk3.Text = "";
        txt_SecMrk4.Text = "";
        txt_SecMrk5.Text = "";
        txt_maxmark1.Text = "";
        txt_maxmark2.Text = "";
        txt_maxmark3.Text = "";
        txt_maxmark4.Text = "";
        txt_maxmark5.Text = "";
        txt_avg1.Text = "";
        txt_avg2.Text = "";
        txt_avg3.Text = "";
        txt_avg4.Text = "";
        txt_avg5.Text = "";
        if (ddlexamination.Items.Count > 0)
            ddlexamination.SelectedIndex = 0;
        if (ddltypeofmajor.Items.Count > 0)
            ddltypeofmajor.SelectedIndex = 0;
        if (ddlUniv.Items.Count > 0)
            ddlUniv.SelectedIndex = 0;
        if (ddltypeofsemester.Items.Count > 0)
            ddltypeofsemester.SelectedIndex = 0;
        if (DropDownList1.Items.Count > 0)
            DropDownList1.SelectedIndex = 0;
        if (DropDownList2.Items.Count > 0)
            DropDownList2.SelectedIndex = 0;
        txt_major.Text = "";
        txt_mediumofstudy.Text = "";
        txt_regnomarksheet.Text = "";
        txt_locationofcollege.Text = "";
        txt_nameofcollege.Text = "";
        //rdbsameyes.Checked = true;
        // bindnationalitymothertonguebloodgroup();
        // bindexam();
        GV1.Visible = false;
        div_cer.Visible = false;
        //New 27-05-2016 Idhris
        //Tab1
        
        if (ddl_college.Items.Count > 0)
            ddl_college.SelectedIndex = 0;
        
        if (ddl_courseone.Items.Count > 0)
            ddl_courseone.SelectedIndex = 0;
        
        
        if (ddl_seattype2.Items.Count > 0)
            ddl_seattype2.SelectedIndex = 0;
       
        string appl_No = string.Empty;
        if (IsAppNoAutoGenerate())
        {
            int format = 0;
            appl_No = generateApplNo(ddl_college.SelectedItem.Value, Convert.ToInt32(ddl_courseone.SelectedValue), "", "", "", ddlbatch2.SelectedValue, out format);
            //genearateApplNo(Convert.ToString(ddl_college.SelectedItem.Value), Convert.ToString(ddl_courseone.SelectedItem.Value)); 
            txt_appfromno.Enabled = false;
            txtapplno.Enabled = false;
        }
        else
        {
            txtapplno.Enabled = true;
            txt_appfromno.Enabled = true;
        }
        txt_appfromno.Text = appl_No;
        txt_appfromno.Text = appl_No;
        txt_appliaddate.Text = DateTime.Now.ToString("dd/MM/yyyy");
        
        txtIdMark1.Text = "";
        txtIdMark2.Text = "";
        if (ddlbatch2.Items.Count > 0)
            ddlbatch2.SelectedIndex = 0;
        //if (ddldobdate.Items.Count > 0)
        //    ddldobdate.SelectedIndex = 0;
        //if (ddldobMonth.Items.Count > 0)
        //    ddldobMonth.SelectedIndex = 0;
        //if (ddldobYear.Items.Count > 0)
        //    ddldobYear.SelectedIndex = 0;
        txt_dob.Text = DateTime.Now.ToString("dd/MM/yyyy");
        txt_age.Text = "";
        txt_age.Text = "";
        
        
        if (ddlfaterquali.Items.Count > 0)
            ddlfaterquali.SelectedIndex = 0;
        if (ddlmotherqual.Items.Count > 0)
            ddlmotherqual.SelectedIndex = 0;
        if (ddloccupation.Items.Count > 0)
            ddloccupation.SelectedIndex = 0;
        if (ddlmotheroccupation.Items.Count > 0)
            ddlmotheroccupation.SelectedIndex = 0;
        txt_caddress1.Text = "";
        txt_caddress2.Text = "";
        txt_caddress3.Text = "";
        txt_ccity.Text = "";
        if (ddlcstate.Items.Count > 0)
        {
            ddlcstate.SelectedIndex = 0;
            ddlcstate.SelectedIndex = ddlcstate.Items.IndexOf(ddlcstate.Items.FindByText("Tamil Nadu"));
        }
        if (ddlpstate.Items.Count > 0)
        {
            ddlpstate.SelectedIndex = 0;
            ddlpstate.SelectedIndex = ddlpstate.Items.IndexOf(ddlpstate.Items.FindByText("Tamil Nadu"));
        }
        if (ddlccountry.Items.Count > 0)
            ddlccountry.SelectedIndex = 0;
        txt_ccountry.Text = "";
        txt_cpostelcode.Text = "";
        txt_cstd.Text = "";
        txt_cphonenumber.Text = "";
        rbVocation1.Checked = true;
        rbVocation.Checked = false;
        rbMarksGrade.SelectedIndex = 0;
        if (ddlexaminationug.Items.Count > 0)
            ddlexaminationug.SelectedIndex = 0;
        if (ddlmediumstudy.Items.Count > 0)
            ddlmediumstudy.SelectedIndex = 0;
        if (ddlmediumofstudyXII.Items.Count > 0)
            ddlmediumofstudyXII.SelectedIndex = 0;
        if (ddlstatequalify.Items.Count > 0)
        {
            ddlstatequalify.SelectedIndex = 0;
            ddlstatequalify.SelectedIndex = ddlstatequalify.Items.IndexOf(ddlstatequalify.Items.FindByText("Tamil Nadu"));
        }
        rbMarksGrade_IndexChange(new object(), new EventArgs());
        txt_totalmark.Text = "";
        avgtext.Text = "";
        txt_percentage.Text = "";
        if (ddlsex2.Items.Count > 0)
            ddlsex2.SelectedIndex = 0;
        if (ddlcountry.Items.Count > 0)
            ddlcountry.SelectedIndex = 0;
        if (ddlcoummunity.Items.Count > 0)
            ddlcoummunity.SelectedIndex = 0;
        if (ddlbloodgroup.Items.Count > 0)
            ddlbloodgroup.SelectedIndex = 0;
        if (ddlmothertounge.Items.Count > 0)
            ddlmothertounge.SelectedIndex = 0;
        if (ddlreligion.Items.Count > 0)
            ddlreligion.SelectedIndex = 0;
        if (ddlsubreligion.Items.Count > 0)
            ddlsubreligion.SelectedIndex = 0;
        
        //Tab2
        rdbtaanN.Checked = true;
        rdbtaany.Checked = false;
        rdbexN.Checked = true;
        rdbexy.Checked = true;
        txtExservRank.Text = "";
        txtExservPlace.Text = "";
        txtExservNum.Text = "";
        RadioButton2.Checked = true;
        RadioButton1.Checked = false;
        txt_otherdifferentlyable.Text = "";
        RadioButton4.Checked = true;
        RadioButton3.Checked = false;
        RadioButton6.Checked = true;
        RadioButton5.Checked = false;
        rdbdistinctionsportsNo.Checked = true;
        rdbdistinctionsportsYes.Checked = false;
        txt_sports.Text = "";
        txt_specify.Text = "";
        rdbextraactivitesNo.Checked = true;
        rdbextraactivitesYes.Checked = false;
        txt_extraactivites.Text = "";
        txt_specifyNcc.Text = "";
        rdb_bloodno.Checked = false;
        rdb_bloodyes.Checked = false;
        rblMissionChild.SelectedIndex = 1;
        rblReservCast.SelectedIndex = 1;
        rblEcoBack.SelectedIndex = 1;
        rblparentOld.SelectedIndex = 1;
        rblDrivLic.SelectedIndex = 1;
        txtDrivLic.Text = "";
        rblFeeWaiver.SelectedIndex = 1;
        rblInsurance.SelectedIndex = 1;
        txtInsureAmt.Text = "";
        txtInsureBy.Text = "";
        txtInsureNominee.Text = "";
        txtInsureRelat.Text = "";
       
        txtLangPart2.Text = "";
        txtLangPart3.Text = "";
        txtAcaCourse.Text = "";
        txtAcaUniv.Text = "";
        txtAcaBran.Text = "";
        txtAcaInstitute.Text = "";
        txtAcaSecMarks.Text = "";
        txtAcaMaxMarks.Text = "";
        txtBnkAccFor.Text = "";
        txtBnkName.Text = "";
        txtBnkBran.Text = "";
        txtBnkAccNo.Text = "";
        txtBnkDebit.Text = "";
        txtBnkIFSC.Text = "";
        txtRelPhone.Text = "";
        txtrelRelship.Text = "";
        if (txtname_staff.Items.Count > 0)
            txtname_staff.SelectedIndex = 0;
        if (ddl_ReferStudent.Items.Count > 0)
            ddl_ReferStudent.SelectedIndex = 0;
        //txtname_staff.Text = "";
        lblStaffId.Text = "";
        TextBox3.Text = "";
        txtrefConsName.Text = "";
        txtRefAgent.Text = "";
        txtRefAmt.Text = "";
        txtRefAddres.Text = "";
        txtRefCity.Text = "";
        txtRefDist.Text = "";
        txtRefState.Text = "";
        txtRefPhone.Text = "";
        if (ddlPartLang2.Items.Count > 0)
            ddlPartLang2.SelectedIndex = 0;
        if (ddlPartLang3.Items.Count > 0)
            ddlPartLang3.SelectedIndex = 0;
        //Added By Saranyadevi 22.0.2018
        if (ddlscholarship.Items.Count > 0)
            ddlscholarship.SelectedIndex = 0;
        //End By Saranyadevi 22.0.2018
        if (ddlAcaCourse.Items.Count > 0)
            ddlAcaCourse.SelectedIndex = 0;
        if (ddlAcaUniv.Items.Count > 0)
            ddlAcaUniv.SelectedIndex = 0;
        if (ddlAcaBran.Items.Count > 0)
            ddlAcaBran.SelectedIndex = 0;
        if (ddlBnkAccFor.Items.Count > 0)
            ddlBnkAccFor.SelectedIndex = 0;
        if (ddlBnkName.Items.Count > 0)
            ddlBnkName.SelectedIndex = 0;
        rblReferredBy.SelectedIndex = 0;
        TabContainer1.ActiveTabIndex = 0;
        txt_weight.Text = "";
        txt_weight.Text = "";
        txtemis_no.Text = "";
    }
    public string subjectcode(string textcri, string subjename)
    {
        string subjec_no = "";
        try
        {
            string select_subno = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code ='" + ddl_college.SelectedItem.Value + "' and TextVal='" + subjename + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(select_subno, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
            }
            else
            {
                string insertquery = "insert into textvaltable(TextCriteria,TextVal,college_code) values('" + textcri + "','" + subjename + "','" + Convert.ToString(ddl_college.SelectedItem.Value) + "')";
                int result = d2.update_method_wo_parameter(insertquery, "Text");
                if (result != 0)
                {
                    string select_subno1 = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + Convert.ToString(ddl_college.SelectedItem.Value) + " and TextVal='" + subjename + "'";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(select_subno1, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                    }
                }
            }
        }
        catch
        {
        }
        return subjec_no;
    }
    public string subjectcode(string textcri, string subjename, string textcri2)
    {
        string subjec_no = "";
        try
        {
            string select_subno = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code ='" + ddl_college.SelectedItem.Value + "' and TextVal='" + subjename + "' and TextCriteria2='" + textcri2 + "' ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(select_subno, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
            }
            else
            {
                string insertquery = "insert into textvaltable(TextCriteria,TextVal,college_code,TextCriteria2) values('" + textcri + "','" + subjename + "','" + Convert.ToString(ddl_college.SelectedItem.Value) + "','" + textcri2 + "')";
                int result = d2.update_method_wo_parameter(insertquery, "Text");
                if (result != 0)
                {
                    string select_subno1 = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + Convert.ToString(ddl_college.SelectedItem.Value) + " and TextVal='" + subjename + "'  and TextCriteria2='" + textcri2 + "' ";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(select_subno1, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                    }
                }
            }
        }
        catch
        {
        }
        return subjec_no;
    }
    public void uploadnew(string appno)
    {
        try
        {
            for (int i = 0; i < GV1.Rows.Count; i++)
            {
                FileUpload fileupload = (FileUpload)GV1.Rows[i].FindControl("file_uplod");
                Label cert_id = (Label)GV1.Rows[i].FindControl("lbl_certval");
                string certificateid = Convert.ToString(cert_id.Text);
                bool savnotsflag = false;
                if (fileupload.HasFile)
                {
                    if (fileupload.FileName.EndsWith(".jpg") || fileupload.FileName.EndsWith(".gif") || fileupload.FileName.EndsWith(".png") || fileupload.FileName.EndsWith(".txt") || fileupload.FileName.EndsWith(".doc") || fileupload.FileName.EndsWith(".xls") || fileupload.FileName.EndsWith(".docx") || fileupload.FileName.EndsWith(".txt") || fileupload.FileName.EndsWith(".document") || fileupload.FileName.EndsWith(".xls") || fileupload.FileName.EndsWith(".xlsx") || fileupload.FileName.EndsWith(".pdf") || fileupload.FileName.EndsWith(".ppt") || fileupload.FileName.EndsWith(".pptx"))
                    {
                        string fileName = Path.GetFileName(fileupload.PostedFile.FileName);
                        string fileExtension = Path.GetExtension(fileupload.PostedFile.FileName);
                        string documentType = string.Empty;
                        switch (fileExtension)
                        {
                            case ".pdf":
                                documentType = "application/pdf";
                                break;
                            case ".xls":
                                documentType = "application/vnd.ms-excel";
                                break;
                            case ".xlsx":
                                documentType = "application/vnd.ms-excel";
                                break;
                            case ".doc":
                                documentType = "application/vnd.ms-word";
                                break;
                            case ".docx":
                                documentType = "application/vnd.ms-word";
                                break;
                            case ".gif":
                                documentType = "image/gif";
                                break;
                            case ".png":
                                documentType = "image/png";
                                break;
                            case ".jpg":
                                documentType = "image/jpg";
                                break;
                            case ".ppt":
                                documentType = "application/vnd.ms-ppt";
                                break;
                            case ".pptx":
                                documentType = "application/vnd.ms-pptx";
                                break;
                            case ".txt":
                                documentType = "application/txt";
                                break;
                        }
                        int fileSize = fileupload.PostedFile.ContentLength;
                        //Create array and read the file into it
                        byte[] documentBinary = new byte[fileSize];
                        fileupload.PostedFile.InputStream.Read(documentBinary, 0, fileSize);
                        string date = DateTime.Now.ToString("MM/dd/yyyy");
                        SqlCommand cmdnotes = new SqlCommand();
                        // string fileid = uploadvalue + "@" + uploadtime;
                        string fileid = "";
                        string tapalfilefk = "";
                        //string fileid =  + "@" +  ;
                        cmdnotes.CommandText = "if exists(select * from StudCertDetails_New where app_no='" + appno + "' and CertificateId='" + certificateid + "')update StudCertDetails_New  set FileName=@DocName, AttachDoc=@DocData, Filetype=@Type where app_no='" + appno + "' and CertificateId='" + certificateid + "'    else insert into StudCertDetails_New(filename,filetype,attachdoc)" + " VALUES (@DocName,@Type,@DocData)";
                        cmdnotes.CommandType = CommandType.Text;
                        cmdnotes.Connection = ssql;
                        SqlParameter DocName = new SqlParameter("@DocName", SqlDbType.VarChar, 100);
                        DocName.Value = fileName.ToString();
                        cmdnotes.Parameters.Add(DocName);
                        SqlParameter Type = new SqlParameter("@Type", SqlDbType.NVarChar, 100);
                        Type.Value = documentType.ToString();
                        cmdnotes.Parameters.Add(Type);
                        SqlParameter uploadedDocument = new SqlParameter("@DocData", SqlDbType.Binary, fileSize);
                        uploadedDocument.Value = documentBinary;
                        cmdnotes.Parameters.Add(uploadedDocument);
                        ssql.Close();
                        ssql.Open();
                        int result = cmdnotes.ExecuteNonQuery();
                        if (result > 0)
                        {
                            savnotsflag = true;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, collegecode, "StudentNewApplicationReport.aspx");
        }
    }
    public void certificatesave(string appno)
    {
        int ss = 0;
        string orginal = "";
        string duplicate = "";
        for (int i = 0; i < GV1.Rows.Count; i++)
        {
            CheckBox chkorginal = (CheckBox)GV1.Rows[i].FindControl("chk_orginal");
            CheckBox chk_Duplicate = (CheckBox)GV1.Rows[i].FindControl("chk_Duplicate");
            if (chkorginal.Checked == true)
            {
                orginal = "1";
            }
            else
            {
                orginal = "0";
            }
            if (chk_Duplicate.Checked == true)
            {
                duplicate = "1";
            }
            else
            {
                duplicate = "0";
            }
            Label certficatename = (Label)GV1.Rows[i].FindControl("lbl_certval");
            string certficatename1 = Convert.ToString(certficatename.Text);
            TextBox certificateno = (TextBox)GV1.Rows[i].FindControl("txt_certificate");
            string certificateno1 = Convert.ToString(certificateno.Text);
            string savequery = "if exists(SELECT * FROM StudCertDetails_New where app_no='" + appno + "' AND CertificateId='" + certficatename1 + "')update StudCertDetails_New set CertificateId='" + certficatename1 + "',CertificateNo='" + certificateno1 + "',isOrginal='" + orginal + "',isDuplicate='" + duplicate + "' where app_no='" + appno + "' and  CertificateId='" + certficatename1 + "' else INSERT INTO StudCertDetails_New(App_no,CertificateId,CertificateNo,isOrginal,isDuplicate) VALUES('" + appno + "','" + certficatename1 + "','" + certificateno1 + "','" + orginal + "','" + duplicate + "')";
            ss = d2.update_method_wo_parameter(savequery, "text");
        }
        uploadnew(appno);
    }
    public void btn_popupclose2_Click(object sender, EventArgs e)
    {
        popaddnewF2.Visible = false;
    }
    public void ddl_college_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_college.Items.Count > 0)
        {
            clgcode = Convert.ToString(ddl_college.SelectedItem.Value);
        }
        educationLevel1();
        loadChiocenew();
        loadChioce2new();
        turnVisibility();
        bindquto();//abarna
        ddl_coursetype_OnSelectedIndexChanged(new object(), new EventArgs());//added abarna 27.03.2018
    }
    protected void ddl_coursetype_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        loadChiocenew();
        loadChioce2new();
        
        //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
        //{
        //    totalfinddiv.Visible = true;
        //    UgGrid.Visible = true;
        //    pgmarkvalue.Visible = false;
        //    btnugaddrows.Visible = true;
        //    Marksgrid.Visible = false;
        //    pgtable.Visible = false;
        //    ugtable.Visible = true;
        //    pgnewmark.Visible = false;
        //    pgaddmark.Visible = false;
        //    totalfinddiv.Visible = true;
        //    INTERNAL.Visible = false;
        //    external.Visible = false;
        //    txt_internal.Visible = false;
        //    txt_external.Visible = false;
        //    GridView_mphil.Visible = false;
        //}
        //else if (ddl_coursetype.SelectedItem.Text == "M.Phil" || ddl_coursetype.SelectedItem.Text == "DOCTORATE")
        //{
        //    INTERNAL.Visible = true;
        //    external.Visible = true;
        //    txt_internal.Visible = true;
        //    txt_external.Visible = true;
        //    Marksgrid.Visible = false;
        //    GridView_mphil.Visible = true;
        //    UgGrid.Visible = false;
        //    totalfinddiv.Visible = false;
        //    btnugaddrows.Visible = false;
        //    pgtable.Visible = true;
        //    ugtable.Visible = false;
        //    totalfinddiv.Visible = false;
        //    pgmarkvalue.Visible = true;
        //    btn_addrows.Visible = true;
        //    ViewState["CurrentTablenew"] = null;
        //    pgaddmark.Visible = true;
        //    bindmardkgrid_mphil();
        //}
        //else
        //{
            GridView_mphil.Visible = false;
            INTERNAL.Visible = false;
            external.Visible = false;
            txt_internal.Visible = false;
            txt_external.Visible = false;
            UgGrid.Visible = false;
            totalfinddiv.Visible = false;
            btnugaddrows.Visible = false;
            pgmarkvalue.Visible = true;
            Marksgrid.Visible = true;
            pgtable.Visible = true;
            ugtable.Visible = false;
            pgnewmark.Visible = true;
            pgaddmark.Visible = true;
            totalfinddiv.Visible = false;
        //}
        string appl_No = "";
        int format = 0;
        string courseid = Convert.ToString(ddl_courseone.SelectedItem.Value);
        if (IsAppNoAutoGenerate())
        {
            appl_No = txt_appfromno.Text = generateApplNo(clgcode, Convert.ToInt32(courseid), "", "", "", ddlbatch2.SelectedValue, out format); ;
            txt_appfromno.Enabled = false;
            txtapplno.Enabled = false;
        }
        else
        {
            txtapplno.Enabled = true;
            txt_appfromno.Enabled = true;
        }
        txt_appfromno.Text = appl_No;
        txt_appfromno.Text = appl_No;
        CutoffCheck();
        turnVisibility();
    }
    protected void ddl_courseone_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        string appl_No = string.Empty;
        int format = 0;
        string courseid = Convert.ToString(ddl_courseone.SelectedItem.Value);
        clgcode = Convert.ToString(ddl_college.SelectedItem.Value);
        if (IsAppNoAutoGenerate())
        {
            appl_No = txt_appfromno.Text = generateApplNo(clgcode, Convert.ToInt32(courseid), "", "", "", ddlbatch2.SelectedValue, out format);
            txt_appfromno.Enabled = false;
            txtapplno.Enabled = false;
        }
        else
        {
            txtapplno.Enabled = true;
            txt_appfromno.Enabled = true;
        }
        txt_appfromno.Text = appl_No;
        // loadChioce2new();
        // ddl_coursetwo.Focus();
        loadChioce2new();
        turnVisibility();
    }
    protected void rbMarksGrade_IndexChange(object sender, EventArgs e)
    {
        if (rbMarksGrade.SelectedIndex == 0)
        {
            try
            {
                // bindmardkgrid();
                binduggird();
                //  bindugsubgrid();
                if (rbMarksGrade.SelectedIndex == 0)
                {
                    totalfinddiv.Visible = true;
                }
                else
                {
                    totalfinddiv.Visible = false;
                }
            }
            catch
            {
            }
        }
        else
        {
            try
            {
                value_flage = true;
                //bindmardkgrid();
                binduggird();
                // bindugsubgrid();
                if (rbMarksGrade.SelectedIndex == 1)
                {
                    totalfinddiv.Visible = false;
                }
                else
                {
                    totalfinddiv.Visible = true;
                }
            }
            catch
            {
            }
        }
        turnVisibility();
    }
    protected void ugbindgrid_Bound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                // string ddlvalue = ddlmarksgrade.SelectedItem.Text;
                if (rbMarksGrade.SelectedIndex == 0)
                {
                    e.Row.Cells[4].Visible = false;
                    e.Row.Cells[3].Visible = true;
                }
                else
                {
                    e.Row.Cells[4].Visible = true;
                    e.Row.Cells[3].Visible = false;
                }
                if (e.Row.RowIndex != 1)
                {
                    TextBox lnkWebURL = e.Row.FindControl("txt_subject56") as TextBox;
                    lnkWebURL.Visible = false;
                    lnkWebURL.Enabled = false;
                }
                if (e.Row.RowIndex == 1)
                {
                    TextBox lnkWebURL = e.Row.FindControl("txt_subject56") as TextBox;
                    DropDownList ddl = e.Row.FindControl("ddlugsubject") as DropDownList;
                    ddl.Visible = false;
                    lnkWebURL.Visible = true;
                    lnkWebURL.Enabled = true;
                }
            }
            if (e.Row.RowType == DataControlRowType.Header)
            {
                //string ddlvalue = ddlmarksgrade.SelectedItem.Text;
                if (rbMarksGrade.SelectedIndex == 0)
                {
                    e.Row.Cells[4].Visible = false;
                    e.Row.Cells[3].Visible = true;
                }
                else
                {
                    e.Row.Cells[4].Visible = true;
                    e.Row.Cells[3].Visible = false;
                }
                // e.Row.Cells[4].ColumnSpan = 2;
                // e.Row.Cells[4].Text = "Month & Year of Passing)";
            }
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                //if (e.Row.RowIndex != 1)
                //{
                //DropDownList ddl = (DropDownList)e.Row.FindControl("ddlugsubject");
                //ddl.Attributes.Add("onchange", "javascript:get('" + ddl.ClientID + "'");
                e.Row.Cells[1].Attributes["Onchange"] = Page.ClientScript.GetPostBackEventReference(UgGrid, "Select$" + e.Row.RowIndex);
                //}
                //    // e.Row.Cells[2].Attributes["onclick"] = Page.ClientScript.GetPostBackEventReference(typegrid, "instruction$" + e.Row.RowIndex);
            }
        }
        catch
        {
        }
    }
    protected void ddlugsubject_Change(object sender, EventArgs e)
    {
        try
        {
            int a = rowDdlIndxClicked();
            if (ddlstatequalify.SelectedItem.Text == "Others")
            {
                txt_otherstatequalify.Attributes.Add("Style", "display:block;");
                txt_otherstatequalify.Attributes.Add("Style", "float:left;");
            }
            if (ddlmediumstudy.SelectedItem.Text == "Others")
            {
                txt_mediumstudy.Attributes.Add("Style", "display:block;");
                txt_mediumstudy.Attributes.Add("Style", "float:left;");
            }
            if (ddlmediumofstudyXII.SelectedItem.Text == "Others")
            {
                txt_ddlmediumofStudyXII.Attributes.Add("Style", "display:block;");
                txt_ddlmediumofStudyXII.Attributes.Add("Style", "float:left;");
            }
            string value = (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text;
            if (value == "Others")
            {
                (UgGrid.Rows[a].FindControl("txt_subject56") as TextBox).Visible = true;
                (UgGrid.Rows[a].FindControl("txt_subject56") as TextBox).Enabled = true;
            }
            else
            {
                (UgGrid.Rows[a].FindControl("txt_subject56") as TextBox).Visible = false;
                (UgGrid.Rows[a].FindControl("txt_subject56") as TextBox).Enabled = false;
            }
            if (a != 0 && a != 1)
            {
                if (UgGrid.Rows.Count > 0)
                {
                    string select_value = (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text;
                    for (int row1 = 2; row1 < UgGrid.Rows.Count; row1++)
                    {
                        string select_value_check = (UgGrid.Rows[row1].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text;
                        if (select_value_check != "---Select---")
                        {
                            select_value = select_value + "'" + "," + "'" + select_value_check;
                        }
                    }
                    for (int row = 2; row < UgGrid.Rows.Count; row++)
                    {
                        string select1 = (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text;
                        if (select1 == "---Select---")
                        {
                            if (a != row)
                            {
                                if (select_value.Trim() != "---Select---" && select_value.Trim() != "Others")
                                {
                                    //string subjquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and textval not in ('" + select_value + "') and college_code ='" + Convert.ToString(Session["college_Code"]) + "' and TextCriteria2='subje1' order by textval";
                                    string subjquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and textval not in ('" + select_value + "') and college_code ='" + Convert.ToString(Session["college_Code"]) + "'  order by textval";
                                    ds.Clear();
                                    ds = d2.select_method_wo_parameter(subjquery, "Text");
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataSource = ds;
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataTextField = "textval";
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataValueField = "TextCode";
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataBind();
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Insert(0, "---Select---");
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Insert((UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Count, "Others");
                                    }
                                }
                            }
                        }
                        else
                        {
                            //string subjquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and textval not in ('" + select_value + "') and college_code ='" + Convert.ToString(Session["college_Code"]) + "' and TextCriteria2='subje1' order by textval";
                            string subjquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and textval not in ('" + select_value + "') and college_code ='" + Convert.ToString(Session["college_Code"]) + "'  order by textval";
                            ds.Clear();
                            ds = d2.select_method_wo_parameter(subjquery, "Text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataSource = ds;
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataTextField = "textval";
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataValueField = "TextCode";
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataBind();
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Insert(0, "---Select---");
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Insert((UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Count, "Others");
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text = select1.ToString();
                            }
                        }
                    }
                }
            }
        }
        catch
        {
        }
    }
    protected void uggirdrowcommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int a = Convert.ToInt32(e.CommandArgument);
            if (ddlstatequalify.SelectedItem.Text == "Others")
            {
                txt_otherstatequalify.Attributes.Add("Style", "display:block;");
                txt_otherstatequalify.Attributes.Add("Style", "float:left;");
            }
            if (ddlmediumstudy.SelectedItem.Text == "Others")
            {
                txt_mediumstudy.Attributes.Add("Style", "display:block;");
                txt_mediumstudy.Attributes.Add("Style", "float:left;");
            }
            if (ddlmediumofstudyXII.SelectedItem.Text == "Others")
            {
                txt_ddlmediumofStudyXII.Attributes.Add("Style", "display:block;");
                txt_ddlmediumofStudyXII.Attributes.Add("Style", "float:left;");
            }
            string value = (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text;
            if (value == "Others")
            {
                (UgGrid.Rows[a].FindControl("txt_subject56") as TextBox).Visible = true;
                (UgGrid.Rows[a].FindControl("txt_subject56") as TextBox).Enabled = true;
            }
            else
            {
                (UgGrid.Rows[a].FindControl("txt_subject56") as TextBox).Visible = false;
                (UgGrid.Rows[a].FindControl("txt_subject56") as TextBox).Enabled = false;
            }
            if (a != 0 && a != 1)
            {
                if (UgGrid.Rows.Count > 0)
                {
                    string select_value = (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text;
                    for (int row1 = 2; row1 < UgGrid.Rows.Count; row1++)
                    {
                        string select_value_check = (UgGrid.Rows[row1].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text;
                        if (select_value_check != "---Select---")
                        {
                            select_value = select_value + "'" + "," + "'" + select_value_check;
                        }
                    }
                    for (int row = 2; row < UgGrid.Rows.Count; row++)
                    {
                        string select1 = (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text;
                        if (select1 == "---Select---")
                        {
                            if (a != row)
                            {
                                if (select_value.Trim() != "---Select---" && select_value.Trim() != "Others")
                                {
                                    //string subjquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and textval not in ('" + select_value + "') and college_code ='" + Convert.ToString(Session["college_Code"]) + "' and TextCriteria2='subje1' order by textval";
                                    string subjquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and textval not in ('" + select_value + "') and college_code ='" + Convert.ToString(Session["college_Code"]) + "'  order by textval";
                                    ds.Clear();
                                    ds = d2.select_method_wo_parameter(subjquery, "Text");
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataSource = ds;
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataTextField = "textval";
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataValueField = "TextCode";
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataBind();
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Insert(0, "---Select---");
                                        (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Insert((UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Count, "Others");
                                    }
                                }
                            }
                        }
                        else
                        {
                            //string subjquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and textval not in ('" + select_value + "') and college_code ='" + Convert.ToString(Session["college_Code"]) + "' and TextCriteria2='subje1' order by textval";
                            string subjquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and textval not in ('" + select_value + "') and college_code ='" + Convert.ToString(Session["college_Code"]) + "'  order by textval";
                            ds.Clear();
                            ds = d2.select_method_wo_parameter(subjquery, "Text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataSource = ds;
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataTextField = "textval";
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataValueField = "TextCode";
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).DataBind();
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Insert(0, "---Select---");
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Insert((UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).Items.Count, "Others");
                                (UgGrid.Rows[row].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text = select1.ToString();
                            }
                        }
                    }
                }
            }
        }
        catch
        {
        }
    }
    protected void uggridDatabound(object sender, EventArgs e)
    {
        try
        {
            string englisquery = "";
            if (UgGrid.Rows.Count > 0)
            {
                for (int a = 0; a < UgGrid.Rows.Count; a++)
                {
                    if (a == 0)
                    {
                        englisquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "'  order by textval";
                        //englisquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "'  and  TextCriteria2='subj1'  order by textval";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(englisquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataSource = ds;
                            (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataTextField = "textval";
                            (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataValueField = "TextCode";
                            (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataBind();
                        }
                        (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).Items.Insert(0, "---Select---");
                        (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).Items.Insert((UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).Items.Count, "Others");
                    }
                    if (a == 1)
                    {
                        englisquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "'  and textval = 'english' order by textval";
                        //englisquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' and  TextCriteria2='subj2' order by textval";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(englisquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            (UgGrid.Rows[a].FindControl("txt_subject56") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[0]["textval"]);
                            (UgGrid.Rows[a].FindControl("txt_subject56") as TextBox).Attributes.Add("readonly", "readonly");
                            //(UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataTextField = "textval";
                            //(UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataValueField = "TextCode";
                            //(UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataBind();
                        }
                        //(UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).Items.Insert(Convert.ToInt32((UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).Items.Count), "Others");
                    }
                    else if (a != 0 && a != 1)
                    {
                        //string subjquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' and TextCriteria2='subje1' order by textval";
                        string subjquery = "select TextCode,textval from textvaltable where TextCriteria='subje' and textval<>'' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' order by textval";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(subjquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataSource = ds;
                            (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataTextField = "textval";
                            (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataValueField = "TextCode";
                            (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).DataBind();
                        }
                        (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).Items.Insert(0, "---Select---");
                        (UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).Items.Insert((UgGrid.Rows[a].FindControl("ddlugsubject") as DropDownList).Items.Count, "Others");
                    }
                }
            }
        }
        catch
        {
        }
    }
    protected void Marksgrid_Bound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            // string ddlvalue = ddlmarkgradeug.SelectedItem.Text;
            if (e.Row.RowIndex == 0)
            {
                e.Row.Cells[9].Visible = false;
            }
            if (rdbugmarks.Checked == true)
            {
                e.Row.Cells[5].Visible = false;
                e.Row.Cells[4].Visible = true;
            }
            else if (rdbuggrade.Checked == true)
            {
                e.Row.Cells[5].Visible = true;
                e.Row.Cells[4].Visible = false;
            }
        }
        if (e.Row.RowType == DataControlRowType.Header)
        {
            // string ddlvalue = ddlmarkgradeug.SelectedItem.Text;
            if (rdbugmarks.Checked == true)
            {
                e.Row.Cells[5].Visible = false;
                e.Row.Cells[4].Visible = true;
            }
            else if (rdbuggrade.Checked == true)
            {
                e.Row.Cells[5].Visible = true;
                e.Row.Cells[4].Visible = false;
            }
        }
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[3].Attributes["Onchange"] = Page.ClientScript.GetPostBackEventReference(Marksgrid, "Select$" + e.Row.RowIndex);
        }
    }
    protected void Marksgrid_Rowcommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int a = Convert.ToInt32(e.CommandArgument);
            string value = (Marksgrid.Rows[a].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text;
            if (value == "Others")
            {
                (Marksgrid.Rows[a].FindControl("txt_typeofsubject") as TextBox).Visible = true;
                (Marksgrid.Rows[a].FindControl("txt_typeofsubject") as TextBox).Enabled = true;
            }
            else
            {
                (Marksgrid.Rows[a].FindControl("txt_typeofsubject") as TextBox).Visible = false;
                (Marksgrid.Rows[a].FindControl("txt_typeofsubject") as TextBox).Enabled = false;
            }
        }
        catch
        {
        }
    }
    protected void OnRowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        int index = Convert.ToInt32(e.RowIndex);
        if (index != 0)
        {
            DataTable dt = ViewState["CurrentTable"] as DataTable;
            dt.Rows[index].Delete();
            ViewState["CurrentTable"] = dt;
            bindmardkgrid();
        }
        else
        {
            bindmardkgrid();
        }
        turnVisibility();
    }
    public void bindmardkgrid()
    {
        try
        {
            //if (ddlborduniversity.SelectedItem.Text.Trim() != "Select" && ddlgroupbranch.SelectedItem.Text.Trim() != "Select" && ddlexamination.SelectedItem.Text.Trim() != "Select" && ddlmarksgrade.SelectedItem.Text.Trim() != "Select")
            //{
            DataTable dt = new DataTable();
            if (ViewState["CurrentTable"] == null)
            {
                //    string borduniversitycode = ddlborduniversity.SelectedItem.Value;
                //    string groupbranchcode = ddlgroupbranch.SelectedItem.Value;
                //    string examinationcode = ddlexamination.SelectedItem.Value;
                //    string collegecode = ddlcollege.SelectedItem.Value;
                //    string marksquery = "select subject_name,subject_no,priority from marks where university_code ='" + borduniversitycode + "' and course_code ='" + examinationcode + "' and branch_code='" + groupbranchcode + "' and college_code=" + collegecode + " and degree_code =" + Session["degree_code"].ToString() + " and batch_year =" + System.DateTime.Now.ToString("yyyy") + "  order by priority";
                //    ds.Clear();
                //    ds = d2.select_method_wo_parameter(marksquery, "Text");
                //    if (ds.Tables[0].Rows.Count > 0)
                //    {
                dt.Columns.Add("Sem/Year", typeof(string));
                //dt.Columns.Add("Subjectcode", typeof(string));
                dt.Columns.Add("Subject", typeof(string));
                dt.Columns.Add("Type of Subject", typeof(string));
                dt.Columns.Add("Marks", typeof(string));
                dt.Columns.Add("Grade", typeof(string));
                dt.Columns.Add("Month", typeof(string));
                dt.Columns.Add("Year", typeof(string));
                dt.Columns.Add("Maximum Marks", typeof(string));
                //string[] monts = { "", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
                int papers = Convert.ToInt32(txtTotSem.Text);
                for (int paper = 0; paper < papers; paper++)
                {
                    //dt.Rows.Add("", "", "", "", "", monts[DateTime.Now.Month], DateTime.Now.Year.ToString(), "100");
                    dt.Rows.Add("", "", "", "", "", "", "", "");
                }
                ViewState["CurrentTable"] = dt;
                Marksgrid.DataSource = dt;
                Marksgrid.DataBind();
            }
            else
            {
                if (value_flage == false)
                {
                    dt = (DataTable)ViewState["CurrentTable"];
                    Marksgrid.DataSource = dt;
                    Marksgrid.DataBind();
                    SetPreviousData();
                }
                else
                {
                    SetPreviousData();
                }
                if (Marksgrid.Rows.Count > 0)
                    txtTotSem.Text = Marksgrid.Rows.Count.ToString();
            }
            //Marksgrid.Visible = true;
            //    }
            //}
            //totalfinddiv.Visible = false;
        }
        catch
        {
        }
    }
    public void SetPreviousData()
    {
        int rowIndex = 0;
        //Marksgrid.DataSource = null;
        //Marksgrid.DataBind();
        if (ViewState["CurrentTable"] != null)
        {
            DataTable dt = (DataTable)ViewState["CurrentTable"];
            if (dt.Rows.Count > 0)
            {
                TextBox box1 = new TextBox();
                TextBox box2 = new TextBox();
                DropDownList box3 = new DropDownList();
                TextBox box4 = new TextBox();
                TextBox box5 = new TextBox();
                TextBox box6 = new TextBox();
                TextBox box7 = new TextBox();
                TextBox box8 = new TextBox();
                TextBox box9 = new TextBox();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    box1 = (TextBox)Marksgrid.Rows[i].Cells[1].FindControl("txt_semoryear");
                    box2 = (TextBox)Marksgrid.Rows[i].Cells[2].FindControl("txt_pgsubject");
                    box3 = (DropDownList)Marksgrid.Rows[i].Cells[3].FindControl("ddltypeofsubject");
                    box4 = (TextBox)Marksgrid.Rows[i].Cells[4].FindControl("txt_marks");
                    box5 = (TextBox)Marksgrid.Rows[i].Cells[5].FindControl("txt_Grade");
                    box6 = (TextBox)Marksgrid.Rows[i].Cells[6].FindControl("txt_pgmonth");
                    box7 = (TextBox)Marksgrid.Rows[i].Cells[7].FindControl("txt_pgyear");
                    box8 = (TextBox)Marksgrid.Rows[i].Cells[8].FindControl("txt_maximum_marks");
                    box9 = (TextBox)Marksgrid.Rows[i].Cells[8].FindControl("txt_typeofsubject");
                    box1.Text = dt.Rows[i][0].ToString();
                    box2.Text = dt.Rows[i][1].ToString();
                    string value = dt.Rows[i][2].ToString();
                    string[] splitvalue = value.Split('/');
                    if (splitvalue.Length == 2)
                    {
                        box3.Text = Convert.ToString(splitvalue[0]);
                        box9.Text = Convert.ToString(splitvalue[1]);
                        (Marksgrid.Rows[i].Cells[8].FindControl("txt_typeofsubject") as TextBox).Visible = true;
                    }
                    else
                    {
                        box3.Text = Convert.ToString(splitvalue[0]);
                        (Marksgrid.Rows[i].Cells[8].FindControl("txt_typeofsubject") as TextBox).Visible = false;
                    }
                    box4.Text = dt.Rows[i][3].ToString();
                    box5.Text = dt.Rows[i][4].ToString();
                    box6.Text = dt.Rows[i][5].ToString();
                    box7.Text = dt.Rows[i][6].ToString();
                    box8.Text = dt.Rows[i][7].ToString();
                    rowIndex++;
                }
            }
        }
    }
    protected void Marksgrid_pg_DataBound(object sender, EventArgs e)
    {
        try
        {
            if (Marksgrid.Rows.Count > 0)
            {
                for (int a = 0; a < Marksgrid.Rows.Count; a++)
                {
                    //string englisquery = "select TextCode,textval from textvaltable where TextCriteria='tsub' and textval<>'' and college_code ='" + Convert.ToString(Session["college_Code"]) + "' and TextCriteria2='tsub1'  order by textval";
                    string englisquery = "select TextCode,textval from textvaltable where TextCriteria='tsub' and textval<>'' and college_code ='" + Convert.ToString(ddl_college.SelectedItem.Value) + "'  order by textval";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(englisquery, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        (Marksgrid.Rows[a].FindControl("ddltypeofsubject") as DropDownList).DataSource = ds;
                        (Marksgrid.Rows[a].FindControl("ddltypeofsubject") as DropDownList).DataTextField = "textval";
                        (Marksgrid.Rows[a].FindControl("ddltypeofsubject") as DropDownList).DataValueField = "TextCode";
                        (Marksgrid.Rows[a].FindControl("ddltypeofsubject") as DropDownList).DataBind();
                    }
                    (Marksgrid.Rows[a].FindControl("ddltypeofsubject") as DropDownList).Items.Insert(0, "---Select---");
                    (Marksgrid.Rows[a].FindControl("ddltypeofsubject") as DropDownList).Items.Insert((Marksgrid.Rows[a].FindControl("ddltypeofsubject") as DropDownList).Items.Count, "Others");
                }
            }
        }
        catch
        {
        }
    }
    protected void ugsubbindgrid_Bound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                // string ddlvalue = ddlmarksgrade.SelectedItem.Text;
                if (rbMarksGrade.SelectedIndex == 0)
                {
                    e.Row.Cells[4].Visible = false;
                    e.Row.Cells[3].Visible = true;
                }
                else
                {
                    e.Row.Cells[4].Visible = true;
                    e.Row.Cells[3].Visible = false;
                }
            }
            if (e.Row.RowType == DataControlRowType.Header)
            {
                // string ddlvalue = ddlmarksgrade.SelectedItem.Text;
                if (rbMarksGrade.SelectedIndex == 0)
                {
                    e.Row.Cells[4].Visible = false;
                    e.Row.Cells[3].Visible = true;
                }
                else
                {
                    e.Row.Cells[4].Visible = true;
                    e.Row.Cells[3].Visible = false;
                }
            }
        }
        catch
        {
        }
    }
    protected void OnRowDeleting_ugsubgrid(object sender, GridViewDeleteEventArgs e)
    {
        try
        {
            delflage = true;
            int index = Convert.ToInt32(e.RowIndex);
            string markobtain = "";
            string maxmark = "";
            int finalmark = 0;
            int finalmaxmark = 0;
            markobtain = Convert.ToString((ugsubgrid.Rows[index].FindControl("txt_subugmagrs") as TextBox).Text);
            maxmark = Convert.ToString((ugsubgrid.Rows[index].FindControl("txt_subug_max") as TextBox).Text);
            if (markobtain.Trim() != "" && maxmark.Trim() != "")
            {
                string submark = Convert.ToString(txt_totalmark.Text);
                string maxtotal = Convert.ToString(avgtext.Text);
                if (submark.Trim() != "")
                {
                    finalmark = Convert.ToInt32(submark) - Convert.ToInt32(markobtain);
                    txt_totalmark.Text = Convert.ToString(finalmark);
                    submark = Convert.ToString(finalmark);
                }
                if (maxtotal.Trim() != "")
                {
                    finalmaxmark = Convert.ToInt32(maxtotal) - Convert.ToInt32(maxmark);
                    avgtext.Text = Convert.ToString(finalmaxmark);
                    maxtotal = Convert.ToString(finalmaxmark);
                }
                double avg = Convert.ToDouble(submark) / Convert.ToDouble(maxtotal) * 100;
                txt_percentage.Text = Convert.ToString(Convert.ToDouble(Math.Round(avg)));
            }
            DataTable dt = ViewState["CurrentTable1"] as DataTable;
            dt.Rows[index].Delete();
            ViewState["CurrentTable1"] = dt;
            bindugsubgrid();
        }
        catch
        {
        }
    }
    public void bindugsubgrid()
    {
        try
        {
            if (delflage == false)
            {
                Hashtable hashlist = new Hashtable();
                DataTable dt = new DataTable();
                dt.Columns.Add("Type", typeof(string));
                dt.Columns.Add("Subject", typeof(string));
                dt.Columns.Add("Marks", typeof(string));
                dt.Columns.Add("Grade", typeof(string));
                dt.Columns.Add("Month", typeof(string));
                dt.Columns.Add("Year", typeof(string));
                dt.Columns.Add("Register No", typeof(string));
                dt.Columns.Add("No.of Attempts", typeof(string));
                dt.Columns.Add("Maximum Marks", typeof(string));
                hashlist.Add(0, "Subject5");
                hashlist.Add(1, "Subject6");
                //hashlist.Add(2, "Part3 Subject7");
                //hashlist.Add(3, "Part3 Subject8");
                //hashlist.Add(4, "Part3 Subject9");
                //hashlist.Add(5, "Part3 Subject4");
                for (int i = 0; i < 1; i++)
                {
                    string value = Convert.ToString(hashlist[i]);
                    dt.Rows.Add(value, "", "", "", "", "", "", "", "");
                }
                ViewState["CurrentTable1"] = dt;
                ugsubgrid.DataSource = dt;
                ugsubgrid.DataBind();
                ugsubgrid.Visible = true;
            }
            else
            {
                DataTable dt1 = ViewState["CurrentTable1"] as DataTable;
                ugsubgrid.DataSource = dt1;
                ugsubgrid.DataBind();
                SetPreviousData1();
                // ugsubgrid.Visible = false;
            }
        }
        catch
        {
        }
    }
    public void SetPreviousData1()
    {
        int rowIndex = 0;
        if (ViewState["CurrentTable1"] != null)
        {
            DataTable dt = (DataTable)ViewState["CurrentTable1"];
            Hashtable hashlist = new Hashtable();
            if (dt.Rows.Count > 0)
            {
                TextBox box1 = new TextBox();
                TextBox box2 = new TextBox();
                TextBox box3 = new TextBox();
                TextBox box4 = new TextBox();
                TextBox box5 = new TextBox();
                TextBox box6 = new TextBox();
                TextBox box7 = new TextBox();
                TextBox box8 = new TextBox();
                hashlist.Add(0, "Subject5");
                hashlist.Add(1, "Subject6");
                hashlist.Add(2, "Subject7");
                hashlist.Add(3, "Subject8");
                hashlist.Add(4, "Subject9");
                hashlist.Add(5, "Subject10");
                hashlist.Add(6, "Subject11");
                hashlist.Add(7, "Subject12");
                hashlist.Add(8, "Subject13");
                hashlist.Add(9, "Subject14");
                hashlist.Add(10, "Subject15");
                hashlist.Add(11, "Subject16");
                hashlist.Add(12, "Subject17");
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    Label lbl = (Label)ugsubgrid.Rows[i].Cells[0].FindControl("lblsno");
                    box1 = (TextBox)ugsubgrid.Rows[i].Cells[1].FindControl("txt_subsubject567");
                    box2 = (TextBox)ugsubgrid.Rows[i].Cells[2].FindControl("txt_subugmagrs");
                    box3 = (TextBox)ugsubgrid.Rows[i].Cells[3].FindControl("txt_subug_grade");
                    box4 = (TextBox)ugsubgrid.Rows[i].Cells[4].FindControl("txt_subugmonth");
                    box5 = (TextBox)ugsubgrid.Rows[i].Cells[5].FindControl("txt_subugyear");
                    box6 = (TextBox)ugsubgrid.Rows[i].Cells[6].FindControl("txt_subugregno");
                    box7 = (TextBox)ugsubgrid.Rows[i].Cells[7].FindControl("txt_subugnoofattmpts");
                    box8 = (TextBox)ugsubgrid.Rows[i].Cells[8].FindControl("txt_subug_max");
                    string val_file = Convert.ToString(hashlist[i]);
                    lbl.Text = Convert.ToString(val_file);
                    box1.Text = dt.Rows[i][1].ToString();
                    box2.Text = dt.Rows[i][2].ToString();
                    box3.Text = dt.Rows[i][3].ToString();
                    box4.Text = dt.Rows[i][4].ToString();
                    box5.Text = dt.Rows[i][5].ToString();
                    box6.Text = dt.Rows[i][6].ToString();
                    box7.Text = dt.Rows[i][7].ToString();
                    box8.Text = dt.Rows[i][8].ToString();
                    rowIndex++;
                }
            }
        }
    }
    protected void btnugaddrows_Click(object sender, EventArgs e)
    {
        if (ugsubgrid.Rows.Count > 0)
        {
            TextBox box1 = new TextBox();
            TextBox box2 = new TextBox();
            TextBox box3 = new TextBox();
            TextBox box4 = new TextBox();
            TextBox box5 = new TextBox();
            TextBox box6 = new TextBox();
            TextBox box7 = new TextBox();
            TextBox box8 = new TextBox();
            bool emptyflage = false;
            for (int i = 0; i < ugsubgrid.Rows.Count; i++)
            {
                box1 = (TextBox)ugsubgrid.Rows[i].Cells[1].FindControl("txt_subsubject567");
                box2 = (TextBox)ugsubgrid.Rows[i].Cells[2].FindControl("txt_subugmagrs");
                box3 = (TextBox)ugsubgrid.Rows[i].Cells[3].FindControl("txt_subug_grade");
                box4 = (TextBox)ugsubgrid.Rows[i].Cells[4].FindControl("txt_subugmonth");
                box5 = (TextBox)ugsubgrid.Rows[i].Cells[5].FindControl("txt_subugyear");
                box6 = (TextBox)ugsubgrid.Rows[i].Cells[6].FindControl("txt_subugregno");
                box7 = (TextBox)ugsubgrid.Rows[i].Cells[7].FindControl("txt_subugnoofattmpts");
                box8 = (TextBox)ugsubgrid.Rows[i].Cells[8].FindControl("txt_subug_max");
                if (rbMarksGrade.SelectedIndex == 0)
                {
                    if (box1.Text != "" && box2.Text != "" && box4.Text != "" && box5.Text != "" && box6.Text != "" && box7.Text != "" && box8.Text != "")
                    {
                    }
                    else
                    {
                        emptyflage = true;
                    }
                }
                else
                {
                    if (box1.Text != "" && box3.Text != "" && box4.Text != "" && box5.Text != "" && box6.Text != "" && box7.Text != "" && box8.Text != "")
                    {
                    }
                    else
                    {
                        emptyflage = true;
                    }
                }
            }
            //.style.borderColor = 'Red'
            if (emptyflage == true)
            {
                // box1.Attributes.Add("Style", "borderColor:Red;"); // jairam
                ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Fill All The Fields\");", true);
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Please Fill All The Fields')", true);
                // ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Please Fill All The Fields')", true);
            }
            else
            {
                AddNewRowToGrid1();
            }
        }
        else
        {
            bindugsubgrid();
        }
    }
    public void AddNewRowToGrid1()
    {
        int rowIndex = 0;
        if (ViewState["CurrentTable1"] != null)
        {
            DataTable dtCurrentTable = (DataTable)ViewState["CurrentTable1"];
            DataRow drCurrentRow = null;
            TextBox box1 = new TextBox();
            TextBox box2 = new TextBox();
            TextBox box3 = new TextBox();
            TextBox box4 = new TextBox();
            TextBox box5 = new TextBox();
            TextBox box6 = new TextBox();
            TextBox box7 = new TextBox();
            TextBox box8 = new TextBox();
            if (dtCurrentTable.Rows.Count > 0)
            {
                for (int i = 0; i < dtCurrentTable.Rows.Count; i++)
                {
                    //extract the TextBox values
                    box1 = (TextBox)ugsubgrid.Rows[i].Cells[1].FindControl("txt_subsubject567");
                    box2 = (TextBox)ugsubgrid.Rows[i].Cells[2].FindControl("txt_subugmagrs");
                    box3 = (TextBox)ugsubgrid.Rows[i].Cells[3].FindControl("txt_subug_grade");
                    box4 = (TextBox)ugsubgrid.Rows[i].Cells[4].FindControl("txt_subugmonth");
                    box5 = (TextBox)ugsubgrid.Rows[i].Cells[5].FindControl("txt_subugyear");
                    box6 = (TextBox)ugsubgrid.Rows[i].Cells[6].FindControl("txt_subugregno");
                    box7 = (TextBox)ugsubgrid.Rows[i].Cells[7].FindControl("txt_subugnoofattmpts");
                    box8 = (TextBox)ugsubgrid.Rows[i].Cells[8].FindControl("txt_subug_max");
                    //  drCurrentRow["RowNumber"] = i + 1;
                    drCurrentRow = dtCurrentTable.NewRow();
                    dtCurrentTable.Rows[i][1] = box1.Text;
                    dtCurrentTable.Rows[i][2] = box2.Text;
                    dtCurrentTable.Rows[i][3] = box3.Text;
                    dtCurrentTable.Rows[i][4] = box4.Text;
                    dtCurrentTable.Rows[i][5] = box5.Text;
                    dtCurrentTable.Rows[i][6] = box6.Text;
                    dtCurrentTable.Rows[i][7] = box7.Text;
                    dtCurrentTable.Rows[i][8] = box8.Text;
                    rowIndex++;
                }
                dtCurrentTable.Rows.Add(drCurrentRow);
                ViewState["CurrentTable1"] = dtCurrentTable;
                ugsubgrid.DataSource = dtCurrentTable;
                ugsubgrid.DataBind();
            }
        }
        else
        {
            ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"View State Null\");", true);
            // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('View State Null')", true);
        }
        //Set Previous Data on Postbacks
        SetPreviousData1();
    }
    protected void btnaddrows_Click(object sender, EventArgs e)
    {
        try
        {
            //if (ddl_coursetype.SelectedItem.Text == "PG")
            //{
            //    if (Marksgrid.Rows.Count > 0)
            //    {
            //        TextBox box1 = new TextBox();
            //        TextBox box2 = new TextBox();
            //        DropDownList box3 = new DropDownList();
            //        TextBox box4 = new TextBox();
            //        TextBox box5 = new TextBox();
            //        TextBox box6 = new TextBox();
            //        TextBox box7 = new TextBox();
            //        TextBox box8 = new TextBox();
            //        TextBox box9 = new TextBox();
            //        bool emptyflage = false;
            //        for (int i = 0; i < Marksgrid.Rows.Count; i++)
            //        {
            //            box1 = (TextBox)Marksgrid.Rows[i].Cells[1].FindControl("txt_semoryear");
            //            box2 = (TextBox)Marksgrid.Rows[i].Cells[2].FindControl("txt_pgsubject");
            //            box3 = (DropDownList)Marksgrid.Rows[i].Cells[3].FindControl("ddltypeofsubject");
            //            box4 = (TextBox)Marksgrid.Rows[i].Cells[4].FindControl("txt_marks");
            //            box5 = (TextBox)Marksgrid.Rows[i].Cells[5].FindControl("txt_Grade");
            //            box6 = (TextBox)Marksgrid.Rows[i].Cells[6].FindControl("txt_pgmonth");
            //            box7 = (TextBox)Marksgrid.Rows[i].Cells[7].FindControl("txt_pgyear");
            //            box8 = (TextBox)Marksgrid.Rows[i].Cells[8].FindControl("txt_maximum_marks");
            //            box9 = (TextBox)Marksgrid.Rows[i].Cells[8].FindControl("txt_typeofsubject");
            //            if (rbMarksGrade.SelectedIndex == 0)
            //            {
            //                if (box3.Text != "Others")
            //                {
            //                    if (box1.Text != "" && box2.Text != "" && box4.Text != "" && box3.Text != "" && box6.Text != "" && box7.Text != "" && box8.Text != "")
            //                    {
            //                    }
            //                    else
            //                    {
            //                        emptyflage = true;
            //                    }
            //                }
            //                else
            //                {
            //                    if (box1.Text != "" && box2.Text != "" && box4.Text != "" && box9.Text != "" && box6.Text != "" && box7.Text != "" && box8.Text != "")
            //                    {
            //                    }
            //                    else
            //                    {
            //                        emptyflage = true;
            //                    }
            //                }
            //            }
            //            else
            //            {
            //                if (box3.Text != "Others")
            //                {
            //                    if (box1.Text != "" && box3.Text != "" && box2.Text != "" && box5.Text != "" && box6.Text != "" && box7.Text != "" && box8.Text != "")
            //                    {
            //                    }
            //                    else
            //                    {
            //                        emptyflage = true;
            //                    }
            //                }
            //                else
            //                {
            //                    if (box1.Text != "" && box9.Text != "" && box2.Text != "" && box5.Text != "" && box6.Text != "" && box7.Text != "" && box8.Text != "")
            //                    {
            //                    }
            //                    else
            //                    {
            //                        emptyflage = true;
            //                    }
            //                }
            //            }
            //        }
            //        //.style.borderColor = 'Red'
            //        if (emptyflage == true)
            //        {
            //            // box1.Attributes.Add("Style", "borderColor:Red;");
            //            ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Fill All The Fields\");", true);
            //            // ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Please Fill All The Fields')", true);
            //            //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Please Fill All The Fields')", true);
            //        }
            //        else
            //        {
            //            AddNewRowToGrid();
            //        }
            //    }
            //}
            //else
            //{
                if (GridView_mphil.Rows.Count > 0)
                {
                    TextBox box1 = new TextBox();
                    TextBox box2 = new TextBox();
                    DropDownList box3 = new DropDownList();
                    TextBox box4 = new TextBox();
                    TextBox box5 = new TextBox();
                    TextBox box6 = new TextBox();
                    TextBox box7 = new TextBox();
                    TextBox box8 = new TextBox();
                    TextBox box9 = new TextBox();
                    TextBox box10 = new TextBox();
                    TextBox box11 = new TextBox();
                    bool emptyflage = false;
                    for (int i = 0; i < GridView_mphil.Rows.Count; i++)
                    {
                        box1 = (TextBox)GridView_mphil.Rows[i].Cells[1].FindControl("txt_semoryear");
                        box2 = (TextBox)GridView_mphil.Rows[i].Cells[2].FindControl("txt_pgsubject");
                        box3 = (DropDownList)GridView_mphil.Rows[i].Cells[3].FindControl("ddltypeofsubject");
                        box4 = (TextBox)GridView_mphil.Rows[i].Cells[4].FindControl("txt_marks");
                        box5 = (TextBox)GridView_mphil.Rows[i].Cells[4].FindControl("txt_marks");
                        box6 = (TextBox)GridView_mphil.Rows[i].Cells[4].FindControl("txt_marks");
                        box7 = (TextBox)GridView_mphil.Rows[i].Cells[5].FindControl("txt_Grade");
                        box8 = (TextBox)GridView_mphil.Rows[i].Cells[6].FindControl("txt_pgmonth");
                        box9 = (TextBox)GridView_mphil.Rows[i].Cells[7].FindControl("txt_pgyear");
                        box10 = (TextBox)GridView_mphil.Rows[i].Cells[8].FindControl("txt_maximum_marks");
                        box11 = (TextBox)GridView_mphil.Rows[i].Cells[8].FindControl("txt_typeofsubject");
                        if (rbMarksGrade.SelectedIndex == 0)
                        {
                            if (box3.Text != "Others")
                            {
                                if (box1.Text != "" && box2.Text != "" && box4.Text != "" && box3.Text != "" && box6.Text != "" && box8.Text != "" && box9.Text != "")
                                {
                                }
                                else
                                {
                                    emptyflage = true;
                                }
                            }
                            else
                            {
                                if (box1.Text != "" && box2.Text != "" && box4.Text != "" && box9.Text != "" && box6.Text != "" && box7.Text != "" && box8.Text != "")
                                {
                                }
                                else
                                {
                                    emptyflage = true;
                                }
                            }
                        }
                        else
                        {
                            if (box3.Text != "Others")
                            {
                                if (box1.Text != "" && box3.Text != "" && box2.Text != "" && box5.Text != "" && box6.Text != "" && box7.Text != "" && box8.Text != "")
                                {
                                }
                                else
                                {
                                    emptyflage = true;
                                }
                            }
                            else
                            {
                                if (box1.Text != "" && box9.Text != "" && box2.Text != "" && box5.Text != "" && box6.Text != "" && box7.Text != "" && box8.Text != "")
                                {
                                }
                                else
                                {
                                    emptyflage = true;
                                }
                            }
                        }
                    }
                    //.style.borderColor = 'Red'
                    if (emptyflage == true)
                    {
                        // box1.Attributes.Add("Style", "borderColor:Red;");
                        ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Fill All The Fields\");", true);
                        // ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Please Fill All The Fields')", true);
                        //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Please Fill All The Fields')", true);
                    }
                    else
                    {
                        AddNewRowToGrid();
                    }
                }
            //}
        }
        catch
        {
        }
    }
    public void AddNewRowToGrid()
    {
        int rowIndex = 0;
        //if (ddl_coursetype.SelectedItem.Text == "PG")
        //{
        //    if (ViewState["CurrentTable"] != null)
        //    {
        //        DataTable dtCurrentTable = (DataTable)ViewState["CurrentTable"];
        //        DataRow drCurrentRow = null;
        //        if (dtCurrentTable.Rows.Count > 0)
        //        {
        //            TextBox box1 = new TextBox();
        //            TextBox box2 = new TextBox();
        //            DropDownList box3 = new DropDownList();
        //            TextBox box4 = new TextBox();
        //            TextBox box5 = new TextBox();
        //            TextBox box6 = new TextBox();
        //            TextBox box7 = new TextBox();
        //            TextBox box8 = new TextBox();
        //            TextBox box9 = new TextBox();
        //            for (int i = 0; i < dtCurrentTable.Rows.Count; i++)
        //            {
        //                //extract the TextBox values
        //                box1 = (TextBox)Marksgrid.Rows[i].Cells[1].FindControl("txt_semoryear");
        //                box2 = (TextBox)Marksgrid.Rows[i].Cells[2].FindControl("txt_pgsubject");
        //                box3 = (DropDownList)Marksgrid.Rows[i].Cells[3].FindControl("ddltypeofsubject");
        //                box4 = (TextBox)Marksgrid.Rows[i].Cells[4].FindControl("txt_marks");
        //                box5 = (TextBox)Marksgrid.Rows[i].Cells[5].FindControl("txt_Grade");
        //                box6 = (TextBox)Marksgrid.Rows[i].Cells[6].FindControl("txt_pgmonth");
        //                box7 = (TextBox)Marksgrid.Rows[i].Cells[7].FindControl("txt_pgyear");
        //                box8 = (TextBox)Marksgrid.Rows[i].Cells[8].FindControl("txt_maximum_marks");
        //                box9 = (TextBox)Marksgrid.Rows[i].Cells[8].FindControl("txt_typeofsubject");
        //                drCurrentRow = dtCurrentTable.NewRow();
        //                //  drCurrentRow["RowNumber"] = i + 1;
        //                dtCurrentTable.Rows[i][0] = box1.Text;
        //                dtCurrentTable.Rows[i][1] = box2.Text;
        //                if (box9.Text.Trim() != "")
        //                {
        //                    dtCurrentTable.Rows[i][2] = box3.Text + "/" + box9.Text;
        //                }
        //                else
        //                {
        //                    dtCurrentTable.Rows[i][2] = box3.Text;
        //                }
        //                dtCurrentTable.Rows[i][3] = box4.Text;
        //                dtCurrentTable.Rows[i][4] = box5.Text;
        //                dtCurrentTable.Rows[i][5] = box6.Text;
        //                dtCurrentTable.Rows[i][6] = box7.Text;
        //                dtCurrentTable.Rows[i][7] = box8.Text;
        //                rowIndex++;
        //            }
        //            dtCurrentTable.Rows.Add(drCurrentRow);
        //            ViewState["CurrentTable"] = dtCurrentTable;
        //            Marksgrid.DataSource = dtCurrentTable;
        //            Marksgrid.DataBind();
        //        }
        //    }
        //    else
        //    {
        //        ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"View State Null\");", true);
        //        // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('View State Null')", true);
        //    }
        //    //Set Previous Data on Postbacks
        //    SetPreviousData();
        //}
        //else
        //{
            if (ViewState["CurrentTablenew"] != null)
            {
                DataTable dtCurrentTable = (DataTable)ViewState["CurrentTablenew"];
                DataRow drCurrentRow = null;
                if (dtCurrentTable.Rows.Count > 0)
                {
                    TextBox box1 = new TextBox();
                    TextBox box2 = new TextBox();
                    DropDownList box3 = new DropDownList();
                    TextBox box4 = new TextBox();
                    TextBox box5 = new TextBox();
                    TextBox box6 = new TextBox();
                    TextBox box7 = new TextBox();
                    TextBox box8 = new TextBox();
                    TextBox box9 = new TextBox();
                    TextBox box10 = new TextBox();
                    TextBox box11 = new TextBox();
                    for (int i = 0; i < dtCurrentTable.Rows.Count; i++)
                    {
                        //extract the TextBox values
                        box1 = (TextBox)GridView_mphil.Rows[i].Cells[1].FindControl("txt_semoryear");
                        box2 = (TextBox)GridView_mphil.Rows[i].Cells[2].FindControl("txt_pgsubject");
                        box3 = (DropDownList)GridView_mphil.Rows[i].Cells[3].FindControl("ddltypeofsubject");
                        box4 = (TextBox)GridView_mphil.Rows[i].Cells[4].FindControl("txt_inter");
                        box5 = (TextBox)GridView_mphil.Rows[i].Cells[5].FindControl("txt_exter");
                        box6 = (TextBox)GridView_mphil.Rows[i].Cells[6].FindControl("txt_marks");
                        box7 = (TextBox)GridView_mphil.Rows[i].Cells[7].FindControl("txt_Grade");
                        box8 = (TextBox)GridView_mphil.Rows[i].Cells[8].FindControl("txt_pgmonth");
                        box9 = (TextBox)GridView_mphil.Rows[i].Cells[9].FindControl("txt_pgyear");
                        box10 = (TextBox)GridView_mphil.Rows[i].Cells[10].FindControl("txt_maximum_marks");
                        box11 = (TextBox)GridView_mphil.Rows[i].Cells[11].FindControl("txt_typeofsubject");
                        drCurrentRow = dtCurrentTable.NewRow();
                        //  drCurrentRow["RowNumber"] = i + 1;
                        dtCurrentTable.Rows[i][0] = box1.Text;
                        dtCurrentTable.Rows[i][1] = box2.Text;
                        if (box11.Text.Trim() != "")
                        {
                            dtCurrentTable.Rows[i][2] = box3.Text + "/" + box11.Text;
                        }
                        else
                        {
                            dtCurrentTable.Rows[i][2] = box3.Text;
                        }
                        dtCurrentTable.Rows[i][3] = box4.Text;
                        dtCurrentTable.Rows[i][4] = box5.Text;
                        dtCurrentTable.Rows[i][5] = box6.Text;
                        dtCurrentTable.Rows[i][6] = box7.Text;
                        dtCurrentTable.Rows[i][7] = box8.Text;
                        dtCurrentTable.Rows[i][8] = box9.Text;
                        dtCurrentTable.Rows[i][9] = box10.Text;
                        // dtCurrentTable.Rows[i][11] = box11.Text;
                        rowIndex++;
                    }
                    dtCurrentTable.Rows.Add(drCurrentRow);
                    ViewState["CurrentTablenew"] = dtCurrentTable;
                    GridView_mphil.DataSource = dtCurrentTable;
                    GridView_mphil.DataBind();
                }
            }
            else
            {
                ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"View State Null\");", true);
                // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('View State Null')", true);
            }
            //Set Previous Data on Postbacks
            SetPreviousData_mphil();
        //}
    }
    public void chk_click(object sender, EventArgs e)
    {
        bool flage = false;
        bool alterflage = false;
        int count = 0;
        string txt = "";
        //if (ddl_coursetype.SelectedItem.Value != "" && ddl_coursetype.SelectedItem.Value != null)
        //{
            //if (ddl_coursetype.SelectedItem.Value == "PG")
            //{
            //    if (Marksgrid.Rows.Count > 0)
            //    {
            //        for (int mark = 0; mark < Marksgrid.Rows.Count; mark++)
            //        {
            //            string semoryear = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_semoryear") as TextBox).Text);
            //            string subject = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgsubject") as TextBox).Text);
            //            string sub_type_subjectno = "";
            //            string typeofsubject = Convert.ToString((Marksgrid.Rows[mark].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text);
            //            if (typeofsubject != "Others")
            //            {
            //                sub_type_subjectno = typeofsubject;
            //            }
            //            else
            //            {
            //                string subtype = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_typeofsubject") as TextBox).Text);
            //                sub_type_subjectno = subjectcode(txt, subtype);
            //            }
            //            string finalmarkandgrade = "";
            //            if (rbMarksGrade.SelectedIndex == 0)
            //            {
            //                finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_marks") as TextBox).Text);
            //            }
            //            else
            //            {
            //                finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_Grade") as TextBox).Text);
            //            }
            //            string Month = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgmonth") as TextBox).Text);
            //            string year1 = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgyear") as TextBox).Text);
            //            string max_mark = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_maximum_marks") as TextBox).Text);
            //            if (semoryear != "" && sub_type_subjectno != "")
            //            {
            //                if (semoryear.Trim() == "" || subject.Trim() == "" || sub_type_subjectno.Trim() == "" || finalmarkandgrade.Trim() == "" || Month.Trim() == "" || year1.Trim() == "" || max_mark.Trim() == "")
            //                {
            //                    count++;
            //                    flage = true;
            //                }
            //                else
            //                {
            //                    if (count == 0)
            //                    {
            //                        flage = false;
            //                    }
            //                }
            //            }
            //        }
            //    }
            //}
            if (!isCourseTypePg())
            {
                if (UgGrid.Rows.Count > 0)
                {
                    for (int mark = 0; mark < UgGrid.Rows.Count - 1; mark++)
                    {
                        string subjectname = "";
                        if (mark != 1)
                        {
                            string subject_name = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
                            if (subject_name == "---Select---")
                            {
                            }
                            else
                                if (subject_name == "Others")
                                {
                                    subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
                                }
                                else
                                {
                                    subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
                                }
                        }
                        else if (mark == 1)
                        {
                            subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
                        }
                        // string subjectcode = Convert.ToString((Marksgrid.Rows[mark].FindControl("lblsubcode") as Label).Text);
                        string finalmarkandgrade = "";
                        if (rbMarksGrade.SelectedIndex == 0)
                        {
                            finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmagrs") as TextBox).Text);
                        }
                        else
                        {
                            finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ug_grade") as TextBox).Text);
                        }
                        string Month = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmonth") as TextBox).Text);
                        string year1 = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugyear") as TextBox).Text);
                        string regno = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugregno") as TextBox).Text);
                        string nofoattempts = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugnoofattmpts") as TextBox).Text);
                        string max_mark = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_rg_max") as TextBox).Text);
                        //if (Month.Trim() == "" || subjectname.Trim() == "" || finalmarkandgrade.Trim() == "" || year1.Trim() == "" || regno.Trim() == "" || nofoattempts.Trim() == "" || max_mark.Trim() == "")
                        //{
                        //    count++;
                        //    flage = true;
                        //}
                        //else
                        //{
                        //    if (count == 0)
                        //    {
                        //        flage = false;
                        //    }
                        //}
                    }
                }
            }
            //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
            //{
            //    if (txt_cutof.Visible == true)
            //    {
            //        if (txt_cutof.Text.Trim() == "")
            //        {
            //            flage = false;
            //        }
            //    }
            //}
            //else
            //{
                if (txt_cutofpg.Visible == true)
                {
                    if (txt_cutofpg.Text.Trim() == "")
                    {
                        flage = false;
                    }
                }
            //}
            if (flage != false)
            {
                ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Fill all the fields\");", true);
                //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Please Fill All Fields')", true);
            }
            else
            {
                TabContainer1.ActiveTabIndex = 1;
                step2.Visible = true;
            }
        //}
        turnVisibility();
    }
    public void btn_addcertificate_Click(object sender, EventArgs e)
    {
        //div_cer.Visible = true;
        bindcerificate();
        turnVisibility();
    }
    public void oldbindcerificate()
    {
        try
        {
            string val = "";
            if (rdbtaany.Checked == true)
            {
                val = "1";
            }
            if (rdbexy.Checked == true)
            {
                if (val == "")
                {
                    val = "2";
                }
                else
                {
                    val = val + "','" + "2";
                }
            }
            if (RadioButton3.Checked == true)
            {
                if (val == "")
                {
                    val = "3";
                }
                else
                {
                    val = val + "','" + "3";
                }
            }
            if (rdbdistinctionsportsYes.Checked == true)
            {
                if (val == "")
                {
                    val = "4";
                }
                else
                {
                    val = val + "','" + "4";
                }
            }
            if (rdbextraactivitesYes.Checked == true)
            {
                if (val == "")
                {
                    val = "5";
                }
                else
                {
                    val = val + "','" + "5";
                }
            }
            if (val == "")
            {
                val = "6";
            }
            else
            {
                val = val + "','" + "6";
            }
            DataTable dt = new DataTable();
            DataRow dr = null;
            string courseid = "";
            dt.Columns.Add("Dummy1");
            dt.Columns.Add("Dummy2");
            dt.Columns.Add("Dummy3");
            dt.Columns.Add("Dummy4");
            string q = "select c.Course_Id from degree d,Department dt,Course C where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.Degree_Code in('" + ddl_courseone.SelectedItem.Value + "')";
            //,'" + ddl_coursetwo.SelectedItem.Value + "'
            ds.Clear();
            ds = d2.select_method_wo_parameter(q, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int y = 0; y < ds.Tables[0].Rows.Count; y++)
                {
                    string courseidvalue = Convert.ToString(ds.Tables[0].Rows[y]["Course_Id"]);
                    if (courseid == "")
                    {
                        courseid = courseidvalue;
                    }
                    else
                    {
                        courseid = courseid + "," + courseidvalue;
                    }
                }
            }
            string query = "select * from CertMasterDet where CourseID in('" + courseid + "') and Categorytype in('" + val + "')";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int y = 0; y < ds.Tables[0].Rows.Count; y++)
                {
                    dr = dt.NewRow();
                    string name = d2.GetFunction("select distinct(Select MasterValue FROM CO_MasterValues T WHERE CertName = T.MasterCode) CertName from CertMasterDet where CertName='" + Convert.ToString(ds.Tables[0].Rows[y]["CertName"]) + "' ");
                    string type = typeeetext(Convert.ToString(ds.Tables[0].Rows[y]["Categorytype"]));
                    dr[0] = name + "(" + type + ")";
                    dr[1] = Convert.ToString(ds.Tables[0].Rows[y]["CertName"]);
                    dr[2] = Convert.ToString(ds.Tables[0].Rows[y]["isOrginal"]);
                    dr[3] = Convert.ToString(ds.Tables[0].Rows[y]["isDuplicate"]);
                    dt.Rows.Add(dr);
                }
                GV1.DataSource = dt;
                GV1.Visible = true;
                div_cer.Visible = true;
                GV1.DataBind();
            }
            for (int y = 0; y < ds.Tables[0].Rows.Count; y++)
            {
                string isDuplicate = Convert.ToString(ds.Tables[0].Rows[y]["isDuplicate"]);
                if (isDuplicate == "True")
                {
                    (GV1.Rows[y].FindControl("chk_Duplicate") as CheckBox).Enabled = true;
                }
                else
                {
                    (GV1.Rows[y].FindControl("chk_Duplicate") as CheckBox).Enabled = false;
                    (GV1.Rows[y].FindControl("chk_Duplicate") as CheckBox).Checked = false;
                }
                string orginal = Convert.ToString(ds.Tables[0].Rows[y]["isOrginal"]);
                if (orginal == "True")
                {
                    (GV1.Rows[y].FindControl("chk_orginal") as CheckBox).Enabled = true;
                }
                else
                {
                    (GV1.Rows[y].FindControl("chk_orginal") as CheckBox).Enabled = false;
                    (GV1.Rows[y].FindControl("chk_orginal") as CheckBox).Checked = false;
                }
            }
        }
        catch
        {
        }
    }
    public string typeeetext(string v)
    {
        string val = "";
        if (v == "1")
        {
            val = "Tamil Origin";
        }
        else if (v == "2")
        {
            val = "Ex-serviceman";
        }
        else if (v == "3")
        {
            val = "First generation learner";
        }
        else if (v == "4")
        {
            val = "Sports";
        }
        else if (v == "5")
        {
            val = "Co-Curricular Activites";
        }
        else if (v == "6")
        {
            val = "General";
        }
        return val;
    }
    protected void btn_upload_Click(object sender, EventArgs e)
    {
        try
        {
            bool upflage = false;
            if (Communityupload.HasFile)
            {
                try
                {
                    string filename = Path.GetFileName(Communityupload.FileName);
                    Communityupload.SaveAs(Server.MapPath("~/Upload/Community/") + Session["Application_No"] + "-" + filename);
                    Session["community"] = "Community Ceritificate";
                    upflage = true;
                }
                catch (Exception ex)
                {
                }
            }
            if (exupload.HasFile)
            {
                try
                {
                    string filename = Path.GetFileName(exupload.FileName);
                    exupload.SaveAs(Server.MapPath("~/Upload/Exservice/") + Session["Application_No"] + "-" + filename);
                    Session[" Ex-Serviceman Certificate"] = " Ex-Serviceman Certificate";
                    upflage = true;
                }
                catch (Exception ex)
                {
                }
            }
            if (marksheetupload.HasFile)
            {
                try
                {
                    string filename = Path.GetFileName(marksheetupload.FileName);
                    marksheetupload.SaveAs(Server.MapPath("~/Upload/Hsc/") + Session["Application_No"] + "-" + filename);
                    Session["HSC/Equivalent Mark List"] = "HSC/Equivalent Mark List";
                    upflage = true;
                }
                catch (Exception ex)
                {
                }
            }
            if (sportupload.HasFile)
            {
                try
                {
                    string filename = Path.GetFileName(sportupload.FileName);
                    sportupload.SaveAs(Server.MapPath("~/Upload/Sports/") + Session["Application_No"] + "-" + filename);
                    Session["Sports Certificate"] = "Sports Certificate";
                    upflage = true;
                }
                catch (Exception ex)
                {
                }
            }
            if (differentlyabledupload.HasFile)
            {
                try
                {
                    string filename = Path.GetFileName(differentlyabledupload.FileName);
                    differentlyabledupload.SaveAs(Server.MapPath("~/Upload/Differentlyabled/") + Session["Application_No"] + "-" + filename);
                    Session["Differently abled Certificate"] = "Differently abled Certificate";
                    upflage = true;
                }
                catch (Exception ex)
                {
                }
            }
            if (sslcupload.HasFile)
            {
                try
                {
                    string filename = Path.GetFileName(sslcupload.FileName);
                    sslcupload.SaveAs(Server.MapPath("~/Upload/SSLC/") + Session["Application_No"] + "-" + filename);
                    Session["sslc Certificate"] = "sslc Certificate";
                    upflage = true;
                }
                catch (Exception ex)
                {
                }
            }
            if (studentproof.HasFile)
            {
                try
                {
                    string filename = Path.GetFileName(studentproof.FileName);
                    studentproof.SaveAs(Server.MapPath("~/Upload/StudentProof/") + Session["Application_No"] + "-" + filename);
                    Session["Student Proof"] = "Student Proof";
                    upflage = true;
                }
                catch (Exception ex)
                {
                }
            } if (fatherProof.HasFile)
            {
                try
                {
                    string filename = Path.GetFileName(fatherProof.FileName);
                    fatherProof.SaveAs(Server.MapPath("~/Upload/FatherProof/") + Session["Application_No"] + "-" + filename);
                    Session["Father Proof"] = "Father Proof";
                    upflage = true;
                }
                catch (Exception ex)
                {
                }
            }
            if (photoupload.HasFile)
            {
                try
                {
                    string filename = Path.GetFileName(photoupload.FileName);
                    // photoupload.SaveAs(Server.MapPath("~/Upload/ApplicantPhoto/") + Session["Application_No"].ToString() + ".jpg");
                    Stream strm = photoupload.PostedFile.InputStream;
                    var targetFile = (Server.MapPath("~/Upload/ApplicantPhoto/") + TextBox3.Text.Trim() + ".jpg").ToString();
                    GenerateThumbnails(0.5, strm, targetFile);
                    Session["Applicant Photo"] = (Server.MapPath("~/Upload/ApplicantPhoto/") + TextBox3.Text.Trim() + ".jpg").ToString();
                    upflage = true;
                }
                catch (Exception ex)
                {
                    upflage = false;
                }
            }
            else
            {
                upflage = false;
            }
            if (upflage == true)
            {
                ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Upload Successfully\");", true);
            }
            else
            {
                ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Select Files\");", true);
            }
        }
        catch
        {
        }
        turnVisibility();
    }
    private void GenerateThumbnails(double scaleFactor, Stream sourcePath, string targetPath)
    {
        using (var image = System.Drawing.Image.FromStream(sourcePath))
        {
            var newWidth = 300;//(int)(image.Width * scaleFactor);
            var newHeight = 350;//(int)(image.Height * scaleFactor);
            var thumbnailImg = new Bitmap(newWidth, newHeight);
            var thumbGraph = Graphics.FromImage(thumbnailImg);
            thumbGraph.CompositingQuality = CompositingQuality.HighQuality;
            thumbGraph.SmoothingMode = SmoothingMode.HighQuality;
            thumbGraph.InterpolationMode = InterpolationMode.HighQualityBicubic;
            var imageRectangle = new Rectangle(0, 0, newWidth, newHeight);
            thumbGraph.DrawImage(image, imageRectangle);
            thumbnailImg.Save(targetPath, image.RawFormat);
        }
    }
    protected void OnRowDataBound_gv1(object sender, GridViewRowEventArgs e)
    {
    }
    protected void TabContainer1_ActiveTabChanged(object sender, EventArgs e)
    {
        turnVisibility();
    }
    public void markdetails(string course_entno, string appno)
    {
        subjno = "";
        Hashtable hashlist = new Hashtable();
        DataTable dt = new DataTable();
        DataRow dr = null;
        dt.Columns.Add("Type", typeof(string));
        dt.Columns.Add("Subject", typeof(string));
        dt.Columns.Add("reg");
        dt.Columns.Add("actmark");
        dt.Columns.Add("maximark");
        dt.Columns.Add("passmonth");
        dt.Columns.Add("passyear");
        dt.Columns.Add("noofatm");
        hashlist.Add(0, "Language1");
        hashlist.Add(1, "Language2");
        hashlist.Add(2, "Subject1");
        hashlist.Add(3, "Subject2");
        if (rbVocation1.Checked)
        {
            hashlist.Add(4, "Subject3");
            hashlist.Add(5, "Subject4");
        }
        else
        {
            hashlist.Add(4, "Practical1");
            hashlist.Add(5, "Practical2");
        }
        string markquery = "SELECT TextCode,registerno,s.grade,max_marks,pass_month,pass_year,noofattempt,T.TextVal,acual_marks,T.TextCode from Stud_prev_details s,perv_marks_history p,TextValTable t where s.course_entno =p.course_entno  and t.TextCode =s.Part1Language and s.Part1Language =p.psubjectno and s.app_no='" + appno + "' ";
        markquery = markquery + " SELECT TextCode,registerno,s.grade,max_marks,pass_month,pass_year,noofattempt,T.TextVal,acual_marks,T.TextCode from Stud_prev_details s,perv_marks_history p,TextValTable t where s.course_entno =p.course_entno  and t.TextCode =s.Part2Language and s.Part2Language =p.psubjectno and s.app_no='" + appno + "' ";
        markquery = markquery + " SELECT TextCode,registerno,s.grade,max_marks,pass_month,pass_year,noofattempt,T.TextVal,acual_marks,T.TextCode from Stud_prev_details s,perv_marks_history p,TextValTable t where s.course_entno =p.course_entno  and t.TextCode =p.psubjectno and s.app_no='" + appno + "' and p.psubjectno not in(isnull((SELECT T.TextCode from Stud_prev_details s,perv_marks_history p,TextValTable t where s.course_entno =p.course_entno  and t.TextCode =s.Part1Language and s.Part1Language =p.psubjectno and s.app_no='" + appno + "'),0),isnull((SELECT T.TextCode from Stud_prev_details s,perv_marks_history p,TextValTable t where s.course_entno =p.course_entno  and t.TextCode =s.Part2Language and s.Part2Language =p.psubjectno and s.app_no='" + appno + "'),0)) ";
        //,(SELECT T.TextCode from Stud_prev_details s,perv_marks_history p,TextValTable t where s.course_entno =p.course_entno  and t.TextCode =s.Part2Language and s.Part2Language =p.psubjectno and s.app_no='" + appno + "'))";
        string MARKPG = "select InternalMark,ExternalMark,semyear,subject_typeno,psubjectno,registerno,acual_marks,max_marks,noofattempt,pass_month,pass_year,semyear ,grade from perv_marks_history  where course_entno ='" + course_entno + "'";
        ds.Clear();
        ds = d2.select_method_wo_parameter(markquery, "text");
        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            subjno = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
            //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
            //{
            //    (UgGrid.Rows[0].FindControl("ddlugsubject") as DropDownList).SelectedIndex = (UgGrid.Rows[0].FindControl("ddlugsubject") as DropDownList).Items.IndexOf((UgGrid.Rows[0].FindControl("ddlugsubject") as DropDownList).Items.FindByValue(subjno));
            //    (UgGrid.Rows[0].FindControl("txt_ugregno") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[0]["registerno"]);
            //    if (rbMarksGrade.SelectedIndex == 0)
            //    {
            //        (UgGrid.Rows[0].FindControl("txt_ugmagrs") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[0]["acual_marks"]);
            //    }
            //    else
            //    {
            //        (UgGrid.Rows[0].FindControl("txt_ug_grade") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[0]["grade"]);
            //    }
            //    (UgGrid.Rows[0].FindControl("txt_rg_max") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[0]["max_marks"]);
            //    (UgGrid.Rows[0].FindControl("txt_ugmonth") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[0]["pass_month"]);
            //    (UgGrid.Rows[0].FindControl("txt_ugyear") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[0]["pass_year"]);
            //    (UgGrid.Rows[0].FindControl("txt_ugnoofattmpts") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[0]["noofattempt"]);
            //}
        }
        if (ds.Tables[1].Rows.Count > 0)
        {
            subjno = Convert.ToString(ds.Tables[1].Rows[0]["TextCode"]);
            //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
            //{
            //    (UgGrid.Rows[1].FindControl("ddlugsubject") as DropDownList).SelectedIndex = (UgGrid.Rows[1].FindControl("ddlugsubject") as DropDownList).Items.IndexOf((UgGrid.Rows[1].FindControl("ddlugsubject") as DropDownList).Items.FindByValue(subjno));
            //    (UgGrid.Rows[1].FindControl("txt_ugregno") as TextBox).Text = Convert.ToString(ds.Tables[1].Rows[0]["registerno"]);
            //    if (rbMarksGrade.SelectedIndex == 0)
            //    {
            //        (UgGrid.Rows[1].FindControl("txt_ugmagrs") as TextBox).Text = Convert.ToString(ds.Tables[1].Rows[0]["acual_marks"]);
            //    }
            //    else
            //    {
            //        (UgGrid.Rows[1].FindControl("txt_ug_grade") as TextBox).Text = Convert.ToString(ds.Tables[1].Rows[0]["grade"]);
            //    }
            //    (UgGrid.Rows[1].FindControl("txt_rg_max") as TextBox).Text = Convert.ToString(ds.Tables[1].Rows[0]["max_marks"]);
            //    (UgGrid.Rows[1].FindControl("txt_ugmonth") as TextBox).Text = Convert.ToString(ds.Tables[1].Rows[0]["pass_month"]);
            //    (UgGrid.Rows[1].FindControl("txt_ugyear") as TextBox).Text = Convert.ToString(ds.Tables[1].Rows[0]["pass_year"]);
            //    (UgGrid.Rows[1].FindControl("txt_ugnoofattmpts") as TextBox).Text = Convert.ToString(ds.Tables[1].Rows[0]["noofattempt"]);
            //}
        }
        if (ds.Tables[2].Rows.Count > 0)
        {
            int cc = 1;
            for (int i = 0; i < ds.Tables[2].Rows.Count; i++)
            {
                cc++;
                subjno = Convert.ToString(ds.Tables[2].Rows[i]["TextCode"]);
                //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
                //{
                //    (UgGrid.Rows[cc].FindControl("ddlugsubject") as DropDownList).SelectedIndex = (UgGrid.Rows[cc].FindControl("ddlugsubject") as DropDownList).Items.IndexOf((UgGrid.Rows[cc].FindControl("ddlugsubject") as DropDownList).Items.FindByValue(subjno));
                //    (UgGrid.Rows[cc].FindControl("txt_ugregno") as TextBox).Text = Convert.ToString(ds.Tables[2].Rows[0]["registerno"]);
                //    if (rbMarksGrade.SelectedIndex == 0)
                //    {
                //        (UgGrid.Rows[cc].FindControl("txt_ugmagrs") as TextBox).Text = Convert.ToString(ds.Tables[2].Rows[i]["acual_marks"]);
                //    }
                //    else
                //    {
                //        (UgGrid.Rows[cc].FindControl("txt_ug_grade") as TextBox).Text = Convert.ToString(ds.Tables[2].Rows[i]["grade"]);
                //    }
                //    (UgGrid.Rows[cc].FindControl("txt_rg_max") as TextBox).Text = Convert.ToString(ds.Tables[2].Rows[i]["max_marks"]);
                //    (UgGrid.Rows[cc].FindControl("txt_ugmonth") as TextBox).Text = Convert.ToString(ds.Tables[2].Rows[i]["pass_month"]);
                //    (UgGrid.Rows[cc].FindControl("txt_ugyear") as TextBox).Text = Convert.ToString(ds.Tables[2].Rows[i]["pass_year"]);
                //    (UgGrid.Rows[cc].FindControl("txt_ugnoofattmpts") as TextBox).Text = Convert.ToString(ds.Tables[2].Rows[i]["noofattempt"]);
                //}
            }
        }
        //if (ddl_coursetype.SelectedItem.Text == "PG")
        //{
        //    ds.Clear();
        //    ds = d2.select_method_wo_parameter(MARKPG, "text");
        //    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        //    {
        //        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        //        {
        //            subjno = Convert.ToString(ds.Tables[0].Rows[i]["psubjectno"]);
        //            if (rdbugmarks.Checked == true)
        //            {
        //                (Marksgrid.Rows[i].FindControl("txt_marks") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["acual_marks"]);
        //            }
        //            else
        //            {
        //                (Marksgrid.Rows[i].FindControl("txt_Grade") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["grade"]);
        //            }
        //            subjno = d2.GetFunction("SELECT textval FROM TextValTable WHERE TextCode='" + subjno + "' and college_code='" + ddl_college.SelectedItem.Value + "'");
        //            (Marksgrid.Rows[i].FindControl("txt_maximum_marks") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["max_marks"]);
        //            (Marksgrid.Rows[i].FindControl("txt_pgmonth") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["pass_month"]);
        //            (Marksgrid.Rows[i].FindControl("txt_pgyear") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["pass_year"]);
        //            (Marksgrid.Rows[i].FindControl("ddltypeofsubject") as DropDownList).SelectedIndex = (Marksgrid.Rows[i].FindControl("ddltypeofsubject") as DropDownList).Items.IndexOf((Marksgrid.Rows[i].FindControl("ddltypeofsubject") as DropDownList).Items.FindByValue(Convert.ToString(ds.Tables[0].Rows[i]["subject_typeno"])));
        //            (Marksgrid.Rows[i].FindControl("txt_pgsubject") as TextBox).Text = Convert.ToString(subjno);
        //            (Marksgrid.Rows[i].FindControl("txt_semoryear") as TextBox).Text = Convert.ToString(Convert.ToString(ds.Tables[0].Rows[i]["semyear"]));
        //        }
        //    }
        //}
        //if (ddl_coursetype.SelectedItem.Text == "M.Phil" || ddl_coursetype.SelectedItem.Text == "DOCTORATE")
        //{
        //    ds.Clear();
        //    ds = d2.select_method_wo_parameter(MARKPG, "text");
        //    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        //    {
        //        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        //        {
        //            subjno = Convert.ToString(ds.Tables[0].Rows[i]["psubjectno"]);
        //            if (rbMarksGrade.SelectedIndex == 0)
        //            {
        //                (GridView_mphil.Rows[i].FindControl("txt_marks") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["acual_marks"]);
        //            }
        //            else
        //            {
        //                (GridView_mphil.Rows[i].FindControl("txt_Grade") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["grade"]);
        //            }
        //            subjno = d2.GetFunction("SELECT textval FROM TextValTable WHERE TextCode='" + subjno + "' and college_code='" + ddl_college.SelectedItem.Value + "'");
        //            (GridView_mphil.Rows[i].FindControl("txt_maximum_marks") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["max_marks"]);
        //            (GridView_mphil.Rows[i].FindControl("txt_pgmonth") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["pass_month"]);
        //            (GridView_mphil.Rows[i].FindControl("txt_pgyear") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["pass_year"]);
        //            (GridView_mphil.Rows[i].FindControl("ddltypeofsubject") as DropDownList).SelectedIndex = (Marksgrid.Rows[i].FindControl("ddltypeofsubject") as DropDownList).Items.IndexOf((Marksgrid.Rows[i].FindControl("ddltypeofsubject") as DropDownList).Items.FindByValue(Convert.ToString(ds.Tables[0].Rows[i]["subject_typeno"])));
        //            (GridView_mphil.Rows[i].FindControl("txt_pgsubject") as TextBox).Text = Convert.ToString(subjno);
        //            (GridView_mphil.Rows[i].FindControl("txt_semoryear") as TextBox).Text = Convert.ToString(Convert.ToString(ds.Tables[0].Rows[i]["semyear"]));
        //            (GridView_mphil.Rows[i].FindControl("txt_inter") as TextBox).Text = Convert.ToString(Convert.ToString(ds.Tables[0].Rows[i]["InternalMark"]));
        //            (GridView_mphil.Rows[i].FindControl("txt_exter") as TextBox).Text = Convert.ToString(Convert.ToString(ds.Tables[0].Rows[i]["ExternalMark"]));
        //        }
        //    }
        //}
    }
    public void certificatdetailsciew(string APP_NO)
    {
        try
        {
            subjno = "";
            Hashtable hashlist = new Hashtable();
            DataTable dt = new DataTable();
            DataRow dr = null;
            string courseid = "";
            dt.Columns.Add("Dummy1");
            dt.Columns.Add("Dummy2");
            dt.Columns.Add("Dummy3");
            dt.Columns.Add("Dummy4");
            string markquery = "SELECT	(Select MasterValue FROM CO_MasterValues T WHERE CertificateId = t.MasterCode) CertificateId,CertificateNo,isOrginal,isDuplicate FROM StudCertDetails_New where App_no='" + APP_NO + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(markquery, "text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    (GV1.Rows[i].FindControl("lbl_certificate") as Label).Text = Convert.ToString(ds.Tables[0].Rows[i]["CertificateId"]);
                    (GV1.Rows[i].FindControl("txt_certificate") as TextBox).Text = Convert.ToString(ds.Tables[0].Rows[i]["CertificateNo"]);
                    string orginal = Convert.ToString(ds.Tables[0].Rows[i]["isOrginal"]);
                    if (orginal == "True")
                    {
                        (GV1.Rows[i].FindControl("chk_orginal") as CheckBox).Checked = true;
                    }
                    else
                    {
                        (GV1.Rows[i].FindControl("chk_orginal") as CheckBox).Checked = false;
                    }
                    string isDuplicate = Convert.ToString(ds.Tables[0].Rows[i]["isDuplicate"]);
                    if (isDuplicate == "True")
                    {
                        (GV1.Rows[i].FindControl("chk_Duplicate") as CheckBox).Checked = true;
                    }
                    else
                    {
                        (GV1.Rows[i].FindControl("chk_Duplicate") as CheckBox).Checked = false;
                    }
                }
            }
        }
        catch
        {
        }
    }
    public string dob1(string d)
    {
        string bdate = "";
        if (d == "01")
        {
            bdate = "1";
        }
        if (d == "02")
        {
            bdate = "2";
        }
        if (d == "03")
        {
            bdate = "3";
        }
        if (d == "04")
        {
            bdate = "4";
        }
        if (d == "05")
        {
            bdate = "5";
        }
        if (d == "06")
        {
            bdate = "6";
        }
        if (d == "07")
        {
            bdate = "7";
        }
        if (d == "08")
        {
            bdate = "8";
        }
        return bdate;
    }
    public void formate2view(string appfomno, string batchyear)
    {
        try
        {
            string query = "";
            TextBox3.Text = appfomno;
            query = "select TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_phnoc,parent_nametamil,emailM,parentM_Mobile,alter_mobileno,(Select TextVal FROM TextValTable T WHERE isnull(motherocc,0) = T.TextCode) motherocc,emailg,guardian_mobile,guardian_name,emailp,(Select TextVal FROM TextValTable T WHERE isnull(mIncome,0) = T.TextCode) mIncome,(Select TextVal FROM TextValTable T WHERE isnull(parent_income,0) = T.TextCode) parent_income,mother,parentF_Mobile,place_birth,(Select TextVal FROM TextValTable T WHERE isnull(partI_Language,0) = T.TextCode) partI_Language, bldgrp,Aadharcard_no,a.Alternativedegree_code,app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name,sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,(Select TextVal FROM TextValTable T WHERE parent_occu = isnull(T.TextCode,0)) parent_occu,(Select TextVal FROM TextValTable T WHERE isnull(mother_tongue,0) = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE isnull(religion,0) = T.TextCode) religion,(Select TextVal FROM TextValTable T WHERE isnull(citizen,0) = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE isnull(community,0) = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE isnull(caste,0) = T.TextCode) caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,(Select TextVal FROM TextValTable T WHERE isnull(parent_statec,0) = T.TextCode) parent_statec,(Select TextVal FROM TextValTable T WHERE isnull(Countryc,0) = T.TextCode)Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep, (Select TextVal FROM TextValTable T WHERE isnull(Countryp,0) = T.TextCode)   Countryp,parent_pincodep,parent_phnop,a.degree_code,batch_year,a.college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet ,C.Course_Name,c.Course_Id ,Dt.Dept_Name,CONVERT(varchar(10), fatherdob,103) as  fatherdob, CONVERT(varchar(10), motherdob,103) as  motherdob, ExsRank,ExsNumber,ReserveCategory,EconBackword,(Select TextVal FROM TextValTable T WHERE isnull(SecondLang,0) = T.TextCode) SecondLang, (Select TextVal FROM TextValTable T WHERE isnull(ThirdLang,0) = T.TextCode)   ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount,Insurance_Nominee,parentoldstud,Driving_details,IsDrivingLic ,IsInsurance ,Insurance_InsBy,Insurance_NominRelation,a.mode,a.StudHeight,a.StudWeight,a.EMIS_Number,scholarship_category,quota,parentF_alterMobile from applyn a,degree d,Department dt,Course C where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id  and a.app_no='" + appfomno + "'";
            query = query + "  select InternalPercentage,ExternalPercentage,Cut_Of_Mark,Xmedium,totalmark,securedmark,PassYear,PassMonth,course_entno,(Select TextVal FROM TextValTable T WHERE course_code = T.TextCode) course_code,(Select TextVal FROM TextValTable T WHERE university_code = T.TextCode) university_code,Vocational_stream,Institute_name,percentage,instaddress,(Select TextVal FROM TextValTable T WHERE medium = T.TextCode) medium,branch_code ,Part1Language,Part2Language,isgrade,uni_state,registration_no,type_semester,majorallied_percent,major_percent,type_major,tancet_mark,tancetmark_year,isnull(markPriority,1) as markPriority from Stud_prev_details where app_no ='" + appfomno + "'  and isnull(markPriority,1)=1";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                //Added by Idhris 24-05-2016
                //lblBatchVal.Text = Convert.ToString(ds.Tables[0].Rows[0]["batch_year"]);
                ddl_college.SelectedIndex = ddl_college.Items.IndexOf(ddl_college.Items.FindByValue(Convert.ToString(ds.Tables[0].Rows[0]["college_code"])));
                ddl_college_OnSelectedIndexChanged(new object(), new EventArgs());

                string newbatch = d2.GetFunction("select r.Batch_Year from Registration r,applyn a where a.app_no=r.App_No and a.app_no='" + appfomno + "'");
                if (!string.IsNullOrEmpty(newbatch) && newbatch != "0")
                    ddlbatch2.SelectedIndex = ddlBatch_year.Items.IndexOf(ddlbatch2.Items.FindByText(Convert.ToString(newbatch)));
                else
                    ddlbatch2.SelectedIndex = ddlbatch2.Items.IndexOf(ddlbatch2.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["batch_year"])));


                string alternate = Convert.ToString(ds.Tables[0].Rows[0]["Alternativedegree_code"]);
                string coursetype = d2.GetFunction("select Edu_Level from course where Course_Id='" + Convert.ToString(ds.Tables[0].Rows[0]["Course_Id"]) + "' and college_code='" + ddlcollege.SelectedItem.Value + "'");
                //ddl_coursetype.SelectedIndex = ddl_coursetype.Items.IndexOf(ddl_coursetype.Items.FindByText(coursetype));
                loadChiocenew();
                loadChioce2new();
                // ddl_coursetype_OnSelectedIndexChanged(new object(), new EventArgs());
                //  ddl_coursetype.SelectedItem.Text = coursetype;
                //ddl_courseone.SelectedItem.Text = Convert.ToString(ds.Tables[0].Rows[0]["Dept_Name"]) + "-" + Convert.ToString(ds.Tables[0].Rows[0]["Course_Name"]);
                ddl_courseone.SelectedIndex = ddl_courseone.Items.IndexOf(ddl_courseone.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["Dept_Name"]) + "-" + Convert.ToString(ds.Tables[0].Rows[0]["Course_Name"])));
                //ddl_coursetwo.SelectedIndex = ddl_coursetwo.Items.IndexOf(ddl_coursetwo.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["Alternativedegree_code"])));
                string option2 = d2.GetFunction("select dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddl_college.SelectedItem.Value + "' and d.Degree_Code='" + alternate + "' ");
                if (option2 == "0")
                {
                    option2 = "Select";
                }
                
                txt_appfromno.Text = Convert.ToString(ds.Tables[0].Rows[0]["app_formno"]);
                txt_appliaddate.Text = Convert.ToString(ds.Tables[0].Rows[0]["date_applied"]);
                
               
                ddl_seattype2.SelectedIndex = ddl_seattype2.Items.IndexOf(ddl_seattype2.Items.FindByValue(Convert.ToString(ds.Tables[0].Rows[0]["seattype"])));

                //=======================================
                bindquto();//Krishnakumar 16mar2018
                ddl_quata.SelectedIndex = ddl_quata.Items.IndexOf(ddl_quata.Items.FindByValue(Convert.ToString(ds.Tables[0].Rows[0]["quota"])));
                //=======================================
                //---------- Deepali on 7.4.18-----------
                txt_fathercontactno2.Text = Convert.ToString(ds.Tables[0].Rows[0]["parentF_alterMobile"]);
                //-----------------------------------------------
                //Last modified by Idhris 26-05-2016
                ddlreligion.SelectedIndex = ddlreligion.Items.IndexOf(ddlreligion.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["religion"])));
                ddlcoummunity.SelectedIndex = ddlcoummunity.Items.IndexOf(ddlcoummunity.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["community"])));
                txt_FName_app.Text = Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]);
                string gender = Convert.ToString(ds.Tables[0].Rows[0]["sex"]);
                if (gender == "0")
                {
                    ddlsex2.SelectedIndex = ddlsex2.Items.IndexOf(ddlsex2.Items.FindByValue("0"));
                }
                else if (gender == "1")
                {
                    ddlsex2.SelectedIndex = ddlsex2.Items.IndexOf(ddlsex2.Items.FindByValue("1"));
                }
                else
                {
                    ddlsex2.SelectedIndex = ddlsex2.Items.IndexOf(ddlsex2.Items.FindByValue("2"));
                }
                txt_Caste.Text = Convert.ToString(ds.Tables[0].Rows[0]["caste"]);
                txt_Aadharcardno.Text = Convert.ToString(ds.Tables[0].Rows[0]["Aadharcard_no"]);
                txt_parentsname.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_name"]);
                ddlbloodgroup.SelectedIndex = ddlbloodgroup.Items.IndexOf(ddlbloodgroup.Items.FindByValue(Convert.ToString(ds.Tables[0].Rows[0]["bldgrp"])));
                ddlcountry.SelectedIndex = ddlcountry.Items.IndexOf(ddlcountry.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["citizen"])));
                ddloccupation.SelectedIndex = ddloccupation.Items.IndexOf(ddloccupation.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["parent_occu"])));
                ddlmothertounge.SelectedIndex = ddlmothertounge.Items.IndexOf(ddlmothertounge.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["mother_tongue"])));
                string dob = Convert.ToString(ds.Tables[0].Rows[0]["dob"]);
                if (dob != "")
                {
                    string[] ar = dob.Split('/');
                    //if (ar[0] == "01" || ar[0] == "02" || ar[0] == "03" || ar[0] == "04" || ar[0] == "05" || ar[0] == "06" || ar[0] == "07" || ar[0] == "08" || ar[0] == "09")
                    //{
                    //    string datee = dob1(Convert.ToString(ar[0]));
                    //    ddldobdate.SelectedIndex = ddldobdate.Items.IndexOf(ddldobdate.Items.FindByValue(datee));
                    //}
                    //else
                    //{
                    //    ddldobdate.SelectedIndex = ddldobdate.Items.IndexOf(ddldobdate.Items.FindByValue(ar[0]));
                    //}
                    //ddldobMonth.SelectedIndex = ddldobMonth.Items.IndexOf(ddldobMonth.Items.FindByValue(Convert.ToString(ar[1])));
                    //ddldobYear.SelectedIndex = ddldobYear.Items.IndexOf(ddldobYear.Items.FindByText(Convert.ToString(ar[2])));
                    txt_dob.Text = dob;
                    string byear = Convert.ToString(ar[2]);
                    string year = DateTime.Now.Year.ToString();
                    int age = Convert.ToInt32(year) - Convert.ToInt32(byear);
                    txt_age.Text = Convert.ToString(age);
                }
                string fatherdob = Convert.ToString(ds.Tables[0].Rows[0]["fatherdob"]);
                string motherdob = Convert.ToString(ds.Tables[0].Rows[0]["motherdob"]);
                if (fatherdob != "")
                {
                    string[] ar = fatherdob.Split('/');
                    if (ar[0] == "01" || ar[0] == "02" || ar[0] == "03" || ar[0] == "04" || ar[0] == "05" || ar[0] == "06" || ar[0] == "07" || ar[0] == "08" || ar[0] == "09")
                    {
                        string datee = dob1(Convert.ToString(ar[0]));
                        
                    }
                    else
                    {
                        
                    }
                    
                    
                }
                if (motherdob != "")
                {
                    string[] ar = motherdob.Split('/');
                    if (ar[0] == "01" || ar[0] == "02" || ar[0] == "03" || ar[0] == "04" || ar[0] == "05" || ar[0] == "06" || ar[0] == "07" || ar[0] == "08" || ar[0] == "09")
                    {
                        string datee = dob1(Convert.ToString(ar[0]));
                        
                    }
                    else
                    {
                       
                    }
                    
                }
                string marstaus = Convert.ToString(ds.Tables[0].Rows[0]["mar_status"]).Trim();
                if (marstaus == "" || marstaus == "0")
                {
                    marstaus = "0";
                }
                
                string bldgrp = Convert.ToString(ds.Tables[0].Rows[0]["bldgrp"]).Trim();
                ddlbloodgroup.SelectedIndex = ddlbloodgroup.Items.IndexOf(ddlbloodgroup.Items.FindByValue(bldgrp));
                string idmark = Convert.ToString(ds.Tables[0].Rows[0]["idmark"]).Trim();
                string[] idmarkAr = idmark.Split(';');
                if (idmarkAr.Length > 0)
                {
                    txtIdMark1.Text = idmarkAr[0];
                }
                if (idmarkAr.Length > 1)
                {
                    txtIdMark2.Text = idmarkAr[1];
                }
                string fatherq = Convert.ToString(ds.Tables[0].Rows[0]["fqualification"]).Trim();
                ddlfaterquali.SelectedIndex = ddlfaterquali.Items.IndexOf(ddlfaterquali.Items.FindByValue(fatherq));
                string motherq = Convert.ToString(ds.Tables[0].Rows[0]["mQualification"]).Trim();
                ddlmotherqual.SelectedIndex = ddlmotherqual.Items.IndexOf(ddlmotherqual.Items.FindByValue(motherq));
                ddlmotheroccupation.SelectedIndex = ddlmotheroccupation.Items.IndexOf(ddlmotheroccupation.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["motherocc"])));
                
                ddlPartLang2.SelectedIndex = ddlPartLang2.Items.IndexOf(ddlPartLang2.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["SecondLang"])));
                ddlPartLang3.SelectedIndex = ddlPartLang3.Items.IndexOf(ddlPartLang3.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["ThirdLang"])));
                //added by saranyadevi 23.2.2018
                ddlscholarship.SelectedIndex = ddlscholarship.Items.IndexOf(ddlscholarship.Items.FindByValue(Convert.ToString(ds.Tables[0].Rows[0]["scholarship_category"])));
                string isdonar = Convert.ToString(ds.Tables[0].Rows[0]["isdonar"]).Trim();
                if (isdonar == "" || isdonar == "0" || isdonar.ToUpper() == "FALSE")
                {
                    rdb_bloodyes.Checked = false;
                    rdb_bloodno.Checked = true;
                }
                else
                {
                    rdb_bloodyes.Checked = true;
                    rdb_bloodno.Checked = false;
                }
                string MissionaryChild = Convert.ToString(ds.Tables[0].Rows[0]["MissionaryChild"]).Trim();
                if (MissionaryChild == "" || MissionaryChild == "0" || MissionaryChild.ToUpper() == "FALSE")
                {
                    rblMissionChild.SelectedIndex = 1;
                }
                else
                {
                    rblMissionChild.SelectedIndex = 0;
                }
                string EconBackword = Convert.ToString(ds.Tables[0].Rows[0]["EconBackword"]).Trim();
                if (EconBackword == "" || EconBackword == "0" || EconBackword.ToUpper() == "FALSE")
                {
                    rblEcoBack.SelectedIndex = 1;
                }
                else
                {
                    rblEcoBack.SelectedIndex = 0;
                }
                string ReserveCategory = Convert.ToString(ds.Tables[0].Rows[0]["ReserveCategory"]).Trim();
                if (ReserveCategory == "" || ReserveCategory == "0" || ReserveCategory.ToUpper() == "FALSE")
                {
                    rblReservCast.SelectedIndex = 1;
                }
                else
                {
                    rblReservCast.SelectedIndex = 0;
                }
                string ParentOldStud = Convert.ToString(ds.Tables[0].Rows[0]["ParentOldStud"]).Trim();
                if (ParentOldStud == "" || ParentOldStud == "0" || ParentOldStud.ToUpper() == "FALSE")
                {
                    rblparentOld.SelectedIndex = 1;
                }
                else
                {
                    rblparentOld.SelectedIndex = 0;
                }
                string IsDrivingLic = Convert.ToString(ds.Tables[0].Rows[0]["IsDrivingLic"]).Trim();
                if (IsDrivingLic == "" || IsDrivingLic == "0" || IsDrivingLic.ToUpper() == "FALSE")
                {
                    rblDrivLic.SelectedIndex = 1;
                }
                else
                {
                    rblDrivLic.SelectedIndex = 0;
                    txtDrivLic.Text = Convert.ToString(ds.Tables[0].Rows[0]["Driving_details"]).Trim();
                }
                string tutionfee_waiver = Convert.ToString(ds.Tables[0].Rows[0]["tutionfee_waiver"]).Trim();
                if (tutionfee_waiver == "" || tutionfee_waiver == "0" || tutionfee_waiver.ToUpper() == "FALSE")
                {
                    rblFeeWaiver.SelectedIndex = 1;
                }
                else
                {
                    rblFeeWaiver.SelectedIndex = 0;
                }
                string IsInsurance = Convert.ToString(ds.Tables[0].Rows[0]["IsInsurance"]).Trim();
                if (IsInsurance == "" || IsInsurance == "0" || IsInsurance.ToUpper() == "FALSE")
                {
                    rblInsurance.SelectedIndex = 1;
                }
                else
                {
                    rblInsurance.SelectedIndex = 0;
                    txtInsureAmt.Text = Convert.ToString(ds.Tables[0].Rows[0]["Insurance_Amount"]).Trim();
                    txtInsureBy.Text = Convert.ToString(ds.Tables[0].Rows[0]["Insurance_InsBy"]).Trim();
                    txtInsureNominee.Text = Convert.ToString(ds.Tables[0].Rows[0]["Insurance_Nominee"]).Trim();
                    ddlInsureNominee.SelectedIndex = ddlInsureNominee.Items.IndexOf(ddlInsureNominee.Items.FindByValue(Convert.ToString(ds.Tables[0].Rows[0]["Insurance_NominRelation"])));
                }
                DataSet dsGetApplID = new DataSet();
                string MyStfChild = " select r.app_no,r.Is_Stud_Staff,r.staff_appl_id from applyn a,Registration r where a.app_no=r.App_No and r.CC=0 and r.DelFlag='0' and Exam_Flag<>'Debar' and ISNULL( Admission_Status,'0')='1' and ISNULL(selection_status,'0')='1' and r.app_no='" + appfomno + "'";
                dsGetApplID.Clear();
                dsGetApplID = d2.select_method_wo_parameter(MyStfChild, "Text");
                if (dsGetApplID.Tables.Count > 0 && dsGetApplID.Tables[0].Rows.Count > 0)
                {
                    bindStaffDetails();
                    trStfDet.Visible = true;
                    if (Convert.ToString(dsGetApplID.Tables[0].Rows[0]["Is_Stud_Staff"]).Trim().ToUpper() == "TRUE" && !String.IsNullOrEmpty(Convert.ToString(dsGetApplID.Tables[0].Rows[0]["staff_appl_id"])) && Convert.ToString(dsGetApplID.Tables[0].Rows[0]["staff_appl_id"]).Trim() != "0")
                    {
                        string GetStfName = d2.GetFunction(" select (sm.Staff_Name+' - '+sm.Staff_Code) as StaffDet from StaffMaster sm,staff_appl_master sa,stafftrans st where sm.appl_no=sa.appl_no and sm.staff_code=st.staff_code and st.latestrec='1' and sm.resign='0' and sm.settled='0' and ISNULL(Discontinue,'0')='0' and sa.appl_id='" + Convert.ToString(dsGetApplID.Tables[0].Rows[0]["staff_appl_id"]) + "'");
                        if (!String.IsNullOrEmpty(GetStfName) && GetStfName.Trim() != "0")
                        {
                            tdStfDet.Attributes.Add("style", "display:block;");
                            rdbstfChild.Items[0].Selected = true;
                            rdbstfChild.Items[1].Selected = false;
                            ddlStfDet.SelectedIndex = ddlStfDet.Items.IndexOf(ddlStfDet.Items.FindByValue(Convert.ToString(dsGetApplID.Tables[0].Rows[0]["staff_appl_id"])));
                        }
                        else
                        {
                            rdbstfChild.Items[0].Selected = false;
                            rdbstfChild.Items[1].Selected = true;
                            ddlStfDet.SelectedIndex = 0;
                            tdStfDet.Attributes.Add("style", "display:none;");
                        }
                    }
                    else
                    {
                        rdbstfChild.Items[0].Selected = false;
                        rdbstfChild.Items[1].Selected = true;
                        ddlStfDet.SelectedIndex = 0;
                        tdStfDet.Attributes.Add("style", "display:none;");
                    }
                }
                else
                    trStfDet.Visible = false;
                string part1lang = Convert.ToString(ds.Tables[0].Rows[0]["partI_Language"]);
                if (part1lang == "Arabic")
                {
                    rdblistlanguage.Items[0].Selected = true;
                }
                else if (part1lang == "French")
                {
                    rdblistlanguage.Items[1].Selected = true;
                }
                else if (part1lang == "Hindi")
                {
                    rdblistlanguage.Items[2].Selected = true;
                }
                else if (part1lang == "Tamil")
                {
                    rdblistlanguage.Items[3].Selected = true;
                }
                else
                {
                    rdblistlanguage.Items[4].Selected = true;
                }
                txt_placeofbirth.Text = Convert.ToString(ds.Tables[0].Rows[0]["place_birth"]);
                txt_fathercontactno.Text = Convert.ToString(ds.Tables[0].Rows[0]["parentF_Mobile"]);
                txt_mothername.Text = Convert.ToString(ds.Tables[0].Rows[0]["mother"]);
                txt_annualincome.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_income"]);
                txt_motherannualincome.Text = Convert.ToString(ds.Tables[0].Rows[0]["mIncome"]);
                txt_fatheremail.Text = Convert.ToString(ds.Tables[0].Rows[0]["emailp"]);
                txt_guardiananme.Text = Convert.ToString(ds.Tables[0].Rows[0]["guardian_name"]);
                txt_guardianconatactno.Text = Convert.ToString(ds.Tables[0].Rows[0]["guardian_mobile"]);
                txt_guardianemail.Text = Convert.ToString(ds.Tables[0].Rows[0]["emailg"]);
               
                txt_address1.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_addressC"]);
                txt_postelcode.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodec"]);
                //txt_pcountry.Text = Convert.ToString(ds.Tables[0].Rows[0]["Countryc"]);
                ddlpcountry.SelectedIndex = ddlpcountry.Items.IndexOf(ddlpcountry.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["Countryc"])));
                string str = Convert.ToString(ds.Tables[0].Rows[0]["Streetc"]);
                //parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,
                txt_caddress1.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_addressP"]);
                try
                {
                    txt_caddress2.Text = Convert.ToString(ds.Tables[0].Rows[0]["Streetp"]).Split('/')[0];
                    txt_caddress3.Text = Convert.ToString(ds.Tables[0].Rows[0]["Streetp"]).Split('/')[1];
                }
                catch { }
                string Cityp = Convert.ToString(ds.Tables[0].Rows[0]["cityp"]);
                if (!Cityp.Any(char.IsLetter))
                    Cityp = d2.GetFunction("select textval from textvaltable where TextCriteria ='city' and TextCode='" + Cityp + "'");
                Cityp = (Cityp == "0") ? "" : Cityp;
                txt_ccity.Text = Cityp;
                ddlcstate.SelectedIndex = ddlcstate.Items.IndexOf(ddlcstate.Items.FindByValue(Convert.ToString(ds.Tables[0].Rows[0]["parent_statep"])));
                ddlccountry.SelectedIndex = ddlccountry.Items.IndexOf(ddlccountry.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["Countryp"])));
                //txt_ccountry.Text = Convert.ToString(ds.Tables[0].Rows[0]["Countryp"]);
                txt_cpostelcode.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_pincodep"]);
                try
                {
                    txt_cstd.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_phnop"]).Split('-')[0];
                    txt_cphonenumber.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_phnop"]).Split('-')[1];
                }
                catch { }
                string[] st = str.Split('/');
                if (st.Length > 1)
                {
                    txt_address2.Text = st[0];
                    txt_address3.Text = st[1];
                }
                else
                {
                    txt_address2.Text = str;
                }
                ddlpstate.SelectedIndex = ddlpstate.Items.IndexOf(ddlpstate.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["parent_statec"])));
                string Cityc = Convert.ToString(ds.Tables[0].Rows[0]["cityc"]);
                if (!Cityc.Any(char.IsLetter))
                    Cityc = d2.GetFunction("select textval from textvaltable where TextCriteria ='city' and TextCode='" + Cityc + "'");
                Cityc = (Cityc == "0") ? "" : Cityc;
                txt_Pcity.Text = Cityc;
                
                
                txt_mothercontactno.Text = Convert.ToString(ds.Tables[0].Rows[0]["parentM_Mobile"]);
                txt_motheremail.Text = Convert.ToString(ds.Tables[0].Rows[0]["emailM"]);
                txt_fathernametamil.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_nametamil"]);
                txt_height.Text = Convert.ToString(ds.Tables[0].Rows[0]["StudHeight"]);
                txt_weight.Text = Convert.ToString(ds.Tables[0].Rows[0]["StudWeight"]);
                txtemis_no.Text = Convert.ToString(ds.Tables[0].Rows[0]["EMIS_Number"]);
                string phone = Convert.ToString(ds.Tables[0].Rows[0]["parent_phnoc"]).Trim();
                string[] ph = phone.Split('-');
                if (ph.Length > 1)
                {
                    txt_phonenumber.Text = ph[1];
                    txt_std.Text = ph[0];
                }
                else
                {
                    txt_phonenumber.Text = phone;
                }
                string TamilOrginFromAndaman = Convert.ToString(ds.Tables[0].Rows[0]["TamilOrginFromAndaman"]).Trim();
                string IsExService = Convert.ToString(ds.Tables[0].Rows[0]["IsExService"]).Trim();
                string handy = Convert.ToString(ds.Tables[0].Rows[0]["handy"]).Trim();
                string visualhandy = Convert.ToString(ds.Tables[0].Rows[0]["visualhandy"]).Trim();
                string CampusReq = Convert.ToString(ds.Tables[0].Rows[0]["CampusReq"]).Trim();
                string DistinctSport = Convert.ToString(ds.Tables[0].Rows[0]["DistinctSport"]).Trim();
                string first_graduate = Convert.ToString(ds.Tables[0].Rows[0]["first_graduate"]).Trim();
                string co_curricular = Convert.ToString(ds.Tables[0].Rows[0]["co_curricular"]).Trim();
                if (TamilOrginFromAndaman == "True")
                {
                    rdbtaany.Checked = true;
                    rdbtaanN.Checked = false;
                }
                else
                {
                    rdbtaanN.Checked = true;
                    rdbtaany.Checked = false;
                }
                if (IsExService == "1")
                {
                    rdbexy.Checked = true;
                    rdbexN.Checked = false;
                    txtExservNum.Text = Convert.ToString(ds.Tables[0].Rows[0]["ExSNumber"]);
                    txtExservPlace.Text = Convert.ToString(ds.Tables[0].Rows[0]["ExSPlace"]);
                    txtExservRank.Text = Convert.ToString(ds.Tables[0].Rows[0]["ExSRank"]);
                }
                else
                {
                    rdbexN.Checked = true;
                    rdbexy.Checked = false;
                }
                if (handy == "1")
                {
                    RadioButton1.Checked = true;
                    RadioButton2.Checked = false;
                }
                else
                {
                    RadioButton2.Checked = true;
                    RadioButton1.Checked = false;
                }
                if (first_graduate == "1")
                {
                    RadioButton3.Checked = true;
                    RadioButton4.Checked = false;
                }
                else
                {
                    RadioButton4.Checked = true;
                    RadioButton3.Checked = false;
                }
                if (DistinctSport == "1")
                {
                    rdbdistinctionsportsYes.Checked = true;
                    rdbdistinctionsportsNo.Checked = false;
                }
                else
                {
                    rdbdistinctionsportsNo.Checked = true;
                    rdbdistinctionsportsYes.Checked = false;
                }
                if (IsExService == "1")
                {
                    rdbextraactivitesYes.Checked = true;
                    rdbextraactivitesNo.Checked = false;
                }
                else
                {
                    rdbextraactivitesNo.Checked = true;
                    rdbextraactivitesYes.Checked = false;
                }
                if (CampusReq == "1" || CampusReq == "True")
                {
                    RadioButton5.Checked = true;
                    RadioButton6.Checked = false;
                }
                else
                {
                    RadioButton5.Checked = false;
                    RadioButton6.Checked = true;
                }
                string course_entno = "";
                educationdet.Visible = true; ExmarkstQua.Visible = true;
                if (lbl_clgT.Text.ToLower() == "college")
                {
                    //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
                    //{
                    //    if (ds.Tables[1].Rows.Count > 0)
                    //    {
                    //        string univercode = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                    //        txt_Name_of_school.Text = Convert.ToString(ds.Tables[1].Rows[0]["Institute_Name"]);
                    //        txt_location_scholl.Text = Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]);
                    //        string passmonth = Convert.ToString(ds.Tables[1].Rows[0]["PassMonth"]);
                    //        if (txt_cutof.Visible == true)
                    //        {
                    //            txt_cutof.Text = Convert.ToString(ds.Tables[1].Rows[0]["Cut_Of_Mark"]);
                    //        }
                    //        if (passmonth.Trim() == "")
                    //        {
                    //            passmonth = "Month";
                    //        }
                    //        string passyear = Convert.ToString(ds.Tables[1].Rows[0]["PassYear"]);
                    //        if (passyear == "0")
                    //        {
                    //            passyear = "Year";
                    //        }
                    //        course_entno = Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]);
                    //        txt_board.Text = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                    //        txt_percentage.Text = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                    //        txt_totalmark.Text = Convert.ToString(ds.Tables[1].Rows[0]["securedmark"]);
                    //        avgtext.Text = Convert.ToString(ds.Tables[1].Rows[0]["totalmark"]);
                    //        ddlexaminationug.SelectedIndex = ddlexaminationug.Items.IndexOf(ddlexaminationug.Items.FindByText(Convert.ToString(ds.Tables[1].Rows[0]["course_code"])));
                    //        ddlstatequalify.SelectedIndex = ddlstatequalify.Items.IndexOf(ddlstatequalify.Items.FindByValue(Convert.ToString(ds.Tables[1].Rows[0]["uni_state"])));
                    //        ddlmediumstudy.SelectedIndex = ddlmediumstudy.Items.IndexOf(ddlmediumstudy.Items.FindByValue(Convert.ToString(ds.Tables[1].Rows[0]["Xmedium"])));
                    //        ddlmediumofstudyXII.SelectedIndex = ddlmediumofstudyXII.Items.IndexOf(ddlmediumofstudyXII.Items.FindByText(Convert.ToString(ds.Tables[1].Rows[0]["medium"])));
                    //        //added by Idhris
                    //        string vocstrem = Convert.ToString(ds.Tables[1].Rows[0]["Vocational_stream"]).Trim();
                    //        if (vocstrem == "" || vocstrem.ToUpper() == "FALSE")
                    //        {
                    //            vocstrem = "0";
                    //        }
                    //        if (vocstrem == "0")
                    //        {
                    //            rbVocation1.Checked = true;
                    //            rbVocation.Checked = false;
                    //        }
                    //        else
                    //        {
                    //            rbVocation.Checked = true;
                    //            rbVocation1.Checked = false;
                    //        }
                    //        string isgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]).Trim();
                    //        if (isgrade == "" || isgrade.ToUpper() == "FALSE")
                    //        {
                    //            isgrade = "0";
                    //        }
                    //        if (isgrade == "0" || isgrade == "False")
                    //        {
                    //            rbMarksGrade.SelectedIndex = rbMarksGrade.Items.IndexOf(rbMarksGrade.Items.FindByText("Marks"));
                    //            // rbMarksGrade.SelectedIndex = 0;
                    //            totalfinddiv.Visible = true;
                    //        }
                    //        else
                    //        {
                    //            rbMarksGrade.SelectedIndex = rbMarksGrade.Items.IndexOf(rbMarksGrade.Items.FindByText("Grade"));
                    //            totalfinddiv.Visible = false;
                    //            // rbMarksGrade.SelectedIndex =1;
                    //            txt_totalmark.Text = "";
                    //            avgtext.Text = "";
                    //            txt_percentage.Text = "";
                    //        }
                    //        rbMarksGrade_IndexChange(new object(), new EventArgs());
                    //    }
                    //}
                    //else
                    //{
                        if (ds.Tables[1].Rows.Count > 0)
                        {
                            string univercode = Convert.ToString(ds.Tables[1].Rows[0]["university_code"]);
                            string name = d2.GetFunction("select textval from TextValTable where TextCriteria ='unive' and TextCriteria2 ='unive1' and college_code='" + ddl_college.SelectedItem.Value + "' and  TextCode='" + univercode + "'");
                            txt_nameofcollege.Text = Convert.ToString(ds.Tables[1].Rows[0]["Institute_Name"]);
                            txt_locationofcollege.Text = Convert.ToString(ds.Tables[1].Rows[0]["instaddress"]);
                            string passmonth = Convert.ToString(ds.Tables[1].Rows[0]["PassMonth"]);
                            string isgrade = Convert.ToString(ds.Tables[1].Rows[0]["isgrade"]).Trim();
                            if (txt_cutofpg.Visible == true)
                            {
                                txt_cutofpg.Text = Convert.ToString(ds.Tables[1].Rows[0]["Cut_Of_Mark"]);
                            }
                            if (passmonth.Trim() == "")
                            {
                                passmonth = "Month";
                            }
                            string passyear = Convert.ToString(ds.Tables[1].Rows[0]["PassYear"]);
                            if (passyear == "0")
                            {
                                passyear = "Year";
                            }
                            course_entno = Convert.ToString(ds.Tables[1].Rows[0]["course_entno"]);
                            txt_percentage.Text = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                            txt_totalmark.Text = Convert.ToString(ds.Tables[1].Rows[0]["securedmark"]);
                            avgtext.Text = Convert.ToString(ds.Tables[1].Rows[0]["totalmark"]);
                            txt_internal.Text = Convert.ToString(ds.Tables[1].Rows[0]["InternalPercentage"]);
                            txt_external.Text = Convert.ToString(ds.Tables[1].Rows[0]["ExternalPercentage"]);
                            txt_allsubjectpercentage.Text = Convert.ToString(ds.Tables[1].Rows[0]["percentage"]);
                            txt_majorsubjectpercentage.Text = Convert.ToString(ds.Tables[1].Rows[0]["majorallied_percent"]);
                            txt_majorandalliedsubjectpercentage.Text = Convert.ToString(ds.Tables[1].Rows[0]["major_percent"]);
                            ddlUniv.SelectedIndex = ddlUniv.Items.IndexOf(ddlUniv.Items.FindByText(Convert.ToString(univercode)));
                            ddlexamination.SelectedIndex = ddlexamination.Items.IndexOf(ddlexamination.Items.FindByText(Convert.ToString(ds.Tables[1].Rows[0]["course_code"])));
                            if (isgrade == "" || isgrade.ToUpper() == "FALSE")
                            {
                                rdbugmarks.Checked = true;
                                rdbuggrade.Checked = false;
                            }
                            if (isgrade == "0" || isgrade == "False")
                            {
                                rdbugmarks.Checked = true;
                                rdbuggrade.Checked = false;
                            }
                            else
                            {
                                rdbugmarks.Checked = false;
                                rdbuggrade.Checked = true;
                            }
                            ddltypeofmajor.SelectedIndex = ddltypeofmajor.Items.IndexOf(ddltypeofmajor.Items.FindByValue(Convert.ToString(ds.Tables[1].Rows[0]["type_major"])));
                            txt_mediumofstudy.Text = Convert.ToString(ds.Tables[1].Rows[0]["medium"]);
                            txt_regnomarksheet.Text = Convert.ToString(ds.Tables[1].Rows[0]["registration_no"]);
                            txt_major.Text = d2.GetFunction("select textval from textvaltable where TextCode='" + Convert.ToString(ds.Tables[1].Rows[0]["branch_code"]) + "' and college_code='" + ddl_college.SelectedItem.Value + "'");
                            DropDownList1.SelectedIndex = DropDownList1.Items.IndexOf(DropDownList1.Items.FindByText(passmonth));
                            DropDownList2.SelectedIndex = DropDownList2.Items.IndexOf(DropDownList2.Items.FindByText(passyear));
                            if (Convert.ToString(ds.Tables[1].Rows[0]["type_semester"]) == "True")
                            {
                                ddltypeofsemester.SelectedIndex = ddltypeofsemester.Items.IndexOf(ddltypeofsemester.Items.FindByText("Semester"));
                            }
                            else
                            {
                                ddltypeofsemester.SelectedIndex = ddltypeofsemester.Items.IndexOf(ddltypeofsemester.Items.FindByText("Non Semester"));
                            }
                        }
                        string qq = " select * from StudPartMarkDetails where App_No='" + appfomno + "'";
                        ds1 = d2.select_method_wo_parameter(qq, "text");
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            for (int y = 0; y < ds1.Tables[0].Rows.Count; y++)
                            {
                                string part = Convert.ToString(ds1.Tables[0].Rows[y]["PartName"]);
                                string mk_s = Convert.ToString(ds1.Tables[0].Rows[y]["SecuredMark"]);
                                string mk_m = Convert.ToString(ds1.Tables[0].Rows[y]["TotalMark"]);
                                string mk_p = Convert.ToString(ds1.Tables[0].Rows[y]["Percentage"]);
                                string[] sp = mk_s.Split('.');
                                string[] sp1 = mk_m.Split('.');
                                if (part == "Part-I")
                                {
                                    txt_SecMrk1.Text = sp[0];
                                    txt_maxmark1.Text = sp1[0];
                                    txt_avg1.Text = mk_p;
                                }
                                if (part == "Part-II")
                                {
                                    txt_SecMrk2.Text = sp[0];
                                    txt_maxmark2.Text = sp1[0];
                                    txt_avg2.Text = mk_p;
                                }
                                if (part == "Part-III")
                                {
                                    txt_SecMrk3.Text = sp[0];
                                    txt_maxmark3.Text = sp1[0];
                                    txt_avg3.Text = mk_p;
                                }
                                if (part == "Part-IV")
                                {
                                    txt_SecMrk4.Text = sp[0];
                                    txt_maxmark4.Text = sp1[0];
                                    txt_avg4.Text = mk_p;
                                }
                                if (part == "Part-V")
                                {
                                    txt_SecMrk5.Text = sp[0];
                                    txt_maxmark5.Text = sp1[0];
                                    txt_avg5.Text = mk_p;
                                }
                            }
                        }
                    //}
                    string markquery = "select psubjectno,registerno,acual_marks,max_marks,noofattempt,pass_month,pass_year,semyear ,grade from perv_marks_history  where course_entno ='" + course_entno + "'";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(markquery, "text");
                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        txtTotSem.Text = Convert.ToString(ds.Tables[0].Rows.Count);
                    }
                    bindmardkgrid();
                    bindmardkgrid_mphil();
                    markdetails(course_entno, appfomno);
                }
                bindcerificate();
                certificatdetailsciew(appfomno);
                loadSpreadData(appfomno);
                turnVisibility();
                //txt_appfromno.Enabled = true;
                if (coursetype == "UG" || coursetype == "DIPLOMA")
                {
                    totalfinddiv.Visible = true;
                    UgGrid.Visible = true;
                    pgmarkvalue.Visible = false;
                    btnugaddrows.Visible = true;
                    Marksgrid.Visible = false;
                    pgtable.Visible = false;
                    ugtable.Visible = true;
                    pgnewmark.Visible = false;
                    pgaddmark.Visible = false;
                    totalfinddiv.Visible = true;
                    INTERNAL.Visible = false;
                    external.Visible = false;
                    txt_internal.Visible = false;
                    txt_external.Visible = false;
                    GridView_mphil.Visible = false;
                }
                else if (coursetype == "M.Phil" || coursetype == "DOCTORATE")
                {
                    INTERNAL.Visible = true;
                    external.Visible = true;
                    txt_internal.Visible = true;
                    txt_external.Visible = true;
                    Marksgrid.Visible = false;
                    GridView_mphil.Visible = true;
                    UgGrid.Visible = false;
                    totalfinddiv.Visible = false;
                    btnugaddrows.Visible = false;
                    pgtable.Visible = true;
                    ugtable.Visible = false;
                    totalfinddiv.Visible = false;
                    pgmarkvalue.Visible = true;
                    btn_addrows.Visible = true;
                    pgaddmark.Visible = true;
                }
                else
                {
                    GridView_mphil.Visible = false;
                    INTERNAL.Visible = false;
                    external.Visible = false;
                    txt_internal.Visible = false;
                    txt_external.Visible = false;
                    UgGrid.Visible = false;
                    totalfinddiv.Visible = false;
                    btnugaddrows.Visible = false;
                    pgmarkvalue.Visible = true;
                    Marksgrid.Visible = true;
                    pgtable.Visible = true;
                    ugtable.Visible = false;
                    pgnewmark.Visible = true;
                    pgaddmark.Visible = true;
                    totalfinddiv.Visible = false;
                    if (lbl_clgT.Text.ToLower() == "school")
                    {
                        pgtable.Visible = false;
                        ugtable.Visible = false;
                        pgaddmark.Visible = false;
                        pgnewmark.Visible = false;
                        pgmarkvalue.Visible = false;
                        Marksgrid.Visible = false;
                        educationdet.Visible = false;
                        ExmarkstQua.Visible = false;
                    }
                }
            }
        }
        catch { }
    }
    public void btnstept3_click(object sender, EventArgs e)
    {

        bool flage = false;
        bool alterflage = false;
        int count = 0;
        string txt = "";
        //if (ddl_coursetype.SelectedItem.Value != "" && ddl_coursetype.SelectedItem.Value != null)
        //{
        //    //if (ddl_coursetype.SelectedItem.Value == "PG")
        //    //{
        //    //    if (Marksgrid.Rows.Count > 0)
        //    //    {
        //    //        for (int mark = 0; mark < Marksgrid.Rows.Count; mark++)
        //    //        {
        //    //            string semoryear = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_semoryear") as TextBox).Text);
        //    //            string subject = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgsubject") as TextBox).Text);
        //    //            string sub_type_subjectno = "";
        //    //            string typeofsubject = Convert.ToString((Marksgrid.Rows[mark].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text);
        //    //            if (typeofsubject != "Others")
        //    //            {
        //    //                sub_type_subjectno = typeofsubject;
        //    //            }
        //    //            else
        //    //            {
        //    //                string subtype = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_typeofsubject") as TextBox).Text);
        //    //                sub_type_subjectno = subjectcode(txt, subtype);
        //    //            }
        //    //            string finalmarkandgrade = "";
        //    //            if (rbMarksGrade.SelectedIndex == 0)
        //    //            {
        //    //                finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_marks") as TextBox).Text);
        //    //            }
        //    //            else
        //    //            {
        //    //                finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_Grade") as TextBox).Text);
        //    //            }
        //    //            string Month = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgmonth") as TextBox).Text);
        //    //            string year1 = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgyear") as TextBox).Text);
        //    //            string max_mark = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_maximum_marks") as TextBox).Text);
        //    //            if (semoryear != "" && sub_type_subjectno != "")
        //    //            {
        //    //                if (semoryear.Trim() == "" || subject.Trim() == "" || sub_type_subjectno.Trim() == "" || finalmarkandgrade.Trim() == "" || Month.Trim() == "" || year1.Trim() == "" || max_mark.Trim() == "")
        //    //                {
        //    //                    count++;
        //    //                    flage = true;
        //    //                }
        //    //                else
        //    //                {
        //    //                    if (count == 0)
        //    //                    {
        //    //                        flage = false;
        //    //                    }
        //    //                }
        //    //            }
        //    //        }
        //    //    }
        //    //}
        //    if (!isCourseTypePg())
        //    {
        //        if (UgGrid.Rows.Count > 0)
        //        {
        //            for (int mark = 0; mark < UgGrid.Rows.Count - 1; mark++)
        //            {
        //                string subjectname = "";
        //                if (mark != 1)
        //                {
        //                    string subject_name = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
        //                    if (subject_name == "---Select---")
        //                    {
        //                    }
        //                    else
        //                        if (subject_name == "Others")
        //                        {
        //                            subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
        //                        }
        //                        else
        //                        {
        //                            subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
        //                        }
        //                }
        //                else if (mark == 1)
        //                {
        //                    subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
        //                }
        //                // string subjectcode = Convert.ToString((Marksgrid.Rows[mark].FindControl("lblsubcode") as Label).Text);
        //                string finalmarkandgrade = "";
        //                if (rbMarksGrade.SelectedIndex == 0)
        //                {
        //                    finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmagrs") as TextBox).Text);
        //                }
        //                else
        //                {
        //                    finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ug_grade") as TextBox).Text);
        //                }
        //                string Month = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmonth") as TextBox).Text);
        //                string year1 = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugyear") as TextBox).Text);
        //                string regno = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugregno") as TextBox).Text);
        //                string nofoattempts = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugnoofattmpts") as TextBox).Text);
        //                string max_mark = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_rg_max") as TextBox).Text);
        //                //if (Month.Trim() == "" || subjectname.Trim() == "" || finalmarkandgrade.Trim() == "" || year1.Trim() == "" || regno.Trim() == "" || nofoattempts.Trim() == "" || max_mark.Trim() == "")
        //                //{
        //                //    count++;
        //                //    flage = true;
        //                //}
        //                //else
        //                //{
        //                //    if (count == 0)
        //                //    {
        //                //        flage = false;
        //                //    }
        //                //}
        //            }
        //        }
        //    }
        //    if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
        //    {
        //        if (txt_cutof.Visible == true)
        //        {
        //            if (txt_cutof.Text.Trim() == "")
        //            {
        //                flage = false;
        //            }
        //        }
        //    }
        //    else
        //    {
        //        if (txt_cutofpg.Visible == true)
        //        {
        //            if (txt_cutofpg.Text.Trim() == "")
        //            {
        //                flage = false;
        //            }
        //        }
        //    }
        //    if (flage != false)
        //    {
        //        ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Fill all the fields\");", true);
        //        //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Please Fill All Fields')", true);
        //    }
        //    else
        //    {
        //        TabContainer1.ActiveTabIndex = 1;
        //        step2.Visible = true;
        //    }
        //}
        turnVisibility();

        string errMsg = allFieldsOk().Trim();
        if (string.IsNullOrEmpty(errMsg))
        {
            format2save();
        }
        else
        {
        }
        turnVisibility();
    }
    public string ToRoman(string part)
    {
        string roman = "";
        try
        {
            switch (part)
            {
                case "1":
                    roman = "I";
                    break;
                case "2":
                    roman = "II";
                    break;
                case "3":
                    roman = "III";
                    break;
                case "4":
                    roman = "IV";
                    break;
                case "5":
                    roman = "V";
                    break;
                case "6":
                    roman = "VI";
                    break;
                case "7":
                    roman = "VII";
                    break;
                case "8":
                    roman = "VIII";
                    break;
                case "9":
                    roman = "IX";
                    break;
                case "10":
                    roman = "X";
                    break;
                case "11":
                    roman = "XI";
                    break;
                case "12":
                    roman = "XII";
                    break;
            }
        }
        catch (Exception ex)
        {
        }
        return roman;
    }
    public void format2save()
    {
        try
        {
            applicationNoRightsacr();
            bool flage = false;
            bool alterflage = false;
            int count = 0;
            string txt = "";
            string newmonth = "";
            string newyear = "";
            string checkno = d2.GetFunction("select app_formno from applyn where app_formno='" + txt_appfromno.Text + "'");
            if (checkno != "0")
            {
                lbl_alert.Text = "Application No Already Exist";
                ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Application No Already Exist\");", true);
                return;
            }
            //if (ddl_coursetype.SelectedItem.Value != "" && ddl_coursetype.SelectedItem.Value != null)
            //{
                if (MarksCheck())
                {
                    //if (ddl_coursetype.SelectedItem.Value == "PG")
                    //{
                    //    if (Marksgrid.Rows.Count > 0)
                    //    {
                    //        for (int mark = 0; mark < Marksgrid.Rows.Count; mark++)
                    //        {
                    //            string semoryear = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_semoryear") as TextBox).Text);
                    //            string subject = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgsubject") as TextBox).Text);
                    //            string sub_type_subjectno = "";
                    //            string typeofsubject = Convert.ToString((Marksgrid.Rows[mark].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text);
                    //            if (typeofsubject != "Others")
                    //            {
                    //                sub_type_subjectno = typeofsubject;
                    //            }
                    //            else
                    //            {
                    //                string subtype = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_typeofsubject") as TextBox).Text);
                    //                sub_type_subjectno = subjectcode(txt, subtype);
                    //            }
                    //            string finalmarkandgrade = "";
                    //            if (rbMarksGrade.SelectedIndex == 0)
                    //            {
                    //                finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_marks") as TextBox).Text);
                    //            }
                    //            else
                    //            {
                    //                finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_Grade") as TextBox).Text);
                    //            }
                    //            string Month = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgmonth") as TextBox).Text);
                    //            string year1 = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgyear") as TextBox).Text);
                    //            string max_mark = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_maximum_marks") as TextBox).Text);
                    //            if (DropDownList1.SelectedItem.Text.Trim() == "Month" || DropDownList2.SelectedItem.Text.Trim() == "Year" || ddlexamination.SelectedItem.Text.Trim() == "Select" || ddltypeofmajor.SelectedItem.Text.Trim() == "Select" || ddltypeofmajor.SelectedItem.Text.Trim() == "Select" || ddltypeofsemester.SelectedItem.Text.Trim() == "Select")
                    //            //semoryear.Trim() == "" || subject.Trim() == "" || sub_type_subjectno.Trim() == "" || finalmarkandgrade.Trim() == "" || Month.Trim() == "" || year1.Trim() == "" || max_mark.Trim() == "" ||
                    //            {
                    //                count++;
                    //                flage = true;
                    //            }
                    //            else
                    //            {
                    //                if (count == 0)
                    //                {
                    //                    flage = false;
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                    //if (ddl_coursetype.SelectedItem.Value == "M.PHIL")
                    //{
                    //    if (GridView_mphil.Rows.Count > 0)
                    //    {
                    //        for (int mark = 0; mark < GridView_mphil.Rows.Count; mark++)
                    //        {
                    //            string semoryear = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_semoryear") as TextBox).Text);
                    //            string subject = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgsubject") as TextBox).Text);
                    //            string sub_type_subjectno = "";
                    //            string typeofsubject = Convert.ToString((GridView_mphil.Rows[mark].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text);
                    //            if (typeofsubject != "Others")
                    //            {
                    //                sub_type_subjectno = typeofsubject;
                    //            }
                    //            else
                    //            {
                    //                string subtype = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_typeofsubject") as TextBox).Text);
                    //                sub_type_subjectno = subjectcode(txt, subtype);
                    //            }
                    //            string finalmarkandgrade = "";
                    //            if (rbMarksGrade.SelectedItem.Text == "Marks")
                    //            {
                    //                finalmarkandgrade = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_marks") as TextBox).Text);
                    //            }
                    //            if (rbMarksGrade.SelectedItem.Text == "Grade")
                    //            {
                    //                finalmarkandgrade = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_Grade") as TextBox).Text);
                    //            }
                    //            string Month = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgmonth") as TextBox).Text);
                    //            string year1 = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgyear") as TextBox).Text);
                    //            string max_mark = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_maximum_marks") as TextBox).Text);
                    //            if (semoryear.Trim() == "" || subject.Trim() == "" || sub_type_subjectno.Trim() == "" || finalmarkandgrade.Trim() == "" || Month.Trim() == "" || year1.Trim() == "" || max_mark.Trim() == "")
                    //            {
                    //                count++;
                    //                flage = true;
                    //            }
                    //            else
                    //            {
                    //                if (count == 0)
                    //                {
                    //                    flage = false;
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                    //if (ddl_coursetype.SelectedItem.Value == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
                    //{
                    //    if (UgGrid.Rows.Count > 0)
                    //    {
                    //        for (int mark = 0; mark < UgGrid.Rows.Count - 1; mark++)
                    //        {
                    //            string subjectname = "";
                    //            if (mark != 1)
                    //            {
                    //                string subject_name = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
                    //                if (subject_name == "---Select---")
                    //                {
                    //                }
                    //                else
                    //                    if (subject_name == "Others")
                    //                    {
                    //                        subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
                    //                    }
                    //                    else
                    //                    {
                    //                        subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
                    //                    }
                    //            }
                    //            else if (mark == 1)
                    //            {
                    //                subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
                    //            }
                    //            // string subjectcode = Convert.ToString((Marksgrid.Rows[mark].FindControl("lblsubcode") as Label).Text);
                    //            string finalmarkandgrade = "";
                    //            if (rbMarksGrade.SelectedIndex == 0)
                    //            {
                    //                finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmagrs") as TextBox).Text);
                    //            }
                    //            else
                    //            {
                    //                finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ug_grade") as TextBox).Text);
                    //            }
                    //            string Month = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmonth") as TextBox).Text);
                    //            string year1 = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugyear") as TextBox).Text);
                    //            string regno = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugregno") as TextBox).Text);
                    //            string nofoattempts = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugnoofattmpts") as TextBox).Text);
                    //            string max_mark = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_rg_max") as TextBox).Text);
                    //            newmonth = Month;
                    //            newyear = year1;
                    //        }
                    //    }
                    //}
                }
                else
                {
                    flage = false;
                }
                //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
                //{
                //    if (txt_cutof.Visible == true)
                //    {
                //        if (txt_cutof.Text.Trim() == "")
                //        {
                //            flage = false;
                //        }
                //    }
                //}
                //else if (ddl_coursetype.SelectedItem.Text == "PG")
                //{
                //    if (txt_cutofpg.Visible == true)
                //    {
                //        if (txt_cutofpg.Text.Trim() == "")
                //        {
                //            flage = false;
                //        }
                //    }
                //}
                if (flage == false)
                {
                    string typecollege = Convert.ToString(ddl_college.SelectedItem.Text);
                    Session["typecollege"] = typecollege.ToString();
                    string educationlevel = "";
                    Session["educationlevel"] = educationlevel.ToString();
                    string gradutation = "";
                    Session["gradutation"] = gradutation.ToString();
                    string course = Convert.ToString(ddl_courseone.SelectedItem.Text);
                    Session["course"] = course.ToString();
                    string studentfistname = Convert.ToString(txt_FName_app.Text.First().ToString().ToUpper() + txt_FName_app.Text.Substring(1));
                    Session["studentfistname"] = studentfistname.ToString();
                    string lastname = "";
                    if (txt_LName_app.Text.Trim() != "")
                    {
                        lastname = Convert.ToString(txt_LName_app.Text.First().ToString().ToUpper() + txt_LName_app.Text.Substring(1));
                        Session["lastname"] = lastname.ToString();
                    }
                    string Student_fullname = studentfistname + " " + lastname;
                    Session["student_Fullname"] = Student_fullname.ToString();
                    //string firstnametamil = Convert.ToString(txtfirstnametamil.Text);
                    //string lastnametamil = Convert.ToString(txtlastnametamil.Text);
                    //Session["firstnametamil"] = Convert.ToString(firstnametamil) + " " + Convert.ToString(lastnametamil);
                    //string fullnametami = Convert.ToString(firstnametamil) + " " + Convert.ToString(lastnametamil);
                    string fathernametamil = Convert.ToString(txt_fathernametamil.Text);
                    Session["fathernametamil"] = Convert.ToString(fathernametamil);
                    string fatheranualincome = "";
                    string fincome = Convert.ToString(txt_annualincome.Text);
                    if (fincome.Trim() != "")
                    {
                        txt = "fin";
                        string fincome1 = subjectcode(txt, fincome);
                        fatheranualincome = Convert.ToString(fincome1);
                        Session["fatheranualincome"] = Convert.ToString(fincome);
                    }
                    else
                    {
                        fatheranualincome = "0";
                        Session["fatheranualincome"] = "";
                    }
                    string fathercontactno = Convert.ToString(txt_fathercontactno.Text);
                    Session["fathercontactno"] = Convert.ToString(fathercontactno);
                    //added by Deepali on 7.4.18------------------
                    string fathercontactno2 = Convert.ToString(txt_fathercontactno2.Text);
                    Session["fathercontactno2"] = Convert.ToString(fathercontactno2);
                    //---------------------------------------------
                    //if (fathercontactno.Trim() == "")
                    //{
                    //    fathercontactno = "0";
                    //}
                    string fatheremail = Convert.ToString(txt_fatheremail.Text);
                    Session["fatheremail"] = Convert.ToString(fatheremail);
                    string mathername = Convert.ToString(txt_mothername.Text);
                    Session["mathername"] = Convert.ToString(mathername);
                    string motheroccupation = "";
                    if (Convert.ToString(ddlmotheroccupation.SelectedItem.Text) != "Select")
                    {
                        if (Convert.ToString(ddlmotheroccupation.SelectedItem.Text) != "Others")
                        {
                            motheroccupation = Convert.ToString(ddlmotheroccupation.SelectedItem.Value);
                            Session["motheroccupation"] = Convert.ToString(ddlmotheroccupation.SelectedItem.Text);
                        }
                        else
                        {
                            txt = "moccu";
                            string occu_value = Convert.ToString(txt_motheroccupation.Text.First().ToString().ToUpper() + txt_motheroccupation.Text.Substring(1));
                            if (occu_value.Trim() != "")
                            {
                                motheroccupation = subjectcode(txt, occu_value);
                                Session["motheroccupation"] = Convert.ToString(occu_value);
                            }
                            else
                            {
                                motheroccupation = "0";
                                Session["motheroccupation"] = "";
                            }
                        }
                    }
                    else
                    {
                        motheroccupation = "0";
                        Session["motheroccupation"] = "";
                    }
                    string motherincome = "";
                    string mincome = Convert.ToString(txt_motherannualincome.Text);
                    if (mincome.Trim() != "")
                    {
                        txt = "fin";
                        mincome = subjectcode(txt, mincome);
                        motherincome = Convert.ToString(mincome);
                        Session["motherincome"] = Convert.ToString(txt_motherannualincome.Text);
                    }
                    else
                    {
                        motherincome = "0";
                        Session["motherincome"] = "";
                    }
                    string mothercontectno = Convert.ToString(txt_mothercontactno.Text);
                    Session["mothercontectno"] = Convert.ToString(mothercontectno);
                    //if (mothercontectno.Trim() == "")
                    //{
                    //    mothercontectno = "0";
                    //}
                    string motheremail = Convert.ToString(txt_motheremail.Text);
                    Session["motheremail"] = Convert.ToString(motheremail);
                    string guardianame = Convert.ToString(txt_guardiananme.Text);
                    Session["guardianame"] = Convert.ToString(guardianame);
                    string guardiancontactno = Convert.ToString(txt_guardianconatactno.Text);
                    Session["guardiancontactno"] = Convert.ToString(guardiancontactno);
                    //if (guardiancontactno.Trim() == "")
                    //{
                    //    guardiancontactno = "0";
                    //}
                    string guardianemail = Convert.ToString(txt_guardianemail.Text);
                    Session["guardianemail"] = Convert.ToString(guardianemail);
                    string part1language = "";
                    for (int col = 0; col < rdblistlanguage.Items.Count; col++)
                    {
                        if (rdblistlanguage.Items[col].Selected == true)
                        {
                            part1language = Convert.ToString(rdblistlanguage.Items[col].Text);
                            txt = "Cplan";
                            Session["part1language"] = Convert.ToString(part1language);
                            part1language = subjectcode(txt, part1language);
                        }
                    }
                    string placeofbirth = Convert.ToString(txt_placeofbirth.Text);
                    if (placeofbirth.Trim() != "")
                    {
                        Session["placeofbirth"] = Convert.ToString(placeofbirth);
                    }
                    else
                    {
                        Session["placeofbirth"] = "-";
                    }
                    string bloodgroup = "";
                    if (Convert.ToString(ddlbloodgroup.SelectedItem.Text) != "Select")
                    {
                        if (Convert.ToString(ddlbloodgroup.SelectedItem.Text) != "Others")
                        {
                            bloodgroup = Convert.ToString(ddlbloodgroup.SelectedItem.Value);
                            Session["bloodgroup"] = Convert.ToString(ddlbloodgroup.SelectedItem.Text);
                        }
                        else
                        {
                            txt = "bgrou";
                            string occu_value = Convert.ToString(txt_otherbloodgroup.Text.First().ToString().ToUpper() + txt_otherbloodgroup.Text.Substring(1));
                            if (occu_value.Trim() != "")
                            {
                                bloodgroup = subjectcode(txt, occu_value);
                                Session["bloodgroup"] = Convert.ToString(occu_value);
                            }
                            else
                            {
                                bloodgroup = "0";
                                Session["bloodgroup"] = "";
                            }
                        }
                    }
                    else
                    {
                        bloodgroup = "0";
                        Session["bloodgroup"] = "";
                    }
                    string Aadharcardno = "";
                    if (Convert.ToString(txt_Aadharcardno.Text).Trim() != "")
                    {
                        Aadharcardno = Convert.ToString(txt_Aadharcardno.Text);
                        Session["Aadharcardno"] = Aadharcardno;
                    }
                    else
                    {
                        Aadharcardno = "";
                        Session["Aadharcardno"] = "";
                    }
                    string EMIS_No = "";
                    if (Convert.ToString(txtemis_no.Text).Trim() != "")
                    {
                        EMIS_No = Convert.ToString(txtemis_no.Text);
                        Session["EMIS_No"] = EMIS_No;
                    }
                    else
                    {
                        EMIS_No = "";
                        Session["EMIS_No"] = "";
                    }
                    string stud_height = "";
                    if (Convert.ToString(txt_height.Text).Trim() != "")
                    {
                        stud_height = Convert.ToString(txt_height.Text);
                        Session["stud_height"] = stud_height;
                    }
                    else
                    {
                        stud_height = "";
                        Session["stud_height"] = "";
                    }
                    string stud_weight = "";
                    if (Convert.ToString(txt_weight.Text).Trim() != "")
                    {
                        stud_weight = Convert.ToString(txt_weight.Text);
                        Session["stud_weight"] = stud_weight;
                    }
                    else
                    {
                        stud_weight = "";
                        Session["stud_weight"] = "";
                    }
                    string dataofbirth = "";
                    //string date = Convert.ToString(ddldobdate.SelectedItem.Text);
                    //string month = Convert.ToString(ddldobMonth.SelectedItem.Value);// jairam
                    //string year = Convert.ToString(ddldobYear.SelectedItem.Text);
                    //if (month.Length == 1)
                    //{
                    //    month = "0" + month;
                    //}
                    //if (date.Length == 1)
                    //{
                    //    date = "0" + date;
                    //}
                    //dataofbirth = month + "/" + date + "/" + year;
                    //Session["dataofbirth"] = Convert.ToString(date + "/" + month + "/" + year);
                    string[] dob = txt_dob.Text.Split('/');
                    DateTime dob_dt = new DateTime();
                    DateTime.TryParse(Convert.ToString(dob[1] + '/' + dob[0] + '/' + dob[2]), out dob_dt);
                    dataofbirth = dob_dt.ToString("MM/dd/yyyy");
                    Session["dataofbirth"] = Convert.ToString(txt_dob.Text);
                    string stud_Dob = dataofbirth;
                    string sex = Convert.ToString(ddlsex2.SelectedItem.Value);
                    Session["sex"] = Convert.ToString(ddlsex2.SelectedItem.Text);
                    string parentsname = Convert.ToString(txt_parentsname.Text.First().ToString().ToUpper() + txt_parentsname.Text.Substring(1));
                    Session["parentsname"] = parentsname.ToString();
                    string relationship = "";
                    Session["relationship"] = relationship.ToString();
                    string occupation = "";
                    if (Convert.ToString(ddloccupation.SelectedItem.Text) != "Select")
                    {
                        if (Convert.ToString(ddloccupation.SelectedItem.Text) != "Others")
                        {
                            occupation = Convert.ToString(ddloccupation.SelectedItem.Value);
                            Session["occupation"] = Convert.ToString(ddloccupation.SelectedItem.Text);
                        }
                        else
                        {
                            txt = "foccu";
                            string occu_value = Convert.ToString(txt_occupation.Text.First().ToString().ToUpper() + txt_occupation.Text.Substring(1));
                            if (occu_value.Trim() != "")
                            {
                                occupation = subjectcode(txt, occu_value);
                                Session["occupation"] = Convert.ToString(occu_value);
                            }
                            else
                            {
                                occupation = "0";
                                Session["occupation"] = "";
                            }
                        }
                    }
                    else if (Convert.ToString(ddloccupation.SelectedItem.Text) == "Select")
                    {
                        occupation = "0";
                        Session["occupation"] = "";
                    }
                    string mothertoung = "";
                    if (ddlmothertounge.SelectedItem.Text != "Others" && ddlmothertounge.SelectedItem.Text != "Select")
                    {
                        mothertoung = Convert.ToString(ddlmothertounge.SelectedItem.Value);
                        Session["mothertoung"] = Convert.ToString(ddlmothertounge.SelectedItem.Text);
                    }
                    else
                    {
                        if (Convert.ToString(txt_mothertounge.Text) != "")
                        {
                            txt = "mton";
                            string mother = Convert.ToString(txt_mothertounge.Text.First().ToString().ToUpper() + txt_mothertounge.Text.Substring(1));
                            mothertoung = subjectcode(txt, mother);
                            Session["mothertoung"] = Convert.ToString(txt_mothertounge.Text.First().ToString().ToUpper() + txt_mothertounge.Text.Substring(1));
                        }
                        else
                        {
                            mothertoung = "0";
                            Session["mothertoung"] = "-";
                        }
                    }
                    string religion = "";
                    string subreligion = "";
                    if (ddlreligion.SelectedItem.Text != "Select")
                    {
                        if (ddlreligion.SelectedItem.Text != "Others" && ddlreligion.SelectedItem.Text.ToUpper() != "CHRISTIAN")
                        {
                            religion = Convert.ToString(ddlreligion.SelectedItem.Value);
                            Session["religion"] = Convert.ToString(ddlreligion.SelectedItem.Text);
                        }
                        //else if (ddlreligion.SelectedItem.Text.ToUpper() == "CHRISTIAN")
                        //{
                        //    religion = Convert.ToString(ddlreligion.SelectedItem.Value);
                        //    Session["religion"] = Convert.ToString(ddlreligion.SelectedItem.Text);
                        //    if (ddlsubreligion.SelectedItem.Text != "Others")
                        //    {
                        //        subreligion = Convert.ToString(ddlsubreligion.SelectedItem.Value);
                        //        Session["subreligion"] = Convert.ToString(ddlreligion.SelectedItem.Text);
                        //    }
                        //    else
                        //    {
                        //        txt = "SCast";
                        //        string addsubrelig = Convert.ToString(txt_otherreligion.Text.First().ToString().ToUpper() + txt_otherreligion.Text.Substring(1));
                        //        if (addsubrelig.Trim() != "")
                        //        {
                        //            subreligion = subjectcode(txt, addsubrelig);
                        //            Session["subreligion"] = Convert.ToString(addsubrelig);
                        //        }
                        //    }
                        //}
                        else
                        {
                            txt = "relig";
                            string relig = Convert.ToString(txt_otherreligion.Text.First().ToString().ToUpper() + txt_otherreligion.Text.Substring(1));
                            if (relig.Trim() != "")
                            {
                                religion = subjectcode(txt, relig);
                                Session["religion"] = Convert.ToString(religion);
                            }
                        }
                    }
                    if (subreligion.Trim() == "")
                    {
                        subreligion = "0";
                    }
                    string nationality = "";
                    if (ddlcountry.SelectedItem.Text != "Select")
                    {
                        if (ddlcountry.SelectedItem.Text != "Others")
                        {
                            nationality = Convert.ToString(ddlcountry.SelectedItem.Value);
                            Session["nationality"] = Convert.ToString(ddlcountry.SelectedItem.Text);
                        }
                        else
                        {
                            txt = "citi";
                            string national = Convert.ToString(txt_othernationality.Text.First().ToString().ToUpper() + txt_othernationality.Text.Substring(1));
                            nationality = subjectcode(txt, national);
                            Session["nationality"] = Convert.ToString(nationality);
                        }
                    }
                    string community = "";
                    if (ddlcoummunity.SelectedItem.Text != "Others" && ddlcoummunity.SelectedItem.Text != "Select")
                    {
                        community = Convert.ToString(ddlcoummunity.SelectedItem.Value);
                        Session["community"] = Convert.ToString(ddlcoummunity.SelectedItem.Text);
                    }
                    else
                    {
                        txt = "comm";
                        string comm = Convert.ToString(txtCommunity.Text.First().ToString().ToUpper() + txtCommunity.Text.Substring(1));
                        community = subjectcode(txt, comm);
                        Session["community"] = Convert.ToString(community);
                    }
                    string caste = "";
                    if (txt_Caste.Text.Trim() != "")
                    {
                        txt = "caste";
                        string caste1 = Convert.ToString(txt_Caste.Text.First().ToString().ToUpper() + txt_Caste.Text.Substring(1));
                        caste = subjectcode(txt, caste1);
                        Session["caste"] = Convert.ToString(txt_Caste.Text.First().ToString().ToUpper() + txt_Caste.Text.Substring(1));
                    }
                    else
                    {
                        caste = "0";
                        Session["caste"] = "-";
                    }
                    string missionaychild = "";
                    string missinarychilddescription = "";
                    if (ddlreligion.SelectedItem.Text.ToUpper() == "CHRISTIAN")
                    {
                    }
                    string island = "";
                    if (rdbtaany.Checked == true) // jairam
                    {
                        island = "1";
                        Session["island"] = rdbtaany.Text.ToString();
                    }
                    else if (rdbtaanN.Checked == true)
                    {
                        island = "0";
                        Session["island"] = rdbtaanN.Text.ToString();
                    }
                    else
                    {
                        island = "0";
                        Session["island"] = "-";
                    }
                    string ex_service = "";
                    if (rdbexy.Checked == true)
                    {
                        ex_service = "1";
                        Session["ex_service"] = Convert.ToString(rdbexy.Text);
                    }
                    else if (rdbexN.Checked == true)
                    {
                        ex_service = "0";
                        Session["ex_service"] = Convert.ToString(rdbexN.Text);
                    }
                    else
                    {
                        ex_service = "0";
                        Session["ex_service"] = "-";
                    }
                    string isdisable = "";
                    string visuallychallange = "0";
                    string physicallychallange = "0";
                    string learningdisable = "0";
                    string otherdiscription = "";
                    if (RadioButton1.Checked == true)
                    {
                        isdisable = "1";
                        Session["differently"] = Convert.ToString(RadioButton1.Text);
                        if (ddldiferentltyable.SelectedItem.Text != "Select")
                        {
                            if (ddldiferentltyable.SelectedItem.Text != "Others")
                            {
                                if (ddldiferentltyable.SelectedItem.Value == "1")
                                {
                                    visuallychallange = "1";
                                    Session["visuallychallange"] = Convert.ToString(ddldiferentltyable.SelectedItem.Text);
                                }
                                else
                                {
                                    visuallychallange = "0";
                                    Session["visuallychallange"] = "";
                                }
                                if (ddldiferentltyable.SelectedItem.Value == "2")
                                {
                                    physicallychallange = "1";
                                    Session["physicallychallange"] = Convert.ToString(ddldiferentltyable.SelectedItem.Text);
                                }
                                else
                                {
                                    physicallychallange = "0";
                                    Session["physicallychallange"] = "";
                                }
                                if (ddldiferentltyable.SelectedItem.Value == "3")
                                {
                                    learningdisable = "1";
                                    Session["learningdisable"] = Convert.ToString(ddldiferentltyable.SelectedItem.Text);
                                }
                                else
                                {
                                    learningdisable = "0";
                                    Session["learningdisable"] = "";
                                }
                            }
                            else
                            {
                                if (txt_otherdifferentlyable.Text.Trim() != "")
                                {
                                    otherdiscription = txt_otherdifferentlyable.Text;
                                    Session["otherdiscription"] = Convert.ToString(txt_otherdifferentlyable.Text.First().ToString().ToUpper() + txt_otherdifferentlyable.Text.Substring(1));
                                }
                                else
                                {
                                    otherdiscription = "";
                                    Session["otherdiscription"] = "";
                                }
                            }
                        }
                        else
                        {
                            isdisable = "0";
                            Session["differently"] = Convert.ToString(RadioButton1.Text);
                            visuallychallange = "0";
                            Session["visuallychallange"] = "";
                            physicallychallange = "0";
                            Session["physicallychallange"] = "";
                            learningdisable = "0";
                            Session["learningdisable"] = "";
                            otherdiscription = "";
                            Session["otherdiscription"] = "";
                        }
                    }
                    else if (RadioButton2.Checked == true)
                    {
                        isdisable = "0";
                        Session["differently"] = Convert.ToString(RadioButton2.Text);
                        visuallychallange = "0";
                        Session["visuallychallange"] = "";
                        physicallychallange = "0";
                        Session["physicallychallange"] = "";
                        learningdisable = "0";
                        Session["learningdisable"] = "";
                        otherdiscription = "";
                        Session["otherdiscription"] = "";
                    }
                    string firstgenartion = "";
                    if (RadioButton3.Checked == true)
                    {
                        firstgenartion = "1";
                        Session["firstgenartion"] = Convert.ToString(RadioButton3.Text);
                    }
                    else if (RadioButton4.Checked == true)
                    {
                        firstgenartion = "0";
                        Session["firstgenartion"] = Convert.ToString(RadioButton4.Text);
                    }
                    else
                    {
                        firstgenartion = "0";
                        Session["firstgenartion"] = "-";
                    }
                    string Resisdancy = "";
                    if (RadioButton5.Checked == true)
                    {
                        Resisdancy = "1";
                        Session["Resisdancy"] = Convert.ToString(RadioButton5.Text);
                    }
                    else if (RadioButton6.Checked == true)
                    {
                        Resisdancy = "0";
                        Session["Resisdancy"] = Convert.ToString(RadioButton6.Text);
                    }
                    else
                    {
                        Resisdancy = "0";
                        Session["Resisdancy"] = "-";
                    }
                    string distinctionsport = "";
                    string specifysports = "";
                    if (rdbdistinctionsportsYes.Checked == true)
                    {
                        string distinctionsport1 = Convert.ToString(ddldistinctionsports.SelectedItem.Text);
                        if (distinctionsport1 == "Others")
                        {
                            txt = "cocur";
                            string distinctionsport_value = Convert.ToString(txt_sports.Text.First().ToString().ToUpper() + txt_sports.Text.Substring(1));
                            distinctionsport = subjectcode(txt, distinctionsport_value);
                            Session["distinctionsport"] = distinctionsport.ToString();
                            specifysports = Convert.ToString(txt_specify.Text);
                        }
                        else
                        {
                            if (distinctionsport1 != "Select")
                            {
                                distinctionsport = Convert.ToString(ddldistinctionsports.SelectedItem.Value);
                                Session["distinctionsport"] = ddldistinctionsports.SelectedItem.Text.ToString();
                                specifysports = Convert.ToString(txt_specify.Text);
                            }
                            else
                            {
                                distinctionsport = "0";
                                Session["distinctionsport"] = "";
                            }
                        }
                    }
                    else if (rdbdistinctionsportsNo.Checked == true)
                    {
                        distinctionsport = "0";
                        Session["distinctionsport"] = Convert.ToString(rdbdistinctionsportsNo.Text);
                    }
                    string co_curricular = "";
                    string specifyactivites = "";
                    if (rdbextraactivitesYes.Checked == true)
                    {
                        if (DropDownList4.SelectedItem.Text != "Select")
                        {
                            if (DropDownList4.SelectedItem.Text != "Others")
                            {
                                co_curricular = Convert.ToString(DropDownList4.SelectedItem.Value);
                                Session["co_curricular"] = Convert.ToString(DropDownList4.SelectedItem.Text);
                                specifyactivites = Convert.ToString(txt_specifyNcc.Text);
                            }
                            else
                            {
                                txt = "cocur";
                                string co_curricular1 = Convert.ToString(txt_extraactivites.Text.First().ToString().ToUpper() + txt_extraactivites.Text.Substring(1));
                                co_curricular = subjectcode(txt, co_curricular1);
                                Session["co_curricular"] = Convert.ToString(txt_extraactivites.Text.First().ToString().ToUpper() + txt_extraactivites.Text.Substring(1));
                                specifyactivites = Convert.ToString(txt_specifyNcc.Text);
                            }
                        }
                        else if (DropDownList4.SelectedItem.Text.Trim() == "Select") // jairam
                        {
                            co_curricular = "0";
                            Session["co_curricular"] = "-";
                        }
                    }
                    else if (rdbextraactivitesNo.Checked == true)
                    {
                        co_curricular = "0";
                        Session["co_curricular"] = Convert.ToString(rdbextraactivitesNo.Text);
                    }
                    string paddressline1 = Convert.ToString(txt_address1.Text);
                    Session["paddressline1"] = paddressline1.ToString();
                    string paddressline2 = "";
                    if (txt_address2.Text.Trim() != "")
                    {
                        paddressline2 = Convert.ToString(txt_address2.Text);
                    }
                    if (paddressline2.Trim() != "")
                    {
                        Session["paddressline2"] = paddressline2.ToString();
                    }
                    else
                    {
                        Session["paddressline2"] = "-";
                    }
                    string paddressline3 = "";
                    if (txt_address3.Text.Trim() != "")
                    {
                        paddressline3 = Convert.ToString(txt_address3.Text);
                    }
                    if (paddressline3.Trim() != "")
                    {
                        Session["paddressline3"] = paddressline3.ToString();
                    }
                    else
                    {
                        Session["paddressline3"] = "-";
                    }
                    paddressline2 = paddressline2 + "/" + paddressline3;
                    string pcity = "";
                    if (txt_Pcity.Text.Trim() != "")
                    {
                        pcity = Convert.ToString(txt_Pcity.Text.First().ToString().ToUpper() + txt_Pcity.Text.Substring(1));
                        Session["pcity"] = Convert.ToString(txt_Pcity.Text.First().ToString().ToUpper() + txt_Pcity.Text.Substring(1));
                        pcity = subjectcode("city", pcity);
                    }
                    string pstate = "";
                    if (ddlpstate.SelectedItem.Text == "Others")
                    {
                        txt = "state";
                        string ses_value = Convert.ToString(txt_potherstate.Text.First().ToString().ToUpper() + txt_potherstate.Text.Substring(1));
                        pstate = subjectcode(txt, ses_value);
                        Session["pstate"] = Convert.ToString(ses_value);
                    }
                    else if (ddlpstate.SelectedItem.Text == "Select")
                    {
                        pstate = "0";
                        Session["pstate"] = "";
                    }
                    else
                    {
                        pstate = Convert.ToString(ddlpstate.SelectedItem.Value);
                        Session["pstate"] = Convert.ToString(ddlpstate.SelectedItem.Text);
                    }
                    string pcountry = "0";
                    //if (txt_pcountry.Text.Trim() != "")
                    //{
                    //    txt = "coun";
                    //    string pcountry1 = Convert.ToString(txt_pcountry.Text.First().ToString().ToUpper() + txt_pcountry.Text.Substring(1));
                    //    pcountry = pcountry1;// subjectcode(txt, pcountry1);
                    //    Session["pcountry"] = Convert.ToString(txt_pcountry.Text.First().ToString().ToUpper() + txt_pcountry.Text.Substring(1));
                    //}
                    if (ddlpcountry.SelectedItem.Text != "Select")
                    {
                        pcountry = Convert.ToString(ddlpcountry.SelectedItem.Text);
                        txt = "coun";
                        string ccountry1 = pcountry;
                        pcountry = subjectcode(txt, ccountry1);
                    }
                    string ppostelcode = Convert.ToString(txt_postelcode.Text);
                    Session["ppostelcode"] = ppostelcode.ToString();
                    string pmobilenumber = "";
                    Session["pmobilenumber"] = pmobilenumber.ToString();
                    string pemail = "";
                    Session["pemail"] = pemail.ToString();
                    string phonenumber = "";
                    string std = Convert.ToString(txt_std.Text);
                    string phonen = Convert.ToString(txt_phonenumber.Text);
                    phonenumber = std + "-" + phonen;
                    if (std != "" && phonen != "")
                    {
                        Session["phonenumber"] = phonenumber.ToString();
                    }
                    else
                    {
                        phonenumber = "0";
                    }
                    string alterphone = "";
                    if (alterphone.Trim() != "")
                    {
                        Session["alterphone"] = alterphone.ToString();
                    }
                    else
                    {
                        Session["alterphone"] = "-";
                    }
                    string caddressline2 = "";
                    string caddressline3 = "";
                    string ccity = "";
                    string caddressline1 = "";
                    string cstate = "";
                    string cpostelcode = "";
                    string ccountry = "0";
                    string cphonenumber = "";
                    //// Communication Address
                    //if (rdbsameno.Checked == true)
                    //{
                    caddressline1 = Convert.ToString(txt_caddress1.Text);
                    if (txt_caddress2.Text.Trim() != "")
                    {
                        caddressline2 = Convert.ToString(txt_caddress2.Text);
                    }
                    if (txt_caddress3.Text.Trim() != "")
                    {
                        caddressline3 = Convert.ToString(txt_caddress3.Text);
                    }
                    caddressline2 = caddressline2 + "/" + caddressline3;
                    if (txt_ccity.Text.Trim() != "")
                    {
                        ccity = Convert.ToString(txt_ccity.Text.First().ToString().ToUpper() + txt_ccity.Text.Substring(1));
                        ccity = subjectcode("city", ccity);
                    }
                    //if (rdbsameyes.Checked == false)
                    //{
                    //  cstate = pstate;
                    //}
                    //else
                    //{
                    if (ddlcstate.SelectedItem.Text != "Select")
                    {
                        if (ddlcstate.SelectedItem.Text != "Others")
                        {
                            cstate = Convert.ToString(ddlcstate.SelectedItem.Value);
                        }
                        else
                        {
                            txt = "state";
                            string cstate1 = Convert.ToString(txt_cotherstate.Text.First().ToString().ToUpper() + txt_cotherstate.Text.Substring(1));
                            cstate = subjectcode(txt, cstate1);
                        }
                    }
                    //}
                    if (ddlccountry.SelectedItem.Text != "Select")
                    {
                        //if (ddlccountry.SelectedItem.Text != "Others")
                        //{
                        ccountry = Convert.ToString(ddlccountry.SelectedItem.Text);
                        txt = "coun";
                        string ccountry1 = ccountry;
                        ccountry = subjectcode(txt, ccountry1);
                    }
                    cpostelcode = Convert.ToString(txt_cpostelcode.Text);
                    string cstd = Convert.ToString(txt_cstd.Text);
                    string cphonen = Convert.ToString(txt_cphonenumber.Text);
                    cphonenumber = cstd + "-" + cphonen;
                    string option2degree = "";
                    string seattype = d2.GetFunction("select TextCode  from textvaltable where TextCriteria  = 'seat' and college_code ='" + ddl_college.SelectedItem.Value + "' order by textval ");
                    //string orginalapplication_number = genearateApplNo(Convert.ToString(ddl_college.SelectedItem.Value), Convert.ToString(ddl_courseone.SelectedItem.Value));
                    int format = 0;
                    string orginalapplication_number = generateApplNo(Convert.ToString(ddl_college.SelectedItem.Value), Convert.ToInt32(ddl_courseone.SelectedItem.Value), "", "", "", ddlbatch2.SelectedValue, out format);//genearateApplNo(, );
                    Session["degree_Code"] = Convert.ToString(ddl_courseone.SelectedItem.Value);
                    #region code added by Mohamed Idhris Sheik Dawood -- 21-05-2016
                    //Last modified 24-05-2016
                    //Tab 1
                    string appl_No = txt_appfromno.Text.Trim();
                    if (IsAppNoAutoGenerate())
                    {
                        appl_No = generateApplNo(Convert.ToString(ddl_college.SelectedItem.Value), Convert.ToInt32(ddl_courseone.SelectedItem.Value), "", "", "", ddlbatch2.SelectedValue, out format);
                        txt_appfromno.Enabled = false;
                        txtapplno.Enabled = false;
                    }
                    else
                    {
                        txtapplno.Enabled = true;
                        txt_appfromno.Enabled = true;
                    }
                    txt_appfromno.Text = appl_No;
                    if (appl_No == "")
                    {
                        appl_No = txt_appfromno.Text.Trim();
                    }
                    if (appnovalueacr.Trim() == "1")
                    {
                        appl_No = ddlbatch2.SelectedItem.Value + "" + appl_No;
                    }

                    //Krishna kumar 15march2018
                    string quota = "";

                    if (ddl_quata.SelectedItem.Text != "Select")
                    {
                        if (ddl_quata.SelectedItem.Text != "Others")
                        {
                            quota = Convert.ToString(ddl_quata.SelectedItem.Value);
                        }
                        else
                        {


                            quata();
                            quota = d2.GetFunction("SELECT quotaid from stu_quotaseetinges   where quotaname='" + txt_quata.Text + "' and  settype ='" + ddl_seattype2.SelectedItem.Value + "'   and collegecode ='" + ddlcollege.SelectedItem.Value + "'");

                        }
                    }
                    //==========================
                    Session["Application_No"] = appl_No;
                    string mode = "0";
                    string[] appl_dateAr = txt_appliaddate.Text.Split('/');
                    string appl_date = appl_dateAr[1] + "/" + appl_dateAr[0] + "/" + appl_dateAr[2];
                    string seat_type = ddl_seattype2.SelectedValue;
                    string father_Dob = "01/01/1900";
                    string mother_Dob = "01/01/1900";
                    DateTime mother_DobDt;
                    DateTime.TryParse(mother_Dob, out mother_DobDt);
                    DateTime father_DobDt;
                    DateTime.TryParse(father_Dob, out father_DobDt);
                    DateTime dtChk = new DateTime(0001, 1, 1);
                    if (mother_DobDt == dtChk)
                    {
                        mother_DobDt = Convert.ToDateTime("01/01/1900");
                    }
                    if (father_DobDt == dtChk)
                    {
                        father_DobDt = Convert.ToDateTime("01/01/1900");
                    }
                    string fatherQualify = "0";
                    string motherQualify = "0";
                    if (ddlfaterquali.SelectedIndex != 0)
                    {
                        if (ddlfaterquali.SelectedItem.Text != "Others")
                        {
                            fatherQualify = ddlfaterquali.SelectedItem.Text;
                        }
                        else
                        {
                            fatherQualify = txt_faterquali.Text.Trim();
                        }
                    }
                    if (ddlmotherqual.SelectedIndex != 0)
                    {
                        if (ddlmotherqual.SelectedItem.Text != "Others")
                        {
                            motherQualify = ddlmotherqual.SelectedItem.Text;
                        }
                        else
                        {
                            motherQualify = txt_motherqual.Text.Trim();
                        }
                    }
                    if (motherQualify != "0" && motherQualify != string.Empty)
                    {
                        motherQualify = subjectcode("mqual", motherQualify);
                    }
                    if (fatherQualify != "0" && fatherQualify != string.Empty)
                    {
                        fatherQualify = subjectcode("fqual", fatherQualify);
                    }
                    string part1Lang = "0";
                    string part2Lang = "0";
                    string part3Lang = "0";
                    
                    if (ddlPartLang2.SelectedIndex != 0)
                    {
                        if (ddlPartLang2.SelectedItem.Text != "Others")
                        {
                            part2Lang = ddlPartLang2.SelectedItem.Text;
                        }
                        else
                        {
                            part2Lang = txtLangPart2.Text.Trim();
                        }
                    }
                    if (ddlPartLang3.SelectedIndex != 0)
                    {
                        if (ddlPartLang3.SelectedItem.Text != "Others")
                        {
                            part3Lang = ddlPartLang3.SelectedItem.Text;
                        }
                        else
                        {
                            part3Lang = txtLangPart3.Text.Trim();
                        }
                    }
                    if (part1Lang != "0" && part1Lang != string.Empty)
                    {
                        part1Lang = subjectcode("plang", part1Lang);
                    }
                    if (part2Lang != "0" && part2Lang != string.Empty)
                    {
                        part2Lang = subjectcode("plang", part2Lang);
                    }
                    if (part3Lang != "0" && part3Lang != string.Empty)
                    {
                        part3Lang = subjectcode("plang", part3Lang);
                    }


                    //Added By Saranyadevi 22.2.2018

                    string scholarship = "";
                    string subscholarship = "";
                    if (ddlscholarship.SelectedItem.Text != "Select")
                    {
                        if (ddlscholarship.SelectedItem.Text != "Others")
                        {
                            scholarship = Convert.ToString(ddlscholarship.SelectedItem.Value);
                            Session["scholarship_category"] = Convert.ToString(ddlscholarship.SelectedItem.Text);
                        }
                        else
                        {
                            txt = "schol";
                            string scholar = Convert.ToString(txt_subscholar.Text.First().ToString().ToUpper() + txt_subscholar.Text.Substring(1));
                            if (scholar.Trim() != "")
                            {
                                scholarship = subjectcode(txt, scholar);
                                Session["scholarship_category"] = Convert.ToString(scholarship);
                            }
                        }
                    }
                    if (subscholarship.Trim() == "")
                    {
                        subscholarship = "0";
                    }

                    //End By Saranyadevi 22.2.2018

                    string maritalStat = "";
                    string studIdMark = txtIdMark1.Text.Trim() + ";" + txtIdMark2.Text.Trim();
                    //Tab 2
                    //Ex-Service 
                    byte isExServ = rdbexy.Checked ? (byte)1 : (byte)0;
                    string exservRank = string.Empty;
                    string exservPlace = string.Empty;
                    string exservNo = string.Empty;
                    if (isExServ == 1)
                    {
                        exservRank = txtExservRank.Text.Trim();
                        exservPlace = txtExservPlace.Text.Trim();
                        exservNo = txtExservNum.Text.Trim();
                    }
                    byte isBloodDonor = rdb_bloodyes.Checked ? (byte)1 : (byte)0;
                    byte isMissionChild = (byte)rblMissionChild.SelectedIndex;
                    isMissionChild = isMissionChild == 0 ? (byte)1 : (byte)0;
                    byte isReserveCaste = (byte)rblReservCast.SelectedIndex;
                    isReserveCaste = isReserveCaste == 0 ? (byte)1 : (byte)0;
                    byte isEconomicBack = (byte)rblEcoBack.SelectedIndex;
                    isEconomicBack = isEconomicBack == 0 ? (byte)1 : (byte)0;
                    byte isParentOldStu = (byte)rblparentOld.SelectedIndex;
                    isParentOldStu = isParentOldStu == 0 ? (byte)1 : (byte)0;
                    byte isTuitFeeWaivr = (byte)rblFeeWaiver.SelectedIndex;
                    isTuitFeeWaivr = isTuitFeeWaivr == 0 ? (byte)1 : (byte)0;
                    //Driving License
                    byte haveDrivLicens = (byte)rblDrivLic.SelectedIndex;
                    haveDrivLicens = haveDrivLicens == 0 ? (byte)1 : (byte)0;
                    string drivLicenseNo = string.Empty;
                    if (haveDrivLicens == 1)
                        drivLicenseNo = txtDrivLic.Text.Trim().ToUpper();
                    //Insurance
                    byte haveInsurance = (byte)rblInsurance.SelectedIndex;
                    haveInsurance = haveInsurance == 0 ? (byte)1 : (byte)0;
                    double insAmt = 0;
                    string insBy = string.Empty;
                    string insNom = string.Empty;
                    string insNomRel = string.Empty;
                    if (haveInsurance == 1)
                    {
                        if (ddlInsureNominee.SelectedIndex == 3)
                        {
                            insNomRel = txtInsureRelat.Text.Trim();
                        }
                        else
                        {
                            insNomRel = ddlInsureNominee.SelectedItem.Text;
                        }
                        double.TryParse(txtInsureAmt.Text, out insAmt);
                        insNom = txtInsureNominee.Text.Trim();
                        insBy = txtInsureBy.Text.Trim();
                    }
                    #endregion
                    string insertquery = "";
                    #region old
                    insertquery = "insert into applyn(IsConfirm,app_formno,date_applied,stud_name,sex,parent_name,dob,parent_occu,mother_tongue,religion,citizen,community,caste,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,parent_income,parentF_Mobile,emailp,mother,motherocc,mIncome,parentM_Mobile,emailM,guardian_name,guardian_mobile,emailg,partI_Language,bldgrp,place_birth,Aadharcard_no,Alternativedegree_code,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,fatherdob,motherdob,ExsRank,ExsNumber,ReserveCategory,EconBackword,SecondLang,ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount,Insurance_Nominee,parentoldstud,Driving_details,IsDrivingLic ,IsInsurance ,Insurance_InsBy,Insurance_NominRelation,mode) values('1','" + appl_No + "','" + appl_date + "','" + Convert.ToString(Student_fullname).ToUpper() + "','" + Convert.ToString(sex) + "','" + parentsname + "','" + stud_Dob + "','" + occupation + "','" + mothertoung + "','" + religion + "','" + nationality + "','" + community + "','" + caste + "','" + paddressline1 + "','" + paddressline2 + "','" + pcity + "','" + pstate + "','" + pcountry + "','" + ppostelcode + "','" + pmobilenumber + "','" + pemail + "','" + phonenumber + "','" + alterphone + "','" + caddressline1 + "','" + caddressline2 + "','" + ccity + "','" + cstate + "','" + ccountry + "','" + cpostelcode + "','" + cphonenumber + "','" + ddl_courseone.SelectedItem.Value + "','" + ddlbatch2.SelectedValue + "','" + ddl_college.SelectedItem.Value + "','" + subreligion + "','" + isdisable + "','" + otherdiscription + "','" + learningdisable + "','" + missinarychilddescription + "','" + isMissionChild + "','" + seat_type + "','" + 0 + "','" + fatheranualincome + "','" + fathercontactno + "','" + fatheremail + "','" + mathername + "','" + motheroccupation + "','" + motherincome + "','" + mothercontectno + "','" + motheremail + "','" + guardianame + "','" + guardiancontactno + "','" + guardianemail + "'," + part1Lang + ",'" + bloodgroup + "','" + placeofbirth + "','" + Aadharcardno + "','" + option2degree + "','" + island + "','" + isExServ + "','" + physicallychallange + "','" + visuallychallange + "','" + firstgenartion + "','" + Resisdancy + "','" + distinctionsport + "','" + co_curricular + "', '" + father_DobDt + "','" + mother_DobDt + "','" + exservRank + "','" + exservNo + "','" + isReserveCaste + "','" + isEconomicBack + "'," + part2Lang + "," + part3Lang + ",'" + exservPlace + "'," + isTuitFeeWaivr + "," + isBloodDonor + "," + maritalStat + "," + motherQualify + "," + fatherQualify + ",'" + studIdMark + "', " + insAmt + ",'" + insNom + "'," + isParentOldStu + ",'" + drivLicenseNo + "','" + haveDrivLicens + "','" + haveInsurance + "','" + insBy + "','" + insNomRel + "'," + mode + ")";
                    //int insert = d2.update_method_wo_parameter(insertquery, "Text");
                    #endregion
                    string spousname = string.Empty;
                    #region New Insert using sp
                    Hashtable mainhash = new Hashtable();
                    mainhash.Add("@IsConfirm", "1");
                    mainhash.Add("@app_formno", appl_No);
                    mainhash.Add("@date_applied", appl_date);
                    mainhash.Add("@stud_name", Convert.ToString(Student_fullname).ToUpper());
                    mainhash.Add("@sex", Convert.ToString(sex));
                    mainhash.Add("@parent_name", parentsname);
                    mainhash.Add("@dob", stud_Dob);
                    mainhash.Add("@parent_occu", occupation);
                    mainhash.Add("@mother_tongue", mothertoung);
                    mainhash.Add("@religion", religion);
                    mainhash.Add("@citizen", nationality);
                    mainhash.Add("@community", community);
                    mainhash.Add("@caste", caste);
                    mainhash.Add("@parent_addressC", paddressline1);
                    mainhash.Add("@Streetc", paddressline2);
                    mainhash.Add("@Cityc", pcity);
                    mainhash.Add("@parent_statec", pstate);
                    mainhash.Add("@Countryc", pcountry);
                    mainhash.Add("@parent_pincodec", ppostelcode);
                    mainhash.Add("@Student_Mobile", pmobilenumber);
                    mainhash.Add("@StuPer_Id", pemail);
                    mainhash.Add("@parent_phnoc", phonenumber);
                    mainhash.Add("@alter_mobileno", alterphone);
                    mainhash.Add("@parent_addressP", caddressline1);
                    mainhash.Add("@Streetp", caddressline2);
                    mainhash.Add("@cityp", ccity);
                    mainhash.Add("@parent_statep", cstate);
                    mainhash.Add("@Countryp", ccountry);
                    mainhash.Add("@parent_pincodep", cpostelcode);
                    mainhash.Add("@parent_phnop", cphonenumber);
                    mainhash.Add("@degree_code", ddl_courseone.SelectedItem.Value);
                    mainhash.Add("@batch_year", ddlbatch2.SelectedValue);
                    mainhash.Add("@college_code", ddl_college.SelectedItem.Value);
                    mainhash.Add("@SubCaste", subreligion);
                    mainhash.Add("@isdisable", isdisable);
                    mainhash.Add("@isdisabledisc", otherdiscription);
                    mainhash.Add("@islearningdis", learningdisable);
                    mainhash.Add("@missionarydisc", missinarychilddescription);
                    mainhash.Add("@MissionaryChild", isMissionChild);
                    mainhash.Add("@seattype", seat_type);
                    mainhash.Add("@current_semester", 1);
                    mainhash.Add("@parent_income", fatheranualincome);
                    mainhash.Add("@parentF_Mobile", fathercontactno);
                    mainhash.Add("@emailp", fatheremail);
                    mainhash.Add("@mother", mathername);
                    mainhash.Add("@motherocc", motheroccupation);
                    mainhash.Add("@mIncome", motherincome);
                    mainhash.Add("@parentM_Mobile", mothercontectno);
                    mainhash.Add("@emailM", motheremail);
                    mainhash.Add("@guardian_name", guardianame);
                    mainhash.Add("@guardian_mobile", guardiancontactno);
                    mainhash.Add("@emailg", guardianemail);
                    mainhash.Add("@partI_Language", part1Lang);
                    mainhash.Add("@bldgrp", bloodgroup);
                    mainhash.Add("@place_birth", placeofbirth);
                    mainhash.Add("@Aadharcard_no", Aadharcardno);
                    mainhash.Add("@Alternativedegree_code", option2degree);
                    mainhash.Add("@TamilOrginFromAndaman", island);
                    mainhash.Add("@IsExService", isExServ);
                    mainhash.Add("@handy", physicallychallange);
                    mainhash.Add("@visualhandy", visuallychallange);
                    mainhash.Add("@first_graduate", firstgenartion);
                    mainhash.Add("@CampusReq", Resisdancy);
                    mainhash.Add("@DistinctSport", distinctionsport);
                    mainhash.Add("@co_curricular", co_curricular);
                    mainhash.Add("@fatherdob", father_DobDt);
                    mainhash.Add("@motherdob", mother_DobDt);
                    mainhash.Add("@ExsRank", exservRank);
                    mainhash.Add("@ExsNumber", exservNo);
                    mainhash.Add("@ReserveCategory", isReserveCaste);
                    mainhash.Add("@EconBackword", isEconomicBack);
                    mainhash.Add("@SecondLang", part2Lang);
                    mainhash.Add("@ThirdLang", part3Lang);
                    mainhash.Add("@ExSPlace", exservPlace);
                    mainhash.Add("@tutionfee_waiver", isTuitFeeWaivr);
                    mainhash.Add("@isdonar", isBloodDonor);
                    mainhash.Add("@mar_status", maritalStat);
                    mainhash.Add("@mQualification", motherQualify);
                    mainhash.Add("@fqualification", fatherQualify);
                    mainhash.Add("@idmark", studIdMark);
                    mainhash.Add("@Insurance_Amount", insAmt);
                    mainhash.Add("@Insurance_Nominee", insNom);
                    mainhash.Add("@parentoldstud", isParentOldStu);
                    mainhash.Add("@Driving_details", drivLicenseNo);
                    mainhash.Add("@IsDrivingLic", haveDrivLicens);
                    mainhash.Add("@IsInsurance", haveInsurance);
                    mainhash.Add("@Insurance_InsBy", insBy);
                    mainhash.Add("@Insurance_NominRelation", insNomRel);
                    mainhash.Add("@mode", mode);
                    mainhash.Add("@spousename", spousname);
                    mainhash.Add("@EMISNumber", EMIS_No);
                    mainhash.Add("@StudHeight", stud_height);
                    mainhash.Add("@StudWeight", stud_weight);
                    mainhash.Add("@scholarship_category", scholarship); //saranya 23feb2018
                    mainhash.Add("@quota", quota); //krishnakumar 15march2018
                    mainhash.Add("@parentF_alterMobile", fathercontactno2); // Deepali on 7.4.18
                    int insert = d2.insert_method("sp_insert_applyn_fromappl_school", mainhash, "sp");
                    #endregion
                    string app_no = "";
                    if (insert != 0)
                    {
                        UpdateApplNo(Convert.ToString(ddl_college.SelectedItem.Value), Convert.ToInt32(ddl_courseone.SelectedItem.Value), "", "", "", ddlbatch2.SelectedValue, format); //newjai
                        string app_noquery = "select app_no from applyn where app_formno ='" + appl_No + "' and degree_code='" + Convert.ToString(ddl_courseone.SelectedItem.Value) + "'";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(app_noquery, "Text");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            app_no = Convert.ToString(ds.Tables[0].Rows[0]["app_no"]);
                        }

                        if (app_no != "")//delsi2802
                        {
                            //if (ViewState["lnkbtn_studentphoto"] == "")
                            //{
                                if (ViewState["studentimage"] != "0" && ViewState["size"] != "")
                                {
                                    byte[] photoid = (byte[])(ViewState["studentimage"]);
                                    int size = Convert.ToInt32(ViewState["size"]);

                                    PhotoUpload("photo", app_no, size, photoid);

                                }
                                if (ViewState["fsize"] != "" && ViewState["fatherimage"] != "")
                                {
                                    byte[] photoid = (byte[])(ViewState["fatherimage"]);
                                    int size = Convert.ToInt32(ViewState["fsize"]);

                                    PhotoUpload("f_photo", app_no, size, photoid);
                                }
                                if (ViewState["motherimage"] != "" && ViewState["msize"] != "")
                                {
                                    byte[] photoid = (byte[])(ViewState["motherimage"]);
                                    int size = Convert.ToInt32(ViewState["msize"]);

                                    PhotoUpload("m_photo", app_no, size, photoid);
                                }
                                if (ViewState["gaudianimage"] != "" && ViewState["gsize"] != "")
                                {
                                    byte[] photoid = (byte[])(ViewState["gaudianimage"]);
                                    int size = Convert.ToInt32(ViewState["gsize"]);

                                    PhotoUpload("g_photo", app_no, size, photoid);
                                }
                                loadimage(app_no);
                            //}
                        }


                        #region Additional Information --- Idhris
                        if (insert > 0)
                        {
                            //Update Academic Details
                            for (int rowCnt = 1; rowCnt < spreadAcaDet.Rows.Count; rowCnt++)
                            {
                                string courseid = "0";
                                string courseName = string.Empty;
                                string branchGrpId = "0";
                                string branchGrp = string.Empty;
                                string insName = string.Empty;
                                string boardUnivId = "0";
                                string boardUniv = string.Empty;
                                string secMarks = string.Empty;
                                string maxMarks = string.Empty;
                                courseName = spreadAcaDet.Sheets[0].Cells[rowCnt, 2].Text;
                                courseid = Convert.ToString(spreadAcaDet.Sheets[0].Cells[rowCnt, 2].Tag);
                                branchGrp = spreadAcaDet.Sheets[0].Cells[rowCnt, 3].Text;
                                branchGrpId = Convert.ToString(spreadAcaDet.Sheets[0].Cells[rowCnt, 3].Tag);
                                insName = spreadAcaDet.Sheets[0].Cells[rowCnt, 4].Text;
                                boardUniv = spreadAcaDet.Sheets[0].Cells[rowCnt, 5].Text;
                                boardUnivId = Convert.ToString(spreadAcaDet.Sheets[0].Cells[rowCnt, 5].Tag);
                                secMarks = spreadAcaDet.Sheets[0].Cells[rowCnt, 6].Text;
                                maxMarks = spreadAcaDet.Sheets[0].Cells[rowCnt, 7].Text;
                                double perc = 0;
                                try
                                {
                                    double secMark = 0;
                                    double.TryParse(secMarks, out secMark);
                                    secMarks = secMark.ToString();
                                    double maxMark = 0;
                                    double.TryParse(maxMarks, out maxMark);
                                    maxMarks = maxMark.ToString();
                                    if (maxMark > 0)
                                        perc = (secMark / maxMark) * 100;
                                }
                                catch { perc = 0; }
                                byte Vocational_stream = rbVocation.Checked ? (byte)1 : (byte)0;
                                string updAcaQ = "insert into Stud_prev_details (app_no, course_code, Institute_name, percentage, university_code, totalmark,securedmark, branch_code,Vocational_stream,markPriority) values (" + app_no + ", " + courseid + ", '" + insName + "', " + perc + ", " + boardUnivId + ", " + maxMarks + "," + secMarks + ", " + branchGrpId + ",'" + Vocational_stream + "'," + (rowCnt + 1) + ")";
                                d2.update_method_wo_parameter(updAcaQ, "Text");
                            }
                            //Update Bank Details
                            for (int rowCnt = 1; rowCnt < spreadBankDet.Rows.Count; rowCnt++)
                            {
                                string bnkid = "0";
                                string bnk = string.Empty;
                                string accForId = "0";
                                string accFor = string.Empty;
                                string accNo = string.Empty;
                                string debitNo = string.Empty;
                                string ifscode = string.Empty;
                                string branch = string.Empty;
                                accFor = spreadBankDet.Sheets[0].Cells[rowCnt, 2].Text;
                                accForId = Convert.ToString(spreadBankDet.Sheets[0].Cells[rowCnt, 2].Tag);
                                accNo = spreadBankDet.Sheets[0].Cells[rowCnt, 3].Text;
                                debitNo = spreadBankDet.Sheets[0].Cells[rowCnt, 4].Text;
                                ifscode = spreadBankDet.Sheets[0].Cells[rowCnt, 5].Text;
                                bnk = spreadBankDet.Sheets[0].Cells[rowCnt, 6].Text;
                                bnkid = Convert.ToString(spreadBankDet.Sheets[0].Cells[rowCnt, 6].Tag);
                                branch = spreadBankDet.Sheets[0].Cells[rowCnt, 7].Text;
                                string updBnkQ = "insert into studbankdet (app_no, AccFor, AccNo, DebitCardNo, IFSCCode, BankName, Branch ) values (" + app_no + ", '" + accForId + "', '" + accNo + "', '" + debitNo + "', '" + ifscode + "', '" + bnkid + "', '" + branch + "')";
                                d2.update_method_wo_parameter(updBnkQ, "Text");
                            }
                            //Update Relationship Details
                            for (int rowCnt = 1; rowCnt < spreadRelation.Rows.Count; rowCnt++)
                            {
                                string stafStudId = "0";
                                string stafStudName = string.Empty;
                                string batch = "0";
                                string degDeptId = "0";
                                string degDept = string.Empty;
                                string branCatId = "0";
                                string branCat = string.Empty;
                                string relName = string.Empty;
                                string relId = string.Empty;
                                string relRelship = string.Empty;
                                string phoneno = string.Empty;
                                string collName = string.Empty;
                                string collCode = "0";
                                relName = spreadRelation.Sheets[0].Cells[rowCnt, 2].Text.Split('-')[0];
                                relId = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 2].Tag);
                                degDept = spreadRelation.Sheets[0].Cells[rowCnt, 3].Text.Split('-')[0];
                                branCat = spreadRelation.Sheets[0].Cells[rowCnt, 3].Text.Split('-')[1];
                                degDeptId = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 3].Tag).Split('-')[0];
                                branCatId = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 3].Tag).Split('-')[1];
                                relRelship = spreadRelation.Sheets[0].Cells[rowCnt, 4].Text;
                                phoneno = spreadRelation.Sheets[0].Cells[rowCnt, 5].Text;
                                batch = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 5].Tag);
                                collName = spreadRelation.Sheets[0].Cells[rowCnt, 6].Text;
                                collCode = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 6].Tag);
                                stafStudName = spreadRelation.Sheets[0].Cells[rowCnt, 7].Text;
                                stafStudId = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 7].Tag);
                                string relNameId = relName + "-" + relId;
                                string courseId = degDeptId;
                                if (stafStudId == "0")
                                {
                                    courseId = branCatId;
                                }
                                string updRelQ = "insert into stud_relation (application_no, name_roll, course, relationship, isstaff, college_code, ph) values ('" + app_no + "', '" + relNameId + "', '" + courseId + "', '" + relRelship + "', " + stafStudId + ", " + collCode + ", '" + phoneno + "')";
                                d2.update_method_wo_parameter(updRelQ, "Text");
                            }
                            //Referred by
                            byte referredByType = 0;
                            string updRefbyQ = string.Empty;
                            if (rblReferredBy.SelectedIndex == 0)
                            {
                                //Direct
                                referredByType = Convert.ToByte(rblReferredBy.SelectedIndex);
                                updRefbyQ = "update applyn set direct_refer=0 where app_no ='" + app_no + "'";
                            }
                            else if (rblReferredBy.SelectedIndex == 1)
                            {
                                //Referred By Staff
                                referredByType = Convert.ToByte(rblReferredBy.SelectedIndex);
                                string staffid = "0";
                                if (txtname_staff.Items.Count > 0)
                                    staffid = txtname_staff.SelectedValue;
                                if (txtname_staff.Items.Count > 0 && staffid != string.Empty)
                                {
                                    updRefbyQ = "update applyn set direct_refer=1,refer_stcode='" + staffid + "' where app_no ='" + app_no + "'";
                                }
                            }
                            else if (rblReferredBy.SelectedIndex == 2)
                            {
                                string refapp_no = "";
                                if (ddl_ReferStudent.Items.Count > 0)
                                {
                                    refapp_no = ddl_ReferStudent.SelectedValue;
                                }
                                if (ddl_ReferStudent.Items.Count > 0 && refapp_no != string.Empty)
                                {
                                    updRefbyQ = "update applyn set direct_refer=3,refer_stcode='" + refapp_no + "' where app_no ='" + app_no + "'";
                                }
                            }
                            else
                            {
                                //Referred by Others
                                referredByType = Convert.ToByte(rblReferredBy.SelectedIndex);
                                string consName = string.Empty;
                                string agenName = string.Empty;
                                string amtRs = "0";
                                string address = string.Empty;
                                string city = string.Empty;
                                string district = string.Empty;
                                string state = string.Empty;
                                string phoneno = string.Empty;
                                string emailid = string.Empty;
                                amtRs = txtRefAmt.Text.Trim();
                                address = txtRefAddres.Text.Trim();
                                city = txtRefCity.Text.Trim();
                                district = txtRefDist.Text.Trim();
                                phoneno = txtRefPhone.Text.Trim();
                                emailid = txtRefEmail.Text.Trim();
                                if (ddlrefConsName.SelectedIndex != 0)
                                {
                                    if (ddlrefConsName.SelectedItem.Text != "Others")
                                    {
                                        consName = ddlrefConsName.SelectedItem.Text;
                                    }
                                    else
                                    {
                                        consName = txtrefConsName.Text.Trim();
                                    }
                                    if (consName != string.Empty)
                                    {
                                        consName = subjectcode("ConsN", consName);
                                    }
                                }
                                if (ddlRefAgent.SelectedIndex != 0)
                                {
                                    if (ddlRefAgent.SelectedItem.Text != "Others")
                                    {
                                        agenName = ddlRefAgent.SelectedItem.Text;
                                    }
                                    else
                                    {
                                        agenName = txtRefAgent.Text.Trim();
                                    }
                                    if (agenName != string.Empty)
                                    {
                                        agenName = subjectcode("Agnt", agenName);
                                    }
                                }
                                if (ddlRefState.SelectedIndex != 0)
                                {
                                    if (ddlRefState.SelectedItem.Text != "Others")
                                    {
                                        state = ddlRefState.SelectedItem.Text;
                                    }
                                    else
                                    {
                                        state = txtRefState.Text.Trim();
                                    }
                                    if (state != string.Empty)
                                    {
                                        state = subjectcode("state", state);
                                    }
                                }
                                if (consName != string.Empty)
                                {
                                    updRefbyQ = "update applyn set direct_refer=2, refer_name='" + consName + "',  refer_phoneno='" + phoneno + "', refer_email='" + emailid + "', refer_amount='" + amtRs + "', refer_agent='" + agenName + "', agent_address='" + address + "', agent_city='" + city + "', agent_district='" + district + "', agent_state='" + state + "' where app_no ='" + app_no + "'";
                                }
                            }
                            if (updRefbyQ != string.Empty)
                            {
                                d2.update_method_wo_parameter(updRefbyQ, "Text");
                            }
                        }
                        #endregion
                    }
                    string fathertamilname = "";
                    if (txt_fathernametamil.Text.Trim() != "")
                    {
                        fathertamilname = Convert.ToString(txt_fathernametamil.Text);
                    }
                    // ,'" + txtfirstnametamil.Text + "-" + txtlastnametamil.Text + "','" + txt_fathernametamil.Text + "'
                    uploadnew(app_no);
                    //string updatequery = " update applyn set parent_nametamil=@fathertamilname where app_no ='" + app_no + "'";
                    //SqlCommand cmd = new SqlCommand(updatequery, mysql);
                    //SqlParameter uploadedsubject_name = null;
                    //uploadedsubject_name = new SqlParameter("@fathertamilname", SqlDbType.NVarChar, 100);
                    //uploadedsubject_name.Value = fathertamilname;
                    //cmd.Parameters.Add(uploadedsubject_name);
                    //mysql.Close();
                    //mysql.Open();
                    //cmd.ExecuteNonQuery();
                    //mysql.Close();
                    Session["Appl_number"] = Convert.ToString(app_no);
                    //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
                    //{
                    //    string schoolorcollege = "";
                    //    if (txt_Name_of_school.Text.Trim() != "")
                    //    {
                    //        schoolorcollege = Convert.ToString(txt_Name_of_school.Text.First().ToString().ToUpper() + txt_Name_of_school.Text.Substring(1));
                    //        if (schoolorcollege.Trim() != "")
                    //        {
                    //            Session["schoolorcollege"] = schoolorcollege.ToString();
                    //        }
                    //        else
                    //        {
                    //            Session["schoolorcollege"] = "-";
                    //        }
                    //    }
                    //    string schoolorcollegelocation = "";
                    //    if (txt_location_scholl.Text.Trim() != "")
                    //    {
                    //        schoolorcollegelocation = Convert.ToString(txt_location_scholl.Text.First().ToString().ToUpper() + txt_location_scholl.Text.Substring(1));
                    //        if (schoolorcollegelocation.Trim() != "")
                    //        {
                    //            Session["schoolorcollegelocation"] = schoolorcollegelocation.ToString();
                    //        }
                    //        else
                    //        {
                    //            Session["schoolorcollegelocation"] = "-";
                    //        }
                    //    }
                    //    string qualifyingexam = "";
                    //    if (ddlexaminationug.SelectedItem.Text.Trim() != "Others" && ddlexaminationug.SelectedItem.Text.Trim() != "Select")
                    //    {
                    //        qualifyingexam = Convert.ToString(ddlexaminationug.SelectedItem.Value);
                    //        Session["qualifyingexam"] = Convert.ToString(ddlexaminationug.SelectedItem.Text);
                    //    }
                    //    else
                    //    {
                    //        string qulify = Convert.ToString(txt_qulifyexam.Text);
                    //        txt = "cours";
                    //        qualifyingexam = subjectcode(txt, qulify);
                    //        Session["qualifyingexam"] = Convert.ToString(txt_qulifyexam.Text);
                    //    }
                    //    string bordoruniversity = "0";
                    //    if (txt_board.Text.Trim() != "")
                    //    {
                    //        txt = "unive";
                    //        string bordoruniversity1 = Convert.ToString(txt_board.Text.ToString().ToUpper());
                    //        bordoruniversity = subjectcode(txt, bordoruniversity1);
                    //        Session["bordoruniversity"] = Convert.ToString(txt_board.Text.ToString().ToUpper());
                    //    }
                    //    string qualifystate = "";
                    //    if (ddlstatequalify.SelectedItem.Text != "Select")
                    //    {
                    //        if (ddlstatequalify.SelectedItem.Text == "Others")
                    //        {
                    //            txt = "state";
                    //            string select_state = Convert.ToString(txt_otherstatequalify.Text.First().ToString().ToUpper() + txt_otherstatequalify.Text.Substring(1));
                    //            qualifystate = subjectcode(txt, select_state);
                    //            Session["Qualifyingsate"] = Convert.ToString(txt_otherstatequalify.Text.First().ToString().ToUpper() + txt_otherstatequalify.Text.Substring(1));
                    //        }
                    //        else
                    //        {
                    //            qualifystate = Convert.ToString(ddlstatequalify.SelectedItem.Value);
                    //            Session["Qualifyingsate"] = Convert.ToString(ddlstatequalify.SelectedItem.Text);
                    //        }
                    //    }
                    //    string mediumofstudy = "";
                    //    string mediumofstudy1 = Convert.ToString(ddlmediumstudy.SelectedItem.Text);
                    //    if (mediumofstudy1 == "Others")
                    //    {
                    //        txt = "PLang";
                    //        string subjmedium = Convert.ToString(txt_mediumstudy.Text.First().ToString().ToUpper() + txt_mediumstudy.Text.Substring(1));
                    //        mediumofstudy = subjectcode(txt, subjmedium);
                    //        Session["mediumofstudy"] = Convert.ToString(txt_mediumstudy.Text.First().ToString().ToUpper() + txt_mediumstudy.Text.Substring(1));
                    //    }
                    //    else if (mediumofstudy1 == "Select")
                    //    {
                    //        mediumofstudy = "0";
                    //        Session["mediumofstudy"] = "";
                    //    }
                    //    else
                    //    {
                    //        mediumofstudy = Convert.ToString(ddlmediumstudy.SelectedItem.Value);
                    //        Session["mediumofstudy"] = Convert.ToString(ddlmediumstudy.SelectedItem.Text);
                    //    }
                    //    string mediumofstudyXII = "";
                    //    string mediumofstudy13 = Convert.ToString(ddlmediumofstudyXII.SelectedItem.Text);
                    //    if (mediumofstudy13 == "Others")
                    //    {
                    //        txt = "PLang";
                    //        string subjmedium = Convert.ToString(txt_ddlmediumofStudyXII.Text.First().ToString().ToUpper() + txt_ddlmediumofStudyXII.Text.Substring(1));
                    //        mediumofstudyXII = subjectcode(txt, subjmedium);
                    //        Session["mediumofstudyXII"] = Convert.ToString(txt_ddlmediumofStudyXII.Text.First().ToString().ToUpper() + txt_ddlmediumofStudyXII.Text.Substring(1));
                    //    }
                    //    else if (mediumofstudy13 == "Select")
                    //    {
                    //        mediumofstudyXII = "0";
                    //        Session["mediumofstudyXII"] = "";
                    //    }
                    //    else
                    //    {
                    //        mediumofstudyXII = Convert.ToString(ddlmediumofstudyXII.SelectedItem.Value);
                    //        Session["mediumofstudyXII"] = Convert.ToString(ddlmediumofstudyXII.SelectedItem.Text);
                    //    }
                    //    DataSet dsgrade = new DataSet();
                    //    string marksorgrade = "";
                    //    if (rbMarksGrade.SelectedIndex == 0)
                    //    {
                    //        marksorgrade = "Marks";
                    //    }
                    //    else
                    //    {
                    //        marksorgrade = "Grade";
                    //        string gradquery = " select *  from Grade_Master where College_Code ='" + ddl_college.SelectedItem.Value + "' and Degree_Code ='" + Convert.ToString(Session["degree_Code"]) + "' and batch_year ='" + System.DateTime.Now.ToString("yyyy") + "'";
                    //        dsgrade.Clear();
                    //        dsgrade = d2.select_method_wo_parameter(gradquery, "Text");
                    //    }
                    //    Session["marksorgrade"] = Convert.ToString(marksorgrade);
                    //    string subjectwisemark = "";
                    //    double mainmidmark = 0;
                    //    int countsubject = 0;
                    //    DataView dvnew = new DataView();
                    //    string isgrade = "";
                    //    string Language1 = "";
                    //    string Language2 = "";
                    //    string lang1_subno = "";
                    //    string lang2_subno = "";
                    //    if (!isCourseTypePg())
                    //    {
                    //        if (UgGrid.Rows.Count > 0)
                    //        {
                    //            string value = "subje";
                    //            for (int mark = 0; mark < UgGrid.Rows.Count; mark++)
                    //            {
                    //                string subjectname = "";
                    //                if (mark != 1)
                    //                {
                    //                    string subject_name = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
                    //                    string lang_age1 = Convert.ToString((UgGrid.Rows[mark].FindControl("lblsno") as Label).Text);
                    //                    if (subject_name == "Others")
                    //                    {
                    //                        string subjectname1 = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
                    //                        if (subjectname1.Trim() != "")
                    //                        {
                    //                            if (lang_age1 == "Language1")
                    //                            {
                    //                                Language1 = subjectname1;
                    //                                lang1_subno = subjectcode(value, Language1);
                    //                                subjectname = lang1_subno;
                    //                            }
                    //                            else if (lang_age1 == "Language2")
                    //                            {
                    //                                Language2 = subjectname1;
                    //                                lang2_subno = subjectcode(value, Language2);
                    //                                subjectname = lang2_subno;
                    //                            }
                    //                            else
                    //                            {
                    //                                subjectname = subjectcode(value, subjectname1);
                    //                            }
                    //                        }
                    //                    }
                    //                    else
                    //                    {
                    //                        string subjectname_1 = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
                    //                        subjectname = subjectcode(value, subjectname_1);
                    //                        if (lang_age1 == "Language1")
                    //                        {
                    //                            lang1_subno = subjectname;
                    //                        }
                    //                        else if (lang_age1 == "Language2")
                    //                        {
                    //                            lang2_subno = subjectname;
                    //                        }
                    //                    }
                    //                }
                    //                else if (mark == 1)
                    //                {
                    //                    string lang_age1 = Convert.ToString((UgGrid.Rows[mark].FindControl("lblsno") as Label).Text);
                    //                    string subjectname1 = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
                    //                    if (subjectname1.Trim() != "")
                    //                    {
                    //                        if (lang_age1 == "Language1")
                    //                        {
                    //                            Language1 = subjectname1;
                    //                            lang1_subno = subjectcode(value, Language1);
                    //                            subjectname = lang1_subno;
                    //                        }
                    //                        else if (lang_age1 == "Language2")
                    //                        {
                    //                            Language2 = subjectname1;
                    //                            lang2_subno = subjectcode(value, Language2);
                    //                            subjectname = lang2_subno;
                    //                        }
                    //                        else
                    //                        {
                    //                            subjectname = subjectcode(value, subjectname1);
                    //                        }
                    //                    }
                    //                }
                    //                // string subjectcode = Convert.ToString((Marksgrid.Rows[mark].FindControl("lblsubcode") as Label).Text);
                    //                string finalmarkandgrade = "";
                    //                if (rbMarksGrade.SelectedIndex == 0)
                    //                {
                    //                    isgrade = "0";
                    //                    finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmagrs") as TextBox).Text);
                    //                }
                    //                else
                    //                {
                    //                    isgrade = "1";
                    //                    finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ug_grade") as TextBox).Text);
                    //                    if (dsgrade.Tables[0].Rows.Count > 0)
                    //                    {
                    //                        dsgrade.Tables[0].DefaultView.RowFilter = "Mark_Grade='" + finalmarkandgrade + "'";
                    //                        dvnew = dsgrade.Tables[0].DefaultView;
                    //                        if (dvnew.Count > 0)
                    //                        {
                    //                            countsubject++;
                    //                            string frange = Convert.ToString(dvnew[0]["Frange"]);
                    //                            string trange = Convert.ToString(dvnew[0]["Trange"]);
                    //                            if (frange.Trim() != "" && trange.Trim() != "")
                    //                            {
                    //                                double midmark = (Convert.ToDouble(frange) + Convert.ToDouble(trange)) / 2;
                    //                                if (mainmidmark == 0)
                    //                                {
                    //                                    mainmidmark = midmark;
                    //                                }
                    //                                else
                    //                                {
                    //                                    mainmidmark = mainmidmark + midmark;
                    //                                }
                    //                            }
                    //                        }
                    //                    }
                    //                }
                    //                string Month = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmonth") as TextBox).Text);
                    //                string year1 = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugyear") as TextBox).Text);
                    //                string regno = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugregno") as TextBox).Text);
                    //                string nofoattempts = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugnoofattmpts") as TextBox).Text);
                    //                string max_mark = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_rg_max") as TextBox).Text);
                    //                if (subjectname.Trim() != "" && finalmarkandgrade.Trim() != "" && max_mark.Trim() != "")
                    //                {
                    //                    if (subjectwisemark == "")
                    //                    {
                    //                        subjectwisemark = subjectname + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + regno + "-" + nofoattempts + "-" + max_mark;
                    //                    }
                    //                    else
                    //                    {
                    //                        subjectwisemark = subjectwisemark + "/" + subjectname + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + regno + "-" + nofoattempts + "-" + max_mark;
                    //                    }
                    //                }
                    //            }
                    //        }
                    //        if (ugsubgrid.Rows.Count > 0)
                    //        {
                    //            for (int mark = 0; mark < ugsubgrid.Rows.Count; mark++)
                    //            {
                    //                string value = "subje";
                    //                string subjectname = "";
                    //                string subjectname1 = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subsubject567") as TextBox).Text);
                    //                if (subjectname1.Trim() != "")
                    //                {
                    //                    subjectname = subjectcode(value, subjectname1);
                    //                    // string subjectcode = Convert.ToString((Marksgrid.Rows[mark].FindControl("lblsubcode") as Label).Text);
                    //                    string finalmarkandgrade = "";
                    //                    if (rbMarksGrade.SelectedIndex == 0)
                    //                    {
                    //                        isgrade = "0";
                    //                        finalmarkandgrade = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subugmagrs") as TextBox).Text);
                    //                    }
                    //                    else
                    //                    {
                    //                        isgrade = "1";
                    //                        finalmarkandgrade = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subug_grade") as TextBox).Text);
                    //                        if (dsgrade.Tables[0].Rows.Count > 0)
                    //                        {
                    //                            dsgrade.Tables[0].DefaultView.RowFilter = "Mark_Grade='" + finalmarkandgrade + "'";
                    //                            dvnew = dsgrade.Tables[0].DefaultView;
                    //                            if (dvnew.Count > 0)
                    //                            {
                    //                                countsubject++;
                    //                                string frange = Convert.ToString(dvnew[0]["Frange"]);
                    //                                string trange = Convert.ToString(dvnew[0]["Trange"]);
                    //                                if (frange.Trim() != "" && trange.Trim() != "")
                    //                                {
                    //                                    double midmark = (Convert.ToDouble(frange) + Convert.ToDouble(trange)) / 2;
                    //                                    if (mainmidmark == 0)
                    //                                    {
                    //                                        mainmidmark = midmark;
                    //                                    }
                    //                                    else
                    //                                    {
                    //                                        mainmidmark = mainmidmark + midmark;
                    //                                    }
                    //                                }
                    //                            }
                    //                        }
                    //                    }
                    //                    string Month = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subugmonth") as TextBox).Text);
                    //                    string year1 = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subugyear") as TextBox).Text);
                    //                    string regno = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subugregno") as TextBox).Text);
                    //                    string nofoattempts = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subugnoofattmpts") as TextBox).Text);
                    //                    string max_mark = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subug_max") as TextBox).Text);
                    //                    newmonth = Month;
                    //                    newyear = year1;
                    //                    if (subjectname.Trim() != "")
                    //                    {
                    //                        if (subjectwisemark == "")
                    //                        {
                    //                            subjectwisemark = subjectname + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + regno + "-" + nofoattempts + "-" + max_mark;
                    //                        }
                    //                        else
                    //                        {
                    //                            subjectwisemark = subjectwisemark + "/" + subjectname + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + regno + "-" + nofoattempts + "-" + max_mark;
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }
                    //    if (subjectwisemark.Trim() != "")
                    //    {
                    //        Session["subjectwisemark"] = subjectwisemark.ToString();
                    //    }
                    //    int totalmark = 0;
                    //    int maxtotalmark = 0;
                    //    double percentagemark = 0;
                    //    if (rbMarksGrade.SelectedIndex == 0)
                    //    {
                    //        if (txt_totalmark.Text.Trim() != "")
                    //        {
                    //            totalmark = Convert.ToInt32(txt_totalmark.Text);
                    //            Session["Totalhscmark"] = Convert.ToString(totalmark);
                    //        }
                    //        if (avgtext.Text.Trim() != "")
                    //        {
                    //            maxtotalmark = Convert.ToInt32(avgtext.Text);
                    //            Session["maxtotalmark"] = Convert.ToString(maxtotalmark);
                    //        }
                    //        if (txt_percentage.Text.Trim() != "")
                    //        {
                    //            percentagemark = Convert.ToDouble(txt_percentage.Text);
                    //            Session["percentagemark"] = Convert.ToString(percentagemark);
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (mainmidmark != 0)
                    //        {
                    //            percentagemark = mainmidmark / Convert.ToDouble(countsubject);
                    //            percentagemark = Math.Round(percentagemark, 3);
                    //        }
                    //    }
                    //    byte Vocational_stream = rbVocation.Checked ? (byte)1 : (byte)0;
                    //    string course_enterno = "";
                    //    string previous_details = "";
                    //    string cutof = "";
                    //    cutof = Convert.ToString(txt_cutof.Text);
                    //    if (cutof.Trim() == "")
                    //    {
                    //        cutof = "0";
                    //    }
                    //    if (lang2_subno.Trim() == "") // added jairam 02-07-2016
                    //    {
                    //        lang2_subno = "0";
                    //    }
                    //    int previous = 0;
                    //    if (!isCourseTypePg())
                    //    {
                    //        previous_details = "insert into Stud_prev_details (app_no,course_code,Institute_name,instaddress,Xmedium,medium,isgrade,Part1Language,Part2Language,percentage,university_code,uni_state,securedmark,totalmark,passyear,passmonth,Vocational_stream,markPriority,Cut_Of_Mark)values('" + app_no + "','" + qualifyingexam + "','" + schoolorcollege + "','" + schoolorcollegelocation + "','" + mediumofstudy + "','" + mediumofstudyXII + "','" + isgrade + "'," + lang1_subno + "," + lang2_subno + ",'" + percentagemark + "','" + bordoruniversity + "','" + qualifystate + "','" + txt_totalmark.Text + "','" + avgtext.Text + "','" + newyear + "','" + newmonth + "','" + Vocational_stream + "',1,'" + cutof + "')";
                    //        previous = d2.update_method_wo_parameter(previous_details, "Text");
                    //    }
                    //    if (previous != 0)
                    //    {
                    //        string select_courseno = "select course_entno  from Stud_prev_details where app_no ='" + app_no + "'  and isnull(markPriority,1)=1";
                    //        ds.Clear();
                    //        ds = d2.select_method_wo_parameter(select_courseno, "Text");
                    //        if (ds.Tables[0].Rows.Count > 0)
                    //        {
                    //            course_enterno = Convert.ToString(ds.Tables[0].Rows[0]["course_entno"]);
                    //        }
                    //    }
                    //    if (subjectwisemark.Trim() != "")
                    //    {
                    //        string[] firstsplit = subjectwisemark.Split('/');
                    //        if (firstsplit.Length > 0)
                    //        {
                    //            string university_code = Convert.ToString(bordoruniversity);
                    //            // string group_or_branch_code = Convert.ToString(grouporbranch);
                    //            string examination_code = Convert.ToString(qualifyingexam);
                    //            string Medium_of_study = Convert.ToString(mediumofstudy);
                    //            string marks_or_grade = Convert.ToString(marksorgrade);
                    //            for (int fi = 0; fi <= firstsplit.GetUpperBound(0); fi++)
                    //            {
                    //                string secondsplitvalue = Convert.ToString(firstsplit[fi]);
                    //                if (secondsplitvalue.Trim() != "")
                    //                {
                    //                    string[] secondsplit = secondsplitvalue.Split('-');
                    //                    if (secondsplit.Length > 0)
                    //                    {
                    //                        string subject_name = Convert.ToString(secondsplit[0]);
                    //                        string mark_or_grade = Convert.ToString(secondsplit[1]);
                    //                        string pass_month = Convert.ToString(secondsplit[2]);
                    //                        string pass_year = Convert.ToString(secondsplit[3]);
                    //                        string pass_regno = Convert.ToString(secondsplit[4]);
                    //                        string no_of_attemps_pass = Convert.ToString(secondsplit[5]);
                    //                        string max_mark_pass = Convert.ToString(secondsplit[6]);
                    //                        if (isgrade != "1")
                    //                        {
                    //                            string insertmarkquery = "insert into perv_marks_history (course_entno,psubjectno,registerno,acual_marks,max_marks,pass_month,pass_year,noofattempt)values ('" + course_enterno + "','" + subject_name + "','" + pass_regno + "','" + mark_or_grade + "','" + max_mark_pass + "','" + pass_month + "','" + pass_year + "','" + no_of_attemps_pass + "')";
                    //                            int rus = d2.update_method_wo_parameter(insertmarkquery, "Text");
                    //                            alterflage = true;
                    //                        }
                    //                        else if (isgrade != "0")
                    //                        {
                    //                            string insertmarkquery = "insert into perv_marks_history (course_entno,psubjectno,registerno,grade,max_marks,pass_month,pass_year,noofattempt)values ('" + course_enterno + "','" + subject_name + "','" + pass_regno + "','" + mark_or_grade + "','" + max_mark_pass + "','" + pass_month + "','" + pass_year + "','" + no_of_attemps_pass + "')";
                    //                            int rus = d2.update_method_wo_parameter(insertmarkquery, "Text");
                    //                            alterflage = true;
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }
                    //    certificatesave(app_no);
                    //}
                    //if (ddl_coursetype.SelectedItem.Value == "PG" || ddl_coursetype.SelectedItem.Value == "M.Phil" || ddl_coursetype.SelectedItem.Text == "DOCTORATE")
                    //{
                    //    // ................................................................................
                    //    double[] secMark = new double[5];
                    //    double[] maxMark = new double[5];
                    //    double[] avgMark = new double[5];
                    //    int p = 0;
                    //    double max_tot = 0;
                    //    double sec_total = 0;
                    //    int countmark = 0;
                    //    if (txt_SecMrk1.Text != "" && txt_maxmark1.Text != "")
                    //    {
                    //        secMark[0] = 0;
                    //        maxMark[0] = 0;
                    //        avgMark[0] = 0;
                    //        double.TryParse(Convert.ToString(txt_SecMrk1.Text), out secMark[0]);
                    //        double.TryParse(Convert.ToString(txt_maxmark1.Text), out maxMark[0]);
                    //        double.TryParse(Convert.ToString(txt_avg1.Text), out avgMark[0]);
                    //        avgMark[0] = Math.Round(((secMark[0] / maxMark[0]) * 100), 2, MidpointRounding.AwayFromZero);
                    //        Session["part1SecMrk"] = secMark[0];
                    //        Session["part1maxmark"] = maxMark[0];
                    //        Session["part1avg"] = avgMark[0];
                    //        //Session["part1avg"] = avgMark[0];
                    //        countmark = 1;
                    //        sec_total += secMark[0];
                    //        max_tot += maxMark[0];
                    //        string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(countmark)) + "','" + secMark[0] + "','" + maxMark[0] + "','" + avgMark[0] + "') ";
                    //        int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    }
                    //    if (txt_SecMrk2.Text != "" && txt_maxmark2.Text != "")
                    //    {
                    //        secMark[1] = 0;
                    //        maxMark[1] = 0;
                    //        avgMark[1] = 0;
                    //        double.TryParse(Convert.ToString(txt_SecMrk2.Text), out secMark[1]);
                    //        double.TryParse(Convert.ToString(txt_maxmark2.Text), out maxMark[1]);
                    //        double.TryParse(Convert.ToString(txt_avg2.Text), out avgMark[1]);
                    //        avgMark[1] = Math.Round(((secMark[1] / maxMark[1]) * 100), 2, MidpointRounding.AwayFromZero);
                    //        Session["part2SecMrk"] = secMark[1];
                    //        Session["part2maxmark"] = maxMark[1];
                    //        Session["part2avg"] = avgMark[1];
                    //        sec_total += secMark[1];
                    //        max_tot += maxMark[1];
                    //        countmark = 2;
                    //        string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(countmark)) + "','" + secMark[1] + "','" + maxMark[1] + "','" + avgMark[1] + "') ";
                    //        int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    }
                    //    if (txt_SecMrk3.Text != "" && txt_maxmark3.Text != "")
                    //    {
                    //        secMark[2] = 0;
                    //        maxMark[2] = 0;
                    //        avgMark[2] = 0;
                    //        double.TryParse(Convert.ToString(txt_SecMrk3.Text), out secMark[2]);
                    //        double.TryParse(Convert.ToString(txt_maxmark3.Text), out maxMark[2]);
                    //        double.TryParse(Convert.ToString(txt_avg3.Text), out avgMark[2]);
                    //        avgMark[2] = Math.Round(((secMark[2] / maxMark[2]) * 100), 2, MidpointRounding.AwayFromZero);
                    //        Session["part3SecMrk"] = secMark[2];
                    //        Session["part3maxmark"] = maxMark[2];
                    //        Session["part3avg"] = avgMark[2];
                    //        sec_total += secMark[2];
                    //        max_tot += maxMark[2];
                    //        countmark = 3;
                    //        string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(countmark)) + "','" + secMark[2] + "','" + maxMark[2] + "','" + avgMark[2] + "') ";
                    //        int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    }
                    //    if (txt_SecMrk4.Text != "" && txt_maxmark4.Text != "")
                    //    {
                    //        secMark[3] = 0;
                    //        maxMark[3] = 0;
                    //        avgMark[3] = 0;
                    //        double.TryParse(Convert.ToString(txt_SecMrk4.Text), out secMark[3]);
                    //        double.TryParse(Convert.ToString(txt_maxmark4.Text), out maxMark[3]);
                    //        double.TryParse(Convert.ToString(txt_avg4.Text), out avgMark[3]);
                    //        avgMark[3] = Math.Round(((secMark[3] / maxMark[3]) * 100), 2, MidpointRounding.AwayFromZero);
                    //        Session["part4SecMrk"] = secMark[3];
                    //        Session["part4maxmark"] = maxMark[3];
                    //        Session["part4avg"] = avgMark[3];
                    //        sec_total += secMark[3];
                    //        max_tot += maxMark[3];
                    //        countmark = 4;
                    //        string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(countmark)) + "','" + secMark[3] + "','" + maxMark[3] + "','" + avgMark[3] + "') ";
                    //        int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    }
                    //    if (txt_SecMrk5.Text != "" && txt_maxmark5.Text != "")
                    //    {
                    //        secMark[4] = 0;
                    //        maxMark[4] = 0;
                    //        avgMark[4] = 0;
                    //        double.TryParse(Convert.ToString(txt_SecMrk5.Text), out secMark[4]);
                    //        double.TryParse(Convert.ToString(txt_maxmark5.Text), out maxMark[4]);
                    //        double.TryParse(Convert.ToString(txt_avg5.Text), out avgMark[4]);
                    //        avgMark[4] = Math.Round(((secMark[4] / maxMark[4]) * 100), 2, MidpointRounding.AwayFromZero);
                    //        Session["part5SecMrk"] = secMark[4];
                    //        Session["part5maxmark"] = maxMark[4];
                    //        Session["part5avg"] = avgMark[4];
                    //        sec_total += secMark[4];
                    //        max_tot += maxMark[4];
                    //        countmark = 5;
                    //        string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(countmark)) + "','" + secMark[4] + "','" + maxMark[4] + "','" + avgMark[4] + "') ";
                    //        int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    }
                    //    //int p = 0;
                    //    //double max_tot = 0;
                    //    //double sec_total = 0;
                    //    //for (int part = 0; part < countmark; part++)
                    //    //{
                    //    //    p++;
                    //    //    sec_total += secMark[part];
                    //    //    max_tot += maxMark[part];
                    //    //    string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(p)) + "','" + secMark[part] + "','" + maxMark[part] + "','" + avgMark[part] + "') ";
                    //    //    int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    //}
                    //    //.................................................................................
                    //    string isgrade = "";
                    //    string nameofcollege = "";
                    //    if (txt_nameofcollege.Text.Trim() != "")
                    //    {
                    //        nameofcollege = Convert.ToString(txt_nameofcollege.Text.First().ToString().ToUpper() + txt_nameofcollege.Text.Substring(1));
                    //        Session["NameofCollege"] = Convert.ToString(txt_nameofcollege.Text.First().ToString().ToUpper() + txt_nameofcollege.Text.Substring(1));
                    //    }
                    //    else
                    //    {
                    //        nameofcollege = "";
                    //        Session["NameofCollege"] = "";
                    //    }
                    //    string Locationofcollege = "";
                    //    if (txt_locationofcollege.Text.Trim() != "")
                    //    {
                    //        Locationofcollege = Convert.ToString(txt_locationofcollege.Text.First().ToString().ToUpper() + txt_locationofcollege.Text.Substring(1));
                    //        Session["locationofcollege"] = Convert.ToString(txt_locationofcollege.Text.First().ToString().ToUpper() + txt_locationofcollege.Text.Substring(1));
                    //    }
                    //    else
                    //    {
                    //        Locationofcollege = "";
                    //        Session["locationofcollege"] = "";
                    //    }
                    //    string Qualifyexampassug = "";
                    //    if (ddlexamination.SelectedItem.Text.Trim() != "Others")
                    //    {
                    //        Qualifyexampassug = Convert.ToString(ddlexamination.SelectedItem.Value);
                    //    }
                    //    else
                    //    {
                    //        string qulify = Convert.ToString(txtqulifyexam.Text);
                    //        txt = "cours";
                    //        Qualifyexampassug = subjectcode(txt, qulify);
                    //    }
                    //    string univertsitycode = "";
                    //    if (ddlUniv.SelectedItem.Text.Trim() != "Others")
                    //    {
                    //        univertsitycode = Convert.ToString(ddlUniv.SelectedItem.Value);
                    //    }
                    //    else
                    //    {
                    //        string qulify = Convert.ToString(txt_univ.Text);
                    //        txt = "cours";
                    //        univertsitycode = subjectcode(txt, qulify);
                    //    }
                    //    string Major = "";
                    //    if (txt_major.Text.Trim() != "")
                    //    {
                    //        txt = "branc";
                    //        string Major1 = Convert.ToString(txt_major.Text.First().ToString().ToUpper() + txt_major.Text.Substring(1));
                    //        Major = subjectcode(txt, Major1);
                    //        Session["Major"] = Convert.ToString(txt_major.Text.First().ToString().ToUpper() + txt_major.Text.Substring(1));
                    //    }
                    //    else
                    //    {
                    //        Major = "";
                    //        Session["Major"] = "";
                    //    }
                    //    int typeofmajor = 0;
                    //    if (ddltypeofmajor.SelectedItem.Text != "Select")
                    //    {
                    //        if (ddltypeofmajor.SelectedItem.Text == "Single")
                    //        {
                    //            typeofmajor = 1;
                    //            Session["TypeofMajor"] = Convert.ToString(ddltypeofmajor.SelectedItem.Text);
                    //        }
                    //        else if (ddltypeofmajor.SelectedItem.Text == "Double")
                    //        {
                    //            typeofmajor = 2;
                    //            Session["TypeofMajor"] = Convert.ToString(ddltypeofmajor.SelectedItem.Text);
                    //        }
                    //        else if (ddltypeofmajor.SelectedItem.Text == "Triple")
                    //        {
                    //            typeofmajor = 3;
                    //            Session["TypeofMajor"] = Convert.ToString(ddltypeofmajor.SelectedItem.Text);
                    //        }
                    //    }
                    //    else
                    //    {
                    //        typeofmajor = 0;
                    //        Session["TypeofMajor"] = "";
                    //    }
                    //    string typeofsemester = "";
                    //    if (ddltypeofsemester.SelectedItem.Text != "Select")
                    //    {
                    //        if (ddltypeofsemester.SelectedItem.Text == "Semester")
                    //        {
                    //            typeofsemester = "1";
                    //            Session["TypeofSemester"] = Convert.ToString(ddltypeofsemester.SelectedItem.Text);
                    //        }
                    //        else if (ddltypeofsemester.SelectedItem.Text == "Non Semester")
                    //        {
                    //            typeofsemester = "0";
                    //            Session["TypeofSemester"] = Convert.ToString(ddltypeofsemester.SelectedItem.Text);
                    //        }
                    //    }
                    //    else
                    //    {
                    //        typeofsemester = "";
                    //        Session["TypeofSemester"] = "";
                    //    }
                    //    string mediumofstudyuglevel = "";
                    //    if (txt_mediumofstudy.Text.Trim() != "")
                    //    {
                    //        txt = "PLang";
                    //        string mediumofstudyuglevel1 = Convert.ToString(txt_mediumofstudy.Text.First().ToString().ToUpper() + txt_mediumofstudy.Text.Substring(1));
                    //        mediumofstudyuglevel = subjectcode(txt, mediumofstudyuglevel1);
                    //        Session["Mediumofstudyug"] = Convert.ToString(txt_mediumofstudy.Text.First().ToString().ToUpper() + txt_mediumofstudy.Text.Substring(1));
                    //    }
                    //    else
                    //    {
                    //        mediumofstudyuglevel = "";
                    //        Session["Mediumofstudyug"] = "";
                    //    }
                    //    string marksorgradeug = "";
                    //    if (rdbugmarks.Checked == true)
                    //    {
                    //        marksorgradeug = "0";
                    //        Session["MarkorgradeUg"] = "Marks";
                    //    }
                    //    if (rdbuggrade.Checked == true)
                    //    {
                    //        marksorgradeug = "1";
                    //        Session["MarkorgradeUg"] = "Grade";
                    //    }
                    //    string regnoug = "";
                    //    if (txt_regnomarksheet.Text.Trim() != "")
                    //    {
                    //        regnoug = Convert.ToString(txt_regnomarksheet.Text);
                    //        Session["ugRegno"] = Convert.ToString(txt_regnomarksheet.Text);
                    //    }
                    //    else
                    //    {
                    //        regnoug = "";
                    //        Session["ugRegno"] = "";
                    //    }
                    //    string alltotalpercent = "";
                    //    if (txt_allsubjectpercentage.Text.Trim() != "")
                    //    {
                    //        alltotalpercent = Convert.ToString(txt_allsubjectpercentage.Text);
                    //        Session["Alltotalpercent"] = Convert.ToString(txt_allsubjectpercentage.Text);
                    //    }
                    //    else
                    //    {
                    //        alltotalpercent = "";
                    //        Session["Alltotalpercent"] = "";
                    //    }
                    //    string majortotalpercent = "";
                    //    if (txt_majorsubjectpercentage.Text.Trim() != "")
                    //    {
                    //        majortotalpercent = Convert.ToString(txt_majorsubjectpercentage.Text);
                    //        Session["Majortotalpercent"] = Convert.ToString(txt_majorsubjectpercentage.Text);
                    //    }
                    //    else
                    //    {
                    //        majortotalpercent = "";
                    //        Session["Majortotalpercent"] = "";
                    //    }
                    //    string majoralliedpercent = "";
                    //    if (txt_majorandalliedsubjectpercentage.Text.Trim() != "")
                    //    {
                    //        majoralliedpercent = Convert.ToString(txt_majorandalliedsubjectpercentage.Text);
                    //        Session["Majoralliedtotalpercent"] = Convert.ToString(txt_majorandalliedsubjectpercentage.Text);
                    //    }
                    //    else
                    //    {
                    //        majoralliedpercent = "";
                    //        Session["Majoralliedtotalpercent"] = "";
                    //    }
                    //    string tancet_mark = "";
                    //    //if (Session["type"].ToString().ToUpper() == "MCA")
                    //    //{
                    //    //    //tancet_mark = Convert.ToString(txt_tancetmark.Text);
                    //    //    //Session["TancetMark"] = Convert.ToString(txt_tancetmark.Text);
                    //    //}
                    //    string passmonth = Convert.ToString(DropDownList1.SelectedItem.Text);
                    //    string passyear = Convert.ToString(DropDownList2.SelectedItem.Text);
                    //    string subjectmark = "";
                    //    if (ddl_coursetype.SelectedItem.Text != "M.Phil" || ddl_coursetype.SelectedItem.Text != "DOCTORATE")
                    //    {
                    //        if (Marksgrid.Rows.Count > 0)
                    //        {
                    //            for (int mark = 0; mark < Marksgrid.Rows.Count; mark++)
                    //            {
                    //                string semoryear = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_semoryear") as TextBox).Text);
                    //                string subject = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgsubject") as TextBox).Text);
                    //                txt = "subje";
                    //                string subject_number = subjectcode(txt, subject);
                    //                string sub_type_subjectno = "";
                    //                string typeofsubject = Convert.ToString((Marksgrid.Rows[mark].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text);
                    //                if (typeofsubject != "Others")
                    //                {
                    //                    txt = "tsub";
                    //                    sub_type_subjectno = subjectcode(txt, typeofsubject);
                    //                }
                    //                else
                    //                {
                    //                    string subtype = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_typeofsubject") as TextBox).Text);
                    //                    txt = "tsub";
                    //                    sub_type_subjectno = subjectcode(txt, subtype);
                    //                }
                    //                string finalmarkandgrade = "";
                    //                if (rbMarksGrade.SelectedIndex == 0)
                    //                {
                    //                    isgrade = "0";
                    //                    finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_marks") as TextBox).Text);
                    //                }
                    //                else
                    //                {
                    //                    isgrade = "1";
                    //                    finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_Grade") as TextBox).Text);
                    //                }
                    //                string Month = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgmonth") as TextBox).Text);
                    //                string year1 = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgyear") as TextBox).Text);
                    //                string max_mark = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_maximum_marks") as TextBox).Text);
                    //                if (subjectmark == "")
                    //                {
                    //                    subjectmark = semoryear + "-" + subject_number + "-" + sub_type_subjectno + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + max_mark;
                    //                }
                    //                else
                    //                {
                    //                    subjectmark = subjectmark + "\\" + semoryear + "-" + subject_number + "-" + sub_type_subjectno + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + max_mark;
                    //                }
                    //            }
                    //        }
                    //        Session["ugmarksvalue"] = Convert.ToString(subjectmark);
                    //    }
                    //    else
                    //    {
                    //        if (GridView_mphil.Rows.Count > 0)
                    //        {
                    //            for (int mark = 0; mark < GridView_mphil.Rows.Count; mark++)
                    //            {
                    //                string semoryear = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_semoryear") as TextBox).Text);
                    //                string subject = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgsubject") as TextBox).Text);
                    //                txt = "subje";
                    //                string subject_number = subjectcode(txt, subject);
                    //                string sub_type_subjectno = "";
                    //                string typeofsubject = Convert.ToString((GridView_mphil.Rows[mark].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text);
                    //                if (typeofsubject != "Others")
                    //                {
                    //                    txt = "tsub";
                    //                    sub_type_subjectno = subjectcode(txt, typeofsubject);
                    //                }
                    //                else
                    //                {
                    //                    string subtype = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_typeofsubject") as TextBox).Text);
                    //                    txt = "tsub";
                    //                    sub_type_subjectno = subjectcode(txt, subtype);
                    //                }
                    //                string finalmarkandgrade = "";
                    //                if (rbMarksGrade.SelectedIndex == 0)
                    //                {
                    //                    isgrade = "0";
                    //                    finalmarkandgrade = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_marks") as TextBox).Text);
                    //                }
                    //                else
                    //                {
                    //                    isgrade = "1";
                    //                    finalmarkandgrade = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_Grade") as TextBox).Text);
                    //                }
                    //                string internalmark = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_inter") as TextBox).Text);
                    //                string externalmark = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_exter") as TextBox).Text);
                    //                string Month = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgmonth") as TextBox).Text);
                    //                string year1 = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgyear") as TextBox).Text);
                    //                string max_mark = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_maximum_marks") as TextBox).Text);
                    //                if (subjectmark == "")
                    //                {
                    //                    subjectmark = semoryear + "-" + subject_number + "-" + sub_type_subjectno + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + max_mark + "-" + internalmark + "-" + externalmark;
                    //                }
                    //                else
                    //                {
                    //                    subjectmark = subjectmark + "\\" + semoryear + "-" + subject_number + "-" + sub_type_subjectno + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + max_mark + "-" + internalmark + "-" + externalmark;
                    //                }
                    //            }
                    //        }
                    //        if (subjectmark.Trim() != "")
                    //        {
                    //            Session["ugmarksvalue"] = Convert.ToString(subjectmark);
                    //        }
                    //    }
                    //    string course_enterno = "";
                    //    string previous_details = "";
                    //    byte Vocational_stream = rbVocation.Checked ? (byte)1 : (byte)0;
                    //    string cuofpg = "";
                    //    cuofpg = Convert.ToString(txt_cutofpg.Text);
                    //    if (cuofpg.Trim() == "")
                    //    {
                    //        cuofpg = "0";
                    //    }
                    //    string internalmarksave = Convert.ToString(txt_internal.Text);
                    //    if (internalmarksave == "")
                    //    {
                    //        internalmarksave = "0";
                    //    }
                    //    string externalmarksave = Convert.ToString(txt_external.Text);
                    //    if (externalmarksave == "")
                    //    {
                    //        externalmarksave = "0";
                    //    }
                    //    if (ddl_coursetype.SelectedItem.Value == "PG" || ddl_coursetype.SelectedItem.Value == "M.Phil" || ddl_coursetype.SelectedItem.Text == "DOCTORATE")
                    //    {
                    //        if (ddl_coursetype.SelectedItem.Value == "PG")
                    //        {
                    //            previous_details = "insert into Stud_prev_details (app_no,course_code,Institute_name,instaddress,medium,isgrade,percentage,majorallied_percent,major_percent,type_major,type_semester,registration_no,branch_code,Vocational_stream,markPriority,passyear,passmonth,university_code,Cut_Of_Mark)values('" + app_no + "','" + Qualifyexampassug + "','" + nameofcollege + "','" + Locationofcollege + "','" + mediumofstudyuglevel + "','" + isgrade + "'," + alltotalpercent + "," + majoralliedpercent + "," + majortotalpercent + "," + typeofmajor + ",'" + typeofsemester + "','" + regnoug + "','" + Major + "','" + Vocational_stream + "',1,'" + passyear + "','" + passmonth + "','" + univertsitycode + "','" + cuofpg + "')";
                    //        }
                    //        else
                    //        {
                    //            previous_details = "insert into Stud_prev_details (app_no,course_code,Institute_name,instaddress,medium,isgrade,percentage,majorallied_percent,major_percent,type_major,type_semester,registration_no,branch_code,vocational_stream,university_code,InternalPercentage,ExternalPercentage)values('" + app_no + "','" + Qualifyexampassug + "','" + nameofcollege + "','" + Locationofcollege + "','" + mediumofstudyuglevel + "','" + isgrade + "'," + alltotalpercent + "," + majoralliedpercent + "," + majortotalpercent + "," + typeofmajor + ",'" + typeofsemester + "','" + regnoug + "','" + Major + "','" + Vocational_stream + "','" + univertsitycode + "','" + internalmarksave + "','" + externalmarksave + "')";
                    //        }
                    //        //else
                    //        //{
                    //        //  previous_details = "insert into Stud_prev_details (app_no,course_code,Institute_name,instaddress,medium,isgrade,percentage,majorallied_percent,major_percent,type_major,type_semester,tancet_mark,registration_no,branch_code,Vocational_stream,markPriority)values('" + app_no + "','" + Qualifyexampassug + "','" + nameofcollege + "','" + Locationofcollege + "','" + mediumofstudyuglevel + "','" + isgrade + "'," + alltotalpercent + "," + majoralliedpercent + "," + majortotalpercent + "," + typeofmajor + ",'" + typeofsemester + "','" + tancet_mark + "','" + regnoug + "','" + Major + "','" + Vocational_stream + "',1)";
                    //        //}
                    //    }
                    //    int previous = d2.update_method_wo_parameter(previous_details, "Text");
                    //    if (previous != 0)
                    //    {
                    //        string select_courseno = "select course_entno  from Stud_prev_details where app_no ='" + app_no + "'  and isnull(markPriority,1)=1";
                    //        ds.Clear();
                    //        ds = d2.select_method_wo_parameter(select_courseno, "Text");
                    //        if (ds.Tables[0].Rows.Count > 0)
                    //        {
                    //            course_enterno = Convert.ToString(ds.Tables[0].Rows[0]["course_entno"]);
                    //            alterflage = true;
                    //        }
                    //    }
                    //    if (subjectmark.Trim() != "")
                    //    {
                    //        string[] firstsplit = subjectmark.Split('\\');
                    //        if (firstsplit.Length > 0)
                    //        {
                    //            for (int fi = 0; fi <= firstsplit.GetUpperBound(0); fi++)
                    //            {
                    //                string secondsplitvalue = Convert.ToString(firstsplit[fi]);
                    //                if (secondsplitvalue.Trim() != "")
                    //                {
                    //                    string[] secondsplit = secondsplitvalue.Split('-');
                    //                    if (secondsplit.Length > 0)
                    //                    {
                    //                        string semoryear = Convert.ToString(secondsplit[0]);
                    //                        string subjectno = Convert.ToString(secondsplit[1]);
                    //                        string typeofsubject = Convert.ToString(secondsplit[2]);
                    //                        string gradeofmark = Convert.ToString(secondsplit[3]);
                    //                        string monthofpass = Convert.ToString(secondsplit[4]);
                    //                        string yearofpass = Convert.ToString(secondsplit[5]);
                    //                        string max_mark_pass = Convert.ToString(secondsplit[6]);
                    //                        string internalmark1 = "";
                    //                        string externalmark1 = "";
                    //                        string addquery = "";
                    //                        string addquery1 = "";
                    //                        if (ddl_coursetype.SelectedItem.Value == "M.Phil" || ddl_coursetype.SelectedItem.Text == "DOCTORATE")
                    //                        {
                    //                            internalmark1 = Convert.ToString(secondsplit[7]);
                    //                            externalmark1 = Convert.ToString(secondsplit[8]);
                    //                            addquery = ",InternalMark,ExternalMark";
                    //                            addquery1 = ",'" + internalmark1 + "','" + externalmark1 + "'";
                    //                        }
                    //                        if (isgrade != "1")
                    //                        {
                    //                            string insertmarkquery = "insert into perv_marks_history (semyear,course_entno,psubjectno,subject_typeno,acual_marks,max_marks,pass_month,pass_year " + addquery + ")values ('" + semoryear + "','" + course_enterno + "','" + subjectno + "','" + typeofsubject + "','" + gradeofmark + "','" + max_mark_pass + "','" + monthofpass + "','" + yearofpass + "' " + addquery1 + ")";
                    //                            int rus = d2.update_method_wo_parameter(insertmarkquery, "Text");
                    //                            alterflage = true;
                    //                        }
                    //                        else if (isgrade != "0")
                    //                        {
                    //                            string insertmarkquery = "insert into perv_marks_history (semyear,course_entno,psubjectno,subject_typeno,grade,max_marks,pass_month,pass_year " + addquery + ")values ('" + semoryear + "','" + course_enterno + "','" + subjectno + "','" + typeofsubject + "','" + gradeofmark + "','" + max_mark_pass + "','" + monthofpass + "','" + yearofpass + "' " + addquery1 + ")";
                    //                            int rus = d2.update_method_wo_parameter(insertmarkquery, "Text");
                    //                            alterflage = true;
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                    if (!MarksCheck())
                    {
                        alterflage = true;
                    }
                    if (alterflage == true)
                    {
                        //sendsms(Convert.ToString(txt_mobilenumber.Text), Convert.ToString(txt_appfromno.Text));
                        if (SendSmsAfterSave())
                        {
                            string user_id = "";
                            string Msg = "You have registered successfully. Please quote Your Application ID (Application Number) is : " + txt_appfromno.Text + " for future reference";
                            string Mobile_no = "";
                            string ssr = "select * from Track_Value where college_code='" + Convert.ToString(ddl_college.SelectedItem.Value) + "'";
                            ds.Clear();
                            ds = d2.select_method_wo_parameter(ssr, "Text");
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
                            }
                            int d = d2.send_sms(user_id, Convert.ToString(ddl_college.SelectedItem.Value), usercode, Mobile_no, Msg, "0");
                        }
                        //  btn4.Enabled = false;
                        //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Saved Sucessfully\");", true);
                        //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Saved Sucessfully')", true);
                        loadPartLanguages();
                        loadscholarship();//Added By Saranyadevi 22.2.2018
                        loadQualification();
                        loadAcaDropDowns();
                        loadAcademicSpread();
                        loadBnkDropDowns();
                        loadBnkSpread();
                        loadRelDropDowns();
                        loadRelSpread();
                        loadRefDropDowns();
                        loadStaff(); loadreferstudent();
                        bindnationalitymothertonguebloodgroup();
                        turnVisibility();
                        //popaddnewF2.Visible = false;
                        TabContainer1.Visible = true;
                        imgAlert.Visible = true;
                        lblalert.Text = "Saved Successfully";
                        go();
                        clearall();
                    }
                    else
                    {
                        ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Add Academic Details\");", true);//Added By Saranyadevi21.2.2018
                        //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Saved Not Sucessfully\");", true); saranyadevi 23feb2018
                        // ScriptManager.RegisterClientScripstBlock(this, this.GetType(), "clientScript", "alert('Saved Not Sucessfully')", true);
                    }
                }
                else
                {
                    ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Fill all the fields\");", true);
                    //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Please Fill All Fields')", true);
                }
            //}
            //else
            //{
            //    Response.Redirect("~/Default.aspx");
            //}
        }
        catch (Exception ex) // Added by jairam 28-6-2016
        {
            //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"" + Convert.ToString(ex) + "\");", true);
            d2.sendErrorMail(ex, ddl_college.SelectedItem.Value, "<br>StudentNewApplicationReport.aspx");
            popaddnewF2.Visible = false;
            imgAlert.Visible = true;
            lblalert.Text = "Not Saved";
        }
        turnVisibility();
    }
    public void btn_fromate2update_click(object sender, EventArgs e)
    {
        format2update();
        turnVisibility();
        clearall();
    }
    public void format2update()
    {
        try
        {
            bool flage = false;
            bool alterflage = false;
            int count = 0;
            string txt = "";
            string newyear = "";
            string newmonth = "";
            //if (ddl_coursetype.SelectedItem.Value != "" && ddl_coursetype.SelectedItem.Value != null)
            //{
                if (MarksCheck())
                {
                    //if (ddl_coursetype.SelectedItem.Value == "PG")
                    //{
                    //    if (Marksgrid.Rows.Count > 0)
                    //    {
                    //        for (int mark = 0; mark < Marksgrid.Rows.Count; mark++)
                    //        {
                    //            string semoryear = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_semoryear") as TextBox).Text);
                    //            string subject = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgsubject") as TextBox).Text);
                    //            string sub_type_subjectno = "";
                    //            string typeofsubject = Convert.ToString((Marksgrid.Rows[mark].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text);
                    //            if (typeofsubject != "Others")
                    //            {
                    //                sub_type_subjectno = typeofsubject;
                    //            }
                    //            else
                    //            {
                    //                string subtype = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_typeofsubject") as TextBox).Text);
                    //                sub_type_subjectno = subjectcode(txt, subtype);
                    //            }
                    //            string finalmarkandgrade = "";
                    //            if (rbMarksGrade.SelectedIndex == 0)
                    //            {
                    //                finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_marks") as TextBox).Text);
                    //            }
                    //            else
                    //            {
                    //                finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_Grade") as TextBox).Text);
                    //            }
                    //            string Month = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgmonth") as TextBox).Text);
                    //            string year1 = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgyear") as TextBox).Text);
                    //            string max_mark = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_maximum_marks") as TextBox).Text);
                    //            //if (semoryear.Trim() == "" || subject.Trim() == "" || sub_type_subjectno.Trim() == "" || finalmarkandgrade.Trim() == "" || Month.Trim() == "" || year1.Trim() == "" || max_mark.Trim() == "")
                    //            //{
                    //            //    count++;
                    //            //  flage = true;
                    //            //}
                    //            //else
                    //            //{
                    //            //    if (count == 0)
                    //            //    {
                    //            flage = false;
                    //            //    }
                    //            //}
                    //        }
                    //    }
                    //}
                    //if (ddl_coursetype.SelectedItem.Value == "M.PHIL" || ddl_coursetype.SelectedItem.Text == "DOCTORATE")
                    //{
                    //    if (GridView_mphil.Rows.Count > 0)
                    //    {
                    //        for (int mark = 0; mark < GridView_mphil.Rows.Count; mark++)
                    //        {
                    //            string semoryear = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_semoryear") as TextBox).Text);
                    //            string subject = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgsubject") as TextBox).Text);
                    //            string sub_type_subjectno = "";
                    //            string typeofsubject = Convert.ToString((GridView_mphil.Rows[mark].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text);
                    //            if (typeofsubject != "Others")
                    //            {
                    //                sub_type_subjectno = typeofsubject;
                    //            }
                    //            else
                    //            {
                    //                string subtype = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_typeofsubject") as TextBox).Text);
                    //                sub_type_subjectno = subjectcode(txt, subtype);
                    //            }
                    //            string finalmarkandgrade = "";
                    //            if (rbMarksGrade.SelectedItem.Text == "Marks")
                    //            {
                    //                finalmarkandgrade = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_marks") as TextBox).Text);
                    //            }
                    //            if (rbMarksGrade.SelectedItem.Text == "Grade")
                    //            {
                    //                finalmarkandgrade = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_Grade") as TextBox).Text);
                    //            }
                    //            string Month = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgmonth") as TextBox).Text);
                    //            string year1 = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgyear") as TextBox).Text);
                    //            string max_mark = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_maximum_marks") as TextBox).Text);
                    //            if (semoryear.Trim() == "" || subject.Trim() == "" || sub_type_subjectno.Trim() == "" || finalmarkandgrade.Trim() == "" || Month.Trim() == "" || year1.Trim() == "" || max_mark.Trim() == "")
                    //            {
                    //                count++;
                    //                flage = true;
                    //            }
                    //            else
                    //            {
                    //                if (count == 0)
                    //                {
                    //                    flage = false;
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                    //if (ddl_coursetype.SelectedItem.Value == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
                    //{
                    //    if (UgGrid.Rows.Count > 0)
                    //    {
                    //        for (int mark = 0; mark < UgGrid.Rows.Count - 1; mark++)
                    //        {
                    //            string subjectname = "";
                    //            if (mark != 1)
                    //            {
                    //                string subject_name = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
                    //                if (subject_name == "---Select---")
                    //                {
                    //                }
                    //                else
                    //                    if (subject_name == "Others")
                    //                    {
                    //                        subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
                    //                    }
                    //                    else
                    //                    {
                    //                        subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
                    //                    }
                    //            }
                    //            else if (mark == 1)
                    //            {
                    //                subjectname = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
                    //            }
                    //            // string subjectcode = Convert.ToString((Marksgrid.Rows[mark].FindControl("lblsubcode") as Label).Text);
                    //            string finalmarkandgrade = "";
                    //            if (rbMarksGrade.SelectedIndex == 0)
                    //            {
                    //                finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmagrs") as TextBox).Text);
                    //            }
                    //            else
                    //            {
                    //                finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ug_grade") as TextBox).Text);
                    //            }
                    //            string Month = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmonth") as TextBox).Text);
                    //            string year1 = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugyear") as TextBox).Text);
                    //            string regno = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugregno") as TextBox).Text);
                    //            string nofoattempts = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugnoofattmpts") as TextBox).Text);
                    //            string max_mark = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_rg_max") as TextBox).Text);
                    //            newmonth = Month;
                    //            newyear = year1;
                    //            //if (Month.Trim() == "" || subjectname.Trim() == "" || finalmarkandgrade.Trim() == "" || year1.Trim() == "" || regno.Trim() == "" || nofoattempts.Trim() == "" || max_mark.Trim() == "")
                    //            //{
                    //            //    count++;
                    //            //    flage = true;
                    //            //}
                    //            //else
                    //            //{
                    //            //    if (count == 0)
                    //            //    {
                    //            flage = false;
                    //            //    }
                    //            //}
                    //        }
                    //    }
                    //}
                }
                else
                {
                    flage = false;
                }
                if (flage == false)
                {
                    string typecollege = Convert.ToString(ddl_college.SelectedItem.Text);
                    Session["typecollege"] = typecollege.ToString();
                    string educationlevel = "";
                    Session["educationlevel"] = educationlevel.ToString();
                    string gradutation = "";
                    Session["gradutation"] = gradutation.ToString();
                    string course = Convert.ToString(ddl_courseone.SelectedItem.Text);
                    Session["course"] = course.ToString();
                    string studentfistname = Convert.ToString(txt_FName_app.Text.First().ToString().ToUpper() + txt_FName_app.Text.Substring(1));
                    Session["studentfistname"] = studentfistname.ToString();
                    string lastname = "";
                    if (txt_LName_app.Text.Trim() != "")
                    {
                        lastname = Convert.ToString(txt_LName_app.Text.First().ToString().ToUpper() + txt_LName_app.Text.Substring(1));
                        Session["lastname"] = lastname.ToString();
                    }
                    string Student_fullname = studentfistname + " " + lastname;
                    Session["student_Fullname"] = Student_fullname.ToString();
                    //string firstnametamil = Convert.ToString(txtfirstnametamil.Text);
                    //string lastnametamil = Convert.ToString(txtlastnametamil.Text);
                    //Session["firstnametamil"] = Convert.ToString(firstnametamil) + " " + Convert.ToString(lastnametamil);
                    //string fullnametami = Convert.ToString(firstnametamil) + " " + Convert.ToString(lastnametamil);
                    string fathernametamil = Convert.ToString(txt_fathernametamil.Text);
                    Session["fathernametamil"] = Convert.ToString(fathernametamil);
                    string fatheranualincome = "";
                    string fincome = Convert.ToString(txt_annualincome.Text);
                    if (fincome.Trim() != "")
                    {
                        txt = "fin";
                        string fincome1 = subjectcode(txt, fincome);
                        fatheranualincome = Convert.ToString(fincome1);
                        Session["fatheranualincome"] = Convert.ToString(fincome);
                    }
                    else
                    {
                        fatheranualincome = "0";
                        Session["fatheranualincome"] = "";
                    }
                    string fathercontactno = Convert.ToString(txt_fathercontactno.Text);
                    Session["fathercontactno"] = Convert.ToString(fathercontactno);
                    //if (fathercontactno.Trim() == "")
                    //{
                    //    fathercontactno = "0";
                    //}
                    //added by Deepali on 7.4.18============
                    string fathercontactno2 = Convert.ToString(txt_fathercontactno2.Text);
                    Session["fathercontactno2"] = Convert.ToString(fathercontactno2);
                    //======================================
                    string fatheremail = Convert.ToString(txt_fatheremail.Text);
                    Session["fatheremail"] = Convert.ToString(fatheremail);
                    string mathername = Convert.ToString(txt_mothername.Text);
                    Session["mathername"] = Convert.ToString(mathername);
                    string motheroccupation = "";
                    if (Convert.ToString(ddlmotheroccupation.SelectedItem.Text) != "Select")
                    {
                        if (Convert.ToString(ddlmotheroccupation.SelectedItem.Text) != "Others")
                        {
                            motheroccupation = Convert.ToString(ddlmotheroccupation.SelectedItem.Value);
                            Session["motheroccupation"] = Convert.ToString(ddlmotheroccupation.SelectedItem.Text);
                        }
                        else
                        {
                            txt = "moccu";
                            string occu_value = Convert.ToString(txt_motheroccupation.Text.First().ToString().ToUpper() + txt_motheroccupation.Text.Substring(1));
                            if (occu_value.Trim() != "")
                            {
                                motheroccupation = subjectcode(txt, occu_value);
                                Session["motheroccupation"] = Convert.ToString(occu_value);
                            }
                            else
                            {
                                motheroccupation = "0";
                                Session["motheroccupation"] = "";
                            }
                        }
                    }
                    else
                    {
                        motheroccupation = "0";
                        Session["motheroccupation"] = "";
                    }
                    string motherincome = "";
                    string mincome = Convert.ToString(txt_motherannualincome.Text);
                    if (mincome.Trim() != "")
                    {
                        txt = "min"; //txt = "fin";// magesh 26.9.18
                        mincome = subjectcode(txt, mincome);
                        motherincome = Convert.ToString(mincome);
                        Session["motherincome"] = Convert.ToString(txt_motherannualincome.Text);
                    }
                    else
                    {
                        motherincome = "0";
                        Session["motherincome"] = "";
                    }
                    string mothercontectno = Convert.ToString(txt_mothercontactno.Text);
                    Session["mothercontectno"] = Convert.ToString(mothercontectno);
                    //if (mothercontectno.Trim() == "")
                    //{
                    //    mothercontectno = "0";
                    //}
                    string motheremail = Convert.ToString(txt_motheremail.Text);
                    Session["motheremail"] = Convert.ToString(motheremail);
                    string guardianame = Convert.ToString(txt_guardiananme.Text);
                    Session["guardianame"] = Convert.ToString(guardianame);
                    string guardiancontactno = Convert.ToString(txt_guardianconatactno.Text);
                    Session["guardiancontactno"] = Convert.ToString(guardiancontactno);
                    //if (guardiancontactno.Trim() == "")
                    //{
                    //    guardiancontactno = "0";
                    //}
                    string guardianemail = Convert.ToString(txt_guardianemail.Text);
                    Session["guardianemail"] = Convert.ToString(guardianemail);
                    string part1language = "";
                    for (int col = 0; col < rdblistlanguage.Items.Count; col++)
                    {
                        if (rdblistlanguage.Items[col].Selected == true)
                        {
                            part1language = Convert.ToString(rdblistlanguage.Items[col].Text);
                            txt = "Cplan";
                            Session["part1language"] = Convert.ToString(part1language);
                            part1language = subjectcode(txt, part1language);
                        }
                    }
                    string placeofbirth = Convert.ToString(txt_placeofbirth.Text);
                    if (placeofbirth.Trim() != "")
                    {
                        Session["placeofbirth"] = Convert.ToString(placeofbirth);
                    }
                    else
                    {
                        Session["placeofbirth"] = "-";
                    }
                    string bloodgroup = "";
                    if (Convert.ToString(ddlbloodgroup.SelectedItem.Text) != "Select")
                    {
                        if (Convert.ToString(ddlbloodgroup.SelectedItem.Text) != "Others")
                        {
                            bloodgroup = Convert.ToString(ddlbloodgroup.SelectedItem.Value);
                            Session["bloodgroup"] = Convert.ToString(ddlbloodgroup.SelectedItem.Text);
                        }
                        else
                        {
                            txt = "bgrou";
                            string occu_value = Convert.ToString(txt_otherbloodgroup.Text.First().ToString().ToUpper() + txt_otherbloodgroup.Text.Substring(1));
                            if (occu_value.Trim() != "")
                            {
                                bloodgroup = subjectcode(txt, occu_value);
                                Session["bloodgroup"] = Convert.ToString(occu_value);
                            }
                            else
                            {
                                bloodgroup = "0";
                                Session["bloodgroup"] = "";
                            }
                        }
                    }
                    else
                    {
                        bloodgroup = "0";
                        Session["bloodgroup"] = "";
                    }
                    string Aadharcardno = "";
                    if (Convert.ToString(txt_Aadharcardno.Text).Trim() != "")
                    {
                        Aadharcardno = Convert.ToString(txt_Aadharcardno.Text);
                        Session["Aadharcardno"] = Aadharcardno;
                    }
                    else
                    {
                        Aadharcardno = "";
                        Session["Aadharcardno"] = "";
                    }
                    string EMIS_No = "";
                    if (Convert.ToString(txtemis_no.Text).Trim() != "")
                    {
                        EMIS_No = Convert.ToString(txtemis_no.Text);
                        Session["EMIS_No"] = EMIS_No;
                    }
                    else
                    {
                        EMIS_No = "";
                        Session["EMIS_No"] = "";
                    }
                    string stud_height = "";
                    if (Convert.ToString(txt_height.Text).Trim() != "")
                    {
                        stud_height = Convert.ToString(txt_height.Text);
                        Session["stud_height"] = stud_height;
                    }
                    else
                    {
                        stud_height = "";
                        Session["stud_height"] = "";
                    }
                    string stud_weight = "";
                    if (Convert.ToString(txt_weight.Text).Trim() != "")
                    {
                        stud_weight = Convert.ToString(txt_weight.Text);
                        Session["stud_weight"] = stud_weight;
                    }
                    else
                    {
                        stud_weight = "";
                        Session["stud_weight"] = "";
                    }
                    string dataofbirth = "";
                    //string date = Convert.ToString(ddldobdate.SelectedItem.Text);
                    //string month = Convert.ToString(ddldobMonth.SelectedItem.Value);// jairam
                    //string year = Convert.ToString(ddldobYear.SelectedItem.Text);
                    //if (month.Length == 1)
                    //{
                    //    month = "0" + month;
                    //}
                    //if (date.Length == 1)
                    //{
                    //    date = "0" + date;
                    //}
                    //dataofbirth = month + "/" + date + "/" + year;
                    //Session["dataofbirth"] = Convert.ToString(date + "/" + month + "/" + year);
                    string[] dob = txt_dob.Text.Split('/');
                    DateTime dob_dt = new DateTime();
                    DateTime.TryParse(Convert.ToString(dob[1] + '/' + dob[0] + '/' + dob[2]), out dob_dt);
                    dataofbirth = dob_dt.ToString("MM/dd/yyyy");
                    Session["dataofbirth"] = Convert.ToString(txt_dob.Text);
                    string stud_Dob = dob_dt.ToString("MM/dd/yyyy");
                    string sex = Convert.ToString(ddlsex2.SelectedItem.Value);
                    Session["sex"] = Convert.ToString(ddlsex2.SelectedItem.Text);
                    string parentsname = "";
                    try
                    {
                        parentsname = Convert.ToString(txt_parentsname.Text.First().ToString().ToUpper() + txt_parentsname.Text.Substring(1));
                    }
                    catch { }
                    Session["parentsname"] = parentsname.ToString();
                    string relationship = "";
                    Session["relationship"] = relationship.ToString();
                    string occupation = "";
                    if (Convert.ToString(ddloccupation.SelectedItem.Text) != "Select")
                    {
                        if (Convert.ToString(ddloccupation.SelectedItem.Text) != "Others")
                        {
                            occupation = Convert.ToString(ddloccupation.SelectedItem.Value);
                            Session["occupation"] = Convert.ToString(ddloccupation.SelectedItem.Text);
                        }
                        else
                        {
                            txt = "foccu";
                            string occu_value = Convert.ToString(txt_occupation.Text.First().ToString().ToUpper() + txt_occupation.Text.Substring(1));
                            if (occu_value.Trim() != "")
                            {
                                occupation = subjectcode(txt, occu_value);
                                Session["occupation"] = Convert.ToString(occu_value);
                            }
                            else
                            {
                                occupation = "0";
                                Session["occupation"] = "";
                            }
                        }
                    }
                    else if (Convert.ToString(ddloccupation.SelectedItem.Text) == "Select")
                    {
                        occupation = "0";
                        Session["occupation"] = "";
                    }
                    string mothertoung = "";
                    if (ddlmothertounge.SelectedItem.Text != "Others")
                    {
                        mothertoung = Convert.ToString(ddlmothertounge.SelectedItem.Value);
                        Session["mothertoung"] = Convert.ToString(ddlmothertounge.SelectedItem.Text);
                    }
                    else
                    {
                        if (Convert.ToString(txt_mothertounge.Text) != "")
                        {
                            txt = "mton";
                            string mother = Convert.ToString(txt_mothertounge.Text.First().ToString().ToUpper() + txt_mothertounge.Text.Substring(1));
                            mothertoung = subjectcode(txt, mother);
                            Session["mothertoung"] = Convert.ToString(txt_mothertounge.Text.First().ToString().ToUpper() + txt_mothertounge.Text.Substring(1));
                        }
                    }
                    string religion = "";
                    string subreligion = "";
                    if (ddlreligion.SelectedItem.Text != "Select")
                    {
                        if (ddlreligion.SelectedItem.Text != "Others")
                        {
                            religion = Convert.ToString(ddlreligion.SelectedItem.Value);
                            Session["religion"] = Convert.ToString(ddlreligion.SelectedItem.Text);
                        }
                        //&& ddlreligion.SelectedItem.Text.ToUpper() != "CHRISTIAN"
                        //else if (ddlreligion.SelectedItem.Text.ToUpper() == "CHRISTIAN")
                        //{
                        //    religion = Convert.ToString(ddlreligion.SelectedItem.Value);
                        //    Session["religion"] = Convert.ToString(ddlreligion.SelectedItem.Text);
                        //    if (ddlsubreligion.SelectedItem.Text != "Others")
                        //    {
                        //        subreligion = Convert.ToString(ddlsubreligion.SelectedItem.Value);
                        //        Session["subreligion"] = Convert.ToString(ddlreligion.SelectedItem.Text);
                        //    }
                        //    else
                        //    {
                        //        txt = "SCast";
                        //        string addsubrelig = Convert.ToString(txt_otherreligion.Text.First().ToString().ToUpper() + txt_otherreligion.Text.Substring(1));
                        //        if (addsubrelig.Trim() != "")
                        //        {
                        //            subreligion = subjectcode(txt, addsubrelig);
                        //            Session["subreligion"] = Convert.ToString(addsubrelig);
                        //        }
                        //    }
                        //}
                        else
                        {
                            txt = "relig";
                            string relig = Convert.ToString(txt_otherreligion.Text.First().ToString().ToUpper() + txt_otherreligion.Text.Substring(1));
                            if (relig.Trim() != "")
                            {
                                religion = subjectcode(txt, relig);
                                Session["religion"] = Convert.ToString(religion);
                            }
                        }
                    }
                    if (subreligion.Trim() == "")
                    {
                        subreligion = "0";
                    }
                    string nationality = "";
                    if (ddlcountry.SelectedItem.Text != "Select")
                    {
                        if (ddlcountry.SelectedItem.Text != "Others")
                        {
                            nationality = Convert.ToString(ddlcountry.SelectedItem.Value);
                            Session["nationality"] = Convert.ToString(ddlcountry.SelectedItem.Text);
                        }
                        else
                        {
                            txt = "citi";
                            string national = Convert.ToString(txt_othernationality.Text.First().ToString().ToUpper() + txt_othernationality.Text.Substring(1));
                            nationality = subjectcode(txt, national);
                            Session["nationality"] = Convert.ToString(nationality);
                        }
                    }
                    string community = "";
                    if (ddlcoummunity.SelectedItem.Text != "Others")
                    {
                        community = Convert.ToString(ddlcoummunity.SelectedItem.Value);
                        Session["community"] = Convert.ToString(ddlcoummunity.SelectedItem.Text);
                    }
                    else
                    {
                        txt = "comm";
                        string comm = Convert.ToString(txtCommunity.Text.First().ToString().ToUpper() + txtCommunity.Text.Substring(1));
                        community = subjectcode(txt, comm);
                        Session["community"] = Convert.ToString(community);
                    }
                    string caste = "";
                    if (txt_Caste.Text.Trim() != "")
                    {
                        txt = "caste";
                        string caste1 = Convert.ToString(txt_Caste.Text.First().ToString().ToUpper() + txt_Caste.Text.Substring(1));
                        caste = subjectcode(txt, caste1);
                        Session["caste"] = Convert.ToString(txt_Caste.Text.First().ToString().ToUpper() + txt_Caste.Text.Substring(1));
                    }
                    else
                    {
                        caste = "0";
                        Session["caste"] = "-";
                    }
                    string missionaychild = "";
                    string missinarychilddescription = "";
                    if (ddlreligion.SelectedItem.Text.ToUpper() == "CHRISTIAN")
                    {
                    }
                    string island = "";
                    if (rdbtaany.Checked == true) // jairam
                    {
                        island = "1";
                        Session["island"] = rdbtaany.Text.ToString();
                    }
                    else if (rdbtaanN.Checked == true)
                    {
                        island = "0";
                        Session["island"] = rdbtaanN.Text.ToString();
                    }
                    else
                    {
                        island = "0";
                        Session["island"] = "-";
                    }
                    string ex_service = "";
                    if (rdbexy.Checked == true)
                    {
                        ex_service = "1";
                        Session["ex_service"] = Convert.ToString(rdbexy.Text);
                    }
                    else if (rdbexN.Checked == true)
                    {
                        ex_service = "0";
                        Session["ex_service"] = Convert.ToString(rdbexN.Text);
                    }
                    else
                    {
                        ex_service = "0";
                        Session["ex_service"] = "-";
                    }
                    string isdisable = "";
                    string visuallychallange = "0";
                    string physicallychallange = "0";
                    string learningdisable = "0";
                    string otherdiscription = "";
                    if (RadioButton1.Checked == true)
                    {
                        isdisable = "1";
                        Session["differently"] = Convert.ToString(RadioButton1.Text);
                        if (ddldiferentltyable.SelectedItem.Text != "Select")
                        {
                            if (ddldiferentltyable.SelectedItem.Text != "Others")
                            {
                                if (ddldiferentltyable.SelectedItem.Value == "1")
                                {
                                    visuallychallange = "1";
                                    Session["visuallychallange"] = Convert.ToString(ddldiferentltyable.SelectedItem.Text);
                                }
                                else
                                {
                                    visuallychallange = "0";
                                    Session["visuallychallange"] = "";
                                }
                                if (ddldiferentltyable.SelectedItem.Value == "2")
                                {
                                    physicallychallange = "1";
                                    Session["physicallychallange"] = Convert.ToString(ddldiferentltyable.SelectedItem.Text);
                                }
                                else
                                {
                                    physicallychallange = "0";
                                    Session["physicallychallange"] = "";
                                }
                                if (ddldiferentltyable.SelectedItem.Value == "3")
                                {
                                    learningdisable = "1";
                                    Session["learningdisable"] = Convert.ToString(ddldiferentltyable.SelectedItem.Text);
                                }
                                else
                                {
                                    learningdisable = "0";
                                    Session["learningdisable"] = "";
                                }
                            }
                            else
                            {
                                if (txt_otherdifferentlyable.Text.Trim() != "")
                                {
                                    otherdiscription = txt_otherdifferentlyable.Text;
                                    Session["otherdiscription"] = Convert.ToString(txt_otherdifferentlyable.Text.First().ToString().ToUpper() + txt_otherdifferentlyable.Text.Substring(1));
                                }
                                else
                                {
                                    otherdiscription = "";
                                    Session["otherdiscription"] = "";
                                }
                            }
                        }
                        else
                        {
                            isdisable = "0";
                            Session["differently"] = Convert.ToString(RadioButton1.Text);
                            visuallychallange = "0";
                            Session["visuallychallange"] = "";
                            physicallychallange = "0";
                            Session["physicallychallange"] = "";
                            learningdisable = "0";
                            Session["learningdisable"] = "";
                            otherdiscription = "";
                            Session["otherdiscription"] = "";
                        }
                    }
                    else if (RadioButton2.Checked == true)
                    {
                        isdisable = "0";
                        Session["differently"] = Convert.ToString(RadioButton2.Text);
                        visuallychallange = "0";
                        Session["visuallychallange"] = "";
                        physicallychallange = "0";
                        Session["physicallychallange"] = "";
                        learningdisable = "0";
                        Session["learningdisable"] = "";
                        otherdiscription = "";
                        Session["otherdiscription"] = "";
                    }
                    string firstgenartion = "";
                    if (RadioButton3.Checked == true)
                    {
                        firstgenartion = "1";
                        Session["firstgenartion"] = Convert.ToString(RadioButton3.Text);
                    }
                    else if (RadioButton4.Checked == true)
                    {
                        firstgenartion = "0";
                        Session["firstgenartion"] = Convert.ToString(RadioButton4.Text);
                    }
                    else
                    {
                        firstgenartion = "0";
                        Session["firstgenartion"] = "-";
                    }
                    string Resisdancy = "";
                    if (RadioButton5.Checked == true)
                    {
                        Resisdancy = "1";
                        Session["Resisdancy"] = Convert.ToString(RadioButton5.Text);
                    }
                    else if (RadioButton6.Checked == true)
                    {
                        Resisdancy = "0";
                        Session["Resisdancy"] = Convert.ToString(RadioButton6.Text);
                    }
                    else
                    {
                        Resisdancy = "0";
                        Session["Resisdancy"] = "-";
                    }
                    string distinctionsport = "";
                    string specifysports = "";
                    if (rdbdistinctionsportsYes.Checked == true)
                    {
                        string distinctionsport1 = Convert.ToString(ddldistinctionsports.SelectedItem.Text);
                        if (distinctionsport1 == "Others")
                        {
                            txt = "cocur";
                            string distinctionsport_value = Convert.ToString(txt_sports.Text.First().ToString().ToUpper() + txt_sports.Text.Substring(1));
                            distinctionsport = subjectcode(txt, distinctionsport_value);
                            Session["distinctionsport"] = distinctionsport.ToString();
                            specifysports = Convert.ToString(txt_specify.Text);
                        }
                        else
                        {
                            if (distinctionsport1 != "Select")
                            {
                                distinctionsport = Convert.ToString(ddldistinctionsports.SelectedItem.Value);
                                Session["distinctionsport"] = ddldistinctionsports.SelectedItem.Text.ToString();
                                specifysports = Convert.ToString(txt_specify.Text);
                            }
                            else
                            {
                                distinctionsport = "0";
                                Session["distinctionsport"] = "";
                            }
                        }
                    }
                    else if (rdbdistinctionsportsNo.Checked == true)
                    {
                        distinctionsport = "0";
                        Session["distinctionsport"] = Convert.ToString(rdbdistinctionsportsNo.Text);
                    }
                    string co_curricular = "";
                    string specifyactivites = "";
                    if (rdbextraactivitesYes.Checked == true)
                    {
                        if (DropDownList4.SelectedItem.Text != "Select")
                        {
                            if (DropDownList4.SelectedItem.Text != "Others")
                            {
                                co_curricular = Convert.ToString(DropDownList4.SelectedItem.Value);
                                Session["co_curricular"] = Convert.ToString(DropDownList4.SelectedItem.Text);
                                specifyactivites = Convert.ToString(txt_specifyNcc.Text);
                            }
                            else
                            {
                                txt = "cocur";
                                string co_curricular1 = Convert.ToString(txt_extraactivites.Text.First().ToString().ToUpper() + txt_extraactivites.Text.Substring(1));
                                co_curricular = subjectcode(txt, co_curricular1);
                                Session["co_curricular"] = Convert.ToString(txt_extraactivites.Text.First().ToString().ToUpper() + txt_extraactivites.Text.Substring(1));
                                specifyactivites = Convert.ToString(txt_specifyNcc.Text);
                            }
                        }
                        else if (DropDownList4.SelectedItem.Text.Trim() == "Select") // jairam
                        {
                            co_curricular = "0";
                            Session["co_curricular"] = "-";
                        }
                    }
                    else if (rdbextraactivitesNo.Checked == true)
                    {
                        co_curricular = "0";
                        Session["co_curricular"] = Convert.ToString(rdbextraactivitesNo.Text);
                    }
                    string paddressline1 = Convert.ToString(txt_address1.Text);
                    Session["paddressline1"] = paddressline1.ToString();
                    string paddressline2 = "";
                    if (txt_address2.Text.Trim() != "")
                    {
                        paddressline2 = Convert.ToString(txt_address2.Text);
                    }
                    if (paddressline2.Trim() != "")
                    {
                        Session["paddressline2"] = paddressline2.ToString();
                    }
                    else
                    {
                        Session["paddressline2"] = "-";
                    }
                    string paddressline3 = "";
                    if (txt_address3.Text.Trim() != "")
                    {
                        paddressline3 = Convert.ToString(txt_address3.Text);
                    }
                    if (paddressline3.Trim() != "")
                    {
                        Session["paddressline3"] = paddressline3.ToString();
                    }
                    else
                    {
                        Session["paddressline3"] = "-";
                    }
                    paddressline2 = paddressline2 + "/" + paddressline3;
                    string pcity = "";
                    if (txt_Pcity.Text.Trim() != "")
                    {
                        pcity = Convert.ToString(txt_Pcity.Text.First().ToString().ToUpper() + txt_Pcity.Text.Substring(1));
                        Session["pcity"] = Convert.ToString(txt_Pcity.Text.First().ToString().ToUpper() + txt_Pcity.Text.Substring(1));
                        pcity = subjectcode("city", pcity);
                    }
                    string pstate = "";
                    if (ddlpstate.SelectedItem.Text == "Others")
                    {
                        txt = "state";
                        string ses_value = Convert.ToString(txt_potherstate.Text.First().ToString().ToUpper() + txt_potherstate.Text.Substring(1));
                        pstate = subjectcode(txt, ses_value);
                        Session["pstate"] = Convert.ToString(ses_value);
                    }
                    else if (ddlpstate.SelectedItem.Text == "Select")
                    {
                        pstate = "0";
                        Session["pstate"] = "";
                    }
                    else
                    {
                        pstate = Convert.ToString(ddlpstate.SelectedItem.Value);
                        Session["pstate"] = Convert.ToString(ddlpstate.SelectedItem.Text);
                    }
                    string pcountry = "0";
                    //if (txt_pcountry.Text.Trim() != "")
                    //{
                    //    txt = "coun";
                    //    string pcountry1 = Convert.ToString(txt_pcountry.Text.First().ToString().ToUpper() + txt_pcountry.Text.Substring(1));
                    //    pcountry = pcountry1;// subjectcode(txt, pcountry1);
                    //    Session["pcountry"] = Convert.ToString(txt_pcountry.Text.First().ToString().ToUpper() + txt_pcountry.Text.Substring(1));
                    //}
                    if (ddlpcountry.SelectedItem.Text != "Select")
                    {
                        pcountry = Convert.ToString(ddlpcountry.SelectedItem.Text);
                        txt = "coun";
                        string ccountry1 = pcountry;
                        pcountry = subjectcode(txt, ccountry1);
                    }
                    string ppostelcode = Convert.ToString(txt_postelcode.Text);
                    Session["ppostelcode"] = ppostelcode.ToString();
                    string pmobilenumber = "";
                    Session["pmobilenumber"] = pmobilenumber.ToString();
                    string pemail = "";
                    Session["pemail"] = pemail.ToString();
                    string phonenumber = "";
                    string std = Convert.ToString(txt_std.Text);
                    string phonen = Convert.ToString(txt_phonenumber.Text);
                    phonenumber = std + "-" + phonen;
                    if (std != "" && phonen != "")
                    {
                        Session["phonenumber"] = phonenumber.ToString();
                    }
                    else
                    {
                        phonenumber = "0";
                    }
                    string alterphone = "";
                    if (alterphone.Trim() != "")
                    {
                        Session["alterphone"] = alterphone.ToString();
                    }
                    else
                    {
                        Session["alterphone"] = "-";
                    }
                    string caddressline2 = "";
                    string caddressline3 = "";
                    string ccity = "";
                    string caddressline1 = "";
                    string cstate = "";
                    string cpostelcode = "";
                    string ccountry = "0";
                    string cphonenumber = "";
                    //// Communication Address
                    //if (rdbsameno.Checked == true)
                    //{
                    caddressline1 = Convert.ToString(txt_caddress1.Text);
                    if (txt_caddress2.Text.Trim() != "")
                    {
                        caddressline2 = Convert.ToString(txt_caddress2.Text);
                    }
                    if (txt_caddress3.Text.Trim() != "")
                    {
                        caddressline3 = Convert.ToString(txt_caddress3.Text);
                    }
                    caddressline2 = caddressline2 + "/" + caddressline3;
                    if (txt_ccity.Text.Trim() != "")
                    {
                        ccity = Convert.ToString(txt_ccity.Text.First().ToString().ToUpper() + txt_ccity.Text.Substring(1));
                        ccity = subjectcode("city", ccity);
                    }
                    //if (rdbsameyes.Checked == false)
                    //{
                    //    cstate = pstate;
                    //}
                    //else
                    //{
                    if (ddlcstate.SelectedItem.Text != "Select")
                    {
                        if (ddlcstate.SelectedItem.Text != "Others")
                        {
                            cstate = Convert.ToString(ddlcstate.SelectedItem.Value);
                        }
                        else
                        {
                            txt = "state";
                            string cstate1 = Convert.ToString(txt_cotherstate.Text.First().ToString().ToUpper() + txt_cotherstate.Text.Substring(1));
                            cstate = subjectcode(txt, cstate1);
                        }
                    }
                    //}
                    if (ddlccountry.SelectedItem.Text != "Select")
                    {
                        //if (ddlccountry.SelectedItem.Text != "Others")
                        //{
                        ccountry = Convert.ToString(ddlccountry.SelectedItem.Text);
                        txt = "coun";
                        string ccountry1 = ccountry;
                        ccountry = subjectcode(txt, ccountry1);
                        //ccountry = Convert.ToString(ddlccountry.SelectedItem.Text);
                        //}
                        //else
                        //{
                        //    txt = "coun";
                        //    string ccountry1 = Convert.ToString(txt_ccountry.Text.First().ToString().ToUpper() + txt_ccountry.Text.Substring(1));
                        //    ccountry = subjectcode(txt, ccountry1);
                        //    ccountry = Convert.ToString(txt_ccountry.Text);
                        //}
                    }
                    //if (txt_ccountry.Text.Trim() != "")
                    //{
                    //    string ccountry1 = Convert.ToString(txt_ccountry.Text.First().ToString().ToUpper() + txt_ccountry.Text.Substring(1));
                    //    txt = "coun";
                    //    ccountry = ccountry1;// subjectcode(txt, ccountry1);
                    //}
                    cpostelcode = Convert.ToString(txt_cpostelcode.Text);
                    string cstd = Convert.ToString(txt_cstd.Text);
                    string cphonen = Convert.ToString(txt_cphonenumber.Text);
                    cphonenumber = cstd + "-" + cphonen;
                    //}
                    //else
                    //{
                    //    caddressline1 = paddressline1;
                    //    caddressline2 = paddressline2 + "-" + paddressline3;
                    //    cphonenumber = std + phonen;
                    //    cstate = pstate;
                    //    ccity = pcity;
                    //    ccountry = pcountry;
                    //    cpostelcode = ppostelcode;
                    //}
                    string option2degree = "";
                    string seattype = d2.GetFunction("select TextCode  from textvaltable where TextCriteria  = 'seat' and college_code ='" + ddl_college.SelectedItem.Value + "' order by textval ");
                    //string orginalapplication_number = genearateApplNo(Convert.ToString(ddl_college.SelectedItem.Value), Convert.ToString(ddl_courseone.SelectedItem.Value));
                    Session["Application_No"] = Convert.ToString(txt_appfromno.Text);
                    Session["degree_Code"] = Convert.ToString(ddl_courseone.SelectedItem.Value);
                    string insertquery = "";
                    #region code added by Mohamed Idhris Sheik Dawood -- 21-05-2016
                    //Last modified 24-05-2016
                    //Tab 1
                    string appl_No = txt_appfromno.Text.Trim();
                    //if (IsAppNoAutoGenerate())
                    //{
                    //    appl_No = genearateApplNo(Convert.ToString(ddl_college.SelectedItem.Value), Convert.ToString(ddl_courseone.SelectedItem.Value));
                    //}
                    //string appl_no =d2.GetFunction("select app_formno from applyn where app_no ="+a+"");

                    //Krishna kumar 15march2018
                    string quota = "";

                    if (ddl_quata.SelectedItem.Text != "Select")
                    {
                        if (ddl_quata.SelectedItem.Text != "Others")
                        {
                            quota = Convert.ToString(ddl_quata.SelectedItem.Value);
                        }
                        else
                        {


                            quata();
                            quota = d2.GetFunction("SELECT quotaid from stu_quotaseetinges   where quotaname='" + txt_quata.Text + "' and  settype ='" + ddl_seattype2.SelectedItem.Value + "'   and collegecode ='" + ddlcollege.SelectedItem.Value + "'");

                        }
                    }
                    //Krishna kumar 15march2018
                    Session["Application_No"] = appl_No;
                    string mode = "0";
                    string[] appl_dateAr = txt_appliaddate.Text.Split('/');
                    string appl_date = appl_dateAr[1] + "/" + appl_dateAr[0] + "/" + appl_dateAr[2];
                    string seat_type = ddl_seattype2.SelectedValue;
                    //string stud_Dob = ddldobMonth.SelectedItem.Value + "/" + ddldobdate.SelectedItem.Text + "/" + ddldobYear.SelectedItem.Text;
                    string father_Dob = "01/01/1900";
                    string mother_Dob = "01/01/1900";
                    DateTime mother_DobDt;
                    DateTime.TryParse(mother_Dob, out mother_DobDt);
                    DateTime father_DobDt;
                    DateTime.TryParse(father_Dob, out father_DobDt);
                    DateTime dtChk = new DateTime(0001, 1, 1);
                    if (mother_DobDt == dtChk)
                    {
                        mother_DobDt = Convert.ToDateTime("01/01/1900");
                    }
                    if (father_DobDt == dtChk)
                    {
                        father_DobDt = Convert.ToDateTime("01/01/1900");
                    }
                    string fatherQualify = "0";
                    string motherQualify = "0";
                    if (ddlfaterquali.SelectedIndex != 0)
                    {
                        if (ddlfaterquali.SelectedItem.Text != "Others")
                        {
                            fatherQualify = ddlfaterquali.SelectedItem.Text;
                        }
                        else
                        {
                            fatherQualify = txt_faterquali.Text.Trim();
                        }
                    }
                    if (ddlmotherqual.SelectedIndex != 0)
                    {
                        if (ddlmotherqual.SelectedItem.Text != "Others")
                        {
                            motherQualify = ddlmotherqual.SelectedItem.Text;
                        }
                        else
                        {
                            motherQualify = txt_motherqual.Text.Trim();
                        }
                    }
                    if (motherQualify != "0" && motherQualify != string.Empty)
                    {
                        motherQualify = subjectcode("mqual", motherQualify);
                    }
                    if (fatherQualify != "0" && fatherQualify != string.Empty)
                    {
                        fatherQualify = subjectcode("fqual", fatherQualify);
                    }
                    string part1Lang = "0";
                    string part2Lang = "0";
                    string part3Lang = "0";
                    
                    if (ddlPartLang2.SelectedIndex != 0)
                    {
                        if (ddlPartLang2.SelectedItem.Text != "Others")
                        {
                            part2Lang = ddlPartLang2.SelectedItem.Text;
                        }
                        else
                        {
                            part2Lang = txtLangPart2.Text.Trim();
                        }
                    }
                    if (ddlPartLang3.SelectedIndex != 0)
                    {
                        if (ddlPartLang3.SelectedItem.Text != "Others")
                        {
                            part3Lang = ddlPartLang3.SelectedItem.Text;
                        }
                        else
                        {
                            part3Lang = txtLangPart3.Text.Trim();
                        }
                    }
                    if (part1Lang != "0" && part1Lang != string.Empty)
                    {
                        part1Lang = subjectcode("plang", part1Lang);
                    }
                    if (part2Lang != "0" && part2Lang != string.Empty)
                    {
                        part2Lang = subjectcode("plang", part2Lang);
                    }
                    if (part3Lang != "0" && part3Lang != string.Empty)
                    {
                        part3Lang = subjectcode("plang", part3Lang);
                    }

                    //Added By Saranyadevi 22.2.2018
                    string scholarship = "";
                    string subscholarship = "";
                    if (ddlscholarship.SelectedItem.Text != "Select")
                    {
                        if (ddlscholarship.SelectedItem.Text != "Others")
                        {
                            scholarship = Convert.ToString(ddlscholarship.SelectedItem.Value);
                            Session["scholarship_category"] = Convert.ToString(ddlscholarship.SelectedItem.Text);
                        }
                        else
                        {
                            txt = "schol";
                            string scholar = Convert.ToString(txt_subscholar.Text.First().ToString().ToUpper() + txt_subscholar.Text.Substring(1));
                            if (scholar.Trim() != "")
                            {
                                scholarship = subjectcode(txt, scholar);
                                Session["scholarship_category"] = Convert.ToString(scholarship);
                            }
                        }
                    }
                    if (subscholarship.Trim() == "")
                    {
                        subscholarship = "0";
                    }
                    //================end
                    //string maritalStat = "";
                    string studIdMark = txtIdMark1.Text.Trim() + ";" + txtIdMark2.Text.Trim();
                    //Tab 2
                    //Ex-Service 
                    byte isExServ = rdbexy.Checked ? (byte)1 : (byte)0;
                    string exservRank = string.Empty;
                    string exservPlace = string.Empty;
                    string exservNo = string.Empty;
                    if (isExServ == 1)
                    {
                        exservRank = txtExservRank.Text.Trim();
                        exservPlace = txtExservPlace.Text.Trim();
                        exservNo = txtExservNum.Text.Trim();
                    }
                    byte isBloodDonor = rdb_bloodyes.Checked ? (byte)1 : (byte)0;
                    byte isMissionChild = (byte)rblMissionChild.SelectedIndex;
                    isMissionChild = isMissionChild == 0 ? (byte)1 : (byte)0;
                    byte isReserveCaste = (byte)rblReservCast.SelectedIndex;
                    isReserveCaste = isReserveCaste == 0 ? (byte)1 : (byte)0;
                    byte isEconomicBack = (byte)rblEcoBack.SelectedIndex;
                    isEconomicBack = isEconomicBack == 0 ? (byte)1 : (byte)0;
                    byte isParentOldStu = (byte)rblparentOld.SelectedIndex;
                    isParentOldStu = isParentOldStu == 0 ? (byte)1 : (byte)0;
                    byte isTuitFeeWaivr = (byte)rblFeeWaiver.SelectedIndex;
                    isTuitFeeWaivr = isTuitFeeWaivr == 0 ? (byte)1 : (byte)0;
                    //Driving License
                    byte haveDrivLicens = (byte)rblDrivLic.SelectedIndex;
                    haveDrivLicens = haveDrivLicens == 0 ? (byte)1 : (byte)0;
                    string drivLicenseNo = string.Empty;
                    if (haveDrivLicens == 1)
                        drivLicenseNo = txtDrivLic.Text.Trim().ToUpper();
                    //Insurance
                    byte haveInsurance = (byte)rblInsurance.SelectedIndex;
                    haveInsurance = haveInsurance == 0 ? (byte)1 : (byte)0;
                    double insAmt = 0;
                    string insBy = string.Empty;
                    string insNom = string.Empty;
                    string insNomRel = string.Empty;
                    if (haveInsurance == 1)
                    {
                        if (ddlInsureNominee.SelectedIndex == 3)
                        {
                            insNomRel = txtInsureRelat.Text.Trim();
                        }
                        else
                        {
                            insNomRel = ddlInsureNominee.SelectedItem.Text;
                        }
                        double.TryParse(txtInsureAmt.Text, out insAmt);
                        insNom = txtInsureNominee.Text.Trim();
                        insBy = txtInsureBy.Text.Trim();
                    }
                    byte haveStfChild = (byte)rdbstfChild.SelectedIndex;
                    haveStfChild = haveStfChild == 0 ? (byte)1 : (byte)0;
                    string StaffApplID = string.Empty;
                    byte MyStfChild = 0;
                    string MyStfApplID = string.Empty;
                    if (haveStfChild == 1 && Convert.ToString(ddlStfDet.SelectedItem.Text.Trim()) != "Select" && ddlStfDet.SelectedIndex != 0)
                    {
                        StaffApplID = Convert.ToString(ddlStfDet.SelectedItem.Value);
                        string TestStr = d2.GetFunction(" select appl_name from staff_appl_master where appl_id='" + StaffApplID + "' and college_code='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "'");
                        if (!String.IsNullOrEmpty(TestStr) && TestStr.Trim() != "0")
                        {
                            MyStfChild = 1;
                            MyStfApplID = StaffApplID;
                        }
                    }
                    if (MyStfApplID == string.Empty)
                        MyStfApplID = "0";
                    #endregion
                    //string appno = d2.GetFunction("select app_no from applyn where app_formno ='" + appl_No + "'");
                    //if (appno != "0")
                    //{
                    //    TextBox3.Text = appno;
                    //}  
                    //delsi2501SV
                    string temp_appno = string.Empty;
                    string deg_code = string.Empty;
                    string temp_degCode = string.Empty;
                    string app_fromNum = string.Empty;
                    if (!String.IsNullOrEmpty(Convert.ToString(ViewState["appnumber"])))
                        temp_appno = Convert.ToString(ViewState["appnumber"]);
                    if (!String.IsNullOrEmpty(Convert.ToString(ViewState["degreeCode"])))
                        temp_degCode = Convert.ToString(ViewState["degreeCode"]);

                    if (txt_appfromno.Text != temp_appno && temp_appno != "")
                    {
                        app_fromNum = temp_appno;

                    }
                    else
                    {
                        app_fromNum = txt_appfromno.Text;
                    }
                    if (ddl_courseone.SelectedItem.Value != temp_degCode && temp_degCode != "")
                    {
                        deg_code = temp_degCode;
                    }
                    else
                    {
                        deg_code = ddl_courseone.SelectedItem.Value;

                    }
                    //delsi

                    //****added by mullai
                    string SecondLang = string.Empty;
                    string ThirdLang = string.Empty;
                    if (!string.IsNullOrEmpty(part2Lang))
                        SecondLang = ",SecondLang=" + part2Lang + "";
                    if (!string.IsNullOrEmpty(part3Lang))
                        ThirdLang = ", ThirdLang=" + part3Lang + "";
                    ////****

                    string app_no = "";

                    //app_no = d2.GetFunction("select app_no from applyn where app_formno='" + txt_appfromno.Text + "' and degree_code='" + ddl_courseone.SelectedItem.Value + "' ");//delsi2501
                    app_no = dirAcess.selectScalarString("if exists(" + "select app_no from applyn where app_formno='" + txt_appfromno.Text + "' and degree_code='" + ddl_courseone.SelectedItem.Value + "')" + "select app_no from applyn where app_formno='" + txt_appfromno.Text + "'and degree_code='" + ddl_courseone.SelectedItem.Value + "'" + " else select app_no from applyn where app_formno='" + temp_appno + "' and degree_code='" + deg_code + "' ");

                    insertquery = "update  applyn set IsConfirm='1', app_formno='" + txt_appfromno.Text + "',date_applied='" + appl_date + "',stud_name='" + Convert.ToString(Student_fullname).ToUpper() + "',sex='" + Convert.ToString(sex) + "',parent_name='" + parentsname + "',dob='" + stud_Dob + "',parent_occu='" + occupation + "',mother_tongue='" + mothertoung + "',religion='" + religion + "',citizen='" + nationality + "',community='" + community + "',caste='" + caste + "',parent_addressC='" + paddressline1 + "',Streetc='" + paddressline2 + "',Cityc='" + pcity + "',parent_statec='" + pstate + "',Countryc='" + pcountry + "',parent_pincodec='" + ppostelcode + "',Student_Mobile='" + pmobilenumber + "',StuPer_Id='" + pemail + "',parent_phnoc='" + phonenumber + "',alter_mobileno='" + alterphone + "',parent_addressP='" + caddressline1 + "',Streetp='" + caddressline2 + "',cityp='" + ccity + "',parent_statep='" + cstate + "',Countryp='" + ccountry + "',parent_pincodep='" + cpostelcode + "',parent_phnop='" + cphonenumber + "',degree_code='" + ddl_courseone.SelectedItem.Value + "',batch_year='" + ddlbatch2.SelectedValue + "',college_code='" + ddl_college.SelectedItem.Value + "',SubCaste='" + subreligion + "',isdisable='" + isdisable + "' ,isdisabledisc='" + otherdiscription + "',islearningdis='" + learningdisable + "',missionarydisc='" + missinarychilddescription + "',MissionaryChild='" + isMissionChild + "',seattype='" + seat_type + "',current_semester='" + 1 + "',parent_income='" + fatheranualincome + "',parentF_Mobile='" + fathercontactno + "',emailp='" + fatheremail + "',mother='" + mathername + "',motherocc='" + motheroccupation + "',mIncome='" + motherincome + "',parentM_Mobile='" + mothercontectno + "',emailM='" + motheremail + "',guardian_name='" + guardianame + "',guardian_mobile='" + guardiancontactno + "',emailg='" + guardianemail + "',partI_Language='" + part1Lang + "',bldgrp='" + bloodgroup + "',place_birth='" + placeofbirth + "',Aadharcard_no='" + Aadharcardno + "',Alternativedegree_code='" + option2degree + "',TamilOrginFromAndaman='" + island + "',IsExService='" + ex_service + "',handy='" + physicallychallange + "',visualhandy='" + visuallychallange + "',first_graduate='" + firstgenartion + "',CampusReq='" + Resisdancy + "',DistinctSport='" + distinctionsport + "',co_curricular='" + co_curricular + "', fatherdob='" + father_DobDt + "', motherdob='" + mother_DobDt + "', ExsRank='" + exservRank + "', ExsNumber='" + exservNo + "', ReserveCategory='" + isReserveCaste + "', EconBackword='" + isEconomicBack + "' " + SecondLang + " " + ThirdLang + ", ExSPlace='" + exservPlace + "', tutionfee_waiver=" + isTuitFeeWaivr + ", isdonar=" + isBloodDonor + ", mQualification=" + motherQualify + ", fqualification=" + fatherQualify + ", idmark='" + studIdMark + "', Insurance_Amount= " + insAmt + ", Insurance_Nominee='" + insNom + "', parentoldstud=" + isParentOldStu + ", Driving_details='" + drivLicenseNo + "', IsDrivingLic='" + haveDrivLicens + "' ,IsInsurance ='" + haveInsurance + "',Insurance_InsBy='" + insBy + "', Insurance_NominRelation='" + insNomRel + "',mode=" + mode + ",StudHeight='" + stud_height + "',StudWeight='" + stud_weight + "',EMIS_Number='" + EMIS_No + "' ,scholarship_category='" + scholarship + "' ,quota='" + quota + "' , parentF_alterMobile='" + fathercontactno2 + "' where app_formno='" + app_fromNum + "' and degree_code='" + deg_code + "'";

                    insertquery = insertquery + "  update Registration set Batch_Year='" + ddlbatch2.SelectedValue + "' ,college_code='" + ddl_college.SelectedItem.Value + "',degree_code='" + ddl_courseone.SelectedItem.Value + "',Stud_Name='" + Convert.ToString(Student_fullname).ToUpper() + "',mode='" + mode + "',Current_Semester='" + 1 + "',Is_Stud_Staff='" + MyStfChild + "',staff_appl_id='" + MyStfApplID + "' where App_No='" + app_no + "'";
                    int insert = d2.update_method_wo_parameter(insertquery, "Text");

                    if (insert > 0)
                    {
                        if (app_no != "" && app_no != "0")//delsi0103
                        {
                            if (ViewState["studentimage"] != "0" && ViewState["size"] != "")
                            {
                                byte[] photoid = (byte[])(ViewState["studentimage"]);
                                int size = Convert.ToInt32(ViewState["size"]);

                                PhotoUpload("photo", app_no, size, photoid);

                            }
                            if (ViewState["fsize"] != "" && ViewState["fatherimage"] != "")
                            {
                                byte[] photoid = (byte[])(ViewState["fatherimage"]);
                                int size = Convert.ToInt32(ViewState["fsize"]);

                                PhotoUpload("f_photo", app_no, size, photoid);
                            }
                            if (ViewState["motherimage"] != "" && ViewState["msize"] != "")
                            {
                                byte[] photoid = (byte[])(ViewState["motherimage"]);
                                int size = Convert.ToInt32(ViewState["msize"]);

                                PhotoUpload("m_photo", app_no, size, photoid);
                            }
                            if (ViewState["gaudianimage"] != "" && ViewState["gsize"] != "")
                            {
                                byte[] photoid = (byte[])(ViewState["gaudianimage"]);
                                int size = Convert.ToInt32(ViewState["gsize"]);

                                PhotoUpload("g_photo", app_no, size, photoid);
                            }
                            loadimage(app_no);

                        }

                    }


                   
                    if (insert > 0)
                    {
                        if (temp_appno != "")
                        {
                            if (SendSmsAfterSave())
                            {
                                string user_id = "";
                                string Msg = "You have registered successfully. Please quote Your Application ID (Application Number) is : " + app_fromNum + " for future reference";
                                string Mobile_no = Convert.ToString(Session["pmobilenumber"]);
                                string ssr = "select * from Track_Value where college_code='" + Convert.ToString(ddl_college.SelectedItem.Value) + "'";
                                ds.Clear();
                                ds = d2.select_method_wo_parameter(ssr, "Text");
                                if (ds.Tables[0].Rows.Count > 0)
                                {
                                    user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
                                }
                                int d = d2.send_sms(user_id, Convert.ToString(ddl_college.SelectedItem.Value), usercode, Mobile_no, Msg, "0");
                            }

                        }

                    }
                    #region Additional Information --- Idhris
                    if (insert > 0)
                    {
                        //Update Academic Details
                        //string delAcaQ = "delete from perv_marks_history where app_no=" + app_no + " delete from Stud_prev_details where app_no=" + app_no + "";
                        string delAcaQ = "delete from perv_marks_history from Stud_prev_details s where s.course_entno=perv_marks_history.course_entno and  s.app_no=" + app_no + "  and isnull(markPriority,1)<>1 delete from Stud_prev_details where app_no=" + app_no + "  and isnull(markPriority,1)<>1";
                        d2.update_method_wo_parameter(delAcaQ, "Text");
                        for (int rowCnt = 1; rowCnt < spreadAcaDet.Rows.Count; rowCnt++)
                        {
                            string courseid = "0";
                            string courseName = string.Empty;
                            string branchGrpId = "0";
                            string branchGrp = string.Empty;
                            string insName = string.Empty;
                            string boardUnivId = "0";
                            string boardUniv = string.Empty;
                            string secMarks = string.Empty;
                            string maxMarks = string.Empty;
                            courseName = spreadAcaDet.Sheets[0].Cells[rowCnt, 2].Text;
                            courseid = Convert.ToString(spreadAcaDet.Sheets[0].Cells[rowCnt, 2].Tag);
                            branchGrp = spreadAcaDet.Sheets[0].Cells[rowCnt, 3].Text;
                            branchGrpId = Convert.ToString(spreadAcaDet.Sheets[0].Cells[rowCnt, 3].Tag);
                            insName = spreadAcaDet.Sheets[0].Cells[rowCnt, 4].Text;
                            boardUniv = spreadAcaDet.Sheets[0].Cells[rowCnt, 5].Text;
                            boardUnivId = Convert.ToString(spreadAcaDet.Sheets[0].Cells[rowCnt, 5].Tag);
                            secMarks = spreadAcaDet.Sheets[0].Cells[rowCnt, 6].Text;
                            maxMarks = spreadAcaDet.Sheets[0].Cells[rowCnt, 7].Text;
                            double perc = 0;
                            try
                            {
                                double secMark = 0;
                                double.TryParse(secMarks, out secMark);
                                secMarks = secMark.ToString();
                                double maxMark = 0;
                                double.TryParse(maxMarks, out maxMark);
                                maxMarks = maxMark.ToString();
                                if (maxMark > 0)
                                    perc = (secMark / maxMark) * 100;
                            }
                            catch { perc = 0; }
                            byte Vocational_stream = rbVocation.Checked ? (byte)1 : (byte)0;
                            string updAcaQ = "insert into Stud_prev_details (app_no, course_code, Institute_name, percentage, university_code, totalmark,securedmark, branch_code,Vocational_stream,markPriority) values (" + app_no + ", " + courseid + ", '" + insName + "', " + perc + ", " + boardUnivId + ", " + maxMarks + "," + secMarks + ", " + branchGrpId + ",'" + Vocational_stream + "'," + (rowCnt + 1) + ")";
                            d2.update_method_wo_parameter(updAcaQ, "Text");
                        }
                        //Update Bank Details
                        string delBnkQ = "delete from studbankdet where app_no=" + app_no + "";
                        d2.update_method_wo_parameter(delBnkQ, "Text");
                        for (int rowCnt = 1; rowCnt < spreadBankDet.Rows.Count; rowCnt++)
                        {
                            string bnkid = "0";
                            string bnk = string.Empty;
                            string accForId = "0";
                            string accFor = string.Empty;
                            string accNo = string.Empty;
                            string debitNo = string.Empty;
                            string ifscode = string.Empty;
                            string branch = string.Empty;
                            accFor = spreadBankDet.Sheets[0].Cells[rowCnt, 2].Text;
                            accForId = Convert.ToString(spreadBankDet.Sheets[0].Cells[rowCnt, 2].Tag);
                            accNo = spreadBankDet.Sheets[0].Cells[rowCnt, 3].Text;
                            debitNo = spreadBankDet.Sheets[0].Cells[rowCnt, 4].Text;
                            ifscode = spreadBankDet.Sheets[0].Cells[rowCnt, 5].Text;
                            bnk = spreadBankDet.Sheets[0].Cells[rowCnt, 6].Text;
                            bnkid = Convert.ToString(spreadBankDet.Sheets[0].Cells[rowCnt, 6].Tag);
                            branch = spreadBankDet.Sheets[0].Cells[rowCnt, 7].Text;
                            string updBnkQ = "insert into studbankdet (app_no, AccFor, AccNo, DebitCardNo, IFSCCode, BankName, Branch ) values (" + app_no + ", '" + accForId + "', '" + accNo + "', '" + debitNo + "', '" + ifscode + "', '" + bnkid + "', '" + branch + "')";
                            d2.update_method_wo_parameter(updBnkQ, "Text");
                        }
                        //Update Relationship Details
                        string delRelQ = "delete from stud_relation where application_no='" + app_no + "'";
                        d2.update_method_wo_parameter(delRelQ, "Text");
                        for (int rowCnt = 1; rowCnt < spreadRelation.Rows.Count; rowCnt++)
                        {
                            string stafStudId = "0";
                            string stafStudName = string.Empty;
                            string batch = "0";
                            string degDeptId = "0";
                            string degDept = string.Empty;
                            string branCatId = "0";
                            string branCat = string.Empty;
                            string relName = string.Empty;
                            string relId = string.Empty;
                            string relRelship = string.Empty;
                            string phoneno = string.Empty;
                            string collName = string.Empty;
                            string collCode = "0";
                            relName = spreadRelation.Sheets[0].Cells[rowCnt, 2].Text;
                            relId = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 2].Tag);
                            degDept = spreadRelation.Sheets[0].Cells[rowCnt, 3].Text.Split('-')[0];
                            branCat = spreadRelation.Sheets[0].Cells[rowCnt, 3].Text.Split('-')[1];
                            degDeptId = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 3].Tag).Split('-')[0];
                            branCatId = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 3].Tag).Split('-')[1];
                            relRelship = spreadRelation.Sheets[0].Cells[rowCnt, 4].Text;
                            phoneno = spreadRelation.Sheets[0].Cells[rowCnt, 5].Text;
                            batch = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 5].Tag);
                            collName = spreadRelation.Sheets[0].Cells[rowCnt, 6].Text;
                            collCode = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 6].Tag);
                            stafStudName = spreadRelation.Sheets[0].Cells[rowCnt, 7].Text;
                            stafStudId = Convert.ToString(spreadRelation.Sheets[0].Cells[rowCnt, 7].Tag);
                            string relNameId = relName + "-" + relId;
                            string courseId = degDeptId;
                            if (stafStudId == "0")
                            {
                                courseId = branCatId;
                            }
                            string updRelQ = "insert into stud_relation (application_no, name_roll, course, relationship, isstaff, college_code, ph) values ('" + app_no + "', '" + relNameId + "', '" + courseId + "', '" + relRelship + "', " + stafStudId + ", " + collCode + ", " + phoneno + ")";
                            d2.update_method_wo_parameter(updRelQ, "Text");
                        }
                        //Referred by
                        byte referredByType = 0;
                        string updRefbyQ = string.Empty;
                        if (rblReferredBy.SelectedIndex == 0)
                        {
                            //Direct
                            referredByType = Convert.ToByte(rblReferredBy.SelectedIndex);
                            updRefbyQ = "update applyn set direct_refer=0 where app_no ='" + app_no + "'";
                        }
                        else if (rblReferredBy.SelectedIndex == 1)
                        {
                            //Referred By Staff
                            referredByType = Convert.ToByte(rblReferredBy.SelectedIndex);
                            string staffid = "0";
                            if (txtname_staff.Items.Count > 0)
                                staffid = txtname_staff.SelectedValue;
                            if (txtname_staff.Items.Count > 0 && staffid != string.Empty)
                            {
                                updRefbyQ = "update applyn set direct_refer=1,refer_stcode='" + staffid + "' where app_no ='" + app_no + "'";
                            }
                        }
                        else if (rblReferredBy.SelectedIndex == 2)
                        {
                            string refapp_no = "";
                            if (ddl_ReferStudent.Items.Count > 0)
                                refapp_no = ddl_ReferStudent.SelectedValue;
                            if (ddl_ReferStudent.Items.Count > 0 && refapp_no != string.Empty)
                            {
                                updRefbyQ = "update applyn set direct_refer=3,refer_stcode='" + refapp_no + "' where app_no ='" + app_no + "'";
                            }
                        }
                        else
                        {
                            //Referred by Others
                            referredByType = Convert.ToByte(rblReferredBy.SelectedIndex);
                            string consName = string.Empty;
                            string agenName = string.Empty;
                            string amtRs = "0";
                            string address = string.Empty;
                            string city = string.Empty;
                            string district = string.Empty;
                            string state = string.Empty;
                            string phoneno = string.Empty;
                            string emailid = string.Empty;
                            amtRs = txtRefAmt.Text.Trim();
                            address = txtRefAddres.Text.Trim();
                            city = txtRefCity.Text.Trim();
                            district = txtRefDist.Text.Trim();
                            phoneno = txtRefPhone.Text.Trim();
                            emailid = txtRefEmail.Text.Trim();
                            if (ddlrefConsName.SelectedIndex != 0)
                            {
                                if (ddlrefConsName.SelectedItem.Text != "Others")
                                {
                                    consName = ddlrefConsName.SelectedItem.Text;
                                }
                                else
                                {
                                    consName = txtrefConsName.Text.Trim();
                                }
                                if (consName != string.Empty)
                                {
                                    consName = subjectcode("ConsN", consName);
                                }
                            }
                            if (ddlRefAgent.SelectedIndex != 0)
                            {
                                if (ddlRefAgent.SelectedItem.Text != "Others")
                                {
                                    agenName = ddlRefAgent.SelectedItem.Text;
                                }
                                else
                                {
                                    agenName = txtRefAgent.Text.Trim();
                                }
                                if (agenName != string.Empty)
                                {
                                    agenName = subjectcode("Agnt", agenName);
                                }
                            }
                            if (ddlRefState.SelectedIndex != 0)
                            {
                                if (ddlRefState.SelectedItem.Text != "Others")
                                {
                                    state = ddlRefState.SelectedItem.Text;
                                }
                                else
                                {
                                    state = txtRefState.Text.Trim();
                                }
                                if (state != string.Empty)
                                {
                                    state = subjectcode("state", state);
                                }
                            }
                            if (consName != string.Empty)
                            {
                                updRefbyQ = "update applyn set direct_refer=2, refer_name='" + consName + "',  refer_phoneno='" + phoneno + "', refer_email='" + emailid + "', refer_amount='" + amtRs + "', refer_agent='" + agenName + "', agent_address='" + address + "', agent_city='" + city + "', agent_district='" + district + "', agent_state='" + state + "' where app_no ='" + app_no + "'";
                            }
                        }
                        if (updRefbyQ != string.Empty)
                        {
                            d2.update_method_wo_parameter(updRefbyQ, "Text");
                        }
                    }
                    #endregion
                    string fathertamilname = "";
                    if (txt_fathernametamil.Text.Trim() != "")
                    {
                        fathertamilname = Convert.ToString(txt_fathernametamil.Text);
                    }
                    // ,'" + txtfirstnametamil.Text + "-" + txtlastnametamil.Text + "','" + txt_fathernametamil.Text + "'
                    certificatesave(app_no);
                    string updatequery = " update applyn set parent_nametamil=@fathertamilname where app_no ='" + app_no + "'";
                    SqlCommand cmd = new SqlCommand(updatequery, mysql);
                    SqlParameter uploadedsubject_name = null;
                    uploadedsubject_name = new SqlParameter("@fathertamilname", SqlDbType.NVarChar, 100);
                    uploadedsubject_name.Value = fathertamilname;
                    cmd.Parameters.Add(uploadedsubject_name);
                    mysql.Close();
                    mysql.Open();
                    cmd.ExecuteNonQuery();
                    mysql.Close();
                    Session["Appl_number"] = Convert.ToString(app_no);
                    //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
                    //{
                    //    string schoolorcollege = "";
                    //    if (txt_Name_of_school.Text.Trim() != "")
                    //    {
                    //        schoolorcollege = Convert.ToString(txt_Name_of_school.Text.First().ToString().ToUpper() + txt_Name_of_school.Text.Substring(1));
                    //        if (schoolorcollege.Trim() != "")
                    //        {
                    //            Session["schoolorcollege"] = schoolorcollege.ToString();
                    //        }
                    //        else
                    //        {
                    //            Session["schoolorcollege"] = "-";
                    //        }
                    //    }
                    //    string schoolorcollegelocation = "";
                    //    if (txt_location_scholl.Text.Trim() != "")
                    //    {
                    //        schoolorcollegelocation = Convert.ToString(txt_location_scholl.Text.First().ToString().ToUpper() + txt_location_scholl.Text.Substring(1));
                    //        if (schoolorcollegelocation.Trim() != "")
                    //        {
                    //            Session["schoolorcollegelocation"] = schoolorcollegelocation.ToString();
                    //        }
                    //        else
                    //        {
                    //            Session["schoolorcollegelocation"] = "-";
                    //        }
                    //    }
                    //    string qualifyingexam = "";
                    //    if (ddlexaminationug.SelectedItem.Text.Trim() != "Others")
                    //    {
                    //        qualifyingexam = Convert.ToString(ddlexaminationug.SelectedItem.Value);
                    //        Session["qualifyingexam"] = Convert.ToString(ddlexaminationug.SelectedItem.Text);
                    //    }
                    //    else
                    //    {
                    //        string qulify = Convert.ToString(txt_qulifyexam.Text);
                    //        txt = "cours";
                    //        qualifyingexam = subjectcode(txt, qulify);
                    //        Session["qualifyingexam"] = Convert.ToString(txt_qulifyexam.Text);
                    //    }
                    //    string bordoruniversity = "0";
                    //    if (txt_board.Text.Trim() != "")
                    //    {
                    //        txt = "unive";
                    //        string bordoruniversity1 = Convert.ToString(txt_board.Text.ToString().ToUpper());
                    //        bordoruniversity = subjectcode(txt, bordoruniversity1);
                    //        Session["bordoruniversity"] = Convert.ToString(txt_board.Text.ToString().ToUpper());
                    //    }
                    //    string qualifystate = "";
                    //    if (ddlstatequalify.SelectedItem.Text != "Select")
                    //    {
                    //        if (ddlstatequalify.SelectedItem.Text == "Others")
                    //        {
                    //            txt = "state";
                    //            string select_state = Convert.ToString(txt_otherstatequalify.Text.First().ToString().ToUpper() + txt_otherstatequalify.Text.Substring(1));
                    //            qualifystate = subjectcode(txt, select_state);
                    //            Session["Qualifyingsate"] = Convert.ToString(txt_otherstatequalify.Text.First().ToString().ToUpper() + txt_otherstatequalify.Text.Substring(1));
                    //        }
                    //        else
                    //        {
                    //            qualifystate = Convert.ToString(ddlstatequalify.SelectedItem.Value);
                    //            Session["Qualifyingsate"] = Convert.ToString(ddlstatequalify.SelectedItem.Text);
                    //        }
                    //    }
                    //    string mediumofstudy = "";
                    //    string mediumofstudy1 = Convert.ToString(ddlmediumstudy.SelectedItem.Text);
                    //    if (mediumofstudy1 == "Others")
                    //    {
                    //        txt = "PLang";
                    //        string subjmedium = Convert.ToString(txt_mediumstudy.Text.First().ToString().ToUpper() + txt_mediumstudy.Text.Substring(1));
                    //        mediumofstudy = subjectcode(txt, subjmedium);
                    //        Session["mediumofstudy"] = Convert.ToString(txt_mediumstudy.Text.First().ToString().ToUpper() + txt_mediumstudy.Text.Substring(1));
                    //    }
                    //    else if (mediumofstudy1 == "Select")
                    //    {
                    //        mediumofstudy = "0";
                    //        Session["mediumofstudy"] = "";
                    //    }
                    //    else
                    //    {
                    //        mediumofstudy = Convert.ToString(ddlmediumstudy.SelectedItem.Value);
                    //        Session["mediumofstudy"] = Convert.ToString(ddlmediumstudy.SelectedItem.Text);
                    //    }
                    //    string mediumofstudyXII = "";
                    //    string mediumofstudy13 = Convert.ToString(ddlmediumofstudyXII.SelectedItem.Text);
                    //    if (mediumofstudy13 == "Others")
                    //    {
                    //        txt = "PLang";
                    //        string subjmedium = Convert.ToString(txt_ddlmediumofStudyXII.Text.First().ToString().ToUpper() + txt_ddlmediumofStudyXII.Text.Substring(1));
                    //        mediumofstudyXII = subjectcode(txt, subjmedium);
                    //        Session["mediumofstudyXII"] = Convert.ToString(txt_ddlmediumofStudyXII.Text.First().ToString().ToUpper() + txt_ddlmediumofStudyXII.Text.Substring(1));
                    //    }
                    //    else if (mediumofstudy13 == "Select")
                    //    {
                    //        mediumofstudyXII = "0";
                    //        Session["mediumofstudyXII"] = "";
                    //    }
                    //    else
                    //    {
                    //        mediumofstudyXII = Convert.ToString(ddlmediumofstudyXII.SelectedItem.Value);
                    //        Session["mediumofstudyXII"] = Convert.ToString(ddlmediumofstudyXII.SelectedItem.Text);
                    //    }
                    //    DataSet dsgrade = new DataSet();
                    //    string marksorgrade = "";
                    //    if (rbMarksGrade.SelectedIndex == 0)
                    //    {
                    //        marksorgrade = "Marks";
                    //    }
                    //    else
                    //    {
                    //        marksorgrade = "Grade";
                    //        string gradquery = " select *  from Grade_Master where College_Code ='" + ddl_college.SelectedItem.Value + "' and Degree_Code ='" + Convert.ToString(Session["degree_Code"]) + "' and batch_year ='" + System.DateTime.Now.ToString("yyyy") + "'";
                    //        dsgrade.Clear();
                    //        dsgrade = d2.select_method_wo_parameter(gradquery, "Text");
                    //    }
                    //    Session["marksorgrade"] = Convert.ToString(marksorgrade);
                    //    string subjectwisemark = "";
                    //    double mainmidmark = 0;
                    //    int countsubject = 0;
                    //    DataView dvnew = new DataView();
                    //    string isgrade = "";
                    //    string Language1 = "";
                    //    string Language2 = "";
                    //    string lang1_subno = "";
                    //    string lang2_subno = "";
                    //    //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
                    //    //{
                    //    //    if (UgGrid.Rows.Count > 0)
                    //    //    {
                    //    //        string value = "subje";
                    //    //        for (int mark = 0; mark < UgGrid.Rows.Count; mark++)
                    //    //        {
                    //    //            string subjectname = "";
                    //    //            if (mark != 1)
                    //    //            {
                    //    //                string subject_name = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
                    //    //                string lang_age1 = Convert.ToString((UgGrid.Rows[mark].FindControl("lblsno") as Label).Text);
                    //    //                if (subject_name == "Others")
                    //    //                {
                    //    //                    string subjectname1 = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
                    //    //                    if (subjectname1.Trim() != "")
                    //    //                    {
                    //    //                        if (lang_age1 == "Language1")
                    //    //                        {
                    //    //                            Language1 = subjectname1;
                    //    //                            lang1_subno = subjectcode(value, Language1);
                    //    //                            subjectname = lang1_subno;
                    //    //                        }
                    //    //                        else if (lang_age1 == "Language2")
                    //    //                        {
                    //    //                            Language2 = subjectname1;
                    //    //                            lang2_subno = subjectcode(value, Language2);
                    //    //                            subjectname = lang2_subno;
                    //    //                        }
                    //    //                        else
                    //    //                        {
                    //    //                            subjectname = subjectcode(value, subjectname1);
                    //    //                        }
                    //    //                    }
                    //    //                }
                    //    //                else
                    //    //                {
                    //    //                    string subjectname_1 = Convert.ToString((UgGrid.Rows[mark].FindControl("ddlugsubject") as DropDownList).SelectedItem.Text);
                    //    //                    subjectname = subjectcode(value, subjectname_1);
                    //    //                    if (lang_age1 == "Language1")
                    //    //                    {
                    //    //                        lang1_subno = subjectname;
                    //    //                    }
                    //    //                    else if (lang_age1 == "Language2")
                    //    //                    {
                    //    //                        lang2_subno = subjectname;
                    //    //                    }
                    //    //                }
                    //    //            }
                    //    //            else if (mark == 1)
                    //    //            {
                    //    //                string lang_age1 = Convert.ToString((UgGrid.Rows[mark].FindControl("lblsno") as Label).Text);
                    //    //                string subjectname1 = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_subject56") as TextBox).Text);
                    //    //                if (subjectname1.Trim() != "")
                    //    //                {
                    //    //                    if (lang_age1 == "Language1")
                    //    //                    {
                    //    //                        Language1 = subjectname1;
                    //    //                        lang1_subno = subjectcode(value, Language1);
                    //    //                        subjectname = lang1_subno;
                    //    //                    }
                    //    //                    else if (lang_age1 == "Language2")
                    //    //                    {
                    //    //                        Language2 = subjectname1;
                    //    //                        lang2_subno = subjectcode(value, Language2);
                    //    //                        subjectname = lang2_subno;
                    //    //                    }
                    //    //                    else
                    //    //                    {
                    //    //                        subjectname = subjectcode(value, subjectname1);
                    //    //                    }
                    //    //                }
                    //    //            }
                    //    //            // string subjectcode = Convert.ToString((Marksgrid.Rows[mark].FindControl("lblsubcode") as Label).Text);
                    //    //            string finalmarkandgrade = "";
                    //    //            if (rbMarksGrade.SelectedIndex == 0)
                    //    //            {
                    //    //                isgrade = "0";
                    //    //                finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmagrs") as TextBox).Text);
                    //    //            }
                    //    //            else
                    //    //            {
                    //    //                isgrade = "1";
                    //    //                finalmarkandgrade = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ug_grade") as TextBox).Text);
                    //    //                if (dsgrade.Tables[0].Rows.Count > 0)
                    //    //                {
                    //    //                    dsgrade.Tables[0].DefaultView.RowFilter = "Mark_Grade='" + finalmarkandgrade + "'";
                    //    //                    dvnew = dsgrade.Tables[0].DefaultView;
                    //    //                    if (dvnew.Count > 0)
                    //    //                    {
                    //    //                        countsubject++;
                    //    //                        string frange = Convert.ToString(dvnew[0]["Frange"]);
                    //    //                        string trange = Convert.ToString(dvnew[0]["Trange"]);
                    //    //                        if (frange.Trim() != "" && trange.Trim() != "")
                    //    //                        {
                    //    //                            double midmark = (Convert.ToDouble(frange) + Convert.ToDouble(trange)) / 2;
                    //    //                            if (mainmidmark == 0)
                    //    //                            {
                    //    //                                mainmidmark = midmark;
                    //    //                            }
                    //    //                            else
                    //    //                            {
                    //    //                                mainmidmark = mainmidmark + midmark;
                    //    //                            }
                    //    //                        }
                    //    //                    }
                    //    //                }
                    //    //            }
                    //    //            string Month = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugmonth") as TextBox).Text);
                    //    //            string year1 = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugyear") as TextBox).Text);
                    //    //            string regno = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugregno") as TextBox).Text);
                    //    //            string nofoattempts = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_ugnoofattmpts") as TextBox).Text);
                    //    //            string max_mark = Convert.ToString((UgGrid.Rows[mark].FindControl("txt_rg_max") as TextBox).Text);
                    //    //            newmonth = Month;
                    //    //            newyear = year1;
                    //    //            if (subjectname.Trim() != "" && finalmarkandgrade.Trim() != "" && max_mark.Trim() != "")
                    //    //            {
                    //    //                if (subjectwisemark == "")
                    //    //                {
                    //    //                    subjectwisemark = subjectname + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + regno + "-" + nofoattempts + "-" + max_mark;
                    //    //                }
                    //    //                else
                    //    //                {
                    //    //                    subjectwisemark = subjectwisemark + "/" + subjectname + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + regno + "-" + nofoattempts + "-" + max_mark;
                    //    //                }
                    //    //            }
                    //    //        }
                    //    //    }
                    //    //    if (ugsubgrid.Rows.Count > 0)
                    //    //    {
                    //    //        for (int mark = 0; mark < ugsubgrid.Rows.Count; mark++)
                    //    //        {
                    //    //            string value = "subje";
                    //    //            string subjectname = "";
                    //    //            string subjectname1 = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subsubject567") as TextBox).Text);
                    //    //            if (subjectname1.Trim() != "" && subjectname1 != "---Select---")
                    //    //            {
                    //    //                subjectname = subjectcode(value, subjectname1);
                    //    //                // string subjectcode = Convert.ToString((Marksgrid.Rows[mark].FindControl("lblsubcode") as Label).Text);
                    //    //                string finalmarkandgrade = "";
                    //    //                if (rbMarksGrade.SelectedIndex == 0)
                    //    //                {
                    //    //                    isgrade = "0";
                    //    //                    finalmarkandgrade = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subugmagrs") as TextBox).Text);
                    //    //                }
                    //    //                else
                    //    //                {
                    //    //                    isgrade = "1";
                    //    //                    finalmarkandgrade = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subug_grade") as TextBox).Text);
                    //    //                    if (dsgrade.Tables[0].Rows.Count > 0)
                    //    //                    {
                    //    //                        dsgrade.Tables[0].DefaultView.RowFilter = "Mark_Grade='" + finalmarkandgrade + "'";
                    //    //                        dvnew = dsgrade.Tables[0].DefaultView;
                    //    //                        if (dvnew.Count > 0)
                    //    //                        {
                    //    //                            countsubject++;
                    //    //                            string frange = Convert.ToString(dvnew[0]["Frange"]);
                    //    //                            string trange = Convert.ToString(dvnew[0]["Trange"]);
                    //    //                            if (frange.Trim() != "" && trange.Trim() != "")
                    //    //                            {
                    //    //                                double midmark = (Convert.ToDouble(frange) + Convert.ToDouble(trange)) / 2;
                    //    //                                if (mainmidmark == 0)
                    //    //                                {
                    //    //                                    mainmidmark = midmark;
                    //    //                                }
                    //    //                                else
                    //    //                                {
                    //    //                                    mainmidmark = mainmidmark + midmark;
                    //    //                                }
                    //    //                            }
                    //    //                        }
                    //    //                    }
                    //    //                }
                    //    //                string Month = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subugmonth") as TextBox).Text);
                    //    //                string year1 = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subugyear") as TextBox).Text);
                    //    //                string regno = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subugregno") as TextBox).Text);
                    //    //                string nofoattempts = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subugnoofattmpts") as TextBox).Text);
                    //    //                string max_mark = Convert.ToString((ugsubgrid.Rows[mark].FindControl("txt_subug_max") as TextBox).Text);
                    //    //                newmonth = Month;
                    //    //                newyear = year1;
                    //    //                if (subjectname.Trim() != "")
                    //    //                {
                    //    //                    if (subjectwisemark == "")
                    //    //                    {
                    //    //                        subjectwisemark = subjectname + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + regno + "-" + nofoattempts + "-" + max_mark;
                    //    //                    }
                    //    //                    else
                    //    //                    {
                    //    //                        subjectwisemark = subjectwisemark + "/" + subjectname + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + regno + "-" + nofoattempts + "-" + max_mark;
                    //    //                    }
                    //    //                }
                    //    //            }
                    //    //        }
                    //    //    }
                    //    //}
                    //    if (subjectwisemark.Trim() != "")
                    //    {
                    //        Session["subjectwisemark"] = subjectwisemark.ToString();
                    //    }
                    //    int totalmark = 0;
                    //    int maxtotalmark = 0;
                    //    double percentagemark = 0;
                    //    if (rbMarksGrade.SelectedIndex == 0)
                    //    {
                    //        if (txt_totalmark.Text.Trim() != "")
                    //        {
                    //            totalmark = Convert.ToInt32(txt_totalmark.Text);
                    //            Session["Totalhscmark"] = Convert.ToString(totalmark);
                    //        }
                    //        if (avgtext.Text.Trim() != "")
                    //        {
                    //            maxtotalmark = Convert.ToInt32(avgtext.Text);
                    //            Session["maxtotalmark"] = Convert.ToString(maxtotalmark);
                    //        }
                    //        if (txt_percentage.Text.Trim() != "")
                    //        {
                    //            percentagemark = Convert.ToDouble(txt_percentage.Text);
                    //            Session["percentagemark"] = Convert.ToString(percentagemark);
                    //        }
                    //    }
                    //    else
                    //    {
                    //        if (mainmidmark != 0)
                    //        {
                    //            percentagemark = mainmidmark / Convert.ToDouble(countsubject);
                    //            percentagemark = Math.Round(percentagemark, 3);
                    //        }
                    //    }
                    //    string course_enterno = "";
                    //    string previous_details = "";
                    //    byte Vocational_stream = rbVocation.Checked ? (byte)1 : (byte)0;
                    //    string CUTOF = "";
                    //    CUTOF = Convert.ToString(txt_cutof.Text);
                    //    if (CUTOF.Trim() == "")
                    //    {
                    //        CUTOF = "0";
                    //    }
                    //    //if (ddl_coursetype.SelectedItem.Text == "UG" || ddl_coursetype.SelectedItem.Text == "DIPLOMA")
                    //    //{
                    //    //    previous_details = "if exists(select app_no from Stud_prev_details where app_no='" + app_no + "')update Stud_prev_details set Cut_Of_Mark='" + CUTOF + "',app_no='" + app_no + "',passyear='" + newyear + "',passmonth='" + newmonth + "',course_code='" + qualifyingexam + "',Institute_name='" + schoolorcollege + "',instaddress='" + schoolorcollegelocation + "',Xmedium='" + mediumofstudy + "',medium='" + mediumofstudyXII + "',isgrade='" + isgrade + "',Part1Language='" + lang1_subno + "',Part2Language='" + lang2_subno + "',percentage='" + percentagemark + "',university_code='" + bordoruniversity + "',uni_state='" + qualifystate + "',securedmark ='" + txt_totalmark.Text + "',totalmark='" + avgtext.Text + "',Vocational_stream='" + Vocational_stream + "',markPriority=1 where app_no='" + app_no + "'  and isnull(markPriority,1)=1 else insert into Stud_prev_details(app_no,Cut_Of_Mark,passyear,passmonth,course_code,Institute_name,instaddress,Xmedium,medium,isgrade,Part1Language,Part2Language,percentage,university_code,uni_state,securedmark,totalmark,Vocational_stream,markPriority) values('" + app_no + "','" + CUTOF + "','" + newyear + "','" + newmonth + "','" + qualifyingexam + "','" + schoolorcollege + "','" + schoolorcollegelocation + "','" + mediumofstudy + "','" + mediumofstudyXII + "','" + isgrade + "','" + lang1_subno + "','" + lang2_subno + "','" + percentagemark + "','" + bordoruniversity + "','" + qualifystate + "','" + txt_totalmark.Text + "','" + avgtext.Text + "','" + Vocational_stream + "','1') ";
                    //    //}
                    //    int previous = d2.update_method_wo_parameter(previous_details, "Text");
                    //    if (previous != 0)
                    //    {
                    //        string select_courseno = "select course_entno  from Stud_prev_details where app_no ='" + app_no + "'  and isnull(markPriority,1)=1";
                    //        ds.Clear();
                    //        ds = d2.select_method_wo_parameter(select_courseno, "Text");
                    //        if (ds.Tables[0].Rows.Count > 0)
                    //        {
                    //            course_enterno = Convert.ToString(ds.Tables[0].Rows[0]["course_entno"]);
                    //        }
                    //    }
                    //    if (subjectwisemark.Trim() != "")
                    //    {
                    //        string[] firstsplit = subjectwisemark.Split('/');
                    //        if (firstsplit.Length > 0)
                    //        {
                    //            string university_code = Convert.ToString(bordoruniversity);
                    //            // string group_or_branch_code = Convert.ToString(grouporbranch);
                    //            string examination_code = Convert.ToString(qualifyingexam);
                    //            string Medium_of_study = Convert.ToString(mediumofstudy);
                    //            string marks_or_grade = Convert.ToString(marksorgrade);
                    //            string del_query = "delete from perv_marks_history where course_entno='" + course_enterno + "'";
                    //            int rus = d2.update_method_wo_parameter(del_query, "Text");
                    //            for (int fi = 0; fi <= firstsplit.GetUpperBound(0); fi++)
                    //            {
                    //                string secondsplitvalue = Convert.ToString(firstsplit[fi]);
                    //                if (secondsplitvalue.Trim() != "")
                    //                {
                    //                    string[] secondsplit = secondsplitvalue.Split('-');
                    //                    if (secondsplit.Length > 0)
                    //                    {
                    //                        string subject_name = Convert.ToString(secondsplit[0]);
                    //                        string mark_or_grade = Convert.ToString(secondsplit[1]);
                    //                        string pass_month = Convert.ToString(secondsplit[2]);
                    //                        string pass_year = Convert.ToString(secondsplit[3]);
                    //                        string pass_regno = Convert.ToString(secondsplit[4]);
                    //                        string no_of_attemps_pass = Convert.ToString(secondsplit[5]);
                    //                        string max_mark_pass = Convert.ToString(secondsplit[6]);
                    //                        if (isgrade != "1")
                    //                        {
                    //                            string insertmarkquery = "insert into perv_marks_history (course_entno,psubjectno,registerno,acual_marks,max_marks,pass_month,pass_year,noofattempt)values ('" + course_enterno + "','" + subject_name + "','" + pass_regno + "','" + mark_or_grade + "','" + max_mark_pass + "','" + pass_month + "','" + pass_year + "','" + no_of_attemps_pass + "')";
                    //                            rus = d2.update_method_wo_parameter(insertmarkquery, "Text");
                    //                            alterflage = true;
                    //                        }
                    //                        else if (isgrade != "0")
                    //                        {
                    //                            string insertmarkquery = "insert into perv_marks_history (course_entno,psubjectno,registerno,grade,max_marks,pass_month,pass_year,noofattempt)values ('" + course_enterno + "','" + subject_name + "','" + pass_regno + "','" + mark_or_grade + "','" + max_mark_pass + "','" + pass_month + "','" + pass_year + "','" + no_of_attemps_pass + "')";
                    //                            rus = d2.update_method_wo_parameter(insertmarkquery, "Text");
                    //                            alterflage = true;
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                    //if (ddl_coursetype.SelectedItem.Value == "PG" || ddl_coursetype.SelectedItem.Value == "M.Phil" || ddl_coursetype.SelectedItem.Text == "DOCTORATE")
                    //{
                    //    //---------------------------------------------
                    //    double[] secMark = new double[5];
                    //    double[] maxMark = new double[5];
                    //    double[] avgMark = new double[5];
                    //    int p = 0;
                    //    double max_tot = 0;
                    //    double sec_total = 0;
                    //    int countmark = 0;
                    //    if (txt_SecMrk1.Text != "" && txt_maxmark1.Text != "")
                    //    {
                    //        secMark[0] = 0;
                    //        maxMark[0] = 0;
                    //        avgMark[0] = 0;
                    //        double.TryParse(Convert.ToString(txt_SecMrk1.Text), out secMark[0]);
                    //        double.TryParse(Convert.ToString(txt_maxmark1.Text), out maxMark[0]);
                    //        double.TryParse(Convert.ToString(txt_avg1.Text), out avgMark[0]);
                    //        avgMark[0] = Math.Round(((secMark[0] / maxMark[0]) * 100), 2, MidpointRounding.AwayFromZero);
                    //        Session["part1SecMrk"] = secMark[0];
                    //        Session["part1maxmark"] = maxMark[0];
                    //        Session["part1avg"] = avgMark[0];
                    //        //Session["part1avg"] = avgMark[0];
                    //        countmark = 1;
                    //        sec_total += secMark[0];
                    //        max_tot += maxMark[0];
                    //        string partqryDEL = "delete from StudPartMarkDetails where App_No='" + app_no + "' and PartName='Part-" + ToRoman(Convert.ToString(countmark)) + "'";
                    //        d2.update_method_wo_parameter(partqryDEL, "Text");
                    //        string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(countmark)) + "','" + secMark[0] + "','" + maxMark[0] + "','" + avgMark[0] + "') ";
                    //        int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    }
                    //    if (txt_SecMrk2.Text != "" && txt_maxmark2.Text != "")
                    //    {
                    //        secMark[1] = 0;
                    //        maxMark[1] = 0;
                    //        avgMark[1] = 0;
                    //        double.TryParse(Convert.ToString(txt_SecMrk2.Text), out secMark[1]);
                    //        double.TryParse(Convert.ToString(txt_maxmark2.Text), out maxMark[1]);
                    //        double.TryParse(Convert.ToString(txt_avg2.Text), out avgMark[1]);
                    //        avgMark[1] = Math.Round(((secMark[1] / maxMark[1]) * 100), 2, MidpointRounding.AwayFromZero);
                    //        Session["part2SecMrk"] = secMark[1];
                    //        Session["part2maxmark"] = maxMark[1];
                    //        Session["part2avg"] = avgMark[1];
                    //        sec_total += secMark[1];
                    //        max_tot += maxMark[1];
                    //        countmark = 2;
                    //        string partqryDEL = "delete from StudPartMarkDetails where App_No='" + app_no + "' and PartName='Part-" + ToRoman(Convert.ToString(countmark)) + "'";
                    //        d2.update_method_wo_parameter(partqryDEL, "Text");
                    //        string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(countmark)) + "','" + secMark[1] + "','" + maxMark[1] + "','" + avgMark[1] + "') ";
                    //        int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    }
                    //    if (txt_SecMrk3.Text != "" && txt_maxmark3.Text != "")
                    //    {
                    //        secMark[2] = 0;
                    //        maxMark[2] = 0;
                    //        avgMark[2] = 0;
                    //        double.TryParse(Convert.ToString(txt_SecMrk3.Text), out secMark[2]);
                    //        double.TryParse(Convert.ToString(txt_maxmark3.Text), out maxMark[2]);
                    //        double.TryParse(Convert.ToString(txt_avg3.Text), out avgMark[2]);
                    //        avgMark[2] = Math.Round(((secMark[2] / maxMark[2]) * 100), 2, MidpointRounding.AwayFromZero);
                    //        Session["part3SecMrk"] = secMark[2];
                    //        Session["part3maxmark"] = maxMark[2];
                    //        Session["part3avg"] = avgMark[2];
                    //        sec_total += secMark[2];
                    //        max_tot += maxMark[2];
                    //        countmark = 3;
                    //        string partqryDEL = "delete from StudPartMarkDetails where App_No='" + app_no + "' and PartName='Part-" + ToRoman(Convert.ToString(countmark)) + "'";
                    //        d2.update_method_wo_parameter(partqryDEL, "Text");
                    //        string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(countmark)) + "','" + secMark[2] + "','" + maxMark[2] + "','" + avgMark[2] + "') ";
                    //        int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    }
                    //    if (txt_SecMrk4.Text != "" && txt_maxmark4.Text != "")
                    //    {
                    //        secMark[3] = 0;
                    //        maxMark[3] = 0;
                    //        avgMark[3] = 0;
                    //        double.TryParse(Convert.ToString(txt_SecMrk4.Text), out secMark[3]);
                    //        double.TryParse(Convert.ToString(txt_maxmark4.Text), out maxMark[3]);
                    //        double.TryParse(Convert.ToString(txt_avg4.Text), out avgMark[3]);
                    //        avgMark[3] = Math.Round(((secMark[3] / maxMark[3]) * 100), 2, MidpointRounding.AwayFromZero);
                    //        Session["part4SecMrk"] = secMark[3];
                    //        Session["part4maxmark"] = maxMark[3];
                    //        Session["part4avg"] = avgMark[3];
                    //        sec_total += secMark[3];
                    //        max_tot += maxMark[3];
                    //        countmark = 4;
                    //        string partqryDEL = "delete from StudPartMarkDetails where App_No='" + app_no + "' and PartName='Part-" + ToRoman(Convert.ToString(countmark)) + "'";
                    //        d2.update_method_wo_parameter(partqryDEL, "Text");
                    //        string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(countmark)) + "','" + secMark[3] + "','" + maxMark[3] + "','" + avgMark[3] + "') ";
                    //        int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    }
                    //    if (txt_SecMrk5.Text != "" && txt_maxmark5.Text != "")
                    //    {
                    //        secMark[4] = 0;
                    //        maxMark[4] = 0;
                    //        avgMark[4] = 0;
                    //        double.TryParse(Convert.ToString(txt_SecMrk5.Text), out secMark[4]);
                    //        double.TryParse(Convert.ToString(txt_maxmark5.Text), out maxMark[4]);
                    //        double.TryParse(Convert.ToString(txt_avg5.Text), out avgMark[4]);
                    //        avgMark[4] = Math.Round(((secMark[4] / maxMark[4]) * 100), 2, MidpointRounding.AwayFromZero);
                    //        Session["part5SecMrk"] = secMark[4];
                    //        Session["part5maxmark"] = maxMark[4];
                    //        Session["part5avg"] = avgMark[4];
                    //        sec_total += secMark[4];
                    //        max_tot += maxMark[4];
                    //        countmark = 5;
                    //        string partqryDEL = "delete from StudPartMarkDetails where App_No='" + app_no + "' and PartName='Part-" + ToRoman(Convert.ToString(countmark)) + "'";
                    //        d2.update_method_wo_parameter(partqryDEL, "Text");
                    //        string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(countmark)) + "','" + secMark[4] + "','" + maxMark[4] + "','" + avgMark[4] + "') ";
                    //        int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    }
                    //    //int p = 0;
                    //    //double max_tot = 0;
                    //    //double sec_total = 0;
                    //    //for (int part = 0; part < countmark; part++)
                    //    //{
                    //    //    p++;
                    //    //    sec_total += secMark[part];
                    //    //    max_tot += maxMark[part];
                    //    //    string partqry = "insert into StudPartMarkDetails (App_No,PartName,SecuredMark,TotalMark,Percentage) values('" + app_no + "','Part-" + ToRoman(Convert.ToString(p)) + "','" + secMark[part] + "','" + maxMark[part] + "','" + avgMark[part] + "') ";
                    //    //    int pp = d2.update_method_wo_parameter(partqry, "Text");
                    //    //}
                    //    ///==-----------------------------------------------------------
                    //    string isgrade = "";
                    //    string nameofcollege = "";
                    //    string Qualifyexampassug = "";
                    //    if (ddlexamination.SelectedItem.Text.Trim() != "Others")
                    //    {
                    //        Qualifyexampassug = Convert.ToString(ddlexamination.SelectedItem.Value);
                    //    }
                    //    else
                    //    {
                    //        string qulify = Convert.ToString(txtqulifyexam.Text);
                    //        txt = "cours";
                    //        Qualifyexampassug = subjectcode(txt, qulify);
                    //    }
                    //    string univertsitycode = "";
                    //    if (ddlUniv.SelectedItem.Text.Trim() != "Others")
                    //    {
                    //        univertsitycode = Convert.ToString(ddlUniv.SelectedItem.Value);
                    //    }
                    //    else
                    //    {
                    //        string qulify = Convert.ToString(txt_univ.Text);
                    //        txt = "cours";
                    //        univertsitycode = subjectcode(txt, qulify);
                    //    }
                    //    string passmonth = Convert.ToString(DropDownList1.SelectedItem.Text);
                    //    string passyear = Convert.ToString(DropDownList2.SelectedItem.Text);
                    //    if (txt_nameofcollege.Text.Trim() != "")
                    //    {
                    //        nameofcollege = Convert.ToString(txt_nameofcollege.Text.First().ToString().ToUpper() + txt_nameofcollege.Text.Substring(1));
                    //        Session["NameofCollege"] = Convert.ToString(txt_nameofcollege.Text.First().ToString().ToUpper() + txt_nameofcollege.Text.Substring(1));
                    //    }
                    //    else
                    //    {
                    //        nameofcollege = "";
                    //        Session["NameofCollege"] = "";
                    //    }
                    //    string Locationofcollege = "";
                    //    if (txt_locationofcollege.Text.Trim() != "")
                    //    {
                    //        Locationofcollege = Convert.ToString(txt_locationofcollege.Text.First().ToString().ToUpper() + txt_locationofcollege.Text.Substring(1));
                    //        Session["locationofcollege"] = Convert.ToString(txt_locationofcollege.Text.First().ToString().ToUpper() + txt_locationofcollege.Text.Substring(1));
                    //    }
                    //    else
                    //    {
                    //        Locationofcollege = "";
                    //        Session["locationofcollege"] = "";
                    //    }
                    //    string Major = "";
                    //    if (txt_major.Text.Trim() != "")
                    //    {
                    //        txt = "branc";
                    //        string Major1 = Convert.ToString(txt_major.Text.First().ToString().ToUpper() + txt_major.Text.Substring(1));
                    //        Major = subjectcode(txt, Major1);
                    //        Session["Major"] = Convert.ToString(txt_major.Text.First().ToString().ToUpper() + txt_major.Text.Substring(1));
                    //    }
                    //    else
                    //    {
                    //        Major = "";
                    //        Session["Major"] = "";
                    //    }
                    //    int typeofmajor = 0;
                    //    if (ddltypeofmajor.SelectedItem.Text != "Select")
                    //    {
                    //        if (ddltypeofmajor.SelectedItem.Text == "Single")
                    //        {
                    //            typeofmajor = 1;
                    //            Session["TypeofMajor"] = Convert.ToString(ddltypeofmajor.SelectedItem.Text);
                    //        }
                    //        else if (ddltypeofmajor.SelectedItem.Text == "Double")
                    //        {
                    //            typeofmajor = 2;
                    //            Session["TypeofMajor"] = Convert.ToString(ddltypeofmajor.SelectedItem.Text);
                    //        }
                    //        else if (ddltypeofmajor.SelectedItem.Text == "Triple")
                    //        {
                    //            typeofmajor = 3;
                    //            Session["TypeofMajor"] = Convert.ToString(ddltypeofmajor.SelectedItem.Text);
                    //        }
                    //    }
                    //    else
                    //    {
                    //        typeofmajor = 0;
                    //        Session["TypeofMajor"] = "";
                    //    }
                    //    string typeofsemester = "";
                    //    if (ddltypeofsemester.SelectedItem.Text != "Select")
                    //    {
                    //        if (ddltypeofsemester.SelectedItem.Text == "Semester")
                    //        {
                    //            typeofsemester = "1";
                    //            Session["TypeofSemester"] = Convert.ToString(ddltypeofsemester.SelectedItem.Text);
                    //        }
                    //        else if (ddltypeofsemester.SelectedItem.Text == "Non Semester")
                    //        {
                    //            typeofsemester = "0";
                    //            Session["TypeofSemester"] = Convert.ToString(ddltypeofsemester.SelectedItem.Text);
                    //        }
                    //    }
                    //    else
                    //    {
                    //        typeofsemester = "";
                    //        Session["TypeofSemester"] = "";
                    //    }
                    //    string mediumofstudyuglevel = "";
                    //    if (txt_mediumofstudy.Text.Trim() != "")
                    //    {
                    //        txt = "PLang";
                    //        string mediumofstudyuglevel1 = Convert.ToString(txt_mediumofstudy.Text.First().ToString().ToUpper() + txt_mediumofstudy.Text.Substring(1));
                    //        mediumofstudyuglevel = subjectcode(txt, mediumofstudyuglevel1);
                    //        Session["Mediumofstudyug"] = Convert.ToString(txt_mediumofstudy.Text.First().ToString().ToUpper() + txt_mediumofstudy.Text.Substring(1));
                    //    }
                    //    else
                    //    {
                    //        mediumofstudyuglevel = "";
                    //        Session["Mediumofstudyug"] = "";
                    //    }
                    //    string marksorgradeug = "";
                    //    if (rdbugmarks.Checked == true)
                    //    {
                    //        marksorgradeug = "0";
                    //        Session["MarkorgradeUg"] = "Marks";
                    //    }
                    //    if (rdbuggrade.Checked == true)
                    //    {
                    //        marksorgradeug = "1";
                    //        Session["MarkorgradeUg"] = "Grade";
                    //    }
                    //    string regnoug = "";
                    //    if (txt_regnomarksheet.Text.Trim() != "")
                    //    {
                    //        regnoug = Convert.ToString(txt_regnomarksheet.Text);
                    //        Session["ugRegno"] = Convert.ToString(txt_regnomarksheet.Text);
                    //    }
                    //    else
                    //    {
                    //        regnoug = "";
                    //        Session["ugRegno"] = "";
                    //    }
                    //    string alltotalpercent = "";
                    //    if (txt_allsubjectpercentage.Text.Trim() != "")
                    //    {
                    //        alltotalpercent = Convert.ToString(txt_allsubjectpercentage.Text);
                    //        Session["Alltotalpercent"] = Convert.ToString(txt_allsubjectpercentage.Text);
                    //    }
                    //    else
                    //    {
                    //        alltotalpercent = "";
                    //        Session["Alltotalpercent"] = "";
                    //    }
                    //    string majortotalpercent = "";
                    //    if (txt_majorsubjectpercentage.Text.Trim() != "")
                    //    {
                    //        majortotalpercent = Convert.ToString(txt_majorsubjectpercentage.Text);
                    //        Session["Majortotalpercent"] = Convert.ToString(txt_majorsubjectpercentage.Text);
                    //    }
                    //    else
                    //    {
                    //        majortotalpercent = "";
                    //        Session["Majortotalpercent"] = "";
                    //    }
                    //    string majoralliedpercent = "";
                    //    if (txt_majorandalliedsubjectpercentage.Text.Trim() != "")
                    //    {
                    //        majoralliedpercent = Convert.ToString(txt_majorandalliedsubjectpercentage.Text);
                    //        Session["Majoralliedtotalpercent"] = Convert.ToString(txt_majorandalliedsubjectpercentage.Text);
                    //    }
                    //    else
                    //    {
                    //        majoralliedpercent = "";
                    //        Session["Majoralliedtotalpercent"] = "";
                    //    }
                    //    string tancet_mark = "";
                    //    //if (Session["type"].ToString().ToUpper() == "MCA")
                    //    //{
                    //    //    //tancet_mark = Convert.ToString(txt_tancetmark.Text);
                    //    //    //Session["TancetMark"] = Convert.ToString(txt_tancetmark.Text);
                    //    //}
                    //    string subjectmark = "";
                    //    //if (ddl_coursetype.SelectedItem.Text == "PG")
                    //    //{
                    //    //    if (Marksgrid.Rows.Count > 0)
                    //    //    {
                    //    //        for (int mark = 0; mark < Marksgrid.Rows.Count; mark++)
                    //    //        {
                    //    //            string semoryear = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_semoryear") as TextBox).Text);
                    //    //            string subject = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgsubject") as TextBox).Text);
                    //    //            txt = "subje";
                    //    //            string subject_number = subjectcode(txt, subject);
                    //    //            string sub_type_subjectno = "";
                    //    //            string typeofsubject = Convert.ToString((Marksgrid.Rows[mark].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text);
                    //    //            if (typeofsubject != "Others")
                    //    //            {
                    //    //                txt = "tsub";
                    //    //                sub_type_subjectno = subjectcode(txt, typeofsubject);
                    //    //            }
                    //    //            else
                    //    //            {
                    //    //                string subtype = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_typeofsubject") as TextBox).Text);
                    //    //                txt = "tsub";
                    //    //                sub_type_subjectno = subjectcode(txt, subtype);
                    //    //            }
                    //    //            string finalmarkandgrade = "";
                    //    //            if (rbMarksGrade.SelectedIndex == 0)
                    //    //            {
                    //    //                isgrade = "0";
                    //    //                finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_marks") as TextBox).Text);
                    //    //            }
                    //    //            else
                    //    //            {
                    //    //                isgrade = "1";
                    //    //                finalmarkandgrade = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_Grade") as TextBox).Text);
                    //    //            }
                    //    //            string Month = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgmonth") as TextBox).Text);
                    //    //            string year1 = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_pgyear") as TextBox).Text);
                    //    //            string max_mark = Convert.ToString((Marksgrid.Rows[mark].FindControl("txt_maximum_marks") as TextBox).Text);
                    //    //            if (subjectmark == "")
                    //    //            {
                    //    //                subjectmark = semoryear + "-" + subject_number + "-" + sub_type_subjectno + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + max_mark;
                    //    //            }
                    //    //            else
                    //    //            {
                    //    //                subjectmark = subjectmark + "\\" + semoryear + "-" + subject_number + "-" + sub_type_subjectno + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + max_mark;
                    //    //            }
                    //    //        }
                    //    //    }
                    //    //}
                    //    //else
                    //    //{
                    //        if (GridView_mphil.Rows.Count > 0)
                    //        {
                    //            for (int mark = 0; mark < GridView_mphil.Rows.Count; mark++)
                    //            {
                    //                string semoryear = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_semoryear") as TextBox).Text);
                    //                string subject = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgsubject") as TextBox).Text);
                    //                txt = "subje";
                    //                string subject_number = subjectcode(txt, subject);
                    //                string sub_type_subjectno = "";
                    //                string typeofsubject = Convert.ToString((GridView_mphil.Rows[mark].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text);
                    //                if (typeofsubject != "Others")
                    //                {
                    //                    txt = "tsub";
                    //                    sub_type_subjectno = subjectcode(txt, typeofsubject);
                    //                }
                    //                else
                    //                {
                    //                    string subtype = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_typeofsubject") as TextBox).Text);
                    //                    txt = "tsub";
                    //                    sub_type_subjectno = subjectcode(txt, subtype);
                    //                }
                    //                string finalmarkandgrade = "";
                    //                if (rbMarksGrade.SelectedIndex == 0)
                    //                {
                    //                    isgrade = "0";
                    //                    finalmarkandgrade = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_marks") as TextBox).Text);
                    //                }
                    //                else
                    //                {
                    //                    isgrade = "1";
                    //                    finalmarkandgrade = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_Grade") as TextBox).Text);
                    //                }
                    //                string internalmark = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_inter") as TextBox).Text);
                    //                string externalmark = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_exter") as TextBox).Text);
                    //                string Month = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgmonth") as TextBox).Text);
                    //                string year1 = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_pgyear") as TextBox).Text);
                    //                string max_mark = Convert.ToString((GridView_mphil.Rows[mark].FindControl("txt_maximum_marks") as TextBox).Text);
                    //                if (subjectmark == "")
                    //                {
                    //                    subjectmark = semoryear + "-" + subject_number + "-" + sub_type_subjectno + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + max_mark + "-" + internalmark + "-" + externalmark;
                    //                }
                    //                else
                    //                {
                    //                    subjectmark = subjectmark + "\\" + semoryear + "-" + subject_number + "-" + sub_type_subjectno + "-" + finalmarkandgrade + "-" + Month + "-" + year1 + "-" + max_mark + "-" + internalmark + "-" + externalmark;
                    //                }
                    //            }
                    //        }
                    //    //}
                    //    Session["ugmarksvalue"] = Convert.ToString(subjectmark);
                    //    string course_enterno = "";
                    //    string previous_details = "";
                    //    byte Vocational_stream = rbVocation.Checked ? (byte)1 : (byte)0;
                    //    string cutofpg = "";
                    //    cutofpg = Convert.ToString(txt_cutofpg.Text);
                    //    if (cutofpg.Trim() == "")
                    //    {
                    //        cutofpg = "0";
                    //    }
                    //    string internalmarksave = Convert.ToString(txt_internal.Text);
                    //    if (internalmarksave == "")
                    //    {
                    //        internalmarksave = "0";
                    //    }
                    //    string externalmarksave = Convert.ToString(txt_external.Text);
                    //    if (externalmarksave == "")
                    //    {
                    //        externalmarksave = "0";
                    //    }
                    //    //if (ddl_coursetype.SelectedItem.Value == "PG" || ddl_coursetype.SelectedItem.Value == "M.Phil" || ddl_coursetype.SelectedItem.Text == "DOCTORATE")
                    //    //{
                    //    //    //if (ddl_coursetype.SelectedItem.Value == "PG")
                    //    //    //{
                    //    //    //    previous_details = "UPDATE Stud_prev_details set Cut_Of_Mark='" + cutofpg + "',app_no='" + app_no + "',passmonth='" + passmonth + "',university_code='" + univertsitycode + "',passyear='" + passyear + "',course_code='" + Qualifyexampassug + "',Institute_name='" + nameofcollege + "',instaddress='" + Locationofcollege + "',medium='" + mediumofstudyuglevel + "',isgrade='" + isgrade + "',percentage='" + alltotalpercent + "',majorallied_percent='" + majoralliedpercent + "',major_percent='" + majortotalpercent + "',type_major='" + typeofmajor + "',type_semester='" + typeofsemester + "',registration_no='" + regnoug + "',branch_code='" + Major + "',Vocational_stream='" + Vocational_stream + "',markPriority=1 where app_no='" + app_no + "'  and isnull(markPriority,1)=1";
                    //    //    //}
                    //    //    //if (ddl_coursetype.SelectedItem.Value == "M.Phil" || ddl_coursetype.SelectedItem.Text == "DOCTORATE")
                    //    //    //{
                    //    //    //    previous_details = "UPDATE Stud_prev_details set Cut_Of_Mark='" + cutofpg + "',app_no='" + app_no + "',passmonth='" + passmonth + "',university_code='" + univertsitycode + "',passyear='" + passyear + "',course_code='" + Qualifyexampassug + "',Institute_name='" + nameofcollege + "',instaddress='" + Locationofcollege + "',medium='" + mediumofstudyuglevel + "',isgrade='" + isgrade + "',percentage='" + alltotalpercent + "',majorallied_percent='" + majoralliedpercent + "',major_percent='" + majortotalpercent + "',type_major='" + typeofmajor + "',type_semester='" + typeofsemester + "',registration_no='" + regnoug + "',branch_code='" + Major + "',Vocational_stream='" + Vocational_stream + "',markPriority=1,InternalPercentage='" + internalmarksave + "',ExternalPercentage='" + externalmarksave + "' where app_no='" + app_no + "'  and isnull(markPriority,1)=1";
                    //    //    //}
                    //    //    //{
                    //    //    //    previous_details = "update Stud_prev_details set app_no='" + app_no + "',course_code='" + Qualifyexampassug + "',Institute_name='" + nameofcollege + "',instaddress='" + Locationofcollege + "',medium='" + mediumofstudyuglevel + "',isgrade='" + isgrade + "',percentage='" + alltotalpercent + "',majorallied_percent='" + majoralliedpercent + "',major_percent='" + majortotalpercent + "',type_major='" + typeofmajor + "',type_semester='" + typeofsemester + "',tancet_mark='" + tancet_mark + "',registration_no='" + regnoug + "',branch_code='" + Major + "',Vocational_stream='" + Vocational_stream + "',markPriority=1 where app_no='" + app_no + "'  and isnull(markPriority,1)=1";
                    //    //    //}
                    //    //}
                    //    int previous = d2.update_method_wo_parameter(previous_details, "Text");
                    //    if (previous != 0)
                    //    {
                    //        string select_courseno = "select course_entno  from Stud_prev_details where app_no ='" + app_no + "'  and isnull(markPriority,1)=1";
                    //        ds.Clear();
                    //        ds = d2.select_method_wo_parameter(select_courseno, "Text");
                    //        if (ds.Tables[0].Rows.Count > 0)
                    //        {
                    //            course_enterno = Convert.ToString(ds.Tables[0].Rows[0]["course_entno"]);
                    //        }
                    //    }
                    //    if (subjectmark.Trim() != "")
                    //    {
                    //        string[] firstsplit = subjectmark.Split('\\');
                    //        if (firstsplit.Length > 0)
                    //        {
                    //            string del_query = "delete from perv_marks_history where course_entno='" + course_enterno + "'";
                    //            int rus = d2.update_method_wo_parameter(del_query, "Text");
                    //            for (int fi = 0; fi <= firstsplit.GetUpperBound(0); fi++)
                    //            {
                    //                string secondsplitvalue = Convert.ToString(firstsplit[fi]);
                    //                if (secondsplitvalue.Trim() != "")
                    //                {
                    //                    string[] secondsplit = secondsplitvalue.Split('-');
                    //                    if (secondsplit.Length > 0)
                    //                    {
                    //                        string semoryear = Convert.ToString(secondsplit[0]);
                    //                        string subjectno = Convert.ToString(secondsplit[1]);
                    //                        string typeofsubject = Convert.ToString(secondsplit[2]);
                    //                        string gradeofmark = Convert.ToString(secondsplit[3]);
                    //                        string monthofpass = Convert.ToString(secondsplit[4]);
                    //                        string yearofpass = Convert.ToString(secondsplit[5]);
                    //                        string max_mark_pass = Convert.ToString(secondsplit[6]);
                    //                        string internalmark1 = "";
                    //                        string externalmark1 = "";
                    //                        string addquery = "";
                    //                        string addquery1 = "";
                    //                        //if (ddl_coursetype.SelectedItem.Text == "M.Phil" || ddl_coursetype.SelectedItem.Text == "DOCTORATE")
                    //                        //{
                    //                        //    internalmark1 = Convert.ToString(secondsplit[7]);
                    //                        //    externalmark1 = Convert.ToString(secondsplit[8]);
                    //                        //    addquery = ",InternalMark,ExternalMark";
                    //                        //    addquery1 = ",'" + internalmark1 + "','" + externalmark1 + "'";
                    //                        //}
                    //                        if (isgrade != "1")
                    //                        {
                    //                            string insertmarkquery = "insert into perv_marks_history (semyear,course_entno,psubjectno,subject_typeno,acual_marks,max_marks,pass_month,pass_year " + addquery + ")values ('" + semoryear + "','" + course_enterno + "','" + subjectno + "','" + typeofsubject + "','" + gradeofmark + "','" + max_mark_pass + "','" + monthofpass + "','" + yearofpass + "' " + addquery1 + ")";
                    //                            rus = d2.update_method_wo_parameter(insertmarkquery, "Text");
                    //                            alterflage = true;
                    //                        }
                    //                        else if (isgrade != "0")
                    //                        {
                    //                            string insertmarkquery = "insert into perv_marks_history (semyear,course_entno,psubjectno,subject_typeno,grade,max_marks,pass_month,pass_year " + addquery + ")values ('" + semoryear + "','" + course_enterno + "','" + subjectno + "','" + typeofsubject + "','" + gradeofmark + "','" + max_mark_pass + "','" + monthofpass + "','" + yearofpass + "' " + addquery1 + ")";
                    //                            rus = d2.update_method_wo_parameter(insertmarkquery, "Text");
                    //                            alterflage = true;
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }
                    //}
                    if (!MarksCheck())
                    {
                        alterflage = true;
                    }
                    if (alterflage == true)
                    {
                        //  btn4.Enabled = false;
                        //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Updated Sucessfully\");", true);
                        //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Saved Sucessfully')", true);
                        popaddnewF2.Visible = false;
                        imgAlert.Visible = true;
                        lblalert.Text = "Updated Successfully";
                        go();
                    }
                    else
                    {
                        popaddnewF2.Visible = false;
                        imgAlert.Visible = true;
                        //lblalert.Text = "Updated Not Success";
                        lblalert.Text = "Please Add Academic Details";//Added By Saranyadevi21.2.2018
                    }
                }
                else
                {
                    ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Fill all the fields\");", true);
                    //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Please Fill All Fields')", true);
                }
            //}
            //else
            //{
            //    Response.Redirect("~/Default.aspx");
            //}
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, collegecode, "studentNewApplicationReport.aspx");
            //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"" + Convert.ToString(ex) + "\");", true);
            popaddnewF2.Visible = false;
            imgAlert.Visible = true;
            lblalert.Text = "Not Saved";
        }
        turnVisibility();
    }
    //Code Added by Idhris-- 21-05-2016
    private bool IsAppNoAutoGenerate()
    {
        bool autoGen = false;
        string autoGenQ = "select value from Master_Settings where usercode='" + usercode + "' and settings='Application No Rights'";
        byte autoVal = Convert.ToByte(d2.GetFunction(autoGenQ));
        return autoGen = autoVal == 0 ? false : true;
    }
    private string allFieldsOk()
    {
        string errMsg = string.Empty;
        //try
        //{
        //    System.Text.StringBuilder sbEr = new System.Text.StringBuilder();
        //    string appl_No = txt_appfromno.Text.Trim();
        //    if (IsAppNoAutoGenerate())
        //    {
        //        appl_No = genearateApplNo(Convert.ToString(ddl_college.SelectedItem.Value), Convert.ToString(ddl_courseone.SelectedItem.Value)).Trim();
        //    }
        //    if (string.IsNullOrEmpty(appl_No))
        //        sbEr.Append("\nInvalid Application Number");
        //    if (ddl_mode.SelectedIndex==0)
        //         sbEr.Append("\nInvalid Mode");
        //    if (ddl_seattype.SelectedIndex == 0)
        //         sbEr.Append("\nInvalid Seat Type");
        //    if (ddldobdate.SelectedIndex == 0 || ddldobYear.SelectedIndex == 0)
        //        sbEr.Append("\nInvalid Student Date Of Birth");
        //    if (dddl_faterday.SelectedIndex == 0 || dddl_fateryear.SelectedItem.Text.Trim() == "Year" || dddl_fatermonth.SelectedIndex==0)
        //        sbEr.Append("\nInvalid Father Date Of Birth");
        //    if (ddl_motherday.SelectedIndex == 0 || ddl_motheyear.SelectedItem.Text.Trim() == "Year" || ddl_mothermonth.SelectedIndex == 0)
        //        sbEr.Append("\nInvalid Father Date Of Birth");
        //    string fatherQualify = txt_faterquali.Text.Trim();
        //    string motherQualify = txt_motherqual.Text.Trim();
        //    string part1Lang = txtLangPart1.Text.Trim();
        //    string part2Lang = txtLangPart2.Text.Trim();
        //    string part3Lang = txtLangPart3.Text.Trim();
        //    string maritalStat = ddlMarriStat.SelectedIndex.ToString();
        //    string studIdMark = txtIdMark1.Text.Trim() + ";" + txtIdMark2.Text.Trim();
        //    //Tab 2
        //    byte isExServ = rdbexy.Checked ? (byte)1 : (byte)0;
        //    byte isBloodDonor = rdb_bloodyes.Checked ? (byte)1 : (byte)0;
        //    byte isMissionChild = (byte)rblMissionChild.SelectedIndex;
        //    isMissionChild = isMissionChild == 0 ? (byte)1 : (byte)0;
        //    byte isReserveCaste = (byte)rblReservCast.SelectedIndex;
        //    isReserveCaste = isReserveCaste == 0 ? (byte)1 : (byte)0;
        //    byte isEconomicBack = (byte)rblEcoBack.SelectedIndex;
        //    isEconomicBack = isEconomicBack == 0 ? (byte)1 : (byte)0;
        //    byte isParentOldStu = (byte)rblparentOld.SelectedIndex;
        //    isParentOldStu = isParentOldStu == 0 ? (byte)1 : (byte)0;
        //    byte isTuitFeeWaivr = (byte)rblFeeWaiver.SelectedIndex;
        //    isTuitFeeWaivr = isTuitFeeWaivr == 0 ? (byte)1 : (byte)0;
        //    //Driving License
        //    byte haveDrivLicens = (byte)rblDrivLic.SelectedIndex;
        //    haveDrivLicens = haveDrivLicens == 0 ? (byte)1 : (byte)0;
        //    string drivLicenseNo = string.Empty;
        //    if (haveDrivLicens == 1)
        //        drivLicenseNo = txtDrivLic.Text.Trim().ToUpper();
        //    //Insurance
        //    byte haveInsurance = (byte)rblInsurance.SelectedIndex;
        //    haveInsurance = haveInsurance == 0 ? (byte)1 : (byte)0;
        //    double insAmt = 0;
        //    string insBy = string.Empty;
        //    string insNom = string.Empty;
        //    string insNomRel = string.Empty;
        //    if (haveInsurance == 1)
        //    {
        //        if (ddlInsureNominee.SelectedIndex == 3)
        //        {
        //            insNomRel = txtInsureRelat.Text.Trim();
        //        }
        //        else
        //        {
        //            insNomRel = ddlInsureNominee.SelectedItem.Text;
        //        }
        //        double.TryParse(txtInsureAmt.Text, out insAmt);
        //        insNom = txtInsureNominee.Text.Trim();
        //        insBy = txtInsureBy.Text.Trim();
        //    }
        //}
        //catch { errMsg = "Error while processing..!"; }
        return errMsg;
    }
    private void loadPartLanguages()
    {
        
        ddlPartLang2.Items.Clear();
        ddlPartLang3.Items.Clear();
        try
        {
            string selQ = "select Textval,Textcode from textvaltable where textcriteria='plang' and college_code=" + collegecode + "";
            DataSet dsLan = new DataSet();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                
                ddlPartLang2.DataSource = dsLan;
                ddlPartLang2.DataTextField = "Textval";
                ddlPartLang2.DataValueField = "Textcode";
                ddlPartLang2.DataBind();
                ddlPartLang3.DataSource = dsLan;
                ddlPartLang3.DataTextField = "Textval";
                ddlPartLang3.DataValueField = "Textcode";
                ddlPartLang3.DataBind();
            }
        }
        catch { }
        
        ddlPartLang2.Items.Insert(0, "Select");
        ddlPartLang2.Items.Add("Others");
        ddlPartLang3.Items.Insert(0, "Select");
        ddlPartLang3.Items.Add("Others");
       
        txtLangPart2.Text = "";
        txtLangPart3.Text = "";
    }
    private void loadQualification()
    {
        ddlfaterquali.Items.Clear();
        ddlmotherqual.Items.Clear();
        try
        {
            string selQ = "select Textval,Textcode from textvaltable where textcriteria='fqual' and college_code=" + collegecode + "";
            DataSet dsLan = new DataSet();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddlfaterquali.DataSource = dsLan;
                ddlfaterquali.DataTextField = "Textval";
                ddlfaterquali.DataValueField = "Textcode";
                ddlfaterquali.DataBind();
            }
            selQ = "select Textval,Textcode from textvaltable where textcriteria='mqual' and college_code=" + collegecode + "";
            dsLan.Clear();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddlmotherqual.DataSource = dsLan;
                ddlmotherqual.DataTextField = "Textval";
                ddlmotherqual.DataValueField = "Textcode";
                ddlmotherqual.DataBind();
            }
        }
        catch { }
        ddlfaterquali.Items.Insert(0, "Select");
        ddlfaterquali.Items.Add("Others");
        ddlmotherqual.Items.Insert(0, "Select");
        ddlmotherqual.Items.Add("Others");
        txt_faterquali.Text = "";
        txt_motherqual.Text = "";
    }
    protected void btn_alertclose_Click(object sender, EventArgs e)
    {
        imgAlert.Visible = false;
        turnVisibility();
    }
    private void loadBnkDropDowns()
    {
        ddlBnkAccFor.Items.Clear();
        ddlBnkName.Items.Clear();
        try
        {
            string selQ = "select Textval,Textcode from textvaltable where textcriteria='BnkFo' and college_code=" + collegecode + "";
            DataSet dsLan = new DataSet();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddlBnkAccFor.DataSource = dsLan;
                ddlBnkAccFor.DataTextField = "Textval";
                ddlBnkAccFor.DataValueField = "Textcode";
                ddlBnkAccFor.DataBind();
            }
            selQ = "select Textval,Textcode from textvaltable where textcriteria='BnkNa' and college_code=" + collegecode + "";
            dsLan.Clear();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddlBnkName.DataSource = dsLan;
                ddlBnkName.DataTextField = "Textval";
                ddlBnkName.DataValueField = "Textcode";
                ddlBnkName.DataBind();
            }
        }
        catch { }
        ddlBnkAccFor.Items.Insert(0, "Select");
        ddlBnkAccFor.Items.Add("Others");
        ddlBnkName.Items.Insert(0, "Select");
        ddlBnkName.Items.Add("Others");
        txtBnkAccFor.Text = "";
        txtBnkName.Text = "";
    }
    private void loadAcademicSpread()
    {
        spreadAcaDet.Sheets[0].RowCount = 0;
        spreadAcaDet.Sheets[0].ColumnCount = 0;
        spreadAcaDet.CommandBar.Visible = false;
        spreadAcaDet.Sheets[0].AutoPostBack = false;
        spreadAcaDet.Sheets[0].ColumnHeader.RowCount = 1;
        spreadAcaDet.Sheets[0].RowHeader.Visible = false;
        spreadAcaDet.Sheets[0].ColumnCount = 8;
        FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
        darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA"); //Color.Brown;
        darkstyle.ForeColor = Color.Black;
        spreadAcaDet.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Course";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Branch/Group";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Institute Name";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Board/University";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 6].Text = "SecuredMarks";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 7].Text = "MaxMarks";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 7].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 7].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 7].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].ColumnHeader.Cells[0, 7].Font.Bold = true;
        spreadAcaDet.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].Columns[0].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].Columns[0].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].Columns[0].Locked = true;
        spreadAcaDet.Sheets[0].Columns[0].Width = 60;
        spreadAcaDet.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].Columns[1].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].Columns[1].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].Columns[1].Locked = false;
        spreadAcaDet.Sheets[0].Columns[1].Width = 50;
        spreadAcaDet.Sheets[0].Columns[2].HorizontalAlign = HorizontalAlign.Left;
        spreadAcaDet.Sheets[0].Columns[2].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].Columns[2].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].Columns[2].Locked = true;
        spreadAcaDet.Sheets[0].Columns[2].Width = 170;
        spreadAcaDet.Sheets[0].Columns[3].HorizontalAlign = HorizontalAlign.Left;
        spreadAcaDet.Sheets[0].Columns[3].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].Columns[3].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].Columns[3].Locked = true;
        spreadAcaDet.Sheets[0].Columns[3].Width = 200;
        spreadAcaDet.Sheets[0].Columns[4].HorizontalAlign = HorizontalAlign.Left;
        spreadAcaDet.Sheets[0].Columns[4].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].Columns[4].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].Columns[4].Locked = true;
        spreadAcaDet.Sheets[0].Columns[4].Width = 150;
        spreadAcaDet.Sheets[0].Columns[5].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].Columns[5].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].Columns[5].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].Columns[5].Locked = true;
        spreadAcaDet.Sheets[0].Columns[5].Width = 100;
        spreadAcaDet.Sheets[0].Columns[6].HorizontalAlign = HorizontalAlign.Center;
        spreadAcaDet.Sheets[0].Columns[6].Font.Size = FontUnit.Medium;
        spreadAcaDet.Sheets[0].Columns[6].Font.Name = "Book Antiqua";
        spreadAcaDet.Sheets[0].Columns[6].Locked = true;
        spreadAcaDet.Sheets[0].Columns[6].Width = 100;
        spreadAcaDet.Rows.Count++;
        spreadAcaDet.SaveChanges();
    }
    protected void addAcaDetails(object sender, EventArgs e)
    {
        try
        {
            string courseid = "0";
            string course = string.Empty;
            string branchGrpId = "0";
            string branchGrp = string.Empty;
            string insName = string.Empty;
            string boardUnivId = "0";
            string boardUniv = string.Empty;
            string secMarks = string.Empty;
            string maxMarks = string.Empty;
            if (ddlAcaCourse.SelectedIndex != 0)
            {
                if (ddlAcaCourse.SelectedItem.Text != "Others")
                {
                    courseid = ddlAcaCourse.SelectedItem.Text;
                }
                else
                {
                    courseid = txtAcaCourse.Text.Trim();
                }
            }
            if (ddlAcaUniv.SelectedIndex != 0)
            {
                if (ddlAcaUniv.SelectedItem.Text != "Others")
                {
                    boardUnivId = ddlAcaUniv.SelectedItem.Text;
                }
                else
                {
                    boardUnivId = txtAcaUniv.Text.Trim();
                }
            }
            if (ddlAcaBran.SelectedIndex != 0)
            {
                if (ddlAcaBran.SelectedItem.Text != "Others")
                {
                    branchGrpId = ddlAcaBran.SelectedItem.Text;
                }
                else
                {
                    branchGrpId = txtAcaBran.Text.Trim();
                }
            }
            if (courseid != "0" && courseid != string.Empty)
            {
                course = courseid;
                courseid = subjectcode("cours", courseid);
            }
            if (boardUnivId != "0" && boardUnivId != string.Empty)
            {
                boardUniv = boardUnivId;
                boardUnivId = subjectcode("unive", boardUnivId);
            }
            if (branchGrpId != "0" && branchGrpId != string.Empty)
            {
                branchGrp = branchGrpId;
                branchGrpId = subjectcode("branc", branchGrpId);
            }
            insName = txtAcaInstitute.Text.Trim();
            secMarks = txtAcaSecMarks.Text;
            maxMarks = txtAcaMaxMarks.Text;
            if (spreadAcaDet.Rows.Count < 2)
            {
                loadAcademicSpread();
            }
            if (insName != string.Empty && secMarks != string.Empty && maxMarks != string.Empty && boardUniv != string.Empty && branchGrp != string.Empty && course != string.Empty)
            {
                bool markok = false;
                try
                {
                    double secMarksCh = Convert.ToDouble(secMarks);
                    double maxMarksCh = Convert.ToDouble(maxMarks);
                    if (secMarksCh <= maxMarksCh)
                    {
                        markok = true;
                    }
                }
                catch { markok = false; }
                FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                cb.AutoPostBack = false;
                if (markok)
                {
                    spreadAcaDet.Sheets[0].RowCount++;
                    int rowCnt = spreadAcaDet.Sheets[0].RowCount - 1;
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 0].Text = Convert.ToString(rowCnt);
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 1].CellType = cb;
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 2].Text = Convert.ToString(course);
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 2].Tag = Convert.ToString(courseid);
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 3].Text = Convert.ToString(branchGrp);
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 3].Tag = Convert.ToString(branchGrpId);
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 4].Text = Convert.ToString(insName);
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 5].Text = Convert.ToString(boardUniv);
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 5].Tag = Convert.ToString(boardUnivId);
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 6].Text = Convert.ToString(secMarks);
                    spreadAcaDet.Sheets[0].Cells[rowCnt, 7].Text = Convert.ToString(maxMarks);
                    spreadAcaDet.SaveChanges();
                    txtAcaMaxMarks.Text = "";
                    txtAcaSecMarks.Text = "";
                    txtAcaInstitute.Text = "";
                    txtAcaBran.Text = "";
                    txtAcaCourse.Text = "";
                    txtAcaUniv.Text = "";
                    loadAcaDropDowns();
                }
                else
                {
                    imgAlert.Visible = true;
                    lblalert.Text = "Secured Marks Should Not Exceed Maximum Marks";
                }
            }
            else
            {
                imgAlert.Visible = true;
                lblalert.Text = "Please Fill All Fields";
            }
        }
        catch { }
        turnVisibility();
        btnAcaAdd.Focus();
    }
    protected void btnAcaClear_Click(object sender, EventArgs e)
    {
        // loadAcademicSpread();
        string checkvalue = "";
        string activerow = "";
        spreadAcaDet.SaveChanges();
        activerow = spreadAcaDet.ActiveSheetView.ActiveRow.ToString();
        for (int i = 0; i < spreadAcaDet.Sheets[0].RowCount; i++)
        {
            checkvalue = Convert.ToString(spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(i), 1].Value);
            if (checkvalue == "1")
            {
                spreadAcaDet.Rows[Convert.ToInt32(activerow)].Remove();
            }
        }
        turnVisibility();
        btnAcaClear.Focus();
    }
    protected void btnAcaupdate_Click(object sender, EventArgs e)
    {
        try
        {
            string checkvalue = "";
            string activerow = "";
            spreadAcaDet.SaveChanges();
            activerow = spreadAcaDet.ActiveSheetView.ActiveRow.ToString();
            checkvalue = Convert.ToString(spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Value);
            if (checkvalue == "1")
            {
                string courseid = "0";
                string course = string.Empty;
                string branchGrpId = "0";
                string branchGrp = string.Empty;
                string insName = string.Empty;
                string boardUnivId = "0";
                string boardUniv = string.Empty;
                string secMarks = string.Empty;
                string maxMarks = string.Empty;
                if (ddlAcaCourse.SelectedIndex != 0)
                {
                    if (ddlAcaCourse.SelectedItem.Text != "Others")
                    {
                        courseid = ddlAcaCourse.SelectedItem.Text;
                    }
                    else
                    {
                        courseid = txtAcaCourse.Text.Trim();
                    }
                }
                if (ddlAcaUniv.SelectedIndex != 0)
                {
                    if (ddlAcaUniv.SelectedItem.Text != "Others")
                    {
                        boardUnivId = ddlAcaUniv.SelectedItem.Text;
                    }
                    else
                    {
                        boardUnivId = txtAcaUniv.Text.Trim();
                    }
                }
                if (ddlAcaBran.SelectedIndex != 0)
                {
                    if (ddlAcaBran.SelectedItem.Text != "Others")
                    {
                        branchGrpId = ddlAcaBran.SelectedItem.Text;
                    }
                    else
                    {
                        branchGrpId = txtAcaBran.Text.Trim();
                    }
                }
                if (courseid != "0" && courseid != string.Empty)
                {
                    course = courseid;
                    courseid = subjectcode("cours", courseid);
                }
                if (boardUnivId != "0" && boardUnivId != string.Empty)
                {
                    boardUniv = boardUnivId;
                    boardUnivId = subjectcode("unive", boardUnivId);
                }
                if (branchGrpId != "0" && branchGrpId != string.Empty)
                {
                    branchGrp = branchGrpId;
                    branchGrpId = subjectcode("branc", branchGrpId);
                }
                insName = txtAcaInstitute.Text.Trim();
                secMarks = txtAcaSecMarks.Text;
                maxMarks = txtAcaMaxMarks.Text;
                if (spreadAcaDet.Rows.Count < 2)
                {
                    loadAcademicSpread();
                }
                if (insName != string.Empty && secMarks != string.Empty && maxMarks != string.Empty && boardUniv != string.Empty && branchGrp != string.Empty && course != string.Empty)
                {
                    bool markok = false;
                    try
                    {
                        double secMarksCh = Convert.ToDouble(secMarks);
                        double maxMarksCh = Convert.ToDouble(maxMarks);
                        if (secMarksCh <= maxMarksCh)
                        {
                            markok = true;
                        }
                    }
                    catch { markok = false; }
                    FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                    cb.AutoPostBack = false;
                    if (markok)
                    {
                        //spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 0].Text = Convert.ToString(rowCnt);
                        spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 1].CellType = cb;
                        spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text = Convert.ToString(course);
                        spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Tag = Convert.ToString(courseid);
                        spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text = Convert.ToString(branchGrp);
                        spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Tag = Convert.ToString(branchGrpId);
                        spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 4].Text = Convert.ToString(insName);
                        spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 5].Text = Convert.ToString(boardUniv);
                        spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 5].Tag = Convert.ToString(boardUnivId);
                        spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 6].Text = Convert.ToString(secMarks);
                        spreadAcaDet.Sheets[0].Cells[Convert.ToInt32(activerow), 7].Text = Convert.ToString(maxMarks);
                        spreadAcaDet.SaveChanges();
                        txtAcaMaxMarks.Text = "";
                        txtAcaSecMarks.Text = "";
                        txtAcaInstitute.Text = "";
                        txtAcaBran.Text = "";
                        txtAcaCourse.Text = "";
                        txtAcaUniv.Text = "";
                        loadAcaDropDowns();
                    }
                    else
                    {
                        imgAlert.Visible = true;
                        lblalert.Text = "Secured Marks Should Not Exceed Maximum Marks";
                    }
                }
                else
                {
                    imgAlert.Visible = true;
                    lblalert.Text = "Please Fill All Fields";
                }
            }
        }
        catch { }
    }
    private void loadAcaDropDowns()
    {
        ddlAcaUniv.Items.Clear();
        ddlAcaBran.Items.Clear();
        ddlAcaCourse.Items.Clear();
        try
        {
            string selQ = "select Textval,Textcode from textvaltable where textcriteria='unive' and college_code=" + collegecode + "";
            DataSet dsLan = new DataSet();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddlAcaUniv.DataSource = dsLan;
                ddlAcaUniv.DataTextField = "Textval";
                ddlAcaUniv.DataValueField = "Textcode";
                ddlAcaUniv.DataBind();
            }
            selQ = "select Textval,Textcode from textvaltable where textcriteria='branc' and college_code=" + collegecode + "";
            dsLan.Clear();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddlAcaBran.DataSource = dsLan;
                ddlAcaBran.DataTextField = "Textval";
                ddlAcaBran.DataValueField = "Textcode";
                ddlAcaBran.DataBind();
            }
            selQ = "select Textval,Textcode from textvaltable where textcriteria='cours' and college_code=" + collegecode + "";
            dsLan.Clear();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddlAcaCourse.DataSource = dsLan;
                ddlAcaCourse.DataTextField = "Textval";
                ddlAcaCourse.DataValueField = "Textcode";
                ddlAcaCourse.DataBind();
            }
        }
        catch { }
        ddlAcaUniv.Items.Insert(0, "Select");
        ddlAcaUniv.Items.Add("Others");
        ddlAcaBran.Items.Insert(0, "Select");
        ddlAcaBran.Items.Add("Others");
        ddlAcaCourse.Items.Insert(0, "Select");
        ddlAcaCourse.Items.Add("Others");
        txtAcaUniv.Text = "";
        txtAcaBran.Text = "";
        txtAcaCourse.Text = "";
    }
    private void loadBnkSpread()
    {
        spreadBankDet.Sheets[0].RowCount = 0;
        spreadBankDet.Sheets[0].ColumnCount = 0;
        spreadBankDet.CommandBar.Visible = false;
        spreadBankDet.Sheets[0].AutoPostBack = false;
        spreadBankDet.Sheets[0].ColumnHeader.RowCount = 1;
        spreadBankDet.Sheets[0].RowHeader.Visible = false;
        spreadBankDet.Sheets[0].ColumnCount = 8;
        FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
        darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA"); //Color.Brown;
        darkstyle.ForeColor = Color.Black;
        spreadBankDet.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Account For";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Account No";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Debit Card No";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 5].Text = "IFSC Code";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 6].Text = "BankName";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Left;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Branch";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 7].HorizontalAlign = HorizontalAlign.Center;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 7].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 7].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].ColumnHeader.Cells[0, 7].Font.Bold = true;
        spreadBankDet.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
        spreadBankDet.Sheets[0].Columns[0].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].Columns[0].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].Columns[0].Locked = true;
        spreadBankDet.Sheets[0].Columns[0].Width = 60;
        spreadBankDet.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Left;
        spreadBankDet.Sheets[0].Columns[1].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].Columns[1].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].Columns[1].Locked = true;
        spreadBankDet.Sheets[0].Columns[1].Width = 150;
        spreadBankDet.Sheets[0].Columns[2].HorizontalAlign = HorizontalAlign.Left;
        spreadBankDet.Sheets[0].Columns[2].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].Columns[2].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].Columns[2].Locked = true;
        spreadBankDet.Sheets[0].Columns[2].Width = 170;
        spreadBankDet.Sheets[0].Columns[3].HorizontalAlign = HorizontalAlign.Left;
        spreadBankDet.Sheets[0].Columns[3].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].Columns[3].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].Columns[3].Locked = true;
        spreadBankDet.Sheets[0].Columns[3].Width = 200;
        spreadBankDet.Sheets[0].Columns[4].HorizontalAlign = HorizontalAlign.Left;
        spreadBankDet.Sheets[0].Columns[4].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].Columns[4].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].Columns[4].Locked = true;
        spreadBankDet.Sheets[0].Columns[4].Width = 150;
        spreadBankDet.Sheets[0].Columns[5].HorizontalAlign = HorizontalAlign.Center;
        spreadBankDet.Sheets[0].Columns[5].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].Columns[5].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].Columns[5].Locked = true;
        spreadBankDet.Sheets[0].Columns[5].Width = 100;
        spreadBankDet.Sheets[0].Columns[6].HorizontalAlign = HorizontalAlign.Center;
        spreadBankDet.Sheets[0].Columns[6].Font.Size = FontUnit.Medium;
        spreadBankDet.Sheets[0].Columns[6].Font.Name = "Book Antiqua";
        spreadBankDet.Sheets[0].Columns[6].Locked = true;
        spreadBankDet.Sheets[0].Columns[6].Width = 100;
        spreadBankDet.Rows.Count++;
        spreadBankDet.SaveChanges();
    }
    protected void addBnkDetails(object sender, EventArgs e)
    {
        try
        {
            string bnkid = "0";
            string bnk = string.Empty;
            string accForId = "0";
            string accFor = string.Empty;
            string accNo = string.Empty;
            string debitNo = string.Empty;
            string ifscode = string.Empty;
            string branch = string.Empty;
            if (ddlBnkAccFor.SelectedIndex != 0)
            {
                if (ddlBnkAccFor.SelectedItem.Text != "Others")
                {
                    accForId = ddlBnkAccFor.SelectedItem.Text;
                }
                else
                {
                    accForId = txtBnkAccFor.Text.Trim();
                }
            }
            if (ddlBnkName.SelectedIndex != 0)
            {
                if (ddlBnkName.SelectedItem.Text != "Others")
                {
                    bnkid = ddlBnkName.SelectedItem.Text;
                }
                else
                {
                    bnkid = txtBnkName.Text.Trim();
                }
            }
            if (bnkid != "0" && bnkid != string.Empty)
            {
                bnk = bnkid;
                bnkid = subjectcode("BnkNa", bnkid);
            }
            if (accForId != "0" && accForId != string.Empty)
            {
                accFor = accForId;
                accForId = subjectcode("BnkFo", accForId);
            }
            accNo = txtBnkAccNo.Text.Trim();
            debitNo = txtBnkDebit.Text.Trim();
            ifscode = txtBnkIFSC.Text.Trim();
            branch = txtBnkBran.Text.Trim();
            if (bnk != string.Empty && accFor != string.Empty && accNo != string.Empty && branch != string.Empty)
            {
                if (spreadBankDet.Rows.Count < 2)
                {
                    loadBnkSpread();
                }
                spreadBankDet.Sheets[0].RowCount++;
                int rowCnt = spreadBankDet.Sheets[0].RowCount - 1;
                FarPoint.Web.Spread.TextCellType ac = new FarPoint.Web.Spread.TextCellType();
                FarPoint.Web.Spread.TextCellType tc = new FarPoint.Web.Spread.TextCellType();
                FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                cb.AutoPostBack = false;
                spreadBankDet.Sheets[0].Cells[rowCnt, 0].Text = Convert.ToString(rowCnt);
                spreadBankDet.Sheets[0].Cells[rowCnt, 1].CellType = cb;
                spreadBankDet.Sheets[0].Cells[rowCnt, 1].Locked = false;
                spreadBankDet.Sheets[0].Cells[rowCnt, 1].Column.Width = 50;
                spreadBankDet.Sheets[0].Cells[rowCnt, 1].HorizontalAlign = HorizontalAlign.Center;
                spreadBankDet.Sheets[0].Cells[rowCnt, 2].Text = Convert.ToString(accFor);
                spreadBankDet.Sheets[0].Cells[rowCnt, 2].Tag = Convert.ToString(accForId);
                spreadBankDet.Sheets[0].Cells[rowCnt, 3].CellType = ac;
                spreadBankDet.Sheets[0].Cells[rowCnt, 3].Text = Convert.ToString(accNo);
                spreadBankDet.Sheets[0].Cells[rowCnt, 4].CellType = tc;
                spreadBankDet.Sheets[0].Cells[rowCnt, 4].Text = Convert.ToString(debitNo);
                spreadBankDet.Sheets[0].Cells[rowCnt, 4].CellType = tc;
                spreadBankDet.Sheets[0].Cells[rowCnt, 5].Text = Convert.ToString(ifscode);
                spreadBankDet.Sheets[0].Cells[rowCnt, 5].CellType = tc;
                spreadBankDet.Sheets[0].Cells[rowCnt, 6].Text = Convert.ToString(bnk);
                spreadBankDet.Sheets[0].Cells[rowCnt, 6].CellType = tc;
                spreadBankDet.Sheets[0].Cells[rowCnt, 6].Tag = Convert.ToString(bnkid);
                spreadBankDet.Sheets[0].Cells[rowCnt, 7].Text = Convert.ToString(branch);
                spreadBankDet.Sheets[0].Cells[rowCnt, 7].CellType = tc;
                spreadBankDet.SaveChanges();
                txtBnkAccFor.Text = "";
                txtBnkName.Text = "";
                txtBnkAccNo.Text = "";
                txtBnkDebit.Text = "";
                txtBnkIFSC.Text = "";
                txtBnkBran.Text = "";
                loadBnkDropDowns();
            }
            else
            {
                imgAlert.Visible = true;
                lblalert.Text = "Please Fill All Fields";
            }
        }
        catch { }
        turnVisibility();
    }
    protected void btnBnkClear_Click(object sender, EventArgs e)
    {
        //loadBnkSpread();
        string checkvalue = "";
        string activerow = "";
        spreadBankDet.SaveChanges();
        activerow = spreadBankDet.ActiveSheetView.ActiveRow.ToString();
        for (int i = 0; i < spreadBankDet.Sheets[0].RowCount; i++)
        {
            checkvalue = Convert.ToString(spreadBankDet.Sheets[0].Cells[Convert.ToInt32(i), 1].Value);
            if (checkvalue == "1")
            {
                spreadBankDet.Rows[Convert.ToInt32(activerow)].Remove();
            }
        }
        turnVisibility();
    }
    protected void btnbankupdate_Click(object sender, EventArgs e)
    {
        try
        {
            string checkvalue = "";
            string activerow = "";
            spreadBankDet.SaveChanges();
            activerow = spreadBankDet.ActiveSheetView.ActiveRow.ToString();
            checkvalue = Convert.ToString(spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Value);
            if (checkvalue == "1")
            {
                string bnkid = "0";
                string bnk = string.Empty;
                string accForId = "0";
                string accFor = string.Empty;
                string accNo = string.Empty;
                string debitNo = string.Empty;
                string ifscode = string.Empty;
                string branch = string.Empty;
                if (ddlBnkAccFor.SelectedIndex != 0)
                {
                    if (ddlBnkAccFor.SelectedItem.Text != "Others")
                    {
                        accForId = ddlBnkAccFor.SelectedItem.Text;
                    }
                    else
                    {
                        accForId = txtBnkAccFor.Text.Trim();
                    }
                }
                if (ddlBnkName.SelectedIndex != 0)
                {
                    if (ddlBnkName.SelectedItem.Text != "Others")
                    {
                        bnkid = ddlBnkName.SelectedItem.Text;
                    }
                    else
                    {
                        bnkid = txtBnkName.Text.Trim();
                    }
                }
                if (bnkid != "0" && bnkid != string.Empty)
                {
                    bnk = bnkid;
                    bnkid = subjectcode("BnkNa", bnkid);
                }
                if (accForId != "0" && accForId != string.Empty)
                {
                    accFor = accForId;
                    accForId = subjectcode("BnkFo", accForId);
                }
                accNo = txtBnkAccNo.Text.Trim();
                debitNo = txtBnkDebit.Text.Trim();
                ifscode = txtBnkIFSC.Text.Trim();
                branch = txtBnkBran.Text.Trim();
                if (bnk != string.Empty && accFor != string.Empty && accNo != string.Empty && branch != string.Empty)
                {
                    if (spreadBankDet.Rows.Count < 2)
                    {
                        loadBnkSpread();
                    }
                    FarPoint.Web.Spread.TextCellType ac = new FarPoint.Web.Spread.TextCellType();
                    FarPoint.Web.Spread.TextCellType tc = new FarPoint.Web.Spread.TextCellType();
                    FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                    cb.AutoPostBack = false;
                    // spreadBankDet.Sheets[0].Cells[rowCnt, 0].Text = Convert.ToString(rowCnt);
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 1].CellType = cb;
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Locked = false;
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Column.Width = 50;
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 1].HorizontalAlign = HorizontalAlign.Center;
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text = Convert.ToString(accFor);
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Tag = Convert.ToString(accForId);
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 3].CellType = ac;
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text = Convert.ToString(accNo);
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 4].CellType = tc;
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 4].Text = Convert.ToString(debitNo);
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 5].Text = Convert.ToString(ifscode);
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 6].Text = Convert.ToString(bnk);
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 6].Tag = Convert.ToString(bnkid);
                    spreadBankDet.Sheets[0].Cells[Convert.ToInt32(activerow), 7].Text = Convert.ToString(branch);
                    spreadBankDet.SaveChanges();
                    txtBnkAccFor.Text = "";
                    txtBnkName.Text = "";
                    txtBnkAccNo.Text = "";
                    txtBnkDebit.Text = "";
                    txtBnkIFSC.Text = "";
                    txtBnkBran.Text = "";
                    loadBnkDropDowns();
                }
                else
                {
                    imgAlert.Visible = true;
                    lblalert.Text = "Please Fill All Fields";
                }
            }
        }
        catch
        {
        }
    }
    protected void ddlRelType_indexchange(object sender, EventArgs e)
    {
        ddl_collegeRel_SelectedIndexchange(sender, e);
        if (ddlRelType.SelectedIndex == 0)
        {
            ddlrelBatch.Enabled = true;
        }
        else
        {
            ddlrelBatch.Items.Clear();
            ddlrelBatch.Enabled = false;
        }
        turnVisibility();
    }
    protected void ddl_collegeRel_SelectedIndexchange(object sender, EventArgs e)
    {
        degreeRel();
        branchRel();
        BatchRel();
        NameRel();
        turnVisibility();
    }
    protected void ddldegRel_Indexchange(object sender, EventArgs e)
    {
        branchRel();
        NameRel();
        turnVisibility();
    }
    protected void ddldeptRel_indexchange(object sender, EventArgs e)
    {
        NameRel();
        turnVisibility();
    }
    protected void ddlrelBatch_IndexChange(object sender, EventArgs e)
    {
        degreeRel();
        branchRel();
        NameRel();
        turnVisibility();
    }
    public void degreeRel()
    {
        try
        {
            ddldegRel.Items.Clear();
            string query = "";
            if (ddlRelType.SelectedIndex == 0)
            {
                lbldegRel.Text = "Degree";
                query = "select distinct d.Course_Id,c.Course_Name from Degree d,course c where d.Course_Id=c.Course_Id and d.college_code=c.college_code and d.college_code='" + ddl_collegeRel.SelectedItem.Value + "'";
            }
            else
            {
                lbldegRel.Text = "Department";
                query = "select distinct dept_code as Course_Id,dept_name as Course_Name from hrdept_master where college_code='" + ddl_collegeRel.SelectedItem.Value + "'";
            }
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            int count1 = ds.Tables[0].Rows.Count;
            if (count1 > 0)
            {
                ddldegRel.DataSource = ds;
                ddldegRel.DataTextField = "course_name";
                ddldegRel.DataValueField = "course_id";
                ddldegRel.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void collegeRel()
    {
        try
        {
            ddl_collegeRel.Items.Clear();
            string query = "select collname,college_code from collinfo";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddl_collegeRel.DataSource = ds;
                ddl_collegeRel.DataTextField = "collname";
                ddl_collegeRel.DataValueField = "college_code";
                ddl_collegeRel.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void branchRel()
    {
        try
        {
            ddldeptRel.Items.Clear();
            ds.Clear();
            if (ddlRelType.SelectedIndex == 1)
            {
                lbldeptRel.Text = "Category";
                string query = "select distinct category_name as dept_name,category_code as degree_code from staffcategorizer where college_code='" + ddl_collegeRel.SelectedItem.Value + "'";
                ds = d2.select_method_wo_parameter(query, "Text");
            }
            else
            {
                lbldeptRel.Text = "Department";
                string deg = ddldegRel.SelectedValue;
                if (deg != "--Select--" && deg != null && ddldegRel.SelectedItem.Text != "All")
                {
                    ds = d2.select_method_wo_parameter("select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course,deptprivilages where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.course_id in('" + deg + "') and degree.college_code='" + ddl_collegeRel.SelectedItem.Value + "' and deptprivilages.Degree_code=degree.Degree_code and user_code='" + usercode + "'", "Text");
                }
                else
                {
                    ds = d2.select_method_wo_parameter("select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course,deptprivilages where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and deptprivilages.Degree_code=degree.Degree_code and degree.college_code='" + ddl_collegeRel.SelectedItem.Value + "' and user_code='" + usercode + "'", "Text");
                }
            }
            int count = ds.Tables[0].Rows.Count;
            if (count > 0)
            {
                ddldeptRel.DataSource = ds;
                ddldeptRel.DataTextField = "dept_name";
                ddldeptRel.DataValueField = "degree_code";
                ddldeptRel.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void BatchRel()
    {
        ddlrelBatch.Items.Clear();
        for (int i = DateTime.Now.Year; i > 2000; i--)
        {
            ddlrelBatch.Items.Add(i.ToString());
        }
    }
    public void NameRel()
    {
        try
        {
            ddlRelName.Items.Clear();
            string query = string.Empty;
            string degDeptId = string.Empty;
            string branCatId = string.Empty;
            string collCode = string.Empty;
            string batch = string.Empty;
            collCode = ddl_collegeRel.SelectedValue;
            if (ddlrelBatch.Items.Count > 0)
            {
                batch = ddlrelBatch.SelectedValue;
            }
            if (ddldegRel.Items.Count > 0)
            {
                degDeptId = ddldegRel.SelectedValue;
            }
            if (ddldeptRel.Items.Count > 0)
            {
                branCatId = ddldeptRel.SelectedValue;
            }
            if (ddlRelType.SelectedIndex == 0)
            {
                query = "select distinct App_No as Id,Stud_Name +  '-' + Roll_No as value from Registration where degree_code ='" + branCatId + "' and Batch_Year ='" + batch + "' and CC=0 and DelFlag =0 and Exam_Flag <>'Debar' and college_code  ='" + collCode + "'";
            }
            else
            {
                query = "select distinct sa.appl_id as Id,s.staff_name+  '-' + s.staff_code as value from staff_appl_master sa,staffmaster s,stafftrans t where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and t.dept_code='" + degDeptId + "' and t.category_code ='" + branCatId + "' and s.college_code ='" + collCode + "'";
            }
            DataSet dsRel = new DataSet();
            dsRel = d2.select_method_wo_parameter(query, "Text");
            if (dsRel.Tables.Count > 0 && dsRel.Tables[0].Rows.Count > 0)
            {
                ddlRelName.DataSource = dsRel;
                ddlRelName.DataTextField = "value";
                ddlRelName.DataValueField = "id";
                ddlRelName.DataBind();
            }
        }
        catch { }
    }
    private void loadRelDropDowns()
    {
        collegeRel();
        degreeRel();
        branchRel();
        BatchRel();
        NameRel();
    }
    private void loadRelSpread()
    {
        spreadRelation.Sheets[0].RowCount = 0;
        spreadRelation.Sheets[0].ColumnCount = 0;
        spreadRelation.CommandBar.Visible = false;
        spreadRelation.Sheets[0].AutoPostBack = false;
        spreadRelation.Sheets[0].ColumnHeader.RowCount = 1;
        spreadRelation.Sheets[0].RowHeader.Visible = false;
        spreadRelation.Sheets[0].ColumnCount = 8;
        FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
        darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA"); //Color.Brown;
        darkstyle.ForeColor = Color.Black;
        spreadRelation.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Name";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Department";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Relationship";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Phone No";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 6].Text = "College";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Left;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Type";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 7].HorizontalAlign = HorizontalAlign.Center;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 7].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 7].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].ColumnHeader.Cells[0, 7].Font.Bold = true;
        spreadRelation.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
        spreadRelation.Sheets[0].Columns[0].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].Columns[0].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].Columns[0].Locked = true;
        spreadRelation.Sheets[0].Columns[0].Width = 60;
        spreadRelation.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Left;
        spreadRelation.Sheets[0].Columns[1].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].Columns[1].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].Columns[1].Locked = true;
        spreadRelation.Sheets[0].Columns[1].Width = 150;
        spreadRelation.Sheets[0].Columns[2].HorizontalAlign = HorizontalAlign.Left;
        spreadRelation.Sheets[0].Columns[2].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].Columns[2].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].Columns[2].Locked = true;
        spreadRelation.Sheets[0].Columns[2].Width = 170;
        spreadRelation.Sheets[0].Columns[3].HorizontalAlign = HorizontalAlign.Left;
        spreadRelation.Sheets[0].Columns[3].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].Columns[3].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].Columns[3].Locked = true;
        spreadRelation.Sheets[0].Columns[3].Width = 120;
        spreadRelation.Sheets[0].Columns[4].HorizontalAlign = HorizontalAlign.Left;
        spreadRelation.Sheets[0].Columns[4].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].Columns[4].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].Columns[4].Locked = true;
        spreadRelation.Sheets[0].Columns[4].Width = 100;
        spreadRelation.Sheets[0].Columns[5].HorizontalAlign = HorizontalAlign.Center;
        spreadRelation.Sheets[0].Columns[5].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].Columns[5].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].Columns[5].Locked = true;
        spreadRelation.Sheets[0].Columns[5].Width = 230;
        spreadRelation.Sheets[0].Columns[6].HorizontalAlign = HorizontalAlign.Center;
        spreadRelation.Sheets[0].Columns[6].Font.Size = FontUnit.Medium;
        spreadRelation.Sheets[0].Columns[6].Font.Name = "Book Antiqua";
        spreadRelation.Sheets[0].Columns[6].Locked = true;
        spreadRelation.Sheets[0].Columns[6].Width = 100;
        spreadRelation.Rows.Count++;
        spreadRelation.SaveChanges();
    }
    protected void addRelDetails(object sender, EventArgs e)
    {
        try
        {
            string stafStudId = "0";
            string stafStudName = string.Empty;
            string batch = "0";
            string degDeptId = "0";
            string degDept = string.Empty;
            string branCatId = "0";
            string branCat = string.Empty;
            string relName = string.Empty;
            string relId = string.Empty;
            string relRelship = string.Empty;
            string phoneno = string.Empty;
            string collName = string.Empty;
            string collCode = "0";
            collName = ddl_collegeRel.SelectedItem.Text.Trim();
            collCode = ddl_collegeRel.SelectedValue;
            stafStudName = ddlRelType.SelectedItem.Text;
            if (ddlRelType.SelectedIndex == 0)
            {
                stafStudId = "0";
            }
            else
            {
                stafStudId = "1";
            }
            if (ddlrelBatch.Items.Count > 0)
            {
                batch = ddlrelBatch.SelectedValue;
            }
            if (ddldegRel.Items.Count > 0)
            {
                degDept = ddldegRel.SelectedItem.Text;
                degDeptId = ddldegRel.SelectedValue;
            }
            if (ddldeptRel.Items.Count > 0)
            {
                branCat = ddldeptRel.SelectedItem.Text;
                branCatId = ddldeptRel.SelectedValue;
            }
            if (ddlRelName.Items.Count > 0)
            {
                relName = ddlRelName.SelectedItem.Text;
                relId = ddlRelName.SelectedValue;
            }
            relRelship = txtrelRelship.Text.Trim();
            phoneno = txtRelPhone.Text.Trim();
            if (degDept != string.Empty && branCat != string.Empty && relName != string.Empty && relRelship != string.Empty && relName != string.Empty)
            {
                if (spreadRelation.Rows.Count < 2)
                {
                    loadRelSpread();
                }
                spreadRelation.Sheets[0].RowCount++;
                int rowCnt = spreadRelation.Sheets[0].RowCount - 1;
                FarPoint.Web.Spread.TextCellType tc = new FarPoint.Web.Spread.TextCellType();
                FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                cb.AutoPostBack = false;
                spreadRelation.Sheets[0].Cells[rowCnt, 0].Text = Convert.ToString(rowCnt);
                spreadRelation.Sheets[0].Cells[rowCnt, 1].CellType = cb;
                spreadRelation.Sheets[0].Cells[rowCnt, 1].Column.Width = 50;
                spreadRelation.Sheets[0].Cells[rowCnt, 1].Locked = false;
                spreadRelation.Sheets[0].Cells[rowCnt, 1].HorizontalAlign = HorizontalAlign.Center;
                spreadRelation.Sheets[0].Cells[rowCnt, 2].Text = Convert.ToString(relName);
                spreadRelation.Sheets[0].Cells[rowCnt, 2].Tag = Convert.ToString(relId);
                spreadRelation.Sheets[0].Cells[rowCnt, 3].Text = Convert.ToString(degDept + "-" + branCat);
                spreadRelation.Sheets[0].Cells[rowCnt, 3].Tag = Convert.ToString(degDeptId + "-" + branCatId);
                spreadRelation.Sheets[0].Cells[rowCnt, 4].Text = Convert.ToString(relRelship);
                spreadRelation.Sheets[0].Cells[rowCnt, 5].CellType = tc;
                spreadRelation.Sheets[0].Cells[rowCnt, 5].Text = Convert.ToString(phoneno);
                spreadRelation.Sheets[0].Cells[rowCnt, 5].Tag = Convert.ToString(batch);
                spreadRelation.Sheets[0].Cells[rowCnt, 6].Text = Convert.ToString(collName);
                spreadRelation.Sheets[0].Cells[rowCnt, 6].Tag = Convert.ToString(collCode);
                spreadRelation.Sheets[0].Cells[rowCnt, 7].Text = Convert.ToString(stafStudName);
                spreadRelation.Sheets[0].Cells[rowCnt, 7].Tag = Convert.ToString(stafStudId);
                spreadRelation.SaveChanges();
                txtrelRelship.Text = "";
                txtRelPhone.Text = "";
                loadRelDropDowns();
            }
            else
            {
                imgAlert.Visible = true;
                lblalert.Text = "Please Fill All Fields";
            }
        }
        catch { }
        turnVisibility();
    }
    protected void btnRelClear_Click(object sender, EventArgs e)
    {
        //loadRelSpread();
        string checkvalue = "";
        string activerow = "";
        spreadRelation.SaveChanges();
        activerow = spreadRelation.ActiveSheetView.ActiveRow.ToString();
        for (int i = 0; i < spreadRelation.Sheets[0].RowCount; i++)
        {
            checkvalue = Convert.ToString(spreadRelation.Sheets[0].Cells[Convert.ToInt32(i), 1].Value);
            if (checkvalue == "1")
            {
                spreadRelation.Rows[Convert.ToInt32(activerow)].Remove();
            }
        }
        turnVisibility();
    }
    protected void btnreldetupdater_Click(object sender, EventArgs e)
    {
        try
        {
            string checkvalue = "";
            string activerow = "";
            spreadRelation.SaveChanges();
            activerow = spreadRelation.ActiveSheetView.ActiveRow.ToString();
            checkvalue = Convert.ToString(spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Value);
            if (checkvalue == "1")
            {
                string stafStudId = "0";
                string stafStudName = string.Empty;
                string batch = "0";
                string degDeptId = "0";
                string degDept = string.Empty;
                string branCatId = "0";
                string branCat = string.Empty;
                string relName = string.Empty;
                string relId = string.Empty;
                string relRelship = string.Empty;
                string phoneno = string.Empty;
                string collName = string.Empty;
                string collCode = "0";
                collName = ddl_collegeRel.SelectedItem.Text.Trim();
                collCode = ddl_collegeRel.SelectedValue;
                stafStudName = ddlRelType.SelectedItem.Text;
                if (ddlRelType.SelectedIndex == 0)
                {
                    stafStudId = "0";
                }
                else
                {
                    stafStudId = "1";
                }
                if (ddlrelBatch.Items.Count > 0)
                {
                    batch = ddlrelBatch.SelectedValue;
                }
                if (ddldegRel.Items.Count > 0)
                {
                    degDept = ddldegRel.SelectedItem.Text;
                    degDeptId = ddldegRel.SelectedValue;
                }
                if (ddldeptRel.Items.Count > 0)
                {
                    branCat = ddldeptRel.SelectedItem.Text;
                    branCatId = ddldeptRel.SelectedValue;
                }
                if (ddlRelName.Items.Count > 0)
                {
                    relName = ddlRelName.SelectedItem.Text;
                    relId = ddlRelName.SelectedValue;
                }
                relRelship = txtrelRelship.Text.Trim();
                phoneno = txtRelPhone.Text.Trim();
                if (degDept != string.Empty && branCat != string.Empty && relName != string.Empty && relRelship != string.Empty && relName != string.Empty)
                {
                    if (spreadRelation.Rows.Count < 2)
                    {
                        loadRelSpread();
                    }
                    FarPoint.Web.Spread.TextCellType tc = new FarPoint.Web.Spread.TextCellType();
                    FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                    cb.AutoPostBack = false;
                    //  spreadRelation.Sheets[0].Cells[rowCnt, 0].Text = Convert.ToString(rowCnt);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 1].CellType = cb;
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Column.Width = 50;
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Locked = false;
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 1].HorizontalAlign = HorizontalAlign.Center;
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text = Convert.ToString(relName);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Tag = Convert.ToString(relId);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Text = Convert.ToString(degDept + "-" + branCat);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Tag = Convert.ToString(degDeptId + "-" + branCatId);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 4].Text = Convert.ToString(relRelship);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 5].CellType = tc;
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 5].Text = Convert.ToString(phoneno);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 5].Tag = Convert.ToString(batch);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 6].Text = Convert.ToString(collName);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 6].Tag = Convert.ToString(collCode);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 7].Text = Convert.ToString(stafStudName);
                    spreadRelation.Sheets[0].Cells[Convert.ToInt32(activerow), 7].Tag = Convert.ToString(stafStudId);
                    spreadRelation.SaveChanges();
                    txtrelRelship.Text = "";
                    txtRelPhone.Text = "";
                    loadRelDropDowns();
                }
                else
                {
                    imgAlert.Visible = true;
                    lblalert.Text = "Please Fill All Fields";
                }
            }
        }
        catch
        {
        }
    }
    protected void rblReferredBy_IndexChange(object sender, EventArgs e)
    {
        try
        {
            divReferStaff.Visible = false;
            lblStaffId.Text = string.Empty;
            divReferOther.Visible = false;
            if (rblReferredBy.SelectedIndex == 0)
            {
                //Direct
            }
            else if (rblReferredBy.SelectedIndex == 1)
            {
                //Referred By Staff
                divReferStaff.Visible = true;
            }
            else if (rblReferredBy.SelectedIndex == 2)
            {
                divReferStudent.Visible = true;
            }
            else
            {
                //Referred by Others
                divReferOther.Visible = true;
            }
        }
        catch { }
        turnVisibility();
    }
    private void loadRefDropDowns()
    {
        ddlrefConsName.Items.Clear();
        ddlRefAgent.Items.Clear();
        ddlRefState.Items.Clear();
        try
        {
            string selQ = "select Textval,Textcode from textvaltable where textcriteria='ConsN' and college_code=" + collegecode + "";
            DataSet dsLan = new DataSet();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddlrefConsName.DataSource = dsLan;
                ddlrefConsName.DataTextField = "Textval";
                ddlrefConsName.DataValueField = "Textcode";
                ddlrefConsName.DataBind();
            }
            selQ = "select Textval,Textcode from textvaltable where textcriteria='Agnt' and college_code=" + collegecode + "";
            dsLan.Clear();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddlRefAgent.DataSource = dsLan;
                ddlRefAgent.DataTextField = "Textval";
                ddlRefAgent.DataValueField = "Textcode";
                ddlRefAgent.DataBind();
            }
            selQ = "select Textval,Textcode from textvaltable where textcriteria='state' and college_code=" + collegecode + "";
            dsLan.Clear();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddlRefState.DataSource = dsLan;
                ddlRefState.DataTextField = "Textval";
                ddlRefState.DataValueField = "Textcode";
                ddlRefState.DataBind();
            }
        }
        catch { }
        ddlrefConsName.Items.Insert(0, "Select");
        ddlrefConsName.Items.Add("Others");
        ddlRefAgent.Items.Insert(0, "Select");
        ddlRefAgent.Items.Add("Others");
        ddlRefState.Items.Insert(0, "Select");
        ddlRefState.Items.Add("Others");
        txtrefConsName.Text = "";
        txtRefAgent.Text = "";
        txtRefState.Text = "";
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetStaffName(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            WebService ws = new WebService();
            string query = " select top 100 staff_name+'-'+staff_code from staffmaster where resign<>1 and staff_name like '" + prefixText + "%'  order by staff_name asc -- and college_code= collegecodestat ";
            DataSet dsN = new DataSet();
            name = ws.Getname(query);
        }
        catch { }
        return name;
    }
    protected void txtname_staff_Changed(object sender, EventArgs e)
    {
        string staffid = string.Empty;
        try
        {
            string staffName = "";//txtname_staff.Text.Trim();
            try
            {
                string[] staff = staffName.Split('-');
                if (staffName != string.Empty)
                {
                    staffid = staff[1];
                }
                else
                {
                    staffid = string.Empty;
                }
            }
            catch { staffid = string.Empty; }
        }
        catch { staffid = string.Empty; }
        lblStaffId.Text = staffid;
        turnVisibility();
    }
    private void loadSpreadData(string app_no)
    {
        try
        {
            string collegeStudCode = d2.GetFunction("select college_code from applyn where app_no =" + app_no + "").Trim();
            string spreadQ = "select app_no, course_code, Institute_name, percentage, university_code, totalmark,securedmark, branch_code,Vocational_stream,isnull(markPriority,1) as markPriority from Stud_prev_details where app_no='" + app_no + "'  and isnull(markPriority,1)<>1 order by markPriority asc  select app_no, AccFor, AccNo, DebitCardNo, IFSCCode, BankName, Branch  from studbankdet where  app_no='" + app_no + "'  select application_no, name_roll, course, relationship, isstaff, college_code, ph from stud_relation  where  application_no='" + app_no + "' select isnull(direct_refer ,0) as direct_refer,refer_stcode,refer_name,  refer_phoneno, refer_email, refer_amount, refer_agent, agent_address, agent_city, agent_district, agent_state from applyn  where  app_no='" + app_no + "' select r.Stud_Name+'-'+Roll_No+'-'+dt.dept_acronym as Studentname,r.app_no  from Registration r,applyn a, Degree d,course c,Department dt where a.app_no=r.App_No and dt.Dept_Code=d.Dept_Code and c.Course_Id=d.Course_Id and d.college_code=r.college_code and r.degree_code=d.Degree_Code and direct_refer=3 and r.app_no='" + app_no + "' order by Studentname ";//and a.refer_stcode=a.app_no
            DataSet dsSpreadData = new DataSet();
            dsSpreadData = d2.select_method_wo_parameter(spreadQ, "Text");
            if (dsSpreadData.Tables.Count > 0 && dsSpreadData.Tables[0].Rows.Count > 0)
            {
                for (int row = 0; row < dsSpreadData.Tables[0].Rows.Count; row++)
                {
                    string courseid = Convert.ToString(dsSpreadData.Tables[0].Rows[row]["course_code"]);
                    string course = d2.GetFunction("select Textval from textvaltable where textcriteria='cours' and Textcode='" + courseid + "' and college_code=" + collegeStudCode + "").Trim();
                    string branchGrpId = Convert.ToString(dsSpreadData.Tables[0].Rows[row]["branch_code"]);
                    string branchGrp = d2.GetFunction("select Textval from textvaltable where textcriteria='branc' and Textcode='" + branchGrpId + "' and college_code=" + collegeStudCode + "").Trim();
                    string insName = Convert.ToString(dsSpreadData.Tables[0].Rows[row]["Institute_name"]);
                    string boardUnivId = Convert.ToString(dsSpreadData.Tables[0].Rows[row]["university_code"]);
                    string boardUniv = d2.GetFunction("select Textval from textvaltable where textcriteria='unive' and Textcode='" + boardUnivId + "' and college_code=" + collegeStudCode + "").Trim();
                    string secMarks = Convert.ToString(dsSpreadData.Tables[0].Rows[row]["securedmark"]);
                    string maxMarks = Convert.ToString(dsSpreadData.Tables[0].Rows[row]["totalmark"]);
                    if (insName != string.Empty && secMarks != string.Empty && maxMarks != string.Empty && boardUniv != string.Empty && branchGrp != string.Empty && course != string.Empty)
                    {
                        spreadAcaDet.Sheets[0].RowCount++;
                        int rowCnt = spreadAcaDet.Sheets[0].RowCount - 1;
                        FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                        cb.AutoPostBack = false;
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 0].Text = Convert.ToString(rowCnt);
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 1].CellType = cb;
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 2].Text = Convert.ToString(course);
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 2].Tag = Convert.ToString(courseid);
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 3].Text = Convert.ToString(branchGrp);
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 3].Tag = Convert.ToString(branchGrpId);
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 4].Text = Convert.ToString(insName);
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 5].Text = Convert.ToString(boardUniv);
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 5].Tag = Convert.ToString(boardUnivId);
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 6].Text = Convert.ToString(secMarks);
                        spreadAcaDet.Sheets[0].Cells[rowCnt, 7].Text = Convert.ToString(maxMarks);
                    }
                }
                spreadAcaDet.SaveChanges();
            }
            if (dsSpreadData.Tables.Count > 1 && dsSpreadData.Tables[1].Rows.Count > 0)
            {
                for (int row = 0; row < dsSpreadData.Tables[1].Rows.Count; row++)
                {
                    string bnkid = Convert.ToString(dsSpreadData.Tables[1].Rows[row]["BankName"]);
                    string bnk = d2.GetFunction("select Textval from textvaltable where textcriteria='BnkNa' and Textcode='" + bnkid + "' and college_code=" + collegeStudCode + "").Trim();
                    string accForId = Convert.ToString(dsSpreadData.Tables[1].Rows[row]["AccFor"]);
                    string accFor = d2.GetFunction("select Textval from textvaltable where textcriteria='BnkFo' and Textcode='" + accForId + "' and college_code=" + collegeStudCode + "").Trim();
                    string accNo = Convert.ToString(dsSpreadData.Tables[1].Rows[row]["AccNo"]);
                    string debitNo = Convert.ToString(dsSpreadData.Tables[1].Rows[row]["DebitCardNo"]);
                    string ifscode = Convert.ToString(dsSpreadData.Tables[1].Rows[row]["IFSCCode"]);
                    string branch = Convert.ToString(dsSpreadData.Tables[1].Rows[row]["Branch"]);
                    if (bnk != string.Empty && accFor != string.Empty && accNo != string.Empty && branch != string.Empty)
                    {
                        spreadBankDet.Sheets[0].RowCount++;
                        int rowCnt = spreadBankDet.Sheets[0].RowCount - 1;
                        FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                        cb.AutoPostBack = false;
                        FarPoint.Web.Spread.TextCellType ac = new FarPoint.Web.Spread.TextCellType();
                        FarPoint.Web.Spread.TextCellType tc = new FarPoint.Web.Spread.TextCellType();
                        spreadBankDet.Sheets[0].Cells[rowCnt, 0].Text = Convert.ToString(rowCnt);
                        spreadBankDet.Sheets[0].Cells[rowCnt, 1].CellType = cb;
                        spreadBankDet.Sheets[0].Cells[rowCnt, 1].Locked = false;
                        spreadBankDet.Sheets[0].Cells[rowCnt, 2].Text = Convert.ToString(accFor);
                        spreadBankDet.Sheets[0].Cells[rowCnt, 2].Tag = Convert.ToString(accForId);
                        spreadBankDet.Sheets[0].Cells[rowCnt, 3].CellType = ac;
                        spreadBankDet.Sheets[0].Cells[rowCnt, 3].Text = Convert.ToString(accNo);
                        spreadBankDet.Sheets[0].Cells[rowCnt, 4].CellType = tc;
                        spreadBankDet.Sheets[0].Cells[rowCnt, 4].Text = Convert.ToString(debitNo);
                        spreadBankDet.Sheets[0].Cells[rowCnt, 5].CellType = tc;
                        spreadBankDet.Sheets[0].Cells[rowCnt, 5].Text = Convert.ToString(ifscode);
                        spreadBankDet.Sheets[0].Cells[rowCnt, 6].CellType = tc;
                        spreadBankDet.Sheets[0].Cells[rowCnt, 6].Text = Convert.ToString(bnk);
                        spreadBankDet.Sheets[0].Cells[rowCnt, 6].Tag = Convert.ToString(bnkid);
                        spreadBankDet.Sheets[0].Cells[rowCnt, 7].CellType = tc;
                        spreadBankDet.Sheets[0].Cells[rowCnt, 7].Text = Convert.ToString(branch);
                        
                    }
                }
                spreadBankDet.SaveChanges();
            }
            if (dsSpreadData.Tables.Count > 2 && dsSpreadData.Tables[2].Rows.Count > 0)
            {
                for (int row = 0; row < dsSpreadData.Tables[2].Rows.Count; row++)
                {
                    string stafStudId = Convert.ToString(dsSpreadData.Tables[2].Rows[row]["isstaff"]).Trim();
                    string stafStudName = stafStudId == "0" ? "Student" : "Staff";
                    string batch = "0";
                    string degDeptId = "0";
                    string degDept = string.Empty;
                    string branCatId = "0";
                    string branCat = string.Empty;
                    string relName = Convert.ToString(dsSpreadData.Tables[2].Rows[row]["name_roll"]).Split('-')[0];
                    string relId = Convert.ToString(dsSpreadData.Tables[2].Rows[row]["name_roll"]).Split('-')[1];
                    string relRelship = Convert.ToString(dsSpreadData.Tables[2].Rows[row]["relationship"]);
                    string phoneno = Convert.ToString(dsSpreadData.Tables[2].Rows[row]["ph"]);
                    string collCode = Convert.ToString(dsSpreadData.Tables[2].Rows[row]["college_code"]);
                    string collName = d2.GetFunction("select collname from collinfo where college_code='" + collCode + "'").Trim();
                    string cour = Convert.ToString(dsSpreadData.Tables[2].Rows[row]["course"]);
                    if (stafStudId == "0")
                    {
                        batch = d2.GetFunction("select batch_year from applyn where app_no =" + app_no + "");
                        degDeptId = d2.GetFunction("select c.Course_Id from Degree d,course c,Department dt where d.Course_Id=c.Course_Id and d.Dept_Code =dt.Dept_Code and d.college_code=c.college_code and d.college_code ='" + collegeStudCode + "' and d.Degree_Code='" + cour + "'");
                        degDept = d2.GetFunction("select c.Course_Name from Degree d,course c,Department dt where d.Course_Id=c.Course_Id and d.Dept_Code =dt.Dept_Code and d.college_code=c.college_code and d.college_code ='" + collegeStudCode + "' and d.Degree_Code='" + cour + "'");
                        branCatId = cour;
                        branCat = d2.GetFunction("select dt.Dept_Name,c.Course_Name from Degree d,course c,Department dt where d.Course_Id=c.Course_Id and d.Dept_Code =dt.Dept_Code and d.college_code=c.college_code and d.college_code ='" + collegeStudCode + "' and d.Degree_Code='" + cour + "'");
                    }
                    else
                    {
                        degDeptId = cour;
                        degDept = d2.GetFunction("select dept_name as Course_Name from hrdept_master where college_code='" + collegeStudCode + "' and dept_code='" + cour + "'");
                        branCatId = d2.GetFunction("select t.category_code,c.category_name   from staff_appl_master sa,staffmaster s,stafftrans t,staffcategorizer c where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and t.category_code =c.category_code  and sa.appl_id ='" + relId + "' and t.latestrec ='1' and c.college_code=" + collegeStudCode + " ");
                        branCat = d2.GetFunction("select c.category_name,t.category_code   from staff_appl_master sa,staffmaster s,stafftrans t,staffcategorizer c where sa.appl_no =s.appl_no and s.staff_code =t.staff_code and t.category_code =c.category_code  and sa.appl_id ='" + relId + "' and t.latestrec ='1' and c.college_code=" + collegeStudCode + " ");
                    }
                    if (degDept != string.Empty && branCat != string.Empty && relName != string.Empty && relRelship != string.Empty && relName != string.Empty)
                    {
                        spreadRelation.Sheets[0].RowCount++;
                        int rowCnt = spreadRelation.Sheets[0].RowCount - 1;
                        FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
                        cb.AutoPostBack = false;
                        spreadRelation.Sheets[0].Cells[rowCnt, 0].Text = Convert.ToString(rowCnt);
                        spreadRelation.Sheets[0].Cells[rowCnt, 1].CellType = cb;
                        spreadRelation.Sheets[0].Cells[rowCnt, 1].Locked = false;
                        spreadRelation.Sheets[0].Cells[rowCnt, 2].Text = Convert.ToString(relName);
                        spreadRelation.Sheets[0].Cells[rowCnt, 2].Tag = Convert.ToString(relId);
                        spreadRelation.Sheets[0].Cells[rowCnt, 3].Text = Convert.ToString(degDept + "-" + branCat);
                        spreadRelation.Sheets[0].Cells[rowCnt, 3].Tag = Convert.ToString(degDeptId + "-" + branCatId);
                        spreadRelation.Sheets[0].Cells[rowCnt, 4].Text = Convert.ToString(relRelship);
                        FarPoint.Web.Spread.TextCellType tc = new FarPoint.Web.Spread.TextCellType();
                        spreadRelation.Sheets[0].Cells[rowCnt, 5].CellType = tc;
                        spreadRelation.Sheets[0].Cells[rowCnt, 5].Text = Convert.ToString(phoneno);
                        spreadRelation.Sheets[0].Cells[rowCnt, 5].Tag = Convert.ToString(batch);
                        spreadRelation.Sheets[0].Cells[rowCnt, 6].Text = Convert.ToString(collName);
                        spreadRelation.Sheets[0].Cells[rowCnt, 6].Tag = Convert.ToString(collCode);
                        spreadRelation.Sheets[0].Cells[rowCnt, 7].Text = Convert.ToString(stafStudName);
                        spreadRelation.Sheets[0].Cells[rowCnt, 7].Tag = Convert.ToString(stafStudId);
                    }
                }
                spreadRelation.SaveChanges();
            }
            if (dsSpreadData.Tables.Count > 3 && dsSpreadData.Tables[3].Rows.Count > 0)
            {
                //Referred by
                byte referredByType = 0;
                byte.TryParse(Convert.ToString(dsSpreadData.Tables[3].Rows[0]["direct_refer"]), out referredByType);
                if (referredByType == 0)
                {
                    //Direct
                    rblReferredBy.SelectedIndex = referredByType;
                    divReferStaff.Attributes.Add("Style", "display:none;float:left;");
                    divReferStudent.Attributes.Add("Style", "display:none;float:left;");
                }
                else if (referredByType == 1)
                {
                    //Referred By Staff
                    rblReferredBy.SelectedIndex = referredByType;
                    string staffid = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["refer_stcode"]).Trim();
                    //lblStaffId.Text = staffid;
                    //string txt = d2.GetFunction("select staff_name+'-'+staff_code from staffmaster where resign<>1 and staff_code='" + staffid + "' --appl_no='" + staffid + "' ").Trim();
                    //txtname_staff.Text = txt == "0" ? string.Empty : txt;
                    txtname_staff.SelectedIndex = txtname_staff.Items.IndexOf(txtname_staff.Items.FindByValue(staffid));
                    divReferStaff.Attributes.Add("Style", "display:block;float:left;");
                    divReferStudent.Attributes.Add("Style", "display:none;float:left;");
                }
                else if (referredByType == 3)
                {
                    rblReferredBy.SelectedIndex = Convert.ToInt32(referredByType) - 1;
                    string studentreferapp_no = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["refer_stcode"]).Trim();
                    ddl_ReferStudent.SelectedIndex = ddl_ReferStudent.Items.IndexOf(ddl_ReferStudent.Items.FindByValue(studentreferapp_no));
                    divReferStudent.Attributes.Add("Style", "display:block;float:left;");
                    divReferStaff.Attributes.Add("Style", "display:none;float:left;");
                }
                else
                {
                    //Referred by Others
                    rblReferredBy.SelectedIndex = referredByType;
                    string consName = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["refer_name"]).Trim();
                    string agenName = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["refer_agent"]).Trim();
                    string amtRs = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["refer_amount"]).Trim();
                    string address = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["agent_address"]).Trim();
                    string city = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["agent_city"]).Trim();
                    string district = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["agent_district"]).Trim();
                    string state = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["agent_state"]).Trim();
                    string phoneno = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["refer_phoneno"]).Trim();
                    string emailid = Convert.ToString(dsSpreadData.Tables[3].Rows[0]["refer_email"]).Trim();
                    txtRefAmt.Text = amtRs;
                    txtRefAddres.Text = address;
                    txtRefCity.Text = city;
                    txtRefDist.Text = district;
                    txtRefPhone.Text = phoneno;
                    txtRefEmail.Text = emailid;
                    ddlrefConsName.SelectedIndex = ddlrefConsName.Items.IndexOf(ddlrefConsName.Items.FindByValue(consName));
                    ddlRefAgent.SelectedIndex = ddlRefAgent.Items.IndexOf(ddlRefAgent.Items.FindByValue(agenName));
                    ddlRefState.SelectedIndex = ddlRefState.Items.IndexOf(ddlRefState.Items.FindByValue(state));
                    divReferOther.Attributes.Add("Style", "display:block;float:left;");
                }
            }
        }
        catch { }
    }
    private void loadStudDataOld(string app_no)
    {
    }
    private void turnVisibility()
    {
        try
        {
            
                
           
            if (ddlmothertounge.SelectedItem.Text == "Others")
            {
                txt_mothertounge.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_mothertounge.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlcountry.SelectedItem.Text == "Others")
            {
                txt_othernationality.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_othernationality.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlbloodgroup.SelectedItem.Text == "Others")
            {
                txt_otherbloodgroup.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_otherbloodgroup.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlfaterquali.SelectedItem.Text == "Others")
            {
                txt_faterquali.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_faterquali.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlmotherqual.SelectedItem.Text == "Others")
            {
                txt_motherqual.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_motherqual.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddloccupation.SelectedItem.Text == "Others")
            {
                txt_occupation.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_occupation.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlmotheroccupation.SelectedItem.Text == "Others")
            {
                txt_motheroccupation.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_motheroccupation.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlpstate.SelectedItem.Text == "Others")
            {
                txt_potherstate.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_potherstate.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlcstate.SelectedItem.Text == "Others")
            {
                txt_cotherstate.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_cotherstate.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlexaminationug.SelectedItem.Text == "Others")
            {
                txt_qulifyexam.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_qulifyexam.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlmediumstudy.SelectedItem.Text == "Others")
            {
                txt_mediumstudy.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_mediumstudy.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlmediumofstudyXII.SelectedItem.Text == "Others")
            {
                txt_ddlmediumofStudyXII.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_ddlmediumofStudyXII.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlreligion.SelectedItem.Text == "Christian")
            {
                ddlsubreligion.Attributes.Add("Style", "display:block;float:left;");
                if (ddlsubreligion.SelectedItem.Text == "Others")
                {
                    txt_otherreligion.Attributes.Add("Style", "display:block;float:left;");
                }
                else
                {
                    txt_otherreligion.Attributes.Add("Style", "display:none;float:left;");
                }
            }
            else
            {
                ddlsubreligion.Attributes.Add("Style", "display:none;float:left;");
                txt_otherreligion.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlPartLang2.SelectedItem.Text == "Others")
            {
                txtLangPart2.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txtLangPart2.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlPartLang3.SelectedItem.Text == "Others")
            {
                txtLangPart3.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txtLangPart3.Attributes.Add("Style", "display:none;float:left;");
            }
            //Added By SaranyaDevi 22.2.2018
            if (ddlscholarship.SelectedItem.Text == "Others")
            {
                txt_subscholar.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_subscholar.Attributes.Add("Style", "display:none;float:left;");
            }
            //End By SaranyaDevi 22.2.2018


            if (ddlAcaCourse.SelectedItem.Text == "Others")
            {
                txtAcaCourse.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txtAcaCourse.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlAcaUniv.SelectedItem.Text == "Others")
            {
                txtAcaUniv.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txtAcaUniv.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlAcaBran.SelectedItem.Text == "Others")
            {
                txtAcaBran.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txtAcaBran.Attributes.Add("Style", "display:none;float:left;");
            }
            if (ddlBnkAccFor.SelectedItem.Text == "Others")
            {
                txtBnkAccFor.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txtBnkAccFor.Attributes.Add("Style", "display:none;float:left;");
            }
          
            if (ddlBnkName.SelectedItem.Text == "Others")
            {
                txtBnkName.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txtBnkName.Attributes.Add("Style", "display:none;float:left;");
            }
            if (rblReferredBy.SelectedIndex == 0)
            {
                divReferStaff.Attributes.Add("Style", "display:none;float:left;");
                divReferOther.Attributes.Add("Style", "display:none;float:left;");
            }
            else if (rblReferredBy.SelectedIndex == 1)
            {
                divReferStaff.Attributes.Add("Style", "display:block;float:left;");
                divReferOther.Attributes.Add("Style", "display:none;float:left;");
            }
            else if (rblReferredBy.SelectedIndex == 2)
            {
                divReferOther.Attributes.Add("Style", "display:block;float:left;");
                divReferOther.Attributes.Add("Style", "display:none;float:left;");
            }
            else
            {
                divReferStaff.Attributes.Add("Style", "display:none;float:left;");
                divReferOther.Attributes.Add("Style", "display:block;float:left;");
                if (ddlrefConsName.SelectedItem.Text == "Others")
                {
                    txtrefConsName.Attributes.Add("Style", "display:block;float:left;");
                }
                else
                {
                    txtrefConsName.Attributes.Add("Style", "display:none;float:left;");
                }
                if (ddlRefAgent.SelectedItem.Text == "Others")
                {
                    txtRefAgent.Attributes.Add("Style", "display:block;float:left;");
                }
                else
                {
                    txtRefAgent.Attributes.Add("Style", "display:none;float:left;");
                }
                if (ddlRefState.SelectedItem.Text == "Others")
                {
                    txtRefState.Attributes.Add("Style", "display:block;float:left;");
                }
                else
                {
                    txtRefState.Attributes.Add("Style", "display:none;float:left;");
                }
            }

            //krishhna kumar.r
            if (ddl_quata.SelectedItem.Text == "Others")
            {
                txt_quata.Attributes.Add("Style", "display:block;float:left;");
            }
            else
            {
                txt_quata.Attributes.Add("Style", "display:none;float:left;");
            }
            //if (rdbsameyes.Checked)
            //{
            //    communicationdiv.Attributes.Add("Style", "display:none;");
            //}
            //else
            //{
            //    communicationdiv.Attributes.Add("Style", "display:block;");
            //}
        }
        catch { }
    }
    protected void btnExit2_Click(object sender, EventArgs e)
    {
        popaddnewF2.Visible = false;
    }
    protected void btnDelete_Click(object sender, EventArgs e)
    {
        surediv.Visible = true;
    }
    protected void btn_sureyes_Click(object sender, EventArgs e)
    {
        imgAlert.Visible = true;
        surediv.Visible = false;
        string msg = string.Empty;
        try
        {
            if (TextBox3.Text.Trim() != string.Empty)
            {
                string app_no = TextBox3.Text.Trim();
                string delAcaQ = "delete from perv_marks_history from Stud_prev_details s where s.course_entno=perv_marks_history.course_entno and  s.app_no=" + app_no + "   delete from Stud_prev_details where app_no=" + app_no + "  ";
                d2.update_method_wo_parameter(delAcaQ, "Text");
                string delBnkQ = "delete from studbankdet where app_no=" + app_no + "";
                d2.update_method_wo_parameter(delBnkQ, "Text");
                string delRelQ = "delete from stud_relation where application_no='" + app_no + "'";
                d2.update_method_wo_parameter(delRelQ, "Text");
                string delAppQ = "delete from applyn where app_no='" + app_no + "'";
                d2.update_method_wo_parameter(delAppQ, "Text");
                popaddnewF2.Visible = false;
                msg = "Deleted Successfully";
            }
            else
            {
                msg = "Not Deleted";
            }
        }
        catch { msg = "Not Deleted"; }
        lblalert.Text = msg;
        clearall();
        turnVisibility();
    }
    protected void btn_sureno_Click(object sender, EventArgs e)
    {
        surediv.Visible = false;
        turnVisibility();
    }
    protected void openAcademic(object sender, EventArgs e)
    {
        popAcademic.Visible = true;


    }
    protected void closeAcademic(object sender, EventArgs e)
    {
        popAcademic.Visible = false;
        turnVisibility();
    }
    protected void openBank(object sender, EventArgs e)
    {
        popBank.Visible = true;
    }
    protected void closeBank(object sender, EventArgs e)
    {
        popBank.Visible = false;
        turnVisibility();
    }
    protected void openRelation(object sender, EventArgs e)
    {
        popRel.Visible = true;
    }
    protected void closeRelation(object sender, EventArgs e)
    {
        popRel.Visible = false;
        turnVisibility();
    }
    private void loadStaff()
    {
        txtname_staff.Items.Clear();
        try
        {
            string selQ = "select staff_name+'-'+staff_code as staffname,staff_code from staffmaster where resign<>1  and college_code=" + collegecode + "  order by staff_name asc ";
            DataSet dsLan = new DataSet();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                txtname_staff.DataSource = dsLan;
                txtname_staff.DataTextField = "staffname";
                txtname_staff.DataValueField = "staff_code";
                txtname_staff.DataBind();
            }
        }
        catch { }
    }
    private void loadreferstudent()
    {
        ddl_ReferStudent.Items.Clear();
        try
        {
            string selQ = "select Stud_Name+'-'+Roll_No+'-'+dt.dept_acronym as Studentname,app_no  from Registration r,Degree d,course c,Department dt where dt.Dept_Code=d.Dept_Code and c.Course_Id=d.Course_Id and d.college_code=r.college_code and r.degree_code=d.Degree_Code order by Studentname";
            DataSet dsLan = new DataSet();
            dsLan = d2.select_method_wo_parameter(selQ, "Text");
            if (dsLan.Tables.Count > 0 && dsLan.Tables[0].Rows.Count > 0)
            {
                ddl_ReferStudent.DataSource = dsLan;
                ddl_ReferStudent.DataTextField = "Studentname";
                ddl_ReferStudent.DataValueField = "app_no";
                ddl_ReferStudent.DataBind();
            }
        }
        catch { }
    }
    protected void ddl_Mode_IndexChange(object sender, EventArgs e)
    {
        
    }
    protected void ddlAppFormat_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            //string appsave = "if exists(select * from Master_Settings where settings='Application Formate Setting'  and usercode=" + usercode + " ) update Master_Settings set value='" + ddlAppFormat.SelectedIndex + "' where settings='Application Formate Setting' and usercode=" + usercode + "  else insert into Master_Settings (settings,value,usercode) values('Application Formate Setting','" + ddlAppFormat.SelectedIndex + "'," + usercode + ")";
            //int cc = d2.update_method_wo_parameter(appsave, "text");
        }
        catch { }
    }
    private bool isCourseTypePg()
    {
        bool yesPg = false;
        //if (ddl_coursetype.Items.Count > 0 && ddl_coursetype.SelectedItem.Value.Trim().ToUpper() == "PG")
        //{
        //    yesPg = true;
        //}
        return yesPg;
    }
    public void bindcerificate()
    {
        try
        {
            string val = "";
            if (rdbtaany.Checked == true)
            {
                val = "1";
            }
            if (rdbexy.Checked == true)
            {
                if (val == "")
                {
                    val = "2";
                }
                else
                {
                    val = val + "','" + "2";
                }
            }
            if (RadioButton3.Checked == true)
            {
                if (val == "")
                {
                    val = "3";
                }
                else
                {
                    val = val + "','" + "3";
                }
            }
            if (rdbdistinctionsportsYes.Checked == true)
            {
                if (val == "")
                {
                    val = "4";
                }
                else
                {
                    val = val + "','" + "4";
                }
            }
            if (rdbextraactivitesYes.Checked == true)
            {
                if (val == "")
                {
                    val = "5";
                }
                else
                {
                    val = val + "','" + "5";
                }
            }
            if (val == "")
            {
                val = "6";
            }
            else
            {
                val = val + "','" + "6";
            }
            DataTable dt = new DataTable();
            DataRow dr = null;
            string courseid = "";
            dt.Columns.Add("Dummy1");
            dt.Columns.Add("Dummy2");
            dt.Columns.Add("Dummy3");
            dt.Columns.Add("Dummy4");
            string q = "select c.Course_Id from degree d,Department dt,Course C where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.Degree_Code in('" + ddl_courseone.SelectedItem.Value + "') and c.college_code='" + ddl_college.SelectedItem.Value + "'";
            //,'" + ddl_coursetwo.SelectedItem.Value + "'
            ds.Clear();
            ds = d2.select_method_wo_parameter(q, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int y = 0; y < ds.Tables[0].Rows.Count; y++)
                {
                    string courseidvalue = Convert.ToString(ds.Tables[0].Rows[y]["Course_Id"]);
                    if (courseid == "")
                    {
                        courseid = courseidvalue;
                    }
                    else
                    {
                        courseid = courseid + "," + courseidvalue;
                    }
                }
            }
            string query = "select * from CertMasterDet where CourseID in('" + courseid + "') and Categorytype in('" + val + "')";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int y = 0; y < ds.Tables[0].Rows.Count; y++)
                {
                    dr = dt.NewRow();
                    string name = d2.GetFunction("select distinct(Select MasterValue FROM CO_MasterValues T WHERE CertName = T.MasterCode and CollegeCode='" + ddl_college.SelectedItem.Value + "' ) CertName from CertMasterDet where CertName='" + Convert.ToString(ds.Tables[0].Rows[y]["CertName"]) + "' ");
                    string type = typeeetext(Convert.ToString(ds.Tables[0].Rows[y]["Categorytype"]));
                    dr[0] = name + "(" + type + ")";
                    dr[1] = Convert.ToString(ds.Tables[0].Rows[y]["CertName"]);
                    dr[2] = Convert.ToString(ds.Tables[0].Rows[y]["isOrginal"]);
                    dr[3] = Convert.ToString(ds.Tables[0].Rows[y]["isDuplicate"]);
                    dt.Rows.Add(dr);
                }
                GV1.DataSource = dt;
                GV1.Visible = true;
                div_cer.Visible = true;
                GV1.DataBind();
            }
            for (int y = 0; y < ds.Tables[0].Rows.Count; y++)
            {
                string isDuplicate = Convert.ToString(ds.Tables[0].Rows[y]["isDuplicate"]);
                if (isDuplicate == "True")
                {
                    (GV1.Rows[y].FindControl("chk_Duplicate") as CheckBox).Enabled = true;
                }
                else
                {
                    (GV1.Rows[y].FindControl("chk_Duplicate") as CheckBox).Enabled = false;
                    (GV1.Rows[y].FindControl("chk_Duplicate") as CheckBox).Checked = false;
                }
                string orginal = Convert.ToString(ds.Tables[0].Rows[y]["isOrginal"]);
                if (orginal == "True")
                {
                    (GV1.Rows[y].FindControl("chk_orginal") as CheckBox).Enabled = true;
                }
                else
                {
                    (GV1.Rows[y].FindControl("chk_orginal") as CheckBox).Enabled = false;
                    (GV1.Rows[y].FindControl("chk_orginal") as CheckBox).Checked = false;
                }
            }
        }
        catch
        {
        }
    }
    private bool SendSmsAfterSave()
    {
        bool SendSms = false;
        string SendSmsQ = "select LinkValue from New_InsSettings where LinkName='SendSMSafterapplicationsaved' and user_code ='" + usercode + "' -- and college_code ='" + collegecode + "' ";
        byte SendSmsVal = Convert.ToByte(d2.GetFunction(SendSmsQ));
        return SendSms = SendSmsVal == 0 ? false : true;
    }
    //Last Modified by Idhris - 20-09-2016
    protected void btnGrid_OnClick(object sender, EventArgs e)
    {
        ViewState["CurrentTable"] = null;
        ViewState["CurrentTablenew"] = null;
        bindmardkgrid();
        bindmardkgrid_mphil();
    }
    public void CutoffCheck()
    {
        try
        {
            string value = d2.GetFunction("select value from Master_Settings where settings ='CutOfMark' and usercode ='" + usercode + "'");
            if (value == "0")
            {
                txt_cutof.Visible = false;
                txt_cutofpg.Visible = false;
                sp_cutof.Visible = false;
                sp_cutofpg.Visible = false;
                cutof.Visible = false;
                cutoug.Visible = false;
            }
            else
            {
                txt_cutof.Visible = true;
                txt_cutofpg.Visible = true;
                sp_cutof.Visible = true;
                sp_cutofpg.Visible = true;
                cutof.Visible = true;
                cutoug.Visible = true;
            }
        }
        catch
        {
        }
    }
    public bool MarksCheck()
    {
        bool check = false;
        string value = d2.GetFunction("select value from Master_Settings where settings ='Academic Details Setting' and usercode ='" + usercode + "'").Trim();
        if (value == "1")
        {
            check = true;
        }
        return check;
    }
    public void cb_sem_checkedchange(object sender, EventArgs e)
    {
        try
        {
            int cout = 0;
            txt_sem.Text = "--Select--";
            if (cb_sem.Checked == true)
            {
                cout++;
                for (int i = 0; i < cbl_sem.Items.Count; i++)
                {
                    cbl_sem.Items[i].Selected = true;
                }
                txt_sem.Text = lbl_semT.Text + "(" + (cbl_sem.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_sem.Items.Count; i++)
                {
                    cbl_sem.Items[i].Selected = false;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void cbl_sem_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            cb_sem.Checked = false;
            int commcount = 0;
            txt_sem.Text = "--Select--";
            for (int i = 0; i < cbl_sem.Items.Count; i++)
            {
                if (cbl_sem.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    cb_sem.Checked = false;
                }
            }
            if (commcount > 0)
            {
                if (commcount == cbl_sem.Items.Count)
                {
                    cb_sem.Checked = true;
                }
                txt_sem.Text = lbl_semT.Text + "(" + commcount.ToString() + ")";
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void bindsem()
    {
        cbl_sem.Items.Clear();
        txt_sem.Text = "--Select--";
        Boolean first_year;
        first_year = false;
        int duration = 0;
        int i = 0;
        ds.Clear();
        string branch = "";
        string build = "";
        string build1 = "";
        string batch = "";
        if (cbl_branch.Items.Count > 0)
        {
            for (i = 0; i < cbl_branch.Items.Count; i++)
            {
                if (cbl_branch.Items[i].Selected == true)
                {
                    build = cbl_branch.Items[i].Value.ToString();
                    if (branch == "")
                    {
                        branch = build;
                    }
                    else
                    {
                        branch = branch + "," + build;
                    }
                }
            }
        }
        if (ddl_batch.Items.Count > 0)
        {
            batch = Convert.ToString(ddl_batch.SelectedItem.Value);
        }
        //batch = build;
        if (branch.Trim() != "" && batch.Trim() != "")
        {
            // ds = d2.BindSem(branch, batch, ddlcollege.SelectedItem.Value);
            string strsql1 = "select distinct duration,first_year_nonsemester  from degree where degree_code in (" + branch + ") and college_code=" + ddlcollege.SelectedItem.Value + "";
            ds = d2.select_method_wo_parameter(strsql1, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string dur = Convert.ToString(ds.Tables[0].Rows[i][0]);
                    if (dur.Trim() != "")
                    {
                        if (duration < Convert.ToInt32(dur))
                        {
                            duration = Convert.ToInt32(dur);
                        }
                    }
                }
            }
            if (duration != 0)
            {
                for (i = 1; i <= duration; i++)
                {
                    cbl_sem.Items.Add(Convert.ToString(i));
                }
                if (cbl_sem.Items.Count > 0)
                {
                    for (int row = 0; row < cbl_sem.Items.Count; row++)
                    {
                        cbl_sem.Items[row].Selected = true;
                        cb_sem.Checked = true;
                    }
                    txt_sem.Text = lbl_semT.Text + "(" + cbl_sem.Items.Count + ")";
                }
            }
        }
    }
    public void ddl_batch_SelectedIndexChanged(object sender, EventArgs e)
    {
        bindsem();
    }
    public void bindnewsem()
    {
        ddlSemester1.Items.Clear();
        string batch = Convert.ToString(ddlBatch_year.SelectedItem.Value);
        string branch = Convert.ToString(ddlchoice1.SelectedItem.Value);
        int duration = 0;
        if (branch.Trim() != "" && batch.Trim() != "")
        {
            // ds = d2.BindSem(branch, batch, ddlcollege.SelectedItem.Value);
            string strsql1 = "select distinct duration,first_year_nonsemester  from degree where degree_code in (" + branch + ") and college_code=" + ddlclg.SelectedItem.Value + "";
            ds = d2.select_method_wo_parameter(strsql1, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string dur = Convert.ToString(ds.Tables[0].Rows[i][0]);
                    if (dur.Trim() != "")
                    {
                        duration = Convert.ToInt32(dur);
                    }
                }
            }
            if (duration != 0)
            {
                for (int i = 1; i <= duration; i++)
                {
                    ddlSemester1.Items.Add(Convert.ToString(i));
                }
            }
        }
        ddlSemester1.Enabled = false;
    }
    protected void ddlMode_Change(object sender, EventArgs e)
    {
        if (ddlMode.SelectedIndex != 0)
        {
            ddlSemester1.Enabled = true;
        }
        else
        {
            ddlSemester1.Enabled = false;
        }
    }
    protected void GridView_mphil_Bound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            // string ddlvalue = ddlmarkgradeug.SelectedItem.Text;
            if (e.Row.RowIndex == 0)
            {
                e.Row.Cells[11].Visible = false;
            }
            if (rdbugmarks.Checked == true)
            {
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[6].Visible = true;
            }
            else if (rdbuggrade.Checked == true)
            {
                e.Row.Cells[7].Visible = true;
                e.Row.Cells[6].Visible = false;
            }
        }
        if (e.Row.RowType == DataControlRowType.Header)
        {
            // string ddlvalue = ddlmarkgradeug.SelectedItem.Text;
            if (rdbugmarks.Checked == true)
            {
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[6].Visible = true;
            }
            else if (rdbuggrade.Checked == true)
            {
                e.Row.Cells[7].Visible = true;
                e.Row.Cells[6].Visible = false;
            }
        }
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[3].Attributes["Onchange"] = Page.ClientScript.GetPostBackEventReference(GridView_mphil, "Select$" + e.Row.RowIndex);
        }
    }
    protected void GridView_mphil_Rowcommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            int a = Convert.ToInt32(e.CommandArgument);
            string value = (GridView_mphil.Rows[a].FindControl("ddltypeofsubject") as DropDownList).SelectedItem.Text;
            if (value == "Others")
            {
                (GridView_mphil.Rows[a].FindControl("txt_typeofsubject") as TextBox).Visible = true;
                (GridView_mphil.Rows[a].FindControl("txt_typeofsubject") as TextBox).Enabled = true;
            }
            else
            {
                (GridView_mphil.Rows[a].FindControl("txt_typeofsubject") as TextBox).Visible = false;
                (GridView_mphil.Rows[a].FindControl("txt_typeofsubject") as TextBox).Enabled = false;
            }
        }
        catch
        {
        }
    }
    protected void GridView_mphil_OnRowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        int index = Convert.ToInt32(e.RowIndex);
        if (index != 0)
        {
            DataTable dt = ViewState["CurrentTablenew"] as DataTable;
            dt.Rows[index].Delete();
            ViewState["CurrentTablenew"] = dt;
            bindmardkgrid_mphil();
        }
        else
        {
            bindmardkgrid_mphil();
        }
    }
    public void bindmardkgrid_mphil()
    {
        try
        {
            DataTable dt = new DataTable();
            if (ViewState["CurrentTablenew"] == null)
            {
                dt.Columns.Add("Sem/Year", typeof(string));
                dt.Columns.Add("Subject", typeof(string));
                dt.Columns.Add("Type of Subject", typeof(string));
                dt.Columns.Add("Internal Marks", typeof(string));
                dt.Columns.Add("External Marks", typeof(string));
                dt.Columns.Add("Marks", typeof(string));
                dt.Columns.Add("Grade", typeof(string));
                dt.Columns.Add("Month", typeof(string));
                dt.Columns.Add("Year", typeof(string));
                dt.Columns.Add("Maximum Marks", typeof(string));
                string[] monts = { "", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
                int papers = Convert.ToInt32(txtTotSem.Text);
                for (int paper = 0; paper < papers; paper++)
                {
                    dt.Rows.Add("", "", "", "", "", "", "", monts[DateTime.Now.Month], DateTime.Now.Year.ToString(), "100");
                }
                ViewState["CurrentTablenew"] = dt;
                GridView_mphil.DataSource = dt;
                GridView_mphil.DataBind();
            }
            else
            {
                if (value_flage == false)
                {
                    dt = (DataTable)ViewState["CurrentTablenew"];
                    GridView_mphil.DataSource = dt;
                    GridView_mphil.DataBind();
                    SetPreviousData_mphil();
                }
                else
                {
                    SetPreviousData_mphil();
                }
                if (GridView_mphil.Rows.Count > 0)
                    txtTotSem.Text = GridView_mphil.Rows.Count.ToString();
            }
        }
        catch
        {
        }
    }
    public void SetPreviousData_mphil()
    {
        int rowIndex = 0;
        if (ViewState["CurrentTable"] != null)
        {
            DataTable dt = (DataTable)ViewState["CurrentTablenew"];
            if (dt.Rows.Count > 0)
            {
                TextBox box1 = new TextBox();
                TextBox box2 = new TextBox();
                DropDownList box3 = new DropDownList();
                TextBox box4 = new TextBox();
                TextBox box5 = new TextBox();
                TextBox box6 = new TextBox();
                TextBox box7 = new TextBox();
                TextBox box8 = new TextBox();
                TextBox box9 = new TextBox();
                TextBox box10 = new TextBox();
                TextBox box11 = new TextBox();
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    box1 = (TextBox)GridView_mphil.Rows[i].Cells[1].FindControl("txt_semoryear");
                    box2 = (TextBox)GridView_mphil.Rows[i].Cells[2].FindControl("txt_pgsubject");
                    box3 = (DropDownList)GridView_mphil.Rows[i].Cells[3].FindControl("ddltypeofsubject");
                    box4 = (TextBox)GridView_mphil.Rows[i].Cells[4].FindControl("txt_inter");
                    box5 = (TextBox)GridView_mphil.Rows[i].Cells[5].FindControl("txt_exter");
                    box6 = (TextBox)GridView_mphil.Rows[i].Cells[6].FindControl("txt_marks");
                    box7 = (TextBox)GridView_mphil.Rows[i].Cells[7].FindControl("txt_Grade");
                    box8 = (TextBox)GridView_mphil.Rows[i].Cells[8].FindControl("txt_pgmonth");
                    box9 = (TextBox)GridView_mphil.Rows[i].Cells[9].FindControl("txt_pgyear");
                    box10 = (TextBox)GridView_mphil.Rows[i].Cells[10].FindControl("txt_maximum_marks");
                    box11 = (TextBox)GridView_mphil.Rows[i].Cells[11].FindControl("txt_typeofsubject");
                    box1.Text = dt.Rows[i][0].ToString();
                    box2.Text = dt.Rows[i][1].ToString();
                    string value = dt.Rows[i][2].ToString();
                    string[] splitvalue = value.Split('/');
                    if (splitvalue.Length == 2)
                    {
                        box3.Text = Convert.ToString(splitvalue[0]);
                        box10.Text = Convert.ToString(splitvalue[1]);
                        (GridView_mphil.Rows[i].Cells[10].FindControl("txt_typeofsubject") as TextBox).Visible = true;
                    }
                    else
                    {
                        box3.Text = Convert.ToString(splitvalue[0]);
                        (GridView_mphil.Rows[i].Cells[10].FindControl("txt_typeofsubject") as TextBox).Visible = false;
                    }
                    box4.Text = dt.Rows[i][3].ToString();
                    box5.Text = dt.Rows[i][4].ToString();
                    box6.Text = dt.Rows[i][5].ToString();
                    box7.Text = dt.Rows[i][6].ToString();
                    box8.Text = dt.Rows[i][7].ToString();
                    box9.Text = dt.Rows[i][8].ToString();
                    box10.Text = dt.Rows[i][9].ToString();
                    //  box11.Text = dt.Rows[i][11].ToString();
                    rowIndex++;
                }
            }
        }
    }
    protected void GridView_mphil_DataBound(object sender, EventArgs e)
    {
        try
        {
            if (GridView_mphil.Rows.Count > 0)
            {
                for (int a = 0; a < GridView_mphil.Rows.Count; a++)
                {
                    string englisquery = "select TextCode,textval from textvaltable where TextCriteria='tsub' and textval<>'' and college_code ='" + ddl_college.SelectedItem.Value + "' and TextCriteria2='tsub1'  order by textval";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(englisquery, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        (GridView_mphil.Rows[a].FindControl("ddltypeofsubject") as DropDownList).DataSource = ds;
                        (GridView_mphil.Rows[a].FindControl("ddltypeofsubject") as DropDownList).DataTextField = "textval";
                        (GridView_mphil.Rows[a].FindControl("ddltypeofsubject") as DropDownList).DataValueField = "TextCode";
                        (GridView_mphil.Rows[a].FindControl("ddltypeofsubject") as DropDownList).DataBind();
                    }
                    (GridView_mphil.Rows[a].FindControl("ddltypeofsubject") as DropDownList).Items.Insert(0, "---Select---");
                    (GridView_mphil.Rows[a].FindControl("ddltypeofsubject") as DropDownList).Items.Insert((GridView_mphil.Rows[a].FindControl("ddltypeofsubject") as DropDownList).Items.Count, "Others");
                }
            }
        }
        catch
        {
        }
    }
    protected void cb_selectedchange_Click(object sender, EventArgs e)
    {
        if (cbl_datewise.Checked == true)
        {
            txt_fromdate.Enabled = true;
            txt_todate.Enabled = true;
        }
        else
        {
            txt_fromdate.Enabled = false;
            txt_todate.Enabled = false;
        }
    }
    private void setLabelText()
    {
        string grouporusercode = string.Empty;
        if (Session["group_code"] != null && (Convert.ToString(Session["group_code"]).Trim() != "") && (Convert.ToString(Session["group_code"]).Trim() != "0") && (Convert.ToString(Session["group_code"]).Trim() != "-1"))
        {
            grouporusercode = " group_code=" + Convert.ToString(Session["group_code"]).Trim() + "";
        }
        else if (Session["usercode"] != null)
        {
            grouporusercode = " usercode=" + Convert.ToString(Session["usercode"]).Trim() + "";
        }
        List<Label> lbl = new List<Label>();
        List<byte> fields = new List<byte>();
        lbl.Add(lbl_clgT);
        lbl.Add(lbl_degreeT);
        lbl.Add(lbl_branchT);
        lbl.Add(lbl_semT);
        fields.Add(0);
        fields.Add(2);
        fields.Add(3);
        fields.Add(4);
        //lbl.Add(lbl_degreeT);
        //lbl.Add(lbl_degreeT);
        lbl.Add(lblpsem);
        fields.Add(4);
        new HeaderLabelText().setLabels(grouporusercode, ref lbl, fields);
        lblscladd.Text = lbl_clg2.Text + " Address";
        lblsclname.Text = lbl_clg2.Text + " Name";
        //if (lblClgPop2.Text.Trim().ToLower() == "school")
        //{
        //    upExamDet.Visible = false;
        //}
        //else
        //{
        //    upExamDet.Visible = true;
        //}
        upExamDet.Visible = AcademicDetailSetting();
    }
    //Added by Idhris   -- 22-11-2016
    private void BindSemester()
    {
        try
        {
            
        }
        catch { }
    }
    private int YearSemTermWise(ref string dispalyValue, string collegeCode)
    {
        int retVal = 0;
        try
        {
            int.TryParse(d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegeCode + "'"), out retVal);
            if (retVal == 0)
            {
                dispalyValue = " Semester";
            }
            else if (retVal == 1)
            {
                dispalyValue = " Year";
            }
            else if (retVal == 2)
            {
                dispalyValue = " Term";
            }
        }
        catch { retVal = 0; }
        return retVal;
    }
    private bool AcademicDetailSetting()
    {
        bool isTrue = false;
        try
        {
            int val = 0;
            int.TryParse(d2.GetFunction("select value from Master_Settings where settings='Academic Details Setting' and usercode= " + usercode + ""), out val);
            isTrue = val == 1 ? true : false;
        }
        catch { isTrue = false; }
        return isTrue;
    }
    //last Modified by Idhris - 22-11-2016
    //added by sudhagar 23.11.2016
    #region application format1 save
    protected void btnsaves_OnClick(object sender, EventArgs e)
    {
        try
        {
            saveDetails();
        }
        catch { }
    }
    private void saveDetails()
    {
        try
        {
            string batchYr = string.Empty;
            string collegeCode = string.Empty;
            string ApplNo = string.Empty;
            string applName = string.Empty;
            string gender = string.Empty;
            string eduLevel = string.Empty;
            string courseFirst = string.Empty;
            string courseSecond = string.Empty;
            string courseSecondStr = string.Empty;
            string courseSndVal = string.Empty;
            string applMblNo = string.Empty;
            string seatType = string.Empty;
            string studType = string.Empty;
            string term = string.Empty;
            string remarks = string.Empty;
            string a_no = string.Empty;
            string checkno = string.Empty;
            string appldate = string.Empty;
            string feecode = string.Empty;
            string fName = string.Empty;
            int smsCnt = 0;
            bool save = false;
            if (ddlclg.Items.Count > 0)
                collegeCode = Convert.ToString(ddlclg.SelectedItem.Value);
            int valcode = checkFinacialYear(collegeCode);
            if (valcode == 2)
            {
                applicationNoRightsacr();
                if (ddlBatch_year.Items.Count > 0)
                    batchYr = Convert.ToString(ddlBatch_year.SelectedItem.Value);
                if (ddlsex.Items.Count > 0)
                    gender = Convert.ToString(ddlsex.SelectedItem.Value);
                if (ddlcourse.Items.Count > 0)
                    eduLevel = Convert.ToString(ddlcourse.SelectedItem.Value);
                if (ddlsex.Items.Count > 0)
                    gender = Convert.ToString(ddlsex.SelectedItem.Value);
                if (ddlchoice1.Items.Count > 0)
                    courseFirst = Convert.ToString(ddlchoice1.SelectedItem.Value);
                if (ddlchoice2.Items.Count > 0)
                {
                    if (ddlchoice2.SelectedItem.Value != "0")
                    {
                        courseSecondStr = " ,Alternativedegree_code";
                        courseSecond = Convert.ToString(ddlchoice2.SelectedItem.Value);
                        courseSndVal = ",'" + courseSecond + "'";
                    }
                }
                if (appnovalue == "1")
                {
                    int format = 0;
                    a_no = generateApplNo(clgcode, Convert.ToInt32(courseFirst), "", "", "", ddlBatch_year.SelectedValue, out format);//genearateApplNo(clgcode, courseFirst);
                }
                if (!string.IsNullOrEmpty(a_no))
                    txtapplno.Text = a_no;
                ApplNo = Convert.ToString(txtapplno.Text.Trim());
                if (appnovalueacr.Trim() == "1")
                {
                    ApplNo = Convert.ToString(TxtAcrApplno.Text.Trim()) + ApplNo;
                    checkno = d2.GetFunction("select app_formno from applyn where app_formno='" + ApplNo + "'");
                    if (checkno != "0")
                    {
                        imgdiv2.Visible = true;
                        lbl_alert.Visible = true;
                        lbl_alert.Text = "Application No Already Exist";
                        return;
                    }
                }
                else
                {
                    checkno = d2.GetFunction("select app_formno from applyn where app_formno='" + ApplNo + "'");
                    if (checkno != "0")
                    {
                        imgdiv2.Visible = true;
                        lbl_alert.Visible = true;
                        lbl_alert.Text = "Application No Already Exist";
                        return;
                    }
                }
                // applName = Convert.ToString(txtapplname.Text);          
                applName = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(Convert.ToString(txtapplname.Text));
                //fName = Convert.ToString(txtfather.Text);
                fName = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(Convert.ToString(txtfather.Text));
                appldate = Convert.ToString(txtappldate.Text);
                string[] strdatet = appldate.Split('/');
                if (strdatet.Length > 0)
                {
                    string bkdt = strdatet[0].ToString();
                    string bkmn = strdatet[1].ToString();
                    string bkyr = strdatet[2].ToString();
                    appldate = bkmn + "/" + bkdt + "/" + bkyr;
                }
                applMblNo = Convert.ToString(txtmblno.Text);
                string fincyr = d2.GetFunction("select LinkValue  from InsSettings where LinkName = 'Current Financial Year' and  college_code=" + collegeCode + "");
                if (ddl_seattype.Items.Count > 0 && ddl_seattype.SelectedItem.Text.Trim() != "Select")
                    seatType = Convert.ToString(ddl_seattype.SelectedItem.Value);
                else
                    seatType = "0";
                if (ddlMode.Items.Count > 0 && ddlMode.SelectedItem.Text.Trim() != "Select")
                    studType = Convert.ToString(ddlMode.SelectedItem.Value);
                else
                    studType = "0";
                studType = "3";
                if (ddlSemester1.Items.Count > 0)
                    term = Convert.ToString(ddlSemester1.SelectedItem.Value);
                remarks = Convert.ToString(txtrm.Text.Trim());
                //term checking 
                string feeStr = loadFeecatSetting(collegeCode, usercode);
                if (!string.IsNullOrEmpty(feeStr))
                    feecode = d2.GetFunction("select Textcode from textvaltable where textcriteria='FEECA' and college_code='" + collegeCode + "' and textval like '" + feeStr + "'");
                //check fees settings
                string header = string.Empty;
                string ledger = string.Empty;
                double Amount = 0;
                double feeRght = checkApplicationFeeRights();
                if (feeRght != 0)
                {
                    string linkVal = CheckSettings(collegeCode, eduLevel, courseFirst);
                    if (linkVal != "0" && linkVal.Contains(';'))
                    {
                        string[] splval = linkVal.Split(';');
                        header = Convert.ToString(splval[0]);
                        ledger = Convert.ToString(splval[1]);
                        double.TryParse(Convert.ToString(splval[2]), out Amount);
                    }
                }
                if (validateSetting(header, ledger, Amount, feeRght))
                {
                    if (validateDetails(batchYr, collegeCode, ApplNo, applName, courseFirst, appldate, applMblNo, term, feecode, fName))
                    {
                        string appno = InsertDetails(batchYr, collegeCode, ApplNo, applName, courseFirst, appldate, applMblNo, term, courseSecondStr, courseSndVal, seatType, studType, gender, header, ledger, Amount, fincyr, feecode, remarks, fName, feeRght);//delsi0702
                        if (appno != "0")
                        {
                            //stud pre details
                            string user_id = "";

                            string selq = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Sms Content' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "'");
                            string Msg = string.Empty;
                            if (selq != "0" || selq != "")
                            {
                                Msg = selq + " " + "You have registered successfully. Please quote Your Application ID (Application Number) is : " + txtapplno.Text + " for future reference";
                            }
                            else
                            {
                                Msg = "You have registered successfully. Please quote Your Application ID (Application Number) is : " + txtapplno.Text + " for future reference";
                            }
                            string ssr = "select * from Track_Value where college_code='" + Convert.ToString(ddlclg.SelectedItem.Value) + "'"; ds.Clear();
                            ds = d2.select_method_wo_parameter(ssr, "Text");
                            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                user_id = Convert.ToString(ds.Tables[0].Rows[0]["SMS_User_ID"]);
                            if (SendSmsAfterSave())
                                smsCnt = d2.send_sms(user_id, collegeCode, usercode, applMblNo, Msg, "0");
                            //dailytransaction to paid
                            if (feeRght == 1)
                            {
                                if (cbincludercpt.Checked)
                                {
                                    string acronym = string.Empty;
                                    string hdrSetPK = string.Empty;
                                    string receiptNo = generateReceiptNo(out acronym, out hdrSetPK, header);
                                    if (receiptNo != "0")
                                    {
                                        makePaymentDetails(appldate, appno, header, ledger, Amount, feecode, remarks, fincyr, receiptNo, acronym, collegeCode);
                                        string dupReceipt = "  Application Fees";
                                        btnChlnDuplicate0_Click(collegeCode, receiptNo, appno, appldate, dupReceipt);
                                    }
                                }
                            }
                            save = true;
                        }
                        if (save)
                        {
                            txtapplno.Text = "";
                            txtfather.Text = "";
                            //    cbincludercpt.Checked = false;
                            string courseid = Convert.ToString(ddlchoice1.SelectedItem.Value);
                            if (appnovalue == "1")
                            {
                                int format = 0;
                                UpdateApplNo(clgcode, Convert.ToInt32(courseid), "", "", "", ddlBatch_year.SelectedValue, format);
                                txtapplno.Text = generateApplNo(clgcode, Convert.ToInt32(courseid), "", "", "", ddlBatch_year.SelectedValue, out format);
                            }
                            imgdiv2.Visible = true;
                            lbl_alert.Visible = true;
                            lbl_alert.Text = "Saved Successfully";
                        }
                    }
                    else
                    {
                        imgdiv2.Visible = true;
                        lbl_alert.Visible = true;
                        lbl_alert.Text = "Please Enter All The Details";
                    }
                }
                else
                {
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Please Set The Fees Amount";
                }
            }
            else
            {
                if (valcode == 0)
                {
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Please Set Financial Year";
                }
                else if (valcode == 1)
                {
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Please Set Feecategory Settings";
                }
                else if (valcode == 3)
                {
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Please Add Print Settings";
                }
            }
        }
        catch { }
    }
    private void UpdateDetails()
    {
        try
        {
            string batchYr = string.Empty;
            string collegeCode = string.Empty;
            string ApplNo = string.Empty;
            string applName = string.Empty;
            string gender = string.Empty;
            string eduLevel = string.Empty;
            string courseFirst = string.Empty;
            string courseSecond = string.Empty;
            string courseSecondStr = string.Empty;
            string courseSndVal = string.Empty;
            string applMblNo = string.Empty;
            string seatType = string.Empty;
            string studType = string.Empty;
            string term = string.Empty;
            string remarks = string.Empty;
            string a_no = string.Empty;
            string checkno = string.Empty;
            string appldate = string.Empty;
            string feecode = string.Empty;
            string fName = string.Empty;
            int smsCnt = 0;
            bool save = false;
            if (ddlclg.Items.Count > 0)
                collegeCode = Convert.ToString(ddlclg.SelectedItem.Value);
            applicationNoRightsacr();
            if (ddlBatch_year.Items.Count > 0)
                batchYr = Convert.ToString(ddlBatch_year.SelectedItem.Value);
            if (ddlsex.Items.Count > 0)
                gender = Convert.ToString(ddlsex.SelectedItem.Value);
            if (ddlcourse.Items.Count > 0)
                eduLevel = Convert.ToString(ddlcourse.SelectedItem.Value);
            if (ddlsex.Items.Count > 0)
                gender = Convert.ToString(ddlsex.SelectedItem.Value);
            if (ddlchoice1.Items.Count > 0)
                courseFirst = Convert.ToString(ddlchoice1.SelectedItem.Value);
            if (ddlchoice2.Items.Count > 0 && ddlchoice2.SelectedItem.Text.Trim() != "Select")
                courseSndVal = Convert.ToString(ddlchoice2.SelectedItem.Value);
            else
                courseSndVal = "0";
            ApplNo = Convert.ToString(txtapplno.Text.Trim());
            string App_No = d2.GetFunction("select app_no from applyn where app_formno='" + ApplNo + "' and college_code='" + collegeCode + "'");
            //  applName = Convert.ToString(txtapplname.Text);
            applName = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(Convert.ToString(txtapplname.Text));
            //  fName = Convert.ToString(txtfather.Text);
            fName = System.Threading.Thread.CurrentThread.CurrentCulture.TextInfo.ToTitleCase(Convert.ToString(txtfather.Text));
            appldate = Convert.ToString(txtappldate.Text);
            string[] strdatet = appldate.Split('/');
            if (strdatet.Length > 0)
            {
                string bkdt = strdatet[0].ToString();
                string bkmn = strdatet[1].ToString();
                string bkyr = strdatet[2].ToString();
                appldate = bkmn + "/" + bkdt + "/" + bkyr;
            }
            applMblNo = Convert.ToString(txtmblno.Text);
            string fincyr = d2.GetFunction("select LinkValue  from InsSettings where LinkName = 'Current Financial Year' and  college_code=" + collegeCode + "");
            if (ddl_seattype.Items.Count > 0 && ddl_seattype.SelectedItem.Text.Trim() != "Select")
                seatType = Convert.ToString(ddl_seattype.SelectedItem.Value);
            else
                seatType = "0";
            if (ddlMode.Items.Count > 0 && ddlMode.SelectedItem.Text.Trim() != "Select")
                studType = Convert.ToString(ddlMode.SelectedItem.Value);
            else
                studType = "0";
            if (ddlSemester1.Items.Count > 0)
                term = Convert.ToString(ddlSemester1.SelectedItem.Value);
            remarks = Convert.ToString(txtrm.Text.Trim());
            //term checking 
            string feeStr = loadFeecatSetting(collegeCode, usercode);
            if (!string.IsNullOrEmpty(feeStr))
                feecode = d2.GetFunction("select Textcode from textvaltable where textcriteria='FEECA' and college_code='" + collegeCode + "' and textval like '" + feeStr + "'");
            if (validateDetails(batchYr, collegeCode, ApplNo, applName, courseFirst, appldate, applMblNo, term, feecode, fName))
            {
                int appno = updateDet(batchYr, collegeCode, ApplNo, applName, courseFirst, appldate, applMblNo, term, courseSndVal, seatType, studType, gender, fincyr, feecode, remarks, fName, App_No);
                if (appno > 0)
                {
                    popview.Visible = false;
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Updated Successfully";
                }
            }
            else
            {
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                lbl_alert.Text = "Please Enter All The Details";
            }
        }
        catch { }
    }
    private bool validateDetails(string batchYr, string collegeCode, string ApplNo, string applName, string courseFirst, string appldate, string applMblNo, string term, string feecode, string fName)
    {
        bool check = false;
        try
        {
            if (!string.IsNullOrEmpty(batchYr) && !string.IsNullOrEmpty(collegeCode) && !string.IsNullOrEmpty(ApplNo) && !string.IsNullOrEmpty(applName) && !string.IsNullOrEmpty(courseFirst) && !string.IsNullOrEmpty(appldate) && !string.IsNullOrEmpty(applMblNo) && !string.IsNullOrEmpty(term) && !string.IsNullOrEmpty(fName))//&& feecode != "0" 10.01.18 barath
            {
                check = true;
            }
        }
        catch { }
        return check;
    }
    private bool validateSetting(string header, string ledger, double Amount, double feeRght)
    {
        bool check = false;
        try
        {
            if (feeRght == 1)
            {
                if (!string.IsNullOrEmpty(header) && !string.IsNullOrEmpty(ledger) && Amount != 0)
                    check = true;
                else
                    check = false;
            }
            else
                check = true;
        }
        catch { }
        return check;
    }
    private string InsertDetails(string batchYr, string collegeCode, string ApplNo, string applName, string courseFirst, string appldate, string applMblNo, string term, string courseSecondStr, string courseSndVal, string seatType, string studType, string gender, string header, string ledger, double amount, string fincyr, string feecode, string remarks, string fName, double feeRght)//delsi added isconfirmcolumn
    {
        string app_no = string.Empty;
        try
        {
            string appno = "";
            string isenquiry = "1";
            string isenquiry_ForEnquiry = "0";//delsi
            if (IsEnquiry.Checked)
            {
                isenquiry = "0";
                isenquiry_ForEnquiry = "1";
            }
            string InsertQ = "insert into applyn (batch_year,college_code,app_formno,date_applied,degree_code" + courseSecondStr + ",stud_name,sex,remarks,parentf_mobile,IsConfirm,current_semester,admission_status,seattype,mode,parent_name,IsEnquiry)values('" + batchYr + "','" + collegeCode + "','" + ApplNo + "','" + appldate + "','" + courseFirst + "'" + courseSndVal + ",'" + applName + "','" + gender + "','" + remarks + "','" + applMblNo + "','" + isenquiry + "','" + term + "','0','" + seatType + "','" + studType + "','" + fName + "','" + isenquiry_ForEnquiry + "')";
            int insert = d2.update_method_wo_parameter(InsertQ, "Text");
            //appno
            app_no = d2.GetFunction("select app_no from applyn where app_formno ='" + ApplNo + "' and college_code='" + clgcode + "' and stud_name='" + applName + "' and degree_code='" + courseFirst + "'");
            if (feeRght == 1)
            {
                if (app_no != "0" && feecode != "0" && !string.IsNullOrEmpty(feecode))
                {
                    //allot
                    string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + ledger + "') and HeaderFK in('" + header + "') and FeeCategory in('" + feecode + "')  and App_No in('" + app_no + "')) update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='1',FeeAmount='" + amount + "',PaidAmount='0',DeductAmout='0',DeductReason='',TotalAmount='" + amount + "',RefundAmount='0',IsFeeDeposit='0',FeeAmountMonthly='',PayMode='1',PayStartDate='" + appldate + "',PaidStatus='0',DueDate='" + appldate + "',DueAmount='0',FineAmount='0',BalAmount='" + amount + "' where LedgerFK in('" + ledger + "') and HeaderFK in('" + header + "') and FeeCategory in('" + feecode + "') and App_No in('" + app_no + "') else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK) VALUES('" + appldate + "','1'," + app_no + ",'" + ledger + "','" + header + "','" + amount + "','0','','" + amount + "','0','0','','1','" + feecode + "','" + appldate + "','0','" + appldate + "','0','0','" + amount + "','" + fincyr + "')";
                    int ins = d2.update_method_wo_parameter(insupdquery, "Text");
                    ViewState["AppNew"] = app_no;
                }
            }
        }
        catch { app_no = "0"; }
        return app_no;
    }
    private int updateDet(string batchYr, string collegeCode, string ApplNo, string applName, string courseFirst, string appldate, string applMblNo, string term, string courseSndVal, string seatType, string studType, string gender, string fincyr, string feecode, string remarks, string fName, string app_no)
    {
        int insert = 0;
        int insert1 = 0;
        try
        {
            string isenquiry = "1";
            if (IsEnquiry.Checked)
            {
                isenquiry = "0";
            }
            string updateQ = "update applyn set  batch_year='" + batchYr + "',parent_name='" + fName + "',Alternativedegree_code='" + courseSndVal + "',college_code='" + collegeCode + "',date_applied='" + appldate + "',degree_code='" + courseFirst + "',stud_name='" + applName + "',sex='" + gender + "',remarks='" + remarks + "',parentf_mobile='" + applMblNo + "',IsConfirm='" + isenquiry + "',current_semester='" + term + "',app_formno='" + ApplNo + "',seattype='" + seatType + "',Mode='" + studType + "' where app_no='" + app_no + "'";
            insert = d2.update_method_wo_parameter(updateQ, "Text");
            //added by Deepali 09/11/17
            string query = "update registration set stud_name='" + applName + "' where app_no='" + app_no + "' ";
            insert1 = d2.update_method_wo_parameter(query, "Text");
            ViewState["AppNew"] = app_no;
        }
        catch { }
        return insert;
    }
    private void makePaymentDetails(string appldate, string ApplNo, string header, string ledger, double amount, string feecode, string remarks, string fincyr, string receiptno, string acronym, string collegeCode)
    {
        try
        {
            string insertDebit = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate,actualfinyearfk) VALUES('" + appldate + "','" + DateTime.Now.ToLongTimeString() + "','" + receiptno + "', '1', " + ApplNo + ", " + ledger + ", " + header + ", " + feecode + ", 0, " + amount + ", '1', 1, '0', 0, '" + remarks + "', '0', '0', '0', 0, " + usercode + ", " + fincyr + ",'3','1','" + appldate + "','1','" + appldate + "','" + fincyr + "')";
            int save1 = d2.update_method_wo_parameter(insertDebit, "Text");
            #region Update Receipt No and allot
            if (save1 > 0)
            {
                string updatequery = "update FT_FeeAllot set PaidAmount='" + amount + "' ,BalAmount ='0'  where App_No =" + ApplNo + " and feecategory ='" + feecode + "' and ledgerfk ='" + ledger + "' and headerfk='" + header + "'";
                d2.update_method_wo_parameter(updatequery, "Text");
                string updateRecpt = string.Empty;
                string lastRecptNo = receiptno.Remove(0, acronym.Length);
                if (isHeaderwise == 0 || isHeaderwise == 2)
                {
                    updateRecpt = " update FM_FinCodeSettings set RcptStNo=" + lastRecptNo + "+1 where collegecode =" + collegeCode + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + fincyr + " and CollegeCode=" + collegeCode + ")";
                }
                else
                {
                    updateRecpt = "update FM_HeaderFinCodeSettings set RcptStNo=" + lastRecptNo + "+1 where HeaderSettingPK=" + header + " and FinyearFK=" + fincyr + " and CollegeCode=" + collegeCode + "";
                }
                d2.update_method_wo_parameter(updateRecpt, "Text");
            }
            #endregion
        }
        catch { }
    }
    private string CheckSettings(string collegeCode, string eduLevel, string courseFirst)
    {
        string linkValue = string.Empty;
        try
        {
            string linkName = string.Empty;
            string Stream = d2.GetFunction(" select distinct type from course c,degree d where c.course_id=d.course_id and   edu_level='" + eduLevel + "' and degree_code='" + courseFirst + "' and d.college_code ='" + collegeCode + "' and type<>''");
            if (Stream.Trim() == "0")
                linkName = eduLevel + ";" + "Online Application Fees";
            else
                linkName = Stream + ";" + eduLevel + ";" + "Online Application Fees";
            if (!string.IsNullOrEmpty(linkName))
            {
                linkValue = d2.GetFunction(" select linkvalue from New_InsSettings where LinkName='" + linkName + "' and college_code ='" + collegeCode + "'");
            }
        }
        catch { }
        return linkValue;
    }
    public string loadFeecatSetting(string collegecode, string usercode)
    {
        string feeSettingVal = "";
        try
        {
            string linkValue = string.Empty;
            string SelectQ = string.Empty;
            linkValue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'SemesterandYear' and user_code ='" + usercode + "' and college_code ='" + collegecode + "'");
            if (!string.IsNullOrEmpty(linkValue) && linkValue != "0")
                feeSettingVal = "1 Semester";
            else
            {
                linkValue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegecode + "'");
                if (!string.IsNullOrEmpty(linkValue) && linkValue == "0")
                    feeSettingVal = "1 Semester";
                else if (!string.IsNullOrEmpty(linkValue) && linkValue == "1")
                    feeSettingVal = "1 Year";
                else if (!string.IsNullOrEmpty(linkValue) && linkValue == "2")
                    feeSettingVal = "Term 1";
            }
        }
        catch { feeSettingVal = ""; }
        return feeSettingVal;
    }
    protected int checkFinacialYear(string collegeCode)
    {
        int val = 0;
        try
        {
            string fincyr = d2.GetFunction("select LinkValue  from InsSettings where LinkName = 'Current Financial Year' and  college_code=" + collegeCode + "");
            if (fincyr != "0")
            {
                string feeval = loadFeecatSetting(collegecode, usercode);
                if (string.IsNullOrEmpty(feeval))
                    val = 1;
                else
                {
                    string queryPrint = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                    DataSet dsPri = new DataSet();
                    dsPri = d2.select_method_wo_parameter(queryPrint, "Text");
                    if (dsPri.Tables.Count > 0 && dsPri.Tables[0].Rows.Count > 0)
                        val = 2;
                    else
                        val = 3;
                }
            }
        }
        catch { }
        return val;
    }
    protected double checkApplicationFeeRights()
    {
        double feeRght = 0;
        double.TryParse(Convert.ToString(d2.GetFunction("select linkvalue from New_InsSettings where LinkName='IncludeApplicationFeeInAdmission' and user_code ='" + usercode + "'-- and college_code ='" + ddlclg.SelectedItem.Value + "'")), out feeRght);
        return feeRght;
    }
    #endregion
    #region receipt code generation
    public string generateReceiptNo(out string rcpracr, out string hdrSetPK, string hdrs)
    {
        collegecode1 = ddlclg.SelectedValue;
        hdrSetPK = string.Empty;
        rcpracr = string.Empty;
        try
        {
            string HeaderwiseQ = "select LinkValue from New_InsSettings where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
            isHeaderwise = Convert.ToInt32(d2.GetFunction(HeaderwiseQ).Trim());
        }
        catch { isHeaderwise = 0; }
        try
        {
            string insqry1 = "select LinkValue from New_InsSettings where LinkName='ReceiptPrintFormat' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
            int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 5)
                return string.Empty;
        }
        catch { return string.Empty; }
        if (isHeaderwise == 0 || isHeaderwise == 2)
        {
            return getCommonReceiptNo(out rcpracr, out hdrSetPK);
        }
        else
        {
            return getHeaderwiseReceiptNo(out rcpracr, out hdrSetPK, hdrs);
        }
    }
    private string getCommonReceiptNo(out string rcpracr, out string hdrSetPK)
    {
        hdrSetPK = string.Empty;
        rcpracr = string.Empty;
        string recno = string.Empty;
        try
        {
            int receno = 0;
            string recacr = string.Empty;
            string recnoprev = string.Empty;
            string finYearid = d2.GetFunction("select LinkValue from InsSettings where LinkName='Current Financial Year' and college_code=" + collegecode1 + "");
            string secondreciptqurey = "SELECT RcptStNo from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + ")";
            DataSet dsrecYr = new DataSet();
            dsrecYr = d2.select_method_wo_parameter(secondreciptqurey, "Text");
            if (dsrecYr.Tables[0].Rows.Count > 0)
            {
                recnoprev = Convert.ToString(dsrecYr.Tables[0].Rows[0][0]);
                if (recnoprev != "")
                {
                    int recno_cur = Convert.ToInt32(recnoprev);
                    receno = recno_cur;
                }
                string acronymquery = d2.GetFunction("SELECT RcptAcr from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + ")");
                recacr = acronymquery;
                rcpracr = recacr;
                int size = Convert.ToInt32(d2.GetFunction("SELECT  RcptSize from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + ")"));
                string recenoString = receno.ToString();
                if (size != recenoString.Length && size > recenoString.Length)
                {
                    while (size != recenoString.Length)
                    {
                        recenoString = "0" + recenoString;
                    }
                }
                recno = recacr + recenoString;
            }
            return recno;
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanConfirm"); return recno; }
    }
    private string getHeaderwiseReceiptNo(out string rcpracr, out string hdrSetPK, string hdrs)
    {
        hdrSetPK = string.Empty;
        rcpracr = string.Empty;
        string recno = string.Empty;
        try
        {
            int receno = 0;
            string recacr = string.Empty;
            string recnoprev = string.Empty;
            string isheaderFk = hdrs;
            string finYearid = d2.GetFunction("select LinkValue from InsSettings where LinkName='Current Financial Year' and college_code=" + collegecode1 + "");
            DataSet dsFinHedDet = d2.select_method_wo_parameter("select distinct HeaderSettingFk from FM_HeaderFinCodeSettingsDet hs,FM_HeaderFinCodeSettings s where s.HeaderSettingPK=hs.HeaderSettingFK and HeaderFK in (" + isheaderFk + ") and CollegeCode=" + collegecode1 + " and FinyearFK=" + finYearid + "", "Text");
            if (dsFinHedDet.Tables.Count > 0 && dsFinHedDet.Tables[0].Rows.Count == 1)
            {
                hdrSetPK = Convert.ToString(dsFinHedDet.Tables[0].Rows[0][0]);
                string secondreciptqurey = "select * from FM_HeaderFinCodeSettings where HeaderSettingPK =" + hdrSetPK + " and FinyearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " ";
                DataSet dsrecYr = new DataSet();
                dsrecYr = d2.select_method_wo_parameter(secondreciptqurey, "Text");
                if (dsrecYr.Tables.Count > 0 && dsrecYr.Tables[0].Rows.Count > 0)
                {
                    recnoprev = Convert.ToString(dsrecYr.Tables[0].Rows[0]["RcptStNo"]);
                    if (recnoprev != "")
                    {
                        int recno_cur = Convert.ToInt32(recnoprev);
                        receno = recno_cur;
                    }
                    recacr = Convert.ToString(dsrecYr.Tables[0].Rows[0]["RcptAcr"]);
                    int size = Convert.ToInt32(dsrecYr.Tables[0].Rows[0]["Rcptsize"]);
                    string recenoString = receno.ToString();
                    if (size != recenoString.Length && size > recenoString.Length)
                    {
                        while (size != recenoString.Length)
                        {
                            recenoString = "0" + recenoString;
                        }
                    }
                    recno = recacr + recenoString;
                    rcpracr = recacr;
                }
            }
            return recno;
        }
        catch (Exception ex) { return recno; }
    }
    #endregion
    #region Receipt print
    public bool btnChlnDuplicate0_Click(string collegecode1, string recptNo, string AppNo, string recptDt, string dupReceipt)
    {
        bool check = false;
        try
        {
            string queryPrint = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
            DataSet dsPri = new DataSet();
            dsPri = d2.select_method_wo_parameter(queryPrint, "Text");
            if (dsPri.Tables.Count > 0)
            {
                if (dsPri.Tables[0].Rows.Count > 0)
                {
                    string finYearid = d2.GetFunction("select LinkValue from InsSettings where LinkName='Current Financial Year' and college_code=" + collegecode1 + "");
                    //Document Settings
                    PdfDocument recptDoc = new PdfDocument(PdfDocumentFormat.A4);
                    Font FontboldheadC = new Font("Arial", 15, FontStyle.Bold);
                    Font FontboldheadC1 = new Font("Arial", 14, FontStyle.Bold);
                    Font Fontboldhead = new Font("Arial", 12, FontStyle.Bold);
                    Font FontTableHead = new Font("Arial", 8, FontStyle.Bold);
                    Font FontTablebody = new Font("Arial", 8, FontStyle.Regular);
                    Font FontTable = new Font("Arial", 8, FontStyle.Bold);
                    Font tamilFont = new Font("AMUDHAM.TTF", 10, FontStyle.Regular);
                    bool createPDFOK = false;
                    #region For Every selected Receipt
                    //for (int i = 1; i < FpSpread1.Sheets[0].Rows.Count; i++)
                    //{
                    //    byte check = Convert.ToByte(FpSpread1.Sheets[0].Cells[i, 1].Value);
                    //    if (check == 1)
                    //    {
                    //  string recptNo = Convert.ToString(FpSpread1.Sheets[0].Cells[i, 2].Text);
                    // string AppNo = Convert.ToString(FpSpread1.Sheets[0].Cells[i, 4].Tag);
                    string confirmChk = d2.GetFunction(" select distinct Transcode from FT_FinDailyTransaction where TransCode='" + recptNo.Trim() + "' and App_No=" + AppNo + " and isnull(IsCanceled,0)=0");
                    if (confirmChk != null && confirmChk != "" && confirmChk != "0")
                    {
                        string chlnDet = "select Convert(varchar(10),TransDate,103) as TransDate, TransTime, TransCode, MemType, App_No, LedgerFK, HeaderFK, FeeCategory,  Debit, PayMode,   TransType, FinYearFK,Receipttype,DDNo,convert(varchar(10),DDDate,103) as DDDate,(select textval from textvaltable where textcode =DDBankCode) as Bank,DDBankBranch from ft_findailytransaction  where TransCode='" + recptNo + "' and App_No ='" + AppNo + "'";
                        DataSet dsDet = d2.select_method_wo_parameter(chlnDet, "Text");
                        if (dsDet.Tables.Count > 0)
                        {
                            if (dsDet.Tables[0].Rows.Count > 0)
                            {
                                string rollno = string.Empty;
                                string studname = string.Empty;
                                string receiptno = string.Empty;
                                string name = string.Empty;
                                string app_formno = string.Empty;
                                string appnoNew = string.Empty;
                                string Regno = string.Empty;
                                string batchYrSem = string.Empty;
                                string rcptTime = Convert.ToString(dsDet.Tables[0].Rows[0]["TransTime"]);
                                //  string recptDt = Convert.ToString(FpSpread1.Sheets[0].Cells[i, 3].Text);
                                string mode = string.Empty;
                                string paymode = Convert.ToString(dsDet.Tables[0].Rows[0]["PayMode"]);
                                string rcptType = Convert.ToString(dsDet.Tables[0].Rows[0]["Receipttype"]);
                                string modePaySng = string.Empty;
                                string dddates = Convert.ToString(dsDet.Tables[0].Rows[0]["DDDate"]);
                                string ddnos = Convert.ToString(dsDet.Tables[0].Rows[0]["DDNo"]);
                                string ddBanks = Convert.ToString(dsDet.Tables[0].Rows[0]["Bank"]);
                                string ddBrans = Convert.ToString(dsDet.Tables[0].Rows[0]["DDBankBranch"]);
                                switch (paymode)
                                {
                                    case "1":
                                        mode = "Cash";
                                        break;
                                    case "2":
                                        mode = "Cheque";
                                        modePaySng = "\n\nChequeNo : " + ddnos + " Bank : " + ddBanks + "\n\nBranch :" + ddBrans + " Date  : " + dddates;
                                        // mode += modePaySng;
                                        break;
                                    case "3":
                                        mode = "DD";
                                        modePaySng = "\n\nDDNo : " + ddnos + " Bank : " + ddBanks + "\n\nBranch :" + ddBrans + " Date  : " + dddates;
                                        // mode += modePaySng;
                                        break;
                                    case "4":
                                        mode = "Challan";
                                        break;
                                    case "5":
                                        mode = "Online";
                                        break;
                                    default:
                                        mode = "Others";
                                        break;
                                }
                                string queryRollApp;
                                //if (ddlBefAfteAdm.SelectedIndex == 0)
                                //{
                                //    queryRollApp = "select r.Roll_No,a.app_formno,a.app_no, r.Reg_No,r.Stud_Name  from Registration r,applyn a where r.App_No=a.app_no and r.app_no='" + AppNo + "'";
                                //}
                                //else
                                //{
                                queryRollApp = "select app_formno as Roll_No,app_formno,app_no,app_formno as  Reg_No,Stud_Name  from applyn where app_no='" + AppNo + "'";
                                //    }
                                DataSet dsRollApp = new DataSet();
                                dsRollApp = d2.select_method_wo_parameter(queryRollApp, "Text");
                                if (dsRollApp.Tables.Count > 0)
                                {
                                    if (dsRollApp.Tables[0].Rows.Count > 0)
                                    {
                                        rollno = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Roll_No"]);
                                        app_formno = Convert.ToString(dsRollApp.Tables[0].Rows[0]["app_formno"]);
                                        appnoNew = Convert.ToString(dsRollApp.Tables[0].Rows[0]["app_no"]);
                                        Regno = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Reg_No"]);
                                        studname = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Stud_Name"]);
                                    }
                                }
                                name = rollno + "-" + studname;
                                //Print Region
                                try
                                {
                                    #region Print Option For Receipt
                                    PdfPage rcptpage = recptDoc.NewPage();
                                    //Fields to print
                                    #region Settings Input
                                    //Header Div Values
                                    byte collegeid = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeName"]);
                                    byte address1 = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeAdd1"]);
                                    byte address2 = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeAdd2"]);
                                    byte address3 = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeAdd3"]);
                                    byte city = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeDist"]);
                                    byte state = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeState"]);
                                    byte university = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeUniversity"]);
                                    byte rightLogo = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsRightLogo"]);
                                    byte leftLogo = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsLeftLogo"]);
                                    byte time;
                                    if (Convert.ToBoolean(Convert.ToString(dsPri.Tables[0].Rows[0]["IsTime"])))
                                    {
                                        time = 1;
                                    }
                                    else
                                    {
                                        time = 0;
                                    }
                                    byte degACR = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsDegreeAcr"]);
                                    byte degNam = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsDegreeName"]);
                                    byte studnam = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsStudName"]);
                                    byte year = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsYear"]);
                                    byte semester = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsSemester"]);
                                    byte regno = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsRegNo"]);
                                    byte rolno = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsRollNo"]);
                                    byte admno = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsAdminNo"]);
                                    byte fathername = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsFatherName"]);
                                    byte seattype = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsSeatType"]);
                                    //byte setRollAsAdmin = Convert.ToByte(dsPri.Tables[0].Rows[0]["rollas_adm"]);
                                    byte boarding = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsBoarding"]);
                                    byte mothername = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsMontherName"]);
                                    string recptValid = Convert.ToString(dsPri.Tables[0].Rows[0]["ValidDate"]);
                                    //Body Div Values
                                    //byte showAllFees = Convert.ToByte(dsPri.Tables[0].Rows[0]["showallfee"]);
                                    byte allotedAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsAllotedAmt"]);
                                    byte fineAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsFineAmt"]);
                                    byte balAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsBalanceAmt"]);
                                    byte semOrYear = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsSemYear"]);
                                    byte prevPaidAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsPrevPaid"]);
                                    byte excessAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsExcessAmt"]);
                                    // byte totDetails = Convert.ToByte(dsPri.Tables[0].Rows[0]["Total_Details"]);
                                    byte fineInRow = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsFineinRow"]);
                                    //byte totWTselectCol = Convert.ToByte(dsPri.Tables[0].Rows[0]["TotalSelCol"]);
                                    byte concession = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsConcession"]);
                                    string concessionValue = string.Empty;
                                    if (concession != 0)
                                    {
                                        concessionValue = Convert.ToString(dsPri.Tables[0].Rows[0]["ConcessionName"]);
                                    }
                                    //Footer Div Values
                                    byte studCopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsStudCopy"]);
                                    byte officopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsOfficeCopy"]);
                                    byte transCopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsTransportCopy"]);
                                    byte narration = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsNarration"]);
                                    if (narration != 0)
                                    {
                                        mode += modePaySng;
                                    }
                                    byte deduction = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsTotConcession"]);
                                    byte forclgName = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsForCollegeName"]);
                                    byte authSign = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsAuthSign"]);
                                    byte validDate = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsValidUpto"]);
                                    string authSignValue = string.Empty;
                                    if (authSign != 0)
                                    {
                                        authSignValue = Convert.ToString(dsPri.Tables[0].Rows[0]["AuthName"]);
                                    }
                                    byte studOffiCopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["PageType"]);
                                    // byte dispModeWTcash = Convert.ToByte(dsPri.Tables[0].Rows[0]["DisModeWithCash"]);
                                    byte signFile = Convert.ToByte(dsPri.Tables[0].Rows[0]["cashier_sign"]);
                                    //if (signFile != 0)
                                    //{
                                    //if (FileUpload1.HasFile)
                                    //{
                                    //}                                                    
                                    //}
                                    #endregion
                                    #region Students Input
                                    //string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,ISNULL(type,'') as type from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.app_no='" + appnoNew + "' and r.college_code=" + collegecode1 + "";
                                    string colquery = "";
                                    //if (ddlBefAfteAdm.SelectedIndex == 0)
                                    //{
                                    //    colquery = "select collname,university,address1,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,ISNULL( type,'') as type,isnull(r.sections,'') as sections from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and d.college_code=" + collegecode1 + "";
                                    //}
                                    //else
                                    //{
                                    colquery = "select collname,university,address1,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " select a.Current_Semester,a.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,a.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,'' Boarding,a.mother,a.parent_name,ISNULL( type,'') as type,'' Sections from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.App_No='" + appnoNew + "' and d.college_code=" + collegecode1 + "";
                                    // }
                                    string collegename = "";
                                    string add1 = "";
                                    string add2 = "";
                                    string add3 = "";
                                    string univ = "";
                                    string deg = "";
                                    string cursem = "";
                                    string batyr = "";
                                    string seatty = "";
                                    string board = "";
                                    string mothe = "";
                                    string fathe = "";
                                    string stream = "";
                                    string section = "";
                                    double deductionamt = 0;
                                    ds.Clear();
                                    ds = d2.select_method_wo_parameter(colquery, "Text");
                                    if (ds.Tables.Count > 0)
                                    {
                                        if (ds.Tables[0].Rows.Count > 0)
                                        {
                                            collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                            add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                            add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                            add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                                            univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                        }
                                        if (ds.Tables[1].Rows.Count > 0)
                                        {
                                            if (degACR == 0)
                                            {
                                                deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                            }
                                            else
                                            {
                                                deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                            }
                                            cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                            batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                            seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                            board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                            mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                            fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                            stream = Convert.ToString(ds.Tables[1].Rows[0]["type"]);
                                            section = Convert.ToString(ds.Tables[1].Rows[0]["sections"]);
                                        }
                                    }
                                    #endregion
                                    int pagelength = 1;
                                    int rectHeight = 800;
                                    if (studOffiCopy == 1)
                                    {
                                        pagelength = 2;
                                        rectHeight = 380;
                                    }
                                    PdfPage rcptpageTran = recptDoc.NewPage();
                                    int curY = 10;
                                    int curX = 30;
                                    for (int pl = 1; pl <= pagelength; pl++)
                                    {
                                        if (pl == 2)
                                        {
                                            curY = 420;
                                        }
                                        #region Receipt Header
                                        //Rectangle Border
                                        PdfArea rectArea = new PdfArea(recptDoc, 10, curY, 570, rectHeight);
                                        PdfRectangle rectSpace = new PdfRectangle(recptDoc, rectArea, Color.Black);
                                        rcptpage.Add(rectSpace);
                                        //Header Images
                                        //Line1
                                        if (leftLogo != 0)
                                        {
                                            if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg")))
                                            {
                                                PdfImage LogoImage = recptDoc.NewImage(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg"));
                                                rcptpage.Add(LogoImage, curX, curY, 450);
                                            }
                                        }
                                        if (collegeid != 0)
                                        {
                                            curX = 80;
                                            PdfTextArea clgText = new PdfTextArea(FontboldheadC, Color.Black, new PdfArea(recptDoc, curX, curY + 5, 450, 20), ContentAlignment.MiddleCenter, collegename);
                                            rcptpage.Add(clgText);
                                        }
                                        if (rightLogo != 0)
                                        {
                                            if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg")))
                                            {
                                                curX = 500;
                                                PdfImage LogoImage1 = recptDoc.NewImage(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg"));
                                                rcptpage.Add(LogoImage1, curX, curY, 450);
                                            }
                                        }
                                        //Line2
                                        if (university != 0)
                                        {
                                            curY += 20;
                                            curX = 120;
                                            PdfTextArea uniText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY, 350, 20), ContentAlignment.MiddleCenter, univ);
                                            rcptpage.Add(uniText);
                                        }
                                        //Line3
                                        string jaiadd1 = "";
                                        if (address1 != 0 || address2 != 0)
                                        {
                                            curX = 120;
                                            curY += 15;
                                            if (address2 != 0)
                                            {
                                                jaiadd1 = add1 + " " + add2;
                                            }
                                            PdfTextArea addText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY, 350, 20), ContentAlignment.MiddleCenter, jaiadd1);
                                            rcptpage.Add(addText);
                                        }
                                        //Line4
                                        if (address3 != 0)
                                        {
                                            curX = 120;
                                            curY += 15;
                                            PdfTextArea cityText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY, 350, 20), ContentAlignment.MiddleCenter, add3);
                                            rcptpage.Add(cityText);
                                        }
                                        curX = 280;
                                        curY += 35;
                                        //Text Area For Receipt
                                        PdfTextArea headingText = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX - 100, curY, 200, 30), ContentAlignment.MiddleCenter, "RECEIPT" + dupReceipt);
                                        rcptpage.Add(headingText);
                                        int curX1 = 265;
                                        int curX2 = 315;
                                        curY += 21;
                                        //PdfLine underLineRecpt = new PdfLine(recptDoc, new Point(curX1, curY), new Point(curX2, curY), Color.Black, 1);
                                        //rcptpage.Add(underLineRecpt);
                                        #endregion
                                        #region Table 1
                                        int rowIn = 0;
                                        int colIn = 0;
                                        //Table1 Format 
                                        PdfTable tableparts = recptDoc.NewTable(FontTableHead, 7, 7, 5);
                                        tableparts.VisibleHeaders = false;
                                        //Table1 Data
                                        //Line 1
                                        tableparts.Cell(rowIn, colIn).SetContent("Receipt No");
                                        tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                        tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        colIn++;
                                        tableparts.Cell(rowIn, colIn).SetContent(": " + recptNo);
                                        tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                        tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        colIn++;
                                        if (colIn == 6)
                                        {
                                            colIn = 0;
                                            rowIn++;
                                        }
                                        if (studnam != 0)
                                        {
                                            tableparts.Cell(rowIn, colIn).SetContent("Name : " + studname);
                                            tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                            colIn++;
                                            //tableparts.Cell(rowIn, colIn).SetContent(" : " + studname);
                                            //tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            //tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            colIn++;
                                        }
                                        if (colIn == 6)
                                        {
                                            colIn = 0;
                                            rowIn++;
                                        }
                                        tableparts.Cell(rowIn, colIn).SetContent("Date");
                                        tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                        tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        colIn++;
                                        tableparts.Cell(rowIn, colIn).SetContent(": " + recptDt);
                                        tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                        tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        colIn++;
                                        //tableparts.Cell(0, 5).ColSpan = 2;
                                        //Line2
                                        if (colIn == 6)
                                        {
                                            colIn = 0;
                                            rowIn++;
                                        }
                                        if (regno != 0)
                                        {
                                            tableparts.Cell(rowIn, colIn).SetContent("RegNo : " + Regno);
                                            tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                            colIn++;
                                            //tableparts.Cell(rowIn, colIn).SetContent(": " + Regno);
                                            //tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            //tableparts.Cell(rowIn, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            colIn++;
                                            // tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                        }
                                        if (colIn == 6)
                                        {
                                            colIn = 0;
                                            rowIn++;
                                        }
                                        if (rolno != 0)
                                        {
                                            tableparts.Cell(rowIn, colIn).SetContent("RollNo : " + rollno);
                                            tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                            colIn++;
                                            //tableparts.Cell(rowIn, colIn).SetContent(": " + rollno);
                                            //tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            //tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            colIn++;
                                            //  tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                        }
                                        if (colIn == 6)
                                        {
                                            colIn = 0;
                                            rowIn++;
                                        }
                                        if (admno != 0)
                                        {
                                            tableparts.Cell(rowIn, colIn).SetContent("Applciation No: " + app_formno);
                                            tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                            colIn++;
                                            //tableparts.Cell(rowIn, colIn).SetContent(": " + app_formno);
                                            //tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            //tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            colIn++;
                                            //tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                        }
                                        if (colIn == 6)
                                        {
                                            colIn = 0;
                                            rowIn++;
                                        }
                                        if (fathername != 0)
                                        {
                                            tableparts.Cell(rowIn, colIn).SetContent("Father's Name : " + fathe);
                                            tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                            colIn++;
                                            //tableparts.Cell(rowIn, colIn).SetContent(" : " + fathe);
                                            //tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            //tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            colIn++;
                                            //tableparts.Cell(1, 4).ColSpan = 2;
                                        }
                                        if (colIn == 6)
                                        {
                                            colIn = 0;
                                            rowIn++;
                                        }
                                        if (mothername != 0)
                                        {
                                            tableparts.Cell(rowIn, colIn).SetContent("Mother's Name : " + mothe);
                                            tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                            colIn++;
                                            //tableparts.Cell(rowIn, colIn).SetContent(": " + mothe);
                                            //tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            //tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            colIn++;
                                            // tableparts.Cell(1, colIn).ColSpan = 2;
                                        }
                                        //Line 3
                                        if (colIn == 6)
                                        {
                                            colIn = 0;
                                            rowIn++;
                                        }
                                        string batYrSemHead = string.Empty;
                                        string batYrSemCont = string.Empty;
                                        if (degACR != 0)
                                        {
                                            batYrSemHead = "Degree/";
                                            batYrSemCont = deg + "/";
                                        }
                                        if (year != 0)
                                        {
                                            batYrSemHead += "Yr/";
                                            batYrSemCont += " " + romanLetter(returnYearforSem(cursem)) + "/";
                                        }
                                        if (semester != 0)
                                        {
                                            batYrSemHead += "Sem";
                                            batYrSemCont += " " + romanLetter(cursem);
                                            if (section.Trim() != string.Empty)
                                            {
                                                batYrSemCont += "-" + section;
                                            }
                                        }
                                        batYrSemHead = batYrSemHead.TrimEnd('/');
                                        batYrSemCont = batYrSemCont.TrimEnd('/');
                                        if (batYrSemHead != "")
                                        {
                                            tableparts.Cell(rowIn, colIn).SetContent(batYrSemHead + " : " + batYrSemCont);
                                            tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                            colIn++;
                                            //tableparts.Cell(rowIn, colIn).SetContent(": " + batYrSemCont);
                                            //tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            //tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            colIn++;
                                            // tableparts.Cell(2, colIn).ColSpan = 2;
                                        }
                                        if (colIn == 6)
                                        {
                                            colIn = 0;
                                            rowIn++;
                                        }
                                        if (seattype != 0)
                                        {
                                            tableparts.Cell(rowIn, colIn).SetContent("Seat Type : " + seatty);
                                            tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                            colIn++;
                                            //tableparts.Cell(rowIn, colIn).SetContent(": " + seatty);
                                            //tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            //tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            colIn++;
                                            //tableparts.Cell(rowIn, 4).ColSpan = 2;
                                        }
                                        if (colIn == 6)
                                        {
                                            colIn = 0;
                                            rowIn++;
                                        }
                                        if (boarding != 0)
                                        {
                                            tableparts.Cell(rowIn, colIn).SetContent("Boarding : " + board);
                                            tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                            colIn++;
                                            //tableparts.Cell(rowIn, colIn).SetContent(": " + board);
                                            //tableparts.Cell(rowIn, colIn).SetFont(FontTableHead);
                                            //tableparts.Cell(rowIn, colIn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            colIn++;
                                            // tableparts.Cell(rowIn, colIn).ColSpan = 2;
                                        }
                                        curX = 15;
                                        curY += 1;
                                        PdfTablePage addtabletopage1 = tableparts.CreateTablePage(new PdfArea(recptDoc, curX, curY, 600, 200));
                                        rcptpage.Add(addtabletopage1);
                                        #endregion
                                        #region Table 2
                                        //Table2 Format
                                        int rows = 1;
                                        string selectQuery = "";
                                        Hashtable htIndex = new Hashtable();
                                        int hInsdx = 3;
                                        //Table2 Header
                                        int descWidth = 440;
                                        if (semOrYear != 0)
                                        {
                                            htIndex.Add("semOrYear", hInsdx);
                                            hInsdx++;
                                            descWidth -= 70;
                                        }
                                        if (allotedAmt != 0)
                                        {
                                            htIndex.Add("allotedAmt", hInsdx);
                                            hInsdx++;
                                            descWidth -= 70;
                                        }
                                        if (balAmt != 0)
                                        {
                                            htIndex.Add("balAmt", hInsdx);
                                            hInsdx++;
                                            descWidth -= 70;
                                        }
                                        if (prevPaidAmt != 0)
                                        {
                                            htIndex.Add("prevPaidAmt", hInsdx);
                                            hInsdx++;
                                            descWidth -= 80;
                                        }
                                        if (concession != 0)
                                        {
                                            htIndex.Add("concession", hInsdx);
                                            hInsdx++;
                                            descWidth -= 70;
                                        }
                                        //Table2 Data
                                        int sno = 0;
                                        int indx = 0;
                                        double totalamt = 0;
                                        double balanamt = 0;
                                        double curpaid = 0;
                                        // double paidamount = 0;
                                        string selHeadersQ = string.Empty;
                                        DataSet dsHeaders = new DataSet();
                                        if (rcptType == "1" || rcptType == "2")
                                        {
                                            string StudStream = string.Empty;
                                            DataSet dsStr = new DataSet();
                                            dsStr = d2.select_method_wo_parameter("select Distinct ISNULL( type,'') as type  from Registration r,Degree d,Department dt,Course c where r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id and R.App_No=" + AppNo + "", "Text");
                                            if (dsStr.Tables.Count > 0)
                                            {
                                                if (dsStr.Tables[0].Rows.Count > 0)
                                                {
                                                    StudStream = Convert.ToString(dsStr.Tables[0].Rows[0][0]);
                                                }
                                            }
                                            selHeadersQ = " select sum(debit) as TakenAmt,SUM(A.FeeAmount) as FeeAmount, isnull(sum(BalAmount),0) as BalAmount,isnull(sum(DeductAmout),0) as DeductAmout,isnull(sum(TotalAmount),0) as TotalAmount,l.LedgerName as DispName,D.LedgerFK,d.HeaderFK,D.FeeCategory,D.DailyTransPk,A.Feeallotpk from FT_FinDailyTransaction d ,FS_ChlGroupHeaderSettings f,FT_FeeAllot A,FM_LedgerMaster l where d.HeaderFK =f.HeaderFK and D.LedgerFK=l.LedgerPK  and  d.LedgerFK=a.LedgerFK and d.App_No=a.App_No and A.FeeCategory =D.FeeCategory  and    transcode='" + recptNo + "' and d.App_No ='" + AppNo + "'  ";
                                            if (StudStream != "")
                                            {
                                                selHeadersQ += " and f.stream='" + StudStream + "' ";
                                            }
                                            selHeadersQ += "   group by l.LedgerName,D.LedgerFK,d.HeaderFK,D.FeeCategory,D.DailyTransPk,A.Feeallotpk ";
                                        }
                                        else if (rcptType == "3")
                                        {
                                            selHeadersQ = " select SUM(debit) as TakenAmt,SUM(A.FeeAmount) as FeeAmount, isnull(sum(BalAmount),0) as BalAmount,isnull(sum(DeductAmout),0) as DeductAmout,isnull(sum(TotalAmount),0) as TotalAmount,l.LedgerName as DispName,D.LedgerFK,d.HeaderFK,D.FeeCategory,D.DailyTransPk,A.Feeallotpk  from FT_FinDailyTransaction d,FM_HeaderMaster h,FM_LedgerMaster l,FT_FeeAllot A  where d.HeaderFK =h.HeaderPK  and d.FeeCategory =A.FeeCategory and d.App_No=a.App_No  and d.LedgerFK=a.LedgerFK and D.LedgerFK=l.LedgerPK and  transcode='" + recptNo + "' and d.App_No ='" + AppNo + "' group by l.LedgerName,D.LedgerFK,d.HeaderFK,D.FeeCategory,D.DailyTransPk,A.Feeallotpk ";
                                        }
                                        else if (rcptType == "4")
                                        {
                                            selHeadersQ = " select D.LedgerFK,d.HeaderFK,D.FeeCategory,sum(debit) as TakenAmt,SUM(A.FeeAmount) as FeeAmount, isnull(sum(BalAmount),0) as BalAmount,isnull(sum(DeductAmout),0) as DeductAmout,isnull(sum(TotalAmount),0) as TotalAmount,l.LedgerName as DispName,D.DailyTransPk,A.Feeallotpk  from FT_FinDailyTransaction d,FM_LedgerMaster l ,FT_FeeAllot A where d.LedgerFK =l.LedgerPK  and d.LedgerFK=a.LedgerFK  and d.FeeCategory =A.FeeCategory and  d.App_No=a.App_No and transcode='" + recptNo + "' and d.App_No ='" + AppNo + "' group by   l.LedgerName,D.LedgerFK,d.HeaderFK,D.FeeCategory,D.DailyTransPk,A.Feeallotpk";
                                        }
                                        if (selHeadersQ != string.Empty)
                                        {
                                            string rcptDatee = recptDt.Split('/')[2] + "-" + recptDt.Split('/')[1] + "-" + recptDt.Split('/')[0];
                                            dsHeaders.Clear();
                                            dsHeaders = d2.select_method_wo_parameter(selHeadersQ, "Text");
                                            if (dsHeaders.Tables.Count > 0)
                                            {
                                                if (dsHeaders.Tables[0].Rows.Count > 0)
                                                {
                                                    rows += dsHeaders.Tables[0].Rows.Count;
                                                    PdfTable tableparts1 = recptDoc.NewTable(FontTable, rows, htIndex.Count + 3, 5);
                                                    tableparts1.VisibleHeaders = false;
                                                    tableparts1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                                                    tableparts1.Cell(0, 0).SetContent("S.No");
                                                    tableparts1.Cell(0, 0).SetFont(FontTableHead);
                                                    tableparts1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    tableparts1.Columns[0].SetWidth(20);
                                                    tableparts1.Cell(0, 1).SetContent("Description");
                                                    tableparts1.Cell(0, 1).SetFont(FontTableHead);
                                                    tableparts1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    tableparts1.Columns[1].SetWidth(descWidth);
                                                    tableparts1.Cell(0, 2).SetContent("Paid Rs");
                                                    tableparts1.Cell(0, 2).SetFont(FontTableHead);
                                                    tableparts1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    tableparts1.Columns[2].SetWidth(40);
                                                    for (int head = 0; head < dsHeaders.Tables[0].Rows.Count; head++)
                                                    {
                                                        string disphdr = string.Empty;
                                                        double allotamt0 = 0;
                                                        double deductAmt0 = 0;
                                                        double totalAmt0 = 0;
                                                        double paidAmt0 = 0;
                                                        double balAmt0 = 0;
                                                        double creditAmt0 = 0;
                                                        creditAmt0 = Convert.ToDouble(dsHeaders.Tables[0].Rows[head]["TakenAmt"]);
                                                        totalAmt0 = Convert.ToDouble(dsHeaders.Tables[0].Rows[head]["TotalAmount"]);
                                                        //balAmt0 = Convert.ToDouble(dsHeaders.Tables[0].Rows[head]["BalAmount"]);
                                                        //paidAmt0 = totalAmt0 - balAmt0;
                                                        deductAmt0 = Convert.ToDouble(dsHeaders.Tables[0].Rows[head]["DeductAmout"]);
                                                        disphdr = Convert.ToString(dsHeaders.Tables[0].Rows[head]["DispName"]);
                                                        string feecatcode = Convert.ToString(dsHeaders.Tables[0].Rows[head]["FeeCategory"]);
                                                        string ledgFK = Convert.ToString(dsHeaders.Tables[0].Rows[head]["LedgerFK"]);
                                                        string hdrFK = Convert.ToString(dsHeaders.Tables[0].Rows[head]["headerfk"]);
                                                        string paidAMtQ = "select isnull(sum(debit),0) from FT_FinDailyTransaction where app_no = '" + appnoNew + "' and ledgerfk='" + ledgFK + "' and headerfk='" + hdrFK + "' and FeeCategory='" + feecatcode + "' and isnull(IsCanceled,0)=0  and    transcode<>'" + recptNo + "' and transdate <='" + rcptDatee + "' --and convert(datetime,TransTime) < '" + rcptTime + "'";
                                                        paidAmt0 = Convert.ToDouble(d2.GetFunction(paidAMtQ));
                                                        #region Monthwise
                                                        string DailyTransPk = Convert.ToString(dsHeaders.Tables[0].Rows[head]["DailyTransPk"]);
                                                        string FeeAllotPk = Convert.ToString(dsHeaders.Tables[0].Rows[head]["FeeAllotPk"]);
                                                        int monWisemon = 0;
                                                        int monWiseYea = 0;
                                                        string monWiseMonQ = "select Monthvalue from FT_FinDailyTransactionDetailMonthWise where DailyTransFK=" + DailyTransPk + " and isCancel=0";
                                                        string monWiseYeaQ = "select YearValue from FT_FinDailyTransactionDetailMonthWise where DailyTransFK=" + DailyTransPk + " and isCancel=0";
                                                        int.TryParse(d2.GetFunction(monWiseMonQ).Trim(), out monWisemon);
                                                        int.TryParse(d2.GetFunction(monWiseYeaQ).Trim(), out monWiseYea);
                                                        if (monWisemon > 0 && monWiseYea > 0)
                                                        {
                                                            string selMonWiseAmtQ = "select isnull(AllotAmount,0) as AllotAmount,isnull(PaidAMount,0) as PaidAMount,isnull(BalAmount,0) as BalAmount from FT_FeeallotMonthly where FeeAllotPK=" + FeeAllotPk + " and AllotMonth=" + monWisemon + " and AllotYear=" + monWiseYea + "";
                                                            DataSet dsMonwise = new DataSet();
                                                            dsMonwise = d2.select_method_wo_parameter(selMonWiseAmtQ, "Text");
                                                            if (dsMonwise.Tables.Count > 0 && dsMonwise.Tables[0].Rows.Count > 0)
                                                            {
                                                                totalAmt0 = Convert.ToDouble(dsMonwise.Tables[0].Rows[0]["AllotAmount"]);
                                                                paidAmt0 = Convert.ToDouble(dsMonwise.Tables[0].Rows[0]["PaidAmount"]);
                                                                disphdr += "-" + reUse.returnMonthName(monWisemon) + "-" + monWiseYea;
                                                                balAmt0 = totalAmt0 - paidAmt0;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            balAmt0 = totalAmt0 - paidAmt0 - creditAmt0;
                                                        }
                                                        #endregion
                                                        feecatcode = d2.GetFunction("select textval from TextValTable where TextCode=" + feecatcode + " and college_code=" + collegecode1 + "");
                                                        sno++;
                                                        indx++;
                                                        totalamt += Convert.ToDouble(totalAmt0);
                                                        balanamt += Convert.ToDouble(balAmt0);
                                                        curpaid += Convert.ToDouble(creditAmt0);
                                                        deductionamt += Convert.ToDouble(deductAmt0);
                                                        tableparts1.Cell(indx, 0).SetContent(sno);
                                                        tableparts1.Cell(indx, 0).SetFont(FontTablebody);
                                                        tableparts1.Cell(indx, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                        tableparts1.Cell(indx, 1).SetContent(disphdr);
                                                        tableparts1.Cell(indx, 1).SetFont(FontTablebody);
                                                        tableparts1.Cell(indx, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        tableparts1.Cell(indx, 2).SetContent(creditAmt0);
                                                        tableparts1.Cell(indx, 2).SetFont(FontTablebody);
                                                        tableparts1.Cell(indx, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                        if (semOrYear != 0)
                                                        {
                                                            if (htIndex.Contains("semOrYear"))
                                                            {
                                                                int ind = Convert.ToInt32(htIndex["semOrYear"]);
                                                                tableparts1.Cell(indx, ind).SetContent(Convert.ToString(feecatcode));
                                                                tableparts1.Cell(indx, ind).SetFont(FontTablebody);
                                                                tableparts1.Cell(indx, ind).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                if (indx == 1)
                                                                {
                                                                    tableparts1.Cell(0, ind).SetContent("Category");
                                                                    tableparts1.Cell(0, ind).SetFont(FontTableHead);
                                                                    tableparts1.Cell(0, ind).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                    tableparts1.Columns[ind].SetWidth(60);
                                                                }
                                                            }
                                                            // htIndex.Add("semOrYear", hInsdx);
                                                        }
                                                        if (allotedAmt != 0)
                                                        {
                                                            if (htIndex.Contains("allotedAmt"))
                                                            {
                                                                int ind = Convert.ToInt32(htIndex["allotedAmt"]);
                                                                tableparts1.Cell(indx, ind).SetContent(totalAmt0);
                                                                tableparts1.Cell(indx, ind).SetFont(FontTablebody);
                                                                tableparts1.Cell(indx, ind).SetContentAlignment(ContentAlignment.MiddleRight);
                                                                if (indx == 1)
                                                                {
                                                                    tableparts1.Cell(0, ind).SetContent("Fixed Fee Rs");
                                                                    tableparts1.Cell(0, ind).SetFont(FontTableHead);
                                                                    tableparts1.Cell(0, ind).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                    tableparts1.Columns[ind].SetWidth(60);
                                                                }
                                                            }
                                                        }
                                                        if (balAmt != 0)
                                                        {
                                                            if (htIndex.Contains("balAmt"))
                                                            {
                                                                int ind = Convert.ToInt32(htIndex["balAmt"]);
                                                                tableparts1.Cell(indx, ind).SetContent(balAmt0);
                                                                tableparts1.Cell(indx, ind).SetFont(FontTablebody);
                                                                tableparts1.Cell(indx, ind).SetContentAlignment(ContentAlignment.MiddleRight);
                                                                if (indx == 1)
                                                                {
                                                                    tableparts1.Cell(0, ind).SetContent("Balance Rs");
                                                                    tableparts1.Cell(0, ind).SetFont(FontTableHead);
                                                                    tableparts1.Cell(0, ind).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                    tableparts1.Columns[ind].SetWidth(60);
                                                                }
                                                            }
                                                        }
                                                        if (prevPaidAmt != 0)
                                                        {
                                                            if (htIndex.Contains("prevPaidAmt"))
                                                            {
                                                                int ind = Convert.ToInt32(htIndex["prevPaidAmt"]);
                                                                tableparts1.Cell(indx, ind).SetContent(paidAmt0);
                                                                tableparts1.Cell(indx, ind).SetFont(FontTablebody);
                                                                tableparts1.Cell(indx, ind).SetContentAlignment(ContentAlignment.MiddleRight);
                                                                if (indx == 1)
                                                                {
                                                                    tableparts1.Cell(0, ind).SetContent("Already Paid Rs");
                                                                    tableparts1.Cell(0, ind).SetFont(FontTableHead);
                                                                    tableparts1.Cell(0, ind).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                    tableparts1.Columns[ind].SetWidth(70);
                                                                }
                                                            }
                                                        }
                                                        if (concession != 0)
                                                        {
                                                            if (htIndex.Contains("concession"))
                                                            {
                                                                int ind = Convert.ToInt32(htIndex["concession"]);
                                                                tableparts1.Cell(indx, ind).SetContent(deductAmt0);
                                                                tableparts1.Cell(indx, ind).SetFont(FontTablebody);
                                                                tableparts1.Cell(indx, ind).SetContentAlignment(ContentAlignment.MiddleRight);
                                                                if (indx == 1)
                                                                {
                                                                    tableparts1.Cell(0, ind).SetContent("Deduction Rs");
                                                                    tableparts1.Cell(0, ind).SetFont(FontTableHead);
                                                                    tableparts1.Cell(0, ind).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                    tableparts1.Columns[ind].SetWidth(60);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    createPDFOK = true;
                                                    curY += 5 + (int)addtabletopage1.Area.Height;
                                                    PdfTablePage addtabletopage2 = tableparts1.CreateTablePage(new PdfArea(recptDoc, 30, curY, 520, 600));
                                                    rcptpage.Add(addtabletopage2);
                                                    #region Table 3
                                                    //Table3 Format
                                                    PdfTable tableparts2 = recptDoc.NewTable(FontTableHead, 1, 8, 5);
                                                    tableparts2.VisibleHeaders = false;
                                                    tableparts2.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                                                    //Table3 Header              
                                                    decimal totalamount = (decimal)curpaid;
                                                    tableparts2.Cell(0, 0).SetContent("Received " + DecimalToWords(totalamount).ToString() + " Rupees Only");
                                                    tableparts2.Cell(0, 0).SetFont(FontTableHead);
                                                    tableparts2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    tableparts2.Cell(0, 0).ColSpan = 4;
                                                    tableparts2.Cell(0, 4).SetContent("Total");
                                                    tableparts2.Cell(0, 4).SetFont(FontTableHead);
                                                    tableparts2.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    tableparts2.Cell(0, 5).SetContent("Rs. " + curpaid + "/-");
                                                    tableparts2.Cell(0, 5).SetFont(FontTableHead);
                                                    tableparts2.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    tableparts2.Cell(0, 6).SetContent("Balance");
                                                    tableparts2.Cell(0, 6).SetFont(FontTableHead);
                                                    tableparts2.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    if (BalanceType == 1)
                                                    {
                                                        balanamt = retBalance(appnoNew);
                                                    }
                                                    tableparts2.Cell(0, 7).SetContent("Rs. " + balanamt + "/-");
                                                    tableparts2.Cell(0, 7).SetFont(FontTableHead);
                                                    tableparts2.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    curY += (int)addtabletopage2.Area.Height + 5;
                                                    PdfTablePage addtabletopage3 = tableparts2.CreateTablePage(new PdfArea(recptDoc, 30, curY, 520, 50));
                                                    rcptpage.Add(addtabletopage3);
                                                    #endregion
                                                    #region Receipt Footer
                                                    string modeMulti = string.Empty;
                                                    bool multiCash = false;
                                                    bool multiChk = false;
                                                    bool multiDD = false;
                                                    DataSet dtMulBnkDetails = new DataSet();
                                                    dtMulBnkDetails = d2.select_method_wo_parameter("select (select TextVal  from textvaltable where TextCriteria = 'BName' and TextCode=DDBankCode) as Bank,DDNo,DDBankBranch,Convert(varchar(10),DDDate,103) as DDDate,SUM(debit) as Amount,case when PayMode=2 then 'Cheque' when PayMode=1 then 'Cash'  else 'DD' end as Mode,narration  from ft_findailytransaction where app_no=" + appnoNew + " and TransCode='" + recptNo.Trim() + "' and PayMode in(1,2,3) and FinYearFK=" + finYearid + " and isnull(IsCanceled,0)=0 group by (DDNo),DDDate,DDBankCode,DDBankBranch,PayMode,narration", "Text");
                                                    string ddnar = string.Empty;
                                                    string remarks = string.Empty;
                                                    double modeht = 40;
                                                    if (narration != 0)
                                                    {
                                                        if (dtMulBnkDetails.Tables.Count > 0)
                                                        {
                                                            int sn = 1;
                                                            for (int z = 0; z < dtMulBnkDetails.Tables[0].Rows.Count; z++)
                                                            {
                                                                if (Convert.ToString(dtMulBnkDetails.Tables[0].Rows[z][5]).ToUpper() == "CASH")
                                                                {
                                                                    multiCash = true;
                                                                    continue;
                                                                }
                                                                else if (Convert.ToString(dtMulBnkDetails.Tables[0].Rows[z][5]).ToUpper() == "CHEQUE")
                                                                {
                                                                    multiChk = true;
                                                                }
                                                                else
                                                                {
                                                                    multiDD = true;
                                                                }
                                                                ddnar += "\n\n" + sn.ToString() + ")No : " + dtMulBnkDetails.Tables[0].Rows[z][1] + " Bank : " + dtMulBnkDetails.Tables[0].Rows[z][0] + "\nBranch :" + dtMulBnkDetails.Tables[0].Rows[z][2] + " Date  : " + dtMulBnkDetails.Tables[0].Rows[z][3] + " Amount : " + dtMulBnkDetails.Tables[0].Rows[z][4] + "/-";
                                                                sn++;
                                                            }
                                                            modeht = dtMulBnkDetails.Tables[0].Rows.Count * 15;
                                                            modeht += 20;
                                                        }
                                                        if (narration == 1)
                                                        {
                                                            remarks = d2.GetFunction("select narration from ft_findailytransaction where TransCode='" + recptNo.Trim() + "' and app_no='" + appnoNew + "' and isnull(iscanceled,0)=0");
                                                            if (remarks.Trim() == "0")
                                                                remarks = string.Empty;
                                                            else
                                                            {
                                                                remarks = "\n\n" + remarks;
                                                            }
                                                        }
                                                    }
                                                    if (multiCash)
                                                    {
                                                        modeMulti += "Cash,";
                                                    }
                                                    if (multiChk)
                                                    {
                                                        modeMulti += "Cheque,";
                                                    }
                                                    if (multiDD)
                                                    {
                                                        modeMulti += "DD";
                                                    }
                                                    modeMulti = modeMulti.TrimEnd(',');
                                                    if (modeMulti != "")
                                                    {
                                                        mode = modeMulti;
                                                    }
                                                    ddnar += remarks;
                                                    //Mode of Pay
                                                    curY += 5 + (int)addtabletopage3.Area.Height;
                                                    if (ddnar.Trim() != "")
                                                    {
                                                        curY += 5;
                                                    }
                                                    PdfTextArea modeofpayText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 30, curY, 250, modeht), ContentAlignment.MiddleLeft, "Mode of Pay : " + mode + ddnar);
                                                    rcptpage.Add(modeofpayText);
                                                    if (deduction != 0)
                                                    {
                                                        PdfTextArea deducText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 130, curY, 200, 20), ContentAlignment.MiddleCenter, "Deduction Amount Rs. : " + deductionamt);
                                                        rcptpage.Add(deducText);
                                                    }
                                                    if (excessAmt != 0)
                                                    {
                                                        PdfTextArea exText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 240, curY, 200, 20), ContentAlignment.MiddleCenter, "Excess Amount Rs. : " + excessRemaining(appnoNew));
                                                        rcptpage.Add(exText);
                                                    }
                                                    if (validDate != 0)
                                                    {
                                                        PdfTextArea valdtText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 370, curY, 200, 20), ContentAlignment.MiddleCenter, "Valid upto : " + "(" + recptValid + ")");
                                                        rcptpage.Add(valdtText);
                                                    }
                                                    //Authorizer
                                                    if (forclgName != 0)
                                                    {
                                                        curY += 15;
                                                        PdfTextArea authorizeText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 350, curY, 250, 20), ContentAlignment.MiddleCenter, "For " + collegename);
                                                        rcptpage.Add(authorizeText);
                                                    }
                                                    if (authSignValue.Trim() != "")
                                                    {
                                                        curY += 15;
                                                        PdfTextArea authorizeSignText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 450, curY, 150, 20), ContentAlignment.MiddleCenter, authSignValue);
                                                        rcptpage.Add(authorizeSignText);
                                                    }
                                                    else
                                                    {
                                                        curY += 15;
                                                        PdfTextArea authorizeSignText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 450, curY, 150, 20), ContentAlignment.MiddleCenter, "Authorised Signature");
                                                        rcptpage.Add(authorizeSignText);
                                                    }
                                                    PdfPage rcptpageOf = rcptpage.CreateCopy();
                                                    if (transCopy != 0 && pl == 1)
                                                    {
                                                        int cuyy = curY;
                                                        //if (authSign == 0)
                                                        //{
                                                        cuyy += 10;
                                                        //}
                                                        rcptpageTran = rcptpage.CreateCopy();
                                                        PdfTextArea transCopyText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 450, cuyy, 150, 20), ContentAlignment.MiddleCenter, "Transport Copy ");
                                                        rcptpageTran.Add(transCopyText);
                                                    }
                                                    if (studCopy != 0 || studOffiCopy == 1)
                                                    {
                                                        //if (authSign == 0)
                                                        //{
                                                        curY += 10;
                                                        //}
                                                        string copy = "Student Copy ";
                                                        if (pl == 2)
                                                            copy = "Office Copy ";
                                                        PdfTextArea studCopyText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 450, curY, 150, 20), ContentAlignment.MiddleCenter, copy);
                                                        rcptpage.Add(studCopyText);
                                                        if (pl == pagelength)
                                                        {
                                                            rcptpage.SaveToDocument();
                                                        }
                                                    }
                                                    //save changes
                                                    if (pl == pagelength)
                                                    {
                                                        if (officopy != 0 && studOffiCopy != 1)
                                                        {
                                                            PdfTextArea offCopyText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 450, curY, 150, 20), ContentAlignment.MiddleCenter, "Office Copy ");
                                                            rcptpageOf.Add(offCopyText);
                                                            rcptpageOf.SaveToDocument();
                                                        }
                                                    }
                                                    if (transCopy != 0 && pl == pagelength)
                                                    {
                                                        rcptpageTran.SaveToDocument();
                                                    }
                                                    curY += 10;
                                                    #endregion
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                    #endregion
                                }
                                catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "CancelReceipDuplicate"); }
                                finally
                                {
                                }
                                createPDFOK = true;
                            }
                            else
                            {
                                //imgAlert.Visible = true;
                                // lbl_alert.Text = "No Records Found";
                            }
                        }
                        else
                        {
                            //imgAlert.Visible = true;
                            //lbl_alert.Text = "No Records Found";
                        }
                    }
                    else
                    {
                        // imgAlert.Visible = true;
                        //lbl_alert.Text = "Receipt Cancelled";
                    }
                    //    }
                    //}
                    #endregion
                    #region To print the Receipt
                    if (createPDFOK)
                    {
                        //Response Write
                        string appPath = HttpContext.Current.Server.MapPath("~");
                        if (appPath != "")
                        {
                            string szPath = appPath + "/Report/";
                            string szFile = "Receipt" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
                            Response.Buffer = true;
                            Response.Clear();
                            recptDoc.SaveToFile(szPath + szFile);
                            //Response.ClearHeaders();
                            //Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                            //Response.ContentType = "application/pdf";
                            //Response.WriteFile(szPath + szFile);
                            Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");
                            check = true;
                            //imgAlert.Visible = true;
                            //lbl_alert.Text = "Receipt Generated";
                        }
                        else
                        {
                            // imgAlert.Visible = true;
                            // lbl_alert.Text = "Server Path Not Found";
                        }
                    }
                    else
                    {
                        // imgAlert.Visible = true;
                        //lbl_alert.Text = "Receipt Cannot Be Generated";
                    }
                    #endregion
                }
                else
                {
                    //imgAlert.Visible = true;
                    //lbl_alert.Text = "Please Add Print Settings";
                }
            }
            else
            {
                //imgAlert.Visible = true;
                // lbl_alert.Text = "Please Add Print Settings";
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "StudentNewApplicationReportNew"); }
        return check;
    }
    public string romanLetter(string numeral)
    {
        string romanLettervalue = String.Empty;
        if (numeral.Trim() != String.Empty)
        {
            switch (numeral)
            {
                case "1":
                    romanLettervalue = "I";
                    break;
                case "2":
                    romanLettervalue = "II";
                    break;
                case "3":
                    romanLettervalue = "III";
                    break;
                case "4":
                    romanLettervalue = "IV";
                    break;
                case "5":
                    romanLettervalue = "V";
                    break;
                case "6":
                    romanLettervalue = "VI";
                    break;
                case "7":
                    romanLettervalue = "VII";
                    break;
                case "8":
                    romanLettervalue = "VIII";
                    break;
                case "9":
                    romanLettervalue = "IX";
                    break;
                case "10":
                    romanLettervalue = "X";
                    break;
            }
        }
        return romanLettervalue;
    }
    public string returnYearforSem(string cursem)
    {
        switch (cursem)
        {
            case "1":
            case "2":
                cursem = "1";
                break;
            case "3":
            case "4":
                cursem = "2";
                break;
            case "5":
            case "6":
                cursem = "3";
                break;
            case "7":
            case "8":
                cursem = "4";
                break;
            case "9":
            case "10":
                cursem = "5";
                break;
        }
        return cursem;
    }
    public string DecimalToWords(decimal number)
    {
        if (number == 0)
            return "Zero";
        if (number < 0)
            return "Minus " + DecimalToWords(Math.Abs(number));
        string words = "";
        int intPortion = (int)number;
        decimal fraction = (number - intPortion) * 100;
        int decPortion = (int)fraction;
        words = ConvertNumbertoWords(intPortion);//NumberToWords(intPortion)
        if (decPortion > 0)
        {
            words += " And ";
            words += ConvertNumbertoWords(intPortion);//NumberToWords(intPortion)
            words += " Paise ";
        }
        return words;
    }
    public static string ConvertNumbertoWords(int number)
    {
        if (number == 0)
            return "Zero";
        if (number < 0)
            return "minus " + ConvertNumbertoWords(Math.Abs(number));
        string words = "";
        if ((number / 100000) > 0)
        {
            words += ConvertNumbertoWords(number / 100000) + " Lakhs";
            number %= 100000;
        }
        if ((number / 1000) > 0)
        {
            words += ConvertNumbertoWords(number / 1000) + " Thousand ";
            number %= 1000;
        }
        if ((number / 100) > 0)
        {
            words += ConvertNumbertoWords(number / 100) + "  Hundred ";
            number %= 100;
        }
        if (number > 0)
        {
            if (words != "")
                words += "And ";
            var unitsMap = new[] { "Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };
            var tensMap = new[] { "Zero", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };
            if (number < 20)
                words += unitsMap[number];
            else
            {
                words += tensMap[number / 10];
                if ((number % 10) > 0)
                    words += " " + unitsMap[number % 10];
            }
        }
        return words;
    }
    private double retBalance(string appNo)
    {
        double ovBalAMt = 0;
        if (BalanceType == 1)
        {
            double.TryParse(d2.GetFunction(" select sum(isnull(totalAmount,0)-isnull(paidAmount,0)) as BalanceAmt from ft_feeallot where app_no =" + appNo + ""), out ovBalAMt);
        }
        return ovBalAMt;
    }
    private double excessRemaining(string appnoNew)
    {
        string excessamtQ = d2.GetFunction("select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt from FT_ExcessDet WHERE  App_No=" + appnoNew + " ");
        double excessamtValue = 0;
        double.TryParse(excessamtQ, out excessamtValue);
        return excessamtValue;
    }
    #endregion
    public static Control GetPostBackControl(Page page)
    {
        Control control = null;
        string ctrlname = page.Request.Params.Get("__EVENTTARGET");
        if (ctrlname != null && ctrlname != string.Empty)
        {
            control = page.FindControl(ctrlname);
        }
        else
        {
            foreach (string ctl in page.Request.Form)
            {
                Control c = page.FindControl(ctl);
                if (c is System.Web.UI.WebControls.Button)
                {
                    control = c;
                    break;
                }
            }
        }
        return control;
    }
    public int rowDdlIndxClicked()
    {
        int rownumber = -1;
        try
        {
            Control ctrlid = GetPostBackControl(this.Page);
            string rno = Convert.ToString(ctrlid.UniqueID).Split('$')[5].Replace("ctl", "");
            int.TryParse(rno, out rownumber);
            rownumber -= 2;
        }
        catch { rownumber = -1; }
        return rownumber;
    }
    private void bindStaffDetails()
    {
        try
        {
            DataSet dsStaffDet = new DataSet();
            ddlStfDet.Items.Clear();
            string SelStf = " select (sm.Staff_Name+' - '+sm.Staff_Code) as StaffDet,sa.appl_id from StaffMaster sm,staff_appl_master sa,stafftrans st where sm.appl_no=sa.appl_no and sm.staff_code=st.staff_code and st.latestrec='1' and sm.resign='0' and sm.settled='0' and ISNULL(Discontinue,'0')='0' and sm.college_code='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "'";
            dsStaffDet.Clear();
            dsStaffDet = d2.select_method_wo_parameter(SelStf, "Text");
            if (dsStaffDet.Tables.Count > 0 && dsStaffDet.Tables[0].Rows.Count > 0)
            {
                ddlStfDet.DataSource = dsStaffDet;
                ddlStfDet.DataTextField = "StaffDet";
                ddlStfDet.DataValueField = "appl_id";
                ddlStfDet.DataBind();
                ddlStfDet.Items.Insert(0, "Select");
            }
            else
            {
                ddlStfDet.Items.Insert(0, "Select");
            }
        }
        catch { }
    }
    private string generateApplNo(string collegecode, int degreecode, string edulevel, string mode, string seattype, string batchyear, out int format)
    {
        string applNo = string.Empty;
        format = 0;
        try
        {
            ApplicationNumberGeneration appGen = new ApplicationNumberGeneration();
            int codeCheck = 0;
            string query = "select LinkValue from New_InsSettings where LinkName='CollegewiseApplicationNoRights' and user_code ='" + usercode + "' "; //and college_code ='" + collegecode + "'
            codeCheck = dirAcess.selectScalarInt(query);
            if (codeCheck > 0)
            {
                applNo = appGen.getApplicationNumber(collegecode, batchyear, 0);
                format = 1;
            }
            else
            {
                query = "select LinkValue from New_InsSettings where LinkName='EdulevelApplicationNoRights' and user_code ='" + usercode + "' "; //and college_code ='" + collegecode + "'
                codeCheck = dirAcess.selectScalarInt(query);
                if (codeCheck > 0)
                {
                    applNo = appGen.getApplicationNumber(collegecode, edulevel, batchyear, 0);
                    format = 2;
                }
                else
                {
                    query = "select LinkValue from New_InsSettings where LinkName='DegreeSeatModewiseApplicationNoRights' and user_code ='" + usercode + "' "; //and college_code ='" + collegecode + "'
                    codeCheck = dirAcess.selectScalarInt(query);
                    if (codeCheck > 0)
                    {
                        applNo = appGen.getApplicationNumber(collegecode, batchyear, degreecode.ToString(), mode, seattype, 0);
                        format = 3;
                    }
                    else
                    {
                        applNo = appGen.getApplicationNumber(collegecode, batchyear, degreecode, 0);
                        format = 0;
                    }
                }
            }
        }
        catch { applNo = string.Empty; }
        return applNo;
    }
    private bool UpdateApplNo(string collegecode, int degreecode, string edulevel, string mode, string seattype, string batchyear, int format)
    {
        bool update = false;
        try
        {
            ApplicationNumberGeneration appGen = new ApplicationNumberGeneration();
            int codeCheck = 0;
            string query = "select LinkValue from New_InsSettings where LinkName='CollegewiseApplicationNoRights' and user_code ='" + usercode + "' "; //and college_code ='" + collegecode + "'
            codeCheck = dirAcess.selectScalarInt(query);
            if (codeCheck > 0)
            {
                update = appGen.updateApplicationNumber(collegecode, batchyear, 0);
            }
            else
            {
                query = "select LinkValue from New_InsSettings where LinkName='EdulevelApplicationNoRights' and user_code ='" + usercode + "' "; //and college_code ='" + collegecode + "'
                codeCheck = dirAcess.selectScalarInt(query);
                if (codeCheck > 0)
                {
                    update = appGen.updateApplicationNumber(collegecode, edulevel, batchyear, 0);
                }
                else
                {
                    query = "select LinkValue from New_InsSettings where LinkName='DegreeSeatModewiseApplicationNoRights' and user_code ='" + usercode + "' "; //and college_code ='" + collegecode + "'
                    codeCheck = dirAcess.selectScalarInt(query);
                    if (codeCheck > 0)
                    {
                        update = appGen.updateApplicationNumber(collegecode, batchyear, degreecode.ToString(), mode, seattype, 0);
                    }
                    else
                    {
                        update = appGen.updateApplicationNumber(collegecode, batchyear, degreecode, 0);
                    }
                }
            }
        }
        catch { update = false; }
        return update;
    }
    protected void btnQ_Click(object sender, EventArgs e)
    {
        binddegree();
        popenquiry.Visible = true;
        //Pdegree2.Visible = false;
        Fp_Enquery.Visible = false;
        btn_save2.Visible = false;
        txtfromdate.Text = Convert.ToString(DateTime.Now.ToString("dd/MM/yyyy"));
        txttodate.Text = Convert.ToString(DateTime.Now.ToString("dd/MM/yyyy"));
    }
    protected void btnsav_Click(object sender, EventArgs e)//delsis
    {
    }
    public void ddlcollege2_SelectedIndexChanged(object sender, EventArgs e)
    {
        //edu_level();
        //degree();
        //bindbatch();
        //loadstream();
        //loadreligion();
        //loadcommunity();
        //loadseat();
        //Collinfo = Convert.ToString(ddlcollege.SelectedItem.Value);
        //cblcolumnorder0.Visible = false;
        //pcolumnorder0.Visible = false;
        //pheaderfilter0.Visible = false;
        //div_report.Visible = false;
        //// div1.Visible = true;
        //Fpspread1.Visible = false;
        //txt_searchstudname.Text = "";
        //txt_searchappno.Text = "";
        //txt_searchmobno.Text = "";
        //bindsem();
    }
    protected void imagebtnpopclose1_Click(object sender, EventArgs e)
    {
        popenquiry.Visible = false;
    }
    protected void Cell_Click(object sender, EventArgs e)
    {
        try
        {
            Cellclicl_isconfirm = true;
        }
        catch
        {
        }
    }
    protected void btnView_go_Click(object sender, EventArgs e)
    {
        try
        {
            //Pdegree.Visible = false;
            //btn_save2.Visible = true;
            Fp_Enquery.Visible = true;
            Fp_Enquery.Sheets[0].RowCount = 0;
            Fp_Enquery.SaveChanges();
            Fp_Enquery.SheetCorner.ColumnCount = 0;
            Fp_Enquery.CommandBar.Visible = false;
            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
            darkstyle.ForeColor = Color.White;
            Fp_Enquery.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
            Fp_Enquery.ActiveSheetView.SelectionBackColor = Color.Coral;
            Fp_Enquery.Sheets[0].AutoPostBack = true;
            DataTable dtnotConfirmStud = new DataTable();
            int rolcount = 0;
            int sno = 0;
            string sql = "";
            string clg_code = Convert.ToString(ddl_collegename2.SelectedItem.Value);
            string valdeg = string.Empty;
            valdeg = rs.GetSelectedItemsValueAsString(cbldegree);
            string date1 = string.Empty;
            string date2 = string.Empty;
            string datefrom;
            string dateto = string.Empty;
            if (!string.IsNullOrEmpty(txtfromdate.Text) && !string.IsNullOrEmpty(txttodate.Text))
            {
                date1 = txtfromdate.Text.ToString();
                string[] split = date1.Split(new Char[] { '/' });
                datefrom = split[1].ToString() + "-" + split[0].ToString() + "-" + split[2].ToString();
                date2 = txttodate.Text.ToString();
                string[] split1 = date2.Split(new Char[] { '/' });
                dateto = split1[1].ToString() + "-" + split1[0].ToString() + "-" + split1[2].ToString();
                DateTime dt1 = Convert.ToDateTime(datefrom.ToString());
                DateTime dt2 = Convert.ToDateTime(dateto.ToString());
                if (!string.IsNullOrEmpty(clg_code) && !string.IsNullOrEmpty(valdeg))
                {
                    //sql = "select distinct r.Roll_No,r.Reg_No,r.App_No,r.Stud_Name,(c.Course_Name+'-'+d.Acronym) as degreedet from Registration r,Degree d,Department dt,applyn a,Course c where r.degree_code=d.Degree_Code and d.Dept_Code=dt.Dept_Code and a.app_no=r.App_No and a.degree_code=d.Degree_Code and r.degree_code=a.degree_code and c.Course_Id=d.Course_Id and a.degree_code in ('" + valdeg + "') and isnull(a.isconfirm,'0')=0 order by r.App_No and a.college_code='" + clg_code + "'";
                    sql = "select distinct a.App_No,app_formno,a.Stud_Name,(c.Course_Name+'-'+d.Acronym) as degreedet,d.Degree_Code from Degree d,Department dt,applyn a,Course c where d.Dept_Code=dt.Dept_Code and  a.degree_code=d.Degree_Code and c.Course_Id=d.Course_Id and c.Course_Id in ('" + valdeg + "') and isnull(a.isconfirm,'1')=0 and a.date_applied between '" + dt1.ToString("yyyy-MM-dd") + "' and '" + dt2.ToString("yyyy-MM-dd") + "' and a.college_code='" + clg_code + "'";
                }
                dtnotConfirmStud = dirAcess.selectDataTable(sql);
                Fp_Enquery.Sheets[0].RowCount = 0;
                Fp_Enquery.Sheets[0].ColumnCount = 4;
                if (dtnotConfirmStud.Rows.Count > 0)
                {
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fp_Enquery.Sheets[0].Columns[0].Locked = true;
                    Fp_Enquery.Columns[0].Width = 80;
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Application Number";
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                    Fp_Enquery.Sheets[0].Columns[1].Locked = true;
                    Fp_Enquery.Columns[1].Width = 100;
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Student Name";
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                    Fp_Enquery.Sheets[0].Columns[2].Locked = true;
                    Fp_Enquery.Columns[2].Width = 200;
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Degree";
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                    Fp_Enquery.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                    Fp_Enquery.Sheets[0].Columns[3].Locked = true;
                    Fp_Enquery.Columns[3].Width = 250;
                    Fp_Enquery.Width = 600;
                    for (rolcount = 0; rolcount < dtnotConfirmStud.Rows.Count; rolcount++)
                    {
                        sno++;
                        //Fpstaff.Sheets[0].RowCount++;
                        //name = ds.Tables[0].Rows[rolcount]["staff_name"].ToString();
                        //code = ds.Tables[0].Rows[rolcount]["staff_code"].ToString();
                        Fp_Enquery.Sheets[0].RowCount = Fp_Enquery.Sheets[0].RowCount + 1;
                        //Fpstaff.Sheets[0].Rows[Fpstaff.Sheets[0].RowCount - 1].Font.Bold = false;
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 0].Text = sno.ToString();
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dtnotConfirmStud.Rows[rolcount]["app_formno"]);
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(dtnotConfirmStud.Rows[rolcount]["App_No"]);
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(dtnotConfirmStud.Rows[rolcount]["Stud_Name"]);
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(dtnotConfirmStud.Rows[rolcount]["degreedet"]);
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 3].Tag = Convert.ToString(dtnotConfirmStud.Rows[rolcount]["degree_code"]);
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                        Fp_Enquery.Sheets[0].Cells[Fp_Enquery.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                    }
                    //Fp_Enquery.SaveChanges();
                    lbl_search3.Visible = false;
                    Fp_Enquery.Sheets[0].PageSize = Fp_Enquery.Sheets[0].RowCount;
                }
                else
                {
                    lbl_search3.Visible = true;
                    lbl_search3.Text = "No Records Found";
                    //rolcount = Fp_Enquery.Sheets[0].RowCount;
                    //Fp_Enquery.Height = 370;
                    //Fp_Enquery.Sheets[0].PageSize = 25 + (rolcount * 20);
                    //Fp_Enquery.SaveChanges();
                    Fp_Enquery.Visible = false;
                }
            }
            else
            {
                lbl_search3.Visible = true;
                lbl_search3.Text = "No Date were found";
                //lbl_search3.Text = "No of Staff :" + sno.ToString();
                //rolcount = Fp_Enquery.Sheets[0].RowCount;
                //Fp_Enquery.Height = 370;
                //Fp_Enquery.Sheets[0].PageSize = 25 + (rolcount * 20);
                Fp_Enquery.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void cbdegree_checkedchange(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(cbdegree, cbldegree, txtdegree, lbldegree.Text, "--Select--");
        }
        catch (Exception ex)
        {
        }
    }
    public void cbldegree_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(cbdegree, cbldegree, txtdegree, lbldegree.Text, "--Select--");
        }
        catch
        {
        }
    }
    protected void txtfromdate_TextChanged(object sender, EventArgs e)
    {
        if (txtfromdate.Text != "" && txttodate.Text != "")
        {
            DateTime dt = new DateTime();
            DateTime dt1 = new DateTime();
            string firstdate = Convert.ToString(txt_fromdate.Text);
            string seconddate = Convert.ToString(txt_todate.Text);
            string[] split = firstdate.Split('/');
            dt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            split = seconddate.Split('/');
            dt1 = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            TimeSpan ts = dt1 - dt;
            int days = ts.Days;
            if (dt > dt1)
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Enter FromDate less than or equal to the ToDate";
                txtfromdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                // Fpspread1.Visible = false;
                //rptprint.Visible = false;
                //lbl_error.Visible = false;
            }
            else
            {
            }
        }
    }
    protected void txttodate_TextChanged(object sender, EventArgs e)
    {
        if (txttodate.Text != "" && txtfromdate.Text != "")
        {
            DateTime dt = new DateTime();
            DateTime dt1 = new DateTime();
            string firstdate = Convert.ToString(txt_fromdate.Text);
            string seconddate = Convert.ToString(txt_todate.Text);
            string[] split = firstdate.Split('/');
            dt = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            split = seconddate.Split('/');
            dt1 = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);
            TimeSpan ts = dt1 - dt;
            int days = ts.Days;
            if (dt > dt1)
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Enter ToDate greater than or equal to the FromDate";
                txtfromdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
            }
            else
            {
            }
        }
    }
    protected void btnerrclose_Click(object sender, EventArgs e)
    {
        alertpopwindow.Visible = false;
    }
    #region Common Checkbox and Checkboxlist Event
    private string getCblSelectedValue(CheckBoxList cblSelected)
    {
        StringBuilder selectedvalue = new StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedvalue.Length == 0)
                    {
                        selectedvalue.Append("'" + Convert.ToString(cblSelected.Items[sel].Value) + "'");
                    }
                    else
                    {
                        selectedvalue.Append(",'" + Convert.ToString(cblSelected.Items[sel].Value) + "'");
                    }
                }
            }
        }
        catch { }
        return selectedvalue.ToString();
    }
    private string getCblSelectedText(CheckBoxList cblSelected)
    {
        StringBuilder selectedText = new StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedText.Length == 0)
                    {
                        selectedText.Append("'" + Convert.ToString(cblSelected.Items[sel].Text) + "'");
                    }
                    else
                    {
                        selectedText.Append(",'" + Convert.ToString(cblSelected.Items[sel].Text) + "'");
                    }
                }
            }
        }
        catch { }
        return selectedText.ToString();
    }
    private void CallCheckboxChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dispst, string deft)
    {
        try
        {
            int sel = 0;
            string name = string.Empty;
            txt.Text = deft;
            if (cb.Checked == true)
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = true;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
                if (cbl.Items.Count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dispst + "(" + cbl.Items.Count + ")";
                }
            }
            else
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = false;
                }
                txt.Text = deft;
            }
        }
        catch { }
    }
    private void CallCheckboxListChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dipst, string deft)
    {
        try
        {
            int sel = 0;
            int count = 0;
            string name = string.Empty;
            cb.Checked = false;
            txt.Text = deft;
            for (sel = 0; sel < cbl.Items.Count; sel++)
            {
                if (cbl.Items[sel].Selected == true)
                {
                    count++;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
            }
            if (count > 0)
            {
                if (count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dipst + "(" + count + ")";
                }
                if (cbl.Items.Count == count)
                {
                    cb.Checked = true;
                }
            }
        }
        catch { }
    }
    private void checkBoxListselectOrDeselect(CheckBoxList cbl, bool selected = true)
    {
        try
        {
            foreach (wc.ListItem li in cbl.Items)
            {
                li.Selected = selected;
            }
        }
        catch
        {
        }
    }
    private bool getSelectedCheckBoxListCount(CheckBoxList cbl, out int selectedCount)
    {
        selectedCount = 0;
        try
        {
            foreach (wc.ListItem li in cbl.Items)
            {
                if (li.Selected)
                {
                    selectedCount++;
                }
            }
            return true;
        }
        catch
        {
            return false;
        }
    }
    /// <summary>
    /// Developed By Malang Raja T
    /// </summary>
    /// <param name="c">Only Data Bound Controls eg.DropDownList,RadioButtonList,CheckBoxList </param>
    /// <param name="selectedValue"></param>
    /// <param name="selectedText"></param>
    /// <param name="type">0 - Index; 1 - Text; 2 - Value;</param>
    private void SelectDataBound(Control c, string selectedValue, string selectedText)
    {
        try
        {
            bool isDataBoundControl = false;
            if (c is DataBoundControl)
            {
                if (c is CheckBoxList || c is DropDownList || c is RadioButtonList)
                {
                    isDataBoundControl = true;
                }
                if (isDataBoundControl)
                {
                    ListControl lstControls = (ListControl)c;
                    if (lstControls.Items.Count > 0)
                    {
                        ListItem[] listItem = new ListItem[lstControls.Items.Count];
                        lstControls.Items.CopyTo(listItem, 0);
                        if (listItem.Contains(new ListItem(selectedText, selectedValue)))
                        {
                            lstControls.SelectedValue = selectedValue;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }
    #endregion
    public void Fp_Enquery_SelectedIndexChanged(object sender, EventArgs e)
    {
        string appl_No = string.Empty;
        if (IsAppNoAutoGenerate())
        {
            txt_appfromno.Enabled = false;
            txtapplno.Enabled = false;
        }
        else
        {
            txtapplno.Enabled = true;
            txt_appfromno.Enabled = true;
        }
        string appfromno = "";

        if (Cellclicl_isconfirm == true)
        {
            popenquiry.Visible = false;
            btn_fromate2update.Visible = true;//new
            if (ddlreportTye.SelectedIndex == 0)
            {
                btnDeleteStud.Visible = false;
            }
            else
            {
                btnDeleteStud.Visible = false;
            }
            btnstept3.Visible = false;//new
            savevalue = false;
            string activerow = "";
            string activecol = "";
            string query = "";
            int i = 0;
            // txtapplno.Enabled = false;
            activerow = Fp_Enquery.ActiveSheetView.ActiveRow.ToString();
            activecol = Fp_Enquery.ActiveSheetView.ActiveColumn.ToString();

            ViewState["appnumber"] = Convert.ToString(Fp_Enquery.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Text);//delsi2501
            ViewState["degreeCode"] = Convert.ToString(Fp_Enquery.Sheets[0].Cells[Convert.ToInt32(activerow), 3].Tag);
            string appfomno = Convert.ToString(Fp_Enquery.Sheets[0].Cells[Convert.ToInt32(activerow), 1].Tag);
            // string batchyear = Convert.ToString(ddl_batch.SelectedItem.Text);
            // string degreecode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(activerow), 4].Tag);
            applicationFormateRights();//new
            if (formatevalue == "0")
            {
                query = "select distinct a.parent_name,a.degree_code,a.Alternativedegree_code,a.remarks,a.sex,a.app_no,(Select TextVal FROM TextValTable T WHERE community = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE religion = T.TextCode) religion,a.parentf_mobile as Student_Mobile,a.stud_name,a.app_formno,a.college_code,seattype,convert(varchar(10),a.date_applied,103) as dtApplied, a.degree_code,a.Batch_Year,a.Current_Semester,C.Course_Name,c.Course_Id,Dt.Dept_Name,a.Mode,isnull(isconfirm,'0')isconfirm from applyn a, degree d,Department dt,Course C where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and isnull( isconfirm,'0') ='0' and a.app_no='" + appfomno + "'";
                ds.Clear();
                ds = d2.select_method_wo_parameter(query, "text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ViewState["AppNew"] = Convert.ToString(appfomno);
                    ViewState["AppNew1"] = Convert.ToString(ds.Tables[0].Rows[0]["app_formno"]);
                    applicationNoRightsacr();
                    appfromno = Convert.ToString(ds.Tables[0].Rows[0]["app_formno"]);
                    if (appnovalueacr.Trim() == "1")
                    {
                        appfromno = Convert.ToString(ds.Tables[0].Rows[0]["app_formno"]).Substring(4);
                    }
                    txtapplno.Text = appfromno;
                    txtappldate.Text = Convert.ToString(ds.Tables[0].Rows[0]["dtApplied"]);
                    txtapplname.Text = Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]);
                    txtfather.Text = Convert.ToString(ds.Tables[0].Rows[0]["parent_name"]);
                    txtmblno.Text = Convert.ToString(ds.Tables[0].Rows[0]["Student_Mobile"]);
                    string collegenewcode = Convert.ToString(ds.Tables[0].Rows[0]["college_code"]);
                    string Batch_year = Convert.ToString(ds.Tables[0].Rows[0]["Batch_Year"]);
                    string seattype = Convert.ToString(ds.Tables[0].Rows[0]["seattype"]);
                    string StudentType = Convert.ToString(ds.Tables[0].Rows[0]["Mode"]);
                    string CurrentSemester = Convert.ToString(ds.Tables[0].Rows[0]["Current_Semester"]);
                    //ddlregl.SelectedItem.Text = Convert.ToString(ds.Tables[0].Rows[0]["religion"]);
                    //ddlcomm.SelectedItem.Text = Convert.ToString(ds.Tables[0].Rows[0]["community"]);
                    ddlclg.SelectedIndex = ddlclg.Items.IndexOf(ddlclg.Items.FindByValue(Convert.ToString(collegenewcode)));
                    ddlBatch_year.SelectedIndex = ddlBatch_year.Items.IndexOf(ddlBatch_year.Items.FindByText(Convert.ToString(Batch_year)));
                    ddlMode.SelectedIndex = ddlMode.Items.IndexOf(ddlMode.Items.FindByValue(Convert.ToString(StudentType)));
                    ddlSemester1.SelectedIndex = ddlSemester1.Items.IndexOf(ddlSemester1.Items.FindByText(Convert.ToString(CurrentSemester)));
                    loadReligion();
                    loadCommunity();
                    ddlregl.SelectedIndex = ddlregl.Items.IndexOf(ddlregl.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["religion"])));
                    ddlcomm.SelectedIndex = ddlcomm.Items.IndexOf(ddlcomm.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["community"])));
                    //ddlregl.SelectedIndex = ddlregl.Items.IndexOf(ddlregl.Items.FindByText(Convert.ToString(ds.Tables[0].Rows[0]["community"])));
                    txtrm.Text = Convert.ToString(ds.Tables[0].Rows[0]["remarks"]);
                    loadChioce();
                    loadChioce2();
                    checkFun();
                    bindseattype();
                    ddl_seattype.SelectedIndex = ddl_seattype.Items.IndexOf(ddl_seattype.Items.FindByValue(Convert.ToString(seattype)));
                    string alternate = Convert.ToString(ds.Tables[0].Rows[0]["Alternativedegree_code"]);
                    string coursetype = d2.GetFunction("select Edu_Level from course where Course_Id='" + Convert.ToString(ds.Tables[0].Rows[0]["Course_Id"]) + "' and college_code='" + ddlcollege.SelectedItem.Value + "'");
                    ddlcourse.SelectedIndex = ddlcourse.Items.IndexOf(ddlcourse.Items.FindByText(coursetype));
                    string course = coursetype;
                    ddlcourse_OnSelectedIndexChanged(sender, e);
                    //  ddlcourse.SelectedItem.Text = coursetype;
                    //  ddlchoice1.SelectedItem.Text = Convert.ToString(ds.Tables[0].Rows[0]["Dept_Name"]) + "-" + Convert.ToString(ds.Tables[0].Rows[0]["Course_Name"]);           
                    string PGname = Convert.ToString(ds.Tables[0].Rows[0]["Dept_Name"]) + "-" + Convert.ToString(ds.Tables[0].Rows[0]["Course_Name"]);
                    ddlchoice1.SelectedIndex = ddlchoice1.Items.IndexOf(ddlchoice1.Items.FindByText(PGname));
                    string option2 = d2.GetFunction("select dt.Dept_Name+'-'+c.Course_Name as name,dt.Dept_Code,d.Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddlcollege.SelectedItem.Value + "' and d.Degree_Code='" + alternate + "' ");
                    if (option2 == "0")
                    {
                        option2 = "Select";
                    }
                    ddlchoice2.SelectedIndex = ddlchoice2.Items.IndexOf(ddlchoice2.Items.FindByText(option2));
                    //ddlchoice2.SelectedItem.Text = option2;
                    string alternatedeg = Convert.ToString(ds.Tables[0].Rows[0]["remarks"]);
                    popview.Visible = true;
                    string course_entno = "";
                    string gender = Convert.ToString(ds.Tables[0].Rows[0]["sex"]);
                    if (gender == "0")
                    {
                        //  rbmale.Checked = true;
                    }
                    else
                    {
                        // rbfemale.Checked = true;
                    }
                    if (Convert.ToString(ds.Tables[0].Rows[0]["isconfirm"]) == "False" || Convert.ToString(ds.Tables[0].Rows[0]["isconfirm"]) == "0")
                        IsEnquiry.Checked = true;
                    else
                        IsEnquiry.Checked = false;
                    string appno = Convert.ToString(ds.Tables[0].Rows[0]["app_no"]);
                    query = "sELECT p.securedmark,p.grade,p.course_entno,P.instaddress,P.percentage,P.tancet_mark,P.branch_code,a.App_No,uni_state,type_semester,(Select TextVal FROM TextValTable T WHERE university_code = T.TextCode) university_code,ISNULL(pt.TExtVal,'') Part2Language,ISNULL(C.TExtVal,'') Part1Language,ISNULL(C.TExtVal,'') Course,ISNULL(U.TextVal,'') University,ISNULL(Institute_Name,'') Institute_Name,ISNULL(PassMonth,'') PassMonth,ISNULL(PassYear,'') PassYear, isnull(p.markPriority,1) as markPriority FROM Stud_prev_details P INNER JOIN applyn A ON P.app_no = A.app_no LEFT JOIN TextValTable C ON C.TextCode = P.course_code  LEFT JOIN TextValTable U ON U.TextCode = P.university_code LEFT JOIN TextValTable pa ON pa.TextCode = P.Part1Language LEFT JOIN TextValTable pt ON pt.TextCode = P.Part2Language Where p.app_no = a.app_no and p.app_no='" + appno + "'  ";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(query, "text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        string univercode = Convert.ToString(ds.Tables[0].Rows[0]["university_code"]);
                        ddlpg.SelectedIndex = ddlpg.Items.IndexOf(ddlpg.Items.FindByText(univercode));
                        txtsclname.Text = Convert.ToString(ds.Tables[0].Rows[0]["Institute_Name"]);
                        txtscladd.Text = Convert.ToString(ds.Tables[0].Rows[0]["instaddress"]);
                        string passmonth = Convert.ToString(ds.Tables[0].Rows[0]["PassMonth"]);
                        if (passmonth.Trim() == "")
                        {
                            passmonth = "Month";
                        }
                        string passyear = Convert.ToString(ds.Tables[0].Rows[0]["PassYear"]);
                        if (passyear == "0")
                        {
                            passyear = "Year";
                        }
                        course_entno = Convert.ToString(ds.Tables[0].Rows[0]["course_entno"]);
                        string cour = Convert.ToString(ds.Tables[0].Rows[0]["Course"]);
                        //ug
                        if (coursetype.Trim().ToUpper() == "UG")
                        {
                            edut.Visible = true;
                            edutpg.Visible = false;
                            //ddlmonth.SelectedItem.Text = passmonth;
                            ddlmonth.SelectedIndex = ddlmonth.Items.IndexOf(ddlmonth.Items.FindByText(passmonth));
                            // ddlyear.SelectedItem.Text = passyear;
                            ddlyear.SelectedIndex = ddlyear.Items.IndexOf(ddlyear.Items.FindByText(passyear));
                            if (cour.Trim() == "HSC")
                            {
                                rbhsc.Checked = true;
                            }
                            else if (cour.Trim() == "CBSE")
                            {
                                rbcbse.Checked = true;
                            }
                            else
                            {
                                rbother.Checked = true;
                                txtotherscl.Text = cour;
                                txtotherscl.Visible = true;
                            }
                            string mark = Convert.ToString(ds.Tables[0].Rows[0]["securedmark"]);
                            string grade = Convert.ToString(ds.Tables[0].Rows[0]["grade"]);
                            if (mark != "" && mark != null)
                            {
                                rbmarkmark.Checked = true;
                                txtmark.Text = mark;
                                txtmark.Visible = true;
                                lblgrade.Visible = false;
                                txtgrade.Visible = false;
                                lblmark.Visible = true;
                            }
                            else
                            {
                                rbmarkgrade.Checked = true;
                                txtgrade.Text = grade;
                                lblgrade.Visible = true;
                                txtmark.Visible = false;
                                txtgrade.Visible = true;
                                lblmark.Visible = false;
                            }
                            savevalue = false;
                            cbsamclg.Visible = false;
                            lblsclname.Text = "School Name";
                            lblscladd.Text = "School Address";
                            txtsclname.Attributes.Add("placeholder", "School Name");
                            txtscladd.Attributes.Add("placeholder", "School Address");
                        }
                        else
                        {
                            edut.Visible = false;
                            edutpg.Visible = false;
                            LoadUniversity();
                            LoadPgcourse();
                            //unviersity
                            //ugcourse
                            ddlugcourse.SelectedIndex = ddlugcourse.Items.IndexOf(ddlugcourse.Items.FindByText(course));
                            //ddlmonth.SelectedItem.Text = passmonth;
                            ddlugmnth.SelectedIndex = ddlugmnth.Items.IndexOf(ddlugmnth.Items.FindByText(passmonth));
                            // ddlyear.SelectedItem.Text = passyear;
                            ddlugyr.SelectedIndex = ddlugyr.Items.IndexOf(ddlugyr.Items.FindByText(passyear));
                            txtugper.Text = Convert.ToString(ds.Tables[0].Rows[0]["percentage"]);
                            string branchcode = Convert.ToString(ds.Tables[0].Rows[0]["branch_code"]);
                            if (branchcode != "")
                            {
                                string branchname = d2.GetFunction("select TextVal from textvaltable where TextCriteria='branc' and college_code =" + ddlcollege.SelectedItem.Value + " and TextCode='" + branchcode + "'");
                                txtugmaj.Text = branchname;
                            }
                            //9/5/2016
                            if (PGname != "")
                            {
                                string[] splitC = PGname.Split('-');
                                if (splitC.Length > 0)
                                {
                                    string cname = splitC[1].ToString();
                                    if (cname.Trim().ToUpper() == "MCA")
                                    {
                                        lbltan.Visible = true;
                                        txttanmark.Visible = true;
                                        txttanmark.Text = Convert.ToString(ds.Tables[0].Rows[0]["tancet_mark"]);
                                    }
                                    else if (cname.Trim().ToUpper() == "MBA")
                                    {
                                        lbltan.Visible = true;
                                        txttanmark.Visible = true;
                                        txttanmark.Text = Convert.ToString(ds.Tables[0].Rows[0]["tancet_mark"]);
                                    }
                                    else
                                    {
                                        lbltan.Visible = false;
                                        txttanmark.Visible = false;
                                        txttanmark.Text = "";
                                    }
                                }
                            }
                            cbsamclg.Visible = true;
                            lblsclname.Text = "College Name";
                            lblscladd.Text = "College Address";
                            txtsclname.Attributes.Add("placeholder", "College Name");
                            txtscladd.Attributes.Add("placeholder", "College Address");
                        }
                    }
                    //txtapplno.Enabled = false;
                    buttonfun("2");
                    txtapplno.Text = Convert.ToString(ViewState["AppNew1"]);
                    if (appnovalueacr.Trim() == "1")
                    {
                        txtapplno.Text = Convert.ToString(ViewState["AppNew1"]).Substring(4);
                    }
                    cbincludercpt.Visible = false;
                }
            }
            else//new
            {
                rbMarksGrade.SelectedIndex = 0;
                popaddnewF2.Visible = true;
                TabContainer1.ActiveTabIndex = 0;
                loadPartLanguages();
                loadscholarship();
                loadQualification();
                loadAcaDropDowns();
                loadAcademicSpread();
                loadBnkDropDowns();
                loadBnkSpread();
                loadRelDropDowns();
                loadRelSpread();
                loadRefDropDowns();
                loadStaff(); loadreferstudent(); loadSpreadData(appfomno);
                bindnationalitymothertonguebloodgroup();
                bindexam();
                formate2view(appfomno, ddlbatch2.SelectedValue);
            }
        }
    }
    protected void Chk_Changed_StudentEnquiry(object sender, EventArgs e)
    {
        if (IsEnquiry.Checked == true)
        {
            lbl_Enq_No.Text = "Enquiry No";
            lbl_Enquiry_date.Text = "Enquiry Date";

        }
        else
        {
            lbl_Enq_No.Text = "Application No";
            lbl_Enquiry_date.Text = "Application Date";
        }
    }

    protected void lbtn_smsContent_Click(object sender, EventArgs e)
    {
        try
        {
            popSendSms.Visible = true;

            string selq = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Sms Content' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "'");
            if (selq.Trim() != "" && selq.Trim() != "0")
            {

                txt_SmsMsgPop.Text = Convert.ToString(selq);

            }

        }
        catch (Exception ex)
        {
        }

    }

    public void btn_Close_Click(object sender, EventArgs e)
    {
        popSendSms.Visible = false;
    }

    protected void Sava_txtClick(object sender, EventArgs e)
    {
        try
        {
            if (txt_SmsMsgPop.Text != "")
            {
                string smstext = txt_SmsMsgPop.Text;
                string college_code = ddlclg.SelectedItem.Value;

                //string insertquery = "if exists(select * from Master_Settings where settings='" + smstext + "') update Master_Settings set template='Your sms content' where settings='Sms Content' else insert into Master_Settings (settings,template) values ('Sms Content','" + smstext + "')";
                string insertquery = " if exists(select * from New_InsSettings where LinkName='Sms Content' and user_code='" + usercode + "' and college_code='" + college_code + "') update New_InsSettings set LinkValue='" + smstext + "' where LinkName='Sms Content' and user_code='" + usercode + "' and college_code='" + college_code + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code)values('Sms Content','" + smstext + "','" + usercode + "','" + college_code + "')";

                int ins = d2.update_method_wo_parameter(insertquery, "text");
                if (ins != 0)
                {
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Saved Successfully";
                }

            }
            else
            {
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                lbl_alert.Text = "Please Type The Sms Content";
            }
        }
        catch (Exception ex)
        {

        }



    }
    //Added By Saranyadevi 22.02.2018
    #region loadscholarship
    private void loadscholarship()
    {
        ddlscholarship.Items.Clear();

        try
        {
            string selQ = "select Textval,Textcode from textvaltable where textcriteria='schol' and college_code=" + collegecode + "";
            DataSet dsscholarship = new DataSet();
            dsscholarship = d2.select_method_wo_parameter(selQ, "Text");
            if (dsscholarship.Tables.Count > 0 && dsscholarship.Tables[0].Rows.Count > 0)
            {
                ddlscholarship.DataSource = dsscholarship;
                ddlscholarship.DataTextField = "Textval";
                ddlscholarship.DataValueField = "Textcode";
                ddlscholarship.DataBind();

            }
        }
        catch { }
        ddlscholarship.Items.Insert(0, "Select");
        ddlscholarship.Items.Add("Others");

        txt_subscholar.Text = "";

    }
    #endregion
    //End by Saranyadevi 22.2.2018
    //delsi 0103
    #region studentphotoupload
    public void lbkBtn_studphoto_Click(object sender, EventArgs e)
    {
        try
        {
            string appformno = txt_appfromno.Text;
             string appno=string.Empty;
            if (appformno != null && appformno.Trim() != "")
            {

                panelphoto.Visible = true;
                appno = d2.GetFunction("select app_no from applyn where app_formno='" + appformno + "'");
                if (appno != "" && appno != "0")
                {
                    //  lblcaption.Text = "" + Name + "(" + Roll + ") Photo's Details";
                    loadimage(appno);
                }

            }
            if (appno == "0")
            {
                imgstudp.ImageUrl = null;
                imgfatp.ImageUrl = null;
                imgmotp.ImageUrl = null;
                imggurp.ImageUrl = null;
            }


            panelphoto.Visible = true;
        }
        catch (Exception ex)
        {

        }

    }

    public void loadimage(string appno)
    {
        try
        {
            string query = "select Photo,f_photo,m_photo,g_photo from StdPhoto where app_no='" + appno + "'";
            ds.Dispose();
            ds.Reset();
            ds = d2.select_method_wo_parameter(query, "Text");
            imgstudp.ImageUrl = null;
            imgfatp.ImageUrl = null;
            imgmotp.ImageUrl = null;
            imggurp.ImageUrl = null;
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (ds.Tables[0].Rows[0]["Photo"] != null)
                {
                    imgstudp.Visible = true;
                    imgstudp.ImageUrl = "~/Handler/Handler3.ashx?id=" + appno;
                }
                else
                {
                    imgstudp.Visible = false;
                }
                if (ds.Tables[0].Rows[0]["f_photo"] != null)
                {
                    imgfatp.Visible = true;
                    imgfatp.ImageUrl = "~/Handler/Handler7.ashx?id=" + appno;
                }
                else
                {
                    imgfatp.Visible = false;
                }
                if (ds.Tables[0].Rows[0]["m_photo"] != null)
                {
                    imgmotp.Visible = true;
                    imgmotp.ImageUrl = "~/Handler/Handler8.ashx?id=" + appno;
                }
                else
                {
                    imgmotp.Visible = false;
                }
                if (ds.Tables[0].Rows[0]["g_photo"] != null)
                {
                    imggurp.Visible = true;
                    imggurp.ImageUrl = "~/Handler/Handler9.ashx?id=" + appno;
                }
                else
                {
                    imggurp.Visible = false;
                }
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, Convert.ToString(collegecode), "StudentNewApplicationReportNew");
        }
    }

    protected void btnstuph_Click(object sender, EventArgs e)//delsi2802
    {
        try
        {
            panelphoto.Visible = false;
            //if (fulstudp.HasFile)
            //{
            //    if (fulstudp.FileName.EndsWith(".jpg") || fulstudp.FileName.EndsWith(".jpeg") || fulstudp.FileName.EndsWith(".JPG") || fulstudp.FileName.EndsWith(".gif") || fulstudp.FileName.EndsWith(".png"))
            //    {
            //        int fileSize = fulstudp.PostedFile.ContentLength;
            //        ViewState["size"] = fileSize;
            //        byte[] documentBinary = new byte[fileSize];
            //        ViewState["studentimage"] = documentBinary;
            //        fulstudp.PostedFile.InputStream.Read(documentBinary, 0, fileSize);

            //        //  PhotoUpload("photo", appno, fileSize, documentBinary);
            //        //  loadimage(appno);

            //    }

            //}
            //if (fulfatp.HasFile)
            //{
            //    if (fulfatp.FileName.EndsWith(".jpg") || fulfatp.FileName.EndsWith(".jpeg") || fulfatp.FileName.EndsWith(".JPG") || fulfatp.FileName.EndsWith(".gif") || fulfatp.FileName.EndsWith(".png"))
            //    {
            //        int fileSize = fulfatp.PostedFile.ContentLength;
            //        ViewState["fsize"] = fileSize;
            //        byte[] documentBinary = new byte[fileSize];
            //        ViewState["fatherimage"] = documentBinary;
            //        fulfatp.PostedFile.InputStream.Read(documentBinary, 0, fileSize);

            //    }
            //}
            //if (fulmp.HasFile)
            //{
            //    if (fulmp.FileName.EndsWith(".jpg") || fulmp.FileName.EndsWith(".jpeg") || fulmp.FileName.EndsWith(".JPG") || fulmp.FileName.EndsWith(".gif") || fulmp.FileName.EndsWith(".png"))
            //    {
            //        int fileSize = fulmp.PostedFile.ContentLength;
            //        ViewState["msize"] = fileSize;
            //        byte[] documentBinary = new byte[fileSize];
            //        ViewState["motherimage"] = documentBinary;
            //        fulmp.PostedFile.InputStream.Read(documentBinary, 0, fileSize);
            //    }
            //}
            //if (fulguar.HasFile)
            //{
            //    if (fulguar.FileName.EndsWith(".jpg") || fulguar.FileName.EndsWith(".jpeg") || fulguar.FileName.EndsWith(".JPG") || fulguar.FileName.EndsWith(".gif") || fulguar.FileName.EndsWith(".png"))
            //    {

            //        int fileSize = fulguar.PostedFile.ContentLength;
            //        ViewState["gsize"] = fileSize;
            //        byte[] documentBinary = new byte[fileSize];
            //        ViewState["gaudianimage"] = documentBinary;
            //        fulguar.PostedFile.InputStream.Read(documentBinary, 0, fileSize);
            //    }
            //}
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, Convert.ToString(collegecode), "StudentNewApplicationReportNew");
        }
    }

    protected int PhotoUpload(string ColumnName, string AppNo, int FileSize, byte[] DocDocument)//barath 10.01.2018
    {
        int Result = 0;
        try
        {
             if (ColumnName.Trim() != "" && AppNo.Trim() != "" && FileSize != 0)
             {
                string InsPhoto = "if exists (select " + ColumnName + " from StdPhoto where app_no=@appno) update StdPhoto set " + ColumnName + "=@photoid where app_no=@appno else insert into StdPhoto (app_no," + ColumnName + ") values(@appno,@photoid)";
                SqlCommand cmd = new SqlCommand(InsPhoto, ssql);
                SqlParameter uploadedsubject_name = new SqlParameter("@appno", SqlDbType.Int, 50);
                uploadedsubject_name.Value = AppNo;
                cmd.Parameters.Add(uploadedsubject_name);
                uploadedsubject_name = new SqlParameter("@photoid", SqlDbType.Binary, FileSize);
                uploadedsubject_name.Value = DocDocument;
                cmd.Parameters.Add(uploadedsubject_name);
                ssql.Close();
                ssql.Open();
                Result = cmd.ExecuteNonQuery();
                ssql.Close();
        }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, Convert.ToString(collegecode), "StudentNewApplicationReportNew");
        }
        return Result;
    }

    protected void btnexit_Click(object sender, EventArgs e)
    {
        panelphoto.Visible = false;

    }
    public void btnrmvStud_Click(object sender, EventArgs e)
    {
        try
        {
            string applicationFormnum = txt_appfromno.Text;
            string applicationNum = d2.GetFunction("select app_no from applyn where app_formno='" + applicationFormnum + "'");
            if (applicationNum != "0" && applicationNum != "")
            {
                string query = "select Photo,f_photo,m_photo,g_photo from StdPhoto where app_no='" + applicationNum + "'";
                ds.Dispose();
                ds.Reset();
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    if (ds.Tables[0].Rows[0]["Photo"] != "" || ds.Tables[0].Rows[0]["Photo"] != null)
                    {
                        string qur = "update StdPhoto set Photo='' where app_no='" + applicationNum + "'";
                        int val = d2.update_method_wo_parameter(qur, "text");
                    }
                }
            }
        }
        catch (Exception ex)
        {


        }

    }
    public void btnrmvfather_Click(object sender, EventArgs e)
    {
        try
        {
            string applicationFormnum = txt_appfromno.Text;
            string applicationNum = d2.GetFunction("select app_no from applyn where app_formno='" + applicationFormnum + "'");
            if (applicationNum != "0" && applicationNum != "")
            {
                string query = "select Photo,f_photo,m_photo,g_photo from StdPhoto where app_no='" + applicationNum + "'";
                ds.Dispose();
                ds.Reset();
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    if (ds.Tables[0].Rows[0]["f_photo"] != "" || ds.Tables[0].Rows[0]["f_photo"] != null)
                    {
                        string qur = "update StdPhoto set f_photo='' where app_no='" + applicationNum + "'";
                        int val = d2.update_method_wo_parameter(qur, "text");
                    }
                }
            }
        }
        catch (Exception ex)
        {


        }
    }
    public void btnrmvmother_Click(object sender, EventArgs e)
    {
        try
        {
            string applicationFormnum = txt_appfromno.Text;
            string applicationNum = d2.GetFunction("select app_no from applyn where app_formno='" + applicationFormnum + "'");
            if (applicationNum != "0" && applicationNum != "")
            {
                string query = "select Photo,f_photo,m_photo,g_photo from StdPhoto where app_no='" + applicationNum + "'";
                ds.Dispose();
                ds.Reset();
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    if (ds.Tables[0].Rows[0]["m_photo"] != "" || ds.Tables[0].Rows[0]["m_photo"] != null)
                    {
                        string qur = "update StdPhoto set m_photo='' where app_no='" + applicationNum + "'";
                        int val = d2.update_method_wo_parameter(qur, "text");
                    }
                }
            }
        }
        catch (Exception ex)
        {


        }
    }
    public void btnrmv_gua_Click(object sender, EventArgs e)
    {

        try
        {
            string applicationFormnum = txt_appfromno.Text;
            string applicationNum = d2.GetFunction("select app_no from applyn where app_formno='" + applicationFormnum + "'");
            if (applicationNum != "0" && applicationNum != "")
            {
                string query = "select Photo,f_photo,m_photo,g_photo from StdPhoto where app_no='" + applicationNum + "'";
                ds.Dispose();
                ds.Reset();
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    if (ds.Tables[0].Rows[0]["g_photo"] != "" || ds.Tables[0].Rows[0]["g_photo"] != null)
                    {
                        string qur = "update StdPhoto set g_photo='' where app_no='" + applicationNum + "'";
                        int val = d2.update_method_wo_parameter(qur, "text");
                    }
                }
            }
        }
        catch (Exception ex)
        {


        }
    }

    public void BtnsaveStud_Click(object sender, EventArgs e)
    {

        if (fulstudp.HasFile)
        {
            if (fulstudp.FileName.EndsWith(".jpg") || fulstudp.FileName.EndsWith(".jpeg") || fulstudp.FileName.EndsWith(".JPG") || fulstudp.FileName.EndsWith(".gif") || fulstudp.FileName.EndsWith(".png"))
            {
                Session["Image"] = fulstudp.PostedFile;
                int fileSize = fulstudp.PostedFile.ContentLength;
                ViewState["size"] = fileSize;
                byte[] documentBinary = new byte[fileSize];
                ViewState["studentimage"] = documentBinary;
                fulstudp.PostedFile.InputStream.Read(documentBinary, 0, fileSize);
                // imgstudp.Visible = true;
                string base64String = Convert.ToBase64String(documentBinary, 0, documentBinary.Length);
                imgstudp.ImageUrl = "data:image/;base64," + base64String;

                //  PhotoUpload("photo", appno, fileSize, documentBinary);
                //  loadimage(appno);

            }

        }

      

    }
    public void Btndownloadfather_Click(object sender, EventArgs e)
    {
        if (fulfatp.HasFile)
        {
            if (fulfatp.FileName.EndsWith(".jpg") || fulfatp.FileName.EndsWith(".jpeg") || fulfatp.FileName.EndsWith(".JPG") || fulfatp.FileName.EndsWith(".gif") || fulfatp.FileName.EndsWith(".png"))
            {
                int fileSize = fulfatp.PostedFile.ContentLength;
                ViewState["fsize"] = fileSize;
                byte[] documentBinary = new byte[fileSize];
                ViewState["fatherimage"] = documentBinary;
                fulfatp.PostedFile.InputStream.Read(documentBinary, 0, fileSize);

                string base64String = Convert.ToBase64String(documentBinary, 0, documentBinary.Length);
                imgfatp.ImageUrl = "data:image/;base64," + base64String;

            }
        }

    }
    public void btnsavemother_Click(object sender, EventArgs e)
    {
        if (fulmp.HasFile)
        {
            if (fulmp.FileName.EndsWith(".jpg") || fulmp.FileName.EndsWith(".jpeg") || fulmp.FileName.EndsWith(".JPG") || fulmp.FileName.EndsWith(".gif") || fulmp.FileName.EndsWith(".png"))
            {
                int fileSize = fulmp.PostedFile.ContentLength;
                ViewState["msize"] = fileSize;
                byte[] documentBinary = new byte[fileSize];
                ViewState["motherimage"] = documentBinary;
                fulmp.PostedFile.InputStream.Read(documentBinary, 0, fileSize);

                string base64String = Convert.ToBase64String(documentBinary, 0, documentBinary.Length);
                imgmotp.ImageUrl = "data:image/;base64," + base64String;
            }
        }

    }
    public void Btnsavegau_Click(object sender, EventArgs e)
    {
        if (fulguar.HasFile)
        {
            if (fulguar.FileName.EndsWith(".jpg") || fulguar.FileName.EndsWith(".jpeg") || fulguar.FileName.EndsWith(".JPG") || fulguar.FileName.EndsWith(".gif") || fulguar.FileName.EndsWith(".png"))
            {

                int fileSize = fulguar.PostedFile.ContentLength;
                ViewState["gsize"] = fileSize;
                byte[] documentBinary = new byte[fileSize];
                ViewState["gaudianimage"] = documentBinary;
                fulguar.PostedFile.InputStream.Read(documentBinary, 0, fileSize);

                string base64String = Convert.ToBase64String(documentBinary, 0, documentBinary.Length);
                imggurp.ImageUrl = "data:image/;base64," + base64String;
            }
        }
    }

    #endregion

    #region kroshna kumar 15march2018
    protected void ddseattype_change(object sender, EventArgs e)
    {
        try
        {
            string applicationFormnum = txt_appfromno.Text;
            bindquto();
        }
        catch { }
    }

    public void bindquto()
    {
        try
        {

            string seat = "";
            ddl_quata.Items.Clear();
            cblQuota.Items.Clear();
            string deptquery = string.Empty;

            deptquery = " (SELECT distinct quotaid , quotaname from stu_quotaseetinges  where settype ='" + ddl_seattype2.SelectedItem.Value + "'   and collegecode ='" + ddlcollege.SelectedItem.Value + "')";

            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds1.Tables.Count > 0)
            {
                if (ds1.Tables[0].Rows.Count > 0)
                {
                    ddl_quata.DataSource = ds1;
                    ddl_quata.DataTextField = "quotaname";
                    ddl_quata.DataValueField = "quotaid";
                    ddl_quata.DataBind();
                   
                    ddl_quata.Items.Add("Others");
                }
                else
                {
                    ddl_quata.Items.Insert(0, "Select");
                    ddl_quata.Items.Add("Others");
                }
            }
           
            
          

           

        }
        catch
        {
            //ddl_quata.Items.Insert(0, "Select");
            //ddl_quata.Items.Add("Others");
        }
    }
    protected void loadquota()
    {
        try
        {
            ds.Clear();
            cblQuota.Items.Clear();

            string itemheader = "";
            //for (int i = 0; i < cbl_seat.Items.Count; i++)
            //{
            //    if (cbl_seat.Items[i].Selected == true)
            //    {
            //        if (itemheader == "")
            //        {
            //            itemheader = "" + cbl_seat.Items[i].Value.ToString() + "";
            //        }
            //        else
            //        {
            //            itemheader = itemheader + "'" + "," + "" + "'" + cbl_seat.Items[i].Value.ToString() + "";
            //        }
            //    }
            //}
            string SelQuery = string.Empty;
            SelQuery = "select distinct textcode as code from TextValTable  where TextCriteria='seat' and college_code in('" + collegecode + "')";
            itemheader = getFilterValues(SelQuery);//modified by abarna
            if (itemheader.Trim() != "")
            {
                // string deptquery = "select distinct LedgerName,LedgerPK from FM_LedgerMaster l,FM_HeaderMaster h where l.HeaderFK = h.HeaderPK and l.HeaderFK in('" + itemheader + "') and l.LedgerMode='0' and l.CollegeCode =" + collegecode1 + "";
                // string degree = Convert.ToString(getCblSelectedValue(cbl_dept));
                //string deptquery = "select distinct cat_code,category_name from seattype_cat where quota in('" + itemheader + "') and  degree_code in('" + degree + "')";
                //select distinct quota from seattype_cat where quota in('" + itemheader + "') and college_code='" + collegecode1 + "';

                string deptquery = "select distinct quotaname,* from stu_quotaseetinges where settype in('" + itemheader + "') and  collegecode in('" + collegecode + "')";//

                ds.Clear();
                ds = d2.select_method_wo_parameter(deptquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cblQuota.DataSource = ds;
                    cblQuota.DataTextField = "quotaname";
                    cblQuota.DataValueField = "quotaid";
                    cblQuota.DataBind();

                    for (int i = 0; i < cblQuota.Items.Count; i++)
                    {
                        cblQuota.Items[i].Selected = true;
                    }
                    txtQuota.Text = "Quota(" + cblQuota.Items.Count + ")";
                    cbQuota.Checked = true;

                }
                else
                {
                    txtQuota.Text = "--Select--";
                    cbQuota.Checked = false;
                }
            }
            else
            {
                txtQuota.Text = "--Select--";
                cbQuota.Checked = false;
            }
        }
        catch
        {
        }
    }
    protected string getFilterValues(string SelQuery)
    {
        string getValues = string.Empty;
        try
        {
            string[] headerFK = new string[0];
            DataSet dsval = d2.select_method_wo_parameter(SelQuery, "Text");
            if (dsval.Tables.Count > 0 && dsval.Tables[0].Rows.Count > 0)
            {
                for (int row = 0; row < dsval.Tables[0].Rows.Count; row++)
                {
                    Array.Resize(ref headerFK, headerFK.Length + 1);
                    headerFK[headerFK.Length - 1] = Convert.ToString(dsval.Tables[0].Rows[row]["code"]);
                }
                getValues = string.Join("','", headerFK);
            }
        }
        catch { getValues = string.Empty; }
        return getValues;
    }
    protected void txtAadharcardno(object sender, EventArgs e)
    {
        try
        {

            
            string aadharcardno = txt_Aadharcardno.Text;

            {
                DataSet dsRegNoVer = new DataSet();
                string filter = "";
                if (aadharcardno.Trim() != "")
                    filter = "   and (a.Aadharcard_no='" + aadharcardno + "')";

                dsRegNoVer = d2.select_method_wo_parameter(" select a.app_formno as [Application No],a.stud_name AS[Student Name] ,cf.coll_acronymn AS [COLLEGENAME],dt.Dept_Name as Department ,dt.Dept_Name as Department,case when a.sex='0' then 'Male' when a.sex='1' then 'Female' when a.sex='2' then 'Transgender' end Gender,a.Student_Mobile as [Student Mobile],a.parent_name as [Father Name],convert(varchar(10), a.dob,103) DOA,prev.Registration_NO as [Roll ] from applyn a,Stud_prev_details prev,degree d,Department dt,Course C,collinfo cf   where cf.college_code=d.college_code and a.college_code=cf.college_code and a.app_no=prev.app_no and d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a. Aadharcard_no='" + aadharcardno + "' ", "TEXT");


                if (dsRegNoVer.Tables.Count > 0 && dsRegNoVer.Tables[0].Rows.Count > 0)
                {
                    Alreadyreg_div.Visible = true;
                    Alreadyregstudent_grid.DataSource = dsRegNoVer.Tables[0];
                    Alreadyregstudent_grid.DataBind();
                    Alreadyregstudent_grid.Visible = true;

                }
                else
                {
                    Alreadyreg_div.Visible = false;
                    Alreadyregstudent_grid.Visible = false;
                    imgdiv2.Visible = false;
                    lbl_alert.Visible = false;

                }

            }
        }
        catch
        {
            imgdiv2.Visible = true;
            lbl_alert.Visible = true;

        }
    }
    protected void Alreadyreg_div_Click(object sender, EventArgs e)
    {
        Alreadyreg_div.Visible = false;
    }
    public void quata()
    {
        string collCode = string.Empty;

       // collCode = ddl_collegeRel.SelectedValue;
        collCode = ddlcollege.SelectedItem.Value;//abarna
        string seat_type = ddl_seattype2.SelectedValue;
        string quota = string.Empty;
        string deptquery = string.Empty;

        //string con = ;



        if (ddl_seattype2.SelectedItem.Text.Trim() != "" && ddl_quata.SelectedItem.Text.Trim().ToUpper() == "OTHERS" && txt_quata.Text.Trim() != "")
        {

            deptquery = " (SELECT distinct quotaname from stu_quotaseetinges   where quotaname='" + txt_quata.Text + "' and  settype ='" + ddl_seattype2.SelectedItem.Value + "'   and collegecode ='" + ddlcollege.SelectedItem.Value + "')";
            ds1.Clear();
            ds1 = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds1.Tables[0].Rows.Count == 0)
            {
                string quata = "insert into stu_quotaseetinges(quotaname,settype ,collegecode ) values ('" + txt_quata.Text + "', '" + seat_type + "','" + collCode + "')";

                d2.update_method_wo_parameter(quata, "Text");
            }
        }



    }   
    #endregion


    //krishhna kumar.r05/03/2018

    protected void txtapplno_TextChanged(object sender, EventArgs e)
    {

        string applno = "";
       
        string checkno = "";
        //applno = Convert.ToString(txtapplno.Text.Trim());
        //applno = Convert.ToString(TxtAcrApplno.Text.Trim()) + applno;
        //checkno = d2.GetFunction("select app_formno from applyn where app_formno='" + applno + "'");
        //if (checkno != "0")
        //{
        //    imgdiv2.Visible = true;
        //    lbl_alert.Visible = true;
        //    lbl_alert.Text = "Application No Already Exist";
        //    return;
        //}



        applno = Convert.ToString(txtapplno.Text.Trim());
        if (appnovalueacr.Trim() == "1")
        {
            applno = Convert.ToString(TxtAcrApplno.Text.Trim()) + applno;
            checkno = d2.GetFunction("select app_formno from applyn where app_formno='" + applno + "'");
            if (checkno != "0")
            {
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                lbl_alert.Text = "Application No Already Exist";
                return;
            }
        }
        else
        {
            checkno = d2.GetFunction("select app_formno from applyn where app_formno='" + applno + "'");
            if (checkno != "0")
            {
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                lbl_alert.Text = "Application No Already Exist";
                return;
            }
        }

    }




    protected void txt_appfromno_TextChanged(object sender, EventArgs e)
    {
        string checkno = d2.GetFunction("select app_formno from applyn where app_formno='" + txt_appfromno.Text + "'");
        if (checkno != "0")
        {
            //lbl_alert.Text = "Application No Already Exist";
            //ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Application No Already Exist\");", true);
            //return;

            imgdiv2.Visible = true;
            lbl_alert.Visible = true;
            lbl_alert.Text = "Application No Already Exist";
            return;
        }
    }
    protected void cbQuota_checkedchange(object sender, EventArgs e)
    {
        string ledgername = "";
        if (cbQuota.Checked == true)
        {
            for (int i = 0; i < cblQuota.Items.Count; i++)
            {
                cblQuota.Items[i].Selected = true;
                ledgername = Convert.ToString(cblQuota.Items[i].Text);
            }
            if (cblQuota.Items.Count == 1)
            {
                txtQuota.Text = "" + ledgername + "";
            }
            else
            {
                txtQuota.Text = "Quota (" + (cblQuota.Items.Count) + ")";
            }
            // txt_ledger.Text = "Ledger(" + (cbl_ledger.Items.Count) + ")";
        }
        else
        {
            for (int i = 0; i < cblQuota.Items.Count; i++)
            {
                cblQuota.Items[i].Selected = false;
            }
            txtQuota.Text = "--Select--";
        }

    }
    protected void cblQuota_SelectedIndexChange(object sender, EventArgs e)
    {
        string ledgername = "";
        txtQuota.Text = "--Select--";
        cbQuota.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cblQuota.Items.Count; i++)
        {
            if (cblQuota.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                ledgername = Convert.ToString(cblQuota.Items[i].Text);
            }
        }
        if (commcount > 0)
        {
            //   txt_ledger.Text = "Ledger(" + commcount.ToString() + ")";
            if (commcount == cblQuota.Items.Count)
            {
                cbQuota.Checked = true;
            }
            if (commcount == 1)
            {
                txtQuota.Text = "" + ledgername + "";
            }
            else
            {
                txtQuota.Text = "Quota (" + commcount.ToString() + ")";
            }
        }

    }

}
