using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.IO;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Gios.Pdf;
using System.Net;
using System.Text.RegularExpressions;
using System.Web.Services;
using System.Data.SqlClient;

//Last Modified by Idhris 23-02-2017 Included Scholarship for Challan
//Last Modified by Idhris 09-01-2017 Class file separated for Receipt Format 2,11,12,13
//Last Modified by Idhris 07-01-2017 Class file separated for Challans and Receipt
//Last modified by Idhris 06-01-2017 loading image
public partial class ChallanReceipt : System.Web.UI.Page
{

    string usercode = string.Empty;
    string collegecode1 = string.Empty;
    string collegecode = string.Empty;
    string singleuser = string.Empty;
    string group_user = string.Empty;
    string linkvalue = string.Empty;
    static string collegecodestat = string.Empty;
    static string usercodestat = string.Empty;

    string userCollegeCode = string.Empty;
    string selectQuery = "";
    string accidRecpt = string.Empty;
    string lastRecptNo = string.Empty;
    static ArrayList ItemList = new ArrayList();
    static ArrayList Itemindex = new ArrayList();
    static int chosedmode = 0;
    static int personmode = 0;
    static byte BalanceType = 0;
    static int ledgerorheader = 0;
    static int grpHdrLdr = 0;
    static string vencontcode = "-1";
    static int isHeaderwise = 0;
    // static string smartCno = string.Empty;
    DAccess2 d2 = new DAccess2();
    static DAccess2 d22 = new DAccess2();
    ReuasableMethods reUse = new ReuasableMethods();

    DataSet ds = new DataSet();
    DataSet ds1 = new DataSet();
    DataSet dsprint = new DataSet();
    DataSet dssel = new DataSet();
    DateTime dt;
    int row = 0;
    int i = 0;
    double partamt1 = 0;
    double partamt2 = 0;
    double tobepaidtotalamt = 0;
    double baltotalamt = 0;
    double tottotamt = 0;
    double paitotamt = 0;
    double excessAmt = 0;
    bool excessOk = false;
    bool checkFromPopper = false;
    bool fromScript = true;
    string linkName = string.Empty;
    bool rec = false;
    string LibRollNo = "";

    //**********************************************//
    //   Code Started by Idhris from 12/10/2015     //
    //**********************************************//


    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            usercode = Session["usercode"].ToString();
            collegecode1 = Session["collegecode"].ToString();
            singleuser = Session["single_user"].ToString();
            group_user = Session["group_code"].ToString();
            string grouporusercode = "";
            if ((Session["group_code"].ToString().Trim() != "") && (Session["group_code"].ToString().Trim() != "0") && (Session["group_code"].ToString().Trim() != "-1"))
            {
                grouporusercode = " group_code=" + Session["group_code"].ToString().Trim() + "";
                usercode = Session["group_code"].ToString();
            }
            else
            {
                grouporusercode = " usercode=" + Session["usercode"].ToString().Trim() + "";
                usercode = Session["usercode"].ToString();
            }
            if (!IsPostBack)
            {

                //rbl_rollnoNew.Items[0].Enabled = false;
                //rbl_rollnoNew.Items[1].Enabled = false;
                //rbl_rollnoNew.Items[2].Enabled = false;
                //rbl_rollnoNew.Items[3].Enabled = false;
                string StreamShift = string.Empty;
                try
                {
                    StreamShift = Convert.ToString(Session["streamcode"]);
                    if (StreamShift.Trim() == "")
                    {
                        StreamShift = "Stream";
                    }
                }
                catch { StreamShift = "Stream"; }
                lbl_stream.Text = StreamShift;
                fldfnlyr.Visible = true;
                personmode = 0;
                chosedmode = 0;
                LoadFromSettings();

                loadScholarship("-1");

                txt_date.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txt_date1.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txt_date.Attributes.Add("readonly", "readonly");
                txt_date1.Attributes.Add("readonly", "readonly");
                txt_totamt.Attributes.Add("readonly", "readonly");
                txt_paidamt.Attributes.Add("readonly", "readonly");
                txt_balamt.Attributes.Add("readonly", "readonly");
                txt_examt.Attributes.Add("readonly", "readonly");
                txt_GvtTot.Attributes.Add("readonly", "readonly");
                txt_ExcAmt.Attributes.Add("readonly", "readonly");
                txt_CautionAmt.Attributes.Add("readonly", "readonly");

                txt_return.Attributes.Add("readonly", "readonly");
                // txt_exfees.Attributes.Add("readonly", "readonly");
                txt_chltakn.Attributes.Add("readonly", "readonly");
                txt_totnoofstudents.Attributes.Add("readonly", "readonly");
                txt_tostudentsrcpt.Attributes.Add("readonly", "readonly");
                txtMultTotal.Attributes.Add("readonly", "readonly");

                txt_datemd.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txt_datemd.Attributes.Add("readonly", "readonly");
                txt_chltaken.Attributes.Add("readonly", "readonly");
                //txtroll_vendor.Attributes.Add("readonly", "readonly");
                //txtname_vendor.Attributes.Add("readonly", "readonly");
                bindclg();
                collegecode1 = Convert.ToString(ddl_college.SelectedValue);
                setLabelText();
                bindType();
                bindGrid();
                collegebank();
                bank();
                cardType();
                loadGridStudent();
                cb_selectHeadAll.Visible = false;
                txt_rcptno.Text = generateReceiptNo();
                if (rdo_challan.Checked)
                {
                    txt_rcptno.Text = generateChallanNo();
                }
                img_stud.ImageUrl = "";
                img_stud.Visible = false;
                studentSelect.Visible = true;
                rbl_rollno.SelectedIndex = 0;
                //txt_rollno.TextMode = TextBoxMode.SingleLine;

                btn_print.Visible = false;
                btn_save.Visible = true;
                checCashDD.Visible = true;
                cb_selcthd.Checked = true;
                cb_selcthd_CheckedChanged(sender, e);
                imgAlert.Visible = false;
                ddl_collegebank.Visible = false;
                lbl_cbname.Visible = false;


                int val = Convert.ToInt32(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanReceiptDefaultPriority' and user_code ='" + usercode + "' and college_code ='" + ddl_college.SelectedItem.Value + "'"));
                if (val == 1)
                {
                    rdo_receipt.Checked = false;
                    rdo_challan.Checked = true;
                    rdo_challan_CheckedChanged(sender, e);
                    btn_save.Visible = false;
                }
                try
                {
                    string HeaderwiseQ = "select LinkValue from New_InsSettings where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
                    isHeaderwise = Convert.ToInt32(d2.GetFunction(HeaderwiseQ).Trim());
                }
                catch { isHeaderwise = 0; }

                if (isHeaderwise > 0)
                {
                    try
                    {
                        string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
                        DataSet dsHdrsChk = new DataSet();

                        dsHdrsChk = d2.select_method_wo_parameter("select HeaderFk from FM_HeaderFinCodeSettingsDet hs,FM_HeaderFinCodeSettings s where s.HeaderSettingPK=hs.HeaderSettingFK and CollegeCode=" + collegecode1 + " and FinyearFK=" + finYearid + "  select Headerpk from FM_HeaderMaster H,FS_HeaderPrivilage P  where H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = " + usercode + " and h.CollegeCode=" + collegecode1 + "", "");

                        if (dsHdrsChk.Tables.Count > 1)
                        {
                            string uHdr = string.Empty;

                            for (int uhdr = 0; uhdr < dsHdrsChk.Tables[1].Rows.Count; uhdr++)
                            {
                                if (uHdr == string.Empty)
                                {
                                    uHdr = Convert.ToString(dsHdrsChk.Tables[1].Rows[uhdr][0]);
                                }
                                else
                                {
                                    uHdr += "," + Convert.ToString(dsHdrsChk.Tables[1].Rows[uhdr][0]);
                                }
                            }
                            dsHdrsChk.Tables[0].DefaultView.RowFilter = " headerfk in (" + uHdr + ")";
                            DataView dv = dsHdrsChk.Tables[0].DefaultView;
                            if (dv.Count != dsHdrsChk.Tables[1].Rows.Count)
                            {
                                imgAlert.Visible = true;
                                lbl_alert.Text = "Receipt No Not Set For All Headers";
                            }
                        }
                        else
                        {
                            imgAlert.Visible = true;
                            lbl_alert.Text = "Receipt No Not Set For All Headers";
                        }

                    }
                    catch (Exception ex) { }
                    #region OldCode
                    //try
                    //{
                    //    string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
                    //    DataSet dsHdrsChk = new DataSet();

                    //    dsHdrsChk = d2.select_method_wo_parameter("select HeaderFk from FM_HeaderFinCodeSettingsDet hs,FM_HeaderFinCodeSettings s where s.HeaderSettingPK=hs.HeaderSettingFK and CollegeCode=" + collegecode1 + " and FinyearFK=" + finYearid + "  select Headerpk from FM_HeaderMaster H,FS_HeaderPrivilage P  where H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = " + usercode + " and h.CollegeCode=" + collegecode1 + "", "");

                    //    if (dsHdrsChk.Tables.Count > 1)
                    //    {
                    //        if (dsHdrsChk.Tables[0].Rows.Count != dsHdrsChk.Tables[1].Rows.Count)
                    //        {
                    //            imgAlert.Visible = true;
                    //            lbl_alert.Text = "Receipt No Not Set For All Headers";
                    //        }
                    //    }
                    //    else
                    //    {
                    //        imgAlert.Visible = true;
                    //        lbl_alert.Text = "Receipt No Not Set For All Headers";
                    //    }
                    //}
                    //catch (Exception ex) {}
                    #endregion
                }
                tdsemadd.Visible = true;
                createLogo(collegecode1);
                LoadYearSemester();
                if (rdo_receipt.Checked)
                    getEditableReceipt();
                loadfinanceyear();
                //if (checkSchoolSetting() == 0)
                //{
                //    if (Application["pageName"] != null)
                //    {
                //        rdo_receipt.Checked = false;
                //        //  rdo_receipt.Enabled = false;
                //        rdo_challan.Checked = true;
                //        rdo_challan_CheckedChanged(sender, e);
                //        loadfinanceyear();
                //        fldfnlyr.Visible = true;
                //    }
                //}
                //else
                //{
                //    Application["pageName"] = string.Empty;
                //}
                //getTabRights(sender, e);
                Txt_amt.Text = "";
                //Added by saranya on 27Oct2018 for library
                LibRollNo = Request.QueryString["Rollno"];
                if (!string.IsNullOrEmpty(LibRollNo))
                {
                    txt_rollno.Text = LibRollNo;
                    studentSelect.Visible = false;
                    rbl_rollno.Items.FindByValue("0");
                    txt_rollno_Changed(sender, e);
                    BtnExit.Visible = true;
                }
            }
            maintainPaymedeState();

            collegecode1 = Convert.ToString(ddl_college.SelectedValue);
            txt_rcptno.Text = generateReceiptNo();
            if (rdo_challan.Checked)
            {
                txt_rcptno.Text = generateChallanNo();
            }
            //collegecode1 = Convert.ToString(ddl_college.SelectedValue);
            collegecodestat = collegecode1;
            usercodestat = usercode;
            if (ddl_ledgeSearch.SelectedIndex == 0)
            {
                ledgerorheader = 0;
            }
            else
            {
                ledgerorheader = 1;
            }
            if (rdo_receipt.Checked)
            {
                UPpanel_sem.Visible = true;
                ddl_sem.Visible = false;
            }
            else
            {
                if (rdo_sngle.Checked)
                {
                    UPpanel_sem.Visible = false;
                    ddl_sem.Visible = true;
                }
                else
                {
                    UPpanel_sem.Visible = false;
                    ddl_sem.Visible = false;
                }
            }
            fromScript = true;
            if (rbl_rollnoNew.SelectedIndex == 0)
            {
                //this.Form.DefaultButton = "btnSearch";
            }
            else if (rbl_rollnoNew.SelectedIndex == 1)
            {
                //this.Form.DefaultButton = "btnGO_staff";
            }
            else if (rbl_rollnoNew.SelectedIndex == 3)
            {
                //this.Form.DefaultButton = "btnGO_other";
            }
            else if (rbl_rollnoNew.SelectedIndex == 2 && rdo_sngle.Checked && txtroll_vendor.Text.Trim() != "")
            {
                //this.Form.DefaultButton = "btnGO_vendor";
                try
                {
                    vencontcode = txtroll_vendor.Text.Trim().Split('-')[2];
                }
                catch { vencontcode = "-1"; }
            }
            else
            {
                vencontcode = "-1";
            }
            lbl_CurPay.Text = "";
            //string pwd = txt_Smartno.Text;
            //txt_Smartno.Attributes.Add("value", pwd);
            if (ddl_bkname.Items.Count > 0 && ddl_bkname.SelectedItem.Text.ToUpper().Trim() == "OTHERS")
            {
                txt_other.Style.Add("display", "block");
            }
            else
            {
                txt_other.Style.Add("display", "none");
            }
            if (hideGridTotAmt())
            {
                txt_totamt.Visible = true;
                lbl_totamt.Visible = true;
                //txt_totamt.Style.Add("display", "block");
                //lbl_totamt.Style.Add("display", "block");
            }
            else
            {
                //txt_totamt.Style.Add("display", "none");
                //lbl_totamt.Style.Add("display", "none");
                txt_totamt.Visible = false;
                lbl_totamt.Visible = false;
            }
            if (hideGridPaidAmt())
            {
                txt_paidamt.Visible = true;
                lbl_paidamt.Visible = true;
            }
            else
            {
                txt_paidamt.Visible = false;
                lbl_paidamt.Visible = false;
            }

            //Scheme Settings Show or hide
            showSchemeSettings(collegecode1, usercode);
            if (ddlcollegeScheme.Items.Count > 0)
            {
                collegecode1Scheme = Convert.ToString(ddlcollegeScheme.SelectedItem.Value);
                clgcodeScheme = Convert.ToString(ddlcollegeScheme.SelectedItem.Value);
            }
            // maintainPaymedeState();

            Showfilter();

        }
        catch { }
    }
    protected void Showfilter()
    {
        ddlStudRcpt.Attributes.Add("Style", "display:none;");
        if (rbl_rollnoNew.SelectedIndex == 0 && cb_addExcessFee.Checked)
        {
            ddlStudRcpt.Attributes.Add("Style", "display: block; width: 130px;");
        }
    }
    protected void ddl_college_OnSelectedIndexchange(object sender, EventArgs e)
    {
        try
        {
            LoadFromSettings();
            int val = Convert.ToInt32(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanReceiptDefaultPriority' and user_code ='" + usercode + "' and college_code ='" + ddl_college.SelectedItem.Value + "'"));
            if (val == 1)
            {
                rdo_receipt.Checked = false;
                rdo_challan.Checked = true;
                rdo_challan_CheckedChanged(sender, e);
                btn_save.Visible = false;
            }
        }
        catch (Exception ex) { }
        bindType();
        bindGrid();
        collegebank();
        bank();
        cardType();
        headerSlecetionChanged();
        createLogo(ddl_college.SelectedValue);
        collegecodestat = Convert.ToString(ddl_college.SelectedValue);
        LoadYearSemester();
        if (checkSchoolSetting() == 0)
        {
            loadfinanceyear();
        }
        if (rdo_receipt.Checked)
            getEditableReceipt();
        loadfinanceyear();
    }
    public void LoadFromSettings()
    {
        try
        {
            string useCOdeSet = "select LinkValue from New_InsSettings where LinkName='MultipleCollegeUserRights' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
            string colleges = Convert.ToString(d2.GetFunction(useCOdeSet)).Trim();
            if (colleges == "" || colleges == "0")
            {
                colleges = collegecode1;
            }


            int smartDisp = Convert.ToInt32(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DisplayNumberForSmartCd' and user_code ='" + usercode + "' --and college_code in (" + collegecode1 + ")").Trim());

            ListItem lst1 = new ListItem("Roll No", "0");
            ListItem lst2 = new ListItem("Reg No", "1");
            ListItem lst3 = new ListItem("Admission No", "2");
            ListItem lst4 = new ListItem("App No", "3");
            ListItem lst5 = new ListItem("Smartcard No", "4");

            //Roll Number or Reg Number or Admission No or Application Number
            rbl_rollno.Items.Clear();
            string insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollNo' and user_code ='" + usercode + "' --and college_code in(" + collegecode1 + ")";

            int save1 = Convert.ToInt32(d2.GetFunction(insqry1));

            if (save1 == 1)
            {
                //Roll No
                rbl_rollno.Items.Add(lst1);
            }


            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRegNo' and user_code ='" + usercode + "' --and college_code in(" + collegecode1 + ")";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //RegNo
                rbl_rollno.Items.Add(lst2);
            }

            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollAdmit' and user_code ='" + usercode + "' --and college_code in(" + collegecode1 + ")";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //Admission No - Roll Admit
                rbl_rollno.Items.Add(lst3);
            }

            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptAppFormNo' and user_code ='" + usercode + "' --and college_code in(" + collegecode1 + ") ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));

            if (save1 == 1)
            {
                //App Form Number - Application Number
                rbl_rollno.Items.Add(lst4);

            }

            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptSmartNo' and user_code ='" + usercode + "' --and college_code in(" + collegecode1 + ") ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));

            if (save1 == 1)
            {
                //Smartcard No - smart_serial_no
                rbl_rollno.Items.Add(lst5);
            }

            if (rbl_rollno.Items.Count == 0)
            {
                rbl_rollno.Items.Add(lst1);
            }
            switch (Convert.ToUInt32(rbl_rollno.SelectedItem.Value))
            {
                case 0:
                case1:
                    txt_rollno.Attributes.Add("placeholder", "Roll No");
                    lbl_rollno3.Text = "Roll No";
                    chosedmode = 0;
                    break;
                case 1:
                case2:
                    txt_rollno.Attributes.Add("placeholder", "Reg No");
                    lbl_rollno3.Text = "Reg No";
                    chosedmode = 1;
                    break;
                case 2:
                case3:
                    txt_rollno.Attributes.Add("placeholder", "Admin No");
                    lbl_rollno3.Text = "Admin No";
                    chosedmode = 2;
                    break;
                case 3:
                case4:
                    txt_rollno.Attributes.Add("placeholder", "App No");
                    lbl_rollno3.Text = "App No";
                    chosedmode = 3;
                    break;
                case 4:
                    txt_rollno.Attributes.Add("placeholder", "Smartcard No");
                    lbl_rollno3.Text = "SmartCard No";
                    chosedmode = 4;
                    switch (smartDisp)
                    {
                        case 0:
                            goto case1;
                        case 1:
                            goto case2;
                        case 2:
                            goto case3;
                        case 3:
                            goto case4;
                    }
                    break;
            }

            insqry1 = "select LinkValue from New_InsSettings where LinkName='ShowBalanceType' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));

            if (save1 == 1)
            {
                BalanceType = 1;

            }
            else
            {
                BalanceType = 0;
            }

            //Receipt or Challan or Both
            save1 = 0;
            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanOrReceiptOrBoth' and user_code ='" + usercode + "' and college_code in(" + collegecode1 + ") ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            rdo_receipt.Enabled = false;
            rdo_challan.Enabled = false;
            if (save1 == 1)
            {
                //Receipt
                rdo_receipt.Enabled = true;
            }
            if (save1 == 2)
            {
                //Challan
                rdo_challan.Enabled = true;

            }
            if (save1 == 3)
            {
                //Receipt and Challan
                rdo_receipt.Enabled = true;
                rdo_challan.Enabled = true;
            }

            //Headerwise or Group Header wise or Ledger wise
            save1 = 0;
            insqry1 = "select LinkValue from New_InsSettings where LinkName='GroupHeaderOrHeaderOrLedger' and user_code ='" + usercode + "' and college_code in(" + collegecode1 + ")";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));

            rbl_headerselect.Items[0].Enabled = false;
            rbl_headerselect.Items[1].Enabled = false;
            rbl_headerselect.Items[2].Enabled = false;
            if (save1 == 1)
            {
                //Group Header
                rbl_headerselect.Items[0].Enabled = true;
            }
            if (save1 == 2)
            {
                //Header
                rbl_headerselect.Items[1].Enabled = true;
            }
            if (save1 == 3)
            {
                //Ledger
                rbl_headerselect.Items[2].Enabled = true;

            }
            if (save1 == 4)
            {
                //All

                rbl_headerselect.Items[0].Enabled = true;
                rbl_headerselect.Items[1].Enabled = true;
                rbl_headerselect.Items[2].Enabled = true;
            }
            if (save1 == 5)
            {
                //GH and Ledger
                rbl_headerselect.Items[0].Enabled = true;
                rbl_headerselect.Items[2].Enabled = true;
            }
            if (save1 == 6)
            {
                //Ledger and Header                        
                rbl_headerselect.Items[1].Enabled = true;
                rbl_headerselect.Items[2].Enabled = true;
            }
            if (save1 == 7)
            {
                //GHeader and Ledger
                rbl_headerselect.Items[0].Enabled = true;
                rbl_headerselect.Items[2].Enabled = true;
            }
            cb_selcthd.Enabled = false;
            rbl_headerselect.SelectedIndex = -1;
            if (save1 == 5 || save1 == 1 || save1 == 7 || save1 == 4)
            {
                rbl_headerselect.SelectedIndex = 0;
                cb_selcthd.Enabled = true;
            }
            else if (save1 == 2 || save1 == 6)
            {
                rbl_headerselect.SelectedIndex = 1;
            }
            else if (save1 == 3)
            {
                rbl_headerselect.SelectedIndex = 2;
            }

            //Headerwise or Group Header wise or Ledger wise
            save1 = 0;
            insqry1 = "select LinkValue from New_InsSettings where LinkName='Edit Receipt Date' and user_code ='" + usercode + "' --and college_code in(" + collegecode1 + ")";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                txt_date.Enabled = true;
            }
            else
            {
                txt_date.Enabled = false;
                txt_date.Text = DateTime.Now.ToString("dd/MM/yyyy");
            }

            //Is Challan or Receipt Header wise ?

            //string insqry1 = "select LinkValue from New_InsSettings where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + usercode + "' and college_code in(" + colleges + ") ";
            //int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
        }
        catch (Exception ex) { }
    }
    private bool hideGridFeeAmt()
    {
        bool hide = true;
        string insqry1 = "select LinkValue from New_InsSettings where LinkName='HideGridFeeAmount' and user_code ='" + usercode + "' -- and college_code ='" + collegecode1 + "'";
        int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
        if (save1 == 1)
        {
            hide = false;
        }
        return hide;
    }
    private bool hideGridTotAmt()
    {
        bool hide = true;
        string insqry1 = "select LinkValue from New_InsSettings where LinkName='HideGridTotAmount' and user_code ='" + usercode + "' -- and college_code ='" + collegecode1 + "'";
        int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
        if (save1 == 1)
        {
            hide = false;
        }
        return hide;
    }
    private bool hideGridPaidAmt()
    {
        bool hide = true;
        string insqry1 = "select LinkValue from New_InsSettings where LinkName='HideGridPaidAmount' and user_code ='" + usercode + "' -- and college_code ='" + collegecode1 + "'";
        int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
        if (save1 == 1)
        {
            hide = false;
        }
        return hide;
    }
    private bool hideGridDedAmt()
    {
        bool hide = true;
        string insqry1 = "select LinkValue from New_InsSettings where LinkName='HideGridDedAmount' and user_code ='" + usercode + "' -- and college_code ='" + collegecode1 + "'";
        int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
        if (save1 == 1)
        {
            hide = false;
        }
        return hide;
    }
    private bool ShowBalOnly()
    {
        bool hide = false;
        string insqry1 = "select LinkValue from New_InsSettings where LinkName='ShowBalanceOnlyGrid' and user_code ='" + usercode + "' -- and college_code ='" + collegecode1 + "'";
        int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
        if (save1 == 1)
        {
            hide = true;
        }
        return hide;
    }
    private bool ShowCurSemesterOnly()
    {
        bool hide = false;
        string insqry1 = "select LinkValue from New_InsSettings where LinkName='CurrentAndPreviousSemWithBalOnly' and user_code ='" + usercode + "' -- and college_code ='" + collegecode1 + "'";
        int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
        if (save1 == 1)
        {
            hide = true;
        }
        return hide;
    }
    public void bindGrid()
    {
        ArrayList addnew = new ArrayList();
        addnew.Add("2000 x");
        addnew.Add("1000 x");
        addnew.Add("500 x");
        addnew.Add("200 x");
        addnew.Add("100 x");
        addnew.Add("50 x");
        addnew.Add("20 x");
        addnew.Add("10 x");
        addnew.Add("5 x");
        addnew.Add("2 x");
        addnew.Add("Coins");
        addnew.Add("Total");

        DataTable dt = new DataTable();
        dt.Columns.Add("Rupees");
        DataRow dr;

        for (int row = 0; row < addnew.Count; row++)
        {
            dr = dt.NewRow();
            dr[0] = addnew[row].ToString();
            dt.Rows.Add(dr);
        }

        if (dt.Rows.Count > 0)
        {
            grid_Cash.DataSource = dt;
            grid_Cash.DataBind();
        }
    }
    protected void lb2_Click(object sender, EventArgs e)
    {
        try
        {
            Session.Abandon();
            Session.Clear();
            Session.RemoveAll();
            System.Web.Security.FormsAuthentication.SignOut();
            Response.Redirect("default.aspx", false);
        }
        catch (Exception ex) { }
    }
    protected void imagebtnpopclose_Click(object sender, EventArgs e)
    {
        popwindow.Visible = false;
        rdo_receipt.Checked = true;
    }
    protected void btn_select_Click(object sender, EventArgs e)
    {
        popwindow.Visible = true;
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> Getrno(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            string query = "";
            WebService ws = new WebService();
            if (personmode == 0)
            {
                //student query
                if (chosedmode == 0)
                {
                    query = "select top 100 Roll_No from Registration where CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' and Roll_No like '" + prefixText + "%' and college_code=" + collegecodestat + " order by Roll_No asc";
                }
                else if (chosedmode == 1)
                {
                    query = "select  top 100 Reg_No from Registration where CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' and Reg_No like '" + prefixText + "%' and college_code=" + collegecodestat + "  order by Reg_No asc";
                }
                else if (chosedmode == 2)
                {
                    query = "select  top 100 Roll_admit from Registration where CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' and Roll_admit like '" + prefixText + "%' and college_code=" + collegecodestat + "  order by Roll_admit asc";
                }
                else if (chosedmode == 4)
                {
                    query = "select  top 100 smart_serial_no from Registration where CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' and smart_serial_no like '" + prefixText + "%' and college_code=" + collegecodestat + "  order by smart_serial_no asc";
                }
                else
                {
                    byte studAppSHrtAdm = statStudentAppliedShorlistAdmit();
                    string admStudFilter = "";
                    switch (studAppSHrtAdm)
                    {
                        case 0:
                            admStudFilter = " and isconfirm=1 ";
                            break;
                        case 1:
                            admStudFilter = " and isconfirm=1 and selection_status=1 ";
                            break;
                        case 2:
                            admStudFilter = " and isconfirm=1 and selection_status=1 and admission_status=1 ";
                            break;
                    }
                    query = "  select  top 100 app_formno from applyn where  app_formno like '" + prefixText + "%' and college_code=" + collegecodestat + " " + admStudFilter + "  order by app_formno asc";
                }
            }
            else if (personmode == 1)
            {
                //staff query
            }
            else if (personmode == 2)
            {
                //Vendor query
            }
            else
            {
                //Others query
            }

            name = ws.Getname(query);
            return name;
        }
        catch { return name; }
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetName(string prefixText)
    {

        WebService ws = new WebService();
        List<string> name = new List<string>();

        if (prefixText.Length > 0)
        {
            string[] nameval = prefixText.Split(' ');
            string query = string.Empty;
            string name_VAL = string.Empty;
            for (int i = 0; i < nameval.Length; i++)
            {
                name_VAL += "%" + nameval[i] + "%";
            }

            if (nameval.Length > 0)
            {
                query = "select  top 100 a.stud_name+'-'+ISNULL(  a.parent_name,'')+'-'+c.Course_Name+'-'+dt.Dept_Name+'-'+r.Roll_No,r.Roll_No from applyn a,Registration r ,Degree d,course c,Department dt  where a.app_no=r.app_no and r.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.Dept_Code=dt.Dept_Code  and r.CC=0 and r.DelFlag =0 and r.Exam_Flag <>'DEBAR' and a.stud_name like '" + name_VAL + "'  and r.college_code='" + collegecodestat + "'";
            }
            else
            {
                query = "select  top 100 a.stud_name+'-'+ISNULL(  a.parent_name,'')+'-'+c.Course_Name+'-'+dt.Dept_Name+'-'+r.Roll_No,r.Roll_No from applyn a,Registration r ,Degree d,course c,Department dt  where a.app_no=r.app_no and r.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.Dept_Code=dt.Dept_Code  and r.CC=0 and r.DelFlag =0 and r.Exam_Flag <>'DEBAR' and a.stud_name like '%" + prefixText + "%' and r.college_code='" + collegecodestat + "'";
            }
            Hashtable studhash = ws.Getnamevalue(query);
            if (studhash.Count > 0)
            {
                foreach (DictionaryEntry p in studhash)
                {
                    string studname = Convert.ToString(p.Key);
                    name.Add(studname);
                }
            }
        }
        return name;



    }
    protected void rbl_rollnoNew_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            lblStudStatus.Visible = false;
            btndetails.Visible = true;
            studentSelect.Visible = false;
            txt_rollno.Text = "";
            txt_rollno_Changed(sender, e);
            txtroll_staff.Text = "";
            txtroll_vendor_Changed(sender, e);
            txtroll_vendor.Text = "";
            txtname_vendor.Text = "";
            txtroll_vendor_Changed(sender, e);
            txtroll_other.Text = "";
            txtname_other.Text = "";
            txtAdd1_Other.Text = "";
            txtAdd2_Other.Text = "";
            txt_otherMobile.Text = "";
            txtroll_other_Changed(sender, e);
            txt_sem.Enabled = false;
            imgAlert.Visible = false;

            rcptsngle.Visible = false;
            rcptSngleStaff.Visible = false;
            rcptSngleVendor.Visible = false;
            rcptSngleOthers.Visible = false;

            if (rbl_rollnoNew.SelectedIndex == 0)
            {
                txt_rollno.Attributes.Add("placeholder", "Roll No");
                txt_sem.Enabled = true;
                studentSelect.Visible = true;
                personmode = 0;
                rcptsngle.Visible = true;
                tdsemadd.Visible = true;
            }
            else if (rbl_rollnoNew.SelectedIndex == 1)
            {
                txt_rollno.Attributes.Add("placeholder", "Staff ID");
                personmode = 1;

                rcptSngleStaff.Visible = true;
                tdsemadd.Visible = false;

            }
            else if (rbl_rollnoNew.SelectedIndex == 2)
            {
                txt_rollno.Attributes.Add("placeholder", "Vendor ID");
                personmode = 2;
                rcptSngleVendor.Visible = true;
                tdsemadd.Visible = false;
            }
            else
            {
                txt_rollno.Attributes.Add("placeholder", "Others");
                personmode = 3;
                rcptSngleOthers.Visible = true;
                tdsemadd.Visible = false;
            }

        }
        catch (Exception ex) { }
    }
    protected void rbl_rollno_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        txt_Smartno.Visible = false;
        txt_rollno.Visible = true;
        lblstaticrollno.Text = "";
        txt_rollno.Text = "";
        txt_Smartno.Text = "";
        Txt_amt.Text = "";
        txt_dept.Text = "";
        txt_SeatType.Text = "";
        txt_FatherName.Text = "";
        txt_name.Text = "";
        txt_sem.Text = "";
        bank();
        cardType();
        accidRecpt = string.Empty;
        lastRecptNo = string.Empty;
        txt_rcptno.Text = generateReceiptNo();
        loadGridStudent();
        bindGrid();
        //grid_Details.Visible = false;
        txt_return.Text = "";
        imgAlert.Visible = false;
        img_stud.ImageUrl = "";
        img_stud.Visible = false;
        //txt_rollno.TextMode = TextBoxMode.SingleLine;
        string useCOdeSet = "select LinkValue from New_InsSettings where LinkName='MultipleCollegeUserRights' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
        string colleges = Convert.ToString(d2.GetFunction(useCOdeSet)).Trim();
        if (colleges == "" || colleges == "0")
        {
            colleges = collegecode1;
        }
        int smartDisp = Convert.ToInt32(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DisplayNumberForSmartCd' and user_code ='" + usercode + "' and college_code in(" + collegecode1 + ")").Trim());

        switch (Convert.ToUInt32(rbl_rollno.SelectedItem.Value))
        {
            case 0:
            case1:
                txt_rollno.Attributes.Add("placeholder", "Roll No");
                lbl_rollno3.Text = "Roll No";
                chosedmode = 0;
                break;
            case 1:
            case2:
                txt_rollno.Attributes.Add("placeholder", "Reg No");
                lbl_rollno3.Text = "Reg No";
                chosedmode = 1;
                break;
            case 2:
            case3:
                txt_rollno.Attributes.Add("placeholder", "Admin No");
                lbl_rollno3.Text = "Admin No";
                chosedmode = 2;
                break;
            case 3:
            case4:
                txt_rollno.Attributes.Add("placeholder", "App No");
                lbl_rollno3.Text = "App No";
                chosedmode = 3;
                break;
            case 4:
                txt_rollno.Attributes.Add("placeholder", "Smartcard No");
                lbl_rollno3.Text = "SmartCard No";
                chosedmode = 4;

                //txt_rollno.TextMode = TextBoxMode.Password;
                txt_Smartno.Visible = true;
                txt_Smartno.Focus();//added by abarna 29.1.2018
                //txt_rollno.Visible = false;
                switch (smartDisp)
                {
                    case 0:
                        goto case1;
                    case 1:
                        goto case2;
                    case 2:
                        goto case3;
                    case 3:
                        goto case4;
                }
                break;
        }
    }
    protected void txt_rollno_Changed(object sender, EventArgs e)
    {
        btndetails.Visible = true;
        textRoll();
    }
    private void textRoll()
    {
        string appNo = "-1";
        loadScholarship(appNo);
        try
        {
            string name = "";
            string degree = "";
            string stType = "";
            string fname = "";
            string sem = "";//abarna
            lbltype.Text = "";
            string query = "";
            btn_print.Visible = false;
            string roll_no = Convert.ToString(txt_rollno.Text.Trim());
            img_stud.ImageUrl = "";
            img_stud.Visible = false;
            string cursemvalue = "1";
            if (roll_no != "")
            {
                //smartCno = txt_rollno.Text.Trim();
                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) != 3)
                {
                    query = "select r.Roll_No,r.Roll_Admit,r.app_no,Stud_Name,d.Degree_Code ,c.Course_Name +'-'+dt.dept_acronym as Degree,(select TextVal from TextValTable where TextCode=(select seattype from Applyn where app_no=r.app_no) and TextCriteria='seat' ) as StType,(select parent_name from applyn where app_no=r.app_no) as fname, ISNULL( type,'') as type,R.Current_Semester  from Registration r,Degree d,Department dt,Course c where r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and r.college_code='" + collegecode1 + "'  ";

                    if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
                    {
                        //roll no
                        query += " and r.Roll_No='" + roll_no + "'";
                    }
                    else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
                    {
                        //reg no
                        query += " and r.Reg_No like '" + roll_no + "'";
                    }
                    else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
                    {
                        //Admin no
                        query += " and r.Roll_Admit like '" + roll_no + "'";
                    }
                    else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
                    {
                        //Smart card No
                        query += " and r.smart_serial_no like '" + txt_Smartno.Text.Trim() + "'";
                    }
                    else
                    {
                        query = "";
                    }
                }
                else
                {
                    byte studAppSHrtAdm = StudentAppliedShorlistAdmit();
                    string admStudFilter = "";
                    switch (studAppSHrtAdm)
                    {
                        case 0:
                            admStudFilter = " and a.isconfirm=1 ";
                            break;
                        case 1:
                            admStudFilter = " and a.isconfirm=1 and a.selection_status=1 ";
                            break;
                        case 2:
                            admStudFilter = " and a.isconfirm=1 and a.selection_status=1 and a.admission_status=1 ";
                            break;
                    }
                    query = "select stud_name,c.Course_Name+' - '+ dt.dept_acronym as degree,(select TextVal from TextValTable where TextCode=seattype and TextCriteria='seat' ) as StType,parent_name as fname ,ISNULL( type,'') as type,a.app_no  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and dt.Dept_Code=d.Dept_Code and c.Course_Id =d.Course_Id and a.college_code='" + collegecode1 + "'  and app_formno = '" + roll_no + "' " + admStudFilter;
                }
                ds.Clear();
                ds = d2.select_method_wo_parameter(query, "Text");


                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            name = Convert.ToString(ds.Tables[0].Rows[i]["Stud_Name"]);
                            degree = Convert.ToString(ds.Tables[0].Rows[i]["Degree"]);
                            stType = Convert.ToString(ds.Tables[0].Rows[i]["stType"]);
                            fname = Convert.ToString(ds.Tables[0].Rows[i]["fname"]);
                            lbltype.Text = Convert.ToString(ds.Tables[0].Rows[i]["type"]);
                            appNo = Convert.ToString(ds.Tables[0].Rows[i]["app_no"]);
                            // sem=
                            if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) != 3)
                            {
                                cursemvalue = Convert.ToString(ds.Tables[0].Rows[i]["Current_Semester"]);

                            }

                            loadScholarship(appNo);
                        }
                    }
                }

                lblstaticrollno.Text = "";

                txt_name.Text = name;
                txt_dept.Text = degree;
                txt_SeatType.Text = stType;
                txt_FatherName.Text = fname;
                cursem.Text = cursemvalue + " Semester";//abarna
                img_stud.ImageUrl = "~/Handler/Handler4.ashx?rollno=" + roll_no;
                img_stud.Visible = true;

                LoadYearSemester();

                string useCOdeSet = "select LinkValue from New_InsSettings where LinkName='MultipleCollegeUserRights' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
                string colleges = Convert.ToString(d2.GetFunction(useCOdeSet)).Trim();
                if (colleges == "" || colleges == "0")
                {
                    colleges = collegecode1;
                }

                linkvalue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code in (" + collegecode1 + ")");

                if (linkvalue != "")
                {

                    if (linkvalue == "0")
                    {
                        //Semester
                    }
                    else
                    {
                        //Year
                        cursemvalue = returnYearforSem(cursemvalue);
                    }

                    if (ddl_sem.Items.Count > 0)
                    {
                        for (int isem = 0; isem < ddl_sem.Items.Count; isem++)
                        {
                            if (ddl_sem.Items[isem].Text.Split(' ')[0] == cursemvalue)
                            {
                                ddl_sem.SelectedIndex = isem;
                            }
                        }
                    }
                }

                Txt_amt.Text = "0.00";
                loadGridStudent();
                bindGrid();
            }
            else
            {
                txt_totamt.Text = "0.00";
                txt_paidamt.Text = "0.00";
                txt_balamt.Text = "0.00";
                txt_chltaken.Text = "0.00";
                Txt_amt.Text = "0.00";
                img_stud.Visible = false;
                lblstaticrollno.Text = "";


                txt_name.Text = "";
                txt_dept.Text = "";
                txt_SeatType.Text = "";
                txt_FatherName.Text = "";
                grid_Details.DataSource = null;
                grid_Details.DataBind();
                cb_sem.Checked = false;
                cbl_sem.Items.Clear();
                //ddl_sem.Items.Clear();
                //ddl_semMultiple.Items.Clear();
                txt_sem.Text = "";
                img_stud.Visible = false;
            }
            if (rdo_receipt.Checked)
            {
                bindHeaderLedger();
            }
        }
        catch (Exception ex) { }

    }
    protected void txt_Smartno_Changed(object sender, EventArgs e)
    {

        if (txt_Smartno.Text.Trim() != "")
        {
            string Q = string.Empty;
            string useCOdeSet = "select LinkValue from New_InsSettings where LinkName='MultipleCollegeUserRights' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
            string colleges = Convert.ToString(d2.GetFunction(useCOdeSet)).Trim();
            if (colleges == "" || colleges == "0")
            {
                colleges = collegecode1;
            }
            int smartDisp = Convert.ToInt32(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DisplayNumberForSmartCd' and user_code ='" + usercode + "' and college_code in (" + collegecode1 + ")").Trim());
            switch (smartDisp)
            {
                case 0:
                    Q = "select Roll_no from Registration where smart_serial_no ='" + txt_Smartno.Text.Trim() + "'  and college_code='" + collegecode1 + "' ";
                    break;
                case 1:
                    Q = "select Reg_no from Registration where smart_serial_no ='" + txt_Smartno.Text.Trim() + "'  and college_code='" + collegecode1 + "' ";
                    break;
                case 2:
                    Q = "select Roll_admit from Registration where smart_serial_no ='" + txt_Smartno.Text.Trim() + "'  and college_code='" + collegecode1 + "' ";
                    break;
                case 3:
                    Q = "select app_formno from applyn a,Registration r where a.app_no=r.App_No and r.smart_serial_no='" + txt_Smartno.Text.Trim() + "'  and r.college_code='" + collegecode1 + "' ";
                    break;
            }
            string nu = d2.GetFunction(Q).Trim();
            if (nu == "0")
                txt_rollno.Text = string.Empty;
            else
                txt_rollno.Text = nu;


            textRoll();
        }
        else
        {
            txt_rollno.Text = string.Empty;

            txt_totamt.Text = "0.00";
            txt_paidamt.Text = "0.00";
            txt_balamt.Text = "0.00";
            txt_chltaken.Text = "0.00";
            Txt_amt.Text = "0.00";
            img_stud.Visible = false;
            lblstaticrollno.Text = "";


            txt_name.Text = "";
            txt_dept.Text = "";
            txt_SeatType.Text = "";
            txt_FatherName.Text = "";
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            cb_sem.Checked = false;
            cbl_sem.Items.Clear();
            //ddl_sem.Items.Clear();
            //ddl_semMultiple.Items.Clear();
            txt_sem.Text = "";
            img_stud.Visible = false;

            if (rdo_receipt.Checked)
            {
                bindHeaderLedger();
            }
        }

    }
    protected void txt_name_Changed(object sender, EventArgs e)
    {
        try
        {
            string roll_no = Convert.ToString(txt_name.Text);

            if (roll_no != "")
            {
                if (rbl_rollnoNew.SelectedIndex == 0)
                {
                    try
                    {
                        string rollno = roll_no.Split('-')[4];
                        roll_no = rollno;
                    }
                    catch { roll_no = ""; }

                }
                else if (rbl_rollnoNew.SelectedIndex == 1)
                {
                    //staff
                }
                else if (rbl_rollnoNew.SelectedIndex == 2)
                {
                    //vendor
                }
                else
                {
                    //others
                }
            }

            txt_rollno.Text = roll_no;
            rbl_rollno.SelectedIndex = 0;
            //txt_rollno.TextMode = TextBoxMode.SingleLine;
            txt_rollno_Changed(sender, e);
            if (rdo_receipt.Checked)
            {
                bindHeaderLedger();
            }
        }
        catch (Exception ex) { }
    }
    public void LoadYearSemester()
    {
        try
        {
            cbl_sem.Items.Clear();
            cb_sem.Checked = false;
            ddl_sem.Items.Clear();
            ddl_semMultiple.Items.Clear();
            ddlSem_other.Items.Clear();
            cblSem_other.Items.Clear();
            cbSem_other.Checked = false;
            DataSet dsSemYear = new DataSet();
            //linkvalue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");

            //if (linkvalue != "")
            //{
            //    DataSet dsSemYear = new DataSet();
            //    string query = "";
            //    string semyear = "select Linkvalue from New_InsSettings where linkname = 'SemesterandYear' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";

            //    if (d2.GetFunction(semyear).Trim() == "1")
            //    {
            //        query = "selECT	* from textvaltable where TextCriteria ='FEECA' and (textval like '%Semester' or textval like '%Year')  and college_code=" + collegecode1 + " order by len(textval),textval asc";
            //    }
            //    else
            //    {
            //        if (linkvalue == "0")
            //        {
            //            query = "selECT	* from textvaltable where TextCriteria ='FEECA' and textval like '% semester' and college_code=" + collegecode1 + " order by len(textval),textval asc";
            //        }
            //        else
            //        {
            //            query = " selECT	* from textvaltable where TextCriteria ='FEECA' and textval like '% Year' and college_code=" + collegecode1 + " order by len(textval),textval asc";
            //        }
            //    }

            dsSemYear = d2.loadFeecategory(Convert.ToString(collegecode1), usercode, ref linkName);
            if (dsSemYear.Tables.Count > 0)
            {
                if (dsSemYear.Tables[0].Rows.Count > 0)
                {
                    cbl_sem.DataSource = dsSemYear;
                    cbl_sem.DataTextField = "TextVal";
                    cbl_sem.DataValueField = "TextCode";
                    cbl_sem.DataBind();

                    ddl_sem.DataSource = dsSemYear;
                    ddl_sem.DataTextField = "TextVal";
                    ddl_sem.DataValueField = "TextCode";
                    ddl_sem.DataBind();

                    ddl_semMultiple.DataSource = dsSemYear;
                    ddl_semMultiple.DataTextField = "TextVal";
                    ddl_semMultiple.DataValueField = "TextCode";
                    ddl_semMultiple.DataBind();

                    ddl_semrcpt.DataSource = dsSemYear;
                    ddl_semrcpt.DataTextField = "TextVal";
                    ddl_semrcpt.DataValueField = "TextCode";
                    ddl_semrcpt.DataBind();

                    for (int i = 0; i < cbl_sem.Items.Count; i++)
                    {
                        cbl_sem.Items[i].Selected = true;
                    }
                    txt_sem.Text = "" + linkName + "(" + cbl_sem.Items.Count + ")";
                    cb_sem.Checked = true;


                    //For Staff
                    cblSem_staff.Items.Clear();
                    cblSem_staff.DataSource = dsSemYear;
                    cblSem_staff.DataTextField = "TextVal";
                    cblSem_staff.DataValueField = "TextCode";
                    cblSem_staff.DataBind();

                    for (int i = 0; i < cblSem_staff.Items.Count; i++)
                    {
                        cblSem_staff.Items[i].Selected = true;
                    }
                    txtSem_staff.Text = "" + linkName + "(" + cblSem_staff.Items.Count + ")";
                    cbSem_staff.Checked = true;

                    ddlSem_staff.Items.Clear();
                    ddlSem_staff.DataSource = dsSemYear;
                    ddlSem_staff.DataTextField = "TextVal";
                    ddlSem_staff.DataValueField = "TextCode";
                    ddlSem_staff.DataBind();

                    //For Vendor
                    cblSem_vendor.Items.Clear();
                    cblSem_vendor.DataSource = dsSemYear;
                    cblSem_vendor.DataTextField = "TextVal";
                    cblSem_vendor.DataValueField = "TextCode";
                    cblSem_vendor.DataBind();

                    for (int i = 0; i < cblSem_vendor.Items.Count; i++)
                    {
                        cblSem_vendor.Items[i].Selected = true;
                    }
                    txtSem_vendor.Text = "" + linkName + "(" + cblSem_vendor.Items.Count + ")";
                    cbSem_vendor.Checked = true;

                    ddlSem_vendor.Items.Clear();
                    ddlSem_vendor.DataSource = dsSemYear;
                    ddlSem_vendor.DataTextField = "TextVal";
                    ddlSem_vendor.DataValueField = "TextCode";
                    ddlSem_staff.DataBind();

                    //For Others


                    cblSem_other.DataSource = dsSemYear;
                    cblSem_other.DataTextField = "TextVal";
                    cblSem_other.DataValueField = "TextCode";
                    cblSem_other.DataBind();

                    for (int i = 0; i < cblSem_other.Items.Count; i++)
                    {
                        cblSem_other.Items[i].Selected = true;
                    }
                    txtSem_other.Text = "" + linkName + "(" + cblSem_other.Items.Count + ")";
                    cbSem_other.Checked = true;

                    ddlSem_other.Items.Clear();
                    ddlSem_other.DataSource = dsSemYear;
                    ddlSem_other.DataTextField = "TextVal";
                    ddlSem_other.DataValueField = "TextCode";
                    ddlSem_other.DataBind();
                    ViewState["name"] = linkName;


                    cblsemadd.DataSource = dsSemYear;
                    cblsemadd.DataTextField = "TextVal";
                    cblsemadd.DataValueField = "TextCode";
                    cblsemadd.DataBind();

                    for (int i = 0; i < cblsemadd.Items.Count; i++)
                    {
                        // cblsemadd.Items[i].Selected = true;
                    }
                    //txtsemadd.Text = "" + linkName + "(" + cblsemadd.Items.Count + ")";
                    //cbsemadd.Checked = true;
                    txtsemadd.Text = "--Select--";
                    cbsemadd.Checked = false;
                }
            }

        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    ////added by abarna
    #region financial year

    protected void chklsfyear_selected(object sender, EventArgs e)
    {
        CallCheckboxListChange(chkfyear, chklsfyear, txtfyear, "Finance Year", "--Select--");

    }
    protected void chkfyear_changed(object sender, EventArgs e)
    {
        CallCheckboxChange(chkfyear, chklsfyear, txtfyear, "Finance Year", "--Select--");
    }
    #endregion
    ////added by abarna 10.02.2018
    //#region addFee financial Year
    //protected void chklsfyears_selected(object sender, EventArgs e)
    //{
    //    CallCheckboxListChange(chkfyears, chklsfyears, txtfyears, "Finance Year", "--Select--");

    //}
    //protected void chkfyears_changed(object sender, EventArgs e)
    //{
    //    CallCheckboxChange(chkfyears, chklsfyears, txtfyears, "Finance Year", "--Select--");
    //}

    //#endregion
    //----------------------
    protected double getfineAmount(string degcode, string feecat, string batchYear, int fineFeesType)
    {
        double TotfineAmount = 0;
        double fineAmount = 0;
        try
        {
            string fineQ = string.Empty;
            #region college
            Dictionary<string, double> dtfintFeecat = new Dictionary<string, double>();
            Dictionary<string, double> dtrefintFeecat = new Dictionary<string, double>();
            #region Fine Calculation
            fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "'  and FeeCatgory in ('" + feecat + "') and isnull(FineSettingType,0)='0' and BatchYear='" + batchYear + "'  select distinct holiday_date from holidaystudents where degree_code=" + degcode + "";
            //and H.Headerpk ='" + hdrId + "' and L.LedgerPK='" + ldgerId + "'
            DataSet dsFine = new DataSet();
            dsFine = d2.select_method_wo_parameter(fineQ, "Text");
            if (dsFine.Tables.Count > 0)
            {
                if (dsFine.Tables[0].Rows.Count > 0)
                {
                    for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                    {
                        fineAmount = 0;
                        string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                        DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                        // DateTime curDate = DateTime.Now.Date;
                        string recptDt = txt_date.Text.Split('/')[1] + "/" + txt_date.Text.Split('/')[0] + "/" + txt_date.Text.Split('/')[2];
                        DateTime curDate = Convert.ToDateTime(recptDt);
                        #region Check for Due Extension
                        DateTime dueExt = due;
                        string dueDtstring = string.Empty;
                        // string dueDtstring = "select  max(ExtDueDate) as DueDate from FeesDueExt where App_No='" + appnoNew + "' and  FeeCategory='" + feecat + "' and HeaderFK='" + hdrId + "' and LedgerFK='" + ldgerId + "'";
                        try
                        {
                            dueExt = Convert.ToDateTime(d2.GetFunction(dueDtstring).Trim());
                        }
                        catch { dueExt = due; }
                        // DateTime.TryParse(d2.GetFunction(dueDtstring).Trim(), out dueExt);
                        due = dueExt;
                        #endregion

                        if (fineType == "1")
                        {
                            //common - No holiday
                            if (due < curDate)
                            {
                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                            }
                        }
                        else if (fineType == "2")
                        {
                            //Per day - 
                            for (; due < curDate; due = due.AddDays(1))
                            {
                                bool addFine = true;
                                if (dsFine.Tables.Count > 1 && dsFine.Tables[1].Rows.Count > 0)
                                {
                                    dsFine.Tables[1].DefaultView.RowFilter = " holiday_date ='" + due + "'";
                                    DataView dvFinDt = dsFine.Tables[1].DefaultView;
                                    if (dvFinDt.Count > 0)
                                        addFine = false;
                                }
                                if (addFine)
                                    fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                            }
                        }
                        else if (fineType == "3")
                        {
                            //Per week
                            TimeSpan td = curDate - due;
                            int difference = td.Days;
                            int fromday = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["FromDay"]);
                            int to_day = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["ToDay"]);

                            if (difference <= to_day && difference >= fromday)
                            {
                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                            }
                        }

                    }

                }
                if (fineAmount > 0 && fineFeesType == 1)
                {
                    if (!dtfintFeecat.ContainsKey(feecat))
                    {
                        dtfintFeecat.Add(feecat, fineAmount);
                        TotfineAmount += fineAmount;
                    }
                    //else
                    //    dtfintFeecat[feecat] += fineAmount;
                    //fineAdded = true;
                    fineAmount = 0;
                }
            }
            #endregion

            //Re-admission fees settings
            #region Fine Calculation

            fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "'  and FeeCatgory in ('" + feecat + "') and isnull(FineSettingType,0)='1' and BatchYear='" + batchYear + "'  select distinct holiday_date from holidaystudents where degree_code=" + degcode + "";
            //and H.Headerpk ='" + hdrId + "' and L.LedgerPK='" + ldgerId + "'
            dsFine = new DataSet();
            dsFine = d2.select_method_wo_parameter(fineQ, "Text");
            if (dsFine.Tables.Count > 0)
            {
                if (dsFine.Tables[0].Rows.Count > 0)
                {
                    for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                    {
                        fineAmount = 0;
                        string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                        DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                        //  DateTime curDate = DateTime.Now.Date;
                        string recptDt = txt_date.Text.Split('/')[1] + "/" + txt_date.Text.Split('/')[0] + "/" + txt_date.Text.Split('/')[2];
                        DateTime curDate = Convert.ToDateTime(recptDt);
                        #region Check for Due Extension
                        DateTime dueExt = due;
                        string dueDtstring = string.Empty;
                        // string dueDtstring = "select  max(ExtDueDate) as DueDate from FeesDueExt where App_No='" + appnoNew + "' and  FeeCategory='" + feecat + "' and HeaderFK='" + hdrId + "' and LedgerFK='" + ldgerId + "'";
                        try
                        {
                            dueExt = Convert.ToDateTime(d2.GetFunction(dueDtstring).Trim());
                        }
                        catch { dueExt = due; }
                        // DateTime.TryParse(d2.GetFunction(dueDtstring).Trim(), out dueExt);
                        due = dueExt;
                        #endregion

                        if (fineType == "1")
                        {
                            //common - No holiday
                            if (due < curDate)
                            {
                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                            }
                        }
                    }
                }
                if (fineAmount > 0 && fineFeesType == 1)
                {
                    if (!dtrefintFeecat.ContainsKey(feecat))
                    {
                        dtrefintFeecat.Add(feecat, fineAmount);
                        TotfineAmount += fineAmount;
                    }
                    //else
                    //    dtfintFeecat[feecat] += fineAmount;
                    //fineAdded = true;
                    fineAmount = 0;
                }
            }


            #endregion


            //abarna added by monthly fine 

            #region Fine Calculation

            fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "'  and FeeCatgory in ('" + feecat + "') and isnull(FineSettingType,0)='2' and BatchYear='" + batchYear + "'  select distinct holiday_date from holidaystudents where degree_code=" + degcode + "";
            //and H.Headerpk ='" + hdrId + "' and L.LedgerPK='" + ldgerId + "'
            dsFine = new DataSet();
            dsFine = d2.select_method_wo_parameter(fineQ, "Text");
            if (dsFine.Tables.Count > 0)
            {
                if (dsFine.Tables[0].Rows.Count > 0)
                {
                    for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                    {
                        fineAmount = 0;
                        string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                        DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                        //  DateTime curDate = DateTime.Now.Date;
                        string recptDt = txt_date.Text.Split('/')[1] + "/" + txt_date.Text.Split('/')[0] + "/" + txt_date.Text.Split('/')[2];
                        DateTime curDate = Convert.ToDateTime(recptDt);
                        #region Check for Due Extension
                        DateTime dueExt = due;
                        string dueDtstring = string.Empty;
                        // string dueDtstring = "select  max(ExtDueDate) as DueDate from FeesDueExt where App_No='" + appnoNew + "' and  FeeCategory='" + feecat + "' and HeaderFK='" + hdrId + "' and LedgerFK='" + ldgerId + "'";
                        try
                        {
                            dueExt = Convert.ToDateTime(d2.GetFunction(dueDtstring).Trim());
                        }
                        catch { dueExt = due; }
                        // DateTime.TryParse(d2.GetFunction(dueDtstring).Trim(), out dueExt);
                        due = dueExt;
                        #endregion

                        if (fineType == "1")
                        {
                            //common - No holiday
                            if (due < curDate)
                            {
                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                            }
                        }
                    }
                }
                if (fineAmount > 0 && fineFeesType == 1)
                {
                    if (!dtrefintFeecat.ContainsKey(feecat))
                    {
                        dtrefintFeecat.Add(feecat, fineAmount);
                        TotfineAmount += fineAmount;
                    }
                    //else
                    //    dtfintFeecat[feecat] += fineAmount;
                    //fineAdded = true;
                    fineAmount = 0;
                }
            }


            #endregion
            #endregion
        }
        catch { }
        return TotfineAmount;
    }

    protected void getDemandAmt(string appNo, string degcode, string batchYear, int fineFeesType)
    {
        try
        {
            StringBuilder sbcurSem = new StringBuilder();

            txttotbalAmt.Text = string.Empty;
            string curSem = d2.GetFunction(" select current_semester from registration where app_no='" + appNo + "'");
            Dictionary<string, string> curSemcode = getFeecode();
            string currSem = getCurYear(curSem);
            for (int row = Convert.ToInt32(currSem); row > 0; row--)
            {
                if (curSemcode.ContainsKey(Convert.ToString(row)) && Convert.ToInt32(currSem) != row)
                {
                    sbcurSem.Append(Convert.ToString(curSemcode[Convert.ToString(row)]) + "','");
                }
                // currSem--;
            }
            if (sbcurSem.Length > 0)
            {
                sbcurSem.Remove(sbcurSem.Length - 3, 3);
                // semyear = Convert.ToString(sbcurSem);
            }
            double fineAmount = 0;
            double.TryParse(Convert.ToString(getfineAmount(degcode, Convert.ToString(sbcurSem), batchYear, fineFeesType)), out fineAmount);
            string selQ = "select sum(isnull(totalamount,'0'))-sum(isnull(paidamount,'0')) from ft_feeallot where app_no='" + appNo + "' and isnull(istransfer,'0')='0' and feecategory in('" + Convert.ToString(sbcurSem) + "')";
            if (Convert.ToString(sbcurSem) != "")
                selQ += " and feecategory in('" + Convert.ToString(sbcurSem) + "')";
            double deMand = 0;
            double.TryParse(Convert.ToString(d2.GetFunction(selQ)), out deMand);
            deMand += fineAmount;
            txttotbalAmt.Text = Convert.ToString(deMand);
        }
        catch { txttotbalAmt.Text = string.Empty; }
    }
    public void loadGridStudent()
    {

        fromScript = false;
        try
        {
            txttotbalAmt.Text = "";
            lblStudStatus.Visible = false;
            string ledgerNameScl = string.Empty;
            string finYearFK = string.Empty;
            string curfinYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
            if (chklsfyear.Items.Count > 0)
                finYearFK = Convert.ToString(getCblSelectedValue(chklsfyear));
            bool boolSchool = false;
            if (rdo_challan.Checked)
            {
                txt_ExcAmt.Visible = false;
                txt_CautionAmt.Visible = false;
                txt_GvtTot.Visible = false;
                chkGridSelectAll.Checked = true;
                if (checkSchoolSetting() == 0)
                {
                    ledgerNameScl = ",Finyearfk,(LedgerName +'-('+( select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where a.finyearfk=fm.finyearpk )+')') as LedgerName";
                    string finYearId = Convert.ToString(getCblSelectedValue(chklsfyear));
                    //finYearFK = " and finyearfk in('" + finYearId + "')";//commented by abarna
                    boolSchool = true;
                }
                else
                    ledgerNameScl = ",''Finyearfk,(LedgerName) as LedgerName";
            }
            else
            {
                txt_ExcAmt.Visible = true;
                txt_CautionAmt.Visible = false;
                txt_GvtTot.Visible = true;
                chkGridSelectAll.Checked = false;
                ledgerNameScl = ",''Finyearfk,(LedgerName) as LedgerName";
            }
            lblstaticrollno.Text = "";
            txt_totamt.Text = "";
            txt_paidamt.Text = "";
            txt_balamt.Text = "";
            txt_chltaken.Text = "0.00";
            txt_GvtTot.Text = "0.00";
            txt_ExcAmt.Text = "0.00";
            txt_CautionAmt.Text = "0.00";
            txt_rcptno.Text = generateReceiptNo();
            string roll_no = string.Empty;
            string semyear = "";
            string appnoNew = string.Empty;
            string degcode = string.Empty;
            string batchYear = string.Empty;
            string currSem = string.Empty;
            int studemode = 0;
            roll_no = txt_rollno.Text.Trim();

            semyear = GetSelectedItemsValueAsString(cbl_sem);

            if (rdo_challan.Checked)
            {
                txt_rcptno.Text = generateChallanNo();
                if (rdo_sngle.Checked)
                {
                    semyear = Convert.ToString(ddl_sem.SelectedValue);
                }
                else
                {
                    semyear = Convert.ToString(ddl_semMultiple.SelectedValue);
                }
            }


            #region Table Structure and Query
            DataTable tbl_Student = new DataTable();

            tbl_Student.Columns.Add("Roll_No");
            tbl_Student.Columns.Add("Reg_No");
            tbl_Student.Columns.Add("Stud_Name");
            tbl_Student.Columns.Add("Degree");
            tbl_Student.Columns.Add("TextVal");
            tbl_Student.Columns.Add("TextCode");
            tbl_Student.Columns.Add("Header_ID");
            tbl_Student.Columns.Add("Header_Name");
            tbl_Student.Columns.Add("Fee_Code");
            tbl_Student.Columns.Add("Fee_Type");
            tbl_Student.Columns.Add("Fee_Amount");
            tbl_Student.Columns.Add("Deduct");
            tbl_Student.Columns.Add("Total");
            tbl_Student.Columns.Add("PaidAmt");
            tbl_Student.Columns.Add("BalAmt");
            tbl_Student.Columns.Add("ToBePaid");
            tbl_Student.Columns.Add("Monthly");
            tbl_Student.Columns.Add("ChlTaken");
            tbl_Student.Columns.Add("Scholar");
            tbl_Student.Columns.Add("CautionDep");
            tbl_Student.Columns.Add("MonwiseMon");
            tbl_Student.Columns.Add("MonwiseYear");
            tbl_Student.Columns.Add("FeeallotPk");
            tbl_Student.Columns.Add("finyearfk");
            tbl_Student.Columns.Add("finyear");
            string selectQuery = "";

            string queryRollApp = "SELECT A.app_no,Roll_No,Reg_No,R.Stud_Name,Course_Name+'-'+Dept_Name Degree,R.Current_Semester,R.Roll_admit,G.degree_code,R.batch_year,r.mode  FROM applyn A,Registration R,Degree G,Course C,Department D WHERE A.app_no = R.App_No AND R.degree_code = G.Degree_Code AND G.Course_Id = C.Course_Id AND G.college_code = C.college_code AND G.Dept_Code = D.Dept_Code AND G.college_code = D.college_code  and r.college_code='" + collegecode1 + "'  and  ";
            //CC=0 and DelFlag =0 and Exam_Flag <>'Debar'  and
            if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
            {
                //roll no
                queryRollApp += "  Roll_No = '" + roll_no + "' ";
            }
            else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
            {
                //reg no
                queryRollApp += "   Reg_No = '" + roll_no + "' ";
            }
            else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
            {
                //Admin no
                queryRollApp += "  R.Roll_admit = '" + roll_no + "' ";
            }
            else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
            {
                //Smart card No
                //queryRollApp += "  r.smart_serial_no = '" + txt_Smartno.Text.Trim() + "'";
                queryRollApp += "  Roll_No = '" + roll_no + "' ";
            }
            else
            {
                queryRollApp = " SELECT a.app_formno,A.app_no,A.Stud_Name,Course_Name+'-'+Dept_Name Degree,A.Current_Semester,G.degree_code,A.batch_year,a.mode  FROM applyn A,Degree G,Course C,Department D WHERE  A.degree_code = G.Degree_Code AND G.Course_Id = C.Course_Id AND G.college_code = C.college_code AND G.Dept_Code = D.Dept_Code AND G.college_code = D.college_code  and a.college_code='" + collegecode1 + "'  and   app_formno  = '" + roll_no + "' ";
            }

            DataSet dsRollApp = new DataSet();
            dsRollApp = d2.select_method_wo_parameter(queryRollApp, "Text");
            string roll_no1 = "";
            if (dsRollApp.Tables.Count > 0)
            {
                if (dsRollApp.Tables[0].Rows.Count > 0)
                {
                    if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) != 3)
                    {
                        roll_no = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Roll_Admit"]);
                        roll_no1 = Convert.ToString(dsRollApp.Tables[0].Rows[0]["roll_no"]);
                    }
                    else
                    {
                        roll_no = Convert.ToString(dsRollApp.Tables[0].Rows[0]["app_formno"]);
                    }
                    appnoNew = Convert.ToString(dsRollApp.Tables[0].Rows[0]["app_no"]);
                    degcode = Convert.ToString(dsRollApp.Tables[0].Rows[0]["degree_code"]);
                    // app_formno = Convert.ToString(dsRollApp.Tables[0].Rows[0]["app_formno"]);
                    batchYear = Convert.ToString(dsRollApp.Tables[0].Rows[0]["batch_year"]);
                    currSem = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Current_Semester"]);
                    lblstaticrollno.Text = roll_no;

                    img_stud.ImageUrl = "~/Handler/Handler4.ashx?rollno=" + roll_no1;
                    // img_stud.ImageUrl = "~/Handler/Handler4.ashx?rollno=" + roll_no;
                    img_stud.Visible = true;
                    int.TryParse(Convert.ToString(dsRollApp.Tables[0].Rows[0]["mode"]), out studemode);
                }
                else
                {
                    roll_no = "";
                    appnoNew = "";
                    lblstaticrollno.Text = "";
                    img_stud.Visible = false;
                }
            }
            else
            {
                roll_no = "";
                lblstaticrollno.Text = "";
                img_stud.Visible = false;
            }
            //added current sem and also previous sem alsow with bal only 17.08.2017
            if (!string.IsNullOrEmpty(currSem) && ShowCurSemesterOnly())
            {
                StringBuilder sbcurSem = new StringBuilder();
                string tempSemYEar = string.Empty;
                Dictionary<string, string> curSemcode = getFeecode();
                currSem = getCurYear(currSem);
                for (int row = Convert.ToInt32(currSem); row > 0; row--)
                {
                    if (curSemcode.ContainsKey(Convert.ToString(row)))
                    {
                        sbcurSem.Append(Convert.ToString(curSemcode[Convert.ToString(row)]) + "','");
                    }
                    // currSem--;
                }
                if (sbcurSem.Length > 0)
                {
                    sbcurSem.Remove(sbcurSem.Length - 3, 3);
                    semyear = Convert.ToString(sbcurSem);
                }

            }

            selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK" + ledgerNameScl + ",priority,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)  as DeductAmount,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(TotalAmount,0)-isnull(PaidAmount,0)  as BalAmount,TextVal,TextCode,isnull(FromGovtAmt,0) as Govt,feeallotpk,( select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where a.finyearfk=fm.finyearpk )as finyear,a.finyearfk,a.remarks  FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T,FS_HeaderPrivilage P  WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK  and P.HeaderFK = H.HeaderPK and P.HeaderFK = L.HeaderFK and a.HeaderFK=p.HeaderFK  AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0 and MemType=1  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "  and p.UserCode='" + usercode + "' and p.collegecode='" + ddl_college.SelectedValue + "' and isnull(a.istransfer,'0')='0' and a.finyearfk in('" + finYearFK + "')";//remark added for mec

            string chlnTakenQ = " select Count(distinct(ChallanNo)) from FT_ChallanDet where App_No=" + appnoNew + " and FeeCategory in ('" + semyear + "')";
            string Amountcheck = string.Empty;//17.05.2018
            if (rb_Challan.Checked)
            {
                chlnTakenQ = " select Count(distinct(transcode)),sum(debit) as amt from ft_findailytransaction where App_No=" + appnoNew + " and FeeCategory in ('" + semyear + "') and paymode='4'";
                Amountcheck = d2.GetFunction(" select Count(distinct(transcode)),sum(debit) as amt from ft_findailytransaction where App_No=" + appnoNew + " and FeeCategory in ('" + semyear + "') and paymode='4'");
            }


            if (cb_selcthd.Checked)
            {
                string headercode = GetSelectedItemsValue(cbl_grpheader);

                if (rbl_headerselect.SelectedIndex == 0)
                {
                    headercode = GetSelectedItemsText(cbl_grpheader);

                    //Group Header
                    selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK" + ledgerNameScl + ",priority,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)   as DeductAmount ,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(TotalAmount,0)-isnull(PaidAmount,0)  as BalAmount,TextVal,TextCode,ChlGroupHeader,isnull(FromGovtAmt,0) as Govt,feeallotpk,( select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where a.finyearfk=fm.finyearpk )as finyear,a.finyearfk,a.remarks FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0 and MemType=1   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "') and h.collegecode='" + ddl_college.SelectedValue + "' and isnull(a.istransfer,'0')='0' and a.finyearfk in('" + finYearFK + "')";
                    if (rdo_receipt.Checked || rdo_sngle.Checked)
                    {
                        selectQuery += " AND A.App_No = " + appnoNew + " ";
                    }

                    if (lbltype.Text != "")
                    {
                        selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                    }

                }
                else if (rbl_headerselect.SelectedIndex == 1)
                {
                    //Header
                    selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                    chlnTakenQ += " and headerfk in (" + headercode + ") ";
                }
                else
                {
                    //Ledger
                    selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                    chlnTakenQ += "  and LedgerFK in (" + headercode + ")";
                }
            }
            if (ShowBalOnly())
            {
                selectQuery += " and isnull(BalAmount,0)>0 ";
            }

            selectQuery += "   order by case when priority is null then 1 else 0 end,textcode,priority,a.finyearfk asc";
            #endregion

            double chltakamount = 0;

            int concessVal = 1;

            if (boolSchool)//fine checking for school concession amount
            {
                double checkDeductAmt = 0;
                string getDecutAmt = d2.GetFunction("select deductAmout from ft_feeallot where app_no='" + appnoNew + "' and feecategory in('" + semyear + "') and finyearfk in('" + finYearFK + "') and isnull(deductamout,'0')<>'0' and isnull(deductreason,'')<>'' and isnull(istransfer,'0')='0'");
                double.TryParse(getDecutAmt, out checkDeductAmt);
                if (checkDeductAmt != 0)
                    concessVal = 0;
            }

            DataSet ds_stud = new DataSet();
            ds_stud.Clear();
            try
            {
                ds_stud = d2.select_method_wo_parameter(selectQuery, "Text");
            }
            catch { }
            ArrayList arFeecatNEw = new ArrayList();
            ArrayList arFeecatReAd = new ArrayList();
            // ArrayList arFeecat = new ArrayList();
            Dictionary<string, double> dtfintFeecat = new Dictionary<string, double>();
            Dictionary<string, double> dtrefintFeecat = new Dictionary<string, double>();
            Dictionary<string, string> dtfinfk = new Dictionary<string, string>();
            Dictionary<string, int> dtmonth = new Dictionary<string, int>();//abarna
            Dictionary<string, string> dtfinfkRe = new Dictionary<string, string>();
            Dictionary<string, string> dtfeecat = new Dictionary<string, string>();
            if (ds_stud.Tables.Count > 0 && ds_stud.Tables[0].Rows.Count > 0)
            {
                #region Fine Type for College -- Common - 0; everyledger - 1
                int fineFeesType = 0;
                int.TryParse(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='FineFeesType' and college_code=" + collegecode1 + ""), out fineFeesType);
                bool fineAdded = false;
                bool ReaddfineAdded = false;
                bool monthlyfineadded = false;
                #endregion

                #region FinYear Id ,Excess Amount, Scholarship and Caution Deposit
                string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);

                //string excessamtQ = d2.GetFunction("select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt from FT_ExcessDet WHERE  App_No=" + appnoNew + " ");
                //------------------------------------------------------------------------------------------
                string excessfk = string.Empty;
                string excessamtQ = "select excessdetpk from FT_ExcessDet WHERE  App_No=" + appnoNew + "";
                DataSet ds = d2.select_method_wo_parameter(excessamtQ, "Text");
                for (int s = 0; s < ds.Tables[0].Rows.Count; s++)
                {
                    string detfk = Convert.ToString(ds.Tables[0].Rows[s]["excessdetpk"]);
                    if (excessfk == "")
                        excessfk = detfk;
                    else

                        excessfk += "'" + "," + "'" + detfk;
                }
                excessamtQ = d2.GetFunction("select sum(BalanceAmt ) as BalanceAmt from FT_ExcessLedgerDet   WHERE  ExcessDetFK in('" + excessfk + "')");
                //------------------------------------------------------------------------------------------------
                double excessamtValue = 0;
                double.TryParse(excessamtQ, out excessamtValue);
                txt_ExcAmt.Text = excessamtValue.ToString();

                double cautionRefvalue = getRefundAmount(appnoNew);
                //txt_CautionAmt.Text = cautionRefvalue.ToString();

                string useCOdeSet = "select LinkValue from New_InsSettings where LinkName='MultipleCollegeUserRights' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
                string colleges = Convert.ToString(d2.GetFunction(useCOdeSet)).Trim();
                if (colleges == "" || colleges == "0")
                {
                    colleges = collegecode1;
                }
                string excessTypeQ = "select LinkValue from New_InsSettings where LinkName='ExcessFeesType' and user_code ='" + usercode + "' and college_code in (" + collegecode1 + ") ";
                byte excessTypeValue = 0;
                byte.TryParse(Convert.ToString(d2.GetFunction(excessTypeQ)), out excessTypeValue);

                //string ScholarAmtQ = d2.GetFunction("select sum(isnull(FromGovtAmt,0)) as FromGovtAmt from FT_FeeAllot WHERE  App_No=" + appnoNew + " ");
                string reasonCodes = GetSelectedItemsValue(cblSchlReason);
                string ScholarAmtQ = d2.GetFunction("select SUM(ISNULL(TotalAmount,0)-ISNULL(AdjusAmount,0)) as SchlAmt from FT_FinScholarship where App_no = " + appnoNew + " and Reasoncode in (" + reasonCodes + ") ");
                double gvtTotAmt = 0.00;
                double.TryParse(ScholarAmtQ.Trim(), out gvtTotAmt);

                //int mulSchlSelec = 0;
                //mulSchlSelec = GetSelectedItemsValueList(cblSchlReason).Count;

                //if (mulSchlSelec > 0)
                //{
                //    gvtTotAmt = 0;
                //    gvtTotAmt = getSelSchol(appnoNew);
                //}
                //else
                //{
                //    gvtTotAmt = 0;
                //}
                txt_GvtTot.Text = gvtTotAmt.ToString();

                string ScholarTypeQ = "select LinkValue from New_InsSettings where LinkName='ScholarshipType' and user_code ='" + usercode + "' and college_code in(" + collegecode1 + ") ";
                byte ScholarTypeValue = 0;
                byte.TryParse(Convert.ToString(d2.GetFunction(ScholarTypeQ)), out ScholarTypeValue);
                #endregion
                double fineAmount = 0;
                double readfineamount = 0;
                for (i = 0; i < ds_stud.Tables[0].Rows.Count; i++)
                {
                    DataRow dr_Student = tbl_Student.NewRow();
                    string remark = Convert.ToString(ds_stud.Tables[0].Rows[i]["remarks"]);
                    if (remark != "")
                    {
                        txt_remark.Text = remark;
                    }
                    Int64 feeallopk = Convert.ToInt64(Convert.ToString(ds_stud.Tables[0].Rows[i]["feeallotpk"]));
                    string feecat = Convert.ToString(ds_stud.Tables[0].Rows[i]["TextCode"]);
                    string ldgerId = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]);
                    string hdrId = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]);
                    string finyearfK = Convert.ToString(ds_stud.Tables[0].Rows[i]["finyearfk1"]);
                    string finyear = Convert.ToString(ds_stud.Tables[0].Rows[i]["finyear"]);
                    //dr_Student["Roll_No"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Roll_No"]);
                    //dr_Student["Reg_No"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Reg_No"]);
                    // dr_Student["Stud_Name"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Stud_Name"]);
                    // dr_Student["Degree"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Degree"]);
                    dr_Student["TextVal"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["TextVal"]);
                    dr_Student["TextCode"] = feecat;
                    dr_Student["Header_ID"] = hdrId;
                    dr_Student["Header_Name"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderName"]);
                    dr_Student["Fee_Code"] = ldgerId;
                    dr_Student["feeallotpk"] = feeallopk;
                    dr_Student["Fee_Type"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerName"]) + retQuantity(appnoNew, ldgerId, "1", feecat);
                    dr_Student["ChlTaken"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["ChlTakAmt"]);
                    string chlamount = Convert.ToString(ds_stud.Tables[0].Rows[i]["ChlTakAmt"]);
                    if (chlamount.Trim() != "")
                    {
                        chltakamount = chltakamount + Convert.ToDouble(chlamount);
                    }
                    //appnoNew = Convert.ToString(ds_stud.Tables[0].Rows[i]["App_No"]);

                    //  string finyearFk = Convert.ToString(ds_stud.Tables[0].Rows[i]["finyearfk"]);

                    double feeamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["FeeAmount"]);
                    double deductamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["DeductAmount"]);
                    double totamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["TotalAmount"]);
                    double paid = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["PaidAmount"]);
                    double balamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["BalAmount"]);
                    double curExcess = 0;
                    //double scholarAmt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["Govt"]);
                    double scholarAmt = 0;
                    double curCautAmt = 0;

                    string feevalue = Convert.ToString(ds_stud.Tables[0].Rows[i]["TextVal"]);
                    if (!dtfeecat.ContainsKey(feecat))
                    {
                        dtfeecat.Add(feecat, feevalue);
                    }

                    //double dueAMt = 0;
                    //string dueAmtstring = "select SUM(isnull(ExtDueAmount,0)) as DueAmount from FeesDueExt where App_No='"+appnoNew+"' and ExtDueDate<='"+DateTime.Now.Date+"'  and FeeCategory='"+feecat+"' and HeaderFK='"+hdrId+"' and LedgerFK='"+ldgerId+"'";

                    //double.TryParse(d2.GetFunction(dueAmtstring).Trim(),out dueAMt);

                    if (cb_exfees.Checked && excessTypeValue == 1)
                    {
                        //Common Excess
                        if (totamt >= paid + excessamtValue)
                        {
                            curExcess = excessamtValue;
                            balamt = balamt - (curExcess);
                            excessamtValue = 0;
                            dr_Student["Monthly"] = curExcess;
                        }
                        else
                        {
                            curExcess = totamt - paid;
                            excessamtValue -= curExcess;
                            balamt = balamt - (curExcess);
                            dr_Student["Monthly"] = curExcess;
                        }
                    }
                    else if (cb_exfees.Checked && excessTypeValue == 2)
                    {
                        //Ledgerwise Excess
                        string ledUpQ = "select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt from FT_ExcessLedgerDet where HeaderFK ='" + hdrId + "' and LedgerFK ='" + ldgerId + "' and ExcessDetFK in (select ExcessDetPK from FT_ExcessDet WHERE  App_No=" + appnoNew + ")";

                        double excessAmtval = 0;
                        double.TryParse(d2.GetFunction(ledUpQ).Trim(), out excessAmtval);

                        if (totamt >= paid + excessAmtval)
                        {
                            curExcess = excessAmtval;
                            balamt = balamt - (curExcess);
                            dr_Student["Monthly"] = curExcess;
                        }
                        else
                        {
                            curExcess = totamt - paid;
                            balamt = balamt - (curExcess);
                            dr_Student["Monthly"] = curExcess;
                        }
                    }
                    else
                    {
                        dr_Student["Monthly"] = "0";
                    }

                    if (cb_govt.Checked && ScholarTypeValue == 1)
                    {
                        string ledGvtQ = d2.GetFunction("select SUM(ISNULL(TotalAmount,0)-ISNULL(AdjusAmount,0)) as SchlAmt from FT_FinScholarship where App_no = " + appnoNew + " and LedgerFK=" + ldgerId + " and HeaderFk=" + hdrId + " and FeeCategory=" + feecat + " and Reasoncode in (" + reasonCodes + ") ");
                        double.TryParse(ledGvtQ.Trim(), out scholarAmt);

                        //Ledgerwise Scholarship
                        if (totamt >= (paid + curExcess + scholarAmt))
                        {
                            balamt = balamt - (scholarAmt);
                            dr_Student["Scholar"] = scholarAmt;
                        }
                        else
                        {
                            scholarAmt = totamt - (paid + curExcess);
                            balamt = balamt - (scholarAmt);
                            dr_Student["Scholar"] = scholarAmt;
                        }
                    }
                    else if (cb_govt.Checked && ScholarTypeValue == 0)
                    {
                        //Common Scholarship
                        if (totamt >= (paid + curExcess + gvtTotAmt))
                        {
                            scholarAmt = gvtTotAmt;
                            balamt = balamt - (scholarAmt);
                            gvtTotAmt = 0;
                            dr_Student["Scholar"] = scholarAmt;
                        }
                        else
                        {
                            scholarAmt = totamt - (paid + curExcess);
                            gvtTotAmt -= scholarAmt;
                            balamt = balamt - (scholarAmt);
                            dr_Student["Scholar"] = scholarAmt;
                        }
                    }
                    else
                    {
                        dr_Student["Scholar"] = "0";
                    }

                    if (cb_CautionDep.Checked)
                    {
                        if (totamt >= (paid + curExcess + scholarAmt + cautionRefvalue))
                        {
                            curCautAmt = cautionRefvalue;
                            balamt = balamt - (curCautAmt);
                            cautionRefvalue = 0;
                            dr_Student["CautionDep"] = curCautAmt;
                        }
                        else
                        {
                            curCautAmt = totamt - (paid + curExcess + scholarAmt);
                            cautionRefvalue -= curCautAmt;
                            balamt = balamt - (curCautAmt);
                            dr_Student["CautionDep"] = curCautAmt;
                        }
                    }
                    else
                    {
                        dr_Student["CautionDep"] = "0";
                    }

                    dr_Student["ToBePaid"] = "0";
                    dr_Student["Fee_Amount"] = feeamt;
                    dr_Student["Deduct"] = deductamt;
                    dr_Student["Total"] = totamt;
                    dr_Student["PaidAmt"] = paid;
                    dr_Student["BalAmt"] = balamt;
                    dr_Student["finyearfk"] = finyearfK;
                    dr_Student["finyear"] = finyear;
                    if (!string.IsNullOrEmpty(finyearfK))
                        dr_Student["finyearfk"] = finyearfK;
                    else
                        dr_Student["finyearfk"] = "&";

                    if (feeallopk > 0)
                    {
                        string monthWiseQ = " select isnull(AllotAmount,0) as AllotAmt,isnull(PaidAmount,0) as PaidAmount,isnull(AllotAmount,0)-isnull(PaidAmount,0) as BalAmount,AllotMonth,AllotYear,(select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk FROM fm_finyearmaster fm where a.finyearfk=fm.finyearpk )as finyear,a.finyearfk from FT_FeeallotMonthly a where FeeAllotPK=" + feeallopk + "";
                        DataSet dsMonWiseDet = d2.select_method_wo_parameter(monthWiseQ, "Text");
                        if (dsMonWiseDet.Tables.Count > 0 && dsMonWiseDet.Tables[0].Rows.Count > 0)
                        {
                            #region Monthwise
                            double curMonExcess = curExcess;
                            double scholarMonAmt = scholarAmt;
                            double curCautMonAMt = curCautAmt;
                            for (int mon = 0; mon < dsMonWiseDet.Tables[0].Rows.Count; mon++)
                            {
                                DataRow dr_StudentMonth = tbl_Student.NewRow();

                                //Added on 04-06-2016
                                double totamtMon = 0;
                                double paidMon = 0;
                                double balamtMon = 0;

                                double.TryParse(Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["AllotAmt"]), out totamtMon);
                                double.TryParse(Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["PaidAmount"]), out paidMon);
                                balamtMon = totamtMon - paidMon;

                                //Excess Adjust
                                double curExcessM = 0;
                                if (totamtMon >= paidMon + curMonExcess)
                                {
                                    curExcessM = curMonExcess;
                                    balamtMon = balamtMon - (curExcessM);
                                    curMonExcess = 0;
                                    dr_StudentMonth["Monthly"] = curExcessM;
                                }
                                else
                                {
                                    curExcessM = totamtMon - paidMon;
                                    curMonExcess -= curExcessM;
                                    balamtMon = balamtMon - (curExcessM);
                                    dr_StudentMonth["Monthly"] = curExcessM;
                                }

                                //Scholarship adjust
                                double scholarAmtM = 0;

                                if (totamtMon >= (paidMon + curExcessM + scholarMonAmt))
                                {
                                    scholarAmtM = scholarMonAmt;
                                    balamtMon = balamtMon - (scholarAmtM);
                                    scholarMonAmt = 0;
                                    dr_Student["Scholar"] = scholarAmtM;
                                }
                                else
                                {
                                    scholarAmtM = totamtMon - (paidMon + curExcessM);
                                    scholarMonAmt -= scholarAmtM;
                                    balamtMon = balamtMon - (scholarAmtM);
                                    dr_Student["Scholar"] = scholarAmtM;
                                }

                                //Caution Deposit Adjust
                                double curCautAmtM = 0;

                                if (totamtMon >= (paidMon + curExcessM + scholarAmtM + curCautMonAMt))
                                {
                                    curCautAmtM = curCautMonAMt;
                                    balamtMon = balamtMon - (curCautAmtM);
                                    curCautMonAMt = 0;
                                    dr_Student["CautionDep"] = curCautAmtM;
                                }
                                else
                                {
                                    curCautAmtM = totamtMon - (paidMon + curExcessM + scholarAmtM);
                                    curCautMonAMt -= curCautAmtM;
                                    balamtMon = balamtMon - (curCautAmtM);
                                    dr_Student["CautionDep"] = curCautAmtM;
                                }

                                dr_StudentMonth["BalAmt"] = balamtMon;

                                //Ended on 04-06-2016

                                dr_StudentMonth["TextVal"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["TextVal"]);
                                dr_StudentMonth["TextCode"] = feecat;
                                dr_StudentMonth["Header_ID"] = hdrId;
                                dr_StudentMonth["Header_Name"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderName"]);
                                dr_StudentMonth["Fee_Code"] = ldgerId;
                                dr_StudentMonth["Fee_Type"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerName"]) + "-" + reUse.returnMonthName(Convert.ToInt32(Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["AllotMonth"]))) + "-" + Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["AllotYear"]);
                                dr_StudentMonth["MonwiseMon"] = Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["AllotMonth"]);
                                dr_StudentMonth["MonwiseYear"] = Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["AllotYear"]);
                                dr_StudentMonth["Feeallotpk"] = feeallopk;

                                dr_StudentMonth["Fee_Amount"] = Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["AllotAmt"]);
                                dr_StudentMonth["Total"] = Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["AllotAmt"]);
                                dr_StudentMonth["PaidAmt"] = Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["PaidAmount"]);
                                //dr_StudentMonth["BalAmt"] = Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["BalAmount"]);

                                dr_StudentMonth["ToBePaid"] = "0";
                                dr_StudentMonth["Deduct"] = deductamt;
                                finyearfK = Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["finyearfk"]);
                                finyear = Convert.ToString(dsMonWiseDet.Tables[0].Rows[mon]["finyear"]);
                                dr_StudentMonth["finyearfk"] = finyearfK;
                                dr_StudentMonth["finyear"] = finyear;
                                tbl_Student.Rows.Add(dr_StudentMonth);
                            }
                            #endregion
                        }
                        else
                        {
                            tbl_Student.Rows.Add(dr_Student);
                        }
                    }
                    else
                    {
                        tbl_Student.Rows.Add(dr_Student);
                    }

                    if (!boolSchool)//college fine
                    {
                        #region college
                        bool boolFine = false;
                        if (rdo_challan.Checked)
                            boolFine = true;
                        else
                        {
                            if (balamt != 0)
                                boolFine = true;
                        }

                        if (!fineAdded)
                        {
                            #region Fine Calculation
                            if (boolFine)
                            {
                                //Added by saranya on 4April2018
                                string FineCancel = "select * from FT_FineCancelSetting where app_no='" + appnoNew + "' and FeeCategory in('" + feecat + "')";
                                DataSet dsfinecnl = new DataSet();
                                dsfinecnl = d2.select_method_wo_parameter(FineCancel, "Text");
                                if (dsfinecnl.Tables[0].Rows.Count > 0)
                                {

                                }
                                //==========================//
                                else
                                {
                                    string fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName,( select (convert(varchar(10),finyearstart,103)+'-'+convert(varchar(10),finyearend,103)) as finyearfk from fm_finyearmaster fm where f.finyearfk=fm.finyearpk)as finyear,f.finyearfk,Stud_FineSettingType from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "' and H.Headerpk ='" + hdrId + "' and L.LedgerPK='" + ldgerId + "' and FeeCatgory in ('" + feecat + "') and isnull(FineSettingType,0)='0' and BatchYear='" + batchYear + "' select distinct holiday_date from holidaystudents where degree_code=" + degcode + "";//and f.finyearfk in('" + finyearfK + "') 

                                    DataSet dsFine = new DataSet();
                                    dsFine = d2.select_method_wo_parameter(fineQ, "Text");

                                    if (dsFine.Tables.Count > 0)
                                    {
                                        if (dsFine.Tables[0].Rows.Count > 0)
                                        {
                                            for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                                            {
                                                string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                                                string finefinfk = Convert.ToString(dsFine.Tables[0].Rows[fn]["finyearfk"]);
                                                DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                                                // DateTime curDate = DateTime.Now.Date;
                                                string recptDt = txt_date.Text.Split('/')[1] + "/" + txt_date.Text.Split('/')[0] + "/" + txt_date.Text.Split('/')[2];
                                                double tempPaid = 0;
                                                double.TryParse(Convert.ToString(d2.GetFunction("select sum(debit) as debit from ft_findailytransaction where App_No='" + appnoNew + "' and headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "' and feecategory in ('" + feecat + "') and transdate>'" + due + "'")), out tempPaid);
                                                //  string paidamount = d2.GetFunction("select sum(debit) as debit from ft_findailytransaction where headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "' and feecategory in ('" + feecat + "') and transdate>'" + due + "'");

                                                DateTime curDate = Convert.ToDateTime(recptDt);
                                                #region Check for Due Extension
                                                DateTime dueExt = due;
                                                string dueDtstring = "select  max(ExtDueDate) as DueDate from FeesDueExt where App_No='" + appnoNew + "' and  FeeCategory='" + feecat + "' and HeaderFK='" + hdrId + "' and LedgerFK='" + ldgerId + "'";
                                                try
                                                {
                                                    dueExt = Convert.ToDateTime(d2.GetFunction(dueDtstring).Trim());
                                                }
                                                catch { dueExt = due; }
                                                // DateTime.TryParse(d2.GetFunction(dueDtstring).Trim(), out dueExt);
                                                due = dueExt;
                                                #endregion

                                                if (tempPaid == 0)
                                                {
                                                    if (fineType == "1")
                                                    {
                                                        //common - No holiday
                                                        if (due < curDate)
                                                        {
                                                            fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                        }
                                                    }
                                                    else if (fineType == "2")
                                                    {
                                                        //Per day - 
                                                        for (; due < curDate; due = due.AddDays(1))
                                                        {
                                                            bool addFine = true;
                                                            if (dsFine.Tables.Count > 1 && dsFine.Tables[1].Rows.Count > 0)
                                                            {
                                                                dsFine.Tables[1].DefaultView.RowFilter = " holiday_date ='" + due + "'";
                                                                DataView dvFinDt = dsFine.Tables[1].DefaultView;
                                                                if (dvFinDt.Count > 0)
                                                                    addFine = false;
                                                            }

                                                            if (addFine)
                                                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                        }
                                                    }
                                                    else if (fineType == "3")
                                                    {
                                                        //Per week
                                                        TimeSpan td = curDate - due;
                                                        int difference = td.Days;
                                                        int fromday = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["FromDay"]);
                                                        int to_day = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["ToDay"]);

                                                        if (difference <= to_day && difference >= fromday)
                                                        {
                                                            fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                        }
                                                        if (!dtfinfk.ContainsKey(feecat))
                                                            dtfinfk.Add(feecat, finefinfk);
                                                    }
                                                }

                                            }
                                            if (fineAmount > 0 && fineFeesType == 0)
                                            {
                                                if (!dtfintFeecat.ContainsKey(feecat))
                                                    dtfintFeecat.Add(feecat, fineAmount);
                                                else
                                                    dtfintFeecat[feecat] += fineAmount;
                                                //fineAdded = true;
                                                fineAmount = 0;
                                                if (!arFeecatNEw.Contains(feecat))
                                                    arFeecatNEw.Add(feecat);
                                            }
                                        }
                                    }
                                    if (fineAmount > 0 && fineFeesType == 0)
                                    {
                                        fineAdded = true;
                                    }
                                    if (fineAmount > 0 && fineFeesType == 1)
                                    {
                                        if (!dtfintFeecat.ContainsKey(feecat))
                                            dtfintFeecat.Add(feecat, fineAmount);
                                        //else
                                        //    dtfintFeecat[feecat] += fineAmount;
                                        //fineAdded = true;
                                        fineAmount = 0;
                                        if (!arFeecatNEw.Contains(feecat))
                                            arFeecatNEw.Add(feecat);
                                    }
                                }
                            }
                            #endregion
                            #region fine Calculation for perday wise based balance amount
                            #region Fine Calculation
                            if (boolFine)
                            {
                                //Added by saranya on 4April2018
                                string FineCancel = "select * from FT_FineCancelSetting where app_no='" + appnoNew + "' and FeeCategory in('" + feecat + "')";
                                DataSet dsfinecnl = new DataSet();
                                dsfinecnl = d2.select_method_wo_parameter(FineCancel, "Text");
                                if (dsfinecnl.Tables[0].Rows.Count > 0)
                                {

                                }
                                //==========================//
                                else
                                {
                                    string fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName,( select (convert(varchar(10),finyearstart,103)+'-'+convert(varchar(10),finyearend,103)) as finyearfk from fm_finyearmaster fm where f.finyearfk=fm.finyearpk)as finyear,f.finyearfk,Stud_FineSettingType from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "' and H.Headerpk ='" + hdrId + "' and L.LedgerPK='" + ldgerId + "' and FeeCatgory in ('" + feecat + "') and isnull(FineSettingType,0)='3' and BatchYear='" + batchYear + "' select distinct holiday_date from holidaystudents where degree_code=" + degcode + "";//and f.finyearfk in('" + finyearfK + "') 

                                    DataSet dsFine = new DataSet();
                                    dsFine = d2.select_method_wo_parameter(fineQ, "Text");

                                    if (dsFine.Tables.Count > 0)
                                    {
                                        if (dsFine.Tables[0].Rows.Count > 0)
                                        {
                                            for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                                            {
                                                string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                                                string finefinfk = Convert.ToString(dsFine.Tables[0].Rows[fn]["finyearfk"]);
                                                DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                                                // DateTime curDate = DateTime.Now.Date;
                                                string recptDt = txt_date.Text.Split('/')[1] + "/" + txt_date.Text.Split('/')[0] + "/" + txt_date.Text.Split('/')[2];
                                                double tempPaid = 0;
                                                double.TryParse(Convert.ToString(d2.GetFunction("select sum(debit) as debit from ft_findailytransaction where App_No='" + appnoNew + "' and headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "' and feecategory in ('" + feecat + "') and transdate>'" + due + "'")), out tempPaid);
                                                //  string paidamount = d2.GetFunction("select sum(debit) as debit from ft_findailytransaction where headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "' and feecategory in ('" + feecat + "') and transdate>'" + due + "'");

                                                DateTime curDate = Convert.ToDateTime(recptDt);
                                                #region Check for Due Extension
                                                DateTime dueExt = due;
                                                string dueDtstring = "select  max(ExtDueDate) as DueDate from FeesDueExt where App_No='" + appnoNew + "' and  FeeCategory='" + feecat + "' and HeaderFK='" + hdrId + "' and LedgerFK='" + ldgerId + "'";
                                                try
                                                {
                                                    dueExt = Convert.ToDateTime(d2.GetFunction(dueDtstring).Trim());
                                                }
                                                catch { dueExt = due; }
                                                // DateTime.TryParse(d2.GetFunction(dueDtstring).Trim(), out dueExt);
                                                due = dueExt;
                                                #endregion

                                                if (tempPaid == 0)
                                                {
                                                    if (fineType == "1")
                                                    {
                                                        //common - No holiday
                                                        if (due < curDate)
                                                        {
                                                            fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                        }
                                                    }
                                                    else if (fineType == "2")
                                                    {
                                                        //Per day - 
                                                        for (; due < curDate; due = due.AddDays(1))
                                                        {
                                                            bool addFine = true;
                                                            if (dsFine.Tables.Count > 1 && dsFine.Tables[1].Rows.Count > 0)
                                                            {
                                                                dsFine.Tables[1].DefaultView.RowFilter = " holiday_date ='" + due + "'";
                                                                DataView dvFinDt = dsFine.Tables[1].DefaultView;
                                                                if (dvFinDt.Count > 0)
                                                                    addFine = false;
                                                            }
                                                            double balfine = 0;
                                                            double balsetfine = 0;
                                                            //fine per day with header and ledger
                                                            string Balamountfine = d2.GetFunction("select balamount from ft_feeallot where app_no='" + appnoNew + "' and headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "'");
                                                            string balamountsetfine = d2.GetFunction("select amount from ft_perdayindividualsetting where headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "'");
                                                            double.TryParse(Balamountfine, out balfine);
                                                            double.TryParse(balamountsetfine, out balsetfine);
                                                            if (balsetfine < balfine)
                                                            {
                                                                if (addFine)
                                                                    fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                            }
                                                        }
                                                    }
                                                    else if (fineType == "3")
                                                    {
                                                        //Per week
                                                        TimeSpan td = curDate - due;
                                                        int difference = td.Days;
                                                        int fromday = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["FromDay"]);
                                                        int to_day = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["ToDay"]);

                                                        if (difference <= to_day && difference >= fromday)
                                                        {
                                                            fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                        }
                                                        if (!dtfinfk.ContainsKey(feecat))
                                                            dtfinfk.Add(feecat, finefinfk);
                                                    }
                                                }

                                            }
                                            if (fineAmount > 0 && fineFeesType == 0)
                                            {
                                                if (!dtfintFeecat.ContainsKey(feecat))
                                                    dtfintFeecat.Add(feecat, fineAmount);
                                                else
                                                    dtfintFeecat[feecat] += fineAmount;
                                                //fineAdded = true;
                                                fineAmount = 0;
                                                if (!arFeecatNEw.Contains(feecat))
                                                    arFeecatNEw.Add(feecat);
                                            }
                                        }
                                    }
                                    if (fineAmount > 0 && fineFeesType == 0)
                                    {
                                        fineAdded = true;
                                    }
                                    if (fineAmount > 0 && fineFeesType == 1)
                                    {
                                        if (!dtfintFeecat.ContainsKey(feecat))
                                            dtfintFeecat.Add(feecat, fineAmount);
                                        //else
                                        //    dtfintFeecat[feecat] += fineAmount;
                                        //fineAdded = true;
                                        fineAmount = 0;
                                        if (!arFeecatNEw.Contains(feecat))
                                            arFeecatNEw.Add(feecat);
                                    }
                                }
                            }
                            #endregion

                            #endregion
                        }
                        //Re-admission fees settings
                        if (!ReaddfineAdded)
                        {
                            #region Fine Calculation
                            if (boolFine)
                            {
                                string fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName,( select (convert(varchar(10),finyearstart,103)+'-'+convert(varchar(10),finyearend,103)) as finyearfk from fm_finyearmaster fm where f.finyearfk=fm.finyearpk)as finyear,f.finyearfk,Stud_FineSettingType from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "' and H.Headerpk ='" + hdrId + "' and L.LedgerPK='" + ldgerId + "' and FeeCatgory in ('" + feecat + "') and isnull(FineSettingType,0)='1' and BatchYear='" + batchYear + "' select distinct holiday_date from holidaystudents where degree_code=" + degcode + "";//f.finyearfk in('" + finyearfK + "')

                                DataSet dsFine = new DataSet();
                                dsFine = d2.select_method_wo_parameter(fineQ, "Text");
                                if (dsFine.Tables.Count > 0)
                                {
                                    if (dsFine.Tables[0].Rows.Count > 0)
                                    {
                                        for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                                        {
                                            string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                                            string finefinfk = Convert.ToString(dsFine.Tables[0].Rows[fn]["finyearfk"]);
                                            DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                                            //  DateTime curDate = DateTime.Now.Date;
                                            string recptDt = txt_date.Text.Split('/')[1] + "/" + txt_date.Text.Split('/')[0] + "/" + txt_date.Text.Split('/')[2];
                                            //  string paidamount = d2.GetFunction("select sum(debit) as debit from ft_findailytransaction where headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "' and feecategory in ('" + feecat + "') and transdate>'" + due + "'");
                                            double tempPaid = 0;
                                            double.TryParse(Convert.ToString(d2.GetFunction("select sum(debit) as debit from ft_findailytransaction where App_No='" + appnoNew + "' and  headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "' and feecategory in ('" + feecat + "') and transdate>'" + due + "'")), out tempPaid);
                                            DateTime curDate = Convert.ToDateTime(recptDt);
                                            #region Check for Due Extension
                                            DateTime dueExt = due;
                                            string dueDtstring = "select  max(ExtDueDate) as DueDate from FeesDueExt where App_No='" + appnoNew + "' and  FeeCategory='" + feecat + "' and HeaderFK='" + hdrId + "' and LedgerFK='" + ldgerId + "'";
                                            try
                                            {
                                                dueExt = Convert.ToDateTime(d2.GetFunction(dueDtstring).Trim());
                                            }
                                            catch { dueExt = due; }
                                            // DateTime.TryParse(d2.GetFunction(dueDtstring).Trim(), out dueExt);
                                            due = dueExt;
                                            #endregion

                                            if (tempPaid == 0)
                                            {
                                                if (fineType == "1")
                                                {
                                                    //common - No holiday
                                                    if (due < curDate)
                                                    {
                                                        readfineamount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                    }
                                                }
                                                if (!dtfinfkRe.ContainsKey(feecat))
                                                    dtfinfkRe.Add(feecat, finefinfk);
                                            }
                                            #region other setting

                                            //else if (fineType == "2")
                                            //{
                                            //    //Per day - 
                                            //    for (; due < curDate; due = due.AddDays(1))
                                            //    {
                                            //        bool addFine = true;
                                            //        if (dsFine.Tables.Count > 1 && dsFine.Tables[1].Rows.Count > 0)
                                            //        {
                                            //            dsFine.Tables[1].DefaultView.RowFilter = " holiday_date ='" + due + "'";
                                            //            DataView dvFinDt = dsFine.Tables[1].DefaultView;
                                            //            if (dvFinDt.Count > 0)
                                            //                addFine = false;
                                            //        }
                                            //        if (addFine)
                                            //            readfineamount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                            //    }
                                            //}
                                            //else if (fineType == "3")
                                            //{
                                            //    //Per week
                                            //    TimeSpan td = curDate - due;
                                            //    int difference = td.Days;
                                            //    int fromday = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["FromDay"]);
                                            //    int to_day = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["ToDay"]);

                                            //    if (difference <= to_day && difference >= fromday)
                                            //    {
                                            //        readfineamount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                            //    }
                                            //}
                                            #endregion
                                        }
                                        if (readfineamount > 0 && fineFeesType == 0)
                                        {
                                            ReaddfineAdded = true;
                                            if (!dtrefintFeecat.ContainsKey(feecat))
                                                dtrefintFeecat.Add(feecat, readfineamount);
                                            else
                                                dtrefintFeecat[feecat] += readfineamount;
                                            readfineamount = 0;
                                            if (!arFeecatReAd.Contains(feecat))
                                                arFeecatReAd.Add(feecat);
                                        }
                                    }
                                }
                                if (readfineamount > 0 && fineFeesType == 0)
                                {
                                    ReaddfineAdded = true;
                                }
                            }
                            if (readfineamount > 0 && fineFeesType == 1)
                            {
                                ReaddfineAdded = true;
                                if (!dtrefintFeecat.ContainsKey(feecat))
                                    dtrefintFeecat.Add(feecat, readfineamount);
                                else
                                    dtrefintFeecat[feecat] += readfineamount;
                                readfineamount = 0;
                                if (!arFeecatReAd.Contains(feecat))
                                    arFeecatReAd.Add(feecat);
                            }
                            #endregion
                        }
                        if (!monthlyfineadded)//ABARNA
                        {
                            #region Fine Calculation
                            if (boolFine)
                            {
                                //Added by saranya on 4April2018
                                string FineCancel = "select * from FT_FineCancelSetting where app_no='" + appnoNew + "' and FeeCategory in('" + feecat + "')";
                                DataSet dsfinecnl = new DataSet();
                                dsfinecnl = d2.select_method_wo_parameter(FineCancel, "Text");
                                if (dsfinecnl.Tables[0].Rows.Count > 0)
                                {

                                }
                                //==========================//
                                else
                                {
                                    string fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName,( select (convert(varchar(10),finyearstart,103)+'-'+convert(varchar(10),finyearend,103)) as finyearfk from fm_finyearmaster fm where f.finyearfk=fm.finyearpk)as finyear,f.finyearfk,Stud_FineSettingType,finemonth from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "' and H.Headerpk ='" + hdrId + "' and L.LedgerPK='" + ldgerId + "' and FeeCatgory in ('" + feecat + "') and isnull(FineSettingType,0)='2' and BatchYear='" + batchYear + "' select distinct holiday_date from holidaystudents where degree_code=" + degcode + "";//and f.finyearfk in('" + finyearfK + "') 

                                    DataSet dsFine = new DataSet();

                                    dsFine = d2.select_method_wo_parameter(fineQ, "Text");
                                    //string finemonth = string.Empty;
                                    int finemonth = 0;
                                    if (dsFine.Tables.Count > 0)
                                    {
                                        if (dsFine.Tables[0].Rows.Count > 0)
                                        {
                                            for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                                            {
                                                finemonth = Convert.ToInt16(dsFine.Tables[0].Rows[fn]["finemonth"]);
                                                string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                                                string finefinfk = Convert.ToString(dsFine.Tables[0].Rows[fn]["finyearfk"]);
                                                DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                                                // DateTime curDate = DateTime.Now.Date;
                                                string recptDt = txt_date.Text.Split('/')[1] + "/" + txt_date.Text.Split('/')[0] + "/" + txt_date.Text.Split('/')[2];
                                                double tempPaid = 0;
                                                double.TryParse(Convert.ToString(d2.GetFunction("select sum(debit) as debit from ft_findailytransaction where App_No='" + appnoNew + "' and headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "' and feecategory in ('" + feecat + "') and transdate>'" + due + "'")), out tempPaid);
                                                //  string paidamount = d2.GetFunction("select sum(debit) as debit from ft_findailytransaction where headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "' and feecategory in ('" + feecat + "') and transdate>'" + due + "'");

                                                DateTime curDate = Convert.ToDateTime(recptDt);
                                                #region Check for Due Extension
                                                DateTime dueExt = due;
                                                string dueDtstring = "select  max(ExtDueDate) as DueDate from FeesDueExt where App_No='" + appnoNew + "' and  FeeCategory='" + feecat + "' and HeaderFK='" + hdrId + "' and LedgerFK='" + ldgerId + "'";
                                                try
                                                {
                                                    dueExt = Convert.ToDateTime(d2.GetFunction(dueDtstring).Trim());
                                                }
                                                catch { dueExt = due; }
                                                // DateTime.TryParse(d2.GetFunction(dueDtstring).Trim(), out dueExt);
                                                due = dueExt;
                                                #endregion

                                                if (tempPaid == 0)
                                                {
                                                    if (fineType == "1")
                                                    {
                                                        //common - No holiday
                                                        if (due < curDate)
                                                        {
                                                            double allotmonth = Convert.ToDouble(d2.GetFunction("select allotmonth from ft_feeallotmonthly where balamount>0 and feeallotpk='" + feeallopk + "'"));
                                                            if (allotmonth == finemonth)
                                                            {
                                                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                            }
                                                        }
                                                    }
                                                    else if (fineType == "2")
                                                    {
                                                        //Per day - 
                                                        for (; due < curDate; due = due.AddDays(1))
                                                        {
                                                            bool addFine = true;
                                                            if (dsFine.Tables.Count > 1 && dsFine.Tables[1].Rows.Count > 0)
                                                            {
                                                                dsFine.Tables[1].DefaultView.RowFilter = " holiday_date ='" + due + "'";
                                                                DataView dvFinDt = dsFine.Tables[1].DefaultView;
                                                                if (dvFinDt.Count > 0)
                                                                    addFine = false;
                                                            }
                                                            if (addFine)
                                                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                        }
                                                    }
                                                    else if (fineType == "3")
                                                    {
                                                        //Per week
                                                        TimeSpan td = curDate - due;
                                                        int difference = td.Days;
                                                        int fromday = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["FromDay"]);
                                                        int to_day = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["ToDay"]);

                                                        if (difference <= to_day && difference >= fromday)
                                                        {
                                                            fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);

                                                        }
                                                        if (!dtfinfk.ContainsKey(feecat))
                                                            dtfinfk.Add(feecat, finefinfk);
                                                    }
                                                }

                                            }
                                            if (fineAmount > 0 && fineFeesType == 0)//abarna
                                            {
                                                if (!dtfintFeecat.ContainsKey(feecat + "," + finemonth + "," + ldgerId))
                                                    dtfintFeecat.Add(feecat + "," + finemonth + "," + ldgerId, fineAmount);
                                                //else
                                                //    dtfintFeecat[feecat] += fineAmount;
                                                //fineAdded = true;
                                                fineAmount = 0;
                                                if (!arFeecatNEw.Contains(feecat))
                                                    arFeecatNEw.Add(feecat);
                                                //if (!dtmonth.ContainsKey(feecat))//abarna
                                                //    dtmonth.Add(feecat,finemonth);
                                                //else
                                                //    dtmonth[feecat] += finemonth;
                                            }
                                        }
                                    }
                                    if (fineAmount > 0 && fineFeesType == 0)
                                    {
                                        fineAdded = true;
                                    }
                                    if (fineAmount > 0 && fineFeesType == 1)
                                    {
                                        if (!dtfintFeecat.ContainsKey(feecat))
                                            dtfintFeecat.Add(feecat, fineAmount);
                                        //else
                                        //    dtfintFeecat[feecat] += fineAmount;
                                        //fineAdded = true;
                                        fineAmount = 0;
                                        if (!arFeecatNEw.Contains(feecat))
                                            arFeecatNEw.Add(feecat);
                                    }
                                }
                            }
                            #endregion
                        }
                        #endregion
                    }
                    else//school fine
                    {
                        #region school
                        if (!fineAdded && !arFeecatNEw.Contains(feecat))//&& studemode == 1
                        {
                            #region Fine Calculation
                            if (balamt > 0 || balamt == 0)
                            {
                                //Added by saranya on 4April2018
                                string FineCancel = "select * from FT_FineCancelSetting where app_no='" + appnoNew + "' and FeeCategory in('" + feecat + "')";
                                DataSet dsfinecnl = new DataSet();
                                dsfinecnl = d2.select_method_wo_parameter(FineCancel, "Text");
                                if (dsfinecnl.Tables[0].Rows.Count > 0)
                                {
                                }
                                //
                                else
                                {
                                    string fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName,( select (convert(varchar(10),finyearstart,103)+'-'+convert(varchar(10),finyearend,103)) as finyearfk from fm_finyearmaster fm where f.finyearfk=fm.finyearpk)as finyear,f.finyearfk,Stud_FineSettingType from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "' and H.Headerpk ='" + hdrId + "' and L.LedgerPK='" + ldgerId + "' and FeeCatgory in ('" + feecat + "') and isnull(FineSettingType,0)='0' and BatchYear='" + batchYear + "' select distinct holiday_date from holidaystudents where degree_code=" + degcode + "";
                                    //and f.finyearfk in('" + finYearFk + "')
                                    DataSet dsFine = new DataSet();
                                    dsFine = d2.select_method_wo_parameter(fineQ, "Text");
                                    if (dsFine.Tables.Count > 0 && dsFine.Tables[0].Rows.Count > 0)
                                    {
                                        for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                                        {
                                            bool boolCheck = false;
                                            bool boolconcession = false;
                                            string fineSett = Convert.ToString(dsFine.Tables[0].Rows[fn]["Stud_FineSettingType"]);
                                            if (!string.IsNullOrEmpty(fineSett))
                                            {
                                                string[] splFine = fineSett.Split(',');
                                                foreach (string fineVal in splFine)
                                                {
                                                    if (fineVal.Contains(Convert.ToString(studemode)))//&& fineVal.Contains(Convert.ToString(concessVal))
                                                        boolCheck = true;
                                                }
                                                if (concessVal == 0)
                                                {
                                                    foreach (string fineVal in splFine)
                                                    {
                                                        if (fineVal.Contains(Convert.ToString(concessVal)))
                                                            boolconcession = true;
                                                    }
                                                }
                                                else
                                                    boolconcession = true;

                                            }
                                            if (boolCheck && boolconcession)
                                            {
                                                string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                                                string finefinfk = Convert.ToString(dsFine.Tables[0].Rows[fn]["finyearfk"]);
                                                DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                                                // DateTime curDate = DateTime.Now.Date;
                                                string recptDt = txt_date.Text.Split('/')[1] + "/" + txt_date.Text.Split('/')[0] + "/" + txt_date.Text.Split('/')[2];
                                                DateTime curDate = Convert.ToDateTime(recptDt);
                                                #region Check for Due Extension
                                                DateTime dueExt = due;
                                                string dueDtstring = "select  max(ExtDueDate) as DueDate from FeesDueExt where App_No='" + appnoNew + "' and  FeeCategory='" + feecat + "' and HeaderFK='" + hdrId + "' and LedgerFK='" + ldgerId + "'";
                                                try
                                                {
                                                    dueExt = Convert.ToDateTime(d2.GetFunction(dueDtstring).Trim());
                                                }
                                                catch { dueExt = due; }
                                                // DateTime.TryParse(d2.GetFunction(dueDtstring).Trim(), out dueExt);
                                                due = dueExt;
                                                #endregion

                                                if (fineType == "1")
                                                {
                                                    //common - No holiday
                                                    if (due < curDate)
                                                    {
                                                        fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                    }
                                                }
                                                else if (fineType == "2")
                                                {
                                                    //Per day - 
                                                    for (; due < curDate; due = due.AddDays(1))
                                                    {
                                                        bool addFine = true;
                                                        if (dsFine.Tables.Count > 1 && dsFine.Tables[1].Rows.Count > 0)
                                                        {
                                                            dsFine.Tables[1].DefaultView.RowFilter = " holiday_date ='" + due + "'";
                                                            DataView dvFinDt = dsFine.Tables[1].DefaultView;
                                                            if (dvFinDt.Count > 0)
                                                                addFine = false;
                                                        }
                                                        if (addFine)
                                                            fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                    }
                                                }
                                                else if (fineType == "3")
                                                {
                                                    //Per week
                                                    TimeSpan td = curDate - due;
                                                    int difference = td.Days;
                                                    int fromday = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["FromDay"]);
                                                    int to_day = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["ToDay"]);
                                                    if (difference <= to_day && difference >= fromday)
                                                    {
                                                        fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                    }
                                                }
                                                //financial year add
                                                if (!dtfinfk.ContainsKey(feecat))
                                                    dtfinfk.Add(feecat, finefinfk);
                                            }
                                        }
                                    }
                                    if (fineAmount > 0 && fineFeesType == 0)
                                    {
                                        if (!dtfintFeecat.ContainsKey(feecat))
                                            dtfintFeecat.Add(feecat, fineAmount);
                                        else
                                            dtfintFeecat[feecat] += fineAmount;
                                        //fineAdded = true;
                                        fineAmount = 0;
                                        if (!arFeecatNEw.Contains(feecat))
                                            arFeecatNEw.Add(feecat);
                                    }
                                }
                            }
                            #endregion
                        }
                        //Re-admission fees settings
                        if (!ReaddfineAdded && !arFeecatReAd.Contains(feecat))// && studemode == 1
                        {
                            #region Fine Calculation
                            if (balamt > 0 || balamt == 0)
                            {
                                string fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName,( select (convert(varchar(10),finyearstart,103)+'-'+convert(varchar(10),finyearend,103)) as finyearfk from fm_finyearmaster fm where f.finyearfk=fm.finyearpk)as finyear,f.finyearfk,Stud_FineSettingType from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "' and H.Headerpk ='" + hdrId + "' and L.LedgerPK='" + ldgerId + "' and FeeCatgory in ('" + feecat + "') and isnull(FineSettingType,0)='1' and BatchYear='" + batchYear + "'   select distinct holiday_date from holidaystudents where degree_code=" + degcode + "";
                                //and f.finyearfk in('" + finyearfK + "')
                                DataSet dsFine = new DataSet();
                                dsFine = d2.select_method_wo_parameter(fineQ, "Text");
                                if (dsFine.Tables.Count > 0 && dsFine.Tables[0].Rows.Count > 0)
                                {
                                    for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                                    {
                                        bool boolCheck = false;
                                        bool boolconcession = false;
                                        string fineSett = Convert.ToString(dsFine.Tables[0].Rows[fn]["Stud_FineSettingType"]);
                                        if (!string.IsNullOrEmpty(fineSett))
                                        {
                                            string[] splFine = fineSett.Split(',');
                                            foreach (string fineVal in splFine)
                                            {
                                                if (fineVal.Contains(Convert.ToString(studemode)))//&& fineVal.Contains(Convert.ToString(concessVal))
                                                    boolCheck = true;
                                            }
                                            if (concessVal == 0)
                                            {
                                                foreach (string fineVal in splFine)
                                                {
                                                    if (fineVal.Contains(Convert.ToString(concessVal)))
                                                        boolconcession = true;
                                                }
                                            }
                                            else
                                                boolconcession = true;
                                        }
                                        if (boolCheck && boolconcession)
                                        {
                                            string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                                            string finefinfk = Convert.ToString(dsFine.Tables[0].Rows[fn]["finyearfk"]);
                                            DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                                            // DateTime curDate = DateTime.Now.Date;
                                            string recptDt = txt_date.Text.Split('/')[1] + "/" + txt_date.Text.Split('/')[0] + "/" + txt_date.Text.Split('/')[2];
                                            DateTime curDate = Convert.ToDateTime(recptDt);
                                            #region Check for Due Extension
                                            DateTime dueExt = due;
                                            string dueDtstring = "select  max(ExtDueDate) as DueDate from FeesDueExt where App_No='" + appnoNew + "' and  FeeCategory='" + feecat + "' and HeaderFK='" + hdrId + "' and LedgerFK='" + ldgerId + "'";
                                            try
                                            {
                                                dueExt = Convert.ToDateTime(d2.GetFunction(dueDtstring).Trim());
                                            }
                                            catch { dueExt = due; }
                                            // DateTime.TryParse(d2.GetFunction(dueDtstring).Trim(), out dueExt);
                                            due = dueExt;
                                            #endregion

                                            if (fineType == "1")
                                            {
                                                //common - No holiday
                                                if (due < curDate)
                                                {
                                                    readfineamount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                }
                                            }
                                            //financial year add
                                            if (!dtfinfkRe.ContainsKey(feecat))
                                                dtfinfkRe.Add(feecat, finefinfk);
                                        }
                                    }
                                }
                                if (readfineamount > 0 && fineFeesType == 0)
                                {
                                    ReaddfineAdded = true;
                                    if (!dtrefintFeecat.ContainsKey(feecat))
                                        dtrefintFeecat.Add(feecat, readfineamount);
                                    else
                                        dtrefintFeecat[feecat] += readfineamount;

                                    if (!arFeecatReAd.Contains(feecat))
                                        arFeecatReAd.Add(feecat);
                                }
                            }
                            #endregion
                        }
                        #endregion
                    }
                }
                if (!boolSchool)//college fine added
                {
                    #region college


                    #region Fine Adjustment
                    double ovrAllBalAmt = 0;
                    try
                    {
                        //DataTable table;
                        //table = tbl_Student;

                        //// Declare an object variable.
                        //object sumObject;
                        //sumObject = table.Compute("Sum(BalAmt)", "");
                        //double.TryParse(sumObject.ToString(), out ovrAllBalAmt);
                        for (int bal = 0; bal < tbl_Student.Rows.Count; bal++)
                        {
                            string balAmti = Convert.ToString(tbl_Student.Rows[bal]["BalAmt"]).Trim();
                            if (balAmti != "")
                            {
                                ovrAllBalAmt += Convert.ToDouble(balAmti);
                            }
                        }
                    }
                    catch { ovrAllBalAmt = 0; }
                    string name = string.Empty;

                    if (dtfintFeecat.Count > 0)//ovrAllBalAmt > 0 &&
                    {
                        string query = "select ledgerfk,feecategory from ft_feeallot where balamount>0 and app_no='" + appnoNew + "'";
                        DataSet s = d2.select_method_wo_parameter(query, "text");
                        for (int j = 0; j < s.Tables[0].Rows.Count; j++)
                        {
                            string ledgerfk = Convert.ToString(s.Tables[0].Rows[j]["ledgerfk"]);
                            string feecategory = Convert.ToString(s.Tables[0].Rows[j]["feecategory"]);
                            string linkName = batchYear + "-" + degcode + "-" + "FineLedgerValue" + "-" + ledgerfk;
                            //   string fineLegHedQ = d2.GetFunction(" select Linkvalue from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + usercode + "' and college_code  in (" + collegecode1 + ")");
                            string fineLegHedQ = " select distinct Linkvalue from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + usercode + "' and college_code  in (" + collegecode1 + ")";

                            DataSet setfine = d2.select_method_wo_parameter(fineLegHedQ, "text");
                            for (int k = 0; k < setfine.Tables[0].Rows.Count; k++)
                            {
                                if (fineLegHedQ != "0" && dtfintFeecat.Count > 0)
                                {
                                    string head = Convert.ToString(setfine.Tables[0].Rows[k]["Linkvalue"]);

                                    //   string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                                    //string fineHdrId = fineLegHedQ.Split('~')[2];
                                    //string fineLgrId = fineLegHedQ.Split('~')[3];
                                    string fineHdrId = head.Split('~')[2];

                                    string fineLgrId = head.Split('~')[3];//modified by abarna
                                    string fineLgrId1 = head.Split('~')[4];//abarna
                                    string fineHdrName = d2.GetFunction(" select headername from fm_headermaster where headerpk=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                                    string fineLgrName = d2.GetFunction("  select ledgername from fm_ledgermaster where ledgerpk=" + fineLgrId + " and HeaderFK=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");

                                    string finelgrname1 = d2.GetFunction("select ledgername from fm_ledgermaster where ledgerpk=" + fineLgrId1 + " and HeaderFK=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                                    fineAmount = 0;
                                    foreach (KeyValuePair<string, double> fine in dtfintFeecat)
                                    {
                                        //if (ledgerfk == fine.Key.Split(',')[2])
                                        //{

                                        string sbfine = string.Empty;
                                        string feestr = string.Empty;

                                        //string month=string .Empty ;//abarna
                                        sbfine = Convert.ToString(fine.Key + "$" + fine.Value);
                                        fineAmount = fine.Value;
                                        string finefeecat = fine.Key.Split(',')[0];
                                        if (dtfeecat.ContainsKey(finefeecat))
                                            feestr = Convert.ToString(dtfeecat[finefeecat]);
                                        //if (dtmonth.ContainsKey(fine.Key))//abarna
                                        //    month = Convert.ToString(dtmonth[fine.Key]);
                                        DataRow drFine = tbl_Student.NewRow();
                                        drFine["Header_ID"] = fineHdrId;
                                        drFine["Header_Name"] = fineHdrName;
                                        drFine["Fee_Code"] = fineLgrId;
                                        //   drFine["Fee_Type"] = fineLgrName;
                                        drFine["Fee_Type"] = finelgrname1;
                                        name = fineLgrId;
                                        drFine["ChlTaken"] = "0";
                                        //drFine["TextVal"] = "FINE";
                                        drFine["TextVal"] = "FINE" + "-" + feestr;
                                        // drFine["TextCode"] = "-1";
                                        drFine["TextCode"] = Convert.ToString(sbfine);
                                        drFine["Fee_Amount"] = fineAmount;
                                        drFine["Deduct"] = "0";
                                        drFine["Total"] = fineAmount;
                                        drFine["PaidAmt"] = "0";
                                        drFine["BalAmt"] = fineAmount;
                                        drFine["ToBePaid"] = "0";
                                        drFine["Monthly"] = "0";
                                        drFine["Scholar"] = "0";
                                        drFine["CautionDep"] = "0";
                                        //tbl_Student.Rows.Add(drFine);
                                        //  string balAmti = Convert.ToString(tbl_Student.Rows[bal]["BalAmt"]).Trim();
                                        tbl_Student.Rows.InsertAt(drFine, 0);
                                        //}


                                    }
                                }
                            }
                        }
                    }
                    #endregion
                    //Re-Admission fees settings
                    #region Fine Adjustment
                    double ovrAllBalAmtread = 0;
                    try
                    {
                        //DataTable table;
                        //table = tbl_Student;

                        //// Declare an object variable.
                        //object sumObject;
                        //sumObject = table.Compute("Sum(BalAmt)", "");
                        //double.TryParse(sumObject.ToString(), out ovrAllBalAmt);
                        for (int bal = 0; bal < tbl_Student.Rows.Count; bal++)
                        {
                            string balAmti = Convert.ToString(tbl_Student.Rows[bal]["BalAmt"]).Trim();
                            if (balAmti != "")
                            {
                                ovrAllBalAmtread += Convert.ToDouble(balAmti);
                            }
                        }
                    }
                    catch { ovrAllBalAmtread = 0; }


                    if (dtrefintFeecat.Count > 0)//ovrAllBalAmtread > 0 &&
                    {
                        string linkName = batchYear + "-" + degcode + "-" + "ReAdmissionFessSettings";
                        string fineLegHedQ = d2.GetFunction(" select Linkvalue from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + usercode + "' and college_code  in (" + collegecode1 + ")");
                        if (fineLegHedQ != "0")
                        {
                            string fineHdrId = fineLegHedQ.Split('~')[2];
                            string fineLgrId = fineLegHedQ.Split('~')[3];
                            string fineHdrName = d2.GetFunction(" select headername from fm_headermaster where headerpk=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                            string fineLgrName = d2.GetFunction("  select ledgername from fm_ledgermaster where ledgerpk=" + fineLgrId + " and HeaderFK=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                            foreach (KeyValuePair<string, double> fine in dtrefintFeecat)
                            {
                                string sbfine = string.Empty;
                                string feestr = string.Empty;
                                string finfks = string.Empty;
                                sbfine = Convert.ToString(fine.Key + "$" + fine.Value);
                                readfineamount = fine.Value;
                                DataRow drFine = tbl_Student.NewRow();
                                drFine["Header_ID"] = fineHdrId;
                                drFine["Header_Name"] = fineHdrName;
                                drFine["Fee_Code"] = fineLgrId;
                                drFine["Fee_Type"] = fineLgrName;
                                drFine["ChlTaken"] = "0";
                                drFine["TextVal"] = "FINE" + "-" + feestr;
                                //drFine["TextCode"] = "-1";
                                drFine["TextCode"] = Convert.ToString(sbfine);
                                drFine["Fee_Amount"] = readfineamount;
                                drFine["Deduct"] = "0";
                                drFine["Total"] = readfineamount;
                                drFine["PaidAmt"] = "0";
                                drFine["BalAmt"] = readfineamount;
                                drFine["ToBePaid"] = "0";
                                drFine["Monthly"] = "0";
                                drFine["Scholar"] = "0";
                                drFine["CautionDep"] = "0";
                                //tbl_Student.Rows.Add(drFine);
                                tbl_Student.Rows.InsertAt(drFine, 0);
                            }
                        }
                    }
                    #endregion
                    #endregion
                }
                else//school fine added
                {
                    #region school
                    #region Fine Adjustment
                    double ovrAllBalAmt = 0;
                    try
                    {
                        for (int bal = 0; bal < tbl_Student.Rows.Count; bal++)
                        {
                            string balAmti = Convert.ToString(tbl_Student.Rows[bal]["BalAmt"]).Trim();
                            if (balAmti != "")
                            {
                                ovrAllBalAmt += Convert.ToDouble(balAmti);
                            }
                        }
                    }
                    catch { ovrAllBalAmt = 0; }

                    if (ovrAllBalAmt > 0)
                    {
                        string linkName = batchYear + "-" + degcode + "-" + "FineLedgerValue";
                        string fineLegHedQ = d2.GetFunction(" select Linkvalue from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + usercode + "' and college_code  in (" + collegecode1 + ")");
                        if (fineLegHedQ != "0" && dtfintFeecat.Count > 0)
                        {
                            string fineHdrId = fineLegHedQ.Split('~')[2];
                            string fineLgrId = fineLegHedQ.Split('~')[3];
                            string fineHdrName = d2.GetFunction(" select headername from fm_headermaster where headerpk=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                            string fineLgrName = d2.GetFunction("  select ledgername from fm_ledgermaster where ledgerpk=" + fineLgrId + " and HeaderFK=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                            fineAmount = 0;
                            foreach (KeyValuePair<string, double> fine in dtfintFeecat)
                            {
                                string sbfine = string.Empty;
                                string feestr = string.Empty;
                                string finfks = string.Empty;
                                sbfine = Convert.ToString(fine.Key + "$" + fine.Value);
                                fineAmount = fine.Value;
                                if (dtfeecat.ContainsKey(fine.Key))
                                    feestr = Convert.ToString(dtfeecat[fine.Key]);
                                if (dtfinfk.ContainsKey(fine.Key))
                                    finfks = Convert.ToString(dtfinfk[fine.Key]);
                                string finyears = d2.GetFunction("select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where finyearpk='" + finfks + "'");
                                //}
                                //if (sbfine.Length > 0)
                                //    sbfine.Remove(sbfine.Length - 1, 1);

                                //DataRow drFine = tbl_Student.NewRow();
                                //drFine["Header_ID"] = fineHdrId;
                                //drFine["Header_Name"] = fineHdrName;
                                //drFine["Fee_Code"] = fineLgrId;
                                //drFine["Fee_Type"] = fineLgrName;
                                //drFine["ChlTaken"] = "0";
                                //drFine["TextVal"] = "FINE" + "-" + feestr;
                                //drFine["TextCode"] = Convert.ToString(sbfine);
                                //drFine["Fee_Amount"] = fineAmount;
                                //drFine["Deduct"] = "0";
                                //drFine["Total"] = fineAmount;
                                //drFine["PaidAmt"] = "0";
                                //drFine["BalAmt"] = fineAmount;
                                //drFine["ToBePaid"] = "0";
                                //drFine["Monthly"] = "0";
                                //drFine["Scholar"] = "0";
                                //drFine["CautionDep"] = "0";
                                ////tbl_Student.Rows.Add(drFine);
                                //drFine["finyearfk"] = finfks;
                                //drFine["finyear"] = finyears;
                                //tbl_Student.Rows.InsertAt(drFine, 0);

                                DataRow drFine = tbl_Student.NewRow();
                                drFine["Header_ID"] = fineHdrId;
                                drFine["Header_Name"] = fineHdrName;
                                drFine["Fee_Code"] = fineLgrId;
                                drFine["Fee_Type"] = fineLgrName + "(" + finyears + ")";
                                drFine["ChlTaken"] = "0";
                                // drFine["TextVal"] = "FINE";
                                drFine["TextVal"] = "FINE" + "-" + feestr;
                                //  drFine["TextCode"] = "-1";
                                drFine["TextCode"] = Convert.ToString(sbfine);
                                drFine["Fee_Amount"] = fineAmount;
                                drFine["Deduct"] = "0";
                                drFine["Total"] = fineAmount;
                                drFine["PaidAmt"] = "0";
                                drFine["BalAmt"] = fineAmount;
                                drFine["ToBePaid"] = "0";
                                drFine["Monthly"] = "0";
                                drFine["Scholar"] = "0";
                                drFine["CautionDep"] = "0";
                                //tbl_Student.Rows.Add(drFine);
                                if (!string.IsNullOrEmpty(finfks))
                                    drFine["finyearfk"] = finfks;
                                else
                                    drFine["finyearfk"] = "&";
                                tbl_Student.Rows.InsertAt(drFine, 0);
                            }
                        }
                    }
                    #endregion
                    //Re-Admission fees settings
                    #region Fine Adjustment
                    double ovrAllBalAmtread = 0;
                    try
                    {
                        for (int bal = 0; bal < tbl_Student.Rows.Count; bal++)
                        {
                            string balAmti = Convert.ToString(tbl_Student.Rows[bal]["BalAmt"]).Trim();
                            if (balAmti != "")
                            {
                                ovrAllBalAmtread += Convert.ToDouble(balAmti);
                            }
                        }
                    }
                    catch { ovrAllBalAmtread = 0; }

                    if (ovrAllBalAmtread > 0)
                    {
                        string linkName = batchYear + "-" + degcode + "-" + "ReAdmissionFessSettings";
                        string fineLegHedQ = d2.GetFunction(" select Linkvalue from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + usercode + "' and college_code  in (" + collegecode1 + ")");
                        if (fineLegHedQ != "0" && dtrefintFeecat.Count > 0)
                        {
                            string fineHdrId = fineLegHedQ.Split('~')[2];
                            string fineLgrId = fineLegHedQ.Split('~')[3];
                            string fineHdrName = d2.GetFunction(" select headername from fm_headermaster where headerpk=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                            string fineLgrName = d2.GetFunction("  select ledgername from fm_ledgermaster where ledgerpk=" + fineLgrId + " and HeaderFK=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                            foreach (KeyValuePair<string, double> fine in dtrefintFeecat)
                            {
                                string sbfine = string.Empty;
                                string feestr = string.Empty;
                                string finfks = string.Empty;
                                sbfine = Convert.ToString(fine.Key + "$" + fine.Value);
                                readfineamount = fine.Value;
                                //if (dtrefintFeecat.ContainsKey(fine.Key))
                                //    feestr = Convert.ToString(dtrefintFeecat[fine.Key]);
                                if (dtfeecat.ContainsKey(fine.Key))
                                    feestr = Convert.ToString(dtfeecat[fine.Key]);
                                if (dtfinfkRe.ContainsKey(fine.Key))
                                    finfks = Convert.ToString(dtfinfkRe[fine.Key]);
                                string finyears = d2.GetFunction("select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where finyearpk='" + finfks + "'");
                                //}
                                //if (sbfine.Length > 0)
                                //    sbfine.Remove(sbfine.Length - 1, 1);
                                //DataRow drFine = tbl_Student.NewRow();
                                //drFine["Header_ID"] = fineHdrId;
                                //drFine["Header_Name"] = fineHdrName;
                                //drFine["Fee_Code"] = fineLgrId;
                                //drFine["Fee_Type"] = fineLgrName;
                                //drFine["ChlTaken"] = "0";
                                //drFine["TextVal"] = "Re" + "-" + feestr;
                                //drFine["TextCode"] = Convert.ToString(sbfine);
                                //drFine["Fee_Amount"] = readfineamount;
                                //drFine["Deduct"] = "0";
                                //drFine["Total"] = readfineamount;
                                //drFine["PaidAmt"] = "0";
                                //drFine["BalAmt"] = readfineamount;
                                //drFine["ToBePaid"] = "0";
                                //drFine["Monthly"] = "0";
                                //drFine["Scholar"] = "0";
                                //drFine["CautionDep"] = "0";
                                ////tbl_Student.Rows.Add(drFine);
                                //drFine["finyearfk"] = finfks;
                                //drFine["finyear"] = finyears;
                                //tbl_Student.Rows.InsertAt(drFine, 0);

                                DataRow drFine = tbl_Student.NewRow();
                                drFine["Header_ID"] = fineHdrId;
                                drFine["Header_Name"] = fineHdrName;
                                drFine["Fee_Code"] = fineLgrId;
                                drFine["Fee_Type"] = fineLgrName + "(" + finyears + ")";
                                drFine["ChlTaken"] = "0";
                                // drFine["TextVal"] = "FINE";
                                drFine["TextVal"] = "FINE" + "-" + feestr;
                                //  drFine["TextCode"] = "-1";
                                drFine["TextCode"] = Convert.ToString(sbfine);
                                drFine["Fee_Amount"] = readfineamount;
                                drFine["Deduct"] = "0";
                                drFine["Total"] = readfineamount;
                                drFine["PaidAmt"] = "0";
                                drFine["BalAmt"] = readfineamount;
                                drFine["ToBePaid"] = "0";
                                drFine["Monthly"] = "0";
                                drFine["Scholar"] = "0";
                                drFine["CautionDep"] = "0";
                                //tbl_Student.Rows.Add(drFine);
                                if (!string.IsNullOrEmpty(finfks))
                                    drFine["finyearfk"] = finfks;
                                else
                                    drFine["finyearfk"] = "&";
                                tbl_Student.Rows.InsertAt(drFine, 0);
                            }
                        }
                    }
                    #endregion
                    #endregion
                }

                if (tbl_Student.Rows.Count > 0 && txt_rollno.Text.Trim() != "")
                {
                    txt_chltakn.Text = d2.GetFunction(chlnTakenQ);
                    txt_chltaken.Text = Convert.ToString(chltakamount);
                    if (rb_Challan.Checked == true)//added 17.05.2018
                    {
                        txt_chltakn.Text = d2.GetFunction(chlnTakenQ);
                        txt_chltaken.Text = Convert.ToString(Amountcheck);
                    }
                    getDemandAmt(appnoNew, degcode, batchYear, fineFeesType);
                    grid_Details.DataSource = tbl_Student;
                    grid_Details.DataBind();
                    grid_Details.Visible = true;
                    getStudStatus(appnoNew);
                    if (rdo_receipt.Checked)
                    {
                        btn_print.Visible = false;
                    }
                    else
                    {
                        if (rdo_challan.Checked && (rdo_sngle.Checked || (rdo_multi.Checked && txt_totnoofstudents.Text != "")))
                        {
                            btn_print.Visible = true;
                        }
                        else
                        {
                            btn_print.Visible = false;
                        }
                    }
                }
                else
                {
                    txt_GvtTot.Text = "0.00";
                    txt_ExcAmt.Text = "0.00";
                    txt_CautionAmt.Text = "0.00";
                    grid_Details.DataSource = null;
                    grid_Details.DataBind();
                    grid_Details.Visible = false;
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Add Fees";
                    btn_print.Visible = false;
                }
            }
            else
            {
                txt_GvtTot.Text = "0.00";
                txt_ExcAmt.Text = "0.00";
                txt_CautionAmt.Text = "0.00";
                try
                {
                    grid_Details.DataSource = null;
                    grid_Details.DataBind();
                    grid_Details.Visible = false;
                }
                catch { }
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Add Fees"; ;
                btn_print.Visible = false;
            }
            Session["appNo"] = appnoNew;

            //Added by saranya 
            if (!string.IsNullOrEmpty(Txt_amt.Text) && Txt_amt.Text.Trim() != "0")
            {
            }
            else
            {
                Txt_amt.Text = "";
            }
        }
        catch (Exception ex)
        {
            //d2.sendErrorMail(ex, collegecode1, "ChallanReceipt");
            txt_GvtTot.Text = "0.00";
            txt_ExcAmt.Text = "0.00";
            txt_CautionAmt.Text = "0.00";
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            grid_Details.Visible = false;
            imgAlert.Visible = true;
            //this.Form.DefaultButton = "btn_alertclose";
            lbl_alert.Text = "No Records Found";
            btn_print.Visible = false;
            Session["appNo"] = "";
        }
        if (rdo_challan.Checked && rdo_multi.Checked)
        {
            txt_GvtTot.Text = "0.00";
            txt_ExcAmt.Text = "0.00";
            txt_CautionAmt.Text = "0.00";
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            grid_Details.Visible = false;
        }
    }
    protected void getStudStatus(string appNo)
    {
        lblStudStatus.Text = string.Empty;
        string selQ = "select distinct case when(cc='1' and ProlongAbsent='0')  then 'Completed' when (delflag='1' and ProlongAbsent=0) then 'DisContinue' when exam_flag='Debar' then 'Debar'  when(cc=0 and delflag=0 and exam_flag<>'Debar') then 'Active'  when(ProlongAbsent=1 and delflag='1') then 'Prolong Absent' end status  from registration where app_no='" + appNo + "'";
        string status = d2.GetFunction(selQ);
        status = status == "0" ? "" : status;
        lblStudStatus.Text = status;
        lblStudStatus.Visible = true;

    }

    public string retQuantity(string appNo, string ledgerId, string memtype, string feecat)
    {
        string Qty = string.Empty;
        string Q = "select sum (isnull(Quantity,0)-isnull(IssuedQUantity,0)) from Indivitual_student_ItemIssue where app_no='" + appNo + "' and ledgerfk='" + ledgerId + "' and memtype='" + memtype + "' and feecategory='" + feecat + "'";
        Qty = d2.GetFunction(Q).Trim();
        Qty = string.IsNullOrEmpty(Qty) ? "0" : Qty;
        Qty = Qty == "0" ? string.Empty : " - Quantity (" + Qty + ")";
        return Qty;
    }
    protected void rdo_receipt_CheckedChanged(object sender, EventArgs e)
    {
        //if (checkSchoolSetting() == 0)
        //{
        //    if (Application["pageName"] != null)
        //    {
        //        Response.Redirect("NewChallanReceipt.aspx");
        //    }
        //}
        //else
        //{
        //    Application["pageName"] = string.Empty;
        //}
        balRow.Visible = true;
        lbltxtamt.Visible = true;
        Txt_amt.Visible = true;
        chk_rcptMulmode.Enabled = true;
        rcptsngle.Visible = true;
        divMulReceipt.Visible = false;
        div_rcpt.Visible = true;
        chk_rcptMulmode.Checked = false;
        chl_MulRcpt.Checked = false;
        txt_totamt.Text = "";
        txt_paidamt.Text = "";
        txt_balamt.Text = "";
        txt_chltaken.Text = "0.00";
        div_formultich.Visible = true;
        checCashDD.Visible = true;

        rb_cash.Visible = true;
        rb_cheque.Visible = true;
        rb_dd.Visible = true;
        rb_card.Visible = true;
        rb_NEFT.Visible = true;
        rb_Challan.Visible = true;//added by abarna 7.05.2018
        div_multich.Visible = false;
        // div_singlech.Visible = false;
        div_challan.Visible = false;
        div_ch1.Visible = true;
        //visible COllege ROw
        btnGridPop.Visible = true;
        btnAddFee.Visible = true;
        btn_History.Visible = true;
        btnExc.Visible = true;
        lbl_remark.Visible = true;
        txt_remark.Visible = true;
        cb_exfees.Visible = true;
        cb_CautionDep.Visible = true;
        //txt_exfees.Visible = true;
        cb_govt.Visible = true;
        clgbank.Style.Add("width", "980px");
        ddl_collegebank.Visible = false;
        lbl_cbname.Visible = false;

        bank();
        cardType();
        accidRecpt = string.Empty;
        lastRecptNo = string.Empty;
        txt_rcptno.Text = generateReceiptNo();
        grid_Details.Visible = false;
        btn_print.Visible = false;
        //loadGridStudent();
        bindGrid();
        txt_return.Text = "";
        txt_dept.Text = "";
        txt_SeatType.Text = "";
        txt_FatherName.Text = "";
        txt_name.Text = "";
        txt_rollno.Text = "";
        Txt_amt.Text = "";
        imgAlert.Visible = false;
        img_stud.ImageUrl = "";
        img_stud.Visible = false;
        btn_print.Visible = false;
        btn_save.Visible = true;
        txtDept_staff.Text = "";
        txtname_staff.Text = "";

        rcptsngle.Visible = false;
        rcptSngleStaff.Visible = false;
        rcptSngleVendor.Visible = false;
        rcptSngleOthers.Visible = false;
        if (rbl_rollnoNew.SelectedIndex == 0)
        {
            rcptsngle.Visible = true;
        }
        else if (rbl_rollnoNew.SelectedIndex == 1)
        {
            rcptSngleStaff.Visible = true;
        }
        else if (rbl_rollnoNew.SelectedIndex == 2)
        {
            rcptSngleVendor.Visible = true;
        }
        else
        {
            rcptSngleOthers.Visible = true;
        }
        getEditableReceipt();
        fldfnlyr.Visible = false;
        txttotbalAmt.Visible = false;
        lblDemand.Visible = false;
    }
    protected void rdo_challan_CheckedChanged(object sender, EventArgs e)
    {

        txt_ExcAmt.Visible = false;
        txt_CautionAmt.Visible = false;
        txt_GvtTot.Visible = false;
        balRow.Visible = true;
        lbltxtamt.Visible = true;
        Txt_amt.Visible = true;
        rcptsngle.Visible = true;
        divMulReceipt.Visible = false;
        div_rcpt.Visible = false;
        chk_rcptMulmode.Checked = false;
        chl_MulRcpt.Checked = false;
        txt_totnoofstudents.Text = "";
        txt_totamt.Text = "";
        txt_paidamt.Text = "";
        txt_balamt.Text = "";
        txt_chltaken.Text = "0.00";
        Txt_amt.Text = "";
        txt_rollno.Text = "";
        div_formultich.Visible = true;
        // checCashDD.Visible = false;
        rb_cash.Visible = false;
        rb_cheque.Visible = false;
        rb_dd.Visible = false;
        rb_card.Visible = false;
        rb_NEFT.Visible = false;
        rb_Challan.Visible = false;//added by abarna
        //div_singlech.Visible = true;
        div_multich.Visible = false;
        rdo_sngle.Checked = true;
        rdo_multi.Checked = false;
        div_challan.Visible = true;
        div_ch1.Visible = false;
        //invisible COllege ROw
        btnGridPop.Visible = false;
        btnAddFee.Visible = false;
        btn_History.Visible = false;
        btnExc.Visible = false;
        lbl_remark.Visible = false;
        txt_remark.Visible = false;
        cb_exfees.Visible = false;
        cb_CautionDep.Visible = false;
        //txt_exfees.Visible = false;
        bool scholarshipChallan = true;
        if (scholarshipChallan)
        {
            cb_govt.Visible = true;
        }
        else
        {
            cb_govt.Visible = false;
        }

        clgbank.Style.Add("width", "400px");
        LoadYearSemester();
        ddl_collegebank.Visible = true;
        lbl_cbname.Visible = true;

        bank();
        cardType();
        accidRecpt = string.Empty;
        lastRecptNo = string.Empty;
        //txt_rcptno.Text = generateReceiptNo();
        txt_rcptno.Text = generateChallanNo();
        grid_Details.Visible = false;
        btn_print.Visible = false;
        //txt_rollno_Changed(sender, e);
        bindGrid();
        txt_return.Text = "";
        imgAlert.Visible = false;
        img_stud.ImageUrl = "";
        txt_dept.Text = "";
        txt_SeatType.Text = "";
        txt_FatherName.Text = "";
        txt_name.Text = "";
        img_stud.Visible = false;
        //btn_print.Visible = true;
        btn_save.Visible = false;
        imgAlert.Visible = false;
        txtDept_staff.Text = "";
        txtname_staff.Text = "";

        rcptsngle.Visible = false;
        rcptSngleStaff.Visible = false;
        rcptSngleVendor.Visible = false;
        rcptSngleOthers.Visible = false;
        if (rbl_rollnoNew.SelectedIndex == 0)
        {
            rcptsngle.Visible = true;

        }
        else if (rbl_rollnoNew.SelectedIndex == 1)
        {
            rcptSngleStaff.Visible = true;
        }
        else if (rbl_rollnoNew.SelectedIndex == 2)
        {
            rcptSngleVendor.Visible = true;
        }
        else
        {
            rcptSngleOthers.Visible = true;
        }
        txttemprcpt.Visible = false;
        fldfnlyr.Visible = false;
        fldfnlyr.Visible = false;
        if (checkSchoolSetting() == 0)
        {
            loadfinanceyear();
            fldfnlyr.Visible = true;
        }
        txttotbalAmt.Visible = true;
        lblDemand.Visible = true;
    }
    protected void rdo_sngle_CheckedChanged(object sender, EventArgs e)
    {
        div_rcpt.Visible = false;
        chk_rcptMulmode.Checked = false;
        chl_MulRcpt.Checked = false;
        txt_totamt.Text = "";
        txt_paidamt.Text = "";
        txt_balamt.Text = "";
        txt_chltaken.Text = "0.00";
        div_formultich.Visible = true;
        //  div_singlech.Visible = true;
        div_multich.Visible = false;
        grid_Details.Visible = false;
        txt_rcptno.Text = generateChallanNo();
        btn_print.Visible = false;
        img_stud.ImageUrl = "";
        txt_rollno.Text = "";
        //txt_rollno_Changed(sender, e);
        img_stud.Visible = false;
        imgAlert.Visible = false;
        txt_dept.Text = "";
        txt_SeatType.Text = "";
        txt_FatherName.Text = "";
        txt_name.Text = "";
        LoadYearSemester();
    }
    protected void rdo_multi_CheckedChanged(object sender, EventArgs e)
    {
        div_rcpt.Visible = false;
        chk_rcptMulmode.Checked = false;
        chl_MulRcpt.Checked = false;
        txt_totnoofstudents.Text = "";
        txt_totamt.Text = "";
        txt_paidamt.Text = "";
        txt_balamt.Text = "";
        txt_chltaken.Text = "0.00";
        div_formultich.Visible = false;
        //div_singlech.Visible = false;
        div_multich.Visible = true;
        grid_Details.Visible = false;
        btn_print.Visible = false;
        txt_rollno.Text = "";
        img_stud.ImageUrl = "";
        img_stud.Visible = false;
        txt_rcptno.Text = generateChallanNo();
        //txt_rollno_Changed(sender, e);
        imgAlert.Visible = false;
        txt_dept.Text = "";
        txt_SeatType.Text = "";
        txt_FatherName.Text = "";
        txt_name.Text = "";
        LoadYearSemester();
    }
    protected void chl_MulRcpt_OnCheckedChanged(object sender, EventArgs e)
    {
        txt_tostudentsrcpt.Text = "";
        txtMultTotal.Text = "0.00";
        if (chl_MulRcpt.Checked)
        {
            rcptsngle.Visible = false;
            div_rcpt.Visible = true;
            chk_rcptMulmode.Checked = false;
            chk_rcptMulmode.Enabled = false;

            txt_totamt.Text = "";
            txt_paidamt.Text = "";
            txt_balamt.Text = "";
            txt_chltaken.Text = "0.00";

            divMulReceipt.Visible = true;
            grid_Details.Visible = false;

            txt_rollno.Text = "";
            img_stud.ImageUrl = "";
            img_stud.Visible = false;
            txt_rcptno.Text = generateReceiptNo();

            imgAlert.Visible = false;
            txt_dept.Text = "";
            txt_SeatType.Text = "";
            txt_FatherName.Text = "";
            txt_name.Text = "";
            LoadYearSemester();
            balRow.Visible = false;
            lbltxtamt.Visible = false;
            Txt_amt.Visible = false;
            cb_selcthd.Checked = true;
            cb_selcthd.Enabled = false;

            btnGridPop.Enabled = false;
            btnAddFee.Enabled = false;
            btn_History.Enabled = false;

        }
        else
        {
            cb_selcthd.Checked = true;
            cb_selcthd.Enabled = true;
            rcptsngle.Visible = true;
            divMulReceipt.Visible = false;
            chk_rcptMulmode.Enabled = true;
            rdo_receipt_CheckedChanged(sender, e);
            btnGridPop.Enabled = true;
            btnAddFee.Enabled = true;
            btn_History.Enabled = true;
        }
        //Select Headers
        try
        {

            // cbl_grpheader.Items.Clear();
            if (cb_selcthd.Checked)
            {
                div_fs.Visible = true;
                div_grphdr.Visible = true;
                //rbl_headerselect.SelectedIndex = 0;
                //cb_selectHeadAll.Visible = true;
                //cb_selectHeadAll.Checked = true;
                //headerSlecetionChanged();

            }
            else
            {
                //cb_selectHeadAll.Visible = false;
                //cb_selectHeadAll.Checked = false;
                div_grphdr.Visible = false;
                div_fs.Visible = false;
            }


            imgAlert.Visible = false;
        }
        catch (Exception ex) { }
    }
    protected void cb_selcthd_CheckedChanged(object sender, EventArgs e)
    {
        loadOnOverallCheck();
    }
    private void loadOnOverallCheck()
    {
        try
        {
            Txt_amt.Text = "0.00";
            cbl_grpheader.Items.Clear();
            if (cb_selcthd.Checked)
            {
                div_fs.Visible = true;
                div_grphdr.Visible = true;
                //rbl_headerselect.SelectedIndex = 0;
                cb_selectHeadAll.Visible = true;
                //cb_selectHeadAll.Checked = true;
                headerSlecetionChanged();

            }
            else
            {
                cb_selectHeadAll.Visible = false;
                cb_selectHeadAll.Checked = false;
                div_grphdr.Visible = false;
                div_fs.Visible = false;
            }
            if (rbl_rollnoNew.SelectedIndex == 0)
            {
                loadGridStudent();
                lookupAmount();
            }
            else if (rbl_rollnoNew.SelectedIndex == 1)
            {
                loadGridStaff();
            }
            else if (rbl_rollnoNew.SelectedIndex == 2)
            {
                loadGridVendor();
            }
            else if (rbl_rollnoNew.SelectedIndex == 3)
            {
                loadGridOthers();
            }


            if (rdo_challan.Checked && rdo_multi.Checked && txt_totnoofstudents.Text != "")
            {
                btn_print.Visible = true;
            }
            imgAlert.Visible = false;
            //else
            //{
            //txt_totnoofstudents.Text = "";
            //}
        }
        catch (Exception ex) { }
    }
    private void selectLedgers()
    {
        #region Select All
        try
        {
            double tottobepaidval = 0.00;
            double totbalamt = 0.00;
            double totamtOv = 0;
            double paiOv = 0;
            double totAmtToPay = 0;

            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {

                CheckBox cbl = (CheckBox)grid_Details.Rows[i].Cells[1].FindControl("cb_selectLedger");
                txt_totamt.Text = "0.00";
                txt_paidamt.Text = "0.00";
                txt_balamt.Text = "0.00";
                //txt_examt.Text = "0.00";
                Txt_amt.Text = "0.00";
                if (chkGridSelectAll.Checked)
                {
                    cbl.Checked = true;
                }
                else
                {
                    cbl.Checked = false;
                }
                TextBox txt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_tobepaid_amt");
                TextBox txtbal = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_bal_amt");
                TextBox txttotal = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_tot_amt");
                TextBox txtpaid = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_paid_amt");
                TextBox txtexgridamt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_gridexcess_amt");
                TextBox txtgridschlamt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_scholar_amt");
                TextBox txtgridCautamt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_deposit_amt");
                //  txt.Text = "0.00";
                double tobePaid = 0;
                double.TryParse(Convert.ToString(txt.Text), out tobePaid);
                totamtOv += Convert.ToDouble(txttotal.Text);
                paiOv += Convert.ToDouble(txtpaid.Text);

                double curExcess = 0.00;
                double scholamt = 0.00;
                double curCautAmt = 0.00;
                if (rdo_challan.Checked == false)
                {
                    if (cb_exfees.Checked == true)
                    {
                        double.TryParse(txtexgridamt.Text.Trim(), out curExcess);
                    }
                    if (cb_govt.Checked == true)
                    {
                        double.TryParse(txtgridschlamt.Text.Trim(), out scholamt);
                    }
                    if (cb_CautionDep.Checked == true)
                    {
                        double.TryParse(txtgridCautamt.Text.Trim(), out curCautAmt);
                    }
                }

                if (txt != null && txtbal != null && txttotal != null && txtpaid != null)
                {

                    if (cbl.Checked == false)
                    {
                        // txt.Text = "0.00";
                        txt.Text = "";
                    }
                    else
                    {
                        //if (txt.Text == "0" || txt.Text == "0.00" || txt.Text == "")
                        //{
                        //    txt.Text = (Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(txtpaid.Text) + curExcess + scholamt)).ToString();
                        //}
                    }

                    if ((tobePaid <= (Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt))))
                    {

                        tottobepaidval = tottobepaidval + tobePaid;
                        totbalamt += (Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt)) - tobePaid;
                        Txt_amt.Text = tottobepaidval.ToString();
                        txt_balamt.Text = totbalamt.ToString();
                        txtbal.Text = ((Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt)) - tobePaid).ToString();
                    }
                    else
                    {

                        totbalamt += (Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt));
                        Txt_amt.Text = tottobepaidval.ToString();
                        txt_balamt.Text = totbalamt.ToString();
                        //                        txt.Text = "0.00";
                        txt.Text = "";
                    }
                }
                if (rdo_challan.Checked && cbl.Checked)
                {
                    totAmtToPay += tobePaid + curExcess + scholamt + curCautAmt;
                }
                else if (rdo_receipt.Checked)
                {
                    totAmtToPay += tobePaid + curExcess + scholamt + curCautAmt;
                }

                if (!rdo_challan.Checked)
                {
                    if ((tobePaid + curExcess + scholamt + curCautAmt) > 0)
                    {
                        cbl.Checked = true;
                    }
                    else
                    {
                        cbl.Checked = false;
                    }
                }
            }
            txt_totamt.Text = totamtOv.ToString();
            txt_paidamt.Text = paiOv.ToString();
            lbl_CurPay.Text = "Total Amount To Be Paid : Rs." + totAmtToPay + " /-";
        }
        catch (Exception ex) { }
        #endregion
    }
    private void selectLedgersChallan()
    {
        #region Select All
        try
        {
            double tottobepaidval = 0.00;
            double totbalamt = 0.00;
            double totamtOv = 0;
            double paiOv = 0;
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {

                CheckBox cbl = (CheckBox)grid_Details.Rows[i].Cells[1].FindControl("cb_selectLedger");
                txt_totamt.Text = "0.00";
                txt_paidamt.Text = "0.00";
                txt_balamt.Text = "0.00";
                txt_examt.Text = "0.00";
                Txt_amt.Text = "0.00";
                if (chkGridSelectAll.Checked)
                {
                    cbl.Checked = true;
                }
                else
                {
                    cbl.Checked = false;
                }
                TextBox txt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_tobepaid_amt");
                TextBox txtbal = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_bal_amt");
                TextBox txttotal = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_tot_amt");
                TextBox txtpaid = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_paid_amt");
                TextBox txtexgridamt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_gridexcess_amt");
                TextBox txtgridschlamt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_scholar_amt");
                TextBox txtgridCautamt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_deposit_amt");
                Label lblchltkn = (Label)grid_Details.Rows[i].Cells[1].FindControl("lbl_chltkn");
                // txt.Text = "0.00";
                double tobePaid = 0;
                double.TryParse(Convert.ToString(txt.Text), out tobePaid);
                totamtOv += Convert.ToDouble(txttotal.Text);
                paiOv += Convert.ToDouble(txtpaid.Text);

                double curExcess = 0.00;
                double scholamt = 0.00;
                double curCautAmt = 0.00;
                if (rdo_challan.Checked == false)
                {
                    if (cb_exfees.Checked == true)
                    {
                        double.TryParse(txtexgridamt.Text.Trim(), out curExcess);
                    }
                    if (cb_govt.Checked == true)
                    {
                        double.TryParse(txtgridschlamt.Text.Trim(), out scholamt);
                    }
                    if (cb_CautionDep.Checked == true)
                    {
                        double.TryParse(txtgridCautamt.Text.Trim(), out curCautAmt);
                    }
                }
                else if (cb_govt.Visible)
                {
                    if (cb_govt.Checked == true)
                    {
                        double.TryParse(txtgridschlamt.Text.Trim(), out scholamt);
                    }
                }

                if (txt != null && txtbal != null && txttotal != null && txtpaid != null)
                {

                    if (cbl.Checked == false)
                    {
                        //txt.Text = "0.00";
                        txt.Text = "";
                    }
                    else
                    {
                        if (txt.Text == "0" || txt.Text == "0.00" || txt.Text == "")
                        {
                            if ((Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(lblchltkn.Text.Trim()) + Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt)) > 0)
                            {
                                txt.Text = (Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(lblchltkn.Text.Trim()) + Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt)).ToString();
                            }
                        }
                    }

                    if ((tobePaid <= (Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(lblchltkn.Text.Trim()) + Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt))))
                    {

                        tottobepaidval = tottobepaidval + tobePaid;
                        totbalamt += (Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(lblchltkn.Text.Trim()) + Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt)) - tobePaid;
                        Txt_amt.Text = tottobepaidval.ToString();
                        txt_balamt.Text = totbalamt.ToString();
                        txtbal.Text = ((Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(lblchltkn.Text.Trim()) + Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt)) - tobePaid).ToString();
                    }
                    else
                    {
                        if ((Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(lblchltkn.Text.Trim()) + Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt)) > 0)
                        {
                            totbalamt += (Convert.ToDouble(txttotal.Text) - (Convert.ToDouble(lblchltkn.Text.Trim()) + Convert.ToDouble(txtpaid.Text) + curExcess + scholamt + curCautAmt));
                        }
                        Txt_amt.Text = tottobepaidval.ToString();
                        txt_balamt.Text = totbalamt.ToString();
                        //txt.Text = "0.00";
                        txt.Text = "";
                    }
                }
            }
            txt_totamt.Text = totamtOv.ToString();
            txt_paidamt.Text = paiOv.ToString();
        }
        catch (Exception ex) { }
        #endregion
    }
    //Group Header, Header, Ledger
    protected void cb_selectHeadAll_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            Txt_amt.Text = "0.00";
            if (rbl_rollnoNew.SelectedIndex == 0)
            {
                loadGridStudent();
            }
            else if (rbl_rollnoNew.SelectedIndex == 1)
            {
                loadGridStaff();
            }
            else if (rbl_rollnoNew.SelectedIndex == 2)
            {
                loadGridVendor();
            }
            else if (rbl_rollnoNew.SelectedIndex == 3)
            {
                loadGridOthers();
            }
            imgAlert.Visible = false;

            chkGridSelectAll.Checked = true;
            int cnt = 0;
            if (cb_selectHeadAll.Checked)
            {
                cnt = cbl_grpheader.Items.Count;
            }
            string headerstr = "Group Header";
            if (rbl_headerselect.SelectedIndex == 1)
            {
                headerstr = "Header";
            }
            else if (rbl_headerselect.SelectedIndex == 2)
            {
                headerstr = "Ledger";
            }
            txt_grpheader.Text = headerstr + "(" + cnt + ")";
            // selectLedgers();
            lookupAmount();
        }
        catch (Exception ex) { }
    }
    protected void cbl_grpheader_SelectedIndexChanged(object sender, EventArgs e)
    {
        headersSelected();
    }
    private void headersSelected()
    {
        Txt_amt.Text = "0.00";
        chkGridSelectAll.Checked = true;
        if (rbl_rollnoNew.SelectedIndex == 0)
        {
            loadGridStudent();
        }
        else if (rbl_rollnoNew.SelectedIndex == 1)
        {
            loadGridStaff();
        }
        else if (rbl_rollnoNew.SelectedIndex == 2)
        {
            loadGridVendor();
        }
        else if (rbl_rollnoNew.SelectedIndex == 3)
        {
            loadGridOthers();
        }
        imgAlert.Visible = false;

        int cnt = 0;
        for (int i = 0; i < cbl_grpheader.Items.Count; i++)
        {
            if (cbl_grpheader.Items[i].Selected)
            {
                cnt++;
            }
        }
        if (cnt == cbl_grpheader.Items.Count)
        {
            cb_selectHeadAll.Checked = true;
        }
        else
        {
            cb_selectHeadAll.Checked = false;
        }
        string headerstr = "Group Header";
        if (rbl_headerselect.SelectedIndex == 1)
        {
            headerstr = "Header";
        }
        else if (rbl_headerselect.SelectedIndex == 2)
        {
            headerstr = "Ledger";
        }
        txt_grpheader.Text = headerstr + "(" + cnt + ")";
        lookupAmount();
    }
    protected void txt_grpHdrSrch_TextChanged(object sender, EventArgs e)
    {
        callHeadersSearch();
    }
    private void callHeadersSearch()
    {
        try
        {
            string searchkey = txt_grpHdrSrch.Text.Trim();
            cb_selectHeadAll.Checked = false;
            int cnt = 0;
            for (int key = 0; key < cbl_grpheader.Items.Count; key++)
            {
                if (searchkey == cbl_grpheader.Items[key].Text)
                {
                    cbl_grpheader.Items[key].Selected = true;
                    cnt++;
                }
                else
                {
                    cbl_grpheader.Items[key].Selected = false;
                }
            }
            string headerstr = "Group Header";
            if (rbl_headerselect.SelectedIndex == 1)
            {
                headerstr = "Header";
            }
            else if (rbl_headerselect.SelectedIndex == 2)
            {
                headerstr = "Ledger";
            }
            txt_grpheader.Text = headerstr + "(" + cnt + ")";
            headersSelected();
        }
        catch (Exception ex) { }
    }
    protected void rbl_headerselect_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        headerSlecetionChanged();
    }
    private void headerSlecetionChanged()
    {
        try
        {
            txt_grpHdrSrch.Text = string.Empty;
            Txt_amt.Text = "0.00";
            cb_selectHeadAll.Checked = false;
            cbl_grpheader.Items.Clear();
            DataSet dsHeader = new DataSet();
            string query = "";
            if (rbl_headerselect.SelectedIndex == 0)
            {
                query = " SELECT distinct G.ChlGroupHeader FROM FS_ChlGroupHeaderSettings G,FS_HeaderPrivilage P WHERE G.HeaderFK = P.HeaderFK AND P. UserCode = '" + usercode + "'  AND P.CollegeCode = " + collegecode1 + " ";

                dsHeader = d2.select_method_wo_parameter(query, "Text");
                if (dsHeader.Tables[0].Rows.Count > 0)
                {
                    cbl_grpheader.DataSource = dsHeader;
                    cbl_grpheader.DataTextField = "ChlGroupHeader";
                    cbl_grpheader.DataValueField = "ChlGroupHeader";
                    cbl_grpheader.DataBind();
                    for (int i = 0; i < cbl_grpheader.Items.Count; i++)
                    {
                        cbl_grpheader.Items[i].Selected = true;
                    }
                }
                grpHdrLdr = 0;
            }
            else if (rbl_headerselect.SelectedIndex == 1)
            {
                query = " SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H,FS_HeaderPrivilage P WHERE H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = " + usercode + " AND H.CollegeCode = " + collegecode1 + "  ";

                dsHeader = d2.select_method_wo_parameter(query, "Text");
                if (dsHeader.Tables[0].Rows.Count > 0)
                {
                    cbl_grpheader.DataSource = dsHeader;
                    cbl_grpheader.DataTextField = "HeaderName";
                    cbl_grpheader.DataValueField = "HeaderPK";
                    cbl_grpheader.DataBind();
                    for (int i = 0; i < cbl_grpheader.Items.Count; i++)
                    {
                        cbl_grpheader.Items[i].Selected = true;
                    }
                }
                grpHdrLdr = 1;
            }
            else if (rbl_headerselect.SelectedIndex == 2)
            {
                query = " SELECT  LedgerPK,LedgerName,L.Priority FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode  and l.LedgerMode=0   AND P. UserCode = " + usercode + " AND L.CollegeCode = " + collegecode1 + " order by case when priority is null then 1 else 0 end, priority";

                dsHeader = d2.select_method_wo_parameter(query, "Text");
                if (dsHeader.Tables[0].Rows.Count > 0)
                {
                    cbl_grpheader.DataSource = dsHeader;
                    cbl_grpheader.DataTextField = "LedgerName";
                    cbl_grpheader.DataValueField = "LedgerPK";
                    cbl_grpheader.DataBind();
                    for (int i = 0; i < cbl_grpheader.Items.Count; i++)
                    {
                        cbl_grpheader.Items[i].Selected = true;
                    }
                }
                grpHdrLdr = 2;
            }
            if (cbl_grpheader.Items.Count > 0)
            {
                cb_selectHeadAll.Checked = true;
            }
            if (cbl_grpheader.Items.Count > 10)
            {
                panel_dept.Height = 300;
            }
            else
            {
                panel_dept.Height = 250;
            }
            string headerstr = "Group Header";
            if (rbl_headerselect.SelectedIndex == 1)
            {
                headerstr = "Header";
            }
            else if (rbl_headerselect.SelectedIndex == 2)
            {
                headerstr = "Ledger";
            }
            txt_grpheader.Text = headerstr + "(" + cbl_grpheader.Items.Count + ")";
            loadGridStudent();
            imgAlert.Visible = false;
            if (rdo_challan.Checked && rdo_multi.Checked && txt_totnoofstudents.Text != "")
            {
                btn_print.Visible = true;
            }
            //else
            //{
            // txt_totnoofstudents.Text = "";
            //}
            lookupAmount();
        }
        catch (Exception ex) { }

    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetGrpHeader(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            string query = "";
            WebService ws = new WebService();
            if (grpHdrLdr == 0)
            {
                query = " SELECT distinct G.ChlGroupHeader FROM FS_ChlGroupHeaderSettings G,FS_HeaderPrivilage P WHERE G.HeaderFK = P.HeaderFK AND P. UserCode = '" + usercodestat + "'  AND P.CollegeCode = " + collegecodestat + " and G.ChlGroupHeader like '" + prefixText + "%'";
            }
            else if (grpHdrLdr == 1)
            {
                query = " SELECT distinct HeaderName,HeaderPK FROM FM_HeaderMaster H,FS_HeaderPrivilage P WHERE H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = " + usercodestat + " AND H.CollegeCode = " + collegecodestat + " and HeaderName like '" + prefixText + "%'";
            }
            else if (grpHdrLdr == 2)
            {
                query = " SELECT  LedgerName,LedgerPK,L.Priority FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode  and l.LedgerMode=0   AND P. UserCode = " + usercodestat + " AND L.CollegeCode = " + collegecodestat + " and LedgerName like '" + prefixText + "%' order by case when priority is null then 1 else 0 end, priority";
            }
            name = ws.Getname(query);
            return name;
        }
        catch { return name; }
    }
    public void maintainPaymedeState()
    {
        div_cheque.Attributes.Add("style", "display:none");
        div_NEFT.Attributes.Add("style", "display:none");//added by abarna 29.01.2018

        div_card.Attributes.Add("style", "display:none");
        btnAddFee.Attributes.Add("style", "display:block;float:left");
        btn_History.Attributes.Add("style", "display:block;float:left");
        btnGridPop.Attributes.Add("style", "display:block;float:left");
        if (rb_cash.Checked)
        {
            div_cheque.Attributes.Add("style", "display:none");
            div_card.Attributes.Add("style", "display:none");

            btnGridPop.Attributes.Add("style", "display:block;float:left");
            div_NEFT.Attributes.Add("style", "display:none");//added by abarna 29.01.2018

        }
        else if (rb_cheque.Checked)
        {
            div_cheque.Attributes.Add("style", "display:block");
            lbl_chqno.Attributes.Add("style", "display:block");
            txt_chqno.Attributes.Add("style", "display:block");

            div_card.Attributes.Add("style", "display:none");
            lbl_ddno.Attributes.Add("style", "display:none");
            txt_ddno.Attributes.Add("style", "display:none");
            btnGridPop.Attributes.Add("style", "display:none");
            txt_ddnar.Attributes.Add("style", "display:none");
            div_NEFT.Attributes.Add("style", "display:none");//added by abarna 29.01.2018
            txt_challan.Attributes.Add("style", "display:none");
        }
        else if (rb_dd.Checked)
        {
            div_cheque.Attributes.Add("style", "display:block");
            lbl_ddno.Attributes.Add("style", "display:block");
            txt_ddno.Attributes.Add("style", "display:block");
            txt_ddnar.Attributes.Add("style", "display:block");

            div_card.Attributes.Add("style", "display:none");
            lbl_chqno.Attributes.Add("style", "display:none");
            txt_chqno.Attributes.Add("style", "display:none");
            btnGridPop.Attributes.Add("style", "display:none");
            div_NEFT.Attributes.Add("style", "display:none");

        }
        else if (rb_card.Checked)
        {
            div_cheque.Attributes.Add("style", "display:none");
            btnGridPop.Attributes.Add("style", "display:none");
            div_card.Attributes.Add("style", "display:block");
            div_NEFT.Attributes.Add("style", "display:none");

        }
        else if (rb_NEFT.Checked)//added by abarna 29.01.2018
        {
            div_cheque.Attributes.Add("style", "display:none");
            div_card.Attributes.Add("style", "display:none");
            lbl_ddno.Attributes.Add("style", "display:none");
            txt_ddno.Attributes.Add("style", "display:none");
            btnGridPop.Attributes.Add("style", "display:none");
            txt_ddnar.Attributes.Add("style", "display:none");
            div_NEFT.Attributes.Add("style", "display:block");

        }
        else if (rb_Challan.Checked)
        {
            div_cheque.Attributes.Add("style", "display:block");
            lbl_challan.Attributes.Add("style", "display:block");
            txt_challan.Attributes.Add("style", "display:block");
            div_card.Attributes.Add("style", "display:none");
            lbl_ddno.Attributes.Add("style", "display:none");
            txt_ddno.Attributes.Add("style", "display:none");
            btnGridPop.Attributes.Add("style", "display:none");
            txt_ddnar.Attributes.Add("style", "display:none");
            div_NEFT.Attributes.Add("style", "display:none");
            //added by abarna 07.05.2018
            lbl_chqno.Attributes.Add("style", "display:none");
            txt_chqno.Attributes.Add("style", "display:none");
            // txt_challan.Text = generateChallanNo();
            collegecode1 = ddl_college.SelectedItem.Value;
            // loadGridStudent();

        }
    }
    protected void rb_Challan_CheckedChanged(object sender, EventArgs e)
    {
        //   txt_challan.Text = generateChallanNo();
        maintainPaymedeState();
    }
    protected void rb_cheque_CheckedChanged(object sender, EventArgs e)
    {
        div_cheque.Visible = true;
        //div_cash.Visible = false;
        btnGridPop.Visible = false;
        div_card.Visible = false;

        lbl_chqno.Visible = true;
        lbl_ddno.Visible = false;
        txt_chqno.Visible = true;
        txt_ddno.Visible = false;
        txt_ddnar.Visible = false;
        lookupAmount();
    }
    protected void rb_dd_CheckedChanged(object sender, EventArgs e)
    {
        div_cheque.Visible = true;
        //div_cash.Visible = false;
        btnGridPop.Visible = false;
        div_card.Visible = false;

        lbl_chqno.Visible = false;
        lbl_ddno.Visible = true;
        txt_chqno.Visible = false;
        txt_ddno.Visible = true;
        txt_ddnar.Visible = true;
        lookupAmount();

    }
    protected void rb_cash_CheckedChanged(object sender, EventArgs e)
    {
        bindGrid();
        div_cheque.Visible = false;
        div_card.Visible = false;
        //div_cash.Visible = false;
        btnGridPop.Visible = true;
        lookupAmount();
    }
    protected void rb_card_CheckedChanged(object sender, EventArgs e)
    {
        div_cheque.Visible = false;
        btnGridPop.Visible = false;
        div_card.Visible = true;
        lookupAmount();
    }
    protected void cb_exfees_OnCheckedChanged(object sender, EventArgs e)
    {
        //try
        //{

        //    loadGridStudent();
        //    bindHeaderLedger();
        //    imgAlert.Visible = false;
        //}
        //catch { }
        txt_examt.Text = "0";
    }
    protected void ddl_bkname_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        if (ddl_bkname.Items.Count > 0)
        {
            if (ddl_bkname.SelectedItem.Text.ToUpper() == "OTHERS")
            {
                txt_other.Attributes.Add("style", "display:block");
            }
            else
            {
                txt_other.Attributes.Add("style", "display:none");
            }
        }
    }
    protected void gridCash_OnDataBound(object sender, EventArgs e)
    {
        for (int row = 0; row < grid_Cash.Rows.Count; row++)
        {
            if (row == grid_Cash.Rows.Count - 1)
            {
                (grid_Cash.Rows[row].FindControl("txtRs") as TextBox).Enabled = false;
            }
        }
    }
    protected void cb_sem_CheckedChanged(object sender, EventArgs e)
    {
        string name = Convert.ToString(ViewState["name"]);
        CallCheckBoxChangedEvent(cbl_sem, cb_sem, txt_sem, name);
    }
    protected void cbl_sem_SelectedIndexChanged(object sender, EventArgs e)
    {
        string name = Convert.ToString(ViewState["name"]);
        CallCheckBoxListChangedEvent(cbl_sem, cb_sem, txt_sem, name);
    }
    protected void ddl_sem_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        loadGridStudent();
    }
    protected void txt_date1_OnTextChanged(object sender, EventArgs e)
    {
        try
        {
            string dateTime = txt_date1.Text.Split('/')[1] + "/" + txt_date1.Text.Split('/')[0] + "/" + txt_date1.Text.Split('/')[2];
            DateTime dt = DateTime.Now;
            DateTime dt2 = Convert.ToDateTime(dateTime);


            if (dt2 > dt)
            {
                txt_date1.Text = DateTime.Now.ToString("dd/MM/yyyy");

            }
        }
        catch { }
    }
    protected void btn_search_Click(object sender, EventArgs e)
    {
        if (rdo_challan.Checked)
        {
            chkGridSelectAll.Checked = true;
        }
        else
        {
            chkGridSelectAll.Checked = false;
        }
        bindGrid();
        try
        {
            if (rdo_receipt.Checked)
            {
                double partamt = 0;
                if (Txt_amt.Text.Trim() != "")
                {
                    partamt = Convert.ToDouble(Txt_amt.Text.Trim());
                    excessAmt = Convert.ToDouble(Txt_amt.Text.Trim());
                }
                loadGridStudent();
            }
            else
            {
                if (rdo_challan.Checked && rdo_sngle.Checked)
                {
                    loadGridStudent();
                    string chalamt = Convert.ToString(txt_chltaken.Text.Trim());
                    if (chalamt == "")
                    {
                        chalamt = "0";
                    }
                    string bal = Convert.ToString(txt_balamt.Text.Trim());
                    if (bal == "")
                    {
                        bal = "0";
                    }
                    double chamt = Convert.ToDouble(chalamt);
                    double balamt = Convert.ToDouble(bal);

                    if (balamt > chamt)
                    {

                    }
                    else
                    {
                        if (balamt == chamt && balamt != 0)
                        {
                            Txt_amt.Text = "";
                            lbl_alert.Text = "Challan Already Taken";
                            imgAlert.Visible = true;
                            //this.Form.DefaultButton = "btn_alertclose";
                        }
                    }
                }
            }
            if (rdo_receipt.Checked)
            {
                bindHeaderLedger();
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    protected void gridCash_OnRowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            TextBox txtsum = (TextBox)e.Row.Cells[1].FindControl("txtSum");
            txtsum.Attributes.Add("readonly", "readonly");
        }
    }
    protected void grid_Details_OnRowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (cb_exfees.Checked && rdo_receipt.Checked)
        {
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {
                grid_Details.Columns[15].Visible = true;
            }
        }
        else
        {
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {
                grid_Details.Columns[15].Visible = false;
            }
        }
        if (cb_govt.Checked && (rdo_receipt.Checked || cb_govt.Visible))
        {
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {
                grid_Details.Columns[16].Visible = true;
            }
        }
        else
        {
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {
                grid_Details.Columns[16].Visible = false;
            }
        }
        if (cb_CautionDep.Checked && rdo_receipt.Checked)
        {
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {
                grid_Details.Columns[17].Visible = true;
            }
        }
        else
        {
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {
                grid_Details.Columns[17].Visible = false;
            }
        }
        if (rbl_rollnoNew.SelectedIndex == 0)
        {
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {
                grid_Details.Columns[6].Visible = true;
            }
        }
        else
        {
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {
                grid_Details.Columns[6].Visible = false;
            }
        }
        if (!fromScript)
        {
            double totAmtToPay = 0;
            TextBox txt_payamt = (TextBox)e.Row.Cells[1].FindControl("txt_tobepaid_amt");
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                double partamt;
                if (partamt1 == 0 && partamt2 == 0)
                {
                    partamt2 = 1;
                    if (Txt_amt.Text.Trim() != "")
                    {
                        partamt = Convert.ToDouble(Txt_amt.Text.Trim());
                        partamt1 = partamt;
                    }
                    else
                    {
                        partamt = 0;
                    }
                }
                else
                {
                    partamt = partamt1;
                }
                CheckBox cbox_selectLedger = (CheckBox)e.Row.Cells[1].FindControl("cb_selectLedger");

                if (ddl_AmtPerc.SelectedIndex == 0)
                {
                    txt_payamt.Attributes.Remove("readonly");
                    if (rdo_receipt.Checked)
                    {
                        #region For Receipt
                        TextBox txtfee = (TextBox)e.Row.Cells[1].FindControl("txt_fee_amt");
                        TextBox txtpayamt = (TextBox)e.Row.Cells[1].FindControl("txt_tobepaid_amt");
                        double tobepaid = 0;
                        double.TryParse(Convert.ToString(txtpayamt.Text), out tobepaid);
                        TextBox txtbalamt = (TextBox)e.Row.Cells[1].FindControl("txt_bal_amt");
                        TextBox txttotamt = (TextBox)e.Row.Cells[1].FindControl("txt_tot_amt");
                        TextBox txtpaiamt = (TextBox)e.Row.Cells[1].FindControl("txt_paid_amt");
                        TextBox txtdeductamt = (TextBox)e.Row.Cells[1].FindControl("txt_deduct_amt");
                        TextBox txtgridexcessamt = (TextBox)e.Row.Cells[1].FindControl("txt_gridexcess_amt");
                        TextBox txtgridschlamt = (TextBox)e.Row.Cells[1].FindControl("txt_scholar_amt");
                        TextBox txtgridCautamt = (TextBox)e.Row.Cells[1].FindControl("txt_deposit_amt");
                        Label lblchltkn = (Label)e.Row.Cells[1].FindControl("lbl_chltkn");

                        txtbalamt.Attributes.Add("readonly", "readonly");
                        txtpaiamt.Attributes.Add("readonly", "readonly");

                        if (txttotamt.Text.Trim() != "")
                        {
                            tottotamt += Convert.ToDouble(txttotamt.Text.Trim());
                        }
                        else
                        {
                            tottotamt += 0;
                        }

                        if (txtpaiamt.Text.Trim() != "")
                        {
                            paitotamt += Convert.ToDouble(txtpaiamt.Text.Trim());
                        }
                        else
                        {
                            paitotamt += 0;
                        }

                        double curExcess = 0;
                        if (cb_exfees.Checked)
                        {
                            double.TryParse(txtgridexcessamt.Text.Trim(), out curExcess);
                        }
                        double scholAmt = 0;
                        if (cb_govt.Checked)
                        {
                            double.TryParse(txtgridschlamt.Text.Trim(), out scholAmt);
                        }
                        double curCautAmt = 0;
                        if (cb_CautionDep.Checked)
                        {
                            double.TryParse(txtgridCautamt.Text.Trim(), out curCautAmt);
                        }

                        double txtfeeamt = 0;
                        double curPay = 0;
                        if (txttotamt.Text.Trim() != "")
                        {
                            txtfeeamt = Convert.ToDouble(txttotamt.Text.Trim());
                            if ((txtfeeamt - ((Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt))) != 0)
                            {
                                if (partamt <= (txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt)))
                                {
                                    txtbalamt.Text = ((txtfeeamt - ((Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt))) - partamt).ToString();
                                    if (partamt != 0)
                                    {
                                        txtpayamt.Text = (partamt).ToString();
                                        curPay = partamt;
                                    }
                                    else
                                    {
                                        txtpayamt.Text = "";
                                        curPay = 0;
                                    }
                                    baltotalamt += txtfeeamt - ((Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt)) - partamt;
                                    tobepaidtotalamt += partamt;
                                    partamt = 0;
                                    partamt1 = partamt;
                                    txt_examt.Text = "0";
                                }
                                else
                                {
                                    baltotalamt += 0;
                                    curPay = txtfeeamt - ((Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt));
                                    txt_examt.Text = (partamt - curPay).ToString();
                                    txtpayamt.Text = (txtfeeamt - ((Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt))).ToString();
                                    //change by abarna 25/10/2017
                                    tobepaidtotalamt += txtfeeamt - ((Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt));
                                    double.TryParse(Convert.ToString(txtpayamt.Text), out tobepaid);
                                    txtbalamt.Text = ((txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt)) - tobepaid).ToString();
                                    //double temppaid = 0;
                                    //if (partamt >= txtfeeamt)
                                    //    temppaid = txtfeeamt;

                                    //txtbalamt.Text = ((txtfeeamt - ((Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt))) - partamt).ToString();

                                    partamt -= txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt);
                                    partamt1 = partamt;
                                }
                            }
                            else
                            {
                                txt_examt.Text = partamt.ToString();
                            }
                        }

                        if ((Convert.ToDouble(txttotamt.Text.Trim()) - Convert.ToDouble(txtpaiamt.Text.Trim()) > 0) && curPay > 0)
                        {
                            cbox_selectLedger.Checked = true;
                        }
                        else
                        {
                            cbox_selectLedger.Checked = false;
                        }

                        //txt_tbpaid.Text = tobepaidtotalamt.ToString();
                        Txt_amt.Text = tobepaidtotalamt.ToString();
                        //txt_examt.Text = (excessAmt - curPay).ToString();
                        lbl_Exfee.Text = "Excess Fee Amount Entered : Rs. " + txt_examt.Text + " /-";
                        txt_balamt.Text = baltotalamt.ToString();
                        txt_totamt.Text = tottotamt.ToString();
                        txt_paidamt.Text = paitotamt.ToString();
                        #endregion
                    }
                    else if (rdo_sngle.Checked && rdo_challan.Checked)
                    {
                        #region For CHallan
                        TextBox txtfee = (TextBox)e.Row.Cells[1].FindControl("txt_fee_amt");
                        TextBox txtpayamt = (TextBox)e.Row.Cells[1].FindControl("txt_tobepaid_amt");
                        double tobepaid = 0;
                        double.TryParse(Convert.ToString(txtpayamt.Text), out tobepaid);
                        TextBox txtbalamt = (TextBox)e.Row.Cells[1].FindControl("txt_bal_amt");
                        TextBox txttotamt = (TextBox)e.Row.Cells[1].FindControl("txt_tot_amt");
                        TextBox txtpaiamt = (TextBox)e.Row.Cells[1].FindControl("txt_paid_amt");
                        TextBox txtdeductamt = (TextBox)e.Row.Cells[1].FindControl("txt_deduct_amt");
                        TextBox txtgridschlamt = (TextBox)e.Row.Cells[1].FindControl("txt_scholar_amt");
                        Label lblchltkn = (Label)e.Row.Cells[1].FindControl("lbl_chltkn");
                        string totalamt = txttotamt.Text;

                        txtbalamt.Attributes.Add("readonly", "readonly");
                        txtpaiamt.Attributes.Add("readonly", "readonly");
                        txtpayamt.Attributes.Add("readonly", "readonly");

                        if (txttotamt.Text.Trim() != "")
                        {
                            tottotamt += Convert.ToDouble(txttotamt.Text.Trim());
                        }
                        else
                        {
                            tottotamt += 0;
                        }

                        if (txtpaiamt.Text.Trim() != "")
                        {
                            paitotamt += Convert.ToDouble(txtpaiamt.Text.Trim());
                        }
                        else
                        {
                            paitotamt += 0;
                        }

                        double scholAmt = 0;
                        if (cb_govt.Checked)
                        {
                            double.TryParse(txtgridschlamt.Text.Trim(), out scholAmt);
                        }

                        double txtfeeamt = 0;
                        double curPay = 0;
                        if (txttotamt.Text.Trim() != "")
                        {
                            txtfeeamt = Convert.ToDouble(txttotamt.Text.Trim());

                            if ((txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt)) != 0)
                            {
                                if (partamt <= (txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt) - Convert.ToDouble(lblchltkn.Text.Trim())))
                                {
                                    txtbalamt.Text = ((txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt)) - partamt).ToString();
                                    if (partamt != 0)
                                    {
                                        txtpayamt.Text = (partamt).ToString();
                                        curPay = partamt;
                                    }
                                    else
                                    {
                                        txtpayamt.Text = "";
                                        curPay = 0;
                                    }
                                    baltotalamt += txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt) - partamt;
                                    tobepaidtotalamt += partamt;
                                    partamt = 0;
                                    partamt1 = partamt;
                                    txt_examt.Text = "0";

                                }
                                else
                                {

                                    baltotalamt += 0;
                                    curPay = txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt) - Convert.ToDouble(lblchltkn.Text.Trim());
                                    //  txt_examt.Text = (partamt - curPay).ToString();
                                    txt_examt.Text = "0";
                                    txtpayamt.Text = (txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt) - Convert.ToDouble(lblchltkn.Text.Trim())).ToString();
                                    tobepaidtotalamt += txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt) - Convert.ToDouble(lblchltkn.Text.Trim());
                                    txtbalamt.Text = ((txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt)) - tobepaid).ToString();

                                    partamt -= txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt) - Convert.ToDouble(lblchltkn.Text.Trim());
                                    partamt1 = partamt;
                                }
                            }
                        }
                        else
                        {

                        }
                        if ((Convert.ToDouble(txttotamt.Text.Trim()) - Convert.ToDouble(txtpaiamt.Text.Trim()) > 0) && curPay > 0)
                        {
                            cbox_selectLedger.Checked = true;
                        }
                        else
                        {
                            cbox_selectLedger.Checked = false;
                        }
                        //txt_tbpaid.Text = tobepaidtotalamt.ToString();
                        Txt_amt.Text = tobepaidtotalamt.ToString();
                        //txt_examt.Text = (excessAmt - curPay).ToString();
                        txt_balamt.Text = baltotalamt.ToString();
                        txt_totamt.Text = tottotamt.ToString();
                        txt_paidamt.Text = paitotamt.ToString();
                        //if (cb_exfees.Checked)
                        //{
                        //    //if (txt_exfees.Text.Trim() != "0" && txt_exfees.Text.Trim() != "0.00")
                        //    //{
                        //    //    if (tobepaidtotalamt <= Convert.ToDouble(txt_exfees.Text.Trim()))
                        //    //    {
                        //    //        //Txt_amt.Text = (Convert.ToDouble(txt_exfees.Text.Trim()) - tobepaidtotalamt).ToString();
                        //    //        Txt_amt.Text = "0.00";
                        //    //    }
                        //    //    else
                        //    //    {
                        //    //        Txt_amt.Text = (tobepaidtotalamt - Convert.ToDouble(txt_exfees.Text.Trim())).ToString();
                        //    //    }
                        //    //}
                        //}
                        #endregion
                    }
                }
                else
                {
                    txt_payamt.Attributes.Add("readonly", "readonly");
                    //Percentage
                    if (Txt_amt.Text.Trim() == "")
                    {
                        Txt_amt.Text = "0";
                    }
                    double percAmount = Convert.ToDouble(Txt_amt.Text.Trim());
                    if (percAmount > 0 && percAmount <= 100)
                    {
                        if (rdo_receipt.Checked)
                        {
                            #region For Receipt
                            TextBox txtfee = (TextBox)e.Row.Cells[1].FindControl("txt_fee_amt");
                            TextBox txtpayamt = (TextBox)e.Row.Cells[1].FindControl("txt_tobepaid_amt");
                            TextBox txtbalamt = (TextBox)e.Row.Cells[1].FindControl("txt_bal_amt");
                            TextBox txttotamt = (TextBox)e.Row.Cells[1].FindControl("txt_tot_amt");
                            TextBox txtpaiamt = (TextBox)e.Row.Cells[1].FindControl("txt_paid_amt");
                            TextBox txtdeductamt = (TextBox)e.Row.Cells[1].FindControl("txt_deduct_amt");
                            TextBox txtgridexcessamt = (TextBox)e.Row.Cells[1].FindControl("txt_gridexcess_amt");
                            TextBox txtgridschlamt = (TextBox)e.Row.Cells[1].FindControl("txt_scholar_amt");
                            TextBox txtgridCautamt = (TextBox)e.Row.Cells[1].FindControl("txt_deposit_amt");
                            Label lblchltkn = (Label)e.Row.Cells[1].FindControl("lbl_chltkn");

                            txtbalamt.Attributes.Add("readonly", "readonly");
                            txtpaiamt.Attributes.Add("readonly", "readonly");

                            if (txttotamt.Text.Trim() != "")
                            {
                                tottotamt += Convert.ToDouble(txttotamt.Text.Trim());
                            }
                            else
                            {
                                tottotamt += 0;
                            }

                            if (txtpaiamt.Text.Trim() != "")
                            {
                                paitotamt += Convert.ToDouble(txtpaiamt.Text.Trim());
                            }
                            else
                            {
                                paitotamt += 0;
                            }

                            double curExcess = 0;
                            if (cb_exfees.Checked)
                            {
                                double.TryParse(txtgridexcessamt.Text.Trim(), out curExcess);
                            }
                            double scholAmt = 0;
                            if (cb_govt.Checked)
                            {
                                double.TryParse(txtgridschlamt.Text.Trim(), out scholAmt);
                            }
                            double curCautAmt = 0;
                            if (cb_CautionDep.Checked)
                            {
                                double.TryParse(txtgridCautamt.Text.Trim(), out curCautAmt);
                            }

                            double txtfeeamt = 0;
                            double curPay = 0;
                            if (txttotamt.Text.Trim() != "")
                            {
                                txtfeeamt = Convert.ToDouble(txttotamt.Text.Trim());
                                curPay = (txtfeeamt * percAmount) / 100;

                                if ((curPay - (Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt)) != 0)
                                {
                                    if (curPay <= (txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt)))
                                    {
                                        txtbalamt.Text = ((txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt)) - curPay).ToString();
                                        txtpayamt.Text = (curPay).ToString();
                                        baltotalamt += txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + curExcess + scholAmt + curCautAmt) - curPay;
                                        tobepaidtotalamt += curPay;
                                        txt_examt.Text = "0";
                                    }
                                }
                                else
                                {
                                    txt_examt.Text = partamt.ToString();
                                }
                            }
                            if ((Convert.ToDouble(txttotamt.Text.Trim()) - Convert.ToDouble(txtpaiamt.Text.Trim()) > 0) && curPay > 0)
                            {
                                cbox_selectLedger.Checked = true;
                            }
                            else
                            {
                                cbox_selectLedger.Checked = false;
                            }
                            //txt_tbpaid.Text = tobepaidtotalamt.ToString();

                            //txt_examt.Text = (excessAmt - curPay).ToString();


                            //Txt_amt.Text = tobepaidtotalamt.ToString();
                            lbl_Exfee.Text = "Excess Fee Amount Entered : Rs. " + txt_examt.Text + " /-";
                            txt_balamt.Text = baltotalamt.ToString();
                            txt_totamt.Text = tottotamt.ToString();
                            txt_paidamt.Text = paitotamt.ToString();

                            #endregion
                        }
                        else if (rdo_sngle.Checked && rdo_challan.Checked)
                        {
                            #region For CHallan
                            TextBox txtfee = (TextBox)e.Row.Cells[1].FindControl("txt_fee_amt");
                            TextBox txtpayamt = (TextBox)e.Row.Cells[1].FindControl("txt_tobepaid_amt");
                            TextBox txtbalamt = (TextBox)e.Row.Cells[1].FindControl("txt_bal_amt");
                            TextBox txttotamt = (TextBox)e.Row.Cells[1].FindControl("txt_tot_amt");
                            TextBox txtpaiamt = (TextBox)e.Row.Cells[1].FindControl("txt_paid_amt");
                            TextBox txtdeductamt = (TextBox)e.Row.Cells[1].FindControl("txt_deduct_amt");
                            TextBox txtgridschlamt = (TextBox)e.Row.Cells[1].FindControl("txt_scholar_amt");
                            Label lblchltkn = (Label)e.Row.Cells[1].FindControl("lbl_chltkn");
                            string totalamt = txttotamt.Text;

                            txtbalamt.Attributes.Add("readonly", "readonly");
                            txtpaiamt.Attributes.Add("readonly", "readonly");
                            txtpayamt.Attributes.Add("readonly", "readonly");

                            if (txttotamt.Text.Trim() != "")
                            {
                                tottotamt += Convert.ToDouble(txttotamt.Text.Trim());
                            }
                            else
                            {
                                tottotamt += 0;
                            }

                            if (txtpaiamt.Text.Trim() != "")
                            {
                                paitotamt += Convert.ToDouble(txtpaiamt.Text.Trim());
                            }
                            else
                            {
                                paitotamt += 0;
                            }

                            double scholAmt = 0;
                            if (cb_govt.Checked)
                            {
                                double.TryParse(txtgridschlamt.Text.Trim(), out scholAmt);
                            }

                            double txtfeeamt = 0;
                            double curPay = 0;
                            if (txttotamt.Text.Trim() != "")
                            {
                                txtfeeamt = Convert.ToDouble(txttotamt.Text.Trim());
                                curPay = (txtfeeamt * percAmount) / 100;
                                if ((curPay - (Convert.ToDouble(txtpaiamt.Text) + scholAmt)) != 0)
                                {
                                    if (curPay <= (txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt) - Convert.ToDouble(lblchltkn.Text.Trim())))
                                    {
                                        txtbalamt.Text = ((txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt)) - curPay).ToString();

                                        txtpayamt.Text = (curPay).ToString();

                                        baltotalamt += txtfeeamt - (Convert.ToDouble(txtpaiamt.Text) + scholAmt) - curPay;
                                        tobepaidtotalamt += curPay;
                                        txt_examt.Text = "0";

                                    }

                                }
                            }
                            else
                            {

                            }
                            if ((Convert.ToDouble(txttotamt.Text.Trim()) - Convert.ToDouble(txtpaiamt.Text.Trim()) > 0) && curPay > 0)
                            {
                                cbox_selectLedger.Checked = true;
                            }
                            else
                            {
                                cbox_selectLedger.Checked = false;
                            }
                            //Txt_amt.Text = tobepaidtotalamt.ToString();

                            txt_balamt.Text = baltotalamt.ToString();
                            txt_totamt.Text = tottotamt.ToString();
                            txt_paidamt.Text = paitotamt.ToString();

                            #endregion
                        }

                    }
                    else
                    {
                        //Txt_amt.Text = "0.00";
                    }

                }

            }
        }
    }
    protected void grid_Details_DataBound(object sender, EventArgs e)
    {
        if (Txt_amt.Text.Trim() == "" || Txt_amt.Text.Trim() == "0" || Txt_amt.Text.Trim() == "0.00")
        {
            if (rdo_challan.Checked)
            {
                chkGridSelectAll.Checked = true;
                selectLedgersChallan();
            }
            else
            {
                selectLedgers();
            }
        }
        else
        {
            double totAmtToPay = 0;
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {
                TextBox txt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_tobepaid_amt");
                TextBox txtexgridamt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_gridexcess_amt");
                TextBox txtgridschlamt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_scholar_amt");
                TextBox txtgridCautamt = (TextBox)grid_Details.Rows[i].Cells[1].FindControl("txt_deposit_amt");
                CheckBox cbl = (CheckBox)grid_Details.Rows[i].Cells[1].FindControl("cb_selectLedger");
                if (txt.Text == "")
                {
                    // txt.Text = "0.00";
                }

                double curExcess = 0.00;
                double scholamt = 0.00;
                double curCautamt = 0.00;
                if (rdo_challan.Checked == false)
                {
                    if (cb_exfees.Checked == true)
                    {
                        double.TryParse(txtexgridamt.Text.Trim(), out curExcess);
                    }
                    if (cb_govt.Checked == true)
                    {
                        double.TryParse(txtgridschlamt.Text.Trim(), out scholamt);
                    }
                    if (cb_CautionDep.Checked == true)
                    {
                        double.TryParse(txtgridCautamt.Text.Trim(), out curCautamt);
                    }
                }
                else if (cb_govt.Visible)
                {
                    if (cb_govt.Checked == true)
                    {
                        double.TryParse(txtgridschlamt.Text.Trim(), out scholamt);
                    }
                }
                double tobePaid = 0;
                double.TryParse(Convert.ToString(txt.Text), out tobePaid);
                totAmtToPay += tobePaid + curExcess + scholamt + curCautamt;
                if ((tobePaid + curExcess + scholamt + curCautamt) > 0)
                {
                    cbl.Checked = true;
                }
                else
                {
                    cbl.Checked = false;
                }
            }
            lbl_CurPay.Text = "Total Amount To Be Paid : Rs." + totAmtToPay + " /-";
        }
        try
        {
            double paiColor = 0;
            double totColor = 0;
            for (int i = 0; i < grid_Details.Rows.Count; i++)
            {
                TextBox txttotamt = (TextBox)grid_Details.Rows[i].FindControl("txt_tot_amt");
                TextBox txtpaiamt = (TextBox)grid_Details.Rows[i].FindControl("txt_paid_amt");

                if (txttotamt.Text.Trim() != "")
                {
                    totColor = Convert.ToDouble(txttotamt.Text.Trim());
                }
                if (txtpaiamt.Text.Trim() != "")
                {
                    paiColor = Convert.ToDouble(txtpaiamt.Text.Trim());
                }

                Color clr = new Color();
                if (paiColor == totColor)
                {
                    //Full fees paid 
                    clr = Color.FromArgb(144, 238, 144);
                }
                else if (paiColor > 0 && totColor > 0)
                {
                    //If Partial Paid
                    clr = Color.FromArgb(255, 182, 193);
                }
                else
                {
                    clr = Color.White;
                }
                for (int j = 0; j < grid_Details.Columns.Count; j++)
                {
                    grid_Details.Rows[i].Cells[j].BackColor = clr;
                }
            }
        }
        catch (Exception ex)
        { //d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); 
        }
        bool FeeAMT = hideGridFeeAmt();
        bool DedAMT = hideGridDedAmt();
        bool TotAMT = hideGridTotAmt();
        bool PaiAMT = hideGridPaidAmt();
        #region New
        if (!FeeAMT || !DedAMT || !TotAMT || !PaiAMT)
        {
            chkGridSelectAll.Visible = false;
            foreach (GridViewRow Gr in grid_Details.Rows)
            {
                TextBox tp = (TextBox)Gr.FindControl("txt_tobepaid_amt");
                tp.Attributes.Add("readonly", "readonly");
            }
        }
        else
        {
            chkGridSelectAll.Visible = true;
        }
        if (FeeAMT)
        {
            grid_Details.Columns[9].Visible = true;
        }
        else
        {
            grid_Details.Columns[9].Visible = false;
        }
        if (DedAMT)
        {
            grid_Details.Columns[10].Visible = true;
        }
        else
        {
            grid_Details.Columns[10].Visible = false;
        }
        if (TotAMT)
        {
            grid_Details.Columns[11].Visible = true;
        }
        else
        {
            grid_Details.Columns[11].Visible = false;
        }
        if (PaiAMT)
        {
            grid_Details.Columns[12].Visible = true;
        }
        else
        {
            grid_Details.Columns[12].Visible = false;
        }
        #endregion
        #region old
        //if (FeeAMT)
        //{
        //    grid_Details.HeaderRow.Cells[9].Visible = true;//.Attributes.Add("style", "display:block;");
        //}
        //else
        //{
        //    grid_Details.HeaderRow.Cells[9].Visible = false;//.Attributes.Add("style", "display:none;");
        //}
        //if (DedAMT)
        //{
        //    grid_Details.HeaderRow.Cells[10].Visible = true;//.Attributes.Add("style", "display:block;");
        //}
        //else
        //{
        //    grid_Details.HeaderRow.Cells[10].Visible = false;//.Attributes.Add("style", "display:none;");
        //}
        //if (TotAMT)
        //{
        //    grid_Details.HeaderRow.Cells[11].Visible = true;//.Attributes.Add("style", "display:block;");
        //}
        //else
        //{
        //    grid_Details.HeaderRow.Cells[11].Visible = false;//.Attributes.Add("style", "display:none;");
        //}
        //foreach (GridViewRow Gr in grid_Details.Rows)
        //{
        //    if (FeeAMT)
        //    {
        //        Gr.Cells[9].Attributes.Add("style", "display:block;");
        //    }
        //    else
        //    {
        //        Gr.Cells[9].Attributes.Add("style", "display:none;");
        //    }
        //    if (DedAMT)
        //    {
        //        Gr.Cells[10].Attributes.Add("style", "display:block;");
        //    }
        //    else
        //    {
        //        Gr.Cells[10].Attributes.Add("style", "display:none;");
        //    }
        //    if (TotAMT)
        //    {
        //        Gr.Cells[11].Attributes.Add("style", "display:block;");
        //    }
        //    else
        //    {
        //        Gr.Cells[11].Attributes.Add("style", "display:none;");
        //    }
        //}
        #endregion
    }
    //Grid Value based on Amount or Percent
    protected void ddl_AmtPerc_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        Txt_amt.Text = "0.00";
        loadGridStudent();
        imgAlert.Visible = false;
    }
    public void collegebank()
    {
        try
        {
            string queru = "SELECT DISTINCT BankName+'-'+AccNo+'-'+City as BankName,BankPk FROM FM_FinBankMaster  where CollegeCode=" + collegecode1 + "";
            DataSet dsBank = d2.select_method_wo_parameter(queru, "Text");
            ddl_collegebank.Items.Clear();

            if (dsBank.Tables[0].Rows.Count > 0)
            {
                ddl_collegebank.DataSource = dsBank;
                ddl_collegebank.DataTextField = "BankName";
                ddl_collegebank.DataValueField = "BankPk";
                ddl_collegebank.DataBind();
            }
        }
        catch (Exception ex) { }
    }
    public void bank()
    {
        try
        {
            ddl_bkname.Items.Clear();
            string queru = "select TextCode,TextVal  from textvaltable where TextCriteria = 'BName' and college_code='" + collegecode1 + "'";
            DataSet dsBank = d2.select_method_wo_parameter(queru, "Text");

            if (dsBank.Tables.Count > 0 && dsBank.Tables[0].Rows.Count > 0)
            {
                ddl_bkname.DataSource = dsBank;
                ddl_bkname.DataTextField = "TextVal";
                ddl_bkname.DataValueField = "TextCode";
                ddl_bkname.DataBind();
            }
            ddl_bkname.Items.Insert(0, "Select");
            ddl_bkname.Items.Insert(ddl_bkname.Items.Count, "Others");
        }
        catch (Exception ex) { }
    }
    public void cardType()
    {
        try
        {
            ddlCardType.Items.Clear();
            string queru = "select TextCode,TextVal  from textvaltable where TextCriteria = 'CardT'";
            DataSet dsCard = d2.select_method_wo_parameter(queru, "Text");

            if (dsCard.Tables.Count > 0 && dsCard.Tables[0].Rows.Count > 0)
            {
                ddlCardType.DataSource = dsCard;
                ddlCardType.DataTextField = "TextVal";
                ddlCardType.DataValueField = "TextCode";
                ddlCardType.DataBind();
            }
            ddlCardType.Items.Insert(0, "Select");
            ddlCardType.Items.Insert(ddlCardType.Items.Count, "Others");
        }
        catch (Exception ex) { }
    }
    public string subjectcode(string textcri, string subjename)
    {
        //for new bank
        string subjec_no = "";
        try
        {
            string select_subno = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + collegecode1 + " and TextVal='" + subjename + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(select_subno, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
            }
            else
            {
                string insertquery = "insert into textvaltable(TextCriteria,TextVal,college_code) values('" + textcri + "','" + subjename + "','" + collegecode1 + "')";
                int result = d2.update_method_wo_parameter(insertquery, "Text");
                if (result != 0)
                {
                    string select_subno1 = "select TextCode from textvaltable where TextCriteria='" + textcri + "' and college_code =" + collegecode1 + " and TextVal='" + subjename + "'";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(select_subno1, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        subjec_no = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                    }
                }
            }
        }
        catch (Exception ex) { }
        return subjec_no;
    }
    protected void btn_alertclose_Click(object sender, EventArgs e)
    {
        imgAlert.Visible = false;
        txt_Smartno.Focus();
        if (lbl_alert.Text == "Receipt No Not Set For All Headers")
        {
            Response.Redirect("~/FinanceIndex.aspx");
        }
    }
    //Lookup student
    protected void ddl_semrcpt_IndexChange(object sender, EventArgs e)
    {
        lookupAmount();
    }
    private void lookupAmount()
    {
        txtMultTotal.Text = "0.00";
        if (rdo_receipt.Checked && chl_MulRcpt.Checked)
        {
            try
            {
                double totRcptAmount = 0.00;
                StringBuilder sbAppNo = new StringBuilder();
                for (int i = 1; i < Fpspread1.Sheets[0].RowCount; i++)
                {
                    int checkval = Convert.ToInt32(Fpspread1.Sheets[0].Cells[i, 1].Value);
                    if (checkval == 1)
                    {
                        string appNo = Convert.ToString(Fpspread1.Sheets[0].Cells[i, 0].Tag);
                        if (sbAppNo.Length == 0)
                        {
                            sbAppNo.Append(appNo);
                        }
                        else
                        {
                            sbAppNo.Append("," + appNo);
                        }
                    }
                }
                string feecat = ddl_semrcpt.Items.Count > 0 ? ddl_semrcpt.SelectedValue : "0";
                if (sbAppNo.Length > 0)
                {
                    string selectedHdrs = GetSelectedItemsValue(cbl_grpheader);
                    string stream = "";
                    if (ddl_strm.Enabled && ddl_strm.Items.Count > 0)
                    {
                        stream = "  and s.stream in('" + ddl_strm.SelectedValue + "') ";
                    }
                    string selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))) from FT_FeeAllot f,FS_ChlGroupHeaderSettings s  where  f.HeaderFK =s.HeaderFK and f.app_no in (" + sbAppNo.ToString() + ") and f.FeeCategory in (" + feecat + ") and isnull(f.istransfer,'0')='0'" + stream;
                    if (cb_selcthd.Checked)
                    {
                        if (rbl_headerselect.SelectedIndex == 0)
                        {
                            selectedHdrs = GetSelectedItemsText(cbl_grpheader);
                            selQ += "  and s.ChlGroupHeader in('" + selectedHdrs + "')";
                        }
                        else if (rbl_headerselect.SelectedIndex == 1)
                        {
                            selQ = "select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))) as Total from FT_FeeAllot f  where  App_No in (" + sbAppNo.ToString() + ") and FeeCategory in (" + feecat + ") and HeaderFK in (" + selectedHdrs + ") and isnull(f.istransfer,'0')='0'";
                        }
                        else if (rbl_headerselect.SelectedIndex == 2)
                        {
                            selQ = "select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))) as Total from FT_FeeAllot f  where  App_No in (" + sbAppNo.ToString() + ") and FeeCategory in (" + feecat + ") and LedgerFK in (" + selectedHdrs + ") and isnull(f.istransfer,'0')='0'";
                        }
                    }
                    double.TryParse(d2.GetFunction(selQ), out totRcptAmount);
                }
                txtMultTotal.Text = totRcptAmount.ToString();
            }
            catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
        }
    }
    private double lookupAmountIndividual(string AppNo)//Not used
    {
        double totRcptAmount = 0.00;
        try
        {
            string feecat = ddl_semrcpt.Items.Count > 0 ? ddl_semrcpt.SelectedValue : "0";

            string selectedHdrs = GetSelectedItemsValue(cbl_grpheader);
            string stream = studentCollType(AppNo, false);
            if (stream != string.Empty)
            {
                stream += "  and s.stream in('" + stream + "') ";
            }
            string selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))) from FT_FeeAllot f,FS_ChlGroupHeaderSettings s where  f.HeaderFK =s.HeaderFK and f.app_no in (" + AppNo + ") and f.FeeCategory in (" + feecat + ") and isnull(f.istransfer,'0')='0'" + stream;

            if (cb_selcthd.Checked)
            {
                if (rbl_headerselect.SelectedIndex == 0)
                {
                    selectedHdrs = GetSelectedItemsText(cbl_grpheader);
                    selQ += "  and s.ChlGroupHeader in('" + selectedHdrs + "')";
                }
                else if (rbl_headerselect.SelectedIndex == 1)
                {
                    selQ = "select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))) as Total from FT_FeeAllot f,Degree d,course c where a.degree_code=d.degree_code and c.course_id=d.course_id and App_No in (" + AppNo + ") and FeeCategory in (" + feecat + ") and HeaderFK in (" + selectedHdrs + ") and isnull(f.istransfer,'0')='0'";
                }
                else if (rbl_headerselect.SelectedIndex == 2)
                {
                    selQ = "select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))) as Total from FT_FeeAllot f,Degree d,course c where a.degree_code=d.degree_code and c.course_id=d.course_id and App_No in (" + AppNo + ") and FeeCategory in (" + feecat + ") and LedgerFK in (" + selectedHdrs + ") and isnull(f.istransfer,'0')='0'";
                }
            }
            double.TryParse(d2.GetFunction(selQ), out totRcptAmount);
        }
        catch { totRcptAmount = 0.00; }
        return totRcptAmount;
    }
    protected void btn_roll_Click(object sender, EventArgs e)
    {
        trFuParNot.Visible = true;//modified by abarna 23.04.2018
        if (rdo_challan.Checked && rdo_multi.Checked)
        {
            trFuParNot.Visible = true;
        }
        else if (rdo_receipt.Checked && chl_MulRcpt.Checked)
        {
            trFuParNot.Visible = true;
        }
        //cbPpaid.Checked = true;
        //cbFpaid.Checked = true;
        cbNpaid.Checked = true;
        cbFirstGrad.Checked = false;
        popwindow.Visible = true;
        bindType();
        bindbatch1();
        binddegree2();
        bindbranch1();
        bindsec2();
        txt_rollno3.Text = "";
        //btn_go_Click(sender, e);
        btn_studOK.Visible = false;

        btn_exitstud.Visible = false;
        Fpspread1.Visible = false;
        lbl_errormsg.Visible = false;
    }
    protected void btn_studOK_Click(object sender, EventArgs e)
    {
        try
        {
            txtMultTotal.Text = "0.00";
            btn_save.Visible = false;
            btn_print.Visible = false;
            string useCOdeSet = "select LinkValue from New_InsSettings where LinkName='MultipleCollegeUserRights' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
            string colleges = Convert.ToString(d2.GetFunction(useCOdeSet)).Trim();
            if (colleges == "" || colleges == "0")
            {
                colleges = collegecode1;
            }
            int smartDisp = Convert.ToInt32(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DisplayNumberForSmartCd' and user_code ='" + usercode + "' and college_code  in (" + collegecode1 + ")").Trim());
            if (Fpspread1.Sheets[0].RowCount > 0)
            {
                Fpspread1.SaveChanges();
                string rollno = "";
                string rolladmit = "";
                string degreename1 = "";
                string name1 = "";
                string degreecode1 = "";
                string regno1 = "";
                string smartno = string.Empty;

                string actrow = Fpspread1.Sheets[0].ActiveRow.ToString();
                string actcol = Fpspread1.Sheets[0].ActiveColumn.ToString();

                if ((rdo_challan.Checked && rdo_multi.Checked) || (rdo_receipt.Checked && chl_MulRcpt.Checked))
                {
                    int count = 0;
                    StringBuilder sbAppNo = new StringBuilder();
                    for (int i = 1; i < Fpspread1.Sheets[0].RowCount; i++)
                    {
                        int checkval = Convert.ToInt32(Fpspread1.Sheets[0].Cells[i, 1].Value);
                        if (checkval == 1)
                        {
                            count++;
                        }
                    }
                    if (rdo_receipt.Checked && chl_MulRcpt.Checked)
                    {
                        btn_save.Visible = true;
                        btn_print.Visible = false;
                        txt_tostudentsrcpt.Text = count.ToString();
                        lookupAmount();
                    }
                    else
                    {
                        btn_save.Visible = false;
                        btn_print.Visible = true;
                        txt_totnoofstudents.Text = count.ToString();
                    }



                    popwindow.Visible = false;
                    if (count == 0)
                    {
                        btn_save.Visible = false;
                        btn_print.Visible = false;
                    }
                }
                else
                {
                    if (actrow != "" && actcol != "" && actrow != "-1" && actcol != "-1")
                    {

                        btn_print.Visible = true;
                        btn_save.Visible = true;
                        rollno = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(actrow), 3].Text);
                        rolladmit = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(actrow), 2].Text);
                        degreename1 = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(actrow), 7].Text);
                        degreecode1 = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(actrow), 7].Tag);
                        name1 = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(actrow), 6].Text);
                        regno1 = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(actrow), 4].Text);
                        smartno = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(actrow), 5].Text);

                        if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
                        {
                            //roll no
                            //  rollno = rollno;
                        }
                        else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
                        {
                            //reg no
                            rollno = regno1;
                        }
                        else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
                        {
                            //Admin no
                            rollno = rolladmit;
                        }
                        else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
                        {
                            //Smartcard No

                            txt_Smartno.Text = smartno;
                            switch (smartDisp)
                            {
                                case 0:
                                    rollno = rollno;
                                    break;
                                case 1:
                                    rollno = regno1;
                                    break;
                                case 2:
                                case 3:
                                    rollno = rolladmit;
                                    break;
                            }
                        }
                        else
                        {
                            //App no
                            rollno = rolladmit;
                        }
                    }
                }//aruna
                Fpspread1.Sheets[0].ActiveRow = -1;
                Fpspread1.Sheets[0].ActiveColumn = -1;
                Fpspread1.SaveChanges();
                if (!rdo_receipt.Checked)
                {
                    if (!rdo_sngle.Checked)
                    {
                        for (int i = 1; i < Fpspread1.Sheets[0].RowCount; i++)
                        {
                            int checkval = Convert.ToInt32(Fpspread1.Sheets[0].Cells[i, 1].Value);
                            if (checkval == 1)
                            {
                                string roll_no = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(i), 3].Text);
                                string roll_admit = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(i), 2].Text);
                                string degreename = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(i), 7].Text);
                                string degreecode = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(i), 7].Tag);
                                string name = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(i), 6].Text);
                                string regno = Convert.ToString(Fpspread1.Sheets[0].Cells[Convert.ToInt32(actrow), 4].Text);

                                if (rollno == "")
                                {
                                    rollno = Convert.ToString(roll_no);
                                }
                                else
                                {
                                    rollno = rollno + "," + Convert.ToString(roll_no) + "";
                                }
                                if (rolladmit == "")
                                {
                                    rolladmit = Convert.ToString(roll_admit);
                                }
                                else
                                {
                                    rolladmit = rolladmit + "," + Convert.ToString(roll_admit) + "";
                                }
                                if (degreename1 == "")
                                {
                                    degreename1 = Convert.ToString(degreename);
                                }
                                else
                                {
                                    degreename1 = degreename1 + "," + Convert.ToString(degreename) + "";
                                }

                                if (name1 == "")
                                {
                                    name1 = Convert.ToString(name);
                                }
                                else
                                {
                                    name1 = name1 + "," + Convert.ToString(name) + "";
                                }
                                if (degreecode1 == "")
                                {
                                    degreecode1 = Convert.ToString(degreecode);
                                }
                                else
                                {
                                    degreecode1 = degreecode1 + "," + Convert.ToString(degreecode) + "";
                                }
                            }
                        }

                    }
                }


                txt_rollno.Text = Convert.ToString(rollno);
                if (rdo_receipt.Checked)
                {
                    txt_rollno_Changed(sender, e);
                }
                else
                {
                    if (rdo_sngle.Checked)
                    {
                        txt_rollno_Changed(sender, e);
                    }
                }
                Session["degreecodenew"] = Convert.ToString(degreecode1);
                popwindow.Visible = false;
                if (!rdo_sngle.Checked || rdo_challan.Checked)
                {
                    btn_save.Visible = false;
                }
                if (!rdo_challan.Checked || rdo_receipt.Checked)
                {
                    btn_print.Visible = false;
                }
            }
            //}aruna
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    protected void btn_exitstud_Click(object sender, EventArgs e)
    {
        popwindow.Visible = false;
        rdo_receipt.Checked = true;
    }
    protected void Fpspread1_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            string actrow = Fpspread1.Sheets[0].ActiveRow.ToString();
            string actcol = Fpspread1.Sheets[0].ActiveColumn.ToString();
            if (actrow.Trim() == "0" && actcol.Trim() == "1")
            {
                if (Fpspread1.Sheets[0].RowCount > 0)
                {
                    int checkval = Convert.ToInt32(Fpspread1.Sheets[0].Cells[0, 1].Value);
                    if (checkval == 0)
                    {
                        for (int i = 1; i < Fpspread1.Sheets[0].RowCount; i++)
                        {
                            Fpspread1.Sheets[0].Cells[i, 1].Value = 1;
                        }
                    }
                    if (checkval == 1)
                    {
                        for (int i = 1; i < Fpspread1.Sheets[0].RowCount; i++)
                        {
                            Fpspread1.Sheets[0].Cells[i, 1].Value = 0;
                        }
                    }
                }
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    protected void btn_go_Click(object sender, EventArgs e)
    {
        try
        {
            string selectquery = "";
            Fpspread1.SaveChanges();
            string feecat = string.Empty;
            if (rdo_challan.Checked && rdo_multi.Checked)
            {
                if (ddl_semMultiple.Items.Count > 0)
                {
                    feecat = ddl_semMultiple.SelectedItem.Value.ToString();
                }
            }
            else if (rdo_challan.Checked && !rdo_multi.Checked)
            {
                if (ddl_sem.Items.Count > 0)
                {
                    feecat = ddl_sem.SelectedItem.Value.ToString();
                }
            }
            else if (rdo_receipt.Checked && chl_MulRcpt.Checked)
            {
                if (ddl_semrcpt.Items.Count > 0)
                {
                    feecat = ddl_semrcpt.SelectedItem.Value.ToString();
                }
            }
            else if (rdo_receipt.Checked && !chl_MulRcpt.Checked)
            {
                feecat = GetSelectedItemsValueAsString(cbl_sem);
            }
            string itemheader = GetSelectedItemsValueAsString(cbl_branch1);

            string section = GetSelectedItemsValueAsString(cbl_sec2).Trim();

            string batch_year = Convert.ToString(ddl_batch1.SelectedItem.Text);

            string PaidFilter = string.Empty;
            string fgFilter = string.Empty;

            if (feecat != string.Empty)
            {

                string selectedHdrs = GetSelectedItemsValue(cbl_grpheader);


                if (cbFpaid.Checked == true)
                {
                    if (PaidFilter.Trim() == "")
                        PaidFilter = " select app_no from FT_FeeAllot where FeeCategory in ('" + feecat + "') and isnull(istransfer,'0')='0' group by App_No having sum(TotalAmount) > 0 and sum(BalAmount) =0 ";
                }
                if (cbPpaid.Checked == true)
                {
                    if (PaidFilter.Trim() == "")
                        PaidFilter = " select app_no from FT_FeeAllot where FeeCategory in ('" + feecat + "') and isnull(istransfer,'0')='0' group by App_No having sum(TotalAmount) <> sum(BalAmount) and sum(BalAmount) > 0 ";
                    else
                        PaidFilter += " union select app_no from FT_FeeAllot where FeeCategory in ('" + feecat + "') and isnull(istransfer,'0')='0' group by App_No having sum(TotalAmount) <> sum(BalAmount) and sum(BalAmount) > 0 ";
                }
                if (cbNpaid.Checked == true)
                {
                    if (PaidFilter.Trim() == "")
                    {
                        // PaidFilter = "  select app_no from FT_FeeAllot where FeeCategory in ('" + feecat + "') and isnull(istransfer,'0')='0' and  balamount<>'0' group by App_No having sum(TotalAmount) = sum(BalAmount)  ";
                        PaidFilter = "select f.app_no from FT_FeeAllot f,Registration r where f.FeeCategory in ('" + feecat + "') and f.App_No =r.App_No and r.degree_code in ('" + itemheader + "') and r.Batch_Year  in (" + batch_year + ") and isnull(r.Sections,'') in ('" + section.Trim() + "')  ";

                        //Added by saranya on 12March2018//
                        if (rbl_headerselect.SelectedIndex == 1)
                        {
                            PaidFilter = PaidFilter + " and f.HeaderFk in (" + selectedHdrs + ") ";
                        }
                        if (rbl_headerselect.SelectedIndex == 2)
                        {
                            PaidFilter = PaidFilter + " and f.LedgerFK in (" + selectedHdrs + ") ";
                        }
                        PaidFilter = PaidFilter + "and  f.balamount<>'0' group by f.App_No having sum(TotalAmount) = sum(BalAmount) ";
                        //==========================================//
                    }
                    else
                    {
                        PaidFilter += " union select app_no from FT_FeeAllot where FeeCategory in ('" + feecat + "') and isnull(istransfer,'0')='0' and balamount<>'0' group by App_No having sum(TotalAmount) = sum(BalAmount)  ";
                    }
                }
                if (cbFpaid.Checked == false && cbFirstGrad.Checked == false && cbPpaid.Checked == false && cbNpaid.Checked == false)
                {
                    if (PaidFilter.Trim() == "")
                    {
                        // PaidFilter = "  select app_no from FT_FeeAllot where FeeCategory in ('" + feecat + "') and isnull(istransfer,'0')='0' and  balamount<>'0' group by App_No having sum(TotalAmount) = sum(BalAmount)  ";
                        PaidFilter = "select f.app_no from FT_FeeAllot f,Registration r where f.FeeCategory in ('" + feecat + "') and f.App_No =r.App_No and r.degree_code in ('" + itemheader + "') and r.Batch_Year  in (" + batch_year + ") and isnull(r.Sections,'') in ('" + section.Trim() + "')  ";

                        //=======Added by saranya on 12March2018========//
                        if (rbl_headerselect.SelectedIndex == 1)
                        {
                            PaidFilter = PaidFilter + " and f.HeaderFk in (" + selectedHdrs + ") ";
                        }
                        if (rbl_headerselect.SelectedIndex == 2)
                        {
                            PaidFilter = PaidFilter + " and f.LedgerFK in (" + selectedHdrs + ") ";
                        }
                        PaidFilter = PaidFilter + "and  f.balamount<>'0' group by f.App_No having sum(TotalAmount) = sum(BalAmount) ";
                        //===============================================//
                    }
                    else
                        PaidFilter += " union select app_no from FT_FeeAllot where FeeCategory in ('" + feecat + "') and isnull(istransfer,'0')='0' and balamount<>'0' group by App_No having sum(TotalAmount) = sum(BalAmount)  ";
                }
                //if (cbNpaid.Checked && cbFpaid.Checked && cbPpaid.Checked)
                //{
                //}
                //else if (cbFpaid.Checked && cbNpaid.Checked)
                //{
                //    PaidFilter = " and r.App_No  in (select distinct App_No from FT_FeeAllot f where FeeCategory in (" + feecat + ") and (isnull(TotalAmount,0) =isnull(PaidAmount,0) or isnull(PaidAmount,0)=0 ) ) ";
                //}
                //else if (cbPpaid.Checked && cbNpaid.Checked)
                //{
                //    PaidFilter = " and r.App_No  in (select distinct App_No from FT_FeeAllot f where FeeCategory in (" + feecat + ") and ((isnull(TotalAmount,0) >isnull(PaidAmount,0) and isnull(TotalAmount,0)<>isnull(PaidAmount,0)) or isnull(PaidAmount,0)=0  )) ";
                //}
                //else if (cbPpaid.Checked && cbFpaid.Checked)
                //{
                //    PaidFilter = " and r.App_No  in (select distinct App_No from FT_FeeAllot f where FeeCategory in (" + feecat + ") and (isnull(TotalAmount,0) =isnull(PaidAmount,0) or (isnull(TotalAmount,0) >isnull(PaidAmount,0) and isnull(TotalAmount,0)<>isnull(PaidAmount,0)) ) ) ";
                //}
                //else if (cbNpaid.Checked)
                //{
                //    PaidFilter = " and r.App_No  in (select distinct App_No from FT_FeeAllot f where FeeCategory in (" + feecat + ") and isnull(PaidAmount,0)=0 ) ";
                //}
                //else if (cbFpaid.Checked)
                //{
                //    PaidFilter = " and r.App_No  in (select distinct App_No from FT_FeeAllot f where FeeCategory in (" + feecat + ") and isnull(TotalAmount,0) =isnull(PaidAmount,0) ) ";
                //}
                //else if (cbPpaid.Checked)
                //{
                //    PaidFilter = " and r.App_No  in (select distinct App_No from FT_FeeAllot f where FeeCategory in (" + feecat + ") and (isnull(TotalAmount,0) >isnull(PaidAmount,0) and isnull(TotalAmount,0)<>isnull(PaidAmount,0) )) ";
                //}

                if (cbFirstGrad.Checked)
                {
                    fgFilter = " and r.Appno in (SELECT distinct app_no FROM APPLYN WHERE isnull(FIRST_GRADUATE,0)=1 ) ";
                }
            }

            string strorderby = d2.GetFunction("select value from Master_Settings where settings='order_by'");
            if (strorderby == "")
            {
                strorderby = "";
            }
            else
            {
                if (strorderby == "0")
                {
                    strorderby = "ORDER BY len(r.Roll_No),r.Roll_No";
                }
                else if (strorderby == "1")
                {
                    strorderby = "ORDER BY len(r.Reg_No),r.Reg_No";
                }
                else if (strorderby == "2")
                {
                    strorderby = "ORDER BY r.Stud_Name";
                }
                else if (strorderby == "0,2")
                {
                    strorderby = "ORDER BY len(r.Roll_No),r.Roll_No,r.Stud_Name";
                }
                else
                {
                    strorderby = "";
                }
            }


            string useCOdeSet = "select LinkValue from New_InsSettings where LinkName='MultipleCollegeUserRights' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
            string colleges = Convert.ToString(d2.GetFunction(useCOdeSet)).Trim();
            if (colleges == "" || colleges == "0")
            {
                colleges = collegecode1;
            }
            int smartDisp = Convert.ToInt32(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DisplayNumberForSmartCd' and user_code ='" + usercode + "' and college_code  in (" + collegecode1 + ")").Trim());

            string app_no = "0";
            if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) != 3 || (smartDisp != 3 && Convert.ToUInt32(rbl_rollno.SelectedItem.Value) != 3))
            {

                if (txt_rollno3.Text.Trim() == "")
                {
                    string stream = "";
                    if (ddl_strm.Enabled && ddl_strm.Items.Count > 0)
                    {
                        stream = "  and c.type in('" + ddl_strm.SelectedValue + "') ";
                    }

                    selectquery = "select Roll_No,Roll_Admit,smart_serial_no,Stud_Name,d.Degree_Code,(C.Course_Name +' - '+ dt.Dept_Name) as Department,Reg_No,r.App_No,c.type   from Registration r,Degree d,Department dt,Course c where r.degree_code =d.Degree_Code and dt.Dept_Code =d.Dept_Code and c.Course_Id =d.Course_Id and CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' and Batch_Year =" + batch_year + " and r.degree_code in ('" + itemheader + "')  and isnull(r.Sections,'') in ('" + section.Trim() + "') " + stream + "  and r.college_code='" + collegecode1 + "' ";
                    if (cbFpaid.Checked == true || cbFirstGrad.Checked == true || cbPpaid.Checked == true || cbNpaid.Checked == true)
                    {
                        if (PaidFilter.Trim() != "")
                        {
                            selectquery += " and r.app_no in(" + PaidFilter + ")";
                            selectquery += fgFilter;
                        }
                    }

                    //selectquery += strorderby;
                }
                else
                {
                    selectquery = "select Roll_No,Roll_Admit,smart_serial_no,Stud_Name,d.Degree_Code,(C.Course_Name +' - '+ dt.Dept_Name) as Department,Reg_No,r.App_No,c.type   from Registration r,Degree d,Department dt,Course c where r.degree_code =d.Degree_Code and dt.Dept_Code =d.Dept_Code and c.Course_Id =d.Course_Id and CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR'  and r.college_code='" + collegecode1 + "'  ";


                    if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
                    {
                        //roll no
                        selectquery += "   and Roll_No ='" + txt_rollno3.Text.Trim() + "' ";
                        app_no = d2.GetFunction("select app_no from registration where roll_no='" + txt_rollno3.Text.Trim() + "'  and college_code='" + collegecode1 + "' ");
                    }
                    else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
                    {
                        //reg no
                        selectquery += "  and Reg_No = '" + txt_rollno3.Text.Trim() + "' ";
                        app_no = d2.GetFunction("select app_no from registration where reg_no='" + txt_rollno3.Text.Trim() + "'  and college_code='" + collegecode1 + "' ");
                    }
                    else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
                    {
                        //Admin no
                        selectquery += " and Roll_admit = '" + txt_rollno3.Text.Trim() + "' ";
                        app_no = d2.GetFunction("select app_no from registration where roll_admit='" + txt_rollno3.Text.Trim() + "'  and college_code='" + collegecode1 + "' ");
                    }
                    else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
                    {
                        //Smart card no

                        switch (smartDisp)
                        {
                            case 0:
                                selectquery += "   and Roll_No ='" + txt_rollno3.Text.Trim() + "' ";
                                app_no = d2.GetFunction("select app_no from registration where roll_no='" + txt_rollno3.Text.Trim() + "'  and college_code='" + collegecode1 + "' ");
                                break;
                            case 1:
                                selectquery += "  and Reg_No = '" + txt_rollno3.Text.Trim() + "' ";
                                app_no = d2.GetFunction("select app_no from registration where reg_no='" + txt_rollno3.Text.Trim() + "'  and college_code='" + collegecode1 + "' ");
                                break;
                            case 2:
                                selectquery += " and Roll_admit = '" + txt_rollno3.Text.Trim() + "' ";
                                app_no = d2.GetFunction("select app_no from registration where roll_admit='" + txt_rollno3.Text.Trim() + "'  and college_code='" + collegecode1 + "' ");
                                break;
                        }
                        //  selectquery += " and smart_serial_no = '" + txt_rollno3.Text + "' ";
                    }
                    selectquery += strorderby;
                }
                if (txt_rollno3.Text.Trim() == "")
                {
                    string selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))),r.App_No from FT_FeeAllot f, Registration r, FS_ChlGroupHeaderSettings s,FS_HeaderPrivilage P where f.HeaderFK =p.Headerfk and p.Headerfk=s.HeaderFK and f.HeaderFK =s.HeaderFK  and f.FeeCategory in ('" + feecat + "') and f.App_No =r.App_No and r.degree_code in ('" + itemheader + "') and r.Batch_Year  in (" + batch_year + ") and isnull(r.Sections,'') in ('" + section.Trim() + "')  and r.college_code='" + collegecode1 + "' and p.usercode='" + usercode + "' and isnull(f.istransfer,'0')='0' ";

                    if (ddl_strm.Enabled && ddl_strm.Items.Count > 0)
                    {
                        selQ += "  and s.stream in('" + ddl_strm.SelectedValue + "') ";
                    }

                    if (cb_selcthd.Checked)
                    {
                        string selectedHdrs = GetSelectedItemsValue(cbl_grpheader);
                        if (rbl_headerselect.SelectedIndex == 0)
                        {
                            selectedHdrs = GetSelectedItemsText(cbl_grpheader);
                            selQ += "  and s.ChlGroupHeader in('" + selectedHdrs + "') ";
                        }
                        else if (rbl_headerselect.SelectedIndex == 1)
                        {
                            selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))),r.App_No from FT_FeeAllot f, Registration r where f.FeeCategory in ('" + feecat + "') and f.App_No =r.App_No and r.degree_code in ('" + itemheader + "') and r.Batch_Year  in (" + batch_year + ") and isnull(r.Sections,'') in ('" + section.Trim() + "')  and f.HeaderFK in (" + selectedHdrs + ")  and r.college_code='" + collegecode1 + "' and isnull(f.istransfer,'0')='0'";
                        }
                        else if (rbl_headerselect.SelectedIndex == 2)
                        {
                            selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))),r.App_No from FT_FeeAllot f, Registration r where f.FeeCategory in ('" + feecat + "') and f.App_No =r.App_No and r.degree_code in ('" + itemheader + "') and r.Batch_Year  in (" + batch_year + ") and isnull(r.Sections,'') in ('" + section.Trim() + "')  and f.LedgerFK in (" + selectedHdrs + ")   and r.college_code='" + collegecode1 + "' and isnull(f.istransfer,'0')='0'";//and  f.balamount<>'0'
                        }
                    }
                    selQ += "  group by r.App_No ";
                    selectquery += selQ;
                }
                else
                {
                    string selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))),r.App_No from FT_FeeAllot f, Registration r, FS_ChlGroupHeaderSettings s,FS_HeaderPrivilage P where p.HeaderFK =s.HeaderFK and f.HeaderFK =p.HeaderFK  and f.HeaderFK =s.HeaderFK  and f.FeeCategory in ('" + feecat + "') and f.App_No =r.App_No  and r.App_No ='" + app_no + "' and p.usercode='" + usercode + "' and isnull(f.istransfer,'0')='0'";
                    string type = studentCollType(app_no, true);
                    if (type != string.Empty)
                    {
                        selQ += "  and s.stream in('" + type + "') ";
                    }

                    if (cb_selcthd.Checked)
                    {
                        string selectedHdrs = GetSelectedItemsValue(cbl_grpheader);
                        if (rbl_headerselect.SelectedIndex == 0)
                        {
                            selectedHdrs = GetSelectedItemsText(cbl_grpheader);
                            selQ += "  and s.ChlGroupHeader in('" + selectedHdrs + "') ";
                        }
                        else if (rbl_headerselect.SelectedIndex == 1)
                        {
                            selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))),r.App_No from FT_FeeAllot f, Registration r where f.FeeCategory in ('" + feecat + "')  and f.HeaderFK in (" + selectedHdrs + ")  and f.App_No =r.App_No  and r.App_No ='" + app_no + "' and isnull(f.istransfer,'0')='0' ";
                        }
                        else if (rbl_headerselect.SelectedIndex == 2)
                        {
                            selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)+isnull(chltaken,0))),r.App_No from FT_FeeAllot f, Registration r where f.FeeCategory in ('" + feecat + "')  and f.LedgerFK in (" + selectedHdrs + ")  and f.App_No =r.App_No and r.App_No ='" + app_no + "' and isnull(f.istransfer,'0')='0'";
                        }
                    }
                    selQ += "  group by r.App_No ";
                    selectquery += selQ;
                }

            }
            else
            {
                byte studAppSHrtAdm = StudentAppliedShorlistAdmit();
                string admStudFilter = "";
                string admStudFilTer = "";
                switch (studAppSHrtAdm)
                {
                    case 0:
                        admStudFilter = " and r.isconfirm=1  and isnull(r.selection_status,'0')='0' and isnull(r.admission_status,'0')='0'  and r.app_no not in (select app_no from registration where Degree_Code in('" + itemheader + "')  and batch_year in('" + batch_year + "'))";
                        admStudFilTer = " and r.isconfirm=1  and isnull(r.selection_status,'0')='0' and isnull(r.admission_status,'0')='0' ";
                        break;
                    case 1:
                        admStudFilter = " and r.isconfirm=1 and isnull(r.selection_status,'0')='1' and isnull(r.admission_status,'0')='0'  and r.app_no not in (select app_no from registration where Degree_Code in('" + itemheader + "')  and batch_year in('" + batch_year + "'))";
                        admStudFilTer = " and r.isconfirm=1 and isnull(r.selection_status,'0')='1' and isnull(r.admission_status,'0')='0' ";

                        break;
                    case 2:
                        admStudFilter = " and r.isconfirm=1 and isnull(r.selection_status,'0')='1' and isnull(r.admission_status,'0')='1' and r.app_no not in (select app_no from registration where Degree_Code in('" + itemheader + "')  and batch_year in('" + batch_year + "'))";
                        admStudFilTer = " and r.isconfirm=1 and isnull(r.selection_status,'0')='1' and isnull(r.admission_status,'0')='1' ";
                        break;
                }
                if (txt_rollno3.Text.Trim() == "")
                {
                    string stream = "";
                    if (ddl_strm.Enabled && ddl_strm.Items.Count > 0)
                    {
                        stream = "  and c.type in('" + ddl_strm.SelectedValue + "') ";
                    }

                    selectquery = "  select r.app_formno as  Roll_No,r.app_formno as smart_serial_no,r.app_formno as Roll_Admit,Stud_Name,d.Degree_Code ,(C.Course_Name +' - '+ dt.Dept_Name) as Department,r.app_formno as Reg_No ,r.app_formno,r.App_No,c.type   from applyn r,Degree d,Department dt,Course c where r.degree_code =d.Degree_Code and dt.Dept_Code =d.Dept_Code and c.Course_Id =d.Course_Id   and Batch_Year =" + batch_year + " and r.degree_code in ('" + itemheader + "' ) " + stream + " " + fgFilter + "  " + admStudFilter + "  and r.college_code='" + collegecode1 + "'";
                    if (PaidFilter.Trim() != "")
                    {
                        selectquery += " and r.app_no in(" + PaidFilter + ")";
                    }
                    selectquery = selectquery + " order by Roll_No,d.Degree_Code ";
                }
                else
                {
                    //App no
                    selectquery = "select r.app_formno as  Roll_No,r.app_formno as smart_serial_no,r.app_formno as Roll_Admit,Stud_Name,d.Degree_Code ,(C.Course_Name +' - '+ dt.Dept_Name) as Department,r.app_formno as Reg_No ,r.app_formno,r.App_No,c.type   from applyn r,Degree d,Department dt,Course c where r.degree_code =d.Degree_Code and dt.Dept_Code =d.Dept_Code and c.Course_Id =d.Course_Id   " + admStudFilter + "  and r.college_code='" + collegecode1 + "'  and r.app_formno ='" + txt_rollno3.Text + "'  ";
                    app_no = d2.GetFunction("select app_no from registration where roll_admit='" + txt_rollno3.Text.Trim() + "'  and college_code='" + collegecode1 + "' ");
                }
                if (txt_rollno3.Text.Trim() == "")
                {
                    string addChalAMt = "";
                    if (rdo_challan.Checked)
                    {
                        addChalAMt = "+isnull(chltaken,0)";
                    }
                    string selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)" + addChalAMt + ")),r.App_No from FT_FeeAllot f, applyn r, FS_ChlGroupHeaderSettings s,FS_HeaderPrivilage P where p.HeaderFK =s.HeaderFK and f.HeaderFK =p.HeaderFK    and f.HeaderFK =s.HeaderFK  and f.FeeCategory in ('" + feecat + "') and f.App_No =r.App_No and isnull(f.istransfer,'0')='0'   " + admStudFilTer + "  and r.degree_code in ('" + itemheader + "' ) and r.Batch_Year  in (" + batch_year + ") and p.usercode='" + usercode + "' ";//and isnull(r.Sections,'') in ('" + section.Trim() + "')

                    if (ddl_strm.Enabled && ddl_strm.Items.Count > 0)
                    {
                        selQ += "  and s.stream in('" + ddl_strm.SelectedValue + "') ";
                    }

                    if (cb_selcthd.Checked)
                    {
                        string selectedHdrs = GetSelectedItemsValue(cbl_grpheader);
                        if (rbl_headerselect.SelectedIndex == 0)
                        {
                            selectedHdrs = GetSelectedItemsText(cbl_grpheader);
                            selQ += "  and s.ChlGroupHeader in('" + selectedHdrs + "') ";
                        }
                        else if (rbl_headerselect.SelectedIndex == 1)
                        {
                            selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)" + addChalAMt + ")),r.App_No from FT_FeeAllot f, applyn r where    f.FeeCategory in ('" + feecat + "') and f.App_No =r.App_No and r.degree_code in ('" + itemheader + "' ) and r.Batch_Year  in (" + batch_year + ")  and f.HeaderFK in (" + selectedHdrs + ") and isnull(f.istransfer,'0')='0'  " + admStudFilTer + " ";//and isnull(r.Sections,'') in ('" + section.Trim() + "') 
                        }
                        else if (rbl_headerselect.SelectedIndex == 2)
                        {
                            selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)" + addChalAMt + ")),r.App_No from FT_FeeAllot f, applyn r where    f.FeeCategory in ('" + feecat + "') and f.App_No =r.App_No and r.degree_code in ('" + itemheader + "' ) and r.Batch_Year  in (" + batch_year + ")   and f.LedgerFK in (" + selectedHdrs + ") and isnull(f.istransfer,'0')='0'  " + admStudFilTer + " ";//and isnull(r.Sections,'') in ('" + section.Trim() + "')
                        }
                    }
                    selQ += "  group by r.App_No ";
                    selectquery += selQ;
                }
                else
                {
                    string addChalAMt = "";
                    if (rdo_challan.Checked)
                    {
                        addChalAMt = "+isnull(chltaken,0)";
                    }
                    string selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)" + addChalAMt + ")),r.App_No from FT_FeeAllot f, applyn r, FS_ChlGroupHeaderSettings s,FS_HeaderPrivilage P where f.HeaderFK =p.HeaderFK and p.HeaderFK =s.HeaderFK and  f.HeaderFK =s.HeaderFK  and f.FeeCategory in ('" + feecat + "') and f.App_No =r.App_No  and r.App_No ='" + app_no + "' and isnull(f.istransfer,'0')='0' " + admStudFilTer + "   and p.userCode='" + usercode + "'  ";//and isnull(r.Sections,'') in ('" + section.Trim() + "')

                    string type = studentCollType(app_no, false);
                    if (type != string.Empty)
                    {
                        selQ += "  and s.stream in('" + type + "') ";
                    }
                    if (cb_selcthd.Checked)
                    {
                        string selectedHdrs = GetSelectedItemsValue(cbl_grpheader);
                        if (rbl_headerselect.SelectedIndex == 0)
                        {
                            selectedHdrs = GetSelectedItemsText(cbl_grpheader);
                            selQ += "  and s.ChlGroupHeader in('" + selectedHdrs + "') ";
                        }
                        else if (rbl_headerselect.SelectedIndex == 1)
                        {
                            selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)" + addChalAMt + ")),r.App_No from FT_FeeAllot f, applyn r where    f.FeeCategory in ('" + feecat + "')   and f.HeaderFK in (" + selectedHdrs + ")   and f.App_No =r.App_No  and r.App_No ='" + app_no + "' and isnull(f.istransfer,'0')='0'   " + admStudFilTer + " ";//and isnull(r.Sections,'') in ('" + section.Trim() + "') 
                        }
                        else if (rbl_headerselect.SelectedIndex == 2)
                        {
                            selQ = " select SUM(isnull(TotalAmount,0)-(isnull(paidamount,0)" + addChalAMt + ")),r.App_No from FT_FeeAllot f, applyn r where    f.FeeCategory in ('" + feecat + "')   and f.LedgerFK in (" + selectedHdrs + ")  and f.App_No =r.App_No and r.App_No ='" + app_no + "' and isnull(f.istransfer,'0')='0'  " + admStudFilTer + " ";//and isnull(r.Sections,'') in ('" + section.Trim() + "')
                        }
                    }
                    selQ += "  group by r.App_No ";
                    selectquery += selQ;
                }
            }
            ds.Clear();
            ds = d2.select_method_wo_parameter(selectquery, "Text");
            // double.TryParse(Convert.ToString(d2.GetFunction("select sum(debit) as debit from ft_findailytransaction where headerfk='" + hdrId + "' and ledgerfk='" + ldgerId + "' and feecategory in ('" + feecat + "') and transdate>'" + due + "'")), out tempPaid);
            //double amtvalue = 0;

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                Fpspread1.Sheets[0].RowCount = 1;
                Fpspread1.Sheets[0].ColumnCount = 0;
                Fpspread1.Sheets[0].ColumnHeader.RowCount = 1;
                Fpspread1.CommandBar.Visible = false;
                Fpspread1.Sheets[0].ColumnCount = 9;

                Fpspread1.Sheets[0].RowHeader.Visible = false;
                Fpspread1.Sheets[0].AutoPostBack = false;


                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
                darkstyle.ForeColor = Color.White;
                Fpspread1.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 0].Text = " S.No";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                Fpspread1.Sheets[0].Columns[0].Locked = true;
                Fpspread1.Columns[0].Width = 50;

                FarPoint.Web.Spread.CheckBoxCellType chkall = new FarPoint.Web.Spread.CheckBoxCellType();
                chkall.AutoPostBack = true;

                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                Fpspread1.Columns[1].Width = 80;
                Fpspread1.Sheets[0].Columns[1].Locked = false;
                if (rdo_receipt.Checked && chl_MulRcpt.Checked)
                {
                    Fpspread1.Sheets[0].Columns[1].Visible = true;
                }
                else if (rdo_receipt.Checked || rdo_sngle.Checked)
                {
                    Fpspread1.Sheets[0].Columns[1].Visible = false;
                }
                else if ((rdo_multi.Checked && rdo_challan.Checked))
                {
                    Fpspread1.Sheets[0].Columns[1].Visible = true;
                }

                Fpspread1.Sheets[0].Cells[0, 1].CellType = chkall;
                Fpspread1.Sheets[0].Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;

                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Admission No";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";

                Fpspread1.Sheets[0].Columns[2].Locked = true;
                Fpspread1.Columns[2].Width = 130;

                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Roll No";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                Fpspread1.Sheets[0].Columns[3].Locked = true;
                Fpspread1.Columns[3].Width = 100;

                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Reg No";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                Fpspread1.Sheets[0].Columns[4].Locked = true;
                Fpspread1.Columns[4].Width = 100;

                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Smartcard No";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                Fpspread1.Sheets[0].Columns[5].Locked = true;
                Fpspread1.Columns[5].Width = 100;

                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Name";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
                Fpspread1.Sheets[0].Columns[6].Locked = true;
                Fpspread1.Columns[6].Width = 200;

                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Degree";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 7].Font.Bold = true;
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 7].Font.Name = "Book Antiqua";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 7].HorizontalAlign = HorizontalAlign.Center;
                Fpspread1.Sheets[0].Columns[7].Locked = true;
                Fpspread1.Sheets[0].Columns[7].VerticalAlign = VerticalAlign.Middle;
                Fpspread1.Sheets[0].SetColumnMerge(7, FarPoint.Web.Spread.Model.MergePolicy.Always);
                Fpspread1.Columns[7].Width = 270;

                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 8].Text = "Balance Rs";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 8].Font.Bold = true;
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 8].Font.Name = "Book Antiqua";
                Fpspread1.Sheets[0].ColumnHeader.Cells[0, 8].HorizontalAlign = HorizontalAlign.Right;
                Fpspread1.Sheets[0].Columns[8].Locked = true;
                Fpspread1.Sheets[0].Columns[8].VerticalAlign = VerticalAlign.Middle;
                Fpspread1.Columns[8].Width = 100;

                FarPoint.Web.Spread.TextCellType txtRollno = new FarPoint.Web.Spread.TextCellType();
                FarPoint.Web.Spread.TextCellType txtRegno = new FarPoint.Web.Spread.TextCellType();
                FarPoint.Web.Spread.TextCellType txtRollAd = new FarPoint.Web.Spread.TextCellType();
                FarPoint.Web.Spread.TextCellType txtAppno = new FarPoint.Web.Spread.TextCellType();
                FarPoint.Web.Spread.TextCellType txtSmartno = new FarPoint.Web.Spread.TextCellType();

                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
                {
                    //roll no
                    Fpspread1.Sheets[0].Columns[3].Visible = true;
                    Fpspread1.Sheets[0].Columns[4].Visible = false;
                    Fpspread1.Sheets[0].Columns[2].Visible = false;
                    Fpspread1.Sheets[0].Columns[5].Visible = false;
                }
                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
                {
                    //reg no
                    Fpspread1.Sheets[0].Columns[4].Visible = true;
                    Fpspread1.Sheets[0].Columns[3].Visible = false;
                    Fpspread1.Sheets[0].Columns[2].Visible = false;
                    Fpspread1.Sheets[0].Columns[5].Visible = false;
                }
                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
                {
                    //Admin no
                    Fpspread1.Sheets[0].Columns[2].Visible = true;
                    Fpspread1.Sheets[0].Columns[4].Visible = false;
                    Fpspread1.Sheets[0].Columns[3].Visible = false;
                    Fpspread1.Sheets[0].Columns[5].Visible = false;
                }
                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
                {
                    //Smartcard no
                    Fpspread1.Sheets[0].Columns[5].Visible = false;
                    Fpspread1.Sheets[0].Columns[2].Visible = false;
                    Fpspread1.Sheets[0].Columns[4].Visible = false;
                    Fpspread1.Sheets[0].Columns[3].Visible = false;
                    if (smartDisp == 0)
                        Fpspread1.Sheets[0].Columns[3].Visible = true;
                    else if (smartDisp == 1)
                        Fpspread1.Sheets[0].Columns[4].Visible = true;
                    else if (smartDisp == 2 || smartDisp == 3)
                        Fpspread1.Sheets[0].Columns[2].Visible = true;
                }
                else
                {
                    //App no
                    Fpspread1.Sheets[0].ColumnHeader.Cells[0, 2].Text = "App No";
                    Fpspread1.Sheets[0].Columns[2].Visible = true;
                    Fpspread1.Sheets[0].Columns[4].Visible = false;
                    Fpspread1.Sheets[0].Columns[3].Visible = false;
                    Fpspread1.Sheets[0].Columns[5].Visible = false;
                }

                for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                {

                    //amtvalue = Convert.ToDouble(ds.Tables[1].Rows[row]["column1"]);
                    //if (amtvalue > 0)
                    //{
                    Fpspread1.Sheets[0].RowCount++;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(row + 1);
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(ds.Tables[0].Rows[row]["App_No"]);
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                    //
                    FarPoint.Web.Spread.CheckBoxCellType check = new FarPoint.Web.Spread.CheckBoxCellType();
                    check.AutoPostBack = false;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 1].CellType = check;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;

                    //
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 2].CellType = txtRollAd;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[row]["Roll_Admit"]);
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 3].CellType = txtRollno;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[row]["Roll_No"]);
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";

                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 4].CellType = txtRegno;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[row]["Reg_No"]);
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";

                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 5].CellType = txtSmartno;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(ds.Tables[0].Rows[row]["smart_serial_no"]);
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 5].Font.Size = FontUnit.Medium;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";

                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(ds.Tables[0].Rows[row]["Stud_Name"]);
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 6].Font.Size = FontUnit.Medium;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 6].Font.Name = "Book Antiqua";

                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 7].Tag = Convert.ToString(ds.Tables[0].Rows[row]["Degree_Code"]);
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 7].Text = Convert.ToString(ds.Tables[0].Rows[row]["Department"]);
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 7].HorizontalAlign = HorizontalAlign.Left;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 7].Font.Size = FontUnit.Medium;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 7].Font.Name = "Book Antiqua";

                    double amt = 0.00;
                    if (ds.Tables.Count > 1)
                    {
                        if (ds.Tables[1].Rows.Count > 0)
                        {
                            string appno = Convert.ToString(ds.Tables[0].Rows[row]["App_No"]);
                            ds.Tables[1].DefaultView.RowFilter = " app_no=" + appno;
                            DataView dvAmt = new DataView();
                            dvAmt = ds.Tables[1].DefaultView;
                            if (dvAmt.Count > 0)
                            {
                                double.TryParse(dvAmt[0][0].ToString(), out amt);
                            }
                        }
                    }

                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 8].Text = amt.ToString(); //lookupAmountIndividual().ToString();
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 8].HorizontalAlign = HorizontalAlign.Right;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 8].Font.Size = FontUnit.Medium;
                    Fpspread1.Sheets[0].Cells[Fpspread1.Sheets[0].RowCount - 1, 8].Font.Name = "Book Antiqua";
                    //}
                    Fpspread1.Visible = true;
                    Fpspread1.Sheets[0].PageSize = Fpspread1.Sheets[0].RowCount;
                    Fpspread1.Sheets[0].SpanModel.Add(0, 2, 1, 4);
                    Fpspread1.Sheets[0].FrozenRowCount = 1;

                    Fpspread1.SaveChanges();

                    btn_studOK.Visible = true;
                    btn_exitstud.Visible = true;
                }
            }


            else
            {
                Fpspread1.Visible = false;
                lbl_errormsg.Visible = true;
                lbl_errormsg.Text = "No Records Found";
                btn_studOK.Visible = false;
                btn_exitstud.Visible = false;
            }

        }
        catch (Exception ex)
        { //d2.sendErrorMail(ex, collegecode1, "ChallanReceipt");
        }
    }
    public void bindType()
    {
        try
        {
            if (ddl_college.Items.Count > 0)
            {
                collegecode = ddl_college.SelectedItem.Value.ToString();
            }
            ddl_strm.Items.Clear();
            string selqry = "select distinct type  from Course where college_code ='" + collegecode + "' and type<>''";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_strm.DataSource = ds;
                ddl_strm.DataTextField = "type";
                ddl_strm.DataValueField = "type";
                ddl_strm.DataBind();
            }
            if (ddl_strm.Items.Count > 0)
            {
                if (streamEnabled() == 1)
                    ddl_strm.Enabled = true;
                else
                    ddl_strm.Enabled = false;
            }
            else
                ddl_strm.Enabled = false;
        }
        catch
        { }
    }
    public void bindTypes()
    {
        try
        {
            //cbl_strm.Items.Clear();
            //cb_strm.Checked = false;
            //txt_strm.Text = "--Select--";
            ddl_strm.Items.Clear();
            reuse.bindStreamToDropDown(ddl_strm, Convert.ToString(ddl_college.SelectedItem.Value));
            if (ddl_strm.Items.Count > 0)
                ddl_strm.Enabled = true;
            else
                ddl_strm.Enabled = false;
            //  string query = "select Distinct ISNULL( type,'') as type  from Registration r,Degree d,Department dt,Course c where r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and type<>''  and r.college_code='" + collegecode1 + "'  order by type asc";
            //ds.Clear();
            //ds = d2.select_method_wo_parameter(query, "Text");
            //if (ds.Tables[0].Rows.Count > 0)
            //{
            //    ddl_strm.DataSource = ds;
            //    ddl_strm.DataTextField = "type";
            //    ddl_strm.DataValueField = "type";
            //    ddl_strm.DataBind();
            //    ddl_strm.Enabled = true;

            //    //cbl_strm.DataSource = ds;
            //    //cbl_strm.DataTextField = "type";
            //    //cbl_strm.DataValueField = "type";
            //    //cbl_strm.DataBind();
            //    //if (cbl_strm.Items.Count > 0)
            //    //{
            //    //    for (int i = 0; i < cbl_strm.Items.Count; i++)
            //    //    {
            //    //        cbl_strm.Items[i].Selected = true;
            //    //    }
            //    //    txt_strm.Text = "Stream(" + cbl_strm.Items.Count + ")";
            //    //    cb_strm.Checked = true;
            //    //}
            //    //txt_strm.Enabled = true;
            //}
            //else
            //{
            //    //txt_strm.Enabled = false;
            //    ddl_strm.Enabled = false;
            //}
        }
        catch (Exception ex) { }
    }
    protected void ddl_strm_OnIndexChange(object sender, EventArgs e)
    {
        binddegree2();
        bindbranch1();
        bindsec2();
    }
    protected void cb_strm_OnCheckedChanged(object sender, EventArgs e)
    {
        // CallCheckBoxChangedEvent(cbl_strm, cb_strm, txt_strm, lbl_stream.Text);
        binddegree2();
        bindbranch1();
        bindsec2();
    }
    protected void cbl_strm_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        //CallCheckBoxListChangedEvent(cbl_strm, cb_strm, txt_strm, lbl_stream.Text);
        binddegree2();
        bindbranch1();
        bindsec2();
    }
    protected void cbl_branch1_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cbl_branch1, cb_branch1, txt_branch2, "Branch");
        bindsec2();
    }
    protected void cb_branch1_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cbl_branch1, cb_branch1, txt_branch2, "Branch");
        bindsec2();
    }
    protected void cbl_degree2_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cbl_degree2, cb_degree2, txt_degree2, "Degree");
        bindbranch1();
        bindsec2();
    }
    protected void cb_degree2_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cbl_degree2, cb_degree2, txt_degree2, "Degree");
        bindbranch1();
        bindsec2();
    }
    protected void cb_sec2_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cbl_sec2, cb_sec2, txt_sec2, "Section");
    }
    protected void cbl_sec2_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cbl_sec2, cb_sec2, txt_sec2, "Section");
    }
    public void bindbatch1()
    {
        try
        {
            ddl_batch1.Items.Clear();
            string sqlyear = "select distinct batch_year from Registration where batch_year<>'-1' and batch_year<>'' and cc=0 and delflag=0 and exam_flag<>'debar' order by batch_year desc";
            ds = d2.select_method_wo_parameter(sqlyear, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_batch1.DataSource = ds;
                ddl_batch1.DataTextField = "batch_year";
                ddl_batch1.DataValueField = "batch_year";
                ddl_batch1.DataBind();
            }
        }
        catch (Exception ex) { }
    }
    public void binddegree2()
    {
        try
        {
            ds.Clear();
            cbl_degree2.Items.Clear();
            string stream = "";
            stream = ddl_strm.Items.Count > 0 ? ddl_strm.SelectedValue : "";
            //if (cbl_strm.Items.Count > 0)
            //{
            //    for (int i = 0; i < cbl_strm.Items.Count; i++)
            //    {
            //        if (cbl_strm.Items[i].Selected == true)
            //        {
            //            if (stream == "")
            //            {
            //                stream = Convert.ToString(cbl_strm.Items[i].Value);
            //            }
            //            else
            //            {
            //                stream = stream + "'" + "," + "'" + Convert.ToString(cbl_strm.Items[i].Value);
            //            }
            //        }
            //    }
            //}

            txt_degree2.Text = "--Select--";

            string useCOdeSet = "select LinkValue from New_InsSettings where LinkName='MultipleCollegeUserRights' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
            string colleges = Convert.ToString(d2.GetFunction(useCOdeSet)).Trim();
            if (colleges == "" || colleges == "0")
            {
                colleges = collegecode1;
            }
            //string query = "select distinct degree.course_id,course.course_name from degree,course,deptprivilages  where course.course_id=degree.course_id and course.college_code = degree.college_code  and degree.college_code in (" + collegecode1 + ") and deptprivilages.Degree_code=degree.Degree_code and   user_code=" + usercode + " ";
            string query = "select distinct degree.course_id,course.course_name from degree,course where course.course_id=degree.course_id and course.college_code = degree.college_code  and degree.college_code in (" + collegecode1 + ") ";
            if (ddl_strm.Enabled)//if (txt_strm.Enabled)
            {
                query += " and course.type in ('" + stream + "')";
            }
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_degree2.DataSource = ds;
                cbl_degree2.DataTextField = "course_name";
                cbl_degree2.DataValueField = "course_id";
                cbl_degree2.DataBind();
                if (cbl_degree2.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_degree2.Items.Count; i++)
                    {
                        cbl_degree2.Items[i].Selected = true;
                    }
                    txt_degree2.Text = "Degree(" + cbl_degree2.Items.Count + ")";
                    cb_degree2.Checked = true;
                }
                else
                {
                    txt_degree2.Text = "--Select--";
                }
            }
            else
            {
                txt_degree2.Text = "--Select--";
            }

        }
        catch (Exception ex) { }
    }
    public void bindbranch1()
    {
        try
        {
            cbl_branch1.Items.Clear();

            string branch = "";
            for (int i = 0; i < cbl_degree2.Items.Count; i++)
            {
                if (cbl_degree2.Items[i].Selected == true)
                {
                    if (branch == "")
                    {
                        branch = "" + cbl_degree2.Items[i].Value.ToString() + "";
                    }
                    else
                    {
                        branch = branch + "'" + "," + "" + "'" + cbl_degree2.Items[i].Value.ToString() + "";
                    }
                }
            }
            string commname = "";
            if (branch != "")
            {
                //commname = "select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course,deptprivilages where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.course_id in('" + branch + "') and deptprivilages.Degree_code=degree.Degree_code ";
                commname = "select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.course_id in('" + branch + "') ";
            }
            else
            {
                //commname = " select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course,deptprivilages where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and deptprivilages.Degree_code=degree.Degree_code";
                commname = " select distinct degree.degree_code,department.dept_name,degree.Acronym  from degree,department,course where course.course_id=degree.course_id  and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code ";
            }
            if (branch.Trim() != "")
            {
                ds = d2.select_method_wo_parameter(commname, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_branch1.DataSource = ds;
                    cbl_branch1.DataTextField = "dept_name";
                    cbl_branch1.DataValueField = "degree_code";
                    cbl_branch1.DataBind();



                    if (cbl_branch1.Items.Count > 0)
                    {
                        for (int i = 0; i < cbl_branch1.Items.Count; i++)
                        {
                            cbl_branch1.Items[i].Selected = true;
                        }
                        txt_branch2.Text = "Branch(" + cbl_branch1.Items.Count + ")";
                        cb_branch1.Checked = true;
                    }
                }
                else
                {
                    txt_branch2.Text = "--Select--";
                }
            }
            else
            {
                txt_branch2.Text = "--Select--";
            }
        }
        catch (Exception ex) { }
    }
    public void bindsec2()
    {
        try
        {
            cbl_sec2.Items.Clear();
            txt_sec2.Text = "--Select--";
            ListItem item = new ListItem("Empty", " ");
            if (ddl_batch1.Items.Count > 0)
            {
                string strbatch = Convert.ToString(ddl_batch1.SelectedItem.Value);
                string branch = "";
                for (int i = 0; i < cbl_branch1.Items.Count; i++)
                {
                    if (cbl_branch1.Items[i].Selected == true)
                    {
                        if (branch == "")
                        {
                            branch = "" + cbl_branch1.Items[i].Value.ToString() + "";
                        }
                        else
                        {
                            branch = branch + "" + "," + "" + "" + cbl_branch1.Items[i].Value.ToString() + "";
                        }
                    }
                }
                if (branch != "")
                {
                    DataSet dsSec = d2.BindSectionDetail(strbatch, branch);
                    if (dsSec.Tables.Count > 0)
                    {
                        if (dsSec.Tables[0].Rows.Count > 0)
                        {
                            cbl_sec2.DataSource = dsSec;
                            cbl_sec2.DataTextField = "sections";
                            cbl_sec2.DataValueField = "sections";
                            cbl_sec2.DataBind();


                        }
                    }
                    cbl_sec2.Items.Insert(0, item);
                    for (int i = 0; i < cbl_sec2.Items.Count; i++)
                    {
                        cbl_sec2.Items[i].Selected = true;
                    }
                    cb_sec2.Checked = true;
                    txt_sec2.Text = "Section(" + cbl_sec2.Items.Count + ")";

                }
            }


        }
        catch (Exception ex) { }
    }
    public void bindclg()
    {
        try
        {
            string strUser = d2.getUserCode(Convert.ToString(Session["group_code"]), Convert.ToString(Session["usercode"]), 1);
            ds.Clear();
            ddl_college.Items.Clear();
            selectQuery = "select cp.college_code,cf.collname from collegeprivilages cp,collinfo cf where " + strUser + " and cp.college_code=cf.college_code";
            ds = d2.select_method_wo_parameter(selectQuery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_college.DataSource = ds;
                ddl_college.DataTextField = "collname";
                ddl_college.DataValueField = "college_code";
                ddl_college.DataBind();
            }
        }
        catch (Exception ex) { }
    }
    //popup cash grid

    protected void imagebtnpopGridclose_Click(object sender, EventArgs e)
    {
        div_cash.Visible = false;
    }
    protected void btnGridPop_Click(object sender, EventArgs e)
    {
        if (Txt_amt.Text != "" && Txt_amt.Text != "0" && Txt_amt.Text != "0.00")
        {
            //this.Form.DefaultButton = "btnDenOk";
            if (txt_rollno.Text.Trim() != "" && rbl_rollnoNew.SelectedIndex == 0)
            {
                div_cash.Visible = true;
                bindGrid();
            }
            else if (txtroll_staff.Text.Trim() != "" && rbl_rollnoNew.SelectedIndex == 1)
            {
                div_cash.Visible = true;
                bindGrid();
            }
            else if (txtroll_vendor.Text.Trim() != "" && txtname_vendor.Text.Trim() != "" && rbl_rollnoNew.SelectedIndex == 2)
            {
                div_cash.Visible = true;
                bindGrid();
            }
            else if (txtroll_other.Text.Trim() != "" && rbl_rollnoNew.SelectedIndex == 3)//&& txt_otherMobile.Text.Trim() != ""
            {
                div_cash.Visible = true;
                bindGrid();
            }
            else
            {
                div_cash.Visible = false;

                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                if (rbl_rollnoNew.SelectedIndex == 0)
                {
                    lbl_alert.Text = "Please Enter " + rbl_rollno.SelectedItem.Text;
                }
                else if (rbl_rollnoNew.SelectedIndex == 1)
                {
                    lbl_alert.Text = "Please Enter StaffId";
                }
                else if (rbl_rollnoNew.SelectedIndex == 2)
                {
                    lbl_alert.Text = "Please Enter Vendor And Contact Person";
                }
                else
                {
                    lbl_alert.Text = "Please Enter Name-Mobile";
                }
            }
        }
        else
        {
            div_cash.Visible = false;

            imgAlert.Visible = true;
            //this.Form.DefaultButton = "btn_alertclose";
            lbl_alert.Text = "Please Enter All Details";
        }
    }
    //Popup Ledger
    protected void rblCommInv_Indexchanged(object sender, EventArgs e)
    {
        try
        {
            cb_addExcessFee.Checked = false;
            cb_addExcessFee.Visible = false;
            if (rbl_rollnoNew.SelectedIndex == 0)
            {
                cb_addExcessFee.Visible = true;
                if (txt_rollno.Text.Trim() != "")
                {
                    //this.Form.DefaultButton = "btn_ledgesearch";
                    div_HeaderLed.Visible = true;
                    headerbind();
                    ledgerbind();
                    cbl_semAddFee.Items.Clear();
                    cb_semAddFee.Checked = false;
                    txt_Addfeesem.Text = "Semester/Year";


                    grid_HeaderLedger.DataSource = null;
                    grid_HeaderLedger.DataBind();
                    btn_ledgersave.Visible = false;
                    btn_ledgerExit.Visible = false;
                }
                else
                {
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Enter " + rbl_rollno.SelectedItem.Text;
                }
            }
            else if (rbl_rollnoNew.SelectedIndex == 1)
            {
                if (txtroll_staff.Text.Trim() != "")
                {
                    //this.Form.DefaultButton = "btn_ledgesearch";
                    div_HeaderLed.Visible = true;
                    headerbind();
                    ledgerbind();
                    semesterbind();
                    //UpdatePanel9.Visible = true;
                    grid_HeaderLedger.DataSource = null;
                    grid_HeaderLedger.DataBind();
                    btn_ledgersave.Visible = false;
                    btn_ledgerExit.Visible = false;
                }
                else
                {
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Enter StaffId";
                }
            }
            else if (rbl_rollnoNew.SelectedIndex == 2)
            {
                if (txtroll_vendor.Text.Trim() != "" && txtname_vendor.Text.Trim() != "")
                {
                    //this.Form.DefaultButton = "btn_ledgesearch";
                    div_HeaderLed.Visible = true;
                    headerbind();
                    ledgerbind();
                    semesterbind();
                    //UpdatePanel9.Visible = true;
                    grid_HeaderLedger.DataSource = null;
                    grid_HeaderLedger.DataBind();
                    btn_ledgersave.Visible = false;
                    btn_ledgerExit.Visible = false;
                }
                else
                {
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Enter Vendor And Contact Person";
                }
            }
            else if (rbl_rollnoNew.SelectedIndex == 3)
            {
                if (txtroll_other.Text.Trim() != "")//&& txt_otherMobile.Text.Trim() != ""
                {
                    //this.Form.DefaultButton = "btn_ledgesearch";
                    div_HeaderLed.Visible = true;
                    headerbind();
                    ledgerbind();
                    semesterbind();
                    //UpdatePanel9.Visible = true;
                    grid_HeaderLedger.DataSource = null;
                    grid_HeaderLedger.DataBind();
                    btn_ledgersave.Visible = false;
                    btn_ledgerExit.Visible = false;
                }
                else
                {
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Enter Name";
                }
            }

            if (rblCommInv.SelectedIndex == 0)
            {
                pnlCommonLedger.Visible = true;
                pnlInventLedger.Visible = false;
            }
            else
            {
                pnlCommonLedger.Visible = false;
                pnlInventLedger.Visible = true;

                txtInvSrchCode.Text = "";
                txtInvSrchName.Text = "";

                ledgerbindInv();
                itemStoreBindInv();
                StoreBind();
                // itemDeptBindInv();
                itemHeadBindInv();
                itemSHdrBindInv();
                itemCodeBindInv();
                itemNameBindInv();

                if (Session["viwGridInv"] != null)
                    Session.Remove("viwGridInv");

                gridInv.DataSource = null;
                gridInv.DataBind();
                btnInvSave.Visible = false;
                btnInvExit.Visible = false;
                btnInvDelete.Visible = false;
            }
        }
        catch (Exception ex) { }
    }
    //common Ledger fees
    protected void imagebtnpopLedgerclose_Click(object sender, EventArgs e)
    {
        div_HeaderLed.Visible = false;
        if (Session["viwGridInv"] != null)
            Session.Remove("viwGridInv");
    }
    protected void btnAddFee_Click(object sender, EventArgs e)
    {
        //added by abarna 10.02.2018
        if (checkSchoolSetting() == 0)
        {
            addfeefin.Visible = true;
            addfeefindropdown.Visible = true;
            addfeeloadfinyear();

        }
        else
        {
            addfeefindropdown.Visible = false;
            addfeefin.Visible = false;
        }
        //-----------------
        //UpdatePanel9.Visible = false;
        rblCommInv.SelectedIndex = 0;
        rblCommInv_Indexchanged(sender, e);
        //this.Form.DefaultButton = "btn_ledgesearch";
        if (Session["viwGridInv"] != null)
        {
            Session.Remove("viwGridInv");

        }
        setSearchHeaders();
        LoadYearSemester();
        ddlStudRcpt.Items.Clear();
        cb_addExcessFee.Enabled = false;
        Showfilter();
        string appNo = getAppNo();
        if (!string.IsNullOrEmpty(appNo))
        {
            getStudReceipt(appNo);
        }
    }
    protected void cb_HeaderPop_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cbl_HeaderPop, cb_HeaderPop, txt_HeaderPop, "Header");
        ledgerbind();
        setSearchHeaders();
    }
    protected void cbl_HeaderPop_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cbl_HeaderPop, cb_HeaderPop, txt_HeaderPop, "Header");
        ledgerbind();
        setSearchHeaders();
    }
    public void headerbind()
    {
        try
        {
            txt_HeaderPop.Text = "Header";
            cb_HeaderPop.Checked = false;
            cbl_HeaderPop.Items.Clear();

            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H,FS_HeaderPrivilage P WHERE H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = '" + usercode + "' AND H.CollegeCode = '" + collegecode1 + " '  ";
            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_HeaderPop.DataSource = ds;
                cbl_HeaderPop.DataTextField = "HeaderName";
                cbl_HeaderPop.DataValueField = "HeaderPK";
                cbl_HeaderPop.DataBind();
                for (int i = 0; i < cbl_HeaderPop.Items.Count; i++)
                {
                    cbl_HeaderPop.Items[i].Selected = true;
                }
                txt_HeaderPop.Text = "Header(" + cbl_HeaderPop.Items.Count + ")";
                cb_HeaderPop.Checked = true;
            }

        }
        catch (Exception ex) { }
    }
    protected void cb_ledgerpop_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cbl_ledgerpop, cb_ledgerpop, txt_Ledgerpop, "Ledger");
    }
    protected void cbl_ledgerpop_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cbl_ledgerpop, cb_ledgerpop, txt_Ledgerpop, "Ledger");
    }
    public void ledgerbind()
    {
        try
        {
            txt_Ledgerpop.Text = "Ledger";
            cb_ledgerpop.Checked = false;
            string itemheadercode = "";
            for (int i = 0; i < cbl_HeaderPop.Items.Count; i++)
            {
                if (cbl_HeaderPop.Items[i].Selected == true)
                {
                    if (itemheadercode == "")
                    {
                        itemheadercode = "" + cbl_HeaderPop.Items[i].Value.ToString() + "";
                    }
                    else
                    {
                        itemheadercode = itemheadercode + "" + "," + "" + cbl_HeaderPop.Items[i].Value.ToString() + "";
                    }
                }
            }

            cbl_ledgerpop.Items.Clear();

            //string query = "SELECT Fee_Code,Fee_Type FROM fee_info I,acctheader H WHERE I.header_id = H.header_id AND I.header_id IN ('" + itemheadercode + "') and  Fee_Type NOT IN ('Cash','Income & Expenditure','Misc','Excess Amount','Fine') AND Fee_Type NOT IN (SELECT BankName FROM Bank_Master1) ORDER BY Fee_Type";

            if (itemheadercode == "")
            {
                itemheadercode = "''";
            }
            string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode  and l.LedgerMode=0   AND P. UserCode = '" + usercode + "' AND L.CollegeCode = '" + collegecode1 + "' and L.HeaderFK in (" + itemheadercode + ")";

            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_ledgerpop.DataSource = ds;
                cbl_ledgerpop.DataTextField = "LedgerName";
                cbl_ledgerpop.DataValueField = "LedgerPK";
                cbl_ledgerpop.DataBind();
                for (int i = 0; i < cbl_ledgerpop.Items.Count; i++)
                {
                    cbl_ledgerpop.Items[i].Selected = true;
                }
                txt_Ledgerpop.Text = "Ledger(" + cbl_ledgerpop.Items.Count + ")";
                cb_ledgerpop.Checked = true;
            }
        }
        catch (Exception ex) { }
    }
    public void semesterbind()
    {
        try
        {
            cbl_semAddFee.Items.Clear();
            cb_semAddFee.Checked = false;
            txt_Addfeesem.Text = "Semester/Year";

            linkvalue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");

            if (linkvalue != "")
            {
                DataSet dsSemYear = new DataSet();
                string query = "";
                if (linkvalue == "0")
                {
                    query = "selECT	* from textvaltable where TextCriteria ='FEECA' and textval like '% semester' and college_code=" + collegecode1 + " order by len(textval),textval asc";
                }
                else
                {
                    query = " selECT	* from textvaltable where TextCriteria ='FEECA' and textval like '% Year' and college_code=" + collegecode1 + " order by len(textval),textval asc";
                }
                dsSemYear = d2.select_method_wo_parameter(query, "Text");
                if (dsSemYear.Tables.Count > 0)
                {
                    if (dsSemYear.Tables[0].Rows.Count > 0)
                    {
                        //For Staff

                        cbl_semAddFee.DataSource = dsSemYear;
                        cbl_semAddFee.DataTextField = "TextVal";
                        cbl_semAddFee.DataValueField = "TextCode";
                        cbl_semAddFee.DataBind();

                        for (int i = 0; i < cbl_semAddFee.Items.Count; i++)
                        {
                            cbl_semAddFee.Items[i].Selected = true;
                        }
                        txt_Addfeesem.Text = "Semester/Year(" + cbl_semAddFee.Items.Count + ")";
                        cb_semAddFee.Checked = true;
                    }
                }
            }
        }
        catch (Exception ex) { }
    }
    protected void cb_semAddFee_CheckedChanged(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cbl_semAddFee, cb_semAddFee, txt_Addfeesem, "Semester/Year");
    }
    protected void cbl_semAddFee_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cbl_semAddFee, cb_semAddFee, txt_Addfeesem, "Semester/Year");
    }

    protected void cbsemadd_CheckedChanged(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cblsemadd, cbsemadd, txtsemadd, lbsem.Text);
    }
    protected void cblsemadd_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cblsemadd, cbsemadd, txtsemadd, lbsem.Text);
    }
    static string srchSelHead = string.Empty;
    public void setSearchHeaders()
    {
        StringBuilder sbSelHead = new StringBuilder();
        for (int i = 0; i < cbl_HeaderPop.Items.Count; i++)
        {
            if (cbl_HeaderPop.Items[i].Selected)
            {
                if (sbSelHead.Length == 0)
                {
                    sbSelHead.Append(cbl_HeaderPop.Items[i].Value);
                }
                else
                {
                    sbSelHead.Append("','" + cbl_HeaderPop.Items[i].Value);
                }
            }
        }
        srchSelHead = sbSelHead.ToString();
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetLegerName(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            WebService ws = new WebService();
            string query = " ";

            if (ledgerorheader == 0)
            {
                query = "SELECT  top 100 HeaderName FROM FM_HeaderMaster H,FS_HeaderPrivilage P WHERE H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = " + usercodestat + " AND H.CollegeCode = " + collegecodestat + " and HeaderName Like '" + prefixText + "%' and H.HeaderPK in ('" + srchSelHead + "')   order by HeaderName asc ";

            }
            else
            {
                query = "SELECT  top 100 LedgerName,LedgerPK FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK  and l.LedgerMode=0     AND P.CollegeCode = L.CollegeCode AND P. UserCode = " + usercodestat + " AND L.CollegeCode = " + collegecodestat + "  and L.HeaderFK in ('" + srchSelHead + "')  and LedgerName like '" + prefixText + "%'   order by LedgerName asc";
            }


            name = ws.Getname(query);
            return name;
        }
        catch { return name; }
    }
    protected void btn_ledgesearch_Click(object sender, EventArgs e)
    {
        try
        {
            //this.Form.DefaultButton = "btn_ledgesearch";
            DataTable tbl_Ledger = new DataTable();
            tbl_Ledger.Columns.Add("HeaderName");
            tbl_Ledger.Columns.Add("HeaderPK");
            tbl_Ledger.Columns.Add("LedgerPK");
            tbl_Ledger.Columns.Add("LedgerName");


            string itemheadercode = GetSelectedItemsValue(cbl_HeaderPop);

            string feecode = GetSelectedItemsValue(cbl_ledgerpop);

            string query = " select  HeaderName,HeaderPK,LedgerPK,priority ,LedgerName from  FM_LedgerMaster L,FS_LedgerPrivilage P,FM_HeaderMaster H,FS_HeaderPrivilage Ph WHERE L.LedgerPK = P.LedgerFK and H.HeaderPK = Ph.HeaderFK and p.HeaderFK=H.HeaderPK  and l.LedgerMode=0 and ph.UserCode =p.UserCode  and p.UserCode =" + usercode + "  and h.CollegeCode=" + collegecode1 + " and L.LedgerPK in (" + feecode + ") and H.HeaderPK in (" + itemheadercode + ")  order by Headerpk,LedgerName asc --  order by case when priority is null then 1 else 0 end, priority";
            if (txt_ledgeSearch.Text.Trim() != "")
            {
                if (ddl_ledgeSearch.SelectedIndex == 0)
                {
                    query = " select  HeaderName,HeaderPK,LedgerPK,priority ,LedgerName from  FM_LedgerMaster L,FS_LedgerPrivilage P,FM_HeaderMaster H,FS_HeaderPrivilage Ph WHERE L.LedgerPK = P.LedgerFK and H.HeaderPK = Ph.HeaderFK and p.HeaderFK=H.HeaderPK  and l.LedgerMode=0  and ph.UserCode =p.UserCode  and p.UserCode =" + usercode + "   and h.CollegeCode=" + collegecode1 + " and  H.HeaderName in ('" + txt_ledgeSearch.Text + "')  order by Headerpk,LedgerName asc --  order by case when priority is null then 1 else 0 end, priority";
                }
                else
                {
                    query = " select  HeaderName,HeaderPK,LedgerPK,priority ,LedgerName from  FM_LedgerMaster L,FS_LedgerPrivilage P,FM_HeaderMaster H,FS_HeaderPrivilage Ph WHERE L.LedgerPK = P.LedgerFK and H.HeaderPK = Ph.HeaderFK and p.HeaderFK=H.HeaderPK  and l.LedgerMode=0  and ph.UserCode =p.UserCode  and p.UserCode =" + usercode + "   and h.CollegeCode=" + collegecode1 + " and L.LedgerName in ('" + txt_ledgeSearch.Text + "') order by Headerpk,LedgerName asc -- order by case when priority is null then 1 else 0 end, priority";
                }
            }

            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        DataRow drLedger = tbl_Ledger.NewRow();
                        drLedger["HeaderName"] = Convert.ToString(ds.Tables[0].Rows[i]["HeaderName"]);
                        drLedger["HeaderPK"] = Convert.ToString(ds.Tables[0].Rows[i]["HeaderPK"]);
                        drLedger["LedgerPK"] = Convert.ToString(ds.Tables[0].Rows[i]["LedgerPK"]);
                        drLedger["LedgerName"] = Convert.ToString(ds.Tables[0].Rows[i]["LedgerName"]);
                        tbl_Ledger.Rows.Add(drLedger);
                    }

                    grid_HeaderLedger.DataSource = tbl_Ledger;
                    grid_HeaderLedger.DataBind();
                    grid_HeaderLedger.Visible = true;
                    btn_ledgersave.Visible = true;
                    btn_ledgerExit.Visible = true;
                }
                else
                {
                    grid_HeaderLedger.DataSource = null;
                    grid_HeaderLedger.DataBind();
                    btn_ledgersave.Visible = false;
                    btn_ledgerExit.Visible = false;
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "No Records Found";
                }
            }
            else
            {
                grid_HeaderLedger.DataSource = null;
                grid_HeaderLedger.DataBind();
                btn_ledgersave.Visible = false;
                btn_ledgerExit.Visible = false;
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "No Records Found";
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, collegecode1, "ChallanReceipt");

            grid_HeaderLedger.DataSource = null;
            grid_HeaderLedger.DataBind();
            btn_ledgersave.Visible = false;
            btn_ledgerExit.Visible = false;
        }
    }
    protected void grid_HeaderLedger_OnDataBound(object sender, EventArgs e)
    {
        string hdrOld = string.Empty;
        string hdrNew = string.Empty;
        List<Color> clrList = NewColors();
        int clrIndx = 0;
        foreach (GridViewRow gRow in grid_HeaderLedger.Rows)
        {
            Label lbl_headpop = (Label)gRow.FindControl("lbl_headpop");
            if (hdrOld == string.Empty)
            {
                hdrOld = lbl_headpop.Text.Trim();
                hdrNew = hdrOld;
                clrIndx = 0;
            }
            else
            {
                hdrNew = lbl_headpop.Text.Trim();
                if (hdrNew != hdrOld)
                {
                    hdrOld = hdrNew;
                    clrIndx++;
                    if (clrIndx > 15)
                        clrIndx = 0;
                }
            }
            gRow.BackColor = clrList[clrIndx];
        }
    }

    private List<Color> NewColors()
    {
        List<Color> clrList = new List<Color>();
        clrList.Add(Color.FromArgb(150, 206, 180));
        clrList.Add(Color.FromArgb(32, 178, 153));
        clrList.Add(Color.FromArgb(227, 224, 204));
        clrList.Add(Color.FromArgb(107, 139, 35));
        clrList.Add(Color.FromArgb(249, 204, 172));
        clrList.Add(Color.FromArgb(244, 166, 136));
        clrList.Add(Color.FromArgb(224, 99, 119));
        clrList.Add(Color.FromArgb(184, 169, 201));
        clrList.Add(Color.FromArgb(217, 236, 208));
        clrList.Add(Color.FromArgb(228, 209, 209));
        clrList.Add(Color.FromArgb(176, 170, 192));
        clrList.Add(Color.FromArgb(119, 168, 168));
        clrList.Add(Color.FromArgb(255, 204, 92));
        clrList.Add(Color.FromArgb(135, 189, 216));
        clrList.Add(Color.FromArgb(255, 165, 0));
        clrList.Add(Color.FromArgb(135, 206, 235));
        return clrList;
    }
    protected void btnpopLedgersave_Click(object sender, EventArgs e)
    {
        try
        {
            int insok = 0;
            bool insOK = false;
            bool isVal = false;
            // string hid = string.Empty;
            string ledgername = string.Empty;//added by abarna
            string allotamt = string.Empty;
            string batch_year = string.Empty;
            string rollNo = txt_rollno.Text.Trim();
            if (grid_HeaderLedger.Rows.Count > 0)
            {
                double payAMTVal = 0.00;
                if (rbl_rollnoNew.SelectedIndex == 0)
                {
                    #region Add Ledgers For Student
                    //Year or sem
                    string linkvalue = string.Empty;
                    string rollno = txt_rollno.Text.Trim();

                    string finYeaid = d2.getCurrentFinanceYear(usercode, collegecode1);
                    if (checkSchoolSetting() == 0)
                    {
                        //addfeeloadfinyear();
                        finYeaid = Convert.ToString(ddlfinyear.SelectedValue);
                    }

                    string feecat = Convert.ToString(GetSelectedItemsValue(cblsemadd));
                    if (rollno != "")
                    {
                        if (!string.IsNullOrEmpty(feecat))
                        {
                            if (!cb_addExcessFee.Checked)
                            {
                                for (row = 0; row < grid_HeaderLedger.Rows.Count; row++)
                                {
                                    Label lbl_headerId = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_headeridpop");
                                    Label lbl_fee_code = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_ledgeridpop");
                                    Label lbl_fee_cat = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_legerpop");
                                    TextBox txtNewLedger = (TextBox)grid_HeaderLedger.Rows[row].FindControl("txt_NewLedger");

                                    string hid = lbl_headerId.Text;
                                    string lid = lbl_fee_code.Text;
                                    string lname = lbl_fee_cat.Text;
                                    string amt = txtNewLedger.Text;

                                    string text_circode = string.Empty;
                                    string appno = string.Empty;
                                    string seattype = string.Empty;
                                    string cursem = string.Empty;


                                    if (amt != "" && Convert.ToDouble(amt) != null && Convert.ToDouble(amt) != 0)
                                    {

                                        string seattypeCurQuery = " select seattype,r.Current_Semester,r.Batch_Year,a.app_no  from applyn a,Registration r where a.app_no=r.App_No  and r.college_code=" + collegecode1 + " ";

                                        if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
                                        {
                                            //roll no
                                            seattypeCurQuery += "  and r.Roll_No =  '" + rollno + "' ";
                                        }
                                        else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
                                        {
                                            //reg no
                                            seattypeCurQuery += " and  R.Reg_No = '" + rollno + "' ";
                                        }
                                        else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
                                        {
                                            //Admin no
                                            seattypeCurQuery += " and  R.Roll_admit = '" + rollno + "' ";
                                        }
                                        else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
                                        {
                                            //Smart no
                                            seattypeCurQuery += " and  R.smart_serial_no = '" + rollno + "' ";
                                        }
                                        else
                                        {

                                            seattypeCurQuery = "select seattype,batch_year,app_no from applyn where  college_code=" + collegecode1 + " and app_formno ='" + rollno + "'";
                                            cursem = "1";
                                            //appno = rollno;
                                        }

                                        //rollno = lblstaticrollno.Text;

                                        DataSet dsSTYpe = new DataSet();
                                        dsSTYpe = d2.select_method_wo_parameter(seattypeCurQuery, "Text");
                                        if (dsSTYpe.Tables.Count > 0)
                                        {
                                            if (dsSTYpe.Tables[0].Rows.Count > 0)
                                            {
                                                seattype = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["seattype"]);
                                                batch_year = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["batch_year"]);
                                                appno = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["app_no"]);
                                                #region Add To Fee Allot
                                                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) != 3)
                                                {
                                                    cursem = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["Current_Semester"]);
                                                }

                                                if (cursem != "" && batch_year != "")
                                                {
                                                    //    string settingquery = "select * from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
                                                    //    ds.Clear();
                                                    //    string linkName = string.Empty;
                                                    //    ds = d2.loadFeecategory(collegecode1, usercode, ref linkName);
                                                    //    // ds = d2.select_method_wo_parameter(settingquery, "Text");
                                                    //    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                                    //    {
                                                    //        if (linkName.ToLower().Trim() == "term")
                                                    //        {
                                                    //            ds.Tables[0].DefaultView.RowFilter = " textval ='" + linkName + " " + cursem + "'";
                                                    //        }
                                                    //        else
                                                    //        {
                                                    //            string clgOrSem = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'").Trim();
                                                    //            if (clgOrSem == "1")
                                                    //            {
                                                    //                cursem = returnYearforSem(cursem);
                                                    //            }

                                                    //            ds.Tables[0].DefaultView.RowFilter = " textval ='" + cursem + " " + linkName + "'";
                                                    //        }
                                                    //        DataView dvTextCode = ds.Tables[0].DefaultView;
                                                    //        if (dvTextCode.Count > 0)
                                                    //        {
                                                    //            text_circode = dvTextCode[0]["TextCode"].ToString();
                                                    //        }
                                                    //    }

                                                    //if (text_circode != "")
                                                    //{
                                                    for (int i = 0; i < cblsemadd.Items.Count; i++)
                                                    {
                                                        if (cblsemadd.Items[i].Selected)
                                                        {
                                                            string selectQuery = "";
                                                            string updateQuery = "";
                                                            string finalQuery = "";
                                                            if (checkSchoolSetting() == 0)
                                                            {
                                                                string insertQuery = " INSERT INTO FT_FeeAllot(AllotDate,MemType,PayMode,App_No,LedgerFK,HeaderFK,FeeAmount,TotalAmount,FeeCategory,BalAmount,FinYearFK,FromGovtAmt, DeductReason) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1,1," + appno + "," + lid + "," + hid + "," + amt + "," + amt + "," + cblsemadd.Items[i].Value + "," + amt + "," + finYeaid + ",0,0) ";

                                                                selectQuery = " select * from FT_FeeAllot where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + cblsemadd.Items[i].Value + "')  and App_No in('" + appno + "') and isnull(istransfer,'0')='0' and FinYearFK='" + finYeaid + "'";

                                                                updateQuery = "  update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "', MemType=1,FeeAmount=isnull(FeeAmount,0)+" + amt + ",BalAmount=isnull(BalAmount,0)+" + amt + ",TotalAmount=isnull(TotalAmount,0)+" + amt + ",FinYearFK='" + finYeaid + "' where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + cblsemadd.Items[i].Value + "')  and App_No in('" + appno + "') and isnull(istransfer,'0')='0' and FinYearFK='" + finYeaid + "'";
                                                                finalQuery = " if exists ( " + selectQuery + " ) " + updateQuery + " else " + insertQuery + " ";
                                                            }
                                                            else
                                                            {
                                                                string insertQuery = " INSERT INTO FT_FeeAllot(AllotDate,MemType,PayMode,App_No,LedgerFK,HeaderFK,FeeAmount,TotalAmount,FeeCategory,BalAmount,FinYearFK,FromGovtAmt, DeductReason) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1,1," + appno + "," + lid + "," + hid + "," + amt + "," + amt + "," + cblsemadd.Items[i].Value + "," + amt + "," + finYeaid + ",0,0) ";

                                                                selectQuery = " select * from FT_FeeAllot where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + cblsemadd.Items[i].Value + "')  and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";

                                                                updateQuery = "  update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "', MemType=1,FeeAmount=isnull(FeeAmount,0)+" + amt + ",BalAmount=isnull(BalAmount,0)+" + amt + ",TotalAmount=isnull(TotalAmount,0)+" + amt + " where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + cblsemadd.Items[i].Value + "')  and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";
                                                                finalQuery = " if exists ( " + selectQuery + " ) " + updateQuery + " else " + insertQuery + " ";
                                                            }
                                                            insok = d2.update_method_wo_parameter(finalQuery, "Text");
                                                            insOK = true;
                                                            double amtVal = Convert.ToDouble(amt);
                                                            payAMTVal += amtVal;
                                                            allotamt = amt;
                                                            ledgername = lname;
                                                        }

                                                    }
                                                }
                                                #endregion

                                            }
                                        }

                                    }
                                }
                                //=================== Added by aparna ===================//
                                int savevalue = 1;
                                string entrycode = Session["Entry_Code"].ToString();
                                string formname = "Add Fees";
                                string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                string doa = DateTime.Now.ToString("MM/dd/yyy");
                                IPHostEntry host;
                                string localip = "";
                                host = Dns.GetHostEntry(Dns.GetHostName());
                                foreach (IPAddress ip in host.AddressList)
                                {
                                    if (ip.AddressFamily.ToString() == "InterNetwork")
                                    {
                                        localip = ip.ToString();
                                    }
                                }
                                string details = "Roll No:" + rollNo + " : Batch Year - " + batch_year + " : Amount - " + payAMTVal + " : Date - " + toa + " ";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";

                                string ctsname = "";
                                if (savevalue == 1)
                                {
                                    ctsname = "Fees Added";
                                }
                                string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                //================================================================================//
                            }
                            else
                            {
                                #region Excess Fees
                                // string excessAmount = txt_examt.Text;

                                string appnoQ = " select a.app_no  from applyn a,Registration r where a.app_no=r.App_No  and a.college_code=" + collegecode1 + " ";
                                string cursemq = "select r.Current_Semester  from applyn a,Registration r where a.app_no=r.App_No  and a.college_code=" + collegecode1 + "";

                                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
                                {
                                    //roll no
                                    appnoQ += "  and r.Roll_No =  '" + rollno + "' ";
                                    cursemq += "  and r.Roll_No =  '" + rollno + "' ";
                                }
                                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
                                {
                                    //reg no
                                    appnoQ += " and  R.Reg_No = '" + rollno + "' ";
                                    cursemq += " and  R.Reg_No = '" + rollno + "' ";
                                }
                                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
                                {
                                    //Admin no
                                    appnoQ += " and  R.Roll_admit = '" + rollno + "' ";
                                    cursemq += " and  R.Reg_No = '" + rollno + "' ";
                                }
                                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
                                {
                                    //Smart no
                                    appnoQ += " and  R.smart_serial_no = '" + rollno + "' ";
                                    cursemq += " and  R.Reg_No = '" + rollno + "' ";
                                }
                                else
                                {
                                    appnoQ = "select app_no from applyn where  college_code=" + collegecode1 + " and app_formno ='" + rollno + "'";
                                    //appno = rollno;
                                }

                                bool exInsreceiptOk = false;
                                string appnoNew = d2.GetFunction(appnoQ).Trim();
                                string receiptNo = string.Empty;
                                string receiptDate = string.Empty;
                                if (cb_addExcessFee.Checked && ddlStudRcpt.Items.Count > 0)
                                {
                                    receiptNo = Convert.ToString(ddlStudRcpt.SelectedItem.Text);
                                    receiptDate = Convert.ToString(ddlStudRcpt.SelectedItem.Value);
                                    receiptDate = receiptDate.Split('/')[1] + "/" + receiptDate.Split('/')[0] + "/" + receiptDate.Split('/')[2];
                                    exInsreceiptOk = true;
                                }
                                else
                                    exInsreceiptOk = true;
                                bool exInsOk = false;
                                double exAmtOvall = 0;
                                foreach (GridViewRow row in grid_HeaderLedger.Rows)
                                {
                                    TextBox txtexAmt = (TextBox)row.FindControl("txt_NewLedger");
                                    if (txtexAmt.Text != "")
                                    {
                                        if (Convert.ToDouble(txtexAmt.Text) > 0)
                                        {
                                            //To chk whole insertion
                                            exInsOk = true;
                                            exAmtOvall += Convert.ToDouble(txtexAmt.Text);
                                        }
                                    }
                                }
                                if (exInsOk && exInsreceiptOk)
                                {
                                    string excessFeecat = "0";
                                    string curSemEx = "1";
                                    curSemEx = d2.GetFunction(cursemq).Trim();
                                    if (curSemEx == "" || curSemEx == "0")
                                    {
                                        curSemEx = "1";
                                    }
                                    string clgOrSem = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'").Trim();

                                    string settingquery = "select * from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
                                    ds.Clear();
                                    string linkName = string.Empty;
                                    ds = d2.loadFeecategory(collegecode1, usercode, ref linkName);
                                    // ds = d2.select_method_wo_parameter(settingquery, "Text");
                                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                    {
                                        if (linkName.ToLower().Trim() == "term")
                                        {
                                            linkName = "Term";
                                            ds.Tables[0].DefaultView.RowFilter = " textval ='" + linkName + " " + curSemEx + "'";
                                        }
                                        else
                                        {
                                            if (clgOrSem == "1")
                                            {
                                                linkName = "Year";
                                                curSemEx = returnYearforSem(curSemEx);
                                            }
                                            else
                                                linkName = "Semester";
                                            ds.Tables[0].DefaultView.RowFilter = " textval ='" + curSemEx + " " + linkName + "'";
                                        }
                                        DataView dvTextCode = ds.Tables[0].DefaultView;
                                        if (dvTextCode.Count > 0)
                                        {
                                            excessFeecat = dvTextCode[0]["TextCode"].ToString();
                                        }
                                    }
                                    string payMode = string.Empty;
                                    if (rb_cash.Checked)
                                        payMode = "1";
                                    else if (rb_cheque.Checked)
                                        payMode = "2";
                                    else if (rb_dd.Checked)
                                        payMode = "3";
                                    else if (rb_card.Checked)
                                        payMode = "6";
                                    else if (rb_NEFT.Checked)
                                        payMode = "7";
                                    string actualfinYeaid = "";
                                    actualfinYeaid = Convert.ToString(ddlfinyear.SelectedValue);
                                    if (checkSchoolSetting() == 0)
                                    {
                                        //addfeeloadfinyear();
                                        finYeaid = d2.getCurrentFinanceYear(usercode, collegecode1);
                                        actualfinYeaid = Convert.ToString(ddlfinyear.SelectedValue);
                                    }

                                    //school wise actual finyear added in the ft_excessdet table (by  abarna 12.02.2018)
                                    string insOverallQ = "if exists (select * from FT_ExcessDet where App_No ='" + appnoNew + "'  and ExcessType ='1' and Ex_paymode='" + payMode + "' and  FinYearFK ='" + finYeaid + "' and actualfinyearfk='" + actualfinYeaid + "') update FT_ExcessDet set ExcessTransDate='" + DateTime.Now.Date + "',TransTime='" + DateTime.Now.ToLongTimeString() + "' ,DailyTransCode='' ,ExcessAmt=isnull(ExcessAmt,0)+" + exAmtOvall + ",BalanceAmt =isnull(BalanceAmt,0)+" + exAmtOvall + ",Feecategory=" + excessFeecat + " where App_No ='" + appnoNew + "'  and ExcessType ='1' and Ex_paymode='" + payMode + "' and Ex_JournalEntry='0' else INSERT INTO FT_ExcessDet (ExcessTransDate,TransTime ,DailyTransCode,App_No ,MemType ,ExcessType ,ExcessAmt,AdjAmt,BalanceAmt,FinYearFK ,Feecategory,Ex_paymode,actualfinyearfk,Ex_JournalEntry) VALUES ('" + DateTime.Now.Date + "','" + DateTime.Now.ToLongTimeString() + "' ,'', " + appnoNew + " , 1 , 1 ," + exAmtOvall + ",0," + exAmtOvall + "," + finYeaid + "," + excessFeecat + ",'" + payMode + "','" + actualfinYeaid + "',0)";//and FinYearFK ='" + finYeaid + "' and FinYearFK ='" + finYeaid + "'


                                    d2.update_method_wo_parameter(insOverallQ, "Text");

                                    string ExcessDetFK = d2.GetFunction("select distinct ExcessDetPK from FT_ExcessDet where App_No=" + appnoNew + "   and ExcessType ='1' and Ex_paymode='" + payMode + "'");//and FinYearFK ='" + finYeaid + "'

                                    foreach (GridViewRow row in grid_HeaderLedger.Rows)
                                    {
                                        Label hdrid = (Label)row.FindControl("lbl_headeridpop");
                                        // Label hdrname = (Label)row.FindControl("lbl_headpEx");
                                        Label lgeid = (Label)row.FindControl("lbl_ledgeridpop");
                                        //Label lgename = (Label)row.FindControl("lbl_ledgerEx");
                                        Label catid = (Label)row.FindControl("lbl_legerpop");
                                        //Label catname = (Label)row.FindControl("lbl_categoryEx");
                                        TextBox txtexAmt = (TextBox)row.FindControl("txt_NewLedger");
                                        if (txtexAmt.Text != "")
                                        {
                                            if (Convert.ToDouble(txtexAmt.Text) > 0)
                                            {
                                                double exAmtVal = Convert.ToDouble(txtexAmt.Text);

                                                string insQ = " if exists (select * from FT_ExcessLedgerDet where HeaderFK ='" + hdrid.Text + "' and LedgerFK ='" + lgeid.Text + "' and ExcessDetFK='" + ExcessDetFK + "' and Feecategory=" + excessFeecat + " ) update FT_ExcessLedgerDet set ExcessAmt=isnull(ExcessAmt,0)+ " + exAmtVal + "   ,BalanceAmt=isnull(BalanceAmt,0)+ " + exAmtVal + ",Finyearfk=" + finYeaid + ",Feecategory=" + excessFeecat + "  where  HeaderFK ='" + hdrid.Text + "' and LedgerFK ='" + lgeid.Text + "' and ExcessDetFK='" + ExcessDetFK + "' else  INSERT INTO FT_ExcessLedgerDet(HeaderFK, LedgerFK ,ExcessAmt , AdjAmt ,BalanceAmt , ExcessDetFK,Finyearfk,Feecategory) VALUES (" + hdrid.Text + "," + lgeid.Text + " ," + exAmtVal + " ,0, " + exAmtVal + " , " + ExcessDetFK + "," + finYeaid + "," + excessFeecat + ") ";

                                                d2.update_method_wo_parameter(insQ, "Text");
                                                //and Finyearfk=" + finYeaid + "
                                                string insExcessRcpt = " if exists (select * from ft_excessReceiptdet where app_no='" + appnoNew + "' and receiptno='" + receiptNo + "' and ledgerfk='" + lgeid.Text + "' and excesstype='1' and Ex_Rpt_paymode='" + payMode + "') update ft_excessReceiptdet set amount=isnull(amount,'0')+'" + exAmtVal + "' where app_no='" + appnoNew + "' and receiptno='" + receiptNo + "' and ledgerfk='" + lgeid.Text + "' and excesstype='1' and Ex_Rpt_paymode='" + payMode + "' else  insert into ft_excessReceiptdet (app_no , amount , receiptno ,rcptdate,ledgerfk,excesstype,Ex_Rpt_paymode) values ('" + appnoNew + "', '" + exAmtVal + "', '" + receiptNo + "','" + DateTime.Now.Date.ToString() + "','" + lgeid.Text + "','1','" + payMode + "')";
                                                d2.update_method_wo_parameter(insExcessRcpt, "Text");
                                                insOK = true;
                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                        }
                        else
                            isVal = true;
                    }
                    #endregion
                    //Added
                    if (!hideGridFeeAmt() || !hideGridDedAmt() || !hideGridTotAmt() || !hideGridPaidAmt())
                    {
                        Txt_amt.Text = payAMTVal.ToString();
                    }
                    loadGridStudent();

                }
                else if (rbl_rollnoNew.SelectedIndex == 1)
                {
                    #region Add Ledgers For Staff
                    //Year or sem
                    string clgcode = string.Empty;
                    clgcode = getClgCode();
                    string rollno = txtroll_staff.Text.Trim();
                    string finYeaid = d2.getCurrentFinanceYear(usercode, collegecode1);

                    if (rollno != "")
                    {
                        for (row = 0; row < grid_HeaderLedger.Rows.Count; row++)
                        {
                            Label lbl_headerId = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_headeridpop");
                            Label lbl_fee_code = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_ledgeridpop");
                            Label lbl_fee_cat = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_legerpop");
                            TextBox txtNewLedger = (TextBox)grid_HeaderLedger.Rows[row].FindControl("txt_NewLedger");

                            string hid = lbl_headerId.Text;
                            string lid = lbl_fee_code.Text;
                            string lname = lbl_fee_cat.Text;
                            string amt = txtNewLedger.Text;

                            string text_circode = string.Empty;
                            string appno = string.Empty;
                            string cursem = "0";

                            if (amt != "" && Convert.ToDouble(amt) != null && Convert.ToDouble(amt) != 0)
                            {
                                appno = d2.GetFunction("select a.appl_id from staffmaster s,staff_appl_master a where s.appl_no=a.appl_no and s.staff_code='" + rollno + "' and s.college_code in('" + clgcode + "') ");

                                if (appno != "" && appno != "0")
                                {
                                    text_circode = cursem;
                                    string memtype = "1";
                                    switch (rbl_rollnoNew.SelectedIndex)
                                    {
                                        case 0:
                                            memtype = "1";
                                            break;
                                        case 1:
                                            memtype = "2";
                                            break;
                                        case 2:
                                            memtype = "3";
                                            break;
                                        case 3:
                                            memtype = "4"; ;
                                            break;
                                    }

                                    string selectQuery = "";
                                    string updateQuery = "";

                                    string insertQuery = " INSERT INTO FT_FeeAllot(AllotDate,MemType,PayMode,App_No,LedgerFK,HeaderFK,FeeAmount,TotalAmount,FeeCategory,BalAmount,FinYearFK,FromGovtAmt, DeductReason) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "'," + memtype + ",1," + appno + "," + lid + "," + hid + "," + amt + "," + amt + "," + text_circode + "," + amt + "," + finYeaid + ",0,0) ";

                                    selectQuery = " select * from FT_FeeAllot where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "')  and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";

                                    updateQuery = "  update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "', MemType=" + memtype + ",FeeAmount=isnull(FeeAmount,0)+" + amt + ",BalAmount=isnull(BalAmount,0)+" + amt + ",TotalAmount=isnull(TotalAmount,0)+" + amt + " where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "')  and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";


                                    string finalQuery = " if exists ( " + selectQuery + " ) " + updateQuery + " else " + insertQuery + " ";
                                    insok = d2.update_method_wo_parameter(finalQuery, "Text");
                                    insOK = true;

                                    double amtVal = Convert.ToDouble(amt);
                                    payAMTVal += amtVal;
                                }
                            }
                        }
                        //=================== Added by aparna ===================//
                        int savevalue = 1;
                        string entrycode = Session["Entry_Code"].ToString();
                        string formname = "Add Fees";
                        string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                        string doa = DateTime.Now.ToString("MM/dd/yyy");
                        IPHostEntry host;
                        string localip = "";
                        host = Dns.GetHostEntry(Dns.GetHostName());
                        foreach (IPAddress ip in host.AddressList)
                        {
                            if (ip.AddressFamily.ToString() == "InterNetwork")
                            {
                                localip = ip.ToString();
                            }
                        }
                        string details = "StaffCode:" + rollno + " : Amount - " + payAMTVal + " : Date - " + toa + " ";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";

                        string ctsname = "";
                        if (savevalue == 1)
                        {
                            ctsname = "Fees Added";
                        }
                        string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                        d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                        //================================================================================//
                    }
                    #endregion
                    if (!hideGridFeeAmt() || !hideGridDedAmt() || !hideGridTotAmt() || !hideGridPaidAmt())
                    {
                        Txt_amt.Text = payAMTVal.ToString();
                    }
                    loadGridStaff();
                }
                else if (rbl_rollnoNew.SelectedIndex == 2)
                {
                    #region Add Ledgers For Vendor
                    //Year or sem
                    string rollno = txtroll_vendor.Text.Trim();
                    try
                    {
                        rollno = rollno.Split('-')[2];
                    }
                    catch { rollno = ""; }
                    string finYeaid = d2.getCurrentFinanceYear(usercode, collegecode1);

                    if (rollno != "")
                    {
                        for (row = 0; row < grid_HeaderLedger.Rows.Count; row++)
                        {
                            Label lbl_headerId = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_headeridpop");
                            Label lbl_fee_code = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_ledgeridpop");
                            Label lbl_fee_cat = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_legerpop");
                            TextBox txtNewLedger = (TextBox)grid_HeaderLedger.Rows[row].FindControl("txt_NewLedger");

                            string hid = lbl_headerId.Text;
                            string lid = lbl_fee_code.Text;
                            string lname = lbl_fee_cat.Text;
                            string amt = txtNewLedger.Text;

                            string text_circode = string.Empty;
                            string appno = string.Empty;
                            string cursem = "0";


                            if (amt != "" && Convert.ToDouble(amt) != null && Convert.ToDouble(amt) != 0)
                            {
                                appno = rollno;
                                if (appno != "" && appno != "0")
                                {
                                    text_circode = cursem;
                                    string memtype = "1";
                                    switch (rbl_rollnoNew.SelectedIndex)
                                    {
                                        case 0:
                                            memtype = "1";
                                            break;
                                        case 1:
                                            memtype = "2";
                                            break;
                                        case 2:
                                            memtype = "3";
                                            break;
                                        case 3:
                                            memtype = "4"; ;
                                            break;
                                    }

                                    string selectQuery = "";
                                    string updateQuery = "";

                                    string insertQuery = " INSERT INTO FT_FeeAllot(AllotDate,MemType,PayMode,App_No,LedgerFK,HeaderFK,FeeAmount,TotalAmount,FeeCategory,BalAmount,FinYearFK,FromGovtAmt, DeductReason) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "'," + memtype + ",1," + appno + "," + lid + "," + hid + "," + amt + "," + amt + "," + text_circode + "," + amt + "," + finYeaid + ",0,0) ";

                                    selectQuery = " select * from FT_FeeAllot where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "')  and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";

                                    updateQuery = "  update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "', MemType=" + memtype + ",FeeAmount=isnull(FeeAmount,0)+" + amt + ",BalAmount=isnull(BalAmount,0)+" + amt + ",TotalAmount=isnull(TotalAmount,0)+" + amt + " where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "')  and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";


                                    string finalQuery = " if exists ( " + selectQuery + " ) " + updateQuery + " else " + insertQuery + " ";
                                    insok = d2.update_method_wo_parameter(finalQuery, "Text");
                                    insOK = true;

                                    double amtVal = Convert.ToDouble(amt);
                                    payAMTVal += amtVal;
                                }


                            }
                        }
                        //=================== Added by aparna ===================//
                        int savevalue = 1;
                        string entrycode = Session["Entry_Code"].ToString();
                        string formname = "Add Fees";
                        string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                        string doa = DateTime.Now.ToString("MM/dd/yyy");
                        IPHostEntry host;
                        string localip = "";
                        host = Dns.GetHostEntry(Dns.GetHostName());
                        foreach (IPAddress ip in host.AddressList)
                        {
                            if (ip.AddressFamily.ToString() == "InterNetwork")
                            {
                                localip = ip.ToString();
                            }
                        }
                        string details = "VendorCode:" + rollno + " : Amount - " + payAMTVal + " : Date - " + toa + "  ";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";

                        string ctsname = "";
                        if (savevalue == 1)
                        {
                            ctsname = "Fees Added";
                        }
                        string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                        d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                        //================================================================================//
                    }
                    #endregion
                    if (!hideGridFeeAmt() || !hideGridDedAmt() || !hideGridTotAmt() || !hideGridPaidAmt())
                    {
                        Txt_amt.Text = payAMTVal.ToString();
                    }
                    loadGridVendor();
                }
                else if (rbl_rollnoNew.SelectedIndex == 3)
                {
                    string newVenCode = generateVendorCode().Trim();
                    string staffId = Convert.ToString(txtroll_other.Text.Trim());
                    string staffMob = Convert.ToString(txt_otherMobile.Text.Trim());

                    try
                    {
                        d2.update_method_wo_parameter("if not exists (select VendorCode from co_vendormaster where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5) insert into co_vendormaster  (VendorCode,vendorname,VendorMobileNo,VendorAddress,VendorCity,VendorCompName,VendorType) values ('" + newVenCode + "','" + staffId + "','" + staffMob + "','" + txtAdd1_Other.Text.Trim() + "','" + txtAdd2_Other.Text.Trim() + "','" + txtname_other.Text.Trim() + "',-5) else update co_vendormaster set VendorAddress='" + txtAdd1_Other.Text.Trim() + "',VendorCity='" + txtAdd2_Other.Text.Trim() + "',VendorCompName='" + txtname_other.Text.Trim() + "'  where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5 ", "Text");
                    }
                    catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
                    newVenCode = d2.GetFunction("select VendorCode from co_vendormaster where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5").Trim();
                    if (newVenCode != "" && newVenCode != "0")
                    {
                        #region Add Ledgers For Others
                        //Year or sem

                        string finYeaid = d2.getCurrentFinanceYear(usercode, collegecode1);
                        string venPk = d2.GetFunction("select VendorPK from co_vendormaster where VendorCode='" + newVenCode + "'  and VendorType=-5").Trim();
                        if (venPk != "" && venPk != "0")
                        {
                            for (row = 0; row < grid_HeaderLedger.Rows.Count; row++)
                            {
                                Label lbl_headerId = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_headeridpop");
                                Label lbl_fee_code = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_ledgeridpop");
                                Label lbl_fee_cat = (Label)grid_HeaderLedger.Rows[row].FindControl("lbl_legerpop");
                                TextBox txtNewLedger = (TextBox)grid_HeaderLedger.Rows[row].FindControl("txt_NewLedger");

                                string hid = lbl_headerId.Text;
                                string lid = lbl_fee_code.Text;
                                string lname = lbl_fee_cat.Text;
                                string amt = txtNewLedger.Text;

                                string text_circode = string.Empty;
                                string appno = string.Empty;
                                string cursem = "0";

                                if (amt != "" && Convert.ToDouble(amt) != null && Convert.ToDouble(amt) != 0)
                                {
                                    appno = venPk;

                                    if (appno != "" && appno != "0")
                                    {
                                        text_circode = cursem;
                                        string memtype = "1";
                                        switch (rbl_rollnoNew.SelectedIndex)
                                        {
                                            case 0:
                                                memtype = "1";
                                                break;
                                            case 1:
                                                memtype = "2";
                                                break;
                                            case 2:
                                                memtype = "3";
                                                break;
                                            case 3:
                                                memtype = "4"; ;
                                                break;
                                        }

                                        string selectQuery = "";
                                        string updateQuery = "";

                                        string insertQuery = " INSERT INTO FT_FeeAllot(AllotDate,MemType,PayMode,App_No,LedgerFK,HeaderFK,FeeAmount,TotalAmount,FeeCategory,BalAmount,FinYearFK,FromGovtAmt, DeductReason) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "'," + memtype + ",1," + appno + "," + lid + "," + hid + "," + amt + "," + amt + "," + text_circode + "," + amt + "," + finYeaid + ",0,0) ";

                                        selectQuery = " select * from FT_FeeAllot where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "')  and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";

                                        updateQuery = "  update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "', MemType=" + memtype + ",FeeAmount=isnull(FeeAmount,0)+" + amt + ",BalAmount=isnull(BalAmount,0)+" + amt + ",TotalAmount=isnull(TotalAmount,0)+" + amt + " where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "')  and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";


                                        string finalQuery = " if exists ( " + selectQuery + " ) " + updateQuery + " else " + insertQuery + " ";
                                        insok = d2.update_method_wo_parameter(finalQuery, "Text");
                                        insOK = true;

                                        double amtVal = Convert.ToDouble(amt);
                                        payAMTVal += amtVal;
                                    }
                                }
                            }
                            //=================== Added by aparna ===================//
                            int savevalue = 1;
                            string entrycode = Session["Entry_Code"].ToString();
                            string formname = "Add Fees";
                            string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                            string doa = DateTime.Now.ToString("MM/dd/yyy");
                            IPHostEntry host;
                            string localip = "";
                            host = Dns.GetHostEntry(Dns.GetHostName());
                            foreach (IPAddress ip in host.AddressList)
                            {
                                if (ip.AddressFamily.ToString() == "InterNetwork")
                                {
                                    localip = ip.ToString();
                                }
                            }
                            string details = "OthersCode:" + staffId + " : Amount - " + payAMTVal + " : Date - " + toa + "  ";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";

                            string ctsname = "";
                            if (savevalue == 1)
                            {
                                ctsname = "Fees Added";
                            }
                            string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                            d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                            //================================================================================//
                        }
                        #endregion
                        if (!hideGridFeeAmt() || !hideGridDedAmt() || !hideGridTotAmt() || !hideGridPaidAmt())
                        {
                            Txt_amt.Text = payAMTVal.ToString();
                        }
                        loadGridOthers();
                    }
                }
            }

            imgAlert.Visible = true;
            //this.Form.DefaultButton = "btn_alertclose";
            if (insOK)
            {
                lbl_alert.Text = "Saved Sucessfully";
                div_HeaderLed.Visible = false;
            }
            else
            {

                if (isVal)
                {
                    lbl_alert.Text = "Please Select Semester/Year!";
                    div_HeaderLed.Visible = true;
                }
                else
                {
                    lbl_alert.Text = "Not Saved";
                    div_HeaderLed.Visible = false;
                }
            }
        }
        catch { }

    }
    //Inventory Ledger fees
    protected void ddlLedgerInv_Indexchange(object sender, EventArgs e)
    {
        try
        {
            lblInvTotAmount.Text = "";
        }
        catch { }
    }
    public void ledgerbindInv()
    {
        try
        {
            ddlLedgerInv.Items.Clear();

            string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode  and l.LedgerMode=0   AND P. UserCode = " + usercode + " AND L.CollegeCode = " + collegecode1 + "";

            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlLedgerInv.DataSource = ds;
                ddlLedgerInv.DataTextField = "LedgerName";
                ddlLedgerInv.DataValueField = "LedgerPK";
                ddlLedgerInv.DataBind();
            }
        }
        catch (Exception ex) { }
    }
    protected void cbItemHcInv_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cblItemHcInv, cbItemHcInv, txtItemHcInv, "Item Header");

        itemSHdrBindInv();
        itemCodeBindInv();
        itemNameBindInv();
    }
    protected void cblItemHcInv_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cblItemHcInv, cbItemHcInv, txtItemHcInv, "Item Header");


        itemSHdrBindInv();
        itemCodeBindInv();
        itemNameBindInv();
    }
    public void itemHeadBindInv()
    {
        try
        {
            txtItemHcInv.Text = "Item Header";
            cbItemHcInv.Checked = false;
            cblItemHcInv.Items.Clear();

            //ds = d2.BindItemHeaderWithRights();
            //string deptCode = GetSelectedItemsValue(cblDeptInv);
            string storeCode = string.Empty;
            string selQ = string.Empty;
            if (rbldeptstore.SelectedIndex == 0)
                storeCode = ddlStoreInv.Items.Count > 0 ? ddlStoreInv.SelectedValue : "0";
            else
                storeCode = ddlstroe.Items.Count > 0 ? ddlstroe.SelectedValue : "0";

            if (storeCode.Trim() != "")
            {
                if (rbldeptstore.SelectedIndex == 0)
                    selQ = "select distinct ItemHeaderCode ,ItemHeaderName   from IM_ItemDeptMaster ID ,IM_ItemMaster I where I.ItemPK =ID.ItemFK and ID.ItemDeptFK in (" + storeCode + ")";
                else
                    selQ = "select distinct ItemHeaderCode ,ItemHeaderName   from IT_StockDetail ID ,IM_ItemMaster I where I.ItemPK =ID.ItemFK and ID.StoreFK in (" + storeCode + ")";

                ds = d2.select_method_wo_parameter(selQ, "Text");

                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    cblItemHcInv.DataSource = ds;
                    cblItemHcInv.DataTextField = "ItemHeaderName";
                    cblItemHcInv.DataValueField = "ItemHeaderCode";
                    cblItemHcInv.DataBind();
                    for (int i = 0; i < cblItemHcInv.Items.Count; i++)
                    {
                        cblItemHcInv.Items[i].Selected = true;
                    }
                    txtItemHcInv.Text = "Item Header(" + cblItemHcInv.Items.Count + ")";
                    cbItemHcInv.Checked = true;
                }
            }
        }
        catch (Exception ex) { }
    }
    protected void cbItemSHcInv_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cblItemSHcInv, cbItemSHcInv, txtItemSHcInv, "Item Sub Header");

        itemCodeBindInv();
        itemNameBindInv();
    }
    protected void cblItemSHcInv_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cblItemSHcInv, cbItemSHcInv, txtItemSHcInv, "Item Sub Header");

        itemCodeBindInv();
        itemNameBindInv();
    }
    public void itemSHdrBindInv()
    {
        try
        {
            txtItemSHcInv.Text = "Item Sub Header";
            cbItemSHcInv.Checked = false;
            cblItemSHcInv.Items.Clear();

            //string deptCode = GetSelectedItemsValue(cblDeptInv);
            //string storeCode = ddlStoreInv.Items.Count > 0 ? ddlStoreInv.SelectedValue : "0";

            string storeCode = string.Empty;
            if (rbldeptstore.SelectedIndex == 0)
                storeCode = ddlStoreInv.Items.Count > 0 ? ddlStoreInv.SelectedValue : "0";
            else
                storeCode = ddlstroe.Items.Count > 0 ? ddlstroe.SelectedValue : "0";

            string itemheader = GetSelectedItemsValueAsString(cblItemHcInv);

            if (storeCode.Trim() != "" && itemheader.Trim() != "")
            {
                string query = "";
                if (rbldeptstore.SelectedIndex == 0)
                    query = "select distinct subheader_code ,T.MasterValue    from IM_ItemDeptMaster ID ,IM_ItemMaster I,CO_MasterValues T where I.ItemPK =ID.ItemFK and T.MasterCode =subheader_code and ID.ItemDeptFK in (" + storeCode + ") and ItemHeaderCode in ('" + itemheader + "')";
                else
                    query = "select distinct subheader_code ,T.MasterValue    from IT_StockDetail ID ,IM_ItemMaster I,CO_MasterValues T where I.ItemPK =ID.ItemFK and T.MasterCode =subheader_code and ID.StoreFK  in (" + storeCode + ") and ItemHeaderCode in ('" + itemheader + "')";
                ds.Clear();
                ds = d2.select_method_wo_parameter(query, "Text");

                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    cblItemSHcInv.DataSource = ds;
                    cblItemSHcInv.DataTextField = "MasterValue";
                    cblItemSHcInv.DataValueField = "subheader_code";
                    cblItemSHcInv.DataBind();
                    for (int i = 0; i < cblItemSHcInv.Items.Count; i++)
                    {
                        cblItemSHcInv.Items[i].Selected = true;
                    }
                    txtItemSHcInv.Text = "Item Sub Header(" + cblItemSHcInv.Items.Count + ")";
                    cbItemSHcInv.Checked = true;
                }
            }
        }
        catch (Exception ex) { }
    }
    protected void cbItemNmInv_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cblItemNmInv, cbItemNmInv, txtItemNmInv, "Item Name");
    }
    protected void cblItemNmInv_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cblItemNmInv, cbItemNmInv, txtItemNmInv, "Item Name");
    }
    public void itemNameBindInv()
    {
        try
        {
            txtItemNmInv.Text = "Item Name";
            cbItemNmInv.Checked = false;
            cblItemNmInv.Items.Clear();

            //string deptCode = GetSelectedItemsValue(cblDeptInv);
            string storeCode = string.Empty;
            string query = string.Empty;
            if (rbldeptstore.SelectedIndex == 0)
                storeCode = ddlStoreInv.Items.Count > 0 ? ddlStoreInv.SelectedValue : "0";
            else
                storeCode = ddlstroe.Items.Count > 0 ? ddlstroe.SelectedValue : "0";
            string itemheader = GetSelectedItemsValueAsString(cblItemHcInv);
            string subheader = GetSelectedItemsValueAsString(cblItemSHcInv);
            string itemcode = GetSelectedItemsValueAsString(cblItemCdInv);

            if (storeCode.Trim() != "" && itemheader.Trim() != "" && subheader.Trim() != "" && itemcode.Trim() != "")
            {
                if (rbldeptstore.SelectedIndex == 0)
                    query = "select distinct ItemPK,ItemName  from IM_ItemDeptMaster ID ,IM_ItemMaster I where I.ItemPK =ID.ItemFK and ID.ItemDeptFK in (" + storeCode + ") and ItemHeaderCode in ('" + itemheader + "') and subheader_code in ('" + subheader + "')  and ItemPk in ('" + itemcode + "')";
                else
                    query = "select distinct ItemPK,ItemName  from IT_StockDetail ID ,IM_ItemMaster I where I.ItemPK =ID.ItemFK and ID.StoreFK in (" + storeCode + ") and ItemHeaderCode in ('" + itemheader + "') and subheader_code in ('" + subheader + "')  and ItemPk in ('" + itemcode + "')";
                ds.Clear();
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    cblItemNmInv.DataSource = ds;
                    cblItemNmInv.DataTextField = "ItemName";
                    cblItemNmInv.DataValueField = "ItemPK";
                    cblItemNmInv.DataBind();
                    for (int i = 0; i < cblItemCdInv.Items.Count; i++)
                    {
                        cblItemNmInv.Items[i].Selected = true;
                    }
                    txtItemNmInv.Text = "Item Name(" + cblItemNmInv.Items.Count + ")";
                    cbItemNmInv.Checked = true;
                }
            }
        }
        catch (Exception ex) { }
    }
    protected void cbItemCdInv_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cblItemCdInv, cbItemCdInv, txtItemCdInv, "Item Code");
        itemNameBindInv();
    }
    protected void cblItemCdInv_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cblItemCdInv, cbItemCdInv, txtItemCdInv, "Item Code");
        itemNameBindInv();
    }
    public void itemCodeBindInv()
    {
        try
        {
            txtItemCdInv.Text = "Item Code";
            cbItemCdInv.Checked = false;
            cblItemCdInv.Items.Clear();

            //string deptCode = GetSelectedItemsValue(cblDeptInv);
            string storeCode = string.Empty;
            string query = string.Empty;
            if (rbldeptstore.SelectedIndex == 0)
                storeCode = ddlStoreInv.Items.Count > 0 ? ddlStoreInv.SelectedValue : "0";
            else
                storeCode = ddlstroe.Items.Count > 0 ? ddlstroe.SelectedValue : "0";
            string itemheader = GetSelectedItemsValueAsString(cblItemHcInv);
            string subheader = GetSelectedItemsValueAsString(cblItemSHcInv);

            if (storeCode.Trim() != "" && itemheader.Trim() != "" && subheader.Trim() != "")
            {
                if (rbldeptstore.SelectedIndex == 0)
                    query = "select distinct ItemCode,ItemPk  from IM_ItemDeptMaster ID ,IM_ItemMaster I where I.ItemPK =ID.ItemFK and ID.ItemDeptFK in (" + storeCode + ") and ItemHeaderCode in ('" + itemheader + "') and subheader_code in ('" + subheader + "')";
                else
                    query = "select distinct ItemCode,ItemPk  from IT_StockDetail ID ,IM_ItemMaster I where I.ItemPK =ID.ItemFK and ID.StoreFK in (" + storeCode + ") and ItemHeaderCode in ('" + itemheader + "') and subheader_code in ('" + subheader + "')";

                ds.Clear();
                ds = d2.select_method_wo_parameter(query, "Text");

                if (ds.Tables[0].Rows.Count > 0)
                {
                    cblItemCdInv.DataSource = ds;
                    cblItemCdInv.DataTextField = "ItemCode";
                    cblItemCdInv.DataValueField = "ItemPk";
                    cblItemCdInv.DataBind();
                    for (int i = 0; i < cblItemCdInv.Items.Count; i++)
                    {
                        cblItemCdInv.Items[i].Selected = true;
                    }
                    txtItemCdInv.Text = "Item Code(" + cblItemCdInv.Items.Count + ")";
                    cbItemCdInv.Checked = true;
                }
            }
        }
        catch (Exception ex) { }
    }
    protected void cbDeptInv_CheckedChanged(object sender, EventArgs e)
    {
        //CallCheckBoxChangedEvent(cblDeptInv, cbDeptInv, txtDeptInv, "Department");
        itemHeadBindInv();
        itemSHdrBindInv();
        itemCodeBindInv();
        itemNameBindInv();
    }
    protected void cblDeptInv_SelectedIndexChanged(object sender, EventArgs e)
    {
        //CallCheckBoxListChangedEvent(cblDeptInv, cbDeptInv, txtDeptInv, "Department");
        itemHeadBindInv();
        itemSHdrBindInv();
        itemCodeBindInv();
        itemNameBindInv();
    }
    public void itemDeptBindInv()
    {
        try
        {
            //txtDeptInv.Text = "Department";
            //cbDeptInv.Checked = false;
            //cblDeptInv.Items.Clear();

            //string query = "select distinct Dept_code,Dept_Name from department where college_code= " + collegecode1 + "";
            //ds = d2.select_method_wo_parameter(query, "Text");

            //if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            //{
            //    cblDeptInv.DataSource = ds;
            //    cblDeptInv.DataTextField = "Dept_Name";
            //    cblDeptInv.DataValueField = "Dept_code";
            //    cblDeptInv.DataBind();
            //    for (int i = 0; i < cblDeptInv.Items.Count; i++)
            //    {
            //        cblDeptInv.Items[i].Selected = true;
            //    }
            //    txtDeptInv.Text = "Department(" + cblDeptInv.Items.Count + ")";
            //    cbDeptInv.Checked = true;
            //}
        }
        catch (Exception ex) { }
    }
    protected void ddlStoreInv_Indexchange(object sender, EventArgs e)
    {
        try
        {
            itemHeadBindInv();
            itemSHdrBindInv();
            itemCodeBindInv();
            itemNameBindInv();
        }
        catch (Exception ex) { }
    }
    public void itemStoreBindInv()
    {
        try
        {
            ddlStoreInv.Items.Clear();
            // select StorePK,StoreName from IM_StoreMaster  where collegecode=13
            string query = "select distinct Dept_code,Dept_Name from department where college_code= " + collegecode1 + "";
            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlStoreInv.DataSource = ds;
                ddlStoreInv.DataTextField = "Dept_Name";
                ddlStoreInv.DataValueField = "Dept_code";
                ddlStoreInv.DataBind();
            }
        }
        catch (Exception ex) { }
    }
    protected void ddlInvSearchHdr_Indexchange(object sender, EventArgs e)
    {
        txtInvSrchCode.Text = "";
        txtInvSrchName.Text = "";
        txtInvSrchCode.Visible = false;
        txtInvSrchName.Visible = false;
        lblInvTotAmount.Text = "";
        if (ddlInvSearchHdr.SelectedIndex == 0)
        {
            txtInvSrchCode.Visible = true;
        }
        else
        {
            txtInvSrchName.Visible = true;
        }
    }
    protected void gridInv_DataBound(object sender, EventArgs e)
    {
        foreach (GridViewRow row in gridInv.Rows)
        {
            TextBox txtAmt = (TextBox)row.FindControl("txtamtInv");
            txtAmt.Attributes.Add("readonly", "readonly");
        }
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetItemCode(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            string query = "";
            WebService ws = new WebService();
            query = " select distinct ItemCode,ItemPk  from IM_ItemDeptMaster ID ,IM_ItemMaster I where I.ItemPK =ID.ItemFK  order by ItemCode asc";

            name = ws.Getname(query);
            return name;
        }
        catch { return name; }
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetItemName(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            string query = "";
            WebService ws = new WebService();

            query = "select distinct ItemName,ItemPK  from IM_ItemDeptMaster ID ,IM_ItemMaster I where I.ItemPK =ID.ItemFK  order by ItemName asc";

            name = ws.Getname(query);
            return name;
        }
        catch { return name; }
    }
    //Added By SaranyaDevi 12.4.2018
    protected void btnItemInvSearch_Click(object sender, EventArgs e)
    {
        try
        {

            //this.Form.DefaultButton = "btnItemInvSearch";
            DataTable tbl_Inv = new DataTable();
            tbl_Inv.Columns.Add("DeptId");
            tbl_Inv.Columns.Add("Dept");
            tbl_Inv.Columns.Add("ledgeId");
            tbl_Inv.Columns.Add("ledge");
            tbl_Inv.Columns.Add("ItemName");
            tbl_Inv.Columns.Add("ItemPk");
            tbl_Inv.Columns.Add("ItemCode");
            tbl_Inv.Columns.Add("ItemhcId");
            tbl_Inv.Columns.Add("Itemhc");
            tbl_Inv.Columns.Add("IssuedRPU");
            tbl_Inv.Columns.Add("ItemSHc");
            tbl_Inv.Columns.Add("Available");
            tbl_Inv.Columns.Add("Measure");
            tbl_Inv.Columns.Add("Quanti");
            tbl_Inv.Columns.Add("Amount");

            #region loadPrevData
            if (gridInv.Rows.Count > 0)
            {
                //    Session["viwGridInv"] = gridInv;
                //}
                //if (Session["viwGridInv"] != null)
                //{
                //GridView viwGridInv = (GridView)Session["viwGridInv"];
                foreach (GridViewRow grow in gridInv.Rows) //viwGridInv.Rows)
                {
                    Label lbldeptCode = (Label)grow.FindControl("lbl_itemdeptidInv");
                    Label lbldept = (Label)grow.FindControl("lbl_itemdeptInv");
                    Label lblledgeId = (Label)grow.FindControl("lbl_itemledgeidInv");
                    Label lblledge = (Label)grow.FindControl("lbl_itemledgeInv");
                    Label lblhdrCode = (Label)grow.FindControl("lbl_itemhcidInv");
                    Label lblhdr = (Label)grow.FindControl("lbl_itemhcInv");
                    Label lblitemname = (Label)grow.FindControl("lbl_itemnameinv");
                    Label lblsubhdrCode = (Label)grow.FindControl("lbl_itemShcInv");
                    Label lblItempk = (Label)grow.FindControl("lbl_itemnoidInv");
                    Label lblItemCode = (Label)grow.FindControl("lbl_itemnoInv");

                    Label lblAvail = (Label)grow.FindControl("lbl_AvlInv");
                    Label lblMeasure = (Label)grow.FindControl("lbl_Msrnv");

                    TextBox txtQty = (TextBox)grow.FindControl("txtQtyInv");
                    Label txtRPU = (Label)grow.FindControl("lbl_RPUInv");
                    TextBox txtAmt = (TextBox)grow.FindControl("txtamtInv");

                    DataRow drInv = tbl_Inv.NewRow();
                    drInv["DeptId"] = lbldeptCode.Text;
                    drInv["Dept"] = lbldept.Text;
                    drInv["ledgeId"] = lblledgeId.Text;
                    drInv["ledge"] = lblledge.Text;
                    drInv["ItemName"] = lblitemname.Text;
                    drInv["ItemCode"] = lblItemCode.Text;
                    drInv["ItemPk"] = lblItempk.Text;
                    drInv["ItemhcId"] = lblhdrCode.Text;
                    drInv["Itemhc"] = lblhdr.Text;
                    drInv["IssuedRPU"] = txtRPU.Text;
                    drInv["ItemSHc"] = lblsubhdrCode.Text;
                    drInv["Available"] = lblAvail.Text;
                    drInv["Measure"] = lblMeasure.Text;
                    drInv["Quanti"] = txtQty.Text;
                    drInv["Amount"] = txtAmt.Text;
                    tbl_Inv.Rows.Add(drInv);
                }
            }
            #endregion

            string ledgercode = ddlLedgerInv.Items.Count > 0 ? ddlLedgerInv.SelectedValue : string.Empty;
            string ledgerName = ddlLedgerInv.Items.Count > 0 ? ddlLedgerInv.SelectedItem.Text : string.Empty;
            //string deptCode = GetSelectedItemsValue(cblDeptInv);
            string storeCode = string.Empty;
            string itemheader = GetSelectedItemsValueAsString(cblItemHcInv);
            string subheader = GetSelectedItemsValueAsString(cblItemSHcInv);
            string itemcode = GetSelectedItemsValueAsString(cblItemCdInv);
            string itemNm = GetSelectedItemsText(cblItemNmInv);
            //double Qty = Convert.ToDouble(txtQtyinv.Text.Trim());
            //double amt = Convert.ToDouble(txtAmtInv.Text.Trim());

            string query = "";

            if (rbldeptstore.SelectedIndex == 0)
            {
                storeCode = ddlStoreInv.Items.Count > 0 ? ddlStoreInv.SelectedValue : "0";

                if (ddlInvSearchHdr.SelectedIndex == 0 && txtInvSrchCode.Text.Trim() != "")
                {
                    query = "select ItemDeptFk, ItemPk, ItemHeaderCode, ItemHeaderName, ItemAcr, ItemName, ItemCode, subheader_code, dt.Dept_Name,isnull(IssuedRPU,0) as IssuedRPU ,I.ItemUnit,(isnull(s.issuedQty,0)-isnull(s.UsedQty,0)) as Available    from IM_ItemDeptMaster ID , IM_ItemMaster  I,Department dt ,IT_StockDeptDetail s  where s.DeptFK =dt.Dept_Code and s.DeptFK =ID.ItemDeptFK and s.ItemFK =i.ItemPK and dt.Dept_Code =id.ItemDeptFK and I.ItemPK =ID.ItemFK  and ID.ItemDeptFK='" + storeCode + "'   and ItemCode in ('" + txtInvSrchCode.Text.Trim() + "')";
                }
                else if (ddlInvSearchHdr.SelectedIndex == 1 && txtInvSrchName.Text.Trim() != "")
                {
                    query = "select ItemDeptFk, ItemPk, ItemHeaderCode, ItemHeaderName, ItemAcr, ItemName, ItemCode, subheader_code, dt.Dept_Name,isnull(IssuedRPU,0) as IssuedRPU ,I.ItemUnit,(isnull(s.issuedQty,0)-isnull(s.UsedQty,0)) as Available    from IM_ItemDeptMaster ID , IM_ItemMaster  I,Department dt ,IT_StockDeptDetail s  where s.DeptFK =dt.Dept_Code and s.DeptFK =ID.ItemDeptFK and s.ItemFK =i.ItemPK and dt.Dept_Code =id.ItemDeptFK and I.ItemPK =ID.ItemFK and ID.ItemDeptFK='" + storeCode + "'  and ItemName in ('" + txtInvSrchName.Text.Trim() + "')";
                }
                else
                {
                    query = "select ItemDeptFk, ItemPk, ItemHeaderCode, ItemHeaderName, ItemAcr, ItemName, ItemCode, subheader_code, dt.Dept_Name,isnull(IssuedRPU,0) as IssuedRPU ,I.ItemUnit,(isnull(s.issuedQty,0)-isnull(s.UsedQty,0)) as Available    from IM_ItemDeptMaster ID , IM_ItemMaster  I,Department dt ,IT_StockDeptDetail s  where s.DeptFK =dt.Dept_Code and s.DeptFK =ID.ItemDeptFK and s.ItemFK =i.ItemPK and dt.Dept_Code =id.ItemDeptFK and I.ItemPK =ID.ItemFK and ID.ItemDeptFK in (" + storeCode + ") and ItemHeaderCode in ('" + itemheader + "') and subheader_code in ('" + subheader + "')  and ItemPk in ('" + itemcode + "') and ItemName in ('" + itemNm + "')";
                }
            }

            else
            {
                storeCode = ddlstroe.Items.Count > 0 ? ddlstroe.SelectedValue : "0";
                if (ddlInvSearchHdr.SelectedIndex == 0 && txtInvSrchCode.Text.Trim() != "")
                {
                    query = "select  ID.StoreFK as ItemDeptFk,ItemPk, ItemHeaderCode, ItemHeaderName, ItemAcr, ItemName, ItemCode, subheader_code, isnull(InwardRPU,0) as IssuedRPU ,I.ItemUnit,(isnull(id.InwardQty,0)-isnull(id.UsedQty,0)) as Available,s.StoreName as Dept_Name   from IT_StockDetail ID , IM_ItemMaster  I,IM_StoreMaster s  where   s.StorePK =ID.StoreFK and s.StorePK =i.StoreFK and  I.ItemPK =ID.ItemFK and ID.StoreFK ='" + storeCode + "'   and ItemCode in ('" + txtInvSrchCode.Text.Trim() + "')";
                }
                else if (ddlInvSearchHdr.SelectedIndex == 1 && txtInvSrchName.Text.Trim() != "")
                {
                    query = "select  ID.StoreFK as ItemDeptFk,ItemPk, ItemHeaderCode, ItemHeaderName, ItemAcr, ItemName, ItemCode, subheader_code, isnull(InwardRPU,0) as IssuedRPU ,I.ItemUnit,(isnull(id.InwardQty,0)-isnull(id.UsedQty,0)) as Available,s.StoreName as Dept_Name     from IT_StockDetail ID , IM_ItemMaster  I,IM_StoreMaster s  where   s.StorePK =ID.StoreFK and s.StorePK =i.StoreFK and  I.ItemPK =ID.ItemFK and ID.StoreFK ='" + storeCode + "'   and ItemName in ('" + txtInvSrchName.Text.Trim() + "')";
                }
                else
                {
                    query = "select  ID.StoreFK as ItemDeptFk,ItemPk, ItemHeaderCode, ItemHeaderName, ItemAcr, ItemName, ItemCode, subheader_code, isnull(InwardRPU,0) as IssuedRPU ,I.ItemUnit,(isnull(id.InwardQty,0)-isnull(id.UsedQty,0)) as Available,s.StoreName as Dept_Name     from IT_StockDetail ID , IM_ItemMaster  I,IM_StoreMaster s  where   s.StorePK =ID.StoreFK and s.StorePK =i.StoreFK and  I.ItemPK =ID.ItemFK and ID.StoreFK in ('" + storeCode + "')  and ItemHeaderCode in ('" + itemheader + "') and subheader_code in ('" + subheader + "')  and ItemPk in ('" + itemcode + "') and ItemName in ('" + itemNm + "')";
                }
            }

            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            if (!string.IsNullOrEmpty(ledgercode.Trim()))
            {
                if ((ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0) || tbl_Inv.Rows.Count > 0)
                {
                    DataTable tblOldTable = new DataTable();
                    tblOldTable = tbl_Inv.Copy();
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        tblOldTable.DefaultView.RowFilter = " DeptId='" + Convert.ToString(ds.Tables[0].Rows[i]["ItemDeptFk"]) + "' and ItemPk='" + Convert.ToString(ds.Tables[0].Rows[i]["ItemPk"]) + "' and ledgeId='" + ledgercode + "'";
                        DataView dvAlrAvaChk = tblOldTable.DefaultView;
                        if (dvAlrAvaChk.Count == 0)
                        {
                            DataRow drInv = tbl_Inv.NewRow();
                            drInv["DeptId"] = Convert.ToString(ds.Tables[0].Rows[i]["ItemDeptFk"]);
                            drInv["Dept"] = Convert.ToString(ds.Tables[0].Rows[i]["Dept_Name"]);
                            drInv["ledgeId"] = ledgercode;
                            drInv["ledge"] = ledgerName;
                            drInv["ItemName"] = Convert.ToString(ds.Tables[0].Rows[i]["ItemName"]);
                            drInv["ItemCode"] = Convert.ToString(ds.Tables[0].Rows[i]["ItemCode"]);
                            drInv["ItemPk"] = Convert.ToString(ds.Tables[0].Rows[i]["ItemPk"]);
                            drInv["ItemhcId"] = Convert.ToString(ds.Tables[0].Rows[i]["ItemHeaderCode"]);
                            drInv["Itemhc"] = Convert.ToString(ds.Tables[0].Rows[i]["ItemHeaderName"]);
                            drInv["IssuedRPU"] = Convert.ToString(ds.Tables[0].Rows[i]["IssuedRPU"]);
                            drInv["ItemSHc"] = Convert.ToString(ds.Tables[0].Rows[i]["subheader_code"]);
                            drInv["Available"] = Convert.ToString(ds.Tables[0].Rows[i]["Available"]);
                            drInv["Measure"] = Convert.ToString(ds.Tables[0].Rows[i]["ItemUnit"]);
                            //drInv["Quanti"] = "0";
                            //drInv["Amount"] = "0.00";
                            tbl_Inv.Rows.Add(drInv);
                        }
                    }

                    gridInv.DataSource = tbl_Inv;
                    gridInv.DataBind();
                    gridInv.Visible = true;
                    btnInvSave.Visible = true;
                    btnInvExit.Visible = true;
                    btnInvDelete.Visible = true;

                    //Session["viwGridInv"] = gridInv;
                }
                else
                {
                    gridInv.DataSource = null;
                    gridInv.DataBind();
                    btnInvSave.Visible = false;
                    btnInvExit.Visible = false;
                    btnInvDelete.Visible = false;
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "No Records Found";
                    //if (Session["viwGridInv"] != null)
                    //    Session.Remove("viwGridInv");
                }
            }
            //Added By SaranyaDevi 12.4.2018
            else
            {
                gridInv.DataSource = null;
                gridInv.DataBind();
                btnInvSave.Visible = false;
                btnInvExit.Visible = false;
                btnInvDelete.Visible = false;
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Select The ledger";

            }

        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, collegecode1, "ChallanReceipt");
            gridInv.DataSource = null;
            gridInv.DataBind();
            btnInvSave.Visible = false;
            btnInvExit.Visible = false;
            btnInvDelete.Visible = false;
            //if (Session["viwGridInv"] != null)
            //    Session.Remove("viwGridInv");
        }

    }
    //End by Saranyadevi 12.4.2018
    protected void btnInvDelete_Click(object sender, EventArgs e)
    {
        try
        {
            DataTable tbl_Inv = new DataTable();
            tbl_Inv.Columns.Add("DeptId");
            tbl_Inv.Columns.Add("Dept");
            tbl_Inv.Columns.Add("ledgeId");
            tbl_Inv.Columns.Add("ledge");
            tbl_Inv.Columns.Add("ItemName");
            tbl_Inv.Columns.Add("ItemPk");
            tbl_Inv.Columns.Add("ItemCode");
            tbl_Inv.Columns.Add("ItemhcId");
            tbl_Inv.Columns.Add("Itemhc");
            tbl_Inv.Columns.Add("IssuedRPU");
            tbl_Inv.Columns.Add("ItemSHc");
            tbl_Inv.Columns.Add("Available");
            tbl_Inv.Columns.Add("Measure");
            tbl_Inv.Columns.Add("Quanti");
            tbl_Inv.Columns.Add("Amount");

            foreach (GridViewRow grow in gridInv.Rows)
            {
                CheckBox cbSelchk = (CheckBox)grow.FindControl("chkSel");

                if (!cbSelchk.Checked)
                {
                    Label lbldeptCode = (Label)grow.FindControl("lbl_itemdeptidInv");
                    Label lbldept = (Label)grow.FindControl("lbl_itemdeptInv");
                    Label lblledgeId = (Label)grow.FindControl("lbl_itemledgeidInv");
                    Label lblledge = (Label)grow.FindControl("lbl_itemledgeInv");
                    Label lblhdrCode = (Label)grow.FindControl("lbl_itemhcidInv");
                    Label lblhdr = (Label)grow.FindControl("lbl_itemhcInv");
                    Label lblitemname = (Label)grow.FindControl("lbl_itemnameinv");
                    Label lblsubhdrCode = (Label)grow.FindControl("lbl_itemShcInv");
                    Label lblItempk = (Label)grow.FindControl("lbl_itemnoidInv");
                    Label lblItemCode = (Label)grow.FindControl("lbl_itemnoInv");

                    Label lblAvail = (Label)grow.FindControl("lbl_AvlInv");
                    Label lblMeasure = (Label)grow.FindControl("lbl_Msrnv");

                    TextBox txtQty = (TextBox)grow.FindControl("txtQtyInv");
                    Label txtRPU = (Label)grow.FindControl("lbl_RPUInv");
                    TextBox txtAmt = (TextBox)grow.FindControl("txtamtInv");
                    Label lblfinFk = (Label)grow.FindControl("lblfinfk");
                    Label lblfinYr = (Label)grow.FindControl("lblfinyear");
                    string allotFinFK = Convert.ToString(lblfinYr.Text.Split('-')[0]);
                    //if (Convert.ToInt32(allotFinFK) < Convert.ToInt32(finCyear))
                    //{
                    //    cbsel.Enabled = false;
                    //    lbltobeAmt.Enabled = false;
                    //}
                    DataRow drInv = tbl_Inv.NewRow();
                    drInv["DeptId"] = lbldeptCode.Text;
                    drInv["Dept"] = lbldept.Text;
                    drInv["ledgeId"] = lblledgeId.Text;
                    drInv["ledge"] = lblledge.Text;
                    drInv["ItemName"] = lblitemname.Text;
                    drInv["ItemCode"] = lblItemCode.Text;
                    drInv["ItemPk"] = lblItempk.Text;
                    drInv["ItemhcId"] = lblhdrCode.Text;
                    drInv["Itemhc"] = lblhdr.Text;
                    drInv["IssuedRPU"] = txtRPU.Text;
                    drInv["ItemSHc"] = lblsubhdrCode.Text;
                    drInv["Available"] = lblAvail.Text;
                    drInv["Measure"] = lblMeasure.Text;
                    drInv["Quanti"] = txtQty.Text;
                    drInv["Amount"] = txtAmt.Text;

                    tbl_Inv.Rows.Add(drInv);
                }
            }
            if (tbl_Inv.Rows.Count > 0)
            {
                gridInv.DataSource = tbl_Inv;
                gridInv.DataBind();
                gridInv.Visible = true;
                btnInvSave.Visible = true;
                btnInvExit.Visible = true;
                btnInvDelete.Visible = true;

                //Session["viwGridInv"] = gridInv;
            }
            else
            {
                gridInv.DataSource = null;
                gridInv.DataBind();
                btnInvSave.Visible = false;
                btnInvExit.Visible = false;
                btnInvDelete.Visible = false;
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "No Records Found";
                //if (Session["viwGridInv"] != null)
                //    Session.Remove("viwGridInv");
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    private string getHeaderFk(string ledgerfk)
    {
        string headerfk = d2.GetFunction("select headerfk from fm_ledgermaster where ledgerpk=" + ledgerfk + " ").Trim();
        return headerfk;
    }
    protected void btnInvSave_Click(object sender, EventArgs e)
    {
        divInvConfirm.Visible = true;
    }
    protected void btnSaveNoInv_Click(object sender, EventArgs e)
    {
        divInvConfirm.Visible = false;
    }
    protected void btnSaveInv_Click(object sender, EventArgs e)
    {
        divInvConfirm.Visible = false;
        try
        {
            int insok = 0;
            bool insOK = false;
            if (gridInv.Rows.Count > 0 && ddlLedgerInv.Items.Count > 0)
            {
                if (rbl_rollnoNew.SelectedIndex == 0)
                {
                    #region Add Ledgers For Student
                    //Year or sem
                    string linkvalue = string.Empty;
                    string rollno = txt_rollno.Text.Trim();

                    string settingquery = "select * from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(settingquery, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        linkvalue = Convert.ToString(ds.Tables[0].Rows[0]["LinkValue"]);
                    }
                    string finYeaid = d2.getCurrentFinanceYear(usercode, collegecode1);



                    if (linkvalue != "" && rollno != "")
                    {
                        for (row = 0; row < gridInv.Rows.Count; row++)
                        {

                            Label lbldeptCode = (Label)gridInv.Rows[row].FindControl("lbl_itemdeptidInv");
                            Label lblledgeId = (Label)gridInv.Rows[row].FindControl("lbl_itemledgeidInv");
                            Label lblledge = (Label)gridInv.Rows[row].FindControl("lbl_itemledgeInv");
                            Label lblhdrCode = (Label)gridInv.Rows[row].FindControl("lbl_itemhcidInv");
                            Label lblitemname = (Label)gridInv.Rows[row].FindControl("lbl_itemnameinv");
                            Label lblsubhdrCode = (Label)gridInv.Rows[row].FindControl("lbl_itemShcInv");
                            Label lblItempk = (Label)gridInv.Rows[row].FindControl("lbl_itemnoidInv");
                            Label lblItemCode = (Label)gridInv.Rows[row].FindControl("lbl_itemnoInv");

                            TextBox txtQty = (TextBox)gridInv.Rows[row].FindControl("txtQtyInv");
                            Label txtRPU = (Label)gridInv.Rows[row].FindControl("lbl_RPUInv");
                            TextBox txtAmt = (TextBox)gridInv.Rows[row].FindControl("txtamtInv");

                            int Qty = 0;
                            double RPU = 0;
                            double amt = 0;

                            int.TryParse(txtQty.Text, out Qty);
                            double.TryParse(txtRPU.Text, out RPU);
                            double.TryParse(txtAmt.Text, out amt);


                            string lid = lblledgeId.Text;//ddlLedgerInv.SelectedValue;
                            string lname = lblledge.Text;//ddlLedgerInv.SelectedItem.Text;
                            string hid = getHeaderFk(lid);

                            string text_circode = string.Empty;
                            string appno = string.Empty;
                            string seattype = string.Empty;
                            string cursem = string.Empty;
                            string batch_year = string.Empty;

                            if (amt > 0)
                            {

                                string seattypeCurQuery = " select seattype,r.Current_Semester,r.Batch_Year,a.app_no  from applyn a,Registration r where a.app_no=r.App_No  and a.college_code=" + collegecode1 + " ";

                                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
                                {
                                    //roll no
                                    seattypeCurQuery += "  and r.Roll_No =  '" + rollno + "' ";
                                }
                                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
                                {
                                    //reg no
                                    seattypeCurQuery += " and  R.Reg_No = '" + rollno + "' ";
                                }
                                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
                                {
                                    //Admin no
                                    seattypeCurQuery += " and  R.Roll_admit = '" + rollno + "' ";
                                }
                                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
                                {
                                    //Smart no
                                    seattypeCurQuery += " and  R.smart_serial_no = '" + rollno + "' ";
                                }
                                else
                                {

                                    seattypeCurQuery = "select seattype,batch_year,app_no from applyn where  college_code=" + collegecode1 + " and app_formno ='" + rollno + "'";
                                    cursem = "1";
                                    //appno = rollno;
                                }

                                //rollno = lblstaticrollno.Text;

                                DataSet dsSTYpe = new DataSet();
                                dsSTYpe = d2.select_method_wo_parameter(seattypeCurQuery, "Text");
                                if (dsSTYpe.Tables.Count > 0)
                                {
                                    if (dsSTYpe.Tables[0].Rows.Count > 0)
                                    {
                                        seattype = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["seattype"]);
                                        batch_year = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["batch_year"]);
                                        appno = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["app_no"]);
                                        #region Add To Fee Allot
                                        if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) != 3)
                                        {
                                            cursem = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["Current_Semester"]);
                                        }

                                        if (cursem != "" && seattype != "" && batch_year != "")
                                        {
                                            if (linkvalue == "0")
                                            {

                                                string semesterquery = "select * from textvaltable where TextCriteria = 'FEECA'and textval = '" + cursem + " Semester' and college_code=" + collegecode1 + " and textval not like '-1%' order by len(textval),textval asc";
                                                ds.Clear();
                                                ds = d2.select_method_wo_parameter(semesterquery, "Text");
                                                if (ds.Tables[0].Rows.Count > 0)
                                                {
                                                    text_circode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
                                                }
                                            }
                                            else
                                            {

                                                cursem = returnYearforSem(cursem);
                                                string semesterquery = "select * from textvaltable where TextCriteria = 'FEECA'and textval = '" + cursem + " Year' and college_code=" + collegecode1 + " and textval not like '-1%' order by len(textval),textval asc";
                                                ds.Clear();
                                                ds = d2.select_method_wo_parameter(semesterquery, "Text");
                                                if (ds.Tables[0].Rows.Count > 0)
                                                {
                                                    text_circode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);

                                                }
                                            }

                                            if (text_circode != "")
                                            {
                                                string selectQuery = "";
                                                string updateQuery = "";

                                                string insertQuery = " INSERT INTO FT_FeeAllot(AllotDate,MemType,PayMode,App_No,LedgerFK,HeaderFK,FeeAmount,TotalAmount,FeeCategory,BalAmount,FinYearFK,FromGovtAmt, DeductReason) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "',1,1," + appno + "," + lid + "," + hid + "," + amt + "," + amt + "," + text_circode + "," + amt + "," + finYeaid + ",0,0) ";

                                                selectQuery = " select * from FT_FeeAllot where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "') and  FinYearFK='" + finYeaid + "' and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";

                                                updateQuery = "  update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "', MemType=1,FeeAmount=isnull(FeeAmount,0)+" + amt + ",BalAmount=isnull(BalAmount,0)+" + amt + ",TotalAmount=isnull(TotalAmount,0)+" + amt + " where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "') and  FinYearFK='" + finYeaid + "' and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";


                                                string finalQuery = " if exists ( " + selectQuery + " ) " + updateQuery + " else " + insertQuery + " ";
                                                insok = d2.update_method_wo_parameter(finalQuery, "Text");

                                                string insItem = "if exists (select App_No from Indivitual_student_ItemIssue  where MemType=1 and  App_no=" + appno + " and LedgerFK='" + lid + "' and  ItemFK='" + lblItempk.Text + "' and DeptFK='" + lbldeptCode.Text + "' and feecategory='" + text_circode + "' )  update Indivitual_student_ItemIssue set Quantity=Quantity+" + Qty + " ,Rpu=+" + RPU + " where MemType=1 and  App_no=" + appno + " and LedgerFK='" + lid + "' and  ItemFK='" + lblItempk.Text + "' and DeptFK='" + lbldeptCode.Text + "'  and feecategory='" + text_circode + "'  else insert into Indivitual_student_ItemIssue(AllotDate ,MemType ,App_no ,LedgerFK ,ItemFK ,DeptFK ,Quantity ,Rpu , feecategory) values('" + DateTime.Now.Date + "' ,1 ," + appno + " ,'" + lid + "','" + lblItempk.Text + "' ,'" + lbldeptCode.Text + "' ," + Qty + " ," + RPU + ",'" + text_circode + "')";
                                                insok = d2.update_method_wo_parameter(insItem, "Text");
                                                insOK = true;
                                            }

                                        }
                                        #endregion

                                    }
                                }

                            }
                        }
                    }
                    #endregion
                    loadGridStudent();
                }
                else if (rbl_rollnoNew.SelectedIndex == 1)
                {
                    #region Add Ledgers For Staff
                    //Year or sem
                    string rollno = txtroll_staff.Text.Trim();
                    string finYeaid = d2.getCurrentFinanceYear(usercode, collegecode1);

                    if (rollno != "")
                    {
                        for (row = 0; row < gridInv.Rows.Count; row++)
                        {
                            Label lbldeptCode = (Label)gridInv.Rows[row].FindControl("lbl_itemdeptidInv");
                            Label lblledgeId = (Label)gridInv.Rows[row].FindControl("lbl_itemledgeidInv");
                            Label lblledge = (Label)gridInv.Rows[row].FindControl("lbl_itemledgeInv");
                            Label lblhdrCode = (Label)gridInv.Rows[row].FindControl("lbl_itemhcidInv");
                            Label lblitemname = (Label)gridInv.Rows[row].FindControl("lbl_itemnameinv");
                            Label lblsubhdrCode = (Label)gridInv.Rows[row].FindControl("lbl_itemShcInv");
                            Label lblItempk = (Label)gridInv.Rows[row].FindControl("lbl_itemnoidInv");
                            Label lblItemCode = (Label)gridInv.Rows[row].FindControl("lbl_itemnoInv");

                            TextBox txtQty = (TextBox)gridInv.Rows[row].FindControl("txtQtyInv");
                            Label txtRPU = (Label)gridInv.Rows[row].FindControl("lbl_RPUInv");
                            TextBox txtAmt = (TextBox)gridInv.Rows[row].FindControl("txtamtInv");

                            int Qty = 0;
                            double RPU = 0;
                            double amt = 0;

                            int.TryParse(txtQty.Text, out Qty);
                            double.TryParse(txtRPU.Text, out RPU);
                            double.TryParse(txtAmt.Text, out amt);


                            string lid = lblledgeId.Text;//ddlLedgerInv.SelectedValue;
                            string lname = lblledge.Text;//ddlLedgerInv.SelectedItem.Text;
                            string hid = getHeaderFk(lid);

                            string text_circode = string.Empty;
                            string appno = string.Empty;
                            string cursem = "0";

                            if (amt > 0)
                            {
                                appno = d2.GetFunction("select a.appl_id from staffmaster s,staff_appl_master a where s.appl_no=a.appl_no and s.staff_code='" + rollno + "' and s.college_code=" + collegecode1 + " ");

                                if (appno != "" && appno != "0")
                                {
                                    text_circode = cursem;
                                    string memtype = "1";
                                    switch (rbl_rollnoNew.SelectedIndex)
                                    {
                                        case 0:
                                            memtype = "1";
                                            break;
                                        case 1:
                                            memtype = "2";
                                            break;
                                        case 2:
                                            memtype = "3";
                                            break;
                                        case 3:
                                            memtype = "4"; ;
                                            break;
                                    }

                                    string selectQuery = "";
                                    string updateQuery = "";

                                    string insertQuery = " INSERT INTO FT_FeeAllot(AllotDate,MemType,PayMode,App_No,LedgerFK,HeaderFK,FeeAmount,TotalAmount,FeeCategory,BalAmount,FinYearFK,FromGovtAmt, DeductReason) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "'," + memtype + ",1," + appno + "," + lid + "," + hid + "," + amt + "," + amt + "," + text_circode + "," + amt + "," + finYeaid + ",0,0) ";

                                    selectQuery = " select * from FT_FeeAllot where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "') and  FinYearFK='" + finYeaid + "' and App_No in('" + appno + "')  and isnull(istransfer,'0')='0'";

                                    updateQuery = "  update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "', MemType=" + memtype + ",FeeAmount=isnull(FeeAmount,0)+" + amt + ",BalAmount=isnull(BalAmount,0)+" + amt + ",TotalAmount=isnull(TotalAmount,0)+" + amt + " where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "') and  FinYearFK='" + finYeaid + "' and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";


                                    string finalQuery = " if exists ( " + selectQuery + " ) " + updateQuery + " else " + insertQuery + " ";
                                    insok = d2.update_method_wo_parameter(finalQuery, "Text");

                                    string insItem = "if exists (select App_No from Indivitual_student_ItemIssue  where MemType=" + memtype + " and  App_no=" + appno + " and LedgerFK='" + lid + "' and  ItemFK='" + lblItempk.Text + "' and DeptFK='" + lbldeptCode.Text + "'  and feecategory='" + text_circode + "' )  update Indivitual_student_ItemIssue set Quantity=Quantity+" + Qty + " ,Rpu=+" + RPU + " where MemType=" + memtype + " and  App_no=" + appno + " and LedgerFK='" + lid + "' and  ItemFK='" + lblItempk.Text + "' and DeptFK='" + lbldeptCode.Text + "'  and feecategory='" + text_circode + "'  else insert into Indivitual_student_ItemIssue(AllotDate ,MemType ,App_no ,LedgerFK ,ItemFK ,DeptFK ,Quantity ,Rpu , feecategory) values('" + DateTime.Now.Date + "' ," + memtype + " ," + appno + " ,'" + lid + "','" + lblItempk.Text + "' ,'" + lbldeptCode.Text + "' ," + Qty + " ," + RPU + ",'" + text_circode + "')";
                                    insok = d2.update_method_wo_parameter(insItem, "Text");
                                    insOK = true;
                                }
                            }
                        }
                    }
                    #endregion
                    loadGridStaff();
                }
                else if (rbl_rollnoNew.SelectedIndex == 2)
                {
                    #region Add Ledgers For Vendor
                    //Year or sem
                    string rollno = txtname_vendor.Text.Trim();
                    try
                    {
                        rollno = rollno.Split('-')[2];
                    }
                    catch { rollno = ""; }
                    string finYeaid = d2.getCurrentFinanceYear(usercode, collegecode1);

                    if (rollno != "")
                    {
                        for (row = 0; row < gridInv.Rows.Count; row++)
                        {
                            Label lbldeptCode = (Label)gridInv.Rows[row].FindControl("lbl_itemdeptidInv");
                            Label lblledgeId = (Label)gridInv.Rows[row].FindControl("lbl_itemledgeidInv");
                            Label lblledge = (Label)gridInv.Rows[row].FindControl("lbl_itemledgeInv");
                            Label lblhdrCode = (Label)gridInv.Rows[row].FindControl("lbl_itemhcidInv");
                            Label lblitemname = (Label)gridInv.Rows[row].FindControl("lbl_itemnameinv");
                            Label lblsubhdrCode = (Label)gridInv.Rows[row].FindControl("lbl_itemShcInv");
                            Label lblItempk = (Label)gridInv.Rows[row].FindControl("lbl_itemnoidInv");
                            Label lblItemCode = (Label)gridInv.Rows[row].FindControl("lbl_itemnoInv");

                            TextBox txtQty = (TextBox)gridInv.Rows[row].FindControl("txtQtyInv");
                            Label txtRPU = (Label)gridInv.Rows[row].FindControl("lbl_RPUInv");
                            TextBox txtAmt = (TextBox)gridInv.Rows[row].FindControl("txtamtInv");

                            int Qty = 0;
                            double RPU = 0;
                            double amt = 0;

                            int.TryParse(txtQty.Text, out Qty);
                            double.TryParse(txtRPU.Text, out RPU);
                            double.TryParse(txtAmt.Text, out amt);

                            string lid = lblledgeId.Text;//ddlLedgerInv.SelectedValue;
                            string lname = lblledge.Text;// ddlLedgerInv.SelectedItem.Text;
                            string hid = getHeaderFk(lid);

                            string text_circode = string.Empty;
                            string appno = string.Empty;
                            string cursem = "0";


                            if (amt > 0)
                            {
                                appno = rollno;
                                if (appno != "" && appno != "0")
                                {
                                    text_circode = cursem;
                                    string memtype = "1";
                                    switch (rbl_rollnoNew.SelectedIndex)
                                    {
                                        case 0:
                                            memtype = "1";
                                            break;
                                        case 1:
                                            memtype = "2";
                                            break;
                                        case 2:
                                            memtype = "3";
                                            break;
                                        case 3:
                                            memtype = "4"; ;
                                            break;
                                    }

                                    string selectQuery = "";
                                    string updateQuery = "";

                                    string insertQuery = " INSERT INTO FT_FeeAllot(AllotDate,MemType,PayMode,App_No,LedgerFK,HeaderFK,FeeAmount,TotalAmount,FeeCategory,BalAmount,FinYearFK,FromGovtAmt, DeductReason) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "'," + memtype + ",1," + appno + "," + lid + "," + hid + "," + amt + "," + amt + "," + text_circode + "," + amt + "," + finYeaid + ",0,0) ";

                                    selectQuery = " select * from FT_FeeAllot where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "') and  FinYearFK='" + finYeaid + "' and App_No in('" + appno + "') and isnull(istransfer,'0')='0' ";

                                    updateQuery = "  update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "', MemType=" + memtype + ",FeeAmount=isnull(FeeAmount,0)+" + amt + ",BalAmount=isnull(BalAmount,0)+" + amt + ",TotalAmount=isnull(TotalAmount,0)+" + amt + " where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "') and  FinYearFK='" + finYeaid + "' and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";


                                    string finalQuery = " if exists ( " + selectQuery + " ) " + updateQuery + " else " + insertQuery + " ";
                                    insok = d2.update_method_wo_parameter(finalQuery, "Text");

                                    string insItem = "if exists (select App_No from Indivitual_student_ItemIssue  where MemType=" + memtype + " and  App_no=" + appno + " and LedgerFK='" + lid + "' and  ItemFK='" + lblItempk.Text + "' and DeptFK='" + lbldeptCode.Text + "'  and feecategory='" + text_circode + "')  update Indivitual_student_ItemIssue set Quantity=Quantity+" + Qty + " ,Rpu=+" + RPU + " where MemType=" + memtype + " and  App_no=" + appno + " and LedgerFK='" + lid + "' and  ItemFK='" + lblItempk.Text + "' and DeptFK='" + lbldeptCode.Text + "' and feecategory='" + text_circode + "'  else insert into Indivitual_student_ItemIssue(AllotDate ,MemType ,App_no ,LedgerFK ,ItemFK ,DeptFK ,Quantity ,Rpu , feecategory) values('" + DateTime.Now.Date + "' ," + memtype + " ," + appno + " ,'" + lid + "','" + lblItempk.Text + "' ,'" + lbldeptCode.Text + "' ," + Qty + " ," + RPU + ",'" + text_circode + "')";
                                    insok = d2.update_method_wo_parameter(insItem, "Text");
                                    insOK = true;

                                }


                            }
                        }
                    }
                    #endregion
                    loadGridVendor();
                }
                else if (rbl_rollnoNew.SelectedIndex == 3)
                {
                    string newVenCode = generateVendorCode().Trim();
                    string staffId = Convert.ToString(txtroll_other.Text.Trim());
                    string staffMob = Convert.ToString(txt_otherMobile.Text.Trim());
                    try
                    {
                        d2.update_method_wo_parameter("if not exists (select VendorCode from co_vendormaster where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5) insert into co_vendormaster  (VendorCode,vendorname,VendorMobileNo,VendorAddress,VendorCity,VendorCompName,VendorType) values ('" + newVenCode + "','" + staffId + "','" + staffMob + "','" + txtAdd1_Other.Text.Trim() + "','" + txtAdd2_Other.Text.Trim() + "','" + txtname_other.Text.Trim() + "',-5) else update co_vendormaster set VendorAddress='" + txtAdd1_Other.Text.Trim() + "',VendorCity='" + txtAdd2_Other.Text.Trim() + "',VendorCompName='" + txtname_other.Text.Trim() + "'  where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5 ", "Text");
                    }
                    catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
                    newVenCode = d2.GetFunction("select VendorCode from co_vendormaster where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5").Trim();
                    if (newVenCode != "" && newVenCode != "0")
                    {
                        #region Add Ledgers For Others
                        //Year or sem

                        string finYeaid = d2.getCurrentFinanceYear(usercode, collegecode1);
                        string venPk = d2.GetFunction("select VendorPK from co_vendormaster where VendorCode='" + newVenCode + "'  and VendorType=-5").Trim();
                        if (venPk != "" && venPk != "0")
                        {
                            for (row = 0; row < gridInv.Rows.Count; row++)
                            {
                                Label lbldeptCode = (Label)gridInv.Rows[row].FindControl("lbl_itemdeptidInv");
                                Label lblledgeId = (Label)gridInv.Rows[row].FindControl("lbl_itemledgeidInv");
                                Label lblledge = (Label)gridInv.Rows[row].FindControl("lbl_itemledgeInv");
                                Label lblhdrCode = (Label)gridInv.Rows[row].FindControl("lbl_itemhcidInv");
                                Label lblitemname = (Label)gridInv.Rows[row].FindControl("lbl_itemnameinv");
                                Label lblsubhdrCode = (Label)gridInv.Rows[row].FindControl("lbl_itemShcInv");
                                Label lblItempk = (Label)gridInv.Rows[row].FindControl("lbl_itemnoidInv");
                                Label lblItemCode = (Label)gridInv.Rows[row].FindControl("lbl_itemnoInv");

                                TextBox txtQty = (TextBox)gridInv.Rows[row].FindControl("txtQtyInv");
                                Label txtRPU = (Label)gridInv.Rows[row].FindControl("lbl_RPUInv");
                                TextBox txtAmt = (TextBox)gridInv.Rows[row].FindControl("txtamtInv");

                                int Qty = 0;
                                double RPU = 0;
                                double amt = 0;

                                int.TryParse(txtQty.Text, out Qty);
                                double.TryParse(txtRPU.Text, out RPU);
                                double.TryParse(txtAmt.Text, out amt);


                                string lid = lblledgeId.Text;//ddlLedgerInv.SelectedValue;
                                string lname = lblledge.Text;//ddlLedgerInv.SelectedItem.Text;
                                string hid = getHeaderFk(lid);

                                string text_circode = string.Empty;
                                string appno = string.Empty;
                                string cursem = "0";

                                if (amt > 0)
                                {
                                    appno = venPk;

                                    if (appno != "" && appno != "0")
                                    {
                                        text_circode = cursem;
                                        string memtype = "1";
                                        switch (rbl_rollnoNew.SelectedIndex)
                                        {
                                            case 0:
                                                memtype = "1";
                                                break;
                                            case 1:
                                                memtype = "2";
                                                break;
                                            case 2:
                                                memtype = "3";
                                                break;
                                            case 3:
                                                memtype = "4"; ;
                                                break;
                                        }

                                        string selectQuery = "";
                                        string updateQuery = "";

                                        string insertQuery = " INSERT INTO FT_FeeAllot(AllotDate,MemType,PayMode,App_No,LedgerFK,HeaderFK,FeeAmount,TotalAmount,FeeCategory,BalAmount,FinYearFK,FromGovtAmt, DeductReason) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "'," + memtype + ",1," + appno + "," + lid + "," + hid + "," + amt + "," + amt + "," + text_circode + "," + amt + "," + finYeaid + ",0,0) ";

                                        selectQuery = " select * from FT_FeeAllot where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "') and  FinYearFK='" + finYeaid + "' and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";

                                        updateQuery = "  update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "', MemType=" + memtype + ",FeeAmount=isnull(FeeAmount,0)+" + amt + ",BalAmount=isnull(BalAmount,0)+" + amt + ",TotalAmount=isnull(TotalAmount,0)+" + amt + " where LedgerFK in('" + lid + "') and HeaderFK in('" + hid + "') and FeeCategory in('" + text_circode + "') and  FinYearFK='" + finYeaid + "' and App_No in('" + appno + "') and isnull(istransfer,'0')='0'";


                                        string finalQuery = " if exists ( " + selectQuery + " ) " + updateQuery + " else " + insertQuery + " ";
                                        insok = d2.update_method_wo_parameter(finalQuery, "Text");

                                        string insItem = "if exists (select App_No from Indivitual_student_ItemIssue  where MemType=" + memtype + " and  App_no=" + appno + " and LedgerFK='" + lid + "' and  ItemFK='" + lblItempk.Text + "' and DeptFK='" + lbldeptCode.Text + "' and feecategory='" + text_circode + "' )  update Indivitual_student_ItemIssue set Quantity=Quantity+" + Qty + " ,Rpu=+" + RPU + " where MemType=" + memtype + " and  App_no=" + appno + " and LedgerFK='" + lid + "' and  ItemFK='" + lblItempk.Text + "' and DeptFK='" + lbldeptCode.Text + "' and feecategory='" + text_circode + "'  else insert into Indivitual_student_ItemIssue(AllotDate ,MemType ,App_no ,LedgerFK ,ItemFK ,DeptFK ,Quantity ,Rpu , feecategory) values('" + DateTime.Now.Date + "' ," + memtype + " ," + appno + " ,'" + lid + "','" + lblItempk.Text + "' ,'" + lbldeptCode.Text + "' ," + Qty + " ," + RPU + ",'" + text_circode + "')";
                                        insok = d2.update_method_wo_parameter(insItem, "Text");
                                        insOK = true;
                                    }
                                }
                            }
                        }
                        #endregion
                        loadGridOthers();
                    }
                }
            }

            imgAlert.Visible = true;
            //this.Form.DefaultButton = "btn_alertclose";
            if (insOK)
            {

                lbl_alert.Text = "Saved Sucessfully";
                //if (Session["viwGridInv"] != null)
                //    Session.Remove("viwGridInv");
            }
            else
            {

                lbl_alert.Text = "Not Saved";
                //if (Session["viwGridInv"] != null)
                //    Session.Remove("viwGridInv");
            }

            div_HeaderLed.Visible = false;
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, collegecode1, "ChallanReceipt");
            //if (Session["viwGridInv"] != null)
            //    Session.Remove("viwGridInv");
        }
    }
    //popup History
    protected void btnHistory_Click(object sender, EventArgs e)
    {
        if (rbl_rollnoNew.SelectedIndex == 0)
        {
            if (txt_rollno.Text.Trim() != "")
            {
                //this.Form.DefaultButton = "btnhisgo";
                div_History.Visible = true;
                headerbind1();
                ledgerbind1();

                gridHist.DataSource = null;
                gridHist.DataBind();
                // btnhisgo.Visible = false;
                btnhisgo_Click(sender, e);
                imgAlert.Visible = false;
            }
            else
            {
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Enter " + rbl_rollno.SelectedItem.Text;
            }
        }
        else if (rbl_rollnoNew.SelectedIndex == 1)
        {
            if (txtroll_staff.Text.Trim() != "")
            {
                //this.Form.DefaultButton = "btnhisgo";
                div_History.Visible = true;
                headerbind1();
                ledgerbind1();

                gridHist.DataSource = null;
                gridHist.DataBind();
                // btnhisgo.Visible = false;
                btnhisgo_Click(sender, e);
                imgAlert.Visible = false;
            }
            else
            {
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Enter StaffId";
            }
        }
        else if (rbl_rollnoNew.SelectedIndex == 2)
        {
            if (txtroll_vendor.Text.Trim() != "")
            {
                //this.Form.DefaultButton = "btnhisgo";
                div_History.Visible = true;
                headerbind1();
                ledgerbind1();

                gridHist.DataSource = null;
                gridHist.DataBind();
                // btnhisgo.Visible = false;
                btnhisgo_Click(sender, e);
                imgAlert.Visible = false;
            }
            else
            {
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Enter Vendor And Contact Person";
            }
        }
        else if (rbl_rollnoNew.SelectedIndex == 3)
        {
            if (txtroll_other.Text.Trim() != "")// && txt_otherMobile.Text.Trim() != ""
            {
                //this.Form.DefaultButton = "btnhisgo";
                div_History.Visible = true;
                headerbind1();
                ledgerbind1();

                gridHist.DataSource = null;
                gridHist.DataBind();
                // btnhisgo.Visible = false;
                btnhisgo_Click(sender, e);
                imgAlert.Visible = false;
            }
            else
            {
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Enter Name-Mobile";
            }
        }
    }
    public void headerbind1()
    {
        try
        {
            txtheadr3.Text = "---Select---";
            cbheadr3.Checked = false;
            cblheadr3.Items.Clear();

            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H,FS_HeaderPrivilage P WHERE H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = " + usercode + " AND H.CollegeCode = " + collegecode1 + "";
            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables[0].Rows.Count > 0)
            {
                cblheadr3.DataSource = ds;
                cblheadr3.DataTextField = "HeaderName";
                cblheadr3.DataValueField = "HeaderPK";
                cblheadr3.DataBind();
                for (int i = 0; i < cblheadr3.Items.Count; i++)
                {
                    cblheadr3.Items[i].Selected = true;
                }
                txtheadr3.Text = "Header(" + cblheadr3.Items.Count + ")";
                cbheadr3.Checked = true;
            }
        }
        catch (Exception ex) { }
    }
    protected void cbheadr3_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cblheadr3, cbheadr3, txtheadr3, "Header");

        ledgerbind1();
        gridHist.Visible = false;
    }
    protected void cblheadr3_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cblheadr3, cbheadr3, txtheadr3, "Header");

        ledgerbind1();
        gridHist.Visible = false;
    }
    protected void cblgr3_ChekedChange(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cbllgr3, cblgr3, txtlgr3, "Ledger");
    }
    protected void cbl_lgr3_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cbllgr3, cblgr3, txtlgr3, "Ledger");
    }
    public void ledgerbind1()
    {
        try
        {
            txtlgr3.Text = "---Select---";
            cblgr3.Checked = false;
            string itemheadercode = "";
            for (int i = 0; i < cblheadr3.Items.Count; i++)
            {
                if (cblheadr3.Items[i].Selected == true)
                {
                    if (itemheadercode == "")
                    {
                        itemheadercode = "" + cblheadr3.Items[i].Value.ToString() + "";
                    }
                    else
                    {
                        itemheadercode = itemheadercode + "" + "," + "" + cblheadr3.Items[i].Value.ToString() + "";
                    }
                }
            }

            cbllgr3.Items.Clear();

            //string query = "SELECT Fee_Code,Fee_Type FROM fee_info I,acctheader H WHERE I.header_id = H.header_id AND I.header_id IN ('" + itemheadercode + "') and  Fee_Type NOT IN ('Cash','Income & Expenditure','Misc','Excess Amount','Fine') AND Fee_Type NOT IN (SELECT BankName FROM Bank_Master1) ORDER BY Fee_Type";

            string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode  and l.LedgerMode=0   AND P. UserCode = " + usercode + " AND L.CollegeCode = " + collegecode1 + " and L.HeaderFK in (" + itemheadercode + ")";

            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables[0].Rows.Count > 0)
            {
                cbllgr3.DataSource = ds;
                cbllgr3.DataTextField = "LedgerName";
                cbllgr3.DataValueField = "LedgerPK";
                cbllgr3.DataBind();
                for (int i = 0; i < cbllgr3.Items.Count; i++)
                {
                    cbllgr3.Items[i].Selected = true;
                }
                txtlgr3.Text = "Ledger(" + cbllgr3.Items.Count + ")";
                cblgr3.Checked = true;
            }
        }
        catch (Exception ex) { }
    }
    protected void btnhisgo_Click(object sender, EventArgs e)
    {
        try
        {
            //this.Form.DefaultButton = "btnhisgo";
            string appno = string.Empty;
            if (rbl_rollnoNew.SelectedIndex == 0)
            {
                string appQ = "select r.app_no from applyn a, Registration r where a.app_no=r.App_No  and r.college_code='" + collegecode1 + "'  ";
                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
                {
                    appQ += " and  r.Roll_No='" + txt_rollno.Text.Trim() + "'";
                }
                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
                {
                    appQ += " and  r.Reg_No='" + txt_rollno.Text.Trim() + "'";
                }
                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
                {
                    appQ += " and  r.Roll_Admit='" + txt_rollno.Text.Trim() + "'";
                }
                else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
                {
                    appQ += " and  r.smart_serial_no='" + txt_rollno.Text.Trim() + "'";
                }
                else
                {
                    appQ = "select app_no from applyn a where app_formno='" + txt_rollno.Text.Trim() + "'  and a.college_code='" + collegecode1 + "' ";
                }
                appno = d2.GetFunction(appQ);
            }
            else if (rbl_rollnoNew.SelectedIndex == 1)
            {
                appno = d2.GetFunction("select a.appl_id from staffmaster s,staff_appl_master a where s.appl_no=a.appl_no and s.staff_code='" + txtroll_staff.Text.Trim() + "' and s.college_code=" + collegecode1 + " ");
            }
            else if (rbl_rollnoNew.SelectedIndex == 2)
            {
                try
                {
                    appno = txtroll_vendor.Text.Trim().Split('-')[2];
                }
                catch { appno = ""; }
            }
            else if (rbl_rollnoNew.SelectedIndex == 3)
            {
                try
                {
                    string staffId = Convert.ToString(txtroll_other.Text.Trim());
                    string staffMob = Convert.ToString(txt_otherMobile.Text.Trim());

                    appno = d2.GetFunction("select VendorPK from co_vendormaster where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5").Trim();
                }
                catch { }
            }

            DataTable tbl_Ledger = new DataTable();
            tbl_Ledger.Columns.Add("S.No");
            tbl_Ledger.Columns.Add("Date");
            tbl_Ledger.Columns.Add("Receipt No");
            tbl_Ledger.Columns.Add("PaymentMode");
            tbl_Ledger.Columns.Add("Cheque/DD/ ChallanNo");
            tbl_Ledger.Columns.Add("HeaderName");
            tbl_Ledger.Columns.Add("LedgerName");
            tbl_Ledger.Columns.Add("Total");
            tbl_Ledger.Columns.Add("Paid");
            tbl_Ledger.Columns.Add("Balance");
            tbl_Ledger.Columns.Add("Year/Sem");

            string itemheadercode = GetSelectedItemsValueAsString(cblheadr3);

            string ledgercode = GetSelectedItemsValue(cbllgr3);

            if (itemheadercode != "" && appno != "" && appno != "0")
            {
                string query = " select headername,ledgername,sum(totalamount) allot,sum(BalAmount) bal,a.FeeCategory,a.HeaderFK,l.LedgerPK from FT_FeeAllot a, FM_HeaderMaster h, FM_LedgerMaster l where a.HeaderFK = h.HeaderPK  and a.LedgerFK = l.LedgerPK  and h.HeaderPK = l.HeaderFK  and l.LedgerMode=0  and a.App_No='" + appno + "' and a.HeaderFk in ('" + itemheadercode + "') and a.LedgerFK in (" + ledgercode + ") and isnull(a.istransfer,'0')='0' group by a.App_No,HeaderName,LedgerName,a.FeeCategory,a.HeaderFK,l.LedgerPK   ";

                ds.Clear();
                ds = d2.select_method_wo_parameter(query, "Text");
                int sno = 1;
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            string hid = Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]);
                            string lid = Convert.ToString(ds.Tables[0].Rows[i]["LedgerPK"]);
                            string FeeCategory = Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]);

                            query = " select Convert(varchar(10),TransDate,103) as TransDate,TransCode,case when D.PayMode = 1 THEN 'Cash' WHEN D.PayMode = 2 THEN 'Cheque' when D.PayMode = 3 then 'DD' when D.PayMode = 4 then 'Challan'  when D.PayMode = 5 then 'Online' when D.PayMode = 7 then 'NEFT' end paymode,SUM(debit) paid,DDNo from FT_FinDailyTransaction d,FM_HeaderMaster h,FM_LedgerMaster l where d.HeaderFK = h.HeaderPK and d.LedgerFK = l.LedgerPK and h.HeaderPK = L.HeaderFK   and l.LedgerMode=0 and  d.App_No='" + appno + "' and h.HeaderPK in (" + hid + ") and d.LedgerFK =" + lid + " and d.FeeCategory =" + FeeCategory + " and isnull(iscanceled,'0')='0' group by TransDate,TransCode,D.App_No,HeaderName,LedgerName,D.PayMode,DDNo ";
                            DataSet ds2 = new DataSet();
                            ds2 = d2.select_method_wo_parameter(query, "Text");
                            if (ds2.Tables.Count > 0)
                            {
                                if (ds2.Tables[0].Rows.Count > 0)
                                {
                                    for (int sndrow = 0; sndrow < ds2.Tables[0].Rows.Count; sndrow++)
                                    {
                                        string FeeCat = d2.GetFunction("select textval from TextValTable where TextCode=" + FeeCategory + " and college_code=" + collegecode1 + "");

                                        DataRow drLedger = tbl_Ledger.NewRow();
                                        drLedger["S.No"] = sno;

                                        drLedger["HeaderName"] = Convert.ToString(ds.Tables[0].Rows[i]["HeaderName"]);
                                        drLedger["ledgername"] = Convert.ToString(ds.Tables[0].Rows[i]["ledgername"]);
                                        drLedger["Year/Sem"] = FeeCat;
                                        drLedger["Total"] = Convert.ToString(ds.Tables[0].Rows[i]["allot"]);

                                        drLedger["Date"] = Convert.ToString(ds2.Tables[0].Rows[sndrow]["TransDate"]);
                                        drLedger["Receipt No"] = Convert.ToString(ds2.Tables[0].Rows[sndrow]["TransCode"]);
                                        drLedger["PaymentMode"] = Convert.ToString(ds2.Tables[0].Rows[sndrow]["paymode"]);
                                        drLedger["Paid"] = Convert.ToString(ds2.Tables[0].Rows[sndrow]["paid"]);
                                        drLedger["Balance"] = Convert.ToString(ds.Tables[0].Rows[i]["bal"]);
                                        drLedger["Cheque/DD/ ChallanNo"] = Convert.ToString(ds2.Tables[0].Rows[sndrow]["ddno"]);

                                        tbl_Ledger.Rows.Add(drLedger);
                                        sno++;
                                    }
                                }
                            }

                        }

                        //string overallQ = "  SELECT SUM(ISNULL(Total,0.00)) As Total,sum(ISNULL(PaidAmt,0.00)) As Paid,SUM(ISNULL(ISNULL(Total,0.00)-ISNULL(PaidAmt,'0.00'),0.00)) as Bal FROM Fee_Allot A,TextValTable T,Fee_Info I,acctheader H WHERE A.fee_category = T.TextCode AND A.fee_code = I.Fee_Code AND A.Header_ID = I.header_id AND I.header_id = H.header_id  and A.Header_ID in ('" + itemheadercode + "') AND Roll_Admit = '" + txt_rollno.Text.Trim() + "' ";
                        //ds.Clear();
                        //ds = d2.select_method_wo_parameter(overallQ, "Text");

                        //if (ds.Tables.Count > 0)
                        //{
                        //    if (ds.Tables[0].Rows.Count > 0)
                        //    {
                        //        DataRow drLedger0 = tbl_Ledger.NewRow();

                        //        drLedger0["fee_type"] = Convert.ToString("Overall");
                        //        drLedger0["Total"] = Convert.ToString(ds.Tables[0].Rows[0]["Total"]);
                        //        drLedger0["PaidAmt"] = Convert.ToString(ds.Tables[0].Rows[0]["Paid"]);
                        //        drLedger0["BalAmt"] = Convert.ToString(ds.Tables[0].Rows[0]["Bal"]);
                        //        tbl_Ledger.Rows.Add(drLedger0);
                        //    }
                        //}

                        //DataRow drLedger1 = tbl_Ledger.NewRow();
                        //drLedger1["fee_type"] = Convert.ToString("Excess Amount");
                        //tbl_Ledger.Rows.Add(drLedger1);

                        gridHist.DataSource = tbl_Ledger;
                        gridHist.DataBind();
                        gridHist.Visible = true;
                        // btnhisgo.Visible = true;
                        if (gridHist.Rows.Count < 1)
                        {
                            gridHist.DataSource = null;
                            gridHist.DataBind();
                            // btnhisgo.Visible = false;
                            imgAlert.Visible = true;
                            //this.Form.DefaultButton = "btn_alertclose";
                            lbl_alert.Text = "No Records Found";
                        }
                    }
                    else
                    {
                        gridHist.DataSource = null;
                        gridHist.DataBind();
                        // btnhisgo.Visible = false;
                        imgAlert.Visible = true;
                        //this.Form.DefaultButton = "btn_alertclose";
                        lbl_alert.Text = "No Records Found";
                    }
                }
                else
                {
                    gridHist.DataSource = null;
                    gridHist.DataBind();
                    // btnhisgo.Visible = false;
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "No Records Found";
                }

            }
            else
            {
                gridHist.DataSource = null;
                gridHist.DataBind();
                // btnhisgo.Visible = false;
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Select Header";
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, collegecode1, "ChallanReceipt");
            gridHist.DataSource = null;
            gridHist.DataBind();
            //btnhisgo.Visible = false;
        }
    }
    protected void imagebtnpopHistclose_Click(object sender, EventArgs e)
    {
        div_History.Visible = false;
    }
    //Excess Popup
    protected void btnExc_Click(object sender, EventArgs e)
    {
        try
        {
            if (checkSchoolSetting() == 0)
            {
                finexcess.Visible = true;
                addfeeloadfinyearexcess();
            }
            else
            {
                finexcess.Visible = false;
            }

            divExcess.Visible = true;
            bindHeaderLedger();
            inclAddAmt.Checked = false;
            cbAdvance.Checked = false;
        }
        catch
        {
            ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Excess Fees Not Applicable')", true);
        }
    }
    public void bindHeaderLedger()
    {
        try
        {
            btnExcessSave.Visible = false;
            btnExExit.Visible = false;
            string selectQuery = "";
            string appnoNew = string.Empty;
            string roll_no = txt_rollno.Text.Trim();
            string semyear = string.Empty;
            semyear = GetSelectedItemsValueAsString(cbl_sem);


            string queryRollApp = "SELECT A.app_no,R.smart_serial_no,Roll_No,Reg_No,R.Stud_Name,Course_Name+'-'+Dept_Name Degree,R.Current_Semester,R.Roll_admit  FROM applyn A,Registration R,Degree G,Course C,Department D WHERE A.app_no = R.App_No AND R.degree_code = G.Degree_Code AND G.Course_Id = C.Course_Id AND G.college_code = C.college_code AND G.Dept_Code = D.Dept_Code AND G.college_code = D.college_code  and a.college_code='" + collegecode1 + "'  and ";
            if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
            {
                //roll no
                queryRollApp += "  Roll_No = '" + roll_no + "' ";
            }
            else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
            {
                //reg no
                queryRollApp += "   Reg_No = '" + roll_no + "' ";
            }
            else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
            {
                //Admin no
                queryRollApp += "  R.Roll_admit = '" + roll_no + "' ";
            }
            else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
            {
                //Admin no
                queryRollApp += "  R.smart_serial_no = '" + roll_no + "' ";
            }
            else
            {
                //AppformNo
                queryRollApp = "SELECT A.app_no,a.Stud_Name,Course_Name+'-'+Dept_Name Degree,a.Current_Semester  FROM applyn A,Degree G,Course C,Department D WHERE  a.degree_code = G.Degree_Code AND G.Course_Id = C.Course_Id AND G.college_code = C.college_code AND G.Dept_Code = D.Dept_Code AND G.college_code = D.college_code  and a.college_code='" + collegecode1 + "'  and  app_formno  = '" + roll_no + "' ";
            }

            DataSet dsRollApp = new DataSet();
            dsRollApp = d2.select_method_wo_parameter(queryRollApp, "Text");
            if (dsRollApp.Tables.Count > 0)
            {
                if (dsRollApp.Tables[0].Rows.Count > 0)
                {
                    appnoNew = Convert.ToString(dsRollApp.Tables[0].Rows[0]["app_no"]);
                }
            }
            selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,LedgerName,FeeAmount,DeductAmout as DeductAmount,TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,PaidAmount,BalAmount,TextVal,TextCode FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode  and l.LedgerMode=0   and T.TextCode in('" + semyear + "')  AND A.App_No = " + appnoNew + " and isnull(a.istransfer,'0')='0'";


            if (cb_selcthd.Checked)
            {
                string headercode = "";
                headercode = GetSelectedItemsValue(cbl_grpheader);

                if (rbl_headerselect.SelectedIndex == 0)
                {
                    headercode = "";
                    headercode = GetSelectedItemsValueAsString(cbl_grpheader);

                    //Group Header
                    selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,LedgerName,FeeAmount,DeductAmout as DeductAmount ,TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,PaidAmount,BalAmount,TextVal,TextCode,ChlGroupHeader FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "') and isnull(a.istransfer,'0')='0'";
                    if (rdo_receipt.Checked || rdo_sngle.Checked)
                    {
                        selectQuery += " AND A.App_No = " + appnoNew + " ";
                    }

                    if (lbltype.Text != "")
                    {
                        selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                    }

                }
                else if (rbl_headerselect.SelectedIndex == 1)
                {
                    //Header
                    selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                }
                else
                {
                    //Ledger
                    selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                }

            }

            DataSet ds_stud = new DataSet();
            ds_stud.Clear();
            ds_stud = d2.select_method_wo_parameter(selectQuery, "Text");

            if (ds_stud.Tables.Count > 0)
            {
                if (ds_stud.Tables[0].Rows.Count > 0)
                {
                    DataTable tbl_Student = new DataTable();

                    tbl_Student.Columns.Add("Category");
                    tbl_Student.Columns.Add("SemYear");
                    tbl_Student.Columns.Add("Header");
                    tbl_Student.Columns.Add("Ledger");
                    tbl_Student.Columns.Add("HeaderCode");
                    tbl_Student.Columns.Add("LedgerCode");

                    for (int i = 0; i < ds_stud.Tables[0].Rows.Count; i++)
                    {
                        DataRow dr_Student = tbl_Student.NewRow();

                        dr_Student["Category"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["TextCode"]);
                        dr_Student["SemYear"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["TextVal"]);
                        dr_Student["Header"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderName"]);
                        dr_Student["HeaderCode"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]);
                        dr_Student["Ledger"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerName"]);
                        dr_Student["LedgerCode"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]);

                        tbl_Student.Rows.Add(dr_Student);
                    }
                    //DataRow dr_Student1 = tbl_Student.NewRow();
                    //dr_Student1["Ledger"] = "Total";
                    //tbl_Student.Rows.Add(dr_Student1);

                    gridExcess.DataSource = tbl_Student;
                    gridExcess.DataBind();
                    btnExcessSave.Visible = true;
                    btnExExit.Visible = true;
                }
            }
            if (gridExcess.Rows.Count < 1)
            {
                gridExcess.DataSource = null;
                gridExcess.DataBind();
            }
        }
        catch (Exception ex)
        {

            gridExcess.DataSource = null;
            gridExcess.DataBind();
            btnExcessSave.Visible = false;
            btnExExit.Visible = false;
        }

        double exAmtOvall = 0;
        foreach (GridViewRow row in gridExcess.Rows)
        {
            //if (row.RowIndex != gridExcess.Rows.Count - 1)
            //{
            CheckBox cb = (CheckBox)row.Cells[1].FindControl("cb_excesspop");
            if (cb.Checked)
            {
                TextBox txtexAmt = (TextBox)row.FindControl("txt_ExAmtpop");
                if (txtexAmt.Text != "")
                {
                    if (Convert.ToDouble(txtexAmt.Text) > 0)
                    {
                        //To chk whole amount                        
                        exAmtOvall += Convert.ToDouble(txtexAmt.Text);
                    }
                }
            }
            //}
        }
        //txt_examt.Text = exAmtOvall.ToString();
    }
    protected void gridExcess_OnDataBound(object sender, EventArgs e)
    {
        //foreach(GridViewRow i in gridExcess.Rows)
        //{
        //    if (i.RowIndex == gridExcess.Rows.Count - 1)
        //    {
        //        i.Cells[0].Text= "";
        //        CheckBox cb = (CheckBox)i.Cells[1].FindControl("cb_excesspop");
        //        TextBox txt = (TextBox)i.Cells[4].FindControl("txt_ExAmtpop");
        //        cb.Visible = false;
        //        txt.Attributes.Add("ReadOnly", "ReadOnly");

        //    }
        //}
    }
    protected void imgExcessclose_Click(object sender, EventArgs e)
    {
        //bindHeaderLedger();
        gridExcess.DataSource = null;
        gridExcess.DataBind();
        divExcess.Visible = false;
    }
    protected void btnExcessOk_Click(object sender, EventArgs e)
    {
        ////this.Form.DefaultButton = "btnExcessSave";
        double exAmtOvall = 0;
        foreach (GridViewRow row in gridExcess.Rows)
        {
            //if (row.RowIndex != gridExcess.Rows.Count - 1)
            //{
            CheckBox cb = (CheckBox)row.Cells[1].FindControl("cb_excesspop");
            if (cb.Checked)
            {
                TextBox txtexAmt = (TextBox)row.FindControl("txt_ExAmtpop");
                if (txtexAmt.Text != "")
                {
                    if (Convert.ToDouble(txtexAmt.Text) > 0)
                    {
                        //To chk whole amount                        
                        exAmtOvall += Convert.ToDouble(txtexAmt.Text);
                    }
                }
            }
            //}
        }
        //txt_examt.Text = exAmtOvall.ToString();
        if (Convert.ToDouble(txt_examt.Text) == exAmtOvall)
        {
            divExcess.Visible = false;
        }
        else
        {
            imgAlert.Visible = true;
            //this.Form.DefaultButton = "btn_alertclose";
            lbl_alert.Text = "Please Provide Valid Excess Fees";
        }
    }
    //Excess Fees
    protected void btn_sureyes_Click(object sender, EventArgs e)
    {
        checkFromPopper = true;
        surediv.Visible = false;

        excessOk = true;
        btn_sureyesRcpt_Click(sender, e);
    }
    protected void btn_sureno_Click(object sender, EventArgs e)
    {
        checkFromPopper = true;
        surediv.Visible = false;
        txt_examt.Text = "0.00";
        excessOk = false;
        btn_sureyesRcpt_Click(sender, e);
    }
    //Caution Deposit 
    protected void cb_CautionDep_OnCheckedChanged(object sender, EventArgs e)
    {
        txt_examt.Text = "0";
    }
    private double getRefundAmount(string appNo)
    {
        double refund = 0;
        string refQ = "select isnull(sum(isnull(RefundAmount,0)-isnull(RefundAdjAmount,0)),0) as Refund from ft_feeallot where app_no='" + appNo + "' and isnull(istransfer,'0')='0'";
        double.TryParse(d2.GetFunction(refQ), out refund);
        return refund;
    }
    private void updateRefundAmount(string AppNo, double curAmount)
    {
        string selLedgeQ = "select Ledgerfk,HeaderFk,Feecategory,FinYearfk,isnull(RefundAmount,0) as RefundAmount,isnull(RefundAdjAmount,0) as RefundAdjAmount,(isnull(RefundAmount,0)-isnull(RefundAdjAmount,0)) as AvailAmount   from ft_feeallot where (isnull(RefundAmount,0)-isnull(RefundAdjAmount,0))>0 and app_no='" + AppNo + "' and isnull(istransfer,'0')='0'";
        DataSet dsRefLedger = new DataSet();
        dsRefLedger = d2.select_method_wo_parameter(selLedgeQ, "Text");
        if (dsRefLedger.Tables.Count > 0 && dsRefLedger.Tables[0].Rows.Count > 0)
        {
            for (int ledge = 0; ledge < dsRefLedger.Tables[0].Rows.Count; ledge++)
            {
                if (curAmount > 0)
                {
                    double refAvlAmt = 0;
                    double.TryParse(Convert.ToString(dsRefLedger.Tables[0].Rows[ledge]["AvailAmount"]), out refAvlAmt);

                    if (refAvlAmt > 0)
                    {
                        string ledgerID = Convert.ToString(dsRefLedger.Tables[0].Rows[ledge]["Ledgerfk"]).Trim();
                        string headerID = Convert.ToString(dsRefLedger.Tables[0].Rows[ledge]["HeaderFk"]).Trim();
                        string feeCat = Convert.ToString(dsRefLedger.Tables[0].Rows[ledge]["Feecategory"]).Trim();
                        string fineYearId = Convert.ToString(dsRefLedger.Tables[0].Rows[ledge]["FinYearfk"]).Trim();
                        double refTotAmt = 0;
                        double.TryParse(Convert.ToString(dsRefLedger.Tables[0].Rows[ledge]["RefundAmount"]), out refTotAmt);
                        double refAdjAmt = 0;
                        double.TryParse(Convert.ToString(dsRefLedger.Tables[0].Rows[ledge]["RefundAdjAmount"]), out refAdjAmt);
                        double curAdjAmt = 0;
                        if (refAvlAmt >= curAmount)
                        {
                            curAdjAmt = curAmount;
                            curAmount = 0;
                        }
                        else
                        {
                            curAdjAmt = refAvlAmt;
                            curAmount -= curAdjAmt;
                        }

                        if (curAdjAmt > 0)
                        {
                            string updateQ = "update ft_feeallot set RefundAdjAmount=(isnull(RefundAdjAmount,0)+" + curAdjAmt + ")  where app_no='" + AppNo + "' and Ledgerfk='" + ledgerID + "' and HeaderFk='" + headerID + "' and Feecategory='" + feeCat + "' and FinYearfk='" + fineYearId + "' and isnull(istransfer,'0')='0'";
                            d2.update_method_wo_parameter(updateQ, "Text");
                        }
                    }
                }
            }
        }
    }
    //Multiple Scholarship
    protected void cb_govt_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (cb_govt.Checked)
            {
                txtSchlReason.Visible = true;
                pnlMulReason.Visible = true;

                for (int i = 0; i < cblSchlReason.Items.Count; i++)
                {
                    cblSchlReason.Items[i].Selected = true;
                }
                txtSchlReason.Text = "Type (" + cblSchlReason.Items.Count + ")";
                cbSchlReason.Checked = true;
            }
            else
            {
                txtSchlReason.Visible = false;
                pnlMulReason.Visible = false;
            }
        }
        catch (Exception ex) { }
    }
    private void loadMultipleScholarshp()
    {
        try
        {
            DataSet dsSchl = new DataSet();
            txtSchlReason.Text = "";
            cbSchlReason.Checked = false;
            cblSchlReason.Items.Clear();
            string query = " select Distinct MasterValue,MasterCode from CO_MasterValues where MasterCriteria ='SchlolarshipReason' and CollegeCode ='" + ddl_college.SelectedValue + "' order by MasterValue asc";
            dsSchl = d2.select_method_wo_parameter(query, "Text");

            if (dsSchl.Tables.Count > 0 && dsSchl.Tables[0].Rows.Count > 0)
            {
                cblSchlReason.DataSource = dsSchl;
                cblSchlReason.DataTextField = "MasterValue";
                cblSchlReason.DataValueField = "MasterCode";
                cblSchlReason.DataBind();

                for (int i = 0; i < cblSchlReason.Items.Count; i++)
                {
                    cblSchlReason.Items[i].Selected = true;
                }
                txtSchlReason.Text = "Type (" + cblSchlReason.Items.Count + ")";
                cbSchlReason.Checked = true;
            }
        }
        catch (Exception ex) { }
    }
    private void loadScholarship(string appNo)
    {
        try
        {
            DataSet dsSchl = new DataSet();
            txtSchlReason.Text = "";
            cbSchlReason.Checked = false;
            cblSchlReason.Items.Clear();
            string collegeCode = Convert.ToString(ddl_college.SelectedValue);
            string query = " select distinct MasterValue,Mastercode from FT_FinScholarship s,CO_MasterValues m where MasterCode=ReasonCode and s.App_no=" + appNo + "  and isnull(s.TotalAmount,0)>0  and MasterCriteria ='SchlolarshipReason' and s.CollegeCode ='" + collegeCode + "' order by MasterValue asc";
            dsSchl = d2.select_method_wo_parameter(query, "Text");

            if (dsSchl.Tables.Count > 0 && dsSchl.Tables[0].Rows.Count > 0)
            {
                cblSchlReason.DataSource = dsSchl;
                cblSchlReason.DataTextField = "MasterValue";
                cblSchlReason.DataValueField = "MasterCode";
                cblSchlReason.DataBind();

                for (int i = 0; i < cblSchlReason.Items.Count; i++)
                {
                    cblSchlReason.Items[i].Selected = true;
                }
                txtSchlReason.Text = "Type (" + cblSchlReason.Items.Count + ")";
                cbSchlReason.Checked = true;
            }
        }
        catch (Exception ex) { }
    }
    protected void cbSchlReason_CheckedChanged(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cblSchlReason, cbSchlReason, txtSchlReason, "Type");
        loadGridStudent();
    }
    protected void cblSchlReason_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cblSchlReason, cbSchlReason, txtSchlReason, "Type");
        loadGridStudent();
    }
    private double getSelSchol(string appnoNew)
    {
        double schlAmt = 0;
        try
        {
            List<string> lsMulReason = GetSelectedItemsValueList(cblSchlReason);
            if (lsMulReason.Count > 0)
            {
                DataTable dtMulSchl = getFilteredScholarshipTable(appnoNew);
                if (dtMulSchl.Rows.Count > 0)
                {
                    for (int filLst = 0; filLst < lsMulReason.Count; filLst++)
                    {
                        double curAmt = 0;
                        string colName = "C" + lsMulReason[filLst];
                        string Amt = Convert.ToString(dtMulSchl.Compute("Sum(" + colName + ")", ""));
                        double.TryParse(Amt, out curAmt);
                        schlAmt += curAmt;
                    }
                }
            }
        }
        catch { schlAmt = 0; }
        return schlAmt;
    }
    private DataTable getFilteredScholarshipTable(string appnoNew)
    {
        DataTable dtMulSchl = new DataTable("tbldtMulti");
        try
        {
            DataSet dsMulSchl = new DataSet();
            dsMulSchl = d2.select_method_wo_parameter("select mulscholar,LedgerFk,HeaderFk,FeeCategory,FinyearFk from FT_FeeAllot WHERE  App_No=" + appnoNew + " and isnull(istransfer,'0')='0' and mulscholar is not null", "Text");
            if (dsMulSchl.Tables.Count > 0 && dsMulSchl.Tables[0].Rows.Count > 0)
            {
                dtMulSchl.Columns.Add("LedgerId");
                dtMulSchl.Columns.Add("HeaderId");
                dtMulSchl.Columns.Add("FeecatId");
                dtMulSchl.Columns.Add("FinyearId");

                List<string> lsMulReasonList = GetItemsValueList(cblSchlReason);
                for (int reasonIndx = 0; reasonIndx < lsMulReasonList.Count; reasonIndx++)
                {
                    DataColumn dcReasValues = new DataColumn("C" + lsMulReasonList[reasonIndx], typeof(Double));
                    dtMulSchl.Columns.Add(dcReasValues);
                }
                for (int ledIndx = 0; ledIndx < dsMulSchl.Tables[0].Rows.Count; ledIndx++)
                {
                    string[] reasonsWtValue = Convert.ToString(dsMulSchl.Tables[0].Rows[ledIndx][0]).Split(',');
                    if (reasonsWtValue.Length > 0)
                    {
                        DataRow drReasValues = dtMulSchl.NewRow();
                        drReasValues["LedgerId"] = Convert.ToString(dsMulSchl.Tables[0].Rows[ledIndx][1]);
                        drReasValues["HeaderId"] = Convert.ToString(dsMulSchl.Tables[0].Rows[ledIndx][2]);
                        drReasValues["FeecatId"] = Convert.ToString(dsMulSchl.Tables[0].Rows[ledIndx][3]);
                        drReasValues["FinyearId"] = Convert.ToString(dsMulSchl.Tables[0].Rows[ledIndx][4]);

                        for (int reas = 0; reas < reasonsWtValue.Length; reas++)
                        {
                            string[] reasonAdValues = reasonsWtValue[reas].Split(':');
                            if (reasonAdValues.Length == 2)
                            {
                                drReasValues["C" + reasonAdValues[0]] = reasonAdValues[1];
                            }
                        }
                        dtMulSchl.Rows.Add(drReasValues);
                    }
                }
            }
        }
        catch (Exception ex) { dtMulSchl.Clear(); }
        return dtMulSchl;
    }
    //Multiple Mode Receipt
    protected void btnrcptRoll_Click(object sender, EventArgs e)
    {

    }
    protected void btnyesrcpt_Click(object sender, EventArgs e)
    {
        double mdAmtOvall = 0;
        foreach (GridViewRow row in gridMultimode.Rows)
        {
            //CheckBox cb = (CheckBox)row.Cells[1].FindControl("cb_mdpop");
            //if (cb.Checked)
            //{
            TextBox txtmdAmt = (TextBox)row.FindControl("txt_mdAmtpop");
            if (txtmdAmt.Text != "")
            {
                if (Convert.ToDouble(txtmdAmt.Text) > 0)
                {
                    //To chk whole amount                        
                    mdAmtOvall += Convert.ToDouble(txtmdAmt.Text);
                }
            }
            //}
        }
        if (Convert.ToDouble(Txt_amt.Text) == mdAmtOvall)
        {
            divRecptRpt.Visible = false;
            Div4.Visible = true;
        }
        else
        {
            imgAlert.Visible = true;
            //this.Form.DefaultButton = "btn_alertclose";
            lbl_alert.Text = "Please Provide Valid Amount";
        }


    }
    protected void btnnorcpt_Click(object sender, EventArgs e)
    {
        divRecptRpt.Visible = false;
    }
    protected void btnCLearrcpt_Click(object sender, EventArgs e)
    {
        gridMultimode.DataSource = null;
        gridMultimode.DataBind();
    }
    protected void gridmdMode_onDatabound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //if (e.Row.RowIndex != 0)
            //{
            string queru = "select TextCode,TextVal  from textvaltable where TextCriteria = 'BName'";
            DataSet dsBank = d2.select_method_wo_parameter(queru, "Text");
            DropDownList ddlmdBank = (DropDownList)e.Row.FindControl("ddlmdBank");
            if (dsBank.Tables.Count > 0)
            {
                if (dsBank.Tables[0].Rows.Count > 0)
                {
                    ddlmdBank.DataSource = dsBank;
                    ddlmdBank.DataTextField = "TextVal";
                    ddlmdBank.DataValueField = "TextCode";
                    ddlmdBank.DataBind();
                }
            }
            //}
            //else
            //{
            //    DropDownList ddlmdBank = (DropDownList)e.Row.FindControl("ddlmdBank");
            //    ddlmdBank.Visible = false;
            //    TextBox txt_mdbranchpop = (TextBox)e.Row.FindControl("txt_mdbranchpop");
            //    TextBox txt_mdchkddnopop = (TextBox)e.Row.FindControl("txt_mdchkddnopop");
            //    txt_mdbranchpop.Visible = false;
            //    txt_mdchkddnopop.Visible = false;
            //}

        }
    }
    protected void rblCashChkDd_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txt_mdAddAmtpop.Text = "";
            txt_mdBranchAdd.Text = "";
            txt_mdChequeNoAdd.Text = "";
            txtCardTypeMd.Text = "";
            txtLast4NoMd.Text = "";
            if (ddlmdBankAdd.Items.Count > 0)
            {
                ddlmdBankAdd.SelectedIndex = 0;
            }
            if (ddlCardTypeMd.Items.Count > 0)
            {
                ddlCardTypeMd.SelectedIndex = 0;
            }

            if (rblCashChkDd.SelectedIndex == 0)
            {
                trBankDetailsmd.Visible = false;
                trCardDetailsmd.Visible = false;
            }
            else if (rblCashChkDd.SelectedIndex == 1)
            {
                trBankDetailsmd.Visible = true;
                trCardDetailsmd.Visible = false;
            }
            else if (rblCashChkDd.SelectedIndex == 2)
            {
                trBankDetailsmd.Visible = true;
                trCardDetailsmd.Visible = false;
            }
            else if (rblCashChkDd.SelectedIndex == 3)
            {
                trBankDetailsmd.Visible = false;
                trCardDetailsmd.Visible = true;
            }
        }
        catch (Exception ex) { }
    }
    protected void btnplus1_OnClick(object sender, EventArgs e)
    {
        imgdiv3.Visible = true;
        panel_description.Visible = true;
    }
    protected void btnminus1_OnClick(object sender, EventArgs e)
    {
        try
        {

            if (ddlmdBankAdd.Items.Count > 0)
            {
                string sql = "delete from textvaltable where TextVal ='" + Convert.ToString(ddlmdBankAdd.SelectedItem.Text) + "' and TextCode='" + Convert.ToString(ddlmdBankAdd.SelectedValue) + "' and TextCriteria = 'BName'  and college_code ='" + collegecode1 + "'";
                int insert = d2.update_method_wo_parameter(sql, "TEXT");
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Deleted Sucessfully";
            }
            else
            {
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "No Items Found";
            }
        }
        catch (Exception ex)
        {

            imgAlert.Visible = true;
            //this.Form.DefaultButton = "btn_alertclose";
            lbl_alert.Text = "Not Deleted";
        }
        string queru = "select TextCode,TextVal  from textvaltable where TextCriteria = 'BName' and college_code='" + collegecode1 + "'";
        ddlmdBankAdd.Items.Clear();
        DataSet dsBank = d2.select_method_wo_parameter(queru, "Text");
        if (dsBank.Tables.Count > 0)
        {
            if (dsBank.Tables[0].Rows.Count > 0)
            {
                ddlmdBankAdd.DataSource = dsBank;
                ddlmdBankAdd.DataTextField = "TextVal";
                ddlmdBankAdd.DataValueField = "TextCode";
                ddlmdBankAdd.DataBind();
            }
        }
        //imgdiv3.Visible = true;
        //panel_description.Visible = true;
    }
    protected void btndescpopadd_Click(object sender, EventArgs e)
    {
        try
        {
            if (txt_description11.Text != "")
            {
                string sql = "if exists (select TextCode,TextVal  from textvaltable where TextVal ='" + txt_description11.Text + "' and TextCriteria = 'BName' and college_code ='" + collegecode1 + "') update TextValTable set TextVal ='" + txt_description11.Text + "' where TextVal ='" + txt_description11.Text + "' and TextCriteria ='BName' and college_code ='" + collegecode1 + "' else insert into TextValTable (TextVal,TextCriteria,college_code) values ('" + txt_description11.Text.Trim() + "','BName','" + collegecode1 + "')";
                int insert = d2.update_method_wo_parameter(sql, "TEXT");
                if (insert != 0)
                {
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Saved sucessfully";
                    txt_description11.Text = "";
                    imgdiv3.Visible = false;
                    panel_description.Visible = false;
                }
                else
                {
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Not Added";
                }

            }
            else
            {
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Enter Bank Name";
            }
            ddlmdBankAdd.Items.Clear();
            string queru = "select TextCode,TextVal  from textvaltable where TextCriteria = 'BName' and college_code='" + collegecode1 + "'";
            DataSet dsBank = d2.select_method_wo_parameter(queru, "Text");
            if (dsBank.Tables.Count > 0)
            {
                if (dsBank.Tables[0].Rows.Count > 0)
                {

                    ddlmdBankAdd.DataSource = dsBank;
                    ddlmdBankAdd.DataTextField = "TextVal";
                    ddlmdBankAdd.DataValueField = "TextCode";
                    ddlmdBankAdd.DataBind();
                }
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    protected void btndescpopexit_Click(object sender, EventArgs e)
    {
        imgdiv3.Visible = false;
        panel_description.Visible = false;
    }
    protected void btnAddNewRow_onClick(object sender, EventArgs e)
    {
        try
        {
            if (txt_mdAddAmtpop.Text != "0" && txt_mdAddAmtpop.Text.Trim() != "" && txt_mdAddAmtpop.Text.Trim() != "0.00")
            {
                double amt = Convert.ToDouble(txt_mdAddAmtpop.Text);
                if (amt > 0)
                {
                    DataTable dtMultimode = new DataTable();
                    dtMultimode.Columns.Add("modevalue");
                    dtMultimode.Columns.Add("mode");
                    dtMultimode.Columns.Add("bank");
                    dtMultimode.Columns.Add("bankid");
                    dtMultimode.Columns.Add("DDDate");
                    dtMultimode.Columns.Add("branch");
                    dtMultimode.Columns.Add("chkddno");
                    dtMultimode.Columns.Add("Amount");

                    foreach (GridViewRow grow in gridMultimode.Rows)
                    {
                        Label lblmdId = (Label)grow.FindControl("lbl_modetypeid");
                        Label lblmdType = (Label)grow.FindControl("lbl_modetype");
                        Label lblmdBnkId = (Label)grow.FindControl("lbl_mdbankid");
                        TextBox txtmdBnk = (TextBox)grow.FindControl("txt_mdBank");
                        TextBox txtmdBr = (TextBox)grow.FindControl("txt_mdbranchpop");
                        TextBox txtmdChkno = (TextBox)grow.FindControl("txt_mdchkddnopop");
                        TextBox txtmdAmt = (TextBox)grow.FindControl("txt_mdAmtpop");
                        Label lbl_mddate = (Label)grow.FindControl("lbl_mddate");

                        DataRow dr0 = dtMultimode.NewRow();
                        dr0["modevalue"] = lblmdId.Text;
                        dr0["mode"] = lblmdType.Text;
                        dr0["bankid"] = lblmdBnkId.Text;
                        dr0["bank"] = txtmdBnk.Text;
                        dr0["branch"] = txtmdBr.Text;
                        dr0["chkddno"] = txtmdChkno.Text;
                        dr0["Amount"] = txtmdAmt.Text;
                        dr0["DDDate"] = lbl_mddate.Text;// txt_datemd.Text.Split('/')[1] + "/" + txt_datemd.Text.Split('/')[0] + "/" + txt_datemd.Text.Split('/')[2] + "/";
                        dtMultimode.Rows.Add(dr0);

                    }

                    DataRow dr = dtMultimode.NewRow();
                    if (rblCashChkDd.SelectedIndex == 0)
                    {
                        dr["modevalue"] = "1";
                        dr["mode"] = "Cash";
                        dr["bankid"] = "-1";
                        dr["bank"] = "";
                        dr["branch"] = "";
                        dr["chkddno"] = "";
                        dr["Amount"] = txt_mdAddAmtpop.Text;
                        dr["DDDate"] = txt_datemd.Text;
                        dtMultimode.Rows.Add(dr);
                    }
                    else if (rblCashChkDd.SelectedIndex == 1 || rblCashChkDd.SelectedIndex == 2)
                    {
                        if (ddlmdBankAdd.Items.Count > 0 && txt_mdBranchAdd.Text.Trim() != "" && txt_mdChequeNoAdd.Text.Trim() != "")
                        {
                            if (rblCashChkDd.SelectedIndex == 1)
                            {
                                dr["modevalue"] = "2";
                                dr["mode"] = "Cheque";
                            }
                            else
                            {
                                dr["modevalue"] = "3";
                                dr["mode"] = "DD";
                            }
                            dr["bankid"] = Convert.ToString(ddlmdBankAdd.SelectedItem.Value);
                            dr["bank"] = Convert.ToString(ddlmdBankAdd.SelectedItem.Text);
                            dr["branch"] = Convert.ToString(txt_mdBranchAdd.Text);
                            dr["chkddno"] = Convert.ToString(txt_mdChequeNoAdd.Text);
                            dr["Amount"] = txt_mdAddAmtpop.Text;
                            dr["DDDate"] = txt_datemd.Text;
                            dtMultimode.Rows.Add(dr);
                        }
                        else
                        {
                            imgAlert.Visible = true;
                            //this.Form.DefaultButton = "btn_alertclose";
                            lbl_alert.Text = "Please Provide All Details";
                        }
                    }
                    else if (rblCashChkDd.SelectedIndex == 3)
                    {
                        string newbankname = string.Empty, newbankcode = string.Empty;
                        if (ddlCardTypeMd.SelectedItem.Text.ToUpper() == "OTHERS")
                        {
                            newbankname = txtCardTypeMd.Text.Trim();
                            newbankcode = subjectcode("CardT", newbankname);

                            string queru = "select TextCode,TextVal  from textvaltable where TextCriteria = 'cardT' and college_code='" + collegecode1 + "'";
                            ddlCardTypeMd.Items.Clear();
                            DataSet dsBank = d2.select_method_wo_parameter(queru, "Text");
                            if (dsBank.Tables.Count > 0)
                            {
                                if (dsBank.Tables[0].Rows.Count > 0)
                                {
                                    ddlCardTypeMd.DataSource = dsBank.Tables[0];
                                    ddlCardTypeMd.DataTextField = "TextVal";
                                    ddlCardTypeMd.DataValueField = "TextCode";
                                    ddlCardTypeMd.DataBind();
                                }
                            }
                            ddlCardTypeMd.Items.Insert(0, "Select");
                            ddlCardTypeMd.Items.Add("Others");
                        }
                        else
                        {
                            if (ddlCardTypeMd.SelectedIndex != 0)
                            {
                                newbankname = ddlCardTypeMd.SelectedItem.Text;
                                newbankcode = ddlCardTypeMd.SelectedItem.Value;
                            }
                        }
                        if (newbankname != "" && newbankcode.Trim() != "" && txtLast4NoMd.Text.Trim() != "")
                        {
                            dr["modevalue"] = "6";
                            dr["mode"] = "Card";
                            dr["bankid"] = newbankcode;
                            dr["bank"] = "";
                            dr["branch"] = newbankname;
                            dr["chkddno"] = txtLast4NoMd.Text;
                            dr["Amount"] = txt_mdAddAmtpop.Text;
                            dr["DDDate"] = txt_datemd.Text;
                            dtMultimode.Rows.Add(dr);
                        }
                        else
                        {
                            imgAlert.Visible = true;
                            //this.Form.DefaultButton = "btn_alertclose";
                            lbl_alert.Text = "Please Provide All Details";
                        }
                    }
                    if (dtMultimode.Rows.Count > 0)
                    {
                        DataView view = dtMultimode.DefaultView;
                        view.Sort = "modevalue ASC";
                        DataTable sortedTable = view.ToTable();

                        gridMultimode.DataSource = sortedTable;
                        gridMultimode.DataBind();

                        txt_mdAddAmtpop.Text = "";
                        txt_mdBranchAdd.Text = "";
                        txt_mdChequeNoAdd.Text = "";
                        if (ddlmdBankAdd.Items.Count > 0)
                        {
                            ddlmdBankAdd.SelectedIndex = 0;
                        }
                        txtLast4NoMd.Text = "";
                        txtCardTypeMd.Text = "";
                    }
                }
                else
                {
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Provide Amount";
                }
            }
            else
            {
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Provide Amount";
            }
        }
        catch (Exception ex) { }
    }
    //Receipt and Challan -- Save and Print
    protected string isCollectedForDD()
    {
        string value = "0";
        string ddCollected = "select LinkValue from New_InsSettings where linkname = 'AutomaticallyClearDD' and user_code ='" + usercode + "' --and college_code ='" + collegecode1 + "'";
        value = d2.GetFunction(ddCollected).Trim();
        return value;
    }
    protected string AutoClearCheck()
    {
        string value = "0";
        string chqCleared = "select LinkValue from New_InsSettings where linkname = 'AutomaticallyClearCheque' and user_code ='" + usercode + "' --and college_code ='" + collegecode1 + "'";
        value = d2.GetFunction(chqCleared).Trim();
        return value;
    }
    //challan print
    protected void btn_print_Click(object sender, EventArgs e)
    {
        try
        {
            string insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanPrintFormat' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
            int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 0)
            {
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Add Challan Format Setting";
            }
            else if (save1 == 1)
            {
                //For Mcc and Others
                challanPrint();
            }
            else if (save1 == 2)
            {
                //For NEC
                challanPrintNew();
            }
            else if (save1 == 3)
            {
                //For UIT
                challanPrintUIT();
            }
            else if (save1 == 4)
            {
                //For New College
                challanPrintNewCollege();
            }
        }
        catch (Exception ex) { }
    }

    private double excessRemaining(string appnoNew)
    {
        string excessamtQ = d2.GetFunction("select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt from FT_ExcessDet WHERE  App_No=" + appnoNew + " ");

        double excessamtValue = 0;
        double.TryParse(excessamtQ, out excessamtValue);
        return excessamtValue;
    }
    private bool isHeaderReceipNoOk(out string hspk)
    {
        bool headerOK = false;
        hspk = string.Empty;
        try
        {
            string isheaderFk = GetSelectedItemsValue(cbl_grpheader);

            string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);

            DataSet dsFinHedDet = d2.select_method_wo_parameter("select distinct HeaderSettingFk from FM_HeaderFinCodeSettingsDet hs,FM_HeaderFinCodeSettings s where s.HeaderSettingPK=hs.HeaderSettingFK and HeaderFK in (" + isheaderFk + ") and CollegeCode=" + collegecode1 + " and FinyearFK=" + finYearid + "", "Text");

            if (dsFinHedDet.Tables.Count > 0 && dsFinHedDet.Tables[0].Rows.Count == 1 && rbl_headerselect.SelectedIndex == 1)
            {
                hspk = Convert.ToString(dsFinHedDet.Tables[0].Rows[0][0]).Trim();
                headerOK = true;
            }
        }
        catch (Exception ex) { headerOK = false; }
        return headerOK;
    }
    //Receipt Save
    protected void btn_sureyesRcpt_Click(object sender, EventArgs e)
    {
        //  txt_challan_TextChanged(sender, e);
        Div4.Visible = false;//surediv invisible
        string Amount = Txt_amt.Text;
        string ex_Amount = txt_examt.Text;
        bool recptNoOk = false;
        #region Check for Common or Headerwise Receipt Number
        string hdrSetPK = string.Empty;
        if (isHeaderwise == 1 || isHeaderwise == 3)
        {
            if (isHeaderReceipNoOk(out hdrSetPK))
            {
                if (hdrSetPK != string.Empty)
                {
                    recptNoOk = true;
                }
                else
                {
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Please Select Particualar Header";//"Receipt No Not Assigned For Selected Headers";
                }
            }
            else
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Select Particualar Header"; //"Receipt No Not Assigned For Selected Headers";
            }
        }
        else
        {
            recptNoOk = true;
        }
        #endregion
        if (recptNoOk)
        {
            #region Admission Number Generation While Receipt Save
            bool isAdmNoGenSettingsOn = false;
            string admNoGenbatch = string.Empty;
            isAdmNoGenSettingsOn = getAdmGenOnRcpt(collegecode1, usercode, ref  admNoGenbatch);
            #endregion

            int rcptType = 1;
            if (!cb_selcthd.Checked)
            {
                rcptType = 1;
            }
            else
            {
                rcptType = rbl_headerselect.SelectedIndex + 2;
            }
            if (chl_MulRcpt.Checked)
            {
                #region Multiple Receipt
                string queryPrint = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'  select * from New_InsSettings where (LinkName='ReceiptPrintFormat' or LinkName='ChallanPrintFormat') and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
                DataSet dsPri = new DataSet();
                dsPri = d2.select_method_wo_parameter(queryPrint, "Text");
                if (dsPri.Tables.Count > 0)
                {
                    if (dsPri.Tables[0].Rows.Count > 0 && dsPri.Tables[1].Rows.Count > 0)
                    {
                        string insqry1 = "select LinkValue from New_InsSettings where LinkName='ReceiptPrintFormat' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
                        int save1 = Convert.ToInt32(d2.GetFunction(insqry1));

                        if (txt_tostudentsrcpt.Text.Trim() != "" && txt_tostudentsrcpt.Text.Trim() != "0")
                        {
                            string receiptno = string.Empty;
                            //modified by sudhagar editable receipt no
                            string tempRcpt = Convert.ToString(txttemprcpt.Text.Trim());
                            if (!string.IsNullOrEmpty(tempRcpt))
                                receiptno = tempRcpt;
                            else
                                receiptno = txt_rcptno.Text.Trim();
                            if (receiptno.Trim() != "" || save1 == 5)
                            {

                                #region Common Fields
                                string bnkname = string.Empty;
                                string branch = string.Empty;
                                string checkDDno = string.Empty;
                                string checkDDdate = string.Empty;
                                string newbankname = string.Empty;
                                string newbankcode = string.Empty;
                                string ledgercode = string.Empty;
                                string description = string.Empty;
                                string neftno = string.Empty;
                                string mode = string.Empty;
                                string PayMode = "1";


                                string[] dtrctptsplit = txt_date.Text.Split('/');
                                string[] dtchkddsplit = txt_date1.Text.Split('/');
                                DateTime dtrcpt = Convert.ToDateTime(dtrctptsplit[1] + "/" + dtrctptsplit[0] + "/" + dtrctptsplit[2]);
                                string dtchkdd = dtchkddsplit[1] + "/" + dtchkddsplit[0] + "/" + dtchkddsplit[2];

                                description = txt_remark.Text.Trim();


                                string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
                                string memtype = "1";
                                switch (rbl_rollnoNew.SelectedIndex)
                                {
                                    case 0:
                                        memtype = "1";
                                        break;
                                    case 1:
                                        memtype = "2";
                                        break;
                                    case 2:
                                        memtype = "3";
                                        break;
                                    case 3:
                                        memtype = "4"; ;
                                        break;
                                }

                                //if (ddl_collegebank.Items.Count > 0)
                                //{
                                //    bankPk = Convert.ToString(ddl_collegebank.SelectedValue);
                                //    try
                                //    {
                                //        bnkCity = Convert.ToString(ddl_collegebank.SelectedValue).Split('-')[2];
                                //    }
                                //    catch { }
                                //}

                                if (ddl_bkname.SelectedItem.Text.ToUpper() == "OTHERS")
                                {
                                    newbankname = txt_other.Text.Trim();
                                    newbankcode = subjectcode("BName", newbankname);
                                    txt_other.Text = "";
                                }
                                else
                                {
                                    if (ddl_bkname.SelectedIndex != 0)
                                    {
                                        newbankname = ddl_bkname.SelectedItem.Text;
                                        newbankcode = ddl_bkname.SelectedItem.Value;
                                    }
                                    txt_other.Text = "";
                                }
                                if (rb_card.Checked)
                                {
                                    if (ddlCardType.SelectedItem.Text.ToUpper() == "OTHERS")
                                    {
                                        newbankname = txtCardType.Text.Trim();
                                        newbankcode = subjectcode("CardT", newbankname);
                                        txtCardType.Text = "";
                                    }
                                    else
                                    {
                                        if (ddlCardType.SelectedIndex != 0)
                                        {
                                            newbankname = ddlCardType.SelectedItem.Text;
                                            newbankcode = ddlCardType.SelectedItem.Value;
                                        }
                                        txtCardType.Text = "";
                                    }
                                }

                                if (rdo_receipt.Checked)
                                {
                                    // ledgercode = d2.GetFunction("select fee_code  from fee_info where fee_type ='" + Convert.ToString(ddl_collegebank.SelectedItem.Text) + "' ");

                                    if (rb_cash.Checked)
                                    {
                                        mode = "cash";
                                        PayMode = "1";
                                        dtchkdd = "";
                                    }
                                    else if (rb_cheque.Checked)
                                    {

                                        mode = "cheque";
                                        PayMode = "2";
                                        checkDDno = txt_chqno.Text.Trim();
                                        branch = txt_branch.Text.Trim();

                                    }
                                    else if (rb_dd.Checked)
                                    {
                                        mode = "dd";
                                        PayMode = "3";
                                        checkDDno = txt_ddno.Text.Trim();
                                        branch = txt_branch.Text.Trim();
                                    }
                                    else if (rb_card.Checked)
                                    {
                                        mode = "card";
                                        PayMode = "6";
                                        checkDDno = txtLast4No.Text.Trim();
                                        branch = newbankname.Trim();
                                    }
                                    else if (rb_NEFT.Checked)//addded by abarna 29.01.2018
                                    {
                                        mode = "NEFT";
                                        PayMode = "7";
                                        checkDDno = txt_NEFTNO.Text.Trim();

                                    }
                                    else if (rb_Challan.Checked)//challan added
                                    {
                                        mode = "challan";
                                        PayMode = "4";
                                        checkDDno = txt_challan.Text.Trim();
                                        branch = txt_branch.Text.Trim();
                                    }

                                }
                                else if (rdo_challan.Checked)
                                {
                                    mode = "challan";
                                    PayMode = "4";
                                }

                                bool bankdetailsOK = false;
                                if (mode == "cheque" || mode == "dd" || mode == "card")
                                {
                                    if (newbankname != "" && newbankcode != "" && branch != "" && checkDDno != "")
                                    {
                                        bankdetailsOK = true;
                                    }
                                }
                                else if (mode == "cash")
                                {
                                    bankdetailsOK = true;
                                }
                                else if (mode == "challan")//challan added
                                {
                                    if (newbankname != "" && newbankcode != "" && branch != "")
                                    {
                                        bankdetailsOK = true;
                                    }
                                }

                                #endregion

                                if (bankdetailsOK)
                                {
                                    //Document Settings
                                    Font FontboldheadC = new Font("Arial", 15, FontStyle.Bold);
                                    Font Fontboldhead = new Font("Arial", 13, FontStyle.Bold);
                                    Font FontTableHead = new Font("Arial", 8, FontStyle.Bold);
                                    Font FontTablebody = new Font("Arial", 8, FontStyle.Regular);
                                    Font FontTable = new Font("Arial", 8, FontStyle.Bold);
                                    Font tamilFont = new Font("AMUDHAM.TTF", 8, FontStyle.Regular);

                                    PdfDocument recptDoc = new PdfDocument(PdfDocumentFormat.A4);
                                    if (save1 == 0 || save1 == 1)
                                    {
                                    }
                                    else if (save1 == 2)
                                    {
                                    }
                                    else if (save1 == 3)
                                    {
                                        recptDoc = new PdfDocument(PdfDocumentFormat.InCentimeters(15.2, 20.2));
                                    }
                                    else if (save1 == 4)
                                    {
                                        recptDoc = new PdfDocument(PdfDocumentFormat.InCentimeters(18, 15.2));
                                        FontTableHead = new Font("Arial", 10, FontStyle.Bold);
                                        FontTable = new Font("Arial", 10, FontStyle.Bold);
                                    }


                                    bool FromJpr = false;
                                    bool createPDFOK = false;
                                    contentDiv.InnerHtml = "";
                                    StringBuilder sbHtml = new StringBuilder();
                                    double overallCashAmt = 0;
                                    int count = 0;
                                    for (int rowStud = 1; rowStud < Fpspread1.Sheets[0].RowCount; rowStud++)
                                    {
                                        sbHtml.Clear();
                                        bool InsertUpdateOK = false;

                                        if (txt_tostudentsrcpt.Text.Trim() == "" || txt_tostudentsrcpt.Text.Trim() == "0")
                                        {
                                            continue;
                                        }
                                        int checkval = Convert.ToInt32(Fpspread1.Sheets[0].Cells[rowStud, 1].Value);
                                        if (checkval == 1)
                                        {
                                            count++;

                                            string roll_admit = string.Empty;
                                            roll_admit = Convert.ToString(Fpspread1.Sheets[0].Cells[rowStud, 2].Text);

                                            #region For Each Student

                                            string rollno = string.Empty;
                                            string studname = string.Empty;
                                            // string receiptno = string.Empty;
                                            string name = string.Empty;
                                            string Roll_admit = string.Empty;
                                            Roll_admit = roll_admit;
                                            string section = string.Empty;

                                            string app_formno = string.Empty;
                                            string appnoNew = string.Empty;
                                            string Regno = string.Empty;

                                            txt_rcptno.Text = generateReceiptNo();
                                            receiptno = Convert.ToString(txt_rcptno.Text);
                                            accidRecpt = lblaccid.Text;
                                            lastRecptNo = lstrcpt.Text;
                                            //string tempRcpt = Convert.ToString(txttemprcpt.Text.Trim());
                                            //if (!string.IsNullOrEmpty(tempRcpt))
                                            //    receiptno = tempRcpt;
                                            //else
                                            //    receiptno = txt_rcptno.Text.Trim();

                                            string queryRollApp = "select r.Roll_No,a.app_formno,a.app_no, r.Reg_No,r.Stud_Name,r.sections from Registration r,applyn a where r.App_No=a.app_no  and r.college_code='" + collegecode1 + "'  and r.Roll_Admit='" + roll_admit + "'";
                                            DataSet dsRollApp = new DataSet();
                                            dsRollApp = d2.select_method_wo_parameter(queryRollApp, "Text");
                                            if (dsRollApp.Tables.Count > 0)
                                            {
                                                if (dsRollApp.Tables[0].Rows.Count > 0)
                                                {
                                                    rollno = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Roll_No"]);
                                                    app_formno = Convert.ToString(dsRollApp.Tables[0].Rows[0]["app_formno"]);
                                                    appnoNew = Convert.ToString(dsRollApp.Tables[0].Rows[0]["app_no"]);
                                                    Regno = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Reg_No"]);
                                                    studname = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Stud_Name"]);
                                                    section = Convert.ToString(dsRollApp.Tables[0].Rows[0]["sections"]);

                                                }
                                            }
                                            //rollno = txt_rollno.Text.Trim();
                                            //app_formno = txt_rollno.Text.Trim();
                                            //roll_admit = txt_rollno.Text.Trim();

                                            name = rollno + "-" + studname;

                                            if (rollno != "" && studname != "" && roll_admit != "" && app_formno != "" && ((receiptno != "" && lastRecptNo != "") || save1 == 5) && collegecode1 != "" && usercode != "" && appnoNew != "" && finYearid != "")
                                            {
                                                #region INSERTION AND UPDATION CODE
                                                //Print Region
                                                try
                                                {
                                                    #region Print Option For Receipt

                                                    //Basic Data
                                                    //string rollno = txt_rollno.Text.Trim();
                                                    //  string recptNo = txt_rcptno.Text.Trim();
                                                    string recptNo = string.Empty;
                                                    //modified by sudhagar editable receipt no
                                                    tempRcpt = Convert.ToString(txttemprcpt.Text.Trim());
                                                    if (!string.IsNullOrEmpty(tempRcpt))
                                                        recptNo = tempRcpt;
                                                    else
                                                        recptNo = txt_rcptno.Text.Trim();
                                                    string recptDt = txt_date.Text.Trim();
                                                    //string studname = txt_name.Text.Trim();
                                                    string course = txt_dept.Text.Trim();
                                                    string batchYrSem = string.Empty;

                                                    try
                                                    {
                                                        course = course.Split('-')[0];
                                                    }
                                                    catch { course = ""; }

                                                    PdfPage rcptpage = recptDoc.NewPage();
                                                    //Fields to print

                                                    if (save1 == 0 || save1 == 1)
                                                    {
                                                        try
                                                        {
                                                            FormatIGeneralChallanReceipt rcpt = new FormatIGeneralChallanReceipt();
                                                            rcpt.generateMultiple(dsPri, collegecode1, appnoNew, section, ref  recptDoc, ref  rcptpage, recptNo, studname, recptDt, Regno, rollno, app_formno, rb_cash, rb_dd, rb_cheque, rb_card, rb_NEFT, checkDDno, newbankname, branch, txt_date1, txt_remark, mode, rbl_rollnoNew, ddl_semrcpt, cbl_grpheader, rbl_headerselect, lbltype, rdo_receipt, rdo_sngle, PayMode, dtrcpt, memtype, receiptno, dtchkdd, newbankcode, usercode, finYearid, rcptType, InsertUpdateOK, ref  createPDFOK, BalanceType, ref  overallCashAmt);

                                                        }
                                                        catch { imgAlert.Visible = true; }

                                                    }
                                                    else if (save1 == 2)
                                                    {
                                                        try
                                                        {
                                                            FormatIIGeneralChallanReceipt rcpt = new FormatIIGeneralChallanReceipt();
                                                            rcpt.generateMultiple(dsPri, collegecode1, appnoNew, section, ref  recptDoc, ref  rcptpage, recptNo, studname, recptDt, Regno, rollno, app_formno, rb_cash, rb_dd, rb_cheque, rb_card, rb_NEFT, checkDDno, newbankname, branch, txt_date1, txt_remark, mode, rbl_rollnoNew, ddl_semrcpt, cbl_grpheader, rbl_headerselect, lbltype, rdo_receipt, rdo_sngle, PayMode, dtrcpt, memtype, receiptno, dtchkdd, newbankcode, usercode, finYearid, rcptType, InsertUpdateOK, ref  createPDFOK, BalanceType, ref  overallCashAmt, course);
                                                        }
                                                        catch { imgAlert.Visible = true; }

                                                    }
                                                    else if (save1 == 3 || save1 == 7 || save1 == 8 || save1 == 15 || save1 == 12)
                                                    {
                                                        //For HIET-3,Gnanamani-7,VRS-8,Format1 Html - 9,12-KCG
                                                        #region Print Option For Receipt

                                                        //Basic Data

                                                        string acaYear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanAcademicYear' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                                                        try
                                                        {
                                                            acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                                                        }
                                                        catch { }
                                                        try
                                                        {
                                                            course = course.Split('-')[0];
                                                        }
                                                        catch { course = ""; }
                                                        // string mode = string.Empty;

                                                        if (rb_cash.Checked)
                                                        {
                                                            mode = "Cash";
                                                        }
                                                        else if (rb_cheque.Checked)
                                                        {
                                                            mode = "Cheque";
                                                        }
                                                        else if (rb_dd.Checked)
                                                        {
                                                            mode = "DD";
                                                        }
                                                        else if (rb_card.Checked)
                                                        {
                                                            mode = "Card";
                                                        }
                                                        else if (rb_NEFT.Checked)//added by abarna 29.01.2018
                                                        {
                                                            mode = "NEFT";
                                                        }
                                                        else if (rb_Challan.Checked)//added by abarna 29.01.2018
                                                        {
                                                            mode = "Challan";
                                                        }
                                                        //Fields to print
                                                        string queryPrint1 = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                        ds.Clear();
                                                        ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                        if (ds.Tables.Count > 0)
                                                        {
                                                            if (ds.Tables[0].Rows.Count > 0)
                                                            {

                                                                //Footer Div Values

                                                                byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);

                                                                string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + "";
                                                                string collegename = "";
                                                                string add1 = "";
                                                                string add2 = "";
                                                                string add3 = "";
                                                                string univ = "";
                                                                string deg = "";
                                                                string degAcr = "";
                                                                string cursem = "";
                                                                string batyr = "";
                                                                string seatty = "";
                                                                string board = "";
                                                                string mothe = "";
                                                                string fathe = "";
                                                                double deductionamt = 0;
                                                                ds.Clear();
                                                                ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                if (ds.Tables.Count > 0)
                                                                {
                                                                    if (ds.Tables[0].Rows.Count > 0)
                                                                    {
                                                                        collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                        add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                        add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                        add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                        univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                    }
                                                                    if (ds.Tables[1].Rows.Count > 0)
                                                                    {
                                                                        //if (degACR == 0)
                                                                        //{
                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                        //}
                                                                        //else
                                                                        //{
                                                                        degAcr = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                        //}
                                                                        cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                        batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                        board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                        mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                    }
                                                                }
                                                                if (deg.Split('-').Length < 2)
                                                                {
                                                                    deg = " - ";
                                                                }
                                                                string ddnar = string.Empty;
                                                                string ddnew = string.Empty;
                                                                if (!rb_cash.Checked)
                                                                {
                                                                    if (rb_dd.Checked == true)
                                                                    {
                                                                        ddnar = "\nDDNo : " + checkDDno + " Bank : " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                        ddnew = "&nbsp;&nbsp;&nbsp;\nDDNo : " + checkDDno + "&nbsp;&nbsp;&nbsp;Bank : " + newbankname + "&nbsp;&nbsp;&nbsp;\nBranch :" + branch + "&nbsp;&nbsp;&nbsp;Date  : " + txt_date1.Text.ToString();
                                                                    }
                                                                    else if (rb_cheque.Checked)
                                                                    {
                                                                        ddnar = "\nChequeNo : " + checkDDno + " Bank : " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                        ddnew = "&nbsp;&nbsp;&nbsp;\nChequeNo : " + checkDDno + "&nbsp;&nbsp;&nbsp;Bank : " + newbankname + "&nbsp;&nbsp;&nbsp;\nBranch :" + branch + "&nbsp;&nbsp;&nbsp;Date  : " + txt_date1.Text.ToString();
                                                                    }
                                                                    else if (rb_Challan.Checked)//added by abarna 
                                                                    {
                                                                        ddnar = "\nChallanNo : " + checkDDno + " Bank : " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                        ddnew = "&nbsp;&nbsp;&nbsp;\nChallanNo : " + checkDDno + "&nbsp;&nbsp;&nbsp;Bank : " + newbankname + "Branch :" + branch + "Date: " + txt_date1.Text.ToString();//&nbsp;&nbsp;&nbsp;
                                                                    }
                                                                    else if (rb_card.Checked)
                                                                    {
                                                                        ddnar = "\nCard : " + newbankname;
                                                                        ddnew = "&nbsp;&nbsp;&nbsp;\nCard : " + newbankname;
                                                                    }
                                                                    else if (rb_NEFT.Checked)//added by abarna 29.01.2018
                                                                    {
                                                                        ddnar = "\nCard : " + neftno;
                                                                        ddnew = "&nbsp;&nbsp;&nbsp;\nNEFT : " + neftno;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    ddnar = "\nCash";
                                                                }
                                                                ddnar += "\n Remarks:" + txt_remark.Text.Trim();

                                                                string remarks = string.Empty;
                                                                byte narration = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsNarration"]);
                                                                if (narration == 1)
                                                                {
                                                                    remarks = txt_remark.Text.Trim();
                                                                    if (remarks != string.Empty)
                                                                    {
                                                                        remarks = "\n Narration : " + remarks;
                                                                    }
                                                                }

                                                                if (save1 == 3)
                                                                {
                                                                    //For Hiet
                                                                    HietChallanReceipt rcptObj = new HietChallanReceipt(appnoNew, rollno, collegecode1, usercode, Convert.ToByte(rcptType), studname, recptDt, DateTime.Now.ToLongTimeString(), recptNo, cursem, deg.Split('-')[0].ToUpper(), deg.Split('-')[1].ToUpper(), ddnar);//(mode + ddnar)
                                                                    contentDiv.InnerHtml += ((StringBuilder)(rcptObj.returnHtmlStringMulReceipt(out createPDFOK, out InsertUpdateOK, ddl_semrcpt, cbl_grpheader, rbl_headerselect, rdo_receipt, rdo_sngle, lbltype, Convert.ToByte(PayMode), Convert.ToByte(memtype), checkDDno, dtchkdd, newbankcode, branch, finYearid))).ToString();
                                                                }
                                                                else if (save1 == 7)
                                                                {
                                                                    //For Gnanamani
                                                                    GnanamaniChallanReceipt rcptObj = new GnanamaniChallanReceipt(appnoNew, rollno, collegecode1, usercode, Convert.ToByte(rcptType), studname, recptDt, DateTime.Now.ToLongTimeString(), recptNo, cursem, deg.Split('-')[0].ToUpper(), deg.Split('-')[1].ToUpper());
                                                                    contentDiv.InnerHtml += ((StringBuilder)(rcptObj.returnHtmlStringMulReceipt(out createPDFOK, out InsertUpdateOK, ddl_semrcpt, cbl_grpheader, rbl_headerselect, rdo_receipt, rdo_sngle, lbltype, Convert.ToByte(PayMode), Convert.ToByte(memtype), checkDDno, dtchkdd, newbankcode, branch, finYearid))).ToString();
                                                                }
                                                                else if (save1 == 8)
                                                                {
                                                                    //For VRS
                                                                    VRSChallanReceipt rcptObj = new VRSChallanReceipt(appnoNew, rollno, collegecode1, usercode, Convert.ToByte(rcptType), studname, recptDt, DateTime.Now.ToLongTimeString(), recptNo, cursem, deg.Split('-')[0].ToUpper(), deg.Split('-')[1].ToUpper(), degAcr.Split('-')[1].ToUpper(), (mode + ddnar));
                                                                    contentDiv.InnerHtml += ((StringBuilder)(rcptObj.returnHtmlStringMulReceipt(out createPDFOK, out InsertUpdateOK, ddl_semrcpt, cbl_grpheader, rbl_headerselect, rdo_receipt, rdo_sngle, lbltype, Convert.ToByte(PayMode), Convert.ToByte(memtype), checkDDno, dtchkdd, newbankcode, branch, finYearid))).ToString();
                                                                }
                                                                else if (save1 == 15)
                                                                {
                                                                    #region Print Format 1 in Html

                                                                    collegename = d2.GetFunction("select collname +' ('+category+')' as collname from collinfo where college_code='" + collegecode1 + "' ");


                                                                    #region Settings Input
                                                                    //Header Div Values
                                                                    byte collegeid = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeName"]);
                                                                    byte address1 = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeAdd1"]);
                                                                    byte address2 = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeAdd2"]);
                                                                    byte address3 = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeAdd3"]);
                                                                    byte city = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeDist"]);
                                                                    byte state = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeState"]);

                                                                    byte university = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeUniversity"]);
                                                                    byte rightLogo = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsRightLogo"]);
                                                                    byte leftLogo = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsLeftLogo"]);
                                                                    byte time;
                                                                    if (Convert.ToBoolean(Convert.ToString(dsPri.Tables[0].Rows[0]["IsTime"])))
                                                                    {
                                                                        time = 1;
                                                                    }
                                                                    else
                                                                    {
                                                                        time = 0;
                                                                    }
                                                                    byte degACR = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsDegreeAcr"]);
                                                                    byte degNam = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsDegreeName"]);
                                                                    byte studnam = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsStudName"]);
                                                                    byte year = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsYear"]);
                                                                    byte semester = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsSemester"]);
                                                                    byte regno = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsRegNo"]);
                                                                    byte rolno = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsRollNo"]);
                                                                    byte admno = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsAdminNo"]);

                                                                    byte fathername = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsFatherName"]);
                                                                    byte seattype = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsSeatType"]);
                                                                    //byte setRollAsAdmin = Convert.ToByte(dsPri.Tables[0].Rows[0]["rollas_adm"]);
                                                                    byte boarding = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsBoarding"]);
                                                                    byte mothername = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsMontherName"]);
                                                                    string recptValid = Convert.ToString(dsPri.Tables[0].Rows[0]["ValidDate"]);


                                                                    //Body Div Values
                                                                    //byte showAllFees = Convert.ToByte(dsPri.Tables[0].Rows[0]["showallfee"]);
                                                                    byte allotedAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsAllotedAmt"]);
                                                                    byte fineAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsFineAmt"]);
                                                                    byte balAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsBalanceAmt"]);
                                                                    byte semOrYear = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsSemYear"]);
                                                                    byte prevPaidAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsPrevPaid"]);
                                                                    byte excessAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsExcessAmt"]);
                                                                    // byte totDetails = Convert.ToByte(dsPri.Tables[0].Rows[0]["Total_Details"]);
                                                                    byte fineInRow = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsFineinRow"]);
                                                                    //byte totWTselectCol = Convert.ToByte(dsPri.Tables[0].Rows[0]["TotalSelCol"]);
                                                                    byte concession = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsConcession"]);
                                                                    string concessionValue = string.Empty;
                                                                    if (concession != 0)
                                                                    {
                                                                        concessionValue = Convert.ToString(dsPri.Tables[0].Rows[0]["ConcessionName"]);
                                                                    }


                                                                    //Footer Div Values

                                                                    //byte studCopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsStudCopy"]);
                                                                    //byte officopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                    //byte transCopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsTransportCopy"]);
                                                                    //byte narration = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsNarration"]);
                                                                    byte deduction = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsTotConcession"]);
                                                                    byte forclgName = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsForCollegeName"]);
                                                                    byte authSign = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsAuthSign"]);
                                                                    byte validDate = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsValidUpto"]);
                                                                    string authSignValue = string.Empty;
                                                                    if (authSign != 0)
                                                                    {
                                                                        authSignValue = Convert.ToString(dsPri.Tables[0].Rows[0]["AuthName"]);

                                                                    }

                                                                    byte studOffiCopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["PageType"]);
                                                                    // byte dispModeWTcash = Convert.ToByte(dsPri.Tables[0].Rows[0]["DisModeWithCash"]);
                                                                    byte signFile = Convert.ToByte(dsPri.Tables[0].Rows[0]["cashier_sign"]);

                                                                    //if (signFile != 0)
                                                                    //{
                                                                    //if (FileUpload1.HasFile)
                                                                    //{

                                                                    //}                                                    
                                                                    //}


                                                                    #endregion

                                                                    #region Students Input
                                                                    colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,ISNULL(type,'') as type from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + "";
                                                                    collegename = "";
                                                                    add1 = "";
                                                                    add2 = "";
                                                                    add3 = "";
                                                                    univ = "";
                                                                    deg = "";
                                                                    cursem = "";
                                                                    batyr = "";
                                                                    seatty = "";
                                                                    board = "";
                                                                    mothe = "";
                                                                    fathe = "";
                                                                    string stream = "";
                                                                    deductionamt = 0;
                                                                    ds.Clear();
                                                                    ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                    if (ds.Tables.Count > 0)
                                                                    {
                                                                        if (ds.Tables[0].Rows.Count > 0)
                                                                        {
                                                                            collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                            add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                            add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                            add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                            univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                        }
                                                                        if (ds.Tables[1].Rows.Count > 0)
                                                                        {
                                                                            if (degACR == 0)
                                                                            {
                                                                                deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                            }
                                                                            else
                                                                            {
                                                                                deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                            }
                                                                            cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                            batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                            seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                            board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                            mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                            fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                            stream = Convert.ToString(ds.Tables[1].Rows[0]["type"]);
                                                                        }
                                                                    }
                                                                    #endregion


                                                                    int rectHeight = 920;
                                                                    if (studOffiCopy == 1)
                                                                    {
                                                                        rectHeight = 475;
                                                                    }
                                                                    #region Receipt Header

                                                                    //Header Images
                                                                    //Line1
                                                                    string Hllogo = string.Empty;
                                                                    if (leftLogo != 0)
                                                                    {
                                                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg")))
                                                                        {
                                                                            Hllogo = "<img src='" + "../FinanceLogo/Left_Logo" + collegecode1 + ".jpeg?" + DateTime.Now.Ticks.ToString() + "" + "' style='height:80px; width:80px;'/>";
                                                                        }
                                                                    }
                                                                    string Hcol = string.Empty;
                                                                    if (collegeid != 0)
                                                                    {
                                                                        Hcol = collegename;
                                                                    }
                                                                    string Hrlogo = string.Empty;
                                                                    //if (rightLogo != 0)
                                                                    //{
                                                                    //    if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg")))
                                                                    //    {
                                                                    //        Hrlogo = "<img src='" + "../FinanceLogo/Right_Logo" + collegecode1 + ".jpeg?" + DateTime.Now.Ticks.ToString() + "" + "' style='height:80px; width:80px;'/>";
                                                                    //    }
                                                                    //}
                                                                    //Hrlogo = "<div style='height:80px; width:100px; border:1px solid black;'><div style='margin-top:30px;font-size:20px;'><b>" + Regex.Replace(recptNo, @"[\d-]", string.Empty).ToUpper() + "</b></div></div>";
                                                                    //Line2
                                                                    string Huniv = string.Empty;
                                                                    if (university != 0)
                                                                    {
                                                                        Huniv = univ;
                                                                    }
                                                                    //Line3
                                                                    string Hadd1add2 = string.Empty;
                                                                    if (address1 != 0 || address2 != 0)
                                                                    {
                                                                        if (address2 != 0)
                                                                        {
                                                                            add1 += " " + add2;
                                                                        }
                                                                        Hadd1add2 = add1;
                                                                    }
                                                                    //Line4
                                                                    string Hadd3 = string.Empty;
                                                                    if (address3 != 0)
                                                                    {
                                                                        //Hadd3 = add3;
                                                                        Hadd1add2 = Hadd1add2.TrimEnd('.', ',') + "," + add3;
                                                                    }

                                                                    sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:center; width: 585px; ' class='classBold10'><tr><td rowspan='5'>" + Hllogo + "</td><td style='text-align:center; font-weight:bold; font-size:14px;'>" + Hcol + "</td><td  rowspan='5' >" + Hrlogo + "</td></tr><tr><td  style='text-align:center;'>" + Huniv + "</td></tr><tr><td  style='text-align:center;'>" + Hadd1add2 + Hadd3 + "</td></tr><tr><td style='text-align:center; font-weight:bold; font-size:14px;'><u>RECEIPT</u></td></tr></table></center>");
                                                                    #endregion

                                                                    #region Table 1

                                                                    //Table1 Data
                                                                    string Htime1 = string.Empty;
                                                                    string Htime2 = string.Empty;
                                                                    //Line 1
                                                                    if (time != 0)
                                                                    {
                                                                        Htime1 = "Time";
                                                                        Htime2 = ": " + DateTime.Now.ToLongTimeString();
                                                                    }
                                                                    //Line2
                                                                    ArrayList arr = new ArrayList();
                                                                    string Hsname1 = string.Empty;
                                                                    if (studnam != 0)
                                                                    {

                                                                        // Hsname1 = "<td colspan='2'>Name: " + studname + "</td>";
                                                                        //arr.Add(Hsname1);
                                                                        Htime1 = "Name";
                                                                        Htime2 = ": " + studname;
                                                                    }
                                                                    string Hregno1 = string.Empty;
                                                                    if (regno != 0)
                                                                    {
                                                                        Hregno1 = "<td colspan='2'>RegNo: " + Regno + "</td>";
                                                                        arr.Add(Hregno1);
                                                                    }

                                                                    string HrolNo1 = string.Empty;
                                                                    if (rolno != 0)
                                                                    {
                                                                        HrolNo1 = "<td colspan='2'>RollNo: " + rollno + "</td>";
                                                                        arr.Add(HrolNo1);
                                                                    }
                                                                    string HadmNo1 = string.Empty;
                                                                    if (admno != 0)
                                                                    {
                                                                        HadmNo1 = "<td colspan='2'>AdmissionNo: " + app_formno + "</td>";
                                                                        arr.Add(HadmNo1);
                                                                    }

                                                                    string Hfname1 = string.Empty;
                                                                    if (fathername != 0)
                                                                    {
                                                                        Hfname1 = "<td colspan='2'>Father's Name: " + fathe + "</td>";
                                                                        arr.Add(Hfname1);
                                                                    }
                                                                    string HMother1 = string.Empty;
                                                                    if (mothername != 0)
                                                                    {
                                                                        HMother1 = "<td colspan='2'>Mother's Name: " + mothe + "</td>";
                                                                        arr.Add(HMother1);
                                                                    }

                                                                    //Line 3
                                                                    string batYrSemHead = string.Empty;
                                                                    string batYrSemCont = string.Empty;
                                                                    if (degACR != 0)
                                                                    {
                                                                        batYrSemHead = "Degree/";
                                                                        batYrSemCont = deg + "/";
                                                                    }
                                                                    if (year != 0)
                                                                    {
                                                                        //batYrSemHead += "Yr/";
                                                                        //batYrSemCont += " " + romanLetter(returnYearforSem(cursem)) + "/";
                                                                        int yr = 0;
                                                                        int.TryParse(reUse.GetFunction("select batch_year from applyn where app_no =" + appnoNew + "").Trim(), out yr);
                                                                        if (yr != 0)
                                                                        {
                                                                            batYrSemHead += "Yr/";
                                                                            batYrSemCont += " " + yr + "/";
                                                                        }
                                                                    }
                                                                    if (semester != 0)
                                                                    {
                                                                        batYrSemHead += "Sem";
                                                                        batYrSemCont += " " + romanLetter(cursem);
                                                                    }
                                                                    batYrSemHead = batYrSemHead.TrimEnd('/');
                                                                    batYrSemCont = batYrSemCont.TrimEnd('/');

                                                                    string HbatYrSem1 = string.Empty;
                                                                    if (batYrSemHead != "")
                                                                    {
                                                                        HbatYrSem1 = "<td colspan='2'>" + batYrSemHead + ": " + batYrSemCont + "</td>";
                                                                        arr.Add(HbatYrSem1);
                                                                    }
                                                                    string HseatType1 = string.Empty;
                                                                    if (seattype != 0)
                                                                    {
                                                                        HseatType1 = "<td colspan='2'>Seat Type: " + seatty + "</td>";
                                                                        arr.Add(HseatType1);
                                                                    }
                                                                    string Hboard1 = string.Empty;
                                                                    if (boarding != 0)
                                                                    {
                                                                        Hboard1 = "<td colspan='2'>Boarding: " + board + "</td>";
                                                                        arr.Add(Hboard1);
                                                                    }

                                                                    sbHtml.Append("<br><center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 585px; padding-left:5px; ' class='classBold10'><tr><td>Receipt No</td><td>" + ": " + recptNo + "</td><td>" + Htime1 + "</td><td>" + Htime2 + "</td><td>Date</td><td>" + ": " + recptDt + "</td></tr>");
                                                                    int lasti = -1;
                                                                    for (int ar = 0; ar < arr.Count; ar++)
                                                                    {
                                                                        if (ar == 0 || ar == 3 || ar == 6)
                                                                        {
                                                                            sbHtml.Append("<tr>");
                                                                        }
                                                                        sbHtml.Append(arr[ar]);
                                                                        if (ar == 2 || ar == 5 || ar == 8)
                                                                        {
                                                                            sbHtml.Append("</tr>");
                                                                        }
                                                                        lasti = ar;
                                                                    }
                                                                    if (lasti != 2 && lasti != 5 && lasti != 8)
                                                                    {
                                                                        sbHtml.Append("</tr>");
                                                                    }
                                                                    sbHtml.Append("</table></center>");

                                                                    #endregion

                                                                    #region Table 2
                                                                    //Table2 Format

                                                                    int rows = 1;

                                                                    string semyear = "";
                                                                    if (ddl_semrcpt.Items.Count > 0)
                                                                    {
                                                                        semyear = Convert.ToString(ddl_semrcpt.SelectedItem.Value);
                                                                    }
                                                                    selectQuery = "";
                                                                    List<string> lstgrpHeaderValu = new List<string>();
                                                                    List<string> lstgrpHeaderName = new List<string>();

                                                                    lstgrpHeaderValu = GetSelectedItemsValueList(cbl_grpheader);
                                                                    lstgrpHeaderName = GetSelectedItemsTextList(cbl_grpheader);

                                                                    #region To Count Rows
                                                                    for (int j = 0; j < lstgrpHeaderValu.Count; j++)
                                                                    {
                                                                        string BalNOT0 = string.Empty;
                                                                        #region Load Ledgers
                                                                        string headercode = "";

                                                                        headercode = Convert.ToString(lstgrpHeaderValu[j]);

                                                                        selectQuery = " SELECT isnull(sum(BalAmount),0) as BalAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "   and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";

                                                                        if (rbl_headerselect.SelectedIndex == 0)
                                                                        {
                                                                            //Group Header
                                                                            selectQuery = " SELECT isnull(sum(BalAmount),0) as BalAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')   and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";
                                                                            if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                                            {
                                                                                selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                                            }

                                                                            if (lbltype.Text != "")
                                                                            {
                                                                                selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                                            }

                                                                        }
                                                                        else if (rbl_headerselect.SelectedIndex == 1)
                                                                        {
                                                                            //Header
                                                                            selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                                        }
                                                                        else
                                                                        {
                                                                            //Ledger
                                                                            selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                                        }


                                                                        if (selectQuery.Trim() != "")
                                                                        {
                                                                            BalNOT0 = d2.GetFunction(selectQuery);
                                                                            double balChk = 0;
                                                                            double.TryParse(BalNOT0, out balChk);
                                                                            if (balChk > 0)
                                                                            {
                                                                                rows++;
                                                                            }
                                                                        }

                                                                        #endregion

                                                                    }

                                                                    #endregion

                                                                    Hashtable htIndex = new Hashtable();
                                                                    int hInsdx = 3;

                                                                    //Table2 Header


                                                                    if (semOrYear != 0)
                                                                    {

                                                                        htIndex.Add("semOrYear", hInsdx);
                                                                        hInsdx++;
                                                                    }


                                                                    if (allotedAmt != 0)
                                                                    {

                                                                        htIndex.Add("allotedAmt", hInsdx);
                                                                        hInsdx++;
                                                                    }

                                                                    if (balAmt != 0)
                                                                    {

                                                                        htIndex.Add("balAmt", hInsdx);
                                                                        hInsdx++;
                                                                    }
                                                                    if (prevPaidAmt != 0)
                                                                    {

                                                                        htIndex.Add("prevPaidAmt", hInsdx);
                                                                        hInsdx++;

                                                                    }

                                                                    if (concession != 0)
                                                                    {

                                                                        htIndex.Add("concession", hInsdx);
                                                                        hInsdx++;

                                                                    }

                                                                    //Table2 Data

                                                                    int sno = 0;
                                                                    int indx = 0;
                                                                    double totalamt = 0;
                                                                    double balanamt = 0;
                                                                    double curpaid = 0;
                                                                    double paidamount = 0;

                                                                    #region Insert Process New

                                                                    //For Every Selected Headers
                                                                    if (rows > 0)
                                                                    {
                                                                        sbHtml.Append("<br><center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid; ' border='1' class='classBold10'><tr><td style='text-align:center;'>S.No</td><td style='text-align:center;'>Description</td><td style='text-align:center;'>Amount</td>");

                                                                    }

                                                                    for (int j = 0; j < lstgrpHeaderValu.Count; j++)
                                                                    {
                                                                        string disphdr = string.Empty;
                                                                        double allotamt0 = 0;
                                                                        double deductAmt0 = 0;
                                                                        double totalAmt0 = 0;
                                                                        double paidAmt0 = 0;
                                                                        double balAmt0 = 0;
                                                                        double creditAmt0 = 0;
                                                                        double alreadyPaid = 0;
                                                                        #region Load Ledgers

                                                                        string headercode = "";
                                                                        disphdr = Convert.ToString(lstgrpHeaderName[j]);
                                                                        headercode = Convert.ToString(lstgrpHeaderValu[j]);

                                                                        selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0) as   DeductAmount,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount, isnull(BalAmount,0) as BalAmount,TextVal,TextCode FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";

                                                                        if (rbl_headerselect.SelectedIndex == 0)
                                                                        {
                                                                            //Group Header
                                                                            selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)   as DeductAmount ,isnull(TotalAmount,0)   as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount,TextVal,TextCode,ChlGroupHeader FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0  and isnull(istransfer,'0')='0'";
                                                                            if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                                            {
                                                                                selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                                            }

                                                                            if (lbltype.Text != "")
                                                                            {
                                                                                selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                                            }

                                                                        }
                                                                        else if (rbl_headerselect.SelectedIndex == 1)
                                                                        {
                                                                            //Header
                                                                            selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                                        }
                                                                        else
                                                                        {
                                                                            //Ledger
                                                                            selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                                        }

                                                                        selectQuery += "  order by case when priority is null then 1 else 0 end, priority ";
                                                                        #endregion

                                                                        DataSet dsLedgers = new DataSet();
                                                                        dsLedgers = d2.select_method_wo_parameter(selectQuery, "Text");
                                                                        if (dsLedgers.Tables.Count > 0)
                                                                        {
                                                                            if (dsLedgers.Tables[0].Rows.Count > 0)
                                                                            {
                                                                                for (int lgri = 0; lgri < dsLedgers.Tables[0].Rows.Count; lgri++)
                                                                                {

                                                                                    string feecat1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["TextCode"]);
                                                                                    string headerfk1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["HeaderFK"]);
                                                                                    string ledgerfk1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["LedgerFK"]);
                                                                                    double feeamt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["FeeAmount"]);
                                                                                    double deductAmt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["DeductAmount"]);
                                                                                    double totalamt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["TotalAmount"]);
                                                                                    double paidAmt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["PaidAmount"]);
                                                                                    double balAmt1 = totalamt1 - paidAmt1;
                                                                                    double creditAmt1 = balAmt1;
                                                                                    alreadyPaid += paidAmt1;
                                                                                    creditAmt0 += creditAmt1;
                                                                                    totalAmt0 += totalamt1;
                                                                                    balAmt0 += balAmt1 - creditAmt1;
                                                                                    paidAmt0 += creditAmt1;
                                                                                    deductAmt0 += deductAmt1;

                                                                                    #region Ledger Insert Update
                                                                                    if (creditAmt1 > 0)
                                                                                    {
                                                                                        string iscollected = "0";
                                                                                        string collecteddate = "";
                                                                                        if (PayMode == "1" || PayMode == "6" || PayMode == "7" || PayMode == "4")
                                                                                        {
                                                                                            iscollected = "1";
                                                                                            collecteddate = (dtrcpt).ToString();
                                                                                        }
                                                                                        //else if (PayMode == "2")
                                                                                        //{
                                                                                        //    iscollected = AutoClearCheck();
                                                                                        //    collecteddate = (dtrcpt).ToString();
                                                                                        //}
                                                                                        //else if (PayMode == "3")
                                                                                        //{
                                                                                        //    iscollected = isCollectedForDD();
                                                                                        //    collecteddate = (dtrcpt).ToString();
                                                                                        //}
                                                                                        string insertDebit = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate) VALUES('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "','" + receiptno + "', " + memtype + ", " + appnoNew + ", " + ledgerfk1 + ", " + headerfk1 + ", " + feecat1 + ", 0, " + creditAmt1 + ", " + PayMode + ", '" + checkDDno + "', '" + dtchkdd + "', '" + newbankcode + "','" + branch + "', 1, '0', 0, '" + txt_remark.Text.Trim() + "', '0', '0', '0', 0, " + usercode + ", " + finYearid + ",'" + rcptType + "','" + iscollected + "','" + collecteddate + "','" + iscollected + "','" + collecteddate + "')";

                                                                                        d2.update_method_wo_parameter(insertDebit, "Text");



                                                                                        //Update process

                                                                                        string selectquery = " select  isnull(TotalAmount,0) as TotalAmount,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount  from FT_FeeAllot where App_No =" + appnoNew + " and feecategory ='" + feecat1 + "' and ledgerfk ='" + ledgerfk1 + "' and isnull(istransfer,'0')='0'";

                                                                                        DataSet dsPrevAMount = new DataSet();
                                                                                        dsPrevAMount = d2.select_method_wo_parameter(selectquery, "Text");
                                                                                        if (dsPrevAMount.Tables.Count > 0)
                                                                                        {
                                                                                            if (dsPrevAMount.Tables[0].Rows.Count > 0)
                                                                                            {
                                                                                                double total = 0;
                                                                                                double paidamt = 0;
                                                                                                double balamt = 0;

                                                                                                total = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["TotalAmount"]);

                                                                                                if (total > 0)
                                                                                                {
                                                                                                    paidamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["PaidAmount"]);
                                                                                                    balamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["BalAmount"]);

                                                                                                    balamt = (total - paidamt);

                                                                                                    string updatequery = "update FT_FeeAllot set PaidAmount=isnull(PaidAmount,0) +" + creditAmt1 + " ,BalAmount =" + (balamt - creditAmt1) + "  where App_No =" + appnoNew + " and feecategory ='" + feecat1 + "' and ledgerfk ='" + ledgerfk1 + "' and isnull(istransfer,'0')='0'";
                                                                                                    d2.update_method_wo_parameter(updatequery, "Text");

                                                                                                    InsertUpdateOK = true;
                                                                                                }

                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    #endregion

                                                                                }

                                                                            }
                                                                        }



                                                                        if (creditAmt0 > 0)
                                                                        {
                                                                            StringBuilder tempHtml = new StringBuilder();
                                                                            sno++;
                                                                            indx++;
                                                                            totalamt += Convert.ToDouble(totalAmt0);
                                                                            balanamt += Convert.ToDouble(balAmt0);
                                                                            curpaid += Convert.ToDouble(paidAmt0);

                                                                            deductionamt += Convert.ToDouble(deductAmt0);

                                                                            tempHtml.Append("<tr><td style='text-align:center;'>" + sno + "</td><td style='text-align:left;'>" + disphdr + "</td><td style='text-align:center;'>" + creditAmt0 + "</td>");
                                                                            if (semOrYear != 0)
                                                                            {
                                                                                if (htIndex.Contains("semOrYear"))
                                                                                {
                                                                                    tempHtml.Append("<td style='text-align:Center;'>" + ddl_semrcpt.SelectedItem.Text + "</td>");
                                                                                    if (indx == 1)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:center;'>Category</td>");
                                                                                    }
                                                                                }

                                                                                // htIndex.Add("semOrYear", hInsdx);
                                                                            }


                                                                            if (allotedAmt != 0)
                                                                            {
                                                                                if (htIndex.Contains("allotedAmt"))
                                                                                {
                                                                                    tempHtml.Append("<td style='text-align:center;'>" + totalAmt0 + "</td>");
                                                                                    if (indx == 1)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:center;'>Fixed Fee Rs</td>");
                                                                                    }
                                                                                }
                                                                            }

                                                                            if (balAmt != 0)
                                                                            {
                                                                                if (htIndex.Contains("balAmt"))
                                                                                {
                                                                                    tempHtml.Append("<td style='text-align:center;'>" + balAmt0 + "</td>");
                                                                                    if (indx == 1)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:center;'>Balance Rs</td>");
                                                                                    }
                                                                                }
                                                                            }
                                                                            if (prevPaidAmt != 0)
                                                                            {
                                                                                if (htIndex.Contains("prevPaidAmt"))
                                                                                {
                                                                                    tempHtml.Append("<td style='text-align:center;'>" + alreadyPaid + "</td>");
                                                                                    if (indx == 1)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:center;'>Already Paid Rs</td>");
                                                                                    }
                                                                                }

                                                                            }

                                                                            if (concession != 0)
                                                                            {
                                                                                if (htIndex.Contains("concession"))
                                                                                {
                                                                                    tempHtml.Append("<td style='text-align:center;'>" + deductAmt0 + "</td>");
                                                                                    if (indx == 1)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:center;'>Deduction Rs</td>");
                                                                                    }
                                                                                }

                                                                            }
                                                                            sbHtml.Append("</tr>");
                                                                            tempHtml.Append("</tr>");
                                                                            sbHtml.Append(tempHtml.ToString());
                                                                            createPDFOK = true;
                                                                        }

                                                                    }
                                                                    #endregion

                                                                    #endregion

                                                                    #region Table 3
                                                                    if (BalanceType == 1)
                                                                    {
                                                                        balanamt = retBalance(appnoNew);
                                                                    }
                                                                    //Table3 Header              
                                                                    decimal totalamount = (decimal)curpaid;
                                                                    overallCashAmt += Convert.ToDouble(totalamount);
                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid;padding-top:0px; ' border='1' class='classBold10'><tr><td style='text-align:center;' colspan='4'>Received " + DecimalToWords(totalamount).ToString() + "Rupees Only</td><td style='text-align:center;'>Total</td><td style='text-align:center;'>Rs. " + curpaid + "/-</td><td style='text-align:center;'>Balance</td><td style='text-align:center;'>Rs. " + balanamt + "/-</td><tr></table></center>");

                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid;padding-top:0px; ' border='1' class='classBold10'><tr><td style='text-align:center;' colspan='4'> " + DecimalToWords(totalamount).ToString() + "Rupees Only</td><td style='text-align:center;'>Total</td><td style='text-align:center;' colspan='3'>Rs. " + curpaid + "/-</td><tr></table></center>");
                                                                    sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:0px solid;padding-top:0px; ' class='classBold10'><tr><td style='text-align:center;' colspan='4'> ( " + DecimalToWords(totalamount).ToString() + " Rupees Only )</td><td style='text-align:center;' colspan='3'>Total - Rs. " + curpaid + "/-</td><tr></table></center>");//
                                                                    #endregion

                                                                    #region Receipt Footer

                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px; padding-top:5px; ' class='classBold10'><tr><td style='text-align:center;'>Mode of Pay : " + mode + ddnar + "</td>");
                                                                    sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px; padding-top:5px; ' class='classBold10'><tr><td style='text-align:left;'>Mode of Pay : " + mode + " <br> " + ddnew + " </td></tr><tr><td style='text-align:left;'>" + remarks + " </td>");

                                                                    if (deduction != 0)
                                                                    {
                                                                        sbHtml.Append("<td style='text-align:center;'>Deduction Amount Rs. : " + deductionamt + "</td>");
                                                                    }
                                                                    if (excessAmt != 0)
                                                                    {
                                                                        sbHtml.Append("<td style='text-align:center;'>Excess Amount Rs. : " + excessRemaining(appnoNew).ToString() + "</td>");
                                                                    }
                                                                    if (validDate != 0)
                                                                    {
                                                                        sbHtml.Append("<td style='text-align:center;'>Valid upto : " + "(" + recptValid + ")</td>");
                                                                    }

                                                                    sbHtml.Append("<tr></table></center>");

                                                                    sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:right; width: 560px;  padding-top:5px; ' class='classBold10'><tr><td style='text-align:right;'>");
                                                                    //Authorizer
                                                                    if (forclgName != 0)
                                                                    {
                                                                        sbHtml.Append("For " + collegename + "");
                                                                    }

                                                                    //if (authSignValue.Trim() != "")
                                                                    //{
                                                                    //    sbHtml.Append("<br><br> " + authSignValue + "");
                                                                    //}
                                                                    //else
                                                                    //{
                                                                    //    sbHtml.Append("<br><br><span style='margin-left:20px; text-align:left;float:left;'>#copy#</span> " + "Authorised Signature" + "");
                                                                    //}
                                                                    if (authSignValue.Trim() != "")
                                                                    {
                                                                        //sbHtml.Append("<br><br><div style='margin-top:151px;margin-left:20px; text-align:left;float:left;'>#copy#<span style='padding-left:330px;'> " + authSignValue + "</span></div> ");
                                                                        sbHtml.Append("<tr><td style='text-align: right;'>" + authSignValue + "</td></tr>");
                                                                    }
                                                                    else
                                                                    {
                                                                        //sbHtml.Append("<br><br><div style='margin-top:151px;margin-left:20px; text-align:left;float:left;'>#copy#<span style='padding-left:330px;'>Authorised Signature</span></div> ");
                                                                        sbHtml.Append("<tr><td style='text-align: right;'>Authorised Signature</td></tr>");
                                                                    }

                                                                    if (studCopy != 0 || studOffiCopy == 1)
                                                                    {
                                                                        if (studOffiCopy != 1)
                                                                        {
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                //sbFinal.Append("<div style='padding-left:5px;height: 920px; width:595px;'>");
                                                                                sbFinal.Append("<div style='padding-left: 5px; height: 970px; width: 616px;'>");
                                                                                //sbFinal.Append("<div style='width:585px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "</div>");
                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Student Copy</td></tr></table></div><br/>");
                                                                                sbFinal.Append("</div><br/>");
                                                                                //sbFinal.Replace("#copy#", "Student Copy");
                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Student Copy</td></tr></table>");
                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                            }
                                                                            if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                //sbFinal.Append("<div style='padding-left:5px;height: 920px; width:595px;'>");
                                                                                sbFinal.Append("<div style='padding-left: 5px; height: 970px; width: 616px;'>");
                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Staff Copy</td></tr></table></div><br/>");
                                                                                sbFinal.Append("</div><br>");
                                                                                //sbFinal.Replace("#copy#", "Staff Copy");
                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Staff Copy</td></tr></table>");
                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                            }
                                                                            if (rbl_rollnoNew.SelectedIndex == 2)
                                                                            {
                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                //sbFinal.Append("<div style='padding-left:5px;height: 920px; width:595px;'>");
                                                                                sbFinal.Append("<div style='padding-left: 5px; height: 970px; width: 616px;'>");
                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Vendor Copy</td></tr></table></div><br/>");
                                                                                sbFinal.Append("</div><br>");
                                                                                //sbFinal.Replace("#copy#", "Vendor Copy");
                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Vendor Copy</td></tr></table>");
                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                            }
                                                                        }
                                                                        else
                                                                        {
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                StringBuilder sbFinal1 = new StringBuilder();
                                                                                sbFinal1.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + " <tr><td style='text-align: right;'>Student Copy</td></tr></table></div><br/>");
                                                                                //sbFinal1.Replace("#copy#", "Student Copy");
                                                                                sbFinal1.Replace("#copy#", "<tr><td style='text-align: right;'>Student Copy</td></tr></table></div><br/>");
                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                sbFinal.Append("<div style='padding-left:5px;height: 970px; width:701px;'>");
                                                                                sbFinal.Append(sbFinal1.ToString());
                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "</div><tr><td style='text-align: right;'>Office Copy</td></tr></table>");
                                                                                sbFinal.Append("</div><br>");
                                                                                //sbFinal.Replace("#copy#", "Office Copy");
                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Office Copy</td></tr></table></div><br/>");

                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                            }
                                                                            if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                StringBuilder sbFinal1 = new StringBuilder();
                                                                                sbFinal1.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Staff Copy</td></tr></table></div><br/>");
                                                                                //sbFinal1.Replace("#copy#", "Staff Copy");
                                                                                sbFinal1.Replace("#copy#", "<tr><td style='text-align: right;'>Staff Copy</td></tr></table>");
                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                sbFinal.Append("<div style='padding-left:5px;height: 970px; width:616px;'>");
                                                                                sbFinal.Append(sbFinal1.ToString());
                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Office Copy</td></tr></table></div>");
                                                                                sbFinal.Append("</div><br>");
                                                                                //sbFinal.Replace("#copy#", "Office Copy");
                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Office Copy</td></tr></table>");
                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                            }
                                                                            if (rbl_rollnoNew.SelectedIndex == 2)
                                                                            {
                                                                                StringBuilder sbFinal1 = new StringBuilder();
                                                                                sbFinal1.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Office Copy</td></tr></table></div><br/>");
                                                                                //sbFinal1.Replace("#copy#", "Vendor Copy");
                                                                                sbFinal1.Replace("#copy#", "<tr><td style='text-align: right;'>Office Copy</td></tr></table>");
                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                sbFinal.Append("<div style='padding-left:5px;height: 970px; width:616px;'>");
                                                                                sbFinal.Append(sbFinal1.ToString());
                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Office Copy</td></tr></table></div><br/>");
                                                                                sbFinal.Append("</div><br>");
                                                                                //sbFinal.Replace("#copy#", "Office Copy");
                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Office Copy</td></tr></table>");
                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                            }
                                                                        }
                                                                    }

                                                                    if (officopy != 0 && studOffiCopy != 1)
                                                                    {
                                                                        StringBuilder sbFinal = new StringBuilder();
                                                                        sbFinal.Append("<div style='padding-left:5px;height: 970px; width:616px;'>");
                                                                        sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Office Copy</td></tr></table></div><br/>");
                                                                        sbFinal.Append("</div><br>");
                                                                        //sbFinal.Replace("#copy#", "Office Copy");
                                                                        sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Office Copy</td></tr></table>");
                                                                        contentDiv.InnerHtml += sbFinal.ToString();
                                                                    }

                                                                    if (transCopy != 0)
                                                                    {
                                                                        StringBuilder sbFinal = new StringBuilder();
                                                                        sbFinal.Append("<div style='padding-left:5px;height: 970px; width:616px;'>");
                                                                        sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Transport Copy</td></tr></table></div><br/>");
                                                                        sbFinal.Append("</div><br>");
                                                                        //sbFinal.Replace("#copy#", "Transport Copy");
                                                                        sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Transport Copy</td></tr></table>");
                                                                        contentDiv.InnerHtml += sbFinal.ToString();
                                                                    }
                                                                    #endregion

                                                                    #endregion
                                                                }
                                                                else if (save1 == 12)
                                                                {
                                                                    //For KCG
                                                                    FormatXIIKcgChallanReceipt rcpt = new FormatXIIKcgChallanReceipt();
                                                                    contentDiv.InnerHtml += ((StringBuilder)(rcpt.returnHtmlStringMulReceiptKCG(out createPDFOK, out InsertUpdateOK, ddl_semrcpt, cbl_grpheader, rbl_headerselect, rdo_receipt, rdo_sngle, lbltype, Convert.ToByte(PayMode), Convert.ToByte(memtype), checkDDno, dtchkdd, newbankcode, branch, finYearid, appnoNew, rollno, collegecode1, usercode, Convert.ToByte(rcptType), studname, recptDt, DateTime.Now.ToLongTimeString(), recptNo, cursem, deg.Split('-')[0].ToUpper(), deg.Split('-')[1].ToUpper(), ddnar))).ToString();
                                                                }
                                                            }
                                                        }

                                                        #endregion
                                                    }
                                                    else if (save1 == 4)
                                                    {
                                                        //For Velammal
                                                        #region Print Option For Receipt

                                                        //Basic Data

                                                        string acaYear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanAcademicYear' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                                                        try
                                                        {
                                                            acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                                                        }
                                                        catch { }
                                                        try
                                                        {
                                                            course = course.Split('-')[0];
                                                        }
                                                        catch { course = ""; }
                                                        // string mode = string.Empty;

                                                        if (rb_cash.Checked)
                                                        {
                                                            mode = "Cash";
                                                        }
                                                        else if (rb_cheque.Checked)
                                                        {
                                                            mode = "Cheque";
                                                        }
                                                        else if (rb_dd.Checked)
                                                        {
                                                            mode = "DD";
                                                        }
                                                        else if (rb_card.Checked)
                                                        {
                                                            mode = "Card";
                                                        }

                                                        //Fields to print
                                                        string queryPrint1 = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                        ds.Clear();
                                                        ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                        if (ds.Tables.Count > 0)
                                                        {
                                                            if (ds.Tables[0].Rows.Count > 0)
                                                            {

                                                                //Footer Div Values

                                                                byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);

                                                                string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,isnull(r.Sections,'') as Sections from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + "";
                                                                string collegename = "";
                                                                string add1 = "";
                                                                string add2 = "";
                                                                string add3 = "";
                                                                string univ = "";
                                                                string deg = "";
                                                                string cursem = "";
                                                                string batyr = "";
                                                                string seatty = "";
                                                                string board = "";
                                                                string mothe = "";
                                                                string fathe = "";
                                                                double deductionamt = 0;
                                                                string fgraduate = d2.GetFunction("select isnull(first_graduate,0) as first_graduate  from applyn where app_no='" + appnoNew + "'");
                                                                if (fgraduate == "0")
                                                                {
                                                                    fgraduate = string.Empty;
                                                                }
                                                                else
                                                                {
                                                                    fgraduate = " FG ";
                                                                }
                                                                string sec = string.Empty;
                                                                ds.Clear();
                                                                ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                if (ds.Tables.Count > 0)
                                                                {
                                                                    if (ds.Tables[0].Rows.Count > 0)
                                                                    {
                                                                        collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                        add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                        add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                        add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                        univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                    }
                                                                    if (ds.Tables[1].Rows.Count > 0)
                                                                    {
                                                                        //if (degACR == 0)
                                                                        //{
                                                                        //deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                        //}
                                                                        //else
                                                                        //{
                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                        //}
                                                                        cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                        batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                        board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                        mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                        sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                    }
                                                                }

                                                                #region Table 1
                                                                //Table1 Format 

                                                                PdfTable tableparts = recptDoc.NewTable(FontTableHead, 5, 6, 2);
                                                                tableparts.VisibleHeaders = false;

                                                                tableparts.Rows[0].SetRowHeight(10);
                                                                tableparts.Rows[1].SetRowHeight(30);
                                                                tableparts.Rows[2].SetRowHeight(20);
                                                                tableparts.Rows[3].SetRowHeight(20);
                                                                tableparts.Rows[4].SetRowHeight(10);
                                                                tableparts.Rows[0].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Rows[1].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Rows[2].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Rows[3].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Rows[4].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                //Table1 Data
                                                                //Line 1
                                                                int rowindextbl1 = 0;

                                                                tableparts.Cell(rowindextbl1, 0).SetContent("");
                                                                tableparts.Cell(rowindextbl1, 0).SetFont(FontTable);
                                                                tableparts.Cell(rowindextbl1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                tableparts.Rows[rowindextbl1].SetRowHeight(10);
                                                                rowindextbl1++;

                                                                tableparts.Cell(rowindextbl1, 0).SetContent("Roll No");
                                                                tableparts.Cell(rowindextbl1, 0).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Cell(rowindextbl1, 1).SetContent(": " + rollno);
                                                                tableparts.Cell(rowindextbl1, 1).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Cell(rowindextbl1, 1).ColSpan = 2;

                                                                tableparts.Cell(rowindextbl1, 4).SetContent("Receipt No");
                                                                tableparts.Cell(rowindextbl1, 4).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Cell(rowindextbl1, 5).SetContent(": " + recptNo);
                                                                tableparts.Cell(rowindextbl1, 5).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 5).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                //Line2
                                                                rowindextbl1++;
                                                                tableparts.Cell(rowindextbl1, 0).SetContent("Name");
                                                                tableparts.Cell(rowindextbl1, 0).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                tableparts.Cell(rowindextbl1, 1).SetContent(": " + studname.ToUpper());
                                                                tableparts.Cell(rowindextbl1, 1).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Cell(rowindextbl1, 1).ColSpan = 3;

                                                                tableparts.Cell(rowindextbl1, 4).SetContent("Date");
                                                                tableparts.Cell(rowindextbl1, 4).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                tableparts.Cell(rowindextbl1, 5).SetContent(": " + recptDt);
                                                                tableparts.Cell(rowindextbl1, 5).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 5).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                //Line3
                                                                rowindextbl1++;

                                                                tableparts.Cell(rowindextbl1, 0).SetContent("Year/ Major");
                                                                tableparts.Cell(rowindextbl1, 0).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                                tableparts.Cell(rowindextbl1, 1).SetContent(": " + romanLetter(returnYearforSem(cursem)) + " / " + deg.Split('-')[1].ToUpper() + sec.ToUpper() + fgraduate.ToUpper());
                                                                tableparts.Cell(rowindextbl1, 1).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Cell(rowindextbl1, 1).ColSpan = 3;

                                                                tableparts.Cell(rowindextbl1, 4).SetContent("Term");
                                                                tableparts.Cell(rowindextbl1, 4).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Cell(rowindextbl1, 5).SetContent(": " + acaYear);
                                                                tableparts.Cell(rowindextbl1, 5).SetFont(FontTableHead);
                                                                tableparts.Cell(rowindextbl1, 5).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                rowindextbl1++;
                                                                tableparts.Cell(rowindextbl1, 0).SetContent("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
                                                                tableparts.Cell(rowindextbl1, 0).SetFont(FontTable);
                                                                tableparts.Cell(rowindextbl1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                tableparts.Rows[rowindextbl1].SetRowHeight(10);


                                                                PdfTablePage addtabletopage1 = tableparts.CreateTablePage(new PdfArea(recptDoc, 10, 10, 480, 150));
                                                                rcptpage.Add(addtabletopage1);

                                                                #endregion

                                                                #region Table 2
                                                                //Table2 Format

                                                                string semyear = "";
                                                                if (ddl_semrcpt.Items.Count > 0)
                                                                {
                                                                    semyear = Convert.ToString(ddl_semrcpt.SelectedItem.Value);
                                                                }
                                                                int rows = 0;
                                                                selectQuery = "";
                                                                List<string> lstgrpHeaderValu = new List<string>();
                                                                List<string> lstgrpHeaderName = new List<string>();

                                                                lstgrpHeaderValu = GetSelectedItemsValueList(cbl_grpheader);
                                                                lstgrpHeaderName = GetSelectedItemsTextList(cbl_grpheader);

                                                                #region To Count Rows
                                                                for (int j = 0; j < lstgrpHeaderValu.Count; j++)
                                                                {
                                                                    string BalNOT0 = string.Empty;
                                                                    #region Load Ledgers
                                                                    string headercode = "";

                                                                    headercode = Convert.ToString(lstgrpHeaderValu[j]);

                                                                    selectQuery = " SELECT isnull(sum(BalAmount),0) as BalAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0  and isnull(istransfer,'0')='0'";
                                                                    if (rbl_headerselect.SelectedIndex == 0)
                                                                    {
                                                                        //Group Header
                                                                        selectQuery = " SELECT isnull(sum(BalAmount),0) as BalAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')   and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0  and isnull(istransfer,'0')='0'";
                                                                        if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                                        {
                                                                            selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                                        }

                                                                        if (lbltype.Text != "")
                                                                        {
                                                                            selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                                        }

                                                                    }
                                                                    else if (rbl_headerselect.SelectedIndex == 1)
                                                                    {
                                                                        //Header
                                                                        selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                                    }
                                                                    else
                                                                    {
                                                                        //Ledger
                                                                        selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                                    }

                                                                    if (selectQuery.Trim() != "")
                                                                    {
                                                                        BalNOT0 = d2.GetFunction(selectQuery);
                                                                        double balChk = 0;
                                                                        double.TryParse(BalNOT0, out balChk);
                                                                        if (balChk > 0)
                                                                        {
                                                                            rows++;
                                                                        }
                                                                    }
                                                                    #endregion
                                                                }

                                                                #endregion

                                                                PdfTable tableparts1 = recptDoc.NewTable(FontTable, rows + 5, 4, 1);
                                                                //tableparts1.SetBorders(Color.Black, 1, BorderType.Rows);
                                                                tableparts1.VisibleHeaders = false;
                                                                tableparts1.Columns[0].SetWidth(57);
                                                                tableparts1.Columns[1].SetWidth(340);
                                                                tableparts1.Columns[2].SetWidth(85);
                                                                tableparts1.Columns[3].SetWidth(28);

                                                                tableparts1.Cell(0, 0).SetContent("S.No");
                                                                tableparts1.Cell(0, 0).SetFont(FontTable);
                                                                tableparts1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);


                                                                tableparts1.Cell(0, 1).SetContent("Particulars");
                                                                tableparts1.Cell(0, 1).SetFont(FontTable);
                                                                tableparts1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                //tableparts1.Cell(indx, 1).ColSpan = 4;

                                                                tableparts1.Cell(0, 2).SetContent("Rs.");
                                                                tableparts1.Cell(0, 2).SetFont(FontTable);
                                                                tableparts1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                                tableparts1.Cell(0, 3).SetContent("Ps.");
                                                                tableparts1.Cell(0, 3).SetFont(FontTable);
                                                                tableparts1.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                tableparts1.Rows[0].SetRowHeight(20);
                                                                tableparts1.Rows[1].SetRowHeight(10);


                                                                #region feedata

                                                                int sno = 0;
                                                                int indx = 1;
                                                                double totalamt = 0;
                                                                double balanamt = 0;
                                                                double curpaid = 0;
                                                                double paidamount = 0;
                                                                foreach (PdfCell pr in tableparts1.CellRange(indx, 0, indx, 0).Cells)
                                                                {
                                                                    pr.ColSpan = 4;
                                                                }

                                                                tableparts1.Cell(indx, 0).SetContent("-----------------------------------------------------------------------------------------------------------------------------------------------------");
                                                                tableparts1.Cell(indx, 0).SetFont(FontTable);
                                                                tableparts1.Cell(indx, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                tableparts1.Rows[indx].SetRowHeight(10);
                                                                indx++;
                                                                #region Insert Process New

                                                                //For Every Selected Headers

                                                                for (int j = 0; j < lstgrpHeaderValu.Count; j++)
                                                                {
                                                                    string disphdr = string.Empty;
                                                                    double allotamt0 = 0;
                                                                    double deductAmt0 = 0;
                                                                    double totalAmt0 = 0;
                                                                    double paidAmt0 = 0;
                                                                    double balAmt0 = 0;
                                                                    double creditAmt0 = 0;
                                                                    double alreadyPaid = 0;

                                                                    #region Load Ledgers

                                                                    string headercode = "";
                                                                    disphdr = Convert.ToString(lstgrpHeaderName[j]);
                                                                    headercode = Convert.ToString(lstgrpHeaderValu[j]);

                                                                    selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0) as   DeductAmount,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount, isnull(BalAmount,0) as BalAmount,TextVal,TextCode FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";

                                                                    if (rbl_headerselect.SelectedIndex == 0)
                                                                    {
                                                                        //Group Header
                                                                        selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)   as DeductAmount ,isnull(TotalAmount,0)   as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount,TextVal,TextCode,ChlGroupHeader FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";
                                                                        if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                                        {
                                                                            selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                                        }

                                                                        if (lbltype.Text != "")
                                                                        {
                                                                            selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                                        }

                                                                    }
                                                                    else if (rbl_headerselect.SelectedIndex == 1)
                                                                    {
                                                                        //Header
                                                                        selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                                    }
                                                                    else
                                                                    {
                                                                        //Ledger
                                                                        selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                                    }

                                                                    selectQuery += "  order by case when priority is null then 1 else 0 end, priority ";


                                                                    #endregion

                                                                    DataSet dsLedgers = new DataSet();
                                                                    dsLedgers = d2.select_method_wo_parameter(selectQuery, "Text");
                                                                    if (dsLedgers.Tables.Count > 0 && dsLedgers.Tables[0].Rows.Count > 0)
                                                                    {

                                                                        for (int lgri = 0; lgri < dsLedgers.Tables[0].Rows.Count; lgri++)
                                                                        {

                                                                            string feecat1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["TextCode"]);
                                                                            string headerfk1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["HeaderFK"]);
                                                                            string ledgerfk1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["LedgerFK"]);
                                                                            double feeamt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["FeeAmount"]);
                                                                            double deductAmt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["DeductAmount"]);
                                                                            double totalamt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["TotalAmount"]);
                                                                            double paidAmt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["PaidAmount"]);
                                                                            double balAmt1 = totalamt1 - paidAmt1;
                                                                            double creditAmt1 = balAmt1;
                                                                            alreadyPaid += paidAmt1;
                                                                            creditAmt0 += creditAmt1;
                                                                            totalAmt0 += totalamt1;
                                                                            balAmt0 += balAmt1 - creditAmt1;
                                                                            paidAmt0 += creditAmt1;
                                                                            deductAmt0 += deductAmt1;


                                                                            #region Ledger Insert Update

                                                                            if (creditAmt1 > 0)
                                                                            {
                                                                                string iscollected = "0";
                                                                                string collecteddate = "";
                                                                                if (PayMode == "1" || PayMode == "6" || PayMode == "7")
                                                                                {
                                                                                    iscollected = "1";
                                                                                    collecteddate = (dtrcpt).ToString();
                                                                                }
                                                                                //else if (PayMode == "2")
                                                                                //{
                                                                                //    iscollected = AutoClearCheck();
                                                                                //    collecteddate = (dtrcpt).ToString();
                                                                                //}
                                                                                //else if (PayMode == "3")
                                                                                //{
                                                                                //    iscollected = isCollectedForDD();
                                                                                //    collecteddate = (dtrcpt).ToString();
                                                                                //}
                                                                                string insertDebit = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate) VALUES('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "','" + receiptno + "', " + memtype + ", " + appnoNew + ", " + ledgerfk1 + ", " + headerfk1 + ", " + feecat1 + ", 0, " + creditAmt1 + ", " + PayMode + ", '" + checkDDno + "', '" + dtchkdd + "', '" + newbankcode + "','" + branch + "', 1, '0', 0, '" + txt_remark.Text.Trim() + "', '0', '0', '0', 0, " + usercode + ", " + finYearid + ",'" + rcptType + "','" + iscollected + "','" + collecteddate + "','" + iscollected + "','" + collecteddate + "')";

                                                                                d2.update_method_wo_parameter(insertDebit, "Text");



                                                                                //Update process

                                                                                string selectquery = " select  isnull(TotalAmount,0) as TotalAmount,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount  from FT_FeeAllot where App_No =" + appnoNew + " and feecategory ='" + feecat1 + "' and ledgerfk ='" + ledgerfk1 + "' and isnull(istransfer,'0')='0'";

                                                                                DataSet dsPrevAMount = new DataSet();
                                                                                dsPrevAMount = d2.select_method_wo_parameter(selectquery, "Text");
                                                                                if (dsPrevAMount.Tables.Count > 0)
                                                                                {
                                                                                    if (dsPrevAMount.Tables[0].Rows.Count > 0)
                                                                                    {
                                                                                        double total = 0;
                                                                                        double paidamt = 0;
                                                                                        double balamt = 0;

                                                                                        total = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["TotalAmount"]);

                                                                                        if (total > 0)
                                                                                        {
                                                                                            paidamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["PaidAmount"]);
                                                                                            balamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["BalAmount"]);

                                                                                            balamt = (total - paidamt);

                                                                                            string updatequery = "update FT_FeeAllot set PaidAmount=isnull(PaidAmount,0) +" + creditAmt1 + " ,BalAmount =" + (balamt - creditAmt1) + "  where App_No =" + appnoNew + " and feecategory ='" + feecat1 + "' and ledgerfk ='" + ledgerfk1 + "' and isnull(istransfer,'0')='0'";
                                                                                            d2.update_method_wo_parameter(updatequery, "Text");

                                                                                            InsertUpdateOK = true;
                                                                                        }

                                                                                    }
                                                                                }
                                                                            }

                                                                            #endregion

                                                                        }
                                                                    }

                                                                    if (creditAmt0 > 0)
                                                                    {
                                                                        sno++;

                                                                        totalamt += Convert.ToDouble(totalAmt0);
                                                                        balanamt += Convert.ToDouble(balAmt0);
                                                                        curpaid += Convert.ToDouble(paidAmt0);

                                                                        deductionamt += Convert.ToDouble(deductAmt0);

                                                                        tableparts1.Cell(indx, 0).SetContent(sno);
                                                                        tableparts1.Cell(indx, 0).SetFont(FontTable);
                                                                        tableparts1.Cell(indx, 0).SetContentAlignment(ContentAlignment.MiddleCenter);


                                                                        tableparts1.Cell(indx, 1).SetContent(disphdr);
                                                                        tableparts1.Cell(indx, 1).SetFont(FontTable);
                                                                        tableparts1.Cell(indx, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                        //tableparts1.Cell(indx, 1).ColSpan = 4;

                                                                        tableparts1.Cell(indx, 2).SetContent(returnIntegerPart(creditAmt0));
                                                                        tableparts1.Cell(indx, 2).SetFont(FontTable);
                                                                        tableparts1.Cell(indx, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                                        tableparts1.Cell(indx, 3).SetContent(returnDecimalPart(creditAmt0));
                                                                        tableparts1.Cell(indx, 3).SetFont(FontTable);
                                                                        tableparts1.Cell(indx, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                        indx++;
                                                                        createPDFOK = true;
                                                                    }

                                                                }

                                                                #endregion

                                                                foreach (PdfCell pr in tableparts1.CellRange(indx, 0, indx, 0).Cells)
                                                                {
                                                                    pr.ColSpan = 4;
                                                                }

                                                                tableparts1.Cell(indx, 0).SetContent("-----------------------------------------------------------------------------------------------------------------------------------------------------");
                                                                tableparts1.Cell(indx, 0).SetFont(FontTable);
                                                                tableparts1.Cell(indx, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                tableparts1.Rows[indx].SetRowHeight(10);
                                                                indx++;
                                                                decimal totalamount = (decimal)curpaid;
                                                                tableparts1.Cell(indx, 1).SetContent("Total");
                                                                tableparts1.Cell(indx, 1).SetFont(FontTable);
                                                                tableparts1.Cell(indx, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts1.Cell(indx, 2).SetContent("" + returnIntegerPart((double)totalamount));
                                                                tableparts1.Cell(indx, 2).SetFont(FontTable);
                                                                tableparts1.Cell(indx, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                                tableparts1.Cell(indx, 3).SetContent(returnDecimalPart((double)totalamount));
                                                                tableparts1.Cell(indx, 3).SetFont(FontTable);
                                                                tableparts1.Cell(indx, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                string endstatement = "\n" + DecimalToWords(totalamount) + " Rupees Only." + "\n\nPaid by " + mode + " Rs." + totalamount.ToString() + "/-.";
                                                                string finalstrig = "";

                                                                finalstrig = "\nExcess Amount  : " + excessRemaining(appnoNew).ToString();

                                                                if (rb_dd.Checked == true)
                                                                {
                                                                    finalstrig = finalstrig + "\n" + mode + " : " + txt_ddno.Text.ToString() + "         Date  : " + txt_date1.Text.ToString();
                                                                    finalstrig = finalstrig + "\nBank Name  : " + ddl_bkname.SelectedItem.Text.ToString();
                                                                }
                                                                if (rb_cheque.Checked == true)
                                                                {
                                                                    finalstrig = "\n" + mode + " : " + txt_chqno.Text.ToString() + "         Date  : " + txt_date1.Text.ToString();
                                                                    finalstrig = finalstrig + "\n\nBank Name  : " + ddl_bkname.SelectedItem.Text.ToString();
                                                                }

                                                                if (rb_card.Checked == true)
                                                                {
                                                                    finalstrig = "\n" + mode + " : " + newbankname;
                                                                }
                                                                endstatement = endstatement + finalstrig;

                                                                tableparts1.Cell(indx + 1, 0).SetContent(endstatement);
                                                                tableparts1.Cell(indx + 1, 0).SetFont(FontTable);
                                                                tableparts1.Cell(indx + 1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts1.Cell(indx + 1, 0).ColSpan = 3;

                                                                #endregion

                                                                PdfTablePage addtabletopage2 = tableparts1.CreateTablePage(new PdfArea(recptDoc, 10, 80, 480, 500));
                                                                rcptpage.Add(addtabletopage2);

                                                                #endregion

                                                                rcptpage.SaveToDocument();

                                                                //save changes
                                                                PdfPage rcptpageOf = rcptpage.CreateCopy();
                                                                PdfPage rcptpageTran = rcptpage.CreateCopy();
                                                                if (officopy != 0)
                                                                {
                                                                    rcptpageOf.SaveToDocument();
                                                                }

                                                                if (transCopy != 0)
                                                                {
                                                                    rcptpageTran.SaveToDocument();
                                                                }

                                                            }

                                                        }

                                                        #endregion
                                                    }
                                                    else if (save1 == 5)
                                                    {
                                                        //For Jpr
                                                        #region Print Option For Receipt

                                                        //Basic Data

                                                        string acaYear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanAcademicYear' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                                                        try
                                                        {
                                                            acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                                                        }
                                                        catch { }
                                                        try
                                                        {
                                                            course = course.Split('-')[0];
                                                        }
                                                        catch { course = ""; }
                                                        // string mode = string.Empty;

                                                        if (rb_cash.Checked)
                                                        {
                                                            mode = "Cash";
                                                        }
                                                        else if (rb_cheque.Checked)
                                                        {
                                                            mode = "Cheque";
                                                        }
                                                        else if (rb_dd.Checked)
                                                        {
                                                            mode = "DD";
                                                        }
                                                        else if (rb_card.Checked)
                                                        {
                                                            mode = "Card";
                                                        }

                                                        //Fields to print
                                                        string queryPrint1 = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                        ds.Clear();
                                                        ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                        if (ds.Tables.Count > 0)
                                                        {
                                                            if (ds.Tables[0].Rows.Count > 0)
                                                            {

                                                                //Footer Div Values

                                                                byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);

                                                                string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + "";
                                                                string collegename = "";
                                                                string add1 = "";
                                                                string add2 = "";
                                                                string add3 = "";
                                                                string univ = "";
                                                                string deg = "";
                                                                string cursem = "";
                                                                string batyr = "";
                                                                string seatty = "";
                                                                string board = "";
                                                                string mothe = "";
                                                                string fathe = "";
                                                                double deductionamt = 0;
                                                                ds.Clear();
                                                                ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                if (ds.Tables.Count > 0)
                                                                {
                                                                    if (ds.Tables[0].Rows.Count > 0)
                                                                    {
                                                                        collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                        add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                        add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                        add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                        univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                    }
                                                                    if (ds.Tables[1].Rows.Count > 0)
                                                                    {
                                                                        //if (degACR == 0)
                                                                        //{
                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                        //}
                                                                        //else
                                                                        //{
                                                                        // deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                        //}
                                                                        cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                        batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                        board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                        mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                    }
                                                                }

                                                                int curY = 110;
                                                                int curX = 201;

                                                                PdfTextArea pRcpt = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX, curY, 150, 28), ContentAlignment.MiddleLeft, recptNo);
                                                                rcptpage.Add(pRcpt);

                                                                #region Table 1
                                                                //Table1 Format 
                                                                PdfTable tableparts = recptDoc.NewTable(FontTableHead, 3, 7, 5);
                                                                tableparts.VisibleHeaders = false;

                                                                tableparts.Rows[0].SetRowHeight(60);
                                                                tableparts.Rows[1].SetRowHeight(50);
                                                                tableparts.Rows[2].SetRowHeight(50);
                                                                tableparts.Rows[0].SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                tableparts.Rows[1].SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                tableparts.Rows[2].SetContentAlignment(ContentAlignment.MiddleCenter);


                                                                tableparts.Columns[0].SetWidth(49);
                                                                tableparts.Columns[1].SetWidth(49);
                                                                tableparts.Columns[2].SetWidth(49);
                                                                tableparts.Columns[3].SetWidth(49);
                                                                tableparts.Columns[4].SetWidth(49);
                                                                tableparts.Columns[5].SetWidth(49);
                                                                tableparts.Columns[6].SetWidth(49);

                                                                //Table1 Data
                                                                //Line 1
                                                                tableparts.Cell(0, 2).SetContent(studname.ToUpper());
                                                                tableparts.Cell(0, 2).SetFont(FontTableHead);
                                                                tableparts.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Cell(0, 2).ColSpan = 5;

                                                                //Line2
                                                                tableparts.Cell(1, 1).SetContent("\n\n" + rollno);
                                                                tableparts.Cell(1, 1).SetFont(FontTableHead);
                                                                tableparts.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Cell(1, 1).ColSpan = 2;

                                                                tableparts.Cell(1, 4).SetContent("\n\n" + batyr);
                                                                tableparts.Cell(1, 4).SetFont(FontTableHead);
                                                                tableparts.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                tableparts.Cell(1, 6).SetContent("\n\n" + recptDt);
                                                                tableparts.Cell(1, 6).SetFont(FontTableHead);
                                                                tableparts.Cell(1, 6).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                //Line3

                                                                tableparts.Cell(2, 1).SetContent("\n\n" + deg.Split('-')[0].ToUpper());
                                                                tableparts.Cell(2, 1).SetFont(FontTableHead);
                                                                tableparts.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                                tableparts.Cell(2, 4).SetContent("\n\n" + deg.Split('-')[1].ToUpper());
                                                                tableparts.Cell(2, 4).SetFont(FontTableHead);
                                                                tableparts.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                tableparts.Cell(2, 4).ColSpan = 3;

                                                                PdfTablePage addtabletopage1 = tableparts.CreateTablePage(new PdfArea(recptDoc, 45, 135, 346, 140));
                                                                rcptpage.Add(addtabletopage1);

                                                                #endregion

                                                                #region Table 2
                                                                //Table2 Format

                                                                string semyear = "";
                                                                if (ddl_semrcpt.Items.Count > 0)
                                                                {
                                                                    semyear = Convert.ToString(ddl_semrcpt.SelectedItem.Value);
                                                                }
                                                                int rows = 0;
                                                                selectQuery = "";
                                                                List<string> lstgrpHeaderValu = new List<string>();
                                                                List<string> lstgrpHeaderName = new List<string>();

                                                                lstgrpHeaderValu = GetSelectedItemsValueList(cbl_grpheader);
                                                                lstgrpHeaderName = GetSelectedItemsTextList(cbl_grpheader);
                                                                #region To Count Rows
                                                                for (int j = 0; j < lstgrpHeaderValu.Count; j++)
                                                                {
                                                                    string BalNOT0 = string.Empty;
                                                                    #region Load Ledgers

                                                                    string headercode = "";

                                                                    headercode = Convert.ToString(lstgrpHeaderValu[j]);

                                                                    selectQuery = " SELECT isnull(sum(BalAmount),0) as BalAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";
                                                                    if (rbl_headerselect.SelectedIndex == 0)
                                                                    {
                                                                        //Group Header
                                                                        selectQuery = " SELECT isnull(sum(BalAmount),0) as BalAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')   and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";
                                                                        if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                                        {
                                                                            selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                                        }

                                                                        if (lbltype.Text != "")
                                                                        {
                                                                            selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                                        }

                                                                    }
                                                                    else if (rbl_headerselect.SelectedIndex == 1)
                                                                    {
                                                                        //Header
                                                                        selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                                    }
                                                                    else
                                                                    {
                                                                        //Ledger
                                                                        selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                                    }


                                                                    if (selectQuery.Trim() != "")
                                                                    {
                                                                        BalNOT0 = d2.GetFunction(selectQuery);
                                                                        double balChk = 0;
                                                                        double.TryParse(BalNOT0, out balChk);
                                                                        if (balChk > 0)
                                                                        {
                                                                            rows++;
                                                                        }
                                                                    }

                                                                    #endregion

                                                                }

                                                                #endregion

                                                                PdfTable tableparts1 = recptDoc.NewTable(FontTable, rows, 4, 5);
                                                                tableparts1.VisibleHeaders = false;
                                                                tableparts1.Columns[0].SetWidth(28);
                                                                tableparts1.Columns[1].SetWidth(204);
                                                                tableparts1.Columns[2].SetWidth(62);
                                                                tableparts1.Columns[3].SetWidth(23);


                                                                #region feedata

                                                                int sno = 0;
                                                                int indx = 0;
                                                                double totalamt = 0;
                                                                double balanamt = 0;
                                                                double curpaid = 0;
                                                                double paidamount = 0;

                                                                #region Insert Process New

                                                                //For Every Selected Headers

                                                                for (int j = 0; j < lstgrpHeaderValu.Count; j++)
                                                                {
                                                                    string disphdr = string.Empty;
                                                                    double allotamt0 = 0;
                                                                    double deductAmt0 = 0;
                                                                    double totalAmt0 = 0;
                                                                    double paidAmt0 = 0;
                                                                    double balAmt0 = 0;
                                                                    double creditAmt0 = 0;
                                                                    double alreadyPaid = 0;

                                                                    #region Load Ledgers

                                                                    string headercode = "";
                                                                    disphdr = Convert.ToString(lstgrpHeaderName[j]);
                                                                    headercode = Convert.ToString(lstgrpHeaderValu[j]);

                                                                    selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0) as   DeductAmount,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount, isnull(BalAmount,0) as BalAmount,TextVal,TextCode FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";

                                                                    if (rbl_headerselect.SelectedIndex == 0)
                                                                    {
                                                                        //Group Header
                                                                        selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)   as DeductAmount ,isnull(TotalAmount,0)   as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount,TextVal,TextCode,ChlGroupHeader FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";
                                                                        if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                                        {
                                                                            selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                                        }

                                                                        if (lbltype.Text != "")
                                                                        {
                                                                            selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                                        }

                                                                    }
                                                                    else if (rbl_headerselect.SelectedIndex == 1)
                                                                    {
                                                                        //Header
                                                                        selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                                    }
                                                                    else
                                                                    {
                                                                        //Ledger
                                                                        selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                                    }


                                                                    selectQuery += "  order by case when priority is null then 1 else 0 end, priority ";

                                                                    #endregion

                                                                    DataSet dsLedgers = new DataSet();
                                                                    dsLedgers = d2.select_method_wo_parameter(selectQuery, "Text");
                                                                    if (dsLedgers.Tables.Count > 0 && dsLedgers.Tables[0].Rows.Count > 0)
                                                                    {
                                                                        for (int lgri = 0; lgri < dsLedgers.Tables[0].Rows.Count; lgri++)
                                                                        {

                                                                            string feecat1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["TextCode"]);
                                                                            string headerfk1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["HeaderFK"]);
                                                                            string ledgerfk1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["LedgerFK"]);
                                                                            double feeamt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["FeeAmount"]);
                                                                            double deductAmt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["DeductAmount"]);
                                                                            double totalamt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["TotalAmount"]);
                                                                            double paidAmt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["PaidAmount"]);
                                                                            double balAmt1 = totalamt1 - paidAmt1;
                                                                            double creditAmt1 = balAmt1;
                                                                            alreadyPaid += paidAmt1;
                                                                            creditAmt0 += creditAmt1;
                                                                            totalAmt0 += totalamt1;
                                                                            balAmt0 += balAmt1 - creditAmt1;
                                                                            paidAmt0 += creditAmt1;
                                                                            deductAmt0 += deductAmt1;

                                                                            #region Ledger Insert Update

                                                                            if (creditAmt1 > 0)
                                                                            {
                                                                                string iscollected = "0";
                                                                                string collecteddate = "";
                                                                                if (PayMode == "1" || PayMode == "6" || PayMode == "7")
                                                                                {
                                                                                    iscollected = "1";
                                                                                    collecteddate = (dtrcpt).ToString();
                                                                                }
                                                                                //else if (PayMode == "2")
                                                                                //{
                                                                                //    iscollected = AutoClearCheck();
                                                                                //    collecteddate = (dtrcpt).ToString();
                                                                                //}
                                                                                //else if (PayMode == "3")
                                                                                //{
                                                                                //    iscollected = isCollectedForDD();
                                                                                //    collecteddate = (dtrcpt).ToString();
                                                                                //}
                                                                                string insertDebit = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate) VALUES('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "','" + receiptno + "', " + memtype + ", " + appnoNew + ", " + ledgerfk1 + ", " + headerfk1 + ", " + feecat1 + ", 0, " + creditAmt1 + ", " + PayMode + ", '" + checkDDno + "', '" + dtchkdd + "', '" + newbankcode + "','" + branch + "', 1, '0', 0, '" + txt_remark.Text.Trim() + "', '0', '0', '0', 0, " + usercode + ", " + finYearid + ",'" + rcptType + "','" + iscollected + "','" + collecteddate + "','" + iscollected + "','" + collecteddate + "')";

                                                                                d2.update_method_wo_parameter(insertDebit, "Text");



                                                                                //Update process

                                                                                string selectquery = " select  isnull(TotalAmount,0) as TotalAmount,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount  from FT_FeeAllot where App_No =" + appnoNew + " and feecategory ='" + feecat1 + "' and ledgerfk ='" + ledgerfk1 + "' and isnull(istransfer,'0')='0'";

                                                                                DataSet dsPrevAMount = new DataSet();
                                                                                dsPrevAMount = d2.select_method_wo_parameter(selectquery, "Text");
                                                                                if (dsPrevAMount.Tables.Count > 0)
                                                                                {
                                                                                    if (dsPrevAMount.Tables[0].Rows.Count > 0)
                                                                                    {
                                                                                        double total = 0;
                                                                                        double paidamt = 0;
                                                                                        double balamt = 0;

                                                                                        total = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["TotalAmount"]);

                                                                                        if (total > 0)
                                                                                        {
                                                                                            paidamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["PaidAmount"]);
                                                                                            balamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["BalAmount"]);

                                                                                            balamt = (total - paidamt);

                                                                                            string updatequery = "update FT_FeeAllot set PaidAmount=isnull(PaidAmount,0) +" + creditAmt1 + " ,BalAmount =" + (balamt - creditAmt1) + "  where App_No =" + appnoNew + " and feecategory ='" + feecat1 + "' and ledgerfk ='" + ledgerfk1 + "' and isnull(istransfer,'0')='0'";
                                                                                            d2.update_method_wo_parameter(updatequery, "Text");

                                                                                            InsertUpdateOK = true;
                                                                                        }

                                                                                    }
                                                                                }
                                                                            }

                                                                            #endregion
                                                                        }
                                                                    }

                                                                    if (creditAmt0 > 0)
                                                                    {
                                                                        sno++;

                                                                        totalamt += Convert.ToDouble(totalAmt0);
                                                                        balanamt += Convert.ToDouble(balAmt0);
                                                                        curpaid += Convert.ToDouble(paidAmt0);

                                                                        deductionamt += Convert.ToDouble(deductAmt0);

                                                                        tableparts1.Cell(indx, 0).SetContent(sno);
                                                                        tableparts1.Cell(indx, 0).SetFont(FontTable);
                                                                        tableparts1.Cell(indx, 0).SetContentAlignment(ContentAlignment.MiddleCenter);


                                                                        tableparts1.Cell(indx, 1).SetContent(disphdr);
                                                                        tableparts1.Cell(indx, 1).SetFont(FontTable);
                                                                        tableparts1.Cell(indx, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                        //tableparts1.Cell(indx, 1).ColSpan = 4;

                                                                        tableparts1.Cell(indx, 2).SetContent(creditAmt0);
                                                                        tableparts1.Cell(indx, 2).SetFont(FontTable);
                                                                        tableparts1.Cell(indx, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                        indx++;
                                                                        createPDFOK = true;
                                                                        FromJpr = true;
                                                                    }
                                                                }
                                                                #endregion

                                                                #endregion

                                                                PdfTablePage addtabletopage2 = tableparts1.CreateTablePage(new PdfArea(recptDoc, 45, 232, 346, 218));
                                                                rcptpage.Add(addtabletopage2);

                                                                #endregion


                                                                PdfTable tableparts3 = recptDoc.NewTable(FontTable, 1, 4, 5);
                                                                tableparts3.Columns[0].SetWidth(28);
                                                                tableparts3.Columns[1].SetWidth(204);
                                                                tableparts3.Columns[2].SetWidth(62);
                                                                tableparts3.Columns[3].SetWidth(23);


                                                                double totalamount = curpaid;

                                                                tableparts3.Cell(0, 2).SetContent(totalamount);
                                                                tableparts3.Cell(0, 2).SetFont(FontTable);
                                                                tableparts3.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);

                                                                PdfTablePage addtabletopage3 = tableparts3.CreateTablePage(new PdfArea(recptDoc, 45, 450, 346, 28));
                                                                rcptpage.Add(addtabletopage3);

                                                                rcptpage.SaveToDocument();

                                                                //save changes
                                                                PdfPage rcptpageOf = rcptpage.CreateCopy();
                                                                PdfPage rcptpageTran = rcptpage.CreateCopy();
                                                                if (officopy != 0)
                                                                {
                                                                    rcptpageOf.SaveToDocument();
                                                                }

                                                                if (transCopy != 0)
                                                                {
                                                                    rcptpageTran.SaveToDocument();
                                                                }


                                                            }

                                                        }

                                                        #endregion
                                                    }
                                                    else if (save1 == 6)
                                                    {
                                                        //For PMC
                                                        #region Print Option For Receipt

                                                        //Basic Data

                                                        string acaYear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanAcademicYear' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                                                        try
                                                        {
                                                            acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                                                        }
                                                        catch { }
                                                        try
                                                        {
                                                            course = course.Split('-')[0];
                                                        }
                                                        catch { course = ""; }
                                                        // string mode = string.Empty;

                                                        if (rb_cash.Checked)
                                                        {
                                                            mode = "Cash";
                                                        }
                                                        else if (rb_cheque.Checked)
                                                        {
                                                            mode = "Cheque - No:" + checkDDno;
                                                        }
                                                        else if (rb_dd.Checked)
                                                        {
                                                            mode = "DD - No:" + checkDDno;
                                                        }
                                                        else if (rb_card.Checked)
                                                        {
                                                            mode = "Card - " + newbankname;
                                                        }

                                                        //Fields to print
                                                        string queryPrint1 = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                        ds.Clear();
                                                        ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                        if (ds.Tables.Count > 0)
                                                        {
                                                            if (ds.Tables[0].Rows.Count > 0)
                                                            {
                                                                //Footer Div Values
                                                                byte narration = Convert.ToByte(ds.Tables[0].Rows[0]["IsNarration"]);

                                                                byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);

                                                                string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + "";
                                                                string collegename = "";
                                                                string add1 = "";
                                                                string add2 = "";
                                                                string add3 = "";
                                                                string univ = "";
                                                                string deg = "";
                                                                string cursem = "";
                                                                string batyr = "";
                                                                string seatty = "";
                                                                string board = "";
                                                                string mothe = "";
                                                                string fathe = "";
                                                                double deductionamt = 0;
                                                                ds.Clear();
                                                                ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                if (ds.Tables.Count > 0)
                                                                {
                                                                    if (ds.Tables[0].Rows.Count > 0)
                                                                    {
                                                                        collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                        add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                        add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                        add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                        univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                    }
                                                                    if (ds.Tables[1].Rows.Count > 0)
                                                                    {
                                                                        //if (degACR == 0)
                                                                        //{
                                                                        //deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                        //}
                                                                        //else
                                                                        //{
                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                        //}
                                                                        cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                        batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                        board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                        mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                    }
                                                                }

                                                                string degString = string.Empty;
                                                                //Line3
                                                                if (rbl_rollnoNew.SelectedIndex == 0)
                                                                {
                                                                    degString = deg;//.Split('-')[0].ToUpper();
                                                                }
                                                                else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                {
                                                                    degString = deg;
                                                                }
                                                                #region Receipt Header

                                                                //sbHtml.Append("<div style='padding-left:5px;height: 592.32;'><table cellpadding='0' cellspacing='0' style='text-align:center; width: 586.56px; ' class='classBold10'><tr><td>");

                                                                //sbHtml.Append("<div style='text-align:right; padding-right:20px; width:586px; height:120px;'><img src='../FinanceLogo/right_Logo" + collegecode1 + ".jpeg?" + DateTime.Now.Ticks.ToString() + "' height='60px' width='60px'/></div>");

                                                                //sbHtml.Append("<table style='width:586px; height:100px; padding-left:20px; ' class='classBold10'><tr><td style='width:200px; text-align:left;'>" + recptNo + "</td><td style='width:200px; text-align:left;'>" + recptDt + "</td><td style='width:180px; text-align:right;'>" + Regno + "</td></tr><tr><td style='width:590px; text-align:left;' colspan='2'>" + studname.ToUpper() + "</td></tr><tr><td style='width:300px; text-align:left;'>" + degString + "</td><td style='width:280px; text-align:left;'>" + romanLetter(returnYearforSem(cursem)) + " Year </td></tr></table>");
                                                                sbHtml.Append("<div style='padding-left: 0px; height: 500px; width: 640px;><table cellpadding='0' cellspacing='0' style='text-align:center; width: 640px; ' class='classBold10'><tr><td>");

                                                                sbHtml.Append("<div style='text-align: right; padding-left: 0px; width: 640px; height: 47px;'><img src='../FinanceLogo/right_Logo" + collegecode1 + ".jpeg?" + DateTime.Now.Ticks.ToString() + "' style='padding-left: 610px;' height='45px' width='60px'/></div>");

                                                                sbHtml.Append("<table style='width: 560px; height: 110px; padding-top: 54px;' class='classBold10'><tr><td style='width: 180px; text-align: right; padding-bottom:2px;'>&nbsp;&nbsp;" + recptNo + "</td><td style='width: 160px; text-align: right;padding-bottom:2px;'>&nbsp;&nbsp;&nbsp;&nbsp;" + recptDt + "</td><td style='width: 180px; text-align: right;padding-bottom:2px;'>" + Regno + "</td></tr><tr><td style='width: 560px; padding-top: 4px;' colspan='3'><span style='padding-left: 71px;'>" + studname.ToUpper() + "</span></td></tr><tr><td style='width: 150px; text-align: right; padding-top: 10px;' >" + degString + "</td><td style='width: 320px; padding-left: 71px; padding-top: 10px;' colspan='2'>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;" + romanLetter(returnYearforSem(cursem)) + " Year </td></tr></table>");

                                                                #endregion

                                                                #region Receipt Body
                                                                //  sbHtml.Append("<div style='width:586px; height:200px; padding-left:2px;padding-top:10px; '><table  class='classBold10'>");
                                                                sbHtml.Append("<div style='width: 560px; height: 130px; padding-left: 2px; padding-top: 30px;'><table  class='classBold10'><tr><td style='width: 410px;'></td><td style='width:110px;text-align:right;'>&nbsp;</td><td style='text-align:right;'></td></tr>");

                                                                string semyear = "";
                                                                if (ddl_semrcpt.Items.Count > 0)
                                                                {
                                                                    semyear = Convert.ToString(ddl_semrcpt.SelectedItem.Value);
                                                                }
                                                                int rows = 0;
                                                                selectQuery = "";
                                                                List<string> lstgrpHeaderValu = new List<string>();
                                                                List<string> lstgrpHeaderName = new List<string>();

                                                                lstgrpHeaderValu = GetSelectedItemsValueList(cbl_grpheader);
                                                                lstgrpHeaderName = GetSelectedItemsTextList(cbl_grpheader);
                                                                #region To Count Rows
                                                                for (int j = 0; j < lstgrpHeaderValu.Count; j++)
                                                                {
                                                                    string BalNOT0 = string.Empty;
                                                                    #region Load Ledgers
                                                                    string headercode = "";

                                                                    headercode = Convert.ToString(lstgrpHeaderValu[j]);

                                                                    selectQuery = " SELECT isnull(sum(BalAmount),0) as BalAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0  and isnull(istransfer,'0')='0'";
                                                                    if (rbl_headerselect.SelectedIndex == 0)
                                                                    {
                                                                        //Group Header
                                                                        selectQuery = " SELECT isnull(sum(BalAmount),0) as BalAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')   and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0  and isnull(istransfer,'0')='0'";
                                                                        if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                                        {
                                                                            selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                                        }

                                                                        if (lbltype.Text != "")
                                                                        {
                                                                            selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                                        }

                                                                    }
                                                                    else if (rbl_headerselect.SelectedIndex == 1)
                                                                    {
                                                                        //Header
                                                                        selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                                    }
                                                                    else
                                                                    {
                                                                        //Ledger
                                                                        selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                                    }


                                                                    if (selectQuery.Trim() != "")
                                                                    {
                                                                        BalNOT0 = d2.GetFunction(selectQuery);
                                                                        double balChk = 0;
                                                                        double.TryParse(BalNOT0, out balChk);
                                                                        if (balChk > 0)
                                                                        {
                                                                            rows++;
                                                                        }
                                                                    }
                                                                    #endregion

                                                                }

                                                                #endregion

                                                                int sno = 0;
                                                                int indx = 0;
                                                                double totalamt = 0;
                                                                double balanamt = 0;
                                                                double curpaid = 0;
                                                                double paidamount = 0;

                                                                #region Insert Process New

                                                                //For Every Selected Headers

                                                                for (int j = 0; j < lstgrpHeaderValu.Count; j++)
                                                                {
                                                                    string disphdr = string.Empty;
                                                                    double allotamt0 = 0;
                                                                    double deductAmt0 = 0;
                                                                    double totalAmt0 = 0;
                                                                    double paidAmt0 = 0;
                                                                    double balAmt0 = 0;
                                                                    double creditAmt0 = 0;
                                                                    double alreadyPaid = 0;

                                                                    #region Load Ledgers

                                                                    string headercode = "";
                                                                    disphdr = Convert.ToString(lstgrpHeaderName[j]);
                                                                    headercode = Convert.ToString(lstgrpHeaderValu[j]);

                                                                    selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0) as   DeductAmount,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount, isnull(BalAmount,0) as BalAmount,TextVal,TextCode FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0  and isnull(istransfer,'0')='0'";

                                                                    if (rbl_headerselect.SelectedIndex == 0)
                                                                    {
                                                                        //Group Header
                                                                        selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)   as DeductAmount ,isnull(TotalAmount,0)   as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount,TextVal,TextCode,ChlGroupHeader FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0  and isnull(istransfer,'0')='0'";
                                                                        if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                                        {
                                                                            selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                                        }

                                                                        if (lbltype.Text != "")
                                                                        {
                                                                            selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                                        }

                                                                    }
                                                                    else if (rbl_headerselect.SelectedIndex == 1)
                                                                    {
                                                                        //Header
                                                                        selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                                    }
                                                                    else
                                                                    {
                                                                        //Ledger
                                                                        selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                                    }

                                                                    selectQuery += "  order by case when priority is null then 1 else 0 end, priority ";

                                                                    #endregion

                                                                    DataSet dsLedgers = new DataSet();
                                                                    dsLedgers = d2.select_method_wo_parameter(selectQuery, "Text");
                                                                    if (dsLedgers.Tables.Count > 0 && dsLedgers.Tables[0].Rows.Count > 0)
                                                                    {
                                                                        for (int lgri = 0; lgri < dsLedgers.Tables[0].Rows.Count; lgri++)
                                                                        {
                                                                            string feecat1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["TextCode"]);
                                                                            string headerfk1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["HeaderFK"]);
                                                                            string ledgerfk1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["LedgerFK"]);
                                                                            double feeamt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["FeeAmount"]);
                                                                            double deductAmt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["DeductAmount"]);
                                                                            double totalamt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["TotalAmount"]);
                                                                            double paidAmt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["PaidAmount"]);
                                                                            double balAmt1 = totalamt1 - paidAmt1;
                                                                            double creditAmt1 = balAmt1;
                                                                            alreadyPaid += paidAmt1;
                                                                            creditAmt0 += creditAmt1;
                                                                            totalAmt0 += totalamt1;
                                                                            balAmt0 += balAmt1 - creditAmt1;
                                                                            paidAmt0 += creditAmt1;
                                                                            deductAmt0 += deductAmt1;

                                                                            #region Ledger Insert Update

                                                                            if (creditAmt1 > 0)
                                                                            {
                                                                                string iscollected = "0";
                                                                                string collecteddate = "";
                                                                                if (PayMode == "1" || PayMode == "6" || PayMode == "7")
                                                                                {
                                                                                    iscollected = "1";
                                                                                    collecteddate = (dtrcpt).ToString();
                                                                                }
                                                                                //else if (PayMode == "2")
                                                                                //{
                                                                                //    iscollected = AutoClearCheck();
                                                                                //    collecteddate = (dtrcpt).ToString();
                                                                                //}
                                                                                //else if (PayMode == "3")
                                                                                //{
                                                                                //    iscollected = isCollectedForDD();
                                                                                //    collecteddate = (dtrcpt).ToString();
                                                                                //}
                                                                                string insertDebit = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate) VALUES('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "','" + receiptno + "', " + memtype + ", " + appnoNew + ", " + ledgerfk1 + ", " + headerfk1 + ", " + feecat1 + ", 0, " + creditAmt1 + ", " + PayMode + ", '" + checkDDno + "', '" + dtchkdd + "', '" + newbankcode + "','" + branch + "', 1, '0', 0, '" + txt_remark.Text.Trim() + "', '0', '0', '0', 0, " + usercode + ", " + finYearid + ",'" + rcptType + "','" + iscollected + "','" + collecteddate + "','" + iscollected + "','" + collecteddate + "')";

                                                                                d2.update_method_wo_parameter(insertDebit, "Text");
                                                                                //Update process

                                                                                string selectquery = " select  isnull(TotalAmount,0) as TotalAmount,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount  from FT_FeeAllot where App_No =" + appnoNew + " and feecategory ='" + feecat1 + "' and ledgerfk ='" + ledgerfk1 + "' and isnull(istransfer,'0')='0'";

                                                                                DataSet dsPrevAMount = new DataSet();
                                                                                dsPrevAMount = d2.select_method_wo_parameter(selectquery, "Text");
                                                                                if (dsPrevAMount.Tables.Count > 0)
                                                                                {
                                                                                    if (dsPrevAMount.Tables[0].Rows.Count > 0)
                                                                                    {
                                                                                        double total = 0;
                                                                                        double paidamt = 0;
                                                                                        double balamt = 0;

                                                                                        total = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["TotalAmount"]);

                                                                                        if (total > 0)
                                                                                        {
                                                                                            paidamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["PaidAmount"]);
                                                                                            balamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["BalAmount"]);

                                                                                            balamt = (total - paidamt);

                                                                                            string updatequery = "update FT_FeeAllot set PaidAmount=isnull(PaidAmount,0) +" + creditAmt1 + " ,BalAmount =" + (balamt - creditAmt1) + "  where App_No =" + appnoNew + " and feecategory ='" + feecat1 + "' and ledgerfk ='" + ledgerfk1 + "' and isnull(istransfer,'0')='0'";
                                                                                            d2.update_method_wo_parameter(updatequery, "Text");

                                                                                            InsertUpdateOK = true;
                                                                                        }

                                                                                    }
                                                                                }
                                                                            }

                                                                            #endregion

                                                                        }
                                                                    }

                                                                    if (creditAmt0 > 0)
                                                                    {
                                                                        sno++;

                                                                        totalamt += Convert.ToDouble(totalAmt0);
                                                                        balanamt += Convert.ToDouble(balAmt0);
                                                                        curpaid += Convert.ToDouble(paidAmt0);

                                                                        deductionamt += Convert.ToDouble(deductAmt0);

                                                                        indx++;
                                                                        createPDFOK = true;

                                                                        //   sbHtml.Append("<tr><td style='width:480px;'>" + disphdr + "</td><td style='width:60px;text-align:right;'>" + creditAmt0 + "</td><td style='width:40px;'></td></tr>");
                                                                        sbHtml.Append("<tr><td style='width: 410px; padding-left: 25px;'>" + disphdr + "</td><td style='width: 110px; text-align: right;'>" + creditAmt0 + "</td><td style='text-align:right;'></td></tr>");
                                                                    }

                                                                }
                                                                #endregion
                                                                if (BalanceType == 1)
                                                                {
                                                                    balanamt = retBalance(appnoNew);
                                                                }
                                                                sbHtml.Append("</table></div>");

                                                                #region ddNarration
                                                                string ddnar = string.Empty;
                                                                //double modeht = 40;
                                                                if (narration != 0)
                                                                {
                                                                    if (!rb_cash.Checked)
                                                                    {
                                                                        if (rb_dd.Checked == true)
                                                                        {
                                                                            ddnar = ddnar + " DDNo : " + checkDDno + " Bank : " + newbankname + " Branch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                        }
                                                                        else if (rb_cheque.Checked)
                                                                        {
                                                                            ddnar = ddnar + " ChequeNo : " + checkDDno + " Bank : " + newbankname + " Branch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                        }
                                                                        else if (rb_card.Checked)
                                                                        {
                                                                            ddnar = ddnar + " Card : " + newbankname;
                                                                        }
                                                                    }
                                                                    ddnar += " " + txt_remark.Text.Trim();
                                                                }
                                                                #endregion

                                                                //Mode of Pay
                                                                sbHtml.Append("<table style='height: 50px;'><tr><td style='width: 300px;' class='classBold10'>" + mode.ToUpper() + ddnar + "</td><td style='width: 220px; padding-left: 52px;' class='classBold10'><br>" + balanamt + "</td></tr></table>");

                                                                double totalamount = curpaid;

                                                                sbHtml.Append("<table style='width: 560px; padding-left: 10px; padding-top: 25px;' class='classBold10'><tr><td style='width:410px;'></td><td style='width: 110px; text-align: right;'>" + totalamount + "</td><td style=''></td></tr></table>");

                                                                sbHtml.Append("<br/><table style='width: 520px; padding-left: 2px;' class='classBold10'><tr><td><span style='padding-left: 5px;'> Received Rupees " + DecimalToWords((decimal)totalamount) + " Only.</span></td><td colspan='2'></td></tr></table>");
                                                                // sbHtml.Append("<table style='width:350px; height:20px;padding-left:10px;' class='classBold10'><tr><td>" + mode.ToUpper() + ddnar + "</td></tr>");
                                                                //  sbHtml.Append("<table style='width:580px; height:20px;padding-left:330px;' class='classBold10'><tr><td>" + balanamt + "</td></tr></table>");

                                                                // double totalamount = curpaid;

                                                                //sbHtml.Append("<table style='width:580px; height:28px;padding-left:2px;' class='classBold10'><tr><td style='width:490px;'></td><td style='width:60px;text-align:right;'>" + totalamount + "</td><td style='width:30px;'></td></tr><tr><td>Received Rupees " + DecimalToWords((decimal)totalamount) + " Only.</td><td colspan='2'></td></tr></table>");

                                                                sbHtml.Append("</td></tr></table></div>");

                                                                #endregion

                                                                contentDiv.InnerHtml += sbHtml.ToString();
                                                            }
                                                        }
                                                        #endregion
                                                    }
                                                    else if (save1 == 10)
                                                    {
                                                        //For Christopher
                                                        #region Print option for Receipt
                                                        #region Settings Input
                                                        //Header Div Values
                                                        byte collegeid = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeName"]);
                                                        byte address1 = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeAdd1"]);
                                                        byte address2 = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeAdd2"]);
                                                        byte address3 = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeAdd3"]);
                                                        byte city = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeDist"]);
                                                        byte state = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeState"]);

                                                        byte university = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsCollegeUniversity"]);
                                                        byte rightLogo = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsRightLogo"]);
                                                        byte leftLogo = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsLeftLogo"]);
                                                        byte time;
                                                        if (Convert.ToBoolean(Convert.ToString(dsPri.Tables[0].Rows[0]["IsTime"])))
                                                        {
                                                            time = 1;
                                                        }
                                                        else
                                                        {
                                                            time = 0;
                                                        }
                                                        byte degACR = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsDegreeAcr"]);
                                                        byte degNam = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsDegreeName"]);
                                                        byte studnam = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsStudName"]);
                                                        byte year = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsYear"]);
                                                        byte semester = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsSemester"]);
                                                        byte regno = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsRegNo"]);
                                                        byte rolno = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsRollNo"]);
                                                        byte admno = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsAdminNo"]);

                                                        byte fathername = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsFatherName"]);
                                                        byte seattype = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsSeatType"]);
                                                        //byte setRollAsAdmin = Convert.ToByte(dsPri.Tables[0].Rows[0]["rollas_adm"]);
                                                        byte boarding = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsBoarding"]);
                                                        byte mothername = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsMontherName"]);
                                                        string recptValid = Convert.ToString(dsPri.Tables[0].Rows[0]["ValidDate"]);


                                                        //Body Div Values
                                                        //byte showAllFees = Convert.ToByte(dsPri.Tables[0].Rows[0]["showallfee"]);
                                                        byte allotedAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsAllotedAmt"]);
                                                        byte fineAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsFineAmt"]);
                                                        byte balAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsBalanceAmt"]);
                                                        byte semOrYear = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsSemYear"]);
                                                        byte prevPaidAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsPrevPaid"]);
                                                        byte excessAmt = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsExcessAmt"]);
                                                        // byte totDetails = Convert.ToByte(dsPri.Tables[0].Rows[0]["Total_Details"]);
                                                        byte fineInRow = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsFineinRow"]);
                                                        //byte totWTselectCol = Convert.ToByte(dsPri.Tables[0].Rows[0]["TotalSelCol"]);
                                                        byte concession = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsConcession"]);
                                                        string concessionValue = string.Empty;
                                                        if (concession != 0)
                                                        {
                                                            concessionValue = Convert.ToString(dsPri.Tables[0].Rows[0]["ConcessionName"]);
                                                        }


                                                        //Footer Div Values

                                                        byte studCopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsStudCopy"]);
                                                        byte officopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                        byte transCopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsTransportCopy"]);
                                                        byte narration = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsNarration"]);
                                                        byte deduction = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsTotConcession"]);
                                                        byte forclgName = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsForCollegeName"]);
                                                        byte authSign = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsAuthSign"]);
                                                        byte validDate = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsValidUpto"]);
                                                        string authSignValue = string.Empty;
                                                        if (authSign != 0)
                                                        {
                                                            authSignValue = Convert.ToString(dsPri.Tables[0].Rows[0]["AuthName"]);

                                                        }

                                                        byte studOffiCopy = Convert.ToByte(dsPri.Tables[0].Rows[0]["PageType"]);
                                                        // byte dispModeWTcash = Convert.ToByte(dsPri.Tables[0].Rows[0]["DisModeWithCash"]);
                                                        byte signFile = Convert.ToByte(dsPri.Tables[0].Rows[0]["cashier_sign"]);

                                                        //if (signFile != 0)
                                                        //{
                                                        //if (FileUpload1.HasFile)
                                                        //{

                                                        //}                                                    
                                                        //}
                                                        Fontboldhead = new Font("Arial", 10, FontStyle.Bold);
                                                        FontTableHead = new Font("Arial", 9, FontStyle.Bold);
                                                        FontTable = new Font("Arial", 9, FontStyle.Regular);
                                                        tamilFont = new Font("AMUDHAM.TTF", 10, FontStyle.Regular);

                                                        #endregion

                                                        #region Students Input
                                                        string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,ISNULL(type,'') as type from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + "";
                                                        string collegename = "";
                                                        string add1 = "";
                                                        string add2 = "";
                                                        string add3 = "";
                                                        string univ = "";
                                                        string deg = "";
                                                        string cursem = "";
                                                        string batyr = "";
                                                        string seatty = "";
                                                        string board = "";
                                                        string mothe = "";
                                                        string fathe = "";
                                                        string stream = "";
                                                        double deductionamt = 0;
                                                        ds.Clear();
                                                        ds = d2.select_method_wo_parameter(colquery, "Text");
                                                        if (ds.Tables.Count > 0)
                                                        {
                                                            if (ds.Tables[0].Rows.Count > 0)
                                                            {
                                                                collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                            }
                                                            if (ds.Tables[1].Rows.Count > 0)
                                                            {
                                                                if (degACR == 0)
                                                                {
                                                                    deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                }
                                                                else
                                                                {
                                                                    deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                }
                                                                cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                stream = Convert.ToString(ds.Tables[1].Rows[0]["type"]);
                                                            }
                                                        }
                                                        #endregion


                                                        #region Table 2
                                                        //Table2 Format

                                                        int rows = 1;

                                                        string semyear = "";
                                                        if (ddl_semrcpt.Items.Count > 0)
                                                        {
                                                            semyear = Convert.ToString(ddl_semrcpt.SelectedItem.Value);
                                                        }
                                                        selectQuery = "";
                                                        List<string> lstgrpHeaderValu = new List<string>();
                                                        List<string> lstgrpHeaderName = new List<string>();

                                                        lstgrpHeaderValu = GetSelectedItemsValueList(cbl_grpheader);
                                                        lstgrpHeaderName = GetSelectedItemsTextList(cbl_grpheader);

                                                        #region To Count Rows
                                                        ArrayList alHeaders = new ArrayList();
                                                        for (int j = 0; j < lstgrpHeaderValu.Count; j++)
                                                        {
                                                            string BalNOT0 = string.Empty;
                                                            #region Load Ledgers
                                                            string headercode = "";

                                                            headercode = Convert.ToString(lstgrpHeaderValu[j]);

                                                            //selectQuery = " SELECT isnull(sum(BalAmount),0) as BalAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "   and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0  ";

                                                            //if (rbl_headerselect.SelectedIndex == 0)
                                                            //{
                                                            //    //Group Header
                                                            //    selectQuery = " SELECT isnull(sum(BalAmount),0) as BalAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')   and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0  ";
                                                            //    if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                            //    {
                                                            //        selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                            //    }

                                                            //    if (lbltype.Text != "")
                                                            //    {
                                                            //        selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                            //    }

                                                            //}
                                                            //else if (rbl_headerselect.SelectedIndex == 1)
                                                            //{
                                                            //    //Header
                                                            //    selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                            //}
                                                            //else
                                                            //{
                                                            //    //Ledger
                                                            //    selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                            //}


                                                            //if (selectQuery.Trim() != "")
                                                            //{
                                                            //    BalNOT0 = d2.GetFunction(selectQuery);
                                                            //    double balChk = 0;
                                                            //    double.TryParse(BalNOT0, out balChk);
                                                            //    if (balChk > 0)
                                                            //    {
                                                            //        rows++;
                                                            //    }
                                                            //}

                                                            selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0) as   DeductAmount,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount, isnull(BalAmount,0) as BalAmount,TextVal,TextCode FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";

                                                            if (rbl_headerselect.SelectedIndex == 0)
                                                            {
                                                                //Group Header
                                                                selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)   as DeductAmount ,isnull(TotalAmount,0)   as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount,TextVal,TextCode,ChlGroupHeader FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";
                                                                if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                                {
                                                                    selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                                }

                                                                if (lbltype.Text != "")
                                                                {
                                                                    selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                                }

                                                            }
                                                            else if (rbl_headerselect.SelectedIndex == 1)
                                                            {
                                                                //Header
                                                                selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                            }
                                                            else
                                                            {
                                                                //Ledger
                                                                selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                            }

                                                            selectQuery += "  order by case when priority is null then 1 else 0 end, priority ";
                                                            if (selectQuery.Trim() != "")
                                                            {
                                                                //BalNOT0 = d2.GetFunction(selectQuery);
                                                                //double balChk = 0;
                                                                //double.TryParse(BalNOT0, out balChk);
                                                                //if (balChk > 0)
                                                                //{
                                                                //    rows++;
                                                                //}
                                                                DataSet dsRows = new DataSet();
                                                                dsRows = d2.select_method_wo_parameter(selectQuery, "Text");
                                                                if (dsRows.Tables.Count > 0 && dsRows.Tables[0].Rows.Count > 0)
                                                                {
                                                                    rows += dsRows.Tables[0].Rows.Count;
                                                                    for (int hdrList = 0; hdrList < dsRows.Tables[0].Rows.Count; hdrList++)
                                                                    {
                                                                        if (!alHeaders.Contains(Convert.ToString(dsRows.Tables[0].Rows[hdrList]["Headername"])))
                                                                        {
                                                                            alHeaders.Add(Convert.ToString(dsRows.Tables[0].Rows[hdrList]["Headername"]));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            #endregion

                                                        }

                                                        #endregion

                                                        int rectHeight = 380;

                                                        int curY = 10;
                                                        int curX = 30;

                                                        #region Receipt Header

                                                        //Rectangle Border
                                                        PdfArea rectArea = new PdfArea(recptDoc, 10, curY, 570, rectHeight);
                                                        PdfRectangle rectSpace = new PdfRectangle(recptDoc, rectArea, Color.Black);
                                                        rcptpage.Add(rectSpace);

                                                        PdfArea rectAreaOff = new PdfArea(recptDoc, 10, curY + 430, 570, rectHeight);
                                                        PdfRectangle rectSpaceOff = new PdfRectangle(recptDoc, rectAreaOff, Color.Black);
                                                        //Header Images
                                                        //Line1
                                                        PdfImage LogoImageOff;
                                                        int lefty = 0;
                                                        if (leftLogo != 0)
                                                        {
                                                            if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg")))
                                                            {
                                                                PdfImage LogoImage = recptDoc.NewImage(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg"));
                                                                rcptpage.Add(LogoImage, curX, curY + 5, 600);
                                                                lefty = curY + 5 + 430;

                                                            }
                                                        }

                                                        if (collegeid != 0)
                                                        {
                                                            curX = 120;
                                                            PdfTextArea clgText = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX, curY, 350, 20), ContentAlignment.MiddleCenter, collegename);
                                                            rcptpage.Add(clgText);

                                                        }
                                                        PdfTextArea clgOffText = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX, curY + 430, 350, 20), ContentAlignment.MiddleCenter, collegename);

                                                        PdfImage LogoImageOff1;
                                                        int righty = 0;
                                                        if (rightLogo != 0)
                                                        {
                                                            if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg")))
                                                            {
                                                                curX = 500;
                                                                PdfImage LogoImage1 = recptDoc.NewImage(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg"));
                                                                rcptpage.Add(LogoImage1, curX, curY + 5, 600);
                                                                righty = curY + 5 + 430;
                                                            }
                                                        }

                                                        //Line2
                                                        curY += 15;
                                                        if (address1 != 0 || address2 != 0)
                                                        {
                                                            curX = 120;

                                                            if (address2 != 0)
                                                            {
                                                                add1 += " " + add2;
                                                            }
                                                            PdfTextArea addText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY, 350, 20), ContentAlignment.MiddleCenter, add1);
                                                            rcptpage.Add(addText);

                                                        }
                                                        PdfTextArea addOffText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY + 430, 350, 20), ContentAlignment.MiddleCenter, add1);

                                                        //curY += 20;
                                                        //if (university != 0)
                                                        //{

                                                        //    curX = 120;
                                                        //    PdfTextArea uniText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY, 350, 20), ContentAlignment.MiddleCenter, univ);
                                                        //    rcptpage.Add(uniText);

                                                        //}
                                                        //PdfTextArea uniOffText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY + 430, 350, 20), ContentAlignment.MiddleCenter, univ);

                                                        //Line3

                                                        //Line4
                                                        curY += 8;
                                                        //if (address3 != 0)
                                                        //{

                                                        //    curX = 120;

                                                        //    PdfTextArea cityText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY, 350, 20), ContentAlignment.MiddleCenter, add3);
                                                        //    rcptpage.Add(cityText);

                                                        //}
                                                        //PdfTextArea cityOffText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY + 430, 350, 20), ContentAlignment.MiddleCenter, add3);
                                                        PdfTextArea headingText = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX - 50, curY, 450, 30), ContentAlignment.MiddleCenter, "FEE RECEIPT ");
                                                        rcptpage.Add(headingText);

                                                        //curX = 280;
                                                        curY += 12;
                                                        //Text Area For Receipt
                                                        PdfTextArea headingText1 = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX - 50, curY, 450, 30), ContentAlignment.MiddleCenter, recptHeaderAl(alHeaders));
                                                        rcptpage.Add(headingText1);

                                                        PdfTextArea headingOffText = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX - 50, curY + 418, 450, 30), ContentAlignment.MiddleCenter, "FEE RECEIPT ");

                                                        PdfTextArea headingOffText1 = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX - 50, curY + 430, 450, 30), ContentAlignment.MiddleCenter, recptHeaderAl(alHeaders));


                                                        curY += 15;

                                                        #endregion

                                                        #region Table 1
                                                        //Table1 Format 
                                                        PdfTable tableparts = recptDoc.NewTable(FontTableHead, 2, 3, 5);
                                                        tableparts.VisibleHeaders = false;
                                                        tableparts.SetBorders(Color.Black, 1, BorderType.CompleteGrid);

                                                        if (regno != 0)
                                                        {
                                                            tableparts.Cell(0, 0).SetContent("RegNo : " + Regno);
                                                            tableparts.Cell(0, 0).SetFont(FontTableHead);
                                                            tableparts.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        }

                                                        if (rolno != 0)
                                                        {
                                                            tableparts.Cell(0, 0).SetContent("RollNo : " + rollno);
                                                            tableparts.Cell(0, 0).SetFont(FontTableHead);
                                                            tableparts.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        }

                                                        if (admno != 0)
                                                        {
                                                            tableparts.Cell(0, 0).SetContent("AdmissionNo : " + app_formno);
                                                            tableparts.Cell(0, 0).SetFont(FontTableHead);
                                                            tableparts.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        }

                                                        tableparts.Cell(0, 1).SetContent("Programme : " + deg);
                                                        tableparts.Cell(0, 1).SetFont(FontTableHead);
                                                        tableparts.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                        tableparts.Cell(0, 2).SetContent(termDisplay(cursem));
                                                        tableparts.Cell(0, 2).SetFont(FontTableHead);
                                                        tableparts.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                        tableparts.Cell(1, 0).SetContent("Name : " + studname.ToUpper());
                                                        tableparts.Cell(1, 0).SetFont(FontTableHead);
                                                        tableparts.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                        tableparts.Cell(1, 1).SetContent("Receipt No : " + recptNo);
                                                        tableparts.Cell(1, 1).SetFont(FontTableHead);
                                                        tableparts.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                        tableparts.Cell(1, 2).SetContent("Date : " + recptDt);
                                                        tableparts.Cell(1, 2).SetFont(FontTableHead);
                                                        tableparts.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                        //Off
                                                        PdfTable tablepartsOff = recptDoc.NewTable(FontTableHead, 2, 3, 5);
                                                        tablepartsOff.VisibleHeaders = false;
                                                        tablepartsOff.SetBorders(Color.Black, 1, BorderType.CompleteGrid);

                                                        if (regno != 0)
                                                        {
                                                            tablepartsOff.Cell(0, 0).SetContent("RegNo : " + Regno);
                                                            tablepartsOff.Cell(0, 0).SetFont(FontTableHead);
                                                            tablepartsOff.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        }

                                                        if (rolno != 0)
                                                        {
                                                            tablepartsOff.Cell(0, 0).SetContent("RollNo : " + rollno);
                                                            tablepartsOff.Cell(0, 0).SetFont(FontTableHead);
                                                            tablepartsOff.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        }

                                                        if (admno != 0)
                                                        {
                                                            tablepartsOff.Cell(0, 0).SetContent("AdmissionNo : " + app_formno);
                                                            tablepartsOff.Cell(0, 0).SetFont(FontTableHead);
                                                            tablepartsOff.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        }

                                                        tablepartsOff.Cell(0, 1).SetContent("Programme : " + deg);
                                                        tablepartsOff.Cell(0, 1).SetFont(FontTableHead);
                                                        tablepartsOff.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                        tablepartsOff.Cell(0, 2).SetContent(termDisplay(cursem));
                                                        tablepartsOff.Cell(0, 2).SetFont(FontTableHead);
                                                        tablepartsOff.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                        tablepartsOff.Cell(1, 0).SetContent("Name : " + studname.ToUpper());
                                                        tablepartsOff.Cell(1, 0).SetFont(FontTableHead);
                                                        tablepartsOff.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                        tablepartsOff.Cell(1, 1).SetContent("Receipt No : " + recptNo);
                                                        tablepartsOff.Cell(1, 1).SetFont(FontTableHead);
                                                        tablepartsOff.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                        tablepartsOff.Cell(1, 2).SetContent("Date : " + recptDt);
                                                        tablepartsOff.Cell(1, 2).SetFont(FontTableHead);
                                                        tablepartsOff.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                        curX = 10;
                                                        curY += 10;
                                                        PdfTablePage addtabletopage1 = tableparts.CreateTablePage(new PdfArea(recptDoc, curX, curY, 570, 200));
                                                        rcptpage.Add(addtabletopage1);

                                                        PdfTablePage addtabletopageOff1 = tablepartsOff.CreateTablePage(new PdfArea(recptDoc, curX, curY + 430, 570, 200));

                                                        #endregion

                                                        int sno = 0;
                                                        int indx = 0;
                                                        double totalamt = 0;
                                                        double balanamt = 0;
                                                        double curpaid = 0;
                                                        double paidamount = 0;

                                                        int ledgeCol = 2;
                                                        int ledgeWidt = 570;

                                                        if (rows > 0)
                                                        {
                                                            ledgeCol = 2;
                                                            ledgeWidt = 570;
                                                            int wdth = ledgeWidt - 50;
                                                            ledgeWidt = wdth;
                                                        }
                                                        if (rows > 10)
                                                        {
                                                            ledgeCol += 2;
                                                            ledgeWidt = 570;
                                                            int wdth = ledgeWidt - 100;
                                                            ledgeWidt = (int)(wdth / 2);
                                                        }
                                                        if (rows > 20)
                                                        {
                                                            ledgeCol += 2;
                                                            ledgeWidt = 570;
                                                            int wdth = ledgeWidt - 150;
                                                            ledgeWidt = (int)(wdth / 3);
                                                        }
                                                        if (rows > 30)
                                                        {
                                                            ledgeCol += 2;
                                                            ledgeWidt = 570;
                                                            int wdth = ledgeWidt - 200;
                                                            ledgeWidt = (int)(wdth / 4);
                                                        }
                                                        PdfTable tableparts1 = recptDoc.NewTable(FontTable, rows, ledgeCol, 5);
                                                        tableparts1.VisibleHeaders = false;
                                                        tableparts1.SetBorders(Color.Black, 1, BorderType.Columns);
                                                        for (int colval = 0; colval < tableparts1.Columns.Length; colval++)
                                                        {
                                                            if (colval % 2 == 1)
                                                            {
                                                                tableparts1.Columns[colval].SetWidth(50);
                                                            }
                                                            else
                                                            {
                                                                tableparts1.Columns[colval].SetWidth(ledgeWidt);
                                                            }
                                                        }


                                                        PdfTable tablepartsOff1 = recptDoc.NewTable(FontTable, rows, ledgeCol, 5);
                                                        tablepartsOff1.VisibleHeaders = false;
                                                        tablepartsOff1.SetBorders(Color.Black, 1, BorderType.Columns);
                                                        for (int colval = 0; colval < tablepartsOff1.Columns.Length; colval++)
                                                        {
                                                            if (colval % 2 == 1)
                                                            {
                                                                tablepartsOff1.Columns[colval].SetWidth(50);
                                                            }
                                                            else
                                                            {
                                                                tablepartsOff1.Columns[colval].SetWidth(ledgeWidt);
                                                            }
                                                        }

                                                        int initLegCol = 0;
                                                        int initValCol = 1;
                                                        int initRow = 0;

                                                        #region Insert Process New

                                                        //For Every Selected Headers

                                                        for (int j = 0; j < lstgrpHeaderValu.Count; j++)
                                                        {
                                                            string disphdr = string.Empty;
                                                            double allotamt0 = 0;
                                                            double deductAmt0 = 0;
                                                            double totalAmt0 = 0;
                                                            double paidAmt0 = 0;
                                                            double balAmt0 = 0;
                                                            double creditAmt0 = 0;
                                                            double alreadyPaid = 0;
                                                            #region Load Ledgers

                                                            string headercode = "";
                                                            disphdr = Convert.ToString(lstgrpHeaderName[j]);
                                                            headercode = Convert.ToString(lstgrpHeaderValu[j]);

                                                            selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0) as   DeductAmount,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount, isnull(BalAmount,0) as BalAmount,TextVal,TextCode FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and l.LedgerMode=0  and T.TextCode in('" + semyear + "') AND A.App_No = " + appnoNew + "  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";

                                                            if (rbl_headerselect.SelectedIndex == 0)
                                                            {
                                                                //Group Header
                                                                selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)   as DeductAmount ,isnull(TotalAmount,0)   as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount,TextVal,TextCode,ChlGroupHeader FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L,TextValTable T WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK AND A.FeeCategory = T.TextCode and h.headerpk = s.headerfk  and l.LedgerMode=0   and ChlGroupHeader in('" + headercode + "') and T.TextCode in('" + semyear + "')  and (isnull(TOtalAmount,0)-isnull(paidamount,0))>0 and isnull(istransfer,'0')='0' ";
                                                                if (rdo_receipt.Checked || rdo_sngle.Checked)
                                                                {
                                                                    selectQuery += " AND A.App_No = " + appnoNew + " ";
                                                                }

                                                                if (lbltype.Text != "")
                                                                {
                                                                    selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                                                                }

                                                            }
                                                            else if (rbl_headerselect.SelectedIndex == 1)
                                                            {
                                                                //Header
                                                                selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                                                            }
                                                            else
                                                            {
                                                                //Ledger
                                                                selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                                                            }

                                                            selectQuery += "  order by case when priority is null then 1 else 0 end, priority ";
                                                            #endregion

                                                            DataSet dsLedgers = new DataSet();
                                                            dsLedgers = d2.select_method_wo_parameter(selectQuery, "Text");
                                                            if (dsLedgers.Tables.Count > 0)
                                                            {
                                                                if (dsLedgers.Tables[0].Rows.Count > 0)
                                                                {
                                                                    for (int lgri = 0; lgri < dsLedgers.Tables[0].Rows.Count; lgri++)
                                                                    {
                                                                        string feecat1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["TextCode"]);
                                                                        string headerfk1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["HeaderFK"]);
                                                                        string ledgerfk1 = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["LedgerFK"]);
                                                                        double feeamt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["FeeAmount"]);
                                                                        double deductAmt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["DeductAmount"]);
                                                                        double totalamt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["TotalAmount"]);
                                                                        double paidAmt1 = Convert.ToDouble(dsLedgers.Tables[0].Rows[lgri]["PaidAmount"]);
                                                                        double balAmt1 = totalamt1 - paidAmt1;
                                                                        double creditAmt1 = balAmt1;
                                                                        //alreadyPaid += paidAmt1;
                                                                        //creditAmt0 += creditAmt1;
                                                                        //totalAmt0 += totalamt1;
                                                                        //balAmt0 += balAmt1 - creditAmt1;
                                                                        //paidAmt0 += creditAmt1;
                                                                        //deductAmt0 += deductAmt1;
                                                                        alreadyPaid = paidAmt1;
                                                                        creditAmt0 = creditAmt1;
                                                                        totalAmt0 = totalamt1;
                                                                        balAmt0 = balAmt1 - creditAmt1;
                                                                        paidAmt0 = creditAmt1;
                                                                        deductAmt0 = deductAmt1;

                                                                        #region Ledger Insert Update

                                                                        if (creditAmt1 > 0)
                                                                        {
                                                                            string iscollected = "0";
                                                                            string collecteddate = "";
                                                                            if (PayMode == "1" || PayMode == "6" || PayMode == "7")
                                                                            {
                                                                                iscollected = "1";
                                                                                collecteddate = (dtrcpt).ToString();
                                                                            }
                                                                            //else if (PayMode == "2")
                                                                            //{
                                                                            //    iscollected = AutoClearCheck();
                                                                            //    collecteddate = (dtrcpt).ToString();
                                                                            //}
                                                                            //else if (PayMode == "3")
                                                                            //{
                                                                            //    iscollected = isCollectedForDD();
                                                                            //    collecteddate = (dtrcpt).ToString();
                                                                            //}
                                                                            string insertDebit = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate) VALUES('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "','" + receiptno + "', " + memtype + ", " + appnoNew + ", " + ledgerfk1 + ", " + headerfk1 + ", " + feecat1 + ", 0, " + creditAmt1 + ", " + PayMode + ", '" + checkDDno + "', '" + dtchkdd + "', '" + newbankcode + "','" + branch + "', 1, '0', 0, '" + txt_remark.Text.Trim() + "', '0', '0', '0', 0, " + usercode + ", " + finYearid + ",'" + rcptType + "','" + iscollected + "','" + collecteddate + "','" + iscollected + "','" + collecteddate + "')";

                                                                            d2.update_method_wo_parameter(insertDebit, "Text");



                                                                            //Update process

                                                                            string selectquery = " select  isnull(TotalAmount,0) as TotalAmount,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount  from FT_FeeAllot where App_No =" + appnoNew + " and feecategory ='" + feecat1 + "' and ledgerfk ='" + ledgerfk1 + "' and isnull(istransfer,'0')='0'";

                                                                            DataSet dsPrevAMount = new DataSet();
                                                                            dsPrevAMount = d2.select_method_wo_parameter(selectquery, "Text");
                                                                            if (dsPrevAMount.Tables.Count > 0)
                                                                            {
                                                                                if (dsPrevAMount.Tables[0].Rows.Count > 0)
                                                                                {
                                                                                    double total = 0;
                                                                                    double paidamt = 0;
                                                                                    double balamt = 0;

                                                                                    total = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["TotalAmount"]);

                                                                                    if (total > 0)
                                                                                    {
                                                                                        paidamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["PaidAmount"]);
                                                                                        balamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["BalAmount"]);

                                                                                        balamt = (total - paidamt);

                                                                                        string updatequery = "update FT_FeeAllot set PaidAmount=isnull(PaidAmount,0) +" + creditAmt1 + " ,BalAmount =" + (balamt - creditAmt1) + "  where App_No =" + appnoNew + " and feecategory ='" + feecat1 + "' and ledgerfk ='" + ledgerfk1 + "' and isnull(istransfer,'0')='0'";
                                                                                        d2.update_method_wo_parameter(updatequery, "Text");

                                                                                        InsertUpdateOK = true;
                                                                                    }

                                                                                }
                                                                            }



                                                                        #endregion


                                                                            if (creditAmt0 > 0)
                                                                            {
                                                                                disphdr = Convert.ToString(dsLedgers.Tables[0].Rows[lgri]["LedgerName"]);
                                                                                sno++;
                                                                                indx++;
                                                                                totalamt += Convert.ToDouble(totalAmt0);
                                                                                balanamt += Convert.ToDouble(balAmt0);
                                                                                curpaid += Convert.ToDouble(paidAmt0);

                                                                                deductionamt += Convert.ToDouble(deductAmt0);

                                                                                if (initRow == 10)
                                                                                {
                                                                                    initRow = 0;
                                                                                    initLegCol += 2;
                                                                                    initValCol += 2;
                                                                                }

                                                                                tableparts1.Cell(initRow, initLegCol).SetContent(sno + ") " + disphdr);
                                                                                tableparts1.Cell(initRow, initLegCol).SetFont(FontTable);
                                                                                tableparts1.Cell(initRow, initLegCol).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                                                tableparts1.Cell(initRow, initValCol).SetContent(returnIntegerPart(creditAmt0) + "." + returnDecimalPart(creditAmt0));
                                                                                tableparts1.Cell(initRow, initValCol).SetFont(FontTable);
                                                                                tableparts1.Cell(initRow, initValCol).SetContentAlignment(ContentAlignment.MiddleRight);

                                                                                tablepartsOff1.Cell(initRow, initLegCol).SetContent(sno + ") " + disphdr);
                                                                                tablepartsOff1.Cell(initRow, initLegCol).SetFont(FontTable);
                                                                                tablepartsOff1.Cell(initRow, initLegCol).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                                                tablepartsOff1.Cell(initRow, initValCol).SetContent(returnIntegerPart(creditAmt0) + "." + returnDecimalPart(creditAmt0));
                                                                                tablepartsOff1.Cell(initRow, initValCol).SetFont(FontTable);
                                                                                tablepartsOff1.Cell(initRow, initValCol).SetContentAlignment(ContentAlignment.MiddleRight);

                                                                                initRow++;

                                                                                createPDFOK = true;
                                                                            }

                                                                        }

                                                                    }
                                                                }

                                                                //if (creditAmt0 > 0)
                                                                //{
                                                                //    sno++;
                                                                //    indx++;
                                                                //    totalamt += Convert.ToDouble(totalAmt0);
                                                                //    balanamt += Convert.ToDouble(balAmt0);
                                                                //    curpaid += Convert.ToDouble(paidAmt0);

                                                                //    deductionamt += Convert.ToDouble(deductAmt0);

                                                                //    if (initRow == 10)
                                                                //    {
                                                                //        initRow = 0;
                                                                //        initLegCol += 2;
                                                                //        initValCol += 2;
                                                                //    }

                                                                //    tableparts1.Cell(initRow, initLegCol).SetContent(sno + ") " + disphdr);
                                                                //    tableparts1.Cell(initRow, initLegCol).SetFont(FontTable);
                                                                //    tableparts1.Cell(initRow, initLegCol).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                                //    tableparts1.Cell(initRow, initValCol).SetContent(returnIntegerPart(creditAmt0) + "." + returnDecimalPart(creditAmt0));
                                                                //    tableparts1.Cell(initRow, initValCol).SetFont(FontTable);
                                                                //    tableparts1.Cell(initRow, initValCol).SetContentAlignment(ContentAlignment.MiddleRight);

                                                                //    tablepartsOff1.Cell(initRow, initLegCol).SetContent(sno + ") " + disphdr);
                                                                //    tablepartsOff1.Cell(initRow, initLegCol).SetFont(FontTable);
                                                                //    tablepartsOff1.Cell(initRow, initLegCol).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                                //    tablepartsOff1.Cell(initRow, initValCol).SetContent(returnIntegerPart(creditAmt0) + "." + returnDecimalPart(creditAmt0));
                                                                //    tablepartsOff1.Cell(initRow, initValCol).SetFont(FontTable);
                                                                //    tablepartsOff1.Cell(initRow, initValCol).SetContentAlignment(ContentAlignment.MiddleRight);

                                                                //    initRow++;

                                                                //    createPDFOK = true;
                                                                //}

                                                            }
                                                        #endregion


                                                        }
                                                        curY += (int)addtabletopage1.Area.Height;
                                                        PdfTablePage addtabletopage2 = tableparts1.CreateTablePage(new PdfArea(recptDoc, 10, curY, 570, 220));
                                                        rcptpage.Add(addtabletopage2);
                                                        PdfTablePage addtabletopageOff2 = tablepartsOff1.CreateTablePage(new PdfArea(recptDoc, 10, curY + 430, 570, 220));
                                                        #endregion

                                                        #region Table 3
                                                        PdfTable tableparts2 = recptDoc.NewTable(FontTableHead, 1, 6, 5);
                                                        tableparts2.VisibleHeaders = false;
                                                        tableparts2.SetBorders(Color.Black, 1, BorderType.CompleteGrid);

                                                        PdfTable tablepartsOff2 = recptDoc.NewTable(FontTableHead, 1, 6, 5);
                                                        tablepartsOff2.VisibleHeaders = false;
                                                        tablepartsOff2.SetBorders(Color.Black, 1, BorderType.CompleteGrid);


                                                        decimal totalamount = (decimal)curpaid;

                                                        tableparts2.Cell(0, 0).SetContent("Collected By :");
                                                        tableparts2.Cell(0, 0).SetFont(FontTableHead);
                                                        tableparts2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        tableparts2.Cell(0, 0).ColSpan = 2;

                                                        tableparts2.Cell(0, 2).SetContent("(" + DecimalToWords((decimal)curpaid) + " Rupees Only)");
                                                        tableparts2.Cell(0, 2).SetFont(FontTableHead);
                                                        tableparts2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        tableparts2.Cell(0, 2).ColSpan = 2;

                                                        tableparts2.Cell(0, 4).SetContent("Total Fees");
                                                        tableparts2.Cell(0, 4).SetFont(FontTableHead);
                                                        tableparts2.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleRight);

                                                        tableparts2.Cell(0, 5).SetContent(returnIntegerPart(curpaid) + "." + returnDecimalPart(curpaid));
                                                        tableparts2.Cell(0, 5).SetFont(FontTableHead);
                                                        tableparts2.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);

                                                        tablepartsOff2.Cell(0, 0).SetContent("Collected By :");
                                                        tablepartsOff2.Cell(0, 0).SetFont(FontTableHead);
                                                        tablepartsOff2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        tablepartsOff2.Cell(0, 0).ColSpan = 2;

                                                        tablepartsOff2.Cell(0, 2).SetContent("(" + DecimalToWords((decimal)curpaid) + " Rupees Only)");
                                                        tablepartsOff2.Cell(0, 2).SetFont(FontTableHead);
                                                        tablepartsOff2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                        tablepartsOff2.Cell(0, 2).ColSpan = 2;

                                                        tablepartsOff2.Cell(0, 4).SetContent("Total Fees");
                                                        tablepartsOff2.Cell(0, 4).SetFont(FontTableHead);
                                                        tablepartsOff2.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleRight);

                                                        tablepartsOff2.Cell(0, 5).SetContent(returnIntegerPart(curpaid) + "." + returnDecimalPart(curpaid));
                                                        tablepartsOff2.Cell(0, 5).SetFont(FontTableHead);
                                                        tablepartsOff2.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);

                                                        curY += (int)addtabletopage2.Area.Height;
                                                        PdfTablePage addtabletopage3 = tableparts2.CreateTablePage(new PdfArea(recptDoc, 10, curY, 570, 50));
                                                        rcptpage.Add(addtabletopage3);

                                                        PdfTablePage addtabletopageOff3 = tablepartsOff2.CreateTablePage(new PdfArea(recptDoc, 10, curY + 430, 570, 50));
                                                        #endregion

                                                        #region Receipt Footer
                                                        PdfPage rcptpageTran = rcptpage.CreateCopy();

                                                        curY += 24;

                                                        if (officopy != 0 && studOffiCopy != 0)
                                                        {
                                                            //visible Office copy
                                                            rcptpage.Add(rectSpaceOff);
                                                            if (leftLogo != 0)
                                                            {
                                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg")))
                                                                {
                                                                    LogoImageOff = recptDoc.NewImage(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg"));
                                                                    rcptpage.Add(LogoImageOff, 30, lefty, 600);
                                                                }
                                                            }

                                                            if (rightLogo != 0)
                                                            {
                                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg")))
                                                                {
                                                                    LogoImageOff1 = recptDoc.NewImage(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg"));
                                                                    rcptpage.Add(LogoImageOff1, 500, righty, 600);
                                                                }
                                                            }
                                                            if (collegeid != 0)
                                                            {
                                                                rcptpage.Add(clgOffText);
                                                            }
                                                            if (university != 0)
                                                            {
                                                                //rcptpage.Add(uniOffText);
                                                            }

                                                            if (address1 != 0 || address2 != 0)
                                                            {
                                                                rcptpage.Add(addOffText);
                                                            }

                                                            if (address3 != 0)
                                                            {
                                                                //rcptpage.Add(cityOffText);
                                                            }
                                                            rcptpage.Add(headingOffText);
                                                            rcptpage.Add(headingOffText1);
                                                            rcptpage.Add(addtabletopageOff1);
                                                            rcptpage.Add(addtabletopageOff2);
                                                            rcptpage.Add(addtabletopageOff3);

                                                            string copy = "Office Copy ";

                                                            PdfTextArea studCopyText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 50, curY + 430, 150, 20), ContentAlignment.MiddleCenter, copy);
                                                            rcptpage.Add(studCopyText);

                                                        }

                                                        if (studCopy != 0 || studOffiCopy == 1)
                                                        {

                                                            string copy = "Student Copy ";

                                                            PdfTextArea studCopyText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 50, curY, 150, 20), ContentAlignment.MiddleCenter, copy);
                                                            rcptpage.Add(studCopyText);

                                                            rcptpage.SaveToDocument();
                                                        }

                                                        if (transCopy != 0)
                                                        {
                                                            string copy = "Transport Copy ";

                                                            PdfTextArea studCopyText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 50, curY, 150, 20), ContentAlignment.MiddleCenter, copy);
                                                            rcptpageTran.Add(studCopyText);
                                                            rcptpageTran.SaveToDocument();
                                                        }
                                                        #endregion

                                                        #endregion
                                                    }
                                                    else if (save1 == 11)
                                                    {
                                                        try
                                                        {
                                                            FormatXISanAcademyChallanReceipt rcpt = new FormatXISanAcademyChallanReceipt();
                                                            contentDiv.InnerHtml += rcpt.generateMultiple(dsPri, collegecode1, appnoNew, section, ref  recptDoc, ref  rcptpage, recptNo, studname, recptDt, Regno, rollno, app_formno, rb_cash, rb_dd, rb_cheque, rb_card, checkDDno, newbankname, branch, txt_date1, txt_remark, mode, rbl_rollnoNew, ddl_semrcpt, cbl_grpheader, rbl_headerselect, lbltype, rdo_receipt, rdo_sngle, PayMode, dtrcpt, memtype, receiptno, dtchkdd, newbankcode, usercode, finYearid, rcptType, InsertUpdateOK, ref  createPDFOK, BalanceType, ref  overallCashAmt, course, txt_ddno, ddl_bkname, txt_chqno);
                                                        }
                                                        catch { imgAlert.Visible = true; }
                                                    }
                                                    else if (save1 == 13)
                                                    {
                                                        try
                                                        {
                                                            FormatXIIIVelammalSchoolReceiptChallan rcpt = new FormatXIIIVelammalSchoolReceiptChallan();
                                                            contentDiv.InnerHtml += rcpt.generateMultiple(dsPri, collegecode1, appnoNew, section, ref  recptDoc, ref  rcptpage, recptNo, studname, recptDt, Regno, rollno, app_formno, rb_cash, rb_dd, rb_cheque, rb_card, checkDDno, newbankname, branch, txt_date1, txt_remark, mode, rbl_rollnoNew, ddl_semrcpt, cbl_grpheader, rbl_headerselect, lbltype, rdo_receipt, rdo_sngle, PayMode, dtrcpt, memtype, receiptno, dtchkdd, newbankcode, usercode, finYearid, rcptType, InsertUpdateOK, ref  createPDFOK, BalanceType, ref  overallCashAmt, course, txt_ddno, ddl_bkname, txt_chqno, Roll_admit);
                                                        }
                                                        catch { imgAlert.Visible = true; }
                                                    }
                                                    else if (save1 == 14)
                                                    {
                                                        try
                                                        {
                                                            FormatIVPavaiChallanReceipt rcpt = new FormatIVPavaiChallanReceipt();
                                                            contentDiv.InnerHtml += rcpt.generateMultiple(dsPri, collegecode1, appnoNew, section, ref  recptDoc, ref  rcptpage, recptNo, studname, recptDt, Regno, rollno, app_formno, rb_cash, rb_dd, rb_cheque, rb_card, checkDDno, newbankname, branch, txt_date1, txt_remark, mode, rbl_rollnoNew, ddl_semrcpt, cbl_grpheader, rbl_headerselect, lbltype, rdo_receipt, rdo_sngle, PayMode, dtrcpt, memtype, receiptno, dtchkdd, newbankcode, usercode, finYearid, rcptType, InsertUpdateOK, ref  createPDFOK, BalanceType, ref  overallCashAmt, course, txt_ddno, ddl_bkname, txt_chqno, Roll_admit, rbl_rollno);
                                                        }
                                                        catch { imgAlert.Visible = true; }
                                                    }

                                                    #endregion

                                                    #region Update Receipt No
                                                    if (save1 != 5)
                                                    {
                                                        if (string.IsNullOrEmpty(tempRcpt))
                                                        {
                                                            string updateRecpt = string.Empty;
                                                            if (isHeaderwise == 0 || isHeaderwise == 2)
                                                            {
                                                                updateRecpt = " update FM_FinCodeSettings set RcptStNo=" + lastRecptNo + "+1 where collegecode =" + collegecode1 + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + ")";
                                                            }
                                                            else
                                                            {
                                                                updateRecpt = "update FM_HeaderFinCodeSettings set RcptStNo=" + lastRecptNo + "+1 where HeaderSettingPK=" + hdrSetPK + " and FinyearFK=" + finYearid + " and CollegeCode=" + collegecode1 + "";
                                                            }
                                                            d2.update_method_wo_parameter(updateRecpt, "Text");
                                                        }

                                                        #region Admission Number Generation
                                                        if (isAdmNoGenSettingsOn)
                                                        {
                                                            string app_formNo = string.Empty;
                                                            if (isAdmNoNotGenerated(appnoNew, admNoGenbatch, ref app_formNo))
                                                            {
                                                                string degreecode = d2.GetFunction("select degree_code from registration where app_no='" + appnoNew + "'");
                                                                string generatedAdmNo = string.Empty;
                                                                if (admissionNoGeneration())
                                                                {
                                                                    generatedAdmNo = generateAdmissionNo(collegecode1,
   degreecode, admNoGenbatch).Trim();
                                                                }
                                                                if (generatedAdmNo == string.Empty)
                                                                {
                                                                    generatedAdmNo = app_formNo;
                                                                }

                                                                d2.select_method_wo_parameter("if exists(select * from Registration where App_No='" + appnoNew + "' and college_code='" + collegecode1 + "') update registration set roll_admit='" + generatedAdmNo + "' where app_no='" + appnoNew + "'  and college_code='" + collegecode1 + "'", "Text");

                                                                d2.select_method_wo_parameter("update applyn set is_enroll='2' where app_no='" + appnoNew + "'  and college_code='" + collegecode1 + "'", "Text");

                                                            }
                                                        }
                                                        #endregion
                                                    }
                                                    #endregion
                                                }
                                                catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
                                                finally
                                                {
                                                }
                                                #endregion

                                            }
                                            else
                                            {
                                                imgAlert.Visible = true;
                                                //this.Form.DefaultButton = "btn_alertclose";
                                                lbl_alert.Text = "Please Enter All Fields";
                                            }
                                            #endregion
                                        }
                                    }

                                    #region update CashTransaction
                                    if (rb_cash.Checked && overallCashAmt > 0)
                                    {
                                        string upCashTrans = "  if exists (select * from FT_FinCashTransaction where TransDate ='" + dtrcpt + "' and FinYearFK ='" + finYearid + "' and EntryUserCode='" + usercode + "') update FT_FinCashTransaction set TransTime ='" + DateTime.Now.ToLongTimeString() + "', Debit =isnull(Debit,0) +" + overallCashAmt + " where FinYearFK ='" + finYearid + "' and TransDate ='" + dtrcpt + "' and EntryUserCode='" + usercode + "' else insert into FT_FinCashTransaction (TransDate,TransTime,Debit,FinYearFK,EntryUserCode) values ('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "'," + overallCashAmt + ",'" + finYearid + "','" + usercode + "')";
                                        d2.update_method_wo_parameter(upCashTrans, "Text");
                                    }
                                    #endregion

                                    #region Create PDF DOC
                                    if (FromJpr && createPDFOK && count > 0)
                                    {
                                        txttemprcpt.Text = "";
                                        imgAlert.Visible = true;
                                        //this.Form.DefaultButton = "btn_alertclose";
                                        lbl_alert.Text = "Saved Successfully";
                                    }
                                    else if (createPDFOK && count > 0)
                                    {
                                        if ((save1 == 3 || save1 == 6 || save1 == 7 || save1 == 8 || save1 == 9 || save1 == 11 || save1 == 12 || save1 == 13 || save1 == 14 || save1 == 15) && contentDiv.InnerHtml.Trim() != "")
                                        {
                                            #region New Print
                                            //contentDiv.InnerHtml += sbHtml.ToString();
                                            contentDiv.Visible = true;
                                            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                                            #endregion
                                        }
                                        else
                                        {
                                            //Response Write
                                            string appPath = HttpContext.Current.Server.MapPath("~");
                                            if (appPath != "")
                                            {
                                                string szPath = appPath + "/Report/";
                                                string szFile = "Receipt" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";

                                                Response.Buffer = true;
                                                Response.Clear();
                                                recptDoc.SaveToFile(szPath + szFile);
                                                //Response.ClearHeaders();
                                                //Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                                                //Response.ContentType = "application/pdf";
                                                //Response.WriteFile(szPath + szFile);

                                                Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");


                                                imgAlert.Visible = true;
                                                //this.Form.DefaultButton = "btn_alertclose";
                                                lbl_alert.Text = "Receipt Generated";
                                            }
                                            else
                                            {
                                                imgAlert.Visible = true;
                                                //this.Form.DefaultButton = "btn_alertclose";
                                                lbl_alert.Text = "Server Path Not Found";
                                            }
                                        }


                                    }
                                    else
                                    {
                                        imgAlert.Visible = true;
                                        //this.Form.DefaultButton = "btn_alertclose";
                                        lbl_alert.Text = "Receipt Not Generated. Inadequate Details";
                                    }
                                    #endregion
                                }
                                else
                                {
                                    imgAlert.Visible = true;
                                    //this.Form.DefaultButton = "btn_alertclose";
                                    lbl_alert.Text = "Please Enter All Bank Fields";
                                }
                            }
                            else
                            {
                                //Invalid ReceiptNo
                                imgAlert.Visible = true;
                                //this.Form.DefaultButton = "btn_alertclose";
                                lbl_alert.Text = "Invalid Receipt Number";
                            }
                        }
                        else
                        {
                            imgAlert.Visible = true;
                            //this.Form.DefaultButton = "btn_alertclose";
                            lbl_alert.Text = "Please Select Any Student";
                        }
                    }
                    else
                    {
                        imgAlert.Visible = true;
                        //this.Form.DefaultButton = "btn_alertclose";
                        lbl_alert.Text = "Please Add Print Settings";
                    }
                }
                else
                {
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Add Print Settings";
                }
                #endregion
            }
            else
            {
                #region Single receipt
                //FINE LEDGER MANDATORY CHECK
                bool fineOk = true;
                if (grid_Details.Rows.Count > 0)
                {
                    CheckBox chkOkPayFine = (CheckBox)grid_Details.Rows[0].FindControl("cb_selectLedger");
                    Label lblFineFeeCat = (Label)grid_Details.Rows[0].FindControl("lbl_textCode");
                    if (lblFineFeeCat.Text.Trim() == "-1")
                    {
                        if (!chkOkPayFine.Checked)
                        {
                            fineOk = false;
                        }
                    }
                }

                //FINE LEDGER CHECK END

                if (fineOk)
                {
                    if (txt_examt.Text.Trim() != "" && txt_examt.Text.Trim() != "0.00" && txt_examt.Text.Trim() != "0" && !checkFromPopper)
                    {
                        double exAmtOvall = 0;
                        foreach (GridViewRow row in gridExcess.Rows)
                        {
                            //if (row.RowIndex != gridExcess.Rows.Count - 1)
                            //{
                            CheckBox cb = (CheckBox)row.Cells[1].FindControl("cb_excesspop");
                            if (cb.Checked)
                            {
                                TextBox txtexAmt = (TextBox)row.FindControl("txt_ExAmtpop");
                                if (txtexAmt.Text != "")
                                {
                                    if (Convert.ToDouble(txtexAmt.Text) > 0)
                                    {
                                        //To chk whole amount                        
                                        exAmtOvall += Convert.ToDouble(txtexAmt.Text);
                                    }
                                }
                            }
                            //}
                        }
                        if (exAmtOvall > 0)
                        {
                            if (exAmtOvall == Convert.ToDouble(txt_examt.Text))
                            {
                                surediv.Visible = true;
                            }
                            else
                            {
                                imgAlert.Visible = true;
                                //this.Form.DefaultButton = "btn_alertclose";
                                lbl_alert.Text = "Please Provide Valid Excess Fees";
                            }
                        }
                        else
                        {
                            lbl_alert.Text = "Please Enter Ledgerwise Excess Amount";
                            //this.Form.DefaultButton = "btn_alertclose";
                            imgAlert.Visible = true;
                        }
                    }
                    else
                    {
                        checkFromPopper = true;
                    }
                    if (checkFromPopper)
                    {
                        checkFromPopper = false;
                        string queryPrint = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "' select * from New_InsSettings where (LinkName='ReceiptPrintFormat' or LinkName='ChallanPrintFormat') and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
                        DataSet dsPri = new DataSet();
                        dsPri = d2.select_method_wo_parameter(queryPrint, "Text");
                        if (dsPri.Tables.Count > 0)
                        {
                            if (dsPri.Tables[0].Rows.Count > 0 && dsPri.Tables[1].Rows.Count > 0)
                            {
                                string insqry1 = "select LinkValue from New_InsSettings where LinkName='ReceiptPrintFormat' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
                                int save1 = Convert.ToInt32(d2.GetFunction(insqry1));

                                try
                                {
                                    string receiptno = string.Empty;
                                    //modified by sudhagar editable receipt no
                                    string tempRcpt = Convert.ToString(txttemprcpt.Text.Trim());
                                    if (!string.IsNullOrEmpty(tempRcpt))
                                        receiptno = tempRcpt;
                                    else
                                        receiptno = txt_rcptno.Text.Trim();
                                    if (receiptno.Trim() != "" || save1 == 5)
                                    {
                                        bool InsertUpdateOK = false;
                                        string rollno = string.Empty;
                                        string studname = string.Empty;
                                        //   string receiptno = string.Empty;
                                        string ChallanDate = string.Empty;
                                        string name = string.Empty;

                                        string challanno = string.Empty;

                                        string clgbankmane = string.Empty;
                                        string bankPk = string.Empty;
                                        string bnkCity = string.Empty;
                                        string bnkname = string.Empty;
                                        string branch = string.Empty;
                                        string checkDDno = string.Empty;
                                        string checkDDdate = string.Empty;
                                        string newbankname = string.Empty;
                                        string newbankcode = string.Empty;
                                        string ledgercode = string.Empty;
                                        string description = string.Empty;
                                        string mode = string.Empty;
                                        string roll_admit = string.Empty;
                                        string app_formno = string.Empty;
                                        string appnoNew = string.Empty;
                                        string Regno = string.Empty;
                                        string PayMode = "1";
                                        string Roll_admit = string.Empty;
                                        string section = string.Empty;
                                        string StudMode = string.Empty;
                                        string batch_year = string.Empty;
                                        string neftno = string.Empty;
                                        roll_admit = lblstaticrollno.Text.Trim();
                                        if (rbl_rollnoNew.SelectedIndex == 1)
                                        {
                                            roll_admit = txtroll_staff.Text.Trim();
                                        }
                                        Roll_admit = roll_admit;

                                        accidRecpt = lblaccid.Text;
                                        lastRecptNo = lstrcpt.Text;

                                        string[] dtrctptsplit = txt_date.Text.Split('/');
                                        string[] dtchkddsplit = txt_date1.Text.Split('/');
                                        DateTime dtrcpt = Convert.ToDateTime(dtrctptsplit[1] + "/" + dtrctptsplit[0] + "/" + dtrctptsplit[2]);
                                        string dtchkdd = dtchkddsplit[1] + "/" + dtchkddsplit[0] + "/" + dtchkddsplit[2];

                                        description = txt_remark.Text.Trim();
                                        txt_rcptno.Text = generateReceiptNo();
                                        ////modified by sudhagar editable receipt no
                                        //string tempRcpt = Convert.ToString(txttemprcpt.Text.Trim());
                                        //if (!string.IsNullOrEmpty(tempRcpt))
                                        //    receiptno = tempRcpt;
                                        //else
                                        //    receiptno = txt_rcptno.Text.Trim();

                                        string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
                                        string memtype = "1";
                                        switch (rbl_rollnoNew.SelectedIndex)
                                        {
                                            case 0:
                                                memtype = "1";
                                                break;
                                            case 1:
                                                memtype = "2";
                                                break;
                                            case 2:
                                                memtype = "3";
                                                break;
                                            case 3:
                                                memtype = "4"; ;
                                                break;
                                        }
                                        string excessFeecat = "0";
                                        string curSemEx = "0";
                                        if (rbl_rollnoNew.SelectedIndex == 0)
                                        {
                                            string queryRollApp = "select r.Roll_No,a.app_formno,a.app_no,r.Reg_No, r.Current_Semester,r.sections,r.mode,r.batch_year from Registration r,applyn a where r.App_No=a.app_no  and r.college_code='" + collegecode1 + "'  and r.Roll_Admit='" + roll_admit + "'";
                                            if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 3)
                                            {
                                                queryRollApp = "select app_formno as Roll_No,app_formno,app_no,app_formno as Reg_No, Current_Semester,'' sections ,mode,batch_year  from applyn  where  app_formno='" + roll_admit + "'  and college_code='" + collegecode1 + "' ";
                                            }
                                            DataSet dsRollApp = new DataSet();
                                            dsRollApp = d2.select_method_wo_parameter(queryRollApp, "Text");
                                            if (dsRollApp.Tables.Count > 0 && dsRollApp.Tables[0].Rows.Count > 0)
                                            {
                                                rollno = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Roll_No"]);
                                                app_formno = Convert.ToString(dsRollApp.Tables[0].Rows[0]["app_formno"]);
                                                appnoNew = Convert.ToString(dsRollApp.Tables[0].Rows[0]["app_no"]);
                                                Regno = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Reg_No"]);
                                                curSemEx = Convert.ToString(dsRollApp.Tables[0].Rows[0]["Current_Semester"]);
                                                section = Convert.ToString(dsRollApp.Tables[0].Rows[0]["sections"]);
                                                StudMode = Convert.ToString(dsRollApp.Tables[0].Rows[0]["mode"]);
                                                batch_year = Convert.ToString(dsRollApp.Tables[0].Rows[0]["batch_year"]);

                                                string clgOrSem = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'").Trim();

                                                if (clgOrSem == "0")
                                                {
                                                    excessFeecat = d2.GetFunction("select TextCode from TextValTable where textval='" + curSemEx + " Semester' and college_code=" + collegecode1 + "").Trim();
                                                }
                                                else
                                                {
                                                    #region Year For Sem
                                                    curSemEx = returnYearforSem(curSemEx);
                                                    excessFeecat = d2.GetFunction("select TextCode from TextValTable where textval='" + curSemEx + " Year' and college_code=" + collegecode1 + "").Trim();
                                                    #endregion
                                                }
                                            }
                                        }
                                        else if (rbl_rollnoNew.SelectedIndex == 1)
                                        {
                                            string clgcode = string.Empty;
                                            clgcode = getClgCode();
                                            appnoNew = d2.GetFunction("select a.appl_id from staffmaster s,staff_appl_master a where s.appl_no=a.appl_no and s.staff_code='" + txtroll_staff.Text.Trim() + "' and s.college_code in('" + clgcode + "') ");
                                            rollno = roll_admit;
                                            app_formno = roll_admit;
                                            Regno = roll_admit;
                                        }
                                        else if (rbl_rollnoNew.SelectedIndex == 2)
                                        {
                                            try
                                            {
                                                appnoNew = txtname_vendor.Text.Trim().Split('-')[2];
                                                rollno = appnoNew;
                                                app_formno = appnoNew;
                                                Regno = appnoNew;
                                            }
                                            catch
                                            {
                                                appnoNew = "";
                                                rollno = appnoNew;
                                                app_formno = appnoNew;
                                                Regno = appnoNew;
                                            }
                                        }
                                        else if (rbl_rollnoNew.SelectedIndex == 3)
                                        {
                                            try
                                            {
                                                string staffId = Convert.ToString(txtroll_other.Text.Trim());
                                                string staffMob = Convert.ToString(txt_otherMobile.Text.Trim());

                                                appnoNew = d2.GetFunction("select VendorPK from co_vendormaster where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5").Trim();
                                                rollno = appnoNew;
                                                app_formno = appnoNew;
                                                Regno = appnoNew;
                                            }
                                            catch
                                            {
                                                appnoNew = "";
                                                rollno = appnoNew;
                                                app_formno = appnoNew;
                                                Regno = appnoNew;
                                            }
                                        }
                                        if (ddl_collegebank.Items.Count > 0)
                                        {
                                            bankPk = Convert.ToString(ddl_collegebank.SelectedValue);
                                            try
                                            {
                                                bnkCity = Convert.ToString(ddl_collegebank.SelectedValue).Split('-')[2];
                                            }
                                            catch { }
                                        }

                                        #region cheque or DD or Card Details
                                        if (ddl_bkname.SelectedItem.Text.ToUpper() == "OTHERS")
                                        {
                                            newbankname = txt_other.Text.Trim();
                                            newbankcode = subjectcode("BName", newbankname);
                                            txt_other.Text = "";
                                        }
                                        else
                                        {
                                            if (ddl_bkname.SelectedIndex != 0)
                                            {
                                                newbankname = ddl_bkname.SelectedItem.Text;
                                                newbankcode = ddl_bkname.SelectedItem.Value;
                                            }
                                            txt_other.Text = "";
                                        }
                                        if (rb_card.Checked)
                                        {
                                            if (ddlCardType.SelectedItem.Text.ToUpper() == "OTHERS")
                                            {
                                                newbankname = txtCardType.Text.Trim();
                                                newbankcode = subjectcode("CardT", newbankname);
                                                txtCardType.Text = "";
                                            }
                                            else
                                            {
                                                if (ddlCardType.SelectedIndex != 0)
                                                {
                                                    newbankname = ddlCardType.SelectedItem.Text;
                                                    newbankcode = ddlCardType.SelectedItem.Value;
                                                }
                                                txtCardType.Text = "";
                                            }
                                        }
                                        if (rb_NEFT.Checked)//added by abarna 29.01.2018
                                        {

                                        }

                                        #endregion
                                        string ActualfinFk = string.Empty;
                                        bool studfinFk = true;
                                        if (rbl_rollnoNew.SelectedIndex == 0)
                                        {
                                            rollno = txt_rollno.Text.Trim();
                                            //app_formno = txt_rollno.Text.Trim();
                                            // roll_admit = txt_rollno.Text.Trim();
                                            studname = txt_name.Text.Trim();
                                            name = rollno + "-" + studname;

                                        }
                                        else if (rbl_rollnoNew.SelectedIndex == 1)
                                        {
                                            rollno = txtroll_staff.Text.Trim();
                                            app_formno = txtroll_staff.Text.Trim();
                                            roll_admit = txtroll_staff.Text.Trim();
                                            studname = txtname_staff.Text.Trim();
                                            name = rollno + "-" + studname;

                                        }
                                        else if (rbl_rollnoNew.SelectedIndex == 2)
                                        {
                                            rollno = appnoNew;
                                            app_formno = appnoNew;
                                            roll_admit = appnoNew;
                                            try
                                            {
                                                studname = txtname_vendor.Text.Trim().Split('-')[0];
                                            }
                                            catch { studname = ""; }
                                            name = rollno + "-" + studname;
                                        }
                                        else if (rbl_rollnoNew.SelectedIndex == 3)
                                        {
                                            rollno = appnoNew;
                                            app_formno = appnoNew;
                                            roll_admit = appnoNew;
                                            string staffId = Convert.ToString(txtroll_other.Text.Trim());
                                            string staffMob = Convert.ToString(txt_otherMobile.Text.Trim());
                                            try
                                            {
                                                studname = staffId;
                                            }
                                            catch { studname = ""; }
                                            name = studname;// +"-" + staffMob;

                                        }


                                        if (rdo_receipt.Checked)
                                        {
                                            if (rb_cash.Checked)
                                            {
                                                mode = "cash";
                                                PayMode = "1";
                                                dtchkdd = "";
                                            }
                                            else if (rb_cheque.Checked)
                                            {

                                                mode = "cheque";
                                                PayMode = "2";
                                                checkDDno = txt_chqno.Text.Trim();
                                                branch = txt_branch.Text.Trim();

                                            }
                                            else if (rb_dd.Checked)
                                            {
                                                mode = "dd";
                                                PayMode = "3";
                                                checkDDno = txt_ddno.Text.Trim();
                                                branch = txt_branch.Text.Trim();
                                            }
                                            else if (rb_card.Checked)
                                            {
                                                mode = "card";
                                                PayMode = "6";
                                                checkDDno = txtLast4No.Text.Trim();
                                                branch = newbankname.Trim();
                                            }
                                            else if (rb_NEFT.Checked)
                                            {
                                                mode = "NEFT";
                                                PayMode = "7";
                                                checkDDno = txt_NEFTNO.Text.Trim();//Added by saranya on 24/04/2018
                                            }

                                            else if (rb_Challan.Checked)//added challan
                                            {

                                                mode = "challan";
                                                PayMode = "4";
                                                checkDDno = txt_challan.Text.Trim();
                                                branch = txt_branch.Text.Trim();
                                            }
                                        }
                                        else if (rdo_challan.Checked)//challan added
                                        {
                                            mode = "challan";
                                            PayMode = "4";
                                        }

                                        string ScholarTypeQ = "select LinkValue from New_InsSettings where LinkName='ScholarshipType' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
                                        byte ScholarTypeValue = 0;
                                        byte.TryParse(Convert.ToString(d2.GetFunction(ScholarTypeQ)), out ScholarTypeValue);

                                        string excessTypeQ = "select LinkValue from New_InsSettings where LinkName='ExcessFeesType' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
                                        byte excessTypeValue = 0;
                                        byte.TryParse(Convert.ToString(d2.GetFunction(excessTypeQ)), out excessTypeValue);

                                        if (rollno != "" && studname != "" && roll_admit != "" && app_formno != "" && ((receiptno != "" && lastRecptNo != "") || save1 == 5) && collegecode1 != "" && usercode != "" && appnoNew != "" && finYearid != "")
                                        {
                                            bool bankdetailsOK = false;
                                            if (mode == "cheque" || mode == "dd" || mode == "card")//challan added
                                            {
                                                if (newbankname != "" && newbankcode != "" && branch != "" && checkDDno != "")
                                                {
                                                    bankdetailsOK = true;
                                                }
                                            }
                                            else if (mode == "cash")
                                            {
                                                bankdetailsOK = true;
                                            }
                                            else if (mode == "challan")
                                            {
                                                if (newbankname != "" && newbankcode != "" && branch != "")
                                                {
                                                    bankdetailsOK = true;
                                                }
                                            }
                                            else if (mode == "NEFT")//added by abarna 31.12.2018
                                            {
                                                if (checkDDno != "")
                                                {
                                                    bankdetailsOK = true;
                                                }
                                            }
                                            string modeMulti = string.Empty;

                                            if (bankdetailsOK)
                                            {
                                                bool modeCash = false;
                                                bool modeChk = false;
                                                bool modeDD = false;
                                                bool modeCard = false;
                                                bool modeNEFT = false;
                                                bool modechallan = false;//added challan
                                                double overallCashAmt = 0;
                                                double overallExcessFees = 0;

                                                string excessFK = string.Empty;
                                                double schoolORclg = checkSchoolSetting();
                                                #region INSERTION AND UPDATION CODE.

                                                DataTable dtMulBnkDetails = new DataTable();
                                                dtMulBnkDetails.Columns.Add("BnkName");
                                                dtMulBnkDetails.Columns.Add("ChkDDNo");
                                                dtMulBnkDetails.Columns.Add("Branch");
                                                dtMulBnkDetails.Columns.Add("Date");
                                                dtMulBnkDetails.Columns.Add("Amount");

                                                double mulSchlAmount = 0;
                                                if (chk_rcptMulmode.Checked)
                                                {
                                                    #region Insert Process Multiple Mode
                                                    //To Store Entered Pay amt Temporarily
                                                    Hashtable htToPay = new Hashtable();
                                                    int indH = 0;
                                                    foreach (GridViewRow row in grid_Details.Rows)
                                                    {
                                                        TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                        htToPay.Add(indH, txtTobePaidamt.Text);
                                                        indH++;
                                                    }
                                                    bool rcptCheck = false;
                                                    foreach (GridViewRow grow in gridMultimode.Rows)
                                                    {
                                                        Label lblmdId = (Label)grow.FindControl("lbl_modetypeid");
                                                        Label lblmdType = (Label)grow.FindControl("lbl_modetype");
                                                        Label lblmdBnkId = (Label)grow.FindControl("lbl_mdbankid");
                                                        TextBox txtmdBnk = (TextBox)grow.FindControl("txt_mdBank");
                                                        TextBox txtmdBr = (TextBox)grow.FindControl("txt_mdbranchpop");
                                                        TextBox txtmdChkno = (TextBox)grow.FindControl("txt_mdchkddnopop");
                                                        TextBox txtmdAmt = (TextBox)grow.FindControl("txt_mdAmtpop");
                                                        Label lblmdDate = (Label)grow.FindControl("lbl_mddate");

                                                        if (lblmdType.Text.ToUpper() == "CASH")
                                                        {
                                                            modeCash = true;
                                                        }
                                                        else if (lblmdType.Text.ToUpper() == "CHEQUE")
                                                        {
                                                            modeChk = true;
                                                        }
                                                        else if (lblmdType.Text.ToUpper() == "DD")
                                                        {
                                                            modeDD = true;
                                                        }
                                                        else if (lblmdType.Text.ToUpper() == "CARD")
                                                        {
                                                            modeCard = true;
                                                        }
                                                        else if (lblmdType.Text.ToUpper() == "NEFT")
                                                        {
                                                            modeNEFT = true;
                                                        }
                                                        else if (lblmdType.Text.ToUpper() == "CHALLAN")//added
                                                        {
                                                            modechallan = true;
                                                        }
                                                        string gridDate = DateTime.Now.Date.ToString();
                                                        try
                                                        {
                                                            gridDate = lblmdDate.Text.Split('/')[1] + "/" + lblmdDate.Text.Split('/')[0] + "/" + lblmdDate.Text.Split('/')[2];
                                                        }
                                                        catch { }

                                                        if (txtmdAmt.Text == "")
                                                        {
                                                            txtmdAmt.Text = "0";
                                                        }
                                                        double currentAmount = 0;
                                                        currentAmount = Convert.ToDouble(txtmdAmt.Text.Trim());

                                                        DataRow dr = dtMulBnkDetails.NewRow();
                                                        dr[0] = txtmdBnk.Text;
                                                        dr[1] = txtmdChkno.Text;
                                                        dr[2] = txtmdBr.Text;
                                                        dr[3] = lblmdDate.Text;
                                                        dr[4] = txtmdAmt.Text;
                                                        if (currentAmount > 0)
                                                        {

                                                            foreach (GridViewRow row in grid_Details.Rows)
                                                            {
                                                                CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                if (!chkOkPay.Checked)
                                                                    continue;

                                                                TextBox txtTotalamt = (TextBox)row.FindControl("txt_tot_amt");
                                                                TextBox txtPaidamt = (TextBox)row.FindControl("txt_paid_amt");
                                                                TextBox txtBalamt = (TextBox)row.FindControl("txt_bal_amt");
                                                                TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                                TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");
                                                                Label lblFeeCategory = (Label)row.FindControl("lbl_textCode");
                                                                Label lblFeeCode = (Label)row.FindControl("lbl_feecode");
                                                                Label lblheaderid = (Label)row.FindControl("lbl_hdrid");

                                                                Label lblmonWisemon = (Label)row.FindControl("lbl_monwiseMon");
                                                                Label lblmonWiseyea = (Label)row.FindControl("lbl_monwiseYea");
                                                                Label lbl_FeeallotPk = (Label)row.FindControl("lbl_FeeallotPk");
                                                                try
                                                                {
                                                                    if (lblFeeCategory.Text.Contains("$"))
                                                                    {
                                                                        //string[] splVal = lblFeeCategory.Text.Split('$');
                                                                        lblFeeCategory.Text = lblFeeCategory.Text.Split('$')[0];
                                                                    }

                                                                }
                                                                catch { }
                                                                Session["feecode"] = lblFeeCategory.Text;

                                                                double creditamt = 0;
                                                                double exgridamt = 0;
                                                                double schlAmt = 0;
                                                                double curCautAmt = 0;
                                                                if (txtTobePaidamt.Text != "" || txtExcessGridAmt.Text != "" || txtScholAmt.Text != "" || txtCautAmt.Text != "")
                                                                {
                                                                    if (txtTobePaidamt.Text == "")
                                                                    {
                                                                        txtTobePaidamt.Text = "0";
                                                                    }
                                                                    creditamt = Convert.ToDouble(txtTobePaidamt.Text);

                                                                    if (cb_exfees.Checked)
                                                                    {
                                                                        double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                    }
                                                                    if (cb_govt.Checked)
                                                                    {
                                                                        double.TryParse(txtScholAmt.Text, out schlAmt);
                                                                    }
                                                                    creditamt += schlAmt;
                                                                    mulSchlAmount += schlAmt;

                                                                    if (cb_CautionDep.Checked)
                                                                    {
                                                                        double.TryParse(txtCautAmt.Text, out curCautAmt);
                                                                    }
                                                                    creditamt += curCautAmt;
                                                                }

                                                                if (exgridamt > 0 || creditamt > 0)
                                                                {
                                                                    if (currentAmount == creditamt)
                                                                    {
                                                                        currentAmount = 0;
                                                                        txtTobePaidamt.Text = "0";
                                                                    }
                                                                    else if (currentAmount > creditamt)
                                                                    {
                                                                        currentAmount -= creditamt;
                                                                        txtTobePaidamt.Text = "0";
                                                                    }
                                                                    else
                                                                    {
                                                                        txtTobePaidamt.Text = (creditamt - currentAmount).ToString();
                                                                        creditamt = currentAmount;
                                                                        currentAmount = 0;
                                                                    }

                                                                    if (lblmdId.Text == "1")
                                                                    {

                                                                        PayMode = "1";
                                                                        checkDDno = "";
                                                                        dtchkdd = gridDate;
                                                                        newbankcode = "";
                                                                        branch = "";
                                                                        overallCashAmt += creditamt;
                                                                    }
                                                                    else if (lblmdId.Text == "2")
                                                                    {

                                                                        PayMode = "2";
                                                                        checkDDno = txtmdChkno.Text;
                                                                        dtchkdd = gridDate;
                                                                        newbankcode = lblmdBnkId.Text;
                                                                        branch = txtmdBr.Text;
                                                                    }
                                                                    else if (lblmdId.Text == "3")
                                                                    {

                                                                        PayMode = "3";
                                                                        checkDDno = txtmdChkno.Text;
                                                                        dtchkdd = gridDate;
                                                                        newbankcode = lblmdBnkId.Text;
                                                                        branch = txtmdBr.Text;
                                                                    }
                                                                    else if (lblmdId.Text == "6")
                                                                    {

                                                                        PayMode = "6";
                                                                        checkDDno = txtmdChkno.Text;
                                                                        dtchkdd = gridDate;
                                                                        newbankcode = lblmdBnkId.Text;
                                                                        branch = txtmdBr.Text;
                                                                    }
                                                                    //Added by saranya on 24/04/2018
                                                                    else if (lblmdId.Text == "7")
                                                                    {
                                                                        PayMode = "7";
                                                                        checkDDno = txt_NEFTNO.Text;
                                                                    }
                                                                    else if (lblmdId.Text == "4")//challan
                                                                    {

                                                                        PayMode = "4";
                                                                        checkDDno = txtmdChkno.Text;
                                                                        dtchkdd = gridDate;
                                                                        newbankcode = lblmdBnkId.Text;
                                                                        branch = txtmdBr.Text;
                                                                    }
                                                                    if (creditamt > 0)
                                                                    {
                                                                        string iscollected = "0";
                                                                        string collecteddate = "";
                                                                        if (PayMode == "1" || PayMode == "6" || PayMode == "7")
                                                                        {
                                                                            iscollected = "1";
                                                                            collecteddate = (dtrcpt).ToString();
                                                                        }
                                                                        //else if (PayMode == "2")
                                                                        //{
                                                                        //    iscollected = AutoClearCheck();
                                                                        //    collecteddate = (dtrcpt).ToString();
                                                                        //}
                                                                        //else if (PayMode == "3")
                                                                        //{
                                                                        //    iscollected = isCollectedForDD();
                                                                        //    collecteddate = (dtrcpt).ToString();
                                                                        //}
                                                                        double paidAmt = (creditamt + schlAmt + curCautAmt);

                                                                        string credit = "0";
                                                                        string TransType = "1";
                                                                        string IsInstallmentPay = "0";
                                                                        string InstallmentNo = "0";
                                                                        string PayAt = "0";
                                                                        string PayThrough = "0";
                                                                        string IsArrearCollect = "0";
                                                                        string ArearFinYearFK = "0";
                                                                        string time = DateTime.Now.ToLongTimeString();
                                                                        int rcptUpdate = 0;
                                                                        if (!rcptCheck && txttemprcpt.Text.Trim() == "")//if edit receipt no setting available receipt no will not be update --txttemprcpt.Text.Trim() == ""
                                                                        {
                                                                            rcptUpdate = 1;
                                                                            rcptCheck = true;
                                                                            receiptno = generateReceiptNo();
                                                                            accidRecpt = lblaccid.Text;
                                                                            lastRecptNo = lstrcpt.Text;
                                                                        }
                                                                        string isFine = "0";
                                                                        isFine = isFine == string.Empty ? isFine = "0" : isFine;
                                                                        string actualFinYearFk = finYearid;

                                                                        if (!string.IsNullOrEmpty(receiptno) && receiptno != "0")
                                                                        {
                                                                            InsertUpdateOK = getPaidDetails(dtrcpt.ToString("MM/dd/yyyy"), time, receiptno, memtype, appnoNew, Convert.ToString(lblFeeCode.Text), Convert.ToString(lblheaderid.Text), Convert.ToString(lblFeeCategory.Text), credit, paidAmt, PayMode, checkDDno, dtchkdd, newbankcode, branch, TransType, IsInstallmentPay, InstallmentNo, Convert.ToString(txt_remark.Text.Trim()), PayAt, PayThrough, IsArrearCollect, ArearFinYearFK, usercode, finYearid, Convert.ToString(rcptType), iscollected, dtrcpt.ToString("MM/dd/yyyy"), iscollected, dtrcpt.ToString("MM/dd/yyyy"), isFine, actualFinYearFk, schoolORclg, Convert.ToString(isHeaderwise), lastRecptNo, collegecode1, Convert.ToString(rcptUpdate), hdrSetPK, exgridamt, schlAmt);
                                                                            //if (rec == true)
                                                                            //{
                                                                            //    receiptno = d2.GetFunction("select transcode from ft_Findailytransaction where headerfk='" + Convert.ToString(lblheaderid.Text) + "' and ledgerfk='" + Convert.ToString(lblFeeCode.Text) + "' and feecategory='" + Convert.ToString(lblFeeCategory.Text) + "' and memtype='" + memtype + "' and paymode='" + PayMode + "' and finyearfk='" + finYearid + "' and app_no='" + appnoNew + "' and transdate='" + dtrcpt.ToString("MM/dd/yyyy") + "' and transtime='" + time + "'");
                                                                            //}
                                                                        }
                                                                        //string insertDebit = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate) VALUES('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "','" + receiptno + "', " + memtype + ", " + appnoNew + ", " + lblFeeCode.Text + ", " + lblheaderid.Text + ", " + lblFeeCategory.Text + ", 0, " + creditamt + ", " + PayMode + ", '" + checkDDno + "', '" + dtchkdd + "', '" + newbankcode + "','" + branch + "', 1, '0', 0, '" + txt_remark.Text.Trim() + "', '0', '0', '0', 0, " + usercode + ", " + finYearid + ",'" + rcptType + "','" + iscollected + "','" + collecteddate + "','" + iscollected + "','" + collecteddate + "')";

                                                                        //d2.update_method_wo_parameter(insertDebit, "Text");

                                                                        #region Monthwise Insert
                                                                        int monwisemon = 0;
                                                                        int monWiseyea = 0;
                                                                        Int64 feeallotpk = 0;

                                                                        int.TryParse(lblmonWisemon.Text, out monwisemon);
                                                                        int.TryParse(lblmonWiseyea.Text, out monWiseyea);
                                                                        Int64.TryParse(lbl_FeeallotPk.Text, out feeallotpk);
                                                                        if (monwisemon > 0 && monWiseyea > 0 && feeallotpk > 0)
                                                                        {
                                                                            Int64 dailyTransPk = 0;
                                                                            string dailyTransPkQ = "SELECT dailyTransPk FROM  FT_FinDailyTransaction WHERE TransDate='" + dtrcpt + "' and TransCode='" + receiptno + "'  and  MemType= " + memtype + "  and  App_No=" + appnoNew + "  and  LedgerFK=" + lblFeeCode.Text + "  and  HeaderFK=" + lblheaderid.Text + "  and   FeeCategory=" + lblFeeCategory.Text + "  and  Credit=0  and  Debit=" + (creditamt) + "  and  PayMode =" + PayMode + "  and  TransType=1  and FinYearFK=" + finYearid + "  and  Receipttype='" + rcptType + "'";
                                                                            Int64.TryParse(d2.GetFunction(dailyTransPkQ), out dailyTransPk);
                                                                            if (dailyTransPk > 0)
                                                                            {
                                                                                string insMonwiseQ = "INSERT INTO FT_FinDailyTransactionDetailMonthWise(DailyTransFK, MonthValue, YearValue, Debit, isCancel) values(" + dailyTransPk + ", " + monwisemon + ", " + monWiseyea + ", " + (creditamt) + ", '0')";
                                                                                d2.update_method_wo_parameter(insMonwiseQ, "Text");
                                                                                //Aruna 8apr2017=================================
                                                                                //string upMonwiseQ = "update FT_FeeallotMonthly set PaidAmount=ISNULL(PaidAmount,0)+" + (creditamt) + ",BalAmount=ISNULL(BalAmount,0)-" + (creditamt) + " where FeeAllotPK=" + feeallotpk + "  and  AllotMonth=" + monwisemon + " and  AllotYear=" + monWiseyea + " and Finyearfk= " + finYearid + "";

                                                                                string upMonwiseQ = "update FT_FeeallotMonthly set PaidAmount=ISNULL(PaidAmount,0)+" + (creditamt) + ",BalAmount=ISNULL(BalAmount,0)-" + (creditamt) + " where FeeAllotPK=" + feeallotpk + "  and  AllotMonth=" + monwisemon + " and  AllotYear=" + monWiseyea + "";
                                                                                //================================================

                                                                                d2.update_method_wo_parameter(upMonwiseQ, "Text");
                                                                            }
                                                                        }
                                                                        #endregion

                                                                        #region Library Fine details Insert Added by saranya
                                                                        string HidLid = lblheaderid.Text + ',' + lblFeeCode.Text;
                                                                        string Sql = "select * from New_InsSettings where LinkName='LibraryFine' and college_code='" + ddl_college.SelectedValue + "' and linkValue='" + HidLid + "' ";
                                                                        dsprint.Clear();
                                                                        dsprint = d2.select_method_wo_parameter(Sql, "text");
                                                                        string lid = string.Empty;
                                                                        string hid = string.Empty;
                                                                        int update = 0;
                                                                        string roll = d2.GetFunction("select Roll_No from Registration where App_No='" + appnoNew + "'");
                                                                        if (dsprint.Tables[0].Rows.Count > 0)
                                                                        {
                                                                            Sql = " select * from fine_details where Roll_No='" + roll + "' and paidamt=0";
                                                                            dssel.Clear();
                                                                            dssel = d2.select_method_wo_parameter(Sql, "text");
                                                                            if (dssel.Tables[0].Rows.Count > 0)
                                                                            {
                                                                                for (int fineDet = 0; fineDet < dssel.Tables[0].Rows.Count; fineDet++)
                                                                                {
                                                                                    int FinePaidAmt = Convert.ToInt32(dssel.Tables[0].Rows[fineDet]["fineamt"]);
                                                                                    Sql = "update fine_details set receipt_no='" + receiptno + "',paidamt='" + FinePaidAmt + "',actfineamt='" + FinePaidAmt + "',Cal_date='" + dtrcpt.ToString("MM/dd/yyyy") + "' where Roll_No='" + roll + "' and receipt_no='' and fineamt='" + FinePaidAmt + "' ";
                                                                                    update = d2.update_method_wo_parameter(Sql, "Text");
                                                                                }
                                                                            }
                                                                        }

                                                                        #endregion

                                                                        if (cb_govt.Checked && schlAmt > 0)
                                                                        {
                                                                            #region scholarship
                                                                            double curScholAmt = schlAmt;
                                                                            List<string> selReasons = GetSelectedItemsValueList(cblSchlReason);
                                                                            for (int rea = 0; rea < selReasons.Count; rea++)
                                                                            {
                                                                                double insSchAmt = 0;
                                                                                double dbSchlAmt = 0;
                                                                                if (ScholarTypeValue == 1)
                                                                                {
                                                                                    string dbSchamtQ = d2.GetFunction("select ISNULL(TotalAmount,0)-ISNULL(AdjusAmount,0) from FT_FinScholarship  WHERE  App_No=" + appnoNew + " and ledgerfk=" + lblFeeCode.Text + " and Headerfk=" + lblheaderid.Text + " and FeeCategory=" + lblFeeCategory.Text + " and collegecode=" + collegecode1 + " and Reasoncode=" + selReasons[rea] + "");
                                                                                    double.TryParse(dbSchamtQ, out dbSchlAmt);

                                                                                    if (curScholAmt <= dbSchlAmt)
                                                                                    {
                                                                                        insSchAmt = curScholAmt;
                                                                                        curScholAmt = 0;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        curScholAmt = curScholAmt - dbSchlAmt;
                                                                                        insSchAmt = dbSchlAmt;
                                                                                    }

                                                                                    string updateGovt = " UPDATE FT_FinScholarship SET AdjusAmount=isnull(AdjusAmount,0.00)+" + insSchAmt + " WHERE  App_No=" + appnoNew + " and ledgerfk=" + lblFeeCode.Text + " and Headerfk=" + lblheaderid.Text + " and FeeCategory=" + lblFeeCategory.Text + " and collegecode=" + collegecode1 + " and Reasoncode=" + selReasons[rea] + "";
                                                                                    d2.update_method_wo_parameter(updateGovt, "Text");

                                                                                    string ledInsQ = "insert into FT_FinScholarshipAdjusDet (App_no, Transcode, AdjusDate, LedgerFk, HeaderFk, Reasoncode, Feecategory,AdjusAmount, FinYearFk,Collegecode, IsCancelled, TypeofAdjust) values(" + appnoNew + ", '" + receiptno + "', '" + dtrcpt + "', " + lblFeeCode.Text + ", " + lblheaderid.Text + ", " + selReasons[rea] + ", " + lblFeeCategory.Text + "," + insSchAmt + ", " + finYearid + "," + collegecode1 + ",'0','" + ScholarTypeValue + "')";
                                                                                    d2.update_method_wo_parameter(ledInsQ, "Text");
                                                                                }
                                                                                else
                                                                                {
                                                                                    DataSet dtSchlAmt = new DataSet();
                                                                                    dtSchlAmt = d2.select_method_wo_parameter("select ISNULL(TotalAmount,0)-ISNULL(AdjusAmount,0) as Amt,LedgerFk,HeaderFk,Feecategory from FT_FinScholarship  WHERE  App_No=" + appnoNew + " and collegecode=" + collegecode1 + " and Reasoncode=" + selReasons[rea] + "", "Text");
                                                                                    if (dtSchlAmt.Tables.Count > 0 && dtSchlAmt.Tables[0].Rows.Count > 0)
                                                                                    {
                                                                                        double ovrGvtAmt = 0;
                                                                                        for (int reaIndx = 0; reaIndx < dtSchlAmt.Tables[0].Rows.Count; reaIndx++)
                                                                                        {
                                                                                            insSchAmt = 0;
                                                                                            dbSchlAmt = 0;
                                                                                            string LedgerFk = Convert.ToString(dtSchlAmt.Tables[0].Rows[reaIndx]["LedgerFk"]);
                                                                                            string HeaderFk = Convert.ToString(dtSchlAmt.Tables[0].Rows[reaIndx]["HeaderFk"]);
                                                                                            string Feeca = Convert.ToString(dtSchlAmt.Tables[0].Rows[reaIndx]["Feecategory"]);
                                                                                            string dbSchamtQ = Convert.ToString(dtSchlAmt.Tables[0].Rows[reaIndx]["Amt"]);
                                                                                            double.TryParse(dbSchamtQ, out dbSchlAmt);

                                                                                            if (curScholAmt <= dbSchlAmt)
                                                                                            {
                                                                                                insSchAmt = curScholAmt;
                                                                                                curScholAmt = 0;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                curScholAmt = curScholAmt - dbSchlAmt;
                                                                                                insSchAmt = dbSchlAmt;
                                                                                            }
                                                                                            if (insSchAmt > 0)
                                                                                            {
                                                                                                ovrGvtAmt += insSchAmt;
                                                                                                string updateGovt = " UPDATE FT_FinScholarship SET AdjusAmount=isnull(AdjusAmount,0.00)+" + insSchAmt + " WHERE  App_No=" + appnoNew + " and ledgerfk=" + LedgerFk + " and Headerfk=" + HeaderFk + " and FeeCategory=" + Feeca + " and collegecode=" + collegecode1 + " and Reasoncode=" + selReasons[rea] + "";
                                                                                                d2.update_method_wo_parameter(updateGovt, "Text");
                                                                                            }
                                                                                        }
                                                                                        if (ovrGvtAmt > 0)
                                                                                        {
                                                                                            string ledInsQ = "insert into FT_FinScholarshipAdjusDet (App_no, Transcode, AdjusDate, LedgerFk, HeaderFk, Reasoncode, Feecategory,AdjusAmount, FinYearFk,Collegecode, IsCancelled, TypeofAdjust) values(" + appnoNew + ", '" + receiptno + "', '" + dtrcpt + "', " + lblFeeCode.Text + ", " + lblheaderid.Text + ", " + selReasons[rea] + ", " + lblFeeCategory.Text + "," + ovrGvtAmt + ", " + finYearid + "," + collegecode1 + ",'0','" + ScholarTypeValue + "')";
                                                                                            d2.update_method_wo_parameter(ledInsQ, "Text");
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            #endregion
                                                                        }

                                                                        if (cb_CautionDep.Checked && curCautAmt > 0)
                                                                        {
                                                                            updateRefundAmount(appnoNew, curCautAmt);
                                                                        }
                                                                    }

                                                                    overallCashAmt += exgridamt;


                                                                    //Excess Process
                                                                    if (cb_exfees.Checked && exgridamt > 0)
                                                                    {
                                                                        #region excess
                                                                        string iscollected = "0";
                                                                        string collecteddate = "";
                                                                        if (PayMode == "1" || PayMode == "6" || PayMode == "7")
                                                                        {
                                                                            iscollected = "1";
                                                                            collecteddate = (dtrcpt).ToString();
                                                                        }
                                                                        //else if (PayMode == "2")
                                                                        //{
                                                                        //    iscollected = AutoClearCheck();
                                                                        //    collecteddate = (dtrcpt).ToString();
                                                                        //}
                                                                        //else if (PayMode == "3")
                                                                        //{
                                                                        //    iscollected = isCollectedForDD();
                                                                        //    collecteddate = (dtrcpt).ToString();
                                                                        //}
                                                                        // string insertDebit1 = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate) VALUES('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "','" + receiptno + "', " + memtype + ", " + appnoNew + ", " + lblFeeCode.Text + ", " + lblheaderid.Text + ", " + lblFeeCategory.Text + ", 0, " + exgridamt + "," + PayMode + ", '" + checkDDno + "', '" + dtchkdd + "', '" + newbankcode + "','" + branch + "', 1, '0', 0, '" + txt_remark.Text.Trim() + "', '0', '0', '0', 0, " + usercode + ", " + finYearid + ",'" + rcptType + "','" + iscollected + "','" + collecteddate + "','" + iscollected + "','" + collecteddate + "')";

                                                                        //d2.update_method_wo_parameter(insertDebit1, "Text");
                                                                        double paidAmt = exgridamt;

                                                                        string credit = "0";
                                                                        string TransType = "1";
                                                                        string IsInstallmentPay = "0";
                                                                        string InstallmentNo = "0";
                                                                        string PayAt = "0";
                                                                        string PayThrough = "0";
                                                                        string IsArrearCollect = "0";
                                                                        string ArearFinYearFK = "0";
                                                                        string time = DateTime.Now.ToLongTimeString();
                                                                        int rcptUpdate = 0;
                                                                        if (!rcptCheck && txttemprcpt.Text.Trim() == "")//if edit receipt no setting available receipt no will not be update --txttemprcpt.Text.Trim() == ""
                                                                        {
                                                                            rcptUpdate = 1;
                                                                            rcptCheck = true;
                                                                        }
                                                                        string isFine = "0";
                                                                        string actualFinYearFk = finYearid;
                                                                        InsertUpdateOK = getPaidDetails(dtrcpt.ToString("MM/dd/yyyy"), time, receiptno, memtype, appnoNew, Convert.ToString(lblFeeCode.Text), Convert.ToString(lblheaderid.Text), Convert.ToString(lblFeeCategory.Text), credit, paidAmt, PayMode, checkDDno, dtchkdd, newbankcode, branch, TransType, IsInstallmentPay, InstallmentNo, Convert.ToString(txt_remark.Text.Trim()), PayAt, PayThrough, IsArrearCollect, ArearFinYearFK, usercode, finYearid, Convert.ToString(rcptType), iscollected, dtrcpt.ToString("MM/dd/yyyy"), iscollected, dtrcpt.ToString("MM/dd/yyyy"), isFine, actualFinYearFk, schoolORclg, Convert.ToString(isHeaderwise), lastRecptNo, collegecode1, Convert.ToString(rcptUpdate), hdrSetPK, exgridamt, schlAmt);
                                                                        //receiptno = generateReceiptNo();
                                                                        //if (rec == true)
                                                                        //{
                                                                        //    receiptno = d2.GetFunction("select transcode from ft_Findailytransaction where headerfk='" + Convert.ToString(lblheaderid.Text) + "' and ledgerfk='" + Convert.ToString(lblFeeCode.Text) + "' and feecategory='" + Convert.ToString(lblFeeCategory.Text) + "' and memtype='" + memtype + "' and paymode='" + PayMode + "' and finyearfk='" + finYearid + "' and app_no='" + appnoNew + "' and transdate='" + dtrcpt.ToString("MM/dd/yyyy") + "' and transtime='" + time + "'");
                                                                        //}
                                                                        #region Monthwise Insert
                                                                        int monwisemon = 0;
                                                                        int monWiseyea = 0;
                                                                        Int64 feeallotpk = 0;

                                                                        int.TryParse(lblmonWisemon.Text, out monwisemon);
                                                                        int.TryParse(lblmonWiseyea.Text, out monWiseyea);
                                                                        Int64.TryParse(lbl_FeeallotPk.Text, out feeallotpk);
                                                                        if (monwisemon > 0 && monWiseyea > 0 && feeallotpk > 0)
                                                                        {
                                                                            Int64 dailyTransPk = 0;
                                                                            string dailyTransPkQ = "SELECT dailyTransPk FROM  FT_FinDailyTransaction WHERE TransDate='" + dtrcpt + "' and TransCode='" + receiptno + "'  and  MemType= " + memtype + "  and  App_No=" + appnoNew + "  and  LedgerFK=" + lblFeeCode.Text + "  and  HeaderFK=" + lblheaderid.Text + "  and   FeeCategory=" + lblFeeCategory.Text + "  and  Credit=0  and  Debit=" + (exgridamt) + "  and  PayMode =" + PayMode + "  and  TransType=1  and FinYearFK=" + finYearid + "  and  Receipttype='" + rcptType + "'";
                                                                            Int64.TryParse(d2.GetFunction(dailyTransPkQ), out dailyTransPk);
                                                                            if (dailyTransPk > 0)
                                                                            {
                                                                                string insMonwiseQ = "INSERT INTO FT_FinDailyTransactionDetailMonthWise(DailyTransFK, MonthValue, YearValue, Debit, isCancel) values(" + dailyTransPk + ", " + monwisemon + ", " + monWiseyea + ", " + (exgridamt) + ", '0')";
                                                                                d2.update_method_wo_parameter(insMonwiseQ, "Text");

                                                                                //Aruna 8apr2017=================================
                                                                                //string upMonwiseQ = "update FT_FeeallotMonthly set PaidAmount=ISNULL(PaidAmount,0)+" + (exgridamt) + ",BalAmount=ISNULL(BalAmount,0)-" + (exgridamt) + " where FeeAllotPK=" + feeallotpk + "  and  AllotMonth=" + monwisemon + " and  AllotYear=" + monWiseyea + " and Finyearfk= " + finYearid + "";
                                                                                string upMonwiseQ = "update FT_FeeallotMonthly set PaidAmount=ISNULL(PaidAmount,0)+" + (exgridamt) + ",BalAmount=ISNULL(BalAmount,0)-" + (exgridamt) + " where FeeAllotPK=" + feeallotpk + "  and  AllotMonth=" + monwisemon + " and  AllotYear=" + monWiseyea + "";
                                                                                //================================================
                                                                                d2.update_method_wo_parameter(upMonwiseQ, "Text");
                                                                            }
                                                                        }
                                                                        #endregion

                                                                        string updateExcess = " UPDATE FT_ExcessDet SET ExcessTransDate='" + dtrcpt + "', TransTime= '" + DateTime.Now.ToShortTimeString() + "' , AdjAmt=isnull(AdjAmt,0.00)+" + exgridamt + ", BalanceAmt=isnull(BalanceAmt,0.00)-" + exgridamt + " WHERE  App_No=" + appnoNew + " ";
                                                                        d2.update_method_wo_parameter(updateExcess, "Text");

                                                                        if (excessTypeValue == 2)
                                                                        {
                                                                            string ledUpQ = "update FT_ExcessLedgerDet set AdjAmt=AdjAmt+" + exgridamt + ", BalanceAmt=isnull(BalanceAmt,0)-" + exgridamt + ",Feecategory=" + lblFeeCategory.Text + ",Finyearfk=" + finYearid + " where HeaderFK ='" + lblheaderid.Text + "' and LedgerFK ='" + lblFeeCode.Text + "'";
                                                                            d2.update_method_wo_parameter(ledUpQ, "Text");
                                                                        }
                                                                        txtExcessGridAmt.Text = "0";
                                                                        overallExcessFees += exgridamt;
                                                                        #endregion
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        if (txtmdBnk.Text.Trim() != "" && txtmdAmt.Text.Trim() != "" && txtmdAmt.Text.Trim() != "0" && txtmdAmt.Text.Trim() != "0.00")
                                                        {
                                                            dtMulBnkDetails.Rows.Add(dr);
                                                        }
                                                    }

                                                    int indH0 = 0;
                                                    foreach (GridViewRow row in grid_Details.Rows)
                                                    {
                                                        CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                        if (chkOkPay.Checked)
                                                        {
                                                            TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                            txtTobePaidamt.Text = htToPay[indH0].ToString();
                                                        }
                                                        indH0++;
                                                    }
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region Insert Process Single Mode
                                                    bool rcptCheck = false;
                                                    foreach (GridViewRow row in grid_Details.Rows)
                                                    {
                                                        CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                        if (!chkOkPay.Checked)
                                                            continue;

                                                        TextBox txtTotalamt = (TextBox)row.FindControl("txt_tot_amt");
                                                        TextBox txtPaidamt = (TextBox)row.FindControl("txt_paid_amt");
                                                        TextBox txtBalamt = (TextBox)row.FindControl("txt_bal_amt");
                                                        TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                        TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                        TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                        TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");

                                                        Label lblFeeCategory = (Label)row.FindControl("lbl_textCode");
                                                        Label lblFeeCode = (Label)row.FindControl("lbl_feecode");
                                                        Label lblheaderid = (Label)row.FindControl("lbl_hdrid");

                                                        Label lblmonWisemon = (Label)row.FindControl("lbl_monwiseMon");
                                                        Label lblmonWiseyea = (Label)row.FindControl("lbl_monwiseYea");
                                                        Label lbl_FeeallotPk = (Label)row.FindControl("lbl_FeeallotPk");

                                                        string actualFinYearFk = string.Empty;
                                                        string isFine = string.Empty;
                                                        if (studfinFk)//actual finyear fk only for student
                                                        {
                                                            Label lblfinYearFk = (Label)row.FindControl("lblfinfk");
                                                            actualFinYearFk = Convert.ToString(lblfinYearFk.Text);
                                                            ActualfinFk = " and finyearfk='" + actualFinYearFk + "'";
                                                        }
                                                        else
                                                        {
                                                            actualFinYearFk = finYearid;
                                                            ActualfinFk = " and finyearfk='" + finYearid + "'";
                                                        }
                                                        try
                                                        {
                                                            if (lblFeeCategory.Text.Contains("$"))
                                                            {
                                                                //string[] splVal = lblFeeCategory.Text.Split('$');
                                                                lblFeeCategory.Text = lblFeeCategory.Text.Split('$')[0];
                                                            }

                                                        }
                                                        catch { }
                                                        Session["feecode"] = lblFeeCategory.Text;
                                                        double creditamt = 0;
                                                        double exgridamt = 0;
                                                        double schlamt = 0;
                                                        double curCautAmt = 0;
                                                        if (txtTobePaidamt.Text != "" || txtExcessGridAmt.Text != "" || txtScholAmt.Text != "" || txtCautAmt.Text != "")
                                                        {
                                                            if (txtTobePaidamt.Text == "")
                                                            {
                                                                txtTobePaidamt.Text = "0";
                                                            }
                                                            creditamt = Convert.ToDouble(txtTobePaidamt.Text);

                                                            if (cb_exfees.Checked)
                                                            {
                                                                double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                            }
                                                            //creditamt += exgridamt;
                                                            overallExcessFees += exgridamt;
                                                            if (cb_govt.Checked)
                                                            {
                                                                double.TryParse(txtScholAmt.Text, out schlamt);
                                                            }
                                                            //creditamt += exgridamt;
                                                            // overallExcessFees += schlamt;
                                                            mulSchlAmount += schlamt;
                                                            if (cb_CautionDep.Checked)
                                                            {
                                                                double.TryParse(txtCautAmt.Text, out curCautAmt);
                                                            }
                                                        }

                                                        if (exgridamt > 0 || creditamt > 0 || schlamt > 0 || curCautAmt > 0)
                                                        {

                                                            if (creditamt > 0 || schlamt > 0 || curCautAmt > 0)
                                                            {
                                                                string iscollected = "0";
                                                                string collecteddate = "";
                                                                if (PayMode == "1" || PayMode == "6" || PayMode == "7" || PayMode == "4")
                                                                {
                                                                    iscollected = "1";
                                                                    collecteddate = (dtrcpt).ToString();
                                                                }
                                                                double paidAmt = (creditamt + schlamt + curCautAmt);

                                                                string credit = "0";
                                                                string TransType = "1";
                                                                string IsInstallmentPay = "0";
                                                                string InstallmentNo = "0";
                                                                string PayAt = "0";
                                                                string PayThrough = "0";
                                                                string IsArrearCollect = "0";
                                                                string ArearFinYearFK = "0";
                                                                string time = DateTime.Now.ToLongTimeString();
                                                                int rcptUpdate = 0;
                                                                if (!rcptCheck && txttemprcpt.Text.Trim() == "")//if edit receipt no setting available receipt no will not be update --txttemprcpt.Text.Trim() == ""
                                                                {
                                                                    rcptUpdate = 1;
                                                                    rcptCheck = true;
                                                                    receiptno = generateReceiptNo();
                                                                    accidRecpt = lblaccid.Text;
                                                                    lastRecptNo = lstrcpt.Text;
                                                                }
                                                                isFine = isFine == string.Empty ? isFine = "0" : isFine;
                                                                //string  actualFinYearFk = finYearid;
                                                                if (!string.IsNullOrEmpty(receiptno) && receiptno != "0")
                                                                {
                                                                    InsertUpdateOK = getPaidDetails(dtrcpt.ToString("MM/dd/yyyy"), time, receiptno, memtype, appnoNew, Convert.ToString(lblFeeCode.Text), Convert.ToString(lblheaderid.Text), Convert.ToString(lblFeeCategory.Text), credit, paidAmt, PayMode, checkDDno, dtchkdd, newbankcode, branch, TransType, IsInstallmentPay, InstallmentNo, Convert.ToString(txt_remark.Text.Trim()), PayAt, PayThrough, IsArrearCollect, ArearFinYearFK, usercode, finYearid, Convert.ToString(rcptType), iscollected, dtrcpt.ToString("MM/dd/yyyy"), iscollected, dtrcpt.ToString("MM/dd/yyyy"), isFine, actualFinYearFk, schoolORclg, Convert.ToString(isHeaderwise), lastRecptNo, collegecode1, Convert.ToString(rcptUpdate), hdrSetPK, exgridamt, schlamt);
                                                                    //receiptno = generateReceiptNo();
                                                                    //if (rec == true)
                                                                    //{
                                                                    //    receiptno = d2.GetFunction("select transcode from ft_Findailytransaction where headerfk='" + Convert.ToString(lblheaderid.Text) + "' and ledgerfk='" + Convert.ToString(lblFeeCode.Text) + "' and feecategory='" + Convert.ToString(lblFeeCategory.Text) + "' and memtype='" + memtype + "' and paymode='" + PayMode + "' and finyearfk='" + finYearid + "' and app_no='" + appnoNew + "' and transdate='" + dtrcpt.ToString("MM/dd/yyyy") + "' and transtime='" + time + "'");
                                                                    //}
                                                                }
                                                                //string insertDebit = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate) VALUES('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "','" + receiptno + "', " + memtype + ", " + appnoNew + ", " + lblFeeCode.Text + ", " + lblheaderid.Text + ", " + lblFeeCategory.Text + ", 0, " + (creditamt + schlamt + curCautAmt) + ", " + PayMode + ", '" + checkDDno + "', '" + dtchkdd + "', '" + newbankcode + "','" + branch + "', 1, '0', 0, '" + txt_remark.Text.Trim() + "', '0', '0', '0', 0, " + usercode + ", " + finYearid + ",'" + rcptType + "','" + iscollected + "','" + collecteddate + "','" + iscollected + "','" + collecteddate + "')";

                                                                //d2.update_method_wo_parameter(insertDebit, "Text");

                                                                #region Monthwise Insert
                                                                int monwisemon = 0;
                                                                int monWiseyea = 0;
                                                                Int64 feeallotpk = 0;

                                                                int.TryParse(lblmonWisemon.Text, out monwisemon);
                                                                int.TryParse(lblmonWiseyea.Text, out monWiseyea);
                                                                Int64.TryParse(lbl_FeeallotPk.Text, out feeallotpk);
                                                                if (monwisemon > 0 && monWiseyea > 0 && feeallotpk > 0)
                                                                {
                                                                    Int64 dailyTransPk = 0;
                                                                    string dailyTransPkQ = "SELECT dailyTransPk FROM  FT_FinDailyTransaction WHERE TransDate='" + dtrcpt + "' and TransCode='" + receiptno + "'  and  MemType= " + memtype + "  and  App_No=" + appnoNew + "  and  LedgerFK=" + lblFeeCode.Text + "  and  HeaderFK=" + lblheaderid.Text + "  and   FeeCategory=" + lblFeeCategory.Text + "  and  Credit=0  and  Debit=" + (creditamt + schlamt + curCautAmt) + "  and  PayMode =" + PayMode + "  and  TransType=1  and FinYearFK=" + finYearid + "  and  Receipttype='" + rcptType + "'";
                                                                    Int64.TryParse(d2.GetFunction(dailyTransPkQ), out dailyTransPk);
                                                                    if (dailyTransPk > 0)
                                                                    {
                                                                        string insMonwiseQ = "INSERT INTO FT_FinDailyTransactionDetailMonthWise(DailyTransFK, MonthValue, YearValue, Debit, isCancel) values(" + dailyTransPk + ", " + monwisemon + ", " + monWiseyea + ", " + (creditamt + schlamt + curCautAmt) + ", '0')";
                                                                        d2.update_method_wo_parameter(insMonwiseQ, "Text");

                                                                        //Aruna 8apr2017=================================
                                                                        ////string upMonwiseQ = "update FT_FeeallotMonthly set PaidAmount=ISNULL(PaidAmount,0)+" + (creditamt + schlamt + curCautAmt) + ",BalAmount=ISNULL(BalAmount,0)-" + (creditamt + schlamt) + " where FeeAllotPK=" + feeallotpk + " and  AllotMonth=" + monwisemon + " and  AllotYear=" + monWiseyea + " and Finyearfk= " + finYearid + "";
                                                                        string upMonwiseQ = "update FT_FeeallotMonthly set PaidAmount=ISNULL(PaidAmount,0)+" + (creditamt + schlamt + curCautAmt) + ",BalAmount=ISNULL(BalAmount,0)-" + (creditamt + schlamt) + " where FeeAllotPK=" + feeallotpk + " and  AllotMonth=" + monwisemon + " and  AllotYear=" + monWiseyea + "";
                                                                        //================================================
                                                                        d2.update_method_wo_parameter(upMonwiseQ, "Text");
                                                                    }
                                                                }
                                                                #endregion

                                                                #region Library Fine details Insert Added by saranya
                                                                string HidLid = lblheaderid.Text + ',' + lblFeeCode.Text;
                                                                string Sql = "select * from New_InsSettings where LinkName='LibraryFine' and college_code='" + ddl_college.SelectedValue + "' and linkValue='" + HidLid + "' ";
                                                                dsprint.Clear();
                                                                dsprint = d2.select_method_wo_parameter(Sql, "text");
                                                                string lid = string.Empty;
                                                                string hid = string.Empty;
                                                                int update = 0;
                                                                string roll = d2.GetFunction("select Roll_No from Registration where App_No='" + appnoNew + "'");
                                                                if (dsprint.Tables[0].Rows.Count > 0)
                                                                {
                                                                    Sql = " select * from fine_details where Roll_No='" + roll + "' and paidamt=0";
                                                                    dssel.Clear();
                                                                    dssel = d2.select_method_wo_parameter(Sql, "text");
                                                                    if (dssel.Tables[0].Rows.Count > 0)
                                                                    {
                                                                        for (int fineDet = 0; fineDet < dssel.Tables[0].Rows.Count; fineDet++)
                                                                        {
                                                                            int FinePaidAmt = Convert.ToInt32(dssel.Tables[0].Rows[fineDet]["fineamt"]);
                                                                            Sql = "update fine_details set receipt_no='" + receiptno + "',paidamt='" + FinePaidAmt + "',actfineamt='" + FinePaidAmt + "',Cal_date='" + dtrcpt.ToString("MM/dd/yyyy") + "' where Roll_No='" + roll + "' and receipt_no='' and fineamt='" + FinePaidAmt + "' ";
                                                                            update = d2.update_method_wo_parameter(Sql, "Text");
                                                                        }
                                                                    }
                                                                }

                                                                #endregion

                                                                if (cb_govt.Checked && schlamt > 0)
                                                                {
                                                                    #region scholarshipt
                                                                    double curScholAmt = schlamt;

                                                                    List<string> selReasons = GetSelectedItemsValueList(cblSchlReason);

                                                                    for (int rea = 0; rea < selReasons.Count; rea++)
                                                                    {
                                                                        double insSchAmt = 0;
                                                                        double dbSchlAmt = 0;
                                                                        if (ScholarTypeValue == 1)
                                                                        {
                                                                            string dbSchamtQ = d2.GetFunction("select ISNULL(TotalAmount,0)-ISNULL(AdjusAmount,0) from FT_FinScholarship  WHERE  App_No=" + appnoNew + " and ledgerfk=" + lblFeeCode.Text + " and Headerfk=" + lblheaderid.Text + " and FeeCategory=" + lblFeeCategory.Text + " and collegecode=" + collegecode1 + " and Reasoncode=" + selReasons[rea] + "");
                                                                            double.TryParse(dbSchamtQ, out dbSchlAmt);

                                                                            if (curScholAmt <= dbSchlAmt)
                                                                            {
                                                                                insSchAmt = curScholAmt;
                                                                                curScholAmt = 0;
                                                                            }
                                                                            else
                                                                            {
                                                                                curScholAmt = curScholAmt - dbSchlAmt;
                                                                                insSchAmt = dbSchlAmt;
                                                                            }

                                                                            string updateGovt = " UPDATE FT_FinScholarship SET AdjusAmount=isnull(AdjusAmount,0.00)+" + insSchAmt + " WHERE  App_No=" + appnoNew + " and ledgerfk=" + lblFeeCode.Text + " and Headerfk=" + lblheaderid.Text + " and FeeCategory=" + lblFeeCategory.Text + " and collegecode=" + collegecode1 + " and Reasoncode=" + selReasons[rea] + "";
                                                                            d2.update_method_wo_parameter(updateGovt, "Text");

                                                                            string ledInsQ = "insert into FT_FinScholarshipAdjusDet (App_no, Transcode, AdjusDate, LedgerFk, HeaderFk, Reasoncode, Feecategory,AdjusAmount, FinYearFk, Collegecode, IsCancelled, TypeofAdjust) values(" + appnoNew + ", '" + receiptno + "', '" + dtrcpt + "', " + lblFeeCode.Text + ", " + lblheaderid.Text + ", " + selReasons[rea] + ", " + lblFeeCategory.Text + "," + insSchAmt + ", " + finYearid + "," + collegecode1 + ",'0','" + ScholarTypeValue + "')";
                                                                            d2.update_method_wo_parameter(ledInsQ, "Text");
                                                                        }
                                                                        else
                                                                        {
                                                                            DataSet dtSchlAmt = new DataSet();
                                                                            dtSchlAmt = d2.select_method_wo_parameter("select ISNULL(TotalAmount,0)-ISNULL(AdjusAmount,0) as Amt,LedgerFk,HeaderFk,Feecategory from FT_FinScholarship  WHERE  App_No=" + appnoNew + " and collegecode=" + collegecode1 + " and Reasoncode=" + selReasons[rea] + "", "Text");
                                                                            if (dtSchlAmt.Tables.Count > 0 && dtSchlAmt.Tables[0].Rows.Count > 0)
                                                                            {
                                                                                double ovrGvtAmt = 0;
                                                                                for (int reaIndx = 0; reaIndx < dtSchlAmt.Tables[0].Rows.Count; reaIndx++)
                                                                                {
                                                                                    insSchAmt = 0;
                                                                                    dbSchlAmt = 0;
                                                                                    string LedgerFk = Convert.ToString(dtSchlAmt.Tables[0].Rows[reaIndx]["LedgerFk"]);
                                                                                    string HeaderFk = Convert.ToString(dtSchlAmt.Tables[0].Rows[reaIndx]["HeaderFk"]);
                                                                                    string Feeca = Convert.ToString(dtSchlAmt.Tables[0].Rows[reaIndx]["Feecategory"]);
                                                                                    string dbSchamtQ = Convert.ToString(dtSchlAmt.Tables[0].Rows[reaIndx]["Amt"]);
                                                                                    double.TryParse(dbSchamtQ, out dbSchlAmt);

                                                                                    if (curScholAmt <= dbSchlAmt)
                                                                                    {
                                                                                        insSchAmt = curScholAmt;
                                                                                        curScholAmt = 0;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        curScholAmt = curScholAmt - dbSchlAmt;
                                                                                        insSchAmt = dbSchlAmt;
                                                                                    }
                                                                                    if (insSchAmt > 0)
                                                                                    {
                                                                                        ovrGvtAmt += insSchAmt;
                                                                                        string updateGovt = " UPDATE FT_FinScholarship SET AdjusAmount=isnull(AdjusAmount,0.00)+" + insSchAmt + " WHERE  App_No=" + appnoNew + " and ledgerfk=" + LedgerFk + " and Headerfk=" + HeaderFk + " and FeeCategory=" + Feeca + " and collegecode=" + collegecode1 + " and Reasoncode=" + selReasons[rea] + "";
                                                                                        d2.update_method_wo_parameter(updateGovt, "Text");


                                                                                    }
                                                                                }
                                                                                if (ovrGvtAmt > 0)
                                                                                {
                                                                                    string ledInsQ = "insert into FT_FinScholarshipAdjusDet (App_no, Transcode, AdjusDate, LedgerFk, HeaderFk, Reasoncode, Feecategory,AdjusAmount, FinYearFk,Collegecode,IsCancelled,TypeofAdjust) values(" + appnoNew + ", '" + receiptno + "', '" + dtrcpt + "', " + lblFeeCode.Text + ", " + lblheaderid.Text + ", " + selReasons[rea] + ", " + lblFeeCategory.Text + "," + ovrGvtAmt + ", " + finYearid + "," + collegecode1 + ",'0','" + ScholarTypeValue + "')";
                                                                                    d2.update_method_wo_parameter(ledInsQ, "Text");
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    #endregion
                                                                }
                                                                if (cb_CautionDep.Checked && curCautAmt > 0)
                                                                {
                                                                    updateRefundAmount(appnoNew, curCautAmt);
                                                                }
                                                            }
                                                            overallCashAmt += creditamt + exgridamt + schlamt + curCautAmt;

                                                            //Excess Process
                                                            if (cb_exfees.Checked && exgridamt > 0)
                                                            {
                                                                #region excess
                                                                string iscollected = "0";
                                                                string collecteddate = "";
                                                                if (PayMode == "1" || PayMode == "6" || PayMode == "7")
                                                                {
                                                                    iscollected = "1";
                                                                    collecteddate = (dtrcpt).ToString();
                                                                }
                                                                double paidAmt = exgridamt;

                                                                string credit = "0";
                                                                string TransType = "1";
                                                                string IsInstallmentPay = "0";
                                                                string InstallmentNo = "0";
                                                                string PayAt = "0";
                                                                string PayThrough = "0";
                                                                string IsArrearCollect = "0";
                                                                string ArearFinYearFK = "0";
                                                                string time = DateTime.Now.ToLongTimeString();
                                                                int rcptUpdate = 0;
                                                                if (!rcptCheck && txttemprcpt.Text.Trim() == "")//if edit receipt no setting available receipt no will not be update --txttemprcpt.Text.Trim() == ""
                                                                {
                                                                    rcptUpdate = 1;
                                                                    rcptCheck = true;
                                                                }
                                                                isFine = isFine == string.Empty ? isFine = "0" : isFine;
                                                                //string actualFinYearFk = finYearid;
                                                                InsertUpdateOK = getPaidDetails(dtrcpt.ToString("MM/dd/yyyy"), time, receiptno, memtype, appnoNew, Convert.ToString(lblFeeCode.Text), Convert.ToString(lblheaderid.Text), Convert.ToString(lblFeeCategory.Text), credit, paidAmt, PayMode, checkDDno, dtchkdd, newbankcode, branch, TransType, IsInstallmentPay, InstallmentNo, Convert.ToString(txt_remark.Text.Trim()), PayAt, PayThrough, IsArrearCollect, ArearFinYearFK, usercode, finYearid, Convert.ToString(rcptType), iscollected, dtrcpt.ToString("MM/dd/yyyy"), iscollected, dtrcpt.ToString("MM/dd/yyyy"), isFine, actualFinYearFk, schoolORclg, Convert.ToString(isHeaderwise), lastRecptNo, collegecode1, Convert.ToString(rcptUpdate), hdrSetPK, exgridamt, schlamt);
                                                                //if (rec == true)
                                                                //{
                                                                //    receiptno = d2.GetFunction("select transcode from ft_Findailytransaction where headerfk='" + Convert.ToString(lblheaderid.Text) + "' and ledgerfk='" + Convert.ToString(lblFeeCode.Text) + "' and feecategory='" + Convert.ToString(lblFeeCategory.Text) + "' and memtype='" + memtype + "' and paymode='" + PayMode + "' and finyearfk='" + finYearid + "' and app_no='" + appnoNew + "' and transdate='" + dtrcpt.ToString("MM/dd/yyyy") + "' and transtime='" + time + "'");
                                                                //}
                                                                #region Monthwise Insert
                                                                int monwisemon = 0;
                                                                int monWiseyea = 0;
                                                                Int64 feeallotpk = 0;

                                                                int.TryParse(lblmonWisemon.Text, out monwisemon);
                                                                int.TryParse(lblmonWiseyea.Text, out monWiseyea);
                                                                Int64.TryParse(lbl_FeeallotPk.Text, out feeallotpk);
                                                                if (monwisemon > 0 && monWiseyea > 0 && feeallotpk > 0)
                                                                {
                                                                    Int64 dailyTransPk = 0;
                                                                    string dailyTransPkQ = "SELECT dailyTransPk FROM  FT_FinDailyTransaction WHERE TransDate='" + dtrcpt + "' and TransCode='" + receiptno + "'  and  MemType= " + memtype + "  and  App_No=" + appnoNew + "  and  LedgerFK=" + lblFeeCode.Text + "  and  HeaderFK=" + lblheaderid.Text + "  and   FeeCategory=" + lblFeeCategory.Text + "  and  Credit=0  and  Debit=" + (exgridamt) + "  and  PayMode =" + PayMode + "  and  TransType=1  and FinYearFK=" + finYearid + "  and  Receipttype='" + rcptType + "'";
                                                                    Int64.TryParse(d2.GetFunction(dailyTransPkQ), out dailyTransPk);
                                                                    if (dailyTransPk > 0)
                                                                    {
                                                                        string insMonwiseQ = "INSERT INTO FT_FinDailyTransactionDetailMonthWise(DailyTransFK, MonthValue, YearValue, Debit, isCancel) values(" + dailyTransPk + ", " + monwisemon + ", " + monWiseyea + ", " + (exgridamt) + ", '0')";
                                                                        d2.update_method_wo_parameter(insMonwiseQ, "Text");

                                                                        //Aruna 8apr2017=================================
                                                                        //string upMonwiseQ = "update FT_FeeallotMonthly set PaidAmount=ISNULL(PaidAmount,0)+" + (exgridamt) + ",BalAmount=ISNULL(BalAmount,0)-" + (exgridamt) + " where FeeAllotPK=" + feeallotpk + "  and  AllotMonth=" + monwisemon + " and  AllotYear=" + monWiseyea + " and Finyearfk= " + finYearid + "";
                                                                        string upMonwiseQ = "update FT_FeeallotMonthly set PaidAmount=ISNULL(PaidAmount,0)+" + (exgridamt) + ",BalAmount=ISNULL(BalAmount,0)-" + (exgridamt) + " where FeeAllotPK=" + feeallotpk + "  and  AllotMonth=" + monwisemon + " and  AllotYear=" + monWiseyea + "";
                                                                        //===============================================
                                                                        d2.update_method_wo_parameter(upMonwiseQ, "Text");
                                                                    }
                                                                }
                                                                #endregion

                                                                string updateExcess = " UPDATE FT_ExcessDet SET ExcessTransDate='" + dtrcpt + "', TransTime= '" + DateTime.Now.ToShortTimeString() + "' , AdjAmt=isnull(AdjAmt,0.00)+" + exgridamt + ", BalanceAmt=isnull(BalanceAmt,0.00)-" + exgridamt + " WHERE  App_No=" + appnoNew + " ";
                                                                d2.update_method_wo_parameter(updateExcess, "Text");

                                                                if (excessTypeValue == 2)
                                                                {
                                                                    string ledUpQ = "update FT_ExcessLedgerDet set AdjAmt=AdjAmt+" + exgridamt + ", BalanceAmt=isnull(BalanceAmt,0)-" + exgridamt + ",Feecategory=" + lblFeeCategory.Text + ",Finyearfk=" + finYearid + " where HeaderFK ='" + lblheaderid.Text + "' and LedgerFK ='" + lblFeeCode.Text + "' ";
                                                                    d2.update_method_wo_parameter(ledUpQ, "Text");

                                                                }
                                                                #endregion
                                                            }
                                                        }
                                                    }

                                                    #endregion
                                                }

                                                #region Multiple Scholarship Update
                                                int mulSchlSelec = 0;
                                                mulSchlSelec = GetSelectedItemsValueList(cblSchlReason).Count;

                                                if (mulSchlSelec > 0 && mulSchlAmount > 0)
                                                {
                                                    //foreach (GridViewRow row in grid_Details.Rows)
                                                    //{
                                                    //    CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                    //    if (!chkOkPay.Checked)
                                                    //        continue;

                                                    //    TextBox txtTotalamt = (TextBox)row.FindControl("txt_tot_amt");
                                                    //    TextBox txtPaidamt = (TextBox)row.FindControl("txt_paid_amt");
                                                    //    TextBox txtBalamt = (TextBox)row.FindControl("txt_bal_amt");
                                                    //    TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                    //    TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                    //    TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");

                                                    //    Label lblFeeCategory = (Label)row.FindControl("lbl_textCode");
                                                    //    Label lblFeeCode = (Label)row.FindControl("lbl_feecode");
                                                    //    Label lblheaderid = (Label)row.FindControl("lbl_hdrid");

                                                    //    double creditamt = 0;
                                                    //    double exgridamt = 0;
                                                    //    double schlamt = 0;
                                                    //    if (txtTobePaidamt.Text != "" || txtExcessGridAmt.Text != "" || txtScholAmt.Text != "")
                                                    //    {
                                                    //        if (txtTobePaidamt.Text == "")
                                                    //        {
                                                    //            txtTobePaidamt.Text = "0";
                                                    //        }
                                                    //        creditamt = Convert.ToDouble(txtTobePaidamt.Text);

                                                    //        if (cb_exfees.Checked)
                                                    //        {
                                                    //            double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                    //        }
                                                    //        //creditamt += exgridamt;
                                                    //        overallExcessFees += exgridamt;
                                                    //        if (cb_govt.Checked)
                                                    //        {
                                                    //            double.TryParse(txtScholAmt.Text, out schlamt);
                                                    //        }
                                                    //        //creditamt += exgridamt;
                                                    //        // overallExcessFees += schlamt;
                                                    //        mulSchlAmount += schlamt;
                                                    //    }

                                                    //    if (exgridamt > 0 || creditamt > 0 || schlamt > 0)
                                                    //    {

                                                    //        if (creditamt > 0 || schlamt > 0)
                                                    //        {
                                                    //            string iscollected = "0";
                                                    //            string collecteddate = "";
                                                    //            if (PayMode == "1")
                                                    //            {
                                                    //                iscollected = "1";
                                                    //                collecteddate = (dtrcpt).ToString();
                                                    //            }else if(PayMode=="3")
                                                    //{
                                                    //  iscollected = isCollectedForDD();
                                                    // }
                                                    //            string insertDebit = "INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate) VALUES('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "','" + receiptno + "', " + memtype + ", " + appnoNew + ", " + lblFeeCode.Text + ", " + lblheaderid.Text + ", " + lblFeeCategory.Text + ", 0, " + (creditamt + schlamt) + ", " + PayMode + ", '" + checkDDno + "', '" + dtchkdd + "', '" + newbankcode + "','" + branch + "', 1, '0', 0, '"+txt_remark.Text.Trim()+"', '0', '0', '0', 0, " + usercode + ", " + finYearid + ",'" + rcptType + "','" + iscollected + "','" + collecteddate + "')";

                                                    //            d2.update_method_wo_parameter(insertDebit, "Text");
                                                    //        }
                                                    //        overallCashAmt += creditamt + exgridamt + schlamt;



                                                    //        //Update process
                                                    //        if (lblFeeCategory.Text.Trim() != "-1")
                                                    //        {
                                                    //            string selectquery = " select  isnull(TotalAmount,0) as TotalAmount,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount  from FT_FeeAllot where App_No =" + appnoNew + " and feecategory ='" + lblFeeCategory.Text + "' and ledgerfk ='" + lblFeeCode.Text + "'";

                                                    //            DataSet dsPrevAMount = new DataSet();
                                                    //            dsPrevAMount = d2.select_method_wo_parameter(selectquery, "Text");

                                                    //                    double total = 0;
                                                    //                    double paidamt = 0;
                                                    //                    double balamt = 0;

                                                    //                    total = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["TotalAmount"]);

                                                    //                    if (total > 0)
                                                    //                    {
                                                    //                        paidamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["PaidAmount"]);
                                                    //                        balamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["BalAmount"]);

                                                    //                        balamt = (total - paidamt);

                                                    //                        string updatequery = "update FT_FeeAllot set PaidAmount=isnull(PaidAmount,0) +" + (creditamt + schlamt + exgridamt) + " ,BalAmount =" + (balamt - (creditamt + schlamt + exgridamt)) + ",FromGovtAmt=isnull(FromGovtAmt,0)-" + schlamt + "  where App_No =" + appnoNew + " and feecategory ='" + lblFeeCategory.Text + "' and ledgerfk ='" + lblFeeCode.Text + "'";
                                                    //                        d2.update_method_wo_parameter(updatequery, "Text");

                                                    //                        InsertUpdateOK = true;
                                                    //                    }


                                                    //        }
                                                    //    }
                                                    //}
                                                }
                                                #endregion

                                                #region Ledgerwise Excess Fees Update

                                                if (cb_exfees.Checked && overallExcessFees > 0 && excessTypeValue == 1)
                                                {
                                                    string insExcessRcpt = "insert into ft_excessReceiptdet (app_no , amount , receiptno ,rcptdate,ledgerfk,excesstype ) values ('" + appnoNew + "', '" + overallExcessFees + "', '" + receiptno + "','" + dtrcpt + "','0','2')";
                                                    d2.update_method_wo_parameter(insExcessRcpt, "Text");
                                                    //string ledExcQ = "select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt,HeaderFk,LedgerFk from FT_ExcessLedgerDet where isnull(BalanceAmt,0)>0 ";
                                                    string ledExcQ = "select sum(isnull(el.ExcessAmt,0)-isnull(el.AdjAmt,0)) as BalanceAmt,el.HeaderFk,el.LedgerFk from FT_ExcessLedgerDet el,FT_ExcessDet e where (isnull(el.ExcessAmt,0)-isnull(el.AdjAmt,0))>0 and ExcessDetFk=ExcessDetpk and app_no='" + appnoNew + "' group by HeaderFk,LedgerFk ";
                                                    DataSet dsExLedge = new DataSet();
                                                    dsExLedge = d2.select_method_wo_parameter(ledExcQ, "Text");
                                                    if (dsExLedge.Tables.Count > 0)
                                                    {
                                                        if (dsExLedge.Tables[0].Rows.Count > 0)
                                                        {
                                                            for (int exc = 0; exc < dsExLedge.Tables[0].Rows.Count; exc++)
                                                            {
                                                                double curbal = 0;
                                                                string curHdr = Convert.ToString(dsExLedge.Tables[0].Rows[exc][1]);
                                                                string curlgr = Convert.ToString(dsExLedge.Tables[0].Rows[exc][2]);
                                                                curbal = Convert.ToDouble(dsExLedge.Tables[0].Rows[exc][0]);
                                                                double curAdjamt = 0;
                                                                if (curbal <= overallExcessFees)
                                                                {
                                                                    curAdjamt = curbal;
                                                                    overallExcessFees -= curbal;
                                                                }
                                                                else
                                                                {
                                                                    //curAdjamt = curbal - overallExcessFees;
                                                                    curAdjamt = overallExcessFees;
                                                                    curbal = curAdjamt;
                                                                    overallExcessFees = 0;
                                                                }
                                                                if (curAdjamt > 0)
                                                                {
                                                                    string ledUpQ = "update FT_ExcessLedgerDet set AdjAmt=isnull(AdjAmt,'0')+" + curAdjamt + ", BalanceAmt=isnull(BalanceAmt,'0')-" + curAdjamt + ",Feecategory=" + excessFeecat + ",Finyearfk=" + finYearid + " where HeaderFK ='" + curHdr + "' and LedgerFK ='" + curlgr + "'";
                                                                    d2.update_method_wo_parameter(ledUpQ, "Text");
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                #endregion

                                                #region Denomination
                                                //update receipt
                                                if (InsertUpdateOK)
                                                {
                                                    if (mode == "cash")
                                                    {
                                                        string n2000 = "0";
                                                        string n1000 = "0";
                                                        string n500 = "0";
                                                        string n200 = "0";
                                                        string n100 = "0";
                                                        string n50 = "0";
                                                        string n20 = "0";
                                                        string n10 = "0";
                                                        string n5 = "0";
                                                        string n2 = "0";
                                                        string coin = "0";
                                                        string tot = "0";
                                                        int j = 0;
                                                        foreach (GridViewRow row in grid_Cash.Rows)
                                                        {
                                                            TextBox txtTotalamt = (TextBox)row.FindControl("txtRs");
                                                            TextBox txtTotalamt1 = (TextBox)row.FindControl("txtSum");

                                                            switch (j)
                                                            {
                                                                case 0:
                                                                    n2000 = txtTotalamt.Text;
                                                                    break;
                                                                case 1:
                                                                    n1000 = txtTotalamt.Text;
                                                                    break;
                                                                case 2:
                                                                    n500 = txtTotalamt.Text;
                                                                    break;
                                                                case 3:
                                                                    n200 = txtTotalamt.Text;
                                                                    break;
                                                                case 4:
                                                                    n100 = txtTotalamt.Text;
                                                                    break;
                                                                case 5:
                                                                    n50 = txtTotalamt.Text;
                                                                    break;
                                                                case 6:
                                                                    n20 = txtTotalamt.Text;
                                                                    break;
                                                                case 7:
                                                                    n10 = txtTotalamt.Text;
                                                                    break;
                                                                case 8:
                                                                    n5 = txtTotalamt.Text;
                                                                    break;
                                                                case 9:
                                                                    n2 = txtTotalamt.Text;
                                                                    break;
                                                                case 10:
                                                                    coin = txtTotalamt.Text;
                                                                    break;
                                                                case 11:
                                                                    tot = txtTotalamt1.Text;
                                                                    break;

                                                            }
                                                            j++;

                                                        }
                                                        if (n1000 != "" || n2000 != "" || tot != "")
                                                        {
                                                            string insertDenom = "INSERT INTO denomination(roll_admit,cal_date,rcpt_no,user_code,studorothers,n2000,n1000,n500,n200,n100,n50,n20,n10,n5,c2,c1,Total,Return_amt) values('" + appnoNew + "','" + dtrcpt + "','" + receiptno + "','" + usercode + "'," + memtype + ",'" + n2000 + "'," + n1000 + "," + n500 + "," + n200 + "," + n100 + "," + n50 + "," + n20 + "," + n10 + "," + n5 + "," + n2 + "," + coin + "," + tot + "," + txt_return.Text + ")";
                                                            d2.update_method_wo_parameter(insertDenom, "Text");
                                                        }
                                                    }
                                                #endregion

                                                    #region update CashTransaction
                                                    if ((rb_cash.Checked && overallCashAmt > 0) || (chk_rcptMulmode.Checked && overallCashAmt > 0))
                                                    {
                                                        string upCashTrans = "  if exists (select * from FT_FinCashTransaction where TransDate ='" + dtrcpt + "' and FinYearFK ='" + finYearid + "' and EntryUserCode='" + usercode + "') update FT_FinCashTransaction set TransTime ='" + DateTime.Now.ToLongTimeString() + "', Debit =isnull(Debit,0) +" + overallCashAmt + " where FinYearFK ='" + finYearid + "' and TransDate ='" + dtrcpt + "' and EntryUserCode='" + usercode + "' else insert into FT_FinCashTransaction (TransDate,TransTime,Debit,FinYearFK,EntryUserCode) values ('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "'," + overallCashAmt + ",'" + finYearid + "','" + usercode + "')";
                                                        d2.update_method_wo_parameter(upCashTrans, "Text");
                                                    }
                                                    //else if ((rb_cash.Checked) || (chk_rcptMulmode.Checked))
                                                    //{
                                                    //    string upCashTrans = "Query : --  if exists (select * from FT_FinCashTransaction where TransDate ='" + dtrcpt + "' and FinYearFK ='" + finYearid + "' and EntryUserCode='" + usercode + "') update FT_FinCashTransaction set TransTime ='" + DateTime.Now.ToLongTimeString() + "', Debit =isnull(Debit,0) +" + overallCashAmt + " where FinYearFK ='" + finYearid + "' and TransDate ='" + dtrcpt + "' and EntryUserCode='" + usercode + "' else insert into FT_FinCashTransaction (TransDate,TransTime,Debit,FinYearFK,EntryUserCode) values ('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "'," + overallCashAmt + ",'" + finYearid + "','" + usercode + "') -- QueryEnds.<br> Conditions : overallCashAmt : " + overallCashAmt + " , rb_cash.Checked : " + rb_cash.Checked + " , chk_rcptMulmode.Checked : " + chk_rcptMulmode.Checked + " , DateTIme : " + DateTime.Now.ToLongTimeString() + ", ReceiptNo : " + receiptno + "";
                                                    //    Exception ex1 = new Exception();
                                                    //    d2.sendErrorMail(ex1, collegecode1, upCashTrans + "<br>ChallanReceipt.aspx");
                                                    //}
                                                    #endregion

                                                    #region Update Receipt No
                                                    if (save1 != 5)
                                                    {
                                                        #region Admission Number Generation
                                                        if (isAdmNoGenSettingsOn)
                                                        {
                                                            string app_formNo = string.Empty;
                                                            if (isAdmNoNotGenerated(appnoNew, admNoGenbatch, ref app_formNo))
                                                            {
                                                                string degreecode = d2.GetFunction("select degree_code from applyn where app_no='" + appnoNew + "'");
                                                                string generatedAdmNo = string.Empty;
                                                                if (admissionNoGeneration())
                                                                {
                                                                    generatedAdmNo = generateAdmissionNo(collegecode1,
   degreecode, admNoGenbatch).Trim();
                                                                }
                                                                if (generatedAdmNo == string.Empty)
                                                                {
                                                                    generatedAdmNo = app_formNo;
                                                                }
                                                                Roll_admit = generatedAdmNo;

                                                                d2.select_method_wo_parameter("if exists(select * from Registration where App_No='" + appnoNew + "' and college_code='" + collegecode1 + "') update registration set roll_admit='" + generatedAdmNo + "' where app_no='" + appnoNew + "'  and college_code='" + collegecode1 + "' else insert into Registration (App_No,Adm_Date,Roll_Admit,Roll_No,RollNo_Flag,Reg_No,Stud_Name,Batch_Year,degree_code,college_code,CC,DelFlag,Exam_Flag,Current_Semester,mode)values('" + appnoNew + "','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','" + generatedAdmNo + "','" + app_formNo + "','1','" + app_formNo + "','" + studname + "','" + admNoGenbatch + "','" + degreecode + "','" + collegecode1 + "','0','0','OK','" + curSemEx + "','" + StudMode + "')  ", "Text");
                                                                d2.select_method_wo_parameter("update applyn set is_enroll='2' where app_no='" + appnoNew + "'  and college_code='" + collegecode1 + "'", "Text");

                                                            }
                                                        }
                                                        #endregion
                                                    }
                                                    #endregion

                                                    #region Add New Excess Fees
                                                    if (excessOk)
                                                    {
                                                        //NEW
                                                        bool exInsOk = false;
                                                        double exAmtOvall = 0;
                                                        foreach (GridViewRow row in gridExcess.Rows)
                                                        {
                                                            //if (row.RowIndex != gridExcess.Rows.Count - 1)
                                                            //{
                                                            CheckBox cb = (CheckBox)row.Cells[1].FindControl("cb_excesspop");
                                                            if (cb.Checked)
                                                            {
                                                                TextBox txtexAmt = (TextBox)row.FindControl("txt_ExAmtpop");
                                                                if (txtexAmt.Text != "")
                                                                {
                                                                    if (Convert.ToDouble(txtexAmt.Text) > 0)
                                                                    {
                                                                        //To chk whole insertion
                                                                        exInsOk = true;
                                                                        exAmtOvall += Convert.ToDouble(txtexAmt.Text);
                                                                    }
                                                                }
                                                                //}
                                                            }
                                                        }
                                                        if (exInsOk)
                                                        {
                                                            //string insOverallQ = "INSERT INTO FT_ExcessDet (ExcessTransDate,TransTime ,DailyTransCode,App_No ,MemType ,ExcessType ,ExcessAmt,AdjAmt,BalanceAmt,FinYearFK ) VALUES ('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "' ,'" + receiptno + "', " + appnoNew + " , " + memtype + " , 1 ," + exAmtOvall + ",0," + exAmtOvall + "," + finYearid + ")";
                                                            string adVanceT = "0";
                                                            string acfinyear = "";
                                                            string advanceType = " and ex_journalentry='0'";
                                                            if (cbAdvance.Checked)
                                                            {
                                                                advanceType = " and ex_journalentry='1'";
                                                                adVanceT = "1";
                                                            }
                                                            if (checkSchoolSetting() == 0)
                                                            {
                                                                acfinyear = Convert.ToString(finexcess.SelectedItem.Value);
                                                            }
                                                            string insOverallQ = "if exists (select * from FT_ExcessDet where App_No ='" + appnoNew + "' and dailytranscode='" + receiptno + "' and ExcessType ='1'" + advanceType + " and Ex_paymode='" + PayMode + "' ) update FT_ExcessDet set ExcessTransDate='" + dtrcpt + "',TransTime='" + DateTime.Now.ToLongTimeString() + "' ,DailyTransCode='" + receiptno + "' ,ExcessAmt=isnull(ExcessAmt,0)+" + exAmtOvall + ",BalanceAmt =isnull(BalanceAmt,0)+" + exAmtOvall + ",Feecategory=" + excessFeecat + " where App_No ='" + appnoNew + "' and dailytranscode='" + receiptno + "'  and ExcessType ='1' " + advanceType + " and Ex_paymode='" + PayMode + "' else INSERT INTO FT_ExcessDet (ExcessTransDate,TransTime ,DailyTransCode,App_No ,MemType ,ExcessType ,ExcessAmt,AdjAmt,BalanceAmt,FinYearFK ,Feecategory,ex_journalentry,Ex_paymode,actualfinyearfk) VALUES ('" + dtrcpt + "','" + DateTime.Now.ToLongTimeString() + "' ,'" + receiptno + "', " + appnoNew + " , " + memtype + " , 1 ," + exAmtOvall + ",0," + exAmtOvall + "," + finYearid + "," + excessFeecat + ",'" + adVanceT + "','" + PayMode + "','" + acfinyear + "')";
                                                            //and FinYearFK ='" + finYearid + "' and FinYearFK ='" + finYearid + "'
                                                            d2.update_method_wo_parameter(insOverallQ, "Text");

                                                            string ExcessDetFK = d2.GetFunction("select distinct ExcessDetPK from FT_ExcessDet where App_No=" + appnoNew + " and dailytranscode='" + receiptno + "' and ExcessType ='1' " + advanceType + " and Ex_paymode='" + PayMode + "'");
                                                            //and FinYearFK ='" + finYearid + "'
                                                            foreach (GridViewRow row in gridExcess.Rows)
                                                            {
                                                                //if (row.RowIndex != gridExcess.Rows.Count - 1)
                                                                //{
                                                                CheckBox cb = (CheckBox)row.Cells[1].FindControl("cb_excesspop");
                                                                if (cb.Checked)
                                                                {
                                                                    Label hdrid = (Label)row.FindControl("lbl_headeridEx");
                                                                    Label hdrname = (Label)row.FindControl("lbl_headpEx");
                                                                    Label lgeid = (Label)row.FindControl("lbl_ledgeridEx");
                                                                    Label lgename = (Label)row.FindControl("lbl_ledgerEx");
                                                                    Label catid = (Label)row.FindControl("lbl_categoryidEx");
                                                                    Label catname = (Label)row.FindControl("lbl_categoryEx");
                                                                    TextBox txtexAmt = (TextBox)row.FindControl("txt_ExAmtpop");
                                                                    if (txtexAmt.Text != "")
                                                                    {
                                                                        if (Convert.ToDouble(txtexAmt.Text) > 0)
                                                                        {
                                                                            double exAmtVal = Convert.ToDouble(txtexAmt.Text);

                                                                            //string insQ = "INSERT INTO FT_ExcessLedgerDet(HeaderFK, LedgerFK ,ExcessAmt , AdjAmt ,BalanceAmt , ExcessDetFK) VALUES (" + hdrid.Text + "," + lgeid.Text + " ," + exAmtVal + " ,0 , " + exAmtVal + " , " + ExcessDetFK + ")";
                                                                            string insQ = " if exists (select * from FT_ExcessLedgerDet where HeaderFK ='" + hdrid.Text + "' and LedgerFK ='" + lgeid.Text + "' and ExcessDetFK='" + ExcessDetFK + "' and Feecategory=" + excessFeecat + " ) update FT_ExcessLedgerDet set ExcessAmt=isnull(ExcessAmt,0)+ " + exAmtVal + "   ,BalanceAmt=isnull(BalanceAmt,0)+ " + exAmtVal + ",Finyearfk=" + finYearid + ",Feecategory=" + excessFeecat + "  where  HeaderFK ='" + hdrid.Text + "' and LedgerFK ='" + lgeid.Text + "' and ExcessDetFK='" + ExcessDetFK + "' else  INSERT INTO FT_ExcessLedgerDet(HeaderFK, LedgerFK ,ExcessAmt , AdjAmt ,BalanceAmt , ExcessDetFK,Finyearfk,Feecategory) VALUES (" + hdrid.Text + "," + lgeid.Text + " ," + exAmtVal + " ,0, " + exAmtVal + " , " + ExcessDetFK + "," + finYearid + "," + excessFeecat + ") ";//and Finyearfk=" + finYearid + "

                                                                            d2.update_method_wo_parameter(insQ, "Text");

                                                                            string insExcessRcpt = "insert into ft_excessReceiptdet (app_no , amount , receiptno ,rcptdate,ledgerfk,excesstype,Ex_Rpt_paymode ) values ('" + appnoNew + "', '" + exAmtVal + "', '" + receiptno + "','" + dtrcpt + "','" + lgeid.Text + "','1','" + PayMode + "')";
                                                                            d2.update_method_wo_parameter(insExcessRcpt, "Text");
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            //}
                                                        }
                                                    }
                                                    #endregion

                                                #endregion

                                                    if (modeCash)
                                                    {
                                                        modeMulti += "Cash,";
                                                    }
                                                    if (modeChk)
                                                    {
                                                        modeMulti += "Cheque,";
                                                    }
                                                    if (modeDD)
                                                    {
                                                        modeMulti += "DD,";
                                                    }
                                                    if (modeCard)
                                                    {
                                                        modeMulti += "Card,";
                                                    }
                                                    if (modeNEFT)
                                                    {
                                                        modeMulti += "NEFT";
                                                    }
                                                    if (modechallan)
                                                    {
                                                        modeMulti += "Challan";
                                                    }
                                                    modeMulti = modeMulti.TrimEnd(',');

                                                    //Print Region
                                                    string outRoll = rollno;
                                                    if (rdo_receipt.Checked && InsertUpdateOK)
                                                    {
                                                        try
                                                        {
                                                            if (save1 == 0 || save1 == 1)
                                                            {
                                                                //For Mcc &  Others
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))// && txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    try
                                                                    {

                                                                        bool imgdivVisible = false;
                                                                        bool contentVisible = false;
                                                                        bool CreateReceiptOK = false;

                                                                        FormatIGeneralChallanReceipt rcpt = new FormatIGeneralChallanReceipt();
                                                                        // FormatoneGeneralChallanReceipt rcpt = new FormatoneGeneralChallanReceipt();
                                                                        string szFile = rcpt.generateOriginal(receiptno.Trim(), txt_date.Text.Trim(), txt_dept.Text.Trim(), rb_cash, rb_cheque, rb_dd, rb_card, rb_NEFT, collegecode1, usercode, ref lastRecptNo, ref accidRecpt, rbl_rollnoNew, rbl_rollno, appnoNew, outRoll, txtDept_staff, rollno, app_formno, Regno, studname, grid_Details, BalanceType, dtMulBnkDetails, chk_rcptMulmode, modeMulti, checkDDno, newbankname, branch, txt_date1, txt_remark, ref  contentVisible, ref  CreateReceiptOK, ref  imgdivVisible, ref  lbl_alert, cb_CautionDep, cb_govt, cb_exfees);
                                                                        imgAlert.Visible = imgdivVisible;

                                                                        if (CreateReceiptOK)
                                                                        {
                                                                            Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");
                                                                            //contentDiv.Visible = true;
                                                                            //ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                                                                        }

                                                                    }
                                                                    catch { imgAlert.Visible = true; }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }
                                                            else if (save1 == 2)
                                                            {
                                                                //For UIT
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))// && txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    try
                                                                    {

                                                                        bool imgdivVisible = false;
                                                                        bool contentVisible = false;
                                                                        bool CreateReceiptOK = false;

                                                                        FormatIIGeneralChallanReceipt rcpt = new FormatIIGeneralChallanReceipt();
                                                                        string szFile = rcpt.generateOriginal(receiptno.Trim(), txt_date.Text.Trim(), txt_dept.Text.Trim(), rb_cash, rb_cheque, rb_dd, rb_card, rb_NEFT, collegecode1, usercode, ref lastRecptNo, ref accidRecpt, rbl_rollnoNew, rbl_rollno, appnoNew, outRoll, txtDept_staff, rollno, app_formno, Regno, studname, grid_Details, BalanceType, dtMulBnkDetails, chk_rcptMulmode, modeMulti, checkDDno, newbankname, branch, txt_date1, txt_remark, ref  contentVisible, ref  CreateReceiptOK, ref  imgdivVisible, ref  lbl_alert, cb_CautionDep, cb_govt, cb_exfees, mode);
                                                                        imgAlert.Visible = imgdivVisible;

                                                                        if (CreateReceiptOK)
                                                                        {
                                                                            Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");
                                                                            //contentDiv.Visible = true;
                                                                            //ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                                                                        }

                                                                    }
                                                                    catch { imgAlert.Visible = true; }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }
                                                            else if (save1 == 3 || save1 == 7 || save1 == 8 || save1 == 15 || save1 == 9)
                                                            {
                                                                //For HIET-3,Gnanamani-7,VRS-8,NEC-9
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))// && txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    //Basic Data
                                                                    //string rollno = txt_rollno.Text.Trim();
                                                                    //    string recptNo = txt_rcptno.Text.Trim();
                                                                    string recptNo = string.Empty;
                                                                    //modified by sudhagar editable receipt no
                                                                    tempRcpt = Convert.ToString(txttemprcpt.Text.Trim());
                                                                    if (!string.IsNullOrEmpty(tempRcpt))
                                                                        recptNo = tempRcpt;
                                                                    else
                                                                        recptNo = txt_rcptno.Text.Trim();
                                                                    string recptDt = txt_date.Text.Trim();
                                                                    //string studname = txt_name.Text.Trim();
                                                                    string course = txt_dept.Text.Trim();
                                                                    string batchYrSem = string.Empty;
                                                                    string acaYear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanAcademicYear' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                                                                    try
                                                                    {
                                                                        acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                                                                    }
                                                                    catch { }
                                                                    try
                                                                    {
                                                                        course = course.Split('-')[0];
                                                                    }
                                                                    catch { course = ""; }
                                                                    // string mode = string.Empty;

                                                                    if (rb_cash.Checked)
                                                                    {
                                                                        mode = "Cash";
                                                                    }
                                                                    else if (rb_cheque.Checked)
                                                                    {
                                                                        mode = "Cheque";
                                                                    }
                                                                    else if (rb_dd.Checked)
                                                                    {
                                                                        mode = "DD";
                                                                    }
                                                                    else if (rb_card.Checked)
                                                                    {
                                                                        mode = "Card";
                                                                    }
                                                                    else if (rb_NEFT.Checked)
                                                                    {
                                                                        mode = "NEFT";
                                                                    }
                                                                    else if (rb_Challan.Checked)
                                                                    {
                                                                        mode = "Challan";
                                                                    }
                                                                    //Fields to print
                                                                    string queryPrint1 = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                                    ds.Clear();
                                                                    ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                                    if (ds.Tables.Count > 0)
                                                                    {
                                                                        if (ds.Tables[0].Rows.Count > 0)
                                                                        {

                                                                            //Footer Div Values

                                                                            byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                            byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                            byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);
                                                                            byte narration = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsNarration"]);

                                                                            //Document Settings
                                                                            contentDiv.InnerHtml = "";
                                                                            StringBuilder sbHtml = new StringBuilder();

                                                                            string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " ";
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 3)
                                                                                {
                                                                                    colquery += " select a.Current_Semester,a.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,a.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,'' Boarding,a.mother,a.parent_name,ISNULL( type,'') as type,'' Sections  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.App_No='" + appnoNew + "' and d.college_code=" + collegecode1 + "";
                                                                                }
                                                                                else
                                                                                {
                                                                                    colquery += " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,isnull(r.Sections,'') as Sections from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + " ";
                                                                                }
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                colquery += "  select appl_id ,h.dept_name,h.dept_acronym,h.dept_code,s.staff_name,s.staff_code,a.father_name,t.stftype as staff_type  from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where s.appl_no =a.appl_no and s.staff_code =t.staff_code and t.dept_code =h.dept_code and d.desig_code =t.desig_code and s.college_code =h.college_code and d.collegeCode =s.college_code and latestrec ='1' and appl_id ='" + appnoNew + "' and s.college_Code=" + collegecode1 + "  ";
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                            {
                                                                                colquery += " SELECT VendorContactPK, VenContactType, VenContactName, VenContactDesig, VenContactDept, VendorPhoneNo, VendorExtNo, VendorMobileNo, VendorEmail, VendorFK FROM      IM_VendorContactMaster WHERE VendorContactPK = '" + appnoNew + "' ";
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                            {
                                                                                colquery += " SELECT VendorCode,vendorname,VendorMobileNo,VendorAddress,VendorCity,VendorCompName,VendorType  from co_vendormaster  WHERE VendorPK = '" + appnoNew + "' ";
                                                                                outRoll = string.Empty;
                                                                            }
                                                                            string collegename = "";
                                                                            string add1 = "";
                                                                            string add2 = "";
                                                                            string add3 = "";
                                                                            string univ = "";
                                                                            string deg = "";
                                                                            string degAcr = "";
                                                                            string cursem = "";
                                                                            string batyr = "";
                                                                            string seatty = "";
                                                                            string board = "";
                                                                            string mothe = "";
                                                                            string fathe = "";
                                                                            string sec = "";
                                                                            double deductionamt = 0;
                                                                            ds.Clear();
                                                                            ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                            if (ds.Tables.Count > 0)
                                                                            {
                                                                                if (ds.Tables[0].Rows.Count > 0)
                                                                                {
                                                                                    collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                                    add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                                    add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                                    add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                                }
                                                                                if (ds.Tables[1]
                                                                                    .Rows.Count > 0)
                                                                                {
                                                                                    if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                    {
                                                                                        //if (degACR == 0)
                                                                                        //{
                                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                                        //}
                                                                                        //else
                                                                                        //{
                                                                                        degAcr = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                        //}
                                                                                        cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                        batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                                        board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                        mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                                        //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                    {
                                                                                        //if (degACR == 0)
                                                                                        //{
                                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_name"]);
                                                                                        //}
                                                                                        //else
                                                                                        //{
                                                                                        degAcr = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                        //}
                                                                                        //cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                        //batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["staff_type"]);
                                                                                        //board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                        //mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["father_name"]);
                                                                                        //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                    {
                                                                                        deg = " - ";
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                                    {
                                                                                        deg = " - ";
                                                                                        //regno = 0;
                                                                                        //year = 0;
                                                                                        //degNam = 0;
                                                                                        //degACR = 0;
                                                                                    }
                                                                                }

                                                                                if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                {
                                                                                    course = txtDept_staff.Text.Trim();
                                                                                }
                                                                            }
                                                                            if (deg.Split('-').Length < 2)
                                                                            {
                                                                                deg = " - ";
                                                                            }
                                                                            string degString = string.Empty;
                                                                            //Line3
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                degString = deg.Split('-')[0].ToUpper();
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                degString = deg;
                                                                            }

                                                                            string deptstring = string.Empty;
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                deptstring = deg.Split('-')[1].ToUpper();
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {

                                                                            }
                                                                            #region multimode
                                                                            string ddnar = string.Empty;
                                                                            string ddnew = string.Empty;
                                                                            if (chk_rcptMulmode.Checked)
                                                                            {
                                                                                mode = modeMulti;
                                                                                for (int z = 0; z < dtMulBnkDetails.Rows.Count; z++)
                                                                                {
                                                                                    ddnar += "\nNo : " + dtMulBnkDetails.Rows[z][1] + " Bank : " + dtMulBnkDetails.Rows[z][0] + "\nBranch :" + dtMulBnkDetails.Rows[z][2] + " Date  : " + dtMulBnkDetails.Rows[z][3] + " Amount : " + dtMulBnkDetails.Rows[z][4] + "/-";
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if (!rb_cash.Checked)
                                                                                {
                                                                                    if (rb_dd.Checked == true)
                                                                                    {
                                                                                        ddnar = "\nDDNo : " + checkDDno + " Bank : " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                                        ddnew = "&nbsp;&nbsp;&nbsp;\nDDNo : " + checkDDno + "&nbsp;&nbsp;&nbsp;Bank : " + newbankname + "&nbsp;&nbsp;&nbsp;\nBranch :" + branch + "&nbsp;&nbsp;&nbsp;Date  : " + txt_date1.Text.ToString();
                                                                                    }
                                                                                    else if (rb_cheque.Checked == true)
                                                                                    {
                                                                                        ddnar = "\nChequeNo : " + checkDDno + " Bank : " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                                        ddnew = "&nbsp;&nbsp;&nbsp;\nChequeNo : " + checkDDno + "&nbsp;&nbsp;&nbsp;Bank : " + newbankname + "&nbsp;&nbsp;&nbsp;\nBranch :" + branch + "&nbsp;&nbsp;&nbsp;Date  : " + txt_date1.Text.ToString();
                                                                                    }
                                                                                    else if (rb_card.Checked == true)
                                                                                    {
                                                                                        ddnar = "\nCard : " + newbankname;
                                                                                        ddnew = "\nCard : " + newbankname;
                                                                                        //ddnar = "\nCard : " + checkDDno + " Bank : " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                                        //ddnew = "&nbsp;&nbsp;&nbsp;\nChequeNo : " + checkDDno + "&nbsp;&nbsp;&nbsp;Bank : " + newbankname + "&nbsp;&nbsp;&nbsp;\nBranch :" + branch + "&nbsp;&nbsp;&nbsp;Date  : " + txt_date1.Text.ToString();
                                                                                    }
                                                                                    else if (rb_Challan.Checked == true)
                                                                                    {
                                                                                        if (checkDDno != "")
                                                                                        {
                                                                                            ddnar = "\nChallanNo : " + checkDDno + " Bank : " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                                            ddnew = "\nChallanNo : " + checkDDno + "\nBank : " + newbankname + "\nBranch :" + branch + "\nDate  : " + txt_date1.Text.ToString();
                                                                                        }
                                                                                        else//modified 24.05.2018
                                                                                        {
                                                                                            ddnar = "\nBank : " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                                            ddnew = "\nBank : " + newbankname + "\nBranch :" + branch + "\nDate  : " + txt_date1.Text.ToString();
                                                                                        }
                                                                                    }
                                                                                    else if (rb_NEFT.Checked == true)
                                                                                    {
                                                                                        ddnar = "\nNEFT NO : " + txt_NEFTNO.Text;
                                                                                        ddnew = "&nbsp;&nbsp;\nNEFT NO : " + txt_NEFTNO.Text;
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    ddnar = "\nCash ";
                                                                                }
                                                                            }
                                                                            ddnar += "\n Remarks:" + txt_remark.Text.Trim();
                                                                            #endregion

                                                                            if (save1 == 3)
                                                                            {
                                                                                //For Hiet
                                                                                HietChallanReceipt rcptObj = new HietChallanReceipt(appnoNew, outRoll, collegecode1, usercode, Convert.ToByte(rcptType), studname, recptDt, DateTime.Now.ToLongTimeString(), recptNo, cursem, deg.Split('-')[0].ToUpper(), deg.Split('-')[1].ToUpper(), ddnar);//(modeMulti + ddnar)
                                                                                contentDiv.InnerHtml += ((StringBuilder)(rcptObj.returnHtmlStringReceipt(grid_Details, cb_exfees, cb_govt, cb_CautionDep))).ToString();
                                                                            }
                                                                            else if (save1 == 7)
                                                                            {
                                                                                //For Gnanamani
                                                                                GnanamaniChallanReceipt rcptObj = new GnanamaniChallanReceipt(appnoNew, outRoll, collegecode1, usercode, Convert.ToByte(rcptType), studname, recptDt, DateTime.Now.ToLongTimeString(), recptNo, cursem, deg.Split('-')[0].ToUpper(), deg.Split('-')[1].ToUpper());
                                                                                contentDiv.InnerHtml += ((StringBuilder)(rcptObj.returnHtmlStringReceipt(grid_Details, cb_exfees, cb_govt, cb_CautionDep))).ToString();
                                                                            }
                                                                            else if (save1 == 8)
                                                                            {
                                                                                //For VRS
                                                                                VRSChallanReceipt rcptObj = new VRSChallanReceipt(appnoNew, outRoll, collegecode1, usercode, Convert.ToByte(rcptType), studname, recptDt, DateTime.Now.ToLongTimeString(), recptNo, cursem, deg.Split('-')[0].ToUpper(), deg.Split('-')[1].ToUpper(), degAcr.Split('-')[1].ToUpper(), (modeMulti + ddnar));
                                                                                contentDiv.InnerHtml += ((StringBuilder)(rcptObj.returnHtmlStringReceipt(grid_Details, cb_exfees, cb_govt, cb_CautionDep))).ToString();
                                                                            }
                                                                            else if (save1 == 15)
                                                                            {
                                                                                #region Print Format 1 in Html
                                                                                string userName = string.Empty;
                                                                                string selectqry = "select LinkValue from New_InsSettings where LinkName='DisplayUserName' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
                                                                                int user = Convert.ToInt32(d2.GetFunction(selectqry));
                                                                                if (user == 1)
                                                                                {
                                                                                    userName = d2.GetFunction("select Full_Name,User_Id from UserMaster where User_code='" + usercode + "'").Trim();
                                                                                }
                                                                                queryPrint = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                                                ds.Clear();
                                                                                ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                                                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                                                                {
                                                                                    //Header Div Values
                                                                                    byte collegeid = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeName"]);
                                                                                    byte address1 = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeAdd1"]);
                                                                                    byte address2 = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeAdd2"]);
                                                                                    byte address3 = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeAdd3"]);
                                                                                    byte city = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeDist"]);
                                                                                    byte state = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeState"]);

                                                                                    byte university = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeUniversity"]);
                                                                                    byte rightLogo = Convert.ToByte(ds.Tables[0].Rows[0]["IsRightLogo"]);
                                                                                    byte leftLogo = Convert.ToByte(ds.Tables[0].Rows[0]["IsLeftLogo"]);
                                                                                    byte time;
                                                                                    if (Convert.ToBoolean(Convert.ToString(ds.Tables[0].Rows[0]["IsTime"])))
                                                                                    {
                                                                                        time = 1;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        time = 0;
                                                                                    }
                                                                                    byte degACR = Convert.ToByte(ds.Tables[0].Rows[0]["IsDegreeAcr"]);
                                                                                    byte degNam = Convert.ToByte(ds.Tables[0].Rows[0]["IsDegreeName"]);
                                                                                    byte studnam = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudName"]);
                                                                                    byte year = Convert.ToByte(ds.Tables[0].Rows[0]["IsYear"]);
                                                                                    byte semester = Convert.ToByte(ds.Tables[0].Rows[0]["IsSemester"]);
                                                                                    byte regno = Convert.ToByte(ds.Tables[0].Rows[0]["IsRegNo"]);
                                                                                    byte rolno = Convert.ToByte(ds.Tables[0].Rows[0]["IsRollNo"]);
                                                                                    byte admno = Convert.ToByte(ds.Tables[0].Rows[0]["IsAdminNo"]);

                                                                                    byte fathername = Convert.ToByte(ds.Tables[0].Rows[0]["IsFatherName"]);
                                                                                    byte seattype = Convert.ToByte(ds.Tables[0].Rows[0]["IsSeatType"]);
                                                                                    //byte setRollAsAdmin = Convert.ToByte(ds.Tables[0].Rows[0]["rollas_adm"]);
                                                                                    byte boarding = Convert.ToByte(ds.Tables[0].Rows[0]["IsBoarding"]);
                                                                                    byte mothername = Convert.ToByte(ds.Tables[0].Rows[0]["IsMontherName"]);
                                                                                    string recptValid = Convert.ToString(ds.Tables[0].Rows[0]["ValidDate"]);


                                                                                    //Body Div Values
                                                                                    //byte showAllFees = Convert.ToByte(ds.Tables[0].Rows[0]["showallfee"]);
                                                                                    byte allotedAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsAllotedAmt"]);
                                                                                    byte fineAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsFineAmt"]);
                                                                                    byte balAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsBalanceAmt"]);
                                                                                    byte semOrYear = Convert.ToByte(ds.Tables[0].Rows[0]["IsSemYear"]);
                                                                                    byte prevPaidAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsPrevPaid"]);
                                                                                    byte excessAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsExcessAmt"]);
                                                                                    // byte totDetails = Convert.ToByte(ds.Tables[0].Rows[0]["Total_Details"]);
                                                                                    byte fineInRow = Convert.ToByte(ds.Tables[0].Rows[0]["IsFineinRow"]);
                                                                                    //byte totWTselectCol = Convert.ToByte(ds.Tables[0].Rows[0]["TotalSelCol"]);
                                                                                    byte concession = Convert.ToByte(ds.Tables[0].Rows[0]["IsConcession"]);
                                                                                    string concessionValue = string.Empty;
                                                                                    if (concession != 0)
                                                                                    {
                                                                                        concessionValue = Convert.ToString(ds.Tables[0].Rows[0]["ConcessionName"]);
                                                                                    }


                                                                                    //Footer Div Values

                                                                                    //byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                                    //byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                                    //byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);
                                                                                    // byte narration = Convert.ToByte(ds.Tables[0].Rows[0]["IsNarration"]);
                                                                                    byte deduction = Convert.ToByte(ds.Tables[0].Rows[0]["IsTotConcession"]);
                                                                                    byte forclgName = Convert.ToByte(ds.Tables[0].Rows[0]["IsForCollegeName"]);
                                                                                    byte authSign = Convert.ToByte(ds.Tables[0].Rows[0]["IsAuthSign"]);
                                                                                    byte validDate = Convert.ToByte(ds.Tables[0].Rows[0]["IsValidUpto"]);
                                                                                    string authSignValue = string.Empty;
                                                                                    if (authSign != 0)
                                                                                    {
                                                                                        authSignValue = Convert.ToString(ds.Tables[0].Rows[0]["AuthName"]);

                                                                                    }

                                                                                    byte studOffiCopy = Convert.ToByte(ds.Tables[0].Rows[0]["PageType"]);
                                                                                    // byte dispModeWTcash = Convert.ToByte(ds.Tables[0].Rows[0]["DisModeWithCash"]);
                                                                                    byte signFile = Convert.ToByte(ds.Tables[0].Rows[0]["cashier_sign"]);

                                                                                    //if (signFile != 0)
                                                                                    //{
                                                                                    //if (FileUpload1.HasFile)
                                                                                    //{

                                                                                    //}                                                    
                                                                                    //}


                                                                                    //Document Settings

                                                                                    //colquery = "select collname+' ('+category+')' as collname ,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " ";
                                                                                    colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " ";
                                                                                    if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                    {
                                                                                        if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 3)
                                                                                        {
                                                                                            colquery += " select a.Current_Semester,a.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,a.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,'' Boarding,a.mother,a.parent_name,ISNULL( type,'') as type,'' Sections  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.App_No='" + appnoNew + "' and d.college_code=" + collegecode1 + "";
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            colquery += " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,isnull(r.Sections,'') as Sections from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + " ";
                                                                                        }
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                    {
                                                                                        colquery += "  select appl_id ,h.dept_name,h.dept_acronym,h.dept_code,s.staff_name,s.staff_code,a.father_name,t.stftype as staff_type  from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where s.appl_no =a.appl_no and s.staff_code =t.staff_code and t.dept_code =h.dept_code and d.desig_code =t.desig_code and s.college_code =h.college_code and d.collegeCode =s.college_code and latestrec ='1' and appl_id ='" + appnoNew + "' and s.college_Code=" + collegecode1 + "  ";
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                    {
                                                                                        colquery += " SELECT VendorContactPK, VenContactType, VenContactName, VenContactDesig, VenContactDept, VendorPhoneNo, VendorExtNo, VendorMobileNo, VendorEmail, VendorFK FROM      IM_VendorContactMaster WHERE VendorContactPK = '" + appnoNew + "' ";
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                                    {
                                                                                        colquery += " SELECT VendorCode,vendorname,VendorMobileNo,VendorAddress,VendorCity,VendorCompName,VendorType  from co_vendormaster  WHERE VendorPK = '" + appnoNew + "' ";
                                                                                        outRoll = string.Empty;
                                                                                    }
                                                                                    collegename = "";
                                                                                    add1 = "";
                                                                                    add2 = "";
                                                                                    add3 = "";
                                                                                    univ = "";
                                                                                    deg = "";
                                                                                    cursem = "";
                                                                                    batyr = "";
                                                                                    seatty = "";
                                                                                    board = "";
                                                                                    mothe = "";
                                                                                    fathe = "";

                                                                                    deductionamt = 0;
                                                                                    ds.Clear();
                                                                                    ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                                    if (ds.Tables.Count > 0)
                                                                                    {
                                                                                        if (ds.Tables[0].Rows.Count > 0)
                                                                                        {
                                                                                            collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                                            add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                                            add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                                            add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                                            univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                                        }
                                                                                        if (ds.Tables[1].Rows.Count > 0)
                                                                                        {
                                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                            {
                                                                                                if (degACR == 0)
                                                                                                {
                                                                                                    deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                                }
                                                                                                cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                                batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                                seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                                                board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                                mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                                fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                                                sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                            }
                                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                            {
                                                                                                if (degACR == 0)
                                                                                                {
                                                                                                    deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_name"]);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                                }
                                                                                                //cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                                //batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                                seatty = Convert.ToString(ds.Tables[1].Rows[0]["staff_type"]);
                                                                                                //board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                                //mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                                fathe = Convert.ToString(ds.Tables[1].Rows[0]["father_name"]);
                                                                                                sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                                regno = 0;
                                                                                                year = 0;
                                                                                                degNam = 0;
                                                                                                degACR = 0;
                                                                                            }
                                                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                            {
                                                                                                deg = " - ";
                                                                                                regno = 0;
                                                                                                year = 0;
                                                                                                degNam = 0;
                                                                                                degACR = 0;
                                                                                            }
                                                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                                            {
                                                                                                deg = " - ";
                                                                                                regno = 0;
                                                                                                year = 0;
                                                                                                degNam = 0;
                                                                                                degACR = 0;
                                                                                            }
                                                                                        }

                                                                                        if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                        {
                                                                                            course = txtDept_staff.Text.Trim();
                                                                                        }
                                                                                    }


                                                                                    int rectHeight = 970;
                                                                                    if (studOffiCopy == 1)
                                                                                    {
                                                                                        rectHeight = 470;//change by abarna
                                                                                    }
                                                                                    #region Receipt Header

                                                                                    //Header Images
                                                                                    //Line1
                                                                                    string Hllogo = string.Empty;
                                                                                    if (leftLogo != 0)
                                                                                    {
                                                                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg")))
                                                                                        {
                                                                                            Hllogo = "<img src='" + "../FinanceLogo/Left_Logo" + collegecode1 + ".jpeg?" + DateTime.Now.Ticks.ToString() + "" + "' style='height:80px; width:80px;'/>";
                                                                                        }
                                                                                    }
                                                                                    string Hcol = string.Empty;
                                                                                    if (collegeid != 0)
                                                                                    {
                                                                                        Hcol = collegename;
                                                                                    }
                                                                                    string Hrlogo = string.Empty;
                                                                                    if (rightLogo != 0)
                                                                                    {
                                                                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg")))
                                                                                        {
                                                                                            Hrlogo = "<img src='" + "../FinanceLogo/Right_Logo" + collegecode1 + ".jpeg?" + DateTime.Now.Ticks.ToString() + "" + "' style='height:80px; width:80px;'/>";
                                                                                        }
                                                                                    }
                                                                                    //Hrlogo = "<div style='height:80px; width:100px; border:1px solid black;'><div style='margin-top:30px;font-size:20px;'><b>" + Regex.Replace(recptNo, @"[\d-]", string.Empty).ToUpper() + "</b></div></div>";
                                                                                    //Line2
                                                                                    string Huniv = string.Empty;
                                                                                    if (university != 0)
                                                                                    {
                                                                                        Huniv = univ;
                                                                                    }
                                                                                    //Line3
                                                                                    string Hadd1add2 = string.Empty;
                                                                                    if (address1 != 0 || address2 != 0)
                                                                                    {
                                                                                        if (address2 != 0)
                                                                                        {
                                                                                            add1 += " " + add2;
                                                                                        }
                                                                                        Hadd1add2 = add1;
                                                                                    }
                                                                                    //Line4
                                                                                    string Hadd3 = string.Empty;
                                                                                    if (address3 != 0)
                                                                                    {
                                                                                        //Hadd3 = add3;
                                                                                        Hadd1add2 = Hadd1add2.TrimEnd('.', ',') + "," + add3;
                                                                                    }

                                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:center; width: 585px; ' class='classBold10'><tr><td rowspan='5'>" + Hllogo + "</td><td style='text-align:center; font-weight:bold; font-size:14px;'>" + Hcol + "</td><td  rowspan='5'>" + Hrlogo + "</td></tr><tr><td  style='text-align:center;'>" + Huniv + "</td></tr><tr><td  style='text-align:center;'>" + Hadd1add2 + "</td></tr><tr><td style='text-align:center;'>" + Hadd3 + "</td></tr><tr><td style='text-align:center; font-weight:bold; font-size:14px;'><u>RECEIPT</u></td></tr></table></center>");
                                                                                    // sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:center; width: 585px; ' class='classBold10'><tr><td rowspan='5'>" + Hllogo + "</td><td style='text-align:center; font-weight:bold; font-size:14px;'>" + Hcol + "</td><td  rowspan='5' >" + Hrlogo + "</td></tr><tr><td  style='text-align:center;'>" + Huniv + "</td></tr><tr><td  style='text-align:center;'>" + Hadd1add2 + Hadd3 + "</td></tr><tr><td style='text-align:center; font-weight:bold; font-size:14px;'><u>RECEIPT</u></td></tr></table></center>");
                                                                                    sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align: center; width: 585px;'class='classBold10'><tr><td rowspan='5'>" + Hllogo + "</td><td style='text-align: center; font-weight: bold; font-size: 14px;'>" + Hcol + "</td><td rowspan='5'>" + Hrlogo + "</td></tr><tr><td style='text-align: center;'>" + Huniv + "</td></tr><tr><td style='text-align: center;'>" + Hadd1add2 + Hadd3 + "</td></tr><tr><td style='text-align: center; font-weight: bold; font-size: 14px;'><u>RECEIPT</u> </td></tr></table></center><br/>");
                                                                                    #endregion

                                                                                    #region Table 1

                                                                                    //Table1 Data
                                                                                    string Htime1 = string.Empty;
                                                                                    string Htime2 = string.Empty;
                                                                                    byte ac = 0;
                                                                                    //Line 1
                                                                                    if (checkSchoolSetting() == 0)
                                                                                    {
                                                                                        acaYear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanAcademicYear' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                                                                                        try
                                                                                        {
                                                                                            acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                                                                                            ac = 1;
                                                                                        }
                                                                                        catch { }
                                                                                    }
                                                                                    if (time != 0)
                                                                                    {
                                                                                        Htime1 = "Time";
                                                                                        Htime2 = ": " + DateTime.Now.ToLongTimeString();
                                                                                    }
                                                                                    //Line2
                                                                                    ArrayList arr = new ArrayList();
                                                                                    string Hsname1 = string.Empty;
                                                                                    if (studnam != 0)
                                                                                    {
                                                                                        //Hsname1 = "<td colspan='2'>Name: " + studname + "</td>";
                                                                                        //arr.Add(Hsname1);
                                                                                        Htime1 = "Name";
                                                                                        Htime2 = ": " + studname;
                                                                                    }
                                                                                    string Hregno1 = string.Empty;
                                                                                    if (regno != 0)
                                                                                    {
                                                                                        Hregno1 = "<td colspan='2'>RegNo: " + Regno + "</td>";
                                                                                        arr.Add(Hregno1);
                                                                                    }
                                                                                    string HrolNo1 = string.Empty;
                                                                                    if (rolno != 0)
                                                                                    {
                                                                                        HrolNo1 = "<td colspan='2'>RollNo: " + outRoll + "</td>";
                                                                                        arr.Add(HrolNo1);
                                                                                    }
                                                                                    string HadmNo1 = string.Empty;
                                                                                    if (admno != 0)
                                                                                    {
                                                                                        HadmNo1 = "<td colspan='2'>AdmissionNo: " + app_formno + "</td>";
                                                                                        arr.Add(HadmNo1);
                                                                                    }

                                                                                    string Hfname1 = string.Empty;
                                                                                    if (fathername != 0)
                                                                                    {
                                                                                        Hfname1 = "<td colspan='2'>Father's Name: " + fathe + "</td>";
                                                                                        arr.Add(Hfname1);
                                                                                    }
                                                                                    string HMother1 = string.Empty;
                                                                                    if (mothername != 0)
                                                                                    {
                                                                                        HMother1 = "<td colspan='2'>Mother's Name: " + mothe + "</td>";
                                                                                        arr.Add(HMother1);
                                                                                    }

                                                                                    //Line 3
                                                                                    string schoolOrCollege = d2.GetFunction("select top 1 value from Master_Settings where settings='schoolorcollege' and  usercode='" + usercode + "'").Trim();
                                                                                    string batYrSemHead = string.Empty;
                                                                                    string batYrSemCont = string.Empty;
                                                                                    if (schoolOrCollege == "0")
                                                                                    {
                                                                                        if (degACR != 0)
                                                                                        {
                                                                                            batYrSemHead = "Class/";
                                                                                            batYrSemCont = deg;
                                                                                            if (sec.Trim() != string.Empty)
                                                                                            {
                                                                                                batYrSemCont += "-" + sec + "/";
                                                                                            }
                                                                                        }

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        if (degACR != 0)
                                                                                        {
                                                                                            batYrSemHead = "Degree/";
                                                                                            batYrSemCont = deg + "/";
                                                                                        }
                                                                                        if (year != 0)
                                                                                        {
                                                                                            //batYrSemHead += "Yr/";
                                                                                            //batYrSemCont += " " + romanLetter(returnYearforSem(cursem)) + "/";
                                                                                            int yr = 0;
                                                                                            int.TryParse(reUse.GetFunction("select batch_year from applyn where app_no =" + appnoNew + "").Trim(), out yr);
                                                                                            if (yr != 0)
                                                                                            {
                                                                                                batYrSemHead += "Yr/";
                                                                                                batYrSemCont += " " + yr + "/";
                                                                                            }
                                                                                        }
                                                                                        if (semester != 0)
                                                                                        {
                                                                                            batYrSemHead += "Sem";
                                                                                            batYrSemCont += " " + romanLetter(cursem);
                                                                                        }
                                                                                        batYrSemHead = batYrSemHead.TrimEnd('/');
                                                                                        batYrSemCont = batYrSemCont.TrimEnd('/');
                                                                                    }
                                                                                    string HbatYrSem1 = string.Empty;
                                                                                    if (batYrSemHead != "")
                                                                                    {
                                                                                        HbatYrSem1 = "<td colspan='2'>" + batYrSemHead + ": " + batYrSemCont + "</td>";
                                                                                        arr.Add(HbatYrSem1);
                                                                                    }
                                                                                    string HseatType1 = string.Empty;
                                                                                    if (seattype != 0)
                                                                                    {
                                                                                        HseatType1 = "<td colspan='2'>Seat Type: " + seatty + "</td>";
                                                                                        arr.Add(HseatType1);
                                                                                    }
                                                                                    string HUserType2 = string.Empty;
                                                                                    if (userName != "")
                                                                                    {
                                                                                        HUserType2 = "<td colspan='2'>User Name: " + userName + "</td>";
                                                                                        arr.Add(HUserType2);
                                                                                    }
                                                                                    string Hboard1 = string.Empty;
                                                                                    if (boarding != 0)
                                                                                    {
                                                                                        Hboard1 = "<td colspan='2'>Boarding: " + board + "</td>";
                                                                                        arr.Add(Hboard1);
                                                                                    }
                                                                                    string academicyear = string.Empty;
                                                                                    if (ac == 1)
                                                                                    {
                                                                                        academicyear = "<td colspan='2'>Academic Year: " + acaYear + "</td>";
                                                                                        arr.Add(academicyear);
                                                                                    }

                                                                                    //sbHtml.Append("<br><center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 585px; padding-left:5px; ' class='classBold10'><tr><td>Receipt No</td><td>" + ": " + recptNo + "</td><td>" + Htime1 + "</td><td>" + Htime2 + "</td><td>Date</td><td>" + ": " + recptDt + "</td></tr>");
                                                                                    sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align: left; width: 585px; padding-left: 5px;'class='classBold10'><tr><td>Receipt No</td><td>" + ": " + recptNo + "</td><td>" + Htime1 + "</td><td>" + Htime2 + "</td><td>Date</td><td>" + ": " + recptDt + "</td></tr>");
                                                                                    int lasti = -1;
                                                                                    for (int ar = 0; ar < arr.Count; ar++)
                                                                                    {
                                                                                        if (ar == 0 || ar == 3 || ar == 6)
                                                                                        {
                                                                                            sbHtml.Append("<tr>");
                                                                                        }
                                                                                        sbHtml.Append(arr[ar]);
                                                                                        if (ar == 2 || ar == 5 || ar == 8)
                                                                                        {
                                                                                            sbHtml.Append("</tr>");
                                                                                        }
                                                                                        lasti = ar;
                                                                                    }
                                                                                    if (lasti != 2 && lasti != 5 && lasti != 8)
                                                                                    {
                                                                                        sbHtml.Append("</tr>");
                                                                                    }
                                                                                    sbHtml.Append("</table></center>");

                                                                                    #endregion

                                                                                    #region Table 2
                                                                                    //Table2 Format

                                                                                    int rows = 1;
                                                                                    StringBuilder tempHtml = new StringBuilder();
                                                                                    foreach (GridViewRow row in grid_Details.Rows)
                                                                                    {
                                                                                        CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                                        if (!chkOkPay.Checked)
                                                                                            continue;

                                                                                        TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                                                        TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                                        double creditamt = 0;

                                                                                        if (txtTobePaidamt.Text != "")
                                                                                        {
                                                                                            creditamt = Convert.ToDouble(txtTobePaidamt.Text);
                                                                                            TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                                            double exgridamt = 0;
                                                                                            if (cb_exfees.Checked)
                                                                                            {
                                                                                                double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                                            }
                                                                                            creditamt += exgridamt;

                                                                                            double gvtamt = 0;
                                                                                            if (cb_govt.Checked)
                                                                                            {
                                                                                                double.TryParse(txtScholAmt.Text, out gvtamt);
                                                                                            }
                                                                                            creditamt += gvtamt;
                                                                                            TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");

                                                                                            double curCautamt = 0;
                                                                                            if (cb_CautionDep.Checked)
                                                                                            {
                                                                                                double.TryParse(txtCautAmt.Text, out curCautamt);
                                                                                            }
                                                                                            creditamt += curCautamt;
                                                                                            if (creditamt > 0)
                                                                                            {
                                                                                                rows++;
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    Hashtable htIndex = new Hashtable();
                                                                                    int hInsdx = 3;

                                                                                    //Table2 Header
                                                                                    if (semOrYear != 0)
                                                                                    {

                                                                                        htIndex.Add("semOrYear", hInsdx);
                                                                                        hInsdx++;
                                                                                    }


                                                                                    if (allotedAmt != 0)
                                                                                    {

                                                                                        htIndex.Add("allotedAmt", hInsdx);
                                                                                        hInsdx++;
                                                                                    }

                                                                                    if (balAmt != 0)
                                                                                    {

                                                                                        htIndex.Add("balAmt", hInsdx);
                                                                                        hInsdx++;
                                                                                    }
                                                                                    if (prevPaidAmt != 0)
                                                                                    {

                                                                                        htIndex.Add("prevPaidAmt", hInsdx);
                                                                                        hInsdx++;

                                                                                    }

                                                                                    if (concession != 0)
                                                                                    {

                                                                                        htIndex.Add("concession", hInsdx);
                                                                                        hInsdx++;

                                                                                    }

                                                                                    //sbHtml.Append("<br><center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid; ' border='1' class='classBold10'><tr><td style='text-align:center;'>S.No</td><td style='text-align:center;'>Description</td><td style='text-align:center;'>Paid Rs</td>");
                                                                                    // sbHtml.Append("<br/><center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid; ' border='1' class='classBold10'><tr><td style='text-align:center;'>S.No</td><td style='text-align:center;'>Description</td><td style='text-align:center;'>Amount</td>");
                                                                                    // sbHtml.Append("<br/><center><table cellpadding='0' cellspacing='0' style='border-style: solid; border-color: inherit;border-width: 1px; text-align: left; width: 582px;' border='1' class='classBold10'><tr><td style='text-align:center;'>S.No</td><td style='text-align:center;'>Description</td><td style='text-align:center;'>Paid Rs</td>");
                                                                                    sbHtml.Append("<br/><center><table cellpadding='0' cellspacing='0' style='border-style: solid; border-color: inherit;border-width: 1px; text-align: left; width: 582px;' border='1' class='classBold10'><tr><td style='text-align: center;'>S.No</td><td style='text-align: center;'>Description</td><td style='text-align: center;'>Paid Rs</td>");
                                                                                    //Table2 Data

                                                                                    #region feedata
                                                                                    int sno = 0;
                                                                                    int indx = 0;
                                                                                    double totalamt = 0;
                                                                                    double balanamt = 0;
                                                                                    double curpaid = 0;
                                                                                    foreach (GridViewRow row in grid_Details.Rows)
                                                                                    {

                                                                                        CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                                        if (!chkOkPay.Checked)
                                                                                            continue;

                                                                                        TextBox txtTotalamt = (TextBox)row.FindControl("txt_tot_amt");
                                                                                        TextBox txtPaidamt = (TextBox)row.FindControl("txt_paid_amt");
                                                                                        TextBox txtBalamt = (TextBox)row.FindControl("txt_bal_amt");
                                                                                        TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                                                        TextBox txtdeductamt = (TextBox)row.FindControl("txt_deduct_amt");

                                                                                        Label lblFeeCategory = (Label)row.FindControl("lbl_feetype");
                                                                                        Label lblsem = (Label)row.FindControl("lbl_textval");

                                                                                        double creditamt = 0;

                                                                                        if (txtTobePaidamt.Text != "")
                                                                                        {
                                                                                            creditamt = Convert.ToDouble(txtTobePaidamt.Text);
                                                                                            TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                                            double exgridamt = 0;
                                                                                            if (cb_exfees.Checked)
                                                                                            {
                                                                                                double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                                            }
                                                                                            creditamt += exgridamt;

                                                                                            TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                                            double gvtamt = 0;
                                                                                            if (cb_govt.Checked)
                                                                                            {
                                                                                                double.TryParse(txtScholAmt.Text, out gvtamt);
                                                                                            }
                                                                                            creditamt += gvtamt;
                                                                                            TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");

                                                                                            double curCautamt = 0;
                                                                                            if (cb_CautionDep.Checked)
                                                                                            {
                                                                                                double.TryParse(txtCautAmt.Text, out curCautamt);
                                                                                            }
                                                                                            creditamt += curCautamt;
                                                                                        }

                                                                                        if (creditamt > 0)
                                                                                        {

                                                                                            sno++;
                                                                                            indx++;
                                                                                            totalamt += Convert.ToDouble(txtTotalamt.Text);
                                                                                            balanamt += Convert.ToDouble(txtBalamt.Text);
                                                                                            curpaid += creditamt;
                                                                                            //balanamt += Convert.ToDouble(txtTotalamt.Text) + Convert.ToDouble(txtTobePaidamt.Text) - creditamt;
                                                                                            deductionamt += Convert.ToDouble(txtdeductamt.Text);
                                                                                            //tempHtml.Append("<tr><td style='text-align:center;'>" + sno + "</td><td style='text-align:left;'>" + lblFeeCategory.Text + "</td><td style='text-align:right;'>" + creditamt + "</td>");
                                                                                            tempHtml.Append("<tr><td style='text-align:center;'>" + sno + "</td><td style='text-align:left;'>" + lblFeeCategory.Text + "</td><td style='text-align:center;'>" + creditamt + "</td>");
                                                                                            if (semOrYear != 0)
                                                                                            {
                                                                                                if (htIndex.Contains("semOrYear"))
                                                                                                {
                                                                                                    tempHtml.Append("<td style='text-align:Center;'>" + lblsem.Text + "</td>");
                                                                                                    if (indx == 1)
                                                                                                    {
                                                                                                        sbHtml.Append("<td style='text-align:center;'>Category</td>");
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                            if (allotedAmt != 0)
                                                                                            {
                                                                                                if (htIndex.Contains("allotedAmt"))
                                                                                                {
                                                                                                    tempHtml.Append("<td style='text-align:center;'>" + txtTotalamt.Text + "</td>");
                                                                                                    if (indx == 1)
                                                                                                    {
                                                                                                        sbHtml.Append("<td style='text-align:center;'>Fixed Fee Rs</td>");
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                            if (balAmt != 0)
                                                                                            {
                                                                                                if (htIndex.Contains("balAmt"))
                                                                                                {
                                                                                                    tempHtml.Append("<td style='text-align:center;'>" + txtBalamt.Text + "</td>");
                                                                                                    if (indx == 1)
                                                                                                    {
                                                                                                        sbHtml.Append("<td style='text-align:center;'>Balance Rs</td>");
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if (prevPaidAmt != 0)
                                                                                            {
                                                                                                if (htIndex.Contains("prevPaidAmt"))
                                                                                                {
                                                                                                    tempHtml.Append("<td style='text-align:center;'>" + txtPaidamt.Text + "</td>");
                                                                                                    if (indx == 1)
                                                                                                    {
                                                                                                        sbHtml.Append("<td style='text-align:center;'>Already Paid Rs</td>");
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                            if (concession != 0)
                                                                                            {
                                                                                                if (htIndex.Contains("concession"))
                                                                                                {
                                                                                                    tempHtml.Append("<td style='text-align:center;'>" + txtdeductamt.Text + "</td>");
                                                                                                    if (indx == 1)
                                                                                                    {
                                                                                                        sbHtml.Append("<td style='text-align:center;'>Deduction Rs</td>");
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            sbHtml.Append("</tr>");
                                                                                            // tempHtml.Append("</tr></table><br />");
                                                                                            //sbHtml.Append(tempHtml.ToString());
                                                                                        }
                                                                                    }
                                                                                    tempHtml.Append("</tr></table><br />");
                                                                                    sbHtml.Append(tempHtml.ToString());

                                                                                    #endregion

                                                                                    #endregion

                                                                                    #region Table 3
                                                                                    //Table3 Header   
                                                                                    if (BalanceType == 1)
                                                                                    {
                                                                                        balanamt = retBalance(appnoNew);
                                                                                    }
                                                                                    decimal totalamount = (decimal)curpaid;
                                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid;padding-top:0px; ' border='1' class='classBold10'><tr><td style='text-align:center;' colspan='4'>Received " + DecimalToWords(totalamount).ToString() + "Rupees Only</td><td style='text-align:center;'>Total</td><td style='text-align:center;'>Rs. " + curpaid + "/-</td><td style='text-align:center;'>Balance</td><td style='text-align:center;'>Rs. " + balanamt + "/-</td><tr></table></center>");

                                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid;padding-top:0px; ' border='1' class='classBold10'><tr><td style='text-align:center;' colspan='4'> " + DecimalToWords(totalamount).ToString() + "Rupees Only</td><td style='text-align:center;'>Total</td><td style='text-align:center;' colspan='3'>Rs. " + curpaid + "/-</td><tr></table></center>");

                                                                                    // sbHtml.Append("<center><table border='1' cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid;padding-top:0px; ' class='classBold10'><tr><td style='text-align:center;' colspan='4'> ( " + DecimalToWords(totalamount).ToString() + " Rupees Only )</td><td style='text-align:center;' colspan='3'>Total - Rs. " + curpaid + "/-</td><tr></table></center>");
                                                                                    //sbHtml.Append("<table cellpadding='0' cellspacing='0' style='text-align: left; width: 576px; padding-top: 5px;'class='classBold10' border='1'><tr><td style='text-align:center;' colspan='4'> ( " + DecimalToWords(totalamount).ToString() + " Rupees Only )</td><td style='text-align:center;' colspan='3'>Total - Rs. " + curpaid + "/-</td><tr></table></center>");
                                                                                    sbHtml.Append(" <table cellpadding='0' cellspacing='0' style='border-style: solid; border-color: inherit;border-width: 1px; text-align: left; margin-top:1px; width: 582px;' border='1' class='classBold10'><tr><td style='text-align: center;' colspan='4' class=style1'>Received " + DecimalToWords(totalamount).ToString() + " Rupees Only </td><td style='text-align:center;' colspan='3'>Total</td><td style='text-align: center;' colspan='3'>Rs. " + curpaid + "/-</td></tr></table></center><br/>");//abarna
                                                                                    //<td style='text-align:center;' colspan='3'>Balance</td><td style='text-align:center;' colspan='3'>Rs. " + balanamt + "/-</td>
                                                                                    #endregion

                                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px; padding-top:5px; ' class='classBold10'><tr><td style='text-align:center;'>Mode of Pay : " + modeMulti + ddnar + "</td>");
                                                                                    string remarks = string.Empty;
                                                                                    if (narration == 1)
                                                                                    {
                                                                                        remarks = d2.GetFunction("select narration from ft_findailytransaction where TransCode='" + recptNo.Trim() + "' and app_no='" + appnoNew + "' and isnull(iscanceled,0)=0");
                                                                                        if (remarks.Trim() == "0" || remarks.Trim() == string.Empty)
                                                                                            remarks = string.Empty;
                                                                                        else
                                                                                        {
                                                                                            remarks = "\n Narration : " + remarks;
                                                                                        }
                                                                                    }
                                                                                    //sbHtml.Append("<center<table cellpadding='0' cellspacing='0' style='text-align: left; width: 576px; padding-top: 5px;'class='classBold10'><tr><td style='text-align:left;'>Mode of Pay : " + mode + " <br> " + ddnew + "</td></tr><tr><td style='text-align:left;'>Remarks" + remarks + " </td>");
                                                                                    sbHtml.Append("<table cellpadding='0' cellspacing='0' style='text-align: left; width: 576px; padding-top: 5px;'class='classBold10'><tr><td style='text-align: left;' class=style2'>  Mode of Pay : " + mode + "<br />" + ddnew + "</td></tr><tr><td style='text-align: left;' class=style2'>  Remarks " + remarks + " </td>");

                                                                                    if (deduction != 0)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:center;'>Deduction Amount Rs. : " + deductionamt + "</td>");
                                                                                    }
                                                                                    if (excessAmt != 0)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:right;'>Excess Amount Rs. : " + excessRemaining(appnoNew).ToString() + "</td>");
                                                                                    }
                                                                                    if (validDate != 0)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:center;'>Valid upto : " + "(" + recptValid + ")</td>");
                                                                                    }
                                                                                    sbHtml.Append("</tr></table><br /><br /><br />");

                                                                                    // sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:right; width: 560px;  padding-top:5px; ' class='classBold10'><tr><td style='text-align:right;'>");
                                                                                    sbHtml.Append("<table cellpadding='0' cellspacing='0' style='text-align: right; width: 572px; padding-top: 5px;'class='classBold10'><tr></tr><tr></tr>");
                                                                                    //Authorizer
                                                                                    if (forclgName != 0)
                                                                                    {
                                                                                        sbHtml.Append("For " + collegename + "");
                                                                                    }

                                                                                    //if (authSignValue.Trim() != "")
                                                                                    //{
                                                                                    //    sbHtml.Append("<br><br> " + authSignValue + "");
                                                                                    //}
                                                                                    //else
                                                                                    //{
                                                                                    //    sbHtml.Append("<br><br><span style='margin-left:20px; text-align:left;float:left;'>#copy#</span> " + "Authorised Signature" + "");
                                                                                    //}

                                                                                    // sbHtml.Append("</td><tr></table></center>");

                                                                                    // int marginTop = 220 - (rows * 15);
                                                                                    if (authSignValue.Trim() != "")
                                                                                    {
                                                                                        //sbHtml.Append("<br><br><div style='margin-top:151px;margin-left:20px; text-align:left;float:left;'>#copy#<span style='padding-left:330px;'> " + authSignValue + "</span></div> ");
                                                                                        sbHtml.Append("<tr><td style='text-align: right;'>" + authSignValue + "</td></tr>");
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        //sbHtml.Append("<br><br><div style='margin-top:151px;margin-left:20px; text-align:left;float:left;'>#copy#<span style='padding-left:330px;'>Authorised Signature</span></div> ");
                                                                                        sbHtml.Append("<tr><td style='text-align: right;'>Authorised Signature</td></tr>");
                                                                                    }

                                                                                    if (studCopy != 0 || studOffiCopy == 1)
                                                                                    {
                                                                                        if (studOffiCopy != 1)
                                                                                        {
                                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                            {
                                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                                //sbFinal.Append("<div style='padding-left:5px;height: 920px; width:595px;'>");
                                                                                                sbFinal.Append("<div style='padding-left: 5px; height: 970px; width: 616px;'>");
                                                                                                //sbFinal.Append("<div style='width:585px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "</div>");
                                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Student Copy</td></tr></table></div><br/>");
                                                                                                sbFinal.Append("</div><br/>");
                                                                                                //sbFinal.Replace("#copy#", "Student Copy");
                                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Student Copy</td></tr></table>");
                                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                                            }
                                                                                            if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                            {
                                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                                //sbFinal.Append("<div style='padding-left:5px;height: 920px; width:595px;'>");
                                                                                                sbFinal.Append("<div style='padding-left: 5px; height: 970px; width: 616px;'>");
                                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Staff Copy</td></tr></table></div><br/>");
                                                                                                sbFinal.Append("</div><br>");
                                                                                                //sbFinal.Replace("#copy#", "Staff Copy");
                                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Staff Copy</td></tr></table>");
                                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                                            }
                                                                                            if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                            {
                                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                                //sbFinal.Append("<div style='padding-left:5px;height: 920px; width:595px;'>");
                                                                                                sbFinal.Append("<div style='padding-left: 5px; height: 970px; width: 616px;'>");
                                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Vendor Copy</td></tr></table></div><br/>");
                                                                                                sbFinal.Append("</div><br>");
                                                                                                //sbFinal.Replace("#copy#", "Vendor Copy");
                                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Vendor Copy</td></tr></table>");
                                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                                            }
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                            {
                                                                                                StringBuilder sbFinal1 = new StringBuilder();
                                                                                                sbFinal1.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + " <tr><td style='text-align: right;'>Student Copy</td></tr></table></div><br/>");
                                                                                                //sbFinal1.Replace("#copy#", "Student Copy");
                                                                                                sbFinal1.Replace("#copy#", "<tr><td style='text-align: right;'>Student Copy</td></tr></table></div><br/>");
                                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                                sbFinal.Append("<div style='padding-left:5px;height: 970px; width:701px;'>");
                                                                                                sbFinal.Append(sbFinal1.ToString());
                                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "</div><tr><td style='text-align: right;'>Office Copy</td></tr></table>");
                                                                                                sbFinal.Append("</div><br>");
                                                                                                //sbFinal.Replace("#copy#", "Office Copy");
                                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Office Copy</td></tr></table></div><br/>");

                                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                                            }
                                                                                            if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                            {
                                                                                                StringBuilder sbFinal1 = new StringBuilder();
                                                                                                sbFinal1.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Staff Copy</td></tr></table></div><br/>");
                                                                                                //sbFinal1.Replace("#copy#", "Staff Copy");
                                                                                                sbFinal1.Replace("#copy#", "<tr><td style='text-align: right;'>Staff Copy</td></tr></table>");
                                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                                sbFinal.Append("<div style='padding-left:5px;height: 970px; width:616px;'>");
                                                                                                sbFinal.Append(sbFinal1.ToString());
                                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Office Copy</td></tr></table></div>");
                                                                                                sbFinal.Append("</div><br>");
                                                                                                //sbFinal.Replace("#copy#", "Office Copy");
                                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Office Copy</td></tr></table>");
                                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                                            }
                                                                                            if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                            {
                                                                                                StringBuilder sbFinal1 = new StringBuilder();
                                                                                                sbFinal1.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Office Copy</td></tr></table></div><br/>");
                                                                                                //sbFinal1.Replace("#copy#", "Vendor Copy");
                                                                                                sbFinal1.Replace("#copy#", "<tr><td style='text-align: right;'>Office Copy</td></tr></table>");
                                                                                                StringBuilder sbFinal = new StringBuilder();
                                                                                                sbFinal.Append("<div style='padding-left:5px;height: 970px; width:616px;'>");
                                                                                                sbFinal.Append(sbFinal1.ToString());
                                                                                                sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Office Copy</td></tr></table></div><br/>");
                                                                                                sbFinal.Append("</div><br>");
                                                                                                //sbFinal.Replace("#copy#", "Office Copy");
                                                                                                sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Office Copy</td></tr></table>");
                                                                                                contentDiv.InnerHtml += sbFinal.ToString();
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                    if (officopy != 0 && studOffiCopy != 1)
                                                                                    {
                                                                                        StringBuilder sbFinal = new StringBuilder();
                                                                                        sbFinal.Append("<div style='padding-left:5px;height: 970px; width:616px;'>");
                                                                                        sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Office Copy</td></tr></table></div><br/>");
                                                                                        sbFinal.Append("</div><br>");
                                                                                        //sbFinal.Replace("#copy#", "Office Copy");
                                                                                        sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Office Copy</td></tr></table>");
                                                                                        contentDiv.InnerHtml += sbFinal.ToString();
                                                                                    }

                                                                                    if (transCopy != 0)
                                                                                    {
                                                                                        StringBuilder sbFinal = new StringBuilder();
                                                                                        sbFinal.Append("<div style='padding-left:5px;height: 970px; width:616px;'>");
                                                                                        sbFinal.Append("<div style='width:616px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "<tr><td style='text-align: right;'>Transport Copy</td></tr></table></div><br/>");
                                                                                        sbFinal.Append("</div><br>");
                                                                                        //sbFinal.Replace("#copy#", "Transport Copy");
                                                                                        sbFinal.Replace("#copy#", "<tr><td style='text-align: right;'>Transport Copy</td></tr></table>");
                                                                                        contentDiv.InnerHtml += sbFinal.ToString();
                                                                                    }

                                                                                }
                                                                                #endregion
                                                                            }
                                                                            else if (save1 == 9)
                                                                            {
                                                                                #region Print Format 1 in Html
                                                                                queryPrint = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                                                ds.Clear();
                                                                                ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                                                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                                                                                {
                                                                                    //Header Div Values
                                                                                    byte collegeid = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeName"]);
                                                                                    byte address1 = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeAdd1"]);
                                                                                    byte address2 = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeAdd2"]);
                                                                                    byte address3 = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeAdd3"]);
                                                                                    byte city = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeDist"]);
                                                                                    byte state = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeState"]);

                                                                                    byte university = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeUniversity"]);
                                                                                    byte rightLogo = Convert.ToByte(ds.Tables[0].Rows[0]["IsRightLogo"]);
                                                                                    byte leftLogo = Convert.ToByte(ds.Tables[0].Rows[0]["IsLeftLogo"]);
                                                                                    byte time;
                                                                                    if (Convert.ToBoolean(Convert.ToString(ds.Tables[0].Rows[0]["IsTime"])))
                                                                                    {
                                                                                        time = 1;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        time = 0;
                                                                                    }
                                                                                    byte degACR = Convert.ToByte(ds.Tables[0].Rows[0]["IsDegreeAcr"]);
                                                                                    byte degNam = Convert.ToByte(ds.Tables[0].Rows[0]["IsDegreeName"]);
                                                                                    byte studnam = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudName"]);
                                                                                    byte year = Convert.ToByte(ds.Tables[0].Rows[0]["IsYear"]);
                                                                                    byte semester = Convert.ToByte(ds.Tables[0].Rows[0]["IsSemester"]);
                                                                                    byte regno = Convert.ToByte(ds.Tables[0].Rows[0]["IsRegNo"]);
                                                                                    byte rolno = Convert.ToByte(ds.Tables[0].Rows[0]["IsRollNo"]);
                                                                                    byte admno = Convert.ToByte(ds.Tables[0].Rows[0]["IsAdminNo"]);

                                                                                    byte fathername = Convert.ToByte(ds.Tables[0].Rows[0]["IsFatherName"]);
                                                                                    byte seattype = Convert.ToByte(ds.Tables[0].Rows[0]["IsSeatType"]);
                                                                                    //byte setRollAsAdmin = Convert.ToByte(ds.Tables[0].Rows[0]["rollas_adm"]);
                                                                                    byte boarding = Convert.ToByte(ds.Tables[0].Rows[0]["IsBoarding"]);
                                                                                    byte mothername = Convert.ToByte(ds.Tables[0].Rows[0]["IsMontherName"]);
                                                                                    string recptValid = Convert.ToString(ds.Tables[0].Rows[0]["ValidDate"]);


                                                                                    //Body Div Values
                                                                                    //byte showAllFees = Convert.ToByte(ds.Tables[0].Rows[0]["showallfee"]);
                                                                                    byte allotedAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsAllotedAmt"]);
                                                                                    byte fineAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsFineAmt"]);
                                                                                    byte balAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsBalanceAmt"]);
                                                                                    byte semOrYear = Convert.ToByte(ds.Tables[0].Rows[0]["IsSemYear"]);
                                                                                    byte prevPaidAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsPrevPaid"]);
                                                                                    byte excessAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsExcessAmt"]);
                                                                                    // byte totDetails = Convert.ToByte(ds.Tables[0].Rows[0]["Total_Details"]);
                                                                                    byte fineInRow = Convert.ToByte(ds.Tables[0].Rows[0]["IsFineinRow"]);
                                                                                    //byte totWTselectCol = Convert.ToByte(ds.Tables[0].Rows[0]["TotalSelCol"]);
                                                                                    byte concession = Convert.ToByte(ds.Tables[0].Rows[0]["IsConcession"]);
                                                                                    string concessionValue = string.Empty;
                                                                                    if (concession != 0)
                                                                                    {
                                                                                        concessionValue = Convert.ToString(ds.Tables[0].Rows[0]["ConcessionName"]);
                                                                                    }


                                                                                    //Footer Div Values

                                                                                    //byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                                    //byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                                    //byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);
                                                                                    // byte narration = Convert.ToByte(ds.Tables[0].Rows[0]["IsNarration"]);
                                                                                    byte deduction = Convert.ToByte(ds.Tables[0].Rows[0]["IsTotConcession"]);
                                                                                    byte forclgName = Convert.ToByte(ds.Tables[0].Rows[0]["IsForCollegeName"]);
                                                                                    byte authSign = Convert.ToByte(ds.Tables[0].Rows[0]["IsAuthSign"]);
                                                                                    byte validDate = Convert.ToByte(ds.Tables[0].Rows[0]["IsValidUpto"]);
                                                                                    string authSignValue = string.Empty;
                                                                                    if (authSign != 0)
                                                                                    {
                                                                                        authSignValue = Convert.ToString(ds.Tables[0].Rows[0]["AuthName"]);

                                                                                    }

                                                                                    byte studOffiCopy = Convert.ToByte(ds.Tables[0].Rows[0]["PageType"]);
                                                                                    // byte dispModeWTcash = Convert.ToByte(ds.Tables[0].Rows[0]["DisModeWithCash"]);
                                                                                    byte signFile = Convert.ToByte(ds.Tables[0].Rows[0]["cashier_sign"]);

                                                                                    //if (signFile != 0)
                                                                                    //{
                                                                                    //if (FileUpload1.HasFile)
                                                                                    //{

                                                                                    //}                                                    
                                                                                    //}


                                                                                    //Document Settings

                                                                                    colquery = "select collname+' ('+category+')' as collname ,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " ";
                                                                                    if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                    {
                                                                                        if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 3)
                                                                                        {
                                                                                            colquery += " select a.Current_Semester,a.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,a.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,'' Boarding,a.mother,a.parent_name,ISNULL( type,'') as type,'' Sections  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.App_No='" + appnoNew + "' and d.college_code=" + collegecode1 + "";
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            colquery += " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,isnull(r.Sections,'') as Sections from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + " ";
                                                                                        }
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                    {
                                                                                        colquery += "  select appl_id ,h.dept_name,h.dept_acronym,h.dept_code,s.staff_name,s.staff_code,a.father_name,t.stftype as staff_type  from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where s.appl_no =a.appl_no and s.staff_code =t.staff_code and t.dept_code =h.dept_code and d.desig_code =t.desig_code and s.college_code =h.college_code and d.collegeCode =s.college_code and latestrec ='1' and appl_id ='" + appnoNew + "' and s.college_Code=" + collegecode1 + "  ";
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                    {
                                                                                        colquery += " SELECT VendorContactPK, VenContactType, VenContactName, VenContactDesig, VenContactDept, VendorPhoneNo, VendorExtNo, VendorMobileNo, VendorEmail, VendorFK FROM      IM_VendorContactMaster WHERE VendorContactPK = '" + appnoNew + "' ";
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                                    {
                                                                                        colquery += " SELECT VendorCode,vendorname,VendorMobileNo,VendorAddress,VendorCity,VendorCompName,VendorType  from co_vendormaster  WHERE VendorPK = '" + appnoNew + "' ";
                                                                                        outRoll = string.Empty;
                                                                                    }
                                                                                    collegename = "";
                                                                                    add1 = "";
                                                                                    add2 = "";
                                                                                    add3 = "";
                                                                                    univ = "";
                                                                                    deg = "";
                                                                                    cursem = "";
                                                                                    batyr = "";
                                                                                    seatty = "";
                                                                                    board = "";
                                                                                    mothe = "";
                                                                                    fathe = "";
                                                                                    deductionamt = 0;
                                                                                    ds.Clear();
                                                                                    ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                                    if (ds.Tables.Count > 0)
                                                                                    {
                                                                                        if (ds.Tables[0].Rows.Count > 0)
                                                                                        {
                                                                                            collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                                            add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                                            add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                                            add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                                            univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                                        }
                                                                                        if (ds.Tables[1].Rows.Count > 0)
                                                                                        {
                                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                            {
                                                                                                if (degACR == 0)
                                                                                                {
                                                                                                    deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                                }
                                                                                                cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                                batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                                seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                                                board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                                mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                                fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                                                //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                            }
                                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                            {
                                                                                                if (degACR == 0)
                                                                                                {
                                                                                                    deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_name"]);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                                }
                                                                                                //cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                                //batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                                seatty = Convert.ToString(ds.Tables[1].Rows[0]["staff_type"]);
                                                                                                //board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                                //mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                                fathe = Convert.ToString(ds.Tables[1].Rows[0]["father_name"]);
                                                                                                //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                                regno = 0;
                                                                                                year = 0;
                                                                                                degNam = 0;
                                                                                                degACR = 0;
                                                                                            }
                                                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                            {
                                                                                                deg = " - ";
                                                                                                regno = 0;
                                                                                                year = 0;
                                                                                                degNam = 0;
                                                                                                degACR = 0;
                                                                                            }
                                                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                                            {
                                                                                                deg = " - ";
                                                                                                regno = 0;
                                                                                                year = 0;
                                                                                                degNam = 0;
                                                                                                degACR = 0;
                                                                                            }
                                                                                        }

                                                                                        if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                        {
                                                                                            course = txtDept_staff.Text.Trim();
                                                                                        }
                                                                                    }


                                                                                    int rectHeight = 920;
                                                                                    if (studOffiCopy == 1)
                                                                                    {
                                                                                        rectHeight = 475;
                                                                                    }
                                                                                    #region Receipt Header

                                                                                    //Header Images
                                                                                    //Line1
                                                                                    string Hllogo = string.Empty;
                                                                                    if (leftLogo != 0)
                                                                                    {
                                                                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg")))
                                                                                        {
                                                                                            Hllogo = "<img src='" + "../FinanceLogo/Left_Logo" + collegecode1 + ".jpeg?" + DateTime.Now.Ticks.ToString() + "" + "' style='height:80px; width:80px;'/>";
                                                                                        }
                                                                                    }
                                                                                    string Hcol = string.Empty;
                                                                                    if (collegeid != 0)
                                                                                    {
                                                                                        Hcol = collegename;
                                                                                    }
                                                                                    string Hrlogo = string.Empty;
                                                                                    //if (rightLogo != 0)
                                                                                    //{
                                                                                    //    if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg")))
                                                                                    //    {
                                                                                    //        Hrlogo = "<img src='" + "../FinanceLogo/Right_Logo" + collegecode1 + ".jpeg?" + DateTime.Now.Ticks.ToString() + "" + "' style='height:80px; width:80px;'/>";
                                                                                    //    }
                                                                                    //}
                                                                                    Hrlogo = "<div style='height:80px; width:100px; border:1px solid black;'><div style='margin-top:30px;font-size:20px;'><b>" + Regex.Replace(recptNo, @"[\d-]", string.Empty).ToUpper() + "</b></div></div>";
                                                                                    //Line2
                                                                                    string Huniv = string.Empty;
                                                                                    if (university != 0)
                                                                                    {
                                                                                        Huniv = univ;
                                                                                    }
                                                                                    //Line3
                                                                                    string Hadd1add2 = string.Empty;
                                                                                    if (address1 != 0 || address2 != 0)
                                                                                    {
                                                                                        if (address2 != 0)
                                                                                        {
                                                                                            add1 += " " + add2;
                                                                                        }
                                                                                        Hadd1add2 = add1;
                                                                                    }
                                                                                    //Line4
                                                                                    string Hadd3 = string.Empty;
                                                                                    if (address3 != 0)
                                                                                    {
                                                                                        //Hadd3 = add3;
                                                                                        Hadd1add2 = Hadd1add2.TrimEnd('.', ',') + "," + add3;
                                                                                    }

                                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:center; width: 585px; ' class='classBold10'><tr><td rowspan='5'>" + Hllogo + "</td><td style='text-align:center; font-weight:bold; font-size:14px;'>" + Hcol + "</td><td  rowspan='5'>" + Hrlogo + "</td></tr><tr><td  style='text-align:center;'>" + Huniv + "</td></tr><tr><td  style='text-align:center;'>" + Hadd1add2 + "</td></tr><tr><td style='text-align:center;'>" + Hadd3 + "</td></tr><tr><td style='text-align:center; font-weight:bold; font-size:14px;'><u>RECEIPT</u></td></tr></table></center>");
                                                                                    sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:center; width: 585px; ' class='classBold10'><tr><td rowspan='5'>" + Hllogo + "</td><td style='text-align:center; font-weight:bold; font-size:14px;'>" + Hcol + "</td><td  rowspan='5' >" + Hrlogo + "</td></tr><tr><td  style='text-align:center;'>" + Huniv + "</td></tr><tr><td  style='text-align:center;'>" + Hadd1add2 + Hadd3 + "</td></tr><tr><td style='text-align:center; font-weight:bold; font-size:14px;'><u>RECEIPT</u></td></tr></table></center>");
                                                                                    #endregion

                                                                                    #region Table 1

                                                                                    //Table1 Data
                                                                                    string Htime1 = string.Empty;
                                                                                    string Htime2 = string.Empty;
                                                                                    //Line 1
                                                                                    if (time != 0)
                                                                                    {
                                                                                        Htime1 = "Time";
                                                                                        Htime2 = ": " + DateTime.Now.ToLongTimeString();
                                                                                    }
                                                                                    //Line2
                                                                                    ArrayList arr = new ArrayList();
                                                                                    string Hsname1 = string.Empty;
                                                                                    if (studnam != 0)
                                                                                    {
                                                                                        //Hsname1 = "<td colspan='2'>Name: " + studname + "</td>";
                                                                                        //arr.Add(Hsname1);
                                                                                        Htime1 = "Name";
                                                                                        Htime2 = ": " + studname;
                                                                                    }
                                                                                    string Hregno1 = string.Empty;
                                                                                    if (regno != 0)
                                                                                    {
                                                                                        Hregno1 = "<td colspan='2'>RegNo: " + Regno + "</td>";
                                                                                        arr.Add(Hregno1);
                                                                                    }

                                                                                    string HrolNo1 = string.Empty;
                                                                                    if (rolno != 0)
                                                                                    {
                                                                                        HrolNo1 = "<td colspan='2'>RollNo: " + outRoll + "</td>";
                                                                                        arr.Add(HrolNo1);
                                                                                    }
                                                                                    string HadmNo1 = string.Empty;
                                                                                    if (admno != 0)
                                                                                    {
                                                                                        HadmNo1 = "<td colspan='2'>AdmissionNo: " + app_formno + "</td>";
                                                                                        arr.Add(HadmNo1);
                                                                                    }

                                                                                    string Hfname1 = string.Empty;
                                                                                    if (fathername != 0)
                                                                                    {
                                                                                        Hfname1 = "<td colspan='2'>Father's Name: " + fathe + "</td>";
                                                                                        arr.Add(Hfname1);
                                                                                    }
                                                                                    string HMother1 = string.Empty;
                                                                                    if (mothername != 0)
                                                                                    {
                                                                                        HMother1 = "<td colspan='2'>Mother's Name: " + mothe + "</td>";
                                                                                        arr.Add(HMother1);
                                                                                    }

                                                                                    //Line 3
                                                                                    string batYrSemHead = string.Empty;
                                                                                    string batYrSemCont = string.Empty;
                                                                                    if (degACR != 0)
                                                                                    {
                                                                                        batYrSemHead = "Degree/";
                                                                                        batYrSemCont = deg + "/";
                                                                                    }
                                                                                    if (year != 0)
                                                                                    {
                                                                                        //batYrSemHead += "Yr/";
                                                                                        //batYrSemCont += " " + romanLetter(returnYearforSem(cursem)) + "/";
                                                                                        int yr = 0;
                                                                                        int.TryParse(reUse.GetFunction("select batch_year from applyn where app_no =" + appnoNew + "").Trim(), out yr);
                                                                                        if (yr != 0)
                                                                                        {
                                                                                            batYrSemHead += "Yr/";
                                                                                            batYrSemCont += " " + yr + "/";
                                                                                        }
                                                                                    }
                                                                                    if (semester != 0)
                                                                                    {
                                                                                        batYrSemHead += "Sem";
                                                                                        batYrSemCont += " " + romanLetter(cursem);
                                                                                    }
                                                                                    batYrSemHead = batYrSemHead.TrimEnd('/');
                                                                                    batYrSemCont = batYrSemCont.TrimEnd('/');

                                                                                    string HbatYrSem1 = string.Empty;
                                                                                    if (batYrSemHead != "")
                                                                                    {
                                                                                        HbatYrSem1 = "<td colspan='2'>" + batYrSemHead + ": " + batYrSemCont + "</td>";
                                                                                        arr.Add(HbatYrSem1);
                                                                                    }
                                                                                    string HseatType1 = string.Empty;
                                                                                    if (seattype != 0)
                                                                                    {
                                                                                        HseatType1 = "<td colspan='2'>Seat Type: " + seatty + "</td>";
                                                                                        arr.Add(HseatType1);
                                                                                    }
                                                                                    string Hboard1 = string.Empty;
                                                                                    if (boarding != 0)
                                                                                    {
                                                                                        Hboard1 = "<td colspan='2'>Boarding: " + board + "</td>";
                                                                                        arr.Add(Hboard1);
                                                                                    }

                                                                                    //sbHtml.Append("<br><center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 585px; padding-left:5px; ' class='classBold10'><tr><td>Receipt No</td><td>" + ": " + recptNo + "</td><td>" + Htime1 + "</td><td>" + Htime2 + "</td><td>Date</td><td>" + ": " + recptDt + "</td></tr>");
                                                                                    sbHtml.Append("<br><center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 585px; padding-left:5px; ' class='classBold10'><tr><td>Receipt No</td><td>" + ": " + recptNo + "</td><td>" + Htime1 + "</td><td>" + Htime2 + "</td><td>Date</td><td>" + ": " + recptDt + "</td></tr>");
                                                                                    int lasti = -1;
                                                                                    for (int ar = 0; ar < arr.Count; ar++)
                                                                                    {
                                                                                        if (ar == 0 || ar == 3 || ar == 6)
                                                                                        {
                                                                                            sbHtml.Append("<tr>");
                                                                                        }
                                                                                        sbHtml.Append(arr[ar]);
                                                                                        if (ar == 2 || ar == 5 || ar == 8)
                                                                                        {
                                                                                            sbHtml.Append("</tr>");
                                                                                        }
                                                                                        lasti = ar;
                                                                                    }
                                                                                    if (lasti != 2 && lasti != 5 && lasti != 8)
                                                                                    {
                                                                                        sbHtml.Append("</tr>");
                                                                                    }
                                                                                    sbHtml.Append("</table></center>");

                                                                                    #endregion

                                                                                    #region Table 2
                                                                                    //Table2 Format

                                                                                    int rows = 1;
                                                                                    foreach (GridViewRow row in grid_Details.Rows)
                                                                                    {
                                                                                        CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                                        if (!chkOkPay.Checked)
                                                                                            continue;

                                                                                        TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                                                        TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                                        double creditamt = 0;

                                                                                        if (txtTobePaidamt.Text != "")
                                                                                        {
                                                                                            creditamt = Convert.ToDouble(txtTobePaidamt.Text);
                                                                                            TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                                            double exgridamt = 0;
                                                                                            if (cb_exfees.Checked)
                                                                                            {
                                                                                                double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                                            }
                                                                                            creditamt += exgridamt;

                                                                                            double gvtamt = 0;
                                                                                            if (cb_govt.Checked)
                                                                                            {
                                                                                                double.TryParse(txtScholAmt.Text, out gvtamt);
                                                                                            }
                                                                                            creditamt += gvtamt;
                                                                                            TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");

                                                                                            double curCautamt = 0;
                                                                                            if (cb_CautionDep.Checked)
                                                                                            {
                                                                                                double.TryParse(txtCautAmt.Text, out curCautamt);
                                                                                            }
                                                                                            creditamt += curCautamt;
                                                                                            if (creditamt > 0)
                                                                                            {
                                                                                                rows++;
                                                                                            }
                                                                                        }
                                                                                    }


                                                                                    Hashtable htIndex = new Hashtable();
                                                                                    int hInsdx = 3;
                                                                                    //Table2 Header


                                                                                    if (semOrYear != 0)
                                                                                    {

                                                                                        htIndex.Add("semOrYear", hInsdx);
                                                                                        hInsdx++;
                                                                                    }


                                                                                    if (allotedAmt != 0)
                                                                                    {

                                                                                        htIndex.Add("allotedAmt", hInsdx);
                                                                                        hInsdx++;
                                                                                    }

                                                                                    if (balAmt != 0)
                                                                                    {

                                                                                        htIndex.Add("balAmt", hInsdx);
                                                                                        hInsdx++;
                                                                                    }
                                                                                    if (prevPaidAmt != 0)
                                                                                    {

                                                                                        htIndex.Add("prevPaidAmt", hInsdx);
                                                                                        hInsdx++;

                                                                                    }

                                                                                    if (concession != 0)
                                                                                    {

                                                                                        htIndex.Add("concession", hInsdx);
                                                                                        hInsdx++;

                                                                                    }

                                                                                    //sbHtml.Append("<br><center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid; ' border='1' class='classBold10'><tr><td style='text-align:center;'>S.No</td><td style='text-align:center;'>Description</td><td style='text-align:center;'>Paid Rs</td>");
                                                                                    sbHtml.Append("<br><center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid; ' border='1' class='classBold10'><tr><td style='text-align:center;'>S.No</td><td style='text-align:center;'>Description</td><td style='text-align:center;'>Amount</td>");

                                                                                    //Table2 Data

                                                                                    #region feedata
                                                                                    int sno = 0;
                                                                                    int indx = 0;
                                                                                    double totalamt = 0;
                                                                                    double balanamt = 0;
                                                                                    double curpaid = 0;
                                                                                    foreach (GridViewRow row in grid_Details.Rows)
                                                                                    {

                                                                                        CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                                        if (!chkOkPay.Checked)
                                                                                            continue;

                                                                                        TextBox txtTotalamt = (TextBox)row.FindControl("txt_tot_amt");
                                                                                        TextBox txtPaidamt = (TextBox)row.FindControl("txt_paid_amt");
                                                                                        TextBox txtBalamt = (TextBox)row.FindControl("txt_bal_amt");
                                                                                        TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                                                        TextBox txtdeductamt = (TextBox)row.FindControl("txt_deduct_amt");

                                                                                        Label lblFeeCategory = (Label)row.FindControl("lbl_feetype");
                                                                                        Label lblsem = (Label)row.FindControl("lbl_textval");

                                                                                        double creditamt = 0;

                                                                                        if (txtTobePaidamt.Text != "")
                                                                                        {
                                                                                            creditamt = Convert.ToDouble(txtTobePaidamt.Text);
                                                                                            TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                                            double exgridamt = 0;
                                                                                            if (cb_exfees.Checked)
                                                                                            {
                                                                                                double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                                            }
                                                                                            creditamt += exgridamt;

                                                                                            TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                                            double gvtamt = 0;
                                                                                            if (cb_govt.Checked)
                                                                                            {
                                                                                                double.TryParse(txtScholAmt.Text, out gvtamt);
                                                                                            }
                                                                                            creditamt += gvtamt;
                                                                                            TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");

                                                                                            double curCautamt = 0;
                                                                                            if (cb_CautionDep.Checked)
                                                                                            {
                                                                                                double.TryParse(txtCautAmt.Text, out curCautamt);
                                                                                            }
                                                                                            creditamt += curCautamt;
                                                                                        }

                                                                                        if (creditamt > 0)
                                                                                        {
                                                                                            StringBuilder tempHtml = new StringBuilder();
                                                                                            sno++;
                                                                                            indx++;
                                                                                            totalamt += Convert.ToDouble(txtTotalamt.Text);
                                                                                            balanamt += Convert.ToDouble(txtBalamt.Text);
                                                                                            curpaid += creditamt;
                                                                                            //balanamt += Convert.ToDouble(txtTotalamt.Text) + Convert.ToDouble(txtTobePaidamt.Text) - creditamt;
                                                                                            deductionamt += Convert.ToDouble(txtdeductamt.Text);
                                                                                            //tempHtml.Append("<tr><td style='text-align:center;'>" + sno + "</td><td style='text-align:left;'>" + lblFeeCategory.Text + "</td><td style='text-align:right;'>" + creditamt + "</td>");
                                                                                            tempHtml.Append("<tr><td style='text-align:center;'>" + sno + "</td><td style='text-align:left;'>" + lblFeeCategory.Text + "</td><td style='text-align:center;'>" + creditamt + "</td>");
                                                                                            if (semOrYear != 0)
                                                                                            {
                                                                                                if (htIndex.Contains("semOrYear"))
                                                                                                {
                                                                                                    tempHtml.Append("<td style='text-align:Center;'>" + lblsem.Text + "</td>");
                                                                                                    if (indx == 1)
                                                                                                    {
                                                                                                        sbHtml.Append("<td style='text-align:center;'>Category</td>");
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                            if (allotedAmt != 0)
                                                                                            {
                                                                                                if (htIndex.Contains("allotedAmt"))
                                                                                                {
                                                                                                    tempHtml.Append("<td style='text-align:center;'>" + txtTotalamt.Text + "</td>");
                                                                                                    if (indx == 1)
                                                                                                    {
                                                                                                        sbHtml.Append("<td style='text-align:center;'>Fixed Fee Rs</td>");
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                            if (balAmt != 0)
                                                                                            {
                                                                                                if (htIndex.Contains("balAmt"))
                                                                                                {
                                                                                                    tempHtml.Append("<td style='text-align:center;'>" + txtBalamt.Text + "</td>");
                                                                                                    if (indx == 1)
                                                                                                    {
                                                                                                        sbHtml.Append("<td style='text-align:center;'>Balance Rs</td>");
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            if (prevPaidAmt != 0)
                                                                                            {
                                                                                                if (htIndex.Contains("prevPaidAmt"))
                                                                                                {
                                                                                                    tempHtml.Append("<td style='text-align:center;'>" + txtPaidamt.Text + "</td>");
                                                                                                    if (indx == 1)
                                                                                                    {
                                                                                                        sbHtml.Append("<td style='text-align:center;'>Already Paid Rs</td>");
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                            if (concession != 0)
                                                                                            {
                                                                                                if (htIndex.Contains("concession"))
                                                                                                {
                                                                                                    tempHtml.Append("<td style='text-align:center;'>" + txtdeductamt.Text + "</td>");
                                                                                                    if (indx == 1)
                                                                                                    {
                                                                                                        sbHtml.Append("<td style='text-align:center;'>Deduction Rs</td>");
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            sbHtml.Append("</tr>");
                                                                                            tempHtml.Append("</tr>");
                                                                                            sbHtml.Append(tempHtml.ToString());
                                                                                        }
                                                                                    }

                                                                                    #endregion

                                                                                    #endregion

                                                                                    #region Table 3
                                                                                    //Table3 Header   
                                                                                    if (BalanceType == 1)
                                                                                    {
                                                                                        balanamt = retBalance(appnoNew);
                                                                                    }
                                                                                    decimal totalamount = (decimal)curpaid;
                                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid;padding-top:0px; ' border='1' class='classBold10'><tr><td style='text-align:center;' colspan='4'>Received " + DecimalToWords(totalamount).ToString() + "Rupees Only</td><td style='text-align:center;'>Total</td><td style='text-align:center;'>Rs. " + curpaid + "/-</td><td style='text-align:center;'>Balance</td><td style='text-align:center;'>Rs. " + balanamt + "/-</td><tr></table></center>");

                                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:1px solid;padding-top:0px; ' border='1' class='classBold10'><tr><td style='text-align:center;' colspan='4'> " + DecimalToWords(totalamount).ToString() + "Rupees Only</td><td style='text-align:center;'>Total</td><td style='text-align:center;' colspan='3'>Rs. " + curpaid + "/-</td><tr></table></center>");

                                                                                    sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px;  border:0px solid;padding-top:0px; ' class='classBold10'><tr><td style='text-align:center;' colspan='4'> ( " + DecimalToWords(totalamount).ToString() + " Rupees Only )</td><td style='text-align:center;' colspan='3'>Total - Rs. " + curpaid + "/-</td><tr></table></center>");
                                                                                    #endregion

                                                                                    //sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px; padding-top:5px; ' class='classBold10'><tr><td style='text-align:center;'>Mode of Pay : " + modeMulti + ddnar + "</td>");
                                                                                    string remarks = string.Empty;
                                                                                    if (narration == 1)
                                                                                    {
                                                                                        remarks = d2.GetFunction("select narration from ft_findailytransaction where TransCode='" + recptNo.Trim() + "' and app_no='" + appnoNew + "' and isnull(iscanceled,0)=0");
                                                                                        if (remarks.Trim() == "0" || remarks.Trim() == string.Empty)
                                                                                            remarks = string.Empty;
                                                                                        else
                                                                                        {
                                                                                            remarks = "\n Narration : " + remarks;
                                                                                        }
                                                                                    }
                                                                                    sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:left; width: 560px; padding-top:5px; ' class='classBold10'><tr><td style='text-align:left;'>Mode of Pay : " + mode + " " + ddnew + "</td></tr><tr><td style='text-align:left;'>" + remarks + " </td>");

                                                                                    if (deduction != 0)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:center;'>Deduction Amount Rs. : " + deductionamt + "</td>");
                                                                                    }
                                                                                    if (excessAmt != 0)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:center;'>Excess Amount Rs. : " + excessRemaining(appnoNew).ToString() + "</td>");
                                                                                    }
                                                                                    if (validDate != 0)
                                                                                    {
                                                                                        sbHtml.Append("<td style='text-align:center;'>Valid upto : " + "(" + recptValid + ")</td>");
                                                                                    }
                                                                                    sbHtml.Append("<tr></table></center>");

                                                                                    sbHtml.Append("<center><table cellpadding='0' cellspacing='0' style='text-align:right; width: 560px;  padding-top:5px; ' class='classBold10'><tr><td style='text-align:right;'>");
                                                                                    //Authorizer
                                                                                    if (forclgName != 0)
                                                                                    {
                                                                                        sbHtml.Append("For " + collegename + "");
                                                                                    }

                                                                                    //if (authSignValue.Trim() != "")
                                                                                    //{
                                                                                    //    sbHtml.Append("<br><br> " + authSignValue + "");
                                                                                    //}
                                                                                    //else
                                                                                    //{
                                                                                    //    sbHtml.Append("<br><br><span style='margin-left:20px; text-align:left;float:left;'>#copy#</span> " + "Authorised Signature" + "");
                                                                                    //}

                                                                                    sbHtml.Append("</td><tr></table></center>");

                                                                                    int marginTop = 220 - (rows * 15);
                                                                                    if (authSignValue.Trim() != "")
                                                                                    {
                                                                                        sbHtml.Append("<br><br><div style='margin-top:" + marginTop + "px;margin-left:20px; text-align:left;float:left;'>#copy#<span style='padding-left:330px;'> " + authSignValue + "</span></div> ");
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        sbHtml.Append("<br><br><div style='margin-top:" + marginTop + "px;margin-left:20px; text-align:left;float:left;'>#copy#<span style='padding-left:330px;'>Authorised Signature</span></div> ");
                                                                                    }

                                                                                    if (studCopy != 0 || studOffiCopy == 1)
                                                                                    {
                                                                                        if (studOffiCopy != 1)
                                                                                        {
                                                                                            StringBuilder sbFinal = new StringBuilder();
                                                                                            sbFinal.Append("<div style='padding-left:5px;height: 920px; width:595px;'>");
                                                                                            sbFinal.Append("<div style='width:585px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "</div>");
                                                                                            sbFinal.Append("</div><br>");
                                                                                            sbFinal.Replace("#copy#", "Original Copy");
                                                                                            contentDiv.InnerHtml += sbFinal.ToString();
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            StringBuilder sbFinal1 = new StringBuilder();
                                                                                            sbFinal1.Append("<div style='width:585px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "</div><br>");
                                                                                            sbFinal1.Replace("#copy#", "Original Copy");
                                                                                            StringBuilder sbFinal = new StringBuilder();
                                                                                            sbFinal.Append("<div style='padding-left:5px;height: 920px; width:595px;'>");
                                                                                            sbFinal.Append(sbFinal1.ToString());
                                                                                            sbFinal.Append("<div style='width:585px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "</div>");
                                                                                            sbFinal.Append("</div><br>");
                                                                                            sbFinal.Replace("#copy#", "Duplicate Copy");
                                                                                            contentDiv.InnerHtml += sbFinal.ToString();
                                                                                        }
                                                                                    }

                                                                                    if (officopy != 0 && studOffiCopy != 1)
                                                                                    {
                                                                                        StringBuilder sbFinal = new StringBuilder();
                                                                                        sbFinal.Append("<div style='padding-left:5px;height: 920px; width:595px;'>");
                                                                                        sbFinal.Append("<div style='width:585px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "</div> ");
                                                                                        sbFinal.Append("</div><br>");
                                                                                        sbFinal.Replace("#copy#", "Office Copy");
                                                                                        contentDiv.InnerHtml += sbFinal.ToString();
                                                                                    }

                                                                                    if (transCopy != 0)
                                                                                    {
                                                                                        StringBuilder sbFinal = new StringBuilder();
                                                                                        sbFinal.Append("<div style='padding-left:5px;height: 920px; width:595px;'>");
                                                                                        sbFinal.Append("<div style='width:585px; height:" + rectHeight + "px;padding-top:5px; border:1px solid;text-align:right;'  class='classBold10'>" + sbHtml.ToString() + "</div>");
                                                                                        sbFinal.Append("</div><br>");
                                                                                        sbFinal.Replace("#copy#", "Transport Copy");
                                                                                        contentDiv.InnerHtml += sbFinal.ToString();
                                                                                    }

                                                                                }
                                                                                #endregion
                                                                            }

                                                                            #region New Print
                                                                            //contentDiv.InnerHtml += sbHtml.ToString();
                                                                            contentDiv.Visible = true;
                                                                            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                                                                            #endregion
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }

                                                            else if (save1 == 4)
                                                            {
                                                                //For Velammal
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))//&& txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    //Basic Data
                                                                    //string rollno = txt_rollno.Text.Trim();
                                                                    //  string recptNo = txt_rcptno.Text.Trim();
                                                                    string recptNo = string.Empty;
                                                                    //modified by sudhagar editable receipt no
                                                                    tempRcpt = Convert.ToString(txttemprcpt.Text.Trim());
                                                                    if (!string.IsNullOrEmpty(tempRcpt))
                                                                        recptNo = tempRcpt;
                                                                    else
                                                                        recptNo = txt_rcptno.Text.Trim();
                                                                    string recptDt = txt_date.Text.Trim();
                                                                    //string studname = txt_name.Text.Trim();
                                                                    string course = txt_dept.Text.Trim();
                                                                    if (rbl_rollnoNew.SelectedIndex == 1)
                                                                    {
                                                                        course = txtDept_staff.Text.Trim();
                                                                    }
                                                                    string batchYrSem = string.Empty;
                                                                    string acaYear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanAcademicYear' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                                                                    try
                                                                    {
                                                                        acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                                                                    }
                                                                    catch { }
                                                                    try
                                                                    {
                                                                        course = course.Split('-')[0];
                                                                    }
                                                                    catch { course = ""; }

                                                                    // string mode = string.Empty;

                                                                    if (rb_cash.Checked)
                                                                    {
                                                                        mode = "Cash";
                                                                    }
                                                                    else if (rb_cheque.Checked)
                                                                    {
                                                                        mode = "Cheque";
                                                                    }
                                                                    else if (rb_dd.Checked)
                                                                    {
                                                                        mode = "DD";
                                                                    }
                                                                    else if (rb_card.Checked)
                                                                    {
                                                                        mode = "Card";
                                                                    }
                                                                    else if (rb_NEFT.Checked)
                                                                    {
                                                                        mode = "NEFT";
                                                                    }
                                                                    //Fields to print
                                                                    string queryPrint1 = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                                    ds.Clear();
                                                                    ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                                    if (ds.Tables.Count > 0)
                                                                    {
                                                                        if (ds.Tables[0].Rows.Count > 0)
                                                                        {

                                                                            //Footer Div Values

                                                                            byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                            byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                            byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);

                                                                            //Document Settings
                                                                            PdfDocument recptDoc = new PdfDocument(PdfDocumentFormat.InCentimeters(18, 15.2));
                                                                            PdfPage rcptpage = recptDoc.NewPage();
                                                                            Font Fontboldhead = new Font("Arial", 10, FontStyle.Bold);
                                                                            Font FontTableHead = new Font("Arial", 10, FontStyle.Bold);
                                                                            Font FontTable = new Font("Arial", 10, FontStyle.Bold);

                                                                            string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + "  ";
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 3)
                                                                                {
                                                                                    colquery += " select a.Current_Semester,a.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,a.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,'' Boarding,a.mother,a.parent_name,ISNULL( type,'') as type,'' Sections  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.App_No='" + appnoNew + "' and d.college_code=" + collegecode1 + "";
                                                                                }
                                                                                else
                                                                                {
                                                                                    colquery += " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,isnull(r.Sections,'') as Sections from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + " ";
                                                                                }
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                colquery += "  select appl_id ,h.dept_name,h.dept_acronym,h.dept_code,s.staff_name,s.staff_code,a.father_name,t.stftype as staff_type  from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where s.appl_no =a.appl_no and s.staff_code =t.staff_code and t.dept_code =h.dept_code and d.desig_code =t.desig_code and s.college_code =h.college_code and d.collegeCode =s.college_code and latestrec ='1' and appl_id ='" + appnoNew + "' and s.college_Code=" + collegecode1 + "  ";
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                            {
                                                                                colquery += " SELECT VendorContactPK, VenContactType, VenContactName, VenContactDesig, VenContactDept, VendorPhoneNo, VendorExtNo, VendorMobileNo, VendorEmail, VendorFK FROM      IM_VendorContactMaster WHERE VendorContactPK = '" + appnoNew + "' ";
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                            {
                                                                                colquery += " SELECT VendorCode,vendorname,VendorMobileNo,VendorAddress,VendorCity,VendorCompName,VendorType  from co_vendormaster  WHERE VendorPK = '" + appnoNew + "' ";
                                                                                outRoll = string.Empty;
                                                                            }
                                                                            string collegename = "";
                                                                            string add1 = "";
                                                                            string add2 = "";
                                                                            string add3 = "";
                                                                            string univ = "";
                                                                            string deg = "";
                                                                            string cursem = "";
                                                                            string batyr = "";
                                                                            string seatty = "";
                                                                            string board = "";
                                                                            string mothe = "";
                                                                            string fathe = "";
                                                                            double deductionamt = 0;
                                                                            string fgraduate = d2.GetFunction("select isnull(first_graduate,0) as first_graduate  from applyn where app_no='" + appnoNew + "'");
                                                                            if (fgraduate == "0")
                                                                            {
                                                                                fgraduate = string.Empty;
                                                                            }
                                                                            else
                                                                            {
                                                                                fgraduate = " FG ";
                                                                            }

                                                                            string sec = string.Empty;
                                                                            ds.Clear();
                                                                            ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                            if (ds.Tables.Count > 0)
                                                                            {
                                                                                if (ds.Tables[0].Rows.Count > 0)
                                                                                {
                                                                                    collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                                    add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                                    add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                                    add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                                }

                                                                                if (ds.Tables[1].Rows.Count > 0)
                                                                                {
                                                                                    if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                    {
                                                                                        //if (degACR == 0)
                                                                                        //{
                                                                                        // deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                                        //}
                                                                                        //else
                                                                                        //{
                                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                        //}
                                                                                        cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                        batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                                        board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                        mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                                        sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                    {
                                                                                        //if (degACR == 0)
                                                                                        //{
                                                                                        // deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_name"]);
                                                                                        //}
                                                                                        //else
                                                                                        //{
                                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                        //}
                                                                                        //cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                        //batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["staff_type"]);
                                                                                        //board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                        //mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["father_name"]);
                                                                                        //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                    {
                                                                                        deg = " - ";
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                                    {
                                                                                        deg = " - ";
                                                                                    }
                                                                                }

                                                                                if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                {
                                                                                    course = txtDept_staff.Text.Trim();
                                                                                    fgraduate = "";
                                                                                }
                                                                            }

                                                                            #region Table 1
                                                                            //Table1 Format 

                                                                            PdfTable tableparts = recptDoc.NewTable(FontTableHead, 5, 6, 2);
                                                                            tableparts.VisibleHeaders = false;

                                                                            tableparts.Rows[0].SetRowHeight(10);
                                                                            tableparts.Rows[1].SetRowHeight(30);
                                                                            tableparts.Rows[2].SetRowHeight(20);
                                                                            tableparts.Rows[3].SetRowHeight(20);
                                                                            tableparts.Rows[4].SetRowHeight(10);
                                                                            tableparts.Rows[0].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts.Rows[1].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts.Rows[2].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts.Rows[3].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts.Rows[4].SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            //Table1 Data
                                                                            //Line 1
                                                                            int rowindextbl1 = 0;

                                                                            tableparts.Cell(rowindextbl1, 0).SetContent("");
                                                                            tableparts.Cell(rowindextbl1, 0).SetFont(FontTable);
                                                                            tableparts.Cell(rowindextbl1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                            tableparts.Rows[rowindextbl1].SetRowHeight(10);
                                                                            rowindextbl1++;
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                tableparts.Cell(rowindextbl1, 0).SetContent("Roll No");
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                tableparts.Cell(rowindextbl1, 0).SetContent("Staff Id");
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                            {
                                                                                tableparts.Cell(rowindextbl1, 0).SetContent("Vendor Id");
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                            {
                                                                                tableparts.Cell(rowindextbl1, 0).SetContent("");
                                                                            }

                                                                            tableparts.Cell(rowindextbl1, 0).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts.Cell(rowindextbl1, 1).SetContent(": " + outRoll);
                                                                            tableparts.Cell(rowindextbl1, 1).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts.Cell(rowindextbl1, 1).ColSpan = 2;

                                                                            tableparts.Cell(rowindextbl1, 4).SetContent("Receipt No");
                                                                            tableparts.Cell(rowindextbl1, 4).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts.Cell(rowindextbl1, 5).SetContent(": " + recptNo);
                                                                            tableparts.Cell(rowindextbl1, 5).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 5).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            //Line2
                                                                            rowindextbl1++;
                                                                            tableparts.Cell(rowindextbl1, 0).SetContent("Name");
                                                                            tableparts.Cell(rowindextbl1, 0).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            tableparts.Cell(rowindextbl1, 1).SetContent(": " + studname.ToUpper());
                                                                            tableparts.Cell(rowindextbl1, 1).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts.Cell(rowindextbl1, 1).ColSpan = 3;

                                                                            tableparts.Cell(rowindextbl1, 4).SetContent("Date");
                                                                            tableparts.Cell(rowindextbl1, 4).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            tableparts.Cell(rowindextbl1, 5).SetContent(": " + recptDt);
                                                                            tableparts.Cell(rowindextbl1, 5).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 5).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            //Line3
                                                                            rowindextbl1++;

                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                tableparts.Cell(rowindextbl1, 0).SetContent("Year/ Major");
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                tableparts.Cell(rowindextbl1, 0).SetContent("Dept");
                                                                            }
                                                                            tableparts.Cell(rowindextbl1, 0).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                tableparts.Cell(rowindextbl1, 1).SetContent(": " + romanLetter(returnYearforSem(cursem)) + " / " + deg.Split('-')[1].ToUpper() + sec.ToUpper() + fgraduate.ToUpper());
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                tableparts.Cell(rowindextbl1, 1).SetContent(": " + deg.ToUpper());
                                                                            }

                                                                            tableparts.Cell(rowindextbl1, 1).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts.Cell(rowindextbl1, 1).ColSpan = 3;

                                                                            tableparts.Cell(rowindextbl1, 4).SetContent("Term");
                                                                            tableparts.Cell(rowindextbl1, 4).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts.Cell(rowindextbl1, 5).SetContent(": " + acaYear);
                                                                            tableparts.Cell(rowindextbl1, 5).SetFont(FontTableHead);
                                                                            tableparts.Cell(rowindextbl1, 5).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            rowindextbl1++;
                                                                            tableparts.Cell(rowindextbl1, 0).SetContent("-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
                                                                            tableparts.Cell(rowindextbl1, 0).SetFont(FontTable);
                                                                            tableparts.Cell(rowindextbl1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                            tableparts.Rows[rowindextbl1].SetRowHeight(10);


                                                                            PdfTablePage addtabletopage1 = tableparts.CreateTablePage(new PdfArea(recptDoc, 10, 10, 480, 150));
                                                                            rcptpage.Add(addtabletopage1);

                                                                            #endregion

                                                                            #region Table 2
                                                                            //Table2 Format


                                                                            int rows = 0;
                                                                            foreach (GridViewRow row in grid_Details.Rows)
                                                                            {
                                                                                CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                                if (!chkOkPay.Checked)
                                                                                    continue;
                                                                                TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");

                                                                                double creditamt = 0;

                                                                                if (txtTobePaidamt.Text != "")
                                                                                {
                                                                                    creditamt = Convert.ToDouble(txtTobePaidamt.Text);
                                                                                    TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                                    double exgridamt = 0;
                                                                                    if (cb_exfees.Checked)
                                                                                    {
                                                                                        double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                                    }
                                                                                    creditamt += exgridamt;
                                                                                    TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                                    double gvtamt = 0;
                                                                                    if (cb_govt.Checked)
                                                                                    {
                                                                                        double.TryParse(txtScholAmt.Text, out gvtamt);
                                                                                    }
                                                                                    creditamt += gvtamt;
                                                                                    TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");

                                                                                    double curCautamt = 0;
                                                                                    if (cb_CautionDep.Checked)
                                                                                    {
                                                                                        double.TryParse(txtCautAmt.Text, out curCautamt);
                                                                                    }
                                                                                    creditamt += curCautamt;
                                                                                    if (creditamt > 0)
                                                                                    {
                                                                                        rows++;
                                                                                    }
                                                                                }
                                                                            }

                                                                            PdfTable tableparts1 = recptDoc.NewTable(FontTable, rows + 5, 4, 1);
                                                                            //tableparts1.SetBorders(Color.Black, 1, BorderType.Rows);
                                                                            tableparts1.VisibleHeaders = false;
                                                                            tableparts1.Columns[0].SetWidth(57);
                                                                            tableparts1.Columns[1].SetWidth(340);
                                                                            tableparts1.Columns[2].SetWidth(85);
                                                                            tableparts1.Columns[3].SetWidth(28);

                                                                            tableparts1.Cell(0, 0).SetContent("S.No");
                                                                            tableparts1.Cell(0, 0).SetFont(FontTable);
                                                                            tableparts1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);


                                                                            tableparts1.Cell(0, 1).SetContent("Particulars");
                                                                            tableparts1.Cell(0, 1).SetFont(FontTable);
                                                                            tableparts1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            //tableparts1.Cell(indx, 1).ColSpan = 4;

                                                                            tableparts1.Cell(0, 2).SetContent("Rs.");
                                                                            tableparts1.Cell(0, 2).SetFont(FontTable);
                                                                            tableparts1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                                            tableparts1.Cell(0, 3).SetContent("Ps.");
                                                                            tableparts1.Cell(0, 3).SetFont(FontTable);
                                                                            tableparts1.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                            tableparts1.Rows[0].SetRowHeight(20);
                                                                            tableparts1.Rows[1].SetRowHeight(10);
                                                                            //Table2 Data

                                                                            #region feedata
                                                                            int sno = 0;
                                                                            int indx = 1;
                                                                            double totalamt = 0;
                                                                            double balanamt = 0;
                                                                            double curpaid = 0;
                                                                            foreach (PdfCell pr in tableparts1.CellRange(indx, 0, indx, 0).Cells)
                                                                            {
                                                                                pr.ColSpan = 4;
                                                                            }

                                                                            tableparts1.Cell(indx, 0).SetContent("-----------------------------------------------------------------------------------------------------------------------------------------------------");
                                                                            tableparts1.Cell(indx, 0).SetFont(FontTable);
                                                                            tableparts1.Cell(indx, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                            tableparts1.Rows[indx].SetRowHeight(10);
                                                                            indx++;
                                                                            foreach (GridViewRow row in grid_Details.Rows)
                                                                            {
                                                                                CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                                if (!chkOkPay.Checked)
                                                                                    continue;

                                                                                TextBox txtTotalamt = (TextBox)row.FindControl("txt_tot_amt");
                                                                                TextBox txtPaidamt = (TextBox)row.FindControl("txt_paid_amt");
                                                                                TextBox txtBalamt = (TextBox)row.FindControl("txt_bal_amt");
                                                                                TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                                                TextBox txtdeductamt = (TextBox)row.FindControl("txt_deduct_amt");

                                                                                Label lblFeeCategory = (Label)row.FindControl("lbl_feetype");
                                                                                Label lblsem = (Label)row.FindControl("lbl_textval");

                                                                                double creditamt = 0;

                                                                                if (txtTobePaidamt.Text != "")
                                                                                {
                                                                                    creditamt = Convert.ToDouble
        (txtTobePaidamt.Text);
                                                                                    TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                                    double exgridamt = 0;
                                                                                    if (cb_exfees.Checked)
                                                                                    {
                                                                                        double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                                    }
                                                                                    creditamt += exgridamt;

                                                                                    TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                                    double gvtamt = 0;
                                                                                    if (cb_govt.Checked)
                                                                                    {
                                                                                        double.TryParse(txtScholAmt.Text, out gvtamt);
                                                                                    }
                                                                                    creditamt += gvtamt;
                                                                                    TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");

                                                                                    double curCautamt = 0;
                                                                                    if (cb_CautionDep.Checked)
                                                                                    {
                                                                                        double.TryParse(txtCautAmt.Text, out curCautamt);
                                                                                    }
                                                                                    creditamt += curCautamt;
                                                                                }

                                                                                if (creditamt > 0)
                                                                                {
                                                                                    sno++;

                                                                                    totalamt += Convert.ToDouble(txtTotalamt.Text);
                                                                                    balanamt += Convert.ToDouble(txtBalamt.Text);
                                                                                    curpaid += creditamt;
                                                                                    //balanamt += Convert.ToDouble(txtTotalamt.Text) + Convert.ToDouble(txtTobePaidamt.Text) - creditamt;
                                                                                    deductionamt += Convert.ToDouble(txtdeductamt.Text);

                                                                                    tableparts1.Cell(indx, 0).SetContent(sno);
                                                                                    tableparts1.Cell(indx, 0).SetFont(FontTable);
                                                                                    tableparts1.Cell(indx, 0).SetContentAlignment(ContentAlignment.MiddleCenter);


                                                                                    tableparts1.Cell(indx, 1).SetContent(lblFeeCategory.Text);
                                                                                    tableparts1.Cell(indx, 1).SetFont(FontTable);
                                                                                    tableparts1.Cell(indx, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                    //tableparts1.Cell(indx, 1).ColSpan = 4;

                                                                                    tableparts1.Cell(indx, 2).SetContent(returnIntegerPart(creditamt));
                                                                                    tableparts1.Cell(indx, 2).SetFont(FontTable);
                                                                                    tableparts1.Cell(indx, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                                                    tableparts1.Cell(indx, 3).SetContent(returnDecimalPart(creditamt));
                                                                                    tableparts1.Cell(indx, 3).SetFont(FontTable);
                                                                                    tableparts1.Cell(indx, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                                    indx++;
                                                                                }
                                                                            }



                                                                            foreach (PdfCell pr in tableparts1.CellRange(indx, 0, indx, 0).Cells)
                                                                            {
                                                                                pr.ColSpan = 4;
                                                                            }

                                                                            tableparts1.Cell(indx, 0).SetContent("-----------------------------------------------------------------------------------------------------------------------------------------------------");
                                                                            tableparts1.Cell(indx, 0).SetFont(FontTable);
                                                                            tableparts1.Cell(indx, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                            tableparts1.Rows[indx].SetRowHeight(10);
                                                                            indx++;
                                                                            decimal totalamount = (decimal)curpaid;
                                                                            tableparts1.Cell(indx, 1).SetContent("Total");
                                                                            tableparts1.Cell(indx, 1).SetFont(FontTable);
                                                                            tableparts1.Cell(indx, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts1.Cell(indx, 2).SetContent("" + returnIntegerPart((double)totalamount));
                                                                            tableparts1.Cell(indx, 2).SetFont(FontTable);
                                                                            tableparts1.Cell(indx, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                                                            tableparts1.Cell(indx, 3).SetContent(returnDecimalPart((double)totalamount));
                                                                            tableparts1.Cell(indx, 3).SetFont(FontTable);
                                                                            tableparts1.Cell(indx, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                                            string endstatement = "\n" + DecimalToWords(totalamount) + " Rupees Only." + "\n\nPaid by " + mode + " Rs." + totalamount.ToString() + "/-.";
                                                                            string finalstrig = "";

                                                                            finalstrig = "\nExcess Amount  : " + excessRemaining(appnoNew).ToString();
                                                                            if (rb_dd.Checked == true)
                                                                            {
                                                                                finalstrig = finalstrig + "\n" + mode + " : " + txt_ddno.Text.ToString() + "         Date  : " + txt_date1.Text.ToString();
                                                                                finalstrig = finalstrig + "\nBank Name  : " + ddl_bkname.SelectedItem.Text.ToString();
                                                                            }
                                                                            if (rb_cheque.Checked == true)
                                                                            {
                                                                                finalstrig = "\n" + mode + " : " + txt_chqno.Text.ToString() + "         Date  : " + txt_date1.Text.ToString();
                                                                                finalstrig = finalstrig + "\n\nBank Name  : " + ddl_bkname.SelectedItem.Text.ToString();
                                                                            }
                                                                            if (rb_card.Checked)
                                                                            {
                                                                                finalstrig = "\n" + mode + " : " + newbankname;
                                                                            }
                                                                            endstatement = endstatement + finalstrig;

                                                                            tableparts1.Cell(indx + 1, 0).SetContent(endstatement);
                                                                            tableparts1.Cell(indx + 1, 0).SetFont(FontTable);
                                                                            tableparts1.Cell(indx + 1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts1.Cell(indx + 1, 0).ColSpan = 3;

                                                                            #endregion

                                                                            PdfTablePage addtabletopage2 = tableparts1.CreateTablePage(new PdfArea(recptDoc, 10, 80, 480, 500));
                                                                            rcptpage.Add(addtabletopage2);

                                                                            #endregion


                                                                            rcptpage.SaveToDocument();

                                                                            //save changes
                                                                            PdfPage rcptpageOf = rcptpage.CreateCopy();
                                                                            PdfPage rcptpageTran = rcptpage.CreateCopy();
                                                                            if (officopy != 0)
                                                                            {
                                                                                rcptpageOf.SaveToDocument();
                                                                            }

                                                                            if (transCopy != 0)
                                                                            {
                                                                                rcptpageTran.SaveToDocument();
                                                                            }

                                                                            //Response Write
                                                                            string appPath = HttpContext.Current.Server.MapPath("~");
                                                                            if (appPath != "")
                                                                            {
                                                                                string szPath = appPath + "/Report/";
                                                                                string szFile = "Receipt" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";

                                                                                Response.Buffer = true;
                                                                                Response.Clear();
                                                                                recptDoc.SaveToFile(szPath + szFile);


                                                                                Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");

                                                                            }
                                                                            else
                                                                            {
                                                                                imgAlert.Visible = true;
                                                                                //this.Form.DefaultButton = "btn_alertclose";
                                                                                lbl_alert.Text = "Receipt Cannont Be Generated";
                                                                            }
                                                                        }

                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }
                                                            else if (save1 == 5)
                                                            {
                                                                //Jeppiar
                                                            }
                                                            else if (save1 == 6)
                                                            {
                                                                //For PMC
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))// && txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    //Basic Data
                                                                    //string rollno = txt_rollno.Text.Trim();
                                                                    // string recptNo = txt_rcptno.Text.Trim();
                                                                    string recptNo = string.Empty;
                                                                    //modified by sudhagar editable receipt no
                                                                    tempRcpt = Convert.ToString(txttemprcpt.Text.Trim());
                                                                    if (!string.IsNullOrEmpty(tempRcpt))
                                                                        receiptno = tempRcpt;
                                                                    else
                                                                        receiptno = txt_rcptno.Text.Trim();
                                                                    string recptDt = txt_date.Text.Trim();
                                                                    //string studname = txt_name.Text.Trim();
                                                                    string course = txt_dept.Text.Trim();
                                                                    string batchYrSem = string.Empty;
                                                                    string acaYear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanAcademicYear' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                                                                    try
                                                                    {
                                                                        acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                                                                    }
                                                                    catch { }
                                                                    try
                                                                    {
                                                                        course = course.Split('-')[0];
                                                                    }
                                                                    catch { course = ""; }
                                                                    // string mode = string.Empty;

                                                                    if (rb_cash.Checked)
                                                                    {
                                                                        mode = "Cash";
                                                                    }
                                                                    else if (rb_cheque.Checked)
                                                                    {
                                                                        mode = "Cheque - No:" + checkDDno;
                                                                    }
                                                                    else if (rb_dd.Checked)
                                                                    {
                                                                        mode = "DD - No:" + checkDDno;
                                                                    }
                                                                    else if (rb_card.Checked)
                                                                    {
                                                                        mode = "Card - " + newbankname;
                                                                    }

                                                                    //Fields to print
                                                                    string queryPrint1 = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                                    ds.Clear();
                                                                    ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                                    if (ds.Tables.Count > 0)
                                                                    {
                                                                        if (ds.Tables[0].Rows.Count > 0)
                                                                        {

                                                                            //Footer Div Values
                                                                            byte narration = Convert.ToByte(ds.Tables[0].Rows[0]["IsNarration"]);

                                                                            byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                            byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                            byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);

                                                                            //Document Settings
                                                                            contentDiv.InnerHtml = "";
                                                                            StringBuilder sbHtml = new StringBuilder();

                                                                            string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " ";
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 3)
                                                                                {
                                                                                    colquery += " select a.Current_Semester,a.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,a.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,'' Boarding,a.mother,a.parent_name,ISNULL( type,'') as type,'' Sections  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.App_No='" + appnoNew + "' and d.college_code=" + collegecode1 + "";
                                                                                }
                                                                                else
                                                                                {
                                                                                    colquery += " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,isnull(r.Sections,'') as Sections from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + " ";
                                                                                }
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                colquery += "  select appl_id ,h.dept_name,h.dept_acronym,h.dept_code,s.staff_name,s.staff_code,a.father_name,t.stftype as staff_type  from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where s.appl_no =a.appl_no and s.staff_code =t.staff_code and t.dept_code =h.dept_code and d.desig_code =t.desig_code and s.college_code =h.college_code and d.collegeCode =s.college_code and latestrec ='1' and appl_id ='" + appnoNew + "' and s.college_Code=" + collegecode1 + "  ";
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                            {
                                                                                colquery += " SELECT VendorContactPK, VenContactType, VenContactName, VenContactDesig, VenContactDept, VendorPhoneNo, VendorExtNo, VendorMobileNo, VendorEmail, VendorFK FROM      IM_VendorContactMaster WHERE VendorContactPK = '" + appnoNew + "' ";
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                            {
                                                                                colquery += " SELECT VendorCode,vendorname,VendorMobileNo,VendorAddress,VendorCity,VendorCompName,VendorType  from co_vendormaster  WHERE VendorPK = '" + appnoNew + "' ";
                                                                                outRoll = string.Empty;
                                                                            }
                                                                            string collegename = "";
                                                                            string add1 = "";
                                                                            string add2 = "";
                                                                            string add3 = "";
                                                                            string univ = "";
                                                                            string deg = "";
                                                                            string cursem = "";
                                                                            string batyr = "";
                                                                            string seatty = "";
                                                                            string board = "";
                                                                            string mothe = "";
                                                                            string fathe = "";
                                                                            double deductionamt = 0;
                                                                            ds.Clear();
                                                                            ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                            if (ds.Tables.Count > 0)
                                                                            {
                                                                                if (ds.Tables[0].Rows.Count > 0)
                                                                                {
                                                                                    collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                                    add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                                    add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                                    add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                                }
                                                                                if (ds.Tables[1].Rows.Count > 0)
                                                                                {
                                                                                    if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                    {
                                                                                        //if (degACR == 0)
                                                                                        //{
                                                                                        // deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                                        //}
                                                                                        //else
                                                                                        //{
                                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                        //}
                                                                                        cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                        batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                                        board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                        mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                                        //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                    {
                                                                                        //if (degACR == 0)
                                                                                        //{
                                                                                        // deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_name"]);
                                                                                        //}
                                                                                        //else
                                                                                        //{
                                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                        //}
                                                                                        //cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                        //batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["staff_type"]);
                                                                                        //board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                        //mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["father_name"]);
                                                                                        //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                    {
                                                                                        deg = " - ";
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                                    {
                                                                                        deg = " - ";
                                                                                    }
                                                                                }

                                                                                if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                {
                                                                                    course = txtDept_staff.Text.Trim();
                                                                                }
                                                                            }

                                                                            #region Receipt Header

                                                                            string degString = string.Empty;
                                                                            //Line3
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                degString = deg;//.Split('-')[0].ToUpper();
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                degString = deg;
                                                                            }
                                                                            string deptstring = string.Empty;
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                deptstring = deg.Split('-')[1].ToUpper();
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {

                                                                            }

                                                                            sbHtml.Append("<div style='padding-left: 0px; height: 500px; width: 640px;><table cellpadding='0' cellspacing='0' style='text-align:center; width: 640px; ' class='classBold10'><tr><td>");

                                                                            sbHtml.Append("<div style='text-align: right; padding-left: 0px; width: 640px; height: 47px;'><img src='../FinanceLogo/right_Logo" + collegecode1 + ".jpeg?" + DateTime.Now.Ticks.ToString() + "' style='padding-left: 610px;' height='45px' width='60px'/></div>");

                                                                            //  sbHtml.Append("<table style='width:586px; height:100px; padding-left:20px; ' class='classBold10'><tr><td style='width:200px; text-align:left;'>" + recptNo + "</td><td style='width:200px; text-align:left;'>" + recptDt + "</td><td style='width:180px; text-align:right;'>" + Regno + "</td></tr><tr><td style='width:590px; text-align:left;' colspan='2'>" + studname.ToUpper() + "</td></tr><tr><td style='width:300px; text-align:left;'>" + degString + "</td><td style='width:280px; text-align:left;'>" + romanLetter(returnYearforSem(cursem)) + " Year </td></tr></table>");
                                                                            sbHtml.Append("<table style='width: 560px; height: 110px; padding-top: 54px;' class='classBold10'><tr><td style='width: 180px; text-align: right; padding-bottom:2px;'>&nbsp;&nbsp;" + recptNo + "</td><td style='width: 160px; text-align: right;padding-bottom:2px;'>&nbsp;&nbsp;&nbsp;&nbsp;" + recptDt + "</td><td style='width: 180px; text-align: right;padding-bottom:2px;'>" + Regno + "</td></tr><tr><td style='width: 560px; padding-top: 4px;' colspan='3'><span style='padding-left: 71px;'>" + studname.ToUpper() + "</span></td></tr><tr><td style='width: 150px; text-align: right; padding-top: 10px;' >" + degString + "</td><td style='width: 320px; padding-left: 71px; padding-top: 10px;' colspan='2'>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;" + romanLetter(returnYearforSem(cursem)) + " Year </td></tr></table>");
                                                                            #endregion

                                                                            #region Receipt Body

                                                                            int rows = 0;
                                                                            foreach (GridViewRow row in grid_Details.Rows)
                                                                            {
                                                                                CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                                if (!chkOkPay.Checked)
                                                                                    continue;
                                                                                TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");

                                                                                double creditamt = 0;

                                                                                if (txtTobePaidamt.Text != "")
                                                                                {
                                                                                    creditamt = Convert.ToDouble(txtTobePaidamt.Text);
                                                                                    TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                                    double exgridamt = 0;
                                                                                    if (cb_exfees.Checked)
                                                                                    {
                                                                                        double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                                    }
                                                                                    creditamt += exgridamt;
                                                                                    TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                                    double gvtamt = 0;
                                                                                    if (cb_govt.Checked)
                                                                                    {
                                                                                        double.TryParse(txtScholAmt.Text, out gvtamt);
                                                                                    }
                                                                                    creditamt += gvtamt;
                                                                                    TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");

                                                                                    double curCautamt = 0;
                                                                                    if (cb_CautionDep.Checked)
                                                                                    {
                                                                                        double.TryParse(txtCautAmt.Text, out curCautamt);
                                                                                    }
                                                                                    creditamt += curCautamt;
                                                                                    if (creditamt > 0)
                                                                                    {
                                                                                        rows++;
                                                                                    }
                                                                                }
                                                                            }

                                                                            // sbHtml.Append("<div style='width:586px; height:200px; padding-left:2px;padding-top:10px; '><table  class='classBold10'>");
                                                                            sbHtml.Append("<div style='width: 560px; height: 130px; padding-left: 2px; padding-top: 30px;'><table  class='classBold10'><tr><td style='width: 410px;'></td><td style='width:110px;text-align:right;'>&nbsp;</td><td style='text-align:right;'></td></tr>");

                                                                            int sno = 0;
                                                                            int indx = 0;
                                                                            double totalamt = 0;
                                                                            double balanamt = 0;
                                                                            double curpaid = 0;
                                                                            foreach (GridViewRow row in grid_Details.Rows)
                                                                            {
                                                                                CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                                if (!chkOkPay.Checked)
                                                                                    continue;

                                                                                TextBox txtTotalamt = (TextBox)row.FindControl("txt_tot_amt");
                                                                                TextBox txtPaidamt = (TextBox)row.FindControl("txt_paid_amt");
                                                                                TextBox txtBalamt = (TextBox)row.FindControl("txt_bal_amt");
                                                                                TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                                                TextBox txtdeductamt = (TextBox)row.FindControl("txt_deduct_amt");

                                                                                Label lblFeeCategory = (Label)row.FindControl("lbl_feetype");
                                                                                Label lblsem = (Label)row.FindControl("lbl_textval");

                                                                                double creditamt = 0;

                                                                                if (txtTobePaidamt.Text != "")
                                                                                {
                                                                                    creditamt = Convert.ToDouble
        (txtTobePaidamt.Text);
                                                                                    TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                                    double exgridamt = 0;
                                                                                    if (cb_exfees.Checked)
                                                                                    {
                                                                                        double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                                    }
                                                                                    creditamt += exgridamt;
                                                                                    TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                                    double gvtamt = 0;
                                                                                    if (cb_govt.Checked)
                                                                                    {
                                                                                        double.TryParse(txtScholAmt.Text, out gvtamt);
                                                                                    }
                                                                                    creditamt += gvtamt;
                                                                                    TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");

                                                                                    double curCautamt = 0;
                                                                                    if (cb_CautionDep.Checked)
                                                                                    {
                                                                                        double.TryParse(txtCautAmt.Text, out curCautamt);
                                                                                    }
                                                                                    creditamt += curCautamt;
                                                                                }

                                                                                if (creditamt > 0)
                                                                                {
                                                                                    sno++;

                                                                                    totalamt += Convert.ToDouble(txtTotalamt.Text);
                                                                                    balanamt += Convert.ToDouble(txtBalamt.Text);
                                                                                    curpaid += creditamt;
                                                                                    //balanamt += Convert.ToDouble(txtTotalamt.Text) + Convert.ToDouble(txtTobePaidamt.Text) - creditamt;
                                                                                    deductionamt += Convert.ToDouble(txtdeductamt.Text);
                                                                                    indx++;

                                                                                    // sbHtml.Append("<tr><td style='width:480px;'>" + lblFeeCategory.Text + "</td><td style='width:60px;text-align:right;'>" + creditamt + "</td><td style='width:40px;'></td></tr>");

                                                                                    sbHtml.Append("<tr><td style='width: 410px; padding-left: 25px;'>" + lblFeeCategory.Text + "</td><td style='width: 110px; text-align: right;'>" + creditamt + "</td><td style='text-align:right;'></td></tr>");
                                                                                }
                                                                            }
                                                                            if (BalanceType == 1)
                                                                            {
                                                                                balanamt = retBalance(appnoNew);
                                                                            }

                                                                            sbHtml.Append("</table></div>");
                                                                            #region DDNarration
                                                                            string ddnar = string.Empty;
                                                                            //double modeht = 40;
                                                                            if (narration != 0)
                                                                            {
                                                                                if (chk_rcptMulmode.Checked)
                                                                                {
                                                                                    mode = modeMulti;
                                                                                    for (int z = 0; z < dtMulBnkDetails.Rows.Count; z++)
                                                                                    {
                                                                                        ddnar += " " + (z + 1).ToString() + ")No : " + dtMulBnkDetails.Rows[z][1] + " Bank : " + dtMulBnkDetails.Rows[z][0] + " Branch :" + dtMulBnkDetails.Rows[z][2] + " Date  : " + dtMulBnkDetails.Rows[z][3] + " Amount : " + dtMulBnkDetails.Rows[z][4] + "/-";
                                                                                    }
                                                                                    //modeht = dtMulBnkDetails.Rows.Count * 15;
                                                                                    //modeht += 20;
                                                                                }
                                                                                else
                                                                                {
                                                                                    if (!rb_cash.Checked)
                                                                                    {
                                                                                        if (rb_dd.Checked == true)
                                                                                        {
                                                                                            ddnar = ddnar + " DDNo : " + checkDDno + " Bank : " + newbankname + " Branch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                                            //mode = "DD - No:" + checkDDno;
                                                                                        }
                                                                                        else if (rb_cheque.Checked)
                                                                                        {
                                                                                            ddnar = ddnar + " ChequeNo : " + checkDDno + " Bank : " + newbankname + " Branch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                                            // mode = "Cheque - No:" + checkDDno;
                                                                                        }
                                                                                        else if (rb_card.Checked == true)
                                                                                        {
                                                                                            ddnar = ddnar + " Card : " + newbankname;
                                                                                        }
                                                                                    }
                                                                                }
                                                                                ddnar += " " + txt_remark.Text.Trim();
                                                                            }
                                                                            #endregion

                                                                            //   sbHtml.Append("<table style='width:350px; height:20px;padding-left:10px;' class='classBold10'><tr><td>" + mode.ToUpper() + ddnar + "</td></tr>");
                                                                            //Mode of Pay
                                                                            sbHtml.Append("<table style='height: 50px;'><tr><td style='width: 300px;' class='classBold10'>" + mode.ToUpper() + ddnar + "</td><td style='width: 220px; padding-left: 52px;' class='classBold10'><br>" + balanamt + "</td></tr></table>");
                                                                            // sbHtml.Append("<table style='width:580px; height:20px;padding-left:330px;' class='classBold10'><tr><td>" + balanamt + "</td></tr></table>");
                                                                            //  sbHtml.Append("<table style='width: 560px; padding-left: 10px; padding-top: 25px;' class='classBold10'><tr><td style='width:410px;'></td><td style='width: 110px; text-align: right;'>" + balanamt + "</td><td style=''></td></tr></table>");

                                                                            double totalamount = curpaid;

                                                                            //  sbHtml.Append("<table style='width:580px; height:28px;padding-left:2px;' class='classBold10'><tr><td style='width:490px;'></td><td style='width:60px;text-align:right;'>" + totalamount + "</td><td style='width:30px;'></td></tr><tr><td>Received Rupees " + DecimalToWords((decimal)totalamount) + " Only.</td><td colspan='2'></td></tr></table>");
                                                                            sbHtml.Append("<table style='width: 560px; padding-left: 10px; padding-top: 25px;' class='classBold10'><tr><td style='width:410px;'></td><td style='width: 110px; text-align: right;'>" + totalamount + "</td><td style=''></td></tr></table>");
                                                                            sbHtml.Append("<br/><table style='width: 520px; padding-left: 2px;' class='classBold10'><tr><td><span style='padding-left: 5px;'> Received Rupees " + DecimalToWords((decimal)totalamount) + " Only.</span></td><td colspan='2'></td></tr></table>");
                                                                            #endregion
                                                                            sbHtml.Append("</td></tr></table></div>");
                                                                            contentDiv.InnerHtml = sbHtml.ToString();

                                                                            #region New Print
                                                                            //contentDiv.InnerHtml += sbHtml.ToString();
                                                                            contentDiv.Visible = true;
                                                                            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                                                                            #endregion

                                                                        }

                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }
                                                            else if (save1 == 10)
                                                            {
                                                                //For Christopher
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))// && txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    //Basic Data
                                                                    //string rollno = txt_rollno.Text.Trim();
                                                                    // string recptNo = txt_rcptno.Text.Trim();
                                                                    string recptNo = string.Empty;
                                                                    //modified by sudhagar editable receipt no
                                                                    tempRcpt = Convert.ToString(txttemprcpt.Text.Trim());
                                                                    if (!string.IsNullOrEmpty(tempRcpt))
                                                                        receiptno = tempRcpt;
                                                                    else
                                                                        receiptno = txt_rcptno.Text.Trim();
                                                                    string recptDt = txt_date.Text.Trim();
                                                                    //string studname = txt_name.Text.Trim();
                                                                    string course = txt_dept.Text.Trim();
                                                                    string batchYrSem = string.Empty;

                                                                    try
                                                                    {
                                                                        course = course.Split('-')[0];
                                                                    }
                                                                    catch { course = ""; }
                                                                    // string mode = string.Empty;

                                                                    if (rb_cash.Checked)
                                                                    {
                                                                        mode = "Cash";
                                                                    }
                                                                    else if (rb_cheque.Checked)
                                                                    {
                                                                        mode = "Cheque";
                                                                    }
                                                                    else if (rb_dd.Checked)
                                                                    {
                                                                        mode = "DD";
                                                                    }
                                                                    else if (rb_card.Checked)
                                                                    {
                                                                        mode = "Card";
                                                                    }

                                                                    //Fields to print
                                                                    string queryPrint1 = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                                    ds.Clear();
                                                                    ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                                    if (ds.Tables.Count > 0)
                                                                    {
                                                                        if (ds.Tables[0].Rows.Count > 0)
                                                                        {

                                                                            //Header Div Values
                                                                            byte collegeid = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeName"]);
                                                                            byte address1 = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeAdd1"]);
                                                                            byte address2 = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeAdd2"]);
                                                                            byte address3 = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeAdd3"]);
                                                                            byte city = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeDist"]);
                                                                            byte state = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeState"]);

                                                                            byte university = Convert.ToByte(ds.Tables[0].Rows[0]["IsCollegeUniversity"]);
                                                                            byte rightLogo = Convert.ToByte(ds.Tables[0].Rows[0]["IsRightLogo"]);
                                                                            byte leftLogo = Convert.ToByte(ds.Tables[0].Rows[0]["IsLeftLogo"]);
                                                                            byte time;
                                                                            if (Convert.ToBoolean(Convert.ToString(ds.Tables[0].Rows[0]["IsTime"])))
                                                                            {
                                                                                time = 1;
                                                                            }
                                                                            else
                                                                            {
                                                                                time = 0;
                                                                            }
                                                                            byte degACR = Convert.ToByte(ds.Tables[0].Rows[0]["IsDegreeAcr"]);
                                                                            byte degNam = Convert.ToByte(ds.Tables[0].Rows[0]["IsDegreeName"]);
                                                                            byte studnam = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudName"]);
                                                                            byte year = Convert.ToByte(ds.Tables[0].Rows[0]["IsYear"]);
                                                                            byte semester = Convert.ToByte(ds.Tables[0].Rows[0]["IsSemester"]);
                                                                            byte regno = Convert.ToByte(ds.Tables[0].Rows[0]["IsRegNo"]);
                                                                            byte rolno = Convert.ToByte(ds.Tables[0].Rows[0]["IsRollNo"]);
                                                                            byte admno = Convert.ToByte(ds.Tables[0].Rows[0]["IsAdminNo"]);

                                                                            byte fathername = Convert.ToByte(ds.Tables[0].Rows[0]["IsFatherName"]);
                                                                            byte seattype = Convert.ToByte(ds.Tables[0].Rows[0]["IsSeatType"]);
                                                                            //byte setRollAsAdmin = Convert.ToByte(ds.Tables[0].Rows[0]["rollas_adm"]);
                                                                            byte boarding = Convert.ToByte(ds.Tables[0].Rows[0]["IsBoarding"]);
                                                                            byte mothername = Convert.ToByte(ds.Tables[0].Rows[0]["IsMontherName"]);
                                                                            string recptValid = Convert.ToString(ds.Tables[0].Rows[0]["ValidDate"]);


                                                                            //Body Div Values
                                                                            //byte showAllFees = Convert.ToByte(ds.Tables[0].Rows[0]["showallfee"]);
                                                                            byte allotedAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsAllotedAmt"]);
                                                                            byte fineAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsFineAmt"]);
                                                                            byte balAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsBalanceAmt"]);
                                                                            byte semOrYear = Convert.ToByte(ds.Tables[0].Rows[0]["IsSemYear"]);
                                                                            byte prevPaidAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsPrevPaid"]);
                                                                            byte excessAmt = Convert.ToByte(ds.Tables[0].Rows[0]["IsExcessAmt"]);
                                                                            // byte totDetails = Convert.ToByte(ds.Tables[0].Rows[0]["Total_Details"]);
                                                                            byte fineInRow = Convert.ToByte(ds.Tables[0].Rows[0]["IsFineinRow"]);
                                                                            //byte totWTselectCol = Convert.ToByte(ds.Tables[0].Rows[0]["TotalSelCol"]);
                                                                            byte concession = Convert.ToByte(ds.Tables[0].Rows[0]["IsConcession"]);
                                                                            string concessionValue = string.Empty;
                                                                            if (concession != 0)
                                                                            {
                                                                                concessionValue = Convert.ToString(ds.Tables[0].Rows[0]["ConcessionName"]);
                                                                            }


                                                                            //Footer Div Values

                                                                            byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                            byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                            byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);
                                                                            byte narration = Convert.ToByte(ds.Tables[0].Rows[0]["IsNarration"]);
                                                                            byte deduction = Convert.ToByte(ds.Tables[0].Rows[0]["IsTotConcession"]);
                                                                            byte forclgName = Convert.ToByte(ds.Tables[0].Rows[0]["IsForCollegeName"]);
                                                                            byte authSign = Convert.ToByte(ds.Tables[0].Rows[0]["IsAuthSign"]);
                                                                            byte validDate = Convert.ToByte(ds.Tables[0].Rows[0]["IsValidUpto"]);
                                                                            string authSignValue = string.Empty;
                                                                            if (authSign != 0)
                                                                            {
                                                                                authSignValue = Convert.ToString(ds.Tables[0].Rows[0]["AuthName"]);

                                                                            }

                                                                            byte studOffiCopy = Convert.ToByte(ds.Tables[0].Rows[0]["PageType"]);
                                                                            // byte dispModeWTcash = Convert.ToByte(ds.Tables[0].Rows[0]["DisModeWithCash"]);
                                                                            byte signFile = Convert.ToByte(ds.Tables[0].Rows[0]["cashier_sign"]);

                                                                            //if (signFile != 0)
                                                                            //{
                                                                            //if (FileUpload1.HasFile)
                                                                            //{

                                                                            //}                                                    
                                                                            //}


                                                                            //Document Settings
                                                                            PdfDocument recptDoc = new PdfDocument(PdfDocumentFormat.A4);
                                                                            PdfPage rcptpage = recptDoc.NewPage();
                                                                            //Font Fontboldhead = new Font("Arial", 10, FontStyle.Bold);
                                                                            //Font FontTableHead = new Font("Arial", 7, FontStyle.Bold);
                                                                            //Font FontTable = new Font("Arial", 7, FontStyle.Regular);
                                                                            //Font tamilFont = new Font("AMUDHAM.TTF", 10, FontStyle.Regular);


                                                                            Font Fontboldhead = new Font("Arial", 10, FontStyle.Bold);
                                                                            Font FontTableHead = new Font("Arial", 9, FontStyle.Bold);
                                                                            Font FontTable = new Font("Arial", 9, FontStyle.Regular);
                                                                            Font tamilFont = new Font("AMUDHAM.TTF", 10, FontStyle.Regular);


                                                                            string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " ";
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 3)
                                                                                {
                                                                                    colquery += " select a.Current_Semester,a.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,a.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,'' Boarding,a.mother,a.parent_name,ISNULL( type,'') as type,'' Sections  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.App_No='" + appnoNew + "' and d.college_code=" + collegecode1 + "";
                                                                                }
                                                                                else
                                                                                {
                                                                                    colquery += " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,isnull(r.Sections,'') as Sections from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + " ";
                                                                                }
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                colquery += "  select appl_id ,h.dept_name,h.dept_acronym,h.dept_code,s.staff_name,s.staff_code,a.father_name,t.stftype as staff_type  from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where s.appl_no =a.appl_no and s.staff_code =t.staff_code and t.dept_code =h.dept_code and d.desig_code =t.desig_code and s.college_code =h.college_code and d.collegeCode =s.college_code and latestrec ='1' and appl_id ='" + appnoNew + "' and s.college_Code=" + collegecode1 + "  ";
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                            {
                                                                                colquery += " SELECT VendorContactPK, VenContactType, VenContactName, VenContactDesig, VenContactDept, VendorPhoneNo, VendorExtNo, VendorMobileNo, VendorEmail, VendorFK FROM      IM_VendorContactMaster WHERE VendorContactPK = '" + appnoNew + "' ";
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                            {
                                                                                colquery += " SELECT VendorCode,vendorname,VendorMobileNo,VendorAddress,VendorCity,VendorCompName,VendorType  from co_vendormaster  WHERE VendorPK = '" + appnoNew + "' ";
                                                                                outRoll = string.Empty;
                                                                            }
                                                                            string collegename = "";
                                                                            string add1 = "";
                                                                            string add2 = "";
                                                                            string add3 = "";
                                                                            string univ = "";
                                                                            string deg = "";
                                                                            string cursem = "";
                                                                            string batyr = "";
                                                                            string seatty = "";
                                                                            string board = "";
                                                                            string mothe = "";
                                                                            string fathe = "";
                                                                            double deductionamt = 0;
                                                                            ds.Clear();
                                                                            ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                            if (ds.Tables.Count > 0)
                                                                            {
                                                                                if (ds.Tables[0].Rows.Count > 0)
                                                                                {
                                                                                    collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                                    add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                                    add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                                    add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                                }
                                                                                if (ds.Tables[1].Rows.Count > 0)
                                                                                {
                                                                                    if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                    {
                                                                                        if (degACR == 0)
                                                                                        {
                                                                                            deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                        }
                                                                                        cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                        batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                                        board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                        mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                                        //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                    {
                                                                                        //if (degACR == 0)
                                                                                        //{
                                                                                        // deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_name"]);
                                                                                        //}
                                                                                        //else
                                                                                        //{
                                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                        //}
                                                                                        //cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                        //batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["staff_type"]);
                                                                                        //board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                        //mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["father_name"]);
                                                                                        //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                    {
                                                                                        deg = " - ";
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                                    {
                                                                                        deg = " - ";
                                                                                    }
                                                                                }

                                                                                if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                {
                                                                                    course = txtDept_staff.Text.Trim();
                                                                                }
                                                                            }

                                                                            int rectHeight = 380;

                                                                            int curY = 10;
                                                                            int curX = 30;

                                                                            #region Receipt Header

                                                                            //Rectangle Border
                                                                            PdfArea rectArea = new PdfArea(recptDoc, 10, curY, 570, rectHeight);
                                                                            PdfRectangle rectSpace = new PdfRectangle(recptDoc, rectArea, Color.Black);
                                                                            rcptpage.Add(rectSpace);

                                                                            PdfArea rectAreaOff = new PdfArea(recptDoc, 10, curY + 430, 570, rectHeight);
                                                                            PdfRectangle rectSpaceOff = new PdfRectangle(recptDoc, rectAreaOff, Color.Black);
                                                                            //Header Images
                                                                            //Line1
                                                                            PdfImage LogoImageOff;
                                                                            int lefty = 0;
                                                                            if (leftLogo != 0)
                                                                            {
                                                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg")))
                                                                                {
                                                                                    PdfImage LogoImage = recptDoc.NewImage(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg"));
                                                                                    //rcptpage.Add(LogoImage, curX, curY + 5, 450);
                                                                                    rcptpage.Add(LogoImage, curX, curY + 5, 600); // Added by jairam 05-07-2016
                                                                                    lefty = curY + 5 + 430;

                                                                                }
                                                                            }

                                                                            if (collegeid != 0)
                                                                            {
                                                                                curX = 120;
                                                                                PdfTextArea clgText = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX, curY, 350, 20), ContentAlignment.MiddleCenter, collegename);
                                                                                rcptpage.Add(clgText);

                                                                            }
                                                                            PdfTextArea clgOffText = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX, curY + 430, 350, 20), ContentAlignment.MiddleCenter, collegename);

                                                                            PdfImage LogoImageOff1;
                                                                            int righty = 0;
                                                                            if (rightLogo != 0)
                                                                            {
                                                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg")))
                                                                                {
                                                                                    curX = 500;
                                                                                    PdfImage LogoImage1 = recptDoc.NewImage(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg"));
                                                                                    //rcptpage.Add(LogoImage1, curX, curY + 5, 450);
                                                                                    rcptpage.Add(LogoImage1, curX, curY + 5, 600); // Added by jairam 05-07-2016
                                                                                    righty = curY + 5 + 430;
                                                                                }
                                                                            }

                                                                            //Line2
                                                                            curY += 15;
                                                                            if (address1 != 0 || address2 != 0)
                                                                            {
                                                                                curX = 120;
                                                                                if (address2 != 0)
                                                                                {
                                                                                    add1 += " " + add2;
                                                                                }
                                                                                PdfTextArea addText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY, 350, 20), ContentAlignment.MiddleCenter, add1);
                                                                                rcptpage.Add(addText);

                                                                            }
                                                                            PdfTextArea addOffText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY + 430, 350, 20), ContentAlignment.MiddleCenter, add1);


                                                                            //curY += 20;
                                                                            //if (university != 0)
                                                                            //{

                                                                            //    curX = 120;
                                                                            //    PdfTextArea uniText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY, 350, 20), ContentAlignment.MiddleCenter, univ);
                                                                            //    rcptpage.Add(uniText);

                                                                            //}
                                                                            //PdfTextArea uniOffText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, curX, curY + 430, 350, 20), ContentAlignment.MiddleCenter, univ);

                                                                            //Line3
                                                                            curY += 8;

                                                                            PdfTextArea headingText = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX - 50, curY, 450, 30), ContentAlignment.MiddleCenter, "FEE RECEIPT");
                                                                            rcptpage.Add(headingText);

                                                                            //curX = 280;
                                                                            curY += 12;
                                                                            //Text Area For Receipt
                                                                            PdfTextArea headingText1 = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX - 50, curY, 450, 30), ContentAlignment.MiddleCenter, recptHeader(recptNo));
                                                                            rcptpage.Add(headingText1);

                                                                            //PdfTextArea headingOffText = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX - 80, curY + 430, 450, 30), ContentAlignment.MiddleCenter, "FEE RECEIPT" + recptHeader(receiptno));

                                                                            PdfTextArea headingOffText = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX - 50, curY + 418, 450, 30), ContentAlignment.MiddleCenter, "FEE RECEIPT");

                                                                            PdfTextArea headingOffText1 = new PdfTextArea(Fontboldhead, Color.Black, new PdfArea(recptDoc, curX - 50, curY + 430, 450, 30), ContentAlignment.MiddleCenter, recptHeader(recptNo));
                                                                            curY += 15;

                                                                            #endregion

                                                                            #region Table 1
                                                                            //Table1 Format 
                                                                            PdfTable tableparts = recptDoc.NewTable(FontTableHead, 2, 3, 5);
                                                                            tableparts.VisibleHeaders = false;
                                                                            tableparts.SetBorders(Color.Black, 1, BorderType.CompleteGrid);

                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                if (regno != 0)
                                                                                {
                                                                                    tableparts.Cell(0, 0).SetContent("RegNo : " + Regno);
                                                                                    tableparts.Cell(0, 0).SetFont(FontTableHead);
                                                                                    tableparts.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                }

                                                                                if (rolno != 0)
                                                                                {
                                                                                    tableparts.Cell(0, 0).SetContent("RollNo : " + rollno);
                                                                                    tableparts.Cell(0, 0).SetFont(FontTableHead);
                                                                                    tableparts.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                }

                                                                                if (admno != 0)
                                                                                {
                                                                                    tableparts.Cell(0, 0).SetContent("AdmissionNo : " + app_formno);
                                                                                    tableparts.Cell(0, 0).SetFont(FontTableHead);
                                                                                    tableparts.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                }
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                tableparts.Cell(0, 0).SetContent("Staff Id : " + app_formno);
                                                                                tableparts.Cell(0, 0).SetFont(FontTableHead);
                                                                                tableparts.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                            {
                                                                                tableparts.Cell(0, 0).SetContent("Vendor Id : " + app_formno);
                                                                                tableparts.Cell(0, 0).SetFont(FontTableHead);
                                                                                tableparts.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                            {
                                                                                tableparts.Cell(0, 0).SetContent("Name : " + studname);
                                                                                tableparts.Cell(0, 0).SetFont(FontTableHead);
                                                                                tableparts.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            }


                                                                            tableparts.Cell(0, 1).SetContent("Programme : " + deg);
                                                                            tableparts.Cell(0, 1).SetFont(FontTableHead);
                                                                            tableparts.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            tableparts.Cell(0, 2).SetContent(termDisplay(cursem));
                                                                            tableparts.Cell(0, 2).SetFont(FontTableHead);
                                                                            tableparts.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            if (rbl_rollnoNew.SelectedIndex != 3)
                                                                            {
                                                                                tableparts.Cell(1, 0).SetContent("Name : " + studname.ToUpper());
                                                                                tableparts.Cell(1, 0).SetFont(FontTableHead);
                                                                                tableparts.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            }


                                                                            tableparts.Cell(1, 1).SetContent("Receipt No : " + recptNo);
                                                                            tableparts.Cell(1, 1).SetFont(FontTableHead);
                                                                            tableparts.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            tableparts.Cell(1, 2).SetContent("Date : " + recptDt);
                                                                            tableparts.Cell(1, 2).SetFont(FontTableHead);
                                                                            tableparts.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            //Off
                                                                            PdfTable tablepartsOff = recptDoc.NewTable(FontTableHead, 2, 3, 5);
                                                                            tablepartsOff.VisibleHeaders = false;
                                                                            tablepartsOff.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                if (regno != 0)
                                                                                {
                                                                                    tablepartsOff.Cell(0, 0).SetContent("RegNo : " + Regno);
                                                                                    tablepartsOff.Cell(0, 0).SetFont(FontTableHead);
                                                                                    tablepartsOff.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                }

                                                                                if (rolno != 0)
                                                                                {
                                                                                    tablepartsOff.Cell(0, 0).SetContent("RollNo : " + rollno);
                                                                                    tablepartsOff.Cell(0, 0).SetFont(FontTableHead);
                                                                                    tablepartsOff.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                }

                                                                                if (admno != 0)
                                                                                {
                                                                                    tablepartsOff.Cell(0, 0).SetContent("AdmissionNo : " + app_formno);
                                                                                    tablepartsOff.Cell(0, 0).SetFont(FontTableHead);
                                                                                    tablepartsOff.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                                }
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                tablepartsOff.Cell(0, 0).SetContent("Staff Id : " + app_formno);
                                                                                tablepartsOff.Cell(0, 0).SetFont(FontTableHead);
                                                                                tablepartsOff.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                            {
                                                                                tablepartsOff.Cell(0, 0).SetContent("Vendor Id : " + app_formno);
                                                                                tablepartsOff.Cell(0, 0).SetFont(FontTableHead);
                                                                                tablepartsOff.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                            {
                                                                                tablepartsOff.Cell(0, 0).SetContent("Name : " + studname);
                                                                                tablepartsOff.Cell(0, 0).SetFont(FontTableHead);
                                                                                tablepartsOff.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            }

                                                                            tablepartsOff.Cell(0, 1).SetContent("Programme : " + deg);
                                                                            tablepartsOff.Cell(0, 1).SetFont(FontTableHead);
                                                                            tablepartsOff.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            tablepartsOff.Cell(0, 2).SetContent(termDisplay(cursem));
                                                                            tablepartsOff.Cell(0, 2).SetFont(FontTableHead);
                                                                            tablepartsOff.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            if (rbl_rollnoNew.SelectedIndex != 3)
                                                                            {
                                                                                tablepartsOff.Cell(1, 0).SetContent("Name : " + studname.ToUpper());
                                                                                tablepartsOff.Cell(1, 0).SetFont(FontTableHead);
                                                                                tablepartsOff.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            }


                                                                            tablepartsOff.Cell(1, 1).SetContent("Receipt No : " + recptNo);
                                                                            tablepartsOff.Cell(1, 1).SetFont(FontTableHead);
                                                                            tablepartsOff.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            tablepartsOff.Cell(1, 2).SetContent("Date : " + recptDt);
                                                                            tablepartsOff.Cell(1, 2).SetFont(FontTableHead);
                                                                            tablepartsOff.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);

                                                                            curX = 10;
                                                                            curY += 10;
                                                                            PdfTablePage addtabletopage1 = tableparts.CreateTablePage(new PdfArea(recptDoc, curX, curY, 570, 200));
                                                                            rcptpage.Add(addtabletopage1);

                                                                            PdfTablePage addtabletopageOff1 = tablepartsOff.CreateTablePage(new PdfArea(recptDoc, curX, curY + 430, 570, 200));

                                                                            #endregion

                                                                            #region Table 2
                                                                            //Table2 Format

                                                                            int rows = 1;
                                                                            foreach (GridViewRow row in grid_Details.Rows)
                                                                            {
                                                                                CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                                if (!chkOkPay.Checked)
                                                                                    continue;

                                                                                TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                                                TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                                TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");
                                                                                double creditamt = 0;

                                                                                if (txtTobePaidamt.Text != "")
                                                                                {
                                                                                    creditamt = Convert.ToDouble(txtTobePaidamt.Text);
                                                                                    TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                                    double exgridamt = 0;
                                                                                    if (cb_exfees.Checked)
                                                                                    {
                                                                                        double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                                    }
                                                                                    creditamt += exgridamt;

                                                                                    double gvtamt = 0;
                                                                                    if (cb_govt.Checked)
                                                                                    {
                                                                                        double.TryParse(txtScholAmt.Text, out gvtamt);
                                                                                    }
                                                                                    creditamt += gvtamt;
                                                                                    double curCautamt = 0;
                                                                                    if (cb_CautionDep.Checked)
                                                                                    {
                                                                                        double.TryParse(txtCautAmt.Text, out curCautamt);
                                                                                    }
                                                                                    creditamt += curCautamt;
                                                                                    if (creditamt > 0)
                                                                                    {
                                                                                        rows++;
                                                                                    }
                                                                                }
                                                                            }

                                                                            int ledgeCol = 2;
                                                                            int ledgeWidt = 570;

                                                                            if (rows > 0)
                                                                            {
                                                                                ledgeCol = 2;
                                                                                ledgeWidt = 570;
                                                                                int wdth = ledgeWidt - 50;
                                                                                ledgeWidt = wdth;
                                                                            }
                                                                            if (rows > 10)
                                                                            {
                                                                                ledgeCol += 2;
                                                                                ledgeWidt = 570;
                                                                                int wdth = ledgeWidt - 100;
                                                                                ledgeWidt = (int)(wdth / 2);
                                                                            }
                                                                            if (rows > 20)
                                                                            {
                                                                                ledgeCol += 2;
                                                                                ledgeWidt = 570;
                                                                                int wdth = ledgeWidt - 150;
                                                                                ledgeWidt = (int)(wdth / 3);
                                                                            }
                                                                            if (rows > 30)
                                                                            {
                                                                                ledgeCol += 2;
                                                                                ledgeWidt = 570;
                                                                                int wdth = ledgeWidt - 200;
                                                                                ledgeWidt = (int)(wdth / 4);
                                                                            }
                                                                            PdfTable tableparts1 = recptDoc.NewTable(FontTable, rows, ledgeCol, 5);
                                                                            tableparts1.VisibleHeaders = false;
                                                                            tableparts1.SetBorders(Color.Black, 1, BorderType.Columns);
                                                                            for (int colval = 0; colval < tableparts1.Columns.Length; colval++)
                                                                            {
                                                                                if (colval % 2 == 1)
                                                                                {
                                                                                    tableparts1.Columns[colval].SetWidth(50);
                                                                                }
                                                                                else
                                                                                {
                                                                                    tableparts1.Columns[colval].SetWidth(ledgeWidt);
                                                                                }
                                                                            }


                                                                            PdfTable tablepartsOff1 = recptDoc.NewTable(FontTable, rows, ledgeCol, 5);
                                                                            tablepartsOff1.VisibleHeaders = false;
                                                                            tablepartsOff1.SetBorders(Color.Black, 1, BorderType.Columns);
                                                                            for (int colval = 0; colval < tablepartsOff1.Columns.Length; colval++)
                                                                            {
                                                                                if (colval % 2 == 1)
                                                                                {
                                                                                    tablepartsOff1.Columns[colval].SetWidth(50);
                                                                                }
                                                                                else
                                                                                {
                                                                                    tablepartsOff1.Columns[colval].SetWidth(ledgeWidt);
                                                                                }
                                                                            }

                                                                            int initLegCol = 0;
                                                                            int initValCol = 1;
                                                                            int initRow = 0;


                                                                            #region feedata
                                                                            int sno = 0;
                                                                            int indx = 0;
                                                                            double totalamt = 0;
                                                                            double balanamt = 0;
                                                                            double curpaid = 0;
                                                                            foreach (GridViewRow row in grid_Details.Rows)
                                                                            {
                                                                                CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                                                                                if (!chkOkPay.Checked)
                                                                                    continue;

                                                                                TextBox txtTotalamt = (TextBox)row.FindControl("txt_tot_amt");
                                                                                TextBox txtPaidamt = (TextBox)row.FindControl("txt_paid_amt");
                                                                                TextBox txtBalamt = (TextBox)row.FindControl("txt_bal_amt");
                                                                                TextBox txtTobePaidamt = (TextBox)row.FindControl("txt_tobepaid_amt");
                                                                                TextBox txtdeductamt = (TextBox)row.FindControl("txt_deduct_amt");

                                                                                Label lblFeeCategory = (Label)row.FindControl("lbl_feetype");
                                                                                Label lblsem = (Label)row.FindControl("lbl_textval");

                                                                                double creditamt = 0;

                                                                                if (txtTobePaidamt.Text != "")
                                                                                {
                                                                                    creditamt = Convert.ToDouble(txtTobePaidamt.Text);
                                                                                    TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");
                                                                                    double exgridamt = 0;
                                                                                    if (cb_exfees.Checked)
                                                                                    {
                                                                                        double.TryParse(txtExcessGridAmt.Text, out exgridamt);
                                                                                    }
                                                                                    creditamt += exgridamt;

                                                                                    TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                                                                                    double gvtamt = 0;
                                                                                    if (cb_govt.Checked)
                                                                                    {
                                                                                        double.TryParse(txtScholAmt.Text, out gvtamt);
                                                                                    }
                                                                                    creditamt += gvtamt;

                                                                                    TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");

                                                                                    double curCautamt = 0;
                                                                                    if (cb_CautionDep.Checked)
                                                                                    {
                                                                                        double.TryParse(txtCautAmt.Text, out curCautamt);
                                                                                    }
                                                                                    creditamt += curCautamt;
                                                                                }

                                                                                if (creditamt > 0)
                                                                                {
                                                                                    sno++;
                                                                                    indx++;
                                                                                    totalamt += Convert.ToDouble(txtTotalamt.Text);
                                                                                    balanamt += Convert.ToDouble(txtBalamt.Text);
                                                                                    curpaid += creditamt;
                                                                                    //balanamt += Convert.ToDouble(txtTotalamt.Text) + Convert.ToDouble(txtTobePaidamt.Text) - creditamt;
                                                                                    deductionamt += Convert.ToDouble(txtdeductamt.Text);
                                                                                    if (initRow == 10)
                                                                                    {
                                                                                        initRow = 0;
                                                                                        initLegCol += 2;
                                                                                        initValCol += 2;
                                                                                    }

                                                                                    tableparts1.Cell(initRow, initLegCol).SetContent(sno + ") " + lblFeeCategory.Text);
                                                                                    tableparts1.Cell(initRow, initLegCol).SetFont(FontTable);
                                                                                    tableparts1.Cell(initRow, initLegCol).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                                                    tableparts1.Cell(initRow, initValCol).SetContent(returnIntegerPart(creditamt) + "." + returnDecimalPart(creditamt));
                                                                                    tableparts1.Cell(initRow, initValCol).SetFont(FontTable);
                                                                                    tableparts1.Cell(initRow, initValCol).SetContentAlignment(ContentAlignment.MiddleRight);

                                                                                    tablepartsOff1.Cell(initRow, initLegCol).SetContent(sno + ") " + lblFeeCategory.Text);
                                                                                    tablepartsOff1.Cell(initRow, initLegCol).SetFont(FontTable);
                                                                                    tablepartsOff1.Cell(initRow, initLegCol).SetContentAlignment(ContentAlignment.MiddleLeft);


                                                                                    tablepartsOff1.Cell(initRow, initValCol).SetContent(returnIntegerPart(creditamt) + "." + returnDecimalPart(creditamt));
                                                                                    tablepartsOff1.Cell(initRow, initValCol).SetFont(FontTable);
                                                                                    tablepartsOff1.Cell(initRow, initValCol).SetContentAlignment(ContentAlignment.MiddleRight);

                                                                                    initRow++;

                                                                                }
                                                                            }

                                                                            #endregion

                                                                            curY += (int)addtabletopage1.Area.Height;
                                                                            PdfTablePage addtabletopage2 = tableparts1.CreateTablePage(new PdfArea(recptDoc, 10, curY, 570, 220));
                                                                            rcptpage.Add(addtabletopage2);
                                                                            PdfTablePage addtabletopageOff2 = tablepartsOff1.CreateTablePage(new PdfArea(recptDoc, 10, curY + 430, 570, 220));

                                                                            #endregion

                                                                            #region Table 3
                                                                            PdfTable tableparts2 = recptDoc.NewTable(FontTableHead, 1, 6, 5);
                                                                            tableparts2.VisibleHeaders = false;
                                                                            tableparts2.SetBorders(Color.Black, 1, BorderType.CompleteGrid);

                                                                            PdfTable tablepartsOff2 = recptDoc.NewTable(FontTableHead, 1, 6, 5);
                                                                            tablepartsOff2.VisibleHeaders = false;
                                                                            tablepartsOff2.SetBorders(Color.Black, 1, BorderType.CompleteGrid);


                                                                            decimal totalamount = (decimal)curpaid;

                                                                            tableparts2.Cell(0, 0).SetContent("Collected By :");
                                                                            tableparts2.Cell(0, 0).SetFont(FontTableHead);
                                                                            tableparts2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts2.Cell(0, 0).ColSpan = 2;

                                                                            tableparts2.Cell(0, 2).SetContent("(" + DecimalToWords((decimal)curpaid) + " Rupees Only)");
                                                                            tableparts2.Cell(0, 2).SetFont(FontTableHead);
                                                                            tableparts2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tableparts2.Cell(0, 2).ColSpan = 2;

                                                                            tableparts2.Cell(0, 4).SetContent("Total Fees");
                                                                            tableparts2.Cell(0, 4).SetFont(FontTableHead);
                                                                            tableparts2.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleRight);

                                                                            tableparts2.Cell(0, 5).SetContent(returnIntegerPart(curpaid) + "." + returnDecimalPart(curpaid));
                                                                            tableparts2.Cell(0, 5).SetFont(FontTableHead);
                                                                            tableparts2.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);

                                                                            tablepartsOff2.Cell(0, 0).SetContent("Collected By :");
                                                                            tablepartsOff2.Cell(0, 0).SetFont(FontTableHead);
                                                                            tablepartsOff2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tablepartsOff2.Cell(0, 0).ColSpan = 2;

                                                                            tablepartsOff2.Cell(0, 2).SetContent("(" + DecimalToWords((decimal)curpaid) + " Rupees Only)");
                                                                            tablepartsOff2.Cell(0, 2).SetFont(FontTableHead);
                                                                            tablepartsOff2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                                            tablepartsOff2.Cell(0, 2).ColSpan = 2;

                                                                            tablepartsOff2.Cell(0, 4).SetContent("Total Fees");
                                                                            tablepartsOff2.Cell(0, 4).SetFont(FontTableHead);
                                                                            tablepartsOff2.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleRight);

                                                                            tablepartsOff2.Cell(0, 5).SetContent(returnIntegerPart(curpaid) + "." + returnDecimalPart(curpaid));
                                                                            tablepartsOff2.Cell(0, 5).SetFont(FontTableHead);
                                                                            tablepartsOff2.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);

                                                                            curY += (int)addtabletopage2.Area.Height;
                                                                            PdfTablePage addtabletopage3 = tableparts2.CreateTablePage(new PdfArea(recptDoc, 10, curY, 570, 50));
                                                                            rcptpage.Add(addtabletopage3);

                                                                            PdfTablePage addtabletopageOff3 = tablepartsOff2.CreateTablePage(new PdfArea(recptDoc, 10, curY + 430, 570, 50));
                                                                            #endregion

                                                                            #region Receipt Footer
                                                                            PdfPage rcptpageTran = rcptpage.CreateCopy();

                                                                            curY += 24;

                                                                            if (officopy != 0 && studOffiCopy != 0)
                                                                            {
                                                                                //visible Office copy
                                                                                rcptpage.Add(rectSpaceOff);
                                                                                if (leftLogo != 0)
                                                                                {
                                                                                    if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg")))
                                                                                    {
                                                                                        LogoImageOff = recptDoc.NewImage(HttpContext.Current.Server.MapPath("~/FinanceLogo/Left_Logo" + collegecode1 + ".jpeg"));
                                                                                        // rcptpage.Add(LogoImageOff, 30, lefty, 450);
                                                                                        rcptpage.Add(LogoImageOff, 30, lefty, 600);
                                                                                    }
                                                                                }

                                                                                if (rightLogo != 0)
                                                                                {
                                                                                    if (File.Exists(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg")))
                                                                                    {
                                                                                        LogoImageOff1 = recptDoc.NewImage(HttpContext.Current.Server.MapPath("~/FinanceLogo/Right_Logo" + collegecode1 + ".jpeg"));
                                                                                        // rcptpage.Add(LogoImageOff1, 500, righty, 450);
                                                                                        rcptpage.Add(LogoImageOff1, 30, lefty, 600);
                                                                                    }
                                                                                }
                                                                                if (collegeid != 0)
                                                                                {
                                                                                    rcptpage.Add(clgOffText);
                                                                                }
                                                                                if (university != 0)
                                                                                {
                                                                                    //rcptpage.Add(uniOffText);
                                                                                }

                                                                                if (address1 != 0 || address2 != 0)
                                                                                {
                                                                                    rcptpage.Add(addOffText);
                                                                                }

                                                                                if (address3 != 0)
                                                                                {
                                                                                    //rcptpage.Add(cityOffText);
                                                                                }
                                                                                rcptpage.Add(headingOffText);
                                                                                rcptpage.Add(headingOffText1);
                                                                                rcptpage.Add(addtabletopageOff1);
                                                                                rcptpage.Add(addtabletopageOff2);
                                                                                rcptpage.Add(addtabletopageOff3);

                                                                                string copy = "Office Copy ";

                                                                                PdfTextArea studCopyText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 50, curY + 430, 150, 20), ContentAlignment.MiddleCenter, copy);
                                                                                rcptpage.Add(studCopyText);

                                                                            }

                                                                            if (studCopy != 0 || studOffiCopy == 1)
                                                                            {

                                                                                string copy = "Student Copy ";
                                                                                if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                {
                                                                                    copy = "Staff Copy ";
                                                                                }
                                                                                else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                {
                                                                                    copy = "Vendor Copy ";
                                                                                }
                                                                                else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                                {
                                                                                    copy = "Others Copy ";
                                                                                }

                                                                                PdfTextArea studCopyText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 50, curY, 150, 20), ContentAlignment.MiddleCenter, copy);
                                                                                rcptpage.Add(studCopyText);

                                                                                rcptpage.SaveToDocument();
                                                                            }

                                                                            if (transCopy != 0)
                                                                            {
                                                                                string copy = "Transport Copy ";

                                                                                PdfTextArea studCopyText = new PdfTextArea(FontTableHead, Color.Black, new PdfArea(recptDoc, 50, curY, 150, 20), ContentAlignment.MiddleCenter, copy);
                                                                                rcptpageTran.Add(studCopyText);
                                                                                rcptpageTran.SaveToDocument();
                                                                            }

                                                                            #endregion

                                                                            //Response Write
                                                                            string appPath = HttpContext.Current.Server.MapPath("~");
                                                                            if (appPath != "")
                                                                            {
                                                                                string szPath = appPath + "/Report/";
                                                                                string szFile = "Receipt" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";

                                                                                Response.Buffer = true;
                                                                                Response.Clear();
                                                                                recptDoc.SaveToFile(szPath + szFile);

                                                                                Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");

                                                                            }
                                                                            else
                                                                            {
                                                                                imgAlert.Visible = true;
                                                                                //this.Form.DefaultButton = "btn_alertclose";
                                                                                lbl_alert.Text = "Receipt Cannont Be Generated";
                                                                            }
                                                                        }

                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }
                                                            else if (save1 == 11)
                                                            {

                                                                //For San Academy
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))//&& txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    try
                                                                    {

                                                                        bool imgdivVisible = false;
                                                                        bool contentVisible = false;
                                                                        bool CreateReceiptOK = false;

                                                                        FormatXISanAcademyChallanReceipt rcpt = new FormatXISanAcademyChallanReceipt();
                                                                        contentDiv.InnerHtml = rcpt.generateOriginal(receiptno.Trim(), txt_date.Text.Trim(), txt_dept.Text.Trim(), rb_cash, rb_cheque, rb_dd, rb_card, rb_NEFT, collegecode1, usercode, ref lastRecptNo, ref accidRecpt, rbl_rollnoNew, rbl_rollno, appnoNew, outRoll, txtDept_staff, rollno, app_formno, Regno, studname, grid_Details, BalanceType, dtMulBnkDetails, chk_rcptMulmode, modeMulti, checkDDno, newbankname, branch, txt_date1, txt_remark, ref  contentVisible, ref  CreateReceiptOK, ref  imgdivVisible, ref  lbl_alert, cb_CautionDep, cb_govt, cb_exfees, mode, txt_ddno, ddl_bkname, txt_chqno, dsPri);
                                                                        imgAlert.Visible = imgdivVisible;

                                                                        if (CreateReceiptOK)
                                                                        {
                                                                            //Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");
                                                                            contentDiv.Visible = true;
                                                                            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                                                                        }

                                                                    }
                                                                    catch { imgAlert.Visible = true; }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }
                                                            else if (save1 == 12)
                                                            {
                                                                //KCG Print
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))// && txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    //Basic Data
                                                                    //string rollno = txt_rollno.Text.Trim();
                                                                    //  string recptNo = txt_rcptno.Text.Trim();
                                                                    string recptNo = string.Empty;
                                                                    //modified by sudhagar editable receipt no
                                                                    tempRcpt = Convert.ToString(txttemprcpt.Text.Trim());
                                                                    if (!string.IsNullOrEmpty(tempRcpt))
                                                                        recptNo = tempRcpt;
                                                                    else
                                                                        recptNo = txt_rcptno.Text.Trim();
                                                                    string recptDt = txt_date.Text.Trim();
                                                                    //string studname = txt_name.Text.Trim();
                                                                    string course = txt_dept.Text.Trim();
                                                                    string batchYrSem = string.Empty;
                                                                    string acaYear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanAcademicYear' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                                                                    try
                                                                    {
                                                                        acaYear = acaYear.Split(',')[0] + "-" + acaYear.Split(',')[1];
                                                                    }
                                                                    catch { }
                                                                    try
                                                                    {
                                                                        course = course.Split('-')[0];
                                                                    }
                                                                    catch { course = ""; }
                                                                    // string mode = string.Empty;

                                                                    if (rb_cash.Checked)
                                                                    {
                                                                        mode = "Cash";
                                                                    }
                                                                    else if (rb_cheque.Checked)
                                                                    {
                                                                        mode = "Cheque";
                                                                    }
                                                                    else if (rb_dd.Checked)
                                                                    {
                                                                        mode = "DD";
                                                                    }
                                                                    else if (rb_card.Checked)
                                                                    {
                                                                        mode = "Card";
                                                                    }
                                                                    else if (rb_NEFT.Checked)//added by abarna 30.04.2018
                                                                    {
                                                                        mode = "NEFT";
                                                                    }
                                                                    //Fields to print
                                                                    string queryPrint1 = "select * from FM_RcptChlPrintSettings where collegecode ='" + collegecode1 + "'";
                                                                    ds.Clear();
                                                                    ds = d2.select_method_wo_parameter(queryPrint1, "Text");
                                                                    if (ds.Tables.Count > 0)
                                                                    {
                                                                        if (ds.Tables[0].Rows.Count > 0)
                                                                        {

                                                                            //Footer Div Values
                                                                            byte degACR = Convert.ToByte(dsPri.Tables[0].Rows[0]["IsDegreeAcr"]);
                                                                            byte studCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsStudCopy"]);
                                                                            byte officopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsOfficeCopy"]);
                                                                            byte transCopy = Convert.ToByte(ds.Tables[0].Rows[0]["IsTransportCopy"]);

                                                                            //Document Settings
                                                                            contentDiv.InnerHtml = "";
                                                                            StringBuilder sbHtml = new StringBuilder();

                                                                            string colquery = "select collname,university,address1 ,address2,address3+' - '+pincode as address3 from collinfo where college_code=" + collegecode1 + " ";
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 3)
                                                                                {
                                                                                    colquery += " select a.Current_Semester,a.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,a.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,'' Boarding,a.mother,a.parent_name,ISNULL( type,'') as type,'' Sections  from applyn a,Degree d,Department dt,Course c where a.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and a.App_No='" + appnoNew + "' and d.college_code=" + collegecode1 + "";
                                                                                }
                                                                                else
                                                                                {
                                                                                    colquery += " select r.Current_Semester,r.Degree_code,(c.Course_Name +' - '+ dt.Dept_Name) as department, (c.Course_Name +' - '+ dt.dept_acronym) as dept_acronym,r.Batch_Year,(select TextVal  from TextValTable where TextCode = a.seattype) as seattype ,r.Boarding,a.mother,a.parent_name,isnull(r.Sections,'') as Sections from Registration r, applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and r.degree_code =d.Degree_Code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and r.App_No='" + appnoNew + "' and r.college_code=" + collegecode1 + " ";
                                                                                }
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                colquery += "  select appl_id ,h.dept_name,h.dept_acronym,h.dept_code,s.staff_name,s.staff_code,a.father_name,t.stftype as staff_type  from staffmaster s,staff_appl_master a,hrdept_master h,stafftrans t,desig_master d where s.appl_no =a.appl_no and s.staff_code =t.staff_code and t.dept_code =h.dept_code and d.desig_code =t.desig_code and s.college_code =h.college_code and d.collegeCode =s.college_code and latestrec ='1' and appl_id ='" + appnoNew + "' and s.college_Code=" + collegecode1 + "  ";
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                            {
                                                                                colquery += " SELECT VendorContactPK, VenContactType, VenContactName, VenContactDesig, VenContactDept, VendorPhoneNo, VendorExtNo, VendorMobileNo, VendorEmail, VendorFK FROM      IM_VendorContactMaster WHERE VendorContactPK = '" + appnoNew + "' ";
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                            {
                                                                                colquery += " SELECT VendorCode,vendorname,VendorMobileNo,VendorAddress,VendorCity,VendorCompName,VendorType  from co_vendormaster  WHERE VendorPK = '" + appnoNew + "' ";
                                                                                outRoll = string.Empty;
                                                                            }
                                                                            string collegename = "";
                                                                            string add1 = "";
                                                                            string add2 = "";
                                                                            string add3 = "";
                                                                            string univ = "";
                                                                            string deg = "";
                                                                            string degAcr = "";
                                                                            string cursem = "";
                                                                            string batyr = "";
                                                                            string seatty = "";
                                                                            string board = "";
                                                                            string mothe = "";
                                                                            string fathe = "";
                                                                            double deductionamt = 0;
                                                                            ds.Clear();
                                                                            ds = d2.select_method_wo_parameter(colquery, "Text");
                                                                            if (ds.Tables.Count > 0)
                                                                            {
                                                                                if (ds.Tables[0].Rows.Count > 0)
                                                                                {
                                                                                    collegename = Convert.ToString(ds.Tables[0].Rows[0]["collname"]);
                                                                                    add1 = Convert.ToString(ds.Tables[0].Rows[0]["address1"]);
                                                                                    add2 = Convert.ToString(ds.Tables[0].Rows[0]["address2"]);
                                                                                    add3 = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);

                                                                                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                                                                                }
                                                                                if (ds.Tables[1].Rows.Count > 0)
                                                                                {
                                                                                    if (rbl_rollnoNew.SelectedIndex == 0)
                                                                                    {
                                                                                        //if (degACR == 0)
                                                                                        //{
                                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["department"]);
                                                                                        //}
                                                                                        //else
                                                                                        //{
                                                                                        degAcr = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                        //}
                                                                                        cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                        batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["seattype"]);
                                                                                        board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                        mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["parent_name"]);
                                                                                        //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                    {
                                                                                        //if (degACR == 0)
                                                                                        //{
                                                                                        deg = Convert.ToString(ds.Tables[1].Rows[0]["dept_name"]);
                                                                                        //}
                                                                                        //else
                                                                                        //{
                                                                                        degAcr = Convert.ToString(ds.Tables[1].Rows[0]["dept_acronym"]);
                                                                                        //}
                                                                                        //cursem = Convert.ToString(ds.Tables[1].Rows[0]["Current_Semester"]);
                                                                                        //batyr = Convert.ToString(ds.Tables[1].Rows[0]["Batch_Year"]);
                                                                                        seatty = Convert.ToString(ds.Tables[1].Rows[0]["staff_type"]);
                                                                                        //board = Convert.ToString(ds.Tables[1].Rows[0]["Boarding"]);
                                                                                        //mothe = Convert.ToString(ds.Tables[1].Rows[0]["mother"]);
                                                                                        fathe = Convert.ToString(ds.Tables[1].Rows[0]["father_name"]);
                                                                                        //sec = " " + Convert.ToString(ds.Tables[1].Rows[0]["Sections"]);
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 2)
                                                                                    {
                                                                                        deg = " - ";
                                                                                    }
                                                                                    else if (rbl_rollnoNew.SelectedIndex == 3)
                                                                                    {
                                                                                        deg = " - ";
                                                                                    }
                                                                                }

                                                                                if (rbl_rollnoNew.SelectedIndex == 1)
                                                                                {
                                                                                    course = txtDept_staff.Text.Trim();
                                                                                }
                                                                            }
                                                                            string degString = string.Empty;
                                                                            //Line3
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                degString = deg.Split('-')[0].ToUpper();
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                degString = deg;
                                                                            }


                                                                            string deptstring = string.Empty;
                                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                                            {
                                                                                deptstring = deg.Split('-')[1].ToUpper();
                                                                            }
                                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                                            {
                                                                                try
                                                                                {
                                                                                    deptstring = deg.Split('-')[1].ToUpper();
                                                                                }
                                                                                catch { }
                                                                            }
                                                                            #region multimode
                                                                            string ddnar = string.Empty;
                                                                            if (chk_rcptMulmode.Checked)
                                                                            {
                                                                                mode = modeMulti;
                                                                                for (int z = 0; z < dtMulBnkDetails.Rows.Count; z++)
                                                                                {
                                                                                    ddnar += "\nNo : " + dtMulBnkDetails.Rows[z][1] + " Bank : " + dtMulBnkDetails.Rows[z][0] + "\nBranch :" + dtMulBnkDetails.Rows[z][2] + " Date  : " + dtMulBnkDetails.Rows[z][3] + " Amount : " + dtMulBnkDetails.Rows[z][4] + "/-";
                                                                                }
                                                                            }
                                                                            else
                                                                            {
                                                                                if (!rb_cash.Checked)
                                                                                {
                                                                                    if (rb_dd.Checked == true)
                                                                                    {
                                                                                        ddnar = "\nDDNo : " + checkDDno + " Bank : " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                                    }
                                                                                    else if (rb_cheque.Checked)
                                                                                    {
                                                                                        ddnar = "\nChequeNo : " + checkDDno + " Bank : " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                                    }
                                                                                    else if (rb_card.Checked)
                                                                                    {
                                                                                        ddnar = "\nCard No:" + checkDDno + " Card: " + newbankname + "\nBranch :" + branch + " Date  : " + txt_date1.Text.ToString();
                                                                                    }
                                                                                    else if (rb_NEFT.Checked)//ADDED BY ABARNA 30.04.2018
                                                                                    {
                                                                                        ddnar = "\nNeft No:" + checkDDno + "";
                                                                                    }
                                                                                }
                                                                                else
                                                                                {
                                                                                    ddnar = "\nCash ";
                                                                                }
                                                                            }
                                                                            string remark = "\n" + txt_remark.Text.Trim();
                                                                            #endregion

                                                                            if (save1 == 12)
                                                                            {
                                                                                //For kcg 11/07                                                                                                                                                
                                                                                FormatXIIKcgChallanReceipt rcpt = new FormatXIIKcgChallanReceipt();
                                                                                contentDiv.InnerHtml = rcpt.kcgprint(appnoNew, outRoll, collegecode1, usercode, Convert.ToByte(rcptType), studname, recptDt, DateTime.Now.ToLongTimeString(), recptNo, cursem, degAcr.Split('-')[0].ToUpper(), deptstring, ddnar, remark, grid_Details, cb_exfees, cb_govt, cb_CautionDep, collegecode, usercode, txt_examt).ToString();

                                                                            }
                                                                            #region New Print
                                                                            //contentDiv.InnerHtml += sbHtml.ToString();
                                                                            contentDiv.Visible = true;
                                                                            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                                                                            #endregion
                                                                        }
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }
                                                            else if (save1 == 13)
                                                            {
                                                                //VELAMMAL VIDYALAYA
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))// && txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    contentDiv.InnerHtml = "";
                                                                    try
                                                                    {

                                                                        bool imgdivVisible = false;
                                                                        bool contentVisible = false;
                                                                        bool CreateReceiptOK = false;

                                                                        FormatXIIIVelammalSchoolReceiptChallan rcpt = new FormatXIIIVelammalSchoolReceiptChallan();
                                                                        contentDiv.InnerHtml = rcpt.generateOriginal(receiptno.Trim(), txt_date.Text.Trim(), txt_dept.Text.Trim(), rb_cash, rb_cheque, rb_dd, rb_card, rb_NEFT, collegecode1, usercode, ref lastRecptNo, ref accidRecpt, rbl_rollnoNew, rbl_rollno, appnoNew, outRoll, txtDept_staff, rollno, app_formno, Regno, studname, grid_Details, BalanceType, dtMulBnkDetails, chk_rcptMulmode, modeMulti, checkDDno, newbankname, branch, txt_date1, txt_remark, ref  contentVisible, ref  CreateReceiptOK, ref  imgdivVisible, ref  lbl_alert, cb_CautionDep, cb_govt, cb_exfees, mode, txt_ddno, ddl_bkname, txt_chqno, dsPri, Roll_admit, section, batch_year);
                                                                        imgAlert.Visible = imgdivVisible;

                                                                        if (CreateReceiptOK)
                                                                        {
                                                                            //Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");
                                                                            contentDiv.Visible = true;
                                                                            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                                                                        }

                                                                    }
                                                                    catch { imgAlert.Visible = true; }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }
                                                            else if (save1 == 14)
                                                            {
                                                                //Pavai College and School
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))// && txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    contentDiv.InnerHtml = "";
                                                                    try
                                                                    {

                                                                        bool imgdivVisible = false;
                                                                        bool contentVisible = false;
                                                                        bool CreateReceiptOK = false;

                                                                        FormatIVPavaiChallanReceipt rcpt = new FormatIVPavaiChallanReceipt();

                                                                        contentDiv.InnerHtml = rcpt.generateOriginal(receiptno.Trim(), txt_date.Text.Trim(), txt_dept.Text.Trim(), rb_cash, rb_cheque, rb_dd, rb_card, rb_NEFT, rb_Challan, collegecode1, usercode, ref lastRecptNo, ref accidRecpt, rbl_rollnoNew, rbl_rollno, appnoNew, outRoll, txtDept_staff, rollno, app_formno, Regno, studname, grid_Details, BalanceType, dtMulBnkDetails, chk_rcptMulmode, modeMulti, checkDDno, newbankname, branch, txt_date1, txt_remark, ref  contentVisible, ref  CreateReceiptOK, ref  imgdivVisible, ref  lbl_alert, cb_CautionDep, cb_govt, cb_exfees, mode, txt_ddno, ddl_bkname, txt_chqno, dsPri, Roll_admit, section, batch_year);
                                                                        imgAlert.Visible = imgdivVisible;

                                                                        if (CreateReceiptOK)
                                                                        {
                                                                            //Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");
                                                                            contentDiv.Visible = true;
                                                                            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                                                                        }

                                                                    }
                                                                    catch { imgAlert.Visible = true; }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }
                                                            else if (save1 == 3)
                                                            {
                                                                //For Mcc &  Others
                                                                #region Print Option For Receipt
                                                                if ((rbl_rollnoNew.SelectedIndex == 0 && txt_rollno.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 1 && txtroll_staff.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 2 && txtname_vendor.Text.Trim() != "") || (rbl_rollnoNew.SelectedIndex == 3 && txtroll_other.Text.Trim() != ""))// && txt_otherMobile.Text.Trim() != ""
                                                                {
                                                                    try
                                                                    {
                                                                        bool imgdivVisible = false;
                                                                        bool contentVisible = false;
                                                                        bool CreateReceiptOK = false;

                                                                        // FormatIGeneralChallanReceipt rcpt = new FormatIGeneralChallanReceipt();
                                                                        FormatoneGeneralChallanReceipt rcpt = new FormatoneGeneralChallanReceipt();
                                                                        contentDiv.InnerHtml = rcpt.generateOriginal(receiptno.Trim(), txt_date.Text.Trim(), txt_dept.Text.Trim(), rb_cash, rb_cheque, rb_dd, rb_card, rb_NEFT, collegecode1, usercode, ref lastRecptNo, ref accidRecpt, rbl_rollnoNew, rbl_rollno, appnoNew, outRoll, txtDept_staff, rollno, app_formno, Regno, studname, grid_Details, BalanceType, dtMulBnkDetails, chk_rcptMulmode, modeMulti, checkDDno, newbankname, branch, txt_date1, txt_remark, ref  contentVisible, ref  CreateReceiptOK, ref  imgdivVisible, ref  lbl_alert, cb_CautionDep, cb_govt, cb_exfees);
                                                                        imgAlert.Visible = imgdivVisible;

                                                                        if (CreateReceiptOK)
                                                                        {
                                                                            //Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");
                                                                            contentDiv.Visible = true;
                                                                            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
                                                                        }

                                                                    }
                                                                    catch { imgAlert.Visible = true; }
                                                                }
                                                                else
                                                                {
                                                                    imgAlert.Visible = true;
                                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                                    lbl_alert.Text = "Not Enough Details To Print";
                                                                }
                                                                #endregion
                                                            }
                                                        }
                                                        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }

                                                        finally
                                                        {
                                                            //After save process
                                                            bank();
                                                            cardType();
                                                            txtLast4No.Text = "";
                                                            txtCardType.Text = "";
                                                            accidRecpt = string.Empty;
                                                            lastRecptNo = string.Empty;
                                                            Txt_amt.Text = "0.00";
                                                            txt_rcptno.Text = generateReceiptNo();
                                                            if (rbl_rollnoNew.SelectedIndex == 0)
                                                            {
                                                                loadGridStudent();
                                                            }
                                                            else if (rbl_rollnoNew.SelectedIndex == 1)
                                                            {
                                                                loadGridStaff();
                                                            }
                                                            else if (rbl_rollnoNew.SelectedIndex == 2)
                                                            {
                                                                loadGridVendor();
                                                            }
                                                            else if (rbl_rollnoNew.SelectedIndex == 3)
                                                            {
                                                                loadGridOthers();
                                                            }
                                                            bindGrid();
                                                            txt_return.Text = "";
                                                            txttemprcpt.Text = "";
                                                            // lblstaticrollno.Text = "";
                                                            string feecat = Convert.ToString(Session["feecode"]);
                                                            imgAlert.Visible = true;
                                                            //this.Form.DefaultButton = "btn_alertclose";
                                                            lbl_alert.Text = "Saved Successfully";
                                                            //=========================added by abarna 6.4.2018=============//
                                                            int savevalue = 1;
                                                            div_HeaderLed.Visible = false;
                                                            string entrycode = Session["Entry_Code"].ToString();
                                                            string formname = "Receipt";
                                                            string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                            string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                            IPHostEntry host;
                                                            string localip = "";
                                                            host = Dns.GetHostEntry(Dns.GetHostName());
                                                            foreach (IPAddress ip in host.AddressList)
                                                            {
                                                                if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                {
                                                                    localip = ip.ToString();
                                                                }
                                                            }
                                                            string details = "Roll No:" + txt_rollno.Text.Trim() + " : Batch Year - " + batch_year + " : Receipt No:" + txt_rcptno.Text + " : Amount - " + Amount + " : ExcessAmount - " + ex_Amount + " : Date - " + toa + " ";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";

                                                            string ctsname = "";
                                                            if (savevalue == 1)
                                                            {
                                                                ctsname = "Receipt Generated";
                                                            }
                                                            string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                            d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    imgAlert.Visible = true;
                                                    //this.Form.DefaultButton = "btn_alertclose";
                                                    lbl_alert.Text = "Not Saved.";
                                                }

                                                //After save process
                                                bank();
                                                cardType();
                                                accidRecpt = string.Empty;
                                                lastRecptNo = string.Empty;
                                                Txt_amt.Text = "0.00";
                                                txt_examt.Text = "0.00";
                                                txt_rcptno.Text = generateReceiptNo();
                                                //loadGridStudent();
                                                bindHeaderLedger();
                                                bindGrid();
                                                txt_return.Text = "";
                                                txt_chqno.Text = "";
                                                txt_branch.Text = "";
                                                txt_remark.Text = "";
                                                txtCardType.Text = "";
                                                txtLast4No.Text = "";
                                                txt_NEFTNO.Text = "";
                                                txt_challan.Text = "";//added by abarna
                                                txt_ddno.Text = "";//added by abarna
                                                //txt_Smartno.Focus();
                                                // lblstaticrollno.Text = "";
                                            }
                                            else
                                            {
                                                imgAlert.Visible = true;
                                                //this.Form.DefaultButton = "btn_alertclose";
                                                lbl_alert.Text = "Please Enter All Bank Fields";
                                                if (rb_card.Checked)
                                                {
                                                    lbl_alert.Text = "Please Enter Card Details";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            imgAlert.Visible = true;
                                            //this.Form.DefaultButton = "btn_alertclose";
                                            lbl_alert.Text = "Please Enter All Fields";
                                        }
                                    }
                                    else
                                    {
                                        //Invalid ReceiptNo
                                        imgAlert.Visible = true;
                                        //this.Form.DefaultButton = "btn_alertclose";
                                        lbl_alert.Text = "Invalid Receipt Number";
                                    }
                                }
                                catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
                            }
                            else
                            {
                                imgAlert.Visible = true;
                                //this.Form.DefaultButton = "btn_alertclose";
                                lbl_alert.Text = "Please Add Print Settings";
                            }
                        }
                        else
                        {
                            imgAlert.Visible = true;
                            //this.Form.DefaultButton = "btn_alertclose";
                            lbl_alert.Text = "Please Add Print Settings";
                        }
                    }
                }
                else
                {
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Pay Fine Amount";
                }
                #endregion
            }
        }
        ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "HideLoadingDiv();", true);
    }

    protected bool getPaidDetails(string dtrcpt, string time, string receiptno, string memtype, string appnoNew, string ledgerfk, string headerfk, string feecat, string credit, double paidAmt, string PayMode, string checkDDno, string dtchkdd, string newbankcode, string branch, string TransType, string IsInstallmentPay, string InstallmentNo, string remark, string PayAt, string PayThrough, string IsArrearCollect, string ArearFinYearFK, string usercode, string finYearid, string rcptType, string iscollected, string collecteddate, string iscollecteds, string collecteddates, string isFine, string actualFinYearFk, double schoolORclg, string isHeaderwise, string lastRecptNo, string collegecode, string rcptUpdate, string hdrSetPK, double exgridamt, double schlamt)
    {
        bool InsertUpdateOK = false;


        try
        {
            int queryAct = 1;
            int val = Convert.ToInt32(schoolORclg);
            Hashtable htPaidInsert = new Hashtable();
            htPaidInsert.Add("@CollegeOrSchool", Convert.ToString(val));
            htPaidInsert.Add("@Transdate", dtrcpt);
            htPaidInsert.Add("@Transtime", time);
            htPaidInsert.Add("@Transcode", receiptno);
            htPaidInsert.Add("@Memtype", memtype);
            htPaidInsert.Add("@App_no", appnoNew);
            htPaidInsert.Add("@Ledgerfk", ledgerfk);
            htPaidInsert.Add("@Headerfk", headerfk);
            htPaidInsert.Add("@Feecategory", feecat);
            htPaidInsert.Add("@Credit", credit);
            htPaidInsert.Add("@Debit", paidAmt);
            htPaidInsert.Add("@Paymode", PayMode);
            htPaidInsert.Add("@Ddno", checkDDno);
            htPaidInsert.Add("@Dddate", dtchkdd);
            htPaidInsert.Add("@DdBankCode", newbankcode = newbankcode == "" ? "0" : newbankcode);
            htPaidInsert.Add("@DDBankBranch", branch);
            htPaidInsert.Add("@TransType", TransType);
            htPaidInsert.Add("@IsInstallmentPay", IsInstallmentPay);
            htPaidInsert.Add("@InstallmentNo", InstallmentNo);
            htPaidInsert.Add("@Narration", remark);
            htPaidInsert.Add("@PayAt", PayAt);
            htPaidInsert.Add("@PayThrough", PayThrough);
            htPaidInsert.Add("@IsArrearCollect", IsArrearCollect);
            htPaidInsert.Add("@ArearFinYearFK", ArearFinYearFK);
            htPaidInsert.Add("@EntryUserCode", usercode);
            htPaidInsert.Add("@FinYearFK", finYearid);
            htPaidInsert.Add("@Receipttype", rcptType);
            htPaidInsert.Add("@IsCollected", iscollected);
            htPaidInsert.Add("@CollectedDate", collecteddate);
            htPaidInsert.Add("@IsDeposited", iscollecteds);
            htPaidInsert.Add("@DepositedDate", collecteddates);
            htPaidInsert.Add("@FineFeecategory", isFine = isFine == "" || isFine == null ? "0" : isFine);
            htPaidInsert.Add("@ActualFinYearFK", actualFinYearFk);
            //  htPaidInsert.Add("@AlotBalAmt", "0");


            htPaidInsert.Add("@isHeaderwise", isHeaderwise);
            htPaidInsert.Add("@lastRecptNo", lastRecptNo);
            htPaidInsert.Add("@collegecode", collegecode);
            htPaidInsert.Add("@hdrSetPK", hdrSetPK);
            htPaidInsert.Add("@queryAction", queryAct);
            htPaidInsert.Add("@ReceiptUpdateStatus", rcptUpdate);

            //if (htPaidInsert.Count > 0)
            //{
            //    string value = string.Empty;
            //    foreach (DictionaryEntry dt in htPaidInsert)
            //    {

            //        value += Convert.ToString(dt.Key) + "=" + Convert.ToString(dt.Value);
            //    }
            //}

            int insert = d2.insert_method("USP_RECEIPT_SAVE", htPaidInsert, "sp");

            //  string insQ = " INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate,FineFeecategory,ActualFinYearFK) VALUES('" + dtrcpt + "','" + time + "','" + receiptno + "','" + memtype + "','" + appnoNew + "','" + ledgerfk + "','" + headerfk + "','" + feecat + "','" + credit + "','" + paidAmt + "','" + PayMode + "','" + checkDDno + "','" + dtchkdd + "','" + newbankcode + "','" + branch + "','" + TransType + "','" + IsInstallmentPay + "','" + InstallmentNo + "','" + remark + "','" + PayAt + "','" + PayThrough + "','" + IsArrearCollect + "','" + ArearFinYearFK + "','" + usercode + "','" + finYearid + "','" + rcptType + "','" + iscollected + "','" + collecteddate + "','" + iscollecteds + "','" + collecteddates + "','" + isFine + "','" + actualFinYearFk + "')";

            if (insert > 0)
            {
                htPaidInsert.Remove("@queryAction");
                htPaidInsert.Add("@queryAction", "2");
                DataSet dsPrevAMount = d2.select_method("USP_RECEIPT_SAVE", htPaidInsert, "sp");
                if (dsPrevAMount.Tables.Count > 0 && dsPrevAMount.Tables[0].Rows.Count > 0)
                {
                    double total = 0;
                    double paidamt = 0;
                    double balamt = 0;
                    total = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["TotalAmount"]);
                    if (total > 0)
                    {
                        paidamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["PaidAmount"]);
                        balamt = Convert.ToDouble(dsPrevAMount.Tables[0].Rows[0]["BalAmount"]);

                        balamt = (total - paidamt);
                        htPaidInsert.Remove("@queryAction");
                        htPaidInsert.Add("@queryAction", "3");
                        // double curPaid = (paidAmt + exgridamt);
                        double curPaid = paidAmt;
                        htPaidInsert.Add("@UpdateAmt", curPaid);
                        // double curBal = (balamt - (paidAmt + exgridamt));
                        double curBal = (balamt - (paidAmt));
                        htPaidInsert.Add("@AlotBalAmt", curBal);
                        htPaidInsert.Add("@ScholarAmt", schlamt);
                        int upda = d2.update_method_with_parameter("USP_RECEIPT_SAVE", htPaidInsert, "sp");

                        InsertUpdateOK = true;
                    }
                }
            }
        }
        catch
        {


        }
        return InsertUpdateOK;
    }


    private double retBalance(string appNo)
    {
        double ovBalAMt = 0;
        if (BalanceType == 1)
        {
            double.TryParse(d2.GetFunction(" select sum(isnull(totalAmount,0)-isnull(paidAmount,0)) as BalanceAmt from ft_feeallot where app_no =" + appNo + " and isnull(istransfer,'0')='0'"), out ovBalAMt);
        }
        return ovBalAMt;
    }
    protected void btn_surenoRcpt_Click(object sender, EventArgs e)
    {
        Div4.Visible = false;
    }
    protected void btn_save_Click(object sender, EventArgs e)
    {
        if (rb_Challan.Checked)
        {
            txt_challan_TextChanged(sender, e);
        }
        if (chl_MulRcpt.Checked)
        {
            Div4.Visible = true;
        }
        else
        {
            double exvalue = 0;
            double scholamt = 0;
            double cautAmt = 0;
            bool checkedOK = false;
            foreach (GridViewRow row in grid_Details.Rows)
            {
                CheckBox chkOkPay = (CheckBox)row.FindControl("cb_selectLedger");
                if (chkOkPay.Checked)
                    checkedOK = true;
            }
            if (cb_exfees.Checked)
            {
                foreach (GridViewRow row in grid_Details.Rows)
                {
                    TextBox txtExcessGridAmt = (TextBox)row.FindControl("txt_gridexcess_amt");

                    if (txtExcessGridAmt.Text == "")
                    {
                        txtExcessGridAmt.Text = "0";
                    }
                    try
                    {
                        exvalue += Convert.ToDouble(txtExcessGridAmt.Text);
                    }
                    catch { }
                }
            }
            if (cb_govt.Checked)
            {
                foreach (GridViewRow row in grid_Details.Rows)
                {
                    double gvtamt = 0;
                    TextBox txtScholAmt = (TextBox)row.FindControl("txt_scholar_amt");
                    double.TryParse(txtScholAmt.Text, out gvtamt);
                    scholamt += gvtamt;
                }
            }

            if (cb_CautionDep.Checked)
            {
                foreach (GridViewRow row in grid_Details.Rows)
                {
                    double curCautamt = 0;
                    TextBox txtCautAmt = (TextBox)row.FindControl("txt_deposit_amt");
                    double.TryParse(txtCautAmt.Text, out curCautamt);
                    cautAmt += curCautamt;
                }
            }

            if (((Txt_amt.Text != "" && Txt_amt.Text != "0" && Txt_amt.Text != "0.00") || exvalue > 0 || scholamt > 0 || cautAmt > 0) && checkedOK)
            {
                if (chk_rcptMulmode.Checked)
                {
                    divRecptRpt.Visible = true;

                    lbl_mdamt.Text = "Total Amount Rs." + Txt_amt.Text + " /-";
                    string queru = "select TextCode,TextVal  from textvaltable where TextCriteria = 'BName' and college_code='" + collegecode1 + "'; select TextCode,TextVal  from textvaltable where TextCriteria = 'cardT' and college_code='" + collegecode1 + "'";
                    ddlmdBankAdd.Items.Clear();
                    ddlCardTypeMd.Items.Clear();
                    DataSet dsBank = d2.select_method_wo_parameter(queru, "Text");
                    if (dsBank.Tables.Count > 1)
                    {
                        if (dsBank.Tables[0].Rows.Count > 0)
                        {
                            ddlmdBankAdd.DataSource = dsBank;
                            ddlmdBankAdd.DataTextField = "TextVal";
                            ddlmdBankAdd.DataValueField = "TextCode";
                            ddlmdBankAdd.DataBind();
                        }
                        if (dsBank.Tables[1].Rows.Count > 0)
                        {
                            ddlCardTypeMd.DataSource = dsBank.Tables[1];
                            ddlCardTypeMd.DataTextField = "TextVal";
                            ddlCardTypeMd.DataValueField = "TextCode";
                            ddlCardTypeMd.DataBind();
                        }
                    }
                    ddlCardTypeMd.Items.Insert(0, "Select");
                    ddlCardTypeMd.Items.Add("Others");

                    rblCashChkDd.SelectedIndex = 0;
                    txt_mdAddAmtpop.Text = "";
                    txt_mdBranchAdd.Text = "";
                    txt_mdChequeNoAdd.Text = "";
                    if (ddlmdBankAdd.Items.Count > 0)
                    {
                        ddlmdBankAdd.SelectedIndex = 0;
                    }
                    txtCardTypeMd.Text = "";
                    txtLast4NoMd.Text = "";
                    if (ddlCardTypeMd.Items.Count > 0)
                    {
                        ddlCardTypeMd.SelectedIndex = 0;
                    }
                    gridMultimode.DataSource = null;
                    gridMultimode.DataBind();
                    rblCashChkDd_OnSelectedIndexChanged(sender, e);
                }
                else
                {
                    Div4.Visible = true;
                }
                //if (rb_Challan.Checked)
                //{
                //    Div4.Visible = false;
                //    btn_print_Click(sender, e);
                //}

            }
            else
            {
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Enter Amount Or Select A Ledger";
            }
        }
    }

    private void challanPrint()
    {
        bool boolFine = false;
        if (checkSchoolSetting() == 0)
        {
            boolFine = getFineSetting();
        }
        else
            boolFine = true;
        if (boolFine)//fine checking if it's school only
        {
            bool imgdivVisible = false;
            bool contentVisible = false;
            bool CreateReceiptOK = false;

            GeneralAndMCCChallan GMccChallan = new GeneralAndMCCChallan();
            GMccChallan.checkSchoolSetting(usercode);//added by abarna 05.03.2018
            string szFile = GMccChallan.printGeneralAndMCCChallan(cb_selcthd, rbl_headerselect, collegecode1, usercode, lastRecptNo, accidRecpt, rdo_multi, ref  txt_rcptno, Fpspread1, txt_totnoofstudents, txt_date, txt_name, ddl_semMultiple, rbl_rollno, ddl_collegebank, ref  lbl_alert, ref imgdivVisible, cbl_grpheader, ref  Txt_amt, grid_Details, ref contentVisible, ref CreateReceiptOK, lblstaticrollno.Text.Trim(), ddl_sem.SelectedValue, lbltype.Text, txt_dept.Text.Trim(), ddl_sem);
            imgAlert.Visible = imgdivVisible;

            if (CreateReceiptOK)
            {

                Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");

                //contentDiv.Visible = true;
                //ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
            }
            try
            {
                Txt_amt.Text = "";
                bindGrid();
                loadGridStudent();
            }
            catch { }
        }
        else
        {
            ScriptManager.RegisterClientScriptBlock(this, typeof(Page), UniqueID, "alert('Please Select Proper Fine!')", true);
        }

    }

    protected bool getFineSetting()
    {
        bool fineOk = false;
        try
        {
            Dictionary<string, string> htfine = new Dictionary<string, string>();
            Dictionary<string, string> htother = new Dictionary<string, string>();

            foreach (GridViewRow row in grid_Details.Rows)
            {
                CheckBox chkOkPayFine = (CheckBox)grid_Details.Rows[0].FindControl("cb_selectLedger");
                Label lblfinYear = (Label)row.FindControl("lbl_Finyearfk");
                Label lblFineFeeCat = (Label)grid_Details.Rows[0].FindControl("lbl_textCode");
                if (!lblFineFeeCat.Text.Trim().Contains("$") && !lblfinYear.Text.Trim().Contains("&"))
                {
                    if (chkOkPayFine.Checked)
                    {

                        string feeKey = Convert.ToString(lblFineFeeCat.Text.Trim() + "-" + Convert.ToString(lblfinYear.Text.Trim()));
                        if (!htother.ContainsKey(feeKey))
                        {
                            htother.Add(feeKey, "Other");
                        }
                    }
                }
                else
                {
                    string feecat = lblFineFeeCat.Text.Trim().Split('$')[0] + "-" + Convert.ToString(lblfinYear.Text.Trim());
                    if (!htfine.ContainsKey(feecat))
                    {
                        htfine.Add(feecat, "fine");
                    }
                }
                //string[] finefeecat = lblFeeCategory.Text.Split(',');
                //foreach (string finefeecatAmt in finefeecat)
                //{
                //    string isFine = string.Empty;
                //    string[] splfine = finefeecatAmt.Split('$');
                //    if (splfine.Length > 1)
                //    {
                //        lblFeeCategory.Text = splfine[0];
                //        //  txtTobePaidamt.Text = splfine[1];
                //        isFine = "-1";
                //    }
                //}
                //if (!finYearfk.Contains("&"))
                //{
                //}
            }
            fineOk = validateFineFees(htfine, htother);
        }
        catch { fineOk = false; }
        return fineOk;
    }

    protected bool validateFineFees(Dictionary<string, string> htfine, Dictionary<string, string> htother)
    {
        bool checkBool = true;
        foreach (KeyValuePair<string, string> fineVal in htfine)
        {
            try
            {
                string fineKey = fineVal.Key.ToString();
                if (!htother.ContainsKey(fineKey))
                    checkBool = false;
            }
            catch { checkBool = false; }
        }

        return checkBool;
    }

    private bool showLedgerFees()
    {
        bool showFees = false;
        string Q = "select LinkValue from New_InsSettings where LinkName='ShowLedgerwiseFeesinChallan' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
        if (d2.GetFunction(Q).Trim() == "1")
            showFees = true;
        return showFees;
    }
    private void challanPrintNew()
    {
        bool imgdivVisible = false;
        bool contentVisible = false;
        bool CreateReceiptOK = false;
        contentDiv.InnerHtml = string.Empty;
        GeneralAndNECChallan GncChallan = new GeneralAndNECChallan();
        contentDiv.InnerHtml = GncChallan.printGeneralAndNECChallan(cb_selcthd, rbl_headerselect, collegecode1, usercode, lastRecptNo, accidRecpt, rdo_multi, ref  txt_rcptno, Fpspread1, txt_totnoofstudents, txt_date, txt_name, ddl_semMultiple, rbl_rollno, ddl_collegebank, ref  lbl_alert, ref imgdivVisible, cbl_grpheader, ref  Txt_amt, grid_Details, ref contentVisible, ref CreateReceiptOK, lblstaticrollno.Text.Trim(), ddl_sem.SelectedValue, lbltype.Text, txt_dept.Text.Trim());
        imgAlert.Visible = imgdivVisible;

        if (CreateReceiptOK)
        {
            contentDiv.Visible = true;
            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
        }
        try
        {
            Txt_amt.Text = "";
            bindGrid();
            loadGridStudent();
        }
        catch { }
    }
    private void challanPrintNewCollege()
    {
        bool imgdivVisible = false;
        bool contentVisible = false;
        bool CreateReceiptOK = false;
        contentDiv.InnerHtml = string.Empty;
        NewCollegeChallan ncChallan = new NewCollegeChallan();
        contentDiv.InnerHtml = ncChallan.printNewCollegeChallan(cb_selcthd, rbl_headerselect, collegecode1, usercode, lastRecptNo, accidRecpt, rdo_multi, ref  txt_rcptno, Fpspread1, txt_totnoofstudents, txt_date, txt_name, ddl_semMultiple, rbl_rollno, ddl_collegebank, ref  lbl_alert, ref imgdivVisible, cbl_grpheader, ref  Txt_amt, grid_Details, ref contentVisible, ref CreateReceiptOK, lblstaticrollno.Text.Trim(), ddl_sem.SelectedValue, lbltype.Text, txt_dept.Text.Trim());
        imgAlert.Visible = imgdivVisible;

        if (CreateReceiptOK)
        {
            contentDiv.Visible = true;
            ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
        }
        try
        {
            Txt_amt.Text = "";
            bindGrid();
            loadGridStudent();
        }
        catch { }
    }
    private void challanPrintUIT()
    {

        bool imgdivVisible = false;
        bool contentVisible = false;
        bool CreateReceiptOK = false;

        UITChallan uitChallan = new UITChallan();
        string szFile = uitChallan.printUITChallan(cb_selcthd, rbl_headerselect, collegecode1, usercode, lastRecptNo, accidRecpt, rdo_multi, ref  txt_rcptno, Fpspread1, txt_totnoofstudents, txt_date, txt_name, ddl_semMultiple, rbl_rollno, ddl_collegebank, ref  lbl_alert, ref imgdivVisible, cbl_grpheader, ref  Txt_amt, grid_Details, ref contentVisible, ref CreateReceiptOK, lblstaticrollno.Text.Trim(), ddl_sem.SelectedValue, lbltype.Text, txt_dept.Text.Trim(), ddl_sem);
        imgAlert.Visible = imgdivVisible;

        if (CreateReceiptOK)
        {
            Response.Write("<script>window.open('PrintPage.aspx?name=" + szFile + "', '_blank');</script>");
            //contentDiv.Visible = true;
            //ScriptManager.RegisterStartupScript(this, GetType(), "InvokeButton", "PrintDiv();", true);
        }
        try
        {
            Txt_amt.Text = "";
            bindGrid();
            loadGridStudent();
        }
        catch { }
    }
    //Staff Division
    protected void txtroll_staff_Changed(object sender, EventArgs e)
    {
        string clgcode = string.Empty;
        clgcode = getClgCode();
        btn_print.Visible = false;
        string staffId = Convert.ToString(txtroll_staff.Text.Trim());
        img_stud.ImageUrl = "";
        img_stud.Visible = false;

        if (staffId != "")
        {
            string name = string.Empty;
            string degree = string.Empty;

            // string query = "select staff_name,appl_no,ISNULL( Stream,'') as type from staffmaster where resign<>1 and college_code="+collegecode1+" and staff_code='" + staffId + "'";

            string query = " select appl_id ,h.dept_name,h.dept_code,s.staff_name,s.staff_code  from staffmaster s,staff_appl_master a,hrdept_master h where s.appl_no =a.appl_no and a.dept_code =h.dept_code and s.staff_code ='" + staffId + "' and s.college_Code in('" + clgcode + "') ";

            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");


            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        name = Convert.ToString(ds.Tables[0].Rows[i]["staff_name"]);
                        degree = Convert.ToString(ds.Tables[0].Rows[i]["dept_name"]);
                        //lbltype.Text = Convert.ToString(ds.Tables[0].Rows[i]["type"]);                            
                    }
                }
            }

            txtname_staff.Text = name;
            txtDept_staff.Text = degree;

            img_stud.ImageUrl = "~/Handler/ghStaffFoto.ashx?QSstaff_id=" + staffId;
            img_stud.Visible = true;

            LoadYearSemester();
            Txt_amt.Text = "0.00";
            loadGridStaff();
            bindGrid();

            //string errString= string.Empty;//For error message
            //DataTable dtGridTable = objStaff.returnGridDetails(staffId, out errString);
            //if (dtGridTable.Rows.Count > 0)
            //{
            //}
            //else
            //{
            //    img_stud.Visible = true;
            //    if (errString != string.Empty)
            //    {
            //        lbl_alert.Text = "No Records Found";
            //    }
            //    else
            //    {
            //        lbl_alert.Text = errString;
            //    }
            //}
        }
        else
        {
            txt_totamt.Text = "0.00";
            txt_paidamt.Text = "0.00";
            txt_balamt.Text = "0.00";
            txt_chltaken.Text = "0.00";
            Txt_amt.Text = "0.00";
            img_stud.Visible = false;
            lblstaticrollno.Text = "";

            txtroll_staff.Text = "";
            txtname_staff.Text = "";
            txtDept_staff.Text = "";
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            cbSem_staff.Checked = false;
            cblSem_staff.Items.Clear();
            //ddl_sem.Items.Clear();
            //ddl_semMultiple.Items.Clear();
            txtSem_staff.Text = "";
            img_stud.Visible = false;
            //img_stud.Visible = true;
            //lbl_alert.Text = "Please Enter Staff Id";
        }

        if (rdo_receipt.Checked)
        {
            bindHeaderLedger();
        }
    }
    protected void txtname_staff_Changed(object sender, EventArgs e)
    {
        if (txtname_staff.Text.Trim() != "")
        {
            string staffid = Convert.ToString(txtname_staff.Text);

            if (staffid != "")
            {
                try
                {
                    staffid = staffid.Split('-')[1];
                }
                catch { staffid = ""; }
            }
            txtroll_staff.Text = staffid;
            txtroll_staff_Changed(sender, e);
        }
        else
        {
            txt_totamt.Text = "0.00";
            txt_paidamt.Text = "0.00";
            txt_balamt.Text = "0.00";
            txt_chltaken.Text = "0.00";
            Txt_amt.Text = "0.00";
            img_stud.Visible = false;
            lblstaticrollno.Text = "";

            txtroll_staff.Text = "";
            txtname_staff.Text = "";
            txtDept_staff.Text = "";
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            cbSem_staff.Checked = false;
            cblSem_staff.Items.Clear();
            //ddl_sem.Items.Clear();
            //ddl_semMultiple.Items.Clear();
            txtSem_staff.Text = "";
            img_stud.Visible = false;
            //img_stud.Visible = true;
            //lbl_alert.Text = "Please Enter Staff Id";
        }

        if (rdo_receipt.Checked)
        {
            bindHeaderLedger();
        }
    }
    protected void cbSem_staff_CheckedChanged(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cblSem_staff, cbSem_staff, txtSem_staff, "Semester/Year");
    }
    protected void cblSem_staff_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cblSem_staff, cbSem_staff, txtSem_staff, "Semester/Year");
    }
    protected void ddlSem_staff_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        loadGridStaff();
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetStaffno(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            string query = "";
            WebService ws = new WebService();

            //staff query
            query = " select top 100 staff_code from staffmaster where resign<>1 and staff_code like '" + prefixText + "%' order by staff_code asc";// and college_code=" + collegecodestat + "


            name = ws.Getname(query);
            return name;
        }
        catch { return name; }
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetStaffName(string prefixText)
    {
        WebService ws = new WebService();
        string query = " select top 100 staff_name+'-'+staff_code from staffmaster where resign<>1 and staff_name like '%" + prefixText + "%' and college_code=" + collegecodestat + "  order by staff_name asc";
        DataSet dsN = new DataSet();
        List<string> name = new List<string>();
        try
        {
            name = ws.Getname(query);
        }
        catch { }
        return name;
    }
    protected string getClgCode()
    {
        string clgCode = string.Empty;
        try
        {
            StringBuilder sbClg = new StringBuilder();
            for (int row = 0; row < ddl_college.Items.Count; row++)
            {
                sbClg.Append(Convert.ToString(ddl_college.Items[row].Value) + "','");
            }
            if (sbClg.Length > 0)
            {
                clgCode = Convert.ToString(sbClg.Remove(sbClg.Length - 3, 3));
            }
        }
        catch { }
        return clgCode;
    }
    public void loadGridStaff()
    {
        //for different staff from multiple college
        string clgcode = string.Empty;
        string finYearFk = string.Empty;
        string curfinYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
        if (chklsfyear.Items.Count > 0)
            finYearFk = Convert.ToString(getCblSelectedValue(chklsfyear));
        clgcode = getClgCode();
        //else
        //    clgcode = collegecode1;
        loadScholarship("-1");
        fromScript = false;
        try
        {
            if (rdo_challan.Checked)
            {
                txt_rcptno.Text = generateChallanNo();
                txt_ExcAmt.Visible = false;
                txt_CautionAmt.Visible = false;
                txt_GvtTot.Visible = false;
                chkGridSelectAll.Checked = true;
            }
            else
            {
                txt_rcptno.Text = generateReceiptNo();
                txt_ExcAmt.Visible = true;
                txt_CautionAmt.Visible = false;
                txt_GvtTot.Visible = true;
                chkGridSelectAll.Checked = false;
            }
            lblstaticrollno.Text = "";
            txt_totamt.Text = "";
            txt_paidamt.Text = "";
            txt_balamt.Text = "";
            txt_chltaken.Text = "0.00";

            string roll_no = string.Empty;
            string semyear = string.Empty;
            string appnoNew = string.Empty;
            string degcode = string.Empty;
            roll_no = txtroll_staff.Text.Trim();

            DataTable tbl_Student = new DataTable();
            tbl_Student.Columns.Add("Roll_No");
            tbl_Student.Columns.Add("Reg_No");
            tbl_Student.Columns.Add("Stud_Name");
            tbl_Student.Columns.Add("Degree");
            tbl_Student.Columns.Add("TextVal");
            tbl_Student.Columns.Add("TextCode");
            tbl_Student.Columns.Add("Header_ID");
            tbl_Student.Columns.Add("Header_Name");
            tbl_Student.Columns.Add("Fee_Code");
            tbl_Student.Columns.Add("Fee_Type");
            tbl_Student.Columns.Add("Fee_Amount");
            tbl_Student.Columns.Add("Deduct");
            tbl_Student.Columns.Add("Total");
            tbl_Student.Columns.Add("PaidAmt");
            tbl_Student.Columns.Add("BalAmt");
            tbl_Student.Columns.Add("ToBePaid");
            tbl_Student.Columns.Add("Monthly");
            tbl_Student.Columns.Add("ChlTaken");
            tbl_Student.Columns.Add("Scholar");
            tbl_Student.Columns.Add("CautionDep");
            tbl_Student.Columns.Add("MonwiseMon");
            tbl_Student.Columns.Add("MonwiseYear");
            tbl_Student.Columns.Add("FeeallotPk");
            tbl_Student.Columns.Add("finyearfk");
            tbl_Student.Columns.Add("finyear");
            string selectQuery = "";

            string queryRollApp = " select appl_id ,h.dept_name,h.dept_code,s.staff_name,s.staff_code  from staffmaster s,staff_appl_master a,hrdept_master h where s.appl_no =a.appl_no and a.dept_code =h.dept_code and s.staff_code ='" + roll_no + "' and s.college_Code in('" + clgcode + "') ";

            DataSet dsRollApp = new DataSet();
            dsRollApp = d2.select_method_wo_parameter(queryRollApp, "Text");
            if (dsRollApp.Tables.Count > 0)
            {
                if (dsRollApp.Tables[0].Rows.Count > 0)
                {

                    roll_no = Convert.ToString(dsRollApp.Tables[0].Rows[0]["staff_code"]);
                    appnoNew = Convert.ToString(dsRollApp.Tables[0].Rows[0]["appl_id"]);
                    degcode = Convert.ToString(dsRollApp.Tables[0].Rows[0]["dept_code"]);

                    lblstaticrollno.Text = roll_no;

                    img_stud.ImageUrl = "~/Handler/ghStaffFoto.ashx?QSstaff_id=" + roll_no;
                    img_stud.Visible = true;
                }
                else
                {
                    roll_no = "";
                    appnoNew = "";
                    lblstaticrollno.Text = "";
                    img_stud.Visible = false;
                }
            }
            else
            {
                roll_no = "";
                lblstaticrollno.Text = "";
                img_stud.Visible = false;
            }


            selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,LedgerName,Priority,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)  as DeductAmount,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(TotalAmount,0)-isnull(PaidAmount,0)  as BalAmount,( select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where a.finyearfk=fm.finyearpk )as finyear,a.finyearfk FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK  and l.LedgerMode=0 and MemType=2 AND A.App_No = " + appnoNew + " and isnull(istransfer,'0')='0' and a.finyearfk in('" + finYearFk + "')";// and T.TextCode in('" + semyear + "')

            string chlnTakenQ = " select Count(distinct(ChallanNo)) from FT_ChallanDet where App_No=" + appnoNew + "";// and FeeCategory in ('" + semyear + "')

            if (cb_selcthd.Checked)
            {
                string headercode = GetSelectedItemsValue(cbl_grpheader);

                if (rbl_headerselect.SelectedIndex == 0)
                {
                    headercode = GetSelectedItemsValueAsString(cbl_grpheader);

                    //Group Header
                    selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,Priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)   as DeductAmount ,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(TotalAmount,0)-isnull(PaidAmount,0)  as BalAmount,ChlGroupHeader ( select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where a.finyearfk=fm.finyearpk )as finyear,a.finyearfk FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK  and h.headerpk = s.headerfk  and l.LedgerMode=0 and MemType=2   and ChlGroupHeader in('" + headercode + "') and isnull(istransfer,'0')='0' ";//and T.TextCode in('" + semyear + "')
                    if (rdo_receipt.Checked || rdo_sngle.Checked)
                    {
                        selectQuery += " AND A.App_No = " + appnoNew + " ";
                    }

                    if (lbltype.Text != "")
                    {
                        selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                    }

                }
                else if (rbl_headerselect.SelectedIndex == 1)
                {
                    //Header
                    selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                    chlnTakenQ += " and headerfk in (" + headercode + ") ";
                }
                else
                {
                    //Ledger
                    selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                    chlnTakenQ += "  and LedgerFK in (" + headercode + ")";
                }

            }
            if (ShowBalOnly())
            {
                selectQuery += " and isnull(BalAmount,0)>0 ";
            }
            selectQuery += "  order by case when priority is null then 1 else 0 end, priority,a.finyearfk asc";

            DataSet ds_stud = new DataSet();
            ds_stud.Clear();
            ds_stud = d2.select_method_wo_parameter(selectQuery, "Text");
            if (ds_stud.Tables.Count > 0)
            {
                if (ds_stud.Tables[0].Rows.Count > 0)
                {

                    string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
                    string excessamtQ = d2.GetFunction("select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt from FT_ExcessDet WHERE  App_No=" + appnoNew + " ");
                    string excessTypeQ = "select LinkValue from New_InsSettings where LinkName='ExcessFeesType' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
                    int excessTypeValue = 0;
                    try { excessTypeValue = Convert.ToInt32(Convert.ToString(d2.GetFunction(excessTypeQ))); }
                    catch { }


                    double excessamtValue = 0;
                    double.TryParse(excessamtQ, out excessamtValue);
                    double fineAmount = 0;
                    for (i = 0; i < ds_stud.Tables[0].Rows.Count; i++)
                    {
                        DataRow dr_Student = tbl_Student.NewRow();

                        //dr_Student["Roll_No"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Roll_No"]);
                        //dr_Student["Reg_No"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Reg_No"]);
                        // dr_Student["Stud_Name"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Stud_Name"]);
                        // dr_Student["Degree"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Degree"]);
                        dr_Student["TextVal"] = "0"; // Convert.ToString(ds_stud.Tables[0].Rows[i]["TextVal"]);
                        dr_Student["TextCode"] = "0"; // Convert.ToString(ds_stud.Tables[0].Rows[i]["TextCode"]);
                        dr_Student["Header_ID"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]);
                        dr_Student["Header_Name"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderName"]);
                        dr_Student["Fee_Code"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]);
                        dr_Student["Fee_Type"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerName"]) + retQuantity(appnoNew, Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]), "2", "0");
                        dr_Student["ChlTaken"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["ChlTakAmt"]);
                        string finyearfk = Convert.ToString(ds_stud.Tables[0].Rows[i]["finyearfk"]);
                        string finyear = Convert.ToString(ds_stud.Tables[0].Rows[i]["finyear"]);
                        //appnoNew = Convert.ToString(ds_stud.Tables[0].Rows[i]["App_No"]);


                        double feeamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["FeeAmount"]);
                        double deductamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["DeductAmount"]);
                        double totamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["TotalAmount"]);
                        double paid = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["PaidAmount"]);
                        double balamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["BalAmount"]);
                        double curExcess = 0;

                        if (cb_exfees.Checked && excessTypeValue == 1)
                        {
                            //Common Excess
                            if (totamt >= paid + excessamtValue)
                            {
                                curExcess = excessamtValue;
                                balamt = balamt - (curExcess);
                                excessamtValue = 0;
                                dr_Student["Monthly"] = curExcess;

                            }
                            else
                            {
                                curExcess = totamt - paid;
                                excessamtValue -= curExcess;
                                balamt = balamt - (curExcess);
                                dr_Student["Monthly"] = curExcess;
                            }
                        }
                        else if (cb_exfees.Checked && excessTypeValue == 2)
                        {
                            //Ledgerwise Excess
                            string ledUpQ = "select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt from FT_ExcessLedgerDet where HeaderFK ='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]) + "' and LedgerFK ='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]) + "'";

                            double excessAmtval = 0;
                            try
                            {
                                excessAmtval = Convert.ToDouble(d2.GetFunction(ledUpQ));
                            }
                            catch { }
                            if (totamt >= paid + excessAmtval)
                            {
                                curExcess = excessAmtval;
                                balamt = balamt - (curExcess);
                                dr_Student["Monthly"] = curExcess;

                            }
                            else
                            {
                                curExcess = totamt - paid;
                                balamt = balamt - (curExcess);
                                dr_Student["Monthly"] = curExcess;
                            }

                        }
                        else
                        {
                            dr_Student["Monthly"] = "0";
                        }
                        dr_Student["ToBePaid"] = "0";
                        dr_Student["Fee_Amount"] = feeamt;
                        dr_Student["Deduct"] = deductamt;
                        dr_Student["Total"] = totamt;
                        dr_Student["PaidAmt"] = paid;
                        dr_Student["BalAmt"] = balamt;
                        // dr_Student["finyearfk"] = "&";
                        dr_Student["finyearfk"] = finyearfk;
                        dr_Student["finyear"] = finyear;
                        tbl_Student.Rows.Add(dr_Student);

                        #region Fine Calculation
                        if (balamt > 0)
                        {
                            string fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName,( select (convert(varchar(10),finyearstart,103)+'-'+convert(varchar(10),finyearend,103)) as finyearfk from fm_finyearmaster fm where f.finyearfk=fm.finyearpk)as finyear,f.finyearfk,Stud_FineSettingType from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "' and H.Headerpk ='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]) + "' and L.LedgerPK='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]) + "'";// and FeeCatgory in ('" + Convert.ToString(ds_stud.Tables[0].Rows[i]["TextCode"]) + "'

                            DataSet dsFine = new DataSet();
                            dsFine = d2.select_method_wo_parameter(fineQ, "Text");
                            if (dsFine.Tables.Count > 0)
                            {
                                if (dsFine.Tables[0].Rows.Count > 0)
                                {
                                    for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                                    {
                                        string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                                        DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                                        DateTime curDate = DateTime.Now;
                                        if (fineType == "1")
                                        {
                                            fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                        }
                                        else if (fineType == "2")
                                        {
                                            for (; due <= curDate; due = due.AddDays(1))
                                            {
                                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                            }
                                        }
                                        else if (fineType == "3")
                                        {
                                            TimeSpan td = curDate - due;
                                            int difference = td.Days;
                                            int fromday = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["FromDay"]);
                                            int to_day = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["ToDay"]);

                                            if (difference <= to_day && difference >= fromday)
                                            {
                                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                            }
                                        }

                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    #region Fine Adjustment
                    Dictionary<string, double> dtfintFeecat = new Dictionary<string, double>();
                    Dictionary<string, string> dtfeecat = new Dictionary<string, string>();
                    Dictionary<string, string> dtfinfk = new Dictionary<string, string>();
                    string fineLegHedQ = d2.GetFunction(" select Linkvalue from New_InsSettings where LinkName='FineLedgerValue' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                    if (fineLegHedQ != "0" && fineAmount > 0 && dtfintFeecat.Count > 0)
                    {
                        string fineHdrId = fineLegHedQ.Split(',')[0];
                        string fineLgrId = fineLegHedQ.Split(',')[1];
                        string fineHdrName = d2.GetFunction(" select headername from fm_headermaster where headerpk=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                        string fineLgrName = d2.GetFunction("  select ledgername from fm_ledgermaster where ledgerpk=" + fineLgrId + " and HeaderFK=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                        fineAmount = 0;
                        foreach (KeyValuePair<string, double> fine in dtfintFeecat)
                        {
                            string sbfine = string.Empty;
                            string feestr = string.Empty;
                            string finfks = string.Empty;
                            sbfine = Convert.ToString(fine.Key + "$" + fine.Value);
                            fineAmount = fine.Value;
                            if (dtfeecat.ContainsKey(fine.Key))
                                feestr = Convert.ToString(dtfeecat[fine.Key]);
                            if (dtfinfk.ContainsKey(fine.Key))
                                finfks = Convert.ToString(dtfinfk[fine.Key]);
                            string finyears = d2.GetFunction("select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where finyearpk='" + finfks + "'");
                            DataRow drFine = tbl_Student.NewRow();
                            drFine["Header_ID"] = fineHdrId;
                            drFine["Header_Name"] = fineHdrName;
                            drFine["Fee_Code"] = fineLgrId;
                            drFine["Fee_Type"] = fineLgrName;
                            drFine["ChlTaken"] = "0";
                            drFine["TextVal"] = "FINE";
                            drFine["TextCode"] = "-1";
                            drFine["Fee_Amount"] = fineAmount;
                            drFine["Deduct"] = "0";
                            drFine["Total"] = fineAmount;
                            drFine["PaidAmt"] = "0";
                            drFine["BalAmt"] = fineAmount;
                            drFine["ToBePaid"] = "0";
                            drFine["finyear"] = finyears;
                            tbl_Student.Rows.Add(drFine);
                        }
                    #endregion
                    }


                    if (tbl_Student.Rows.Count > 0)
                    {
                        //  txt_exfees.Text = d2.GetFunction("select distinct isnull(BalanceAmt,0) from FT_ExcessDet where App_No='" + appnoNew + "'");
                        txt_chltakn.Text = d2.GetFunction(chlnTakenQ);

                        grid_Details.DataSource = tbl_Student;
                        grid_Details.DataBind();
                        grid_Details.Visible = true;

                        if (rdo_receipt.Checked)
                        {
                            btn_print.Visible = false;
                        }
                        else
                        {
                            if (rdo_challan.Checked && (rdo_sngle.Checked || (rdo_multi.Checked && txt_totnoofstudents.Text != "")))
                            {
                                btn_print.Visible = true;
                            }
                            else
                            {
                                btn_print.Visible = false;
                            }
                        }

                    }
                    else
                    {
                        grid_Details.DataSource = null;
                        grid_Details.DataBind();
                        grid_Details.Visible = false;
                        imgAlert.Visible = true;
                        //this.Form.DefaultButton = "btn_alertclose";
                        lbl_alert.Text = "Please Add Fees";
                        //img_stud.ImageUrl = "";
                        //img_stud.Visible = false;
                        btn_print.Visible = false;
                    }
                }
                else
                {
                    grid_Details.DataSource = null;
                    grid_Details.DataBind();
                    grid_Details.Visible = false;
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Add Fees";
                    //img_stud.ImageUrl = "";
                    //img_stud.Visible = false;
                    btn_print.Visible = false;
                }
                Session["appNo"] = appnoNew;

            }
            //Added by saranya on 24March2018

            if (!string.IsNullOrEmpty(Txt_amt.Text) && Txt_amt.Text.Trim() != "0")
            {
            }
            else
            {
                Txt_amt.Text = "";
            }
        }
        catch (Exception ex)
        {
            // d2.sendErrorMail(ex, collegecode1, "ChallanReceipt");
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            grid_Details.Visible = false;
            imgAlert.Visible = true;
            //this.Form.DefaultButton = "btn_alertclose";
            lbl_alert.Text = "No Records Found";
            //img_stud.ImageUrl = "";
            //img_stud.Visible = false;
            btn_print.Visible = false;
            Session["appNo"] = "";
        }
        if (rdo_challan.Checked && rdo_multi.Checked)
        {
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            grid_Details.Visible = false;
        }


    }
    protected void btnGO_staff_Click(object sender, EventArgs e)
    {
        bindGrid();
        try
        {
            if (rdo_receipt.Checked)
            {
                double partamt = 0;
                if (Txt_amt.Text.Trim() != "")
                {
                    partamt = Convert.ToDouble(Txt_amt.Text.Trim());
                    excessAmt = Convert.ToDouble(Txt_amt.Text.Trim());
                }
                loadGridStaff();
            }
            else
            {
                if (rdo_challan.Checked && rdo_sngle.Checked)
                {
                    loadGridStaff();
                    string chalamt = Convert.ToString(txt_chltaken.Text.Trim());
                    if (chalamt == "")
                    {
                        chalamt = "0";
                    }
                    string bal = Convert.ToString(txt_balamt.Text.Trim());
                    if (bal == "")
                    {
                        bal = "0";
                    }
                    double chamt = Convert.ToDouble(chalamt);
                    double balamt = Convert.ToDouble(bal);

                    if (balamt > chamt)
                    {

                    }
                    else
                    {
                        if (balamt == chamt && balamt != 0)
                        {
                            Txt_amt.Text = "";
                            lbl_alert.Text = "Challan Already Taken";
                            imgAlert.Visible = true;
                            //this.Form.DefaultButton = "btn_alertclose";
                        }
                    }
                }
            }
            if (rdo_receipt.Checked)
            {
                bindHeaderLedger();
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    //Lookup Staff
    protected void btn_staffLook_Click(object sender, EventArgs e)
    {
        div_staffLook.Visible = true;
        ddlsearch1_OnSelectedIndexChanged(sender, e);
        btn_staffOK.Visible = false;
        btn_exitstaff.Visible = false;
        Fpspread2.Visible = false;
        lbl_errormsgstaff.Visible = false;
    }
    protected void btn_staffOK_Click(object sender, EventArgs e)
    {
        try
        {

            string actrow = "";
            string actcol = "";
            actrow = Fpspread2.ActiveSheetView.ActiveRow.ToString();
            actcol = Fpspread2.ActiveSheetView.ActiveColumn.ToString();
            if (actrow.Trim() != "" && actrow.Trim() != "-1")
            {
                string staff = Convert.ToString(Fpspread2.Sheets[0].Cells[Convert.ToInt32(actrow), 2].Text);
                string appno = Convert.ToString(Fpspread2.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Tag);
                string staffcode = Convert.ToString(Fpspread2.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Text);
                txtroll_staff.Text = staffcode;
                txtroll_staff_Changed(sender, e);

            }
            div_staffLook.Visible = false;
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    protected void btn_exitstaff_Click(object sender, EventArgs e)
    {
        div_staffLook.Visible = false;
    }
    protected void ddlsearch1_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        txtsearch1.Text = "";
        txtsearch1c.Text = "";
        txtsearch1c.Visible = false;
        txtsearch1.Visible = false;
        if (ddlsearch1.SelectedIndex == 0)
        {
            txtsearch1.Visible = true;
            Label1.Text = "Search By Name";
        }
        else
        {
            txtsearch1c.Visible = true;
            Label1.Text = "Search By Code";
        }
    }
    protected void Fpspread2staff_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            string actrow = Fpspread1.Sheets[0].ActiveRow.ToString();
            string actcol = Fpspread1.Sheets[0].ActiveColumn.ToString();
            if (actrow.Trim() == "0" && actcol.Trim() == "1")
            {
                if (Fpspread1.Sheets[0].RowCount > 0)
                {
                    int checkval = Convert.ToInt32(Fpspread1.Sheets[0].Cells[0, 1].Value);
                    if (checkval == 0)
                    {
                        for (int i = 1; i < Fpspread1.Sheets[0].RowCount; i++)
                        {
                            Fpspread1.Sheets[0].Cells[i, 1].Value = 1;
                        }
                    }
                    if (checkval == 1)
                    {
                        for (int i = 1; i < Fpspread1.Sheets[0].RowCount; i++)
                        {
                            Fpspread1.Sheets[0].Cells[i, 1].Value = 0;
                        }
                    }
                }
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    protected void btn_go2Staff_Click(object sender, EventArgs e)
    {
        try
        {
            string clgcode = string.Empty;
            clgcode = getClgCode();
            div_staffLook.Visible = true;
            if (collegecode1 != null)
            {
                string selq = "";
                if (txtsearch1.Text.Trim() != "")
                {
                    string sname = string.Empty;
                    try
                    {
                        sname = txtsearch1.Text.Trim().Split('-')[0];
                    }
                    catch { sname = txtsearch1.Text.Trim(); }
                    selq = "select appl_id ,h.dept_name,s.staff_name,s.staff_code  from staffmaster s,staff_appl_master a,hrdept_master h where s.appl_no =a.appl_no and a.dept_code =h.dept_code  and s.college_code in('" + clgcode + "') and staff_name like '" + Convert.ToString(sname) + "%'";
                }
                else if (txtsearch1c.Text.Trim() != "")
                {
                    selq = "select appl_id ,h.dept_name,s.staff_name,s.staff_code  from staffmaster s,staff_appl_master a,hrdept_master h where s.appl_no =a.appl_no and a.dept_code =h.dept_code  and s.college_code in('" + clgcode + "') and staff_code='" + Convert.ToString(txtsearch1c.Text) + "'";
                }
                else
                {
                    selq = "select appl_id ,h.dept_name,s.staff_name,s.staff_code  from staffmaster s,staff_appl_master a,hrdept_master h where s.appl_no =a.appl_no and a.dept_code =h.dept_code  and s.college_code in('" + clgcode + "') order by PrintPriority";
                }
                ds.Clear();
                ds = d2.select_method_wo_parameter(selq, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    Fpspread2.Sheets[0].RowCount = 0;
                    Fpspread2.Sheets[0].ColumnCount = 0;
                    Fpspread2.CommandBar.Visible = false;
                    Fpspread2.Sheets[0].AutoPostBack = false;
                    Fpspread2.Sheets[0].ColumnHeader.RowCount = 1;
                    Fpspread2.Sheets[0].RowHeader.Visible = false;
                    Fpspread2.Sheets[0].ColumnCount = 3;
                    Fpspread2.Sheets[0].Columns[0].Width = 60;
                    Fpspread2.Sheets[0].Columns[1].Width = 170;
                    Fpspread2.Sheets[0].Columns[2].Width = 360;

                    FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                    darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
                    darkstyle.ForeColor = Color.White;
                    Fpspread2.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;

                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Staff Code";
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;

                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Staff Name";
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                    Fpspread2.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;

                    FarPoint.Web.Spread.TextCellType chkall = new FarPoint.Web.Spread.TextCellType();


                    for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                    {
                        Fpspread2.Sheets[0].RowCount++;
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(row + 1);
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 1].CellType = chkall;
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(ds.Tables[0].Rows[row]["staff_code"]);

                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(ds.Tables[0].Rows[row]["appl_id"]);
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[row]["staff_name"]);
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                        Fpspread2.Sheets[0].Cells[Fpspread2.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                    }
                    Fpspread2.Visible = true;
                    // div2.Visible = true;
                    lbl_errormsgstaff.Visible = false;
                    Fpspread2.Sheets[0].PageSize = Fpspread2.Sheets[0].RowCount;
                    Fpspread2.Width = 620;
                    Fpspread2.Height = 210;
                    if (Fpspread2.Sheets[0].RowCount > 0)
                    {
                        btn_staffOK.Visible = true;
                        btn_exitstaff.Visible = true;
                    }
                    else
                    {
                        btn_staffOK.Visible = false;
                        btn_exitstaff.Visible = false;
                    }
                }
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    //Vendor Division
    protected void txtname_vendor_Changed(object sender, EventArgs e)
    {
        btn_print.Visible = false;
        if (txtroll_vendor.Text.Trim() == "")
        {
            txtname_vendor.Text = "";
        }
        string staffId = Convert.ToString(txtname_vendor.Text.Trim());
        try
        {
            staffId = staffId.Split('-')[2];
        }
        catch { staffId = ""; }
        img_stud.ImageUrl = "";
        img_stud.Visible = false;

        if (staffId != "")
        {
            string name = string.Empty;
            string degree = string.Empty;

            string query = " SELECT VendorContactPK, VenContactType, VenContactName, VenContactDesig, VenContactDept, VendorPhoneNo, VendorExtNo, VendorMobileNo, VendorEmail,VendorFK FROM IM_VendorContactMaster WHERE    VendorContactPK = '" + staffId + "' ";

            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");


            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        name = Convert.ToString(ds.Tables[0].Rows[i]["VenContactName"]);
                        degree = Convert.ToString(ds.Tables[0].Rows[i]["VenContactDesig"]);
                        //lbltype.Text = Convert.ToString(ds.Tables[0].Rows[i]["type"]);                            
                    }
                }
            }

            // txtname_staff.Text = name;
            txtDept_vendor.Text = degree;

            //img_stud.ImageUrl = "~/Handler/ghStaffFoto.ashx?QSstaff_id=" + staffId;
            //img_stud.Visible = true;

            LoadYearSemester();
            Txt_amt.Text = "0.00";
            loadGridVendor();
            bindGrid();

        }
        else
        {
            txt_totamt.Text = "0.00";
            txt_paidamt.Text = "0.00";
            txt_balamt.Text = "0.00";
            txt_chltaken.Text = "0.00";
            Txt_amt.Text = "0.00";
            img_stud.Visible = false;
            lblstaticrollno.Text = "";

            //txtroll_vendor.Text = "";
            txtname_vendor.Text = "";
            txtDept_vendor.Text = "";
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            cbSem_vendor.Checked = false;
            cblSem_vendor.Items.Clear();
            //ddl_sem.Items.Clear();
            //ddl_semMultiple.Items.Clear();
            txtSem_vendor.Text = "";
            img_stud.Visible = false;
            //img_stud.Visible = true;
            //lbl_alert.Text = "Please Enter Staff Id";
        }
        imgAlert.Visible = false;
        if (rdo_receipt.Checked)
        {
            bindHeaderLedger();
        }
    }
    protected void txtroll_vendor_Changed(object sender, EventArgs e)
    {
        if (txtroll_vendor.Text.Trim() != "")
        {
            // string staffid = Convert.ToString(txtname_staff.Text);

            // if (staffid != "")
            // {
            //     try
            //     {
            //         staffid = staffid.Split('-')[1];
            //     }
            //     catch { staffid = ""; }
            // }
            //// txtroll_staff.Text = staffid;
            txtname_vendor_Changed(sender, e);
            imgAlert.Visible = false;
        }
        else
        {
            txt_totamt.Text = "0.00";
            txt_paidamt.Text = "0.00";
            txt_balamt.Text = "0.00";
            txt_chltaken.Text = "0.00";
            Txt_amt.Text = "0.00";
            img_stud.Visible = false;
            lblstaticrollno.Text = "";

            // txtroll_vendor.Text = "";
            txtname_vendor.Text = "";
            txtDept_vendor.Text = "";
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            cbSem_vendor.Checked = false;
            cblSem_vendor.Items.Clear();
            //ddl_sem.Items.Clear();
            //ddl_semMultiple.Items.Clear();
            txtSem_vendor.Text = "";

            //img_stud.Visible = true;
            //lbl_alert.Text = "Please Enter Staff Id";
        }

        if (rdo_receipt.Checked)
        {
            bindHeaderLedger();
        }
    }
    protected void cbSem_vendor_CheckedChanged(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cblSem_vendor, cbSem_vendor, txtSem_vendor, "Semester/Year");
    }
    protected void cblSem_vendor_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cblSem_vendor, cbSem_vendor, txtSem_vendor, "Semester/Year");
    }
    protected void ddlSem_vendor_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        loadGridVendor();
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetVendorno(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            string query = "";
            WebService ws = new WebService();

            //staff query
            query = " select VendorCompName+'-'+VendorCode+'-'+Convert(varchar(10),vendorpk)  from CO_VendorMaster where VendorType =1";

            name = ws.Getname(query);
            return name;
        }
        catch { return name; }
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetVendorName(string prefixText)
    {
        WebService ws = new WebService();
        string query = " select (VenContactName+'-'+VenContactDesig+'-'+ CONVERT(varchar(10), VendorContactPK)) as contactname from IM_VendorContactMaster where VendorFK ='" + vencontcode + "' ";
        DataSet dsN = new DataSet();
        List<string> name = new List<string>();
        try
        {
            name = ws.Getname(query);
        }
        catch { }
        return name;
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetVendorno1(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            string query = "";
            WebService ws = new WebService();

            //staff query
            query = " select VendorCode  from CO_VendorMaster where VendorType =1  order by VendorCode asc";

            name = ws.Getname(query);
            return name;
        }
        catch { return name; }
    }
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetVendorName1(string prefixText)
    {
        WebService ws = new WebService();
        string query = " select VendorCompName  from CO_VendorMaster where VendorType =1 order by VendorCompName asc";
        DataSet dsN = new DataSet();
        List<string> name = new List<string>();
        try
        {
            name = ws.Getname(query);
        }
        catch { }
        return name;
    }
    public void loadGridVendor()
    {
        string finYearFk = string.Empty;
        string curfinYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
        if (chklsfyear.Items.Count > 0)
            finYearFk = Convert.ToString(getCblSelectedValue(chklsfyear));
        loadScholarship("-1");
        fromScript = false;
        try
        {
            if (rdo_challan.Checked)
            {
                txt_rcptno.Text = generateChallanNo();
                txt_ExcAmt.Visible = false;
                txt_CautionAmt.Visible = false;
                txt_GvtTot.Visible = false;
                chkGridSelectAll.Checked = true;
            }
            else
            {
                txt_rcptno.Text = generateReceiptNo();
                txt_ExcAmt.Visible = true;
                txt_CautionAmt.Visible = false;
                txt_GvtTot.Visible = true;
                chkGridSelectAll.Checked = false;
            }
            lblstaticrollno.Text = "";
            txt_totamt.Text = "";
            txt_paidamt.Text = "";
            txt_balamt.Text = "";
            txt_chltaken.Text = "0.00";

            string roll_no = string.Empty;
            string semyear = string.Empty;
            string appnoNew = string.Empty;
            string degcode = string.Empty;
            roll_no = txtname_vendor.Text.Trim();

            try
            {
                roll_no = roll_no.Split('-')[2];
            }
            catch { roll_no = "-1"; }

            DataTable tbl_Student = new DataTable();
            tbl_Student.Columns.Add("Roll_No");
            tbl_Student.Columns.Add("Reg_No");
            tbl_Student.Columns.Add("Stud_Name");
            tbl_Student.Columns.Add("Degree");
            tbl_Student.Columns.Add("TextVal");
            tbl_Student.Columns.Add("TextCode");
            tbl_Student.Columns.Add("Header_ID");
            tbl_Student.Columns.Add("Header_Name");
            tbl_Student.Columns.Add("Fee_Code");
            tbl_Student.Columns.Add("Fee_Type");
            tbl_Student.Columns.Add("Fee_Amount");
            tbl_Student.Columns.Add("Deduct");
            tbl_Student.Columns.Add("Total");
            tbl_Student.Columns.Add("PaidAmt");
            tbl_Student.Columns.Add("BalAmt");
            tbl_Student.Columns.Add("ToBePaid");
            tbl_Student.Columns.Add("Monthly");
            tbl_Student.Columns.Add("ChlTaken");
            tbl_Student.Columns.Add("Scholar");
            tbl_Student.Columns.Add("CautionDep");
            tbl_Student.Columns.Add("MonwiseMon");
            tbl_Student.Columns.Add("MonwiseYear");
            tbl_Student.Columns.Add("FeeallotPk");
            tbl_Student.Columns.Add("finyearfk");
            tbl_Student.Columns.Add("finyear");
            string selectQuery = "";

            string queryRollApp = " SELECT VendorContactPK, VenContactType, VenContactName, VenContactDesig, VenContactDept, VendorPhoneNo, VendorExtNo, VendorMobileNo, VendorEmail,VendorFK FROM IM_VendorContactMaster WHERE    VendorContactPK = '" + roll_no + "' ";

            DataSet dsRollApp = new DataSet();
            dsRollApp = d2.select_method_wo_parameter(queryRollApp, "Text");
            if (dsRollApp.Tables.Count > 0)
            {
                if (dsRollApp.Tables[0].Rows.Count > 0)
                {

                    roll_no = Convert.ToString(dsRollApp.Tables[0].Rows[0]["VendorContactPK"]);
                    appnoNew = Convert.ToString(dsRollApp.Tables[0].Rows[0]["VendorContactPK"]);
                    degcode = Convert.ToString(dsRollApp.Tables[0].Rows[0]["VenContactDept"]);

                    lblstaticrollno.Text = roll_no;

                    //img_stud.ImageUrl = "~/Handler/ghStaffFoto.ashx?QSstaff_id=" + roll_no;
                    // img_stud.Visible = true;
                }
                else
                {
                    roll_no = "";
                    appnoNew = "";
                    lblstaticrollno.Text = "";
                    img_stud.Visible = false;
                }
            }
            else
            {
                roll_no = "";
                lblstaticrollno.Text = "";
                img_stud.Visible = false;
            }



            selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,LedgerName,Priority,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)  as DeductAmount,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(TotalAmount,0)-isnull(PaidAmount,0)  as BalAmount,( select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where a.finyearfk=fm.finyearpk )as finyear,a.finyearfk FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK  and l.LedgerMode=0 and MemType=3  AND A.App_No = " + appnoNew + " and isnull(istransfer,'0')='0'and a.finyearfk in('" + finYearFk + "')";// and T.TextCode in('" + semyear + "')

            string chlnTakenQ = " select Count(distinct(ChallanNo)) from FT_ChallanDet where App_No=" + appnoNew + "";// and FeeCategory in ('" + semyear + "')

            if (cb_selcthd.Checked)
            {
                string headercode = GetSelectedItemsValue(cbl_grpheader);


                if (rbl_headerselect.SelectedIndex == 0)
                {
                    headercode = headercode = GetSelectedItemsValueAsString(cbl_grpheader);

                    //Group Header
                    selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,Priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)   as DeductAmount ,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(TotalAmount,0)-isnull(PaidAmount,0)  as BalAmount,ChlGroupHeader,( select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where a.finyearfk=fm.finyearpk )as finyear,a.finyearfk FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK  and h.headerpk = s.headerfk  and l.LedgerMode=0 and MemType=3   and ChlGroupHeader in('" + headercode + "') and isnull(istransfer,'0')='0' and a.finyearfk in('" + finYearFk + "')";// and T.TextCode in('" + semyear + "')
                    if (rdo_receipt.Checked || rdo_sngle.Checked)
                    {
                        selectQuery += " AND A.App_No = " + appnoNew + " ";
                    }

                    if (lbltype.Text != "")
                    {
                        selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                    }

                }
                else if (rbl_headerselect.SelectedIndex == 1)
                {
                    //Header
                    selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                    chlnTakenQ += " and headerfk in (" + headercode + ") ";
                }
                else
                {
                    //Ledger
                    selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                    chlnTakenQ += "  and LedgerFK in (" + headercode + ")";
                }

            }
            if (ShowBalOnly())
            {
                selectQuery += " and isnull(BalAmount,0)>0 ";
            }
            selectQuery += "  order by case when priority is null then 1 else 0 end, priority,a.finyearfk asc";

            DataSet ds_stud = new DataSet();
            ds_stud.Clear();
            ds_stud = d2.select_method_wo_parameter(selectQuery, "Text");
            if (ds_stud.Tables.Count > 0)
            {
                if (ds_stud.Tables[0].Rows.Count > 0)
                {

                    string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
                    string excessamtQ = d2.GetFunction("select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt from FT_ExcessDet WHERE  App_No=" + appnoNew + " ");
                    string excessTypeQ = "select LinkValue from New_InsSettings where LinkName='ExcessFeesType' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
                    int excessTypeValue = 0;
                    try { excessTypeValue = Convert.ToInt32(Convert.ToString(d2.GetFunction(excessTypeQ))); }
                    catch { }


                    double excessamtValue = 0;
                    double.TryParse(excessamtQ, out excessamtValue);
                    double fineAmount = 0;
                    for (i = 0; i < ds_stud.Tables[0].Rows.Count; i++)
                    {
                        DataRow dr_Student = tbl_Student.NewRow();

                        //dr_Student["Roll_No"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Roll_No"]);
                        //dr_Student["Reg_No"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Reg_No"]);
                        // dr_Student["Stud_Name"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Stud_Name"]);
                        // dr_Student["Degree"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Degree"]);
                        dr_Student["TextVal"] = "0";// Convert.ToString(ds_stud.Tables[0].Rows[i]["TextVal"]);
                        dr_Student["TextCode"] = "0";// Convert.ToString(ds_stud.Tables[0].Rows[i]["TextCode"]);
                        dr_Student["Header_ID"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]);
                        dr_Student["Header_Name"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderName"]);
                        dr_Student["Fee_Code"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]);
                        dr_Student["Fee_Type"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerName"]) + retQuantity(appnoNew, Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]), "3", "0");
                        dr_Student["ChlTaken"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["ChlTakAmt"]);
                        string finyearfk = Convert.ToString(ds_stud.Tables[0].Rows[i]["finyearfk"]);
                        string finyear = Convert.ToString(ds_stud.Tables[0].Rows[i]["finyear"]);
                        //appnoNew = Convert.ToString(ds_stud.Tables[0].Rows[i]["App_No"]);

                        double feeamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["FeeAmount"]);
                        double deductamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["DeductAmount"]);
                        double totamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["TotalAmount"]);
                        double paid = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["PaidAmount"]);
                        double balamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["BalAmount"]);
                        double curExcess = 0;

                        if (cb_exfees.Checked && excessTypeValue == 1)
                        {
                            //Common Excess
                            if (totamt >= paid + excessamtValue)
                            {
                                curExcess = excessamtValue;
                                balamt = balamt - (curExcess);
                                excessamtValue = 0;
                                dr_Student["Monthly"] = curExcess;

                            }
                            else
                            {
                                curExcess = totamt - paid;
                                excessamtValue -= curExcess;
                                balamt = balamt - (curExcess);
                                dr_Student["Monthly"] = curExcess;
                            }
                        }
                        else if (cb_exfees.Checked && excessTypeValue == 2)
                        {
                            //Ledgerwise Excess
                            string ledUpQ = "select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt from FT_ExcessLedgerDet where HeaderFK ='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]) + "' and LedgerFK ='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]) + "'";

                            double excessAmtval = 0;
                            try
                            {
                                excessAmtval = Convert.ToDouble(d2.GetFunction(ledUpQ));
                            }
                            catch { }
                            if (totamt >= paid + excessAmtval)
                            {
                                curExcess = excessAmtval;
                                balamt = balamt - (curExcess);
                                dr_Student["Monthly"] = curExcess;

                            }
                            else
                            {
                                curExcess = totamt - paid;
                                balamt = balamt - (curExcess);
                                dr_Student["Monthly"] = curExcess;
                            }

                        }
                        else
                        {
                            dr_Student["Monthly"] = "0";
                        }
                        dr_Student["ToBePaid"] = "0";
                        dr_Student["Fee_Amount"] = feeamt;
                        dr_Student["Deduct"] = deductamt;
                        dr_Student["Total"] = totamt;
                        dr_Student["PaidAmt"] = paid;
                        dr_Student["BalAmt"] = balamt;
                        //dr_Student["finyearfk"] = "&";
                        dr_Student["finyearfk"] = finyearfk;
                        dr_Student["finyear"] = finyear;
                        tbl_Student.Rows.Add(dr_Student);

                        #region Fine Calculation
                        if (balamt > 0)
                        {
                            string fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName,( select (convert(varchar(10),finyearstart,103)+'-'+convert(varchar(10),finyearend,103)) as finyearfk from fm_finyearmaster fm where f.finyearfk=fm.finyearpk)as finyear,f.finyearfk,Stud_FineSettingType from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "' and H.Headerpk ='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]) + "' and L.LedgerPK='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]) + "'and f.finyearfk in('" + finyearfk + "') ";//and FeeCatgory in ('" + Convert.ToString(ds_stud.Tables[0].Rows[i]["TextCode"]) + "'

                            DataSet dsFine = new DataSet();
                            dsFine = d2.select_method_wo_parameter(fineQ, "Text");
                            if (dsFine.Tables.Count > 0)
                            {
                                if (dsFine.Tables[0].Rows.Count > 0)
                                {
                                    for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                                    {
                                        string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                                        DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                                        DateTime curDate = DateTime.Now;
                                        if (fineType == "1")
                                        {
                                            fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                        }
                                        else if (fineType == "2")
                                        {
                                            for (; due <= curDate; due = due.AddDays(1))
                                            {
                                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                            }
                                        }
                                        else if (fineType == "3")
                                        {
                                            TimeSpan td = curDate - due;
                                            int difference = td.Days;
                                            int fromday = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["FromDay"]);
                                            int to_day = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["ToDay"]);

                                            if (difference <= to_day && difference >= fromday)
                                            {
                                                fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                            }
                                        }

                                    }
                                }
                            }
                        }
                        #endregion
                    }
                    #region Fine Adjustment
                    Dictionary<string, double> dtfintFeecat = new Dictionary<string, double>();
                    Dictionary<string, string> dtfeecat = new Dictionary<string, string>();
                    Dictionary<string, string> dtfinfk = new Dictionary<string, string>();
                    string fineLegHedQ = d2.GetFunction(" select Linkvalue from New_InsSettings where LinkName='FineLedgerValue' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                    if (fineLegHedQ != "0" && fineAmount > 0 && dtfintFeecat.Count > 0)
                    {
                        string fineHdrId = fineLegHedQ.Split(',')[0];
                        string fineLgrId = fineLegHedQ.Split(',')[1];
                        string fineHdrName = d2.GetFunction(" select headername from fm_headermaster where headerpk=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                        string fineLgrName = d2.GetFunction("  select ledgername from fm_ledgermaster where ledgerpk=" + fineLgrId + " and HeaderFK=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                        foreach (KeyValuePair<string, double> fine in dtfintFeecat)
                        {
                            string sbfine = string.Empty;
                            string feestr = string.Empty;
                            string finfks = string.Empty;
                            sbfine = Convert.ToString(fine.Key + "$" + fine.Value);
                            fineAmount = fine.Value;
                            if (dtfeecat.ContainsKey(fine.Key))
                                feestr = Convert.ToString(dtfeecat[fine.Key]);
                            if (dtfinfk.ContainsKey(fine.Key))
                                finfks = Convert.ToString(dtfinfk[fine.Key]);
                            string finyears = d2.GetFunction("select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where finyearpk='" + finfks + "'");
                            DataRow drFine = tbl_Student.NewRow();
                            drFine["Header_ID"] = fineHdrId;
                            drFine["Header_Name"] = fineHdrName;
                            drFine["Fee_Code"] = fineLgrId;
                            drFine["Fee_Type"] = fineLgrName;
                            drFine["ChlTaken"] = "0";
                            drFine["TextVal"] = "FINE";
                            drFine["TextCode"] = "-1";
                            drFine["Fee_Amount"] = fineAmount;
                            drFine["Deduct"] = "0";
                            drFine["Total"] = fineAmount;
                            drFine["PaidAmt"] = "0";
                            drFine["BalAmt"] = fineAmount;
                            drFine["ToBePaid"] = "0";
                            tbl_Student.Rows.Add(drFine);
                        }
                    #endregion
                    }
                }

                if (tbl_Student.Rows.Count > 0)
                {
                    //  txt_exfees.Text = d2.GetFunction("select distinct isnull(BalanceAmt,0) from FT_ExcessDet where App_No='" + appnoNew + "'");
                    txt_chltakn.Text = d2.GetFunction(chlnTakenQ);

                    grid_Details.DataSource = tbl_Student;
                    grid_Details.DataBind();
                    grid_Details.Visible = true;

                    if (rdo_receipt.Checked)
                    {
                        btn_print.Visible = false;
                    }
                    else
                    {
                        if (rdo_challan.Checked && (rdo_sngle.Checked || (rdo_multi.Checked && txt_totnoofstudents.Text != "")))
                        {
                            btn_print.Visible = true;
                        }
                        else
                        {
                            btn_print.Visible = false;
                        }
                    }

                }
                else
                {
                    grid_Details.DataSource = null;
                    grid_Details.DataBind();
                    grid_Details.Visible = false;
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Add Fees";
                    //img_stud.ImageUrl = "";
                    //img_stud.Visible = false;
                    btn_print.Visible = false;
                }
            }
            else
            {
                grid_Details.DataSource = null;
                grid_Details.DataBind();
                grid_Details.Visible = false;
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "Please Add Fees";
                //img_stud.ImageUrl = "";
                //img_stud.Visible = false;
                btn_print.Visible = false;
            }
            Session["appNo"] = appnoNew;
            //Added by saranya on 24March2018
            if (!string.IsNullOrEmpty(Txt_amt.Text) && Txt_amt.Text.Trim() != "0")
            {
            }
            else
            {
                Txt_amt.Text = "";
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, collegecode1, "ChallanReceipt");
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            grid_Details.Visible = false;
            imgAlert.Visible = true;
            //this.Form.DefaultButton = "btn_alertclose";
            lbl_alert.Text = "No Records Found";
            //img_stud.ImageUrl = "";
            //img_stud.Visible = false;
            btn_print.Visible = false;
            Session["appNo"] = "";
        }
        if (rdo_challan.Checked && rdo_multi.Checked)
        {
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            grid_Details.Visible = false;
        }

    }
    protected void btnGO_vendor_Click(object sender, EventArgs e)
    {
        bindGrid();
        try
        {
            if (rdo_receipt.Checked)
            {
                double partamt = 0;
                if (Txt_amt.Text.Trim() != "")
                {
                    partamt = Convert.ToDouble(Txt_amt.Text.Trim());
                    excessAmt = Convert.ToDouble(Txt_amt.Text.Trim());
                }
                loadGridVendor();
            }
            else
            {
                if (rdo_challan.Checked && rdo_sngle.Checked)
                {
                    loadGridVendor();
                    string chalamt = Convert.ToString(txt_chltaken.Text.Trim());
                    if (chalamt == "")
                    {
                        chalamt = "0";
                    }
                    string bal = Convert.ToString(txt_balamt.Text.Trim());
                    if (bal == "")
                    {
                        bal = "0";
                    }
                    double chamt = Convert.ToDouble(chalamt);
                    double balamt = Convert.ToDouble(bal);

                    if (balamt > chamt)
                    {

                    }
                    else
                    {
                        if (balamt == chamt && balamt != 0)
                        {
                            Txt_amt.Text = "";
                            lbl_alert.Text = "Challan Already Taken";
                            imgAlert.Visible = true;
                            //this.Form.DefaultButton = "btn_alertclose";
                        }
                    }
                }
            }
            if (rdo_receipt.Checked)
            {
                bindHeaderLedger();
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    //Lookup Vendor
    protected void btn_vendorLook_Click(object sender, EventArgs e)
    {
        div_vendorLook.Visible = true;
        ddlsearch2_OnSelectedIndexChanged(sender, e);
        btnvendor_ok.Visible = false;
        btnExit_vendor.Visible = false;
        Fpspread3.Visible = false;
        lbl_errormsgvendor.Visible = false;
    }
    protected void btnvendor_ok_Click(object sender, EventArgs e)
    {
        try
        {

            string actrow = "";
            string actcol = "";
            actrow = Fpspread3.ActiveSheetView.ActiveRow.ToString();
            actcol = Fpspread3.ActiveSheetView.ActiveColumn.ToString();
            if (actrow.Trim() != "" && actrow.Trim() != "-1")
            {
                string vendor = Convert.ToString(Fpspread3.Sheets[0].Cells[Convert.ToInt32(actrow), 2].Text);
                string appno = Convert.ToString(Fpspread3.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Tag);
                string vendorcode = Convert.ToString(Fpspread3.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Text);
                txtroll_vendor.Text = vendor + "-" + vendorcode + "-" + appno;
                txtroll_vendor_Changed(sender, e);

            }
            div_vendorLook.Visible = false;
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    protected void btn_exitvendor_Click(object sender, EventArgs e)
    {
        div_vendorLook.Visible = false;
    }
    protected void ddlsearch2_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        txtsearch2.Text = "";
        txtsearch2c.Text = "";
        txtsearch2c.Visible = false;
        txtsearch2.Visible = false;
        if (ddlsearch2.SelectedIndex == 0)
        {
            txtsearch2.Visible = true;
            Label2.Text = "Search By Name";
        }
        else
        {
            txtsearch2c.Visible = true;
            Label2.Text = "Search By Code";
        }
    }
    protected void Fpspread3vendor_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            string actrow = Fpspread1.Sheets[0].ActiveRow.ToString();
            string actcol = Fpspread1.Sheets[0].ActiveColumn.ToString();
            if (actrow.Trim() == "0" && actcol.Trim() == "1")
            {
                if (Fpspread1.Sheets[0].RowCount > 0)
                {
                    int checkval = Convert.ToInt32(Fpspread1.Sheets[0].Cells[0, 1].Value);
                    if (checkval == 0)
                    {
                        for (int i = 1; i < Fpspread1.Sheets[0].RowCount; i++)
                        {
                            Fpspread1.Sheets[0].Cells[i, 1].Value = 1;
                        }
                    }
                    if (checkval == 1)
                    {
                        for (int i = 1; i < Fpspread1.Sheets[0].RowCount; i++)
                        {
                            Fpspread1.Sheets[0].Cells[i, 1].Value = 0;
                        }
                    }
                }
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    protected void btn_goVendor_Click(object sender, EventArgs e)
    {
        try
        {
            btnvendor_ok.Visible = false;
            btnExit_vendor.Visible = false;
            div_vendorLook.Visible = true;
            Fpspread3.Visible = false;
            if (collegecode1 != null)
            {
                string selq = "";
                if (txtsearch2.Text.Trim() != "")
                {
                    string sname = string.Empty;
                    try
                    {
                        sname = txtsearch2.Text.Trim().Split('-')[0];
                    }
                    catch { sname = txtsearch2.Text.Trim(); }
                    selq = "select VendorCompName,VendorCode ,VendorPK  from CO_VendorMaster where VendorType =1 and VendorCompName like '" + Convert.ToString(sname) + "%'";
                }
                else if (txtsearch2c.Text.Trim() != "")
                {
                    selq = "select VendorCompName,VendorCode ,VendorPK  from CO_VendorMaster where VendorType =1 and Vendorcode= '" + Convert.ToString(txtsearch2c.Text) + "'";
                }
                else
                {
                    selq = "select VendorCompName,VendorCode ,VendorPK  from CO_VendorMaster where VendorType =1 ";
                }
                ds.Clear();
                ds = d2.select_method_wo_parameter(selq, "Text");
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        Fpspread3.Sheets[0].RowCount = 0;
                        Fpspread3.Sheets[0].ColumnCount = 0;
                        Fpspread3.CommandBar.Visible = false;
                        Fpspread3.Sheets[0].AutoPostBack = false;
                        Fpspread3.Sheets[0].ColumnHeader.RowCount = 1;
                        Fpspread3.Sheets[0].RowHeader.Visible = false;
                        Fpspread3.Sheets[0].ColumnCount = 3;
                        Fpspread3.Sheets[0].Columns[0].Width = 60;
                        Fpspread3.Sheets[0].Columns[1].Width = 170;
                        Fpspread3.Sheets[0].Columns[2].Width = 360;

                        FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                        darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
                        darkstyle.ForeColor = Color.White;
                        Fpspread3.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;

                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;

                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Vendor Code";
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;

                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Vendor Name";
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                        Fpspread3.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;

                        FarPoint.Web.Spread.TextCellType chkall = new FarPoint.Web.Spread.TextCellType();


                        for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                        {
                            Fpspread3.Sheets[0].RowCount++;
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(row + 1);
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 1].CellType = chkall;
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(ds.Tables[0].Rows[row]["Vendorcode"]);

                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(ds.Tables[0].Rows[row]["VendorPK"]);
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[row]["VendorCompName"]);
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                            Fpspread3.Sheets[0].Cells[Fpspread3.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                        }
                        Fpspread3.Visible = true;
                        // div2.Visible = true;
                        lbl_errormsgvendor.Visible = false;
                        Fpspread3.Sheets[0].PageSize = Fpspread3.Sheets[0].RowCount;
                        Fpspread3.Width = 620;
                        Fpspread3.Height = 210;
                        if (Fpspread3.Sheets[0].RowCount > 0)
                        {
                            btnvendor_ok.Visible = true;
                            btnExit_vendor.Visible = true;
                        }

                    }
                    else
                    {
                        imgAlert.Visible = true;
                        //this.Form.DefaultButton = "btn_alertclose";
                        lbl_alert.Text = "No Records Found";
                    }
                }
                else
                {
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "No Records Found";
                }
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    //Others Division
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetOthername(string prefixText)
    {
        WebService ws = new WebService();
        //string query = " select vendorname+'-'+VendorMobileNo from co_vendormaster where vendorname like '" + prefixText + "%' and VendorType=-5";
        string query = " select vendorname from co_vendormaster where vendorname like '" + prefixText + "%' and VendorType=-5";
        DataSet dsN = new DataSet();
        List<string> name = new List<string>();
        try
        {
            name = ws.Getname(query);
        }
        catch { }
        return name;
    }
    protected void txtroll_other_Changed(object sender, EventArgs e)
    {
        btn_print.Visible = false;
        //try
        //{
        txt_otherMobile.Text = "";//    txt_otherMobile.Text = txtroll_other.Text.Split('-')[1].Trim();
        //    txtroll_other.Text = txtroll_other.Text.Split('-')[0].Trim();
        //}
        //catch { }

        string staffId = Convert.ToString(txtroll_other.Text.Trim());
        string staffMob = Convert.ToString(txt_otherMobile.Text.Trim());
        img_stud.ImageUrl = "";
        img_stud.Visible = false;

        if (staffId != "")//&& staffMob != ""
        {
            string ifAlreadyExist = d2.GetFunction("select VendorCode from co_vendormaster where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5").Trim();

            string name = string.Empty;
            string compname = string.Empty;
            string Add1 = string.Empty;
            string Add2 = string.Empty;
            string mobiNo = string.Empty;
            if (ifAlreadyExist == "1")
            {
                string query = " select VendorName,VendorMobileNo,VendorCode,VendorAddress+'-'+VendorStreet as Add1,VendorCity,VendorCompName from co_vendormaster where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5";
                ds.Clear();
                ds = d2.select_method_wo_parameter(query, "Text");

                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    name = Convert.ToString(ds.Tables[0].Rows[0]["VendorName"]);
                    compname = Convert.ToString(ds.Tables[0].Rows[0]["VendorCompName"]);
                    Add1 = Convert.ToString(ds.Tables[0].Rows[0]["Add1"]);
                    Add2 = Convert.ToString(ds.Tables[0].Rows[0]["VendorCity"]);
                    mobiNo = Convert.ToString(ds.Tables[0].Rows[0]["VendorMobileNo"]);
                }

                txtname_other.Text = compname;
                txtAdd1_Other.Text = Add1;
                txtAdd2_Other.Text = Add2;
                txt_otherMobile.Text = mobiNo;
            }

            img_stud.ImageUrl = "~/Handler/ghStaffFoto.ashx?QSstaff_id=" + staffId;
            img_stud.Visible = true;

            LoadYearSemester();
            Txt_amt.Text = "0.00";
            loadGridOthers();
            bindGrid();

        }
        else
        {
            txt_totamt.Text = "0.00";
            txt_paidamt.Text = "0.00";
            txt_balamt.Text = "0.00";
            txt_chltaken.Text = "0.00";
            Txt_amt.Text = "0.00";
            img_stud.Visible = false;
            lblstaticrollno.Text = "";

            txtroll_other.Text = "";
            txtname_other.Text = "";
            txtAdd1_Other.Text = "";
            txtAdd2_Other.Text = "";
            txt_otherMobile.Text = "";
            grid_Details.DataSource = null;
            grid_Details.DataBind();
            cbSem_other.Checked = false;
            cblSem_other.Items.Clear();

            txtSem_other.Text = "";
            img_stud.Visible = false;

        }

        if (rdo_receipt.Checked)
        {
            bindHeaderLedger();
        }
    }
    protected void txtname_other_Changed(object sender, EventArgs e)
    {
        //if (txtroll_other.Text.Trim() != "" && txt_otherMobile.Text.Trim() != "")
        //{
        //    string staffid = Convert.ToString(txtroll_other.Text);

        //    if (staffid != "")
        //    {
        //        try
        //        {
        //            staffid = staffid.Split('-')[1];
        //        }
        //        catch { staffid = ""; }
        //    }
        //    txtroll_staff.Text = staffid;
        //    txtroll_staff_Changed(sender, e);
        //}
        //else
        //{
        //    txt_totamt.Text = "0.00";
        //    txt_paidamt.Text = "0.00";
        //    txt_balamt.Text = "0.00";
        //    txt_chltaken.Text = "0.00";
        //    Txt_amt.Text = "0.00";
        //    img_stud.Visible = false;
        //    lblstaticrollno.Text = "";

        //    txtroll_staff.Text = "";
        //    txtname_staff.Text = "";
        //    txtDept_staff.Text = "";
        //    grid_Details.DataSource = null;
        //    grid_Details.DataBind();
        //    cbSem_staff.Checked = false;
        //    cblSem_staff.Items.Clear();
        //    //ddl_sem.Items.Clear();
        //    //ddl_semMultiple.Items.Clear();
        //    txtSem_staff.Text = "";
        //    img_stud.Visible = false;
        //    //img_stud.Visible = true;
        //    //lbl_alert.Text = "Please Enter Staff Id";
        //}

        //if (rdo_receipt.Checked)
        //{
        //    bindHeaderLedger();
        //}
    }
    protected void cbSem_other_CheckedChanged(object sender, EventArgs e)
    {
        CallCheckBoxChangedEvent(cblSem_other, cbSem_other, txtSem_other, "Semester/Year");
    }
    protected void cblSem_other_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckBoxListChangedEvent(cblSem_other, cbSem_other, txtSem_other, "Semester/Year");
    }
    protected void ddlSem_other_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        loadGridOthers();
    }
    public void loadGridOthers()
    {
        loadScholarship("-1");
        if (generateVendorCode().Trim() != "")
        {
            if (rdo_challan.Checked)
            {
                txt_rcptno.Text = generateChallanNo();
                txt_ExcAmt.Visible = false;
                txt_CautionAmt.Visible = false;
                txt_GvtTot.Visible = false;
                chkGridSelectAll.Checked = true;
            }
            else
            {
                txt_rcptno.Text = generateReceiptNo();
                txt_ExcAmt.Visible = true;
                txt_CautionAmt.Visible = false;
                txt_GvtTot.Visible = true;
                chkGridSelectAll.Checked = false;
            }
            fromScript = false;
            try
            {
                lblstaticrollno.Text = "";
                txt_totamt.Text = "";
                txt_paidamt.Text = "";
                txt_balamt.Text = "";
                txt_chltaken.Text = "0.00";
                generateReceiptNo();
                string roll_no = string.Empty;
                string semyear = string.Empty;
                string appnoNew = string.Empty;
                string degcode = string.Empty;
                roll_no = txtroll_other.Text.Trim();

                DataTable tbl_Student = new DataTable();
                tbl_Student.Columns.Add("Roll_No");
                tbl_Student.Columns.Add("Reg_No");
                tbl_Student.Columns.Add("Stud_Name");
                tbl_Student.Columns.Add("Degree");
                tbl_Student.Columns.Add("TextVal");
                tbl_Student.Columns.Add("TextCode");
                tbl_Student.Columns.Add("Header_ID");
                tbl_Student.Columns.Add("Header_Name");
                tbl_Student.Columns.Add("Fee_Code");
                tbl_Student.Columns.Add("Fee_Type");
                tbl_Student.Columns.Add("Fee_Amount");
                tbl_Student.Columns.Add("Deduct");
                tbl_Student.Columns.Add("Total");
                tbl_Student.Columns.Add("PaidAmt");
                tbl_Student.Columns.Add("BalAmt");
                tbl_Student.Columns.Add("ToBePaid");
                tbl_Student.Columns.Add("Monthly");
                tbl_Student.Columns.Add("ChlTaken");
                tbl_Student.Columns.Add("Scholar");
                tbl_Student.Columns.Add("CautionDep");
                tbl_Student.Columns.Add("MonwiseMon");
                tbl_Student.Columns.Add("MonwiseYear");
                tbl_Student.Columns.Add("FeeallotPk");
                tbl_Student.Columns.Add("finyearfk");
                tbl_Student.Columns.Add("finyear");
                string selectQuery = "";

                string name = string.Empty;
                string compname = string.Empty;
                string Add1 = string.Empty;
                string Add2 = string.Empty;
                string mobiNo = string.Empty;

                string staffId = Convert.ToString(txtroll_other.Text.Trim());
                string staffMob = Convert.ToString(txt_otherMobile.Text.Trim());
                string queryRollApp = "  select VendorName, VendorMobileNo, VendorCode,VendorAddress ,VendorCity,VendorCompName,VendorPK from co_vendormaster where vendorname='" + staffId + "' and VendorMobileNo='" + staffMob + "'  and VendorType=-5 ";

                DataSet dsRollApp = new DataSet();
                dsRollApp = d2.select_method_wo_parameter(queryRollApp, "Text");
                if (dsRollApp.Tables.Count > 0)
                {
                    if (dsRollApp.Tables[0].Rows.Count > 0)
                    {

                        roll_no = Convert.ToString(dsRollApp.Tables[0].Rows[0]["VendorName"]);
                        appnoNew = Convert.ToString(dsRollApp.Tables[0].Rows[0]["VendorPK"]);
                        // degcode = Convert.ToString(dsRollApp.Tables[0].Rows[0]["dept_code"]);

                        name = Convert.ToString(dsRollApp.Tables[0].Rows[0]["VendorName"]);
                        compname = Convert.ToString(dsRollApp.Tables[0].Rows[0]["VendorCompName"]);
                        Add1 = Convert.ToString(dsRollApp.Tables[0].Rows[0]["VendorAddress"]);
                        Add2 = Convert.ToString(dsRollApp.Tables[0].Rows[0]["VendorCity"]);
                        mobiNo = Convert.ToString(dsRollApp.Tables[0].Rows[0]["VendorMobileNo"]);

                        lblstaticrollno.Text = roll_no;

                        img_stud.ImageUrl = "~/Handler/ghStaffFoto.ashx?QSstaff_id=" + roll_no;
                        img_stud.Visible = true;
                    }
                    else
                    {
                        roll_no = "";
                        appnoNew = "";
                        lblstaticrollno.Text = "";
                        img_stud.Visible = false;
                    }
                }
                else
                {
                    roll_no = "";
                    appnoNew = "";
                    lblstaticrollno.Text = "";
                    img_stud.Visible = false;
                }
                txtname_other.Text = compname;
                txtAdd1_Other.Text = Add1;
                txtAdd2_Other.Text = Add2;
                //txt_otherMobile.Text = mobiNo;

                if (appnoNew.Trim() != "")
                {
                    selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,LedgerName,Priority,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)  as DeductAmount,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(TotalAmount,0)-isnull(PaidAmount,0)  as BalAmount,( select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where a.finyearfk=fm.finyearpk )as finyear,a.finyearfk  FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L WHERE A.HeaderFK = H.HeaderPK AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK and l.LedgerMode=0 and MemType=4  AND A.App_No = " + appnoNew + " and isnull(istransfer,'0')='0'";//and T.TextCode in('" + semyear + "')

                    string chlnTakenQ = " select Count(distinct(ChallanNo)) from FT_ChallanDet where App_No=" + appnoNew + " ";//and FeeCategory in ('" + semyear + "')

                    if (cb_selcthd.Checked)
                    {
                        string headercode = GetSelectedItemsValue(cbl_grpheader);

                        if (rbl_headerselect.SelectedIndex == 0)
                        {
                            headercode = "";

                            headercode = GetSelectedItemsValueAsString(cbl_grpheader);

                            //Group Header
                            selectQuery = " SELECT A.HeaderFK,HeaderName,A.LedgerFK,Priority,LedgerName,isnull(FeeAmount,0) as FeeAmount,isnull(DeductAmout,0)   as DeductAmount ,isnull(TotalAmount,0) as TotalAmount,isnull(ChlTaken,0) as ChlTakAmt,isnull(PaidAmount,0) as PaidAmount,isnull(TotalAmount,0)-isnull(PaidAmount,0)  as BalAmount,ChlGroupHeader,( select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where a.finyearfk=fm.finyearpk )as finyear,a.finyearfk FROM FT_FeeAllot A,FM_HeaderMaster H,FS_ChlGroupHeaderSettings S, FM_LedgerMaster L WHERE A.HeaderFK = H.HeaderPK and a.headerfk = s.headerfk and l.headerfk = s.headerfk  AND A.LedgerFK = L.LedgerPK AND H.HeaderPK = L.HeaderFK and h.headerpk = s.headerfk  and l.LedgerMode=0 and MemType=4   and ChlGroupHeader in('" + headercode + "') and isnull(istransfer,'0')='0'";// and T.TextCode in('" + semyear + "')
                            if (rdo_receipt.Checked || rdo_sngle.Checked)
                            {
                                selectQuery += " AND A.App_No = " + appnoNew + " ";
                            }

                            if (lbltype.Text != "")
                            {
                                selectQuery += "  and Stream ='" + lbltype.Text.Trim() + "' ";
                            }

                        }
                        else if (rbl_headerselect.SelectedIndex == 1)
                        {
                            //Header
                            selectQuery += "  and A.HeaderFK in (" + headercode + ") ";
                            chlnTakenQ += " and headerfk in (" + headercode + ") ";
                        }
                        else
                        {
                            //Ledger
                            selectQuery += "  and A.LedgerFK  in (" + headercode + ")  ";
                            chlnTakenQ += "  and LedgerFK in (" + headercode + ")";
                        }

                    }
                    if (ShowBalOnly())
                    {
                        selectQuery += " and isnull(BalAmount,0)>0 ";
                    }
                    selectQuery += "  order by case when priority is null then 1 else 0 end, priority,a.finyearfk asc";

                    DataSet ds_stud = new DataSet();
                    ds_stud.Clear();
                    ds_stud = d2.select_method_wo_parameter(selectQuery, "Text");
                    if (ds_stud.Tables.Count > 0)
                    {
                        if (ds_stud.Tables[0].Rows.Count > 0)
                        {

                            string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
                            string excessamtQ = d2.GetFunction("select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt from FT_ExcessDet WHERE  App_No=" + appnoNew + " ");
                            string excessTypeQ = "select LinkValue from New_InsSettings where LinkName='ExcessFeesType' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
                            int excessTypeValue = 0;
                            try { excessTypeValue = Convert.ToInt32(Convert.ToString(d2.GetFunction(excessTypeQ))); }
                            catch { }


                            double excessamtValue = 0;
                            double.TryParse(excessamtQ, out excessamtValue);
                            double fineAmount = 0;
                            for (i = 0; i < ds_stud.Tables[0].Rows.Count; i++)
                            {
                                DataRow dr_Student = tbl_Student.NewRow();

                                //dr_Student["Roll_No"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Roll_No"]);
                                //dr_Student["Reg_No"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Reg_No"]);
                                // dr_Student["Stud_Name"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Stud_Name"]);
                                // dr_Student["Degree"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["Degree"]);
                                dr_Student["TextVal"] = "0";// Convert.ToString(ds_stud.Tables[0].Rows[i]["TextVal"]);
                                dr_Student["TextCode"] = "0";//Convert.ToString(ds_stud.Tables[0].Rows[i]["TextCode"]);
                                dr_Student["Header_ID"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]);
                                dr_Student["Header_Name"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderName"]);
                                dr_Student["Fee_Code"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]);
                                dr_Student["Fee_Type"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerName"]) + retQuantity(appnoNew, Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]), "4", "0");
                                dr_Student["ChlTaken"] = Convert.ToString(ds_stud.Tables[0].Rows[i]["ChlTakAmt"]);

                                //appnoNew = Convert.ToString(ds_stud.Tables[0].Rows[i]["App_No"]);
                                string finyearfk = Convert.ToString(ds_stud.Tables[0].Rows[i]["finyearfk"]);
                                string finyear = Convert.ToString(ds_stud.Tables[0].Rows[i]["finyear"]);
                                double feeamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["FeeAmount"]);
                                double deductamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["DeductAmount"]);
                                double totamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["TotalAmount"]);
                                double paid = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["PaidAmount"]);
                                double balamt = Convert.ToDouble(ds_stud.Tables[0].Rows[i]["BalAmount"]);
                                double curExcess = 0;

                                if (cb_exfees.Checked && excessTypeValue == 1)
                                {
                                    //Common Excess
                                    if (totamt >= paid + excessamtValue)
                                    {
                                        curExcess = excessamtValue;
                                        balamt = balamt - (curExcess);
                                        excessamtValue = 0;
                                        dr_Student["Monthly"] = curExcess;

                                    }
                                    else
                                    {
                                        curExcess = totamt - paid;
                                        excessamtValue -= curExcess;
                                        balamt = balamt - (curExcess);
                                        dr_Student["Monthly"] = curExcess;
                                    }
                                }
                                else if (cb_exfees.Checked && excessTypeValue == 2)
                                {
                                    //Ledgerwise Excess
                                    string ledUpQ = "select sum(isnull(ExcessAmt,0)-isnull(AdjAmt,0)) as BalanceAmt from FT_ExcessLedgerDet where HeaderFK ='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]) + "' and LedgerFK ='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]) + "'";

                                    double excessAmtval = 0;
                                    try
                                    {
                                        excessAmtval = Convert.ToDouble(d2.GetFunction(ledUpQ));
                                    }
                                    catch { }
                                    if (totamt >= paid + excessAmtval)
                                    {
                                        curExcess = excessAmtval;
                                        balamt = balamt - (curExcess);
                                        dr_Student["Monthly"] = curExcess;

                                    }
                                    else
                                    {
                                        curExcess = totamt - paid;
                                        balamt = balamt - (curExcess);
                                        dr_Student["Monthly"] = curExcess;
                                    }

                                }
                                else
                                {
                                    dr_Student["Monthly"] = "0";
                                }
                                dr_Student["ToBePaid"] = "0";
                                dr_Student["Fee_Amount"] = feeamt;
                                dr_Student["Deduct"] = deductamt;
                                dr_Student["Total"] = totamt;
                                dr_Student["PaidAmt"] = paid;
                                dr_Student["BalAmt"] = balamt;
                                //   dr_Student["finyearfk"] = "&";
                                dr_Student["finyearfk"] = finyearfk;
                                dr_Student["finyear"] = finyear;
                                tbl_Student.Rows.Add(dr_Student);

                                #region Fine Calculation
                                if (balamt > 0)
                                {
                                    string fineQ = "select FineMasterPK, FineType, FromDay, ToDay, isnull(FineAmount,0) as FineAmt, DueDate, F.HeaderFk, Ledgerfk, Feecatgory, Degreecode, F.collegecode, LedgerName, HeaderName,( select (convert(varchar(10),finyearstart,103)+'-'+convert(varchar(10),finyearend,103)) as finyearfk from fm_finyearmaster fm where f.finyearfk=fm.finyearpk)as finyear,f.finyearfk,Stud_FineSettingType from Fm_FInemaster F,FM_LedgerMaster L,FM_HeaderMaster H where f.CollegeCode=L.CollegeCode and F.CollegeCode=h.CollegeCode and f.HeaderFK=h.HeaderPK and f.HeaderFK=l.HeaderFK and f.LedgerFK=l.LedgerPK and Duedate<GETDATE() and F.CollegeCode=" + collegecode1 + " and DegreeCode='" + degcode + "' and H.Headerpk ='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["HeaderFK"]) + "' and L.LedgerPK='" + Convert.ToString(ds_stud.Tables[0].Rows[i]["LedgerFK"]) + "'  and f.finyearfk in('" + finyearfk + "')";// and FeeCatgory in ('" + Convert.ToString(ds_stud.Tables[0].Rows[i]["TextCode"]) + "'

                                    DataSet dsFine = new DataSet();
                                    dsFine = d2.select_method_wo_parameter(fineQ, "Text");
                                    if (dsFine.Tables.Count > 0)
                                    {
                                        if (dsFine.Tables[0].Rows.Count > 0)
                                        {
                                            for (int fn = 0; fn < dsFine.Tables[0].Rows.Count; fn++)
                                            {
                                                string fineType = Convert.ToString(dsFine.Tables[0].Rows[fn]["FineType"]);
                                                DateTime due = Convert.ToDateTime(dsFine.Tables[0].Rows[fn]["DueDate"]);
                                                DateTime curDate = DateTime.Now;
                                                if (fineType == "1")
                                                {
                                                    fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                }
                                                else if (fineType == "2")
                                                {
                                                    for (; due <= curDate; due = due.AddDays(1))
                                                    {
                                                        fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                    }
                                                }
                                                else if (fineType == "3")
                                                {
                                                    TimeSpan td = curDate - due;
                                                    int difference = td.Days;
                                                    int fromday = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["FromDay"]);
                                                    int to_day = Convert.ToInt32(dsFine.Tables[0].Rows[fn]["ToDay"]);

                                                    if (difference <= to_day && difference >= fromday)
                                                    {
                                                        fineAmount += Convert.ToDouble(dsFine.Tables[0].Rows[fn]["FineAmt"]);
                                                    }
                                                }

                                            }
                                        }
                                    }
                                }
                                #endregion
                            }
                            #region Fine Adjustment
                            Dictionary<string, double> dtfintFeecat = new Dictionary<string, double>();
                            Dictionary<string, string> dtfeecat = new Dictionary<string, string>();
                            Dictionary<string, string> dtfinfk = new Dictionary<string, string>();
                            string fineLegHedQ = d2.GetFunction(" select Linkvalue from New_InsSettings where LinkName='FineLedgerValue' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
                            if (fineLegHedQ != "0" && fineAmount > 0 && dtfintFeecat.Count > 0)
                            {
                                string fineHdrId = fineLegHedQ.Split(',')[0];
                                string fineLgrId = fineLegHedQ.Split(',')[1];
                                string fineHdrName = d2.GetFunction(" select headername from fm_headermaster where headerpk=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                                string fineLgrName = d2.GetFunction("  select ledgername from fm_ledgermaster where ledgerpk=" + fineLgrId + " and HeaderFK=" + fineHdrId + " and CollegeCode=" + collegecode1 + "");
                                foreach (KeyValuePair<string, double> fine in dtfintFeecat)
                                {
                                    string sbfine = string.Empty;
                                    string feestr = string.Empty;
                                    string finfks = string.Empty;
                                    sbfine = Convert.ToString(fine.Key + "$" + fine.Value);
                                    fineAmount = fine.Value;
                                    if (dtfeecat.ContainsKey(fine.Key))
                                        feestr = Convert.ToString(dtfeecat[fine.Key]);
                                    if (dtfinfk.ContainsKey(fine.Key))
                                        finfks = Convert.ToString(dtfinfk[fine.Key]);
                                    string finyears = d2.GetFunction("select (convert(varchar(10),datepart(year,finyearstart))+'-'+convert(varchar(10),datepart(year,finyearend))) as finyearfk from fm_finyearmaster fm where finyearpk='" + finfks + "'");
                                    DataRow drFine = tbl_Student.NewRow();
                                    drFine["Header_ID"] = fineHdrId;
                                    drFine["Header_Name"] = fineHdrName;
                                    drFine["Fee_Code"] = fineLgrId;
                                    drFine["Fee_Type"] = fineLgrName;
                                    drFine["ChlTaken"] = "0";
                                    drFine["TextVal"] = "FINE";
                                    drFine["TextCode"] = "-1";
                                    drFine["Fee_Amount"] = fineAmount;
                                    drFine["Deduct"] = "0";
                                    drFine["Total"] = fineAmount;
                                    drFine["PaidAmt"] = "0";
                                    drFine["BalAmt"] = fineAmount;
                                    drFine["ToBePaid"] = "0";
                                    drFine["finyear"] = finyears;
                                    tbl_Student.Rows.Add(drFine);
                                }
                            #endregion
                            }
                        }

                        if (tbl_Student.Rows.Count > 0)
                        {
                            //  txt_exfees.Text = d2.GetFunction("select distinct isnull(BalanceAmt,0) from FT_ExcessDet where App_No='" + appnoNew + "'");
                            txt_chltakn.Text = d2.GetFunction(chlnTakenQ);

                            grid_Details.DataSource = tbl_Student;
                            grid_Details.DataBind();
                            grid_Details.Visible = true;

                            if (rdo_receipt.Checked)
                            {
                                btn_print.Visible = false;
                            }
                            else
                            {
                                if (rdo_challan.Checked && (rdo_sngle.Checked || (rdo_multi.Checked && txt_totnoofstudents.Text != "")))
                                {
                                    btn_print.Visible = true;
                                }
                                else
                                {
                                    btn_print.Visible = false;
                                }
                            }

                        }
                        else
                        {
                            grid_Details.DataSource = null;
                            grid_Details.DataBind();
                            grid_Details.Visible = false;
                            imgAlert.Visible = true;
                            //this.Form.DefaultButton = "btn_alertclose";
                            lbl_alert.Text = "Please Add Fees";
                            //img_stud.ImageUrl = "";
                            //img_stud.Visible = false;
                            btn_print.Visible = false;
                        }
                    }
                    else
                    {
                        grid_Details.DataSource = null;
                        grid_Details.DataBind();
                        grid_Details.Visible = false;
                        imgAlert.Visible = true;
                        //this.Form.DefaultButton = "btn_alertclose";
                        lbl_alert.Text = "Please Add Fees";
                        //img_stud.ImageUrl = "";
                        //img_stud.Visible = false;
                        btn_print.Visible = false;
                    }
                    Session["appNo"] = appnoNew;
                }
                else
                {
                    grid_Details.DataSource = null;
                    grid_Details.DataBind();
                    grid_Details.Visible = false;
                    imgAlert.Visible = true;
                    //this.Form.DefaultButton = "btn_alertclose";
                    lbl_alert.Text = "Please Add Fees";
                    //img_stud.ImageUrl = "";
                    //img_stud.Visible = false;
                    btn_print.Visible = false;
                }
                //Added by saranya on 24March2018
                if (!string.IsNullOrEmpty(Txt_amt.Text) && Txt_amt.Text.Trim() != "0")
                {
                }
                else
                {
                    Txt_amt.Text = "";
                }
            }
            catch (Exception ex)
            {
                d2.sendErrorMail(ex, collegecode1, "ChallanReceipt");
                grid_Details.DataSource = null;
                grid_Details.DataBind();
                grid_Details.Visible = false;
                imgAlert.Visible = true;
                //this.Form.DefaultButton = "btn_alertclose";
                lbl_alert.Text = "No Records Found";
                //img_stud.ImageUrl = "";
                //img_stud.Visible = false;
                btn_print.Visible = false;
                Session["appNo"] = "";
            }
            if (rdo_challan.Checked && rdo_multi.Checked)
            {
                grid_Details.DataSource = null;
                grid_Details.DataBind();
                grid_Details.Visible = false;
            }
        }
        else
        {
            imgAlert.Visible = true;
            //this.Form.DefaultButton = "btn_alertclose";
            lbl_alert.Text = "Please Set Inventory Code Settings";
        }
    }
    protected void btnGO_other_Click(object sender, EventArgs e)
    {
        bindGrid();
        try
        {
            if (rdo_receipt.Checked)
            {
                double partamt = 0;
                if (Txt_amt.Text.Trim() != "")
                {
                    partamt = Convert.ToDouble(Txt_amt.Text.Trim());
                    excessAmt = Convert.ToDouble(Txt_amt.Text.Trim());
                }
                loadGridOthers();
            }
            else
            {
                if (rdo_challan.Checked && rdo_sngle.Checked)
                {
                    loadGridOthers();
                    string chalamt = Convert.ToString(txt_chltaken.Text.Trim());
                    if (chalamt == "")
                    {
                        chalamt = "0";
                    }
                    string bal = Convert.ToString(txt_balamt.Text.Trim());
                    if (bal == "")
                    {
                        bal = "0";
                    }
                    double chamt = Convert.ToDouble(chalamt);
                    double balamt = Convert.ToDouble(bal);

                    if (balamt > chamt)
                    {

                    }
                    else
                    {
                        if (balamt == chamt && balamt != 0)
                        {
                            Txt_amt.Text = "";
                            lbl_alert.Text = "Challan Already Taken";
                            imgAlert.Visible = true;
                            //this.Form.DefaultButton = "btn_alertclose";
                        }
                    }
                }
            }
            if (rdo_receipt.Checked)
            {
                bindHeaderLedger();
            }
        }
        catch (Exception ex) { d2.sendErrorMail(ex, collegecode1, "ChallanReceipt"); }
    }
    //Reusable Methods
    public void isContainsDecimal(double myValue)
    {
        bool hasFractionalPart = (myValue - Math.Round(myValue) != 0);
    }
    public string returnIntegerPart(double value)
    {
        string strVal = value.ToString();
        string[] strvalArr = strVal.Split('.');
        if (strvalArr.Length > 0)
        {
            strVal = strvalArr[0];
        }
        return strVal;
    }
    public string returnDecimalPart(double value)
    {
        string strVal = value.ToString();
        string[] strvalArr = strVal.Split('.');
        if (strvalArr.Length > 1)
        {
            strVal = strvalArr[1];
            if (strVal.Length >= 2)
            {
                strVal = strVal.Substring(0, 2);
            }
            else
            {
                while (2 != strVal.Length)
                {
                    strVal = strVal + "0";
                }
            }
        }
        else
        {
            strVal = "00";
        }
        return strVal;
    }
    public string romanLetter(string numeral)
    {
        string romanLettervalue = String.Empty;
        if (numeral.Trim() != String.Empty)
        {
            switch (numeral)
            {
                case "1":
                    romanLettervalue = "I";
                    break;
                case "2":
                    romanLettervalue = "II";
                    break;
                case "3":
                    romanLettervalue = "III";
                    break;
                case "4":
                    romanLettervalue = "IV";
                    break;
                case "5":
                    romanLettervalue = "V";
                    break;
                case "6":
                    romanLettervalue = "VI";
                    break;
                case "7":
                    romanLettervalue = "VII";
                    break;
                case "8":
                    romanLettervalue = "VIII";
                    break;
                case "9":
                    romanLettervalue = "IX";
                    break;
                case "10":
                    romanLettervalue = "X";
                    break;
            }
        }
        return romanLettervalue;
    }
    public static string ConvertNumbertoWords(int number)
    {
        if (number == 0)
            return "Zero";
        if (number < 0)
            return "minus " + ConvertNumbertoWords(Math.Abs(number));
        string words = "";
        if ((number / 100000) > 0)
        {
            words += ConvertNumbertoWords(number / 100000) + " Lakhs";
            number %= 100000;
        }
        if ((number / 1000) > 0)
        {
            words += ConvertNumbertoWords(number / 1000) + " Thousand ";
            number %= 1000;
        }
        if ((number / 100) > 0)
        {
            words += ConvertNumbertoWords(number / 100) + "  Hundred ";
            number %= 100;
        }
        if (number > 0)
        {
            if (words != "")
                words += "And ";
            var unitsMap = new[] { "Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };
            var tensMap = new[] { "Zero", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };

            if (number < 20)
                words += unitsMap[number];
            else
            {
                words += tensMap[number / 10];
                if ((number % 10) > 0)
                    words += " " + unitsMap[number % 10];
            }
        }
        return words;
    }
    public string DecimalToWords(decimal number)
    {
        if (number == 0)
            return "Zero";

        if (number < 0)
            return "Minus " + DecimalToWords(Math.Abs(number));

        string words = "";

        int intPortion = (int)number;
        decimal fraction = (number - intPortion) * 100;
        int decPortion = (int)fraction;

        words = ConvertNumbertoWords(intPortion);//NumberToWords(intPortion)
        if (decPortion > 0)
        {
            words += " and ";
            words += ConvertNumbertoWords(intPortion);//NumberToWords(intPortion)
            words += " Paise ";
        }
        return words;
    }
    public string NumberToWords(int number)
    {
        if (number == 0)
            return "Zero";

        if (number < 0)
            return "Minus " + NumberToWords(Math.Abs(number));

        string words = "";

        if ((number / 1000000) > 0)
        {
            words += NumberToWords(number / 1000000) + " Million ";
            number %= 1000000;
        }

        if ((number / 1000) > 0)
        {
            words += NumberToWords(number / 1000) + " Thousand ";
            number %= 1000;
        }

        if ((number / 100) > 0)
        {
            words += NumberToWords(number / 100) + " Hundred ";
            number %= 100;
        }

        if (number > 0)
        {
            if (words != "")
                words += "and ";

            var unitsMap = new[] { "Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };
            var tensMap = new[] { "Zero", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };

            if (number < 20)
                words += unitsMap[number];
            else
            {
                words += tensMap[number / 10];
                if ((number % 10) > 0)
                    words += " " + unitsMap[number % 10];
            }
        }

        return words;
    }
    public string returnYearforSem(string cursem)
    {
        switch (cursem)
        {
            case "1":
            case "2":
                cursem = "1";
                break;
            case "3":
            case "4":
                cursem = "2";
                break;
            case "5":
            case "6":
                cursem = "3";
                break;
            case "7":
            case "8":
                cursem = "4";
                break;
            case "9":
            case "10":
                cursem = "5";
                break;
        }
        return cursem;
    }
    public string generateBarcode(string barCode)
    {
        string urlImg = Server.MapPath("~/BarCode/" + "barcodeimg" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".Jpeg");
        System.Web.UI.WebControls.Image imgBarCode = new System.Web.UI.WebControls.Image();
        using (Bitmap bitMap = new Bitmap(barCode.Length * 10, 20))
        {
            using (Graphics graphics = Graphics.FromImage(bitMap))
            {
                Font oFont = new Font("IDAutomationHC39M", 16);
                PointF point = new PointF(2f, 2f);
                SolidBrush blackBrush = new SolidBrush(Color.Black);
                SolidBrush whiteBrush = new SolidBrush(Color.White);
                graphics.FillRectangle(whiteBrush, 0, 0, bitMap.Width, bitMap.Height);
                graphics.DrawString("*" + barCode + "*", oFont, blackBrush, point);
            }
            using (MemoryStream ms = new MemoryStream())
            {
                //bitMap.Save(ms, System.Drawing.Imaging.ImageFormat.Png);
                //byte[] byteImage = ms.ToArray();

                //Convert.ToBase64String(byteImage);
                //imgBarCode.ImageUrl = "data:image/png;base64," + Convert.ToBase64String(byteImage);


                bitMap.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                bitMap.Save(urlImg, System.Drawing.Imaging.ImageFormat.Jpeg);
            }
            return urlImg;
        }

    }
    public string generateReceiptNo()
    {
        try
        {
            string HeaderwiseQ = "select LinkValue from New_InsSettings where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
            isHeaderwise = Convert.ToInt32(d2.GetFunction(HeaderwiseQ).Trim());
        }
        catch { isHeaderwise = 0; }
        try
        {
            string insqry1 = "select LinkValue from New_InsSettings where LinkName='ReceiptPrintFormat' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
            int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 5)
                return string.Empty;
        }
        catch { return string.Empty; }
        if (isHeaderwise == 0 || isHeaderwise == 2)
        {
            return getCommonReceiptNo();
        }
        else
        {
            return getHeaderwiseReceiptNo();
        }
    }
    private string getCommonReceiptNo()
    {
        string recno = string.Empty;
        lblaccid.Text = "";
        lstrcpt.Text = "";
        try
        {
            int receno = 0;
            string recacr = string.Empty;
            string recnoprev = string.Empty;

            string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
            string accountid = "";// d2.GetFunction(" select acct_id from acctinfo where college_code ='" + collegecode1 + "'");
            lblaccid.Text = accountid;
            string secondreciptqurey = "SELECT RcptStNo from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + ")";
            DataSet dsrecYr = new DataSet();
            dsrecYr = d2.select_method_wo_parameter(secondreciptqurey, "Text");
            if (dsrecYr.Tables.Count > 0 && dsrecYr.Tables[0].Rows.Count > 0)
            {
                recnoprev = Convert.ToString(dsrecYr.Tables[0].Rows[0][0]);
                if (recnoprev != "")
                {
                    int recno_cur = Convert.ToInt32(recnoprev);
                    receno = recno_cur;
                }

                string acronymquery = d2.GetFunction("SELECT RcptAcr from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + ")");
                recacr = acronymquery;


                int size = Convert.ToInt32(d2.GetFunction("SELECT RcptSize from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + ")"));

                string recenoString = receno.ToString();

                if (size != recenoString.Length && size > recenoString.Length)
                {
                    while (size != recenoString.Length)
                    {
                        recenoString = "0" + recenoString;
                    }
                }
                recno = recacr + recenoString;

                lstrcpt.Text = Convert.ToString(receno);
            }

            return recno;
        }
        catch (Exception ex) { return recno; }
    }
    private string getHeaderwiseReceiptNo()
    {
        string recno = string.Empty;
        lblaccid.Text = "";
        lstrcpt.Text = "";
        string accountid = "";
        lblaccid.Text = accountid;
        try
        {
            int receno = 0;
            string recacr = string.Empty;
            string recnoprev = string.Empty;
            string isheaderFk = GetSelectedItemsValue(cbl_grpheader);

            string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);

            DataSet dsFinHedDet = d2.select_method_wo_parameter("select distinct HeaderSettingFk from FM_HeaderFinCodeSettingsDet hs,FM_HeaderFinCodeSettings s where s.HeaderSettingPK=hs.HeaderSettingFK and HeaderFK in (" + isheaderFk + ") and CollegeCode=" + collegecode1 + " and FinyearFK=" + finYearid + "", "Text");

            if (dsFinHedDet.Tables.Count > 0 && dsFinHedDet.Tables[0].Rows.Count == 1 && rbl_headerselect.SelectedIndex == 1)
            {
                string secondreciptqurey = "select * from FM_HeaderFinCodeSettings where HeaderSettingPK =" + Convert.ToString(dsFinHedDet.Tables[0].Rows[0][0]) + " and FinyearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " ";
                DataSet dsrecYr = new DataSet();
                dsrecYr = d2.select_method_wo_parameter(secondreciptqurey, "Text");
                if (dsrecYr.Tables.Count > 0 && dsrecYr.Tables[0].Rows.Count > 0)
                {
                    recnoprev = Convert.ToString(dsrecYr.Tables[0].Rows[0]["RcptStNo"]);
                    if (recnoprev != "")
                    {
                        int recno_cur = Convert.ToInt32(recnoprev);
                        receno = recno_cur;
                    }
                    recacr = Convert.ToString(dsrecYr.Tables[0].Rows[0]["RcptAcr"]);

                    int size = Convert.ToInt32(dsrecYr.Tables[0].Rows[0]["Rcptsize"]);

                    string recenoString = receno.ToString();

                    if (size != recenoString.Length && size > recenoString.Length)
                    {
                        while (size != recenoString.Length)
                        {
                            recenoString = "0" + recenoString;
                        }
                    }
                    recno = recacr + recenoString;

                    lstrcpt.Text = Convert.ToString(receno);
                }
            }

            return recno;
        }
        catch (Exception ex) { return recno; }
    }
    public string generateChallanNo()
    {
        string recno = string.Empty;

        try
        {
            int receno = 0;
            string recacr = string.Empty;
            string recnoprev = string.Empty;

            string finYearid = d2.getCurrentFinanceYear(usercode, collegecode1);
            string accountid = "";// d2.GetFunction(" select acct_id from acctinfo where college_code ='" + collegecode1 + "'");

            string secondreciptqurey = "SELECT ChallanStNo from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + ")";
            DataSet dsrecYr = new DataSet();
            dsrecYr = d2.select_method_wo_parameter(secondreciptqurey, "Text");
            if (dsrecYr.Tables[0].Rows.Count > 0)
            {
                recnoprev = Convert.ToString(dsrecYr.Tables[0].Rows[0][0]);
                if (recnoprev != "")
                {
                    int recno_cur = Convert.ToInt32(recnoprev);
                    receno = recno_cur;
                }

                string acronymquery = d2.GetFunction("SELECT ChallanAcr from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + ")");
                recacr = acronymquery;

                int size = Convert.ToInt32(d2.GetFunction("SELECT  ChallanSize from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + " and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=" + finYearid + " and CollegeCode=" + collegecode1 + ")"));

                string recenoString = receno.ToString();

                if (size != recenoString.Length && size > recenoString.Length)
                {
                    while (size != recenoString.Length)
                    {
                        recenoString = "0" + recenoString;
                    }
                }
                recno = recacr + recenoString;

                Session["lastAccId"] = accountid;
                Session["lastCHlNO"] = receno;

            }

            return recno;
        }
        catch (Exception ex) { return recno; }
    }
    public string generateVendorCode()
    {
        string newitemcode = string.Empty;
        try
        {
            string selectquery = "select VenAcr,VenStNo,VenSize  from IM_CodeSettings  order by startdate desc";
            ds = d2.select_method_wo_parameter(selectquery, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                string itemacronym = Convert.ToString(ds.Tables[0].Rows[0]["VenAcr"]);
                string itemstarno = Convert.ToString(ds.Tables[0].Rows[0]["VenStNo"]);
                string itemsize = Convert.ToString(ds.Tables[0].Rows[0]["VenSize"]);
                if (itemacronym.Trim() != "" && itemstarno.Trim() != "") // Added by jairam
                {
                    selectquery = " select distinct top (1) VendorCode,vendorPK  from CO_VendorMaster where VendorCode like '" + Convert.ToString(itemacronym) + "%' order by vendorPK desc";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(selectquery, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        string itemcode = Convert.ToString(ds.Tables[0].Rows[0]["VendorCode"]);
                        string itemacr = Convert.ToString(itemacronym);
                        int len = itemacr.Length;
                        itemcode = itemcode.Remove(0, len);
                        int len1 = Convert.ToString(itemcode).Length;
                        string newnumber = Convert.ToString((Convert.ToInt32(itemcode) + 1));
                        len = Convert.ToString(newnumber).Length;
                        len1 = len1 - len;
                        if (len1 == 2)
                        {
                            newitemcode = "00" + newnumber;
                        }
                        else if (len1 == 1)
                        {
                            newitemcode = "0" + newnumber;
                        }
                        else if (len1 == 3)
                        {
                            newitemcode = "000" + newnumber;
                        }
                        else if (len1 == 4)
                        {
                            newitemcode = "0000" + newnumber;
                        }
                        else if (len1 == 5)
                        {
                            newitemcode = "00000" + newnumber;
                        }
                        else if (len1 == 6)
                        {
                            newitemcode = "000000" + newnumber;
                        }
                        else
                        {
                            newitemcode = Convert.ToString(newnumber);
                        }
                        if (newitemcode.Trim() != "")
                        {
                            newitemcode = itemacr + "" + newitemcode;
                        }
                    }
                    else
                    {
                        string itemacr = Convert.ToString(itemstarno);
                        int len = itemacr.Length;
                        string items = Convert.ToString(itemsize);
                        int len1 = Convert.ToInt32(items);
                        int size = len1 - len;
                        if (size == 2)
                        {
                            newitemcode = "00" + itemstarno;
                        }
                        else if (size == 1)
                        {
                            newitemcode = "0" + itemstarno;
                        }
                        else if (size == 3)
                        {
                            newitemcode = "000" + itemstarno;
                        }
                        else if (size == 4)
                        {
                            newitemcode = "0000" + itemstarno;
                        }
                        else if (size == 5)
                        {
                            newitemcode = "00000" + itemstarno;
                        }
                        else if (size == 6)
                        {
                            newitemcode = "000000" + itemstarno;
                        }
                        else
                        {
                            newitemcode = Convert.ToString(itemstarno);
                        }
                        newitemcode = Convert.ToString(itemacronym) + "" + Convert.ToString(newitemcode);
                    }
                }
            }
        }
        catch (Exception ex) { newitemcode = string.Empty; }
        return newitemcode;
    }
    private string GetSelectedItemsValue(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (sbSelected.Length == 0)
                    {
                        sbSelected.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        sbSelected.Append("," + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch (Exception ex) { sbSelected.Clear(); }
        return sbSelected.ToString();
    }
    private string GetSelectedItemsValueAsString(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (sbSelected.Length == 0)
                    {
                        sbSelected.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        sbSelected.Append("','" + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch { sbSelected.Clear(); }
        return sbSelected.ToString();
    }
    private string GetSelectedItemsText(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (sbSelected.Length == 0)
                    {
                        sbSelected.Append(Convert.ToString(cblSelected.Items[sel].Text));
                    }
                    else
                    {
                        sbSelected.Append("','" + Convert.ToString(cblSelected.Items[sel].Text));
                    }
                }
            }
        }
        catch { sbSelected.Clear(); }
        return sbSelected.ToString();
    }
    private List<string> GetSelectedItemsValueList(CheckBoxList cblSelected)
    {
        System.Collections.Generic.List<string> lsSelected = new System.Collections.Generic.List<string>();
        try
        {
            for (int list = 0; list < cblSelected.Items.Count; list++)
            {
                if (cblSelected.Items[list].Selected)
                {
                    lsSelected.Add(cblSelected.Items[list].Value);
                }
            }
        }
        catch { lsSelected.Clear(); }
        return lsSelected;
    }
    private List<string> GetSelectedItemsTextList(CheckBoxList cblSelected)
    {
        System.Collections.Generic.List<string> lsSelected = new System.Collections.Generic.List<string>();
        try
        {
            for (int list = 0; list < cblSelected.Items.Count; list++)
            {
                if (cblSelected.Items[list].Selected)
                {
                    lsSelected.Add(cblSelected.Items[list].Text);
                }
            }
        }
        catch { lsSelected.Clear(); }
        return lsSelected;
    }
    private List<string> GetItemsValueList(CheckBoxList cblItems)
    {
        System.Collections.Generic.List<string> lsItems = new System.Collections.Generic.List<string>();
        try
        {
            for (int list = 0; list < cblItems.Items.Count; list++)
            {
                lsItems.Add(cblItems.Items[list].Value);
            }
        }
        catch { lsItems.Clear(); }
        return lsItems;
    }
    private void CallCheckBoxChangedEvent(CheckBoxList cbl, CheckBox cb, TextBox tb, string dispString)
    {
        try
        {
            tb.Text = dispString;
            if (cb.Checked)
            {
                for (int i = 0; i < cbl.Items.Count; i++)
                {
                    cbl.Items[i].Selected = true;
                }
                tb.Text = dispString + "(" + cbl.Items.Count + ")";
            }
            else
            {
                for (int i = 0; i < cbl.Items.Count; i++)
                {
                    cbl.Items[i].Selected = false;
                }
            }
        }
        catch { }
    }
    private void CallCheckBoxListChangedEvent(CheckBoxList cbl, CheckBox cb, TextBox tb, string dispString)
    {
        try
        {
            cb.Checked = false;
            tb.Text = dispString;
            int count = 0;
            for (int i = 0; i < cbl.Items.Count; i++)
            {
                if (cbl.Items[i].Selected == true)
                {
                    count++;
                }
            }
            tb.Text = dispString + "(" + count + ")";
            if (count == cbl.Items.Count)
            {
                cb.Checked = true;
            }
        }
        catch { }
    }
    private void createLogo(string collCode)
    {
        try
        {
            string logoQ = "select logo1,logo2 from collinfo where college_code=" + collCode + "";
            DataSet dsLogo = d2.select_method_wo_parameter(logoQ, "Text");
            if (dsLogo.Tables.Count > 0 && dsLogo.Tables[0].Rows.Count > 0)
            {
                string logoname = Server.MapPath("~/FinanceLogo/Left_Logo" + collCode + ".jpeg");
                if (File.Exists(logoname))
                {
                    File.Delete(logoname);
                }
                if (!File.Exists(logoname))
                {
                    MemoryStream memoryStream = new MemoryStream();
                    byte[] file = (byte[])dsLogo.Tables[0].Rows[0]["logo1"];
                    memoryStream.Write(file, 0, file.Length);
                    if (file.Length > 0)
                    {
                        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                        System.Drawing.Image thumb = imgx.GetThumbnailImage(400, 400, null, IntPtr.Zero);
                        thumb.Save(logoname, System.Drawing.Imaging.ImageFormat.Jpeg);

                    }
                    memoryStream.Dispose();
                    memoryStream.Close();
                }
                logoname = Server.MapPath("~/FinanceLogo/Right_Logo" + collCode + ".jpeg");
                if (File.Exists(logoname))
                {
                    File.Delete(logoname);
                }
                if (!File.Exists(logoname))
                {
                    MemoryStream memoryStream = new MemoryStream();
                    byte[] file = (byte[])dsLogo.Tables[0].Rows[0]["logo2"];
                    memoryStream.Write(file, 0, file.Length);
                    if (file.Length > 0)
                    {
                        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                        System.Drawing.Image thumb = imgx.GetThumbnailImage(400, 400, null, IntPtr.Zero);
                        thumb.Save(logoname, System.Drawing.Imaging.ImageFormat.Jpeg);

                    }
                    memoryStream.Dispose();
                    memoryStream.Close();
                }
            }
        }
        catch (Exception ex) { }
    }
    private string getAppNoFromApplyn(string app_formno)
    {
        string appno = "0";
        appno = d2.GetFunction("select app_no from applyn where app_formno='" + app_formno + "'  and college_code='" + collegecode1 + "' ").Trim();
        return appno;
    }
    private byte StudentAppliedShorlistAdmit()
    {

        string Q = "select LinkValue from New_InsSettings where LinkName='StudentAppliedShorlistAdmit' and user_code ='" + usercode + "' --and college_code ='" + collegecode1 + "'";
        byte moveVal = 0;
        byte.TryParse(d2.GetFunction(Q.Trim()), out moveVal);
        return moveVal;
    }
    private static byte statStudentAppliedShorlistAdmit()
    {

        string Q = "select LinkValue from New_InsSettings where LinkName='StudentAppliedShorlistAdmit' and user_code ='" + usercodestat + "' --and college_code ='" + collegecodestat + "'";
        byte moveVal = 0;
        byte.TryParse(d22.GetFunction(Q.Trim()), out moveVal);
        return moveVal;
    }
    private string termDisplay(string cursem)
    {
        string Termdisp = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DisplayTermForChallan' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ").Trim();

        string linkvalue = d2.GetFunction("select LinkValue from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'");
        if (linkvalue.Trim() == "1")
        {
            if (Termdisp == "1")
            {
                try
                {
                    double cursemester = Convert.ToDouble(cursem);

                    if (cursemester % 2 == 1)
                    {
                        cursem = romanLetter(cursemester.ToString()) + " & " + romanLetter((cursemester + 1).ToString());
                    }
                    else
                    {
                        cursem = romanLetter((cursemester - 1).ToString()) + " & " + romanLetter(cursemester.ToString());
                    }
                }
                catch { }
                cursem = "Term : " + cursem;
            }
            else
            {
                cursem = "Year : " + romanLetter(returnYearforSem(cursem));
            }
        }
        else
        {
            if (Termdisp == "1")
            {
                cursem = "Term : " + romanLetter(cursem);
            }
            else
            {
                cursem = "Semester : " + romanLetter(cursem);
            }
        }
        return cursem;
    }
    private string recptHeader(string transcode)
    {
        string recptHeaders = string.Empty;
        try
        {
            DataSet dsHeaders = new DataSet();
            dsHeaders = d2.select_method_wo_parameter("select distinct HeaderName from fm_headermaster h,ft_findailytransaction d where h.headerpk=d.headerfk and d.TransCode='" + transcode + "'", "Text");
            if (dsHeaders.Tables.Count > 0 && dsHeaders.Tables[0].Rows.Count > 0)
            {
                StringBuilder sbHead = new StringBuilder();
                for (int head = 0; head < dsHeaders.Tables[0].Rows.Count; head++)
                {
                    if (sbHead.Length == 0)
                    {
                        sbHead.Append(Convert.ToString(dsHeaders.Tables[0].Rows[head][0]));
                    }
                    else
                    {
                        sbHead.Append("," + Convert.ToString(dsHeaders.Tables[0].Rows[head][0]));
                    }
                }
                recptHeaders = sbHead.ToString();
            }
        }
        catch { recptHeaders = string.Empty; }
        return recptHeaders;
    }
    private string recptHeaderAl(ArrayList alHeaders)
    {
        string recptHeaders = string.Empty;
        try
        {

            if (alHeaders.Count > 0)
            {
                StringBuilder sbHead = new StringBuilder();
                for (int head = 0; head < alHeaders.Count; head++)
                {
                    if (sbHead.Length == 0)
                    {
                        sbHead.Append(Convert.ToString(alHeaders[head]));
                    }
                    else
                    {
                        sbHead.Append("," + Convert.ToString(alHeaders[head]));
                    }
                }
                recptHeaders = sbHead.ToString();
            }
        }
        catch { recptHeaders = string.Empty; }
        return recptHeaders;
    }
    private string studentCollType(string appNo, bool reg)
    {
        string type = string.Empty;
        string value;
        if (reg)
        {
            value = d2.GetFunction("select c.type from registration a,Degree d,course c where a.degree_code=d.degree_code and c.course_id=d.course_id and a.app_no='" + appNo + "'").Trim();
        }
        else
        {
            value = d2.GetFunction("select c.type from applyn a,Degree d,course c where a.degree_code=d.degree_code and c.course_id=d.course_id and a.app_no='" + appNo + "'").Trim();
        }
        if (value != "0")
            type = value;
        return type;
    }


    //Admission Number Generation while saving receipt
    private bool getAdmGenOnRcpt(string collegeCode, string userCode, ref string batch)
    {
        bool isAdmGenOnRcpt = false;
        try
        {
            string[] prevVal = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='AdmissionNoGenerateOnReceipt' and college_code ='" + collegeCode + "' and user_code='" + userCode + "' ").Trim().Split(',');
            if (prevVal.Length == 2)
            {
                if (prevVal[0] == "1")
                {
                    isAdmGenOnRcpt = true;
                    batch = prevVal[1];
                }
            }
        }
        catch { }

        return isAdmGenOnRcpt;
    }
    private bool isAdmNoNotGenerated(string appNo, string batch, ref string app_formNo)
    {
        bool isNotGenerated = false;
        try
        {
            app_formNo = d2.GetFunction("select a.app_formno,a.app_no,a.batch_year from applyn a where isnull(a.is_enroll,0) <> '2' and a.app_no = '" + appNo + "'  and a.batch_year='" + batch + "'  and a.college_code='" + collegecode1 + "'").Trim();
            if (app_formNo != string.Empty && app_formNo != "0")
            {
                isNotGenerated = true;
            }
        }
        catch { }
        return isNotGenerated;
    }
    protected double collegewiseapplicationRights()
    {
        double RightsCode = 0;
        double.TryParse(Convert.ToString(d2.GetFunction("select linkvalue from New_InsSettings where LinkName='CollegewiseAdmissionNoRights' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'")), out RightsCode);
        return RightsCode;
    }
    private string generateAdmissionNo(string collegecode, string degreecode, string ddl_batch)
    {
        string orginalapplication_number = "";
        try
        {
            Hashtable hat = new Hashtable();
            hat.Add(1, "0");
            hat.Add(2, "00");
            hat.Add(3, "000");
            hat.Add(4, "0000");
            hat.Add(5, "00000");
            hat.Add(6, "000000");
            hat.Add(7, "0000000");
            hat.Add(8, "00000000");
            hat.Add(9, "000000000");
            hat.Add(10, "0000000000");
            bool check = false;
            int application_No = 0;
            string appCodetemp = string.Empty;
            string selectquery = string.Empty;
            if (collegewiseapplicationRights() == 1)
            {
                appCodetemp = d2.GetFunction("select appcode from code_generation where  batch_year='" + ddl_batch + "' and college_code='" + collegecode + "' and app_code_flag ='1' and isnull(iscollege,'0')='1'");
                selectquery = "select top 1 r.roll_admit  from Registration r,applyn a where  a.app_no=r.App_No and isnull(a.is_enroll,0) = '2' and  r.roll_admit <>'' and r.roll_admit like '%" + appCodetemp + "%' and r.batch_year='" + ddl_batch + "'  and r.college_code='" + collegecode + "' order by r.roll_admit desc";

                selectquery = selectquery + " select appcode,app_startwith,app_serial from code_generation where  batch_year='" + ddl_batch + "' and college_code='" + collegecode + "'  and app_code_flag ='1' and isnull(iscollege,'0')='1'";
            }
            else
            {
                appCodetemp = d2.GetFunction("select appcode from code_generation where  batch_year='" + ddl_batch + "' and degree_code='" + degreecode + "' and college_code='" + collegecode + "' and app_code_flag ='1'");
                selectquery = "select top 1 r.roll_admit  from Registration r,applyn a where  a.app_no=r.App_No and isnull(a.is_enroll,0) = '2' and  r.roll_admit <>'' and r.roll_admit like '%" + appCodetemp + "%' and r.batch_year='" + ddl_batch + "' and r.degree_code='" + degreecode + "' and r.college_code='" + collegecode + "' order by r.roll_admit desc";
                selectquery = selectquery + " select appcode,app_startwith,app_serial from code_generation where  batch_year='" + ddl_batch + "' and degree_code='" + degreecode + "' and college_code='" + collegecode + "'  and app_code_flag ='1'";
            }
            ds.Clear();
            ds = d2.select_method_wo_parameter(selectquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                // application_No = Convert.ToInt32(ds.Tables[0].Rows[0][0]);
                string applno = Convert.ToString(ds.Tables[0].Rows[0][0]);
                if (ds.Tables[1].Rows.Count > 0)
                {
                    string appcode = Convert.ToString(ds.Tables[1].Rows[0]["appcode"]);
                    string appsiz2 = Convert.ToString(ds.Tables[1].Rows[0]["app_serial"]);
                    int len = appcode.Length;
                    applno = applno.Remove(0, len);
                    string newnumber = Convert.ToString((Convert.ToInt32(applno) + 1));
                    int val = newnumber.Length;
                    if (val == Convert.ToInt32(appsiz2))
                        orginalapplication_number = appcode + "" + newnumber;
                    else
                    {
                        int remain = Convert.ToInt32(appsiz2) - val;
                        string addnumber = Convert.ToString(hat[remain]);
                        addnumber = addnumber + "" + newnumber;
                        orginalapplication_number = appcode + "" + addnumber;
                    }
                }
                else
                    check = true;
            }
            else
                check = true;

            if (check && ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
            {
                string appcode = Convert.ToString(ds.Tables[1].Rows[0]["appcode"]);
                string appsiz2 = Convert.ToString(ds.Tables[1].Rows[0]["app_startwith"]);
                int len = appsiz2.Length;
                if (len == Convert.ToInt32(ds.Tables[1].Rows[0]["app_serial"]))
                {
                    orginalapplication_number = appcode + "" + appsiz2;
                }
                else
                {
                    int remain = Convert.ToInt32(ds.Tables[1].Rows[0]["app_serial"]) - len;
                    string addnumber = Convert.ToString(hat[remain]);
                    addnumber = addnumber + "" + appsiz2;
                    orginalapplication_number = appcode + "" + addnumber;
                }
            }
        }
        catch { }
        return orginalapplication_number;
    }
    //************************************************************//
    //     Code Ended by Idhris - Last modified  10/12/2016       //
    //************************************************************//  
    private double retBalanceOld(string appNo)
    {
        double ovBalAMt = 0;
        if (BalanceType == 1)
        {
            double.TryParse(d2.GetFunction(" select sum(isnull(totalAmount,0)-isnull(paidAmount,0)) as BalanceAmt from ft_feeallot where app_no =" + appNo + " and isnull(istransfer,'0')='0'"), out ovBalAMt);
        }
        return ovBalAMt;
    }


    //****************************************** 23-08-2016
    #region for For Focus Go Button
    protected void ddl_ledgeSearch_Change(object sender, EventArgs e)
    {
        setSearchHeaders();
        //this.Form.DefaultButton = "btn_ledgesearch";
    }
    #endregion
    protected string getMonth(string monthcode)
    {
        string Month = string.Empty;
        try
        {
            switch (monthcode)
            {
                case "1":
                    Month = "JAN";
                    break;
                case "2":
                    Month = "FEB";
                    break;
                case "3":
                    Month = "MAR";
                    break;
                case "4":
                    Month = "APR";
                    break;
                case "5":
                    Month = "MAY";
                    break;
                case "6":
                    Month = "JUN";
                    break;
                case "7":
                    Month = "JUL";
                    break;
                case "8":
                    Month = "AUG";
                    break;
                case "9":
                    Month = "SEP";
                    break;
                case "10":
                    Month = "OCT";
                    break;
                case "11":
                    Month = "NOV";
                    break;
                case "12":
                    Month = "DEC";
                    break;
                default:
                    Month = "-";
                    break;

            }
        }
        catch { }
        return Month;
    }
    public bool admissionNoGeneration()
    {
        bool SetFlag = false;
        try
        {
            string value = d2.GetFunction("select value from Master_Settings where settings ='Admission No Rights' and usercode ='" + usercode + "'");
            if (value.Trim() == "1")
            {
                SetFlag = true;
            }
        }
        catch { }
        return SetFlag;
    }
    //added by sudhagar 08-12-2016

    //Scheme Admission
    #region Scheme Admission Settings added by Idhris 28-12-2016
    private void showSchemeSettings(string collegecode, string usercode)
    {
        if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ShowSchemeSettings' and user_code ='" + usercode + "' -- and college_code ='" + collegecode + "'").Trim() == "1")
        {
            lnkOpenSchemeSettings.Visible = true;
        }
        else
        {
            lnkOpenSchemeSettings.Visible = false;
        }
    }
    string collegecode1Scheme = string.Empty;
    static string clgcodeScheme = string.Empty;
    static string btyrScheme = string.Empty;

    ReuasableMethods reuse = new ReuasableMethods();

    protected void lnkOpenSchemeSettings_OnClick(object sender, EventArgs e)
    {
        divSchemeSettings.Visible = true;

        //if (!IsPostBack)
        //{
        setLabelText();
        bindcollegeScheme();
        if (ddlcollegeScheme.Items.Count > 0)
        {
            collegecode1Scheme = Convert.ToString(ddlcollegeScheme.SelectedItem.Value);
            clgcodeScheme = Convert.ToString(ddlcollegeScheme.SelectedItem.Value);
        }
        //}
        //if (ddlcollegeScheme.Items.Count > 0)
        //{
        //    collegecode1Scheme = Convert.ToString(ddlcollegeScheme.SelectedItem.Value);
        //    clgcodeScheme = Convert.ToString(ddlcollegeScheme.SelectedItem.Value);
        //}
    }
    protected void imgSchemeSettingsClose_Click(object sender, EventArgs e)
    {
        divSchemeSettings.Visible = false;
    }
    protected void bindcollegeScheme()
    {
        ddlcollegeScheme.Items.Clear();
        reuse.bindCollegeToDropDown(usercode, ddlcollegeScheme);
    }
    #region ddl reason
    protected void ddl_type_SelectedIndexChanged(object sender, EventArgs e)
    {

    }
    protected void btnplus_Click(object sender, EventArgs e)
    {
        plusdivScheme.Visible = true;
        panel_addgroupScheme.Visible = true;
        lbl_addgroupScheme.Text = "Scheme";
        lblerrSchemeor.Visible = false;
    }
    protected void btnminus_Click(object sender, EventArgs e)
    {
        if (ddl_reasonScheme.SelectedIndex == -1)
        {
            imgdiv2Scheme.Visible = true;
            lbl_alertScheme.Text = "No records found";
        }
        else if (ddl_reasonScheme.SelectedIndex == 0)
        {
            imgdiv2Scheme.Visible = true;
            lbl_alertScheme.Text = "Select any record";
        }
        else if (ddl_reasonScheme.SelectedIndex != 0)
        {
            btn_delScheme.Visible = true;
            btn_okScheme.Visible = true;
            lbl_delScheme.Text = "Do You Want Delete The Record";
            alertdelScheme.Visible = true;
            lbl_delScheme.Visible = true;
            btn_okScheme.Text = "Cancel";
        }
        else
        {
            imgdiv2Scheme.Visible = true;
            lbl_alertScheme.Text = "No records found";
        }
    }
    public void btn_delScheme_Click(object sender, EventArgs e)
    {
        if (ddl_reasonScheme.SelectedIndex != 0)
        {
            string sql = "delete from textvaltable where TextCode='" + ddl_reasonScheme.SelectedItem.Value.ToString() + "' and TextCriteria='Schm' and college_code='" + collegecode1Scheme + "' ";
            int delete = d2.update_method_wo_parameter(sql, "TEXT");
            if (delete != 0)
            {

                alertdelScheme.Visible = true;
                btn_delScheme.Visible = false;
                btn_okScheme.Visible = true;
                lbl_delScheme.Text = "Deleted Sucessfully";
                lbl_delScheme.Visible = true;
                btn_okScheme.Text = "OK";
            }
            else
            {
                alertdelScheme.Visible = false;
                imgdiv2Scheme.Visible = true;
                lbl_alertScheme.Text = "No records found";
            }

            loaddescScheme();
        }

    }
    public void btn_okScheme_Click(object sender, EventArgs e)
    {
        alertdelScheme.Visible = false;
        lbl_delScheme.Visible = false;
        btn_okScheme.Visible = false;

    }
    public void loaddescScheme()
    {
        ddl_reasonScheme.Items.Clear();
        ds.Tables.Clear();
        string sql = "select TextCode,TextVal from TextValTable where TextCriteria ='Schm' and college_code ='" + collegecode1Scheme + "'";
        ds = d2.select_method_wo_parameter(sql, "TEXT");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddl_reasonScheme.DataSource = ds;
            ddl_reasonScheme.DataTextField = "TextVal";
            ddl_reasonScheme.DataValueField = "TextCode";
            ddl_reasonScheme.DataBind();
            ddl_reasonScheme.Items.Insert(0, new ListItem("--Select--", "0"));
        }
        else
        {
            ddl_reasonScheme.Items.Insert(0, new ListItem("--Select--", "0"));
        }

    }
    protected void btn_addgroup_Click(object sender, EventArgs e)
    {
        try
        {
            if (txt_addgroupScheme.Text != "")
            {
                string sql = "if exists ( select * from TextValTable where TextVal ='" + txt_addgroupScheme.Text + "' and TextCriteria ='Schm' and college_code ='" + collegecode1Scheme + "') update TextValTable set TextVal ='" + txt_addgroupScheme.Text + "' where TextVal ='" + txt_addgroupScheme.Text + "' and TextCriteria ='Schm' and college_code ='" + collegecode1Scheme + "' else insert into TextValTable (TextVal,TextCriteria,college_code) values ('" + txt_addgroupScheme.Text + "','Schm','" + collegecode1Scheme + "')";
                int insert = d2.update_method_wo_parameter(sql, "TEXT");
                if (insert != 0)
                {
                    imgdiv2Scheme.Visible = true;
                    lbl_alertScheme.Text = "Saved sucessfully";
                    txt_addgroupScheme.Text = "";
                    plusdivScheme.Visible = false;
                    panel_addgroupScheme.Visible = false;
                }
                loaddescScheme();
            }
            else
            {
                imgdiv2Scheme.Visible = true;
                lbl_alertScheme.Text = "Enter the description";
            }
        }

        catch
        {
        }
    }
    protected void btn_exitaddgroup_Click(object sender, EventArgs e)
    {
        plusdivScheme.Visible = false;
        panel_addgroupScheme.Visible = false;
        txt_addgroupScheme.Text = "";
    }
    #endregion

    protected void txtapplScheme_Changed(object sender, EventArgs e)
    {
        try
        {

            string applno = Convert.ToString(txtapplScheme.Text);
            if (!string.IsNullOrEmpty(applno))
            {
                string SelQ = " select app_no,app_formno,stud_name,a.degree_code,batch_year,a.college_code,c.Course_Name,dt.Dept_Name from applyn a,Degree d,Department dt,Course c where a.degree_code=d.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and app_formno='" + applno + "'  and isnull(is_enroll,'0')<>'2' and a.college_code='" + collegecode1Scheme + "'";
                //and isnull(Admission_Status,'0')<>'1' and isnull(selection_status,'0')<>'1'
                ds.Clear();
                ds = d2.select_method_wo_parameter(SelQ, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    lbstudnameScheme.Text = Convert.ToString(ds.Tables[0].Rows[0]["stud_name"]);
                    lbappnoScheme.Text = Convert.ToString(ds.Tables[0].Rows[0]["app_no"]);
                    lbscltypeScheme.Text = Convert.ToString(ds.Tables[0].Rows[0]["Course_Name"]);
                    lbstandScheme.Text = Convert.ToString(ds.Tables[0].Rows[0]["Dept_Name"]);
                    lbldegreeScheme.Text = Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]);
                    lbyearScheme.Text = Convert.ToString(ds.Tables[0].Rows[0]["batch_year"]);
                    btyrScheme = Convert.ToString(ds.Tables[0].Rows[0]["batch_year"]);
                    lblclgSchemecode.Text = Convert.ToString(ds.Tables[0].Rows[0]["college_code"]);
                    collegecode1Scheme = Convert.ToString(ds.Tables[0].Rows[0]["college_code"]);
                    // Session["collegecode"] = collegecode1Scheme;
                    txtamountScheme.Text = string.Empty;
                    tddet.Visible = true;
                    loaddescScheme();
                }
                else
                {
                    tddet.Visible = false;
                    txtapplScheme.Text = string.Empty;
                    imgdiv2Scheme.Visible = true;
                    lbl_alertScheme.Text = "Please Enter Valid Application No";
                }
            }
            else
            {
                tddet.Visible = false;
                txtapplScheme.Text = string.Empty;
                imgdiv2Scheme.Visible = true;
                lbl_alertScheme.Text = "Please Enter Valid Application No";
            }
        }
        catch { }
    }

    protected void btnadmitScheme_Click(object sender, EventArgs e)
    {
        admitDetailsScheme();
    }

    protected void admitDetailsScheme()
    {
        bool save = false;
        string applno = Convert.ToString(txtapplScheme.Text);
        string appNo = Convert.ToString(lbappnoScheme.Text);
        string degCode = Convert.ToString(lbldegreeScheme.Text);
        string Year = Convert.ToString(lbyearScheme.Text);
        string collegecode = Convert.ToString(lblclgSchemecode.Text);
        string Scheme = string.Empty;
        if (ddl_reasonScheme.Items.Count > 0 && ddl_reasonScheme.SelectedItem.Text != "--Select--")
            Scheme = Convert.ToString(ddl_reasonScheme.SelectedItem.Value);
        double Amount = 0;
        double.TryParse(Convert.ToString(txtamountScheme.Text), out Amount);
        string admissionNo = string.Empty;
        if (cbincadmisScheme.Checked)
            admissionNo = Convert.ToString(txtadmnoScheme.Text);

        if (validation(applno, degCode, Year, Scheme, Amount, admissionNo))
        {
            save = admitToRegistration(appNo, collegecode, degCode, Scheme, Amount, ref admissionNo);
            if (save == true)
            {
                ClearScheme();
                imgdiv2Scheme.Visible = true;
                lbl_alertScheme.Text = "Admitted Successfully. Your Admission No: " + admissionNo + "";
            }
        }
        else
        {
            imgdiv2Scheme.Visible = true;
            lbl_alertScheme.Text = "Please Fill The All Field";
        }

    }

    private bool admitToRegistration(string appNo, string collegecode, string degCode, string Scheme, double Amount, ref string rolladmit)
    {
        bool blAppNo = false;
        try
        {
            #region registration
            if (true)
            {
                //Admit               
                string stud_name = string.Empty;
                string app_fromno = string.Empty;
                string batchYr = string.Empty;
                string Mode = string.Empty;
                string seattype = string.Empty;
                string cursem = string.Empty;
                string selQ = "select seattype,stud_name,app_formno,batch_year,mode,current_semester from applyn where app_no ='" + appNo + "'";
                DataSet dsval = d2.select_method_wo_parameter(selQ, "Text");
                if (dsval.Tables.Count > 0 && dsval.Tables[0].Rows.Count > 0)
                {
                    seattype = Convert.ToString(dsval.Tables[0].Rows[0]["seattype"]);
                    stud_name = Convert.ToString(dsval.Tables[0].Rows[0]["stud_name"]);
                    app_fromno = Convert.ToString(dsval.Tables[0].Rows[0]["app_formno"]);
                    batchYr = Convert.ToString(dsval.Tables[0].Rows[0]["batch_year"]);
                    Mode = Convert.ToString(dsval.Tables[0].Rows[0]["mode"]);
                    cursem = Convert.ToString(dsval.Tables[0].Rows[0]["current_semester"]);
                }
                if (string.IsNullOrEmpty(Mode))
                    Mode = "1";

                string approve = " update applyn set Admission_Status='1',selection_status='1',is_enroll='2',seattype='" + seattype + "',AdmitedDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "' where app_no ='" + Convert.ToString(appNo) + "'";
                int a = d2.update_method_wo_parameter(approve, "text");

                if (!cbincadmisScheme.Checked)
                {
                    if (admissionNoGenerationScheme() == 1)
                        rolladmit = generateAdmissionNo(collegecode, degCode, batchYr);
                    else
                        rolladmit = app_fromno;
                }
                if (rolladmit.Trim() == "0" || string.IsNullOrEmpty(rolladmit))
                    rolladmit = app_fromno;

                string regEntry = "  if exists(select * from Registration where App_No='" + appNo + "' and isnull(IsSchemeAdmission,'0')='1')  delete from Registration where App_No='" + appNo + "' and isnull(IsSchemeAdmission,'0')='1' insert into Registration (App_No,Adm_Date,Roll_Admit,Roll_No,RollNo_Flag,Reg_No,Stud_Name,Batch_Year,degree_code,college_code,CC,DelFlag,Exam_Flag,Current_Semester,mode,IsSchemeAdmission,IsSchemeCode,IsSchemeAmount)values('" + appNo + "','" + System.DateTime.Now.ToString("yyy/MM/dd") + "','" + rolladmit + "','" + app_fromno + "','1','" + app_fromno + "','" + stud_name + "','" + batchYr + "','" + degCode + "','" + collegecode + "','0','0','OK','" + cursem + "','" + Mode + "','1','" + Scheme + "','" + Amount + "')";
                int s = d2.update_method_wo_parameter(regEntry, "Text");

                deleteFeeData(appNo);

                blAppNo = true;
            }
            #endregion
        }
        catch { }
        return blAppNo;
    }
    //Added by Idhris 30-12-2016
    private void deleteFeeData(string appNo)
    {
        try
        {
            string delQ = "if exists (select top 1 App_No from FT_FeeAllot where App_No='" + appNo + "' and isnull(istransfer,'0')='0') delete  from FT_FeeAllot where App_No='" + appNo + "' and isnull(istransfer,'0')='0'; if exists (select top 1 App_No from FT_FinDailyTransaction where App_No = '" + appNo + "') delete  from FT_FinDailyTransaction where App_No='" + appNo + "'; if exists (select top 1 App_No from FT_ChallanDet where App_No = '" + appNo + "') delete  from FT_ChallanDet where App_No='" + appNo + "';";
            d2.update_method_wo_parameter(delQ, "Text");
        }
        catch { }
    }

    protected int admissionNoGenerationScheme()
    {
        int admitValue = 0;
        int.TryParse(Convert.ToString(d2.GetFunction("select value from Master_Settings where settings ='Admission No Rights' and usercode ='" + usercode + "'")), out admitValue);
        return admitValue;
    }

    private bool validation(string applno, string degCode, string Year, string Scheme, double Amount, string admissionNo)
    {
        bool check = false;
        if (!string.IsNullOrEmpty(applno) && !string.IsNullOrEmpty(degCode) && !string.IsNullOrEmpty(Year) && !string.IsNullOrEmpty(Scheme) && Amount != 0)
        {
            if (cbincadmisScheme.Checked)
            {
                if (!string.IsNullOrEmpty(admissionNo))
                    check = true;
                else
                    check = false;
            }
            else
                check = true;
        }
        return check;

    }

    #region admission no generation
    protected double collegewiseapplicationRights(string collegecode)
    {
        double RightsCode = 0;
        double.TryParse(Convert.ToString(d2.GetFunction("select linkvalue from New_InsSettings where LinkName='CollegewiseAdmissionNoRights' and user_code ='" + usercode + "' and college_code ='" + collegecode + "'")), out RightsCode);
        return RightsCode;
    }

    //private string generateAdmissionNo(string collegecode, string degreecode, string ddl_batch)
    //{
    //    string orginalapplication_number = "";
    //    try
    //    {
    //        Hashtable hat = new Hashtable();
    //        hat.Add(1, "0");
    //        hat.Add(2, "00");
    //        hat.Add(3, "000");
    //        hat.Add(4, "0000");
    //        hat.Add(5, "00000");
    //        hat.Add(6, "000000");
    //        hat.Add(7, "0000000");
    //        hat.Add(8, "00000000");
    //        hat.Add(9, "000000000");
    //        hat.Add(10, "0000000000");
    //        bool check = false;
    //        int application_No = 0;
    //        string appCodetemp = string.Empty;
    //        string selectquery = string.Empty;
    //        if (collegewiseapplicationRights(collegecode) == 1)
    //        {
    //            appCodetemp = d2.GetFunction("select appcode from code_generation where  batch_year='" + ddl_batch + "' and college_code='" + collegecode + "' and app_code_flag ='1' and isnull(iscollege,'0')='1'");
    //            selectquery = "select top 1 r.roll_admit  from Registration r,applyn a where  a.app_no=r.App_No and isnull(a.is_enroll,0) = '2' and  r.roll_admit <>'' and r.roll_admit like '%" + appCodetemp + "%' and r.batch_year='" + ddl_batch + "'  and r.college_code='" + collegecode + "' order by r.roll_admit desc";

    //            selectquery = selectquery + " select appcode,app_startwith,app_serial from code_generation where  batch_year='" + ddl_batch + "' and college_code='" + collegecode + "'  and app_code_flag ='1' and isnull(iscollege,'0')='1'";
    //        }
    //        else
    //        {
    //            appCodetemp = d2.GetFunction("select appcode from code_generation where  batch_year='" + ddl_batch + "' and degree_code='" + degreecode + "' and college_code='" + collegecode + "' and app_code_flag ='1'");
    //            selectquery = "select top 1 r.roll_admit  from Registration r,applyn a where  a.app_no=r.App_No and isnull(a.is_enroll,0) = '2' and  r.roll_admit <>'' and r.roll_admit like '%" + appCodetemp + "%' and r.batch_year='" + ddl_batch + "' and r.degree_code='" + degreecode + "' and r.college_code='" + collegecode + "' order by r.roll_admit desc";
    //            selectquery = selectquery + " select appcode,app_startwith,app_serial from code_generation where  batch_year='" + ddl_batch + "' and degree_code='" + degreecode + "' and college_code='" + collegecode + "'  and app_code_flag ='1'";
    //        }
    //        ds.Clear();
    //        ds = d2.select_method_wo_parameter(selectquery, "Text");
    //        if (ds.Tables[0].Rows.Count > 0)
    //        {
    //            // application_No = Convert.ToInt32(ds.Tables[0].Rows[0][0]);
    //            string applno = Convert.ToString(ds.Tables[0].Rows[0][0]);
    //            if (ds.Tables[1].Rows.Count > 0)
    //            {
    //                string appcode = Convert.ToString(ds.Tables[1].Rows[0]["appcode"]);
    //                string appsiz2 = Convert.ToString(ds.Tables[1].Rows[0]["app_serial"]);
    //                int len = appcode.Length;
    //                applno = applno.Remove(0, len);
    //                string newnumber = Convert.ToString((Convert.ToInt32(applno) + 1));
    //                int val = newnumber.Length;
    //                if (val == Convert.ToInt32(appsiz2))
    //                    orginalapplication_number = appcode + "" + newnumber;
    //                else
    //                {
    //                    int remain = Convert.ToInt32(appsiz2) - val;
    //                    string addnumber = Convert.ToString(hat[remain]);
    //                    addnumber = addnumber + "" + newnumber;
    //                    orginalapplication_number = appcode + "" + addnumber;
    //                }
    //            }
    //            else
    //                check = true;
    //        }
    //        else
    //            check = true;

    //        if (check && ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
    //        {
    //            string appcode = Convert.ToString(ds.Tables[1].Rows[0]["appcode"]);
    //            string appsiz2 = Convert.ToString(ds.Tables[1].Rows[0]["app_startwith"]);
    //            int len = appsiz2.Length;
    //            if (len == Convert.ToInt32(ds.Tables[1].Rows[0]["app_serial"]))
    //            {
    //                orginalapplication_number = appcode + "" + appsiz2;
    //            }
    //            else
    //            {
    //                int remain = Convert.ToInt32(ds.Tables[1].Rows[0]["app_serial"]) - len;
    //                string addnumber = Convert.ToString(hat[remain]);
    //                addnumber = addnumber + "" + appsiz2;
    //                orginalapplication_number = appcode + "" + addnumber;
    //            }
    //        }
    //    }
    //    catch { }
    //    return orginalapplication_number;
    //}
    #endregion

    protected void btnclearScheme_Click(object sender, EventArgs e)
    {
        ClearScheme();
    }
    private void ClearScheme()
    {
        txtapplScheme.Text = string.Empty;
        lbstudnameScheme.Text = string.Empty;
        lbappnoScheme.Text = string.Empty;
        lbscltypeScheme.Text = string.Empty;
        lbstandScheme.Text = string.Empty;
        lbldegreeScheme.Text = string.Empty;
        lbyearScheme.Text = string.Empty;
        lblclgSchemecode.Text = string.Empty;
        ddl_reasonScheme.SelectedIndex = 0;
        txtamountScheme.Text = string.Empty;
        txtadmnoScheme.Text = string.Empty;
        btyrScheme = string.Empty;
        tddet.Visible = false;
    }
    protected void btn_errorcloseScheme_Click(object sender, EventArgs e)
    {
        imgdiv2Scheme.Visible = false;
    }
    //added by sudhagar 27.12.2016
    protected void cbincamdis_Changed(object sender, EventArgs e)
    {
        if (cbincadmisScheme.Checked)
        {
            txtadmnoScheme.Enabled = true;
            txtadmnoScheme.Text = string.Empty;
        }
        else
        {
            txtadmnoScheme.Enabled = false;
            txtadmnoScheme.Text = string.Empty;
        }
    }

    private void setLabelText()
    {
        string grouporusercode = string.Empty;
        if (Session["group_code"] != null && (Convert.ToString(Session["group_code"]).Trim() != "") && (Convert.ToString(Session["group_code"]).Trim() != "0") && (Convert.ToString(Session["group_code"]).Trim() != "-1"))
        {
            grouporusercode = " group_code=" + Convert.ToString(Session["group_code"]).Trim() + "";
        }
        else if (Session["usercode"] != null)
        {
            grouporusercode = " usercode=" + Convert.ToString(Session["usercode"]).Trim() + "";
        }
        List<Label> lbl = new List<Label>();
        List<byte> fields = new List<byte>();
        lbl.Add(lblclgScheme);
        lbl.Add(lbl_college);

        fields.Add(0);
        fields.Add(0);
        lbl.Add(lbsem);
        fields.Add(4);
        new HeaderLabelText().setLabels(grouporusercode, ref lbl, fields);
    }

    [WebMethod]
    public static string applicationNo(string applno)
    {
        string Value = "1";
        try
        {
            if (!string.IsNullOrEmpty(applno) && !string.IsNullOrEmpty(btyrScheme))
            {
                DAccess2 da = new DAccess2();
                string applValue = da.GetFunction(" select top 1 r.roll_admit  from Registration r,applyn a where  a.app_no=r.App_No and isnull(a.is_enroll,0) = '2' and  r.roll_admit <>'' and r.roll_admit like '%" + applno + "%' and r.batch_year='" + btyrScheme + "'  and r.college_code='" + clgcodeScheme + "' order by r.roll_admit desc");
                if (string.IsNullOrEmpty(applValue) || applValue == "0" || applValue == "-1")
                    Value = "0";
            }
            else
                Value = "2";
        }
        catch (SqlException ex) { Value = "error" + ex.ToString(); }
        return Value;
    }
    #endregion

    //added by sudhagar 18.03.2017
    protected void getEditableReceipt()
    {
        try
        {
            txttemprcpt.Text = string.Empty;
            double val = 0;
            double.TryParse(Convert.ToString(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='EditReceiptNo' and user_code ='" + usercode + "' and college_code ='" + ddl_college.SelectedValue + "' ")), out val);
            if (val == 1)
                txttemprcpt.Visible = true;
            else
                txttemprcpt.Visible = false;
        }
        catch { }
    }

    [WebMethod]
    public static string CheckReceiptNo(string tempRcptNo)
    {
        string Value = "1";
        try
        {
            if (!string.IsNullOrEmpty(tempRcptNo))
            {
                DAccess2 da = new DAccess2();
                string applValue = da.GetFunction(" select distinct top(1) Transcode from ft_findailytransaction where transcode = '" + tempRcptNo + "'");
                if (string.IsNullOrEmpty(applValue) || applValue == "0" || applValue == "-1")
                    Value = "0";
            }
            else
                Value = "2";
        }
        catch (SqlException ex) { Value = "error" + ex.ToString(); }
        return Value;
    }

    //added by sudhagar school challan format 28.06.2017
    private double checkSchoolSetting()
    {
        double getVal = 0;
        double.TryParse(Convert.ToString(d2.GetFunction("select  value from Master_Settings where settings='schoolorcollege' and usercode='" + usercode + "'")), out getVal);
        return getVal;
    }

    #region financial year
    public void loadfinanceyear()
    {
        try
        {
            string fnalyr = "";
            string getfinanceyear = "select distinct convert(nvarchar(15),FinYearStart,103) sdate,convert(nvarchar(15),FinYearEnd,103) edate,FinYearPK from FM_FinYearMaster where CollegeCode='" + ddl_college.SelectedValue + "'  order by FinYearPK desc";
            ds.Dispose();
            ds.Reset();
            chkfyear.Checked = false;
            chklsfyear.Items.Clear();
            ds = d2.select_method_wo_parameter(getfinanceyear, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string fdatye = ds.Tables[0].Rows[i]["sdate"].ToString() + '-' + ds.Tables[0].Rows[i]["edate"].ToString();
                    string actid = ds.Tables[0].Rows[i]["FinYearPK"].ToString();
                    chklsfyear.Items.Insert(0, new System.Web.UI.WebControls.ListItem(fdatye, actid));
                }

                for (int i = 0; i < chklsfyear.Items.Count; i++)
                {
                    chklsfyear.Items[i].Selected = true;
                    fnalyr = Convert.ToString(chklsfyear.Items[i].Text);
                }
                if (chklsfyear.Items.Count == 1)
                {
                    txtfyear.Text = "" + fnalyr + "";
                }
                else
                {
                    txtfyear.Text = "Finance Year(" + (chklsfyear.Items.Count) + ")";
                }
                // txtfyear.Text = "Finance Year (" + chklsfyear.Items.Count + ")";
                chkfyear.Checked = true;
            }
        }
        catch (Exception ex)
        {

        }
    }

    #endregion

    #region Common Checkbox and Checkboxlist Event

    private string getCblSelectedValue(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder selectedvalue = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedvalue.Length == 0)
                    {
                        selectedvalue.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        selectedvalue.Append("','" + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch { cblSelected.Items.Clear(); }
        return selectedvalue.ToString();
    }
    private string getCblSelectedText(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder selectedText = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedText.Length == 0)
                    {
                        selectedText.Append(Convert.ToString(cblSelected.Items[sel].Text));
                    }
                    else
                    {
                        selectedText.Append("','" + Convert.ToString(cblSelected.Items[sel].Text));
                    }
                }
            }
        }
        catch { cblSelected.Items.Clear(); }
        return selectedText.ToString();
    }
    private void CallCheckboxChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dispst, string deft)
    {
        try
        {
            int sel = 0;
            string name = "";
            txt.Text = deft;
            if (cb.Checked == true)
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = true;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
                if (cbl.Items.Count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dispst + "(" + cbl.Items.Count + ")";
                }
            }
            else
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = false;
                }
                txt.Text = deft;
            }
        }
        catch { }
    }
    private void CallCheckboxListChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dipst, string deft)
    {
        try
        {
            int sel = 0;
            int count = 0;
            string name = "";
            cb.Checked = false;
            for (sel = 0; sel < cbl.Items.Count; sel++)
            {
                if (cbl.Items[sel].Selected == true)
                {
                    count++;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
            }
            if (count > 0)
            {
                if (count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dipst + "(" + count + ")";
                }
                if (cbl.Items.Count == count)
                {
                    cb.Checked = true;
                }
            }
        }
        catch { }
    }

    #endregion

    #region financial year load for add fee function and excess function
    //#region financial year
    //public void addfeeloadfinyear()
    //{
    //    try
    //    {
    //        string fnalyr = "";
    //        string getfinanceyear = "select distinct convert(nvarchar(15),FinYearStart,103) sdate,convert(nvarchar(15),FinYearEnd,103) edate,FinYearPK from FM_FinYearMaster where CollegeCode='" + ddl_college.SelectedValue + "'  order by FinYearPK desc";
    //        ds.Dispose();
    //        ds.Reset();
    //        chkfyears.Checked = false;
    //        chklsfyears.Items.Clear();
    //        ds = d2.select_method_wo_parameter(getfinanceyear, "text");
    //        if (ds.Tables[0].Rows.Count > 0)
    //        {
    //            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
    //            {
    //                string fdatye = ds.Tables[0].Rows[i]["sdate"].ToString() + '-' + ds.Tables[0].Rows[i]["edate"].ToString();
    //                string actid = ds.Tables[0].Rows[i]["FinYearPK"].ToString();
    //                chklsfyears.Items.Insert(0, new System.Web.UI.WebControls.ListItem(fdatye, actid));
    //            }

    //            for (int i = 0; i < chklsfyears.Items.Count; i++)
    //            {
    //                chklsfyears.Items[i].Selected = true;
    //                fnalyr = Convert.ToString(chklsfyears.Items[i].Text);
    //            }
    //            if (chklsfyears.Items.Count == 1)
    //            {
    //                txtfyears.Text = "" + fnalyr + "";
    //            }
    //            else
    //            {
    //                txtfyears.Text = "Finance Year(" + (chklsfyears.Items.Count) + ")";
    //            }
    //            // txtfyear.Text = "Finance Year (" + chklsfyear.Items.Count + ")";
    //            chkfyears.Checked = true;
    //        }
    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}
    public void addfeeloadfinyear()
    {
        try
        {

            string getfinanceyear = "select distinct convert(nvarchar(15),FinYearStart,103) sdate,convert(nvarchar(15),FinYearEnd,103) edate,FinYearPK from FM_FinYearMaster where CollegeCode='" + collegecode1 + "'  order by FinYearPK desc";
            ds.Dispose();
            ds.Reset();
            ddlfinyear.Items.Clear();
            ds = d2.select_method_wo_parameter(getfinanceyear, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string fdatye = ds.Tables[0].Rows[i]["sdate"].ToString() + '-' + ds.Tables[0].Rows[i]["edate"].ToString();
                    string actid = ds.Tables[0].Rows[i]["FinYearPK"].ToString();
                    ddlfinyear.Items.Insert(0, new System.Web.UI.WebControls.ListItem(fdatye, actid));
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
    public void addfeeloadfinyearexcess()
    {
        try
        {

            string getfinanceyear = "select distinct convert(nvarchar(15),FinYearStart,103) sdate,convert(nvarchar(15),FinYearEnd,103) edate,FinYearPK from FM_FinYearMaster where CollegeCode='" + collegecode1 + "'  order by FinYearPK desc";
            ds.Dispose();
            ds.Reset();
            finexcess.Items.Clear();
            ds = d2.select_method_wo_parameter(getfinanceyear, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string fdatye = ds.Tables[0].Rows[i]["sdate"].ToString() + '-' + ds.Tables[0].Rows[i]["edate"].ToString();
                    string actid = ds.Tables[0].Rows[i]["FinYearPK"].ToString();
                    finexcess.Items.Insert(0, new System.Web.UI.WebControls.ListItem(fdatye, actid));
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
    //#endregion
    #endregion


    private double streamEnabled()
    {
        double strValue = 0;
        double.TryParse(Convert.ToString(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='JournalEnableStreamShift' and user_code ='" + usercode + "' and college_code ='" + ddl_college.SelectedValue + "'")), out strValue);
        return strValue;
    }

    //added by sudhagar 04.08.2017
    protected void getStudReceipt(string appNo)
    {
        try
        {
            cb_addExcessFee.Enabled = false;
            ddlStudRcpt.Items.Clear();
            string selQ = " select distinct Transcode,convert(varchar(10),transdate,103) as transdate from ft_findailytransaction where app_no='" + appNo + "' and isnull(iscanceled,'0')='0' and isnull(transcode,'')<>'' order by Transcode";
            DataSet dsRcpt = d2.select_method_wo_parameter(selQ, "Text");
            if (dsRcpt.Tables.Count > 0 && dsRcpt.Tables[0].Rows.Count > 0)
            {
                ddlStudRcpt.DataSource = dsRcpt;
                ddlStudRcpt.DataTextField = "Transcode";
                ddlStudRcpt.DataValueField = "transdate";
                ddlStudRcpt.DataBind();
                cb_addExcessFee.Enabled = true;
            }

        }
        catch { ddlStudRcpt.Items.Clear(); }
    }
    protected string getAppNo()
    {
        string appNo = string.Empty;
        try
        {
            string rollno = Convert.ToString(txt_rollno.Text);
            string seattypeCurQuery = " select seattype,r.Current_Semester,r.Batch_Year,a.app_no  from applyn a,Registration r where a.app_no=r.App_No  and r.college_code=" + collegecode1 + " ";
            if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 0)
            {
                //roll no
                seattypeCurQuery += "  and r.Roll_No =  '" + rollno + "' ";
            }
            else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 1)
            {
                //reg no
                seattypeCurQuery += " and  R.Reg_No = '" + rollno + "' ";
            }
            else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 2)
            {
                //Admin no
                seattypeCurQuery += " and  R.Roll_admit = '" + rollno + "' ";
            }
            else if (Convert.ToUInt32(rbl_rollno.SelectedItem.Value) == 4)
            {
                //Smart no
                seattypeCurQuery += " and  R.smart_serial_no = '" + rollno + "' ";
            }
            else
            {

                seattypeCurQuery = "select seattype,batch_year,app_no from applyn where  college_code=" + collegecode1 + " and app_formno ='" + rollno + "'";

            }
            DataSet dsSTYpe = new DataSet();
            dsSTYpe = d2.select_method_wo_parameter(seattypeCurQuery, "Text");
            if (dsSTYpe.Tables.Count > 0)
            {
                // seattype = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["seattype"]);
                //  batch_year = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["batch_year"]);
                appNo = Convert.ToString(dsSTYpe.Tables[0].Rows[0]["app_no"]);
            }
        }
        catch { }
        return appNo;
    }


    //add fees 
    //add additional amount include to destination college
    protected void inclAddAmt_Changed(object sender, EventArgs e)
    {
        tdaddamt.Visible = false;
        if (inclAddAmt.Checked)
        {

            tdaddamt.Visible = true;
            bindHeaderind();
            bindLedgerind();
            bindAdvancesem();
        }

    }
    protected void btnAddFees_Click(object sender, EventArgs e)
    {

        addFees();
    }
    protected void addFees()
    {
        try
        {
            string hdFK = Convert.ToString(ddlhedind.SelectedValue);
            string hdFKText = Convert.ToString(ddlhedind.SelectedItem.Text);
            string ldFK = Convert.ToString(ddlledind.SelectedValue);
            string ldFKText = Convert.ToString(ddlledind.SelectedItem.Text);
            string feecat = Convert.ToString(ddlsem.SelectedValue);
            string feecatText = Convert.ToString(ddlsem.SelectedItem.Text);
            DataTable dt = new DataTable();
            if (!string.IsNullOrEmpty(hdFK) && !string.IsNullOrEmpty(ldFK) && !string.IsNullOrEmpty(feecat) && gridExcess.Rows.Count > 0)
            {
                dt.Columns.Add("Category");
                dt.Columns.Add("SemYear");
                dt.Columns.Add("Header");
                dt.Columns.Add("Ledger");
                dt.Columns.Add("HeaderCode");
                dt.Columns.Add("LedgerCode");
                DataRow dr;
                //additional fees added here              
                foreach (GridViewRow gdRow in gridExcess.Rows)//old record added here
                {
                    Label lblSemText = (Label)gdRow.FindControl("lbl_categoryEx");
                    Label lblSemValue = (Label)gdRow.FindControl("lbl_categoryidEx");
                    Label lblHd = (Label)gdRow.FindControl("lbl_headpEx");
                    Label lblHdFk = (Label)gdRow.FindControl("lbl_headeridEx");
                    Label lblld = (Label)gdRow.FindControl("lbl_ledgerEx");
                    Label lblldFK = (Label)gdRow.FindControl("lbl_ledgeridEx");
                    if (hdFK == lblHdFk.Text && ldFK == lblldFK.Text && feecat == lblSemValue.Text)
                        continue;
                    dr = dt.NewRow();
                    dr["SemYear"] = Convert.ToString(lblSemText.Text);
                    dr["Category"] = Convert.ToString(lblSemValue.Text);
                    dr["Header"] = Convert.ToString(lblHd.Text);
                    dr["HeaderCode"] = Convert.ToString(lblHdFk.Text);
                    dr["Ledger"] = Convert.ToString(lblld.Text);
                    dr["LedgerCode"] = Convert.ToString(lblldFK.Text);
                    dt.Rows.Add(dr);
                }
                if (dt.Rows.Count > 0)
                {
                    dr = dt.NewRow();
                    dr["SemYear"] = feecatText;
                    dr["Category"] = feecat;
                    dr["Header"] = hdFKText;
                    dr["HeaderCode"] = hdFK;
                    dr["Ledger"] = ldFKText;
                    dr["LedgerCode"] = ldFK;
                    dt.Rows.InsertAt(dr, 0);
                }
            }
            if (dt.Rows.Count > 0)
            {
                gridExcess.DataSource = dt;
                gridExcess.DataBind();
                btnExcessSave.Visible = true;
                btnExExit.Visible = true;
            }
            else
            {
                gridExcess.DataSource = null;
                gridExcess.DataBind();
                btnExcessSave.Visible = false;
                btnExExit.Visible = false;
            }
        }
        catch { }
    }
    protected void ddlhedind_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        bindLedgerind();
    }
    public void bindHeaderind()
    {
        try
        {
            ddlhedind.Items.Clear();
            string query = " SELECT HeaderPK,HeaderName FROM FM_HeaderMaster L,FS_HeaderPrivilage P WHERE L.HeaderPK = P.HeaderFK   AND P.CollegeCode = L.CollegeCode  AND P. UserCode = " + usercode + " AND L.CollegeCode = " + ddl_college.SelectedValue + " ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ddlhedind.DataSource = ds;
                    ddlhedind.DataTextField = "HeaderName";
                    ddlhedind.DataValueField = "HeaderPK";
                    ddlhedind.DataBind();

                }
            }
        }
        catch (Exception ex) { }
    }

    public void bindLedgerind()
    {
        try
        {
            ddlledind.Items.Clear();
            string headerfk = "-1";
            if (ddlhedind.Items.Count > 0)
            {
                headerfk = Convert.ToString(ddlhedind.SelectedItem.Value);
            }
            string query = " SELECT LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode and l.HeaderFK=" + headerfk + " AND P. UserCode = " + usercode + " AND L.CollegeCode = " + ddl_college.SelectedValue + " order by isnull(l.priority,1000), l.ledgerName asc ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ddlledind.DataSource = ds;
                    ddlledind.DataTextField = "LedgerName";
                    ddlledind.DataValueField = "LedgerPK";
                    ddlledind.DataBind();

                }
            }
        }
        catch (Exception ex) { }
    }
    protected void bindAdvancesem()
    {
        try
        {
            ddlsem.Items.Clear();
            ds.Clear();
            string linkName = string.Empty;
            string cbltext = string.Empty;
            ds = d2.loadFeecategory(ddl_college.SelectedValue, usercode, ref linkName);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {

                ddlsem.DataSource = ds;
                ddlsem.DataTextField = "TextVal";
                ddlsem.DataValueField = "TextCode";
                ddlsem.DataBind();

            }
        }
        catch { }
    }

    protected Dictionary<string, string> getFeecode()
    {
        Dictionary<string, string> htsem = new Dictionary<string, string>();
        try
        {
            string featDegcode = "";
            string type = string.Empty;
            string cbltext = string.Empty;
            d2.featDegreeCode = featDegcode;
            DataSet dsval = d2.loadFeecategory(Convert.ToString(ddl_college.SelectedItem.Value), usercode, ref type);
            if (dsval.Tables.Count > 0 && dsval.Tables[0].Rows.Count > 0)
            {
                string feecatg = "";
                string cblvalue = "";
                //string selQ = " select textval,textcode from textvaltable where textcriteria='FEECA' and  college_code='" + collegecode + "'";
                //DataSet dsval = d2.select_method_wo_parameter(selQ, "Text");
                if (dsval.Tables.Count > 0 && dsval.Tables[0].Rows.Count > 0)
                {
                    for (int sem = 0; sem < dsval.Tables[0].Rows.Count; sem++)
                    {
                        cblvalue = Convert.ToString(dsval.Tables[0].Rows[sem]["textcode"]);
                        cbltext = Convert.ToString(dsval.Tables[0].Rows[sem]["textval"]);
                        #region
                        if (type == "Semester")
                        {
                            #region semester
                            string[] feesem = cbltext.Split(' ');
                            if (feesem[0] == "1" || feesem[0] == "2")
                            {
                                if (!htsem.ContainsKey("1"))
                                    htsem.Add(Convert.ToString("1"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["1"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("1");
                                    htsem.Add(Convert.ToString("1"), feecatg);
                                }
                            }
                            else if (feesem[0] == "3" || feesem[0] == "4")
                            {
                                if (!htsem.ContainsKey("2"))
                                    htsem.Add(Convert.ToString("2"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["2"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("2");
                                    htsem.Add(Convert.ToString("2"), feecatg);
                                }
                            }
                            else if (feesem[0] == "5" || feesem[0] == "6")
                            {
                                if (!htsem.ContainsKey("3"))
                                    htsem.Add(Convert.ToString("3"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["3"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("3");
                                    htsem.Add(Convert.ToString("3"), feecatg);
                                }
                            }
                            else if (feesem[0] == "7" || feesem[0] == "8")
                            {
                                if (!htsem.ContainsKey("4"))
                                    htsem.Add(Convert.ToString("4"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["4"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("4");
                                    htsem.Add(Convert.ToString("4"), feecatg);
                                }
                            }
                            #endregion
                        }
                        else if (type == "Term")
                        {
                            string[] feesem = cbltext.Split(' ');
                            if (feesem[1] == "1" || feesem[1] == "2" || feesem[1] == "3" || feesem[1] == "4")
                            {
                                if (!htsem.ContainsKey("1"))
                                    htsem.Add(Convert.ToString("1"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["1"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("1");
                                    htsem.Add(Convert.ToString("1"), feecatg);
                                }
                            }
                        }
                        else if (type == "Year")
                        {
                            #region year
                            string[] feesem = cbltext.Split(' ');
                            if (feesem[0] == "1")
                            {
                                if (!htsem.ContainsKey("1"))
                                    htsem.Add(Convert.ToString("1"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["1"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("1");
                                    htsem.Add(Convert.ToString("1"), feecatg);
                                }
                            }
                            if (feesem[0] == "2")
                            {
                                if (!htsem.ContainsKey("2"))
                                    htsem.Add(Convert.ToString("2"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["2"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("2");
                                    htsem.Add(Convert.ToString("2"), feecatg);
                                }
                            }
                            if (feesem[0] == "3")
                            {
                                if (!htsem.ContainsKey("3"))
                                    htsem.Add(Convert.ToString("3"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["3"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("3");
                                    htsem.Add(Convert.ToString("3"), feecatg);
                                }
                            }
                            if (feesem[0] == "4")
                            {
                                if (!htsem.ContainsKey("4"))
                                    htsem.Add(Convert.ToString("4"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["4"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("4");
                                    htsem.Add(Convert.ToString("4"), feecatg);
                                }
                            }
                            #endregion
                        }
                        #endregion

                    }
                }
            }
            ViewState["feecat"] = htsem;
        }
        catch { }
        return htsem;
    }
    protected string getCurYear(string curSem)
    {
        string curYear = string.Empty;
        try
        {
            switch (curSem)
            {
                case "1":
                case "2":
                    curYear = "1";
                    break;
                case "3":
                case "4":
                    curYear = "2";
                    break;
                case "5":
                case "6":
                    curYear = "3";
                    break;
                case "7":
                case "8":
                    curYear = "4";
                    break;
                case "9":
                case "10":
                    curYear = "5";
                    break;
            }
        }
        catch { }
        return curYear;
    }
    protected void btnClear_Click(object sender, EventArgs e)
    {
        clear();
    }
    protected void clear()
    {
        txt_rollno.Text = string.Empty;
        txt_name.Text = string.Empty;
        txt_dept.Text = string.Empty;
        txt_SeatType.Text = string.Empty;
        txt_FatherName.Text = string.Empty;

        txt_totamt.Text = string.Empty;
        txt_paidamt.Text = string.Empty;
        txt_balamt.Text = string.Empty;
        txt_examt.Text = string.Empty;
        Txt_amt.Text = string.Empty;
        txt_chltaken.Text = string.Empty;
        txt_ExcAmt.Text = string.Empty;
        txt_CautionAmt.Text = string.Empty;
        txttemprcpt.Text = string.Empty;
        txt_remark.Text = string.Empty;
        txt_GvtTot.Text = string.Empty;
        grid_Details.Visible = false;


        txtroll_staff.Text = string.Empty;
        txtname_staff.Text = string.Empty;
        txtDept_staff.Text = string.Empty;

        txtroll_vendor.Text = string.Empty;
        txtname_vendor.Text = string.Empty;
        txtDept_vendor.Text = string.Empty;

        txtroll_other.Text = string.Empty;
        txtname_other.Text = string.Empty;
        txt_otherMobile.Text = string.Empty;
        txtAdd1_Other.Text = string.Empty;
        txtAdd2_Other.Text = string.Empty;
        txtAdd1_Other.Text = string.Empty;
        txt_branch.Text = string.Empty;
        txt_chqno.Text = string.Empty;
        txt_branch.Text = string.Empty;
        txt_challan.Text = string.Empty;
        txt_ddno.Text = string.Empty;
        txt_ddnar.Text = string.Empty;
        txt_NEFTNO.Text = string.Empty;//added by abarna 29.01.2018
    }

    protected void imagebtnpopclose1_Click(object sender, EventArgs e)
    {
        popup.Visible = false;

    }
    //added by abarna 13.10.2017
    protected void btndetails_Click(object sender, EventArgs e)
    {
        bool boolSave = false;

        lblNameval.Text = string.Empty;
        lblDobval.Text = string.Empty;
        lblfnameval.Text = string.Empty;
        lblmnameval.Text = string.Empty;
        lblAddressval.Text = string.Empty;
        lblReligionval.Text = string.Empty;
        lblcommunityval.Text = string.Empty;
        lblFphnoval.Text = string.Empty;
        lblMphnoval.Text = string.Empty;
        lblStudPhnoval.Text = string.Empty;
        lblbatchyearval.Text = string.Empty;
        string appNo = getAppNo();

        if (appNo != "0")
        {
            string sel = "select distinct stud_name,(select textval from textvaltable t where a.community=t.TextCode) as community,(select textval from textvaltable t  where a.religion=t.TextCode) as Religion,parent_addressP,batch_year,parentF_Mobile,parentM_Mobile,Student_Mobile,parent_name,mother,convert(varchar(10),dob,103) as dob from applyn a where app_no='" + appNo + "'";
            DataSet dsVal = d2.select_method_wo_parameter(sel, "Text");
            if (dsVal.Tables.Count > 0 && dsVal.Tables[0].Rows.Count > 0)
            {
                lblNameval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["stud_name"]);
                lblDobval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["dob"]);
                lblfnameval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["parent_name"]);
                lblmnameval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["mother"]);
                lblAddressval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["parent_addressP"]);
                lblReligionval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["Religion"]);
                lblcommunityval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["community"]);
                lblFphnoval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["parentF_Mobile"]);
                lblMphnoval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["parentM_Mobile"]);
                lblStudPhnoval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["Student_Mobile"]);
                lblbatchyearval.Text = Convert.ToString(dsVal.Tables[0].Rows[0]["batch_year"]);
                popup.Visible = true;
                boolSave = true;
            }
        }


        if (!boolSave)
        {
            popup.Visible = false;
            ScriptManager.RegisterClientScriptBlock(this, typeof(Page), UniqueID, "No Record Found", true);
        }

    }

    protected void getTabRights(object sender, EventArgs e)
    {

        // rbl_rollnoNew.Items.Clear();
        // rbl_rollnoNew.Enabled = true;
        string selQ = "select LinkValue from New_InsSettings where LinkName='FinanceReceiptTabRights' and user_code ='" + usercode + "' and college_code ='" + ddl_college.SelectedItem.Value + "' ";
        string strVal = Convert.ToString(d2.GetFunction(selQ));
        if (!string.IsNullOrEmpty(strVal) && strVal != "0")
        {
            string[] strSpltVal = strVal.Split('$');
            if (strSpltVal.Length > 0)
            {
                for (int rcpt = 0; rcpt < strSpltVal.Length; rcpt++)
                {
                    switch (Convert.ToInt32(strSpltVal[rcpt]))
                    {
                        case 1:
                            //  rbl_rollnoNew.Items.Add("Student");
                            rbl_rollnoNew.Items[rcpt].Enabled = true;
                            rbl_rollnoNew.SelectedIndex = 0;
                            rbl_rollnoNew_OnSelectedIndexChanged(sender, e);
                            break;
                        case 2:
                            // rbl_rollnoNew.Items.Add("Staff");
                            rbl_rollnoNew.Items[rcpt].Enabled = true;
                            rbl_rollnoNew.SelectedIndex = 1;
                            rbl_rollnoNew_OnSelectedIndexChanged(sender, e);
                            break;
                        case 3:
                            // rbl_rollnoNew.Items.Add("Vendor");
                            rbl_rollnoNew.Items[rcpt].Enabled = true;
                            rbl_rollnoNew.SelectedIndex = 2;
                            rbl_rollnoNew_OnSelectedIndexChanged(sender, e);
                            break;
                        case 4:
                            // rbl_rollnoNew.Items.Add("Others");
                            rbl_rollnoNew.Items[rcpt].Enabled = true;
                            rbl_rollnoNew.SelectedIndex = 3;
                            rbl_rollnoNew_OnSelectedIndexChanged(sender, e);
                            break;
                    }
                }
                //rb_cash_Change(sender, e);
            }
        }
    }


    //Added By SaranyaDevi 29.3.2018
    protected void Quantity_OnTextChanged(object sender, EventArgs e)
    {
        try
        {
            for (row = 0; row < gridInv.Rows.Count; row++)
            {
                //CheckBox cbSelchk = (CheckBox)gridInv.Rows[row].FindControl("chkSel");
                string qty = string.Empty;
                string rpu = string.Empty;
                string amt = string.Empty;

                double Qty1 = 0.0;
                double rpu1 = 0.0;
                double TotalAmt = 0.0;
                TextBox txtQty = (TextBox)gridInv.Rows[row].FindControl("txtQtyInv");
                Label txtRPU = (Label)gridInv.Rows[row].FindControl("lbl_RPUInv");
                TextBox txtAmt = (TextBox)gridInv.Rows[row].FindControl("txtamtInv");
                if (txtQty.Text != "" && txtRPU.Text != "")
                {
                    qty = txtQty.Text;
                    rpu = txtRPU.Text;
                    Qty1 = Convert.ToDouble(qty);
                    rpu1 = Convert.ToDouble(rpu);
                    TotalAmt = Qty1 * rpu1;
                    txtAmt.Text = Convert.ToString(TotalAmt);
                }

            }
        }
        catch
        {


        }

    }


    protected void rbldeptstore_Indexchanged(object sender, EventArgs e)
    {

        try
        {
            if (rbldeptstore.SelectedIndex == 0)
            {
                Department.Visible = true;
                store.Visible = false;
                updStoreInv.Visible = true;
                upStore.Visible = false;
                itemStoreBindInv();
                ddlStoreInv_Indexchange(sender, e);

            }

            else
            {
                Department.Visible = false;
                store.Visible = true;
                updStoreInv.Visible = false;
                upStore.Visible = true;
                StoreBind();
                ddlstroe_Indexchange(sender, e);
            }
        }

        catch
        {


        }



    }


    public void StoreBind()
    {
        try
        {
            ddlstroe.Items.Clear();
            string query = "select distinct StorePK,StoreName from IM_StoreMaster where CollegeCode= " + collegecode1 + "";
            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlstroe.DataSource = ds;
                ddlstroe.DataTextField = "StoreName";
                ddlstroe.DataValueField = "StorePK";
                ddlstroe.DataBind();
                //ddlstroe.Items.Insert(0, "--Select--");
            }

        }
        catch (Exception ex) { }
    }

    protected void ddlstroe_Indexchange(object sender, EventArgs e)
    {
        try
        {
            itemHeadBindInv();
            itemSHdrBindInv();
            itemCodeBindInv();
            itemNameBindInv();
        }
        catch (Exception ex) { }
    }
    protected void txt_challan_TextChanged(object sender, EventArgs e)//added by abarna 17.05.2018
    {
        if (txt_challan.Text != "0" || txt_challan.Text != "")
        {
            string checkno = d2.GetFunction("select ddno from ft_findailytransaction where ddno='" + txt_challan.Text + "' and paymode='4'");
            if (!string.IsNullOrEmpty(checkno) && checkno != "0")
            {

                imgAlert.Visible = true;
                lbl_alert.Text = "Challan No Already Exist";
                txt_challan.Text = "";
                return;

            }
        }
        //checkno = txt_challan.Text;
        //if (checkno == "")
        //{
        //    imgAlert.Visible = true;
        //    lbl_alert.Text = "Please Enter ChallanNumber";
        //}


    }


    protected void LibraryFineDetails(object sender, EventArgs e)
    {

    }

    protected void BtnExit_Click(object sender, EventArgs e)
    {
        Response.Redirect("~/LibraryMod/bookissue.aspx");
    }
}
