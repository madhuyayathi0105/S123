using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI.WebControls;
using System.Data;
using System.Collections;
using System.Drawing;
using System.IO;
using System.Text;

public partial class StudentfeeAllotReportalter : System.Web.UI.Page
{
    string usercode = string.Empty;
    static string collegecode1 = string.Empty;
    string collegecode = string.Empty;
    string singleuser = string.Empty;
    string group_user = string.Empty;
    string sessstream = string.Empty;
    string selectQuery = "";
    DAccess2 d2 = new DAccess2();
    DataSet ds = new DataSet();
    DataSet ds1 = new DataSet();
    DataSet dsprint = new DataSet();
    ArrayList colord = new ArrayList();
    DAccess2 queryObject = new DAccess2();
    DAccess2 da = new DAccess2();
    DataView dvhead = new DataView();
    DataSet dscol = new DataSet();
    DataSet dsFinal = new DataSet();
    DataSet dsFinal1 = new DataSet();
    Hashtable grandtotal = new Hashtable();
    Dictionary<int, string> dicColumnvisible = new Dictionary<int, string>();

    Dictionary<string, string> htAcademic = new Dictionary<string, string>();
    string batch2 = "";
    string degree = "";
    int commcount;
    int i;
    int cout;
    int row;
    static int personmode = 0;
    static int chosedmode = 0;
    Boolean ledgercellclik = false;
    Boolean batchcellclick = false;
    Boolean degreecellclick = false;
    Boolean deptcellclick = false;
    Boolean semcellclick = false;
    Boolean studcellclick = false;
    static string cellclicktext = "";
    static string colhedername = "";
    static string colhedername1 = "";
    static string colledname = "";
    static string colbatname = "";
    static string coldegname = "";
    static string coldeptname = "";
    static string colsemname = "";
    static string colstudname = "";
    string allot = "";
    string consession = "";
    static byte roll = 0;
    bool deptacr = false;
    bool usBasedRights = false;
    DataTable dtReport = new DataTable();
    DataRow drowGrd;
    ArrayList arrColHdrNames = new ArrayList();
    ArrayList arrColHdrNames2 = new ArrayList();
    Dictionary<int, string> dicRowColor = new Dictionary<int, string>();
    Dictionary<string, string> dicRowColorColumn = new Dictionary<string, string>();

    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["collegecode"] == null)
        {
            Response.Redirect("Default.aspx");
        }
        usercode = Session["usercode"].ToString();
        // collegecode1 = Session["collegecode"].ToString();
        singleuser = Session["single_user"].ToString();
        group_user = Session["group_code"].ToString();
        sessstream = Convert.ToString(Session["streamcode"]);
        lbl_str1.Text = sessstream;
        lbl_str2.Text = sessstream;
        string grouporusercode = "";
        if ((Session["group_code"].ToString().Trim() != "") && (Session["group_code"].ToString().Trim() != "0") && (Session["group_code"].ToString().Trim() != "-1"))
        {
            grouporusercode = " group_code=" + Session["group_code"].ToString().Trim() + "";
            usercode = Session["group_code"].ToString();
        }
        else
        {
            grouporusercode = " usercode=" + Session["usercode"].ToString().Trim() + "";
            usercode = Session["usercode"].ToString();
        }
        if (!IsPostBack)
        {
            setLabelText();
            rb_degree.Text = lbldeg.Text;
            rb_dept.Text = lbldept.Text;
            rb_sem.Text = lblsem.Text;
            loadcollege();
            if (ddl_collegename.Items.Count > 0)
            {
                collegecode1 = Convert.ToString(ddl_collegename.SelectedItem.Value);
            }
            loadstrm();
            memtype();
            bindBtch();
            binddeg();
            binddept();
            bindsem();
            bindsec();
            loadstutype();
            loadseat();
            loadtype();
            loadpaid();
            loadstream();
            loadcourse();
            loadheader();
            loadfield();
            loadheaderandledger();
            ledgerload();
            rb_hori.Checked = true;
            rbstudhed.Checked = true;
            loadcolumnorder();
            loadfinanceyear();
            LoadIncludeSetting();
            txt_fromdate.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txt_todate.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txt_fromdate.Attributes.Add("readonly", "readonly");
            txt_todate.Attributes.Add("readonly", "readonly");
            RollAndRegSettings();
            chkcomflt_OnCheckedChanged(sender, e);
            chk_datewise_OnCheckedChanged(sender, e);
            chkpaid_OnCheckedChanged(sender, e);
            chkinclude_OnCheckedChanged(sender, e);
            DeptAcr();
            UserbasedRights();
            getAcademicYear();//added by saranya on 29/12/2017

        }
        if (ddl_collegename.Items.Count > 0)
        {
            collegecode1 = Convert.ToString(ddl_collegename.SelectedItem.Value);
        }

    }

    public void loadfinanceyear()
    {
        try
        {
            string fnalyr = "";
            string getfinanceyear = "select distinct convert(nvarchar(15),FinYearStart,103) sdate,convert(nvarchar(15),FinYearEnd,103) edate,FinYearPK from FM_FinYearMaster where CollegeCode='" + collegecode1 + "'  order by FinYearPK desc";
            ds.Dispose();
            ds.Reset();
            chkfyear.Checked = false;
            chklsfyear.Items.Clear();
            ds = da.select_method_wo_parameter(getfinanceyear, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string fdatye = ds.Tables[0].Rows[i]["sdate"].ToString() + '-' + ds.Tables[0].Rows[i]["edate"].ToString();
                    string actid = ds.Tables[0].Rows[i]["FinYearPK"].ToString();
                    chklsfyear.Items.Insert(0, new System.Web.UI.WebControls.ListItem(fdatye, actid));
                }

                for (int i = 0; i < chklsfyear.Items.Count; i++)
                {
                    chklsfyear.Items[i].Selected = true;
                    fnalyr = Convert.ToString(chklsfyear.Items[i].Text);
                }
                if (chklsfyear.Items.Count == 1)
                {
                    txtfyear.Text = "" + fnalyr + "";
                }
                else
                {
                    txtfyear.Text = "Finance Year(" + (chklsfyear.Items.Count) + ")";
                }
                // txtfyear.Text = "Finance Year (" + chklsfyear.Items.Count + ")";
                chkfyear.Checked = true;
            }
        }
        catch (Exception ex)
        {

        }
    }

    protected void chklsfyear_selected(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(chkfyear, chklsfyear, txtfyear, "Finance Year", "--Select--");

            //loadheader();
        }
        catch (Exception ex)
        { }
    }

    protected void chkfyear_changed(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(chkfyear, chklsfyear, txtfyear, "Finance Year", "--Select--");
        }
        catch (Exception ex)
        { }
    }

    protected void ddl_collegename_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (ddl_collegename.Items.Count > 0)
            {
                collegecode1 = Convert.ToString(ddl_collegename.SelectedItem.Value);
            }
            loadstrm();
            bindBtch();
            binddeg();
            binddept();
            bindsem();
            bindsec();
            loadstutype();
            loadseat();
            loadtype();
            loadpaid();
            loadheaderandledger();
            ledgerload();
            loadfinanceyear();
        }
        catch
        {
        }
    }

    #region colorder

    public void loadcolumnorder()
    {
        if (rb_header.Checked == true)
        {
            cblcolumnorder.Items.Clear();
            // cblcolumnorder.Items.Add(new ListItem("Header Name","0"));
            cblcolumnorder.Items.Add(new ListItem("Allot", "1"));
            cblcolumnorder.Items.Add(new ListItem("Concession", "2"));
            cblcolumnorder.Items.Add(new ListItem("Scholarship", "3"));
            cblcolumnorder.Items.Add(new ListItem("Total", "4"));
            cblcolumnorder.Items.Add(new ListItem("Paid", "5"));
            cblcolumnorder.Items.Add(new ListItem("Balance", "6"));
            cblcolumnorder.Items.Add(new ListItem("Refund Amount", "7"));
            cblcolumnorder.Items.Add(new ListItem("Excess Amount", "8"));
            //  cblcolumnorder.Items.Add(new ListItem("Fine Amount", "9"));
        }
        else if (rb_ledger.Checked == true)
        {
            cblcolumnorder.Items.Clear();
            //cblcolumnorder.Items.Add(new ListItem("Header Name"));
            //cblcolumnorder.Items.Add(new ListItem("Ledger Name"));
            cblcolumnorder.Items.Add(new ListItem("Allot", "1"));
            cblcolumnorder.Items.Add(new ListItem("Concession", "2"));
            cblcolumnorder.Items.Add(new ListItem("Scholarship", "3"));
            cblcolumnorder.Items.Add(new ListItem("Total", "4"));
            cblcolumnorder.Items.Add(new ListItem("Paid", "5"));
            cblcolumnorder.Items.Add(new ListItem("Balance", "6"));
            cblcolumnorder.Items.Add(new ListItem("Refund Amount", "7"));
            cblcolumnorder.Items.Add(new ListItem("Excess Amount", "8"));
            // cblcolumnorder.Items.Add(new ListItem("Fine Amount", "9"));
        }
        else if (rb_batch.Checked == true)
        {
            cblcolumnorder.Items.Clear();
            // cblcolumnorder.Items.Add(new ListItem("Batch Year"));
            cblcolumnorder.Items.Add(new ListItem("Allot", "1"));
            cblcolumnorder.Items.Add(new ListItem("Concession", "2"));
            cblcolumnorder.Items.Add(new ListItem("Scholarship", "3"));
            cblcolumnorder.Items.Add(new ListItem("Total", "4"));
            cblcolumnorder.Items.Add(new ListItem("Paid", "5"));
            cblcolumnorder.Items.Add(new ListItem("Balance", "6"));
            cblcolumnorder.Items.Add(new ListItem("Refund Amount", "7"));
            cblcolumnorder.Items.Add(new ListItem("Excess Amount", "8"));
            // cblcolumnorder.Items.Add(new ListItem("Fine Amount", "9"));
        }
        else if (rb_degree.Checked == true)
        {
            cblcolumnorder.Items.Clear();
            //cblcolumnorder.Items.Add(new ListItem("Degree Name"));
            cblcolumnorder.Items.Add(new ListItem("Allot", "1"));
            cblcolumnorder.Items.Add(new ListItem("Concession", "2"));
            cblcolumnorder.Items.Add(new ListItem("Scholarship", "3"));
            cblcolumnorder.Items.Add(new ListItem("Total", "4"));
            cblcolumnorder.Items.Add(new ListItem("Paid", "5"));
            cblcolumnorder.Items.Add(new ListItem("Balance", "6"));
            cblcolumnorder.Items.Add(new ListItem("Refund Amount", "7"));
            cblcolumnorder.Items.Add(new ListItem("Excess Amount", "8"));
            // cblcolumnorder.Items.Add(new ListItem("Fine Amount", "9"));
        }
        else if (rb_dept.Checked == true)
        {
            cblcolumnorder.Items.Clear();
            //cblcolumnorder.Items.Add(new ListItem("Course Name"));
            // cblcolumnorder.Items.Add(new ListItem("Department Name"));
            cblcolumnorder.Items.Add(new ListItem("Allot", "1"));
            cblcolumnorder.Items.Add(new ListItem("Concession", "2"));
            cblcolumnorder.Items.Add(new ListItem("Scholarship", "3"));
            cblcolumnorder.Items.Add(new ListItem("Total", "4"));
            cblcolumnorder.Items.Add(new ListItem("Paid", "5"));
            cblcolumnorder.Items.Add(new ListItem("Balance", "6"));
            cblcolumnorder.Items.Add(new ListItem("Refund Amount", "7"));
            cblcolumnorder.Items.Add(new ListItem("Excess Amount", "8"));
            //cblcolumnorder.Items.Add(new ListItem("Fine Amount", "9"));
        }
        else if (rb_sem.Checked == true)
        {
            cblcolumnorder.Items.Clear();
            // cblcolumnorder.Items.Add(new ListItem("Semaster"));
            cblcolumnorder.Items.Add(new ListItem("Allot", "1"));
            cblcolumnorder.Items.Add(new ListItem("Concession", "2"));
            cblcolumnorder.Items.Add(new ListItem("Scholarship", "3"));
            cblcolumnorder.Items.Add(new ListItem("Total", "4"));
            cblcolumnorder.Items.Add(new ListItem("Paid", "5"));
            cblcolumnorder.Items.Add(new ListItem("Balance", "6"));
            cblcolumnorder.Items.Add(new ListItem("Refund Amount", "7"));
            cblcolumnorder.Items.Add(new ListItem("Excess Amount", "8"));
            // cblcolumnorder.Items.Add(new ListItem("Fine Amount", "9"));
        }
        else if (rb_studentwise.Checked == true)
        {
            cblcolumnorder.Items.Clear();
            //  cblcolumnorder.Items.Add(new ListItem("Student Name"));
            //cblcolumnorder.Items.Add(new ListItem("Reg No"));
            // cblcolumnorder.Items.Add(new ListItem("Degree Name"));
            cblcolumnorder.Items.Add(new ListItem("Allot", "1"));
            cblcolumnorder.Items.Add(new ListItem("Concession", "2"));
            cblcolumnorder.Items.Add(new ListItem("Scholarship", "3"));
            cblcolumnorder.Items.Add(new ListItem("Total", "4"));
            cblcolumnorder.Items.Add(new ListItem("Paid", "5"));
            cblcolumnorder.Items.Add(new ListItem("Balance", "6"));
            cblcolumnorder.Items.Add(new ListItem("Refund Amount", "7"));
            cblcolumnorder.Items.Add(new ListItem("Excess Amount", "8"));
            //cblcolumnorder.Items.Add(new ListItem("Fine Amount", "9"));
        }

    }

    #endregion

    #region headerandledger

    public void loadheaderandledger()
    {
        try
        {
            string clgvalue = ddl_collegename.SelectedItem.Value.ToString();
            chkl_studhed.Items.Clear();
            string query = " SELECT HeaderPK,HeaderName,hd_priority FROM FM_HeaderMaster H,FS_HeaderPrivilage P WHERE H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = " + usercode + " AND H.CollegeCode = " + clgvalue + "  order by len(isnull(hd_priority,10000)),hd_priority asc";

            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                chkl_studhed.DataSource = ds;
                chkl_studhed.DataTextField = "HeaderName";
                chkl_studhed.DataValueField = "HeaderPK";
                chkl_studhed.DataBind();
                for (int i = 0; i < chkl_studhed.Items.Count; i++)
                {
                    chkl_studhed.Items[i].Selected = true;
                }
                txt_studhed.Text = "Header(" + chkl_studhed.Items.Count + ")";
                chk_studhed.Checked = true;
            }
        }
        catch
        {
        }
    }

    public void ledgerload()
    {
        try
        {
            string clgvalue = ddl_collegename.SelectedItem.Value.ToString();
            chkl_studled.Items.Clear();
            string hed = "";
            for (int i = 0; i < chkl_studhed.Items.Count; i++)
            {
                if (chkl_studhed.Items[i].Selected == true)
                {
                    if (hed == "")
                    {
                        hed = chkl_studhed.Items[i].Value.ToString();
                    }
                    else
                    {
                        hed = hed + "','" + "" + chkl_studhed.Items[i].Value.ToString() + "";
                    }
                }
            }

            string query1 = " SELECT LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode AND P. UserCode = " + usercode + " AND  Ledgermode='0' and L.CollegeCode = " + clgvalue + "  and L.HeaderFK in('" + hed + "')  order by isnull(l.priority,1000), l.ledgerName asc";
            // SELECT LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode AND P. UserCode = " + usercode + " AND  Ledgermode='0' and L.CollegeCode = " + clgvalue + "  and L.HeaderFK in('" + hed + "')  order by isnull(l.priority,1000), l.ledgerName asc ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query1, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                chkl_studled.DataSource = ds;
                chkl_studled.DataTextField = "LedgerName";
                chkl_studled.DataValueField = "LedgerPK";
                chkl_studled.DataBind();
                for (int i = 0; i < chkl_studled.Items.Count; i++)
                {
                    chkl_studled.Items[i].Selected = true;
                }
                txt_studled.Text = "Ledger(" + chkl_studled.Items.Count + ")";
                chk_studled.Checked = true; ;

            }
            else
            {
                for (int i = 0; i < chkl_studled.Items.Count; i++)
                {
                    chkl_studled.Items[i].Selected = false;
                }
                txt_studled.Text = "--Select--";
                chk_studled.Checked = false; ;
            }

        }
        catch
        {
        }
    }

    public void chk_studhed_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(chk_studhed, chkl_studhed, txt_studhed, "Header", "--Select--");
            ledgerload();
        }
        catch (Exception ex)
        { }
    }

    public void chkl_studhed_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(chk_studhed, chkl_studhed, txt_studhed, "Header", "--Select--");
            ledgerload();
        }
        catch (Exception ex)
        {

        }
    }

    public void chk_studled_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(chk_studled, chkl_studled, txt_studled, "Ledger", "--Select--");

        }
        catch (Exception ex)
        { }
    }

    public void chkl_studled_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(chk_studled, chkl_studled, txt_studled, "Ledger", "--Select--");
        }
        catch (Exception ex)
        { }
    }

    #endregion

    #region pagesetting

    public void loadfield()
    {
        try
        {
            chkl_field.Items.Clear();
            chkl_field.Items.Add(new ListItem("Text", "0"));
            chkl_field.Items.Add(new ListItem("App No", "1"));
            chkl_field.Items.Add(new ListItem("Roll No", "2"));
            chkl_field.Items.Add(new ListItem("Admission No", "3"));
            chkl_field.Items.Add(new ListItem("Register", "4"));
            chkl_field.Items.Add(new ListItem("Student Name", "5"));
            chkl_field.Items.Add(new ListItem("Course", "6"));
            chkl_field.Items.Add(new ListItem("Branch", "7"));
            chkl_field.Items.Add(new ListItem("Batch", "8"));
            chkl_field.Items.Add(new ListItem("Semaster", "9"));
            chkl_field.Items.Add(new ListItem("Bank A/C No", "10"));
            for (int i = 0; i < chkl_field.Items.Count; i++)
            {
                chkl_field.Items[i].Selected = true;
            }
            chk_filed.Checked = true;
        }
        catch
        {
        }
    }

    public void loadheader()
    {
        try
        {
            //  string selqry = "select HeaderPK,HeaderName from FM_HeaderMaster where CollegeCode ='" + collegecode1 + "'";
            string selqry = "  select distinct ChlGroupHeader  from FS_ChlGroupHeaderSettings ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                lb_selecthdr.DataSource = ds;
                lb_selecthdr.DataTextField = "ChlGroupHeader";
                lb_selecthdr.DataValueField = "ChlGroupHeader";
                lb_selecthdr.DataBind();
            }
        }
        catch
        {
        }
    }

    public void loadcourse()
    {

        try
        {
            chkl_course.Items.Clear();
            string stream = "";
            for (int i = 0; i < chkl_str.Items.Count; i++)
            {
                if (chkl_str.Items[i].Selected == true)
                {
                    if (stream == "")
                    {
                        stream = chkl_str.Items[i].Value.ToString();
                    }
                    else
                    {
                        stream = stream + "','" + "" + chkl_str.Items[i].Value.ToString() + "";
                    }
                }
            }

            string selqry = "select (c.Course_Name +'-'+ dt.Dept_Name) as Department,Degree_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id";
            if (stream != "")
            {
                selqry = selqry + " and type in ('" + stream + "')";
            }
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {

                chkl_course.DataSource = ds;
                chkl_course.DataTextField = "Department";
                chkl_course.DataValueField = "Degree_Code";
                chkl_course.DataBind();
            }
            else
            {
                chk_course.Checked = false;
            }
            for (int j = 0; j < chkl_course.Items.Count; j++)
            {
                chkl_course.Items[j].Selected = true;
                chk_course.Checked = true;
            }

            // txt_str.Text = "stream(" + chkl_str.Items.Count + ")";
            // chk_course.Checked = true;
        }
        catch
        {
        }
    }

    public void loadstream()
    {
        try
        {
            string selqry = "select distinct type  from Course where college_code ='" + collegecode1 + "' and type<>''";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                chkl_str.DataSource = ds;
                chkl_str.DataTextField = "type";
                chkl_str.DataValueField = "type";
                chkl_str.DataBind();
                txt_str.Enabled = true;

                for (int i = 0; i < chkl_str.Items.Count; i++)
                {
                    chkl_str.Items[i].Selected = true;
                }
                if (lbl_str2.Text == "Stream")
                {
                    txt_str.Text = "stream(" + chkl_str.Items.Count + ")";
                }
                if (lbl_str2.Text == "Shift")
                {
                    txt_str.Text = "Shift(" + chkl_str.Items.Count + ")";
                }
                chk_str.Checked = true;
            }
            else
            {
                txt_str.Enabled = false;
            }

        }
        catch
        {

        }
    }

    //public void bindsem1()
    //{
    //    chkl_sema.Items.Clear();

    //    string settingquery = "select * from New_InsSettings where linkname = 'Fee Yearwise' and user_code ='" + usercode + "' and college_code ='" + Session["collegecode"] + "'";
    //    ds.Clear();
    //    ds = d2.select_method_wo_parameter(settingquery, "Text");
    //    if (ds.Tables[0].Rows.Count > 0)
    //    {
    //        string linkvalue = Convert.ToString(ds.Tables[0].Rows[0]["LinkValue"]);
    //        if (linkvalue == "0")
    //        {
    //            string semesterquery = "select * from textvaltable where TextCriteria = 'FEECA'and textval like '%Semester' and textval not like '-1%' order by len(textval),textval asc";
    //            ds.Clear();
    //            ds = d2.select_method_wo_parameter(semesterquery, "Text");
    //            if (ds.Tables[0].Rows.Count > 0)
    //            {
    //                //text_circode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
    //                chkl_sema.DataSource = ds;
    //                chkl_sema.DataTextField = "TextVal";
    //                chkl_sema.DataValueField = "TextCode";
    //                chkl_sema.DataBind();
    //            }
    //            if (chkl_sema.Items.Count > 0)
    //            {
    //                for (int i = 0; i < chkl_sema.Items.Count; i++)
    //                {
    //                    chkl_sema.Items[i].Selected = true;
    //                }
    //                //txt_sema.Text = "Semester(" + chkl_sema.Items.Count + ")";
    //                chk_sema.Checked = true;
    //            }
    //        }
    //        else
    //        {
    //            string semesterquery = "select * from textvaltable where TextCriteria = 'FEECA'and textval like '%Year' and textval not like '-1%' order by len(textval),textval asc";
    //            ds.Clear();
    //            ds = d2.select_method_wo_parameter(semesterquery, "Text");
    //            if (ds.Tables[0].Rows.Count > 0)
    //            {
    //                // text_circode = Convert.ToString(ds.Tables[0].Rows[0]["TextCode"]);
    //                chkl_sema.DataSource = ds;
    //                chkl_sema.DataTextField = "TextVal";
    //                chkl_sema.DataValueField = "TextCode";
    //                chkl_sema.DataBind();
    //            }
    //        }
    //    }
    //}

    protected void bindsem1()
    {
        try
        {
            chkl_sema.Items.Clear();
            chk_sema.Checked = false;
            // txt_sem.Text = "--Select--";
            ds.Clear();
            string linkName = string.Empty;
            string cbltext = string.Empty;
            ds = d2.loadFeecategory(Convert.ToString(ddl_collegename.SelectedItem.Value), usercode, ref linkName);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                chkl_sema.DataSource = ds;
                chkl_sema.DataTextField = "TextVal";
                chkl_sema.DataValueField = "TextCode";
                chkl_sema.DataBind();

                if (chkl_sema.Items.Count > 0)
                {
                    for (int i = 0; i < chkl_sema.Items.Count; i++)
                    {
                        chkl_sema.Items[i].Selected = true;
                    }
                    chk_sema.Checked = true;
                }
            }
        }
        catch { }
    }

    public void chk_str_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chk_str.Checked == true)
            {
                for (int i = 0; i < chkl_str.Items.Count; i++)
                {
                    chkl_str.Items[i].Selected = true;
                }
                if (lbl_str2.Text == "Stream")
                {
                    txt_str.Text = "Stream(" + (chkl_str.Items.Count) + ")";
                }
                if (lbl_str2.Text == "Shift")
                {
                    txt_str.Text = "Shift(" + (chkl_str.Items.Count) + ")";
                }
            }
            else
            {
                for (int i = 0; i < chkl_str.Items.Count; i++)
                {
                    chkl_str.Items[i].Selected = false;
                }
                txt_str.Text = "---Select---";
            }
            loadcourse();

        }
        catch (Exception ex)
        {

        }

    }

    public void chkl_str_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            int commcount = 0;
            txt_str.Text = "--Select--";
            chk_str.Checked = false;
            for (int i = 0; i < chkl_str.Items.Count; i++)
            {
                if (chkl_str.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount > 0)
            {
                if (commcount == chkl_str.Items.Count)
                {
                    chk_str.Checked = true;
                }
                if (lbl_str2.Text == "Stream")
                {
                    txt_str.Text = "Stream(" + commcount.ToString() + ")";
                }
                if (lbl_str2.Text == "Shift")
                {
                    txt_str.Text = "Shift(" + commcount.ToString() + ")";
                }
            }

            chkl_course.Items.Clear();
            string stream = "";
            for (int i = 0; i < chkl_str.Items.Count; i++)
            {
                if (chkl_str.Items[i].Selected == true)
                {
                    if (stream == "")
                    {
                        stream = chkl_str.Items[i].Value.ToString();
                    }
                    else
                    {
                        stream = stream + "','" + "" + chkl_str.Items[i].Value.ToString() + "";
                    }
                }
            }
            string selqry = "select (c.Course_Name +'-'+ dt.Dept_Name) as Department,degree_code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id and type in ('" + stream + "')";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {

                chkl_course.DataSource = ds;
                chkl_course.DataTextField = "Department";
                chkl_course.DataValueField = "degree_code";
                chkl_course.DataBind();
            }
            for (int j = 0; j < chkl_course.Items.Count; j++)
            {
                chkl_course.Items[j].Selected = true;
                chk_course.Checked = true;

            }
            // txt_str.Text = "stream(" + chkl_str.Items.Count + ")";
            //  chk_course.Checked = true;

        }
        catch (Exception ex)
        {

        }

    }

    public void chk_course_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chk_course.Checked == true)
            {
                for (int i = 0; i < chkl_course.Items.Count; i++)
                {
                    chkl_course.Items[i].Selected = true;
                }
                // txt_str.Text = "Stream(" + (chkl_course.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < chkl_course.Items.Count; i++)
                {
                    chkl_course.Items[i].Selected = false;
                }
                //  txt_str.Text = "---Select---";
            }

        }
        catch (Exception ex)
        {

        }
    }

    public void chkl_course_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            int commcount = 0;
            // txt_str.Text = "--Select--";
            chk_course.Checked = false;
            for (int i = 0; i < chkl_course.Items.Count; i++)
            {
                if (chkl_course.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount > 0)
            {
                //  txt_str.Text = "Stream(" + commcount.ToString() + ")";
                if (commcount == chkl_course.Items.Count)
                {
                    chk_course.Checked = true;
                }
            }

        }
        catch (Exception ex)
        {

        }
    }

    public void chk_sema_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chk_sema.Checked == true)
            {
                for (int i = 0; i < chkl_sema.Items.Count; i++)
                {
                    chkl_sema.Items[i].Selected = true;
                }
                // txt_str.Text = "Stream(" + (chkl_course.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < chkl_sema.Items.Count; i++)
                {
                    chkl_sema.Items[i].Selected = false;
                }
                //  txt_str.Text = "---Select---";
            }

        }
        catch (Exception ex)
        {

        }
    }

    public void chkl_sema_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            int commcount = 0;
            // txt_str.Text = "--Select--";
            chk_sema.Checked = false;
            for (int i = 0; i < chkl_sema.Items.Count; i++)
            {
                if (chkl_sema.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount > 0)
            {
                //  txt_str.Text = "Stream(" + commcount.ToString() + ")";
                if (commcount == chkl_sema.Items.Count)
                {
                    chk_sema.Checked = true;
                }
            }

        }
        catch (Exception ex)
        {

        }
    }

    public void chk_field_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chk_filed.Checked == true)
            {
                for (int i = 0; i < chkl_field.Items.Count; i++)
                {
                    chkl_field.Items[i].Selected = true;
                }
                // txt_str.Text = "Stream(" + (chkl_course.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < chkl_field.Items.Count; i++)
                {
                    chkl_field.Items[i].Selected = false;
                }
                //  txt_str.Text = "---Select---";
            }

        }
        catch (Exception ex)
        {

        }
    }

    public void chkl_filed_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            int commcount = 0;
            // txt_str.Text = "--Select--";
            chk_filed.Checked = false;
            for (int i = 0; i < chkl_field.Items.Count; i++)
            {
                if (chkl_field.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                }
            }
            if (commcount > 0)
            {
                //  txt_str.Text = "Stream(" + commcount.ToString() + ")";
                if (commcount == chkl_field.Items.Count)
                {
                    chk_filed.Checked = true;
                }
            }

        }
        catch (Exception ex)
        {

        }
    }

    protected void btnMvOneRt_Click(object sender, EventArgs e)
    {
        try
        {
            bool ok = true;
            if (lb_selecthdr.Items.Count > 0 && lb_selecthdr.SelectedItem.Value != "")
            {
                for (int j = 0; j < lb_hdr.Items.Count; j++)
                {
                    if (lb_hdr.Items[j].Value == lb_selecthdr.SelectedItem.Value)
                    {
                        ok = false;
                    }

                }
                if (ok)
                {
                    ListItem lst = new ListItem(lb_selecthdr.SelectedItem.Text, lb_selecthdr.SelectedItem.Value);
                    lb_hdr.Items.Add(lst);
                }

            }
        }
        catch { }
    }

    protected void btnMvTwoRt_Click(object sender, EventArgs e)
    {
        try
        {
            lb_hdr.Items.Clear();
            if (lb_selecthdr.Items.Count > 0)
            {
                for (int j = 0; j < lb_selecthdr.Items.Count; j++)
                {
                    ListItem lst = new ListItem(lb_selecthdr.Items[j].Text, lb_selecthdr.Items[j].Value);
                    lb_hdr.Items.Add(lst);
                }
            }
        }
        catch { }
    }

    protected void btnMvOneLt_Click(object sender, EventArgs e)
    {
        try
        {
            if (lb_hdr.Items.Count > 0 && lb_hdr.SelectedItem.Value != "")
            {
                lb_hdr.Items.RemoveAt(lb_hdr.SelectedIndex);
            }
        }
        catch { }
    }

    protected void btnMvTwoLt_Click(object sender, EventArgs e)
    {
        try
        {
            lb_hdr.Items.Clear();
        }
        catch { }
    }

    #endregion

    public void loadcollege()
    {
        try
        {
            string strUser = d2.getUserCode(Convert.ToString(Session["group_code"]), Convert.ToString(Session["usercode"]), 1);
            ds.Clear();
            ddl_collegename.Items.Clear();
            string Query = "select cp.college_code,cf.collname from collegeprivilages cp,collinfo cf where " + strUser + " and cp.college_code=cf.college_code";
            ds = d2.select_method_wo_parameter(Query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_collegename.DataSource = ds;
                ddl_collegename.DataTextField = "collname";
                ddl_collegename.DataValueField = "college_code";
                ddl_collegename.DataBind();
            }
        }
        catch
        { }
    }

    protected void lb3_Click(object sender, EventArgs e)
    {
        Session.Abandon();
        Session.Clear();
        Session.RemoveAll();
        System.Web.Security.FormsAuthentication.SignOut();
        Response.Redirect("default.aspx", false);

    }

    #region stream

    public void loadstrm()
    {
        try
        {
            ddlstream.Items.Clear();
            string selqry = "select distinct type  from Course where college_code ='" + collegecode1 + "' and type<>''";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlstream.DataSource = ds;
                ddlstream.DataTextField = "type";
                ddlstream.DataValueField = "type";
                ddlstream.DataBind();
                ddlstream.Enabled = true;
            }
            else
            {
                ddlstream.Enabled = false;
            }
            binddeg();
        }
        catch
        { }
    }

    protected void ddlstream_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            string clgvalue = ddl_collegename.SelectedItem.Value.ToString();
            string stream = ddlstream.SelectedItem.Text.ToString();
            string selqry = "select distinct c.Course_Name,c.Course_Id  from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and type  in('" + stream + "') and d.college_code='" + clgvalue + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");

            if (ds.Tables[0].Rows.Count > 0)
            {

                cbl_degree.DataSource = ds;
                cbl_degree.DataTextField = "Course_Name";
                cbl_degree.DataValueField = "Course_Id";
                cbl_degree.DataBind();
            }
            for (int j = 0; j < cbl_degree.Items.Count; j++)
            {
                cbl_degree.Items[j].Selected = true;
                cb_degree.Checked = true;
            }

            txt_degree.Text = lbldeg.Text + "(" + cbl_degree.Items.Count + ")";
            binddept();
        }
        catch { }
    }

    #endregion

    #region batch

    public void bindBtch()
    {
        try
        {

            cbl_batch.Items.Clear();
            cb_batch.Checked = false;
            txt_batch.Text = "---Select---";
            ds.Clear();
            ds = d2.BindBatch();
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_batch.DataSource = ds;
                cbl_batch.DataTextField = "batch_year";
                cbl_batch.DataValueField = "batch_year";
                cbl_batch.DataBind();
                if (cbl_batch.Items.Count > 0)
                {
                    for (i = 0; i < cbl_batch.Items.Count; i++)
                    {
                        cbl_batch.Items[i].Selected = true;
                    }
                    txt_batch.Text = "Batch(" + cbl_batch.Items.Count + ")";
                    cb_batch.Checked = true;
                }
            }
        }
        catch { }
    }

    protected void cb_batch_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(cb_batch, cbl_batch, txt_batch, "Batch", "--Select--");
            binddeg();
            binddept();
        }
        catch { }
    }

    protected void cbl_batch_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(cb_batch, cbl_batch, txt_batch, "Batch", "--Select--");
            binddeg();
            binddept();
        }
        catch { }
    }

    #endregion

    #region degree

    public void binddeg()
    {
        try
        {
            cbl_degree.Items.Clear();
            cb_degree.Checked = false;
            txt_degree.Text = "---Select---";
            string stream = "";
            if (ddlstream.Items.Count > 0)
            {
                if (ddlstream.SelectedItem.Text != "")
                {
                    stream = ddlstream.SelectedItem.Text.ToString();
                }
            }

            cbl_degree.Items.Clear();
            string clgvalue = ddl_collegename.SelectedItem.Value.ToString();
            ds.Clear();
            string selqry = "select distinct  c.Course_Name,c.Course_Id  from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + clgvalue + "'";
            if (stream != "")
            {
                selqry = selqry + " and type  in('" + stream + "')";
            }
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_degree.DataSource = ds;
                cbl_degree.DataTextField = "course_name";
                cbl_degree.DataValueField = "course_id";
                cbl_degree.DataBind();
                if (cbl_degree.Items.Count > 0)
                {
                    for (i = 0; i < cbl_degree.Items.Count; i++)
                    {
                        cbl_degree.Items[i].Selected = true;
                    }
                    txt_degree.Text = lbldeg.Text + "(" + cbl_degree.Items.Count + ")";
                    cb_degree.Checked = true;
                }
            }

        }
        catch { }
    }

    protected void cb_degree_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(cb_degree, cbl_degree, txt_degree, lbldeg.Text, "--Select--");
            binddept();
        }
        catch { }
    }

    protected void cbl_degree_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(cb_degree, cbl_degree, txt_degree, lbldeg.Text, "--Select--");
            binddept();
        }
        catch { }
    }

    #endregion

    #region dept

    public void binddept()
    {
        try
        {
            cbl_dept.Items.Clear();
            cb_dept.Checked = false;
            txt_dept.Text = "---Select---";
            batch2 = "";
            for (i = 0; i < cbl_batch.Items.Count; i++)
            {
                if (cbl_batch.Items[i].Selected == true)
                {
                    if (batch2 == "")
                    {
                        batch2 = Convert.ToString(cbl_batch.Items[i].Text);
                    }
                    else
                    {
                        batch2 += "','" + Convert.ToString(cbl_batch.Items[i].Text);
                    }
                }

            }

            degree = "";
            for (i = 0; i < cbl_degree.Items.Count; i++)
            {
                if (cbl_degree.Items[i].Selected == true)
                {
                    if (degree == "")
                    {
                        degree = Convert.ToString(cbl_degree.Items[i].Value);
                    }
                    else
                    {
                        degree += "," + Convert.ToString(cbl_degree.Items[i].Value);
                    }
                }

            }

            string collegecode = ddl_collegename.SelectedItem.Value.ToString();
            if (batch2 != "" && degree != "")
            {
                ds.Clear();
                ds = d2.BindBranchMultiple(singleuser, group_user, degree, collegecode, usercode);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_dept.DataSource = ds;
                    cbl_dept.DataTextField = "dept_name";
                    cbl_dept.DataValueField = "degree_code";
                    cbl_dept.DataBind();
                    if (cbl_dept.Items.Count > 0)
                    {
                        for (i = 0; i < cbl_dept.Items.Count; i++)
                        {
                            cbl_dept.Items[i].Selected = true;
                        }
                        txt_dept.Text = lbldept.Text + "(" + cbl_dept.Items.Count + ")";
                        cb_dept.Checked = true;
                    }
                }
            }

        }
        catch { }
    }

    protected void cb_dept_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(cb_dept, cbl_dept, txt_dept, lbldept.Text, "--Select--");
            bindsec();
            // bindsem();
        }
        catch { }
    }

    protected void cbl_dept_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(cb_dept, cbl_dept, txt_dept, "Department", "--Select--");
            bindsec();
            //  bindsem();
        }
        catch { }
    }

    #endregion

    #region sem

    protected void cb_sem_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(cb_sem, cbl_sem, txt_sem, lbldept.Text, "--Select--");
            bindsec();
        }
        catch (Exception ex)
        { }
    }

    protected void cbl_sem_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(cb_sem, cbl_sem, txt_sem, "Semester", "--Select--");
            bindsec();
        }
        catch (Exception ex)
        { }

    }

    protected void bindsem()
    {
        try
        {
            cbl_sem.Items.Clear();
            cb_sem.Checked = false;
            txt_sem.Text = "--Select--";
            ds.Clear();
            string linkName = string.Empty;
            string cbltext = string.Empty;
            ds = d2.loadFeecategory(Convert.ToString(ddl_collegename.SelectedItem.Value), usercode, ref linkName);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cbl_sem.DataSource = ds;
                cbl_sem.DataTextField = "TextVal";
                cbl_sem.DataValueField = "TextCode";
                cbl_sem.DataBind();

                if (cbl_sem.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_sem.Items.Count; i++)
                    {
                        cbl_sem.Items[i].Selected = true;
                        cbltext = Convert.ToString(cbl_sem.Items[i].Text);
                    }
                    if (cbl_sem.Items.Count == 1)
                        txt_sem.Text = "" + linkName + "(" + cbltext + ")";
                    else
                        txt_sem.Text = "" + linkName + "(" + cbl_sem.Items.Count + ")";
                    cb_sem.Checked = true;
                }
            }
        }
        catch { }
    }

    #endregion

    #region sec

    public void bindsec()
    {
        try
        {
            cbl_sect.Items.Clear();
            txt_sect.Text = "---Select---";
            cb_sect.Checked = false;
            string build = "";
            if (cbl_sem.Items.Count > 0)
            {
                for (int i = 0; i < cbl_sem.Items.Count; i++)
                {
                    if (cbl_sem.Items[i].Selected == true)
                    {
                        if (build == "")
                        {
                            build = Convert.ToString(cbl_sem.Items[i].Value);
                        }
                        else
                        {
                            build = build + "'" + "," + "'" + Convert.ToString(cbl_sem.Items[i].Value);
                        }
                    }
                }
            }
            string clgvalue = ddl_collegename.SelectedItem.Value.ToString();
            if (build != "")
            {
                ds = d2.BindSectionDetailmult(clgvalue);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_sect.DataSource = ds;
                    cbl_sect.DataTextField = "sections";
                    cbl_sect.DataValueField = "sections";
                    cbl_sect.DataBind();
                    if (cbl_sect.Items.Count > 0)
                    {
                        for (int row = 0; row < cbl_sect.Items.Count; row++)
                        {
                            cbl_sect.Items[row].Selected = true;
                        }
                        txt_sect.Text = "Section(" + cbl_sect.Items.Count + ")";
                        cb_sect.Checked = true;
                    }

                }
            }
            else
            {
                cb_sect.Checked = false;
                txt_sect.Text = "--Select--";
            }
        }

        catch (Exception ex)
        {
        }
    }

    protected void cb_sect_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(cb_sect, cbl_sect, txt_sect, "Section", "--Select--");
        }
        catch (Exception ex)
        { }
    }

    protected void cbl_sect_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(cb_sect, cbl_sect, txt_sect, "Section", "--Select--");
        }
        catch (Exception ex)
        { }
    }

    #endregion

    #region memtype

    private void memtype()
    {
        try
        {
            cblmem.Items.Clear();
            cblmem.Items.Add(new ListItem("Student", "1"));
            cblmem.Items.Add(new ListItem("Staff", "2"));
            cblmem.Items.Add(new ListItem("Vendor", "3"));
            cblmem.Items.Add(new ListItem("Others", "4"));
            if (cblmem.Items.Count > 0)
            {
                for (int i = 0; i < cblmem.Items.Count; i++)
                {
                    cblmem.Items[i].Selected = true;
                }
                cbmem.Checked = true;
                txtmem.Text = "MemType(" + cblmem.Items.Count + ")";
            }
        }
        catch { }
    }

    protected void cbmem_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cbmem, cblmem, txtmem, "MemType", "--Select--");
    }

    protected void cblmem_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbmem, cblmem, txtmem, "MemType", "--Select--");
    }

    #endregion

    #region Include setting

    private void LoadIncludeSetting()
    {
        try
        {
            cblinclude.Items.Clear();
            cblinclude.Items.Add(new ListItem("Course Completed", "1"));
            cblinclude.Items.Add(new ListItem("Debar", "2"));
            cblinclude.Items.Add(new ListItem("Discontinue", "3"));
            cblinclude.Items.Add(new ListItem("Cancel", "4"));
            cblinclude.Items.Add(new ListItem("Prolong Absent", "5"));
            if (cblinclude.Items.Count > 0)
            {
                for (int i = 0; i < cblinclude.Items.Count; i++)
                {
                    cblinclude.Items[i].Selected = true;
                }
                cbinclude.Checked = true;
                txtinclude.Text = "Include Settings(" + cblinclude.Items.Count + ")";
            }
        }
        catch { }
    }

    protected void cbinclude_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(cbinclude, cblinclude, txtinclude, "Include Setting", "--Select--");
        }
        catch { }
    }

    protected void cblinclude_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(cbinclude, cblinclude, txtinclude, "Include Setting", "--Select--");
        }
        catch { }
    }

    #endregion

    #region allrbevents

    #region rb_header_change

    protected void rb_header_Change(object sender, EventArgs e)
    {
        tdcumulacr.Visible = false;
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        lbl_alert.Visible = false;
        loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
        pagelnk.Visible = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
        divstudcell.Visible = false;
        GrdStud.Visible = false;
        lbl_semcell.Text = "";
        lbl_semcell.Visible = false;
        Button1.Visible = false;
        chk_datewise.Checked = false;
        ledger.Visible = false;
        batch.Visible = false;
        divdegr.Visible = false;
        divdep.Visible = false;
        divsema.Visible = false;
        div7.Visible = false;
        //dept
        deptfld.Visible = false;
        deptdtfld.Visible = false;
        otherfld.Visible = false;
        deptcomm.Visible = false;
        deptdetail.Visible = false;
        //daildetail
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = false;
        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = true;
        //degree setting
        chkcomflt.Checked = false;
        chkcomflt.Enabled = true;
        chkcomflt_OnCheckedChanged(sender, e);
        pagelnk.Visible = false;
    }

    #endregion

    #region rb_ledger_chang
    protected void rb_ledger_Change(object sender, EventArgs e)
    {
        tdcumulacr.Visible = false;
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        pagelnk.Visible = false;
        lbldlydetail.Visible = false;
        lbl_alert.Visible = false;
        loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        pagelnk.Visible = false;
        lblhed.Text = "";
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
        divstudcell.Visible = false;
        GrdStud.Visible = false;
        lbl_semcell.Text = "";
        lbl_semcell.Visible = false;
        chk_datewise.Checked = false;
        ledger.Visible = false;
        batch.Visible = false;
        divdegr.Visible = false;
        divdep.Visible = false;
        divsema.Visible = false;
        div7.Visible = false;
        //dept
        deptfld.Visible = false;
        deptdtfld.Visible = false;
        otherfld.Visible = false;
        deptcomm.Visible = false;
        deptdetail.Visible = false;

        //daildetail
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = false;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = true;
        //degree setting
        chkcomflt.Checked = false;
        chkcomflt.Enabled = true;
        chkcomflt_OnCheckedChanged(sender, e);
    }
    #endregion

    #region rb_batch_change
    protected void rb_batch_Change(object sender, EventArgs e)
    {
        tdcumulacr.Visible = false;
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        pagelnk.Visible = false;
        lbldlydetail.Visible = false;
        lbl_alert.Visible = false;
        Button1.Visible = false;
        loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        pagelnk.Visible = false;
        lblhed.Text = "";
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
        divstudcell.Visible = false;
        GrdStud.Visible = false;
        lbl_semcell.Text = "";
        lbl_semcell.Visible = false;
        chk_datewise.Checked = false;
        ledger.Visible = false;
        batch.Visible = false;
        divdegr.Visible = false;
        divdep.Visible = false;
        divsema.Visible = false;
        div7.Visible = false;
        //dept
        deptfld.Visible = false;
        deptdtfld.Visible = false;
        otherfld.Visible = false;
        deptcomm.Visible = false;
        deptdetail.Visible = false;

        //daildetail
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = false;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = false;
        //degree setting
        chkcomflt.Checked = true;
        chkcomflt.Enabled = false;
        chkcomflt_OnCheckedChanged(sender, e);
    }
    #endregion

    #region rb_dept_change
    protected void rb_dept_Change(object sender, EventArgs e)
    {
        tdcumulacr.Visible = false;
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        pagelnk.Visible = false;
        lbldlydetail.Visible = false;
        lbl_alert.Visible = false;
        Button1.Visible = false;
        loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
        pagelnk.Visible = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
        divstudcell.Visible = false;
        GrdStud.Visible = false;
        lbl_semcell.Text = "";
        lbl_semcell.Visible = false;
        //  divdatewise.Visible = false;
        chk_datewise.Checked = false;
        ledger.Visible = false;
        batch.Visible = false;
        divdegr.Visible = false;
        divdep.Visible = false;
        divsema.Visible = false;
        div7.Visible = false;
        //dept
        deptfld.Visible = true;
        deptcomm.Visible = true;
        rbdeptcommon.Checked = true;
        rbdeptdetail.Checked = false;
        deptdtfld.Visible = true;
        deptdetail.Visible = true;
        otherfld.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = false;
        //  chkmem.Visible = false;
        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = false;
        //degree setting
        chkcomflt.Checked = true;
        chkcomflt.Enabled = false;
        chkcomflt_OnCheckedChanged(sender, e);
        //rbdeptcommon       
        rbdeptyear.Enabled = false;
        rbdepthead.Enabled = false;
        rbdeptledg.Enabled = false;
        if (cbAcdYear.Checked == true)
        {
            rbdeptdetail.Visible = false;
            deptdetail.Visible = false;
        }
    }
    #endregion

    #region rb_degree_change
    protected void rb_degree_Change(object sender, EventArgs e)
    {
        tdcumulacr.Visible = false;
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        pagelnk.Visible = false;
        lbldlydetail.Visible = false;
        Button1.Visible = false;
        loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        pagelnk.Visible = false;
        lblhed.Text = "";
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
        divstudcell.Visible = false;
        GrdStud.Visible = false;
        lbl_semcell.Text = "";
        lbl_semcell.Visible = false;
        chk_datewise.Checked = false;
        ledger.Visible = false;
        batch.Visible = false;
        divdegr.Visible = false;
        divdep.Visible = false;
        divsema.Visible = false;
        div7.Visible = false;
        //dept
        deptfld.Visible = false;
        deptdtfld.Visible = false;
        otherfld.Visible = false;
        deptcomm.Visible = false;
        deptdetail.Visible = false;

        //daildetail
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = false;

        //chkmem.Visible = false;
        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = false;
        //degree setting
        chkcomflt.Checked = true;
        chkcomflt.Enabled = false;
        chkcomflt_OnCheckedChanged(sender, e);
    }
    #endregion

    #region rb_sem_change
    protected void rb_sem_Change(object sender, EventArgs e)
    {
        tdcumulacr.Visible = false;
        pagelnk.Visible = false;
        lbldlydetail.Visible = false;
        lbl_alert.Visible = false;
        loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        pagelnk.Visible = false;
        lblhed.Text = "";
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
        divstudcell.Visible = false;
        GrdStud.Visible = false;
        lbl_semcell.Text = "";
        lbl_semcell.Visible = false;
        Button1.Visible = false;
        chk_datewise.Checked = false;
        ledger.Visible = false;
        batch.Visible = false;
        divdegr.Visible = false;
        divdep.Visible = false;
        divsema.Visible = false;
        div7.Visible = false;
        //dept
        deptfld.Visible = false;
        deptdtfld.Visible = false;
        otherfld.Visible = false;
        deptcomm.Visible = false;
        deptdetail.Visible = false;
        //daildetail
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = false;

        // chkmem.Visible = false;
        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = false;
        //degree setting
        chkcomflt.Checked = true;
        chkcomflt.Enabled = false;
        chkcomflt_OnCheckedChanged(sender, e);
    }
    #endregion

    #region rb_studwise_change
    protected void rb_studwise_Change(object sender, EventArgs e)
    {
        tdcumulacr.Visible = false;
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        loadsetting();
        lbl_alert.Visible = false;
        Button1.Visible = false;
        loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        rb_detail.Checked = false;
        rb_common.Checked = true;
        rb_hori.Enabled = false;
        rb_vert.Enabled = false;
        rbstudhed.Enabled = false;
        rbstudled.Enabled = false;
        rb_hori.Checked = true;
        rb_vert.Checked = false;
        rbstudhed.Checked = true;
        rb_dailydetail.Checked = false;
        pagelnk.Visible = true;
        LinkButton3.Visible = true;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
        ledgercellclik = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";

        divstudcell.Visible = false;
        GrdStud.Visible = false;
        lbl_semcell.Text = "";
        lbl_semcell.Visible = false;
        chk_datewise.Checked = false;
        ledger.Visible = false;
        batch.Visible = false;
        divdegr.Visible = false;
        divdep.Visible = false;
        divsema.Visible = false;
        div7.Visible = false;
        txt_roll.Text = "";
        //dept
        deptfld.Visible = false;
        deptdtfld.Visible = false;
        otherfld.Visible = false;
        deptcomm.Visible = false;
        deptdetail.Visible = false;

        //daildetail
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = true;

        // chkmem.Visible = false;

        //stud
        tdroll.Visible = true;
        trstud.Visible = true;
        //memtype
        txtmem.Enabled = false;
        //degree setting
        chkcomflt.Checked = true;
        chkcomflt.Enabled = false;
        chkcomflt_OnCheckedChanged(sender, e);
    }
    #endregion

    #region Daily detail
    public void rb_dailydetail_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        pagelnk.Visible = false;
        lbldlydetail.Visible = false;
        loaddailycolumnorder();
        divcommon.Visible = false;
        lblvalidation1.Text = "";
        lblvalidation1.Visible = false;
        //net amount
        tdnet.Visible = false;

        //  chkmem.Visible = true;
        txtmem.Enabled = false;
        memtype();
        //memtype
        txtmem.Enabled = true;
        //degree setting
        chkcomflt.Checked = false;
        chkcomflt.Enabled = true;
        chkcomflt_OnCheckedChanged(sender, e);
        tdroll.Visible = true;
        loadsetting();
        otherfld.Visible = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
        //loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
        trstud.Visible = false;
        deptfld.Visible = false;
        deptdtfld.Visible = false;
        tdcumulacr.Visible = true;
        rbcumulacr.Checked = true;
        rbdetailacr.Checked = false;
    }

    protected void rbcumulacr_Change(object sender, EventArgs e)
    {
        rbacrhed.Enabled = false;
        rbacrled.Enabled = false;
        loaddailycolumnorder();

        //old
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        pagelnk.Visible = false;
        lbldlydetail.Visible = false;
        divcommon.Visible = false;
        lblvalidation1.Text = "";
        lblvalidation1.Visible = false;
        //net amount
        tdnet.Visible = false;

        //  chkmem.Visible = true;
        txtmem.Enabled = false;
        memtype();
        //memtype
        txtmem.Enabled = true;
        //degree setting
        chkcomflt.Checked = false;
        chkcomflt.Enabled = true;
        chkcomflt_OnCheckedChanged(sender, e);
        tdroll.Visible = true;
        loadsetting();
        otherfld.Visible = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
        //loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
        trstud.Visible = false;
        deptfld.Visible = false;
        deptdtfld.Visible = false;

        //
        lbldlydetail.Text = "";
        lbldlydetail.Visible = false;
        divcommon.Visible = false;
        divdailydeail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        GrdDailyDetail.Visible = false;
        rptprint.Visible = false;
        lblvalidation1.Text = "";
        lblvalidation1.Visible = false;

    }

    protected void rbdetailacr_Change(object sender, EventArgs e)
    {
        rbacrhed.Enabled = true;
        rbacrled.Enabled = true;
        rbacrhed.Checked = true;
        rbacrled.Checked = false;
        loaddailycolumnorder();
        //old
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        pagelnk.Visible = false;
        lbldlydetail.Visible = false;
        divcommon.Visible = false;
        lblvalidation1.Text = "";
        lblvalidation1.Visible = false;
        //net amount
        tdnet.Visible = false;

        //  chkmem.Visible = true;
        txtmem.Enabled = false;
        memtype();
        //memtype
        txtmem.Enabled = true;
        //degree setting
        chkcomflt.Checked = false;
        chkcomflt.Enabled = true;
        chkcomflt_OnCheckedChanged(sender, e);
        tdroll.Visible = true;
        loadsetting();
        otherfld.Visible = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
        //loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
        trstud.Visible = false;
        deptfld.Visible = false;
        deptdtfld.Visible = false;

        //
        lbldlydetail.Text = "";
        lbldlydetail.Visible = false;
        divcommon.Visible = false;
        divdailydeail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        GrdDailyDetail.Visible = false;
        rptprint.Visible = false;
        lblvalidation1.Text = "";
        lblvalidation1.Visible = false;
    }

    protected void rbacrhed_Change(object sender, EventArgs e)
    {
        loaddailycolumnorder();
        lbldlydetail.Text = "";
        lbldlydetail.Visible = false;
        divcommon.Visible = false;
        divdailydeail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        GrdDailyDetail.Visible = false;
        rptprint.Visible = false;
        lblvalidation1.Text = "";
        lblvalidation1.Visible = false;
    }

    protected void rbacrled_Change(object sender, EventArgs e)
    {
        loaddailycolumnorder();
        lbldlydetail.Text = "";
        lbldlydetail.Visible = false;
        divcommon.Visible = false;
        divdailydeail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        GrdDailyDetail.Visible = false;
        rptprint.Visible = false;
        lblvalidation1.Text = "";
        lblvalidation1.Visible = false;
    }

    #endregion

    #region studcommonanddetails
    public void rb_detail_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        lbl_alert.Visible = false;
        Button1.Visible = false;
        rb_hori.Checked = true;
        rb_vert.Checked = false;
        rb_hori.Enabled = true;
        rb_vert.Enabled = true;
        rbstudhed.Enabled = true;
        rbstudhed.Checked = true;
        rbstudled.Checked = false;
        rbstudled.Enabled = true;
        loadcolumnorder();
        pagelnk.Visible = true;
        lblhed.Text = "";
        Button1.Visible = false;
        //dept
        deptcomm.Visible = false;
        deptdetail.Visible = false;

        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = true;

        //  chkmem.Visible = false;
        chkpaid.Enabled = false;
        chkpaid.Checked = false;
        //memtype
        txtmem.Enabled = false;

    }
    public void rb_common_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        lbl_alert.Visible = false;
        rb_hori.Checked = true;
        rb_hori.Enabled = false;
        rb_vert.Enabled = false;
        rbstudhed.Enabled = false;
        rbstudled.Enabled = false;
        loadcolumnorder();
        pagelnk.Visible = true;
        lblhed.Text = "";
        Button1.Visible = false;
        //dept
        deptcomm.Visible = false;
        deptdetail.Visible = false;

        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = true;

        //chkmem.Visible = false;
        chkpaid.Enabled = true;
        chkpaid.Checked = false;
        //memtype
        txtmem.Enabled = false;

    }


    public void rb_hori_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        loadcolumnorder();
        pagelnk.Visible = true;
        div1.Visible = false;
        grdStudentReport.Visible = false;
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
        Button1.Visible = false;
        //dept
        deptcomm.Visible = false;
        deptdetail.Visible = false;

        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = true;
        //memtype
        txtmem.Enabled = false;
    }
    public void rb_vert_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        loadcolumnorder();
        pagelnk.Visible = false;
        div1.Visible = false;
        grdStudentReport.Visible = false;
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
        Button1.Visible = false;
        //dept
        deptcomm.Visible = false;
        deptdetail.Visible = false;

        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = false;
        //memtype
        txtmem.Enabled = false;
    }
    public void rbstudhed_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbl_alert.Visible = false;
        loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
        Button1.Visible = false;
        //dept
        deptcomm.Visible = false;
        deptdetail.Visible = false;

        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        if (rb_hori.Checked == true)
        {
            tdnet.Visible = true;
        }
        else
        {
            tdnet.Visible = false;
        }
        //memtype
        txtmem.Enabled = false;
    }
    public void rbstudled_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        lbl_alert.Visible = false;
        loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
        Button1.Visible = false;
        //dept
        deptcomm.Visible = false;
        deptdetail.Visible = false;

        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        //net amount
        tdnet.Visible = false;
        //memtype
        txtmem.Enabled = false;
    }
    #endregion

    #region others
    protected void rb_others_Change(object sender, EventArgs e)
    {
        tdcumulacr.Visible = false;
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        pagelnk.Visible = false;
        lbldlydetail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;
        deptfld.Visible = false;
        deptdtfld.Visible = false;
        deptcomm.Visible = false;
        deptdetail.Visible = false;
        otherfld.Visible = true;
        otherdetail.Visible = true;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;

        tdnet.Visible = false;
        //memtype
        txtmem.Enabled = false;
        chkcomflt.Enabled = false;
        chkcomflt.Checked = false;
        chkcomflt_OnCheckedChanged(sender, e);
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
        loadcolumnorder();
        div1.Visible = false;
        grdStudentReport.Visible = false;
        divledger.Visible = false;
        Grdledger.Visible = false;
        divbatch.Visible = false;
        GrdBatch.Visible = false;
        divdegree.Visible = false;
        divdept.Visible = false;
        GrdDegree.Visible = false;
        divsem.Visible = false;
        GrdDept.Visible = false;
        GrdSem.Visible = false;
        lbl_ledg.Visible = false;
        lbl_ledg.Text = "";
        lbl_bat.Visible = false;
        lbl_bat.Text = "";
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        lbl_sem.Visible = false;
        lbl_sem.Text = "";
        rptprint.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        lblhed.Text = "";
    }
    protected void rbstaff_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;

        grdStudentReport.Visible = false;
        div1.Visible = false;
        header.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        rptprint.Visible = false;
        lblhed.Visible = false;
        //net amount
        tdnet.Visible = false;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
    }
    protected void rbvendor_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;

        grdStudentReport.Visible = false;
        div1.Visible = false;
        header.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        rptprint.Visible = false;
        lblhed.Visible = false;
        //net amount
        tdnet.Visible = false;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
    }
    protected void rbothers_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;

        grdStudentReport.Visible = false;
        div1.Visible = false;
        header.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        rptprint.Visible = false;
        lblhed.Visible = false;
        //net amount
        tdnet.Visible = false;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
    }
    #endregion

    #region deptcommonanddetails
    protected void rbdeptcommon_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        //dept detail 
        rbdeptyear.Enabled = false;
        rbdepthead.Enabled = false;
        rbdeptledg.Enabled = false;
        divdailydeail.Visible = false;
        grdStudentReport.Visible = false;
        div1.Visible = false;
        header.Visible = false;
        pheaderfilter.Visible = false;
        rptprint.Visible = false;
        lblhed.Visible = false;
        //net amount
        tdnet.Visible = false;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
    }
    protected void rbdeptdetail_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;

        //dept detail 
        rbdeptyear.Enabled = true;
        rbdepthead.Enabled = true;
        rbdeptledg.Enabled = true;
        grdStudentReport.Visible = false;
        div1.Visible = false;
        header.Visible = false;
        rbdeptyear.Checked = true;
        rbdepthead.Checked = false;
        rbdeptledg.Checked = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        rptprint.Visible = false;
        lblhed.Visible = false;
        //net amount
        tdnet.Visible = false;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
    }
    protected void rbdeptyear_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;

        grdStudentReport.Visible = false;
        div1.Visible = false;
        header.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        rptprint.Visible = false;
        lblhed.Visible = false;
        //net amount
        tdnet.Visible = false;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
    }
    protected void rbdepthead_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;

        grdStudentReport.Visible = false;
        div1.Visible = false;
        header.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        rptprint.Visible = false;
        lblhed.Visible = false;
        //net amount
        tdnet.Visible = false;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
    }
    protected void rbdeptledg_Change(object sender, EventArgs e)
    {
        lblpaidcol.Visible = false;
        lblyetpaid.Visible = false;
        lbldlydetail.Visible = false;
        pnlhead.Visible = false;
        pnlcolhed.Visible = false;
        //divdaily.Visible = false;
        divdailydeail.Visible = false;

        grdStudentReport.Visible = false;
        div1.Visible = false;
        header.Visible = false;
        pheaderfilter.Visible = false;
        pcolumnorder.Visible = false;
        rptprint.Visible = false;
        lblhed.Visible = false;
        //net amount
        tdnet.Visible = false;

        //stud
        tdroll.Visible = false;
        trstud.Visible = false;
        //memtype
        txtmem.Enabled = false;
        txtexcelname.Text = "";
        lblvalidation1.Text = "";
    }
    #endregion



    #endregion

    #region btnsearch

    public bool columncount()
    {
        bool colorder = false;
        try
        {
            for (int i = 0; i < cblcolumnorder.Items.Count; i++)
            {
                if (cblcolumnorder.Items[i].Selected == true)
                {
                    colorder = true;
                }
            }
        }
        catch { }
        return colorder;
    }

    public bool dailycolumncount()
    {
        bool colorder = false;
        try
        {
            for (int i = 0; i < cbldaily.Items.Count; i++)
            {
                if (cbldaily.Items[i].Selected == true)
                {
                    colorder = true;
                }
            }
        }
        catch { }
        return colorder;
    }

    #region cellclik columnsordervalues

    public void loadcolumns()
    {
        try
        {
            string linkname = "Studentfeeallot column order settings";
            string columnvalue = "";
            int clsupdate = 0;
            DataSet dscol = new DataSet();
            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
            dscol.Clear();
            dscol = d2.select_method_wo_parameter(selcol, "Text");
            if (columncount() == true)
            {
                if (cblcolumnorder.Items.Count > 0)
                {
                    colord.Clear();
                    for (int i = 0; i < cblcolumnorder.Items.Count; i++)
                    {
                        if (cblcolumnorder.Items[i].Selected == true)
                        {
                            colord.Add(Convert.ToString(cblcolumnorder.Items[i].Value));
                            if (columnvalue == "")
                            {
                                columnvalue = Convert.ToString(cblcolumnorder.Items[i].Value);
                            }
                            else
                            {
                                columnvalue = columnvalue + ',' + Convert.ToString(cblcolumnorder.Items[i].Value);
                            }
                        }
                    }
                }
            }
            else if (dscol.Tables.Count > 0)
            {
                if (dscol.Tables[0].Rows.Count > 0)
                {
                    colord.Clear();
                    for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                    {
                        string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                        string[] valuesplit = value.Split(',');
                        if (valuesplit.Length > 0)
                        {
                            for (int k = 0; k < valuesplit.Length; k++)
                            {
                                colord.Add(Convert.ToString(valuesplit[k]));
                                if (columnvalue == "")
                                {
                                    columnvalue = Convert.ToString(valuesplit[k]);
                                }
                                else
                                {
                                    columnvalue = columnvalue + ',' + Convert.ToString(valuesplit[k]);
                                }
                            }
                        }
                    }
                }

            }
            else
            {
                colord.Clear();
                for (int i = 0; i < cblcolumnorder.Items.Count; i++)
                {
                    cblcolumnorder.Items[i].Selected = true;
                    colord.Add(Convert.ToString(cblcolumnorder.Items[i].Value));
                    if (columnvalue == "")
                    {
                        columnvalue = Convert.ToString(cblcolumnorder.Items[i].Value);
                    }
                    else
                    {
                        columnvalue = columnvalue + ',' + Convert.ToString(cblcolumnorder.Items[i].Value);
                    }
                }
            }
            if (columnvalue != "" && columnvalue != null)
            {
                string clsinsert = " if exists(select * from New_InsSettings where LinkName='" + linkname + "') update New_InsSettings set LinkValue='" + columnvalue + "' where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode1 + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code)values('" + linkname + "','" + columnvalue + "','" + usercode + "','" + collegecode1 + "')";
                clsupdate = d2.update_method_wo_parameter(clsinsert, "Text");
            }
            if (clsupdate == 1)
            {
                string sel = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
                DataSet dscolor = new DataSet();
                dscolor.Clear();
                dscolor = d2.select_method_wo_parameter(sel, "Text");
                if (dscolor.Tables.Count > 0)
                {
                    int count = 0;
                    if (dscolor.Tables[0].Rows.Count > 0)
                    {
                        string value = Convert.ToString(dscolor.Tables[0].Rows[0]["LinkValue"]);
                        string[] value1 = value.Split(',');
                        if (value1.Length > 0)
                        {
                            for (int i = 0; i < value1.Length; i++)
                            {
                                string val = value1[i].ToString();
                                for (int k = 0; k < cblcolumnorder.Items.Count; k++)
                                {
                                    if (val == cblcolumnorder.Items[k].Value)
                                    {
                                        cblcolumnorder.Items[k].Selected = true;
                                        count++;
                                    }
                                    if (count == cblcolumnorder.Items.Count)
                                    {
                                        cb_column.Checked = true;
                                    }
                                    else
                                    {
                                        cb_column.Checked = false;
                                    }
                                }
                            }
                        }

                    }
                }
            }
        }
        catch { }
    }

    public void loadledgercolumns()
    {
        try
        {
            string linkname = "Studentfeeallot column order settings";
            string columnvalue = "";
            DataSet dscol = new DataSet();
            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
            dscol.Clear();
            dscol = d2.select_method_wo_parameter(selcol, "Text");

            if (dscol.Tables.Count > 0)
            {
                if (dscol.Tables[0].Rows.Count > 0)
                {
                    colord.Clear();
                    for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                    {
                        string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                        string[] valuesplit = value.Split(',');
                        if (valuesplit.Length > 0)
                        {
                            for (int k = 0; k < valuesplit.Length; k++)
                            {
                                colord.Add(Convert.ToString(valuesplit[k]));
                                if (columnvalue == "")
                                {
                                    columnvalue = Convert.ToString(valuesplit[k]);
                                }
                                else
                                {
                                    columnvalue = columnvalue + ',' + Convert.ToString(valuesplit[k]);
                                }
                            }
                        }
                    }
                }

            }

            if (columnvalue != "" && columnvalue != null)
            {
                string clsinsert = " if exists(select * from New_InsSettings where LinkName='" + linkname + "') update New_InsSettings set LinkValue='" + columnvalue + "' where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode1 + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code)values('" + linkname + "','" + columnvalue + "','" + usercode + "','" + collegecode1 + "')";
                int clsupdate = d2.update_method_wo_parameter(clsinsert, "Text");
            }

        }
        catch { }
    }

    public void loadbatchcolumns()
    {
        try
        {
            string linkname = "Studentfeeallot column order settings";
            string columnvalue = "";
            DataSet dscol = new DataSet();
            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
            dscol.Clear();
            dscol = d2.select_method_wo_parameter(selcol, "Text");

            if (dscol.Tables.Count > 0)
            {
                if (dscol.Tables[0].Rows.Count > 0)
                {
                    colord.Clear();
                    for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                    {
                        string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                        string[] valuesplit = value.Split(',');
                        if (valuesplit.Length > 0)
                        {
                            for (int k = 0; k < valuesplit.Length; k++)
                            {
                                colord.Add(Convert.ToString(valuesplit[k]));
                                if (columnvalue == "")
                                {
                                    columnvalue = Convert.ToString(valuesplit[k]);
                                }
                                else
                                {
                                    columnvalue = columnvalue + ',' + Convert.ToString(valuesplit[k]);
                                }
                            }
                        }
                    }
                }

            }

            if (columnvalue != "" && columnvalue != null)
            {
                string clsinsert = " if exists(select * from New_InsSettings where LinkName='" + linkname + "') update New_InsSettings set LinkValue='" + columnvalue + "' where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode1 + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code)values('" + linkname + "','" + columnvalue + "','" + usercode + "','" + collegecode1 + "')";
                int clsupdate = d2.update_method_wo_parameter(clsinsert, "Text");
            }
        }
        catch { }
    }

    public void loaddegreecolumns()
    {
        try
        {
            string linkname = "Studentfeeallot column order settings";
            string columnvalue = "";
            DataSet dscol = new DataSet();
            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
            dscol.Clear();
            dscol = d2.select_method_wo_parameter(selcol, "Text");

            if (dscol.Tables.Count > 0)
            {
                if (dscol.Tables[0].Rows.Count > 0)
                {
                    colord.Clear();
                    for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                    {
                        string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                        string[] valuesplit = value.Split(',');
                        if (valuesplit.Length > 0)
                        {
                            for (int k = 0; k < valuesplit.Length; k++)
                            {
                                colord.Add(Convert.ToString(valuesplit[k]));
                                if (columnvalue == "")
                                {
                                    columnvalue = Convert.ToString(valuesplit[k]);
                                }
                                else
                                {
                                    columnvalue = columnvalue + ',' + Convert.ToString(valuesplit[k]);
                                }
                            }
                        }
                    }
                }

            }

            if (columnvalue != "" && columnvalue != null)
            {
                string clsinsert = " if exists(select * from New_InsSettings where LinkName='" + linkname + "') update New_InsSettings set LinkValue='" + columnvalue + "' where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode1 + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code)values('" + linkname + "','" + columnvalue + "','" + usercode + "','" + collegecode1 + "')";
                int clsupdate = d2.update_method_wo_parameter(clsinsert, "Text");
            }
        }
        catch { }
    }

    public void loaddeptcolumns()
    {
        try
        {
            string linkname = "Studentfeeallot column order settings";
            string columnvalue = "";
            DataSet dscol = new DataSet();
            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
            dscol.Clear();
            dscol = d2.select_method_wo_parameter(selcol, "Text");

            if (dscol.Tables.Count > 0)
            {
                if (dscol.Tables[0].Rows.Count > 0)
                {
                    colord.Clear();
                    for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                    {
                        string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                        string[] valuesplit = value.Split(',');
                        if (valuesplit.Length > 0)
                        {
                            for (int k = 0; k < valuesplit.Length; k++)
                            {
                                colord.Add(Convert.ToString(valuesplit[k]));
                                if (columnvalue == "")
                                {
                                    columnvalue = Convert.ToString(valuesplit[k]);
                                }
                                else
                                {
                                    columnvalue = columnvalue + ',' + Convert.ToString(valuesplit[k]);
                                }
                            }
                        }
                    }
                }

            }

            if (columnvalue != "" && columnvalue != null)
            {
                string clsinsert = " if exists(select * from New_InsSettings where LinkName='" + linkname + "') update New_InsSettings set LinkValue='" + columnvalue + "' where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode1 + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code)values('" + linkname + "','" + columnvalue + "','" + usercode + "','" + collegecode1 + "')";
                int clsupdate = d2.update_method_wo_parameter(clsinsert, "Text");
            }
        }
        catch { }
    }

    public void loadsemcolumns()
    {
        try
        {
            string linkname = "Studentfeeallot column order settings";
            string columnvalue = "";
            DataSet dscol = new DataSet();
            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
            dscol.Clear();
            dscol = d2.select_method_wo_parameter(selcol, "Text");

            if (dscol.Tables.Count > 0)
            {
                if (dscol.Tables[0].Rows.Count > 0)
                {
                    colord.Clear();
                    for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                    {
                        string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                        string[] valuesplit = value.Split(',');
                        if (valuesplit.Length > 0)
                        {
                            for (int k = 0; k < valuesplit.Length; k++)
                            {
                                colord.Add(Convert.ToString(valuesplit[k]));
                                if (columnvalue == "")
                                {
                                    columnvalue = Convert.ToString(valuesplit[k]);
                                }
                                else
                                {
                                    columnvalue = columnvalue + ',' + Convert.ToString(valuesplit[k]);
                                }
                            }
                        }
                    }
                }

            }

            if (columnvalue != "" && columnvalue != null)
            {
                string clsinsert = " if exists(select * from New_InsSettings where LinkName='" + linkname + "') update New_InsSettings set LinkValue='" + columnvalue + "' where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode1 + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code)values('" + linkname + "','" + columnvalue + "','" + usercode + "','" + collegecode1 + "')";
                int clsupdate = d2.update_method_wo_parameter(clsinsert, "Text");
            }
        }
        catch { }
    }

    public void loadstudcolumns()
    {
        try
        {
            string linkname = "Studentfeeallot column order settings";
            string columnvalue = "";
            DataSet dscol = new DataSet();
            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
            dscol.Clear();
            dscol = d2.select_method_wo_parameter(selcol, "Text");

            if (dscol.Tables.Count > 0)
            {
                if (dscol.Tables[0].Rows.Count > 0)
                {
                    colord.Clear();
                    for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                    {
                        string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                        string[] valuesplit = value.Split(',');
                        if (valuesplit.Length > 0)
                        {
                            for (int k = 0; k < valuesplit.Length; k++)
                            {
                                colord.Add(Convert.ToString(valuesplit[k]));
                                if (columnvalue == "")
                                {
                                    columnvalue = Convert.ToString(valuesplit[k]);
                                }
                                else
                                {
                                    columnvalue = columnvalue + ',' + Convert.ToString(valuesplit[k]);
                                }
                            }
                        }
                    }
                }

            }

            if (columnvalue != "" && columnvalue != null)
            {
                string clsinsert = " if exists(select * from New_InsSettings where LinkName='" + linkname + "') update New_InsSettings set LinkValue='" + columnvalue + "' where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode1 + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code)values('" + linkname + "','" + columnvalue + "','" + usercode + "','" + collegecode1 + "')";
                int clsupdate = d2.update_method_wo_parameter(clsinsert, "Text");
            }
        }
        catch { }
    }

    public void loaddailycolumns()
    {
        try
        {
            string linkname = "Studentfeeallot daily column order settings";
            string columnvalue = "";
            int clsupdate = 0;
            DataSet dscol = new DataSet();
            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
            dscol.Clear();
            dscol = d2.select_method_wo_parameter(selcol, "Text");
            if (dailycolumncount() == true)
            {
                if (cbldaily.Items.Count > 0)
                {
                    colord.Clear();
                    for (int i = 0; i < cbldaily.Items.Count; i++)
                    {
                        if (cbldaily.Items[i].Selected == true)
                        {
                            colord.Add(Convert.ToString(cbldaily.Items[i].Value));
                            if (columnvalue == "")
                            {
                                columnvalue = Convert.ToString(cbldaily.Items[i].Value);
                            }
                            else
                            {
                                columnvalue = columnvalue + ',' + Convert.ToString(cbldaily.Items[i].Value);
                            }
                            // columnvalue = Convert.ToString(ViewState["colvalue"]);
                        }
                    }
                }
            }
            else if (dscol.Tables.Count > 0 && dscol.Tables[0].Rows.Count > 0)
            {
                colord.Clear();
                for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                {
                    string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                    string[] valuesplit = value.Split(',');
                    if (valuesplit.Length > 0)
                    {
                        for (int k = 0; k < valuesplit.Length; k++)
                        {
                            colord.Add(Convert.ToString(valuesplit[k]));
                            if (columnvalue == "")
                            {
                                columnvalue = Convert.ToString(valuesplit[k]);
                            }
                            else
                            {
                                columnvalue = columnvalue + ',' + Convert.ToString(valuesplit[k]);
                            }
                        }
                    }
                }
            }
            else
            {
                colord.Clear();
                for (int i = 0; i < cbldaily.Items.Count; i++)
                {
                    cbldaily.Items[i].Selected = true;
                    colord.Add(Convert.ToString(cbldaily.Items[i].Value));
                    if (columnvalue == "")
                    {
                        columnvalue = Convert.ToString(cbldaily.Items[i].Value);
                    }
                    else
                    {
                        columnvalue = columnvalue + ',' + Convert.ToString(cbldaily.Items[i].Value);
                    }
                }
            }
            if (columnvalue != "" && columnvalue != null)
            {
                string clsinsert = " if exists(select * from New_InsSettings where LinkName='" + linkname + "') update New_InsSettings set LinkValue='" + columnvalue + "' where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode1 + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code)values('" + linkname + "','" + columnvalue + "','" + usercode + "','" + collegecode1 + "')";
                clsupdate = d2.update_method_wo_parameter(clsinsert, "Text");
            }
            if (clsupdate == 1)
            {
                string sel = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
                DataSet dscolor = new DataSet();
                dscolor.Clear();
                dscolor = d2.select_method_wo_parameter(sel, "Text");
                if (dscolor.Tables.Count > 0)
                {
                    int count = 0;
                    if (dscolor.Tables[0].Rows.Count > 0)
                    {
                        string value = Convert.ToString(dscolor.Tables[0].Rows[0]["LinkValue"]);
                        string[] value1 = value.Split(',');
                        if (value1.Length > 0)
                        {
                            for (int i = 0; i < value1.Length; i++)
                            {
                                string val = value1[i].ToString();
                                for (int k = 0; k < cbldaily.Items.Count; k++)
                                {
                                    if (val == cbldaily.Items[k].Value)
                                    {
                                        cbldaily.Items[k].Selected = true;
                                        count++;
                                    }
                                    if (count == cbldaily.Items.Count)
                                    {
                                        cb_column.Checked = true;
                                    }
                                    else
                                    {
                                        cb_column.Checked = false;
                                    }
                                }
                            }
                        }

                    }
                }
            }
        }
        catch { }
    }

    #endregion

    protected void btnsearch_Click(object sender, EventArgs e)
    {
        try
        {
            #region values
            DeptAcr();
            UserbasedRights();
            RollAndRegSettings();
            ds.Clear();
            ds = loaddataset();

            if (rb_header.Checked == true)
            {
                headervalues();

            }
            else if (rb_ledger.Checked == true)
            {
                ledgervalues();

            }
            else if (rb_batch.Checked == true)
            {
                batchvalues();

            }
            else if (rb_degree.Checked == true)
            {

                degreevalues();
            }
            else if (rb_dept.Checked == true)
            {
                deptvalues();
            }
            else if (rb_sem.Checked == true)
            {
                semvalues();

            }
            else if (rb_studentwise.Checked == true)
            {
                studvalues();

            }
            else if (rb_dailydetail.Checked == true)
            {

                Dailydetailmethod();
            }
            else if (rb_others.Checked == true)
            {
                othersvalues();

            }

            MyClass ms = new MyClass();
            ms.Dispose();
            GC.SuppressFinalize(this);
            GC.Collect();
            GC.WaitForFullGCComplete();
            #endregion
        }
        catch
        { }
    }

    public DataSet loaddataset()
    {
        DataSet allds = new DataSet();
        try
        {
            UserbasedRights();

            #region getvalue
            string batch1 = "";
            string degcourseid = "";
            string deptdegcode = "";
            string sem = "";
            string sec = "";
            string stud = "";
            string seatype = "";
            string studtype = "";
            string paid = "";
            string headervalue = "";
            string ledgervalue = "";
            string Finyearvalue = "";
            string memvalue = "";
            string finyear = "";//added by abarna 20.03.2018
            DataView dvhead = new DataView();
            DataSet dscol = new DataSet();

            batch1 = Convert.ToString(getCblSelectedValue(cbl_batch));
            degcourseid = Convert.ToString(getCblSelectedValue(cbl_degree));
            deptdegcode = Convert.ToString(getCblSelectedValue(cbl_dept));
            sem = Convert.ToString(getCblSelectedValue(cbl_sem));
            sec = Convert.ToString(getCblSelectedValue(cbl_sect));
            stud = Convert.ToString(getCblSelectedValue(cbl_stud));
            seatype = Convert.ToString(getCblSelectedValue(cbl_seat));
            studtype = Convert.ToString(getCblSelectedValue(cbl_studtype));
            paid = Convert.ToString(getCblSelectedValue(chkl_paid));
            headervalue = Convert.ToString(getCblSelectedValue(chkl_studhed));
            ledgervalue = Convert.ToString(getCblSelectedValue(chkl_studled));
            Finyearvalue = Convert.ToString(getCblSelectedValue(chklsfyear));
            memvalue = Convert.ToString(getCblSelectedValue(cblmem));

            if (ddl_collegename.Items.Count > 0)
            {
                collegecode1 = Convert.ToString(ddl_collegename.SelectedItem.Value);
            }
            string cc = "";
            string debar = "";
            string disc = "";
            string commondist = "";
            string cancel = "";
            string prolongAbsent = "";
            if (cblinclude.Items.Count > 0)
            {
                for (int i = 0; i < cblinclude.Items.Count; i++)
                {
                    if (cblinclude.Items[i].Selected == true)
                    {
                        if (cblinclude.Items[i].Value == "1")
                        {
                            cc = " r.cc=1";
                        }
                        if (cblinclude.Items[i].Value == "2")
                        {
                            debar = "  r.Exam_Flag like '%debar'";
                        }
                        if (cblinclude.Items[i].Value == "3")
                        {
                            disc = "  r.DelFlag=1 and  isnull(r.ProlongAbsent,'0')=0";
                        }
                        //======Added by saranya on 12/01/2018=====//
                        if (cblinclude.Items[i].Value == "4")
                        {
                            cancel = "  r.DelFlag=2";
                        }
                        if (cblinclude.Items[i].Value == "5")
                        {
                            prolongAbsent = " r.ProlongAbsent=1 and r.DelFlag=1";
                        }
                        //===========================================//
                    }
                }
            }
            //=====================Added by saranya on 12/01/2018===============================//
            if (chkinclude.Checked)
            {
                if (cc != "")
                    commondist = "(r.cc=1)";// and  r.ProlongAbsent=0
                if (debar != "")
                {
                    if (commondist != "")
                    {
                        //strInclude = strInclude.TrimEnd(')');
                        commondist += " or ";
                        // strInclude += "(";
                        commondist += "  r.Exam_Flag like '%debar')";
                    }
                    else
                    {
                        commondist += "(";
                        commondist += "  r.Exam_Flag like '%debar')";
                    }
                }
                if (disc != "")
                {
                    if (commondist != "")
                    {
                        commondist = commondist.TrimEnd(')');
                        commondist += " or ";
                        commondist += " (r.DelFlag=1 and isnull(r.ProlongAbsent,'0')=0)";
                    }
                    else
                    {
                        commondist += "(";
                        commondist += " r.DelFlag=1 and  isnull(r.ProlongAbsent,'0')=0)";
                    }
                }
                if (cancel != "")
                {
                    if (commondist != "")
                    {
                        // strInclude = strInclude.TrimEnd(')');
                        commondist += " or";
                        commondist += "  (r.DelFlag=2)";
                    }
                    else
                    {
                        commondist += "(";
                        commondist += "  r.DelFlag=2)";
                    }
                }
                if (prolongAbsent != "")
                {
                    if (commondist != "")
                    {
                        // strInclude = strInclude.TrimEnd(')');
                        commondist += " or";
                        commondist += " (r.ProlongAbsent=1 and r.DelFlag=1)";
                    }
                    else
                    {
                        commondist += "(";
                        commondist += "r.ProlongAbsent=1 and r.DelFlag=1)";
                    }
                }
                if (commondist != "")

                    commondist = "and (" + commondist + ")";
            }
            else
            {
                commondist = " and r.cc=0 and r.Exam_Flag<>'debar' and  r.DelFlag=0 and isnull(r.ProlongAbsent,'0')=0";
            }
            //======================================================================//

            //=================Commented by saranya on================//

            //if (cc != "" && debar == "" && disc == "")
            //    commondist = " and (" + cc + " or r.cc=0)  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            //if (cc == "" && debar != "" && disc == "")
            //    commondist = " and r.cc=0  and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            //if (cc == "" && debar == "" && disc != "")
            //    commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and (" + disc + " or r.DelFlag=0)";

            //if (cc != "" && debar != "" && disc == "")
            //    commondist = " and (" + cc + " or r.cc=0) and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            //if (cc == "" && debar != "" && disc != "")
            //    commondist = " and r.cc=0 and (" + debar + " or r.Exam_Flag<>'debar')  and (" + disc + " or r.DelFlag=0)";

            //if (cc != "" && debar == "" && disc != "")
            //    commondist = " and (" + cc + " or r.cc=0) and r.Exam_Flag<>'debar'  and (" + disc + " or r.DelFlag=0)";

            //else if (cc == "" && debar == "" && disc == "")
            //    commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            //if (cc != "" && debar != "" && disc != "")
            //    commondist = "";

            int datewise = 0;
            string fromdate = "";
            string todate = "";
            if (chk_datewise.Checked == true)
            {
                datewise = 1;
                if (datewise == 1)
                {
                    fromdate = txt_fromdate.Text;
                    todate = txt_todate.Text;
                    if (fromdate != "" && todate != "")
                    {
                        string[] frdate = fromdate.Split('/');
                        if (frdate.Length == 3)
                        {
                            fromdate = frdate[1].ToString() + "/" + frdate[0].ToString() + "/" + frdate[2].ToString();
                        }
                        string[] tdate = todate.Split('/');
                        if (tdate.Length == 3)
                        {
                            todate = tdate[1].ToString() + "/" + tdate[0].ToString() + "/" + tdate[2].ToString();
                        }
                    }
                }
            }
            #region academic year Added by saranya on 29/12/2017

            string acdBatchYear = string.Empty;
            string feecaT = string.Empty;
            string feeCategory = string.Empty;
            string BatchYear = string.Empty;
            string batch_year = string.Empty;

            try
            {
                string settingType = string.Empty;
                if (rblTypeNew.SelectedIndex == 0)
                    settingType = "0";
                else if (rblTypeNew.SelectedIndex == 1)
                    settingType = "1";
                else if (rblTypeNew.SelectedIndex == 2)
                    settingType = "2";
                string collegecode = Convert.ToString(ddl_collegename.SelectedItem.Value);
                string acdYears = Convert.ToString(ddlAcademic.SelectedItem.Text);
                string selQ = " SELECT distinct ACD_COLLEGE_CODE,c.collname,ACD_YEAR,ACD_BATCH_YEAR,ACD_FEECATEGORY,t.textval FROM FT_ACADEMICYEAR AY,FT_ACADEMICYEAR_DETAILED AYD,collinfo c,textvaltable t WHERE c.college_code=ay.acd_college_code and AY.ACA_YEAR_PK=AYD.ACA_YEAR_FK and textcriteria='FEECA' and t.textcode=ayd.ACD_FEECATEGORY and t.college_code=ay.ACD_COLLEGE_CODE AND  ACD_COLLEGE_CODE IN('" + collegecode + "') and ACD_YEAR in('" + acdYears + "') and ACD_SETTING_TYPE='" + settingType + "' order by ACD_COLLEGE_CODE  asc,ACD_YEAR desc,ACD_FEECATEGORY asc";
                DataSet dsPrevAMount = da.select_method_wo_parameter(selQ, "Text");
                if (dsPrevAMount.Tables.Count > 0 && dsPrevAMount.Tables[0].Rows.Count > 0)
                {
                    DataTable dtAcdYear = dsPrevAMount.Tables[0].DefaultView.ToTable(true, "ACD_YEAR", "ACD_COLLEGE_CODE", "collname");
                    DataTable dtBatchYear = dsPrevAMount.Tables[0].DefaultView.ToTable(true, "ACD_YEAR", "ACD_BATCH_YEAR", "ACD_COLLEGE_CODE");
                    DataTable dtFeecat = dsPrevAMount.Tables[0].DefaultView.ToTable();

                    if (dtAcdYear.Rows.Count > 0)
                    {
                        int Sno = 0;
                        for (int row = 0; row < dtAcdYear.Rows.Count; row++)
                        {
                            Sno++;
                            string acdYear = Convert.ToString(dtAcdYear.Rows[row]["ACD_YEAR"]);
                            string clgCode = Convert.ToString(dtAcdYear.Rows[row]["ACD_COLLEGE_CODE"]);
                            dtBatchYear.DefaultView.RowFilter = "ACD_YEAR='" + acdYear + "' and ACD_COLLEGE_CODE='" + clgCode + "'";
                            DataTable dtBatch = dtBatchYear.DefaultView.ToTable();
                            if (dtBatch.Rows.Count > 0)
                            {
                                for (int bat = 0; bat < dtBatch.Rows.Count; bat++)
                                {
                                    acdBatchYear = Convert.ToString(dtBatch.Rows[bat]["ACD_BATCH_YEAR"]);
                                    dtFeecat.DefaultView.RowFilter = "ACD_YEAR='" + acdYear + "' and ACD_BATCH_YEAR='" + acdBatchYear + "' and ACD_COLLEGE_CODE='" + clgCode + "'";
                                    DataTable dtFee = dtFeecat.DefaultView.ToTable();
                                    if (dtFee.Rows.Count > 0)
                                    {
                                        StringBuilder sbSem = new StringBuilder();
                                        StringBuilder sbSemStr = new StringBuilder();
                                        for (int fee = 0; fee < dtFee.Rows.Count; fee++)
                                        {
                                            feecaT = Convert.ToString(dtFee.Rows[fee]["ACD_FEECATEGORY"]);
                                            string feecaTStr = Convert.ToString(dtFee.Rows[fee]["textval"]);
                                            sbSem.Append(feecaT + "','");
                                            // sbSemStr.Append(feecaTStr + ",");
                                            BatchYear = Convert.ToString(dtFee.Rows[fee]["ACD_BATCH_YEAR"]);
                                        }
                                        if (feecaT == "")
                                        {
                                            feeCategory = feecaT;
                                        }
                                        else
                                        {
                                            feeCategory += "'" + "," + "'" + feecaT;
                                        }
                                        if (BatchYear == "")
                                        {
                                            batch_year = BatchYear;
                                        }
                                        else
                                        {
                                            batch_year += "'" + "," + "'" + BatchYear;
                                        }

                                        if (sbSem.Length > 0)
                                            sbSem.Remove(sbSem.Length - 1, 1);
                                        if (!htAcademic.ContainsKey(clgCode + "$" + acdBatchYear))
                                            htAcademic.Add(clgCode + "$" + acdBatchYear, Convert.ToString(sbSem).Remove((sbSem.Length) - 2));
                                        //if (sbSemStr.Length > 0)
                                        //    sbSemStr.Remove(sbSemStr.Length - 1, 1);    


                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch { }
            #endregion

            #region cursem Added by saranya on 24/01/2018

            Dictionary<string, string> currentSem = getCurSem();
            string curSem = string.Empty;
            string batch = batch1;
            // string[] batchArr = batch1.Split(',');

            string[] batchArr = batch1.Split(new string[] { "','" }, StringSplitOptions.RemoveEmptyEntries);

            string curSemCode = string.Empty;
            if (!cbAcdYear.Checked)
            {
                if (currentSem.ContainsKey(batch))
                    curSem = Convert.ToString(currentSem[batch]);
                Dictionary<string, string> getFeeCode = getFeecode(collegecode1);//get current sem code 
                curSem = getCurYear(curSem);
                if (getFeeCode.ContainsKey(curSem))
                    curSemCode = Convert.ToString(getFeeCode[curSem.Trim()]);
            }
            else
            {
                for (int i = 0; i < batchArr.Length; i++)
                {
                    if (htAcademic.ContainsKey(collegecode1 + "$" + batchArr[i].ToString()))
                    {
                        string curSemFeeCat = Convert.ToString(htAcademic[collegecode1 + "$" + batchArr[i].ToString()]);
                        //curSemCode = curSemCode.Insert((",", "','");
                        curSemCode += "','" + curSemFeeCat;


                    }
                }
            }
            #endregion

            #endregion

            #region rbheaderqry
            string selqry = "";
            if (rb_header.Checked == true)
            {
                if (!cbAcdYear.Checked)
                {
                    if (chkcomflt.Checked == true)
                    {
                        #region Header Query

                        selqry = "SELECT A.HeaderFK,SUM(FeeAmount) as Allot ,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM  FT_FeeAllot A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No =a.App_No and p.app_no =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (sec != "")
                        {
                            // selqry = selqry + " and   ISNULL( r.Sections,'') in ('" + sec + "','')";
                        }
                        if (stud != "")
                        {
                            //selqry = selqry + "and p.mode in ('" + stud + "')";
                        }
                        if (seatype != "")
                        {
                            // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                        }
                        if (studtype != "")
                        {
                            // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (memvalue != "")
                        //{
                        //    selqry = selqry + " and memtype in('" + memvalue + "')";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}

                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }

                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK";
                        selqry = selqry + " SELECT A.HeaderFK,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No =a.App_No and r.App_No = p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
                        if (usBasedRights == true)
                            selqry += " and a.EntryUserCode in('" + usercode + "')";
                        //and r.cc=0 and r.Exam_Flag<>'debar'
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (sec != "")
                        {
                            // selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
                        }
                        if (stud != "")
                        {
                            // selqry = selqry + "and p.mode in ('" + stud + "')";
                        }
                        if (seatype != "")
                        {
                            // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                        }
                        if (studtype != "")
                        {
                            //selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (memvalue != "")
                        //{
                        //    selqry = selqry + " and memtype in('" + memvalue + "')";
                        //}
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}

                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }

                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK,PayMode";
                        selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and r.App_No =a.App_No and r.App_No =p.app_no and em.App_No = a.App_No   AND P.IsConfirm = 1  AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (memvalue != "")
                        //{
                        //    selqry = selqry + " and A.memtype in('" + memvalue + "')";
                        //}
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK";
                        selqry = selqry + "  select headerfk,SUM(debit)as Paid from FT_FinDailyTransaction d,Registration r where d.App_No = r.App_No and r.college_code ='" + collegecode1 + "' and d.FinYearFK in ('" + Finyearvalue + "') ";
                        if (usBasedRights == true)
                            selqry += " and d.EntryUserCode in('" + usercode + "')";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and d.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (memvalue != "")
                        //{
                        //    selqry = selqry + " and memtype in('" + memvalue + "')";
                        //}
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}

                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }

                        selqry = selqry + " group by HeaderFK ";

                        selqry = selqry + "  select HeaderName,headerpk from FM_HeaderMaster where CollegeCode='" + collegecode1 + "'";
                        #endregion
                    }
                    else
                    {
                        #region Header  with Memtype Query
                        selqry = "SELECT A.HeaderFK,SUM(FeeAmount) as Allot ,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM  FT_FeeAllot A WHERE A.FinYearFK in ('" + Finyearvalue + "') ";
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK";
                        selqry = selqry + " SELECT A.HeaderFK,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A WHERE  isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and A.FinYearFK in ('" + Finyearvalue + "')";
                        if (usBasedRights == true)
                            selqry += " and a.EntryUserCode in('" + usercode + "')";
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK,PayMode";
                        selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A WHERE EM.ExcessDetPK = Ex.ExcessDetfk  and em.App_No = a.App_No  and A.FinYearFK in ('" + Finyearvalue + "') ";

                        if (headervalue != "")
                        {
                            selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and A.memtype in('" + memvalue + "')";
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK";
                        selqry = selqry + "  select headerfk,SUM(debit)as Paid from FT_FinDailyTransaction  where FinYearFK in ('" + Finyearvalue + "') ";
                        if (usBasedRights == true)
                            selqry += "  and EntryUserCode in('" + usercode + "')";
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }

                        selqry = selqry + " group by HeaderFK ";

                        selqry = selqry + "  select HeaderName,headerpk from FM_HeaderMaster where CollegeCode='" + collegecode1 + "'";
                        #endregion
                    }
                }

                #region with academic year setting added by saranya

                if (cbAcdYear.Checked == true)
                {
                    if (chkcomflt.Checked == true)
                    {
                        #region Header Query

                        selqry = "SELECT A.HeaderFK,SUM(FeeAmount) as Allot ,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,a.FeeCategory,r.college_code,r.Batch_Year FROM  FT_FeeAllot A,Registration r WHERE r.App_No =a.App_No  AND  r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0'  ";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (sec != "")
                        {
                            // selqry = selqry + " and   ISNULL( r.Sections,'') in ('" + sec + "','')";
                        }
                        if (stud != "")
                        {
                            //selqry = selqry + "and p.mode in ('" + stud + "')";
                        }
                        if (seatype != "")
                        {
                            // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                        }
                        if (studtype != "")
                        {
                            // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (memvalue != "")
                        //{
                        //    selqry = selqry + " and memtype in('" + memvalue + "')";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}

                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }

                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY A.HeaderFK,a.FeeCategory,r.college_code,r.Batch_Year order by r.Batch_Year ";
                        //added by abarna
                        //  string finyear = string.Empty;
                        if (checkSchoolSetting() != 0)//added by abarna 
                        {
                            finyear = "A.FinYearFK in ('" + Finyearvalue + "') and";
                        }
                        else
                        {
                            finyear = "A.actualfinyearfk in ('" + Finyearvalue + "') and";
                        }
                        if (checkSchoolSetting() != 0)
                        {
                            selqry = selqry + " SELECT A.HeaderFK,PayMode,SUM(Debit) as debit,a.FeeCategory,r.college_code,r.Batch_Year FROM FT_FinDailyTransaction A,Registration r WHERE  r.App_No =a.App_No and isnull(IsCanceled,'0')='0' and r.college_code ='" + collegecode1 + "' and " + finyear + " isnull(paid_Istransfer,'0')='0'";
                        }
                        else
                        {
                            selqry = selqry + " SELECT A.HeaderFK,PayMode,sum(isnull(debit,'0'))-sum(isnull(CREDIT,'0')) as debit,a.FeeCategory,r.college_code,r.Batch_Year FROM FT_FinDailyTransaction A,Registration r WHERE  r.App_No =a.App_No and isnull(IsCanceled,'0')='0' and r.college_code ='" + collegecode1 + "' and " + finyear + " isnull(paid_Istransfer,'0')='0'";
                        }
                        //if (usBasedRights == true)
                        //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                        //and r.cc=0 and r.Exam_Flag<>'debar'
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (sec != "")
                        {
                            // selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
                        }
                        if (stud != "")
                        {
                            // selqry = selqry + "and p.mode in ('" + stud + "')";
                        }
                        if (seatype != "")
                        {
                            // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                        }
                        if (studtype != "")
                        {
                            //selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (memvalue != "")
                        //{
                        //    selqry = selqry + " and memtype in('" + memvalue + "')";
                        //}
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}

                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }

                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY A.HeaderFK,PayMode,a.FeeCategory,r.college_code,r.Batch_Year order by r.Batch_Year ";

                        selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,em.FeeCategory,r.Batch_Year,r.college_code  from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk  and r.App_No =a.App_No  and em.App_No = a.App_No  and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (memvalue != "")
                        //{
                        //    selqry = selqry + " and A.memtype in('" + memvalue + "')";
                        //}
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK,em.FeeCategory,r.Batch_Year,r.college_code order by r.batch_year";


                        selqry = selqry + "  select HeaderName,headerpk,CollegeCode from FM_HeaderMaster where CollegeCode='" + collegecode1 + "' and HeaderPK in('" + headervalue + "')";

                        selqry = selqry + " select distinct r.college_code,r.batch_year from registration r,collinfo c where r.college_code=c.college_code and r.college_code ='" + collegecode1 + "' and r.batch_year in('" + batch1 + "') and r.degree_code in('" + deptdegcode + "') order by r.batch_year desc";

                        #endregion
                    }
                    else
                    {
                        #region Header Query with Academic Year Setting Added by Saranya on 29/12/2017

                        selqry = "SELECT A.HeaderFK,SUM(FeeAmount) as Allot ,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,a.FeeCategory,r.college_code,r.Batch_Year FROM  FT_FeeAllot A,Registration r WHERE  r.App_No =a.App_No    and r.college_code ='" + collegecode1 + "'  and A.FeeCategory in ('" + feeCategory + "') and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0' ";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        //if (sem != "")
                        //{
                        //    selqry = selqry + " and A.FeeCategory in ('" + feeCategory + "')";
                        //}
                        if (sec != "")
                        {
                            // selqry = selqry + " and   ISNULL( r.Sections,'') in ('" + sec + "','')";
                        }
                        if (stud != "")
                        {
                            //selqry = selqry + "and p.mode in ('" + stud + "')";
                        }
                        if (seatype != "")
                        {
                            // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                        }
                        if (studtype != "")
                        {
                            // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}

                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }

                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY A.HeaderFK,a.FeeCategory,r.college_code,r.Batch_Year order by r.Batch_Year ";
                        // string finyear = string.Empty;
                        if (checkSchoolSetting() != 0)//added by abarna 
                        {
                            finyear = "A.FinYearFK in ('" + Finyearvalue + "') and";
                        }
                        else
                        {
                            finyear = "A.actualfinyearfk in ('" + Finyearvalue + "') and";
                        }
                        if (checkSchoolSetting() != 0)//added by abarna 
                        {
                            finyear = "A.FinYearFK in ('" + Finyearvalue + "') and";
                        }
                        else
                        {
                            finyear = "A.actualfinyearfk in ('" + Finyearvalue + "') and";
                        }
                        if (checkSchoolSetting() != 0)
                        {
                            selqry = selqry + " SELECT A.HeaderFK,PayMode,SUM(Debit)as debit,a.FeeCategory,r.college_code,r.Batch_Year  FROM FT_FinDailyTransaction A,Registration r WHERE r.App_No =a.App_No  and isnull(IsCanceled,'0')='0' and r.college_code ='" + collegecode1 + "' and A.FeeCategory in ('" + feeCategory + "') and  " + finyear + " isnull(paid_Istransfer,'0')='0'";
                        }
                        else
                        {
                            selqry = selqry + " SELECT A.HeaderFK,PayMode,sum(isnull(debit,'0'))-sum(isnull(CREDIT,'0')) as debit,a.FeeCategory,r.college_code,r.Batch_Year FROM FT_FinDailyTransaction A,Registration r WHERE  r.App_No =a.App_No and isnull(IsCanceled,'0')='0' and r.college_code ='" + collegecode1 + "' and " + finyear + " isnull(paid_Istransfer,'0')='0'";
                        }


                        //if (usBasedRights == true)
                        //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                        //and r.cc=0 and r.Exam_Flag<>'debar'
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        //if (sem != "")
                        //{
                        //    selqry = selqry + " and A.FeeCategory in ('" + feeCategory + "')";
                        //}
                        if (sec != "")
                        {
                            // selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
                        }
                        if (stud != "")
                        {
                            // selqry = selqry + "and p.mode in ('" + stud + "')";
                        }
                        if (seatype != "")
                        {
                            // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                        }
                        if (studtype != "")
                        {
                            //selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}

                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }

                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY A.HeaderFK,PayMode,a.FeeCategory,r.college_code,r.Batch_Year order by r.Batch_Year ";

                        selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,em.FeeCategory,r.Batch_Year,r.college_code  from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and r.App_No =a.App_No and  em.App_No = a.App_No   and r.college_code ='" + collegecode1 + "'  and A.FeeCategory in ('" + feeCategory + "') and A.FinYearFK in ('" + Finyearvalue + "') ";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        //if (sem != "")
                        //{
                        //    selqry = selqry + " and A.FeeCategory in ('" + feeCategory + "')";
                        //}
                        if (headervalue != "")
                        {
                            selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and A.memtype in('" + memvalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK,em.FeeCategory,r.Batch_Year,r.college_code order by r.batch_year";

                        selqry = selqry + "  select HeaderName,headerpk,CollegeCode from FM_HeaderMaster where CollegeCode='" + collegecode1 + "' and HeaderPK in('" + headervalue + "')";

                        selqry = selqry + " select distinct r.college_code,r.batch_year from registration r,collinfo c where r.college_code=c.college_code and r.college_code ='" + collegecode1 + "' and r.batch_year in('" + batch1 + "') and r.degree_code in('" + deptdegcode + "') order by r.batch_year desc";
                        #endregion
                    }
                }
                #endregion
            }
            #endregion

            #region rbledger
            else if (rb_ledger.Checked == true)
            {
                if (!cbAcdYear.Checked)
                {
                    if (chkcomflt.Checked == true)
                    {
                        #region Ledger Query
                        selqry = "  SELECT A.HeaderFK,LedgerFK, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1   and P.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')  ";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and a.HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }

                        selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK";
                        selqry = selqry + "  SELECT PayMode,LedgerFK,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.app_no=p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
                        if (usBasedRights == true)
                            selqry += " and a.EntryUserCode in('" + usercode + "')";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK,PayMode,LedgerFK";
                        selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerFK from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No   AND P.IsConfirm = 1  AND Admission_Status = 1 and P.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  p.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and a.memtype in('" + memvalue + "')";
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK ,a.LedgerFK";
                        selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
                        #endregion
                    }
                    else
                    {
                        #region Ledger With Memtype Query

                        selqry = "  SELECT A.HeaderFK,LedgerFK, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot a WHERE FinYearFK in ('" + Finyearvalue + "')  ";
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }

                        selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK";
                        selqry = selqry + "  SELECT PayMode,LedgerFK,SUM(Debit) as total FROM FT_FinDailyTransaction a WHERE  isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1'  and FinYearFK in ('" + Finyearvalue + "') ";
                        if (usBasedRights == true)
                            selqry += " and a.EntryUserCode in('" + usercode + "')";
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK,PayMode,LedgerFK";
                        selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerFK from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A WHERE EM.ExcessDetPK = Ex.ExcessDetfk  and em.App_No = a.App_No and A.FinYearFK in ('" + Finyearvalue + "')";
                        if (headervalue != "")
                        {
                            selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and a.memtype in('" + memvalue + "')";
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK ,a.LedgerFK";
                        selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
                        #endregion
                    }
                }
                #region with academic year setting
                else
                {
                    if (chkcomflt.Checked == true)
                    {
                        #region Ledger Query
                        selqry = "  SELECT A.HeaderFK,LedgerFK, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,r.college_code,A.feecategory,r.batch_year FROM FT_FeeAllot A,Registration r WHERE r.App_No=A.app_no   and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0' ";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and a.HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }

                        selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK,r.college_code,A.feecategory,r.batch_year order by r.batch_year desc";

                        if (checkSchoolSetting() != 0)//added by abarna 
                        {
                            finyear = "A.FinYearFK in ('" + Finyearvalue + "') and";
                        }
                        else
                        {
                            finyear = "A.actualfinyearfk in ('" + Finyearvalue + "') and";
                        }
                        if (checkSchoolSetting() != 0)
                        {
                            selqry = selqry + "  SELECT PayMode,LedgerFK,SUM(Debit) as total,a.FeeCategory,r.college_code,r.batch_year FROM FT_FinDailyTransaction A,Registration r WHERE A.App_No = r.app_no and isnull(IsCanceled,'0')='0'  and r.college_code ='" + collegecode1 + "' and " + finyear + " isnull(paid_Istransfer,'0')='0'";
                        }
                        else
                        {
                            selqry = selqry + "  SELECT PayMode,LedgerFK,sum(isnull(debit,'0'))-sum(isnull(CREDIT,'0')) as total,a.FeeCategory,r.college_code,r.batch_year FROM FT_FinDailyTransaction A,Registration r WHERE A.App_No = r.app_no and isnull(IsCanceled,'0')='0'  and r.college_code ='" + collegecode1 + "' and " + finyear + " isnull(paid_Istransfer,'0')='0'";
                        }

                        //if (usBasedRights == true)
                        //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK,PayMode,LedgerFK,a.FeeCategory,r.college_code,r.batch_year order by r.batch_year desc";

                        selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerFK,em.FeeCategory,r.Batch_Year,r.college_code from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and r.app_no=a.app_no and em.App_No = a.App_No   and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and a.memtype in('" + memvalue + "')";
                        }
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK ,a.LedgerFK,em.FeeCategory,r.Batch_Year,r.college_code order by r.batch_year desc";

                        selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' and headerfk in('" + headervalue + "') order by HeaderFK  ";

                        selqry = selqry + " select distinct r.college_code,r.batch_year from registration r,collinfo c where r.college_code=c.college_code and r.college_code ='" + collegecode1 + "' and r.batch_year in('" + batch1 + "') and r.degree_code in('" + deptdegcode + "') order by r.batch_year desc";
                        #endregion
                    }
                    else
                    {
                        #region Ledger Query With Academic Year Setting Added by saranya on 30/12/2017

                        selqry = "  SELECT A.HeaderFK,LedgerFK, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,r.college_code,r.batch_year,a.feecategory FROM FT_FeeAllot A,Registration r WHERE A.App_No = r.app_no    and r.college_code ='" + collegecode1 + "' and r.Batch_Year in ('" + batch1 + "') and A.FeeCategory in ('" + feeCategory + "') and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0' ";

                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }

                        if (headervalue != "")
                        {
                            selqry = selqry + " and a.HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }

                        selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK,r.college_code,r.batch_year,a.feecategory order by r.batch_year desc";
                        if (checkSchoolSetting() != 0)//added by abarna 
                        {
                            finyear = "A.FinYearFK in ('" + Finyearvalue + "') and";
                        }
                        else
                        {
                            finyear = "A.actualfinyearfk in ('" + Finyearvalue + "') and";
                        }
                        selqry = selqry + "  SELECT PayMode,LedgerFK,SUM(Debit) as total,r.college_code,r.batch_year,a.feecategory  FROM FT_FinDailyTransaction A,Registration r WHERE A.App_No = r.app_no and isnull(IsCanceled,'0')='0'  and r.college_code ='" + collegecode1 + "' and r.Batch_Year in ('" + batch1 + "') and A.FeeCategory in ('" + feeCategory + "') and " + finyear + " isnull(paid_Istransfer,'0')='0' ";
                        //if (usBasedRights == true)
                        //    selqry += " and a.EntryUserCode in('" + usercode + "')";

                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }

                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and memtype in('" + memvalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK,PayMode,LedgerFK,r.college_code,r.batch_year,a.feecategory order by r.batch_year desc";

                        selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerFK,r.college_code,r.batch_year,a.feecategory  from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = r.app_no and em.App_No = a.App_No   and r.college_code ='" + collegecode1 + "' and r.Batch_Year in ('" + batch1 + "') and A.FeeCategory in ('" + feeCategory + "') and A.FinYearFK in ('" + Finyearvalue + "')";

                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        }
                        if (memvalue != "")
                        {
                            selqry = selqry + " and a.memtype in('" + memvalue + "')";
                        }
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.HeaderFK ,a.LedgerFK,r.college_code,r.batch_year,a.feecategory order by r.batch_year desc";

                        selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' and headerfk in('" + headervalue + "') order by HeaderFK asc ";

                        selqry = selqry + " select distinct r.college_code,r.batch_year from registration r,collinfo c where r.college_code=c.college_code and r.college_code ='" + collegecode1 + "' and r.batch_year in('" + batch1 + "') and r.degree_code in('" + deptdegcode + "') order by r.batch_year desc";
                        #endregion
                    }
                }
                #endregion
            }
            #endregion

            #region rbbatchqry
            else if (rb_batch.Checked == true)
            {
                //ds.Clear();
                //  ds = d2.selectbatchyr(collegecode1, batch1, deptdegcode, sem, sec, stud, seatype, studtype, headervalue, ledgervalue, datewise, fromdate, todate);
                #region batchqry
                //// selqry = "SELECT batch_year,SUM(FeeAmount)as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Degree G,Course C,Department D WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 0  and G.college_code ='" + collegecode + "'";
                ////if (batch1 != "")
                ////{
                ////    selqry = selqry + "and p.Batch_Year in ('" + batch1 + "')";
                ////}

                ////if (deptdegcode != "")
                ////{
                ////    selqry = selqry + " and g.Degree_Code in ('" + deptdegcode + "')";
                ////}

                ////if (sem != "")
                ////{
                ////    selqry = selqry + "and A.FeeCategory in ('" + sem + "')";
                ////}
                ////if (stud != "")
                ////{
                ////    selqry = selqry + "and p.mode in ('" + stud + "')";
                ////}
                ////if (seatype != "")
                ////{
                ////    selqry = selqry + "and p.seattype in ('" + seatype + "')";
                ////}
                ////if (studtype != "")
                ////{
                ////    selqry = selqry + " and p.Stud_Type in ('" + studtype + "')";
                ////}
                ////if (headervalue != "")
                ////{
                ////    selqry = selqry + " and a.HeaderFK in ('" + headervalue + "')";
                ////}
                ////if (ledgervalue != "")
                ////{
                ////    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                ////}
                ////if (datewise == 1)
                ////{
                ////    if (fromdate != "" && todate != "")
                ////    {
                ////        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                ////    }
                ////}
                ////selqry = selqry + "GROUP BY batch_year";

                //selqry = selqry + " SELECT p.batch_year,SUM(FeeAmount)as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Degree G,Course C,Department D WHERE A.App_No = P.app_no and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and p.degree_code = g.degree_code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "'";
                //if (batch1 != "")
                //{
                //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (sec != "")
                //{
                //    //  selqry = selqry + " and   ISNULL( r.Sections,'') in ('" + sec + "','')";
                //}
                //if (stud != "")
                //{
                //    // selqry = selqry + "and p.mode in ('" + stud + "')";
                //}
                //if (seatype != "")
                //{
                //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                //}
                //if (studtype != "")
                //{
                //    // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and a.HeaderFK in ('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                //    }
                //}
                //selqry = selqry + "GROUP BY p.batch_year ";

                ////selqry = selqry + " SELECT batch_year,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C,Department D WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 0 and G.college_code ='" + collegecode + "'";
                ////if (batch1 != "")
                ////{
                ////    selqry = selqry + "and p.Batch_Year in ('" + batch1 + "')";
                ////}
                ////if (deptdegcode != "")
                ////{
                ////    selqry = selqry + " and g.Degree_Code in ('" + deptdegcode + "')";
                ////}
                ////if (sem != "")
                ////{
                ////    selqry = selqry + "and A.FeeCategory in ('" + sem + "')";
                ////}
                ////if (stud != "")
                ////{
                ////    selqry = selqry + "and p.mode in ('" + stud + "')";
                ////}
                ////if (seatype != "")
                ////{
                ////    selqry = selqry + "and p.seattype in ('" + seatype + "')";
                ////}
                ////if (studtype != "")
                ////{
                ////    selqry = selqry + " and p.Stud_Type in ('" + studtype + "')";
                ////}
                ////if (headervalue != "")
                ////{
                ////    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                ////}
                ////if (ledgervalue != "")
                ////{
                ////    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                ////}
                ////if (datewise == 1)
                ////{
                ////    if (fromdate != "" && todate != "")
                ////    {
                ////        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                ////    }
                ////}
                ////selqry = selqry + " GROUP BY PayMode,batch_year";
                //selqry = selqry + " SELECT p.batch_year ,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C,Department D WHERE A.App_No = P.app_no  AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "'";
                //if (batch1 != "")
                //{
                //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (sec != "")
                //{
                //    // selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
                //}
                //if (stud != "")
                //{
                //    // selqry = selqry + "and p.mode in ('" + stud + "')";
                //}
                //if (seatype != "")
                //{
                //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                //}
                //if (studtype != "")
                //{
                //    // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                //    }
                //}
                //selqry = selqry + "GROUP BY p.batch_year,PayMode";

                //selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,h.LedgerPK,p.Batch_Year from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Degree G,Course C,Department D,FM_LedgerMaster H,FM_HeaderMaster fh WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code  and h.LedgerPK =ex.LedgerFK and ex.HeaderFK=h.HeaderFK and h.HeaderFK=fh.HeaderPK and em.App_No = a.App_No   AND P.IsConfirm = 1  and a.LedgerFK=h.LedgerPK   AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "' ";
                //if (batch1 != "")
                //{
                //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (sec != "")
                //{
                //    //selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
                //}
                //if (stud != "")
                //{
                //    //selqry = selqry + "and p.mode in ('" + stud + "')";
                //}
                //if (seatype != "")
                //{
                //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                //}
                //if (studtype != "")
                //{
                //    //selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                //    }
                //}
                //selqry = selqry + "GROUP BY A.HeaderFK ,h.LedgerPK,p.Batch_Year";
                #endregion

                #region new query

                if (!cbAcdYear.Checked)
                {
                    selqry = selqry + " SELECT r.batch_year,count(distinct r.app_no) as studcount,SUM(FeeAmount)as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=P.App_No AND P.IsConfirm = 1  and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0'";//AND Admission_Status = 1
                    if (batch1 != "")
                    {
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    }
                    if (deptdegcode != "")
                    {
                        selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                    }

                    if (sem != "")
                    {
                        selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }

                    if (headervalue != "")
                    {
                        selqry = selqry + " and a.HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    }
                    //if (chkinclude.Checked == true)
                    //{
                    //    selqry = selqry + " and r.DelFlag=0 ";
                    //}
                    //if (cc != "")
                    //{
                    //    selqry = selqry + cc;
                    //}
                    //if (debar != "")
                    //{
                    //    selqry = selqry + debar;
                    //}
                    //if (disc != "")
                    //{
                    //    selqry = selqry + disc;
                    //}
                    if (commondist.Trim() != "")
                    {
                        selqry = selqry + commondist;
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        }
                    }
                    selqry = selqry + " GROUP BY r.batch_year ";
                    selqry = selqry + "SELECT r.batch_year ,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=p.app_no  AND P.IsConfirm = 1  and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(paid_Istransfer,'0')='0'"; //AND Admission_Status = 1
                    if (usBasedRights == true)
                        selqry += " and a.EntryUserCode in('" + usercode + "')";
                    if (batch1 != "")
                    {
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    }
                    if (deptdegcode != "")
                    {
                        selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                    }

                    if (sem != "")
                    {
                        selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    }
                    //if (chkinclude.Checked == true)
                    //{
                    //    selqry = selqry + " and r.DelFlag=0 ";
                    //}
                    //if (cc != "")
                    //{
                    //    selqry = selqry + cc;
                    //}
                    //if (debar != "")
                    //{
                    //    selqry = selqry + debar;
                    //}
                    //if (disc != "")
                    //{
                    //    selqry = selqry + disc;
                    //}

                    if (commondist.Trim() != "")
                    {
                        selqry = selqry + commondist;
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                        }
                    }
                    selqry = selqry + " GROUP BY r.batch_year,PayMode";
                    selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,r.Batch_Year from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
                    if (batch1 != "")
                    {
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    }
                    if (deptdegcode != "")
                    {
                        selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                    }

                    if (sem != "")
                    {
                        selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                    }
                    //if (chkinclude.Checked == true)
                    //{
                    //    selqry = selqry + " and r.DelFlag=0 ";
                    //}
                    //if (cc != "")
                    //{
                    //    selqry = selqry + cc;
                    //}
                    //if (debar != "")
                    //{
                    //    selqry = selqry + debar;
                    //}
                    //if (disc != "")
                    //{
                    //    selqry = selqry + disc;
                    //}
                    if (commondist.Trim() != "")
                    {
                        selqry = selqry + commondist;
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        }
                    }
                    selqry = selqry + " GROUP BY A.HeaderFK ,r.Batch_Year";
                }
                #endregion

                #region new query with academic year setting
                if (cbAcdYear.Checked)
                {
                    selqry = selqry + " SELECT r.batch_year,count(distinct r.app_no) as studcount,r.college_code FROM FT_FeeAllot A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=P.App_No  and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0' and r.Batch_Year in ('" + batch1 + "')  and  r.Degree_Code in ('" + deptdegcode + "') and A.FeeCategory in ('" + curSemCode + "')  ";
                    if (commondist.Trim() != "")
                    {
                        selqry = selqry + commondist;
                    }
                    selqry = selqry + " GROUP BY r.batch_year,r.college_code order by r.Batch_Year ";

                    selqry = selqry + " SELECT r.batch_year,SUM(FeeAmount)as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,r.college_code,a.FeeCategory FROM FT_FeeAllot A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=P.App_No   and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0'";//AND Admission_Status = 1 AND P.IsConfirm = 1
                    if (batch1 != "")
                    {
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    }
                    if (deptdegcode != "")
                    {
                        selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                    }

                    if (sem != "")
                    {
                        selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                    }

                    if (headervalue != "")
                    {
                        selqry = selqry + " and a.HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    }
                    //if (chkinclude.Checked == true)
                    //{
                    //    selqry = selqry + " and r.DelFlag=0 ";
                    //}
                    //if (cc != "")
                    //{
                    //    selqry = selqry + cc;
                    //}
                    //if (debar != "")
                    //{
                    //    selqry = selqry + debar;
                    //}
                    //if (disc != "")
                    //{
                    //    selqry = selqry + disc;
                    //}
                    if (commondist.Trim() != "")
                    {
                        selqry = selqry + commondist;
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        }
                    }
                    selqry = selqry + " GROUP BY r.college_code,r.Batch_Year,a.FeeCategory order by r.Batch_Year ";
                    if (checkSchoolSetting() != 0)//added by abarna 
                    {
                        finyear = "A.FinYearFK in ('" + Finyearvalue + "') and";
                    }
                    else
                    {
                        finyear = "A.actualfinyearfk in ('" + Finyearvalue + "') and";
                    }
                    if (checkSchoolSetting() != 0)
                    {
                        selqry = selqry + "SELECT r.batch_year ,PayMode,SUM(Debit) as total,a.FeeCategory,r.college_code FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=p.app_no   and isnull(IsCanceled,'0')='0'  and r.college_code ='" + collegecode1 + "' and " + finyear + " isnull(paid_Istransfer,'0')='0'"; //AND Admission_Status = 1 AND P.IsConfirm = 1 and  ISNULL(IsCollected,0)='1'
                        //if (usBasedRights == true)
                        //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                    }
                    else
                    {
                        selqry = selqry + "SELECT r.batch_year ,PayMode,sum(isnull(debit,'0'))-sum(isnull(CREDIT,'0')) as total,a.FeeCategory,r.college_code FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=p.app_no   and isnull(IsCanceled,'0')='0'  and r.college_code ='" + collegecode1 + "' and " + finyear + " isnull(paid_Istransfer,'0')='0'";
                    }
                    if (batch1 != "")
                    {
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    }
                    if (deptdegcode != "")
                    {
                        selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                    }

                    if (sem != "")
                    {
                        selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    }
                    //if (chkinclude.Checked == true)
                    //{
                    //    selqry = selqry + " and r.DelFlag=0 ";
                    //}
                    //if (cc != "")
                    //{
                    //    selqry = selqry + cc;
                    //}
                    //if (debar != "")
                    //{
                    //    selqry = selqry + debar;
                    //}
                    //if (disc != "")
                    //{
                    //    selqry = selqry + disc;
                    //}

                    if (commondist.Trim() != "")
                    {
                        selqry = selqry + commondist;
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                        }
                    }
                    selqry = selqry + " GROUP BY r.batch_year,PayMode,a.FeeCategory,r.college_code order by r.Batch_Year ";

                    selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,r.Batch_Year,em.FeeCategory,r.college_code from FT_ExcessDet EM,FT_ExcessLedgerDet Ex,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = r.app_no and r.college_code ='" + collegecode1 + "'  ";//AND P.IsConfirm = 1 AND Admission_Status = 1
                    if (batch1 != "")
                    {
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    }
                    if (deptdegcode != "")
                    {
                        selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                    }

                    //if (sem != "")
                    //{
                    //    selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                    //}
                    if (headervalue != "")
                    {
                        selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                    }
                    //if (chkinclude.Checked == true)
                    //{
                    //    selqry = selqry + " and r.DelFlag=0 ";
                    //}
                    //if (cc != "")
                    //{
                    //    selqry = selqry + cc;
                    //}
                    //if (debar != "")
                    //{
                    //    selqry = selqry + debar;
                    //}
                    //if (disc != "")
                    //{
                    //    selqry = selqry + disc;
                    //}
                    if (commondist.Trim() != "")
                    {
                        selqry = selqry + commondist;
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        }
                    }
                    selqry = selqry + " GROUP BY r.Batch_Year,em.FeeCategory,r.college_code order by r.Batch_Year ";

                    selqry = selqry + " select distinct r.college_code,r.batch_year from registration r,collinfo c where r.college_code=c.college_code and r.college_code in('" + collegecode1 + "') and r.batch_year in('" + batch1 + "') and r.degree_code in('" + deptdegcode + "') order by r.college_code,r.batch_year ";

                }
                #endregion
            }
            #endregion

            #region rbdegreeqry

            else if (rb_degree.Checked == true)
            {
                // ds.Clear();
                // ds = d2.selectdegree(collegecode1, batch1, deptdegcode, degcourseid, sem, sec, stud, seatype, studtype, headervalue, ledgervalue, datewise, fromdate, todate);

                #region old
                //selqry = selqry + "  SELECT Course_Name DegreeName,G.Course_Id,SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Degree G,Course C WHERE A.App_No = P.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and p.degree_code = g.degree_code  AND P.IsConfirm = 1 AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                //if (degcourseid != "")
                //{
                //    selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
                //}
                //if (batch1 != "")
                //{
                //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and a.HeaderFK in ('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                //    }
                //}
                //selqry = selqry + "GROUP BY G.Course_Id,Course_Name  ";
                //selqry = selqry + "  SELECT Course_Name,G.Course_Id,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                //if (usBasedRights == true)
                //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                //if (degcourseid != "")
                //{
                //    selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
                //}

                //if (batch1 != "")
                //{
                //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                //    }
                //}
                //selqry = selqry + "GROUP BY G.Course_Id,Course_Name,PayMode ";

                ////selqry = selqry + "  select SUM(Ex.Excessamt) as ExcessAmount,C.Course_Id from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Degree G,Course C WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and em.App_No = a.App_No   AND P.IsConfirm = 1  AND Admission_Status = 1 AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                ////if (batch1 != "")
                ////{
                ////    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                ////}
                ////if (deptdegcode != "")
                ////{
                ////    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                ////}
                ////if (sem != "")
                ////{
                ////    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                ////}
                ////if (headervalue != "")
                ////{
                ////    selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                ////}
                ////if (ledgervalue != "")
                ////{
                ////    selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                ////}
                ////if (datewise == 1)
                ////{
                ////    if (fromdate != "" && todate != "")
                ////    {
                ////        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                ////    }
                ////}
                ////selqry = selqry + "GROUP BY C.Course_Id";
                //selqry = selqry + "  select SUM(f.Excessamt) as ExcessAmount,C.Course_Id from FT_ExcessDet F,FT_ExcessLedgerDet Fd,Registration r,Degree d,Course c where f.App_No =r.App_No and f.ExcessDetPK =fd.ExcessDetFK and r.degree_code=d.Degree_Code and d.Course_Id =c.Course_Id ";
                //if (batch1 != "")
                //{
                //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    //selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and fd.HeaderFK in('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + "  and fd.LedgerFK in('" + ledgervalue + "')";
                //}              
                //if (commondist.Trim() != "")
                //{
                //    selqry = selqry + commondist;
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                //    }
                //}
                //selqry = selqry + " GROUP BY C.Course_Id";
                #endregion

                if (!cbAcdYear.Checked)
                {
                    #region new
                    selqry = selqry + "  SELECT Course_Name DegreeName,count(distinct r.app_no) as studcount,G.Course_Id,SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,registration r,Degree G,Course C WHERE A.App_No = r.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and r.degree_code = g.degree_code and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0'";
                    if (degcourseid != "")
                        selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
                    if (batch1 != "")
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    if (deptdegcode != "")
                        selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                    if (sem != "")
                        selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    if (headervalue != "")
                        selqry = selqry + " and a.HeaderFK in ('" + headervalue + "')";
                    if (ledgervalue != "")
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                    if (commondist != "")
                        selqry += commondist;
                    selqry = selqry + "GROUP BY G.Course_Id,Course_Name order by  G.Course_Id ";
                    selqry = selqry + "  SELECT Course_Name,G.Course_Id,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,registration r,Degree G,Course C WHERE A.App_No = r.app_no AND r.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')  and isnull(paid_Istransfer,'0')='0'";
                    if (usBasedRights == true)
                        selqry += " and a.EntryUserCode in('" + usercode + "')";
                    if (degcourseid != "")
                        selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
                    if (batch1 != "")
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    if (deptdegcode != "")
                        selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                    if (sem != "")
                        selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    if (headervalue != "")
                        selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                    if (ledgervalue != "")
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    if (commondist != "")
                        selqry += commondist;
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                            selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                    }
                    selqry = selqry + "GROUP BY G.Course_Id,Course_Name,PayMode order by  G.Course_Id ";
                    selqry = selqry + "  select SUM(f.Excessamt) as ExcessAmount,C.Course_Id from FT_ExcessDet F,FT_ExcessLedgerDet Fd,Registration r,Degree d,Course c where f.App_No =r.App_No and f.ExcessDetPK =fd.ExcessDetFK and r.degree_code=d.Degree_Code and d.Course_Id =c.Course_Id ";
                    if (batch1 != "")
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    if (deptdegcode != "")
                        selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                    if (headervalue != "")
                        selqry = selqry + " and fd.HeaderFK in('" + headervalue + "')";
                    if (ledgervalue != "")
                        selqry = selqry + "  and fd.LedgerFK in('" + ledgervalue + "')";
                    if (commondist.Trim() != "")
                        selqry = selqry + commondist;
                    if (datewise == 1)
                    {
                        //if (fromdate != "" && todate != "")
                        //selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                    selqry = selqry + " GROUP BY C.Course_Id  order by  C.Course_Id";
                    #endregion
                }
                else
                {
                    #region Query with Academic year setting Added by Saranya on 30/12/2017

                    selqry = selqry + "  SELECT c.Course_Id,c.Course_Name as DegreeName,count(distinct r.app_no) as studcount,r.college_code FROM FT_FeeAllot A,registration r,Degree G,Course C WHERE A.App_No = r.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and r.degree_code = g.degree_code and r.college_code in('" + collegecode1 + "') and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0' and c.Course_Id in ('" + degcourseid + "') and r.Batch_Year in ('" + batch1 + "')  and  g.Degree_Code in ('" + deptdegcode + "') and A.FeeCategory in ('" + curSemCode + "') ";
                    if (commondist != "")
                        selqry += commondist;
                    selqry = selqry + " GROUP BY r.college_code,c.Course_Id,c.Course_Name order by r.college_code,c.Course_Id  ";

                    selqry = selqry + "  SELECT Course_Name DegreeName,G.Course_Id,SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,a.FeeCategory,r.college_code,r.Batch_Year  FROM FT_FeeAllot A,registration r,Degree G,Course C WHERE A.App_No = r.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and r.degree_code = g.degree_code and r.college_code in('" + collegecode1 + "')  and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0'";//and r.Batch_Year in ('" + batch1 + "') and A.FeeCategory in ('" + feeCategory + "')
                    if (degcourseid != "")
                        selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";

                    if (batch1 != "")
                    {
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    }
                    else
                        selqry = selqry + "and r.Batch_Year in ('" + batch_year + "')";
                    if (sem != "")
                    {
                        selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                    }
                    else
                        selqry = selqry + "A.FeeCategory in ('" + feeCategory + "')";

                    if (deptdegcode != "")
                        selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                    if (headervalue != "")
                        selqry = selqry + " and a.HeaderFK in ('" + headervalue + "')";
                    if (ledgervalue != "")
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                    if (commondist != "")
                        selqry += commondist;
                    selqry = selqry + " GROUP BY G.Course_Id,Course_Name,a.FeeCategory,r.college_code,r.Batch_Year order by G.Course_Id ";
                    if (checkSchoolSetting() != 0)//added by abarna 
                    {
                        finyear = "A.FinYearFK in ('" + Finyearvalue + "') and";
                    }
                    else
                    {
                        finyear = "A.actualfinyearfk in ('" + Finyearvalue + "') and";
                    }
                    if (checkSchoolSetting() != 0)
                    {
                        selqry = selqry + "  SELECT Course_Name,G.Course_Id,PayMode,SUM(Debit) as total,a.FeeCategory,r.college_code,r.Batch_Year,feecategory FROM FT_FinDailyTransaction A,registration r,Degree G,Course C WHERE A.App_No = r.app_no AND r.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and r.college_code ='" + collegecode1 + "' and " + finyear + " isnull(paid_Istransfer,'0')='0' and isnull(paid_Istransfer,'0')='0' and isnull(iscanceled,'0')='0' ";// and r.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "')
                        //if (usBasedRights == true)
                        //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                    }
                    else
                    {
                        selqry = selqry + "  SELECT Course_Name,G.Course_Id,PayMode,sum(isnull(debit,'0'))-sum(isnull(CREDIT,'0')) as total,a.FeeCategory,r.college_code,r.Batch_Year,feecategory FROM FT_FinDailyTransaction A,registration r,Degree G,Course C WHERE A.App_No = r.app_no AND r.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and r.college_code ='" + collegecode1 + "' and " + finyear + " isnull(paid_Istransfer,'0')='0' and isnull(paid_Istransfer,'0')='0' and isnull(iscanceled,'0')='0' ";
                    }
                    if (degcourseid != "")
                        selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
                    if (batch1 != "")
                    {
                        selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    }
                    else
                        selqry = selqry + "and r.Batch_Year in ('" + batch_year + "')";
                    if (sem != "")
                    {
                        selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                    }
                    else
                        selqry = selqry + "A.FeeCategory in ('" + feeCategory + "')";
                    //if (batch1 != "")
                    //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    if (deptdegcode != "")
                        selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                    //if (sem != "")
                    //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    if (headervalue != "")
                        selqry = selqry + " and A.HeaderFK in ('" + headervalue + "')";
                    if (ledgervalue != "")
                        selqry = selqry + " and A.LedgerFK in('" + ledgervalue + "')";
                    if (commondist != "")
                        selqry += commondist;
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                            selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                    }
                    selqry = selqry + " GROUP BY Course_Name,G.Course_Id,PayMode,r.college_code,r.batch_year,feecategory order by g.Course_Id";

                    selqry = selqry + "  select SUM(f.Excessamt) as ExcessAmount,C.Course_Id,r.college_code,r.Batch_Year,f.FeeCategory from FT_ExcessDet F,FT_ExcessLedgerDet Fd,Registration r,Degree d,Course c where f.App_No =r.App_No and f.ExcessDetPK =fd.ExcessDetFK and r.degree_code=d.Degree_Code and d.Course_Id =c.Course_Id and r.Batch_Year in ('" + batch1 + "') ";
                    //if (batch1 != "")
                    //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                    if (deptdegcode != "")
                        selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                    if (headervalue != "")
                        selqry = selqry + " and fd.HeaderFK in('" + headervalue + "')";
                    if (ledgervalue != "")
                        selqry = selqry + "  and fd.LedgerFK in('" + ledgervalue + "')";
                    if (commondist.Trim() != "")
                        selqry = selqry + commondist;
                    if (datewise == 1)
                    {
                        //if (fromdate != "" && todate != "")
                        //    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                    selqry = selqry + " GROUP BY C.Course_Id,r.college_code,r.Batch_Year,f.FeeCategory order by C.Course_Id";

                    selqry = selqry + " select distinct r.college_code,r.batch_year from registration r,collinfo c where r.college_code=c.college_code and r.college_code in('" + collegecode1 + "') and r.batch_year in('" + batch1 + "') and r.degree_code in('" + deptdegcode + "') order by r.college_code,r.batch_year ";


                    #endregion
                }
            }
            #endregion

            #region rbdeptqry
            else if (rb_dept.Checked == true)
            {
                string headorledg = "";
                string headorledg1 = "";
                string feecatg = "";
                string textval = "";
                string textval1 = "";
                string feecatg1 = "";
                string order = "";
                string exfet = "";
                string exfet1 = "";
                string exheadorledg = "";
                string exheadorledg1 = "";
                if (rbdeptdetail.Checked == true)
                {
                    if (rbdeptyear.Checked == true)
                    {
                        textval = " ,TextVal as TextVal ";
                        textval1 = " ,TextVal";
                        feecatg = ",a.FeeCategory as FeeCategory";
                        feecatg1 = " ,a.FeeCategory";
                        order = ",a.FeeCategory order by FeeCategory";
                        exfet = ",fd.FeeCategory ";
                        exfet1 = ",fd.FeeCategory order by fd.FeeCategory";
                    }
                    else if (rbdepthead.Checked == true)
                    {
                        headorledg = " ,A.HeaderFK as headerorledger";
                        headorledg1 = " ,A.HeaderFK";
                        textval = " ,TextVal as TextVal ";
                        textval1 = " ,TextVal";
                        feecatg = ",a.FeeCategory as FeeCategory";
                        feecatg1 = " ,a.FeeCategory";
                        order = " ,a.FeeCategory";
                        exfet = ",fd.FeeCategory ";
                        exfet1 = ",fd.FeeCategory order by fd.FeeCategory";
                        exheadorledg = " ,fd.HeaderFK as headerorledger";
                        exheadorledg1 = " ,fd.HeaderFK ";
                    }
                    else if (rbdeptledg.Checked == true)
                    {
                        headorledg = " ,A.LedgerFK as headerorledger";
                        headorledg1 = ",A.LedgerFK";
                        textval = " ,TextVal as TextVal ";
                        textval1 = " ,TextVal";
                        feecatg = ",a.FeeCategory as FeeCategory";
                        feecatg1 = " ,a.FeeCategory";
                        order = " ,a.FeeCategory";
                        exfet = ",fd.FeeCategory ";
                        exfet1 = ",fd.FeeCategory order by fd.FeeCategory";
                        exheadorledg = " ,fd.LedgerFK as headerorledger";
                        exheadorledg1 = " ,fd.LedgerFK ";
                    }
                }
                #region deptquery
                ////selqry = "SELECT Course_Name,Dept_Name,G.Dept_Code, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Degree G,Course C,Department D WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 0   and G.college_code ='" + collegecode + "'";

                ////if (batch1 != "")
                ////{
                ////    selqry = selqry + "and p.Batch_Year in ('" + batch1 + "')";
                ////}

                ////if (deptdegcode != "")
                ////{
                ////    selqry = selqry + " and g.Degree_Code in ('" + deptdegcode + "')";
                ////}

                ////if (sem != "")
                ////{
                ////    selqry = selqry + "and A.FeeCategory in ('" + sem + "')";
                ////}
                ////if (stud != "")
                ////{
                ////    selqry = selqry + "and p.mode in ('" + stud + "')";
                ////}
                ////if (seatype != "")
                ////{
                ////    selqry = selqry + "and p.seattype in ('" + seatype + "')";
                ////}
                ////if (studtype != "")
                ////{
                ////    selqry = selqry + " and p.Stud_Type in ('" + studtype + "')";
                ////}
                ////if (headervalue != "")
                ////{
                ////    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                ////}
                ////if (ledgervalue != "")
                ////{
                ////    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                ////}
                ////if (datewise == 1)
                ////{
                ////    if (fromdate != "" && todate != "")
                ////    {
                ////        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                ////    }
                ////}
                ////selqry = selqry + "GROUP BY G.Course_Id,Course_Name,G.Dept_Code,Dept_Name ";

                //selqry = selqry + "  SELECT r.degree_code, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=a.App_No and r.App_No =p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";

                //if (batch1 != "")
                //{
                //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (sec != "")
                //{
                //    //  selqry = selqry + " and   ISNULL( r.Sections,'') in ('" + sec + "','')";
                //}
                //if (stud != "")
                //{
                //    // selqry = selqry + "and p.mode in ('" + stud + "')";
                //}
                //if (seatype != "")
                //{
                //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                //}
                //if (studtype != "")
                //{
                //    // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                //    }
                //}
                //selqry = selqry + "GROUP BY r.degree_code ";

                ////selqry = selqry + " SELECT Course_Name,Dept_Name,G.Dept_Code,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C,Department D WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 0  and G.college_code ='" + collegecode + "'";

                ////if (batch1 != "")
                ////{
                ////    selqry = selqry + "and p.Batch_Year in ('" + batch1 + "')";
                ////}
                ////if (deptdegcode != "")
                ////{
                ////    selqry = selqry + " and g.Degree_Code in ('" + deptdegcode + "')";
                ////}
                ////if (sem != "")
                ////{
                ////    selqry = selqry + "and A.FeeCategory in ('" + sem + "')";
                ////}
                ////if (stud != "")
                ////{
                ////    selqry = selqry + "and p.mode in ('" + stud + "')";
                ////}
                ////if (seatype != "")
                ////{
                ////    selqry = selqry + "and p.seattype in ('" + seatype + "')";
                ////}
                ////if (studtype != "")
                ////{
                ////    selqry = selqry + " and p.Stud_Type in ('" + studtype + "')";
                ////}
                ////if (headervalue != "")
                ////{
                ////    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                ////}
                ////if (ledgervalue != "")
                ////{
                ////    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                ////}
                ////if (datewise == 1)
                ////{
                ////    if (fromdate != "" && todate != "")
                ////    {
                ////        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                ////    }
                ////}
                ////selqry = selqry + "  GROUP BY G.Course_Id,Course_Name,G.Dept_Code,Dept_Name,PayMode";
                //selqry = selqry + " SELECT r.degree_code,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=p.app_no and r.App_No=a.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";


                //if (batch1 != "")
                //{
                //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (sec != "")
                //{
                //    // selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
                //}
                //if (stud != "")
                //{
                //    // selqry = selqry + "and p.mode in ('" + stud + "')";
                //}
                //if (seatype != "")
                //{
                //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                //}
                //if (studtype != "")
                //{
                //    // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                //    }
                //}
                //selqry = selqry + "GROUP BY PayMode,r.degree_code ";

                //selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerfK,r.Degree_Code from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No   AND P.IsConfirm = 1  AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                //if (batch1 != "")
                //{
                //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (sec != "")
                //{
                //    // selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
                //}
                //if (stud != "")
                //{
                //    // selqry = selqry + "and p.mode in ('" + stud + "')";
                //}
                //if (seatype != "")
                //{
                //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                //}
                //if (studtype != "")
                //{
                //    //selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                //    }
                //}
                //selqry = selqry + " GROUP BY A.HeaderFK,A.LedgerfK,r.Degree_Code";
                //selqry = selqry + " select d.Degree_Code,c.Course_Name,dt.Dept_Name from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id and c.type ='" + ddlstream.SelectedItem.Text + "'";
                #endregion

                #region newqry

                if (rbdeptcommon.Checked == true)
                {
                    if (!cbAcdYear.Checked)
                    {
                        #region deptcommonqry
                        selqry = selqry + "    SELECT r.degree_code,count(distinct r.app_no) as studcount , SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C,TextValTable T WHERE A.App_No = P.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id and r.App_No =p.app_no and a.FeeCategory=t.TextCode   AND P.IsConfirm = 1  and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0'";//AND Admission_Status = 1

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY r.degree_code ";
                        selqry = selqry + " SELECT r.degree_code,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Registration r,Degree d,Course C ,TextValTable T WHERE A.App_No = P.app_no and r.App_No=p.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id  and a.FeeCategory=t.TextCode  AND P.IsConfirm = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(paid_Istransfer,'0')='0'";//AND Admission_Status = 1 
                        if (usBasedRights == true)
                            selqry += " and a.EntryUserCode in('" + usercode + "')";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY PayMode,r.degree_code ";

                        selqry = selqry + " SELECT  r.degree_code,SUM(FeeAmount) as Allot ,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance FROM FT_FeeAllot A,applyn  r,Registration P where  a.App_No = r.App_No and p.App_No =r.app_no and p.App_No = a.App_No  and isconfirm ='1' and admission_status ='1' and A.FinYearFK in ('" + Finyearvalue + "') ";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and P.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  P.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (sec != "")
                        {
                            //  selqry = selqry + " and   ISNULL( p.Sections,'') in ('" + sec + "','')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in ('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and P.DelFlag=0 ";
                        //}
                        if (cc != "")
                        {
                            //selqry = selqry + cc;
                            selqry = selqry + " and p.cc=0 ";
                        }
                        if (debar != "")
                        {
                            // selqry = selqry + debar;
                            selqry = selqry + " and p.Exam_Flag<>'debar' ";
                        }
                        if (disc != "")
                        {
                            // selqry = selqry + disc;
                            selqry = selqry + " and p.DelFlag=0 ";
                        }
                        if (rbdepthead.Checked == true)
                        {
                            selqry = selqry + " GROUP BY  r.degree_code ";
                        }
                        else
                        {
                            selqry = selqry + " GROUP BY r.degree_code ";
                        }

                        //selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,TextVal,A.HeaderFK,A.LedgerfK,r.Degree_Code from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C ,TextValTable T WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No and d.Degree_Code =r.degree_code and c.Course_Id =d.Course_Id and a.FeeCategory=t.TextCode   AND P.IsConfirm = 1  AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                        //if (batch1 != "")
                        //{
                        //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        //}
                        //if (deptdegcode != "")
                        //{
                        //    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        //}
                        //if (sem != "")
                        //{
                        //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        //}
                        //if (headervalue != "")
                        //{
                        //    selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        //}
                        //if (ledgervalue != "")
                        //{
                        //    selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        //}
                        //if (datewise == 1)
                        //{
                        //    if (fromdate != "" && todate != "")
                        //    {
                        //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        //    }
                        //}
                        //selqry = selqry + " GROUP BY A.HeaderFK,A.LedgerfK,r.Degree_Code,TextVal";
                        selqry = selqry + "  select SUM(f.Excessamt) as ExcessAmount,d.Degree_Code from FT_ExcessDet F,FT_ExcessLedgerDet Fd,Registration r,Degree d,Course c where f.App_No =r.App_No and f.ExcessDetPK =fd.ExcessDetFK and r.degree_code=d.Degree_Code and d.Course_Id =c.Course_Id ";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            //selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and fd.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and fd.LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY d.Degree_Code";
                        selqry = selqry + " select d.Degree_Code,c.Course_Name,dt.Dept_Name,dt.dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id";
                        if (ddlstream.Enabled == true)
                        {
                            selqry = selqry + " and c.type ='" + ddlstream.SelectedItem.Text + "'";
                        }
                        #endregion
                    }
                    else
                    {
                        #region deptcommonqry with academic year settings Added by Saranya on 30/12/2017

                        selqry = selqry + " SELECT r.degree_code,c.Course_Name,dt.Dept_Name,count(distinct r.app_no) as studcount,r.college_code FROM FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C,Department dt WHERE A.App_No = P.app_no and d.Dept_Code=dt.Dept_Code and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id and r.App_No =p.app_no   and r.college_code ='" + collegecode1 + "'  and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0'  and r.Batch_Year in ('" + batch1 + "') and A.FeeCategory in ('" + curSemCode + "')  and  r.Degree_Code in('" + deptdegcode + "')  ";
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        selqry = selqry + " GROUP BY r.degree_code,c.Course_Name,r.college_code,dt.Dept_Name ";

                        selqry = selqry + "    SELECT r.degree_code, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,a.FeeCategory,r.college_code,r.Batch_Year FROM FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C WHERE A.App_No = P.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id and r.App_No =p.app_no  and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0' ";// and r.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "')   AND Admission_Status = 1
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        else
                            selqry = selqry + "and r.Batch_Year in ('" + batch_year + "')";
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                        }
                        else
                            selqry = selqry + "A.FeeCategory in ('" + feeCategory + "')";
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }

                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY r.degree_code,a.FeeCategory,r.college_code,r.Batch_Year ";
                        if (checkSchoolSetting() != 0)//added by abarna 
                        {
                            finyear = "A.FinYearFK in ('" + Finyearvalue + "') and";
                        }
                        else
                        {
                            finyear = "A.actualfinyearfk in ('" + Finyearvalue + "') and";
                        }
                        if (checkSchoolSetting() != 0)
                        {
                            selqry = selqry + " SELECT r.degree_code,PayMode,SUM(Debit) as total,FeeCategory,r.college_code,r.Batch_Year FROM FT_FinDailyTransaction A,Applyn P,Registration r,Degree d,Course C WHERE A.App_No = P.app_no and r.App_No=p.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id   and isnull(IsCanceled,'0')='0'  and r.college_code ='" + collegecode1 + "'  and " + finyear + " isnull(paid_Istransfer,'0')='0'";//and r.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "') AND Admission_Status = 1 and  ISNULL(IsCollected,0)='1'
                            //if (usBasedRights == true)
                            //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                        }
                        else
                        {
                            selqry = selqry + " SELECT r.degree_code,PayMode,sum(isnull(debit,'0'))-sum(isnull(CREDIT,'0')) as total,FeeCategory,r.college_code,r.Batch_Year FROM FT_FinDailyTransaction A,Applyn P,Registration r,Degree d,Course C WHERE A.App_No = P.app_no and r.App_No=p.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id   and isnull(IsCanceled,'0')='0'  and r.college_code ='" + collegecode1 + "'  and " + finyear + " isnull(paid_Istransfer,'0')='0'";
                        }

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        else
                            selqry = selqry + "and r.Batch_Year in ('" + batch_year + "')";
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                        }
                        else
                            selqry = selqry + "A.FeeCategory in ('" + feeCategory + "')";

                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }

                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY PayMode,r.degree_code,FeeCategory,r.college_code,r.Batch_Year ";


                        selqry = selqry + "  select SUM(f.Excessamt) as ExcessAmount,d.Degree_Code,r.college_code,r.Batch_Year,f.FeeCategory from FT_ExcessDet F,FT_ExcessLedgerDet Fd,Registration r,Degree d,Course c where f.App_No =r.App_No and f.ExcessDetPK =fd.ExcessDetFK and r.degree_code=d.Degree_Code and d.Course_Id =c.Course_Id  ";//and r.Batch_Year in ('" + batch_year + "') 

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        else
                            selqry = selqry + "and r.Batch_Year in ('" + batch_year + "')";

                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            //selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and fd.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and fd.LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY d.Degree_Code,r.college_code,r.Batch_Year,f.FeeCategory";

                        selqry = selqry + " select distinct r.college_code,r.batch_year from registration r,collinfo c where r.college_code=c.college_code and r.college_code ='" + collegecode1 + "' and r.batch_year in('" + batch1 + "') and r.degree_code in('" + deptdegcode + "') order by r.college_code,r.batch_year ";

                        selqry = selqry + " select d.Degree_Code,c.Course_Name,dt.Dept_Name,dt.dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id";
                        if (ddlstream.Enabled == true)
                        {
                            selqry = selqry + " and c.type ='" + ddlstream.SelectedItem.Text + "'";
                        }
                        #endregion
                    }
                }
                else if (rbdeptdetail.Checked == true)
                {
                    if (!cbAcdYear.Checked)
                    {
                        #region deptdetails
                        selqry = " SELECT r.degree_code " + feecatg + " " + textval + " FROM FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C,TextValTable T WHERE A.App_No = P.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id and r.App_No =p.app_no and a.FeeCategory=t.TextCode   AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY r.degree_code  " + textval1 + " " + order + " ";
                        //allot
                        selqry = selqry + "  SELECT r.degree_code" + textval + "" + headorledg + "" + feecatg + ", SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C,TextValTable T WHERE A.App_No = P.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id and r.App_No =p.app_no and a.FeeCategory=t.TextCode   AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0'";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY r.degree_code" + textval1 + "" + headorledg1 + " " + order + "";
                        //paymode
                        selqry = selqry + " SELECT r.degree_code  ,PayMode,SUM(Debit) as total" + feecatg + " FROM FT_FinDailyTransaction A,Applyn P,Registration r,Degree d,Course C ,TextValTable T WHERE A.App_No = P.app_no and r.App_No=p.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id  and a.FeeCategory=t.TextCode  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and isnull(paid_Istransfer,'0')='0'";
                        if (usBasedRights == true)
                            selqry += " and a.EntryUserCode in('" + usercode + "')";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY PayMode,r.degree_code " + order + "";
                        //excess
                        //selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount" + textval + "" + headorledg + "" + feecatg + ",r.Degree_Code from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C ,TextValTable T WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No and d.Degree_Code =r.degree_code and c.Course_Id =d.Course_Id and a.FeeCategory=t.TextCode   AND P.IsConfirm = 1  AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                        //if (batch1 != "")
                        //{
                        //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        //}
                        //if (deptdegcode != "")
                        //{
                        //    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        //}
                        //if (sem != "")
                        //{
                        //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        //}
                        //if (headervalue != "")
                        //{
                        //    selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        //}
                        //if (ledgervalue != "")
                        //{
                        //    selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        //}
                        //if (datewise == 1)
                        //{
                        //    if (fromdate != "" && todate != "")
                        //    {
                        //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        //    }
                        //}
                        //selqry = selqry + " GROUP BY r.Degree_Code" + textval1 + "" + headorledg1 + " " + order + "";
                        selqry = selqry + "  select SUM(f.Excessamt) as ExcessAmount,d.Degree_Code " + exheadorledg + "" + exfet + " from FT_ExcessDet F,FT_ExcessLedgerDet Fd,Registration r,Degree d,Course c where f.App_No =r.App_No and f.ExcessDetPK =fd.ExcessDetFK and r.degree_code=d.Degree_Code and d.Course_Id =c.Course_Id ";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            //selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and fd.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and fd.LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY d.Degree_Code" + exheadorledg1 + " " + exfet1 + "";
                        //degree and dept
                        selqry = selqry + " select d.Degree_Code,c.Course_Name,dt.Dept_Name,dt.dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id";
                        //stud no count
                        selqry = selqry + " select distinct COUNT (distinct a.app_no) as countval " + feecatg1 + ",r.degree_code from FT_FinDailyTransaction a,Registration r where r.App_No=a.App_No and  isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1'and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                        if (usBasedRights == true)
                            selqry += " and a.EntryUserCode in('" + usercode + "')";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + " group by r.degree_code  " + order + "";
                        //if (ddlstream.Enabled == true)
                        //{
                        //    selqry = selqry + " and c.type ='" + ddlstream.SelectedItem.Text + "'";
                        //}
                        #endregion
                    }
                    else
                    {
                        #region deptdetails with Academic Year Settings Added by saranya on 30/12/2017


                        selqry = " SELECT r.degree_code,c.Course_Name,dt.Dept_Name,count(distinct r.app_no) as studcount,r.college_code " + feecatg + " " + textval + " FROM FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C,Department dt,TextValTable T WHERE A.App_No = P.app_no and d.Dept_Code=dt.Dept_Code and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id and r.App_No =p.app_no and a.FeeCategory=t.TextCode  and r.college_code ='" + collegecode1 + "'  and A.FinYearFK in ('" + Finyearvalue + "') and isnull(istransfer,'0')='0'  and r.Batch_Year in ('" + batch1 + "') and A.FeeCategory in ('" + curSemCode + "')  and  r.Degree_Code in('" + deptdegcode + "') and HeaderFK in ('" + headervalue + "') and LedgerFK in('" + ledgervalue + "') ";
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }

                        selqry = selqry + " GROUP BY r.degree_code,c.Course_Name,r.college_code,dt.Dept_Name  " + textval1 + " " + order + " ";


                        //allot
                        selqry = selqry + "  SELECT r.degree_code " + textval + "" + headorledg + "" + feecatg + ", SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,a.FeeCategory,r.college_code,r.Batch_Year FROM FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C,Textvaltable t WHERE A.App_No = P.app_no and  a.FeeCategory=t.TextCode and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id and r.App_No =p.app_no and r.college_code ='" + collegecode1 + "'  and A.FinYearFK in ('" + Finyearvalue + "')  and isnull(istransfer,'0')='0' ";//and r.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "') AND Admission_Status = 1

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        else
                            selqry = selqry + "and r.Batch_Year in ('" + batch_year + "')";
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                        }
                        else
                            selqry = selqry + "A.FeeCategory in ('" + feeCategory + "')";

                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }

                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY a.FeeCategory,r.college_code,r.Batch_Year,r.degree_code" + textval1 + "" + headorledg1 + " order by a.FeeCategory ";
                        if (checkSchoolSetting() != 0)//added by abarna 
                        {
                            finyear = "A.FinYearFK in ('" + Finyearvalue + "') and";
                        }
                        else
                        {
                            finyear = "A.actualfinyearfk in ('" + Finyearvalue + "') and";
                        }
                        if (checkSchoolSetting() != 0)
                        {
                            selqry = selqry + " SELECT r.degree_code,PayMode,SUM(Debit) as total,a.FeeCategory,r.college_code,r.Batch_Year FROM FT_FinDailyTransaction A,Applyn P,Registration r,Degree d,Course C WHERE A.App_No = P.app_no and r.App_No=p.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id   and isnull(IsCanceled,'0')='0'  and r.college_code ='" + collegecode1 + "'  and A.FinYearFK in ('" + Finyearvalue + "')  and isnull(paid_Istransfer,'0')='0'";//and r.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "')     " + feecatg + "   AND Admission_Status = 1 and  ISNULL(IsCollected,0)='1' and a.FeeCategory=t.TextCode  AND P.IsConfirm = 1
                        }
                        else
                        {
                            selqry = selqry + " SELECT r.degree_code,PayMode,sum(isnull(debit,'0'))-sum(isnull(CREDIT,'0')) as total,FeeCategory,r.college_code,r.Batch_Year FROM FT_FinDailyTransaction A,Applyn P,Registration r,Degree d,Course C WHERE A.App_No = P.app_no and r.App_No=p.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id   and isnull(IsCanceled,'0')='0'  and r.college_code ='" + collegecode1 + "'  and " + finyear + " isnull(paid_Istransfer,'0')='0'";
                        }
                        //paymode

                        if (usBasedRights == true)
                            selqry += " and a.EntryUserCode in('" + usercode + "')";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        else
                            selqry = selqry + "and r.Batch_Year in ('" + batch_year + "')";
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                        }
                        else
                            selqry = selqry + "A.FeeCategory in ('" + feeCategory + "')";

                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        //if (sem != "")
                        //{
                        //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        //}
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY a.FeeCategory,r.college_code,r.Batch_Year,PayMode,r.degree_code " + order + "";

                        selqry = selqry + "  select SUM(f.Excessamt) as ExcessAmount,r.college_code,r.Batch_Year,f.FeeCategory,d.Degree_Code " + exheadorledg + "" + exfet + " from FT_ExcessDet F,FT_ExcessLedgerDet Fd,Registration r,Degree d,Course c where f.App_No =r.App_No and f.ExcessDetPK =fd.ExcessDetFK and r.degree_code=d.Degree_Code and d.Course_Id =c.Course_Id ";//and r.Batch_Year in ('" + batch_year + "')

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        else
                            selqry = selqry + "and r.Batch_Year in ('" + batch_year + "')";
                        if (sem != "")
                        {
                            //selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                        }
                        //else
                        //selqry = selqry + "A.FeeCategory in ('" + feeCategory + "')";

                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                        }

                        if (headervalue != "")
                        {
                            selqry = selqry + " and fd.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and fd.LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                            }
                        }
                        selqry = selqry + " GROUP BY r.college_code,r.Batch_Year,f.FeeCategory,d.Degree_Code" + exheadorledg1 + " " + exfet1 + "";

                        selqry = selqry + " select distinct r.college_code,r.batch_year from registration r,collinfo c where r.college_code=c.college_code and r.college_code ='" + collegecode1 + "' and r.batch_year in('" + batch1 + "') and r.degree_code in('" + deptdegcode + "') order by r.college_code,r.batch_year ";

                        //degree and dept
                        selqry = selqry + " select d.Degree_Code,c.Course_Name,dt.Dept_Name,dt.dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id";
                        //stud no count
                        selqry = selqry + " select distinct COUNT (distinct a.app_no) as countval " + feecatg1 + ",r.degree_code from FT_FinDailyTransaction a,Registration r where r.App_No=a.App_No and  isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1'and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";// and r.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "') 
                        if (usBasedRights == true)
                            selqry += " and a.EntryUserCode in('" + usercode + "')";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        else
                            selqry = selqry + "and r.Batch_Year in ('" + batch_year + "')";
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + curSemCode + "')";
                        }
                        else
                            selqry = selqry + "A.FeeCategory in ('" + feeCategory + "')";

                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }

                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + " group by r.degree_code  " + order + "";

                        //if (ddlstream.Enabled == true)
                        //{
                        //    selqry = selqry + " and c.type ='" + ddlstream.SelectedItem.Text + "'";
                        //}


                        #endregion
                    }

                }
                #endregion
            }
            #endregion

            #region rbsemqry
            else if (rb_sem.Checked == true)
            {
                // ds.Clear();
                //  ds = d2.selectsem(collegecode1, batch1, deptdegcode, sem, sec, stud, seatype, studtype, headervalue, ledgervalue, datewise, fromdate, todate);
                #region rbsemquery
                ////selqry = "SELECT TextVal,SUM(FeeAmount) as allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Degree G,Course C,Department D,TextValTable T WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and p.degree_code = g.degree_code and g.college_code = d.college_code AND A.FeeCategory = T.TextCode AND P.IsConfirm = 1 AND Admission_Status = 0  and G.college_code ='" + collegecode + "'";

                ////if (batch1 != "")
                ////{
                ////    selqry = selqry + "and p.Batch_Year in ('" + batch1 + "')";
                ////}

                ////if (deptdegcode != "")
                ////{
                ////    selqry = selqry + " and g.Degree_Code in ('" + deptdegcode + "')";
                ////}

                ////if (sem != "")
                ////{
                ////    selqry = selqry + "and A.FeeCategory in ('" + sem + "')";
                ////}
                ////if (stud != "")
                ////{
                ////    selqry = selqry + "and p.mode in ('" + stud + "')";
                ////}
                ////if (seatype != "")
                ////{
                ////    selqry = selqry + "and p.seattype in ('" + seatype + "')";
                ////}
                ////if (studtype != "")
                ////{
                ////    selqry = selqry + " and p.Stud_Type in ('" + studtype + "')";
                ////}
                ////if (headervalue != "")
                ////{
                ////    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                ////}
                ////if (ledgervalue != "")
                ////{
                ////    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                ////}
                ////if (datewise == 1)
                ////{
                ////    if (fromdate != "" && todate != "")
                ////    {
                ////        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                ////    }
                ////}
                ////selqry = selqry + "GROUP BY TextVal ";

                //selqry = selqry + "  SELECT TextVal,SUM(FeeAmount) as allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,TextValTable T WHERE A.App_No = P.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 AND A.FeeCategory = T.TextCode and P.college_code ='" + collegecode1 + "'";

                //if (batch1 != "")
                //{
                //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  P.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (sec != "")
                //{
                //    // selqry = selqry + " and   ISNULL( r.Sections,'') in ('" + sec + "','')";
                //}
                //if (stud != "")
                //{
                //    // selqry = selqry + "and p.mode in ('" + stud + "')";
                //}
                //if (seatype != "")
                //{
                //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                //}
                //if (studtype != "")
                //{
                //    //selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                //    }
                //}
                //selqry = selqry + "GROUP BY TextVal";

                ////selqry = selqry + " SELECT TextVal,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C,Department D,TextValTable T WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 0 AND A.FeeCategory = T.TextCode and G.college_code ='" + collegecode + "'";

                ////if (batch1 != "")
                ////{
                ////    selqry = selqry + "and p.Batch_Year in ('" + batch1 + "')";
                ////}
                ////if (deptdegcode != "")
                ////{
                ////    selqry = selqry + " and g.Degree_Code in ('" + deptdegcode + "')";
                ////}
                ////if (sem != "")
                ////{
                ////    selqry = selqry + "and A.FeeCategory in ('" + sem + "')";
                ////}
                ////if (stud != "")
                ////{
                ////    selqry = selqry + "and p.mode in ('" + stud + "')";
                ////}
                ////if (seatype != "")
                ////{
                ////    selqry = selqry + "and p.seattype in ('" + seatype + "')";
                ////}
                ////if (studtype != "")
                ////{
                ////    selqry = selqry + " and p.Stud_Type in ('" + studtype + "')";
                ////}
                ////if (headervalue != "")
                ////{
                ////    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                ////}
                ////if (ledgervalue != "")
                ////{
                ////    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                ////}
                ////if (datewise == 1)
                ////{
                ////    if (fromdate != "" && todate != "")
                ////    {
                ////        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                ////    }
                ////}
                ////selqry = selqry + "  GROUP BY TextVal, PayMode";
                //selqry = selqry + " SELECT TextVal,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C,Department D,TextValTable T WHERE A.App_No = P.app_no  AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 1 AND A.FeeCategory = T.TextCode and g.college_code ='" + collegecode1 + "'";


                //if (batch1 != "")
                //{
                //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (sec != "")
                //{
                //    //selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
                //}
                //if (stud != "")
                //{
                //    // selqry = selqry + "and p.mode in ('" + stud + "')";
                //}
                //if (seatype != "")
                //{
                //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                //}
                //if (studtype != "")
                //{
                //    // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                //    }
                //}
                //selqry = selqry + "GROUP BY TextVal,PayMode";

                //selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,h.LedgerPK,p.Batch_Year,C.Course_Id,d.Dept_Code,A.FeeCategory from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Degree G,Course C,Department D,FM_LedgerMaster H,FM_HeaderMaster fh WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code  and h.LedgerPK =ex.LedgerFK and ex.HeaderFK=h.HeaderFK and h.HeaderFK=fh.HeaderPK and em.App_No = a.App_No   AND P.IsConfirm = 1  and a.LedgerFK=h.LedgerPK   AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "' ";
                //if (batch1 != "")
                //{
                //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                //}
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (sec != "")
                //{
                //    // selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
                //}
                //if (stud != "")
                //{
                //    // selqry = selqry + "and p.mode in ('" + stud + "')";
                //}
                //if (seatype != "")
                //{
                //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
                //}
                //if (studtype != "")
                //{
                //    // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
                //}
                //if (headervalue != "")
                //{
                //    selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                //}
                //if (ledgervalue != "")
                //{
                //    selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                //    }
                //}
                //selqry = selqry + " GROUP BY A.HeaderFK ,h.LedgerPK,p.Batch_Year ,C.Course_Id,d.Dept_Code,A.FeeCategory";
                #endregion

                #region newquery
                selqry = selqry + " SELECT TextVal,SUM(FeeAmount) as allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,TextValTable T WHERE A.App_No = P.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 AND A.FeeCategory = T.TextCode and P.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                if (batch1 != "")
                {
                    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                }
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  P.Degree_Code in ('" + deptdegcode + "')";
                }
                if (sem != "")
                {
                    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                }
                if (headervalue != "")
                {
                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                }
                if (ledgervalue != "")
                {
                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                }
                selqry = selqry + " GROUP BY TextVal ";
                if (checkSchoolSetting() != 0)//added by abarna 
                {
                    finyear = "A.FinYearFK in ('" + Finyearvalue + "') and";
                }
                else
                {
                    finyear = "A.actualfinyearfk in ('" + Finyearvalue + "') and";
                }
                if (checkSchoolSetting() != 0)
                {
                    selqry = selqry + " SELECT TextVal,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Registration R,TextValTable T WHERE A.App_No = P.app_no and r.App_No=A.App_No and r.App_No=p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' AND A.FeeCategory = T.TextCode and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                }
                else
                {
                    selqry = selqry + " SELECT TextVal,PayMode,sum(isnull(debit,'0'))-sum(isnull(CREDIT,'0')) as total FROM FT_FinDailyTransaction A,Applyn P,Registration R,TextValTable T WHERE A.App_No = P.app_no and r.App_No=A.App_No and r.App_No=p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' AND A.FeeCategory = T.TextCode and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                }

                //if (usBasedRights == true)
                //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                if (batch1 != "")
                {
                    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                }
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                }
                if (sem != "")
                {
                    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                }
                if (headervalue != "")
                {
                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                }
                if (ledgervalue != "")
                {
                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                    }
                }
                selqry = selqry + "GROUP BY TextVal,PayMode";
                selqry = selqry + "  select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerFK,p.Batch_Year,A.FeeCategory from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and r.App_No=p.app_no and r.App_No=A.App_No and em.App_No = a.App_No   AND P.IsConfirm = 1   AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                if (batch1 != "")
                {
                    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                }
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                }
                if (sem != "")
                {
                    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                }
                if (headervalue != "")
                {
                    selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                }
                if (ledgervalue != "")
                {
                    selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                }
                selqry = selqry + " GROUP BY A.HeaderFK ,A.LedgerfK,p.Batch_Year ,A.FeeCategory";

                #endregion

            }
            #endregion

            #region rbstudqry
            else if (rb_studentwise.Checked == true)
            {
                bool headval = false;
                bool student = false;
                string headerandledger = "";
                string appno = "";
                string rollno = txt_roll.Text.ToString();
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 0)
                {
                    appno = d2.GetFunction(" select App_No from Registration where Roll_No='" + rollno + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 1)
                {
                    appno = d2.GetFunction(" select App_No from Registration where reg_no='" + rollno + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 2)
                {
                    appno = d2.GetFunction(" select App_No from Registration where Roll_admit='" + rollno + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 3)
                {
                    appno = d2.GetFunction(" select app_no from applyn where app_formno='" + rollno + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 4)
                {
                    appno = d2.GetFunction(" select app_no from registration where roll_no='" + txt_roll.Text.Split('-')[1] + "' and college_code='" + collegecode1 + "'");
                }
                if (rb_common.Checked == true || rb_detail.Checked == true)
                {
                    if (txt_roll.Text.Trim() == "")
                    {
                        student = true;
                        string exheaderorledger = "";
                        if (rbstudhed.Checked == true)
                        {
                            headval = true;
                            headerandledger = " ,HeaderFK";
                            exheaderorledger = ",ex.HeaderFK";
                        }
                        else
                        {
                            headval = false;
                            headerandledger = " ,LedgerFK";
                            exheaderorledger = ",ex.LedgerFK";
                        }


                        #region newquery
                        selqry = selqry + " SELECT R.app_no,A.FeeCategory,Roll_No,Reg_No,Roll_Admit,R.Stud_Name,r.Degree_Code, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,SUM(ISNULL(TotalAmount,0)-ISNULL(FromGovtAmt,0)) as NetAmount FROM FT_FeeAllot A,Applyn P,Registration R WHERE A.App_No = P.app_no AND P.app_no = R.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (sec != "")
                        {
                            selqry = selqry + " and   ISNULL( r.Sections,'') in ('" + sec + "','')";
                        }

                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND isnull(PayStartDate,'') <='" + fromdate + "'";
                            }
                        }

                        selqry = selqry + "GROUP BY R.app_no,Roll_No,Reg_No,Roll_Admit,R.Stud_Name,r.Degree_Code,A.FeeCategory";
                        if (rb_paid.Checked == true)
                        {
                            selqry = selqry + " having SUM(BalAmount)=0";
                        }
                        if (tobepaid.Checked == true)
                        {
                            selqry = selqry + " having SUM(BalAmount    )>0";
                        }
                        selqry = selqry + " order by Reg_No";

                        selqry = selqry + " SELECT  PayMode,A.App_No,SUM(Debit) as total,A.FeeCategory" + headerandledger + " as HeaderandLedger  FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No =p.app_no and A.App_No =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                        //if (usBasedRights == true)
                        //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }

                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                            }
                        }
                        selqry = selqry + "GROUP BY A.App_No,PayMode,A.FeeCategory " + headerandledger + "";
                        string headerorledger = "";
                        if (rbstudhed.Checked == true)
                        {
                            selqry = selqry + " ,P.app_no";
                            headerorledger = "HeaderFK";
                        }
                        else
                        {
                            selqry = selqry + " , P.app_no";
                            headerorledger = "LedgerFK";
                        }
                        selqry = selqry + " SELECT a.App_No ," + headerorledger + " as headerorledger,FeeCategory,SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(ISNULL(TotalAmount,0)-ISNULL(FromGovtAmt,0)) as NetAmount FROM FT_FeeAllot A,applyn  r,Registration P where  a.App_No = r.App_No and p.App_No =r.app_no and p.App_No = a.App_No  and isconfirm ='1' and admission_status ='1' and A.FinYearFK in ('" + Finyearvalue + "')";

                        if (batch1 != "")
                        {
                            selqry = selqry + " and P.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  P.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                        }
                        if (sec != "")
                        {
                            //  selqry = selqry + " and   ISNULL( p.Sections,'') in ('" + sec + "','')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + " and LedgerFK in ('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and P.DelFlag=0 ";
                        //}
                        if (cc != "")
                        {
                            //selqry = selqry + cc;
                            selqry = selqry + " and p.cc=0 ";
                        }
                        if (debar != "")
                        {
                            // selqry = selqry + debar;
                            selqry = selqry + " and p.Exam_Flag<>'debar' ";
                        }
                        if (disc != "")
                        {
                            // selqry = selqry + disc;
                            selqry = selqry + " and p.DelFlag=0 ";
                        }
                        if (datewise == 1)
                        {
                            if (fromdate != "" && todate != "")
                            {
                                selqry = selqry + "  AND isnull(PayStartDate,'') <='" + fromdate + "'";
                            }
                        }
                        if (rbstudhed.Checked == true)
                        {
                            selqry = selqry + " GROUP BY a.app_no,HeaderFK,FeeCategory";
                        }
                        else
                        {
                            selqry = selqry + " GROUP BY a.app_no,LedgerFK,FeeCategory";
                        }

                        selqry = selqry + " select SUM(EM.BalanceAmt) as BalanceAmt" + exheaderorledger + " as Excessfk,r.Batch_Year,em.FeeCategory,r.App_No from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk  and r.App_No =em.App_No  and r.college_code ='" + collegecode1 + "' and em.FinYearFK in ('" + Finyearvalue + "')";//SUM(Ex.ExcessAmt) as ExcessAmt" is modified as SUM(EM.BalanceAmt) as BalanceAmt" by saranya on 19/12/2017
                        if (batch1 != "")
                        {
                            selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                        }
                        if (deptdegcode != "")
                        {
                            selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                        }
                        if (sem != "")
                        {
                            selqry = selqry + " and em.FeeCategory in ('" + sem + "')";
                        }
                        if (headervalue != "")
                        {
                            selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                        }
                        if (ledgervalue != "")
                        {
                            selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                        }
                        //if (chkinclude.Checked == true)
                        //{
                        //    selqry = selqry + " and r.DelFlag=0 ";
                        //}
                        //if (cc != "")
                        //{
                        //    selqry = selqry + cc;
                        //}
                        //if (debar != "")
                        //{
                        //    selqry = selqry + debar;
                        //}
                        //if (disc != "")
                        //{
                        //    selqry = selqry + disc;
                        //}
                        if (commondist.Trim() != "")
                        {
                            selqry = selqry + commondist;
                        }

                        selqry = selqry + " GROUP BY r.Batch_Year,em.FeeCategory,r.App_No" + exheaderorledger + "";

                        selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                        selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";

                        #endregion


                    }
                    else if (txt_roll.Text.Trim() != "")
                    {
                        student = false;
                        string exheaderorledger = "";
                        if (rbstudhed.Checked == true)
                        {
                            headval = true;
                            headerandledger = " ,HeaderFK";
                            exheaderorledger = ",ex.HeaderFK";
                        }
                        else
                        {
                            headval = false;
                            headerandledger = " ,LedgerFK";
                            exheaderorledger = ",ex.LedgerFK";
                        }
                        if (!cbAcdYear.Checked)
                        {
                            #region newquery

                            selqry = selqry + " SELECT R.app_no,A.FeeCategory,Roll_No,Reg_No,Roll_Admit,R.Stud_Name,r.Degree_Code, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,SUM(ISNULL(TotalAmount,0)-ISNULL(FromGovtAmt,0)) as NetAmount FROM FT_FeeAllot A,Applyn P,Registration R WHERE A.App_No = P.app_no AND P.app_no = R.App_No  AND r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";//P.IsConfirm = 1 AND Admission_Status = 1 and 
                            if (appno != "")
                            {
                                selqry = selqry + " and r.App_No ='" + appno + "'";
                            }
                            if (sem != "")
                            {
                                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                            }
                            if (headervalue != "")
                            {
                                selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                            }
                            if (ledgervalue != "")
                            {
                                selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                            }
                            //if (chkinclude.Checked == true)
                            //{
                            //    selqry = selqry + " and r.DelFlag=0 ";
                            //}
                            //if (cc != "")
                            //{
                            //    selqry = selqry + cc;
                            //}
                            //if (debar != "")
                            //{
                            //    selqry = selqry + debar;
                            //}
                            //if (disc != "")
                            //{
                            //    selqry = selqry + disc;
                            //}
                            if (commondist.Trim() != "")
                            {
                                selqry = selqry + commondist;
                            }
                            if (datewise == 1)
                            {
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND isnull(PayStartDate,'') <='" + fromdate + "'";
                                }
                            }

                            selqry = selqry + "GROUP BY R.app_no,Roll_No,Reg_No,Roll_Admit,R.Stud_Name,r.Degree_Code,A.FeeCategory";
                            if (rb_paid.Checked == true)
                            {
                                selqry = selqry + " having SUM(BalAmount)=0";
                            }
                            if (tobepaid.Checked == true)
                            {
                                selqry = selqry + " having SUM(BalAmount    )>0";
                            }
                            selqry = selqry + " order by Reg_No";
                            selqry = selqry + " SELECT  PayMode,A.App_No,SUM(Debit) as total,A.FeeCategory " + headerandledger + " as HeaderandLedger FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No =p.app_no and A.App_No =r.App_No   and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";//AND P.IsConfirm = 1 AND Admission_Status = 1
                            //if (usBasedRights == true)
                            //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                            if (appno != "")
                            {
                                selqry = selqry + " and r.App_No ='" + appno + "'";
                            }
                            if (sem != "")
                            {
                                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                            }
                            if (headervalue != "")
                            {
                                selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                            }
                            if (ledgervalue != "")
                            {
                                selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                            }
                            //if (chkinclude.Checked == true)
                            //{
                            //    selqry = selqry + " and r.DelFlag=0 ";
                            //}
                            //if (cc != "")
                            //{
                            //    selqry = selqry + cc;
                            //}
                            //if (debar != "")
                            //{
                            //    selqry = selqry + debar;
                            //}
                            //if (disc != "")
                            //{
                            //    selqry = selqry + disc;
                            //}
                            if (commondist.Trim() != "")
                            {
                                selqry = selqry + commondist;
                            }
                            if (datewise == 1)
                            {
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                            }
                            selqry = selqry + "GROUP BY A.App_No,PayMode,A.FeeCategory " + headerandledger + "";
                            string headerorledger = "";
                            if (rbstudhed.Checked == true)
                            {
                                selqry = selqry + " ,P.app_no";
                                headerorledger = "HeaderFK";
                            }
                            else
                            {
                                selqry = selqry + " , P.app_no";
                                headerorledger = "LedgerFK";
                            }
                            selqry = selqry + " SELECT a.App_No, " + headerorledger + " as headerorledger,FeeCategory,SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(ISNULL(TotalAmount,0)-ISNULL(FromGovtAmt,0)) as NetAmount FROM FT_FeeAllot A,applyn  r,Registration P where  a.App_No = r.App_No and p.App_No =r.app_no and p.App_No = a.App_No   and A.FinYearFK in ('" + Finyearvalue + "') ";//and isconfirm ='1' and admission_status ='1'
                            if (appno != "")
                            {
                                selqry = selqry + " and P.App_No ='" + appno + "'";
                            }
                            if (sem != "")
                            {
                                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                            }
                            if (headervalue != "")
                            {
                                selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                            }
                            if (ledgervalue != "")
                            {
                                selqry = selqry + " and LedgerFK in ('" + ledgervalue + "')";
                            }
                            //if (chkinclude.Checked == true)
                            //{
                            //    selqry = selqry + " and P.DelFlag=0 ";
                            //}
                            if (cc != "")
                            {
                                //selqry = selqry + cc;
                                selqry = selqry + " and p.cc=0 ";
                            }
                            if (debar != "")
                            {
                                // selqry = selqry + debar;
                                selqry = selqry + " and p.Exam_Flag<>'debar' ";
                            }
                            if (disc != "")
                            {
                                // selqry = selqry + disc;
                                selqry = selqry + " and p.DelFlag=0 ";
                            }
                            if (datewise == 1)
                            {
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND isnull(PayStartDate,'') <='" + fromdate + "'";
                                }
                            }
                            if (rbstudhed.Checked == true)
                            {
                                selqry = selqry + " GROUP BY a.app_no,HeaderFK,FeeCategory";
                            }
                            else
                            {
                                selqry = selqry + " GROUP BY a.app_no,LedgerFK,FeeCategory";
                            }

                            selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount" + exheaderorledger + " as Excessfk,r.Batch_Year,em.FeeCategory,r.App_No from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk  and r.App_No =em.App_No  and r.college_code ='" + collegecode1 + "' and em.FinYearFK in ('" + Finyearvalue + "')";
                            if (appno != "")
                            {
                                selqry = selqry + " and r.App_No ='" + appno + "'";
                            }
                            if (sem != "")
                            {
                                selqry = selqry + " and em.FeeCategory in ('" + sem + "')";
                            }
                            if (headervalue != "")
                            {
                                selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                            }
                            if (ledgervalue != "")
                            {
                                selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                            }
                            //if (chkinclude.Checked == true)
                            //{
                            //    selqry = selqry + " and r.DelFlag=0 ";
                            //}
                            //if (cc != "")
                            //{
                            //    selqry = selqry + cc;
                            //}
                            //if (debar != "")
                            //{
                            //    selqry = selqry + debar;
                            //}
                            //if (disc != "")
                            //{
                            //    selqry = selqry + disc;
                            //}
                            if (commondist.Trim() != "")
                            {
                                selqry = selqry + commondist;
                            }
                            if (datewise == 1)
                            {
                                if (fromdate != "" && todate != "")
                                {
                                    //selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                                }
                            }
                            selqry = selqry + " GROUP BY r.Batch_Year,em.FeeCategory,r.App_No" + exheaderorledger + "";

                            selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                            selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";
                            #endregion
                        }
                        else
                        {
                            #region newquery with Academic year setting Added by Saranya on 04/01/2018

                            selqry = selqry + " SELECT R.app_no,A.FeeCategory,Roll_No,Reg_No,Roll_Admit,R.Stud_Name,r.Degree_Code, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,SUM(ISNULL(TotalAmount,0)-ISNULL(FromGovtAmt,0)) as NetAmount FROM FT_FeeAllot A,Applyn P,Registration R WHERE A.App_No = P.app_no AND P.app_no = R.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "'  and A.FeeCategory in ('" + feeCategory + "') and A.FinYearFK in ('" + Finyearvalue + "')";
                            if (appno != "")
                            {
                                selqry = selqry + " and r.App_No ='" + appno + "'";
                            }
                            //if (sem != "")
                            //{
                            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                            //}
                            if (headervalue != "")
                            {
                                selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                            }
                            if (ledgervalue != "")
                            {
                                selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                            }
                            //if (chkinclude.Checked == true)
                            //{
                            //    selqry = selqry + " and r.DelFlag=0 ";
                            //}
                            //if (cc != "")
                            //{
                            //    selqry = selqry + cc;
                            //}
                            //if (debar != "")
                            //{
                            //    selqry = selqry + debar;
                            //}
                            //if (disc != "")
                            //{
                            //    selqry = selqry + disc;
                            //}
                            if (commondist.Trim() != "")
                            {
                                selqry = selqry + commondist;
                            }
                            if (datewise == 1)
                            {
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND isnull(PayStartDate,'') <='" + fromdate + "'";
                                }
                            }

                            selqry = selqry + "GROUP BY R.app_no,Roll_No,Reg_No,Roll_Admit,R.Stud_Name,r.Degree_Code,A.FeeCategory";
                            if (rb_paid.Checked == true)
                            {
                                selqry = selqry + " having SUM(BalAmount)=0";
                            }
                            if (tobepaid.Checked == true)
                            {
                                selqry = selqry + " having SUM(BalAmount    )>0";
                            }
                            selqry = selqry + " order by Reg_No";
                            selqry = selqry + " SELECT  PayMode,A.App_No,SUM(Debit) as total,A.FeeCategory " + headerandledger + " as HeaderandLedger FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No =p.app_no and A.App_No =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and A.FeeCategory in ('" + feeCategory + "')";
                            //if (usBasedRights == true)
                            //    selqry += " and a.EntryUserCode in('" + usercode + "')";
                            if (appno != "")
                            {
                                selqry = selqry + " and r.App_No ='" + appno + "'";
                            }
                            //if (sem != "")
                            //{
                            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                            //}
                            if (headervalue != "")
                            {
                                selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                            }
                            if (ledgervalue != "")
                            {
                                selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                            }
                            //if (chkinclude.Checked == true)
                            //{
                            //    selqry = selqry + " and r.DelFlag=0 ";
                            //}
                            //if (cc != "")
                            //{
                            //    selqry = selqry + cc;
                            //}
                            //if (debar != "")
                            //{
                            //    selqry = selqry + debar;
                            //}
                            //if (disc != "")
                            //{
                            //    selqry = selqry + disc;
                            //}
                            if (commondist.Trim() != "")
                            {
                                selqry = selqry + commondist;
                            }
                            if (datewise == 1)
                            {
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                            }
                            selqry = selqry + "GROUP BY A.App_No,PayMode,A.FeeCategory " + headerandledger + "";
                            string headerorledger = "";
                            if (rbstudhed.Checked == true)
                            {
                                selqry = selqry + " ,P.app_no";
                                headerorledger = "HeaderFK";
                            }
                            else
                            {
                                selqry = selqry + " , P.app_no";
                                headerorledger = "LedgerFK";
                            }
                            selqry = selqry + " SELECT a.App_No, " + headerorledger + " as headerorledger,FeeCategory,SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(ISNULL(TotalAmount,0)-ISNULL(FromGovtAmt,0)) as NetAmount FROM FT_FeeAllot A,applyn  r,Registration P where  a.App_No = r.App_No and p.App_No =r.app_no and p.App_No = a.App_No  and isconfirm ='1' and admission_status ='1' and A.FinYearFK in ('" + Finyearvalue + "') and A.FeeCategory in ('" + feeCategory + "')";
                            if (appno != "")
                            {
                                selqry = selqry + " and P.App_No ='" + appno + "'";
                            }
                            //if (sem != "")
                            //{
                            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                            //}
                            if (headervalue != "")
                            {
                                selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                            }
                            if (ledgervalue != "")
                            {
                                selqry = selqry + " and LedgerFK in ('" + ledgervalue + "')";
                            }
                            //if (chkinclude.Checked == true)
                            //{
                            //    selqry = selqry + " and P.DelFlag=0 ";
                            //}
                            if (cc != "")
                            {
                                //selqry = selqry + cc;
                                selqry = selqry + " and p.cc=0 ";
                            }
                            if (debar != "")
                            {
                                // selqry = selqry + debar;
                                selqry = selqry + " and p.Exam_Flag<>'debar' ";
                            }
                            if (disc != "")
                            {
                                // selqry = selqry + disc;
                                selqry = selqry + " and p.DelFlag=0 ";
                            }
                            if (datewise == 1)
                            {
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND isnull(PayStartDate,'') <='" + fromdate + "'";
                                }
                            }
                            if (rbstudhed.Checked == true)
                            {
                                selqry = selqry + " GROUP BY a.app_no,HeaderFK,FeeCategory";
                            }
                            else
                            {
                                selqry = selqry + " GROUP BY a.app_no,LedgerFK,FeeCategory";
                            }

                            selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount" + exheaderorledger + " as Excessfk,r.Batch_Year,em.FeeCategory,r.App_No from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk  and r.App_No =em.App_No  and r.college_code ='" + collegecode1 + "' and em.FinYearFK in ('" + Finyearvalue + "') and em.FeeCategory in ('" + feeCategory + "')";
                            if (appno != "")
                            {
                                selqry = selqry + " and r.App_No ='" + appno + "'";
                            }
                            //if (sem != "")
                            //{
                            //    selqry = selqry + " and em.FeeCategory in ('" + sem + "')";
                            //}
                            if (headervalue != "")
                            {
                                selqry = selqry + " and Ex.HeaderFK in('" + headervalue + "')";
                            }
                            if (ledgervalue != "")
                            {
                                selqry = selqry + "  and Ex.LedgerFK in('" + ledgervalue + "')";
                            }
                            //if (chkinclude.Checked == true)
                            //{
                            //    selqry = selqry + " and r.DelFlag=0 ";
                            //}
                            //if (cc != "")
                            //{
                            //    selqry = selqry + cc;
                            //}
                            //if (debar != "")
                            //{
                            //    selqry = selqry + debar;
                            //}
                            //if (disc != "")
                            //{
                            //    selqry = selqry + disc;
                            //}
                            if (commondist.Trim() != "")
                            {
                                selqry = selqry + commondist;
                            }
                            if (datewise == 1)
                            {
                                if (fromdate != "" && todate != "")
                                {
                                    //selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                                }
                            }
                            selqry = selqry + " GROUP BY r.Batch_Year,em.FeeCategory,r.App_No" + exheaderorledger + "";

                            selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                            selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";
                            #endregion
                        }
                    }
                }

            }
            #endregion

            #region Daily Detail

            if (rb_dailydetail.Checked == true)
            {
                string incScholarShip = "";
                if (!cbInclScl.Checked)
                    incScholarShip = " and isnull(Transcode,'')<>'' and receipttype<>'5'";
                string appno = "";
                string rollno = txt_roll.Text.ToString();
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 0)
                {
                    appno = d2.GetFunction(" select App_No from Registration where Roll_No='" + rollno + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 1)
                {
                    appno = d2.GetFunction(" select App_No from Registration where reg_no='" + rollno + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 2)
                {
                    appno = d2.GetFunction(" select App_No from Registration where Roll_admit='" + rollno + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 3)
                {
                    appno = d2.GetFunction(" select app_no from applyn where app_formno='" + rollno + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 4)
                {
                    appno = d2.GetFunction(" select app_no from registration where roll_no='" + txt_roll.Text.Split('-')[1] + "' and college_code='" + collegecode1 + "'");
                }

                if (rbcumulacr.Checked == true)
                {
                    #region cumulative

                    if (chkcomflt.Checked == true)
                    {
                        if (!cbAcdYear.Checked)
                        {
                            if (txt_roll.Text == "")
                            {
                                #region textbox empty

                                selqry = "select SUM(ISNULL(debit,'0')) as debit,ft.feecategory ,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.Reg_No,r.roll_admit,r.degree_code,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode  from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + " ";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (batch1 != "")
                                {
                                    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                }
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                if (sem != "")
                                {
                                    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                }
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode,ft.feecategory,r.roll_admit order by TransCode";

                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                selqry = selqry + " SELECT  PayMode,A.App_No,SUM(ISNULL(debit,'0')) as total,A.FeeCategory,TransCode,A.Narration ,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No =p.app_no and A.App_No =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and A.Debit<>0 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and a.EntryUserCode in('" + usercode + "')";
                                if (batch1 != "")
                                {
                                    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                }
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                if (sem != "")
                                {
                                    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                                }

                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "GROUP BY A.App_No,PayMode,A.FeeCategory,TransCode,A.Narration,DDNo,DDDate,DDBankBranch,DDBankCode ";

                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";

                                #endregion
                            }
                            else
                            {
                                #region not empty
                                selqry = "select SUM(ISNULL(debit,'0')) as debit,ft.feecategory ,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.roll_admit,r.Reg_No,r.degree_code,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode  from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FinYearFK in ('" + Finyearvalue + "')  " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (appno != "")
                                {
                                    selqry = selqry + " and r.App_No ='" + appno + "'";
                                }
                                if (sem != "")
                                {
                                    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                }
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode,ft.feecategory,r.roll_admit order by TransCode";
                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                selqry = selqry + " SELECT  PayMode,a.feecategory,A.App_No,SUM(ISNULL(debit,'0')) as total,TransCode,A.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch ,DDBankCode  FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No =p.app_no and A.App_No =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and A.Debit<>0 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and a.EntryUserCode in('" + usercode + "')";
                                if (appno != "")
                                {
                                    selqry = selqry + " and r.App_No ='" + appno + "'";
                                }
                                if (sem != "")
                                {
                                    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                                }
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "GROUP BY A.App_No,PayMode,TransCode,A.Narration,DDNo,DDDate,DDBankBranch,DDBankCode,a.feecategory ";

                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";
                                #endregion
                            }
                            selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";
                        }

                        else
                        {
                            #region Added by saranya 0n 04/01/2018 for Academic Year Setting
                            if (txt_roll.Text == "")
                            {
                                #region textbox empty

                                selqry = "select SUM(ISNULL(debit,'0')) as debit,ft.feecategory ,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.Reg_No,r.roll_admit,r.degree_code,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode  from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and r.Batch_Year in ('" + batch_year + "') and ft.FeeCategory in ('" + feeCategory + "') and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + " ";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                //if (batch1 != "")
                                //{
                                //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                //}
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                //if (sem != "")
                                //{
                                //    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                //}
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode,ft.feecategory,r.roll_admit order by TransCode";

                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                selqry = selqry + " SELECT  PayMode,A.App_No,SUM(ISNULL(debit,'0')) as total,A.FeeCategory,TransCode,A.Narration ,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No =p.app_no and A.App_No =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and A.Debit<>0 and r.college_code ='" + collegecode1 + "' and r.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "') and A.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and a.EntryUserCode in('" + usercode + "')";
                                //if (batch1 != "")
                                //{
                                //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                //}
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                //if (sem != "")
                                //{
                                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                                //}

                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "GROUP BY A.App_No,PayMode,A.FeeCategory,TransCode,A.Narration,DDNo,DDDate,DDBankBranch,DDBankCode ";

                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";

                                #endregion
                            }
                            else
                            {
                                #region not empty
                                selqry = "select SUM(ISNULL(debit,'0')) as debit,ft.feecategory ,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.roll_admit,r.Reg_No,r.degree_code,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode  from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FeeCategory in ('" + feeCategory + "') and ft.FinYearFK in ('" + Finyearvalue + "')  " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (appno != "")
                                {
                                    selqry = selqry + " and r.App_No ='" + appno + "'";
                                }
                                //if (sem != "")
                                //{
                                //    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                //}
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode,ft.feecategory,r.roll_admit order by TransCode";
                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                selqry = selqry + " SELECT  PayMode,a.feecategory,A.App_No,SUM(ISNULL(debit,'0')) as total,TransCode,A.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch ,DDBankCode  FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No =p.app_no and A.App_No =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and A.Debit<>0 and r.college_code ='" + collegecode1 + "' and A.FeeCategory in ('" + feeCategory + "') and A.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and a.EntryUserCode in('" + usercode + "')";
                                if (appno != "")
                                {
                                    selqry = selqry + " and r.App_No ='" + appno + "'";
                                }
                                //if (sem != "")
                                //{
                                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                                //}
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "GROUP BY A.App_No,PayMode,TransCode,A.Narration,DDNo,DDDate,DDBankBranch,DDBankCode,a.feecategory ";

                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";
                                #endregion
                            }
                            selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";
                            #endregion
                        }

                    }
                    else
                    {
                        if (!cbAcdYear.Checked)
                        {
                            if (txt_roll.Text.Trim() == "")
                            {
                                #region Memtype

                                //transcode
                                selqry = " select SUM(ISNULL(debit,'0')) as debit ,ft.App_No,ft.feecategory,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,memtype,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch ,DDBankCode from FT_FinDailyTransaction ft where  isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + " group by ft.App_No,TransDate,TransCode ,PayMode,memtype,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode,ft.feecategory  order by TransCode";

                                //stud
                                selqry = selqry + " select SUM(ISNULL(debit,'0')) as debit ,ft.feecategory,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.roll_admit,r.Reg_No,r.degree_code,MemType,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (batch1 != "")
                                {
                                    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                }
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                if (sem != "")
                                {
                                    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                }
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and ft.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and ft.Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,MemType,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode,ft.feecategory,r.roll_admit order by TransCode";

                                //staff
                                selqry = selqry + " select  SUM(ISNULL(debit,'0')) as debit ,f.App_no,TransCode,sa.appl_id,s.staff_code,s.staff_name,sa.Dept_Code,h.dept_name,D.desig_name,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate,d.desig_code,f.Narration,MemType,case when f.PayMode=1 then 'Cash' when f.PayMode=2 then 'Cheque' when f.PayMode=3 then 'DD' when f.PayMode=4 then 'Challan' when f.PayMode=5 then 'Online' when f.paymode='6' then 'Card' end paymode,f.paymode as paymodeval,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode from FT_FinDailyTransaction f,staff_appl_master sa,staffmaster s,hrdept_master h,desig_master d,stafftrans T where sa.appl_no =s.appl_no and f.App_No =sa.appl_id and t.dept_code =h.dept_code and t.desig_code =d.desig_code and T.staff_code =s.staff_code and T.latestrec ='1' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and f.Debit<>0 and d.collegeCode='" + collegecode1 + "' " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and f.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + "  and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and f.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and f.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by f.App_no,TransCode,sa.appl_id,s.staff_code,s.staff_name,sa.Dept_Code,h.dept_name,D.desig_name,TransCode, TransDate,d.desig_code,f.Narration,MemType,f.paymode,DDNo,DDDate,DDBankBranch,DDBankCode";
                                //vendor
                                selqry = selqry + "  SELECT SUM(ISNULL(debit,'0')) as debit,p.VendorCode,f.App_no,p.VendorCompName,vc.VendorContactPK,vc.VenContactName,TransCode,CONVERT(varchar(20),TransDate,103) as  TransDate ,f.Narration,MemType,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,DDNo,DDDate,DDBankBranch,DDBankCode  FROM FT_FinDailyTransaction f,CO_VendorMaster P,IM_VendorContactMaster VC WHERE p.VendorPK =VC.VendorFK and VC.VendorContactPK =F.App_No and P.VendorType ='1' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and f.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and f.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and f.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and f.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by p.VendorCode,f.App_no,p.VendorCompName,vc.VendorContactPK,vc.VenContactName,TransCode,TransDate ,f.Narration,MemType,paymode,DDNo,DDDate,DDBankBranch,DDBankCode";
                                //others
                                selqry = selqry + "  SELECT SUM(ISNULL(debit,'0')) as debit,p.VendorPK,p.VendorCode,f.App_no,p.VendorCompName,p.vendorName,TransCode,CONVERT(varchar(20),TransDate,103) as  TransDate,f.Narration,MemType,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode FROM FT_FinDailyTransaction f,CO_VendorMaster P WHERE p.VendorPK=F.App_No and P.VendorType ='-5' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and f.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and f.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and f.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and f.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by p.VendorPK,p.VendorCode,f.App_no,p.VendorCompName,p.vendorName,TransCode,TransDate,f.Narration,MemType,paymode,DDNo,DDDate,DDBankBranch,DDBankCode";
                                //paymode
                                selqry = selqry + " SELECT  PayMode,A.App_No,SUM(ISNULL(debit,'0')) as total,A.FeeCategory,TransCode,MemType FROM FT_FinDailyTransaction A WHERE ";
                                //if (sem != "")
                                //{
                                //    selqry = selqry + "  A.FeeCategory in ('" + sem + "')";
                                //}

                                if (headervalue != "")
                                {
                                    selqry = selqry + "  HeaderFK in ('" + headervalue + "')";
                                }

                                if (usBasedRights == true)
                                    selqry += " and a.EntryUserCode in('" + usercode + "')";

                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and memtype in('" + memvalue + "')";
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + " GROUP BY A.App_No,PayMode,A.FeeCategory, TransCode,MemType";
                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                //excess amount
                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";
                                selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";

                                #endregion
                            }
                        }
                        else
                        {
                            #region Added by saranya 0n 04/01/2018 for Academic Year Setting
                            if (txt_roll.Text.Trim() == "")
                            {
                                #region Memtype

                                //transcode
                                selqry = " select SUM(ISNULL(debit,'0')) as debit ,ft.App_No,ft.feecategory,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,memtype,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch ,DDBankCode from FT_FinDailyTransaction ft where  isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + " group by ft.App_No,TransDate,TransCode ,PayMode,memtype,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode,ft.feecategory  order by TransCode";

                                //stud
                                selqry = selqry + " select SUM(ISNULL(debit,'0')) as debit ,ft.feecategory,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.roll_admit,r.Reg_No,r.degree_code,MemType,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and r.Batch_Year in ('" + batch_year + "') and ft.FeeCategory in ('" + feeCategory + "') and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                //if (batch1 != "")
                                //{
                                //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                //}
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                //if (sem != "")
                                //{
                                //    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                //}
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and ft.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and ft.Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,MemType,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode,ft.feecategory,r.roll_admit order by TransCode";

                                //staff
                                selqry = selqry + " select  SUM(ISNULL(debit,'0')) as debit ,f.App_no,TransCode,sa.appl_id,s.staff_code,s.staff_name,sa.Dept_Code,h.dept_name,D.desig_name,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate,d.desig_code,f.Narration,MemType,case when f.PayMode=1 then 'Cash' when f.PayMode=2 then 'Cheque' when f.PayMode=3 then 'DD' when f.PayMode=4 then 'Challan' when f.PayMode=5 then 'Online' when f.paymode='6' then 'Card' end paymode,f.paymode as paymodeval,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode from FT_FinDailyTransaction f,staff_appl_master sa,staffmaster s,hrdept_master h,desig_master d,stafftrans T where sa.appl_no =s.appl_no and f.App_No =sa.appl_id and t.dept_code =h.dept_code and t.desig_code =d.desig_code and T.staff_code =s.staff_code and T.latestrec ='1' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and f.Debit<>0 and d.collegeCode='" + collegecode1 + "' " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and f.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + "  and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and f.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and f.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by f.App_no,TransCode,sa.appl_id,s.staff_code,s.staff_name,sa.Dept_Code,h.dept_name,D.desig_name,TransCode, TransDate,d.desig_code,f.Narration,MemType,f.paymode,DDNo,DDDate,DDBankBranch,DDBankCode";
                                //vendor
                                selqry = selqry + "  SELECT SUM(ISNULL(debit,'0')) as debit,p.VendorCode,f.App_no,p.VendorCompName,vc.VendorContactPK,vc.VenContactName,TransCode,CONVERT(varchar(20),TransDate,103) as  TransDate ,f.Narration,MemType,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,DDNo,DDDate,DDBankBranch,DDBankCode  FROM FT_FinDailyTransaction f,CO_VendorMaster P,IM_VendorContactMaster VC WHERE p.VendorPK =VC.VendorFK and VC.VendorContactPK =F.App_No and P.VendorType ='1' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and f.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and f.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and f.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and f.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by p.VendorCode,f.App_no,p.VendorCompName,vc.VendorContactPK,vc.VenContactName,TransCode,TransDate ,f.Narration,MemType,paymode,DDNo,DDDate,DDBankBranch,DDBankCode";
                                //others
                                selqry = selqry + "  SELECT SUM(ISNULL(debit,'0')) as debit,p.VendorPK,p.VendorCode,f.App_no,p.VendorCompName,p.vendorName,TransCode,CONVERT(varchar(20),TransDate,103) as  TransDate,f.Narration,MemType,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode FROM FT_FinDailyTransaction f,CO_VendorMaster P WHERE p.VendorPK=F.App_No and P.VendorType ='-5' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and f.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and f.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and f.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and f.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by p.VendorPK,p.VendorCode,f.App_no,p.VendorCompName,p.vendorName,TransCode,TransDate,f.Narration,MemType,paymode,DDNo,DDDate,DDBankBranch,DDBankCode";
                                //paymode
                                selqry = selqry + " SELECT  PayMode,A.App_No,SUM(ISNULL(debit,'0')) as total,A.FeeCategory,TransCode,MemType FROM FT_FinDailyTransaction A WHERE ";
                                //if (sem != "")
                                //{
                                //    selqry = selqry + "  A.FeeCategory in ('" + sem + "')";
                                //}

                                if (headervalue != "")
                                {
                                    selqry = selqry + "  HeaderFK in ('" + headervalue + "')";
                                }

                                if (usBasedRights == true)
                                    selqry += " and a.EntryUserCode in('" + usercode + "')";

                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and memtype in('" + memvalue + "')";
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + " GROUP BY A.App_No,PayMode,A.FeeCategory, TransCode,MemType";
                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                //excess amount
                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";
                                selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";

                                #endregion
                            }
                            #endregion
                        }
                    }

                    #endregion
                }
                else
                {
                    #region Detailwise
                    string headerandledger = "";
                    string exheaderorledger = "";
                    if (rbacrhed.Checked == true)
                    {
                        //headval = true;
                        headerandledger = " ,ft.HeaderFK";
                        // exheaderorledger = ",ex.HeaderFK";
                    }
                    else
                    {
                        // headval = false;
                        headerandledger = " ,ft.LedgerFK";
                        // exheaderorledger = ",ex.LedgerFK";
                    }

                    if (chkcomflt.Checked == true)
                    {
                        if (!cbAcdYear.Checked)
                        {
                            if (txt_roll.Text == "")
                            {
                                #region textbox empty

                                selqry = "select SUM(ISNULL(debit,'0')) as debit,ft.feecategory ,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.roll_admit,r.Reg_No,r.degree_code,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + "  from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (batch1 != "")
                                {
                                    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                }
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                if (sem != "")
                                {
                                    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                }
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + ",ft.feecategory,r.roll_admit order by TransCode";

                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                selqry = selqry + "  SELECT  PayMode,ft.App_No,SUM(ISNULL(Debit,'0')) as total,ft.FeeCategory,TransCode,ft.Narration ,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode" + headerandledger + " FROM FT_FinDailyTransaction ft,Applyn P,Registration r WHERE ft.App_No = P.app_no and r.App_No =p.app_no and ft.App_No =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (batch1 != "")
                                {
                                    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                }
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                if (sem != "")
                                {
                                    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                }

                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "GROUP BY ft.App_No,PayMode,ft.FeeCategory,TransCode,ft.Narration,DDNo,DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + " ";

                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";
                                selqry += "   select headername,ledgername,headerfk,ledgerpk from fm_headermaster h,fm_ledgermaster l where h.headerpk=l.headerfk and h.collegecode='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
                                #endregion
                            }
                            else
                            {
                                #region not empty
                                selqry = "select SUM(ISNULL(debit,'0')) as debit,ft.feecategory ,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.roll_admit,r.Reg_No,r.degree_code,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + "  from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FinYearFK in ('" + Finyearvalue + "')  " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (appno != "")
                                {
                                    selqry = selqry + " and r.App_No ='" + appno + "'";
                                }
                                if (sem != "")
                                {
                                    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                }
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,ft.Narration,DDNo,DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + ",ft.feecategory,r.roll_admit order by TransCode";
                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                selqry = selqry + " SELECT  PayMode,ft.feecategory,ft.App_No,SUM(ISNULL(Debit,'0')) as total,TransCode,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch ,DDBankCode" + headerandledger + "  FROM FT_FinDailyTransaction ft,Applyn P,Registration r WHERE ft.App_No = P.app_no and r.App_No =p.app_no and ft.App_No =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (appno != "")
                                {
                                    selqry = selqry + " and r.App_No ='" + appno + "'";
                                }
                                if (sem != "")
                                {
                                    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                }
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "GROUP BY ft.App_No,PayMode,TransCode,ft.Narration,DDNo,DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + " ";

                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";
                                selqry += "   select headername,ledgername,headerfk,ledgerpk from fm_headermaster h,fm_ledgermaster l where h.headerpk=l.headerfk and h.collegecode='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
                                #endregion
                            }
                            selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";
                        }
                        else
                        {
                            #region Added by saranya 0n 04/01/2018 for Academic Year Setting
                            if (txt_roll.Text == "")
                            {
                                #region textbox empty

                                selqry = "select SUM(ISNULL(debit,'0')) as debit,ft.feecategory ,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.roll_admit,r.Reg_No,r.degree_code,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + "  from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and r.Batch_Year in ('" + batch_year + "') and ft.FeeCategory in ('" + feeCategory + "') and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                //if (batch1 != "")
                                //{
                                //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                //}
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                //if (sem != "")
                                //{
                                //    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                //}
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + ",ft.feecategory,r.roll_admit order by TransCode";

                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                selqry = selqry + "  SELECT  PayMode,ft.App_No,SUM(ISNULL(Debit,'0')) as total,ft.FeeCategory,TransCode,ft.Narration ,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode" + headerandledger + " FROM FT_FinDailyTransaction ft,Applyn P,Registration r WHERE ft.App_No = P.app_no and r.App_No =p.app_no and ft.App_No =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and r.Batch_Year in ('" + batch_year + "') and ft.FeeCategory in ('" + feeCategory + "') and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                //if (batch1 != "")
                                //{
                                //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                //}
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                //if (sem != "")
                                //{
                                //    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                //}

                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "GROUP BY ft.App_No,PayMode,ft.FeeCategory,TransCode,ft.Narration,DDNo,DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + " ";

                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";
                                selqry += "   select headername,ledgername,headerfk,ledgerpk from fm_headermaster h,fm_ledgermaster l where h.headerpk=l.headerfk and h.collegecode='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
                                #endregion
                            }
                            else
                            {
                                #region not empty
                                selqry = "select SUM(ISNULL(debit,'0')) as debit,ft.feecategory ,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.roll_admit,r.Reg_No,r.degree_code,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + "  from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FeeCategory in ('" + feeCategory + "') and ft.FinYearFK in ('" + Finyearvalue + "')  " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (appno != "")
                                {
                                    selqry = selqry + " and r.App_No ='" + appno + "'";
                                }
                                //if (sem != "")
                                //{
                                //    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                //}
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,ft.Narration,DDNo,DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + ",ft.feecategory,r.roll_admit order by TransCode";
                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                selqry = selqry + " SELECT  PayMode,ft.feecategory,ft.App_No,SUM(ISNULL(Debit,'0')) as total,TransCode,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch ,DDBankCode" + headerandledger + "  FROM FT_FinDailyTransaction ft,Applyn P,Registration r WHERE ft.App_No = P.app_no and r.App_No =p.app_no and ft.App_No =r.App_No  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FeeCategory in ('" + feeCategory + "') and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (appno != "")
                                {
                                    selqry = selqry + " and r.App_No ='" + appno + "'";
                                }
                                //if (sem != "")
                                //{
                                //    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                //}
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "GROUP BY ft.App_No,PayMode,TransCode,ft.Narration,DDNo,DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + " ";

                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";
                                selqry += "   select headername,ledgername,headerfk,ledgerpk from fm_headermaster h,fm_ledgermaster l where h.headerpk=l.headerfk and h.collegecode='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
                                #endregion
                            }
                            selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";

                            #endregion
                        }
                    }
                    else
                    {
                        if (!cbAcdYear.Checked)
                        {
                            if (txt_roll.Text.Trim() == "")
                            {
                                #region Memtype

                                //transcode
                                selqry = " select SUM(ISNULL(debit,'0')) as debit,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,memtype,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,ft.feecategory,DDBankBranch ,DDBankCode" + headerandledger + " from FT_FinDailyTransaction ft where  isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + " group by ft.App_No,TransDate,TransCode ,PayMode,memtype,ft.Narration,DDNo,DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + "  order by TransCode";

                                //stud
                                selqry = selqry + " select SUM(ISNULL(debit,'0')) as debit,ft.feecategory ,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.roll_admit,r.Reg_No,r.degree_code,MemType,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode" + headerandledger + " from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1  and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";//AND Admission_Status = 1
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (batch1 != "")
                                {
                                    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                }
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                if (sem != "")
                                {
                                    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                }
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and ft.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and ft.Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,MemType,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + ",ft.feecategory,r.roll_admit order by TransCode";

                                //staff
                                selqry = selqry + " select  SUM(ISNULL(debit,'0')) as debit ,ft.App_no,TransCode,sa.appl_id,s.staff_code,s.staff_name,sa.Dept_Code,h.dept_name,D.desig_name,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate,d.desig_code,ft.Narration,MemType,case when ft.PayMode=1 then 'Cash' when ft.PayMode=2 then 'Cheque' when ft.PayMode=3 then 'DD' when ft.PayMode=4 then 'Challan' when ft.PayMode=5 then 'Online' end paymode,ft.paymode as paymodeval,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode" + headerandledger + " from FT_FinDailyTransaction ft,staff_appl_master sa,staffmaster s,hrdept_master h,desig_master d,stafftrans T where sa.appl_no =s.appl_no and ft.App_No =sa.appl_id and t.dept_code =h.dept_code and t.desig_code =d.desig_code and T.staff_code =s.staff_code and T.latestrec ='1' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and d.collegeCode='" + collegecode1 + "' " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";

                                if (headervalue != "")
                                {
                                    selqry = selqry + "  and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and ft.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and ft.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by ft.App_no,TransCode,sa.appl_id,s.staff_code,s.staff_name,sa.Dept_Code,h.dept_name,D.desig_name,TransCode, TransDate,d.desig_code,ft.Narration,MemType,ft.paymode,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + "";
                                //vendor
                                selqry = selqry + "  SELECT SUM(ISNULL(debit,'0')) as debit,p.VendorCode,ft.App_no,p.VendorCompName,vc.VendorContactPK,vc.VenContactName,TransCode,CONVERT(varchar(20),TransDate,103) as  TransDate ,ft.Narration,MemType,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + "  FROM FT_FinDailyTransaction ft,CO_VendorMaster P,IM_VendorContactMaster VC WHERE p.VendorPK =VC.VendorFK and VC.VendorContactPK =ft.App_No and P.VendorType ='1' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and ft.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and ft.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by p.VendorCode,ft.App_no,p.VendorCompName,vc.VendorContactPK,vc.VenContactName,TransCode,TransDate ,ft.Narration,MemType,paymode,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + "";
                                //others
                                selqry = selqry + "  SELECT SUM(ISNULL(debit,'0')) as debit,p.VendorPK,p.VendorCode,ft.App_no,p.VendorCompName,p.vendorName,TransCode,CONVERT(varchar(20),TransDate,103) as  TransDate,ft.Narration,MemType,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode" + headerandledger + " FROM FT_FinDailyTransaction ft,CO_VendorMaster P WHERE p.VendorPK=ft.App_No and P.VendorType ='-5' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and ft.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and ft.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by p.VendorPK,p.VendorCode,ft.App_no,p.VendorCompName,p.vendorName,TransCode,TransDate,ft.Narration,MemType,paymode,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + "";
                                //paymode
                                selqry = selqry + " SELECT  PayMode,ft.App_No,SUM(ISNULL(Debit,'0')) as total,ft.FeeCategory,TransCode,MemType " + headerandledger + " FROM FT_FinDailyTransaction ft WHERE ";
                                //if (sem != "")
                                //{
                                //    selqry = selqry + "  A.FeeCategory in ('" + sem + "')";
                                //}

                                if (headervalue != "")
                                {
                                    selqry = selqry + "  HeaderFK in ('" + headervalue + "')";
                                }

                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";

                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and memtype in('" + memvalue + "')";
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + " GROUP BY ft.App_No,PayMode,ft.FeeCategory, TransCode,MemType" + headerandledger + "";
                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                //excess amount
                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";
                                selqry += "   select headername,ledgername,headerfk,ledgerpk from fm_headermaster h,fm_ledgermaster l where h.headerpk=l.headerfk and h.collegecode='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
                                selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";

                                #endregion
                            }
                        }
                        else
                        {
                            #region Added by saranya on 04/01/2018 for academic year settings

                            if (txt_roll.Text.Trim() == "")
                            {
                                #region Memtype

                                //transcode
                                selqry = " select SUM(ISNULL(debit,'0')) as debit,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,memtype,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,ft.feecategory,DDBankBranch ,DDBankCode" + headerandledger + " from FT_FinDailyTransaction ft where  isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and Paymode in ('" + paid + "')";
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + " group by ft.App_No,TransDate,TransCode ,PayMode,memtype,ft.Narration,DDNo,DDDate,DDBankBranch,ft.feecategory,DDBankCode" + headerandledger + "  order by TransCode";

                                //stud
                                selqry = selqry + " select SUM(ISNULL(debit,'0')) as debit,ft.feecategory ,ft.App_No,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate ,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,r.Stud_Name,r.Roll_No,r.roll_admit,r.Reg_No,r.degree_code,MemType,ft.Narration,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode" + headerandledger + " from FT_FinDailyTransaction ft,Registration r,applyn p where ft.App_No=p.app_no and r.App_No=ft.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and r.college_code ='" + collegecode1 + "' and r.Batch_Year in ('" + batch_year + "') and ft.FeeCategory in ('" + feeCategory + "') and ft.FinYearFK in ('" + Finyearvalue + "') " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                //if (batch1 != "")
                                //{
                                //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                                //}
                                if (deptdegcode != "")
                                {
                                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                                }
                                //if (sem != "")
                                //{
                                //    selqry = selqry + " and ft.FeeCategory in ('" + sem + "')";
                                //}
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and ft.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and ft.Paymode in ('" + paid + "')";
                                }
                                //if (chkinclude.Checked == true)
                                //{
                                //    selqry = selqry + " and r.DelFlag=0 ";
                                //}
                                //if (cc != "")
                                //{
                                //    selqry = selqry + cc;
                                //}
                                //if (debar != "")
                                //{
                                //    selqry = selqry + debar;
                                //}
                                //if (disc != "")
                                //{
                                //    selqry = selqry + disc;
                                //}
                                if (commondist.Trim() != "")
                                {
                                    selqry = selqry + commondist;
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + "group by ft.App_No,TransDate,TransCode ,PayMode,r.Stud_Name,r.Roll_No,r.Reg_No,r.degree_code,MemType,ft.Narration,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + ",ft.feecategory,r.roll_admit order by TransCode";

                                //staff
                                selqry = selqry + " select  SUM(ISNULL(debit,'0')) as debit ,ft.App_no,TransCode,sa.appl_id,s.staff_code,s.staff_name,sa.Dept_Code,h.dept_name,D.desig_name,TransCode,CONVERT(varchar(20),TransDate,103) as TransDate,d.desig_code,ft.Narration,MemType,case when ft.PayMode=1 then 'Cash' when ft.PayMode=2 then 'Cheque' when ft.PayMode=3 then 'DD' when ft.PayMode=4 then 'Challan' when ft.PayMode=5 then 'Online' end paymode,ft.paymode as paymodeval,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode" + headerandledger + " from FT_FinDailyTransaction ft,staff_appl_master sa,staffmaster s,hrdept_master h,desig_master d,stafftrans T where sa.appl_no =s.appl_no and ft.App_No =sa.appl_id and t.dept_code =h.dept_code and t.desig_code =d.desig_code and T.staff_code =s.staff_code and T.latestrec ='1' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 and d.collegeCode='" + collegecode1 + "' " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";

                                if (headervalue != "")
                                {
                                    selqry = selqry + "  and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and ft.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and ft.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by ft.App_no,TransCode,sa.appl_id,s.staff_code,s.staff_name,sa.Dept_Code,h.dept_name,D.desig_name,TransCode, TransDate,d.desig_code,ft.Narration,MemType,ft.paymode,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + "";
                                //vendor
                                selqry = selqry + "  SELECT SUM(ISNULL(debit,'0')) as debit,p.VendorCode,ft.App_no,p.VendorCompName,vc.VendorContactPK,vc.VenContactName,TransCode,CONVERT(varchar(20),TransDate,103) as  TransDate ,ft.Narration,MemType,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + "  FROM FT_FinDailyTransaction ft,CO_VendorMaster P,IM_VendorContactMaster VC WHERE p.VendorPK =VC.VendorFK and VC.VendorContactPK =ft.App_No and P.VendorType ='1' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and ft.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and ft.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by p.VendorCode,ft.App_no,p.VendorCompName,vc.VendorContactPK,vc.VenContactName,TransCode,TransDate ,ft.Narration,MemType,paymode,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + "";
                                //others
                                selqry = selqry + "  SELECT SUM(ISNULL(debit,'0')) as debit,p.VendorPK,p.VendorCode,ft.App_no,p.VendorCompName,p.vendorName,TransCode,CONVERT(varchar(20),TransDate,103) as  TransDate,ft.Narration,MemType,case when PayMode=1 then 'Cash' when PayMode=2 then 'Cheque' when PayMode=3 then 'DD' when PayMode=4 then 'Challan' when PayMode=5 then 'Online' when paymode='6' then 'Card' end paymode,paymode as paymodeval,DDNo,CONVERT(varchar(10),DDDate,103) as DDDate,DDBankBranch,DDBankCode" + headerandledger + " FROM FT_FinDailyTransaction ft,CO_VendorMaster P WHERE p.VendorPK=ft.App_No and P.VendorType ='-5' and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and ft.Debit<>0 " + incScholarShip + "";
                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";
                                if (headervalue != "")
                                {
                                    selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                                }
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and ft.memtype in('" + memvalue + "')";
                                }
                                if (paid != "")
                                {
                                    selqry = selqry + " and ft.Paymode in ('" + paid + "')";
                                }
                                if (fromdate != "" && todate != "")
                                {
                                    selqry = selqry + "  AND TransDate between '" + fromdate + "' and '" + todate + "'";
                                }
                                selqry = selqry + " group by p.VendorPK,p.VendorCode,ft.App_no,p.VendorCompName,p.vendorName,TransCode,TransDate,ft.Narration,MemType,paymode,DDNo,DDDate,DDBankBranch,DDBankCode" + headerandledger + "";
                                //paymode
                                selqry = selqry + " SELECT  PayMode,ft.App_No,SUM(ISNULL(Debit,'0')) as total,ft.FeeCategory,TransCode,MemType " + headerandledger + " FROM FT_FinDailyTransaction ft WHERE ";
                                //if (sem != "")
                                //{
                                //    selqry = selqry + "  A.FeeCategory in ('" + sem + "')";
                                //}

                                if (headervalue != "")
                                {
                                    selqry = selqry + "  HeaderFK in ('" + headervalue + "')";
                                }

                                if (usBasedRights == true)
                                    selqry += " and ft.EntryUserCode in('" + usercode + "')";

                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                if (memvalue != "")
                                {
                                    selqry = selqry + " and memtype in('" + memvalue + "')";
                                }
                                if (datewise == 1)
                                {
                                    if (fromdate != "" && todate != "")
                                    {
                                        selqry = selqry + "  AND  ft.TransDate between '" + fromdate + "' and '" + todate + "'";
                                    }
                                }
                                selqry = selqry + " GROUP BY ft.App_No,PayMode,ft.FeeCategory, TransCode,MemType" + headerandledger + "";
                                selqry = selqry + " select d.Degree_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename,(c.Course_Name +'-'+dt.dept_acronym)as dept_acronym from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode1 + "'";
                                //excess amount
                                selqry += " select SUM(amount) as examt,app_no,receiptno,convert(varchar(10),rcptdate,103) as rcptdate from ft_excessReceiptdet where excesstype='1'";
                                if (ledgervalue != "")
                                {
                                    selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                                }
                                selqry += " group by app_no,receiptno,rcptdate";
                                selqry += "   select headername,ledgername,headerfk,ledgerpk from fm_headermaster h,fm_ledgermaster l where h.headerpk=l.headerfk and h.collegecode='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
                                selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='" + collegecode1 + "'";

                                #endregion
                            }
                            #endregion
                        }
                    }
                    #endregion
                }
            }

            #endregion

            #region others
            if (rb_others.Checked == true)
            {
                if (rbstaff.Checked == true)
                {
                    #region staff qry
                    selqry = " SELECT p.appl_id,r.staff_code,r.staff_name,p.Dept_Code, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,staff_appl_master P,staffmaster R WHERE p.appl_no =r.appl_no and a.App_No =p.appl_id and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
                    if (deptdegcode != "")
                    {
                        selqry = selqry + "  and  p.dept_code in ('" + deptdegcode + "')";
                    }
                    if (sem != "")
                    {
                        // selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        }
                    }
                    selqry = selqry + "  and MemType=2 GROUP BY p.appl_id,r.staff_code,r.staff_name,p.Dept_Code  order by p.appl_id";

                    //paymode
                    selqry = selqry + "  SELECT  PayMode,p.appl_id,SUM(Debit) as total  FROM FT_FinDailyTransaction A,staff_appl_master P,staffmaster R  WHERE p.appl_no=r.appl_no and a.App_No=p.appl_id  and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                    if (usBasedRights == true)
                        selqry += " and a.EntryUserCode in('" + usercode + "')";
                    if (deptdegcode != "")
                    {
                        selqry = selqry + "  and  p.dept_code in ('" + deptdegcode + "')";
                    }
                    if (sem != "")
                    {
                        //selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND a.TransDate between '" + fromdate + "' and '" + todate + "'";
                        }
                    }
                    selqry = selqry + "  and MemType=2 GROUP BY PayMode ,p.appl_id";

                    //excess
                    selqry = selqry + "  select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerFK,p.appl_id from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,staff_appl_master P,staffmaster r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.appl_id and em.App_No = a.App_No and p.appl_no=r.appl_no and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                    if (deptdegcode != "")
                    {
                        selqry = selqry + "  and  p.dept_code in ('" + deptdegcode + "')";
                    }
                    if (sem != "")
                    {
                        //selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and Ex.HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and Ex.LedgerFK in('" + ledgervalue + "')";
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        }
                    }
                    selqry = selqry + "  and a.MemType=2 GROUP BY A.HeaderFK ,A.LedgerFK,p.appl_id";
                    //dept
                    selqry = selqry + " select d.Dept_Code,(c.Course_Name +'-'+ dt.Dept_Name) as degreename from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='13'";
                    // selqry = selqry + "select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='13'";
                    #endregion
                }
                else if (rbvendor.Checked == true)
                {
                    #region vendor
                    selqry = " SELECT p.VendorCode,p.VendorName, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,CO_VendorMaster P WHERE  a.App_No =p.VendorPK and A.FinYearFK in ('" + Finyearvalue + "')";
                    if (sem != "")
                    {
                        //selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        }
                    }
                    selqry = selqry + " and p.VendorType='1' and MemType=3 GROUP BY p.VendorCode,p.VendorName,A.FeeCategory  order by p.VendorCode";
                    //paymode
                    selqry = selqry + "  SELECT  PayMode,p.VendorCode,SUM(Debit) as total FROM FT_FinDailyTransaction A,CO_VendorMaster P WHERE  a.App_No=p.VendorPK  and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and A.FinYearFK in ('" + Finyearvalue + "')";
                    if (usBasedRights == true)
                        selqry += " and a.EntryUserCode in('" + usercode + "')";
                    if (sem != "")
                    {
                        //selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND A.TransDate between '" + fromdate + "' and '" + todate + "'";
                        }
                    }
                    selqry = selqry + " and p.VendorType='1' and MemType=3 GROUP BY PayMode  ,p.VendorCode";
                    //excess
                    selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,p.VendorCode from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,CO_VendorMaster P WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.VendorPK and em.App_No = a.App_No  and A.FinYearFK in ('" + Finyearvalue + "')";
                    if (sem != "")
                    {
                        // selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and Ex.HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and Ex.LedgerFK in('" + ledgervalue + "')";
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        }
                    }
                    selqry = selqry + " and p.VendorType='1' and a.MemType=3 GROUP BY p.VendorCode";
                    //sem
                    // selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='13'";
                    #endregion
                }
                else if (rbothers.Checked == true)
                {
                    #region others

                    selqry = " SELECT p.VendorCode,p.VendorName, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,CO_VendorMaster P WHERE  a.App_No =p.VendorPK and A.FinYearFK in ('" + Finyearvalue + "')";
                    if (sem != "")
                    {
                        // selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        }
                    }
                    selqry = selqry + " and p.VendorType='-5' and MemType=4 GROUP BY p.VendorCode,p.VendorName order by p.VendorCode";
                    //paymode
                    selqry = selqry + "  SELECT  PayMode,p.VendorCode,SUM(Debit) as total FROM FT_FinDailyTransaction A,CO_VendorMaster P WHERE  a.App_No=p.VendorPK  and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and A.FinYearFK in ('" + Finyearvalue + "')";
                    if (usBasedRights == true)
                        selqry += " and a.EntryUserCode in('" + usercode + "')";
                    if (sem != "")
                    {
                        // selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and LedgerFK in('" + ledgervalue + "')";
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND A.TransDate between '" + fromdate + "' and '" + todate + "'";
                        }
                    }
                    selqry = selqry + " and p.VendorType='-5' and memtype=4 GROUP BY PayMode ,p.VendorCode";
                    //excess
                    selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,p.VendorCode from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,CO_VendorMaster P WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.VendorPK and em.App_No = a.App_No  and A.FinYearFK in ('" + Finyearvalue + "')";
                    if (sem != "")
                    {
                        //selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                    }
                    if (headervalue != "")
                    {
                        selqry = selqry + " and Ex.HeaderFK in ('" + headervalue + "')";
                    }
                    if (ledgervalue != "")
                    {
                        selqry = selqry + " and Ex.LedgerFK in('" + ledgervalue + "')";
                    }
                    if (datewise == 1)
                    {
                        if (fromdate != "" && todate != "")
                        {
                            selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                        }
                    }
                    selqry = selqry + " and p.VendorType='-5' and a.MemType=3 GROUP BY p.VendorCode";
                    //sem
                    // selqry = selqry + " select TextCode,TextVal  from TextValTable where TextCriteria ='FEECA' and college_code ='13'";

                    #endregion
                }
            }
            #endregion

            allds.Clear();
            allds = d2.select_method_wo_parameter(selqry, "Text");
        }
        catch { }
        return allds;
    }

    #region headermethod

    public void headervalues()
    {
        try
        {
            #region without academicyear
            if (!cbAcdYear.Checked)
            {
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        #region design
                        loadcolumns();
                        DataView dv = new DataView();
                        int check = 0;

                        arrColHdrNames.Add("S.No");
                        arrColHdrNames2.Add("S.No");
                        dtReport.Columns.Add("S.No");
                        arrColHdrNames.Add("Header Name");
                        arrColHdrNames2.Add("Header Name");
                        dtReport.Columns.Add("Header Name");
                        arrColHdrNames.Add("Header pk");
                        arrColHdrNames2.Add("Header pk");
                        dtReport.Columns.Add("Header pk");
                        arrColHdrNames.Add("Allot");
                        arrColHdrNames2.Add("Allot");
                        dtReport.Columns.Add("Allot");
                        arrColHdrNames.Add("Concession");
                        arrColHdrNames2.Add("Concession");
                        dtReport.Columns.Add("Concession");
                        arrColHdrNames.Add("Scholarship");
                        arrColHdrNames2.Add("Scholarship");
                        dtReport.Columns.Add("Scholarship");
                        arrColHdrNames.Add("Total");
                        arrColHdrNames2.Add("Total");
                        dtReport.Columns.Add("Total");

                        Hashtable newhash = new Hashtable();

                        if (chkl_paid.Items.Count > 0)
                        {
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    arrColHdrNames.Add("Paid");
                                    arrColHdrNames2.Add(chkl_paid.Items[s].Text);
                                    dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                    newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                }
                            }
                            if (check != 0)
                            {
                                arrColHdrNames.Add("Paid");
                                arrColHdrNames2.Add("Total Paid");
                                dtReport.Columns.Add("Total Paid");
                            }
                        }
                        if (check == 0)
                        {
                            arrColHdrNames.Add("Paid");
                            arrColHdrNames2.Add("Paid");
                            dtReport.Columns.Add("Paid");
                        }
                        arrColHdrNames.Add("Balance");
                        arrColHdrNames2.Add("Balance");
                        dtReport.Columns.Add("Balance");
                        arrColHdrNames.Add("Refund Amount");
                        arrColHdrNames2.Add("Refund Amount");
                        dtReport.Columns.Add("Refund Amount");
                        arrColHdrNames.Add("Excess Amount");
                        arrColHdrNames2.Add("Excess Amount");
                        dtReport.Columns.Add("Excess Amount");
                        arrColHdrNames.Add("Fine Amount");
                        arrColHdrNames2.Add("Fine Amount");
                        dtReport.Columns.Add("Fine Amount");
                        DataRow drHdr1 = dtReport.NewRow();
                        DataRow drHdr2 = dtReport.NewRow();
                        for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                        {
                            drHdr1[grCol] = arrColHdrNames[grCol];
                            drHdr2[grCol] = arrColHdrNames2[grCol];
                        }
                        dtReport.Rows.Add(drHdr1);
                        dtReport.Rows.Add(drHdr2);

                        #endregion

                        #region value
                        double allotamt = 0;
                        double consamt = 0;
                        double govt = 0;
                        double tot_amount = 0;
                        double totalvalue = 0;
                        double bal = 0;
                        double totamount = 0;
                        double fnlamount = 0;
                        int ColCntGrd = 0;

                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = Convert.ToString(i + 1);
                            ds.Tables[4].DefaultView.RowFilter = "headerpk='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "'";
                            dvhead = ds.Tables[4].DefaultView;
                            if (dvhead.Count > 0)
                            {
                                drowGrd[1] = Convert.ToString(dvhead[0]["HeaderName"]);
                            }
                            drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"].ToString());
                            //allot
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                            drowGrd[3] = Convert.ToString(allotamt);
                            if (!grandtotal.ContainsKey(2))
                                grandtotal.Add(2, Convert.ToString(allotamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[2]), out amount);
                                amount += allotamt;
                                grandtotal.Remove(2);
                                grandtotal.Add(2, Convert.ToString(amount));
                            }
                            //consession
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                            drowGrd[4] = Convert.ToString(consamt);
                            if (!grandtotal.ContainsKey(3))
                                grandtotal.Add(3, Convert.ToString(consamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[3]), out amount);
                                amount += consamt;
                                grandtotal.Remove(3);
                                grandtotal.Add(3, Convert.ToString(amount));
                            }
                            //government
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                            drowGrd[5] = Convert.ToString(govt);
                            if (!grandtotal.ContainsKey(4))
                                grandtotal.Add(4, Convert.ToString(govt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                amount += govt;
                                grandtotal.Remove(4);
                                grandtotal.Add(4, Convert.ToString(amount));
                            }
                            //total
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                            drowGrd[6] = Convert.ToString(totalvalue);
                            if (!grandtotal.ContainsKey(5))
                                grandtotal.Add(5, Convert.ToString(totalvalue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                amount += totalvalue;
                                grandtotal.Remove(5);
                                grandtotal.Add(5, Convert.ToString(amount));
                            }
                            //paid value paymode count=0
                            double paidvalue = 0;
                            if (check == 0)
                            {
                                DataView dsnew = new DataView();
                                if (ds.Tables[3].Rows.Count > 0)
                                {
                                    ds.Tables[3].DefaultView.RowFilter = " HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "'";
                                    dsnew = ds.Tables[3].DefaultView;
                                    if (dsnew.Count > 0)
                                    {
                                        double.TryParse(Convert.ToString(dsnew[0]["Paid"]), out paidvalue);
                                        fnlamount = paidvalue;
                                    }
                                }
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                    amount += paidvalue;
                                    grandtotal.Remove(ColCntGrd - 5);
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                }
                            }
                            //refund
                            double refund = 0;
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                            if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                amount += refund;
                                grandtotal.Remove(ColCntGrd - 3);
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                            }
                            //excess
                            DataView dvex = new DataView();
                            if (ds.Tables[2].Rows.Count > 0)
                            {
                                ds.Tables[2].DefaultView.RowFilter = "HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "'";
                                dvex = ds.Tables[2].DefaultView;
                                if (dvex.Count > 0 && dvex != null)
                                {
                                    for (int k = 0; k < dvex.Count; k++)
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                        tot_amount += amount;
                                    }
                                }
                            }
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                amount += tot_amount;
                                grandtotal.Remove(ColCntGrd - 2);
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                            }
                            tot_amount = 0;
                            //paymode value
                            if (ds.Tables[1].Rows.Count > 0)
                            {
                                for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                {
                                    if (chkl_paid.Items[pay].Selected == true)
                                    {
                                        double paidamt = 0;
                                        ds.Tables[1].DefaultView.RowFilter = "HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                        dv = ds.Tables[1].DefaultView;
                                        int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                        for (int k = 0; k < dv.Count; k++)
                                        {
                                            double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                            fnlamount = fnlamount + totamount;
                                            paidamt = paidamt + totamount;
                                        }
                                        drowGrd[colnew] = Convert.ToString(paidamt);
                                        if (!grandtotal.ContainsKey(colnew))
                                            grandtotal.Add(colnew, Convert.ToString(paidamt));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                            amount += paidamt;
                                            grandtotal.Remove(colnew);
                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                        }
                                        paidamt = 0;
                                    }
                                }
                                if (check != 0)
                                {
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                        amount += fnlamount;
                                        grandtotal.Remove(ColCntGrd - 5);
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                    }
                                }
                                //balance
                                if (totalvalue != 0)
                                {
                                    bal = totalvalue - fnlamount;
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                        amount += bal;
                                        grandtotal.Remove(ColCntGrd - 4);
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                    }
                                    fnlamount = 0;
                                    if (bal == 0)
                                        dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                    else
                                        dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                }
                            }
                            else
                            {
                                bal = totalvalue;
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                    amount += bal;
                                    grandtotal.Remove(ColCntGrd - 4);
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                }
                            }
                            dtReport.Rows.Add(drowGrd);
                        }
                        #endregion

                        #region grandtotal
                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = "Grand Total";
                        double grandvalue = 0;
                        for (int j = 3; j < dtReport.Columns.Count; j++)
                        {
                            double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                            drowGrd[j] = Convert.ToString(grandvalue);
                        }
                        dtReport.Rows.Add(drowGrd);
                        #endregion

                        #region visible

                        grdStudentReport.DataSource = dtReport;
                        grdStudentReport.DataBind();
                        grdStudentReport.Visible = true;

                        GridViewRow row = grdStudentReport.Rows[0];
                        GridViewRow previousRow = grdStudentReport.Rows[1];

                        for (int i = 0; i < dtReport.Columns.Count; i++)
                        {
                            if (row.Cells[i].Text == previousRow.Cells[i].Text)
                            {
                                row.Cells[i].RowSpan = 2;
                                previousRow.Cells[i].Visible = false;
                                //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                                //                       previousRow.Cells[i].RowSpan + 1;
                                //previousRow.Cells[i].Visible = false;
                            }
                        }
                        //ColumnSpan

                        for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                        {
                            TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                            TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                            if (colum.Text == previouscol.Text)
                            {
                                if (previouscol.ColumnSpan == 0)
                                {
                                    if (colum.ColumnSpan == 0)
                                    {
                                        previouscol.ColumnSpan += 2;
                                    }
                                    else
                                    {
                                        previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                    }
                                    colum.Visible = false;
                                }
                            }
                        }

                        foreach (KeyValuePair<int, string> dr in dicRowColor)
                        {
                            int g = dr.Key;
                            string DicValue = dr.Value;
                            if (DicValue == "NoBalance")
                            {
                                grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                            }
                            if (DicValue == "Balance")
                            {
                                grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                            }
                        }
                        div1.Visible = true;
                        divledger.Visible = false;
                        lbl_ledg.Visible = false;
                        lbl_ledg.Text = "";
                        Grdledger.Visible = false;
                        lbl_bat.Visible = false;
                        lbl_bat.Text = "";
                        GrdBatch.Visible = false;
                        lbl_degr.Visible = false;
                        lbl_degr.Text = "";
                        GrdDegree.Visible = false;
                        lbl_dep.Visible = false;
                        lbl_dep.Text = "";
                        GrdDept.Visible = false;
                        lbl_sem.Visible = false; ;
                        lbl_sem.Text = "";
                        GrdSem.Visible = false;
                        //  panelcollaps.Visible = true;
                        // pnlheader.Visible = true;                  
                        header.Visible = true;
                        lblhed.Visible = true;
                        divcommon.Visible = true;
                        //   rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                        header.Attributes.Add("Style", "height:320px; width:950px; overflow:auto");
                        div1.Attributes.Add("Style", "height:320px; width:950px; overflow:auto");
                        rptprint.Visible = true;
                        pheaderfilter.Visible = true;
                        pcolumnorder.Visible = true;
                        lblhed.Text = "Header";
                        //pnlledgercolorder.Visible = false;
                        //Pnlledcolorder.Visible = false;
                        //pnl_batchcolorder.Visible = false;
                        //pnl_batcolorder.Visible = false;
                        //pnl_degcolorder.Visible = false;
                        //pnl_degreecolorder.Visible = false;
                        //pnl_deptcolord.Visible = false;
                        //pnl_deptcolorder.Visible = false;
                        //pnl_semcolord.Visible = false;
                        //pnl_semcolorder.Visible = false;                    
                        //btn_fpled.Visible = false;
                        //btn_fpbat.Visible = false;
                        //btn_fpdeg.Visible = false;
                        //btn_fpdep.Visible = false;
                        //// rptprint.Visible = false;
                        //pnl_studcolord.Visible = false;
                        //pnl_studcolorder.Visible = false;
                        divstudcell.Visible = false;
                        lbl_semcell.Text = "";
                        divdept.Visible = false;
                        divdegree.Visible = false;
                        divbatch.Visible = false;
                        ledger.Visible = false;
                        batch.Visible = false;
                        divdegr.Visible = false;
                        divdep.Visible = false;
                        divsema.Visible = false;
                        div7.Visible = false;
                        ViewState["header"] = 0;
                        ViewState["ledger"] = null;
                        ViewState["batch"] = null;
                        ViewState["degree"] = null;
                        ViewState["dept"] = null;
                        ViewState["sem"] = null;
                        ViewState["stud"] = null;
                        txtexcelname.Text = "";
                        lblvalidation1.Text = "";
                        #endregion
                    }
                    else
                    {
                        grdStudentReport.Visible = false;
                        div1.Visible = false;
                        rptprint.Visible = false;
                        pheaderfilter.Visible = false;
                        pcolumnorder.Visible = false;
                        lblhed.Text = "";
                        imgdiv2.Visible = true;
                        lbl_alert.Visible = true;
                        lbl_alert.Text = "No Record Found";
                    }
                }
            }
            #endregion

            #region with academic year
            if (cbAcdYear.Checked == true)
            {

                if (ds.Tables[0].Rows.Count > 0)
                {
                    #region design
                    loadcolumns();
                    DataView dv = new DataView();
                    int check = 0;

                    arrColHdrNames.Add("S.No");
                    arrColHdrNames2.Add("S.No");
                    dtReport.Columns.Add("S.No");
                    arrColHdrNames.Add("Header Name");
                    arrColHdrNames2.Add("Header Name");
                    dtReport.Columns.Add("Header Name");
                    arrColHdrNames.Add("Header pk");
                    arrColHdrNames2.Add("Header pk");
                    dtReport.Columns.Add("Header pk");
                    arrColHdrNames.Add("Allot");
                    arrColHdrNames2.Add("Allot");
                    dtReport.Columns.Add("Allot");
                    arrColHdrNames.Add("Concession");
                    arrColHdrNames2.Add("Concession");
                    dtReport.Columns.Add("Concession");
                    arrColHdrNames.Add("Scholarship");
                    arrColHdrNames2.Add("Scholarship");
                    dtReport.Columns.Add("Scholarship");
                    arrColHdrNames.Add("Total");
                    arrColHdrNames2.Add("Total");
                    dtReport.Columns.Add("Total");

                    Hashtable newhash = new Hashtable();

                    if (chkl_paid.Items.Count > 0)
                    {
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                arrColHdrNames.Add("Paid");
                                arrColHdrNames2.Add(chkl_paid.Items[s].Text);
                                dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                            }
                        }
                        if (check != 0)
                        {
                            arrColHdrNames.Add("Paid");
                            arrColHdrNames2.Add("Total Paid");
                            dtReport.Columns.Add("Total Paid");
                        }
                    }
                    if (check == 0)
                    {
                        arrColHdrNames.Add("Paid");
                        arrColHdrNames2.Add("Paid");
                        dtReport.Columns.Add("Paid");
                    }
                    arrColHdrNames.Add("Balance");
                    arrColHdrNames2.Add("Balance");
                    dtReport.Columns.Add("Balance");
                    arrColHdrNames.Add("Refund Amount");
                    arrColHdrNames2.Add("Refund Amount");
                    dtReport.Columns.Add("Refund Amount");
                    arrColHdrNames.Add("Excess Amount");
                    arrColHdrNames2.Add("Excess Amount");
                    dtReport.Columns.Add("Excess Amount");
                    arrColHdrNames.Add("Fine Amount");
                    arrColHdrNames2.Add("Fine Amount");
                    dtReport.Columns.Add("Fine Amount");
                    DataRow drHdr1 = dtReport.NewRow();
                    DataRow drHdr2 = dtReport.NewRow();
                    for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                    {
                        drHdr1[grCol] = arrColHdrNames[grCol];
                        drHdr2[grCol] = arrColHdrNames2[grCol];
                    }
                    dtReport.Rows.Add(drHdr1);
                    dtReport.Rows.Add(drHdr2);

                    #endregion

                    #region value

                    int ColCntGrd = 0;
                    Dictionary<string, string> getAcdYear = new Dictionary<string, string>();
                    if (cbAcdYear.Checked)
                    {
                        #region Academic Year
                        DataSet dsNormal = ds.Copy();
                        try
                        {
                            string clgCode = Convert.ToString(ddl_collegename.SelectedItem.Value);
                            string acdYear = Convert.ToString(ddlAcademic.SelectedItem.Text);
                            getAcdYear = getOldSettings(acdYear);//(acdYear, clgCode);
                            DataSet dsFinal = new DataSet();
                            DataTable dtPaid = new DataTable();
                            DataTable ftexcess = new DataTable();
                            if (getAcdYear.Count > 0)
                            {
                                bool boolDs = false;
                                DataTable dtheader = ds.Tables[3].DefaultView.ToTable();
                                foreach (KeyValuePair<string, string> getVal in getAcdYear)
                                {
                                    string feeCate = getVal.Value.Replace(",", "','");
                                    string degcourseid = Convert.ToString(getCblSelectedValue(cbl_degree));

                                    ds.Tables[4].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "'";
                                    DataTable dtYear = ds.Tables[4].DefaultView.ToTable();

                                    ds.Tables[0].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";
                                    DataTable dtAllot = ds.Tables[0].DefaultView.ToTable();

                                    ds.Tables[1].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";

                                    dtPaid = ds.Tables[1].DefaultView.ToTable();

                                    ds.Tables[2].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";// and feecategory in('" + feeCate + "')";
                                    ftexcess = ds.Tables[0].DefaultView.ToTable();



                                    if (!boolDs)
                                    {
                                        dsFinal.Reset();
                                        dsFinal.Tables.Add(dtAllot);
                                        dsFinal.Tables.Add(dtPaid);
                                        dsFinal.Tables.Add(ftexcess);
                                        dsFinal.Tables.Add(dtheader);

                                        dsFinal.Tables.Add(dtYear);
                                        boolDs = true;
                                    }
                                    else
                                    {
                                        dsFinal.Merge(dtAllot);
                                        dsFinal.Merge(dtPaid);
                                        dsFinal.Merge(dtYear);

                                    }
                                }
                            }
                            if (dsFinal.Tables.Count > 0 && dsFinal.Tables[0].Rows.Count > 0)
                            {
                                ds.Reset();
                                ds = dsFinal.Copy();
                            }
                        }
                        catch
                        {
                            ds.Reset();
                            ds = dsNormal.Copy();
                        }
                        #endregion
                    }
                    Hashtable httotal = new Hashtable();
                    Dictionary<string, string> currentSem = getCurSem();

                    for (int i = 0; i < ds.Tables[3].Rows.Count; i++)
                    {
                        bool boolClg = false;
                        double allotamt = 0;
                        double consamt = 0;
                        double govt = 0;
                        double tot_amount = 0;
                        double totalvalue = 0;
                        double bal = 0;
                        double totamount = 0;
                        double fnlamount = 0;
                        double demandAmt = 0;
                        double TotalAmount = 0;
                        double allotmentAmount = 0;
                        double ConcessionAmount = 0;
                        double Government = 0;
                        double paidvalue = 0;
                        double refund = 0;
                        double refundAmount = 0;
                        double paidamt = 0;
                        int colnew = 0;

                        string clgCode = Convert.ToString(ds.Tables[0].Rows[i]["college_code"]);
                        string headervalue = Convert.ToString(ds.Tables[3].Rows[i]["headerpk"]);
                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = Convert.ToString(i + 1);
                        ds.Tables[3].DefaultView.RowFilter = "headerpk='" + Convert.ToString(ds.Tables[3].Rows[i]["HeaderPK"]) + "'";
                        dvhead = ds.Tables[3].DefaultView;
                        if (dvhead.Count > 0)
                        {
                            drowGrd[1] = Convert.ToString(dvhead[0]["HeaderName"]);
                        }
                        drowGrd[2] = Convert.ToString(ds.Tables[3].Rows[i]["HeaderPK"].ToString());
                        //FpSpread1.Sheets[0].Cells[i, 1].Tag = Convert.ToString(ds.Tables[3].Rows[i]["HeaderPK"].ToString());
                        ds.Tables[4].DefaultView.RowFilter = "college_Code='" + clgCode + "'";
                        DataTable dtbatch = ds.Tables[4].DefaultView.ToTable();

                        //string batch = Convert.ToString(dtbatch.Rows[bat]["batch_year"]);
                        if (dtbatch.Rows.Count > 0)
                        {
                            for (int bat = 0; bat < dtbatch.Rows.Count; bat++)
                            {
                                string batch = Convert.ToString(dtbatch.Rows[bat]["batch_year"]);
                                string curSem = string.Empty;
                                string curSemCode = string.Empty;
                                if (!cbAcdYear.Checked)
                                {
                                    if (currentSem.ContainsKey(batch))
                                        curSem = Convert.ToString(batch);
                                    Dictionary<string, string> getFeeCode = getFeecode(clgCode);//get current sem code 
                                    curSem = getCurYear(curSem);
                                    if (getFeeCode.ContainsKey(curSem))
                                        curSemCode = Convert.ToString(getFeeCode[curSem.Trim()]);
                                }
                                else
                                {
                                    if (getAcdYear.ContainsKey(clgCode + "$" + batch))
                                    {
                                        curSemCode = Convert.ToString(getAcdYear[clgCode + "$" + batch]);
                                        curSemCode = curSemCode.Replace(",", "','");
                                    }
                                }
                                if (!string.IsNullOrEmpty(curSemCode))
                                {
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {

                                        if (checkSchoolSetting() != 0)
                                        {
                                            ds.Tables[0].DefaultView.RowFilter = "college_Code='" + clgCode + "' and headerfk='" + headervalue + "' and feecategory in('" + curSemCode + "') and batch_year in ('" + batch + "')";
                                        }
                                        else
                                        {
                                            ds.Tables[0].DefaultView.RowFilter = "college_Code='" + clgCode + "' and headerfk='" + headervalue + "' and feecategory in('" + curSemCode + "')";
                                        }
                                        DataTable dtpaid = ds.Tables[0].DefaultView.ToTable();
                                        if (dtpaid.Rows.Count > 0)
                                        {

                                            //allot (dvpaid.Compute("sum(Allot)", ""))
                                            double.TryParse(Convert.ToString(dtpaid.Compute("sum(Allot)", "")), out allotamt);
                                            allotmentAmount += allotamt;
                                            //consession
                                            double.TryParse(Convert.ToString(dtpaid.Compute("sum(consustion)", "")), out consamt);
                                            ConcessionAmount += consamt;
                                            //government
                                            double.TryParse(Convert.ToString(dtpaid.Compute("sum(Government)", "")), out govt);
                                            Government += govt;
                                            //total
                                            double.TryParse(Convert.ToString(dtpaid.Compute("sum(Total)", "")), out totalvalue);
                                            demandAmt += totalvalue;
                                            TotalAmount += totalvalue;
                                            double.TryParse(Convert.ToString(dtpaid.Compute("sum(RefundAmount)", "")), out refund);
                                            refundAmount += refund;
                                        }
                                    }

                                    //paid value paymode count=0

                                    if (check == 0)
                                    {
                                        DataView dsnew = new DataView();
                                        if (ds.Tables[1].Rows.Count > 0)
                                        {
                                            ds.Tables[1].DefaultView.RowFilter = " HeaderFK='" + headervalue + "'";
                                            dsnew = ds.Tables[3].DefaultView;
                                            if (dsnew.Count > 0)
                                            {
                                                double.TryParse(Convert.ToString(dsnew[0]["Debit"]), out paidvalue);
                                                fnlamount = paidvalue;
                                            }
                                        }
                                    }

                                    //excess
                                    DataView dvex = new DataView();
                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        ds.Tables[2].DefaultView.RowFilter = "HeaderFK='" + headervalue + "' and batch_year in('" + batch + "') and feecategory in('" + curSemCode + "')";
                                        dvex = ds.Tables[2].DefaultView;
                                        if (dvex.Count > 0 && dvex != null)
                                        {
                                            for (int k = 0; k < dvex.Count; k++)
                                            {
                                                double amount = 0;
                                                double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                                tot_amount += amount;
                                            }
                                        }
                                    }

                                    //paymode value
                                    if (ds.Tables[1].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                        {
                                            if (chkl_paid.Items[pay].Selected == true)
                                            {
                                                if (checkSchoolSetting() != 0)
                                                {
                                                    ds.Tables[1].DefaultView.RowFilter = "HeaderFK='" + headervalue + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and batch_year in('" + batch + "') and feecategory in('" + curSemCode + "')";
                                                }
                                                else
                                                {
                                                    ds.Tables[1].DefaultView.RowFilter = "HeaderFK='" + headervalue + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'  and feecategory in('" + curSemCode + "') ";
                                                }
                                                dv = ds.Tables[1].DefaultView;
                                                colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                                for (int k = 0; k < dv.Count; k++)
                                                {
                                                    double.TryParse(Convert.ToString(dv[k]["debit"]), out totamount);
                                                    fnlamount = fnlamount + totamount;
                                                    paidamt = paidamt + totamount;
                                                }
                                                if (!httotal.ContainsKey(colnew))
                                                    httotal.Add(colnew, Convert.ToString(fnlamount));
                                                else
                                                {
                                                    double amount = 0;
                                                    double.TryParse(Convert.ToString(httotal[colnew]), out amount);
                                                    amount += fnlamount;
                                                    httotal.Remove(colnew);
                                                    httotal.Add(colnew, Convert.ToString(amount));
                                                }
                                                fnlamount = 0;
                                                drowGrd[colnew] = Convert.ToString(paidamt);
                                                // FpSpread1.Sheets[0].Cells[i, colnew].Text = Convert.ToString(paidamt);
                                                if (!grandtotal.ContainsKey(colnew))
                                                    grandtotal.Add(colnew, Convert.ToString(paidamt));
                                                else
                                                {
                                                    double amount = 0;
                                                    double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                    amount += paidamt;
                                                    grandtotal.Remove(colnew);
                                                    grandtotal.Add(colnew, Convert.ToString(amount));
                                                }
                                                paidamt = 0;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        bal = totalvalue;
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                        // FpSpread1.Sheets[0].Cells[i, FpSpread1.Sheets[0].ColumnCount - 4].Text = Convert.ToString(bal);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                            amount += bal;
                                            grandtotal.Remove(ColCntGrd - 4);
                                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                        }
                                    }

                                }
                                boolClg = true;
                            }
                        }
                        if (boolClg)
                        {
                            //Allot
                            drowGrd[3] = Convert.ToString(allotmentAmount);
                            //FpSpread1.Sheets[0].Cells[i, 2].Text = Convert.ToString(allotmentAmount);
                            if (!grandtotal.ContainsKey(3))
                                grandtotal.Add(3, Convert.ToString(allotmentAmount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[3]), out amount);
                                amount += allotmentAmount;
                                grandtotal.Remove(3);
                                grandtotal.Add(3, Convert.ToString(amount));
                            }
                            //concession
                            drowGrd[4] = Convert.ToString(ConcessionAmount);
                            if (!grandtotal.ContainsKey(4))
                                grandtotal.Add(4, Convert.ToString(ConcessionAmount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                amount += ConcessionAmount;
                                grandtotal.Remove(4);
                                grandtotal.Add(4, Convert.ToString(amount));
                            }
                            //government
                            drowGrd[5] = Convert.ToString(Government);
                            if (!grandtotal.ContainsKey(5))
                                grandtotal.Add(5, Convert.ToString(Government));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                amount += Government;
                                grandtotal.Remove(5);
                                grandtotal.Add(5, Convert.ToString(amount));
                            }
                            //total
                            drowGrd[6] = Convert.ToString(demandAmt);
                            if (!grandtotal.ContainsKey(6))
                                grandtotal.Add(6, Convert.ToString(demandAmt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                amount += demandAmt;
                                grandtotal.Remove(6);
                                grandtotal.Add(6, Convert.ToString(amount));
                            }
                            //refund
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                            //FpSpread1.Sheets[0].Cells[i, FpSpread1.Sheets[0].ColumnCount - 3].Text = Convert.ToString(refundAmount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(refundAmount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                amount += refundAmount;
                                grandtotal.Remove(ColCntGrd - 3);
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                            }
                            //paid paymode count=0
                            //if (countval == 0)
                            //{
                            //    FpSpread1.Sheets[0].Cells[i, FpSpread1.Sheets[0].ColumnCount - 5].Text = Convert.ToString(paidvalue);
                            //    if (!grandtotal.ContainsKey(FpSpread1.Sheets[0].ColumnCount - 5))
                            //        grandtotal.Add(FpSpread1.Sheets[0].ColumnCount - 5, Convert.ToString(paidvalue));
                            //    else
                            //    {
                            //        double amount = 0;
                            //        double.TryParse(Convert.ToString(grandtotal[FpSpread1.Sheets[0].ColumnCount - 5]), out amount);
                            //        amount += paidvalue;
                            //        grandtotal.Remove(FpSpread1.Sheets[0].ColumnCount - 5);
                            //        grandtotal.Add(FpSpread1.Sheets[0].ColumnCount - 5, Convert.ToString(amount));
                            //    }
                            //}

                            //excessamount
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                            //FpSpread1.Sheets[0].Cells[i, ColCntGrd - 2].Text = Convert.ToString(tot_amount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                amount += tot_amount;
                                grandtotal.Remove(ColCntGrd - 2);
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                            }
                            tot_amount = 0;

                            //Paymode values Printing
                            for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                            {
                                if (chkl_paid.Items[pay].Selected == true)
                                {
                                    colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                    if (httotal.Contains(colnew))
                                    {
                                        drowGrd[colnew] = Convert.ToString(httotal[colnew]);
                                    }
                                }
                            }
                            int TotPaymodeValue = 0;
                            int PaymodeCount = chkl_paid.Items.Count;
                            foreach (DictionaryEntry item in httotal)
                            {
                                string col = item.Key.ToString();
                                string value = item.Value.ToString();
                                TotPaymodeValue = (Convert.ToInt32(TotPaymodeValue) + Convert.ToInt32(value));
                            }
                            ColCntGrd = dtReport.Columns.Count;
                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(TotPaymodeValue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                amount += TotPaymodeValue;
                                grandtotal.Remove(ColCntGrd - 5);
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                            }
                            drowGrd[ColCntGrd - 5] = Convert.ToString(TotPaymodeValue);
                            //FpSpread1.Sheets[0].Cells[i, FpSpread1.Sheets[0].ColumnCount - 5].Text = Convert.ToString(TotPaymodeValue);
                            httotal.Clear();
                            //balance
                            if (totalvalue != 0)
                            {
                                bal = TotalAmount - TotPaymodeValue;
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                //FpSpread1.Sheets[0].Cells[i, FpSpread1.Sheets[0].ColumnCount - 4].Text = Convert.ToString(bal);
                                if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                    amount += bal;
                                    grandtotal.Remove(ColCntGrd - 4);
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                }
                                fnlamount = 0;
                                if (bal == 0)
                                    dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                else
                                    dicRowColor.Add(dtReport.Rows.Count, "Balance");
                            }
                        }
                        dtReport.Rows.Add(drowGrd);
                    }
                    #endregion

                    #region grandtotal

                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = "Grand Total";
                    double grandvalue = 0;
                    for (int j = 3; j < dtReport.Columns.Count; j++)
                    {
                        double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                        drowGrd[j] = Convert.ToString(grandvalue);
                    }
                    dtReport.Rows.Add(drowGrd);

                    #endregion

                    #region visible

                    grdStudentReport.DataSource = dtReport;
                    grdStudentReport.DataBind();
                    grdStudentReport.Visible = true;

                    GridViewRow row = grdStudentReport.Rows[0];
                    GridViewRow previousRow = grdStudentReport.Rows[1];

                    for (int i = 0; i < dtReport.Columns.Count; i++)
                    {
                        if (row.Cells[i].Text == previousRow.Cells[i].Text)
                        {
                            row.Cells[i].RowSpan = 2;
                            previousRow.Cells[i].Visible = false;
                            //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                            //                       previousRow.Cells[i].RowSpan + 1;
                            //previousRow.Cells[i].Visible = false;
                        }
                    }
                    //ColumnSpan

                    for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                    {
                        TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                        TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                        if (colum.Text == previouscol.Text)
                        {
                            if (previouscol.ColumnSpan == 0)
                            {
                                if (colum.ColumnSpan == 0)
                                {
                                    previouscol.ColumnSpan += 2;
                                }
                                else
                                {
                                    previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                }
                                colum.Visible = false;
                            }
                        }
                    }

                    foreach (KeyValuePair<int, string> dr in dicRowColor)
                    {
                        int g = dr.Key;
                        string DicValue = dr.Value;
                        if (DicValue == "NoBalance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                        }
                        if (DicValue == "Balance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                        }
                    }
                    grdStudentReport.Visible = false;
                    //FpSpread1.Attributes.Add("Style", "cursor:grab;");
                    //FpSpread1.Sheets[0].SelectionBackColor = Color.Green;
                    div1.Visible = true;
                    //grdStudentReport.Visible = true;
                    divledger.Visible = false;
                    lbl_ledg.Visible = false;
                    lbl_ledg.Text = "";
                    Grdledger.Visible = false;
                    lbl_bat.Visible = false;
                    lbl_bat.Text = "";
                    GrdBatch.Visible = false;
                    lbl_degr.Visible = false;
                    lbl_degr.Text = "";
                    GrdDegree.Visible = false;
                    lbl_dep.Visible = false;
                    lbl_dep.Text = "";
                    GrdDept.Visible = false;
                    lbl_sem.Visible = false; ;
                    lbl_sem.Text = "";
                    GrdSem.Visible = false;
                    //  panelcollaps.Visible = true;
                    // pnlheader.Visible = true;                  
                    header.Visible = true;
                    lblhed.Visible = true;

                    divcommon.Visible = true;
                    //   rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                    header.Attributes.Add("Style", "height:320px; width:950px; overflow:auto");
                    div1.Attributes.Add("Style", "height:320px; width:950px; overflow:auto");

                    rptprint.Visible = true;
                    pheaderfilter.Visible = true;
                    pcolumnorder.Visible = true;
                    lblhed.Text = "Header";
                    //pnlledgercolorder.Visible = false;
                    //Pnlledcolorder.Visible = false;
                    //pnl_batchcolorder.Visible = false;
                    //pnl_batcolorder.Visible = false;
                    //pnl_degcolorder.Visible = false;
                    //pnl_degreecolorder.Visible = false;
                    //pnl_deptcolord.Visible = false;
                    //pnl_deptcolorder.Visible = false;
                    //pnl_semcolord.Visible = false;
                    //pnl_semcolorder.Visible = false;                    
                    //btn_fpled.Visible = false;
                    //btn_fpbat.Visible = false;
                    //btn_fpdeg.Visible = false;
                    //btn_fpdep.Visible = false;
                    //// rptprint.Visible = false;
                    //pnl_studcolord.Visible = false;
                    //pnl_studcolorder.Visible = false;
                    divstudcell.Visible = false;
                    lbl_semcell.Text = "";
                    divdept.Visible = false;
                    divdegree.Visible = false;
                    divbatch.Visible = false;
                    ledger.Visible = false;
                    //batch.Visible = false;
                    divdegr.Visible = false;
                    divdep.Visible = false;
                    divsema.Visible = false;
                    div7.Visible = false;
                    ViewState["header"] = 0;
                    ViewState["ledger"] = null;
                    ViewState["batch"] = null;
                    ViewState["degree"] = null;
                    ViewState["dept"] = null;
                    ViewState["sem"] = null;
                    ViewState["stud"] = null;
                    txtexcelname.Text = "";
                    lblvalidation1.Text = "";
                    #endregion
                }
                else
                {
                    grdStudentReport.Visible = false;
                    div1.Visible = false;
                    rptprint.Visible = false;
                    pheaderfilter.Visible = false;
                    pcolumnorder.Visible = false;
                    lblhed.Text = "";
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "No Record Found";
                }

            }
            #endregion

        }
        catch (Exception ex) { }
    }

    #endregion

    #region ledgermethod

    public void ledgervalues()
    {
        try
        {
            ArrayList arrColLdrNames = new ArrayList();
            ArrayList arrColLdrNames2 = new ArrayList();

            #region without academic year
            if (!cbAcdYear.Checked)
            {
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {

                        #region design

                        loadcolumns();
                        DataView dv = new DataView();
                        int countval = 0;
                        arrColLdrNames.Add("S.No");
                        arrColLdrNames2.Add("S.No");
                        dtReport.Columns.Add("S.No");
                        arrColLdrNames.Add("Header Name");
                        arrColLdrNames2.Add("Header Name");
                        dtReport.Columns.Add("Header Name");
                        arrColLdrNames.Add("Header pk");
                        arrColLdrNames2.Add("Header pk");
                        dtReport.Columns.Add("Header pk");
                        arrColLdrNames.Add("Ledger Name");
                        arrColLdrNames2.Add("Ledger Name");
                        dtReport.Columns.Add("Ledger Name");
                        arrColLdrNames.Add("Ledger pk");
                        arrColLdrNames2.Add("Ledger pk");
                        dtReport.Columns.Add("Ledger pk");
                        arrColLdrNames.Add("Allot");
                        arrColLdrNames2.Add("Allot");
                        dtReport.Columns.Add("Allot");
                        arrColLdrNames.Add("Concession");
                        arrColLdrNames2.Add("Concession");
                        dtReport.Columns.Add("Concession");
                        arrColLdrNames.Add("Scholarship");
                        arrColLdrNames2.Add("Scholarship");
                        dtReport.Columns.Add("Scholarship");
                        arrColLdrNames.Add("Total");
                        arrColLdrNames2.Add("Total");
                        dtReport.Columns.Add("Total");

                        Hashtable newhash = new Hashtable();

                        if (chkl_paid.Items.Count > 0)
                        {
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    countval++;
                                    arrColLdrNames.Add("Paid");
                                    arrColLdrNames2.Add(chkl_paid.Items[s].Text);
                                    dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                    newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                }
                            }
                            if (countval != 0)
                            {
                                arrColLdrNames.Add("Paid");
                                arrColLdrNames2.Add("Total Paid");
                                dtReport.Columns.Add("Total Paid");
                            }
                        }
                        if (countval == 0)
                        {
                            arrColLdrNames.Add("Paid");
                            arrColLdrNames2.Add("Paid");
                            dtReport.Columns.Add("Paid");
                        }
                        arrColLdrNames.Add("Balance");
                        arrColLdrNames2.Add("Balance");
                        dtReport.Columns.Add("Balance");
                        arrColLdrNames.Add("Refund Amount");
                        arrColLdrNames2.Add("Refund Amount");
                        dtReport.Columns.Add("Refund Amount");
                        arrColLdrNames.Add("Excess Amount");
                        arrColLdrNames2.Add("Excess Amount");
                        dtReport.Columns.Add("Excess Amount");
                        arrColLdrNames.Add("Fine Amount");
                        arrColLdrNames2.Add("Fine Amount");
                        dtReport.Columns.Add("Fine Amount");
                        DataRow drHdr1 = dtReport.NewRow();
                        DataRow drHdr2 = dtReport.NewRow();
                        for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                        {
                            drHdr1[grCol] = arrColLdrNames[grCol];
                            drHdr2[grCol] = arrColLdrNames2[grCol];
                        }
                        dtReport.Rows.Add(drHdr1);
                        dtReport.Rows.Add(drHdr2);

                        #endregion

                        #region value

                        double totalvalue = 0;
                        double bal = 0;
                        double consamt = 0;
                        double allotamt = 0;
                        double govt = 0;
                        double fnlamount = 0;
                        int ColCntGrd = 0;
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = Convert.ToString(i + 1);
                            ds.Tables[3].DefaultView.RowFilter = "  LedgerPK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                            dvhead = ds.Tables[3].DefaultView;
                            if (Convert.ToString(dvhead) != "" && dvhead != null)
                            {
                                drowGrd[1] = Convert.ToString(dvhead[0]["HeaderName"]);
                                drowGrd[3] = Convert.ToString(dvhead[0]["LedgerName"]);
                            }
                            drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"].ToString());
                            drowGrd[4] = Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"].ToString());
                            //allot
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                            drowGrd[5] = Convert.ToString(allotamt);
                            if (!grandtotal.ContainsKey(5))
                                grandtotal.Add(5, Convert.ToString(allotamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                amount += allotamt;
                                grandtotal.Remove(5);
                                grandtotal.Add(5, Convert.ToString(amount));
                            }
                            //consession
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                            drowGrd[6] = Convert.ToString(consamt);
                            if (!grandtotal.ContainsKey(6))
                                grandtotal.Add(6, Convert.ToString(consamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                amount += consamt;
                                grandtotal.Remove(6);
                                grandtotal.Add(6, Convert.ToString(amount));
                            }
                            //government
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                            drowGrd[7] = Convert.ToString(govt);
                            if (!grandtotal.ContainsKey(7))
                                grandtotal.Add(7, Convert.ToString(govt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[7]), out amount);
                                amount += govt;
                                grandtotal.Remove(7);
                                grandtotal.Add(7, Convert.ToString(amount));
                            }
                            //total
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                            drowGrd[8] = Convert.ToString(totalvalue);
                            if (!grandtotal.ContainsKey(8))
                                grandtotal.Add(8, Convert.ToString(totalvalue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[8]), out amount);
                                amount += totalvalue;
                                grandtotal.Remove(8);
                                grandtotal.Add(8, Convert.ToString(amount));
                            }
                            //paidvalue paymode count=0
                            double paidvalue = 0;
                            if (countval == 0)
                            {
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                fnlamount = paidvalue;
                                if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                    grandtotal.Add(ColCntGrd, Convert.ToString(paidvalue));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                    amount += paidvalue;
                                    grandtotal.Remove(ColCntGrd - 5);
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                }
                            }
                            //refund
                            double refund = 0;
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                            if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                amount += refund;
                                grandtotal.Remove(ColCntGrd - 3);
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                            }
                            //excess
                            DataView dvex = new DataView();
                            double tot_amount = 0;
                            if (ds.Tables[2].Rows.Count > 0)
                            {
                                ds.Tables[2].DefaultView.RowFilter = "LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                                dvex = ds.Tables[2].DefaultView;
                                if (dvex.Count > 0 && dvex != null)
                                {
                                    for (int k = 0; k < dvex.Count; k++)
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                        tot_amount += amount;
                                    }
                                }
                            }
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                amount += tot_amount;
                                grandtotal.Remove(ColCntGrd - 2);
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                            }
                            tot_amount = 0;
                            //paymode values
                            double totamount = 0;
                            if (ds.Tables[1].Rows.Count > 0)
                            {
                                for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                {
                                    if (chkl_paid.Items[pay].Selected == true)
                                    {
                                        double paidamt = 0;
                                        ds.Tables[1].DefaultView.RowFilter = "LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                        dv = ds.Tables[1].DefaultView;
                                        int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                        for (int k = 0; k < dv.Count; k++)
                                        {
                                            double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                            fnlamount = fnlamount + totamount;
                                            paidamt = paidamt + totamount;
                                        }
                                        drowGrd[colnew] = Convert.ToString(paidamt);
                                        if (!grandtotal.ContainsKey(colnew))
                                            grandtotal.Add(colnew, Convert.ToString(paidamt));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                            amount += paidamt;
                                            grandtotal.Remove(colnew);
                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                        }
                                        paidamt = 0;
                                    }
                                }
                                if (countval != 0)
                                {
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                        amount += fnlamount;
                                        grandtotal.Remove(ColCntGrd - 5);
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                    }
                                }
                                //balance
                                if (totalvalue != 0)
                                {
                                    bal = totalvalue - fnlamount;
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                        amount += bal;
                                        grandtotal.Remove(ColCntGrd - 4);
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                    }
                                    fnlamount = 0;
                                    if (bal == 0)
                                        dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                    else
                                        dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                }
                            }
                            else
                            {
                                bal = Convert.ToDouble(totalvalue);
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                    amount += bal;
                                    grandtotal.Remove(ColCntGrd - 4);
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                }
                            }
                            dtReport.Rows.Add(drowGrd);
                        }
                        #endregion

                        #region grandtotal

                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = "Grand Total";
                        double grandvalue = 0;
                        for (int j = 4; j < dtReport.Columns.Count; j++)
                        {
                            double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                            drowGrd[j] = Convert.ToString(grandvalue);
                        }
                        dtReport.Rows.Add(drowGrd);

                        #endregion

                        #region visible

                        grdStudentReport.DataSource = dtReport;
                        grdStudentReport.DataBind();
                        grdStudentReport.Visible = true;

                        GridViewRow row = grdStudentReport.Rows[0];
                        GridViewRow previousRow = grdStudentReport.Rows[1];

                        for (int i = 0; i < dtReport.Columns.Count; i++)
                        {
                            if (row.Cells[i].Text == previousRow.Cells[i].Text)
                            {
                                row.Cells[i].RowSpan = 2;
                                previousRow.Cells[i].Visible = false;
                                //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                                //                       previousRow.Cells[i].RowSpan + 1;
                                //previousRow.Cells[i].Visible = false;
                            }
                        }
                        //ColumnSpan

                        for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                        {
                            TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                            TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                            if (colum.Text == previouscol.Text)
                            {
                                if (previouscol.ColumnSpan == 0)
                                {
                                    if (colum.ColumnSpan == 0)
                                    {
                                        previouscol.ColumnSpan += 2;
                                    }
                                    else
                                    {
                                        previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                    }
                                    colum.Visible = false;
                                }
                            }
                        }

                        foreach (KeyValuePair<int, string> dr in dicRowColor)
                        {
                            int g = dr.Key;
                            string DicValue = dr.Value;
                            if (DicValue == "NoBalance")
                            {
                                grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                            }
                            if (DicValue == "Balance")
                            {
                                grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                            }
                        }
                        divcommon.Visible = true;
                        header.Visible = true;
                        div1.Visible = true;
                        divledger.Visible = false;
                        lbl_ledg.Visible = false;
                        lbl_ledg.Text = "";
                        Grdledger.Visible = false;
                        lbl_bat.Visible = false;
                        lbl_bat.Text = "";
                        GrdBatch.Visible = false;
                        lbl_degr.Visible = false;
                        lbl_degr.Text = "";
                        GrdDegree.Visible = false;
                        lbl_dep.Visible = false;
                        lbl_dep.Text = "";
                        GrdDept.Visible = false;
                        lbl_sem.Visible = false; ;
                        lbl_sem.Text = "";
                        GrdSem.Visible = false;
                        rptprint.Visible = true;
                        // rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                        lblhed.Visible = true;
                        lblhed.Text = "Ledgers";
                        pheaderfilter.Visible = true;
                        pcolumnorder.Visible = true;
                        //pnlledgercolorder.Visible = false;
                        //Pnlledcolorder.Visible = false;
                        //pnl_batchcolorder.Visible = false;
                        //pnl_batcolorder.Visible = false;
                        //pnl_degcolorder.Visible = false;
                        //pnl_degreecolorder.Visible = false;
                        //pnl_deptcolord.Visible = false;
                        //pnl_deptcolorder.Visible = false;
                        //pnl_semcolord.Visible = false;
                        //pnl_semcolorder.Visible = false;
                        //btn_fpled.Visible = false;
                        //btn_fpbat.Visible = false;
                        //btn_fpdeg.Visible = false;
                        //btn_fpdep.Visible = false;
                        ////  rptprint.Visible = false;
                        //pnl_studcolord.Visible = false;
                        //pnl_studcolorder.Visible = false;
                        divstudcell.Visible = false;
                        lbl_semcell.Text = "";
                        divdept.Visible = false;
                        divdegree.Visible = false;
                        divbatch.Visible = false;
                        header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                        div1.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                        #endregion
                    }
                    else
                    {
                        grdStudentReport.Visible = false;
                        div1.Visible = false;
                        rptprint.Visible = false;
                        pheaderfilter.Visible = false;
                        pcolumnorder.Visible = false;
                        lblhed.Text = "";
                        imgdiv2.Visible = true;
                        lbl_alert.Visible = true;
                        lbl_alert.Text = "No Record Found";
                    }
                }
            }
            #endregion

            #region with academic year added by saranya
            if (cbAcdYear.Checked == true)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    #region design

                    loadcolumns();
                    DataView dv = new DataView();
                    int countval = 0;
                    arrColLdrNames.Add("S.No");
                    arrColLdrNames2.Add("S.No");
                    dtReport.Columns.Add("S.No");
                    arrColLdrNames.Add("Header Name");
                    arrColLdrNames2.Add("Header Name");
                    dtReport.Columns.Add("Header Name");
                    arrColLdrNames.Add("Header pk");
                    arrColLdrNames2.Add("Header pk");
                    dtReport.Columns.Add("Header pk");
                    arrColLdrNames.Add("Ledger Name");
                    arrColLdrNames2.Add("Ledger Name");
                    dtReport.Columns.Add("Ledger Name");
                    arrColLdrNames.Add("Ledger pk");
                    arrColLdrNames2.Add("Ledger pk");
                    dtReport.Columns.Add("Ledger pk");
                    arrColLdrNames.Add("Allot");
                    arrColLdrNames2.Add("Allot");
                    dtReport.Columns.Add("Allot");
                    arrColLdrNames.Add("Concession");
                    arrColLdrNames2.Add("Concession");
                    dtReport.Columns.Add("Concession");
                    arrColLdrNames.Add("Scholarship");
                    arrColLdrNames2.Add("Scholarship");
                    dtReport.Columns.Add("Scholarship");
                    arrColLdrNames.Add("Total");
                    arrColLdrNames2.Add("Total");
                    dtReport.Columns.Add("Total");

                    Hashtable newhash = new Hashtable();

                    if (chkl_paid.Items.Count > 0)
                    {
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                countval++;
                                arrColLdrNames.Add("Paid");
                                arrColLdrNames2.Add(chkl_paid.Items[s].Text);
                                dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                            }
                        }
                        if (countval != 0)
                        {
                            arrColLdrNames.Add("Paid");
                            arrColLdrNames2.Add("Total Paid");
                            dtReport.Columns.Add("Total Paid");
                        }
                    }
                    if (countval == 0)
                    {
                        arrColLdrNames.Add("Paid");
                        arrColLdrNames2.Add("Paid");
                        dtReport.Columns.Add("Paid");
                    }
                    arrColLdrNames.Add("Balance");
                    arrColLdrNames2.Add("Balance");
                    dtReport.Columns.Add("Balance");
                    arrColLdrNames.Add("Refund Amount");
                    arrColLdrNames2.Add("Refund Amount");
                    dtReport.Columns.Add("Refund Amount");
                    arrColLdrNames.Add("Excess Amount");
                    arrColLdrNames2.Add("Excess Amount");
                    dtReport.Columns.Add("Excess Amount");
                    arrColLdrNames.Add("Fine Amount");
                    arrColLdrNames2.Add("Fine Amount");
                    dtReport.Columns.Add("Fine Amount");
                    DataRow drHdr1 = dtReport.NewRow();
                    DataRow drHdr2 = dtReport.NewRow();
                    for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                    {
                        drHdr1[grCol] = arrColLdrNames[grCol];
                        drHdr2[grCol] = arrColLdrNames2[grCol];
                    }
                    dtReport.Rows.Add(drHdr1);
                    dtReport.Rows.Add(drHdr2);

                    #endregion

                    Dictionary<string, string> getAcdYear = new Dictionary<string, string>();
                    if (cbAcdYear.Checked)
                    {
                        #region Academic Year
                        DataSet dsNormal = ds.Copy();
                        try
                        {
                            string clgCode = Convert.ToString(ddl_collegename.SelectedItem.Value);
                            string acdYear = Convert.ToString(ddlAcademic.SelectedItem.Text);
                            getAcdYear = getOldSettings(acdYear);//(acdYear, clgCode);
                            DataSet dsFinal = new DataSet();
                            if (getAcdYear.Count > 0)
                            {
                                bool boolDs = false;
                                DataTable dtheader = ds.Tables[3].DefaultView.ToTable();
                                foreach (KeyValuePair<string, string> getVal in getAcdYear)
                                {
                                    string feeCate = getVal.Value.Replace(",", "','");
                                    string degcourseid = Convert.ToString(getCblSelectedValue(cbl_degree));

                                    ds.Tables[4].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "'";
                                    DataTable dtYear = ds.Tables[4].DefaultView.ToTable();

                                    ds.Tables[0].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";
                                    DataTable dtAllot = ds.Tables[0].DefaultView.ToTable();

                                    ds.Tables[1].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";
                                    DataTable dtPaid = ds.Tables[1].DefaultView.ToTable();

                                    ds.Tables[2].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";// and feecategory in('" + feeCate + "')";
                                    DataTable ftexcess = ds.Tables[0].DefaultView.ToTable();
                                    if (!boolDs)
                                    {
                                        dsFinal.Reset();
                                        dsFinal.Tables.Add(dtAllot);
                                        dsFinal.Tables.Add(dtPaid);
                                        dsFinal.Tables.Add(ftexcess);
                                        dsFinal.Tables.Add(dtheader);
                                        dsFinal.Tables.Add(dtYear);
                                        boolDs = true;
                                    }
                                    else
                                    {
                                        dsFinal.Merge(dtAllot);
                                        dsFinal.Merge(dtPaid);
                                        dsFinal.Merge(dtYear);

                                    }
                                }
                            }
                            if (dsFinal.Tables.Count > 0 && dsFinal.Tables[0].Rows.Count > 0)
                            {
                                ds.Reset();
                                ds = dsFinal.Copy();
                            }
                        }
                        catch
                        {
                            ds.Reset();
                            ds = dsNormal.Copy();
                        }
                        #endregion
                    }
                    Hashtable httotal = new Hashtable();
                    Dictionary<string, string> currentSem = getCurSem();

                    #region value
                    for (int i = 0; i < ds.Tables[3].Rows.Count; i++)
                    {
                        bool boolClg = false;
                        double allotamt = 0;
                        double consamt = 0;
                        double govt = 0;
                        double tot_amount = 0;
                        double totalvalue = 0;
                        double bal = 0;
                        double totamount = 0;
                        double fnlamount = 0;
                        double demandAmt = 0;
                        double TotalAmount = 0;
                        double allotmentAmount = 0;
                        double ConcessionAmount = 0;
                        double Government = 0;
                        double paidvalue = 0;
                        double refund = 0;
                        double refundAmount = 0;
                        double paidamt = 0;
                        int colnew = 0;
                        int ColCntGrd = 0;

                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = Convert.ToString(i + 1);
                        string Ledgervalue = Convert.ToString(ds.Tables[3].Rows[i]["LedgerPK"]);
                        ds.Tables[3].DefaultView.RowFilter = "  LedgerPK='" + Ledgervalue + "'";
                        dvhead = ds.Tables[3].DefaultView;
                        if (Convert.ToString(dvhead) != "" && dvhead != null)
                        {
                            drowGrd[1] = Convert.ToString(dvhead[0]["HeaderName"]);
                            drowGrd[3] = Convert.ToString(dvhead[0]["LedgerName"]);
                        }
                        drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"].ToString());
                        drowGrd[4] = Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"].ToString());
                        string clgCode = Convert.ToString(ds.Tables[0].Rows[i]["college_code"]);
                        ds.Tables[4].DefaultView.RowFilter = "college_Code='" + clgCode + "'";
                        DataTable dtbatch = ds.Tables[4].DefaultView.ToTable();

                        //string batch = Convert.ToString(dtbatch.Rows[bat]["batch_year"]);
                        if (dtbatch.Rows.Count > 0)
                        {
                            for (int bat = 0; bat < dtbatch.Rows.Count; bat++)
                            {
                                string batch = Convert.ToString(dtbatch.Rows[bat]["batch_year"]);
                                string curSem = string.Empty;
                                string curSemCode = string.Empty;
                                if (!cbAcdYear.Checked)
                                {
                                    if (currentSem.ContainsKey(batch))
                                        curSem = Convert.ToString(batch);
                                    Dictionary<string, string> getFeeCode = getFeecode(clgCode);//get current sem code 
                                    curSem = getCurYear(curSem);
                                    if (getFeeCode.ContainsKey(curSem))
                                        curSemCode = Convert.ToString(getFeeCode[curSem.Trim()]);
                                }
                                else
                                {
                                    if (getAcdYear.ContainsKey(clgCode + "$" + batch))
                                    {
                                        curSemCode = Convert.ToString(getAcdYear[clgCode + "$" + batch]);
                                        curSemCode = curSemCode.Replace(",", "','");
                                    }
                                }
                                if (!string.IsNullOrEmpty(curSemCode))
                                {
                                    if (ds.Tables[0].Rows.Count > 0)
                                    {
                                        if (checkSchoolSetting() != 0)
                                        {
                                            ds.Tables[0].DefaultView.RowFilter = "college_Code='" + clgCode + "' and LedgerFK='" + Ledgervalue + "' and feecategory in('" + curSemCode + "') and batch_year in ('" + batch + "')";
                                        }
                                        else
                                        {
                                            ds.Tables[0].DefaultView.RowFilter = "college_Code='" + clgCode + "' and LedgerFK='" + Ledgervalue + "' and feecategory in('" + curSemCode + "')";
                                        }
                                        DataTable dtpaid = ds.Tables[0].DefaultView.ToTable();
                                        if (dtpaid.Rows.Count > 0)
                                        {
                                            //allot 
                                            double.TryParse(Convert.ToString(dtpaid.Compute("sum(Allot)", "")), out allotamt);
                                            allotmentAmount += allotamt;
                                            //consession
                                            double.TryParse(Convert.ToString(dtpaid.Compute("sum(consustion)", "")), out consamt);
                                            ConcessionAmount += consamt;
                                            //government
                                            double.TryParse(Convert.ToString(dtpaid.Compute("sum(Government)", "")), out govt);
                                            Government += govt;
                                            //total
                                            double.TryParse(Convert.ToString(dtpaid.Compute("sum(Total)", "")), out totalvalue);
                                            demandAmt += totalvalue;
                                            TotalAmount += totalvalue;
                                            double.TryParse(Convert.ToString(dtpaid.Compute("sum(RefundAmount)", "")), out refund);
                                            refundAmount += refund;
                                        }
                                    }
                                    //paidvalue paymode count=0
                                    if (countval == 0)
                                    {
                                        DataView dsnew = new DataView();
                                        if (ds.Tables[1].Rows.Count > 0)
                                        {
                                            ds.Tables[1].DefaultView.RowFilter = " LedgerFK='" + Ledgervalue + "'";
                                            dsnew = ds.Tables[1].DefaultView;
                                            if (dsnew.Count > 0)
                                            {
                                                double.TryParse(Convert.ToString(dsnew[0]["Debit"]), out paidvalue);
                                                fnlamount = paidvalue;
                                            }
                                        }
                                    }

                                    //excess
                                    DataView dvex = new DataView();

                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        ds.Tables[2].DefaultView.RowFilter = "college_Code='" + clgCode + "' and LedgerFK='" + Ledgervalue + "' and feecategory in('" + curSemCode + "') and batch_year in ('" + batch + "')";//"LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                                        dvex = ds.Tables[2].DefaultView;
                                        if (dvex.Count > 0 && dvex != null)
                                        {
                                            for (int k = 0; k < dvex.Count; k++)
                                            {
                                                double amount = 0;
                                                double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                                tot_amount += amount;
                                            }
                                        }
                                    }
                                    //paymode values

                                    if (ds.Tables[1].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                        {
                                            if (chkl_paid.Items[pay].Selected == true)
                                            {
                                                if (checkSchoolSetting() != 0)
                                                {
                                                    ds.Tables[1].DefaultView.RowFilter = " LedgerFK='" + Ledgervalue + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'  and feecategory in('" + curSemCode + "') and batch_year in ('" + batch + "')";//LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"].ToString()) + "'
                                                }
                                                else
                                                {
                                                    ds.Tables[1].DefaultView.RowFilter = " LedgerFK='" + Ledgervalue + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'  and feecategory in('" + curSemCode + "')";//LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"].ToString()) + "'
                                                }
                                                dv = ds.Tables[1].DefaultView;
                                                colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                                for (int k = 0; k < dv.Count; k++)
                                                {
                                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                                    fnlamount = fnlamount + totamount;
                                                    paidamt = paidamt + totamount;
                                                }
                                                if (!httotal.ContainsKey(colnew))
                                                    httotal.Add(colnew, Convert.ToString(fnlamount));
                                                else
                                                {
                                                    double amount = 0;
                                                    double.TryParse(Convert.ToString(httotal[colnew]), out amount);
                                                    amount += fnlamount;
                                                    httotal.Remove(colnew);
                                                    httotal.Add(colnew, Convert.ToString(amount));
                                                }
                                                fnlamount = 0;
                                                drowGrd[colnew] = Convert.ToString(paidamt);
                                                if (!grandtotal.ContainsKey(colnew))
                                                    grandtotal.Add(colnew, Convert.ToString(paidamt));
                                                else
                                                {
                                                    double amount = 0;
                                                    double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                    amount += paidamt;
                                                    grandtotal.Remove(colnew);
                                                    grandtotal.Add(colnew, Convert.ToString(amount));
                                                }
                                                paidamt = 0;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        bal = Convert.ToDouble(totalvalue);
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                            amount += bal;
                                            grandtotal.Remove(ColCntGrd - 4);
                                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                        }
                                    }
                                    boolClg = true;
                                }
                            }
                        }
                        if (boolClg)
                        {
                            //allot
                            drowGrd[5] = Convert.ToString(allotmentAmount);
                            if (!grandtotal.ContainsKey(5))
                                grandtotal.Add(5, Convert.ToString(allotmentAmount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                amount += allotmentAmount;
                                grandtotal.Remove(5);
                                grandtotal.Add(5, Convert.ToString(amount));
                            }
                            //consession
                            drowGrd[6] = Convert.ToString(ConcessionAmount);
                            if (!grandtotal.ContainsKey(6))
                                grandtotal.Add(6, Convert.ToString(ConcessionAmount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                amount += ConcessionAmount;
                                grandtotal.Remove(6);
                                grandtotal.Add(6, Convert.ToString(amount));
                            }
                            //government
                            drowGrd[7] = Convert.ToString(Government);
                            if (!grandtotal.ContainsKey(7))
                                grandtotal.Add(7, Convert.ToString(Government));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[7]), out amount);
                                amount += Government;
                                grandtotal.Remove(7);
                                grandtotal.Add(7, Convert.ToString(amount));
                            }
                            //total

                            drowGrd[8] = Convert.ToString(demandAmt);
                            if (!grandtotal.ContainsKey(8))
                                grandtotal.Add(8, Convert.ToString(demandAmt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[8]), out amount);
                                amount += demandAmt;
                                grandtotal.Remove(8);
                                grandtotal.Add(8, Convert.ToString(amount));
                            }
                            //refund
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 3] = Convert.ToString(refundAmount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(refundAmount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                amount += refundAmount;
                                grandtotal.Remove(ColCntGrd - 3);
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                            }
                            //paid paymode count=0
                            //if (countval == 0)
                            //{
                            //    FpSpread1.Sheets[0].Cells[i, FpSpread1.Sheets[0].ColumnCount - 5].Text = Convert.ToString(paidvalue);
                            //    if (!grandtotal.ContainsKey(FpSpread1.Sheets[0].ColumnCount - 5))
                            //        grandtotal.Add(FpSpread1.Sheets[0].ColumnCount - 5, Convert.ToString(paidvalue));
                            //    else
                            //    {
                            //        double amount = 0;
                            //        double.TryParse(Convert.ToString(grandtotal[FpSpread1.Sheets[0].ColumnCount - 5]), out amount);
                            //        amount += paidvalue;
                            //        grandtotal.Remove(FpSpread1.Sheets[0].ColumnCount - 5);
                            //        grandtotal.Add(FpSpread1.Sheets[0].ColumnCount - 5, Convert.ToString(amount));
                            //    }
                            //}

                            //excess
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                amount += tot_amount;
                                grandtotal.Remove(ColCntGrd - 2);
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                            }
                            //tot_amount = 0;

                            //Paymode values Printing
                            for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                            {
                                if (chkl_paid.Items[pay].Selected == true)
                                {
                                    colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                    if (httotal.Contains(colnew))
                                    {
                                        drowGrd[colnew] = Convert.ToString(httotal[colnew]);
                                    }
                                }
                            }
                            int TotPaymodeValue = 0;
                            int PaymodeCount = chkl_paid.Items.Count;
                            foreach (DictionaryEntry item in httotal)
                            {
                                string col = item.Key.ToString();
                                string value = item.Value.ToString();
                                TotPaymodeValue = (Convert.ToInt32(TotPaymodeValue) + Convert.ToInt32(value));
                            }
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 5] = Convert.ToString(TotPaymodeValue);
                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(TotPaymodeValue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                amount += TotPaymodeValue;
                                grandtotal.Remove(ColCntGrd - 5);
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                            }
                            httotal.Clear();

                            //balance
                            if (totalvalue != 0)
                            {
                                bal = TotalAmount - TotPaymodeValue;
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                    amount += bal;
                                    grandtotal.Remove(ColCntGrd - 4);
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                }
                                fnlamount = 0;
                                if (bal == 0)
                                    dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                else
                                    dicRowColor.Add(dtReport.Rows.Count, "Balance");
                            }
                        }
                        dtReport.Rows.Add(drowGrd);
                    }
                    #endregion

                    #region grandtotal
                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = "Grand Total";
                    double grandvalue = 0;
                    for (int j = 5; j < dtReport.Columns.Count; j++)
                    {
                        double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                        drowGrd[j] = Convert.ToString(grandvalue);
                    }
                    dtReport.Rows.Add(drowGrd);

                    #endregion

                    #region visible

                    grdStudentReport.DataSource = dtReport;
                    grdStudentReport.DataBind();
                    grdStudentReport.Visible = true;

                    GridViewRow row = grdStudentReport.Rows[0];
                    GridViewRow previousRow = grdStudentReport.Rows[1];

                    for (int i = 0; i < dtReport.Columns.Count; i++)
                    {
                        if (row.Cells[i].Text == previousRow.Cells[i].Text)
                        {
                            row.Cells[i].RowSpan = 2;
                            previousRow.Cells[i].Visible = false;
                            //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                            //                       previousRow.Cells[i].RowSpan + 1;
                            //previousRow.Cells[i].Visible = false;
                        }
                    }
                    //ColumnSpan

                    for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                    {
                        TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                        TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                        if (colum.Text == previouscol.Text)
                        {
                            if (previouscol.ColumnSpan == 0)
                            {
                                if (colum.ColumnSpan == 0)
                                {
                                    previouscol.ColumnSpan += 2;
                                }
                                else
                                {
                                    previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                }
                                colum.Visible = false;
                            }
                        }
                    }

                    foreach (KeyValuePair<int, string> dr in dicRowColor)
                    {
                        int g = dr.Key;
                        string DicValue = dr.Value;
                        if (DicValue == "NoBalance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                        }
                        if (DicValue == "Balance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                        }
                    }

                    divcommon.Visible = true;
                    header.Visible = true;
                    div1.Visible = true;
                    divledger.Visible = false;
                    lbl_ledg.Visible = false;
                    lbl_ledg.Text = "";
                    Grdledger.Visible = false;
                    lbl_bat.Visible = false;
                    lbl_bat.Text = "";
                    GrdBatch.Visible = false;
                    lbl_degr.Visible = false;
                    lbl_degr.Text = "";
                    GrdDegree.Visible = false;
                    lbl_dep.Visible = false;
                    lbl_dep.Text = "";
                    GrdDept.Visible = false;
                    lbl_sem.Visible = false; ;
                    lbl_sem.Text = "";
                    GrdSem.Visible = false;
                    rptprint.Visible = true;
                    // rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                    lblhed.Visible = true;
                    lblhed.Text = "Ledgers";
                    pheaderfilter.Visible = true;
                    pcolumnorder.Visible = true;
                    //pnlledgercolorder.Visible = false;
                    //Pnlledcolorder.Visible = false;
                    //pnl_batchcolorder.Visible = false;
                    //pnl_batcolorder.Visible = false;
                    //pnl_degcolorder.Visible = false;
                    //pnl_degreecolorder.Visible = false;
                    //pnl_deptcolord.Visible = false;
                    //pnl_deptcolorder.Visible = false;
                    //pnl_semcolord.Visible = false;
                    //pnl_semcolorder.Visible = false;
                    //btn_fpled.Visible = false;
                    //btn_fpbat.Visible = false;
                    //btn_fpdeg.Visible = false;
                    //btn_fpdep.Visible = false;
                    ////  rptprint.Visible = false;
                    //pnl_studcolord.Visible = false;
                    //pnl_studcolorder.Visible = false;
                    divstudcell.Visible = false;
                    lbl_semcell.Text = "";
                    divdept.Visible = false;
                    divdegree.Visible = false;
                    divbatch.Visible = false;
                    header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                    div1.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                    #endregion

                }
                else
                {
                    grdStudentReport.Visible = false;
                    div1.Visible = false;
                    rptprint.Visible = false;
                    pheaderfilter.Visible = false;
                    pcolumnorder.Visible = false;
                    lblhed.Text = "";
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "No Record Found";
                }
            }
            #endregion
        }
        catch (Exception ex) { }
    }

    #endregion

    #region batchmethod

    public void batchvalues()
    {
        try
        {
            ArrayList arrColBatchNames = new ArrayList();
            ArrayList arrColBatchNames2 = new ArrayList();

            #region without Academic Year

            if (!cbAcdYear.Checked)
            {
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        #region design

                        loadcolumns();
                        DataView dv = new DataView();
                        int check = 0;
                        arrColBatchNames.Add("S.No");
                        arrColBatchNames2.Add("S.No");
                        dtReport.Columns.Add("S.No");
                        arrColBatchNames.Add("Batch Year");
                        arrColBatchNames2.Add("Batch Year");
                        dtReport.Columns.Add("Batch Year");
                        arrColBatchNames.Add("Student Count");
                        arrColBatchNames2.Add("Student Count");
                        dtReport.Columns.Add("Student Count");
                        arrColBatchNames.Add("Allot");
                        arrColBatchNames2.Add("Allot");
                        dtReport.Columns.Add("Allot");
                        arrColBatchNames.Add("Concession");
                        arrColBatchNames2.Add("Concession");
                        dtReport.Columns.Add("Concession");
                        arrColBatchNames.Add("Scholarship");
                        arrColBatchNames2.Add("Scholarship");
                        dtReport.Columns.Add("Scholarship");
                        arrColBatchNames.Add("Total");
                        arrColBatchNames2.Add("Total");
                        dtReport.Columns.Add("Total");

                        Hashtable newhash = new Hashtable();

                        if (chkl_paid.Items.Count > 0)
                        {
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    arrColBatchNames.Add("Paid");
                                    arrColBatchNames2.Add(chkl_paid.Items[s].Text);
                                    dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                    newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                }
                            }
                            if (check != 0)
                            {
                                arrColBatchNames.Add("Paid");
                                arrColBatchNames2.Add("Total Paid");
                                dtReport.Columns.Add("Total Paid");
                            }
                        }
                        if (check == 0)
                        {
                            arrColBatchNames.Add("Paid");
                            arrColBatchNames2.Add("Paid");
                            dtReport.Columns.Add("Paid");
                        }
                        arrColBatchNames.Add("Balance");
                        arrColBatchNames2.Add("Balance");
                        dtReport.Columns.Add("Balance");
                        arrColBatchNames.Add("Refund Amount");
                        arrColBatchNames2.Add("Refund Amount");
                        dtReport.Columns.Add("Refund Amount");
                        arrColBatchNames.Add("Excess Amount");
                        arrColBatchNames2.Add("Excess Amount");
                        dtReport.Columns.Add("Excess Amount");
                        arrColBatchNames.Add("Fine Amount");
                        arrColBatchNames2.Add("Fine Amount");
                        dtReport.Columns.Add("Fine Amount");
                        DataRow drHdr1 = dtReport.NewRow();
                        DataRow drHdr2 = dtReport.NewRow();
                        for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                        {
                            drHdr1[grCol] = arrColBatchNames[grCol];
                            drHdr2[grCol] = arrColBatchNames2[grCol];
                        }
                        dtReport.Rows.Add(drHdr1);
                        dtReport.Rows.Add(drHdr2);

                        #endregion

                        #region value
                        double bal = 0;
                        double totamount = 0;
                        double fnlamount = 0;
                        double allotamt = 0;
                        double consamt = 0;
                        double govt = 0;
                        double tot_amount = 0;
                        double totalvalue = 0;
                        double StudentCount = 0;
                        int ColCntGrd = 0;
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = Convert.ToString(i + 1);
                            drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["batch_year"].ToString());

                            //StudentCount Added by saranya on 25/01/2018//
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["studcount"]), out StudentCount);
                            drowGrd[2] = Convert.ToString(StudentCount);
                            if (!grandtotal.ContainsKey(2))
                                grandtotal.Add(2, Convert.ToString(StudentCount));
                            else
                            {
                                double count = 0;
                                double.TryParse(Convert.ToString(grandtotal[2]), out count);
                                count += StudentCount;
                                grandtotal.Remove(2);
                                grandtotal.Add(2, Convert.ToString(count));
                            }
                            //===========================================//


                            //allot
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                            drowGrd[3] = Convert.ToString(allotamt);
                            if (!grandtotal.ContainsKey(3))
                                grandtotal.Add(3, Convert.ToString(allotamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[3]), out amount);
                                amount += allotamt;
                                grandtotal.Remove(3);
                                grandtotal.Add(3, Convert.ToString(amount));
                            }
                            //consession
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                            drowGrd[4] = Convert.ToString(consamt);
                            if (!grandtotal.ContainsKey(4))
                                grandtotal.Add(4, Convert.ToString(consamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                amount += consamt;
                                grandtotal.Remove(4);
                                grandtotal.Add(4, Convert.ToString(amount));
                            }
                            //government
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                            drowGrd[5] = Convert.ToString(govt);
                            if (!grandtotal.ContainsKey(5))
                                grandtotal.Add(5, Convert.ToString(govt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                amount += govt;
                                grandtotal.Remove(5);
                                grandtotal.Add(5, Convert.ToString(amount));
                            }
                            //total
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                            drowGrd[6] = Convert.ToString(totalvalue);
                            if (!grandtotal.ContainsKey(6))
                                grandtotal.Add(6, Convert.ToString(totalvalue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                amount += totalvalue;
                                grandtotal.Remove(6);
                                grandtotal.Add(6, Convert.ToString(amount));
                            }
                            //paid paymode cout=0
                            double paidvalue = 0;
                            if (check == 0)
                            {
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                                fnlamount = Convert.ToDouble(paidvalue);
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 6] = Convert.ToString(paidvalue);
                                if (!grandtotal.ContainsKey(ColCntGrd - 6))
                                    grandtotal.Add(ColCntGrd - 6, Convert.ToString(paidvalue));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 6]), out amount);
                                    amount += paidvalue;
                                    grandtotal.Remove(ColCntGrd - 6);
                                    grandtotal.Add(ColCntGrd - 6, Convert.ToString(amount));
                                }
                            }
                            //refund
                            double refund = 0;
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                            if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                amount += refund;
                                grandtotal.Remove(ColCntGrd - 3);
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                            }
                            //excess
                            DataView dvex = new DataView();
                            if (ds.Tables[2].Rows.Count > 0)
                            {
                                ds.Tables[2].DefaultView.RowFilter = "Batch_Year='" + Convert.ToString(ds.Tables[0].Rows[i]["Batch_Year"]) + "'";
                                dvex = ds.Tables[2].DefaultView;
                                if (dvex.Count > 0 && dvex != null)
                                {
                                    for (int k = 0; k < dvex.Count; k++)
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                        tot_amount += amount;
                                    }
                                }
                            }
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                amount += tot_amount;
                                grandtotal.Remove(ColCntGrd - 2);
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                            }
                            tot_amount = 0;
                            //paymode values
                            if (ds.Tables[1].Rows.Count > 0)
                            {
                                for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                {
                                    if (chkl_paid.Items[pay].Selected == true)
                                    {
                                        double paidamt = 0;
                                        ds.Tables[1].DefaultView.RowFilter = "batch_year='" + Convert.ToString(ds.Tables[0].Rows[i]["batch_year"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                        dv = ds.Tables[1].DefaultView;
                                        int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                        for (int k = 0; k < dv.Count; k++)
                                        {
                                            double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                            fnlamount = fnlamount + totamount;
                                            paidamt = paidamt + totamount;
                                        }
                                        drowGrd[colnew] = Convert.ToString(paidamt);
                                        if (!grandtotal.ContainsKey(colnew))
                                            grandtotal.Add(colnew, Convert.ToString(paidamt));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                            amount += paidamt;
                                            grandtotal.Remove(colnew);
                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                        }
                                        paidamt = 0;
                                    }
                                }
                                if (check != 0)
                                {
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                        amount += fnlamount;
                                        grandtotal.Remove(ColCntGrd - 5);
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                    }
                                }
                                //balance
                                if (totalvalue != 0)
                                {
                                    bal = totalvalue - fnlamount;
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                        amount += bal;
                                        grandtotal.Remove(ColCntGrd - 4);
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                    }
                                    fnlamount = 0;
                                    if (bal == 0)
                                        dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                    else
                                        dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                }
                            }
                            else
                            {
                                bal = Convert.ToDouble(totalvalue);
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                    amount += bal;
                                    grandtotal.Remove(ColCntGrd - 4);
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                }
                            }
                            dtReport.Rows.Add(drowGrd);
                        }
                        #endregion

                        #region grandtot
                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = "Grand Total";
                        double grandvalue = 0;
                        for (int j = 2; j < dtReport.Columns.Count; j++)
                        {
                            double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                            drowGrd[j] = Convert.ToString(grandvalue);
                        }
                        dtReport.Rows.Add(drowGrd);

                        #endregion

                        #region visible
                        grdStudentReport.DataSource = dtReport;
                        grdStudentReport.DataBind();
                        grdStudentReport.Visible = true;

                        GridViewRow row = grdStudentReport.Rows[0];
                        GridViewRow previousRow = grdStudentReport.Rows[1];

                        for (int i = 0; i < dtReport.Columns.Count; i++)
                        {
                            if (row.Cells[i].Text == previousRow.Cells[i].Text)
                            {
                                row.Cells[i].RowSpan = 2;
                                previousRow.Cells[i].Visible = false;
                                //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                                //                       previousRow.Cells[i].RowSpan + 1;
                                //previousRow.Cells[i].Visible = false;
                            }
                        }
                        //ColumnSpan

                        for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                        {
                            TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                            TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                            if (colum.Text == previouscol.Text)
                            {
                                if (previouscol.ColumnSpan == 0)
                                {
                                    if (colum.ColumnSpan == 0)
                                    {
                                        previouscol.ColumnSpan += 2;
                                    }
                                    else
                                    {
                                        previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                    }
                                    colum.Visible = false;
                                }
                            }
                        }

                        foreach (KeyValuePair<int, string> dr in dicRowColor)
                        {
                            int g = dr.Key;
                            string DicValue = dr.Value;
                            if (DicValue == "NoBalance")
                            {
                                grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                            }
                            if (DicValue == "Balance")
                            {
                                grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                            }
                        }

                        divcommon.Visible = true;
                        header.Visible = true;
                        div1.Visible = true;
                        divledger.Visible = false;
                        lbl_ledg.Visible = false;
                        lbl_ledg.Text = "";
                        Grdledger.Visible = false;
                        lbl_bat.Visible = false;
                        lbl_bat.Text = "";
                        GrdBatch.Visible = false;
                        lbl_degr.Visible = false;
                        lbl_degr.Text = "";
                        GrdDegree.Visible = false;
                        lbl_dep.Visible = false;
                        lbl_dep.Text = "";
                        GrdDept.Visible = false;
                        lbl_sem.Visible = false; ;
                        lbl_sem.Text = "";
                        GrdSem.Visible = false;
                        rptprint.Visible = true;
                        // rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                        lblhed.Visible = true;
                        lblhed.Text = "Batch";
                        pheaderfilter.Visible = true;
                        pcolumnorder.Visible = true;
                        //pnlledgercolorder.Visible = false;
                        //Pnlledcolorder.Visible = false;
                        //pnl_batchcolorder.Visible = false;
                        //pnl_batcolorder.Visible = false;
                        //pnl_degcolorder.Visible = false;
                        //pnl_degreecolorder.Visible = false;
                        //pnl_deptcolord.Visible = false;
                        //pnl_deptcolorder.Visible = false;
                        //pnl_semcolord.Visible = false;
                        //pnl_semcolorder.Visible = false;
                        //btn_fpled.Visible = false;
                        //btn_fpbat.Visible = false;
                        //btn_fpdeg.Visible = false;
                        //btn_fpdep.Visible = false;
                        //// rptprint.Visible = false;
                        //pnl_studcolord.Visible = false;
                        //pnl_studcolorder.Visible = false;
                        divstudcell.Visible = false;
                        lbl_semcell.Text = "";
                        divdept.Visible = false;
                        divdegree.Visible = false;
                        divbatch.Visible = false;
                        header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                        div1.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                        #endregion
                    }
                    else
                    {
                        grdStudentReport.Visible = false;
                        div1.Visible = false;
                        rptprint.Visible = false;
                        pheaderfilter.Visible = false;
                        pcolumnorder.Visible = false;
                        lblhed.Text = "";
                        imgdiv2.Visible = true;
                        lbl_alert.Visible = true;
                        lbl_alert.Text = "No Record Found";
                    }
                }
            }
            #endregion

            #region with academic Year setting added by saranya on 05/02/2018

            else
            {
                #region design
                loadcolumns();
                DataView dv = new DataView();
                int check = 0;
                arrColBatchNames.Add("S.No");
                arrColBatchNames2.Add("S.No");
                dtReport.Columns.Add("S.No");
                arrColBatchNames.Add("Batch Year");
                arrColBatchNames2.Add("Batch Year");
                dtReport.Columns.Add("Batch Year");
                arrColBatchNames.Add("Student Count");
                arrColBatchNames2.Add("Student Count");
                dtReport.Columns.Add("Student Count");
                arrColBatchNames.Add("Allot");
                arrColBatchNames2.Add("Allot");
                dtReport.Columns.Add("Allot");
                arrColBatchNames.Add("Concession");
                arrColBatchNames2.Add("Concession");
                dtReport.Columns.Add("Concession");
                arrColBatchNames.Add("Scholarship");
                arrColBatchNames2.Add("Scholarship");
                dtReport.Columns.Add("Scholarship");
                arrColBatchNames.Add("Total");
                arrColBatchNames2.Add("Total");
                dtReport.Columns.Add("Total");

                Hashtable newhash = new Hashtable();

                if (chkl_paid.Items.Count > 0)
                {
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            check++;
                            arrColBatchNames.Add("Paid");
                            arrColBatchNames2.Add(chkl_paid.Items[s].Text);
                            dtReport.Columns.Add(chkl_paid.Items[s].Text);
                            newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                        }
                    }
                    if (check != 0)
                    {
                        arrColBatchNames.Add("Paid");
                        arrColBatchNames2.Add("Total Paid");
                        dtReport.Columns.Add("Total Paid");
                    }
                }
                if (check == 0)
                {
                    arrColBatchNames.Add("Paid");
                    arrColBatchNames2.Add("Paid");
                    dtReport.Columns.Add("Paid");
                }
                arrColBatchNames.Add("Balance");
                arrColBatchNames2.Add("Balance");
                dtReport.Columns.Add("Balance");
                arrColBatchNames.Add("Refund Amount");
                arrColBatchNames2.Add("Refund Amount");
                dtReport.Columns.Add("Refund Amount");
                arrColBatchNames.Add("Excess Amount");
                arrColBatchNames2.Add("Excess Amount");
                dtReport.Columns.Add("Excess Amount");
                arrColBatchNames.Add("Fine Amount");
                arrColBatchNames2.Add("Fine Amount");
                dtReport.Columns.Add("Fine Amount");
                DataRow drHdr1 = dtReport.NewRow();
                DataRow drHdr2 = dtReport.NewRow();
                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                {
                    drHdr1[grCol] = arrColBatchNames[grCol];
                    drHdr2[grCol] = arrColBatchNames2[grCol];
                }
                dtReport.Rows.Add(drHdr1);
                dtReport.Rows.Add(drHdr2);

                #endregion

                Dictionary<string, string> getAcdYear = new Dictionary<string, string>();
                DataTable dtYear = new DataTable();
                DataTable dtAllot = new DataTable();
                DataTable dtPaid = new DataTable();
                DataTable dtstudCnt = new DataTable();
                DataTable dtFirst = new DataTable();
                if (cbAcdYear.Checked)
                {
                    #region Academic Year
                    DataSet dsNormal = ds.Copy();
                    try
                    {
                        string clgCode = Convert.ToString(ddl_collegename.SelectedItem.Value);
                        string acdYear = Convert.ToString(ddlAcademic.SelectedItem.Text);
                        getAcdYear = getOldSettings(acdYear);//(acdYear, clgCode);
                        DataSet dsFinal = new DataSet();
                        if (getAcdYear.Count > 0)
                        {
                            bool boolDs = false;
                            dtFirst = ds.Tables[0].DefaultView.ToTable();
                            foreach (KeyValuePair<string, string> getVal in getAcdYear)
                            {
                                string feeCate = getVal.Value.Replace(",", "','");
                                string degcourseid = Convert.ToString(getCblSelectedValue(cbl_degree));

                                ds.Tables[4].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "'";
                                dtYear = ds.Tables[4].DefaultView.ToTable();

                                ds.Tables[1].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";
                                dtAllot = ds.Tables[1].DefaultView.ToTable();

                                ds.Tables[2].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";
                                dtPaid = ds.Tables[2].DefaultView.ToTable();

                                ds.Tables[0].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' ";// and feecategory in('" + feeCate + "')";
                                dtstudCnt = ds.Tables[0].DefaultView.ToTable();
                                if (!boolDs)
                                {
                                    dsFinal.Reset();
                                    dsFinal.Tables.Add(dtFirst);
                                    dsFinal.Tables.Add(dtAllot);
                                    dsFinal.Tables.Add(dtPaid);
                                    dsFinal.Tables.Add(dtYear);
                                    dsFinal.Tables.Add(dtstudCnt);
                                    boolDs = true;
                                }
                                else
                                {
                                    // ds.Merge(ds.Tables[0]);
                                    dsFinal.Merge(dtAllot);
                                    dsFinal.Merge(dtPaid);
                                    dsFinal.Merge(dtYear);
                                    dsFinal.Merge(dtstudCnt);
                                }
                            }
                        }
                        if (dsFinal.Tables.Count > 0 && dsFinal.Tables[0].Rows.Count > 0)
                        {
                            ds.Reset();
                            ds = dsFinal.Copy();
                        }
                    }
                    catch
                    {
                        ds.Reset();
                        ds = dsNormal.Copy();
                    }
                    #endregion
                }
                Hashtable httotal = new Hashtable();
                Dictionary<string, string> currentSem = getCurSem();

                bool boolClg = false;
                int row1 = 0;
                int rowCount = 0;
                if (dtFirst.Rows.Count > 0)
                {
                    #region new value

                    for (int row = 0; row < dtFirst.Rows.Count; row++)
                    {
                        double tempStud = 0;
                        double demandAmt = 0;
                        double paidAmt = 0;
                        double TotalAmount = 0;
                        double tot_amount = 0;
                        double fnlamount = 0;
                        double studCnt = 0;
                        double concessionamt = 0;
                        double allotamt = 0;
                        double tempPaidDr = 0;
                        double tempAllot = 0;
                        double allotmentAmount = 0;
                        double ConcessionAmount = 0;
                        double Government = 0;
                        double scholarship = 0;
                        double totalvalue = 0;
                        double bal = 0;
                        double totamount = 0;
                        double paidvalue = 0;
                        double refund = 0;
                        double refundAmount = 0;
                        double paidamt = 0;
                        int colnew = 0;
                        int countval = 0;
                        int ColCntGrd = 0;
                        string clgCode = Convert.ToString(ds.Tables[0].Rows[row]["college_code"]);
                        string batchYear = Convert.ToString(ds.Tables[0].Rows[row]["batch_year"]);

                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = Convert.ToString(rowCount + 1);
                        drowGrd[1] = Convert.ToString(dtFirst.Rows[row]["batch_year"].ToString());

                        if (ds.Tables[4].Rows.Count > 0)
                        {
                            boolClg = false;
                            ds.Tables[4].DefaultView.RowFilter = "college_Code='" + clgCode + "' and batch_year='" + batchYear + "' ";
                            DataTable dtbatch = ds.Tables[4].DefaultView.ToTable();
                            if (ds.Tables[4].Rows.Count > 0)
                            {
                                for (int bat = 0; bat < dtbatch.Rows.Count; bat++)
                                {
                                    string batch = Convert.ToString(dtbatch.Rows[bat]["batch_year"]);
                                    string curSem = string.Empty;
                                    string curSemCode = string.Empty;
                                    if (!cbAcdYear.Checked)
                                    {
                                        if (currentSem.ContainsKey(batch))
                                            curSem = Convert.ToString(currentSem[batch]);
                                        Dictionary<string, string> getFeeCode = getFeecode(clgCode);//get current sem code 
                                        curSem = getCurYear(curSem);
                                        if (getFeeCode.ContainsKey(curSem))
                                            curSemCode = Convert.ToString(getFeeCode[curSem.Trim()]);
                                    }
                                    else
                                    {
                                        if (getAcdYear.ContainsKey(clgCode + "$" + batch))
                                        {
                                            curSemCode = Convert.ToString(getAcdYear[clgCode + "$" + batch]);
                                            curSemCode = curSemCode.Replace(",", "','");
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(curSemCode))
                                    {
                                        string batch_year = Convert.ToString(ds.Tables[0].Rows[row]["batch_year"]);
                                        if (ds.Tables[1].Rows.Count > 0)
                                        {
                                            if (checkSchoolSetting() != 0)
                                            {
                                                ds.Tables[1].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch_year + "'";
                                            }
                                            else
                                            {
                                                ds.Tables[1].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "') ";
                                            }
                                            DataTable dvpaid = ds.Tables[1].DefaultView.ToTable();

                                            if (dvpaid.Rows.Count > 0)
                                            {
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(Allot)", "")), out allotamt);
                                                allotmentAmount += allotamt;
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(Consustion)", "")), out concessionamt);
                                                ConcessionAmount += concessionamt;
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(Government)", "")), out scholarship);
                                                Government += scholarship;
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(total)", "")), out tempAllot);
                                                demandAmt += tempAllot;
                                                TotalAmount += tempAllot;
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(RefundAmount)", "")), out refund);
                                                refundAmount += refund;
                                            }
                                        }
                                        if (ds.Tables[2].Rows.Count > 0)
                                        {
                                            ds.Tables[2].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch + "'";
                                            DataTable dvpaid = ds.Tables[2].DefaultView.ToTable();
                                            if (dvpaid.Rows.Count > 0)
                                            {
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(total)", "")), out tempPaidDr);
                                                paidAmt += tempPaidDr;
                                            }
                                        }
                                        if (ds.Tables[0].Rows.Count > 0)
                                        {
                                            ds.Tables[0].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and batch_year='" + batch + "' ";
                                            DataTable dvpaids = ds.Tables[0].DefaultView.ToTable();
                                            if (dvpaids.Rows.Count > 0)
                                            {
                                                DataTable dtColumns = dvpaids.DefaultView.ToTable(true, "studCount", "college_code");
                                                double.TryParse(Convert.ToString(dvpaids.Rows[0]["studcount"]), out tempStud);
                                                studCnt += tempStud;
                                            }
                                        }
                                        DataView dvex = new DataView();
                                        if (ds.Tables[3].Rows.Count > 0)
                                        {
                                            ds.Tables[3].DefaultView.RowFilter = " batch_year='" + batch + "' and feecategory in('" + curSemCode + "') ";
                                            dvex = ds.Tables[3].DefaultView;
                                            if (dvex.Count > 0 && dvex != null)
                                            {
                                                for (int k = 0; k < dvex.Count; k++)
                                                {
                                                    double amount = 0;
                                                    double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                                    tot_amount += amount;
                                                }
                                            }
                                        }

                                        //paymode values
                                        if (ds.Tables[2].Rows.Count > 0)
                                        {
                                            for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                            {
                                                if (chkl_paid.Items[pay].Selected == true)
                                                {
                                                    if (checkSchoolSetting() != 0)
                                                    {
                                                        ds.Tables[2].DefaultView.RowFilter = "PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch + "'";
                                                    }
                                                    else
                                                    {
                                                        ds.Tables[2].DefaultView.RowFilter = "PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and feecategory in('" + curSemCode + "')";
                                                    }
                                                    dv = ds.Tables[2].DefaultView;
                                                    colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                                    for (int k = 0; k < dv.Count; k++)
                                                    {
                                                        double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                                        fnlamount = fnlamount + totamount;
                                                        paidamt = paidamt + totamount;
                                                    }
                                                    if (!httotal.ContainsKey(colnew))
                                                        httotal.Add(colnew, Convert.ToString(fnlamount));
                                                    else
                                                    {
                                                        double amount = 0;
                                                        double.TryParse(Convert.ToString(httotal[colnew]), out amount);
                                                        amount += fnlamount;
                                                        httotal.Remove(colnew);
                                                        httotal.Add(colnew, Convert.ToString(amount));
                                                    }

                                                    fnlamount = 0;
                                                    drowGrd[colnew] = Convert.ToString(paidamt);
                                                    if (!grandtotal.ContainsKey(colnew))
                                                        grandtotal.Add(colnew, Convert.ToString(paidamt));
                                                    else
                                                    {
                                                        double amount = 0;
                                                        double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                        amount += paidamt;
                                                        grandtotal.Remove(colnew);
                                                        grandtotal.Add(colnew, Convert.ToString(amount));
                                                    }
                                                    paidamt = 0;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            bal = Convert.ToDouble(totalvalue);
                                            ColCntGrd = dtReport.Columns.Count;
                                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                            if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                            else
                                            {
                                                double amount = 0;
                                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                                amount += bal;
                                                grandtotal.Remove(ColCntGrd - 4);
                                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                            }
                                        }
                                        boolClg = true;
                                    }
                                }
                                if (boolClg)
                                {
                                    drowGrd[2] = Convert.ToString(tempStud);
                                    if (!grandtotal.ContainsKey(2))
                                        grandtotal.Add(2, Convert.ToString(tempStud));
                                    else
                                    {
                                        double count = 0;
                                        double.TryParse(Convert.ToString(grandtotal[2]), out count);
                                        count += tempStud;
                                        grandtotal.Remove(2);
                                        grandtotal.Add(2, Convert.ToString(count));
                                    }
                                    //allot
                                    drowGrd[3] = Convert.ToString(allotmentAmount);
                                    if (!grandtotal.ContainsKey(3))
                                        grandtotal.Add(3, Convert.ToString(allotmentAmount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[3]), out amount);
                                        amount += allotmentAmount;
                                        grandtotal.Remove(3);
                                        grandtotal.Add(3, Convert.ToString(amount));
                                    }
                                    //consession
                                    drowGrd[4] = Convert.ToString(ConcessionAmount);
                                    if (!grandtotal.ContainsKey(4))
                                        grandtotal.Add(4, Convert.ToString(ConcessionAmount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                        amount += ConcessionAmount;
                                        grandtotal.Remove(4);
                                        grandtotal.Add(4, Convert.ToString(amount));
                                    }
                                    //government
                                    drowGrd[5] = Convert.ToString(Government);
                                    if (!grandtotal.ContainsKey(5))
                                        grandtotal.Add(5, Convert.ToString(Government));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                        amount += Government;
                                        grandtotal.Remove(5);
                                        grandtotal.Add(5, Convert.ToString(amount));
                                    }
                                    //total
                                    drowGrd[6] = Convert.ToString(demandAmt);
                                    if (!grandtotal.ContainsKey(6))
                                        grandtotal.Add(6, Convert.ToString(demandAmt));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                        amount += demandAmt;
                                        grandtotal.Remove(6);
                                        grandtotal.Add(6, Convert.ToString(amount));
                                    }
                                    //paid paymode count=0
                                    if (countval == 0)
                                    {
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                            amount += paidvalue;
                                            grandtotal.Remove(ColCntGrd - 5);
                                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                        }
                                    }
                                    //refund
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 3] = Convert.ToString(refundAmount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(refundAmount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                        amount += refundAmount;
                                        grandtotal.Remove(ColCntGrd - 3);
                                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                                    }

                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                        amount += tot_amount;
                                        grandtotal.Remove(ColCntGrd - 2);
                                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                                    }
                                    tot_amount = 0;
                                    //Paymode values Printing
                                    for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                    {
                                        if (chkl_paid.Items[pay].Selected == true)
                                        {
                                            colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                            if (httotal.Contains(colnew))
                                            {
                                                drowGrd[colnew] = Convert.ToString(httotal[colnew]);
                                            }
                                        }
                                    }
                                    int TotPaymodeValue = 0;
                                    int PaymodeCount = chkl_paid.Items.Count;
                                    foreach (DictionaryEntry item in httotal)
                                    {
                                        string col = item.Key.ToString();
                                        string value = item.Value.ToString();
                                        TotPaymodeValue = (Convert.ToInt32(TotPaymodeValue) + Convert.ToInt32(value));
                                    }
                                    if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(TotPaymodeValue));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                        amount += TotPaymodeValue;
                                        grandtotal.Remove(ColCntGrd - 5);
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                    }
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 5] = Convert.ToString(TotPaymodeValue);
                                    httotal.Clear();

                                    //balance
                                    bal = TotalAmount - TotPaymodeValue;
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                        amount += bal;
                                        grandtotal.Remove(ColCntGrd - 4);
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                    }
                                    TotalAmount = 0;
                                    if (bal == 0)
                                        dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                    else
                                        dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                    dtReport.Rows.Add(drowGrd);
                                    rowCount++;
                                }
                            }
                        }
                    }
                    #endregion

                    #region grandtot

                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = "Grand Total";
                    double grandvalue = 0;
                    for (int j = 2; j < dtReport.Columns.Count; j++)
                    {
                        double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                        drowGrd[j] = Convert.ToString(grandvalue);
                    }
                    dtReport.Rows.Add(drowGrd);

                    #endregion

                    #region visible
                    grdStudentReport.DataSource = dtReport;
                    grdStudentReport.DataBind();
                    grdStudentReport.Visible = true;

                    GridViewRow rows = grdStudentReport.Rows[0];
                    GridViewRow previousRow = grdStudentReport.Rows[1];

                    for (int i = 0; i < dtReport.Columns.Count; i++)
                    {
                        if (rows.Cells[i].Text == previousRow.Cells[i].Text)
                        {
                            rows.Cells[i].RowSpan = 2;
                            previousRow.Cells[i].Visible = false;
                            //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                            //                       previousRow.Cells[i].RowSpan + 1;
                            //previousRow.Cells[i].Visible = false;
                        }
                    }
                    //ColumnSpan

                    for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                    {
                        TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                        TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                        if (colum.Text == previouscol.Text)
                        {
                            if (previouscol.ColumnSpan == 0)
                            {
                                if (colum.ColumnSpan == 0)
                                {
                                    previouscol.ColumnSpan += 2;
                                }
                                else
                                {
                                    previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                }
                                colum.Visible = false;
                            }
                        }
                    }

                    foreach (KeyValuePair<int, string> dr in dicRowColor)
                    {
                        int g = dr.Key;
                        string DicValue = dr.Value;
                        if (DicValue == "NoBalance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                        }
                        if (DicValue == "Balance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                        }
                    }
                    divcommon.Visible = true;
                    header.Visible = true;
                    div1.Visible = true;
                    divledger.Visible = false;
                    lbl_ledg.Visible = false;
                    lbl_ledg.Text = "";
                    Grdledger.Visible = false;
                    lbl_bat.Visible = false;
                    lbl_bat.Text = "";
                    GrdBatch.Visible = false;
                    lbl_degr.Visible = false;
                    lbl_degr.Text = "";
                    GrdDegree.Visible = false;
                    lbl_dep.Visible = false;
                    lbl_dep.Text = "";
                    GrdDept.Visible = false;
                    lbl_sem.Visible = false; ;
                    lbl_sem.Text = "";
                    GrdSem.Visible = false;
                    rptprint.Visible = true;
                    // rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                    lblhed.Visible = true;
                    lblhed.Text = "Batch";
                    pheaderfilter.Visible = true;
                    pcolumnorder.Visible = true;
                    //pnlledgercolorder.Visible = false;
                    //Pnlledcolorder.Visible = false;
                    //pnl_batchcolorder.Visible = false;
                    //pnl_batcolorder.Visible = false;
                    //pnl_degcolorder.Visible = false;
                    //pnl_degreecolorder.Visible = false;
                    //pnl_deptcolord.Visible = false;
                    //pnl_deptcolorder.Visible = false;
                    //pnl_semcolord.Visible = false;
                    //pnl_semcolorder.Visible = false;
                    //btn_fpled.Visible = false;
                    //btn_fpbat.Visible = false;
                    //btn_fpdeg.Visible = false;
                    //btn_fpdep.Visible = false;
                    //// rptprint.Visible = false;
                    //pnl_studcolord.Visible = false;
                    //pnl_studcolorder.Visible = false;
                    divstudcell.Visible = false;
                    lbl_semcell.Text = "";
                    divdept.Visible = false;
                    divdegree.Visible = false;
                    divbatch.Visible = false;
                    header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                    div1.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                    #endregion
                }
                else
                {
                    grdStudentReport.Visible = false;
                    div1.Visible = false;
                    rptprint.Visible = false;
                    pheaderfilter.Visible = false;
                    pcolumnorder.Visible = false;
                    lblhed.Text = "";
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "No Record Found";
                }
            }
            #endregion
        }
        catch (Exception ex) { }
    }

    #endregion

    #region degreemethod

    public void degreevalues()
    {
        try
        {
            ArrayList arrColDegreeNames = new ArrayList();
            ArrayList arrColDegreeNames2 = new ArrayList();
            int ColCntGrd = 0;

            #region Without Academic YearSettings
            if (!cbAcdYear.Checked)
            {
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        #region design

                        loadcolumns();
                        DataView dv = new DataView();
                        int countval = 0;
                        arrColDegreeNames.Add("S.No");
                        arrColDegreeNames2.Add("S.No");
                        dtReport.Columns.Add("S.No");
                        arrColDegreeNames.Add(lbldeg.Text);
                        arrColDegreeNames2.Add(lbldeg.Text);
                        dtReport.Columns.Add(lbldeg.Text);
                        arrColDegreeNames.Add("Student Count");
                        arrColDegreeNames2.Add("Student Count");
                        dtReport.Columns.Add("Student Count");
                        arrColDegreeNames.Add("Allot");
                        arrColDegreeNames2.Add("Allot");
                        dtReport.Columns.Add("Allot");
                        arrColDegreeNames.Add("Concession");
                        arrColDegreeNames2.Add("Concession");
                        dtReport.Columns.Add("Concession");
                        arrColDegreeNames.Add("Scholarship");
                        arrColDegreeNames2.Add("Scholarship");
                        dtReport.Columns.Add("Scholarship");
                        arrColDegreeNames.Add("Total");
                        arrColDegreeNames2.Add("Total");
                        dtReport.Columns.Add("Total");

                        Hashtable newhash = new Hashtable();

                        if (chkl_paid.Items.Count > 0)
                        {
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    countval++;
                                    arrColDegreeNames.Add("Paid");
                                    arrColDegreeNames2.Add(chkl_paid.Items[s].Text);
                                    dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                    newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                }
                            }
                            if (countval != 0)
                            {
                                arrColDegreeNames.Add("Paid");
                                arrColDegreeNames2.Add("Total Paid");
                                dtReport.Columns.Add("Total Paid");
                            }
                        }
                        if (countval == 0)
                        {
                            arrColDegreeNames.Add("Paid");
                            arrColDegreeNames2.Add("Paid");
                            dtReport.Columns.Add("Paid");
                        }
                        arrColDegreeNames.Add("Balance");
                        arrColDegreeNames2.Add("Balance");
                        dtReport.Columns.Add("Balance");
                        arrColDegreeNames.Add("Refund Amount");
                        arrColDegreeNames2.Add("Refund Amount");
                        dtReport.Columns.Add("Refund Amount");
                        arrColDegreeNames.Add("Excess Amount");
                        arrColDegreeNames2.Add("Excess Amount");
                        dtReport.Columns.Add("Excess Amount");
                        arrColDegreeNames.Add("Fine Amount");
                        arrColDegreeNames2.Add("Fine Amount");
                        dtReport.Columns.Add("Fine Amount");
                        DataRow drHdr1 = dtReport.NewRow();
                        DataRow drHdr2 = dtReport.NewRow();
                        for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                        {
                            drHdr1[grCol] = arrColDegreeNames[grCol];
                            drHdr2[grCol] = arrColDegreeNames2[grCol];
                        }
                        dtReport.Rows.Add(drHdr1);
                        dtReport.Rows.Add(drHdr2);

                        #endregion

                        #region value

                        double allotamt = 0;
                        double consamt = 0;
                        double govt = 0;
                        double tot_amount = 0;
                        double totalvalue = 0;
                        double bal = 0;
                        double totamount = 0;
                        double fnlamount = 0;
                        double StudentCount = 0;

                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = Convert.ToString(i + 1);
                            drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["DegreeName"].ToString());
                            //FpSpread1.Sheets[0].Cells[i, 1].Tag = Convert.ToString(ds.Tables[0].Rows[i]["Course_Id"].ToString());
                            //string collcode =Convert.ToString( ds.Tables[0].Rows[row]["college_code"]);
                            //string batch = Convert.ToString(ds.Tables[3].Rows[row]["batch_year"]);
                            //string feecat="";

                            //    foreach(KeyValuePair <string ,string > abc in htAcademic)
                            //    {
                            //        if(abc.Key==(collcode+"$"+batch)){
                            //            feecat=abc.Value;
                            //        }
                            //    }
                            //    ds.Tables[0].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + feecat + "') and batch_year='" + batch + "'";
                            //    DataTable dvpaid = ds.Tables[0].DefaultView.ToTable();
                            //    double tempAllot = 0;
                            //    double demandAmt = 0;
                            //    if (dvpaid.Rows.Count > 0)
                            //        //------------Added by abarna------------
                            //        double.TryParse(Convert.ToString(dvpaid.Compute("sum(Allot)", "")), out allotamt);
                            //    double.TryParse(Convert.ToString(dvpaid.Compute("sum(Consustion)", "")), out consamt);
                            //    //double.TryParse(Convert.ToString(dvpaid.Compute("sum(paid)", "")), out paidAmt);
                            //    //double.TryParse(Convert.ToString(dvpaid.Compute("sum(bal)", "")), out balAmt);
                            //    //----------------------------------------------
                            //    //  double.TryParse(Convert.ToString(dvpaid[0]["Concession"]), out concessionAmt);
                            //       double.TryParse(Convert.ToString(dvpaid.Compute("sum(total)", "")), out tempAllot);
                            //    //double.TryParse(Convert.ToString(dvpaid[0]["total"]), out tempAllot);
                            //    demandAmt += tempAllot;

                            //StudentCount Added by saranya on 12/01/2018//
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["studcount"]), out StudentCount);
                            drowGrd[2] = Convert.ToString(StudentCount);
                            if (!grandtotal.ContainsKey(2))
                                grandtotal.Add(2, Convert.ToString(StudentCount));
                            else
                            {
                                double count = 0;
                                double.TryParse(Convert.ToString(grandtotal[2]), out count);
                                count += StudentCount;
                                grandtotal.Remove(2);
                                grandtotal.Add(2, Convert.ToString(count));
                            }
                            //===========================================//

                            //allot
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                            drowGrd[3] = Convert.ToString(allotamt);
                            if (!grandtotal.ContainsKey(3))
                                grandtotal.Add(3, Convert.ToString(allotamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[3]), out amount);
                                amount += allotamt;
                                grandtotal.Remove(3);
                                grandtotal.Add(3, Convert.ToString(amount));
                            }
                            //consession
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                            drowGrd[4] = Convert.ToString(consamt);
                            if (!grandtotal.ContainsKey(4))
                                grandtotal.Add(4, Convert.ToString(consamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                amount += consamt;
                                grandtotal.Remove(4);
                                grandtotal.Add(4, Convert.ToString(amount));
                            }
                            //government
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                            drowGrd[5] = Convert.ToString(govt);
                            if (!grandtotal.ContainsKey(5))
                                grandtotal.Add(5, Convert.ToString(govt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                amount += govt;
                                grandtotal.Remove(5);
                                grandtotal.Add(5, Convert.ToString(amount));
                            }
                            //total
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                            drowGrd[6] = Convert.ToString(totalvalue);
                            if (!grandtotal.ContainsKey(6))
                                grandtotal.Add(6, Convert.ToString(totalvalue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                amount += totalvalue;
                                grandtotal.Remove(6);
                                grandtotal.Add(6, Convert.ToString(amount));
                            }
                            //paid paymode count=0
                            double paidvalue = 0;
                            if (countval == 0)
                            {
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                                fnlamount = Convert.ToDouble(paidvalue);
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                    amount += paidvalue;
                                    grandtotal.Remove(ColCntGrd - 5);
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                }
                            }
                            //refund
                            double refund = 0;
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                            if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                amount += refund;
                                grandtotal.Remove(ColCntGrd - 3);
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                            }
                            DataView dvex = new DataView();
                            if (ds.Tables[2].Rows.Count > 0)
                            {
                                ds.Tables[2].DefaultView.RowFilter = "Course_Id='" + Convert.ToString(ds.Tables[0].Rows[i]["Course_Id"]) + "'";
                                dvex = ds.Tables[2].DefaultView;
                                if (dvex.Count > 0 && dvex != null)
                                {
                                    for (int k = 0; k < dvex.Count; k++)
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                        tot_amount += amount;
                                    }
                                }
                            }
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                amount += tot_amount;
                                grandtotal.Remove(ColCntGrd - 2);
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                            }
                            tot_amount = 0;
                            //paymode values
                            if (ds.Tables[1].Rows.Count > 0)
                            {
                                for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                {
                                    if (chkl_paid.Items[pay].Selected == true)
                                    {
                                        double paidamt = 0;
                                        ds.Tables[1].DefaultView.RowFilter = "Course_Id='" + Convert.ToString(ds.Tables[0].Rows[i]["Course_Id"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                        dv = ds.Tables[1].DefaultView;
                                        int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                        for (int k = 0; k < dv.Count; k++)
                                        {
                                            double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                            fnlamount = fnlamount + totamount;
                                            paidamt = paidamt + totamount;
                                        }
                                        drowGrd[colnew] = Convert.ToString(paidamt);
                                        if (!grandtotal.ContainsKey(colnew))
                                            grandtotal.Add(colnew, Convert.ToString(paidamt));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                            amount += paidamt;
                                            grandtotal.Remove(colnew);
                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                        }
                                        paidamt = 0;
                                    }
                                }
                                if (countval != 0)
                                {
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                }
                                if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                    amount += fnlamount;
                                    grandtotal.Remove(ColCntGrd - 5);
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                }
                                //balance
                                if (totalvalue != 0)
                                {
                                    bal = totalvalue - fnlamount;
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                        amount += bal;
                                        grandtotal.Remove(ColCntGrd - 4);
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                    }
                                    fnlamount = 0;
                                    if (bal == 0)
                                        dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                    else
                                        dicRowColor.Add(dtReport.Rows.Count, "Balance");

                                }
                            }
                            else
                            {
                                bal = Convert.ToDouble(totalvalue);
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                    amount += bal;
                                    grandtotal.Remove(ColCntGrd - 4);
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                }
                            }
                            dtReport.Rows.Add(drowGrd);
                        }
                        #endregion

                        #region grandtot
                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = "Grand Total";
                        double grandvalue = 0;
                        for (int j = 2; j < dtReport.Columns.Count; j++)
                        {
                            double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                            drowGrd[j] = Convert.ToString(grandvalue);
                        }
                        dtReport.Rows.Add(drowGrd);

                        #endregion

                        #region visible
                        grdStudentReport.DataSource = dtReport;
                        grdStudentReport.DataBind();
                        grdStudentReport.Visible = true;
                        GridViewRow row = grdStudentReport.Rows[0];
                        GridViewRow previousRow = grdStudentReport.Rows[1];
                        for (int i = 0; i < dtReport.Columns.Count; i++)
                        {
                            if (row.Cells[i].Text == previousRow.Cells[i].Text)
                            {
                                row.Cells[i].RowSpan = 2;
                                previousRow.Cells[i].Visible = false;
                            }
                        }
                        //ColumnSpan

                        for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                        {
                            TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                            TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                            if (colum.Text == previouscol.Text)
                            {
                                if (previouscol.ColumnSpan == 0)
                                {
                                    if (colum.ColumnSpan == 0)
                                    {
                                        previouscol.ColumnSpan += 2;
                                    }
                                    else
                                    {
                                        previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                    }
                                    colum.Visible = false;
                                }
                            }
                        }

                        foreach (KeyValuePair<int, string> dr in dicRowColor)
                        {
                            int g = dr.Key;
                            string DicValue = dr.Value;
                            if (DicValue == "NoBalance")
                            {
                                grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                            }
                            if (DicValue == "Balance")
                            {
                                grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                            }
                        }

                        divcommon.Visible = true;
                        header.Visible = true;
                        div1.Visible = true;
                        divledger.Visible = false;
                        lbl_ledg.Visible = false;
                        lbl_ledg.Text = "";
                        Grdledger.Visible = false;
                        lbl_bat.Visible = false;
                        lbl_bat.Text = "";
                        GrdBatch.Visible = false;
                        lbl_degr.Visible = false;
                        lbl_degr.Text = "";
                        GrdDegree.Visible = false;
                        lbl_dep.Visible = false;
                        lbl_dep.Text = "";
                        GrdDept.Visible = false;
                        lbl_sem.Visible = false; ;
                        lbl_sem.Text = "";
                        GrdSem.Visible = false;
                        rptprint.Visible = true;
                        //  rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                        lblhed.Visible = true;
                        lblhed.Text = "Degree";
                        pheaderfilter.Visible = true;
                        pcolumnorder.Visible = true;
                        //pnlledgercolorder.Visible = false;
                        //Pnlledcolorder.Visible = false;
                        //pnl_batchcolorder.Visible = false;
                        //pnl_batcolorder.Visible = false;
                        //pnl_degcolorder.Visible = false;
                        //pnl_degreecolorder.Visible = false;
                        //pnl_deptcolord.Visible = false;
                        //pnl_deptcolorder.Visible = false;
                        //pnl_semcolord.Visible = false;
                        //pnl_semcolorder.Visible = false;
                        //btn_fpled.Visible = false;
                        //btn_fpbat.Visible = false;
                        //btn_fpdeg.Visible = false;
                        //btn_fpdep.Visible = false;
                        ////  rptprint.Visible = false;
                        //pnl_studcolord.Visible = false;
                        //pnl_studcolorder.Visible = false;
                        divstudcell.Visible = false;
                        lbl_semcell.Text = "";
                        divdept.Visible = false;
                        divdegree.Visible = false;
                        divbatch.Visible = false;
                        header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                        div1.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                        #endregion
                    }
                    else
                    {
                        grdStudentReport.Visible = false;
                        div1.Visible = false;
                        rptprint.Visible = false;
                        pheaderfilter.Visible = false;
                        pcolumnorder.Visible = false;
                        lblhed.Text = "";
                        imgdiv2.Visible = true;
                        lbl_alert.Visible = true;
                        lbl_alert.Text = "No Record Found";
                    }
                }
            }
            #endregion

            #region with Academic Year Setting added by saranya

            else
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    #region design

                    loadcolumns();
                    DataView dv = new DataView();
                    int countval = 0;
                    arrColDegreeNames.Add("S.No");
                    arrColDegreeNames2.Add("S.No");
                    dtReport.Columns.Add("S.No");
                    arrColDegreeNames.Add(lbldeg.Text);
                    arrColDegreeNames2.Add(lbldeg.Text);
                    dtReport.Columns.Add(lbldeg.Text);
                    arrColDegreeNames.Add("Student Count");
                    arrColDegreeNames2.Add("Student Count");
                    dtReport.Columns.Add("Student Count");
                    arrColDegreeNames.Add("Allot");
                    arrColDegreeNames2.Add("Allot");
                    dtReport.Columns.Add("Allot");
                    arrColDegreeNames.Add("Concession");
                    arrColDegreeNames2.Add("Concession");
                    dtReport.Columns.Add("Concession");
                    arrColDegreeNames.Add("Scholarship");
                    arrColDegreeNames2.Add("Scholarship");
                    dtReport.Columns.Add("Scholarship");
                    arrColDegreeNames.Add("Total");
                    arrColDegreeNames2.Add("Total");
                    dtReport.Columns.Add("Total");

                    Hashtable newhash = new Hashtable();

                    if (chkl_paid.Items.Count > 0)
                    {
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                countval++;
                                arrColDegreeNames.Add("Paid");
                                arrColDegreeNames2.Add(chkl_paid.Items[s].Text);
                                dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                            }
                        }
                        if (countval != 0)
                        {
                            arrColDegreeNames.Add("Paid");
                            arrColDegreeNames2.Add("Total Paid");
                            dtReport.Columns.Add("Total Paid");
                        }
                    }
                    if (countval == 0)
                    {
                        arrColDegreeNames.Add("Paid");
                        arrColDegreeNames2.Add("Paid");
                        dtReport.Columns.Add("Paid");
                    }
                    arrColDegreeNames.Add("Balance");
                    arrColDegreeNames2.Add("Balance");
                    dtReport.Columns.Add("Balance");
                    arrColDegreeNames.Add("Refund Amount");
                    arrColDegreeNames2.Add("Refund Amount");
                    dtReport.Columns.Add("Refund Amount");
                    arrColDegreeNames.Add("Excess Amount");
                    arrColDegreeNames2.Add("Excess Amount");
                    dtReport.Columns.Add("Excess Amount");
                    arrColDegreeNames.Add("Fine Amount");
                    arrColDegreeNames2.Add("Fine Amount");
                    dtReport.Columns.Add("Fine Amount");
                    DataRow drHdr1 = dtReport.NewRow();
                    DataRow drHdr2 = dtReport.NewRow();
                    for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                    {
                        drHdr1[grCol] = arrColDegreeNames[grCol];
                        drHdr2[grCol] = arrColDegreeNames2[grCol];
                    }
                    dtReport.Rows.Add(drHdr1);
                    dtReport.Rows.Add(drHdr2);

                    #endregion

                    #region new value

                    Dictionary<string, string> getAcdYear = new Dictionary<string, string>();
                    if (cbAcdYear.Checked)
                    {
                        #region Academic Year
                        DataSet dsNormal = ds.Copy();
                        try
                        {
                            string clgCode = Convert.ToString(ddl_collegename.SelectedItem.Value);
                            string acdYear = Convert.ToString(ddlAcademic.SelectedItem.Text);
                            getAcdYear = getOldSettings(acdYear);//(acdYear, clgCode);
                            DataSet dsFinal = new DataSet();
                            if (getAcdYear.Count > 0)
                            {
                                bool boolDs = false;
                                DataTable dtFirst = ds.Tables[0].DefaultView.ToTable();
                                foreach (KeyValuePair<string, string> getVal in getAcdYear)
                                {
                                    string feeCate = getVal.Value.Replace(",", "','");
                                    string degcourseid = Convert.ToString(getCblSelectedValue(cbl_degree));

                                    ds.Tables[4].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "'";
                                    DataTable dtYear = ds.Tables[4].DefaultView.ToTable();

                                    ds.Tables[1].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";
                                    DataTable dtAllot = ds.Tables[1].DefaultView.ToTable();

                                    ds.Tables[2].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";
                                    DataTable dtPaid = ds.Tables[2].DefaultView.ToTable();

                                    ds.Tables[0].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and Course_Id in('" + degcourseid + "')";// and feecategory in('" + feeCate + "')";
                                    DataTable dtstudCnt = ds.Tables[0].DefaultView.ToTable();
                                    if (!boolDs)
                                    {
                                        dsFinal.Reset();
                                        dsFinal.Tables.Add(dtFirst);
                                        dsFinal.Tables.Add(dtAllot);
                                        dsFinal.Tables.Add(dtPaid);
                                        dsFinal.Tables.Add(dtYear);
                                        dsFinal.Tables.Add(dtstudCnt);
                                        boolDs = true;
                                    }
                                    else
                                    {
                                        // ds.Merge(ds.Tables[0]);
                                        dsFinal.Merge(dtAllot);
                                        dsFinal.Merge(dtPaid);
                                        dsFinal.Merge(dtYear);
                                        dsFinal.Merge(dtstudCnt);
                                    }
                                }
                            }
                            if (dsFinal.Tables.Count > 0 && dsFinal.Tables[0].Rows.Count > 0)
                            {
                                ds.Reset();
                                ds = dsFinal.Copy();
                            }
                        }
                        catch
                        {
                            ds.Reset();
                            ds = dsNormal.Copy();
                        }
                        #endregion
                    }
                    Hashtable httotal = new Hashtable();
                    Dictionary<string, string> currentSem = getCurSem();

                    bool boolClg = false;
                    int row1 = 0;
                    for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                    {
                        #region

                        double tempStud = 0;
                        double demandAmt = 0;
                        double paidAmt = 0;
                        double TotalAmount = 0;
                        double tot_amount = 0;
                        double fnlamount = 0;
                        double studCnt = 0;
                        double concessionamt = 0;
                        double allotamt = 0;
                        double tempPaidDr = 0;
                        double tempAllot = 0;
                        double allotmentAmount = 0;
                        double ConcessionAmount = 0;
                        double Government = 0;
                        double scholarship = 0;
                        double totalvalue = 0;
                        double bal = 0;
                        double totamount = 0;
                        double paidvalue = 0;
                        double refund = 0;
                        double refundAmount = 0;
                        double paidamt = 0;
                        int colnew = 0;
                        string clgCode = Convert.ToString(ds.Tables[0].Rows[row]["college_code"]);

                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = Convert.ToString(row + 1);
                        drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[row]["DegreeName"].ToString());
                        if (ds.Tables[4].Rows.Count > 0)
                        {
                            boolClg = false;
                            ds.Tables[4].DefaultView.RowFilter = "college_Code='" + clgCode + "'";
                            DataTable dtbatch = ds.Tables[4].DefaultView.ToTable();
                            if (dtbatch.Rows.Count > 0)
                            {
                                for (int bat = 0; bat < dtbatch.Rows.Count; bat++)
                                {
                                    string batch = Convert.ToString(dtbatch.Rows[bat]["batch_year"]);
                                    string curSem = string.Empty;
                                    string curSemCode = string.Empty;
                                    if (!cbAcdYear.Checked)
                                    {
                                        if (currentSem.ContainsKey(batch))
                                            curSem = Convert.ToString(currentSem[batch]);
                                        Dictionary<string, string> getFeeCode = getFeecode(clgCode);//get current sem code 
                                        curSem = getCurYear(curSem);
                                        if (getFeeCode.ContainsKey(curSem))
                                            curSemCode = Convert.ToString(getFeeCode[curSem.Trim()]);
                                    }
                                    else
                                    {
                                        if (getAcdYear.ContainsKey(clgCode + "$" + batch))
                                        {
                                            curSemCode = Convert.ToString(getAcdYear[clgCode + "$" + batch]);
                                            curSemCode = curSemCode.Replace(",", "','");
                                        }
                                    }
                                    if (!string.IsNullOrEmpty(curSemCode))
                                    {
                                        string Course_ID = Convert.ToString(ds.Tables[0].Rows[row]["Course_Id"]);
                                        if (ds.Tables[1].Rows.Count > 0)
                                        {
                                            if (checkSchoolSetting() != 0)
                                            {
                                                ds.Tables[1].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch + "' and Course_Id='" + Course_ID + "'";
                                            }
                                            else
                                            {
                                                ds.Tables[1].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "')  and Course_Id='" + Course_ID + "'";
                                            }
                                            DataTable dvpaid = ds.Tables[1].DefaultView.ToTable();

                                            if (dvpaid.Rows.Count > 0)
                                            {
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(Allot)", "")), out allotamt);
                                                allotmentAmount += allotamt;
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(Consustion)", "")), out concessionamt);
                                                ConcessionAmount += concessionamt;
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(Government)", "")), out scholarship);
                                                Government += scholarship;
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(total)", "")), out tempAllot);
                                                demandAmt += tempAllot;
                                                TotalAmount += tempAllot;
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(RefundAmount)", "")), out refund);
                                                refundAmount += refund;
                                            }
                                        }
                                        if (ds.Tables[2].Rows.Count > 0)
                                        {
                                            if (checkSchoolSetting() != 0)
                                            {
                                                ds.Tables[2].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch + "' and Course_Id='" + Course_ID + "'";
                                            }
                                            else
                                            {
                                                ds.Tables[2].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "')  and Course_Id='" + Course_ID + "'";
                                            }
                                            DataTable dvpaid = ds.Tables[2].DefaultView.ToTable();
                                            if (dvpaid.Rows.Count > 0)
                                            {
                                                double.TryParse(Convert.ToString(dvpaid.Compute("sum(total)", "")), out tempPaidDr);
                                                paidAmt += tempPaidDr;
                                            }
                                        }
                                        if (ds.Tables[0].Rows.Count > 0)
                                        {
                                            ds.Tables[0].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and Course_Id='" + Course_ID + "'";
                                            DataTable dvpaids = ds.Tables[0].DefaultView.ToTable();
                                            if (dvpaids.Rows.Count > 0)
                                            {
                                                DataTable dtColumns = dvpaids.DefaultView.ToTable(true, "studCount", "college_code", "DegreeName");
                                                double.TryParse(Convert.ToString(dvpaids.Rows[0]["studcount"]), out tempStud);
                                                studCnt += tempStud;
                                            }
                                        }
                                        DataView dvex = new DataView();
                                        if (ds.Tables[3].Rows.Count > 0)
                                        {
                                            ds.Tables[3].DefaultView.RowFilter = "Course_Id='" + Convert.ToString(ds.Tables[0].Rows[row]["Course_Id"]) + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch + "' ";
                                            dvex = ds.Tables[3].DefaultView;
                                            if (dvex.Count > 0 && dvex != null)
                                            {
                                                for (int k = 0; k < dvex.Count; k++)
                                                {
                                                    double amount = 0;
                                                    double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                                    tot_amount += amount;
                                                }
                                            }
                                        }

                                        //paymode values
                                        if (ds.Tables[2].Rows.Count > 0)
                                        {
                                            for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                            {
                                                if (chkl_paid.Items[pay].Selected == true)
                                                {
                                                    if (checkSchoolSetting() != 0)
                                                    {
                                                        ds.Tables[2].DefaultView.RowFilter = "Course_Id='" + Convert.ToString(ds.Tables[0].Rows[row]["Course_Id"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch + "'";
                                                    }
                                                    else
                                                    {
                                                        ds.Tables[2].DefaultView.RowFilter = "Course_Id='" + Convert.ToString(ds.Tables[0].Rows[row]["Course_Id"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and feecategory in('" + curSemCode + "')";
                                                    }
                                                    dv = ds.Tables[2].DefaultView;
                                                    colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                                    for (int k = 0; k < dv.Count; k++)
                                                    {
                                                        double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                                        fnlamount = fnlamount + totamount;
                                                        paidamt = paidamt + totamount;
                                                    }
                                                    if (!httotal.ContainsKey(colnew))
                                                        httotal.Add(colnew, Convert.ToString(fnlamount));
                                                    else
                                                    {
                                                        double amount = 0;
                                                        double.TryParse(Convert.ToString(httotal[colnew]), out amount);
                                                        amount += fnlamount;
                                                        httotal.Remove(colnew);
                                                        httotal.Add(colnew, Convert.ToString(amount));
                                                    }

                                                    fnlamount = 0;
                                                    drowGrd[colnew] = Convert.ToString(paidamt);
                                                    if (!grandtotal.ContainsKey(colnew))
                                                        grandtotal.Add(colnew, Convert.ToString(paidamt));
                                                    else
                                                    {
                                                        double amount = 0;
                                                        double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                        amount += paidamt;
                                                        grandtotal.Remove(colnew);
                                                        grandtotal.Add(colnew, Convert.ToString(amount));
                                                    }
                                                    paidamt = 0;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            bal = Convert.ToDouble(totalvalue);
                                            ColCntGrd = dtReport.Columns.Count;
                                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                            if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                            else
                                            {
                                                double amount = 0;
                                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                                amount += bal;
                                                grandtotal.Remove(ColCntGrd - 4);
                                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                            }
                                        }
                                        boolClg = true;
                                    }
                                }
                                if (boolClg)
                                {
                                    drowGrd[2] = Convert.ToString(tempStud);
                                    if (!grandtotal.ContainsKey(2))
                                        grandtotal.Add(2, Convert.ToString(tempStud));
                                    else
                                    {
                                        double count = 0;
                                        double.TryParse(Convert.ToString(grandtotal[2]), out count);
                                        count += tempStud;
                                        grandtotal.Remove(2);
                                        grandtotal.Add(2, Convert.ToString(count));
                                    }
                                    //allot
                                    drowGrd[3] = Convert.ToString(allotmentAmount);
                                    if (!grandtotal.ContainsKey(3))
                                        grandtotal.Add(3, Convert.ToString(allotmentAmount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[3]), out amount);
                                        amount += allotmentAmount;
                                        grandtotal.Remove(3);
                                        grandtotal.Add(3, Convert.ToString(amount));
                                    }
                                    //consession
                                    drowGrd[4] = Convert.ToString(ConcessionAmount);
                                    if (!grandtotal.ContainsKey(4))
                                        grandtotal.Add(4, Convert.ToString(ConcessionAmount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                        amount += ConcessionAmount;
                                        grandtotal.Remove(4);
                                        grandtotal.Add(4, Convert.ToString(amount));
                                    }
                                    //government
                                    drowGrd[5] = Convert.ToString(Government);
                                    if (!grandtotal.ContainsKey(5))
                                        grandtotal.Add(5, Convert.ToString(Government));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                        amount += Government;
                                        grandtotal.Remove(5);
                                        grandtotal.Add(5, Convert.ToString(amount));
                                    }
                                    //total
                                    drowGrd[6] = Convert.ToString(demandAmt);
                                    if (!grandtotal.ContainsKey(6))
                                        grandtotal.Add(6, Convert.ToString(demandAmt));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                        amount += demandAmt;
                                        grandtotal.Remove(6);
                                        grandtotal.Add(6, Convert.ToString(amount));
                                    }
                                    //paid paymode count=0
                                    if (countval == 0)
                                    {
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                            amount += paidvalue;
                                            grandtotal.Remove(ColCntGrd - 5);
                                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                        }
                                    }
                                    //refund
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 3] = Convert.ToString(refundAmount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(refundAmount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                        amount += refundAmount;
                                        grandtotal.Remove(ColCntGrd - 3);
                                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                                    }
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                        amount += tot_amount;
                                        grandtotal.Remove(ColCntGrd - 2);
                                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                                    }
                                    tot_amount = 0;
                                    //Paymode values Printing
                                    for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                    {
                                        if (chkl_paid.Items[pay].Selected == true)
                                        {
                                            colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                            if (httotal.Contains(colnew))
                                            {
                                                drowGrd[colnew] = Convert.ToString(httotal[colnew]);
                                            }
                                        }
                                    }
                                    int TotPaymodeValue = 0;
                                    int PaymodeCount = chkl_paid.Items.Count;
                                    foreach (DictionaryEntry item in httotal)
                                    {
                                        string col = item.Key.ToString();
                                        string value = item.Value.ToString();
                                        TotPaymodeValue = (Convert.ToInt32(TotPaymodeValue) + Convert.ToInt32(value));
                                    }
                                    if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(TotPaymodeValue));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                        amount += TotPaymodeValue;
                                        grandtotal.Remove(ColCntGrd - 5);
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                    }
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 5] = Convert.ToString(TotPaymodeValue);
                                    httotal.Clear();

                                    //balance
                                    bal = TotalAmount - TotPaymodeValue;
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                        amount += bal;
                                        grandtotal.Remove(ColCntGrd - 4);
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                    }
                                    TotalAmount = 0;
                                    if (bal == 0)
                                        dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                    else
                                        dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                    row1++;
                                }
                            }
                        }
                        #endregion
                        dtReport.Rows.Add(drowGrd);
                    }
                    #endregion

                    #region grandtot

                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = "Grand Total";
                    double grandvalue = 0;
                    for (int j = 2; j < dtReport.Columns.Count; j++)
                    {
                        double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                        drowGrd[j] = Convert.ToString(grandvalue);
                    }
                    dtReport.Rows.Add(drowGrd);

                    #endregion

                    #region visible
                    grdStudentReport.DataSource = dtReport;
                    grdStudentReport.DataBind();
                    grdStudentReport.Visible = true;

                    GridViewRow rows = grdStudentReport.Rows[0];
                    GridViewRow previousRow = grdStudentReport.Rows[1];

                    for (int i = 0; i < dtReport.Columns.Count; i++)
                    {
                        if (rows.Cells[i].Text == previousRow.Cells[i].Text)
                        {
                            rows.Cells[i].RowSpan = 2;
                            previousRow.Cells[i].Visible = false;
                            //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                            //                       previousRow.Cells[i].RowSpan + 1;
                            //previousRow.Cells[i].Visible = false;
                        }
                    }
                    //ColumnSpan

                    for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                    {
                        TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                        TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                        if (colum.Text == previouscol.Text)
                        {
                            if (previouscol.ColumnSpan == 0)
                            {
                                if (colum.ColumnSpan == 0)
                                {
                                    previouscol.ColumnSpan += 2;
                                }
                                else
                                {
                                    previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                }
                                colum.Visible = false;
                            }
                        }
                    }

                    foreach (KeyValuePair<int, string> dr in dicRowColor)
                    {
                        int g = dr.Key;
                        string DicValue = dr.Value;
                        if (DicValue == "NoBalance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                        }
                        if (DicValue == "Balance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                        }
                    }
                    divcommon.Visible = true;
                    header.Visible = true;
                    div1.Visible = true;
                    divledger.Visible = false;
                    lbl_ledg.Visible = false;
                    lbl_ledg.Text = "";
                    Grdledger.Visible = false;
                    lbl_bat.Visible = false;
                    lbl_bat.Text = "";
                    GrdBatch.Visible = false;
                    lbl_degr.Visible = false;
                    lbl_degr.Text = "";
                    GrdDegree.Visible = false;
                    lbl_dep.Visible = false;
                    lbl_dep.Text = "";
                    GrdDept.Visible = false;
                    lbl_sem.Visible = false; ;
                    lbl_sem.Text = "";
                    GrdSem.Visible = false;
                    rptprint.Visible = true;
                    //  rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                    lblhed.Visible = true;
                    lblhed.Text = "Degree";
                    pheaderfilter.Visible = true;
                    pcolumnorder.Visible = true;
                    //pnlledgercolorder.Visible = false;
                    //Pnlledcolorder.Visible = false;
                    //pnl_batchcolorder.Visible = false;
                    //pnl_batcolorder.Visible = false;
                    //pnl_degcolorder.Visible = false;
                    //pnl_degreecolorder.Visible = false;
                    //pnl_deptcolord.Visible = false;
                    //pnl_deptcolorder.Visible = false;
                    //pnl_semcolord.Visible = false;
                    //pnl_semcolorder.Visible = false;
                    //btn_fpled.Visible = false;
                    //btn_fpbat.Visible = false;
                    //btn_fpdeg.Visible = false;
                    //btn_fpdep.Visible = false;
                    ////  rptprint.Visible = false;
                    //pnl_studcolord.Visible = false;
                    //pnl_studcolorder.Visible = false;
                    divstudcell.Visible = false;
                    lbl_semcell.Text = "";
                    divdept.Visible = false;
                    divdegree.Visible = false;
                    divbatch.Visible = false;
                    header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                    div1.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                    #endregion
                }
                else
                {
                    grdStudentReport.Visible = false;
                    div1.Visible = false;
                    rptprint.Visible = false;
                    pheaderfilter.Visible = false;
                    pcolumnorder.Visible = false;
                    lblhed.Text = "";
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "No Record Found";
                }

            }
            #endregion
        }
        catch { }
    }

    #endregion

    #region deptmethod

    public void deptvalues()
    {
        if (cbAcdYear.Checked == true)
        {
            rbdeptdetail.Visible = false;
            deptdetail.Visible = false;
        }
        try
        {
            ArrayList arrColDeptNames = new ArrayList();
            ArrayList arrColDeptNames2 = new ArrayList();
            int countval = 0;
            int ColCntGrd = 0;
            //dicColumnvisible.Clear();

            #region without Academic yearSetting

            if (!cbAcdYear.Checked)
            {
                if (ds.Tables.Count > 0)
                {
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        #region common

                        if (rbdeptcommon.Checked == true)
                        {
                            #region design

                            loadcolumns();
                            DataView dv = new DataView();
                            arrColDeptNames.Add("S.No");
                            arrColDeptNames2.Add("S.No");
                            dtReport.Columns.Add("S.No");
                            arrColDeptNames.Add(lbldeg.Text);
                            arrColDeptNames2.Add(lbldeg.Text);
                            dtReport.Columns.Add(lbldeg.Text);
                            arrColDeptNames.Add(lbldept.Text);
                            arrColDeptNames2.Add(lbldept.Text);
                            dtReport.Columns.Add(lbldept.Text);
                            arrColDeptNames.Add("Student Count");
                            arrColDeptNames2.Add("Student Count");
                            dtReport.Columns.Add("Student Count");
                            arrColDeptNames.Add("Allot");
                            arrColDeptNames2.Add("Allot");
                            dtReport.Columns.Add("Allot");
                            arrColDeptNames.Add("Concession");
                            arrColDeptNames2.Add("Concession");
                            dtReport.Columns.Add("Concession");
                            arrColDeptNames.Add("Scholarship");
                            arrColDeptNames2.Add("Scholarship");
                            dtReport.Columns.Add("Scholarship");
                            arrColDeptNames.Add("Total");
                            arrColDeptNames2.Add("Total");
                            dtReport.Columns.Add("Total");

                            Hashtable newhash = new Hashtable();

                            if (chkl_paid.Items.Count > 0)
                            {
                                for (int s = 0; s < chkl_paid.Items.Count; s++)
                                {
                                    if (chkl_paid.Items[s].Selected == true)
                                    {
                                        countval++;
                                        arrColDeptNames.Add("Paid");
                                        arrColDeptNames2.Add(chkl_paid.Items[s].Text);
                                        dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                        newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                    }
                                }
                                if (countval != 0)
                                {
                                    arrColDeptNames.Add("Paid");
                                    arrColDeptNames2.Add("Total Paid");
                                    dtReport.Columns.Add("Total Paid");
                                }
                            }
                            if (countval == 0)
                            {
                                arrColDeptNames.Add("Paid");
                                arrColDeptNames2.Add("Paid");
                                dtReport.Columns.Add("Paid");
                            }
                            arrColDeptNames.Add("Balance");
                            arrColDeptNames2.Add("Balance");
                            dtReport.Columns.Add("Balance");
                            arrColDeptNames.Add("Refund Amount");
                            arrColDeptNames2.Add("Refund Amount");
                            dtReport.Columns.Add("Refund Amount");
                            arrColDeptNames.Add("Excess Amount");
                            arrColDeptNames2.Add("Excess Amount");
                            dtReport.Columns.Add("Excess Amount");
                            arrColDeptNames.Add("Fine Amount");
                            arrColDeptNames2.Add("Fine Amount");
                            dtReport.Columns.Add("Fine Amount");
                            DataRow drHdr1 = dtReport.NewRow();
                            DataRow drHdr2 = dtReport.NewRow();
                            for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                            {
                                drHdr1[grCol] = arrColDeptNames[grCol];
                                drHdr2[grCol] = arrColDeptNames2[grCol];
                            }
                            dtReport.Rows.Add(drHdr1);
                            dtReport.Rows.Add(drHdr2);

                            #endregion

                            #region value

                            double allotamt = 0;
                            double consamt = 0;
                            double govt = 0;
                            double tot_amount = 0;
                            double totalvalue = 0;
                            double totamount = 0;
                            double fnlamount = 0;
                            double bal = 0;
                            double StudentCount = 0;
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                drowGrd = dtReport.NewRow();
                                drowGrd[0] = Convert.ToString(i + 1);
                                string Degrecode = Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"].ToString());
                                DataView dnew = new DataView();
                                if (ds.Tables[4].Rows.Count > 0)
                                {
                                    ds.Tables[4].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' ";
                                    dnew = ds.Tables[4].DefaultView;
                                    if (dnew.Count > 0)
                                    {
                                        drowGrd[1] = Convert.ToString(dnew[0]["Course_Name"]);
                                        drowGrd[2] = Convert.ToString(dnew[0]["Dept_Name"]);
                                        //FpSpread1.Sheets[0].Cells[i, 2].Tag = Convert.ToString(ds.Tables[0].Rows[i]["Dept_Code"].ToString());
                                    }
                                }

                                //StudentCount Added by saranya on 25/01/2018//
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["studcount"]), out StudentCount);
                                drowGrd[3] = Convert.ToString(StudentCount);
                                if (!grandtotal.ContainsKey(3))
                                    grandtotal.Add(3, Convert.ToString(StudentCount));
                                else
                                {
                                    double count = 0;
                                    double.TryParse(Convert.ToString(grandtotal[3]), out count);
                                    count += StudentCount;
                                    grandtotal.Remove(3);
                                    grandtotal.Add(3, Convert.ToString(count));
                                }
                                //===========================================//

                                //allot
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                                drowGrd[4] = Convert.ToString(allotamt);
                                if (!grandtotal.ContainsKey(4))
                                    grandtotal.Add(4, Convert.ToString(allotamt));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                    amount += allotamt;
                                    grandtotal.Remove(4);
                                    grandtotal.Add(4, Convert.ToString(amount));
                                }
                                //consession
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                                drowGrd[5] = Convert.ToString(consamt);
                                if (!grandtotal.ContainsKey(5))
                                    grandtotal.Add(5, Convert.ToString(consamt));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                    amount += consamt;
                                    grandtotal.Remove(5);
                                    grandtotal.Add(5, Convert.ToString(amount));
                                }
                                //government
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                                drowGrd[6] = Convert.ToString(govt);
                                if (!grandtotal.ContainsKey(6))
                                    grandtotal.Add(6, Convert.ToString(govt));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                    amount += govt;
                                    grandtotal.Remove(6);
                                    grandtotal.Add(6, Convert.ToString(amount));
                                }
                                //total
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                                drowGrd[7] = Convert.ToString(totalvalue);
                                if (!grandtotal.ContainsKey(7))
                                    grandtotal.Add(7, Convert.ToString(totalvalue));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[7]), out amount);
                                    amount += totalvalue;
                                    grandtotal.Remove(7);
                                    grandtotal.Add(7, Convert.ToString(amount));
                                }
                                //paid paymode count=0
                                double paidvalue = 0;
                                if (countval == 0)
                                {
                                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                                    fnlamount = Convert.ToDouble(paidvalue);
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 6] = Convert.ToString(paidvalue);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 6))
                                        grandtotal.Add(ColCntGrd - 6, Convert.ToString(paidvalue));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 6]), out amount);
                                        amount += paidvalue;
                                        grandtotal.Remove(ColCntGrd - 6);
                                        grandtotal.Add(ColCntGrd - 6, Convert.ToString(amount));
                                    }
                                }
                                //refund
                                double refund = 0;
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                                if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                    grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                    amount += refund;
                                    grandtotal.Remove(ColCntGrd - 3);
                                    grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                                }
                                //excess
                                DataView dvex = new DataView();
                                if (ds.Tables[3].Rows.Count > 0)
                                {
                                    ds.Tables[3].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "'";
                                    dvex = ds.Tables[3].DefaultView;
                                    if (dvex.Count > 0 && dvex != null)
                                    {
                                        for (int k = 0; k < dvex.Count; k++)
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                            tot_amount += amount;
                                        }
                                    }
                                }
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                                if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                    grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                    amount += tot_amount;
                                    grandtotal.Remove(ColCntGrd - 2);
                                    grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                                }
                                tot_amount = 0;
                                //paymode values
                                if (ds.Tables[1].Rows.Count > 0)
                                {
                                    for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                    {
                                        if (chkl_paid.Items[pay].Selected == true)
                                        {
                                            double paidamt = 0;
                                            ds.Tables[1].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                            dv = ds.Tables[1].DefaultView;
                                            int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                            for (int k = 0; k < dv.Count; k++)
                                            {
                                                double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                                fnlamount = fnlamount + totamount;
                                                paidamt = paidamt + totamount;
                                            }
                                            drowGrd[colnew] = Convert.ToString(paidamt);
                                            if (!grandtotal.ContainsKey(colnew))
                                                grandtotal.Add(colnew, Convert.ToString(paidamt));
                                            else
                                            {
                                                double amount = 0;
                                                double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                amount += paidamt;
                                                grandtotal.Remove(colnew);
                                                grandtotal.Add(colnew, Convert.ToString(amount));
                                            }
                                            paidamt = 0;
                                        }
                                    }
                                    if (countval != 0)
                                    {
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                            amount += fnlamount;
                                            grandtotal.Remove(ColCntGrd - 5);
                                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                        }
                                    }
                                    //balance
                                    if (totalvalue != 0)
                                    {
                                        bal = totalvalue - fnlamount;
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                            amount += bal;
                                            grandtotal.Remove(ColCntGrd - 4);
                                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                        }
                                        fnlamount = 0;
                                        if (bal == 0)
                                            dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                        else
                                            dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                    }
                                }
                                else
                                {
                                    bal = Convert.ToDouble(totalvalue);
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                        amount += bal;
                                        grandtotal.Remove(ColCntGrd - 4);
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                    }
                                }
                                dtReport.Rows.Add(drowGrd);
                            }

                            #endregion

                            #region grandtot

                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = "Grand Total";
                            double grandvalue = 0;
                            for (int j = 3; j < dtReport.Columns.Count; j++)
                            {
                                double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                                drowGrd[j] = Convert.ToString(grandvalue);
                            }
                            dtReport.Rows.Add(drowGrd);

                            #endregion

                            #region visible

                            grdStudentReport.DataSource = dtReport;
                            grdStudentReport.DataBind();
                            grdStudentReport.Visible = true;

                            GridViewRow row = grdStudentReport.Rows[0];
                            GridViewRow previousRow = grdStudentReport.Rows[1];

                            for (int i = 0; i < dtReport.Columns.Count; i++)
                            {
                                if (row.Cells[i].Text == previousRow.Cells[i].Text)
                                {
                                    row.Cells[i].RowSpan = 2;
                                    previousRow.Cells[i].Visible = false;
                                }
                            }
                            //ColumnSpan

                            for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                            {
                                TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                                TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                                if (colum.Text == previouscol.Text)
                                {
                                    if (previouscol.ColumnSpan == 0)
                                    {
                                        if (colum.ColumnSpan == 0)
                                        {
                                            previouscol.ColumnSpan += 2;
                                        }
                                        else
                                        {
                                            previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                        }
                                        colum.Visible = false;
                                    }
                                }
                            }

                            foreach (KeyValuePair<int, string> dr in dicRowColor)
                            {
                                int g = dr.Key;
                                string DicValue = dr.Value;
                                if (DicValue == "NoBalance")
                                {
                                    grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                                }
                                if (DicValue == "Balance")
                                {
                                    grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                                }
                            }

                            divcommon.Visible = true;
                            header.Visible = true;
                            div1.Visible = true;
                            divledger.Visible = false;
                            lbl_ledg.Visible = false;
                            lbl_ledg.Text = "";
                            Grdledger.Visible = false;
                            lbl_bat.Visible = false;
                            lbl_bat.Text = "";
                            GrdBatch.Visible = false;
                            lbl_degr.Visible = false;
                            lbl_degr.Text = "";
                            GrdDegree.Visible = false;
                            lbl_dep.Visible = false;
                            lbl_dep.Text = "";
                            GrdDept.Visible = false;
                            lbl_sem.Visible = false; ;
                            lbl_sem.Text = "";
                            GrdSem.Visible = false;
                            rptprint.Visible = true;
                            //  rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                            lblhed.Visible = true;
                            lblhed.Text = "Department";
                            pheaderfilter.Visible = true;
                            pcolumnorder.Visible = true;
                            //pnlledgercolorder.Visible = false;
                            //Pnlledcolorder.Visible = false;
                            //pnl_batchcolorder.Visible = false;
                            //pnl_batcolorder.Visible = false;
                            //pnl_degcolorder.Visible = false;
                            //pnl_degreecolorder.Visible = false;
                            //pnl_deptcolord.Visible = false;
                            //pnl_deptcolorder.Visible = false;
                            //pnl_semcolord.Visible = false;
                            //pnl_semcolorder.Visible = false;
                            //btn_fpled.Visible = false;
                            //btn_fpbat.Visible = false;
                            //btn_fpdeg.Visible = false;
                            //btn_fpdep.Visible = false;
                            ////   rptprint.Visible = false;
                            //pnl_studcolord.Visible = false;
                            //pnl_studcolorder.Visible = false;
                            divstudcell.Visible = false;
                            lbl_semcell.Text = "";
                            divdept.Visible = false;
                            divdegree.Visible = false;
                            divbatch.Visible = false;
                            header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                            div1.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                            #endregion

                        }
                        #endregion

                        #region details

                        else if (rbdeptdetail.Checked == true)
                        {
                            #region year
                            if (rbdeptyear.Checked == true)
                            {
                                lblhed.Text = "Department-->Year";

                                #region design

                                loadcolumns();
                                DataView dv = new DataView();

                                arrColDeptNames.Add("S.No");
                                arrColDeptNames2.Add("S.No");
                                dtReport.Columns.Add("S.No");
                                arrColDeptNames.Add(lbldeg.Text);
                                arrColDeptNames2.Add(lbldeg.Text);
                                dtReport.Columns.Add(lbldeg.Text);
                                arrColDeptNames.Add(lbldept.Text);
                                arrColDeptNames2.Add(lbldept.Text);
                                dtReport.Columns.Add(lbldept.Text);
                                arrColDeptNames.Add(lblsem.Text);
                                arrColDeptNames2.Add(lblsem.Text);
                                dtReport.Columns.Add(lblsem.Text);
                                arrColDeptNames.Add("Allot");
                                arrColDeptNames2.Add("Allot");
                                dtReport.Columns.Add("Allot");
                                arrColDeptNames.Add("Concession");
                                arrColDeptNames2.Add("Concession");
                                dtReport.Columns.Add("Concession");
                                arrColDeptNames.Add("Scholarship");
                                arrColDeptNames2.Add("Scholarship");
                                dtReport.Columns.Add("Scholarship");
                                arrColDeptNames.Add("Total");
                                arrColDeptNames2.Add("Total");
                                dtReport.Columns.Add("Total");

                                Hashtable newhash = new Hashtable();

                                if (chkl_paid.Items.Count > 0)
                                {
                                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                                    {
                                        if (chkl_paid.Items[s].Selected == true)
                                        {
                                            countval++;
                                            arrColDeptNames.Add("Paid");
                                            arrColDeptNames2.Add(chkl_paid.Items[s].Text);
                                            dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                            newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                        }
                                    }
                                    if (countval != 0)
                                    {
                                        arrColDeptNames.Add("Paid");
                                        arrColDeptNames2.Add("Total Paid");
                                        dtReport.Columns.Add("Total Paid");
                                    }
                                }
                                if (countval == 0)
                                {
                                    arrColDeptNames.Add("Paid");
                                    arrColDeptNames2.Add("Paid");
                                    dtReport.Columns.Add("Paid");
                                }
                                arrColDeptNames.Add("Balance");
                                arrColDeptNames2.Add("Balance");
                                dtReport.Columns.Add("Balance");
                                arrColDeptNames.Add("Refund Amount");
                                arrColDeptNames2.Add("Refund Amount");
                                dtReport.Columns.Add("Refund Amount");
                                arrColDeptNames.Add("Excess Amount");
                                arrColDeptNames2.Add("Excess Amount");
                                dtReport.Columns.Add("Excess Amount");
                                arrColDeptNames.Add("Fine Amount");
                                arrColDeptNames2.Add("Fine Amount");
                                dtReport.Columns.Add("Fine Amount");
                                DataRow drHdr1 = dtReport.NewRow();
                                DataRow drHdr2 = dtReport.NewRow();
                                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                                {
                                    drHdr1[grCol] = arrColDeptNames[grCol];
                                    drHdr2[grCol] = arrColDeptNames2[grCol];
                                }
                                dtReport.Rows.Add(drHdr1);
                                dtReport.Rows.Add(drHdr2);

                                #endregion

                                #region value

                                double allotamt = 0;
                                double consamt = 0;
                                double govt = 0;
                                double tot_amount = 0;
                                double totalvalue = 0;
                                double bal = 0;
                                double totamount = 0;
                                double fnlamount = 0;

                                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                {
                                    drowGrd = dtReport.NewRow();
                                    drowGrd[0] = Convert.ToString(i + 1);
                                    string Degrecode = Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"].ToString());
                                    DataView dnew = new DataView();
                                    if (ds.Tables[4].Rows.Count > 0)
                                    {
                                        ds.Tables[4].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' ";
                                        dnew = ds.Tables[4].DefaultView;
                                        if (dnew.Count > 0)
                                        {
                                            drowGrd[1] = Convert.ToString(dnew[0]["Course_Name"]);
                                            drowGrd[2] = Convert.ToString(dnew[0]["Dept_Name"]);

                                        }
                                    }
                                    drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["TextVal"]);
                                    //allot
                                    double.TryParse(Convert.ToString(ds.Tables[1].Rows[i]["Allot"]), out allotamt);
                                    drowGrd[4] = Convert.ToString(allotamt);
                                    if (!grandtotal.ContainsKey(4))
                                        grandtotal.Add(4, Convert.ToString(allotamt));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                        amount += allotamt;
                                        grandtotal.Remove(4);
                                        grandtotal.Add(4, Convert.ToString(amount));
                                    }
                                    //consession
                                    double.TryParse(Convert.ToString(ds.Tables[1].Rows[i]["consustion"]), out consamt);
                                    drowGrd[5] = Convert.ToString(consamt);
                                    if (!grandtotal.ContainsKey(5))
                                        grandtotal.Add(5, Convert.ToString(consamt));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                        amount += consamt;
                                        grandtotal.Remove(5);
                                        grandtotal.Add(5, Convert.ToString(amount));
                                    }
                                    //government
                                    double.TryParse(Convert.ToString(ds.Tables[1].Rows[i]["Government"]), out govt);
                                    drowGrd[6] = Convert.ToString(govt);
                                    if (!grandtotal.ContainsKey(6))
                                        grandtotal.Add(6, Convert.ToString(govt));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                        amount += govt;
                                        grandtotal.Remove(6);
                                        grandtotal.Add(6, Convert.ToString(amount));
                                    }
                                    //total
                                    double.TryParse(Convert.ToString(ds.Tables[1].Rows[i]["Total"]), out totalvalue);
                                    drowGrd[7] = Convert.ToString(totalvalue);
                                    if (!grandtotal.ContainsKey(7))
                                        grandtotal.Add(7, Convert.ToString(totalvalue));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[7]), out amount);
                                        amount += totalvalue;
                                        grandtotal.Remove(7);
                                        grandtotal.Add(7, Convert.ToString(amount));
                                    }
                                    //paid paymode count=0
                                    double paidvalue = 0;
                                    if (countval == 0)
                                    {
                                        double.TryParse(Convert.ToString(ds.Tables[1].Rows[i]["paid"]), out paidvalue);
                                        fnlamount = Convert.ToDouble(paidvalue);
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                            amount += paidvalue;
                                            grandtotal.Remove(ColCntGrd - 5);
                                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                        }
                                    }
                                    //refund
                                    double refund = 0;
                                    double.TryParse(Convert.ToString(ds.Tables[1].Rows[i]["RefundAmount"]), out refund);
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                        amount += refund;
                                        grandtotal.Remove(ColCntGrd - 3);
                                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                                    }
                                    //excess
                                    DataView dvex = new DataView();
                                    if (ds.Tables[3].Rows.Count > 0)
                                    {
                                        ds.Tables[3].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[1].Rows[i]["Degree_code"]) + "' and FeeCategory='" + Convert.ToString(ds.Tables[1].Rows[i]["FeeCategory"]) + "'";
                                        dvex = ds.Tables[3].DefaultView;
                                        if (dvex.Count > 0 && dvex != null)
                                        {
                                            for (int k = 0; k < dvex.Count; k++)
                                            {
                                                double amount = 0;
                                                double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                                tot_amount += amount;
                                            }
                                        }
                                    }
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                        amount += tot_amount;
                                        grandtotal.Remove(ColCntGrd - 2);
                                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                                    }
                                    tot_amount = 0;
                                    //paymode values
                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                        {
                                            if (chkl_paid.Items[pay].Selected == true)
                                            {
                                                double paidamt = 0;
                                                ds.Tables[2].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and FeeCategory='" + Convert.ToString(ds.Tables[1].Rows[i]["FeeCategory"]) + "'";
                                                dv = ds.Tables[2].DefaultView;
                                                int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                                for (int k = 0; k < dv.Count; k++)
                                                {
                                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                                    fnlamount = fnlamount + totamount;
                                                    paidamt = paidamt + totamount;
                                                }
                                                drowGrd[colnew] = Convert.ToString(paidamt);
                                                if (!grandtotal.ContainsKey(colnew))
                                                    grandtotal.Add(colnew, Convert.ToString(paidamt));
                                                else
                                                {
                                                    double amount = 0;
                                                    double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                    amount += paidamt;
                                                    grandtotal.Remove(colnew);
                                                    grandtotal.Add(colnew, Convert.ToString(amount));
                                                }
                                                paidamt = 0;
                                            }
                                        }
                                        if (countval != 0)
                                        {
                                            ColCntGrd = dtReport.Columns.Count;
                                            drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                            else
                                            {
                                                double amount = 0;
                                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                                amount += fnlamount;
                                                grandtotal.Remove(ColCntGrd - 5);
                                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                            }
                                        }
                                        //balance
                                        if (totalvalue != 0)
                                        {
                                            bal = totalvalue - fnlamount;
                                            ColCntGrd = dtReport.Columns.Count;
                                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                            if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                            else
                                            {
                                                double amount = 0;
                                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                                amount += bal;
                                                grandtotal.Remove(ColCntGrd - 4);
                                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                            }
                                            fnlamount = 0;

                                            if (bal == 0)
                                                dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                            else
                                                dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                        }
                                    }
                                    else
                                    {
                                        bal = Convert.ToDouble(totalvalue);
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    }
                                    dtReport.Rows.Add(drowGrd);
                                }
                                #endregion

                                #region grandtot

                                drowGrd = dtReport.NewRow();
                                drowGrd[0] = "Grand Total";
                                double grandvalue = 0;
                                for (int j = 4; j < dtReport.Columns.Count; j++)
                                {
                                    double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                                    drowGrd[j] = Convert.ToString(grandvalue);
                                }
                                dtReport.Rows.Add(drowGrd);

                                #endregion
                            }
                            #endregion

                            #region deptheader

                            else if (rbdepthead.Checked == true)
                            {
                                lblhed.Text = "Department-->Header";
                                int colHdrIndx = 4;

                                #region design

                                loadcolumns();
                                DataView dv = new DataView();
                                DataView dv1 = new DataView();
                                arrColDeptNames.Add("S.No");
                                arrColDeptNames2.Add("S.No");
                                dtReport.Columns.Add("col0");
                                arrColDeptNames.Add(lbldeg.Text);
                                arrColDeptNames2.Add(lbldeg.Text);
                                dtReport.Columns.Add("col1");
                                arrColDeptNames.Add(lbldept.Text);
                                arrColDeptNames2.Add(lbldept.Text);
                                dtReport.Columns.Add("col2");
                                arrColDeptNames.Add(lblsem.Text);
                                arrColDeptNames2.Add(lblsem.Text);
                                dtReport.Columns.Add("col3");
                                Hashtable newhash = new Hashtable();
                                Hashtable hedvalue = new Hashtable();
                                if (chkl_studhed.Items.Count > 0)
                                {
                                    for (int s = 0; s < chkl_studhed.Items.Count; s++)
                                    {
                                        if (chkl_studhed.Items[s].Selected == true)
                                        {
                                            countval++;
                                            if (colord.Contains("1") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studhed.Items[s].Text);
                                                arrColDeptNames2.Add("Allot");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Allot");
                                                newhash.Add(Convert.ToString(chkl_studhed.Items[s].Value), dtReport.Columns.Count - 1);
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("2") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studhed.Items[s].Text);
                                                arrColDeptNames2.Add("Concession");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Concession");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("3") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studhed.Items[s].Text);
                                                arrColDeptNames2.Add("Government");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Government");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("4") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studhed.Items[s].Text);
                                                arrColDeptNames2.Add("Total");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Total");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("5") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studhed.Items[s].Text);
                                                arrColDeptNames2.Add("Paid");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Paid");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("6") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studhed.Items[s].Text);
                                                arrColDeptNames2.Add("Balance");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Balance");
                                                colHdrIndx++;
                                            }
                                        }
                                    }
                                }
                                arrColDeptNames.Add("Total Allot");
                                arrColDeptNames2.Add("Total Allot");
                                dtReport.Columns.Add("col" + colHdrIndx);
                                dicColumnvisible.Add(colHdrIndx, "Total Allot");

                                ViewState["Newhash"] = newhash;
                                int checkpaid = 0;
                                Hashtable newhash1 = new Hashtable();
                                if (colord.Contains("5") || colord.Count == 0)
                                {
                                    if (chkl_paid.Items.Count > 0)
                                    {
                                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                                        {
                                            if (chkl_paid.Items[s].Selected == true)
                                            {
                                                checkpaid++;
                                                colHdrIndx++;
                                                arrColDeptNames.Add("Paid");
                                                arrColDeptNames2.Add(chkl_paid.Items[s].Text);
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_paid.Items[s].Value + "@" + "Paid");
                                                newhash1.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                            }
                                        }
                                        if (checkpaid != 0)
                                        {
                                            colHdrIndx++;
                                            arrColDeptNames.Add("Paid");
                                            arrColDeptNames2.Add("Total Paid");
                                            dtReport.Columns.Add("col" + colHdrIndx);
                                            dicColumnvisible.Add(colHdrIndx, "Total Paid");
                                        }
                                    }
                                    if (checkpaid == 0)
                                    {
                                        colHdrIndx++;
                                        arrColDeptNames.Add("Paid");
                                        arrColDeptNames2.Add("Paid");
                                        dtReport.Columns.Add("col" + colHdrIndx);
                                        dicColumnvisible.Add(colHdrIndx, "Paid");
                                    }
                                }
                                colHdrIndx++;
                                arrColDeptNames.Add("Total No of Student");
                                arrColDeptNames2.Add("Total No of Student");
                                dtReport.Columns.Add("col" + colHdrIndx);
                                dicColumnvisible.Add(colHdrIndx, "Total Student");

                                DataRow drHdr1 = dtReport.NewRow();
                                DataRow drHdr2 = dtReport.NewRow();
                                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                                {
                                    drHdr1[grCol] = arrColDeptNames[grCol];
                                    drHdr2[grCol] = arrColDeptNames2[grCol];
                                }
                                dtReport.Rows.Add(drHdr1);
                                dtReport.Rows.Add(drHdr2);

                                #endregion

                                #region value

                                double totalvalue = 0;
                                double totpaid = 0;
                                double bal = 0;
                                double allottot = 0;
                                double totamount = 0;
                                double fnlamount = 0;
                                double allot = 0;
                                double constamt = 0;
                                double govt = 0;
                                DataView Dview = new DataView();
                                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                {
                                    drowGrd = dtReport.NewRow();
                                    drowGrd[0] = Convert.ToString(i + 1);
                                    string Degrecode = Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"].ToString());
                                    DataView dnew = new DataView();
                                    if (ds.Tables[4].Rows.Count > 0)
                                    {
                                        ds.Tables[4].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' ";
                                        dnew = ds.Tables[4].DefaultView;
                                        if (dnew.Count > 0)
                                        {
                                            drowGrd[1] = Convert.ToString(dnew[0]["Course_Name"]);
                                            drowGrd[2] = Convert.ToString(dnew[0]["Dept_Name"]);
                                        }
                                    }
                                    drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["TextVal"]);
                                    if (ds.Tables[1].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_studhed.Items.Count; pay++)
                                        {
                                            if (chkl_studhed.Items[pay].Selected == true)
                                            {
                                                ds.Tables[1].DefaultView.RowFilter = " headerorledger='" + Convert.ToString(chkl_studhed.Items[pay].Value) + "' and Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                                dv1 = ds.Tables[1].DefaultView;
                                                int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_studhed.Items[pay].Value)]);
                                                totalvalue = 0;
                                                totpaid = 0;
                                                allot = 0;
                                                constamt = 0;
                                                govt = 0;
                                                if (dv1.Count > 0)
                                                {
                                                    double.TryParse(Convert.ToString(dv1[0]["Allot"]), out allot);
                                                    double.TryParse(Convert.ToString(dv1[0]["Consustion"]), out constamt);
                                                    double.TryParse(Convert.ToString(dv1[0]["Government"]), out govt);
                                                    double.TryParse(Convert.ToString(dv1[0]["Total"]), out totalvalue);
                                                    double.TryParse(Convert.ToString(dv1[0]["Paid"]), out totpaid);
                                                }
                                                foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                                {
                                                    int g = dr.Key;
                                                    string DicValue = dr.Value;
                                                    //allot
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Allot")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(allot);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(allot));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += allot;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                    }
                                                    //consession
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Concession")
                                                    {
                                                        colnew = g;

                                                        drowGrd[colnew] = Convert.ToString(constamt);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(constamt));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += constamt;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                    }
                                                    //government

                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Government")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(govt);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(govt));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += govt;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                    }

                                                    //total                                                   
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Total")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(totalvalue);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(totalvalue));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += totalvalue;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                        allottot += totalvalue;
                                                    }
                                                    //paid

                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Paid")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(totpaid);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(totpaid));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += totpaid;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                    }
                                                    //balance
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Balance")
                                                    {
                                                        colnew = g;
                                                        bal = totalvalue - totpaid;
                                                        drowGrd[colnew] = Convert.ToString(bal);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(bal));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += bal;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                        if (bal == 0)
                                                            dicRowColorColumn.Add(dtReport.Rows.Count + "$" + colnew, "NoBalance");
                                                        else
                                                            dicRowColorColumn.Add(dtReport.Rows.Count + "$" + colnew, "Balance");
                                                    }
                                                }
                                            }
                                        }
                                        //total allot
                                        if (dicColumnvisible.ContainsValue("Total Allot"))
                                        {
                                            foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                            {
                                                int g = dr.Key;
                                                string DicValue = dr.Value;
                                                if (DicValue == "Total Allot")
                                                {
                                                    ColCntGrd = g;
                                                    drowGrd[ColCntGrd] = Convert.ToString(allottot);
                                                    if (!grandtotal.ContainsKey(ColCntGrd))
                                                        grandtotal.Add(ColCntGrd, Convert.ToString(allottot));
                                                    else
                                                    {
                                                        double amount = 0;
                                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd]), out amount);
                                                        amount += allottot;
                                                        grandtotal.Remove(ColCntGrd);
                                                        grandtotal.Add(ColCntGrd, Convert.ToString(amount));
                                                    }
                                                    allottot = 0;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    double paidvalue = 0;
                                    if (checkpaid == 0)
                                    {
                                        foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                        {
                                            int g = dr.Key;
                                            string DicValue = dr.Value;
                                            if (DicValue == "paid")
                                            {
                                                ColCntGrd = g;
                                                double.TryParse(Convert.ToString(ds.Tables[1].Rows[i]["paid"]), out paidvalue);
                                                fnlamount = Convert.ToDouble(paidvalue);
                                                drowGrd[ColCntGrd] = Convert.ToString(paidvalue);
                                                if (!grandtotal.ContainsKey(ColCntGrd))
                                                    grandtotal.Add(ColCntGrd, Convert.ToString(paidvalue));
                                                else
                                                {
                                                    double amount = 0;
                                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd]), out amount);
                                                    amount += paidvalue;
                                                    grandtotal.Remove(ColCntGrd);
                                                    grandtotal.Add(ColCntGrd, Convert.ToString(amount));
                                                }
                                                break;
                                            }
                                        }
                                    }
                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                        {
                                            if (chkl_paid.Items[pay].Selected == true)
                                            {
                                                ds.Tables[2].DefaultView.RowFilter = " Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "' ";
                                                dv = ds.Tables[2].DefaultView;
                                                int colnew = 0;
                                                if (dv.Count > 0)
                                                {
                                                    double.TryParse(Convert.ToString(dv[0]["total"]), out totamount);
                                                    fnlamount = fnlamount + totamount;
                                                }
                                                foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                                {
                                                    int g = dr.Key;
                                                    string DicValue = dr.Value;
                                                    if (DicValue == chkl_paid.Items[pay].Value + "@" + "Paid")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(totamount);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(totamount));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += totamount;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                        totamount = 0;
                                                    }
                                                }
                                            }
                                        }
                                        if (checkpaid != 0)
                                        {
                                            foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                            {
                                                int g = dr.Key;
                                                string DicValue = dr.Value;
                                                if (DicValue == "Total Paid")
                                                {
                                                    ColCntGrd = g;
                                                    drowGrd[ColCntGrd] = Convert.ToString(fnlamount);
                                                    if (!grandtotal.ContainsKey(ColCntGrd))
                                                        grandtotal.Add(ColCntGrd, Convert.ToString(fnlamount));
                                                    else
                                                    {
                                                        double amount = 0;
                                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd]), out amount);
                                                        amount += fnlamount;
                                                        grandtotal.Remove(ColCntGrd);
                                                        grandtotal.Add(ColCntGrd, Convert.ToString(amount));
                                                    }
                                                    fnlamount = 0;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    if (ds.Tables[5].Rows.Count > 0)
                                    {
                                        double count = 0;
                                        DataView studcount = new DataView();
                                        ds.Tables[5].DefaultView.RowFilter = " Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                        studcount = ds.Tables[5].DefaultView;
                                        if (studcount.Count > 0)
                                        {
                                            double.TryParse(Convert.ToString(studcount[0]["countval"]), out count);
                                        }
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 1] = Convert.ToString(count);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 1))
                                            grandtotal.Add(ColCntGrd - 1, Convert.ToString(count));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 1]), out amount);
                                            amount += count;
                                            grandtotal.Remove(ColCntGrd - 1);
                                            grandtotal.Add(ColCntGrd - 1, Convert.ToString(amount));
                                        }
                                    }
                                    dtReport.Rows.Add(drowGrd);
                                }
                                if (txt_roll.Text.Trim() != "")
                                {
                                    //FpSpread1.Sheets[0].SetColumnMerge(1, FarPoint.Web.Spread.Model.MergePolicy.Always);
                                    //FpSpread1.Sheets[0].SetColumnMerge(2, FarPoint.Web.Spread.Model.MergePolicy.Always);
                                    //FpSpread1.Sheets[0].SetColumnMerge(3, FarPoint.Web.Spread.Model.MergePolicy.Always);
                                }

                                #endregion

                                #region grandtot

                                drowGrd = dtReport.NewRow();
                                drowGrd[0] = "Grand Total";
                                double grandvalue = 0;
                                for (int j = 4; j < dtReport.Columns.Count; j++)
                                {
                                    double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                                    drowGrd[j] = Convert.ToString(grandvalue);
                                }
                                dtReport.Rows.Add(drowGrd);

                                #endregion

                            }
                            #endregion

                            #region ledger

                            else if (rbdeptledg.Checked == true)
                            {
                                lblhed.Text = "Department-->Ledger";

                                int colHdrIndx = 4;

                                #region design

                                loadcolumns();
                                DataView dv = new DataView();
                                DataView dv1 = new DataView();
                                arrColDeptNames.Add("S.No");
                                arrColDeptNames2.Add("S.No");
                                dtReport.Columns.Add("col0");
                                arrColDeptNames.Add(lbldeg.Text);
                                arrColDeptNames2.Add(lbldeg.Text);
                                dtReport.Columns.Add("col1");
                                arrColDeptNames.Add(lbldept.Text);
                                arrColDeptNames2.Add(lbldept.Text);
                                dtReport.Columns.Add("col2");
                                arrColDeptNames.Add(lblsem.Text);
                                arrColDeptNames2.Add(lblsem.Text);
                                dtReport.Columns.Add("col3");
                                Hashtable newhash = new Hashtable();
                                Hashtable hedvalue = new Hashtable();
                                if (chkl_studled.Items.Count > 0)
                                {
                                    for (int s = 0; s < chkl_studled.Items.Count; s++)
                                    {
                                        if (chkl_studled.Items[s].Selected == true)
                                        {
                                            countval++;
                                            if (colord.Contains("1") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studled.Items[s].Text);
                                                arrColDeptNames2.Add("Allot");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Allot");
                                                newhash.Add(Convert.ToString(chkl_studled.Items[s].Value), dtReport.Columns.Count - 1);
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("2") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studled.Items[s].Text);
                                                arrColDeptNames2.Add("Concession");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Concession");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("3") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studled.Items[s].Text);
                                                arrColDeptNames2.Add("Government");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Government");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("4") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studled.Items[s].Text);
                                                arrColDeptNames2.Add("Total");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Total");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("5") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studled.Items[s].Text);
                                                arrColDeptNames2.Add("Paid");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Paid");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("6") || colord.Count == 0)
                                            {
                                                arrColDeptNames.Add(chkl_studled.Items[s].Text);
                                                arrColDeptNames2.Add("Balance");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Balance");
                                                colHdrIndx++;
                                            }
                                        }
                                    }
                                }
                                arrColDeptNames.Add("Total Allot");
                                arrColDeptNames2.Add("Total Allot");
                                dtReport.Columns.Add("col" + colHdrIndx);
                                dicColumnvisible.Add(colHdrIndx, "Total Allot");

                                ViewState["Newhash"] = newhash;
                                int checkpaid = 0;
                                Hashtable newhash1 = new Hashtable();
                                if (colord.Contains("5") || colord.Count == 0)
                                {
                                    if (chkl_paid.Items.Count > 0)
                                    {
                                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                                        {
                                            if (chkl_paid.Items[s].Selected == true)
                                            {
                                                checkpaid++;
                                                colHdrIndx++;
                                                arrColDeptNames.Add("Paid");
                                                arrColDeptNames2.Add(chkl_paid.Items[s].Text);
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_paid.Items[s].Value + "@" + "Paid");
                                                newhash1.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                            }
                                        }
                                        if (checkpaid != 0)
                                        {
                                            colHdrIndx++;
                                            arrColDeptNames.Add("Paid");
                                            arrColDeptNames2.Add("Total Paid");
                                            dtReport.Columns.Add("col" + colHdrIndx);
                                            dicColumnvisible.Add(colHdrIndx, "Total Paid");
                                        }
                                    }
                                    if (checkpaid == 0)
                                    {
                                        colHdrIndx++;
                                        arrColDeptNames.Add("Paid");
                                        arrColDeptNames2.Add("Paid");
                                        dtReport.Columns.Add("col" + colHdrIndx);
                                        dicColumnvisible.Add(colHdrIndx, "Paid");
                                    }
                                }
                                colHdrIndx++;
                                arrColDeptNames.Add("Total No of Student");
                                arrColDeptNames2.Add("Total No of Student");
                                dtReport.Columns.Add("col" + colHdrIndx);
                                dicColumnvisible.Add(colHdrIndx, "Total Student");

                                DataRow drHdr1 = dtReport.NewRow();
                                DataRow drHdr2 = dtReport.NewRow();
                                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                                {
                                    drHdr1[grCol] = arrColDeptNames[grCol];
                                    drHdr2[grCol] = arrColDeptNames2[grCol];
                                }
                                dtReport.Rows.Add(drHdr1);
                                dtReport.Rows.Add(drHdr2);

                                #endregion

                                #region value

                                double totalvalue = 0;
                                double totpaid = 0;
                                double bal = 0;
                                double allottot = 0;
                                double totamount = 0;
                                double fnlamount = 0;
                                double allot = 0;
                                double constamt = 0;
                                double govt = 0;
                                DataView Dview = new DataView();
                                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                {
                                    drowGrd = dtReport.NewRow();
                                    drowGrd[0] = Convert.ToString(i + 1);
                                    string Degrecode = Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"].ToString());
                                    DataView dnew = new DataView();
                                    if (ds.Tables[4].Rows.Count > 0)
                                    {
                                        ds.Tables[4].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' ";
                                        dnew = ds.Tables[4].DefaultView;
                                        if (dnew.Count > 0)
                                        {
                                            drowGrd[1] = Convert.ToString(dnew[0]["Course_Name"]);
                                            drowGrd[2] = Convert.ToString(dnew[0]["Dept_Name"]);
                                        }
                                    }
                                    drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["TextVal"]);
                                    if (ds.Tables[1].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_studled.Items.Count; pay++)
                                        {
                                            if (chkl_studled.Items[pay].Selected == true)
                                            {
                                                ds.Tables[1].DefaultView.RowFilter = " headerorledger='" + Convert.ToString(chkl_studled.Items[pay].Value) + "' and Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                                dv1 = ds.Tables[1].DefaultView;
                                                int colnew = 0;
                                                totalvalue = 0;
                                                totpaid = 0;
                                                allot = 0;
                                                constamt = 0;
                                                govt = 0;
                                                if (dv1.Count > 0)
                                                {
                                                    double.TryParse(Convert.ToString(dv1[0]["Allot"]), out allot);
                                                    double.TryParse(Convert.ToString(dv1[0]["Consustion"]), out constamt);
                                                    double.TryParse(Convert.ToString(dv1[0]["Government"]), out govt);
                                                    double.TryParse(Convert.ToString(dv1[0]["Total"]), out totalvalue);
                                                    double.TryParse(Convert.ToString(dv1[0]["Paid"]), out totpaid);
                                                }
                                                foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                                {
                                                    int g = dr.Key;
                                                    string DicValue = dr.Value;
                                                    //allot
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Allot")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(allot);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(allot));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += allot;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                    }
                                                    //consession
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Concession")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(constamt);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(constamt));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += constamt;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                    }
                                                    //government
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Government")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(govt);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(govt));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += govt;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                    }
                                                    //total
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Total")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(totalvalue);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(totalvalue));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += totalvalue;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                        allottot += totalvalue;
                                                    }
                                                    //paid 
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Paid")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(totpaid);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(totpaid));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += totpaid;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                    }
                                                    //balance
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Balance")
                                                    {
                                                        colnew = g;
                                                        bal = totalvalue - totpaid;
                                                        drowGrd[colnew] = Convert.ToString(bal);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(bal));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += bal;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                        if (bal == 0)
                                                            dicRowColorColumn.Add(dtReport.Rows.Count + "$" + colnew, "NoBalance");
                                                        else
                                                            dicRowColorColumn.Add(dtReport.Rows.Count + "$" + colnew, "Balance");
                                                    }
                                                }
                                            }
                                        }
                                        if (dicColumnvisible.ContainsValue("Total Allot"))
                                        {
                                            foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                            {
                                                int g = dr.Key;
                                                string DicValue = dr.Value;
                                                if (DicValue == "Total Allot")
                                                {
                                                    ColCntGrd = g;
                                                    drowGrd[ColCntGrd] = Convert.ToString(allottot);
                                                    if (!grandtotal.ContainsKey(ColCntGrd))
                                                        grandtotal.Add(ColCntGrd, Convert.ToString(allottot));
                                                    else
                                                    {
                                                        double amount = 0;
                                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd]), out amount);
                                                        amount += allottot;
                                                        grandtotal.Remove(ColCntGrd);
                                                        grandtotal.Add(ColCntGrd, Convert.ToString(amount));
                                                    }
                                                    allottot = 0;
                                                }
                                            }
                                        }
                                    }
                                    double paidvalue = 0;
                                    if (checkpaid == 0)
                                    {
                                        foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                        {
                                            int g = dr.Key;
                                            string DicValue = dr.Value;
                                            if (DicValue == "paid")
                                            {
                                                ColCntGrd = g;
                                                double.TryParse(Convert.ToString(ds.Tables[1].Rows[i]["paid"]), out paidvalue);
                                                fnlamount = Convert.ToDouble(paidvalue);
                                                ColCntGrd = dtReport.Columns.Count;
                                                drowGrd[ColCntGrd] = Convert.ToString(paidvalue);
                                                if (!grandtotal.ContainsKey(ColCntGrd))
                                                    grandtotal.Add(ColCntGrd, Convert.ToString(paidvalue));
                                                else
                                                {
                                                    double amount = 0;
                                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd]), out amount);
                                                    amount += paidvalue;
                                                    grandtotal.Remove(ColCntGrd);
                                                    grandtotal.Add(ColCntGrd, Convert.ToString(amount));
                                                }
                                            }
                                        }
                                    }

                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                        {
                                            if (chkl_paid.Items[pay].Selected == true)
                                            {
                                                ds.Tables[2].DefaultView.RowFilter = " Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                                dv = ds.Tables[2].DefaultView;
                                                int colnew = Convert.ToInt32(newhash1[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                                if (dv.Count > 0)
                                                {
                                                    double.TryParse(Convert.ToString(dv[0]["total"]), out totamount);
                                                    fnlamount = fnlamount + totamount;
                                                }
                                                foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                                {
                                                    int g = dr.Key;
                                                    string DicValue = dr.Value;
                                                    if (DicValue == chkl_paid.Items[pay].Value + "@" + "Paid")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(totamount);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(totamount));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += totamount;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                        totamount = 0;
                                                    }
                                                }
                                            }
                                        }
                                        if (checkpaid != 0)
                                        {
                                            foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                            {
                                                int g = dr.Key;
                                                string DicValue = dr.Value;
                                                if (DicValue == "Total Paid")
                                                {
                                                    ColCntGrd = g;
                                                    drowGrd[ColCntGrd] = Convert.ToString(fnlamount);
                                                    if (!grandtotal.ContainsKey(ColCntGrd))
                                                        grandtotal.Add(ColCntGrd, Convert.ToString(fnlamount));
                                                    else
                                                    {
                                                        double amount = 0;
                                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd]), out amount);
                                                        amount += fnlamount;
                                                        grandtotal.Remove(ColCntGrd);
                                                        grandtotal.Add(ColCntGrd, Convert.ToString(amount));
                                                    }
                                                    fnlamount = 0;
                                                }
                                            }
                                        }
                                    }
                                    if (ds.Tables[5].Rows.Count > 0)
                                    {
                                        double count = 0;
                                        DataView studcount = new DataView();
                                        ds.Tables[5].DefaultView.RowFilter = " Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                        studcount = ds.Tables[5].DefaultView;
                                        if (studcount.Count > 0)
                                        {
                                            double.TryParse(Convert.ToString(studcount[0]["countval"]), out count);
                                        }
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 1] = Convert.ToString(count);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 1))
                                            grandtotal.Add(ColCntGrd - 1, Convert.ToString(count));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 1]), out amount);
                                            amount += count;
                                            grandtotal.Remove(ColCntGrd - 1);
                                            grandtotal.Add(ColCntGrd - 1, Convert.ToString(amount));
                                        }
                                    }
                                    dtReport.Rows.Add(drowGrd);
                                }
                                if (txt_roll.Text.Trim() != "")
                                {
                                }
                                #endregion

                                #region grandtot
                                drowGrd = dtReport.NewRow();
                                drowGrd[0] = "Grand Total";
                                double grandvalue = 0;
                                for (int j = 4; j < dtReport.Columns.Count; j++)
                                {
                                    double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                                    drowGrd[j] = Convert.ToString(grandvalue);
                                }
                                dtReport.Rows.Add(drowGrd);

                                #endregion
                            }
                            #endregion

                            #region detail visible

                            grdStudentReport.DataSource = dtReport;
                            grdStudentReport.DataBind();
                            grdStudentReport.Visible = true;

                            GridViewRow row = grdStudentReport.Rows[0];
                            GridViewRow previousRow = grdStudentReport.Rows[1];

                            for (int i = 0; i < dtReport.Columns.Count; i++)
                            {
                                if (row.Cells[i].Text == previousRow.Cells[i].Text)
                                {
                                    row.Cells[i].RowSpan = 2;
                                    previousRow.Cells[i].Visible = false;
                                }
                            }
                            //ColumnSpan
                            for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                            {
                                TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                                TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                                if (colum.Text == previouscol.Text)
                                {
                                    if (previouscol.ColumnSpan == 0)
                                    {
                                        if (colum.ColumnSpan == 0)
                                        {
                                            previouscol.ColumnSpan += 2;
                                        }
                                        else
                                        {
                                            previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                        }
                                        colum.Visible = false;
                                    }
                                }
                            }
                            if (rbdepthead.Checked == true || rbdeptledg.Checked == true)
                            {
                                foreach (KeyValuePair<string, string> dr in dicRowColorColumn)
                                {
                                    string g = dr.Key;
                                    string[] colValue = g.Split('$');
                                    int rowValue = Convert.ToInt32(colValue[0]);
                                    int columnValue = Convert.ToInt32(colValue[1]);
                                    string DicValue = dr.Value;
                                    if (DicValue == "NoBalance")
                                    {
                                        grdStudentReport.Rows[rowValue].Cells[columnValue].BackColor = ColorTranslator.FromHtml("#F08080");
                                    }
                                    if (DicValue == "Balance")
                                    {
                                        grdStudentReport.Rows[rowValue].Cells[columnValue].BackColor = ColorTranslator.FromHtml("#90EE90");
                                    }
                                }
                            }
                            else
                            {
                                foreach (KeyValuePair<int, string> dr in dicRowColor)
                                {
                                    int g = dr.Key;
                                    string DicValue = dr.Value;
                                    if (DicValue == "NoBalance")
                                    {
                                        grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                                    }
                                    if (DicValue == "Balance")
                                    {
                                        grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                                    }
                                }
                            }
                            divcommon.Visible = true;
                            header.Visible = true;
                            div1.Visible = true;
                            divledger.Visible = false;
                            lbl_ledg.Visible = false;
                            lbl_ledg.Text = "";
                            Grdledger.Visible = false;
                            lbl_bat.Visible = false;
                            lbl_bat.Text = "";
                            GrdBatch.Visible = false;
                            lbl_degr.Visible = false;
                            lbl_degr.Text = "";
                            GrdDegree.Visible = false;
                            lbl_dep.Visible = false;
                            lbl_dep.Text = "";
                            GrdDept.Visible = false;
                            lbl_sem.Visible = false; ;
                            lbl_sem.Text = "";
                            GrdSem.Visible = false;
                            rptprint.Visible = true;
                            //  rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                            lblhed.Visible = true;
                            // lblhed.Text = "Department-->Ledger";
                            pheaderfilter.Visible = true;
                            pcolumnorder.Visible = true;
                            //pnlledgercolorder.Visible = false;
                            //Pnlledcolorder.Visible = false;
                            //pnl_batchcolorder.Visible = false;
                            //pnl_batcolorder.Visible = false;
                            //pnl_degcolorder.Visible = false;
                            //pnl_degreecolorder.Visible = false;
                            //pnl_deptcolord.Visible = false;
                            //pnl_deptcolorder.Visible = false;
                            //pnl_semcolord.Visible = false;
                            //pnl_semcolorder.Visible = false;
                            //btn_fpled.Visible = false;
                            //btn_fpbat.Visible = false;
                            //btn_fpdeg.Visible = false;
                            //btn_fpdep.Visible = false;
                            ////   rptprint.Visible = false;
                            //pnl_studcolord.Visible = false;
                            //pnl_studcolorder.Visible = false;
                            divstudcell.Visible = false;
                            lbl_semcell.Text = "";
                            divdept.Visible = false;
                            divdegree.Visible = false;
                            divbatch.Visible = false;
                            header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                            div1.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                            #endregion
                        }
                        #endregion
                    }
                    else
                    {
                        grdStudentReport.Visible = false;
                        div1.Visible = false;
                        rptprint.Visible = false;
                        pheaderfilter.Visible = false;
                        pcolumnorder.Visible = false;
                        lblhed.Text = "";
                        imgdiv2.Visible = true;
                        lbl_alert.Visible = true;
                        lbl_alert.Text = "No Record Found";
                    }
                }
            }
            #endregion

            #region with Academic Year Setting added by saranya

            else
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    #region common
                    if (rbdeptcommon.Checked == true)
                    {
                        #region design
                        loadcolumns();
                        DataView dv = new DataView();
                        arrColDeptNames.Add("S.No");
                        arrColDeptNames2.Add("S.No");
                        dtReport.Columns.Add("S.No");
                        arrColDeptNames.Add(lbldeg.Text);
                        arrColDeptNames2.Add(lbldeg.Text);
                        dtReport.Columns.Add(lbldeg.Text);
                        arrColDeptNames.Add(lbldept.Text);
                        arrColDeptNames2.Add(lbldept.Text);
                        dtReport.Columns.Add(lbldept.Text);
                        arrColDeptNames.Add("Student Count");
                        arrColDeptNames2.Add("Student Count");
                        dtReport.Columns.Add("Student Count");
                        arrColDeptNames.Add("Allot");
                        arrColDeptNames2.Add("Allot");
                        dtReport.Columns.Add("Allot");
                        arrColDeptNames.Add("Concession");
                        arrColDeptNames2.Add("Concession");
                        dtReport.Columns.Add("Concession");
                        arrColDeptNames.Add("Scholarship");
                        arrColDeptNames2.Add("Scholarship");
                        dtReport.Columns.Add("Scholarship");
                        arrColDeptNames.Add("Total");
                        arrColDeptNames2.Add("Total");
                        dtReport.Columns.Add("Total");

                        Hashtable newhash = new Hashtable();

                        if (chkl_paid.Items.Count > 0)
                        {
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    countval++;
                                    arrColDeptNames.Add("Paid");
                                    arrColDeptNames2.Add(chkl_paid.Items[s].Text);
                                    dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                    newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                }
                            }
                            if (countval != 0)
                            {
                                arrColDeptNames.Add("Paid");
                                arrColDeptNames2.Add("Total Paid");
                                dtReport.Columns.Add("Total Paid");
                            }
                        }
                        if (countval == 0)
                        {
                            arrColDeptNames.Add("Paid");
                            arrColDeptNames2.Add("Paid");
                            dtReport.Columns.Add("Paid");
                        }
                        arrColDeptNames.Add("Balance");
                        arrColDeptNames2.Add("Balance");
                        dtReport.Columns.Add("Balance");
                        arrColDeptNames.Add("Refund Amount");
                        arrColDeptNames2.Add("Refund Amount");
                        dtReport.Columns.Add("Refund Amount");
                        arrColDeptNames.Add("Excess Amount");
                        arrColDeptNames2.Add("Excess Amount");
                        dtReport.Columns.Add("Excess Amount");
                        arrColDeptNames.Add("Fine Amount");
                        arrColDeptNames2.Add("Fine Amount");
                        dtReport.Columns.Add("Fine Amount");
                        DataRow drHdr1 = dtReport.NewRow();
                        DataRow drHdr2 = dtReport.NewRow();
                        for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                        {
                            drHdr1[grCol] = arrColDeptNames[grCol];
                            drHdr2[grCol] = arrColDeptNames2[grCol];
                        }
                        dtReport.Rows.Add(drHdr1);
                        dtReport.Rows.Add(drHdr2);

                        #endregion

                        #region new value

                        Dictionary<string, string> getAcdYear = new Dictionary<string, string>();
                        if (cbAcdYear.Checked)
                        {
                            #region Academic Year
                            DataSet dsNormal = ds.Copy();
                            try
                            {
                                string clgCode = Convert.ToString(ddl_collegename.SelectedItem.Value);
                                string acdYear = Convert.ToString(ddlAcademic.SelectedItem.Text);
                                getAcdYear = getOldSettings(acdYear);//(acdYear, clgCode);
                                DataSet dsFinal = new DataSet();
                                if (getAcdYear.Count > 0)
                                {
                                    bool boolDs = false;
                                    DataTable dtFirst = ds.Tables[0].DefaultView.ToTable();
                                    foreach (KeyValuePair<string, string> getVal in getAcdYear)
                                    {
                                        string feeCate = getVal.Value.Replace(",", "','");
                                        string degcourseid = Convert.ToString(getCblSelectedValue(cbl_dept));

                                        ds.Tables[4].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "'";
                                        DataTable dtYear = ds.Tables[4].DefaultView.ToTable();

                                        ds.Tables[1].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";
                                        DataTable dtAllot = ds.Tables[1].DefaultView.ToTable();

                                        ds.Tables[2].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "' and batch_year='" + getVal.Key.Split('$')[1] + "' and feecategory in('" + feeCate + "')";
                                        DataTable dtPaid = ds.Tables[2].DefaultView.ToTable();

                                        ds.Tables[0].DefaultView.RowFilter = "college_Code='" + getVal.Key.Split('$')[0] + "'  and Degree_Code in('" + degcourseid + "')";// and feecategory in('" + feeCate + "')";and batch_year='" + getVal.Key.Split('$')[1] + "'
                                        DataTable dtstudCnt = ds.Tables[0].DefaultView.ToTable();
                                        if (!boolDs)
                                        {
                                            dsFinal.Reset();
                                            dsFinal.Tables.Add(dtFirst);
                                            dsFinal.Tables.Add(dtAllot);
                                            dsFinal.Tables.Add(dtPaid);
                                            dsFinal.Tables.Add(dtYear);
                                            dsFinal.Tables.Add(dtstudCnt);
                                            boolDs = true;
                                        }
                                        else
                                        {
                                            // ds.Merge(ds.Tables[0]);
                                            dsFinal.Merge(dtAllot);
                                            dsFinal.Merge(dtPaid);
                                            dsFinal.Merge(dtYear);
                                            dsFinal.Merge(dtstudCnt);
                                        }
                                    }
                                }
                                if (dsFinal.Tables.Count > 0 && dsFinal.Tables[0].Rows.Count > 0)
                                {
                                    ds.Reset();
                                    ds = dsFinal.Copy();
                                }
                            }
                            catch
                            {
                                ds.Reset();
                                ds = dsNormal.Copy();
                            }
                            #endregion
                        }
                        Hashtable httotal = new Hashtable();
                        Dictionary<string, string> currentSem = getCurSem();

                        bool boolClg = false;
                        int row1 = 0;
                        for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                        {
                            double tempStud = 0;
                            double demandAmt = 0;
                            double paidAmt = 0;
                            double TotalAmount = 0;
                            double tot_amount = 0;
                            double fnlamount = 0;
                            double studCnt = 0;
                            double concessionamt = 0;
                            double allotamt = 0;
                            double tempPaidDr = 0;
                            double tempAllot = 0;
                            double allotmentAmount = 0;
                            double ConcessionAmount = 0;
                            double Government = 0;
                            double scholarship = 0;
                            double totalvalue = 0;
                            double bal = 0;
                            double totamount = 0;
                            double paidvalue = 0;
                            double refund = 0;
                            double refundAmount = 0;
                            double paidamt = 0;
                            int colnew = 0;

                            string clgCode = Convert.ToString(ds.Tables[0].Rows[row]["college_code"]);

                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = Convert.ToString(row + 1);

                            drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[row]["Course_Name"].ToString());
                            drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[row]["Dept_Name"].ToString());
                            if (ds.Tables[4].Rows.Count > 0)
                            {
                                boolClg = false;
                                ds.Tables[4].DefaultView.RowFilter = "college_Code='" + clgCode + "'";
                                DataTable dtbatch = ds.Tables[4].DefaultView.ToTable();
                                if (dtbatch.Rows.Count > 0)
                                {
                                    for (int bat = 0; bat < dtbatch.Rows.Count; bat++)
                                    {
                                        string batch = Convert.ToString(dtbatch.Rows[bat]["batch_year"]);
                                        string curSem = string.Empty;
                                        string curSemCode = string.Empty;
                                        if (!cbAcdYear.Checked)
                                        {
                                            if (currentSem.ContainsKey(batch))
                                                curSem = Convert.ToString(currentSem[batch]);
                                            Dictionary<string, string> getFeeCode = getFeecode(clgCode);//get current sem code 
                                            curSem = getCurYear(curSem);
                                            if (getFeeCode.ContainsKey(curSem))
                                                curSemCode = Convert.ToString(getFeeCode[curSem.Trim()]);
                                        }
                                        else
                                        {
                                            if (getAcdYear.ContainsKey(clgCode + "$" + batch))
                                            {
                                                curSemCode = Convert.ToString(getAcdYear[clgCode + "$" + batch]);
                                                curSemCode = curSemCode.Replace(",", "','");
                                            }
                                        }
                                        if (!string.IsNullOrEmpty(curSemCode))
                                        {
                                            string Degree_Code = Convert.ToString(ds.Tables[0].Rows[row]["Degree_Code"]);
                                            if (ds.Tables[1].Rows.Count > 0)
                                            {
                                                if (checkSchoolSetting() != 0)
                                                {
                                                    ds.Tables[1].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch + "' and Degree_Code='" + Degree_Code + "'";
                                                }
                                                else
                                                {
                                                    ds.Tables[1].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "')  and Degree_Code='" + Degree_Code + "'";
                                                }
                                                DataTable dvpaid = ds.Tables[1].DefaultView.ToTable();

                                                if (dvpaid.Rows.Count > 0)
                                                {
                                                    double.TryParse(Convert.ToString(dvpaid.Compute("sum(Allot)", "")), out allotamt);
                                                    allotmentAmount += allotamt;
                                                    double.TryParse(Convert.ToString(dvpaid.Compute("sum(Consustion)", "")), out concessionamt);
                                                    ConcessionAmount += concessionamt;
                                                    double.TryParse(Convert.ToString(dvpaid.Compute("sum(Government)", "")), out scholarship);
                                                    Government += scholarship;
                                                    double.TryParse(Convert.ToString(dvpaid.Compute("sum(total)", "")), out tempAllot);
                                                    demandAmt += tempAllot;
                                                    TotalAmount += tempAllot;
                                                    double.TryParse(Convert.ToString(dvpaid.Compute("sum(RefundAmount)", "")), out refund);
                                                    refundAmount += refund;
                                                }
                                            }
                                            if (ds.Tables[2].Rows.Count > 0)
                                            {
                                                if (checkSchoolSetting() != 0)
                                                {
                                                    ds.Tables[2].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch + "' and Degree_Code='" + Degree_Code + "'";
                                                }
                                                else
                                                {
                                                    ds.Tables[2].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and feecategory in('" + curSemCode + "') and Degree_Code='" + Degree_Code + "'";
                                                }
                                                DataTable dvpaid = ds.Tables[2].DefaultView.ToTable();
                                                if (dvpaid.Rows.Count > 0)
                                                {
                                                    double.TryParse(Convert.ToString(dvpaid.Compute("sum(total)", "")), out tempPaidDr);
                                                    paidAmt += tempPaidDr;
                                                }
                                            }
                                            if (ds.Tables[0].Rows.Count > 0)
                                            {
                                                ds.Tables[0].DefaultView.RowFilter = "college_code='" + ds.Tables[0].Rows[row]["college_code"] + "' and Degree_Code='" + Degree_Code + "'";
                                                DataTable dvpaids = ds.Tables[0].DefaultView.ToTable();
                                                if (dvpaids.Rows.Count > 0)
                                                {
                                                    DataTable dtColumns = dvpaids.DefaultView.ToTable(true, "studCount", "college_code", "Dept_Name");
                                                    double.TryParse(Convert.ToString(dvpaids.Rows[0]["studcount"]), out tempStud);
                                                    studCnt += tempStud;
                                                }
                                            }
                                            DataView dvex = new DataView();
                                            if (ds.Tables[3].Rows.Count > 0)
                                            {
                                                ds.Tables[3].DefaultView.RowFilter = "Degree_Code='" + Convert.ToString(ds.Tables[0].Rows[row]["Degree_Code"]) + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch + "' ";
                                                dvex = ds.Tables[3].DefaultView;
                                                if (dvex.Count > 0 && dvex != null)
                                                {
                                                    for (int k = 0; k < dvex.Count; k++)
                                                    {
                                                        double amount = 0;
                                                        double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                                        tot_amount += amount;
                                                    }
                                                }
                                            }

                                            //paymode values
                                            if (ds.Tables[2].Rows.Count > 0)
                                            {
                                                for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                                {
                                                    if (chkl_paid.Items[pay].Selected == true)
                                                    {
                                                        if (checkSchoolSetting() != 0)
                                                        {
                                                            ds.Tables[2].DefaultView.RowFilter = "Degree_Code='" + Convert.ToString(ds.Tables[0].Rows[row]["Degree_Code"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and feecategory in('" + curSemCode + "') and batch_year='" + batch + "'";
                                                        }
                                                        else
                                                        {
                                                            ds.Tables[2].DefaultView.RowFilter = "Degree_Code='" + Convert.ToString(ds.Tables[0].Rows[row]["Degree_Code"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and feecategory in('" + curSemCode + "')";
                                                        }
                                                        dv = ds.Tables[2].DefaultView;
                                                        colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                                        for (int k = 0; k < dv.Count; k++)
                                                        {
                                                            double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                                            fnlamount = fnlamount + totamount;
                                                            paidamt = paidamt + totamount;
                                                        }
                                                        if (!httotal.ContainsKey(colnew))
                                                            httotal.Add(colnew, Convert.ToString(fnlamount));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(httotal[colnew]), out amount);
                                                            amount += fnlamount;
                                                            httotal.Remove(colnew);
                                                            httotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                        fnlamount = 0;
                                                        drowGrd[colnew] = Convert.ToString(paidamt);
                                                        if (!grandtotal.ContainsKey(colnew))
                                                            grandtotal.Add(colnew, Convert.ToString(paidamt));
                                                        else
                                                        {
                                                            double amount = 0;
                                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                                            amount += paidamt;
                                                            grandtotal.Remove(colnew);
                                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                                        }
                                                        paidamt = 0;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                bal = Convert.ToDouble(totalvalue);
                                                ColCntGrd = dtReport.Columns.Count;
                                                drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                                if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                                else
                                                {
                                                    double amount = 0;
                                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                                    amount += bal;
                                                    grandtotal.Remove(ColCntGrd - 4);
                                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                                }
                                            }
                                            boolClg = true;
                                        }
                                    }
                                    if (boolClg)
                                    {
                                        drowGrd[3] = Convert.ToString(tempStud);
                                        if (!grandtotal.ContainsKey(3))
                                            grandtotal.Add(3, Convert.ToString(tempStud));
                                        else
                                        {
                                            double count = 0;
                                            double.TryParse(Convert.ToString(grandtotal[3]), out count);
                                            count += tempStud;
                                            grandtotal.Remove(3);
                                            grandtotal.Add(3, Convert.ToString(count));
                                        }
                                        //allot
                                        drowGrd[4] = Convert.ToString(allotmentAmount);
                                        if (!grandtotal.ContainsKey(4))
                                            grandtotal.Add(4, Convert.ToString(allotmentAmount));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                            amount += allotmentAmount;
                                            grandtotal.Remove(4);
                                            grandtotal.Add(4, Convert.ToString(amount));
                                        }
                                        //consession
                                        drowGrd[5] = Convert.ToString(ConcessionAmount);
                                        if (!grandtotal.ContainsKey(5))
                                            grandtotal.Add(5, Convert.ToString(ConcessionAmount));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                            amount += ConcessionAmount;
                                            grandtotal.Remove(5);
                                            grandtotal.Add(5, Convert.ToString(amount));
                                        }
                                        //government
                                        drowGrd[6] = Convert.ToString(Government);
                                        if (!grandtotal.ContainsKey(6))
                                            grandtotal.Add(6, Convert.ToString(Government));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                            amount += Government;
                                            grandtotal.Remove(6);
                                            grandtotal.Add(6, Convert.ToString(amount));
                                        }
                                        //total
                                        drowGrd[7] = Convert.ToString(demandAmt);
                                        if (!grandtotal.ContainsKey(7))
                                            grandtotal.Add(7, Convert.ToString(demandAmt));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[7]), out amount);
                                            amount += demandAmt;
                                            grandtotal.Remove(7);
                                            grandtotal.Add(7, Convert.ToString(amount));
                                        }
                                        //paid paymode count=0
                                        if (countval == 0)
                                        {
                                            ColCntGrd = dtReport.Columns.Count;
                                            drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                                            else
                                            {
                                                double amount = 0;
                                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                                amount += paidvalue;
                                                grandtotal.Remove(ColCntGrd - 5);
                                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                            }
                                        }
                                        //refund
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 3] = Convert.ToString(refundAmount);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                            grandtotal.Add(ColCntGrd - 3, Convert.ToString(refundAmount));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                            amount += refundAmount;
                                            grandtotal.Remove(ColCntGrd - 3);
                                            grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                                        }
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                            grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                            amount += tot_amount;
                                            grandtotal.Remove(ColCntGrd - 2);
                                            grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                                        }
                                        tot_amount = 0;
                                        //Paymode values Printing
                                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                        {
                                            if (chkl_paid.Items[pay].Selected == true)
                                            {
                                                colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                                if (httotal.Contains(colnew))
                                                {
                                                    drowGrd[colnew] = Convert.ToString(httotal[colnew]);
                                                }
                                            }
                                        }
                                        int TotPaymodeValue = 0;
                                        int PaymodeCount = chkl_paid.Items.Count;
                                        foreach (DictionaryEntry item in httotal)
                                        {
                                            string col = item.Key.ToString();
                                            string value = item.Value.ToString();
                                            TotPaymodeValue = (Convert.ToInt32(TotPaymodeValue) + Convert.ToInt32(value));
                                        }
                                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(TotPaymodeValue));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                            amount += TotPaymodeValue;
                                            grandtotal.Remove(ColCntGrd - 5);
                                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                        }
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 5] = Convert.ToString(TotPaymodeValue);
                                        httotal.Clear();

                                        //balance
                                        bal = TotalAmount - TotPaymodeValue;
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                            amount += bal;
                                            grandtotal.Remove(ColCntGrd - 4);
                                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                        }

                                        TotalAmount = 0;

                                        if (bal == 0)
                                            dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                        else
                                            dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                        row1++;
                                    }
                                }
                            }
                            dtReport.Rows.Add(drowGrd);
                        }
                        #endregion

                        #region grandtot

                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = "Grand Total";
                        double grandvalue = 0;
                        for (int j = 2; j < dtReport.Columns.Count; j++)
                        {
                            double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                            drowGrd[j] = Convert.ToString(grandvalue);
                        }
                        dtReport.Rows.Add(drowGrd);

                        #endregion

                        #region visible
                        grdStudentReport.DataSource = dtReport;
                        grdStudentReport.DataBind();
                        grdStudentReport.Visible = true;

                        GridViewRow rows = grdStudentReport.Rows[0];
                        GridViewRow previousRow = grdStudentReport.Rows[1];

                        for (int i = 0; i < dtReport.Columns.Count; i++)
                        {
                            if (rows.Cells[i].Text == previousRow.Cells[i].Text)
                            {
                                rows.Cells[i].RowSpan = 2;
                                previousRow.Cells[i].Visible = false;
                                //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                                //                       previousRow.Cells[i].RowSpan + 1;
                                //previousRow.Cells[i].Visible = false;
                            }
                        }
                        //ColumnSpan

                        for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                        {
                            TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                            TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                            if (colum.Text == previouscol.Text)
                            {
                                if (previouscol.ColumnSpan == 0)
                                {
                                    if (colum.ColumnSpan == 0)
                                    {
                                        previouscol.ColumnSpan += 2;
                                    }
                                    else
                                    {
                                        previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                    }
                                    colum.Visible = false;
                                }
                            }
                        }

                        foreach (KeyValuePair<int, string> dr in dicRowColor)
                        {
                            int g = dr.Key;
                            string DicValue = dr.Value;
                            if (DicValue == "NoBalance")
                            {
                                grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                            }
                            if (DicValue == "Balance")
                            {
                                grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                            }
                        }

                        divcommon.Visible = true;
                        header.Visible = true;
                        div1.Visible = true;
                        divledger.Visible = false;
                        lbl_ledg.Visible = false;
                        lbl_ledg.Text = "";
                        Grdledger.Visible = false;
                        lbl_bat.Visible = false;
                        lbl_bat.Text = "";
                        GrdBatch.Visible = false;
                        lbl_degr.Visible = false;
                        lbl_degr.Text = "";
                        GrdDegree.Visible = false;
                        lbl_dep.Visible = false;
                        lbl_dep.Text = "";
                        GrdDept.Visible = false;
                        lbl_sem.Visible = false; ;
                        lbl_sem.Text = "";
                        GrdSem.Visible = false;
                        rptprint.Visible = true;
                        //  rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                        lblhed.Visible = true;
                        lblhed.Text = "Degree";
                        pheaderfilter.Visible = true;
                        pcolumnorder.Visible = true;
                        //pnlledgercolorder.Visible = false;
                        //Pnlledcolorder.Visible = false;
                        //pnl_batchcolorder.Visible = false;
                        //pnl_batcolorder.Visible = false;
                        //pnl_degcolorder.Visible = false;
                        //pnl_degreecolorder.Visible = false;
                        //pnl_deptcolord.Visible = false;
                        //pnl_deptcolorder.Visible = false;
                        //pnl_semcolord.Visible = false;
                        //pnl_semcolorder.Visible = false;
                        //btn_fpled.Visible = false;
                        //btn_fpbat.Visible = false;
                        //btn_fpdeg.Visible = false;
                        //btn_fpdep.Visible = false;
                        ////  rptprint.Visible = false;
                        //pnl_studcolord.Visible = false;
                        //pnl_studcolorder.Visible = false;
                        divstudcell.Visible = false;
                        lbl_semcell.Text = "";
                        divdept.Visible = false;
                        divdegree.Visible = false;
                        divbatch.Visible = false;
                        header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                        div1.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                        #endregion
                    }
                    #endregion

                }
                else
                {
                    grdStudentReport.Visible = false;
                    div1.Visible = false;
                    rptprint.Visible = false;
                    pheaderfilter.Visible = false;
                    pcolumnorder.Visible = false;
                    lblhed.Text = "";
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "No Record Found";
                }

            }
            #endregion

        }
        catch (Exception ex) { }
    }

    #endregion

    #region semmethod

    public void semvalues()
    {
        try
        {
            ArrayList arrColSemNames = new ArrayList();
            ArrayList arrColSemNames2 = new ArrayList();
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    #region design
                    loadcolumns();
                    DataView dv = new DataView();
                    int check = 0;
                    arrColSemNames.Add("S.No");
                    arrColSemNames2.Add("S.No");
                    dtReport.Columns.Add("S.No");
                    arrColSemNames.Add(lblsem.Text);
                    arrColSemNames2.Add(lblsem.Text);
                    dtReport.Columns.Add(lblsem.Text);
                    arrColSemNames.Add("Allot");
                    arrColSemNames2.Add("Allot");
                    dtReport.Columns.Add("Allot");
                    arrColSemNames.Add("Concession");
                    arrColSemNames2.Add("Concession");
                    dtReport.Columns.Add("Concession");
                    arrColSemNames.Add("Scholarship");
                    arrColSemNames2.Add("Scholarship");
                    dtReport.Columns.Add("Scholarship");
                    arrColSemNames.Add("Total");
                    arrColSemNames2.Add("Total");
                    dtReport.Columns.Add("Total");

                    Hashtable newhash = new Hashtable();

                    if (chkl_paid.Items.Count > 0)
                    {
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                arrColSemNames.Add("Paid");
                                arrColSemNames2.Add(chkl_paid.Items[s].Text);
                                dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                            }
                        }
                        if (check != 0)
                        {
                            arrColSemNames.Add("Paid");
                            arrColSemNames2.Add("Total Paid");
                            dtReport.Columns.Add("Total Paid");
                        }
                    }
                    if (check == 0)
                    {
                        arrColSemNames.Add("Paid");
                        arrColSemNames2.Add("Paid");
                        dtReport.Columns.Add("Paid");
                    }
                    arrColSemNames.Add("Balance");
                    arrColSemNames2.Add("Balance");
                    dtReport.Columns.Add("Balance");
                    arrColSemNames.Add("Refund Amount");
                    arrColSemNames2.Add("Refund Amount");
                    dtReport.Columns.Add("Refund Amount");
                    arrColSemNames.Add("Excess Amount");
                    arrColSemNames2.Add("Excess Amount");
                    dtReport.Columns.Add("Excess Amount");
                    arrColSemNames.Add("Fine Amount");
                    arrColSemNames2.Add("Fine Amount");
                    dtReport.Columns.Add("Fine Amount");
                    DataRow drHdr1 = dtReport.NewRow();
                    DataRow drHdr2 = dtReport.NewRow();
                    for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                    {
                        drHdr1[grCol] = arrColSemNames[grCol];
                        drHdr2[grCol] = arrColSemNames2[grCol];
                    }
                    dtReport.Rows.Add(drHdr1);
                    dtReport.Rows.Add(drHdr2);

                    #endregion

                    #region value

                    double allotamt = 0;
                    double consamt = 0;
                    double govt = 0;
                    double tot_amount = 0;
                    double totalvalue = 0;
                    double bal = 0;
                    double totamount = 0;
                    double fnlamount = 0;
                    double paidamt = 0;
                    int ColCntGrd = 0;

                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = Convert.ToString(i + 1);
                        drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["TextVal"].ToString());
                        //allot
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                        drowGrd[2] = Convert.ToString(allotamt);
                        if (!grandtotal.ContainsKey(2))
                            grandtotal.Add(2, Convert.ToString(allotamt));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[2]), out amount);
                            amount += allotamt;
                            grandtotal.Remove(2);
                            grandtotal.Add(2, Convert.ToString(amount));
                        }
                        //consession
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                        drowGrd[3] = Convert.ToString(consamt);
                        if (!grandtotal.ContainsKey(3))
                            grandtotal.Add(3, Convert.ToString(consamt));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[3]), out amount);
                            amount += consamt;
                            grandtotal.Remove(3);
                            grandtotal.Add(3, Convert.ToString(amount));
                        }
                        //government
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                        drowGrd[4] = Convert.ToString(govt);
                        if (!grandtotal.ContainsKey(4))
                            grandtotal.Add(4, Convert.ToString(govt));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                            amount += govt;
                            grandtotal.Remove(4);
                            grandtotal.Add(4, Convert.ToString(amount));
                        }
                        //total
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                        drowGrd[5] = Convert.ToString(totalvalue);
                        if (!grandtotal.ContainsKey(5))
                            grandtotal.Add(5, Convert.ToString(totalvalue));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                            amount += totalvalue;
                            grandtotal.Remove(5);
                            grandtotal.Add(5, Convert.ToString(amount));
                        }
                        //paid paymode count=0
                        double paidvalue = 0;
                        if (check == 0)
                        {
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                            fnlamount = Convert.ToDouble(paidvalue);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                amount += paidvalue;
                                grandtotal.Remove(ColCntGrd - 5);
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                            }
                        }
                        //refund
                        double refund = 0;
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                        if (!grandtotal.ContainsKey(ColCntGrd - 3))
                            grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                            amount += refund;
                            grandtotal.Remove(ColCntGrd - 3);
                            grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                        }
                        //excess
                        DataView dvex = new DataView();
                        if (ds.Tables[2].Rows.Count > 0)
                        {
                            ds.Tables[2].DefaultView.RowFilter = "FeeCategory='" + Convert.ToString(ds.Tables[2].Rows[i]["FeeCategory"]) + "'";
                            dvex = ds.Tables[2].DefaultView;
                            if (dvex.Count > 0 && dvex != null)
                            {
                                for (int k = 0; k < dvex.Count; k++)
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                    tot_amount += amount;
                                }
                            }
                        }
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                        if (!grandtotal.ContainsKey(ColCntGrd - 2))
                            grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                            amount += tot_amount;
                            grandtotal.Remove(ColCntGrd - 2);
                            grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                        }
                        tot_amount = 0;
                        //paymode value
                        if (ds.Tables[1].Rows.Count > 0)
                        {
                            for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                            {
                                if (chkl_paid.Items[pay].Selected == true)
                                {
                                    ds.Tables[1].DefaultView.RowFilter = "TextVal='" + Convert.ToString(ds.Tables[0].Rows[i]["TextVal"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                    dv = ds.Tables[1].DefaultView;
                                    int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                    for (int k = 0; k < dv.Count; k++)
                                    {
                                        double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                        fnlamount = fnlamount + totamount;
                                        paidamt = paidamt + Convert.ToDouble(totamount);
                                    }
                                    drowGrd[colnew] = Convert.ToString(paidamt);
                                    if (!grandtotal.ContainsKey(colnew))
                                        grandtotal.Add(colnew, Convert.ToString(paidamt));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                        amount += paidamt;
                                        grandtotal.Remove(colnew);
                                        grandtotal.Add(colnew, Convert.ToString(amount));
                                    }
                                    paidamt = 0;
                                }
                            }
                            if (check != 0)
                            {
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                    amount += fnlamount;
                                    grandtotal.Remove(ColCntGrd - 5);
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                }
                            }
                            //balance
                            if (totalvalue != 0)
                            {
                                bal = totalvalue - fnlamount;
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                    amount += bal;
                                    grandtotal.Remove(ColCntGrd - 4);
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                }
                                fnlamount = 0;
                                if (bal == 0)
                                    dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                else
                                    dicRowColor.Add(dtReport.Rows.Count, "Balance");
                            }
                        }
                        else
                        {
                            bal = Convert.ToDouble(totalvalue);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                            if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                amount += bal;
                                grandtotal.Remove(ColCntGrd - 4);
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                            }
                        }
                        dtReport.Rows.Add(drowGrd);
                    }

                    #endregion

                    #region grandtot
                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = "Grand Total";
                    double grandvalue = 0;
                    for (int j = 2; j < dtReport.Columns.Count; j++)
                    {
                        double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                        drowGrd[j] = Convert.ToString(grandvalue);
                    }
                    dtReport.Rows.Add(drowGrd);

                    #endregion

                    #region visible
                    grdStudentReport.DataSource = dtReport;
                    grdStudentReport.DataBind();
                    grdStudentReport.Visible = true;

                    GridViewRow row = grdStudentReport.Rows[0];
                    GridViewRow previousRow = grdStudentReport.Rows[1];

                    for (int i = 0; i < dtReport.Columns.Count; i++)
                    {
                        if (row.Cells[i].Text == previousRow.Cells[i].Text)
                        {
                            row.Cells[i].RowSpan = 2;
                            previousRow.Cells[i].Visible = false;
                            //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                            //                       previousRow.Cells[i].RowSpan + 1;
                            //previousRow.Cells[i].Visible = false;
                        }
                    }
                    //ColumnSpan

                    for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                    {
                        TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                        TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                        if (colum.Text == previouscol.Text)
                        {
                            if (previouscol.ColumnSpan == 0)
                            {
                                if (colum.ColumnSpan == 0)
                                {
                                    previouscol.ColumnSpan += 2;
                                }
                                else
                                {
                                    previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                }
                                colum.Visible = false;
                            }
                        }
                    }

                    foreach (KeyValuePair<int, string> dr in dicRowColor)
                    {
                        int g = dr.Key;
                        string DicValue = dr.Value;
                        if (DicValue == "NoBalance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                        }
                        if (DicValue == "Balance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                        }
                    }
                    divcommon.Visible = true;
                    header.Visible = true;
                    div1.Visible = true;
                    divledger.Visible = false;
                    lbl_ledg.Visible = false;
                    lbl_ledg.Text = "";
                    Grdledger.Visible = false;
                    lbl_bat.Visible = false;
                    lbl_bat.Text = "";
                    GrdBatch.Visible = false;
                    lbl_degr.Visible = false;
                    lbl_degr.Text = "";
                    GrdDegree.Visible = false;
                    lbl_dep.Visible = false;
                    lbl_dep.Text = "";
                    GrdDept.Visible = false;
                    lbl_sem.Visible = false; ;
                    lbl_sem.Text = "";
                    GrdSem.Visible = false;
                    rptprint.Visible = true;
                    //  rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                    lblhed.Visible = true;
                    lblhed.Text = "Semaster";
                    pheaderfilter.Visible = true;
                    pcolumnorder.Visible = true;
                    //pnlledgercolorder.Visible = false;
                    //Pnlledcolorder.Visible = false;
                    //pnl_batchcolorder.Visible = false;
                    //pnl_batcolorder.Visible = false;
                    //pnl_degcolorder.Visible = false;
                    //pnl_degreecolorder.Visible = false;
                    //pnl_deptcolord.Visible = false;
                    //pnl_deptcolorder.Visible = false;
                    //pnl_semcolord.Visible = false;
                    //pnl_semcolorder.Visible = false;
                    //btn_fpled.Visible = false;
                    //btn_fpbat.Visible = false;
                    //btn_fpdeg.Visible = false;
                    //btn_fpdep.Visible = false;
                    //// rptprint.Visible = false;
                    //pnl_studcolord.Visible = false;
                    //pnl_studcolorder.Visible = false;
                    divstudcell.Visible = false;
                    lbl_semcell.Text = "";
                    divdept.Visible = false;
                    divdegree.Visible = false;
                    divbatch.Visible = false;
                    header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                    div1.Attributes.Add("Style", "height:350px; width:950px; overflow:auto");
                    #endregion
                }
                else
                {
                    grdStudentReport.Visible = false;
                    div1.Visible = false;
                    rptprint.Visible = false;
                    pheaderfilter.Visible = false;
                    pcolumnorder.Visible = false;
                    lblhed.Text = "";
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "No Record Found";
                }
            }
        }
        catch { }
    }

    #endregion

    #region studmethod

    public void studvalues()
    {
        try
        {
            ArrayList arrColStudNames = new ArrayList();
            ArrayList arrColStudNames2 = new ArrayList();

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                double bal = 0;
                string totpaid = "";

                #region common
                if (rb_common.Checked == true)
                {
                    #region design

                    loadcolumns();
                    DataView dv = new DataView();
                    int check = 0;

                    arrColStudNames.Add("S.No");
                    arrColStudNames2.Add("S.No");
                    dtReport.Columns.Add("S.No");
                    arrColStudNames.Add("Student Name");
                    arrColStudNames2.Add("Student Name");
                    dtReport.Columns.Add("Student Name");
                    arrColStudNames.Add("Roll No");
                    arrColStudNames2.Add("Roll No");
                    dtReport.Columns.Add("Roll No");
                    arrColStudNames.Add("Reg No");
                    arrColStudNames2.Add("Reg No");
                    dtReport.Columns.Add("Reg No");
                    arrColStudNames.Add("Admission No");
                    arrColStudNames2.Add("Admission No");
                    dtReport.Columns.Add("Admission No");
                    arrColStudNames.Add(lbldeg.Text);
                    arrColStudNames2.Add(lbldeg.Text);
                    dtReport.Columns.Add(lbldeg.Text);
                    arrColStudNames.Add(lblsem.Text);
                    arrColStudNames2.Add(lblsem.Text);
                    dtReport.Columns.Add(lblsem.Text);
                    arrColStudNames.Add("Allot");
                    arrColStudNames2.Add("Allot");
                    dtReport.Columns.Add("Allot");
                    arrColStudNames.Add("Concession");
                    arrColStudNames2.Add("Concession");
                    dtReport.Columns.Add("Concession");
                    arrColStudNames.Add("Scholarship");
                    arrColStudNames2.Add("Scholarship");
                    dtReport.Columns.Add("Scholarship");
                    arrColStudNames.Add("Total");
                    arrColStudNames2.Add("Total");
                    dtReport.Columns.Add("Total");
                    arrColStudNames.Add("Net Amount");
                    arrColStudNames2.Add("Net Amount");
                    dtReport.Columns.Add("Net Amount");

                    Hashtable newhash = new Hashtable();

                    if (chkl_paid.Items.Count > 0)
                    {
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                arrColStudNames.Add("Paid");
                                arrColStudNames2.Add(chkl_paid.Items[s].Text);
                                dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                            }
                        }
                        if (check != 0)
                        {
                            arrColStudNames.Add("Paid");
                            arrColStudNames2.Add("Total Paid");
                            dtReport.Columns.Add("Total Paid");
                        }
                    }
                    if (check == 0)
                    {
                        arrColStudNames.Add("Paid");
                        arrColStudNames2.Add("Paid");
                        dtReport.Columns.Add("Paid");
                    }
                    arrColStudNames.Add("Balance");
                    arrColStudNames2.Add("Balance");
                    dtReport.Columns.Add("Balance");
                    arrColStudNames.Add("Refund Amount");
                    arrColStudNames2.Add("Refund Amount");
                    dtReport.Columns.Add("Refund Amount");
                    arrColStudNames.Add("Excess Amount");
                    arrColStudNames2.Add("Excess Amount");
                    dtReport.Columns.Add("Excess Amount");
                    arrColStudNames.Add("Fine Amount");
                    arrColStudNames2.Add("Fine Amount");
                    dtReport.Columns.Add("Fine Amount");
                    DataRow drHdr1 = dtReport.NewRow();
                    DataRow drHdr2 = dtReport.NewRow();
                    for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                    {
                        drHdr1[grCol] = arrColStudNames[grCol];
                        drHdr2[grCol] = arrColStudNames2[grCol];
                    }
                    dtReport.Rows.Add(drHdr1);
                    dtReport.Rows.Add(drHdr2);

                    #endregion

                    #region value

                    double totamount = 0;
                    double fnlamount = 0;
                    double paymodeamt = 0;
                    double paidamt = 0;
                    double allotamt = 0;
                    double consamt = 0;
                    double govt = 0;
                    double tot_amount = 0;
                    double totalvalue = 0;
                    double netamount = 0;
                    DataView Dview = new DataView();
                    int ColCntGrd = 0;
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = Convert.ToString(i + 1);
                        drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["Stud_Name"].ToString());
                        drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["Roll_No"].ToString());
                        drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["Reg_No"].ToString());
                        drowGrd[4] = Convert.ToString(ds.Tables[0].Rows[i]["roll_admit"].ToString());

                        string Degreename = "";
                        string Acrname = "";
                        if (ds.Tables[4].Rows.Count > 0)
                        {
                            ds.Tables[4].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "'";
                            Dview = ds.Tables[4].DefaultView;
                            if (Dview.Count > 0)
                            {
                                Degreename = Convert.ToString(Dview[0]["degreename"]);
                                Acrname = Convert.ToString(Dview[0]["dept_acronym"]);
                            }
                        }
                        string TextName = "";
                        if (ds.Tables[5].Rows.Count > 0)
                        {
                            ds.Tables[5].DefaultView.RowFilter = "TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                            Dview = ds.Tables[5].DefaultView;
                            if (Dview.Count > 0)
                            {
                                TextName = Convert.ToString(Dview[0]["TextVal"]);
                            }
                        }

                        if (deptacr == true)
                            drowGrd[5] = Convert.ToString(Acrname);
                        else
                            drowGrd[5] = Convert.ToString(Degreename);

                        drowGrd[6] = Convert.ToString(TextName);
                        //FpSpread1.Sheets[0].Cells[i, 2].Tag = Convert.ToString(ds.Tables[0].Rows[i]["App_No"].ToString());
                        //allot
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                        drowGrd[7] = Convert.ToString(allotamt);
                        if (!grandtotal.ContainsKey(7))
                            grandtotal.Add(7, Convert.ToString(allotamt));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[7]), out amount);
                            amount += allotamt;
                            grandtotal.Remove(7);
                            grandtotal.Add(7, Convert.ToString(amount));
                        }
                        //consession
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                        drowGrd[8] = Convert.ToString(consamt);
                        if (!grandtotal.ContainsKey(8))
                            grandtotal.Add(8, Convert.ToString(consamt));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[8]), out amount);
                            amount += consamt;
                            grandtotal.Remove(8);
                            grandtotal.Add(8, Convert.ToString(amount));
                        }
                        //government
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                        drowGrd[9] = Convert.ToString(govt);
                        if (!grandtotal.ContainsKey(9))
                            grandtotal.Add(9, Convert.ToString(govt));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[9]), out amount);
                            amount += govt;
                            grandtotal.Remove(9);
                            grandtotal.Add(9, Convert.ToString(amount));
                        }
                        //total
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                        drowGrd[10] = Convert.ToString(totalvalue);
                        if (!grandtotal.ContainsKey(10))
                            grandtotal.Add(10, Convert.ToString(totalvalue));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[10]), out amount);
                            amount += totalvalue;
                            grandtotal.Remove(10);
                            grandtotal.Add(10, Convert.ToString(amount));
                        }

                        //netamount
                        //total
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["NetAmount"]), out netamount);
                        drowGrd[11] = Convert.ToString(netamount);
                        if (!grandtotal.ContainsKey(11))
                            grandtotal.Add(11, Convert.ToString(netamount));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[11]), out amount);
                            amount += netamount;
                            grandtotal.Remove(11);
                            grandtotal.Add(11, Convert.ToString(amount));
                        }

                        //paid
                        double paidvalue = 0;
                        if (check == 0)
                        {
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                            fnlamount = Convert.ToDouble(paidvalue);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                amount += paidvalue;
                                grandtotal.Remove(ColCntGrd - 5);
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                            }
                        }
                        //refund
                        double refund = 0;
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                        DataView dvex = new DataView();
                        if (ds.Tables[3].Rows.Count > 0)
                        {
                            ds.Tables[3].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                            dvex = ds.Tables[3].DefaultView;
                            if (dvex.Count > 0 && dvex != null)
                            {
                                for (int k = 0; k < dvex.Count; k++)
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(dvex[k]["BalanceAmt"]), out amount);//["ExcessAmt"] modified as ["BalanceAmt"] by saranya on 19/12/2017
                                    tot_amount += amount;
                                }
                            }
                        }
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                        if (!grandtotal.ContainsKey(ColCntGrd - 2))
                            grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                            amount += tot_amount;
                            grandtotal.Remove(ColCntGrd - 2);
                            grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                        }
                        tot_amount = 0;
                        //paymode values
                        if (ds.Tables[1].Rows.Count > 0)
                        {
                            for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                            {
                                if (chkl_paid.Items[pay].Selected == true)
                                {
                                    ds.Tables[1].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                    dv = ds.Tables[1].DefaultView;
                                    int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                    for (int k = 0; k < dv.Count; k++)
                                    {
                                        double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                        fnlamount = fnlamount + totamount;
                                        paidamt = paidamt + Convert.ToDouble(totamount);
                                    }
                                    drowGrd[colnew] = Convert.ToString(paidamt);
                                    if (!grandtotal.ContainsKey(colnew))
                                        grandtotal.Add(colnew, Convert.ToString(paidamt));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                        amount += paidamt;
                                        grandtotal.Remove(colnew);
                                        grandtotal.Add(colnew, Convert.ToString(amount));
                                    }
                                    paidamt = 0;
                                }
                            }
                            if (check != 0)
                            {
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                    amount += fnlamount;
                                    grandtotal.Remove(ColCntGrd - 5);
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                }
                            }
                            //balance
                            if (totalvalue != 0)
                            {
                                bal = totalvalue - fnlamount;
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                    amount += bal;
                                    grandtotal.Remove(ColCntGrd - 4);
                                    grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                }
                                fnlamount = 0;
                                if (bal == 0)
                                    dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                else
                                    dicRowColor.Add(dtReport.Rows.Count, "Balance");
                            }
                        }
                        else
                        {
                            bal = Convert.ToDouble(totalvalue);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                            if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                amount += bal;
                                grandtotal.Remove(ColCntGrd - 4);
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                            }
                        }
                        dtReport.Rows.Add(drowGrd);
                    }

                    #endregion

                    #region grandtot

                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = "Grand Total";
                    double grandvalue = 0;
                    for (int j = 7; j < dtReport.Columns.Count; j++)
                    {
                        double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                        drowGrd[j] = Convert.ToString(grandvalue);
                    }
                    dtReport.Rows.Add(drowGrd);

                    #endregion

                    #region visible

                    grdStudentReport.DataSource = dtReport;
                    grdStudentReport.DataBind();
                    grdStudentReport.Visible = true;

                    GridViewRow row = grdStudentReport.Rows[0];
                    GridViewRow previousRow = grdStudentReport.Rows[1];

                    for (int i = 0; i < dtReport.Columns.Count; i++)
                    {
                        if (row.Cells[i].Text == previousRow.Cells[i].Text)
                        {
                            row.Cells[i].RowSpan = 2;
                            previousRow.Cells[i].Visible = false;
                        }
                    }
                    //ColumnSpan

                    for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                    {
                        TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                        TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                        if (colum.Text == previouscol.Text)
                        {
                            if (previouscol.ColumnSpan == 0)
                            {
                                if (colum.ColumnSpan == 0)
                                {
                                    previouscol.ColumnSpan += 2;
                                }
                                else
                                {
                                    previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                }
                                colum.Visible = false;
                            }
                        }
                    }

                    foreach (KeyValuePair<int, string> dr in dicRowColor)
                    {
                        int g = dr.Key;
                        string DicValue = dr.Value;
                        if (DicValue == "NoBalance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                        }
                        if (DicValue == "Balance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                        }
                    }


                    divcommon.Visible = true;
                    header.Visible = true;
                    div1.Visible = true;
                    divledger.Visible = false;
                    lbl_ledg.Visible = false;
                    lbl_ledg.Text = "";
                    Grdledger.Visible = false;
                    lbl_bat.Visible = false;
                    lbl_bat.Text = "";
                    GrdBatch.Visible = false;
                    lbl_degr.Visible = false;
                    lbl_degr.Text = "";
                    GrdDegree.Visible = false;
                    lbl_dep.Visible = false;
                    lbl_dep.Text = "";
                    GrdDept.Visible = false;
                    lbl_sem.Visible = false; ;
                    lbl_sem.Text = "";
                    GrdSem.Visible = false;
                    rptprint.Visible = true;
                    //  rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                    // rb_detail.Checked = true;
                    rb_hori.Checked = true;
                    rbstudhed.Checked = true;
                    // pagelnk.Visible = true;
                    // LinkButton3.Visible = true;
                    lblhed.Text = "Studentwise";
                    pheaderfilter.Visible = true;
                    pcolumnorder.Visible = true;
                    //pnlledgercolorder.Visible = false;
                    //Pnlledcolorder.Visible = false;
                    //pnl_batchcolorder.Visible = false;
                    //pnl_batcolorder.Visible = false;
                    //pnl_degcolorder.Visible = false;
                    //pnl_degreecolorder.Visible = false;
                    //pnl_deptcolord.Visible = false;
                    //pnl_deptcolorder.Visible = false;
                    //pnl_semcolord.Visible = false;
                    //pnl_semcolorder.Visible = false;
                    //btn_fpled.Visible = false;
                    //btn_fpbat.Visible = false;
                    //btn_fpdeg.Visible = false;
                    //btn_fpdep.Visible = false;
                    //pnl_studcolord.Visible = false;
                    //pnl_studcolorder.Visible = false;
                    lblpaidcol.Visible = true;
                    lblyetpaid.Visible = true;
                    divstudcell.Visible = false;
                    lbl_semcell.Text = "";
                    divdept.Visible = false;
                    divdegree.Visible = false;
                    divbatch.Visible = false;
                    header.Attributes.Add("Style", "height:auto; width:950px; overflow:auto;");
                    div1.Attributes.Add("Style", "height:auto; width:950px;overflow:auto; ");
                    #endregion
                }

                #endregion

                #region detail

                #region valuehead and led

                int headcount = 0;
                for (int i = 0; i < chkl_studhed.Items.Count; i++)
                {
                    if (chkl_studhed.Items[i].Selected == true)
                    {
                        if (headcount == 0)
                        {
                            headcount++;
                        }
                        else
                        {
                            headcount++;
                        }
                    }
                }
                int ledgercount = 0;
                for (int i = 0; i < chkl_studled.Items.Count; i++)
                {
                    if (chkl_studled.Items[i].Selected == true)
                    {
                        if (ledgercount == 0)
                        {
                            ledgercount++;
                        }
                        else
                        {
                            ledgercount++;
                        }
                    }
                }
                #endregion

                if (headcount != 0)
                {
                    if (rb_detail.Checked == true)
                    {
                        #region rbhorizontal

                        if (rb_hori.Checked == true)
                        {
                            #region header
                            if (rbstudhed.Checked == true)
                            {
                                #region design
                                loadcolumns();
                                DataView dv = new DataView();
                                DataView dv1 = new DataView();
                                int checkpaid = 0;
                                int colHdrIndx = 6;

                                arrColStudNames.Add("S.No");
                                arrColStudNames2.Add("S.No");
                                dtReport.Columns.Add("S.No");
                                arrColStudNames.Add("Student Name");
                                arrColStudNames2.Add("Student Name");
                                dtReport.Columns.Add("Student Name");
                                arrColStudNames.Add("Roll No");
                                arrColStudNames2.Add("Roll No");
                                dtReport.Columns.Add("Roll No");
                                arrColStudNames.Add("Reg No");
                                arrColStudNames2.Add("Reg No");
                                dtReport.Columns.Add("Reg No");
                                arrColStudNames.Add("Admission No");
                                arrColStudNames2.Add("Admission No");
                                dtReport.Columns.Add("Admission No");
                                arrColStudNames.Add(lbldeg.Text);
                                arrColStudNames2.Add(lbldeg.Text);
                                dtReport.Columns.Add(lbldeg.Text);
                                
                                arrColStudNames.Add("appno");
                                arrColStudNames2.Add("appno");
                                dtReport.Columns.Add("appno");                                
                                arrColStudNames.Add("DegreeCode");
                                arrColStudNames2.Add("DegreeCode");
                                dtReport.Columns.Add("DegreeCode");
                                arrColStudNames.Add("FeeCat");
                                arrColStudNames2.Add("FeeCat");
                                dtReport.Columns.Add("FeeCat");

                                Hashtable newhash = new Hashtable();
                                Hashtable hedvalue = new Hashtable();
                                if (chkl_studhed.Items.Count > 0)
                                {
                                    for (int s = 0; s < chkl_studhed.Items.Count; s++)
                                    {
                                        if (chkl_studhed.Items[s].Selected == true)
                                        {
                                            checkpaid++;
                                            newhash.Add(Convert.ToString(chkl_studhed.Items[s].Value), dtReport.Columns.Count - 1);
                                            if (colord.Contains("1") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studhed.Items[s].Text);
                                                arrColStudNames2.Add("Allot");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Allot");                                                
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("2") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studhed.Items[s].Text);
                                                arrColStudNames2.Add("Concession");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Concession");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("3") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studhed.Items[s].Text);
                                                arrColStudNames2.Add("Scholarship");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Scholarship");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("4") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studhed.Items[s].Text);
                                                arrColStudNames2.Add("Total");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Total");
                                                colHdrIndx++;
                                            }
                                            if (chknetamount.Checked == true)
                                            {
                                                arrColStudNames.Add(chkl_studhed.Items[s].Text);
                                                arrColStudNames2.Add("Net Amount");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Net Amount");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("5") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studhed.Items[s].Text);
                                                arrColStudNames2.Add("Paid");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Paid");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("6") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studhed.Items[s].Text);
                                                arrColStudNames2.Add("Balance");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studhed.Items[s].Value + "$" + "Balance");
                                                colHdrIndx++;
                                            }
                                        }
                                    }
                                }

                                ViewState["Newhash"] = newhash;
                                Hashtable newhash1 = new Hashtable();
                                if (colord.Contains("5") || colord.Count == 0)
                                {
                                    if (chkl_paid.Items.Count > 0)
                                    {
                                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                                        {
                                            if (chkl_paid.Items[s].Selected == true)
                                            {
                                                checkpaid++;
                                                colHdrIndx++;
                                                arrColStudNames.Add("Paid");
                                                arrColStudNames2.Add(chkl_paid.Items[s].Text);
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_paid.Items[s].Value + "@" + "Paid");
                                            }
                                        }
                                        if (checkpaid != 0)
                                        {
                                            colHdrIndx++;
                                            arrColStudNames.Add("Paid");
                                            arrColStudNames2.Add("Total Paid");
                                            dtReport.Columns.Add("col" + colHdrIndx);
                                            dicColumnvisible.Add(colHdrIndx, "Total Paid");
                                        }
                                    }
                                    if (checkpaid == 0)
                                    {
                                        colHdrIndx++;
                                        arrColStudNames.Add("Paid");
                                        arrColStudNames2.Add("Paid");
                                        dtReport.Columns.Add("col" + colHdrIndx);
                                        dicColumnvisible.Add(colHdrIndx, "Paid");
                                    }
                                }                               

                                DataRow drHdr1 = dtReport.NewRow();
                                DataRow drHdr2 = dtReport.NewRow();
                                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                                {
                                    drHdr1[grCol] = arrColStudNames[grCol];
                                    drHdr2[grCol] = arrColStudNames2[grCol];
                                }
                                dtReport.Rows.Add(drHdr1);
                                dtReport.Rows.Add(drHdr2);

                                #endregion

                                #region value

                                double totamount = 0;
                                double fnlamount = 0;
                                double paidamt = 0;
                                int ColCntGrd = 0;
                                DataView Dview = new DataView();
                                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                {
                                    drowGrd = dtReport.NewRow();
                                    drowGrd[0] = Convert.ToString(i + 1);
                                    drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["Stud_Name"]);
                                    drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["Roll_No"]);
                                    drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["Reg_No"]);
                                    drowGrd[4] = Convert.ToString(ds.Tables[0].Rows[i]["roll_admit"]);

                                    string Degreename = "";
                                    string Acrname = "";
                                    if (ds.Tables[4].Rows.Count > 0)
                                    {
                                        ds.Tables[4].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "'";
                                        Dview = ds.Tables[4].DefaultView;
                                        if (Dview.Count > 0)
                                        {
                                            Degreename = Convert.ToString(Dview[0]["degreename"]);
                                            Acrname = Convert.ToString(Dview[0]["dept_acronym"]);
                                        }
                                    }
                                    if (deptacr == true)
                                        drowGrd[5] = Convert.ToString(Acrname);
                                    else
                                        drowGrd[5] = Convert.ToString(Degreename);
                                    drowGrd[6] = Convert.ToString(ds.Tables[0].Rows[i]["app_no"]);
                                    drowGrd[7] = Convert.ToString(ds.Tables[0].Rows[i]["Degree_Code"]);
                                    drowGrd[8] = Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]);
                                    string TextName = "";
                                    if (ds.Tables[5].Rows.Count > 0)
                                    {
                                        ds.Tables[5].DefaultView.RowFilter = "TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                        Dview = ds.Tables[5].DefaultView;
                                        if (Dview.Count > 0)
                                        {
                                            TextName = Convert.ToString(Dview[0]["TextVal"]);
                                        }
                                    }

                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_studhed.Items.Count; pay++)
                                        {
                                            if (chkl_studhed.Items[pay].Selected == true)
                                            {
                                                double allot = 0;
                                                double constamt = 0;
                                                double govt = 0;
                                                double totalamount = 0;
                                                double paid = 0;
                                                double netamount = 0;
                                                ds.Tables[2].DefaultView.RowFilter = "app_no='" + Convert.ToString(ds.Tables[0].Rows[i]["app_no"].ToString()) + "' and headerorledger='" + Convert.ToString(chkl_studhed.Items[pay].Value) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                                dv1 = ds.Tables[2].DefaultView;
                                                int colnew = 0;
                                                if (dv1.Count > 0)
                                                {
                                                    double.TryParse(Convert.ToString(dv1[0]["Allot"]), out allot);
                                                    double.TryParse(Convert.ToString(dv1[0]["Consustion"]), out constamt);
                                                    double.TryParse(Convert.ToString(dv1[0]["Government"]), out govt);
                                                    double.TryParse(Convert.ToString(dv1[0]["Total"]), out totalamount);
                                                    double.TryParse(Convert.ToString(dv1[0]["Paid"]), out paid);
                                                    double.TryParse(Convert.ToString(dv1[0]["Netamount"]), out netamount);
                                                }
                                                foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                                {
                                                    int g = dr.Key;
                                                    string DicValue = dr.Value;
                                                    //allot
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Allot")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(allot);
                                                    }
                                                    //Concession
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Concession")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(constamt);
                                                    }
                                                    //Scholarship
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Scholarship")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(govt);
                                                    }
                                                    //Total
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Total")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(totalamount);
                                                    }
                                                    //netamount
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Net Amount")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(netamount);
                                                    }
                                                    //Paid
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Paid")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(paid);
                                                        bal = totalamount - paid;
                                                    }
                                                    //Balance
                                                    if (DicValue == chkl_studhed.Items[pay].Value + "$" + "Balance")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(bal);
                                                        if (bal == 0)
                                                            dicRowColorColumn.Add(dtReport.Rows.Count + "$" + colnew, "NoBalance");
                                                        else
                                                            dicRowColorColumn.Add(dtReport.Rows.Count + "$" + colnew, "Balance");
                                                        break;
                                                    }

                                                }
                                            }
                                        }
                                    }
                                    double paidvalue = 0;
                                    if (checkpaid == 0)
                                    {
                                        foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                        {
                                            int g = dr.Key;
                                            string DicValue = dr.Value;
                                            if (DicValue == "paid")
                                            {
                                                double.TryParse(Convert.ToString(ds.Tables[2].Rows[i]["paid"]), out paidvalue);
                                                fnlamount = paidvalue;
                                                drowGrd[g] = Convert.ToString(paidvalue);
                                            }
                                        }
                                    }

                                    if (ds.Tables[1].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                        {
                                            if (chkl_paid.Items[pay].Selected == true)
                                            {
                                                ds.Tables[1].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                                dv = ds.Tables[1].DefaultView;
                                                int colnew1 = Convert.ToInt32(newhash1[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                                for (int k = 0; k < dv.Count; k++)
                                                {
                                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                                    fnlamount = fnlamount + totamount;
                                                    paidamt = paidamt + totamount;
                                                }
                                                foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                                {
                                                    int g = dr.Key;
                                                    string DicValue = dr.Value;
                                                    if (DicValue == chkl_paid.Items[pay].Value + "@" + "Paid")
                                                    {
                                                        drowGrd[g] = Convert.ToString(paidamt);
                                                        paidamt = 0;
                                                    }
                                                }
                                            }
                                        }
                                        if (checkpaid != 0)
                                        {
                                            foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                            {
                                                int g = dr.Key;
                                                string DicValue = dr.Value;
                                                if (DicValue == "Total Paid")
                                                {
                                                    drowGrd[g - 4] = Convert.ToString(fnlamount);
                                                }
                                            }
                                        }
                                        fnlamount = 0;
                                    }
                                    dtReport.Rows.Add(drowGrd);
                                }
                                #endregion

                                Button1.Visible = true;
                            }
                            #endregion

                            #region ledger
                            if (rbstudled.Checked == true)
                            {
                                #region design

                                loadcolumns();
                                DataView dv = new DataView();
                                DataView dv1 = new DataView();
                                int checkpaid = 0;
                                int colHdrIndx = 6;

                                arrColStudNames.Add("S.No");
                                arrColStudNames2.Add("S.No");
                                dtReport.Columns.Add("S.No");
                                arrColStudNames.Add("Student Name");
                                arrColStudNames2.Add("Student Name");
                                dtReport.Columns.Add("Student Name");
                                arrColStudNames.Add("Roll No");
                                arrColStudNames2.Add("Roll No");
                                dtReport.Columns.Add("Roll No");
                                arrColStudNames.Add("Reg No");
                                arrColStudNames2.Add("Reg No");
                                dtReport.Columns.Add("Reg No");
                                arrColStudNames.Add("Admission No");
                                arrColStudNames2.Add("Admission No");
                                dtReport.Columns.Add("Admission No");
                                arrColStudNames.Add(lbldeg.Text);
                                arrColStudNames2.Add(lbldeg.Text);
                                dtReport.Columns.Add(lbldeg.Text);

                                Hashtable newhash = new Hashtable();
                                Hashtable hedvalue = new Hashtable();
                                if (chkl_studled.Items.Count > 0)
                                {
                                    for (int s = 0; s < chkl_studled.Items.Count; s++)
                                    {
                                        if (chkl_studled.Items[s].Selected == true)
                                        {
                                            checkpaid++;
                                            if (colord.Contains("1") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studled.Items[s].Text);
                                                arrColStudNames2.Add("Allot");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Allot");
                                                newhash.Add(Convert.ToString(chkl_studled.Items[s].Value), dtReport.Columns.Count - 1);
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("2") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studled.Items[s].Text);
                                                arrColStudNames2.Add("Concession");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Concession");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("3") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studled.Items[s].Text);
                                                arrColStudNames2.Add("Scholarship");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Scholarship");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("4") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studled.Items[s].Text);
                                                arrColStudNames2.Add("Total");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Total");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("5") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studled.Items[s].Text);
                                                arrColStudNames2.Add("Paid");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Paid");
                                                colHdrIndx++;
                                            }
                                            if (colord.Contains("6") || colord.Count == 0)
                                            {
                                                arrColStudNames.Add(chkl_studled.Items[s].Text);
                                                arrColStudNames2.Add("Balance");
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_studled.Items[s].Value + "$" + "Balance");
                                                colHdrIndx++;
                                            }
                                        }
                                    }
                                }

                                ViewState["Newhash"] = newhash;
                                Hashtable newhash1 = new Hashtable();
                                if (colord.Contains("5") || colord.Count == 0)
                                {
                                    if (chkl_paid.Items.Count > 0)
                                    {
                                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                                        {
                                            if (chkl_paid.Items[s].Selected == true)
                                            {
                                                checkpaid++;
                                                colHdrIndx++;
                                                arrColStudNames.Add("Paid");
                                                arrColStudNames2.Add(chkl_paid.Items[s].Text);
                                                dtReport.Columns.Add("col" + colHdrIndx);
                                                dicColumnvisible.Add(colHdrIndx, chkl_paid.Items[s].Value + "@" + "Paid");
                                            }
                                        }
                                        if (checkpaid != 0)
                                        {
                                            colHdrIndx++;
                                            arrColStudNames.Add("Paid");
                                            arrColStudNames2.Add("Total Paid");
                                            dtReport.Columns.Add("col" + colHdrIndx);
                                            dicColumnvisible.Add(colHdrIndx, "Total Paid");
                                        }
                                    }
                                    if (checkpaid == 0)
                                    {
                                        colHdrIndx++;
                                        arrColStudNames.Add("Paid");
                                        arrColStudNames2.Add("Paid");
                                        dtReport.Columns.Add("col" + colHdrIndx);
                                        dicColumnvisible.Add(colHdrIndx, "Paid");
                                    }
                                }

                                DataRow drHdr1 = dtReport.NewRow();
                                DataRow drHdr2 = dtReport.NewRow();
                                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                                {
                                    drHdr1[grCol] = arrColStudNames[grCol];
                                    drHdr2[grCol] = arrColStudNames2[grCol];
                                }
                                dtReport.Rows.Add(drHdr1);
                                dtReport.Rows.Add(drHdr2);

                                #endregion

                                #region value
                                double totamount = 0;
                                double fnlamount = 0;
                                double paidamt = 0;
                                DataView Dview = new DataView();
                                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                {
                                    drowGrd = dtReport.NewRow();
                                    drowGrd[0] = Convert.ToString(i + 1);
                                    drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["Stud_Name"].ToString());
                                    drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["Roll_No"].ToString());
                                    drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["Reg_No"].ToString());
                                    drowGrd[4] = Convert.ToString(ds.Tables[0].Rows[i]["roll_admit"].ToString());
                                    string Degreename = "";
                                    string Acrname = "";
                                    if (ds.Tables[4].Rows.Count > 0)
                                    {
                                        ds.Tables[4].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "'";
                                        Dview = ds.Tables[4].DefaultView;
                                        if (Dview.Count > 0)
                                        {
                                            Degreename = Convert.ToString(Dview[0]["degreename"]);
                                            Acrname = Convert.ToString(Dview[0]["dept_acronym"]);
                                        }
                                    }
                                    if (deptacr == true)
                                        drowGrd[5] = Convert.ToString(Acrname);
                                    else
                                        drowGrd[5] = Convert.ToString(Degreename);

                                    string TextName = "";
                                    if (ds.Tables[5].Rows.Count > 0)
                                    {
                                        ds.Tables[5].DefaultView.RowFilter = "TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                        Dview = ds.Tables[5].DefaultView;
                                        if (Dview.Count > 0)
                                        {
                                            TextName = Convert.ToString(Dview[0]["TextVal"]);
                                        }
                                    }
                                    double paidvalue = 0;
                                    if (checkpaid == 0)
                                    {
                                        foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                        {
                                            int g = dr.Key;
                                            string DicValue = dr.Value;
                                            if (DicValue == "paid")
                                            {
                                                double.TryParse(Convert.ToString(ds.Tables[2].Rows[i]["paid"]), out paidvalue);
                                                fnlamount = paidvalue;
                                                drowGrd[g] = Convert.ToString(paidvalue);
                                            }
                                        }
                                    }
                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_studled.Items.Count; pay++)
                                        {
                                            if (chkl_studled.Items[pay].Selected == true)
                                            {
                                                double allot = 0;
                                                double constamt = 0;
                                                double govt = 0;
                                                double totalamount = 0;
                                                double paid = 0;
                                                ds.Tables[2].DefaultView.RowFilter = "app_no='" + Convert.ToString(ds.Tables[0].Rows[i]["app_no"].ToString()) + "' and headerorledger='" + Convert.ToString(chkl_studled.Items[pay].Value) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                                dv1 = ds.Tables[2].DefaultView;
                                                int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_studled.Items[pay].Value)]);
                                                if (dv1.Count > 0)
                                                {
                                                    double.TryParse(Convert.ToString(dv1[0]["Allot"]), out allot);
                                                    double.TryParse(Convert.ToString(dv1[0]["Consustion"]), out constamt);
                                                    double.TryParse(Convert.ToString(dv1[0]["Government"]), out govt);
                                                    double.TryParse(Convert.ToString(dv1[0]["Total"]), out totalamount);
                                                    double.TryParse(Convert.ToString(dv1[0]["Paid"]), out paid);
                                                }
                                                foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                                {
                                                    int g = dr.Key;
                                                    string DicValue = dr.Value;
                                                    //allot
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Allot")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(allot);
                                                    }
                                                    //Concession
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Concession")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(constamt);
                                                    }
                                                    //Scholarship
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Scholarship")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(govt);
                                                    }
                                                    //Total
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Total")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(totalamount);
                                                    }
                                                    //Paid
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Paid")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(paid);
                                                        bal = totalamount - paid;
                                                    }
                                                    //Balance
                                                    if (DicValue == chkl_studled.Items[pay].Value + "$" + "Balance")
                                                    {
                                                        colnew = g;
                                                        drowGrd[colnew] = Convert.ToString(bal);
                                                        if (bal == 0)
                                                            dicRowColorColumn.Add(dtReport.Rows.Count + "$" + colnew, "NoBalance");
                                                        else
                                                            dicRowColorColumn.Add(dtReport.Rows.Count + "$" + colnew, "Balance");
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                    }

                                    if (ds.Tables[1].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                        {
                                            if (chkl_paid.Items[pay].Selected == true)
                                            {
                                                ds.Tables[1].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                                dv = ds.Tables[1].DefaultView;
                                                for (int k = 0; k < dv.Count; k++)
                                                {
                                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                                    fnlamount = fnlamount + totamount;
                                                    paidamt = paidamt + totamount;
                                                }
                                                foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                                {
                                                    int g = dr.Key;
                                                    string DicValue = dr.Value;
                                                    if (DicValue == chkl_paid.Items[pay].Value + "@" + "Paid")
                                                    {
                                                        drowGrd[g] = Convert.ToString(paidamt);
                                                        paidamt = 0;
                                                    }
                                                }
                                            }
                                        }
                                        if (checkpaid != 0)
                                        {
                                            foreach (KeyValuePair<int, string> dr in dicColumnvisible)
                                            {
                                                int g = dr.Key;
                                                string DicValue = dr.Value;
                                                if (DicValue == "Total Paid")
                                                {
                                                    drowGrd[g - 1] = Convert.ToString(fnlamount);
                                                }
                                            }
                                        }
                                        fnlamount = 0;
                                    }
                                    dtReport.Rows.Add(drowGrd);
                                }
                                #endregion
                            }
                            #endregion
                        }
                        //  FpSpread1.SaveChanges();
                        #endregion

                        #region rbvertical

                        if (rb_vert.Checked == true)
                        {
                            int ColCntGrd = 0;

                            #region header

                            if (rbstudhed.Checked == true)
                            {
                                #region design

                                int checkpaid = 0;
                                loadcolumns();

                                Hashtable newhash = new Hashtable();
                                Hashtable newhash1 = new Hashtable();
                                Hashtable hedvalue = new Hashtable();
                                DataView dv = new DataView();
                                DataView dv1 = new DataView();

                                arrColStudNames.Add("S.No");
                                arrColStudNames2.Add("S.No");
                                dtReport.Columns.Add("S.No");
                                arrColStudNames.Add("Student Name");
                                arrColStudNames2.Add("Student Name");
                                dtReport.Columns.Add("Student Name");
                                arrColStudNames.Add("Roll No");
                                arrColStudNames2.Add("Roll No");
                                dtReport.Columns.Add("Roll No");
                                arrColStudNames.Add("Reg No");
                                arrColStudNames2.Add("Reg No");
                                dtReport.Columns.Add("Reg No");
                                arrColStudNames.Add("Admission No");
                                arrColStudNames2.Add("Admission No");
                                dtReport.Columns.Add("Admission No");
                                arrColStudNames.Add(lbldeg.Text);
                                arrColStudNames2.Add(lbldeg.Text);
                                dtReport.Columns.Add(lbldeg.Text);
                                arrColStudNames.Add("Header Name");
                                arrColStudNames2.Add("Header Name");
                                dtReport.Columns.Add("Header Name");
                                arrColStudNames.Add("Allot");
                                arrColStudNames2.Add("Allot");
                                dtReport.Columns.Add("Allot");
                                arrColStudNames.Add("Concession");
                                arrColStudNames2.Add("Concession");
                                dtReport.Columns.Add("Concession");
                                arrColStudNames.Add("Scholarship");
                                arrColStudNames2.Add("Scholarship");
                                dtReport.Columns.Add("Scholarship");
                                arrColStudNames.Add("Total");
                                arrColStudNames2.Add("Total");
                                dtReport.Columns.Add("Total");

                                ViewState["Newhash"] = newhash;

                                if (chkl_paid.Items.Count > 0)
                                {
                                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                                    {
                                        if (chkl_paid.Items[s].Selected == true)
                                        {
                                            checkpaid++;
                                            arrColStudNames.Add("Paid");
                                            arrColStudNames2.Add(chkl_paid.Items[s].Text);
                                            dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                            newhash1.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                        }
                                    }
                                    if (checkpaid != 0)
                                    {
                                        arrColStudNames.Add("Paid");
                                        arrColStudNames2.Add("Total Paid");
                                        dtReport.Columns.Add("Total Paid");
                                    }
                                }
                                if (checkpaid == 0)
                                {
                                    arrColStudNames.Add("Paid");
                                    arrColStudNames2.Add("Paid");
                                    dtReport.Columns.Add("Paid");
                                }
                                arrColStudNames.Add("Balance");
                                arrColStudNames2.Add("Balance");
                                dtReport.Columns.Add("Balance");
                                arrColStudNames.Add("Refund Amount");
                                arrColStudNames2.Add("Refund Amount");
                                dtReport.Columns.Add("Refund Amount");
                                arrColStudNames.Add("Excess Amount");
                                arrColStudNames2.Add("Excess Amount");
                                dtReport.Columns.Add("Excess Amount");
                                arrColStudNames.Add("Fine Amount");
                                arrColStudNames2.Add("Fine Amount");
                                dtReport.Columns.Add("Fine Amount");
                                DataRow drHdr1 = dtReport.NewRow();
                                DataRow drHdr2 = dtReport.NewRow();
                                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                                {
                                    drHdr1[grCol] = arrColStudNames[grCol];
                                    drHdr2[grCol] = arrColStudNames2[grCol];
                                }
                                dtReport.Rows.Add(drHdr1);
                                dtReport.Rows.Add(drHdr2);

                                #endregion

                                #region value

                                double totamount = 0;
                                double fnlamount = 0;
                                double paidamt = 0;
                                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                {
                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_studhed.Items.Count; pay++)
                                        {
                                            bool boolcheck = false;
                                            if (chkl_studhed.Items[pay].Selected == true)
                                            {
                                                double allot = 0;
                                                double constamt = 0;
                                                double govt = 0;
                                                double totvalue = 0;
                                                ds.Tables[2].DefaultView.RowFilter = "app_no='" + Convert.ToString(ds.Tables[0].Rows[i]["app_no"].ToString()) + "' and headerorledger='" + Convert.ToString(chkl_studhed.Items[pay].Value) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                                dv1 = ds.Tables[2].DefaultView;
                                                if (dv1.Count > 0)
                                                {
                                                    drowGrd = dtReport.NewRow();
                                                    drowGrd[0] = Convert.ToString(i + 1);
                                                    drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["Stud_Name"].ToString());
                                                    drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["Roll_No"].ToString());
                                                    drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["Reg_No"].ToString());
                                                    drowGrd[4] = Convert.ToString(ds.Tables[0].Rows[i]["roll_admit"].ToString());
                                                    boolcheck = true;
                                                    DataView Dview = new DataView();
                                                    string Degreename = "";
                                                    string Acrname = "";
                                                    if (ds.Tables[4].Rows.Count > 0)
                                                    {
                                                        ds.Tables[4].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "'";
                                                        Dview = ds.Tables[4].DefaultView;
                                                        if (Dview.Count > 0)
                                                        {
                                                            Degreename = Convert.ToString(Dview[0]["degreename"]);
                                                            Acrname = Convert.ToString(Dview[0]["dept_acronym"]);

                                                        }
                                                    }
                                                    if (deptacr == true)
                                                        drowGrd[5] = Convert.ToString(Acrname);
                                                    else
                                                        drowGrd[5] = Convert.ToString(Degreename);
                                                    drowGrd[6] = Convert.ToString(chkl_studhed.Items[pay].Text);
                                                    if (dv1.Count > 0)
                                                    {
                                                        double.TryParse(Convert.ToString(dv1[0]["Allot"]), out allot);
                                                        double.TryParse(Convert.ToString(dv1[0]["Consustion"]), out constamt);
                                                        double.TryParse(Convert.ToString(dv1[0]["Government"]), out govt);
                                                        double.TryParse(Convert.ToString(dv1[0]["Total"]), out totvalue);
                                                    }
                                                    drowGrd[7] = Convert.ToString(allot);
                                                    drowGrd[8] = Convert.ToString(constamt);
                                                    drowGrd[9] = Convert.ToString(govt);
                                                    drowGrd[10] = Convert.ToString(totvalue);
                                                    double paidvalue = 0;
                                                    if (checkpaid == 0)
                                                    {
                                                        double.TryParse(Convert.ToString(ds.Tables[2].Rows[i]["paid"]), out paidvalue);
                                                        fnlamount = Convert.ToDouble(paidvalue);
                                                        ColCntGrd = dtReport.Columns.Count;
                                                        drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                                    }
                                                    if (ds.Tables[1].Rows.Count > 0)
                                                    {
                                                        for (int p = 0; p < chkl_paid.Items.Count; p++)
                                                        {
                                                            if (chkl_paid.Items[p].Selected == true)
                                                            {
                                                                ds.Tables[1].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[p].Value) + "'  and HeaderandLedger='" + Convert.ToString(chkl_studhed.Items[pay].Value) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                                                dv = ds.Tables[1].DefaultView;
                                                                int colnew1 = Convert.ToInt32(newhash1[Convert.ToString(chkl_paid.Items[p].Value)]);
                                                                for (int k = 0; k < dv.Count; k++)
                                                                {
                                                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                                                    fnlamount = fnlamount + totamount;
                                                                    paidamt = paidamt + totamount;
                                                                }
                                                                drowGrd[colnew1] = Convert.ToString(paidamt);
                                                                paidamt = 0;
                                                            }
                                                        }
                                                        if (checkpaid != 0)
                                                        {
                                                            ColCntGrd = dtReport.Columns.Count;
                                                            drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                                        }
                                                        if (totvalue != 0)
                                                        {
                                                            bal = totvalue - fnlamount;
                                                            ColCntGrd = dtReport.Columns.Count;
                                                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                                            fnlamount = 0;
                                                            if (bal == 0)
                                                                dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                                            else
                                                                dicRowColor.Add(dtReport.Rows.Count, "Balance");

                                                        }
                                                    }
                                                }
                                            }
                                            if (boolcheck)
                                            {
                                                double refund = 0;
                                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                                                ColCntGrd = dtReport.Columns.Count;
                                                drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                                                DataView dvex = new DataView();
                                                double excessamt = 0;
                                                if (ds.Tables[3].Rows.Count > 0)
                                                {
                                                    ds.Tables[3].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and Excessfk='" + Convert.ToString(chkl_studhed.Items[pay].Value) + "'";
                                                    dvex = ds.Tables[3].DefaultView;
                                                    if (dvex.Count > 0)
                                                    {
                                                        double.TryParse(Convert.ToString(dvex[0]["ExcessAmount"]), out excessamt);
                                                    }
                                                }
                                                ColCntGrd = dtReport.Columns.Count;
                                                drowGrd[ColCntGrd - 2] = Convert.ToString(excessamt);
                                            }
                                        }
                                        dtReport.Rows.Add(drowGrd);
                                    }
                                }
                                #endregion
                            }
                            #endregion

                            #region ledger

                            else if (rbstudled.Checked == true)
                            {
                                #region design
                                int checkpaid = 0;
                                loadcolumns();
                                Hashtable newhash = new Hashtable();
                                Hashtable hedvalue = new Hashtable();
                                DataView dv = new DataView();
                                DataView dv1 = new DataView();
                                Hashtable newhash1 = new Hashtable();

                                arrColStudNames.Add("S.No");
                                arrColStudNames2.Add("S.No");
                                dtReport.Columns.Add("S.No");
                                arrColStudNames.Add("Student Name");
                                arrColStudNames2.Add("Student Name");
                                dtReport.Columns.Add("Student Name");
                                arrColStudNames.Add("Roll No");
                                arrColStudNames2.Add("Roll No");
                                dtReport.Columns.Add("Roll No");
                                arrColStudNames.Add("Reg No");
                                arrColStudNames2.Add("Reg No");
                                dtReport.Columns.Add("Reg No");
                                arrColStudNames.Add("Admission No");
                                arrColStudNames2.Add("Admission No");
                                dtReport.Columns.Add("Admission No");
                                arrColStudNames.Add(lbldeg.Text);
                                arrColStudNames2.Add(lbldeg.Text);
                                dtReport.Columns.Add(lbldeg.Text);
                                arrColStudNames.Add("Ledger Name");
                                arrColStudNames2.Add("Ledger Name");
                                dtReport.Columns.Add("Ledger Name");
                                arrColStudNames.Add("Allot");
                                arrColStudNames2.Add("Allot");
                                dtReport.Columns.Add("Allot");
                                arrColStudNames.Add("Concession");
                                arrColStudNames2.Add("Concession");
                                dtReport.Columns.Add("Concession");
                                arrColStudNames.Add("Scholarship");
                                arrColStudNames2.Add("Scholarship");
                                dtReport.Columns.Add("Scholarship");
                                arrColStudNames.Add("Total");
                                arrColStudNames2.Add("Total");
                                dtReport.Columns.Add("Total");

                                ViewState["Newhash"] = newhash;

                                if (chkl_paid.Items.Count > 0)
                                {
                                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                                    {
                                        if (chkl_paid.Items[s].Selected == true)
                                        {
                                            checkpaid++;
                                            arrColStudNames.Add("Paid");
                                            arrColStudNames2.Add(chkl_paid.Items[s].Text);
                                            dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                            newhash1.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                        }
                                    }
                                    if (checkpaid != 0)
                                    {
                                        arrColStudNames.Add("Paid");
                                        arrColStudNames2.Add("Total Paid");
                                        dtReport.Columns.Add("Total Paid");
                                    }
                                }
                                if (checkpaid == 0)
                                {
                                    arrColStudNames.Add("Paid");
                                    arrColStudNames2.Add("Paid");
                                    dtReport.Columns.Add("Paid");
                                }
                                arrColStudNames.Add("Balance");
                                arrColStudNames2.Add("Balance");
                                dtReport.Columns.Add("Balance");
                                arrColStudNames.Add("Refund Amount");
                                arrColStudNames2.Add("Refund Amount");
                                dtReport.Columns.Add("Refund Amount");
                                arrColStudNames.Add("Excess Amount");
                                arrColStudNames2.Add("Excess Amount");
                                dtReport.Columns.Add("Excess Amount");
                                arrColStudNames.Add("Fine Amount");
                                arrColStudNames2.Add("Fine Amount");
                                dtReport.Columns.Add("Fine Amount");
                                DataRow drHdr1 = dtReport.NewRow();
                                DataRow drHdr2 = dtReport.NewRow();
                                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                                {
                                    drHdr1[grCol] = arrColStudNames[grCol];
                                    drHdr2[grCol] = arrColStudNames2[grCol];
                                }
                                dtReport.Rows.Add(drHdr1);
                                dtReport.Rows.Add(drHdr2);

                                #endregion

                                #region value

                                double totamount = 0;
                                double fnlamount = 0;
                                double paidamt = 0;
                                double totalvalue = 0;
                                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                                {
                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        for (int pay = 0; pay < chkl_studled.Items.Count; pay++)
                                        {
                                            if (chkl_studled.Items[pay].Selected == true)
                                            {
                                                double allot = 0;
                                                double constamt = 0;
                                                double govt = 0;
                                                double totvalue = 0;
                                                ds.Tables[2].DefaultView.RowFilter = "app_no='" + Convert.ToString(ds.Tables[0].Rows[i]["app_no"].ToString()) + "' and headerorledger='" + Convert.ToString(chkl_studled.Items[pay].Value) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                                dv1 = ds.Tables[2].DefaultView;
                                                if (dv1.Count > 0)
                                                {
                                                    drowGrd = dtReport.NewRow();
                                                    drowGrd[0] = Convert.ToString(i + 1);
                                                    drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["Stud_Name"]);
                                                    drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["Roll_No"]);
                                                    drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["Reg_No"]);
                                                    drowGrd[4] = Convert.ToString(ds.Tables[0].Rows[i]["roll_admit"]);

                                                    DataView Dview = new DataView();
                                                    string Degreename = "";
                                                    string Acrname = "";
                                                    if (ds.Tables[4].Rows.Count > 0)
                                                    {
                                                        ds.Tables[4].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "'";
                                                        Dview = ds.Tables[4].DefaultView;
                                                        if (Dview.Count > 0)
                                                        {
                                                            Degreename = Convert.ToString(Dview[0]["degreename"]);
                                                            Acrname = Convert.ToString(Dview[0]["dept_acronym"]);
                                                        }
                                                    }
                                                    if (deptacr == true)
                                                        drowGrd[5] = Convert.ToString(Acrname);
                                                    else
                                                        drowGrd[5] = Convert.ToString(Degreename);
                                                    drowGrd[6] = Convert.ToString(chkl_studled.Items[pay].Text);
                                                    int colnew = 6;
                                                    if (dv1.Count > 0)
                                                    {
                                                        double.TryParse(Convert.ToString(dv1[0]["Allot"]), out allot);
                                                        double.TryParse(Convert.ToString(dv1[0]["Consustion"]), out constamt);
                                                        double.TryParse(Convert.ToString(dv1[0]["Government"]), out govt);
                                                        double.TryParse(Convert.ToString(dv1[0]["Total"]), out totvalue);
                                                    }
                                                    drowGrd[7] = Convert.ToString(allot);
                                                    drowGrd[8] = Convert.ToString(constamt);
                                                    drowGrd[9] = Convert.ToString(govt);
                                                    drowGrd[10] = Convert.ToString(totvalue);
                                                    double paidvalue = 0;
                                                    if (checkpaid == 0)
                                                    {
                                                        double.TryParse(Convert.ToString(ds.Tables[2].Rows[i]["paid"]), out paidvalue);
                                                        fnlamount = Convert.ToDouble(paidvalue);
                                                        ColCntGrd = dtReport.Columns.Count;
                                                        drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                                    }
                                                    if (ds.Tables[1].Rows.Count > 0)
                                                    {
                                                        for (int p = 0; p < chkl_paid.Items.Count; p++)
                                                        {
                                                            if (chkl_paid.Items[p].Selected == true)
                                                            {
                                                                ds.Tables[1].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[p].Value) + "'  and HeaderandLedger='" + Convert.ToString(chkl_studled.Items[pay].Value) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'";
                                                                dv = ds.Tables[1].DefaultView;
                                                                int colnew1 = Convert.ToInt32(newhash1[Convert.ToString(chkl_paid.Items[p].Value)]);
                                                                for (int k = 0; k < dv.Count; k++)
                                                                {
                                                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                                                    fnlamount = fnlamount + totamount;
                                                                    paidamt = paidamt + totamount;
                                                                }
                                                                drowGrd[colnew1] = Convert.ToString(paidamt);
                                                                paidamt = 0;
                                                            }
                                                        }
                                                        if (checkpaid != 0)
                                                        {
                                                            ColCntGrd = dtReport.Columns.Count;
                                                            drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                                        }
                                                        if (totvalue != 0)
                                                        {
                                                            bal = totvalue - fnlamount;
                                                            ColCntGrd = dtReport.Columns.Count;
                                                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                                            fnlamount = 0;
                                                            if (bal == 0)
                                                                dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                                            else
                                                                dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                                        }
                                                    }
                                                    double refund = 0;
                                                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                                                    ColCntGrd = dtReport.Columns.Count;
                                                    drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                                                    DataView dvex = new DataView();
                                                    double excessamt = 0;
                                                    if (ds.Tables[3].Rows.Count > 0)
                                                    {
                                                        ds.Tables[3].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and Excessfk='" + Convert.ToString(chkl_studled.Items[pay].Value) + "'";
                                                        dvex = ds.Tables[3].DefaultView;
                                                        if (dvex.Count > 0)
                                                        {
                                                            double.TryParse(Convert.ToString(dvex[0]["ExcessAmount"]), out excessamt);
                                                        }
                                                    }
                                                    ColCntGrd = dtReport.Columns.Count;
                                                    drowGrd[ColCntGrd - 2] = Convert.ToString(excessamt);
                                                    dtReport.Rows.Add(drowGrd);
                                                }
                                            }
                                        }
                                    }
                                }

                                #endregion
                            }
                            #endregion
                        }
                        #endregion

                        #region visible

                        grdStudentReport.DataSource = dtReport;
                        grdStudentReport.DataBind();
                        grdStudentReport.Visible = true;

                        GridViewRow row = grdStudentReport.Rows[0];
                        GridViewRow previousRow = grdStudentReport.Rows[1];

                        for (int i = 0; i < dtReport.Columns.Count; i++)
                        {
                            if (row.Cells[i].Text == previousRow.Cells[i].Text)
                            {
                                row.Cells[i].RowSpan = 2;
                                previousRow.Cells[i].Visible = false;
                            }
                        }
                        //ColumnSpan

                        for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                        {
                            TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                            TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                            if (colum.Text == previouscol.Text)
                            {
                                if (previouscol.ColumnSpan == 0)
                                {
                                    if (colum.ColumnSpan == 0)
                                    {
                                        previouscol.ColumnSpan += 2;
                                    }
                                    else
                                    {
                                        previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                    }
                                    colum.Visible = false;
                                }
                            }
                        }
                        if (rb_hori.Checked == true)
                        {
                            foreach (KeyValuePair<string, string> dr in dicRowColorColumn)
                            {
                                string g = dr.Key;
                                string[] colValue = g.Split('$');
                                int rowValue = Convert.ToInt32(colValue[0]);
                                int columnValue = Convert.ToInt32(colValue[1]);
                                string DicValue = dr.Value;
                                if (DicValue == "NoBalance")
                                {
                                    grdStudentReport.Rows[rowValue].Cells[columnValue].BackColor = ColorTranslator.FromHtml("#F08080");
                                }
                                if (DicValue == "Balance")
                                {
                                    grdStudentReport.Rows[rowValue].Cells[columnValue].BackColor = ColorTranslator.FromHtml("#90EE90");
                                }
                            }
                        }
                        if (rb_vert.Checked == true)
                        {
                            foreach (KeyValuePair<int, string> dr in dicRowColor)
                            {
                                int g = dr.Key;
                                string DicValue = dr.Value;
                                if (DicValue == "NoBalance")
                                {
                                    grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                                }
                                if (DicValue == "Balance")
                                {
                                    grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                                }
                            }

                        }

                        divcommon.Visible = true;
                        header.Visible = true;
                        div1.Visible = true;
                        divledger.Visible = false;
                        lbl_ledg.Visible = false;
                        lbl_ledg.Text = "";
                        Grdledger.Visible = false;
                        lbl_bat.Visible = false;
                        lbl_bat.Text = "";
                        GrdBatch.Visible = false;
                        lbl_degr.Visible = false;
                        lbl_degr.Text = "";
                        GrdDegree.Visible = false;
                        lbl_dep.Visible = false;
                        lbl_dep.Text = "";
                        GrdDept.Visible = false;
                        lbl_sem.Visible = false; ;
                        lbl_sem.Text = "";
                        GrdSem.Visible = false;
                        rptprint.Visible = true;
                        //  rptprint.Attributes.Add("Style", "margin-top:-499px; margin-left:10px;");
                        // rb_detail.Checked = true;
                        rb_hori.Checked = true;
                        rbstudhed.Checked = true;
                        // pagelnk.Visible = true;
                        // LinkButton3.Visible = true;
                        lblhed.Text = "Studentwise";
                        pheaderfilter.Visible = true;
                        pcolumnorder.Visible = true;
                        //pnlledgercolorder.Visible = false;
                        //Pnlledcolorder.Visible = false;
                        //pnl_batchcolorder.Visible = false;
                        //pnl_batcolorder.Visible = false;
                        //pnl_degcolorder.Visible = false;
                        //pnl_degreecolorder.Visible = false;
                        //pnl_deptcolord.Visible = false;
                        //pnl_deptcolorder.Visible = false;
                        //pnl_semcolord.Visible = false;
                        //pnl_semcolorder.Visible = false;
                        //btn_fpled.Visible = false;
                        //btn_fpbat.Visible = false;
                        //btn_fpdeg.Visible = false;
                        //btn_fpdep.Visible = false;
                        //pnl_studcolord.Visible = false;
                        //pnl_studcolorder.Visible = false;
                        lblpaidcol.Visible = true;
                        lblyetpaid.Visible = true;
                        divstudcell.Visible = false;
                        lbl_semcell.Text = "";
                        divdept.Visible = false;
                        divdegree.Visible = false;
                        divbatch.Visible = false;
                        header.Attributes.Add("Style", "height:auto; width:950px; overflow:auto;");
                        div1.Attributes.Add("Style", "height:auto; width:950px;overflow:auto; ");
                        #endregion
                    }
                }
                else
                {
                    lblpaidcol.Visible = false;
                    lblyetpaid.Visible = false;
                    grdStudentReport.Visible = false;
                    div1.Visible = false;
                    pheaderfilter.Visible = false;
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "Please Select At Least Any One Header Or Ledger";
                }
                #endregion
            }
            else
            {
                grdStudentReport.Visible = false;
                div1.Visible = false;
                rptprint.Visible = false;
                pheaderfilter.Visible = false;
                pcolumnorder.Visible = false;
                lblhed.Text = "";
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                divdailydeail.Visible = false;
                Button1.Visible = false;
                lbl_alert.Text = "No Record Found";
            }

        }
        catch (Exception ex)
        { }
    }

    #endregion

    #region Daily Detail Method

    public void Dailydetailmethod()
    {
        try
        {
            ArrayList arrColDailyDetNames = new ArrayList();
            ArrayList arrColDailyNames2 = new ArrayList();
            ArrayList arroll = new ArrayList();
            int ColCntGrd = 0;
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                RollAndRegSettings();
                if (rbcumulacr.Checked == true)
                {
                    #region  cumulative

                    if (chkcomflt.Checked == true)
                    {
                        #region daily Deail

                        if (rb_dailydetail.Checked == true)
                        {
                            #region design
                            loaddailycolumns();
                            DataView dv = new DataView();

                            int check = 0;
                            arrColDailyDetNames.Add("S.No");
                            arrColDailyNames2.Add("S.No");
                            dtReport.Columns.Add("S.No");
                            arrColDailyDetNames.Add("Date");
                            arrColDailyNames2.Add("Date");
                            dtReport.Columns.Add("Date");
                            arrColDailyDetNames.Add("Reciept No");
                            arrColDailyNames2.Add("Reciept No");
                            dtReport.Columns.Add("Reciept No");
                            arrColDailyDetNames.Add("Student Name");
                            arrColDailyNames2.Add("Student Name");
                            dtReport.Columns.Add("Student Name");
                            arrColDailyDetNames.Add("Roll No");
                            arrColDailyNames2.Add("Roll No");
                            dtReport.Columns.Add("Roll No");
                            arrColDailyDetNames.Add("Reg No");
                            arrColDailyNames2.Add("Reg No");
                            dtReport.Columns.Add("Reg No");
                            arrColDailyDetNames.Add("Admission No");
                            arrColDailyNames2.Add("Admission No");
                            dtReport.Columns.Add("Admission No");
                            arrColDailyDetNames.Add(lbldept.Text);
                            arrColDailyNames2.Add(lbldept.Text);
                            dtReport.Columns.Add(lbldept.Text);
                            arrColDailyDetNames.Add(lblsem.Text);
                            arrColDailyNames2.Add(lblsem.Text);
                            dtReport.Columns.Add(lblsem.Text);
                            arrColDailyDetNames.Add("Narration");
                            arrColDailyNames2.Add("Narration");
                            dtReport.Columns.Add("Narration");
                            arrColDailyDetNames.Add("Paymode");
                            arrColDailyNames2.Add("Paymode");
                            dtReport.Columns.Add("Paymode");
                            arrColDailyDetNames.Add("DD/Cheque/Card No");
                            arrColDailyNames2.Add("DD/Cheque/Card No");
                            dtReport.Columns.Add("DD/Cheque/Card No");
                            arrColDailyDetNames.Add("Bank Name");
                            arrColDailyNames2.Add("Bank Name");
                            dtReport.Columns.Add("Bank Name");
                            Hashtable newhash = new Hashtable();
                            DataView Dview = new DataView();
                            if (chkl_paid.Items.Count > 0)
                            {
                                for (int s = 0; s < chkl_paid.Items.Count; s++)
                                {
                                    if (chkl_paid.Items[s].Selected == true)
                                    {
                                        check++;
                                        arrColDailyDetNames.Add("Paid");
                                        arrColDailyNames2.Add(chkl_paid.Items[s].Text);
                                        dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                        newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                    }
                                }
                                if (check != 0)
                                {
                                    arrColDailyDetNames.Add("Paid");
                                    arrColDailyNames2.Add("Total Paid");
                                    dtReport.Columns.Add("Total Paid");
                                }
                            }
                            if (check == 0)
                            {
                                arrColDailyDetNames.Add("Paid");
                                arrColDailyNames2.Add("Paid");
                                dtReport.Columns.Add("Paid");
                            }

                            //excess amount
                            arrColDailyDetNames.Add("Excess Amount");
                            arrColDailyNames2.Add("Excess Amount");
                            dtReport.Columns.Add("Excess Amount");
                            DataRow drHdr1 = dtReport.NewRow();
                            DataRow drHdr2 = dtReport.NewRow();
                            for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                            {
                                drHdr1[grCol] = arrColDailyDetNames[grCol];
                                drHdr2[grCol] = arrColDailyNames2[grCol];
                            }
                            dtReport.Rows.Add(drHdr1);
                            dtReport.Rows.Add(drHdr2);

                            #endregion

                            #region value
                            int height = 0;
                            string paymode = "";
                            int payval = 0;
                            int rollchk = 0;
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                string recptcode = Convert.ToString(ds.Tables[0].Rows[i]["TransCode"]);
                                if (!arroll.Contains(recptcode))
                                {
                                    rollchk++;
                                    arroll.Add(recptcode);
                                }
                                drowGrd = dtReport.NewRow();
                                drowGrd[0] = Convert.ToString(rollchk);
                                drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["TransDate"]);
                                drowGrd[2] = recptcode;
                                drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["Stud_Name"]);
                                drowGrd[4] = Convert.ToString(ds.Tables[0].Rows[i]["Roll_No"]);
                                drowGrd[5] = Convert.ToString(ds.Tables[0].Rows[i]["Reg_No"]);
                                drowGrd[6] = Convert.ToString(ds.Tables[0].Rows[i]["roll_admit"]);
                                string Degrecode = Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"].ToString());
                                DataView dnew = new DataView();
                                string Acrname = "";
                                string degreename = "";
                                if (ds.Tables[1].Rows.Count > 0)
                                {
                                    ds.Tables[1].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' ";
                                    dnew = ds.Tables[1].DefaultView;
                                    if (dnew.Count > 0)
                                    {
                                        Acrname = Convert.ToString(dnew[0]["dept_acronym"]);
                                        degreename = Convert.ToString(dnew[0]["degreename"]);
                                    }
                                }
                                if (deptacr == true)
                                    drowGrd[7] = Acrname;
                                else
                                    drowGrd[7] = degreename;

                                //semester
                                string TextName = "";
                                if (ds.Tables[4].Rows.Count > 0)
                                {
                                    ds.Tables[4].DefaultView.RowFilter = "TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["feecategory"]) + "'";
                                    Dview = ds.Tables[4].DefaultView;
                                    if (Dview.Count > 0)
                                    {
                                        TextName = Convert.ToString(Dview[0]["TextVal"]);
                                    }
                                }
                                drowGrd[8] = TextName;
                                drowGrd[9] = Convert.ToString(ds.Tables[0].Rows[i]["Narration"]);
                                paymode = Convert.ToString(ds.Tables[0].Rows[i]["paymodeval"]);
                                drowGrd[10] = Convert.ToString(ds.Tables[0].Rows[i]["paymode"]);
                                if (paymode == "3" || paymode == "2" || paymode == "6")
                                {
                                    drowGrd[11] = Convert.ToString(ds.Tables[0].Rows[i]["DDNo"]);
                                    string bkname = string.Empty;
                                    if (paymode != "6")
                                        bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='BName' and  TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["DDBankCode"]) + "'");
                                    else
                                        bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='CardT' and  TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["DDBankCode"]) + "'");

                                    drowGrd[12] = bkname;
                                }
                                else
                                {
                                    drowGrd[11] = "-";
                                    drowGrd[12] = "-";
                                }
                                double totamount = 0;
                                double fnlamount = 0;
                                if (ds.Tables[2].Rows.Count > 0)
                                {
                                    //if (paymode == "1")
                                    //{
                                    ds.Tables[2].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and PayMode='" + Convert.ToString(Convert.ToInt32(paymode)) + "' and TransCode='" + recptcode + "' and feecategory='" + Convert.ToString(ds.Tables[0].Rows[i]["feecategory"]) + "'";
                                    //}
                                    //else
                                    //{
                                    //    ds.Tables[2].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and PayMode='" + Convert.ToString(Convert.ToInt32(paymode)) + "' and TransCode='" + recptcode + "'";
                                    //}
                                    dv = ds.Tables[2].DefaultView;

                                    int index = Convert.ToInt32(newhash[Convert.ToString(paymode)]);
                                    if (dv.Count > 0)
                                    {
                                        DataTable dt = new DataTable();
                                        dt = dv.ToTable();
                                        int val = Convert.ToInt32(dt.Compute("Sum(total)", ""));
                                        double.TryParse(Convert.ToString(val), out totamount);
                                        fnlamount = fnlamount + totamount;
                                    }
                                    //paymode
                                    drowGrd[index] = Convert.ToString(totamount);
                                    if (!grandtotal.ContainsKey(index))
                                        grandtotal.Add(index, Convert.ToString(totamount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[index]), out amount);
                                        amount += totamount;
                                        grandtotal.Remove(index);
                                        grandtotal.Add(index, Convert.ToString(amount));
                                    }
                                    //total
                                    if (check != 0)
                                    {
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 2] = Convert.ToString(fnlamount);
                                    }
                                    if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(fnlamount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                        amount += fnlamount;
                                        grandtotal.Remove(ColCntGrd - 2);
                                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                                    }
                                    fnlamount = 0;
                                }
                                DataView dvex = new DataView();
                                double exAmt = 0;
                                if (ds.Tables[3].Rows.Count > 0)
                                {
                                    ds.Tables[3].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and receiptno='" + Convert.ToString(ds.Tables[0].Rows[i]["Transcode"]) + "'";
                                    dvex = ds.Tables[3].DefaultView;
                                    if (dvex.Count > 0)
                                        double.TryParse(Convert.ToString(dvex[0]["examt"]), out exAmt);

                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 1] = Convert.ToString(exAmt);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 1))
                                        grandtotal.Add(ColCntGrd - 1, Convert.ToString(exAmt));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 1]), out amount);
                                        amount += exAmt;
                                        grandtotal.Remove(ColCntGrd - 1);
                                        grandtotal.Add(ColCntGrd - 1, Convert.ToString(amount));
                                    }
                                }
                                else
                                {
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 1] = "-";
                                }
                                dtReport.Rows.Add(drowGrd);
                            }
                            //for (int i = 0; i < ColCntGrd; i++)
                            //{
                            //    FpSpread2.Sheets[0].SetColumnMerge(i, FarPoint.Web.Spread.Model.MergePolicy.Always);
                            //}
                            //FpSpread2.Sheets[0].SetColumnMerge(2, FarPoint.Web.Spread.Model.MergePolicy.Always);
                            #endregion

                            #region grandtot

                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = "Grand Total";
                            dicRowColor.Add(dtReport.Rows.Count, "Grand Total");
                            double grandvalue = 0;
                            for (int j = 13; j < dtReport.Columns.Count; j++)
                            {
                                double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                                drowGrd[j] = Convert.ToString(grandvalue);
                            }
                            dtReport.Rows.Add(drowGrd);

                            // }
                            #endregion

                            #region Visible

                            GrdDailyDetail.DataSource = dtReport;
                            GrdDailyDetail.DataBind();
                            GrdDailyDetail.Visible = true;

                            GridViewRow row = GrdDailyDetail.Rows[0];
                            GridViewRow previousRow = GrdDailyDetail.Rows[1];

                            for (int i = 0; i < dtReport.Columns.Count; i++)
                            {
                                if (row.Cells[i].Text == previousRow.Cells[i].Text)
                                {
                                    row.Cells[i].RowSpan = 2;
                                    previousRow.Cells[i].Visible = false;
                                }
                            }
                            //ColumnSpan

                            for (int cell = GrdDailyDetail.Rows[0].Cells.Count - 1; cell > 0; cell--)
                            {
                                TableCell colum = GrdDailyDetail.Rows[0].Cells[cell];
                                TableCell previouscol = GrdDailyDetail.Rows[0].Cells[cell - 1];
                                if (colum.Text == previouscol.Text)
                                {
                                    if (previouscol.ColumnSpan == 0)
                                    {
                                        if (colum.ColumnSpan == 0)
                                        {
                                            previouscol.ColumnSpan += 2;
                                        }
                                        else
                                        {
                                            previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                        }
                                        colum.Visible = false;
                                    }
                                }
                            }

                            foreach (KeyValuePair<int, string> dr in dicRowColor)
                            {
                                int g = dr.Key;
                                string DicValue = dr.Value;
                                if (DicValue == "Grand Total")
                                {
                                    GrdDailyDetail.Rows[g].BackColor = ColorTranslator.FromHtml("#4870BE");
                                }
                            }
                            lbldlydetail.Text = "Student-->Daily Detail";
                            lbldlydetail.Visible = true;
                            divcommon.Visible = false;
                            divdailydeail.Visible = true;
                            pnlhead.Visible = true;
                            pnlcolhed.Visible = true;
                            divdaily.Visible = true;
                            //GrdDailyDetail.Visible = true;
                            //FpSpread2.Sheets[0].FrozenColumnCount = 3;
                            //for (int row = 0; row < ColCntGrd; row++)
                            //{
                            //    FpSpread2.Sheets[0].Columns[row].Locked = true;
                            //}
                            rptprint.Visible = true;
                            lblvalidation1.Text = "";
                            lblvalidation1.Visible = false;
                            MergeRows(GrdDailyDetail);
                            #endregion

                        }
                        #endregion
                    }
                    else
                    {
                        #region daily Deail

                        if (rb_dailydetail.Checked == true)
                        {
                            #region design

                            loaddailycolumns();
                            DataView dv = new DataView();

                            int check = 0;
                            arrColDailyDetNames.Add("S.No");
                            arrColDailyNames2.Add("S.No");
                            dtReport.Columns.Add("S.No");
                            arrColDailyDetNames.Add("Date");
                            arrColDailyNames2.Add("Date");
                            dtReport.Columns.Add("Date");
                            arrColDailyDetNames.Add("Reciept No");
                            arrColDailyNames2.Add("Reciept No");
                            dtReport.Columns.Add("Reciept No");
                            arrColDailyDetNames.Add("Student Name");
                            arrColDailyNames2.Add("Student Name");
                            dtReport.Columns.Add("Student Name");
                            arrColDailyDetNames.Add("Roll No");
                            arrColDailyNames2.Add("Roll No");
                            dtReport.Columns.Add("Roll No");
                            arrColDailyDetNames.Add("Reg No");
                            arrColDailyNames2.Add("Reg No");
                            dtReport.Columns.Add("Reg No");
                            arrColDailyDetNames.Add("Admission No");
                            arrColDailyNames2.Add("Admission No");
                            dtReport.Columns.Add("Admission No");
                            arrColDailyDetNames.Add(lbldept.Text);
                            arrColDailyNames2.Add(lbldept.Text);
                            dtReport.Columns.Add(lbldept.Text);
                            arrColDailyDetNames.Add(lblsem.Text);
                            arrColDailyNames2.Add(lblsem.Text);
                            dtReport.Columns.Add(lblsem.Text);
                            arrColDailyDetNames.Add("Narration");
                            arrColDailyNames2.Add("Narration");
                            dtReport.Columns.Add("Narration");
                            arrColDailyDetNames.Add("Paymode");
                            arrColDailyNames2.Add("Paymode");
                            dtReport.Columns.Add("Paymode");
                            arrColDailyDetNames.Add("DD/Cheque/Card No");
                            arrColDailyNames2.Add("DD/Cheque/Card No");
                            dtReport.Columns.Add("DD/Cheque/Card No");
                            arrColDailyDetNames.Add("Bank Name");
                            arrColDailyNames2.Add("Bank Name");
                            dtReport.Columns.Add("Bank Name");
                            Hashtable newhash = new Hashtable();
                            DataView Dview = new DataView();
                            if (chkl_paid.Items.Count > 0)
                            {
                                for (int s = 0; s < chkl_paid.Items.Count; s++)
                                {
                                    if (chkl_paid.Items[s].Selected == true)
                                    {
                                        check++;
                                        arrColDailyDetNames.Add("Paid");
                                        arrColDailyNames2.Add(chkl_paid.Items[s].Text);
                                        dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                        newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                    }
                                }
                                if (check != 0)
                                {
                                    arrColDailyDetNames.Add("Paid");
                                    arrColDailyNames2.Add("Total Paid");
                                    dtReport.Columns.Add("Total Paid");
                                }
                            }
                            if (check == 0)
                            {
                                arrColDailyDetNames.Add("Paid");
                                arrColDailyNames2.Add("Paid");
                                dtReport.Columns.Add("Paid");
                            }

                            //excess amount
                            arrColDailyDetNames.Add("Excess Amount");
                            arrColDailyNames2.Add("Excess Amount");
                            dtReport.Columns.Add("Excess Amount");
                            DataRow drHdr1 = dtReport.NewRow();
                            DataRow drHdr2 = dtReport.NewRow();
                            for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                            {
                                drHdr1[grCol] = arrColDailyDetNames[grCol];
                                drHdr2[grCol] = arrColDailyNames2[grCol];
                            }
                            dtReport.Rows.Add(drHdr1);
                            dtReport.Rows.Add(drHdr2);

                            #endregion

                            #region value

                            bool rowincr = false;
                            DataView dvstud = new DataView();
                            DataView dvstaf = new DataView();
                            DataView dvven = new DataView();
                            DataView dvothr = new DataView();
                            int height = 0;
                            string paymodeval = "";
                            string degreecode = "";
                            int rollchk = 0;
                            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                            {
                                bool addOk = false;
                                string transdt = Convert.ToString(ds.Tables[0].Rows[i]["TransDate"]);
                                string transcode = Convert.ToString(ds.Tables[0].Rows[i]["TransCode"]);
                                string memtype = Convert.ToString(ds.Tables[0].Rows[i]["memtype"]);
                                string appno = Convert.ToString(ds.Tables[0].Rows[i]["app_no"]);
                                string feecate = Convert.ToString(ds.Tables[0].Rows[i]["feecategory"]);
                                string payMod = Convert.ToString(ds.Tables[0].Rows[i]["paymodeval"]);
                                if (memtype == "1")
                                {
                                    if (ds.Tables[1].Rows.Count > 0)
                                    {
                                        ds.Tables[1].DefaultView.RowFilter = "TransCode='" + Convert.ToString(transcode) + "' and app_no='" + appno + "' and memtype='" + memtype + "' and feecategory='" + Convert.ToString(feecate) + "' and paymodeval='" + payMod + "'";
                                        dvstud = ds.Tables[1].DefaultView;
                                        if (dvstud.Count > 0 && dvstud != null)
                                        {
                                            addOk = true;
                                            rowincr = true;
                                            height += 25;
                                            if (!arroll.Contains(transcode))
                                            {
                                                arroll.Add(transcode);
                                                rollchk++;
                                            }
                                            drowGrd = dtReport.NewRow();
                                            drowGrd[0] = Convert.ToString(rollchk);
                                            drowGrd[1] = Convert.ToString(dvstud[0]["TransDate"]);
                                            drowGrd[2] = Convert.ToString(dvstud[0]["TransCode"]);
                                            drowGrd[3] = Convert.ToString(dvstud[0]["Stud_Name"]);
                                            drowGrd[4] = Convert.ToString(dvstud[0]["Roll_No"]);
                                            drowGrd[5] = Convert.ToString(dvstud[0]["Reg_No"]);
                                            drowGrd[6] = Convert.ToString(dvstud[0]["roll_admit"]);
                                            degreecode = Convert.ToString(dvstud[0]["Degree_code"]);
                                            string Acrname = "";
                                            string degreename = "";
                                            DataView dnew = new DataView();
                                            if (ds.Tables[6].Rows.Count > 0)
                                            {
                                                ds.Tables[6].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(degreecode) + "' ";
                                                dnew = ds.Tables[6].DefaultView;
                                                if (dnew.Count > 0)
                                                {
                                                    Acrname = Convert.ToString(dnew[0]["dept_acronym"]);
                                                    degreename = Convert.ToString(dnew[0]["degreename"]);

                                                }
                                            }
                                            if (deptacr == true)
                                                drowGrd[7] = Acrname;
                                            else
                                                drowGrd[7] = degreename;
                                            //semester
                                            string TextName = "";
                                            if (ds.Tables[8].Rows.Count > 0)
                                            {
                                                ds.Tables[8].DefaultView.RowFilter = "TextCode='" + Convert.ToString(dvstud[0]["feecategory"]) + "'";
                                                Dview = ds.Tables[8].DefaultView;
                                                if (Dview.Count > 0)
                                                {
                                                    TextName = Convert.ToString(Dview[0]["TextVal"]);
                                                }
                                            }
                                            drowGrd[8] = TextName;
                                            drowGrd[9] = Convert.ToString(dvstud[0]["Narration"]);
                                            drowGrd[10] = Convert.ToString(dvstud[0]["paymode"]);

                                            paymodeval = Convert.ToString(dvstud[0]["paymodeval"]);
                                            if (paymodeval == "3" || paymodeval == "2" || paymodeval == "6")
                                            {
                                                drowGrd[11] = Convert.ToString(dvstud[0]["DDNo"]);
                                                string bkname = string.Empty;
                                                if (paymodeval != "6")
                                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='BName' and  TextCode='" + Convert.ToString(dvstud[0]["DDBankCode"]) + "'");
                                                else
                                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='CardT' and  TextCode='" + Convert.ToString(dvstud[0]["DDBankCode"]) + "'");

                                                drowGrd[12] = bkname;
                                            }
                                            else
                                            {
                                                drowGrd[11] = "-";
                                                drowGrd[12] = "-";
                                            }
                                        }
                                    }
                                }
                                else if (memtype == "2")
                                {
                                    if (ds.Tables[2].Rows.Count > 0)
                                    {
                                        ds.Tables[2].DefaultView.RowFilter = "TransCode='" + Convert.ToString(transcode) + "' and app_no='" + appno + "' and memtype='" + memtype + "' and paymodeval='" + payMod + "'";
                                        dvstaf = ds.Tables[2].DefaultView;
                                        if (dvstaf.Count > 0 && dvstaf != null)
                                        {
                                            addOk = true;
                                            rowincr = true;
                                            rollchk++;
                                            drowGrd = dtReport.NewRow();
                                            drowGrd[0] = Convert.ToString(rollchk);
                                            drowGrd[1] = Convert.ToString(dvstaf[0]["TransDate"]);
                                            drowGrd[2] = Convert.ToString(dvstaf[0]["TransCode"]);
                                            drowGrd[3] = Convert.ToString(dvstaf[0]["staff_name"]);
                                            drowGrd[4] = Convert.ToString(dvstaf[0]["staff_code"]);
                                            drowGrd[5] = Convert.ToString(dvstaf[0]["staff_code"]);
                                            drowGrd[6] = Convert.ToString(dvstaf[0]["staff_code"]);
                                            drowGrd[7] = Convert.ToString(dvstaf[0]["dept_name"]);
                                            drowGrd[8] = "-";
                                            drowGrd[9] = Convert.ToString(dvstaf[0]["Narration"]);
                                            drowGrd[10] = Convert.ToString(dvstaf[0]["paymode"]);

                                            paymodeval = Convert.ToString(dvstaf[0]["paymodeval"]);
                                            if (paymodeval == "3" || paymodeval == "2" || paymodeval == "6")
                                            {
                                                drowGrd[11] = Convert.ToString(dvstaf[0]["DDNo"]);
                                                string bkname = string.Empty;
                                                if (paymodeval != "6")
                                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='BName' and  TextCode='" + Convert.ToString(dvstaf[0]["DDBankCode"]) + "'");
                                                else
                                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='CardT' and  TextCode='" + Convert.ToString(dvstaf[0]["DDBankCode"]) + "'");
                                                drowGrd[12] = bkname;
                                            }
                                            else
                                            {
                                                drowGrd[11] = "-";
                                                drowGrd[12] = "-";
                                            }
                                        }
                                    }
                                }
                                else if (memtype == "3")
                                {
                                    if (ds.Tables[3].Rows.Count > 0)
                                    {
                                        ds.Tables[3].DefaultView.RowFilter = "TransCode='" + Convert.ToString(transcode) + "' and app_no='" + appno + "' and memtype='" + memtype + "' and paymodeval='" + payMod + "'";
                                        dvven = ds.Tables[3].DefaultView;
                                        if (dvven.Count > 0 && dvven != null)
                                        {
                                            addOk = true;
                                            rowincr = true;
                                            height += 25;
                                            rollchk++;
                                            drowGrd = dtReport.NewRow();
                                            drowGrd[0] = Convert.ToString(rollchk);
                                            drowGrd[1] = Convert.ToString(dvven[0]["TransDate"]);
                                            drowGrd[2] = Convert.ToString(dvven[0]["TransCode"]);
                                            drowGrd[3] = Convert.ToString(dvven[0]["VenContactName"]);
                                            drowGrd[4] = Convert.ToString(dvven[0]["VendorCode"]);
                                            drowGrd[5] = Convert.ToString(dvven[0]["VendorCode"]);
                                            drowGrd[6] = Convert.ToString(dvven[0]["VendorCode"]);
                                            drowGrd[7] = Convert.ToString("-");
                                            drowGrd[8] = "-";
                                            drowGrd[9] = Convert.ToString(dvven[0]["Narration"]);
                                            drowGrd[10] = Convert.ToString(dvven[0]["paymode"]);

                                            paymodeval = Convert.ToString(dvven[0]["paymodeval"]);
                                            if (paymodeval == "3" || paymodeval == "2" || paymodeval == "6")
                                            {
                                                drowGrd[11] = Convert.ToString(dvven[0]["DDNo"]);
                                                string bkname = string.Empty;
                                                if (paymodeval != "6")
                                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='BName' and  TextCode='" + Convert.ToString(dvven[0]["DDBankCode"]) + "'");
                                                else
                                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='CardT' and  TextCode='" + Convert.ToString(dvven[0]["DDBankCode"]) + "'");

                                                drowGrd[12] = bkname;
                                            }
                                            else
                                            {
                                                drowGrd[11] = "-";
                                                drowGrd[12] = "-";
                                            }
                                        }
                                    }
                                }
                                else if (memtype == "4")
                                {
                                    if (ds.Tables[4].Rows.Count > 0)
                                    {
                                        ds.Tables[4].DefaultView.RowFilter = "TransCode='" + Convert.ToString(transcode) + "' and app_no='" + appno + "' and memtype='" + memtype + "' and paymodeval='" + payMod + "'";
                                        dvothr = ds.Tables[4].DefaultView;
                                        if (dvothr.Count > 0 && dvothr != null)
                                        {
                                            addOk = true;
                                            rowincr = true;
                                            height += 25;
                                            rollchk++;
                                            drowGrd = dtReport.NewRow();
                                            drowGrd[0] = Convert.ToString(rollchk);
                                            drowGrd[1] = Convert.ToString(dvothr[0]["TransDate"]);
                                            drowGrd[2] = Convert.ToString(dvothr[0]["TransCode"]);
                                            drowGrd[3] = Convert.ToString(dvothr[0]["vendorName"]);
                                            drowGrd[4] = Convert.ToString(dvothr[0]["VendorCode"]);
                                            drowGrd[5] = Convert.ToString(dvothr[0]["VendorCode"]);
                                            drowGrd[6] = Convert.ToString(dvothr[0]["VendorCode"]);
                                            drowGrd[7] = Convert.ToString("-");
                                            drowGrd[8] = "-";
                                            drowGrd[9] = Convert.ToString(dvothr[0]["Narration"]);
                                            drowGrd[10] = Convert.ToString(dvothr[0]["paymode"]);
                                            paymodeval = Convert.ToString(dvothr[0]["paymodeval"]);
                                            if (paymodeval == "3" || paymodeval == "2" || paymodeval == "6")
                                            {
                                                drowGrd[11] = Convert.ToString(dvothr[0]["DDNo"]);
                                                string bkname = string.Empty;
                                                if (paymodeval != "6")
                                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='BName' and  TextCode='" + Convert.ToString(dvothr[0]["DDBankCode"]) + "'");
                                                else
                                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='CardT' and  TextCode='" + Convert.ToString(dvothr[0]["DDBankCode"]) + "'");
                                                drowGrd[12] = bkname;
                                            }
                                            else
                                            {
                                                drowGrd[11] = "-";
                                                drowGrd[12] = "-";
                                            }
                                        }
                                    }
                                }

                                if (!addOk)
                                {
                                    continue;
                                }
                                double totamount = 0;
                                double fnlamount = 0;
                                if (paymodeval != "")
                                {
                                    if (ds.Tables[5].Rows.Count > 0)
                                    {
                                        if (memtype == "1")
                                        {
                                            ds.Tables[5].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and PayMode='" + Convert.ToString(Convert.ToInt32(paymodeval)) + "' and TransCode='" + Convert.ToString(transcode) + "' and memtype='" + memtype + "'and feecategory='" + Convert.ToString(feecate) + "'";

                                        }
                                        else
                                        {
                                            ds.Tables[5].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and PayMode='" + Convert.ToString(Convert.ToInt32(paymodeval)) + "' and TransCode='" + Convert.ToString(transcode) + "' and memtype='" + memtype + "'";
                                        }
                                        dv = ds.Tables[5].DefaultView;

                                        int index = Convert.ToInt32(newhash[Convert.ToString(paymodeval)]);
                                        if (dv.Count > 0)
                                        {
                                            DataTable dt = new DataTable();
                                            dt = dv.ToTable();
                                            int val = Convert.ToInt32(dt.Compute("Sum(total)", ""));
                                            double.TryParse(Convert.ToString(val), out totamount);
                                            fnlamount = fnlamount + totamount;
                                            // double.TryParse(Convert.ToString(dv[0]["total"]), out totamount);
                                            //fnlamount = fnlamount + totamount;
                                        }
                                        //total
                                        drowGrd[index] = Convert.ToString(totamount);
                                        if (!grandtotal.ContainsKey(index))
                                            grandtotal.Add(index, Convert.ToString(totamount));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[index]), out amount);
                                            amount += totamount;
                                            grandtotal.Remove(index);
                                            grandtotal.Add(index, Convert.ToString(amount));
                                        }
                                        if (check != 0)
                                        {
                                            ColCntGrd = dtReport.Columns.Count;
                                            drowGrd[ColCntGrd - 2] = Convert.ToString(fnlamount);
                                        }
                                        if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                            grandtotal.Add(ColCntGrd - 2, Convert.ToString(fnlamount));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                            amount += fnlamount;
                                            grandtotal.Remove(ColCntGrd - 2);
                                            grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                                        }

                                        #region old
                                        //if (chkl_paid.Items.Count > 0)
                                        //{
                                        //    for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                        //    {
                                        //        if (chkl_paid.Items[pay].Selected == true)
                                        //        {
                                        //            if (payval == Convert.ToInt32(chkl_paid.Items[pay].Value))
                                        //            {
                                        //                ds.Tables[2].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and TransCode='" + Convert.ToString(ds.Tables[0].Rows[i]["Transcode"]) + "'";
                                        //                //and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'
                                        //                dv = ds.Tables[2].DefaultView;
                                        //            }
                                        //            else
                                        //            {
                                        //                dv = null;
                                        //            }
                                        //            int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                        //            if (dv.Count == 0 || dv.Count == null)
                                        //            {
                                        //                int count = 0;

                                        //                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, colnew].Text = "0";
                                        //            }
                                        //            if (dv.Count > 0)
                                        //            {                                              
                                        //                FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, colnew].Text = Convert.ToString(dv[0]["total"]);
                                        //                totamount = Convert.ToDouble(dv[0]["total"]);
                                        //                if (totamount != 0)
                                        //                {
                                        //                    fnlamount = fnlamount + totamount;
                                        //                }
                                        //            }
                                        //        }
                                        //    }
                                        //    if (check != 0)
                                        //        FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, ColCntGrd - 1].Text = Convert.ToString(fnlamount);

                                        //}
                                        #endregion
                                    }
                                }
                                //excess amount
                                DataView dvex = new DataView();
                                double exAmt = 0;
                                if (rowincr == true)
                                {
                                    if (ds.Tables[7].Rows.Count > 0)
                                    {
                                        ds.Tables[7].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and receiptno='" + Convert.ToString(ds.Tables[0].Rows[i]["Transcode"]) + "'";
                                        dvex = ds.Tables[7].DefaultView;
                                        if (dvex.Count > 0)
                                            double.TryParse(Convert.ToString(dvex[0]["examt"]), out exAmt);

                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 1] = Convert.ToString(exAmt);
                                        if (!grandtotal.ContainsKey(ColCntGrd - 1))
                                            grandtotal.Add(ColCntGrd - 1, Convert.ToString(exAmt));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 1]), out amount);
                                            amount += exAmt;
                                            grandtotal.Remove(ColCntGrd - 1);
                                            grandtotal.Add(ColCntGrd - 1, Convert.ToString(amount));
                                        }
                                    }
                                    else
                                    {
                                        ColCntGrd = dtReport.Columns.Count;
                                        drowGrd[ColCntGrd - 1] = "-";
                                    }
                                }
                                dtReport.Rows.Add(drowGrd);
                            }
                            #endregion

                            #region grandtot

                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = "Grand Total";
                            dicRowColor.Add(dtReport.Rows.Count, "Grand Total");
                            double grandvalue = 0;
                            for (int j = 13; j < dtReport.Columns.Count; j++)
                            {
                                double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                                drowGrd[j] = Convert.ToString(grandvalue);
                            }
                            dtReport.Rows.Add(drowGrd);

                            // }
                            #endregion

                            #region visible

                            GrdDailyDetail.DataSource = dtReport;
                            GrdDailyDetail.DataBind();
                            GrdDailyDetail.Visible = true;

                            GridViewRow row = GrdDailyDetail.Rows[0];
                            GridViewRow previousRow = GrdDailyDetail.Rows[1];

                            for (int i = 0; i < dtReport.Columns.Count; i++)
                            {
                                if (row.Cells[i].Text == previousRow.Cells[i].Text)
                                {
                                    row.Cells[i].RowSpan = 2;
                                    previousRow.Cells[i].Visible = false;
                                }
                            }
                            //ColumnSpan

                            for (int cell = GrdDailyDetail.Rows[0].Cells.Count - 1; cell > 0; cell--)
                            {
                                TableCell colum = GrdDailyDetail.Rows[0].Cells[cell];
                                TableCell previouscol = GrdDailyDetail.Rows[0].Cells[cell - 1];
                                if (colum.Text == previouscol.Text)
                                {
                                    if (previouscol.ColumnSpan == 0)
                                    {
                                        if (colum.ColumnSpan == 0)
                                        {
                                            previouscol.ColumnSpan += 2;
                                        }
                                        else
                                        {
                                            previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                        }
                                        colum.Visible = false;
                                    }
                                }
                            }

                            foreach (KeyValuePair<int, string> dr in dicRowColor)
                            {
                                int g = dr.Key;
                                string DicValue = dr.Value;
                                if (DicValue == "Grand Total")
                                {
                                    GrdDailyDetail.Rows[g].BackColor = ColorTranslator.FromHtml("#4870BE");
                                }
                            }
                            lbldlydetail.Text = "Student-->Daily Detail";
                            lbldlydetail.Visible = true;
                            divcommon.Visible = false;
                            divdailydeail.Visible = true;
                            pnlhead.Visible = true;
                            pnlcolhed.Visible = true;
                            divdaily.Visible = true;
                            rptprint.Visible = true;
                            lblvalidation1.Text = "";
                            lblvalidation1.Visible = false;
                            MergeRows(GrdDailyDetail);
                            #endregion
                        }
                        #endregion
                    }
                    #endregion
                }
                else
                {
                    #region detail

                    if (chkcomflt.Checked == true)
                    {
                        #region detail wise
                        DailyDetailsMethod();
                        #endregion
                    }
                    else
                    {
                        #region Detail Wie

                        DailyDetailMemtypeMethod();

                        #endregion
                    }

                    #endregion
                }
                // #endregion
            }
            else
            {
                grdStudentReport.Visible = false;
                divdaily.Visible = false;
                div1.Visible = false;
                rptprint.Visible = false;
                pheaderfilter.Visible = false;
                pcolumnorder.Visible = false;
                lblhed.Text = "";
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                divdailydeail.Visible = false;
                lbl_alert.Text = "No Record Found";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void DailyDetailsMethod()
    {
        try
        {
            //if Degree Checked

            #region design

            double bal = 0;
            int checkpaid = 0;
            loaddailycolumns();
            ArrayList arrColDailyDetNames = new ArrayList();
            ArrayList arrColDailyNames2 = new ArrayList();
            Hashtable newhash = new Hashtable();
            Hashtable newhash1 = new Hashtable();
            Hashtable hedvalue = new Hashtable();
            DataView dv = new DataView();
            DataView dv1 = new DataView();

            int check = 0;
            arrColDailyDetNames.Add("S.No");
            arrColDailyNames2.Add("S.No");
            dtReport.Columns.Add("S.No");
            arrColDailyDetNames.Add("Date");
            arrColDailyNames2.Add("Date");
            dtReport.Columns.Add("Date");
            arrColDailyDetNames.Add("Reciept No");
            arrColDailyNames2.Add("Reciept No");
            dtReport.Columns.Add("Reciept No");
            arrColDailyDetNames.Add("Student Name");
            arrColDailyNames2.Add("Student Name");
            dtReport.Columns.Add("Student Name");
            arrColDailyDetNames.Add("Roll No");
            arrColDailyNames2.Add("Roll No");
            dtReport.Columns.Add("Roll No");
            arrColDailyDetNames.Add("Reg No");
            arrColDailyNames2.Add("Reg No");
            dtReport.Columns.Add("Reg No");
            arrColDailyDetNames.Add("Admission No");
            arrColDailyNames2.Add("Admission No");
            dtReport.Columns.Add("Admission No");
            arrColDailyDetNames.Add(lbldept.Text);
            arrColDailyNames2.Add(lbldept.Text);
            dtReport.Columns.Add(lbldept.Text);
            arrColDailyDetNames.Add(lblsem.Text);
            arrColDailyNames2.Add(lblsem.Text);
            dtReport.Columns.Add(lblsem.Text);
            arrColDailyDetNames.Add("Narration");
            arrColDailyNames2.Add("Narration");
            dtReport.Columns.Add("Narration");
            arrColDailyDetNames.Add("Paymode");
            arrColDailyNames2.Add("Paymode");
            dtReport.Columns.Add("Paymode");
            arrColDailyDetNames.Add("DD/Cheque/Card No");
            arrColDailyNames2.Add("DD/Cheque/Card No");
            dtReport.Columns.Add("DD/Cheque/Card No");
            arrColDailyDetNames.Add("Bank Name");
            arrColDailyNames2.Add("Bank Name");
            dtReport.Columns.Add("Bank Name");
            DataView Dview = new DataView();
            string hedname = "";
            if (rbacrhed.Checked == true)
                hedname = "Header Name";
            else
                hedname = "Ledger Name";
            arrColDailyDetNames.Add(hedname);
            arrColDailyNames2.Add(hedname);
            dtReport.Columns.Add(hedname);
            if (chkl_paid.Items.Count > 0)
            {
                for (int s = 0; s < chkl_paid.Items.Count; s++)
                {
                    if (chkl_paid.Items[s].Selected == true)
                    {
                        check++;
                        arrColDailyDetNames.Add("Paid");
                        arrColDailyNames2.Add(chkl_paid.Items[s].Text);
                        dtReport.Columns.Add(chkl_paid.Items[s].Text);
                        newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                    }
                }
                if (check != 0)
                {
                    arrColDailyDetNames.Add("Paid");
                    arrColDailyNames2.Add("Total Paid");
                    dtReport.Columns.Add("Total Paid");
                }
            }
            if (check == 0)
            {
                arrColDailyDetNames.Add("Paid");
                arrColDailyNames2.Add("Paid");
                dtReport.Columns.Add("Paid");
            }

            //excess amount
            arrColDailyDetNames.Add("Excess Amount");
            arrColDailyNames2.Add("Excess Amount");
            dtReport.Columns.Add("Excess Amount");
            DataRow drHdr1 = dtReport.NewRow();
            DataRow drHdr2 = dtReport.NewRow();
            for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
            {
                drHdr1[grCol] = arrColDailyDetNames[grCol];
                drHdr2[grCol] = arrColDailyNames2[grCol];
            }
            dtReport.Rows.Add(drHdr1);
            dtReport.Rows.Add(drHdr2);

            #endregion

            #region value

            ArrayList arroll = new ArrayList();
            int height = 0;
            int ColCntGrd = 0;
            string paymode = "";
            int payval = 0;
            int rollchk = 0;
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                string transcode = Convert.ToString(ds.Tables[0].Rows[i]["TransCode"]);
                if (!arroll.Contains(transcode))
                {
                    arroll.Add(transcode);
                    rollchk++;
                }
                drowGrd = dtReport.NewRow();
                drowGrd[0] = Convert.ToString(rollchk);
                drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["TransDate"]);
                drowGrd[2] = transcode;
                drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["Stud_Name"]);
                drowGrd[4] = Convert.ToString(ds.Tables[0].Rows[i]["Roll_No"]);
                drowGrd[5] = Convert.ToString(ds.Tables[0].Rows[i]["Reg_No"]);
                drowGrd[6] = Convert.ToString(ds.Tables[0].Rows[i]["roll_admit"]);
                string Degrecode = Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"].ToString());
                DataView dnew = new DataView();
                string Acrname = "";
                string degreename = "";
                if (ds.Tables[1].Rows.Count > 0)
                {
                    ds.Tables[1].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' ";
                    dnew = ds.Tables[1].DefaultView;
                    if (dnew.Count > 0)
                    {
                        // FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dnew[0]["Course_Name"]);
                        Acrname = Convert.ToString(dnew[0]["dept_acronym"]);
                        degreename = Convert.ToString(dnew[0]["degreename"]);
                    }
                }

                if (deptacr == true)
                    drowGrd[7] = Acrname;
                else
                    drowGrd[7] = degreename;

                //semester
                string TextName = "";
                if (ds.Tables[5].Rows.Count > 0)
                {
                    ds.Tables[5].DefaultView.RowFilter = "TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["feecategory"]) + "'";
                    Dview = ds.Tables[5].DefaultView;
                    if (Dview.Count > 0)
                    {
                        TextName = Convert.ToString(Dview[0]["TextVal"]);
                    }
                }
                drowGrd[8] = TextName;
                drowGrd[9] = Convert.ToString(ds.Tables[0].Rows[i]["Narration"]);
                paymode = Convert.ToString(ds.Tables[0].Rows[i]["paymodeval"]);
                drowGrd[10] = Convert.ToString(ds.Tables[0].Rows[i]["paymode"]);
                if (paymode == "3" || paymode == "2" || paymode == "6")
                {
                    drowGrd[11] = Convert.ToString(ds.Tables[0].Rows[i]["DDNo"]);
                    string bkname = string.Empty;
                    if (paymode != "6")
                        bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='BName' and  TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["DDBankCode"]) + "'");
                    else
                        bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='CardT' and  TextCode='" + Convert.ToString(ds.Tables[0].Rows[i]["DDBankCode"]) + "'");
                    drowGrd[12] = bkname;
                }
                else
                {
                    drowGrd[11] = "-";
                    drowGrd[12] = "-";
                }
                DataView dvhed = new DataView();
                string headerName = "";
                if (rbacrhed.Checked == true)
                {
                    if (ds.Tables[4].Rows.Count > 0)
                    {
                        ds.Tables[4].DefaultView.RowFilter = "HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' ";
                        dvhed = ds.Tables[4].DefaultView;
                        if (dvhed.Count > 0)
                        {
                            headerName = Convert.ToString(dvhed[0]["HeaderName"]);
                        }
                    }
                }
                else
                {
                    if (ds.Tables[4].Rows.Count > 0)
                    {
                        ds.Tables[4].DefaultView.RowFilter = "LedgerPK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "' ";
                        dvhed = ds.Tables[4].DefaultView;
                        if (dvhed.Count > 0)
                        {
                            headerName = Convert.ToString(dvhed[0]["LedgerName"]);
                        }
                    }
                }
                drowGrd[13] = headerName;

                double totamount = 0;
                double fnlamount = 0;
                if (ds.Tables[2].Rows.Count > 0)
                {
                    if (rbacrhed.Checked == true)
                    {
                        ds.Tables[2].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and PayMode='" + Convert.ToString(Convert.ToInt32(paymode)) + "' and TransCode='" + Convert.ToString(ds.Tables[0].Rows[i]["Transcode"]) + "' and HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' and feecategory='" + Convert.ToString(ds.Tables[0].Rows[i]["feecategory"]) + "' ";
                    }
                    else
                    {
                        ds.Tables[2].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and PayMode='" + Convert.ToString(Convert.ToInt32(paymode)) + "' and TransCode='" + Convert.ToString(ds.Tables[0].Rows[i]["Transcode"]) + "' and LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "' and feecategory='" + Convert.ToString(ds.Tables[0].Rows[i]["feecategory"]) + "' ";
                    }
                    dv = ds.Tables[2].DefaultView;

                    int index = Convert.ToInt32(newhash[Convert.ToString(paymode)]);
                    if (dv.Count > 0)
                    {
                        DataTable dt = new DataTable();
                        dt = dv.ToTable();
                        int val = Convert.ToInt32(dt.Compute("Sum(total)", ""));
                        double.TryParse(Convert.ToString(val), out totamount);
                        fnlamount = fnlamount + totamount;
                    }
                    //paymode
                    drowGrd[index] = Convert.ToString(totamount);
                    if (!grandtotal.ContainsKey(index))
                        grandtotal.Add(index, Convert.ToString(totamount));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[index]), out amount);
                        amount += totamount;
                        grandtotal.Remove(index);
                        grandtotal.Add(index, Convert.ToString(amount));
                    }
                    //total
                    if (check != 0)
                    {
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 2] = Convert.ToString(fnlamount);
                    }
                    if (!grandtotal.ContainsKey(ColCntGrd - 2))
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(fnlamount));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                        amount += fnlamount;
                        grandtotal.Remove(ColCntGrd - 2);
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                    }
                    fnlamount = 0;
                }
                //excess amount
                DataView dvex = new DataView();
                double exAmt = 0;
                if (ds.Tables[3].Rows.Count > 0)
                {
                    ds.Tables[3].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and receiptno='" + Convert.ToString(ds.Tables[0].Rows[i]["Transcode"]) + "'";
                    dvex = ds.Tables[3].DefaultView;
                    if (dvex.Count > 0)
                        double.TryParse(Convert.ToString(dvex[0]["examt"]), out exAmt);

                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 1] = Convert.ToString(exAmt);
                    if (!grandtotal.ContainsKey(ColCntGrd - 1))
                        grandtotal.Add(ColCntGrd - 1, Convert.ToString(exAmt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 1]), out amount);
                        amount += exAmt;
                        grandtotal.Remove(ColCntGrd - 1);
                        grandtotal.Add(ColCntGrd - 1, Convert.ToString(amount));
                    }
                }
                else
                {
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 1] = "-";
                }
                dtReport.Rows.Add(drowGrd);
            }
            //for (int i = 0; i < FpSpread2.Sheets[0].ColumnCount; i++)
            //{
            //    FpSpread2.Sheets[0].SetColumnMerge(i, FarPoint.Web.Spread.Model.MergePolicy.Always);
            //}
            #endregion

            #region grandtot

            drowGrd = dtReport.NewRow();
            drowGrd[0] = "Grand Total";
            dicRowColor.Add(dtReport.Rows.Count, "Grand Total");
            double grandvalue = 0;
            for (int j = 13; j < dtReport.Columns.Count; j++)
            {
                double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                drowGrd[j] = Convert.ToString(grandvalue);
            }
            dtReport.Rows.Add(drowGrd);
            // }
            #endregion

            #region Visible

            GrdDailyDetail.DataSource = dtReport;
            GrdDailyDetail.DataBind();
            GrdDailyDetail.Visible = true;

            GridViewRow row = GrdDailyDetail.Rows[0];
            GridViewRow previousRow = GrdDailyDetail.Rows[1];

            for (int i = 0; i < dtReport.Columns.Count; i++)
            {
                if (row.Cells[i].Text == previousRow.Cells[i].Text)
                {
                    row.Cells[i].RowSpan = 2;
                    previousRow.Cells[i].Visible = false;
                }
            }
            //ColumnSpan

            for (int cell = GrdDailyDetail.Rows[0].Cells.Count - 1; cell > 0; cell--)
            {
                TableCell colum = GrdDailyDetail.Rows[0].Cells[cell];
                TableCell previouscol = GrdDailyDetail.Rows[0].Cells[cell - 1];
                if (colum.Text == previouscol.Text)
                {
                    if (previouscol.ColumnSpan == 0)
                    {
                        if (colum.ColumnSpan == 0)
                        {
                            previouscol.ColumnSpan += 2;
                        }
                        else
                        {
                            previouscol.ColumnSpan += colum.ColumnSpan + 1;
                        }
                        colum.Visible = false;
                    }
                }
            }

            foreach (KeyValuePair<int, string> dr in dicRowColor)
            {
                int g = dr.Key;
                string DicValue = dr.Value;
                if (DicValue == "Grand Total")
                {
                    GrdDailyDetail.Rows[g].BackColor = ColorTranslator.FromHtml("#4870BE");
                }
            }
            if (rbacrhed.Checked == true)
                lbldlydetail.Text = "Student-->Daily Detail(Header Wise)";
            else
                lbldlydetail.Text = "Student-->Daily Detail(Ledger Wise)";
            lbldlydetail.Visible = true;
            divcommon.Visible = false;
            divdailydeail.Visible = true;
            pnlhead.Visible = true;
            pnlcolhed.Visible = true;
            divdaily.Visible = true;
            rptprint.Visible = true;
            lblvalidation1.Text = "";
            lblvalidation1.Visible = false;
            MergeRows(GrdDailyDetail);
            #endregion
        }
        catch { }
    }

    protected void DailyDetailMemtypeMethod()
    {
        try
        {
            #region design

            loaddailycolumns();
            grandtotal.Clear();
            DataView dv = new DataView();
            ArrayList arrColDailyMemNames = new ArrayList();
            ArrayList arrColDailyNames2 = new ArrayList();
            Hashtable newhash = new Hashtable();

            int check = 0;
            arrColDailyMemNames.Add("S.No");
            arrColDailyNames2.Add("S.No");
            dtReport.Columns.Add("S.No");
            arrColDailyMemNames.Add("Date");
            arrColDailyNames2.Add("Date");
            dtReport.Columns.Add("Date");
            arrColDailyMemNames.Add("Reciept No");
            arrColDailyNames2.Add("Reciept No");
            dtReport.Columns.Add("Reciept No");
            arrColDailyMemNames.Add("Name");
            arrColDailyNames2.Add("Name");
            dtReport.Columns.Add(" Name");
            arrColDailyMemNames.Add("Roll No");
            arrColDailyNames2.Add("Roll No");
            dtReport.Columns.Add("Roll No");
            arrColDailyMemNames.Add("Reg No");
            arrColDailyNames2.Add("Reg No");
            dtReport.Columns.Add("Reg No");
            arrColDailyMemNames.Add("Admission No");
            arrColDailyNames2.Add("Admission No");
            dtReport.Columns.Add("Admission No");
            arrColDailyMemNames.Add(lbldept.Text);
            arrColDailyNames2.Add(lbldept.Text);
            dtReport.Columns.Add(lbldept.Text);
            arrColDailyMemNames.Add(lblsem.Text);
            arrColDailyNames2.Add(lblsem.Text);
            dtReport.Columns.Add(lblsem.Text);
            arrColDailyMemNames.Add("Narration");
            arrColDailyNames2.Add("Narration");
            dtReport.Columns.Add("Narration");
            arrColDailyMemNames.Add("Paymode");
            arrColDailyNames2.Add("Paymode");
            dtReport.Columns.Add("Paymode");
            arrColDailyMemNames.Add("DD/Cheque/Card No");
            arrColDailyNames2.Add("DD/Cheque/Card No");
            dtReport.Columns.Add("DD/Cheque/Card No");
            arrColDailyMemNames.Add("Bank Name");
            arrColDailyNames2.Add("Bank Name");
            dtReport.Columns.Add("Bank Name");
            DataView Dview = new DataView();
            string hedname = "";
            if (rbacrhed.Checked == true)
                hedname = "Header Name";
            else
                hedname = "Ledger Name";
            arrColDailyMemNames.Add(hedname);
            arrColDailyNames2.Add(hedname);
            dtReport.Columns.Add(hedname);
            if (chkl_paid.Items.Count > 0)
            {
                for (int s = 0; s < chkl_paid.Items.Count; s++)
                {
                    if (chkl_paid.Items[s].Selected == true)
                    {
                        check++;
                        arrColDailyMemNames.Add("Paid");
                        arrColDailyNames2.Add(chkl_paid.Items[s].Text);
                        dtReport.Columns.Add(chkl_paid.Items[s].Text);
                        newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                    }
                }
                if (check != 0)
                {
                    arrColDailyMemNames.Add("Paid");
                    arrColDailyNames2.Add("Total Paid");
                    dtReport.Columns.Add("Total Paid");
                }
            }
            if (check == 0)
            {
                arrColDailyMemNames.Add("Paid");
                arrColDailyNames2.Add("Paid");
                dtReport.Columns.Add("Paid");
            }

            //excess amount
            arrColDailyMemNames.Add("Excess Amount");
            arrColDailyNames2.Add("Excess Amount");
            dtReport.Columns.Add("Excess Amount");
            DataRow drHdr1 = dtReport.NewRow();
            DataRow drHdr2 = dtReport.NewRow();
            for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
            {
                drHdr1[grCol] = arrColDailyMemNames[grCol];
                drHdr2[grCol] = arrColDailyNames2[grCol];
            }
            dtReport.Rows.Add(drHdr1);
            dtReport.Rows.Add(drHdr2);

            #endregion

            #region value
            dicRowColor.Clear();
            ArrayList arroll = new ArrayList();
            bool rowincr = false;
            DataView dvstud = new DataView();
            DataView dvstaf = new DataView();
            DataView dvven = new DataView();
            DataView dvothr = new DataView();
            int height = 0;
            string paymodeval = "";
            string degreecode = "";
            int rollchk = 0;
            int ColCntGrd = 0;
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                bool addOk = false;
                string transdt = Convert.ToString(ds.Tables[0].Rows[i]["TransDate"]);
                string transcode = Convert.ToString(ds.Tables[0].Rows[i]["TransCode"]);
                string memtype = Convert.ToString(ds.Tables[0].Rows[i]["memtype"]);
                string appno = Convert.ToString(ds.Tables[0].Rows[i]["app_no"]);
                string Feecategory = Convert.ToString(ds.Tables[0].Rows[i]["feecategory"]);
                string payMode = Convert.ToString(ds.Tables[0].Rows[i]["paymodeval"]);
                string head = "";

                if (rbacrhed.Checked == true)
                    head = " and HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "'";
                else
                    head = " and LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                if (memtype == "1")
                {
                    #region student

                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        ds.Tables[1].DefaultView.RowFilter = "TransCode='" + Convert.ToString(transcode) + "' and app_no='" + appno + "' and memtype='" + memtype + "' " + head + " and Feecategory='" + Feecategory + "' and payModeval='" + payMode + "' ";
                        dvstud = ds.Tables[1].DefaultView;
                        if (dvstud.Count > 0 && dvstud != null)
                        {

                            addOk = true;
                            rowincr = true;
                            height += 25;
                            if (!arroll.Contains(transcode))
                            {
                                arroll.Add(transcode);
                                rollchk++;
                            }
                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = Convert.ToString(rollchk);
                            drowGrd[1] = Convert.ToString(dvstud[0]["TransDate"]);
                            drowGrd[2] = Convert.ToString(dvstud[0]["TransCode"]);
                            drowGrd[3] = Convert.ToString(dvstud[0]["Stud_Name"]);
                            drowGrd[4] = Convert.ToString(dvstud[0]["Roll_No"]);
                            drowGrd[5] = Convert.ToString(dvstud[0]["Reg_No"]);
                            drowGrd[6] = Convert.ToString(dvstud[0]["roll_admit"]);
                            degreecode = Convert.ToString(dvstud[0]["Degree_code"]);
                            string Acrname = "";
                            string degreename = "";
                            DataView dnew = new DataView();
                            if (ds.Tables[6].Rows.Count > 0)
                            {
                                ds.Tables[6].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(degreecode) + "' ";
                                dnew = ds.Tables[6].DefaultView;
                                if (dnew.Count > 0)
                                {
                                    Acrname = Convert.ToString(dnew[0]["dept_acronym"]);
                                    degreename = Convert.ToString(dnew[0]["degreename"]);

                                }
                            }
                            if (deptacr == true)
                                drowGrd[7] = Acrname;
                            else
                                drowGrd[7] = degreename;

                            //semester
                            string TextName = "";
                            if (ds.Tables[9].Rows.Count > 0)
                            {
                                ds.Tables[9].DefaultView.RowFilter = "TextCode='" + Convert.ToString(dvstud[0]["feecategory"]) + "'";
                                Dview = ds.Tables[9].DefaultView;
                                if (Dview.Count > 0)
                                {
                                    TextName = Convert.ToString(Dview[0]["TextVal"]);
                                }
                            }
                            drowGrd[8] = TextName;
                            drowGrd[9] = Convert.ToString(dvstud[0]["Narration"]);
                            drowGrd[10] = Convert.ToString(dvstud[0]["paymode"]);

                            paymodeval = Convert.ToString(dvstud[0]["paymodeval"]);
                            if (paymodeval == "3" || paymodeval == "2" || paymodeval == "6")
                            {
                                drowGrd[11] = Convert.ToString(dvstud[0]["DDNo"]);
                                string bkname = string.Empty;
                                if (paymodeval != "6")
                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='BName' and  TextCode='" + Convert.ToString(dvstud[0]["DDBankCode"]) + "'");
                                else
                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='CardT' and  TextCode='" + Convert.ToString(dvstud[0]["DDBankCode"]) + "'");
                                drowGrd[12] = bkname;
                            }
                            else
                            {
                                drowGrd[11] = "-";
                                drowGrd[12] = "-";
                            }

                        }
                    }
                    #endregion
                }
                else if (memtype == "2")
                {
                    #region staff

                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        ds.Tables[2].DefaultView.RowFilter = "TransCode='" + Convert.ToString(transcode) + "' and app_no='" + appno + "' and memtype='" + memtype + "' " + head + " and payModeval='" + payMode + "'";
                        dvstaf = ds.Tables[2].DefaultView;
                        if (dvstaf.Count > 0 && dvstaf != null)
                        {
                            addOk = true;
                            rowincr = true;
                            height += 25;
                            rollchk++;
                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = Convert.ToString(rollchk);
                            drowGrd[1] = Convert.ToString(dvstaf[0]["TransDate"]);
                            drowGrd[2] = Convert.ToString(dvstaf[0]["TransCode"]);
                            drowGrd[3] = Convert.ToString(dvstaf[0]["staff_name"]);
                            drowGrd[4] = Convert.ToString(dvstaf[0]["staff_code"]);
                            drowGrd[5] = Convert.ToString(dvstaf[0]["staff_code"]);
                            drowGrd[6] = Convert.ToString(dvstaf[0]["staff_code"]);
                            drowGrd[7] = Convert.ToString(dvstaf[0]["dept_name"]);
                            drowGrd[8] = "-";
                            drowGrd[9] = Convert.ToString(dvstaf[0]["Narration"]);
                            drowGrd[10] = Convert.ToString(dvstaf[0]["paymode"]);

                            paymodeval = Convert.ToString(dvstaf[0]["paymodeval"]);
                            if (paymodeval == "3" || paymodeval == "2" || paymodeval == "6")
                            {
                                drowGrd[11] = Convert.ToString(dvstaf[0]["DDNo"]);
                                string bkname = string.Empty;
                                if (paymodeval != "6")
                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='BName' and  TextCode='" + Convert.ToString(dvstaf[0]["DDBankCode"]) + "'");
                                else
                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='CardT' and  TextCode='" + Convert.ToString(dvstaf[0]["DDBankCode"]) + "'");
                                drowGrd[12] = bkname;
                            }
                            else
                            {
                                drowGrd[11] = "-";
                                drowGrd[12] = "-";
                            }
                        }
                    }
                    #endregion
                }
                else if (memtype == "3")
                {
                    #region vendor

                    if (ds.Tables[3].Rows.Count > 0)
                    {
                        ds.Tables[3].DefaultView.RowFilter = "TransCode='" + Convert.ToString(transcode) + "' and app_no='" + appno + "' and memtype='" + memtype + "' " + head + " and payModeval='" + payMode + "'";
                        dvven = ds.Tables[3].DefaultView;
                        if (dvven.Count > 0 && dvven != null)
                        {
                            addOk = true;
                            rowincr = true;
                            height += 25;
                            drowGrd[0] = Convert.ToString(rollchk);
                            drowGrd[1] = Convert.ToString(dvven[0]["TransDate"]);
                            drowGrd[2] = Convert.ToString(dvven[0]["TransCode"]);
                            drowGrd[3] = Convert.ToString(dvven[0]["VenContactName"]);
                            drowGrd[4] = Convert.ToString(dvven[0]["VendorCode"]);
                            drowGrd[5] = Convert.ToString(dvven[0]["VendorCode"]);
                            drowGrd[6] = Convert.ToString(dvven[0]["VendorCode"]);
                            drowGrd[7] = Convert.ToString("-");
                            drowGrd[8] = Convert.ToString("-");
                            drowGrd[9] = Convert.ToString(dvven[0]["Narration"]);
                            drowGrd[10] = Convert.ToString(dvven[0]["paymode"]);

                            paymodeval = Convert.ToString(dvven[0]["paymodeval"]);
                            if (paymodeval == "3" || paymodeval == "2" || paymodeval == "6")
                            {
                                drowGrd[11] = Convert.ToString(dvven[0]["DDNo"]);
                                string bkname = string.Empty;
                                if (paymodeval != "6")
                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='BName' and  TextCode='" + Convert.ToString(dvven[0]["DDBankCode"]) + "'");
                                else
                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='CardT' and  TextCode='" + Convert.ToString(dvven[0]["DDBankCode"]) + "'");
                                drowGrd[12] = bkname;
                            }
                            else
                            {
                                drowGrd[11] = "-";
                                drowGrd[12] = "-";
                            }
                        }
                    }
                    #endregion
                }
                else if (memtype == "4")
                {
                    #region other

                    if (ds.Tables[4].Rows.Count > 0)
                    {
                        ds.Tables[4].DefaultView.RowFilter = "TransCode='" + Convert.ToString(transcode) + "' and app_no='" + appno + "' and memtype='" + memtype + "' " + head + " and payModeval='" + payMode + "'";
                        dvothr = ds.Tables[4].DefaultView;
                        if (dvothr.Count > 0 && dvothr != null)
                        {
                            addOk = true;
                            rowincr = true;
                            height += 25;
                            drowGrd[0] = Convert.ToString(rollchk);
                            drowGrd[1] = Convert.ToString(dvothr[0]["TransDate"]);
                            drowGrd[2] = Convert.ToString(dvothr[0]["TransCode"]);
                            drowGrd[3] = Convert.ToString(dvothr[0]["vendorName"]);
                            drowGrd[4] = Convert.ToString(dvothr[0]["VendorCode"]);
                            drowGrd[5] = Convert.ToString(dvothr[0]["VendorCode"]);
                            drowGrd[6] = Convert.ToString(dvothr[0]["VendorCode"]);
                            drowGrd[7] = Convert.ToString("-");
                            drowGrd[8] = Convert.ToString("-");
                            drowGrd[9] = Convert.ToString(dvothr[0]["Narration"]);
                            drowGrd[10] = Convert.ToString(dvothr[0]["paymode"]);
                            paymodeval = Convert.ToString(dvothr[0]["paymodeval"]);
                            if (paymodeval == "3" || paymodeval == "2" || paymodeval == "6")
                            {
                                drowGrd[11] = Convert.ToString(dvothr[0]["DDNo"]);
                                string bkname = string.Empty;
                                if (paymodeval != "6")
                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='BName' and  TextCode='" + Convert.ToString(dvothr[0]["DDBankCode"]) + "'");
                                else
                                    bkname = d2.GetFunction("select textval from textvaltable where TextCriteria='CardT' and  TextCode='" + Convert.ToString(dvothr[0]["DDBankCode"]) + "'");
                                drowGrd[12] = bkname;
                            }
                            else
                            {
                                drowGrd[11] = "-";
                                drowGrd[12] = "-";
                            }
                        }
                    }
                    #endregion
                }
                if (!addOk)
                {
                    continue;
                }
                //header name
                if (paymodeval != "")
                {
                    DataView dvhed = new DataView();
                    string headerName = "";
                    if (rbacrhed.Checked == true)
                    {
                        if (ds.Tables[8].Rows.Count > 0)
                        {
                            ds.Tables[8].DefaultView.RowFilter = "HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' ";
                            dvhed = ds.Tables[8].DefaultView;
                            if (dvhed.Count > 0)
                            {
                                headerName = Convert.ToString(dvhed[0]["HeaderName"]);
                            }
                        }
                    }
                    else
                    {
                        if (ds.Tables[8].Rows.Count > 0)
                        {
                            ds.Tables[8].DefaultView.RowFilter = "LedgerPK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "' ";
                            dvhed = ds.Tables[8].DefaultView;
                            if (dvhed.Count > 0)
                            {
                                headerName = Convert.ToString(dvhed[0]["LedgerName"]);
                            }
                        }
                    }
                    drowGrd[13] = headerName;

                    double totamount = 0;
                    double fnlamount = 0;

                    if (ds.Tables[5].Rows.Count > 0)
                    {
                        if (memtype == "1")
                        {
                            if (rbacrhed.Checked == true)
                            {
                                ds.Tables[5].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and PayMode='" + Convert.ToString(Convert.ToInt32(paymodeval)) + "' and TransCode='" + Convert.ToString(transcode) + "' and memtype='" + memtype + "' and HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' and feecategory ='" + Feecategory + "'";
                            }
                            else
                            {
                                ds.Tables[5].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and PayMode='" + Convert.ToString(Convert.ToInt32(paymodeval)) + "' and TransCode='" + Convert.ToString(transcode) + "' and memtype='" + memtype + "' and LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "' and feecategory ='" + Feecategory + "'";
                            }
                        }
                        else
                        {
                            if (rbacrhed.Checked == true)
                            {
                                ds.Tables[5].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and PayMode='" + Convert.ToString(Convert.ToInt32(paymodeval)) + "' and TransCode='" + Convert.ToString(transcode) + "' and memtype='" + memtype + "' and HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' ";
                            }
                            else
                            {
                                ds.Tables[5].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and PayMode='" + Convert.ToString(Convert.ToInt32(paymodeval)) + "' and TransCode='" + Convert.ToString(transcode) + "' and memtype='" + memtype + "' and LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "' ";
                            }
                        }
                        dv = ds.Tables[5].DefaultView;

                        int index = Convert.ToInt32(newhash[Convert.ToString(paymodeval)]);
                        if (dv.Count > 0)
                        {
                            //DataTable dt = new DataTable();
                            //dt = dv.ToTable();
                            //int val = Convert.ToInt32(dt.Compute("Sum(total)", ""));
                            double.TryParse(Convert.ToString(dv[0]["total"]), out totamount);
                            fnlamount = fnlamount + totamount;
                            // double.TryParse(Convert.ToString(dv[0]["total"]), out totamount);
                            //fnlamount = fnlamount + totamount;
                        }
                        //total
                        drowGrd[index] = Convert.ToString(totamount);
                        if (!grandtotal.ContainsKey(index))
                            grandtotal.Add(index, Convert.ToString(totamount));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[index]), out amount);
                            amount += totamount;
                            grandtotal.Remove(index);
                            grandtotal.Add(index, Convert.ToString(amount));
                        }
                        if (check != 0)
                        {
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 2] = Convert.ToString(fnlamount);
                        }
                        if (!grandtotal.ContainsKey(ColCntGrd - 2))
                            grandtotal.Add(ColCntGrd - 2, Convert.ToString(fnlamount));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                            amount += fnlamount;
                            grandtotal.Remove(ColCntGrd - 2);
                            grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                        }
                    }
                }
                //excess amount
                DataView dvex = new DataView();
                double exAmt = 0;
                if (rowincr == true)
                {
                    if (ds.Tables[7].Rows.Count > 0)
                    {
                        ds.Tables[7].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "' and receiptno='" + Convert.ToString(ds.Tables[0].Rows[i]["Transcode"]) + "'";
                        dvex = ds.Tables[7].DefaultView;
                        if (dvex.Count > 0)
                            double.TryParse(Convert.ToString(dvex[0]["examt"]), out exAmt);

                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 1] = Convert.ToString(exAmt);
                        if (!grandtotal.ContainsKey(ColCntGrd - 1))
                            grandtotal.Add(ColCntGrd - 1, Convert.ToString(exAmt));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 1]), out amount);
                            amount += exAmt;
                            grandtotal.Remove(ColCntGrd - 1);
                            grandtotal.Add(ColCntGrd - 1, Convert.ToString(amount));
                        }
                    }
                    else
                    {
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 1] = "-";
                    }
                }
                dtReport.Rows.Add(drowGrd);
            }

            #endregion

            #region grandtot
            drowGrd = dtReport.NewRow();
            drowGrd[0] = "Grand Total";
            dicRowColor.Add(dtReport.Rows.Count, "Grand Total");
            double grandvalue = 0;
            for (int j = 12; j < dtReport.Columns.Count; j++)
            {
                double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                drowGrd[j] = Convert.ToString(grandvalue);
            }
            dtReport.Rows.Add(drowGrd);

            // }
            #endregion

            divdaily.Visible = true;
            GrdDailyDetail.DataSource = dtReport;
            GrdDailyDetail.DataBind();
            GrdDailyDetail.Visible = true;

            GridViewRow row = GrdDailyDetail.Rows[0];
            GridViewRow previousRow = GrdDailyDetail.Rows[1];

            for (int i = 0; i < dtReport.Columns.Count; i++)
            {
                if (row.Cells[i].Text == previousRow.Cells[i].Text)
                {
                    row.Cells[i].RowSpan = 2;
                    previousRow.Cells[i].Visible = false;
                }
            }
            //ColumnSpan

            for (int cell = GrdDailyDetail.Rows[0].Cells.Count - 1; cell > 0; cell--)
            {
                TableCell colum = GrdDailyDetail.Rows[0].Cells[cell];
                TableCell previouscol = GrdDailyDetail.Rows[0].Cells[cell - 1];
                if (colum.Text == previouscol.Text)
                {
                    if (previouscol.ColumnSpan == 0)
                    {
                        if (colum.ColumnSpan == 0)
                        {
                            previouscol.ColumnSpan += 2;
                        }
                        else
                        {
                            previouscol.ColumnSpan += colum.ColumnSpan + 1;
                        }
                        colum.Visible = false;
                    }
                }
            }

            foreach (KeyValuePair<int, string> dr in dicRowColor)
            {
                int g = dr.Key;
                string DicValue = dr.Value;
                if (DicValue == "Grand Total")
                {
                    GrdDailyDetail.Rows[g].BackColor = ColorTranslator.FromHtml("#4870BE");
                }
            }

            if (rbacrhed.Checked == true)
                lbldlydetail.Text = "Student-->Daily Detail(HeaderWise)";
            else
                lbldlydetail.Text = "Student-->Daily Detail(LedgerWise)";

            lbldlydetail.Visible = true;
            divcommon.Visible = false;
            divdailydeail.Visible = true;
            pnlhead.Visible = true;
            pnlcolhed.Visible = true;            
            rptprint.Visible = true;
            lblvalidation1.Text = "";
            lblvalidation1.Visible = false;
            MergeRows(GrdDailyDetail);
        }
        catch { }
    }

    public static void MergeRows(GridView GrdReport)
    {
        string Date = GrdReport.HeaderRow.Cells[1].Text;

        for (int rowIndex = GrdReport.Rows.Count - 2; rowIndex >= 0; rowIndex--)
        {
            GridViewRow row = GrdReport.Rows[rowIndex];
            GridViewRow previousRow = GrdReport.Rows[rowIndex + 1];

            for (int i = 0; i < row.Cells.Count; i++)
            {
                if (GrdReport.HeaderRow.Cells[i].Text.ToLower() == Date.ToLower())
                {
                    if (row.Cells[i].Text == previousRow.Cells[i].Text)
                    {
                        row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                                               previousRow.Cells[i].RowSpan + 1;
                        previousRow.Cells[i].Visible = false;
                    }
                }
            }
        }
    }

    #endregion

    #region others method

    public void othersvalues()
    {
        try
        {
            ArrayList arrColOthersNames = new ArrayList();
            ArrayList arrColOthersNames2 = new ArrayList();
            int ColCntGrd = 0;
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    double bal = 0;
                    DataView Dview = new DataView();
                    if (rbstaff.Checked == true)
                    {
                        #region staff
                        lblhed.Text = "Others-->Staff";

                        #region design

                        loadcolumns();
                        DataView dv = new DataView();
                        int check = 0;
                        arrColOthersNames.Add("S.No");
                        arrColOthersNames2.Add("S.No");
                        dtReport.Columns.Add("S.No");
                        arrColOthersNames.Add("Staff Code");
                        arrColOthersNames2.Add("Staff Code");
                        dtReport.Columns.Add("Staff Code");
                        arrColOthersNames.Add("Staff Name");
                        arrColOthersNames2.Add("Staff Name");
                        dtReport.Columns.Add("Staff Name");
                        arrColOthersNames.Add("Department");
                        arrColOthersNames2.Add("Department");
                        dtReport.Columns.Add("Department");
                        arrColOthersNames.Add("Allot");
                        arrColOthersNames2.Add("Allot");
                        dtReport.Columns.Add("Allot");
                        arrColOthersNames.Add("Concession");
                        arrColOthersNames2.Add("Concession");
                        dtReport.Columns.Add("Concession");
                        arrColOthersNames.Add("Scholarship");
                        arrColOthersNames2.Add("Scholarship");
                        dtReport.Columns.Add("Scholarship");
                        arrColOthersNames.Add("Total");
                        arrColOthersNames2.Add("Total");
                        dtReport.Columns.Add("Total");

                        Hashtable newhash = new Hashtable();

                        if (chkl_paid.Items.Count > 0)
                        {
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    arrColOthersNames.Add("Paid");
                                    arrColOthersNames2.Add(chkl_paid.Items[s].Text);
                                    dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                    newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                }
                            }
                            if (check != 0)
                            {
                                arrColOthersNames.Add("Paid");
                                arrColOthersNames2.Add("Total Paid");
                                dtReport.Columns.Add("Total Paid");
                            }
                        }
                        if (check == 0)
                        {
                            arrColOthersNames.Add("Paid");
                            arrColOthersNames2.Add("Paid");
                            dtReport.Columns.Add("Paid");
                        }
                        arrColOthersNames.Add("Balance");
                        arrColOthersNames2.Add("Balance");
                        dtReport.Columns.Add("Balance");
                        arrColOthersNames.Add("Refund Amount");
                        arrColOthersNames2.Add("Refund Amount");
                        dtReport.Columns.Add("Refund Amount");
                        arrColOthersNames.Add("Excess Amount");
                        arrColOthersNames2.Add("Excess Amount");
                        dtReport.Columns.Add("Excess Amount");
                        arrColOthersNames.Add("Fine Amount");
                        arrColOthersNames2.Add("Fine Amount");
                        dtReport.Columns.Add("Fine Amount");
                        DataRow drHdr1 = dtReport.NewRow();
                        DataRow drHdr2 = dtReport.NewRow();
                        for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                        {
                            drHdr1[grCol] = arrColOthersNames[grCol];
                            drHdr2[grCol] = arrColOthersNames2[grCol];
                        }
                        dtReport.Rows.Add(drHdr1);
                        dtReport.Rows.Add(drHdr2);

                        #endregion

                        double totamount = 0;
                        double fnlamount = 0;
                        double paidamt = 0;
                        double allotamt = 0;
                        double consamt = 0;
                        double govt = 0;
                        double tot_amount = 0;
                        double totalvalue = 0;

                        #region values

                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = Convert.ToString(i + 1);
                            drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["staff_code"].ToString());
                            drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["staff_name"].ToString());
                            string Degreename = "";
                            if (ds.Tables[3].Rows.Count > 0)
                            {
                                string deptcode = Convert.ToString(ds.Tables[0].Rows[i]["dept_code"]);
                                if (deptcode != "")
                                {
                                    ds.Tables[3].DefaultView.RowFilter = "dept_code='" + Convert.ToString(ds.Tables[0].Rows[i]["dept_code"]) + "'";
                                    Dview = ds.Tables[3].DefaultView;
                                    if (Dview.Count > 0)
                                    {
                                        Degreename = Convert.ToString(Dview[0]["degreename"]);
                                    }
                                }
                            }
                            drowGrd[3] = Convert.ToString(Degreename);
                            //allot
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                            drowGrd[4] = Convert.ToString(allotamt);
                            if (!grandtotal.ContainsKey(4))
                                grandtotal.Add(4, Convert.ToString(allotamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                amount += allotamt;
                                grandtotal.Remove(4);
                                grandtotal.Add(4, Convert.ToString(amount));
                            }
                            //consession
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                            drowGrd[5] = Convert.ToString(consamt);
                            if (!grandtotal.ContainsKey(5))
                                grandtotal.Add(5, Convert.ToString(consamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                amount += consamt;
                                grandtotal.Remove(5);
                                grandtotal.Add(5, Convert.ToString(amount));
                            }
                            //government
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                            drowGrd[6] = Convert.ToString(govt);
                            if (!grandtotal.ContainsKey(6))
                                grandtotal.Add(6, Convert.ToString(govt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                amount += govt;
                                grandtotal.Remove(6);
                                grandtotal.Add(6, Convert.ToString(amount));
                            }
                            //total
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                            drowGrd[7] = Convert.ToString(totalvalue);
                            if (!grandtotal.ContainsKey(7))
                                grandtotal.Add(7, Convert.ToString(totalvalue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[7]), out amount);
                                amount += totalvalue;
                                grandtotal.Remove(7);
                                grandtotal.Add(7, Convert.ToString(amount));
                            }
                            double paidvalue = 0;
                            if (check == 0)
                            {
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                                fnlamount = Convert.ToDouble(paidvalue);
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                    amount += paidvalue;
                                    grandtotal.Remove(ColCntGrd - 5);
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                }
                            }
                            double refund = 0;
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                            if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                amount += refund;
                                grandtotal.Remove(ColCntGrd - 3);
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                            }

                            DataView dvex = new DataView();
                            if (ds.Tables[2].Rows.Count > 0)
                            {
                                ds.Tables[2].DefaultView.RowFilter = "appl_id='" + Convert.ToString(ds.Tables[0].Rows[i]["appl_id"]) + "'";
                                dvex = ds.Tables[2].DefaultView;
                                if (dvex.Count > 0 && dvex != null)
                                {
                                    for (int k = 0; k < dvex.Count; k++)
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                        tot_amount += amount;
                                    }
                                }
                            }
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                amount += tot_amount;
                                grandtotal.Remove(ColCntGrd - 2);
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                            }
                            tot_amount = 0;

                            double mode = 0;
                            if (ds.Tables[1].Rows.Count > 0)
                            {
                                for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                {
                                    if (chkl_paid.Items[pay].Selected == true)
                                    {
                                        ds.Tables[1].DefaultView.RowFilter = "appl_id='" + Convert.ToString(ds.Tables[0].Rows[i]["appl_id"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                        //and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'
                                        dv = ds.Tables[1].DefaultView;
                                        int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                        for (int k = 0; k < dv.Count; k++)
                                        {
                                            double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                            fnlamount = fnlamount + totamount;
                                            paidamt = paidamt + totamount;
                                        }
                                        drowGrd[colnew] = Convert.ToString(paidamt);
                                        if (!grandtotal.ContainsKey(colnew))
                                            grandtotal.Add(colnew, Convert.ToString(paidamt));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                            amount += paidamt;
                                            grandtotal.Remove(colnew);
                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                        }
                                        paidamt = 0;
                                    }
                                }
                                if (check != 0)
                                {
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                        amount += fnlamount;
                                        grandtotal.Remove(ColCntGrd - 5);
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                    }
                                }
                                if (totalvalue != 0)
                                {
                                    bal = totalvalue - fnlamount;
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                        amount += bal;
                                        grandtotal.Remove(ColCntGrd - 4);
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                    }
                                    fnlamount = 0;
                                    if (bal == 0)
                                        dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                    else
                                        dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                }
                            }
                            dtReport.Rows.Add(drowGrd);
                        }

                        #endregion

                        #region grandtot

                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = "Grand Total";
                        double grandvalue = 0;
                        for (int j = 5; j < dtReport.Columns.Count; j++)
                        {
                            double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                            drowGrd[j] = Convert.ToString(grandvalue);
                        }
                        dtReport.Rows.Add(drowGrd);

                        #endregion

                        #endregion
                    }
                    else if (rbvendor.Checked == true)
                    {
                        #region vendor
                        lblhed.Text = "Others-->Vendor";

                        #region design
                        loadcolumns();
                        DataView dv = new DataView();
                        int check = 0;
                        arrColOthersNames.Add("S.No");
                        arrColOthersNames2.Add("S.No");
                        dtReport.Columns.Add("S.No");
                        arrColOthersNames.Add("Vendor Code");
                        arrColOthersNames2.Add("Vendor Code");
                        dtReport.Columns.Add("Vendor Code");
                        arrColOthersNames.Add("Vendor Name");
                        arrColOthersNames2.Add("Vendor Name");
                        dtReport.Columns.Add("Vendor Name");
                        arrColOthersNames.Add("Allot");
                        arrColOthersNames2.Add("Allot");
                        dtReport.Columns.Add("Allot");
                        arrColOthersNames.Add("Concession");
                        arrColOthersNames2.Add("Concession");
                        dtReport.Columns.Add("Concession");
                        arrColOthersNames.Add("Scholarship");
                        arrColOthersNames2.Add("Scholarship");
                        dtReport.Columns.Add("Scholarship");
                        arrColOthersNames.Add("Total");
                        arrColOthersNames2.Add("Total");
                        dtReport.Columns.Add("Total");

                        Hashtable newhash = new Hashtable();

                        if (chkl_paid.Items.Count > 0)
                        {
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    arrColOthersNames.Add("Paid");
                                    arrColOthersNames2.Add(chkl_paid.Items[s].Text);
                                    dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                    newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                }
                            }
                            if (check != 0)
                            {
                                arrColOthersNames.Add("Paid");
                                arrColOthersNames2.Add("Total Paid");
                                dtReport.Columns.Add("Total Paid");
                            }
                        }
                        if (check == 0)
                        {
                            arrColOthersNames.Add("Paid");
                            arrColOthersNames2.Add("Paid");
                            dtReport.Columns.Add("Paid");
                        }
                        arrColOthersNames.Add("Balance");
                        arrColOthersNames2.Add("Balance");
                        dtReport.Columns.Add("Balance");
                        arrColOthersNames.Add("Refund Amount");
                        arrColOthersNames2.Add("Refund Amount");
                        dtReport.Columns.Add("Refund Amount");
                        arrColOthersNames.Add("Excess Amount");
                        arrColOthersNames2.Add("Excess Amount");
                        dtReport.Columns.Add("Excess Amount");
                        arrColOthersNames.Add("Fine Amount");
                        arrColOthersNames2.Add("Fine Amount");
                        dtReport.Columns.Add("Fine Amount");
                        DataRow drHdr1 = dtReport.NewRow();
                        DataRow drHdr2 = dtReport.NewRow();
                        for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                        {
                            drHdr1[grCol] = arrColOthersNames[grCol];
                            drHdr2[grCol] = arrColOthersNames2[grCol];
                        }
                        dtReport.Rows.Add(drHdr1);
                        dtReport.Rows.Add(drHdr2);

                        #endregion

                        #region value
                        double totamount = 0;
                        double fnlamount = 0;
                        double paidamt = 0;
                        double allotamt = 0;
                        double consamt = 0;
                        double govt = 0;
                        double tot_amount = 0;
                        double totalvalue = 0;
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = Convert.ToString(i + 1);

                            drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["VendorCode"].ToString());
                            drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["VendorName"].ToString());
                            //allot
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                            drowGrd[3] = Convert.ToString(allotamt);
                            if (!grandtotal.ContainsKey(3))
                                grandtotal.Add(3, Convert.ToString(allotamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[3]), out amount);
                                amount += allotamt;
                                grandtotal.Remove(3);
                                grandtotal.Add(3, Convert.ToString(amount));
                            }
                            //consession
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                            drowGrd[4] = Convert.ToString(consamt);
                            if (!grandtotal.ContainsKey(4))
                                grandtotal.Add(4, Convert.ToString(consamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                amount += consamt;
                                grandtotal.Remove(4);
                                grandtotal.Add(4, Convert.ToString(amount));
                            }
                            //government
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                            drowGrd[5] = Convert.ToString(govt);
                            if (!grandtotal.ContainsKey(5))
                                grandtotal.Add(5, Convert.ToString(govt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                amount += govt;
                                grandtotal.Remove(5);
                                grandtotal.Add(5, Convert.ToString(amount));
                            }
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                            drowGrd[6] = Convert.ToString(totalvalue);
                            if (!grandtotal.ContainsKey(6))
                                grandtotal.Add(6, Convert.ToString(totalvalue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                amount += totalvalue;
                                grandtotal.Remove(6);
                                grandtotal.Add(6, Convert.ToString(amount));
                            }
                            double paidvalue = 0;
                            if (check == 0)
                            {
                                if (ds.Tables[0].Rows.Count > 0)
                                {
                                    ds.Tables[0].DefaultView.RowFilter = " VendorCode='" + Convert.ToString(ds.Tables[0].Rows[i]["VendorCode"]) + "'";
                                    DataView dsnew = new DataView();
                                    dsnew = ds.Tables[0].DefaultView;
                                    if (dsnew.Count > 0)
                                    {
                                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                                        fnlamount = paidvalue;
                                    }
                                }
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                    amount += paidvalue;
                                    grandtotal.Remove(ColCntGrd - 5);
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                }
                            }
                            double refund = 0;
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                            if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                amount += refund;
                                grandtotal.Remove(ColCntGrd - 3);
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                            }
                            DataView dvex = new DataView();
                            if (ds.Tables[2].Rows.Count > 0)
                            {
                                ds.Tables[2].DefaultView.RowFilter = "VendorCode='" + Convert.ToString(ds.Tables[0].Rows[i]["VendorCode"]) + "'";
                                dvex = ds.Tables[2].DefaultView;
                                if (dvex.Count > 0 && dvex != null)
                                {
                                    for (int k = 0; k < dvex.Count; k++)
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                        tot_amount += amount;
                                    }
                                }
                            }
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                amount += tot_amount;
                                grandtotal.Remove(ColCntGrd - 2);
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                            }
                            tot_amount = 0;

                            double mode = 0;
                            if (ds.Tables[1].Rows.Count > 0)
                            {
                                for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                {
                                    if (chkl_paid.Items[pay].Selected == true)
                                    {
                                        ds.Tables[1].DefaultView.RowFilter = "VendorCode='" + Convert.ToString(ds.Tables[0].Rows[i]["VendorCode"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                        //and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'
                                        dv = ds.Tables[1].DefaultView;
                                        int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                        for (int k = 0; k < dv.Count; k++)
                                        {
                                            double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                            fnlamount = fnlamount + totamount;
                                            paidamt = paidamt + totamount;
                                        }
                                        drowGrd[colnew] = Convert.ToString(paidamt);
                                        if (!grandtotal.ContainsKey(colnew))
                                            grandtotal.Add(colnew, Convert.ToString(paidamt));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                            amount += paidamt;
                                            grandtotal.Remove(colnew);
                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                        }
                                        paidamt = 0;
                                    }
                                }
                                if (check != 0)
                                {
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                        amount += fnlamount;
                                        grandtotal.Remove(ColCntGrd - 5);
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                    }
                                }
                                if (totalvalue != 0)
                                {
                                    bal = totalvalue - totalvalue;
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                        amount += bal;
                                        grandtotal.Remove(ColCntGrd - 4);
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                    }
                                    fnlamount = 0;
                                    if (bal == 0)
                                        dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                    else
                                        dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                }
                            }
                            dtReport.Rows.Add(drowGrd);
                        }
                        #endregion

                        #region grandtot

                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = "Grand Total";
                        double grandvalue = 0;
                        for (int j = 4; j < dtReport.Columns.Count; j++)
                        {
                            double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                            drowGrd[j] = Convert.ToString(grandvalue);
                        }
                        dtReport.Rows.Add(drowGrd);

                        #endregion

                        #endregion
                    }
                    else if (rbothers.Checked == true)
                    {
                        #region others
                        lblhed.Text = "Others-->Others";

                        #region design
                        loadcolumns();
                        DataView dv = new DataView();
                        int check = 0;
                        arrColOthersNames.Add("S.No");
                        arrColOthersNames2.Add("S.No");
                        dtReport.Columns.Add("S.No");
                        arrColOthersNames.Add("Vendor Code");
                        arrColOthersNames2.Add("Vendor Code");
                        dtReport.Columns.Add("Vendor Code");
                        arrColOthersNames.Add("Vendor Name");
                        arrColOthersNames2.Add("Vendor Name");
                        dtReport.Columns.Add("Vendor Name");
                        arrColOthersNames.Add("Allot");
                        arrColOthersNames2.Add("Allot");
                        dtReport.Columns.Add("Allot");
                        arrColOthersNames.Add("Concession");
                        arrColOthersNames2.Add("Concession");
                        dtReport.Columns.Add("Concession");
                        arrColOthersNames.Add("Scholarship");
                        arrColOthersNames2.Add("Scholarship");
                        dtReport.Columns.Add("Scholarship");
                        arrColOthersNames.Add("Total");
                        arrColOthersNames2.Add("Total");
                        dtReport.Columns.Add("Total");

                        Hashtable newhash = new Hashtable();

                        if (chkl_paid.Items.Count > 0)
                        {
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    arrColOthersNames.Add("Paid");
                                    arrColOthersNames2.Add(chkl_paid.Items[s].Text);
                                    dtReport.Columns.Add(chkl_paid.Items[s].Text);
                                    newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                                }
                            }
                            if (check != 0)
                            {
                                arrColOthersNames.Add("Paid");
                                arrColOthersNames2.Add("Total Paid");
                                dtReport.Columns.Add("Total Paid");
                            }
                        }
                        if (check == 0)
                        {
                            arrColOthersNames.Add("Paid");
                            arrColOthersNames2.Add("Paid");
                            dtReport.Columns.Add("Paid");
                        }
                        arrColOthersNames.Add("Balance");
                        arrColOthersNames2.Add("Balance");
                        dtReport.Columns.Add("Balance");
                        arrColOthersNames.Add("Refund Amount");
                        arrColOthersNames2.Add("Refund Amount");
                        dtReport.Columns.Add("Refund Amount");
                        arrColOthersNames.Add("Excess Amount");
                        arrColOthersNames2.Add("Excess Amount");
                        dtReport.Columns.Add("Excess Amount");
                        arrColOthersNames.Add("Fine Amount");
                        arrColOthersNames2.Add("Fine Amount");
                        dtReport.Columns.Add("Fine Amount");
                        DataRow drHdr1 = dtReport.NewRow();
                        DataRow drHdr2 = dtReport.NewRow();
                        for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                        {
                            drHdr1[grCol] = arrColOthersNames[grCol];
                            drHdr2[grCol] = arrColOthersNames2[grCol];
                        }
                        dtReport.Rows.Add(drHdr1);
                        dtReport.Rows.Add(drHdr2);

                        #endregion

                        #region value

                        double totamount = 0;
                        double fnlamount = 0;
                        double paidamt = 0;
                        double allotamt = 0;
                        double consamt = 0;
                        double govt = 0;
                        double tot_amount = 0;
                        double totalvalue = 0;
                        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                        {
                            drowGrd = dtReport.NewRow();
                            drowGrd[0] = Convert.ToString(i + 1);
                            drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["VendorCode"].ToString());
                            drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["VendorName"].ToString());
                            //allot
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                            drowGrd[3] = Convert.ToString(allotamt);
                            if (!grandtotal.ContainsKey(3))
                                grandtotal.Add(3, Convert.ToString(allotamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[3]), out amount);
                                amount += allotamt;
                                grandtotal.Remove(3);
                                grandtotal.Add(3, Convert.ToString(amount));
                            }
                            //consession
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                            drowGrd[4] = Convert.ToString(consamt);
                            if (!grandtotal.ContainsKey(4))
                                grandtotal.Add(4, Convert.ToString(consamt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[4]), out amount);
                                amount += consamt;
                                grandtotal.Remove(4);
                                grandtotal.Add(4, Convert.ToString(amount));
                            }
                            //government
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                            drowGrd[5] = Convert.ToString(govt);
                            if (!grandtotal.ContainsKey(5))
                                grandtotal.Add(5, Convert.ToString(govt));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                                amount += govt;
                                grandtotal.Remove(5);
                                grandtotal.Add(5, Convert.ToString(amount));
                            }
                            //total
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                            drowGrd[6] = Convert.ToString(totalvalue);
                            if (!grandtotal.ContainsKey(6))
                                grandtotal.Add(6, Convert.ToString(totalvalue));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                                amount += totalvalue;
                                grandtotal.Remove(6);
                                grandtotal.Add(6, Convert.ToString(amount));
                            }
                            //paid value paymode cout=0
                            double paidvalue = 0;
                            if (check == 0)
                            {
                                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                                fnlamount = Convert.ToDouble(paidvalue);
                                ColCntGrd = dtReport.Columns.Count;
                                drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                                if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                    amount += paidvalue;
                                    grandtotal.Remove(ColCntGrd - 5);
                                    grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                }
                            }
                            double refund = 0;
                            double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                            if (!grandtotal.ContainsKey(ColCntGrd - 3))
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                                amount += refund;
                                grandtotal.Remove(ColCntGrd - 3);
                                grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                            }
                            DataView dvex = new DataView();
                            if (ds.Tables[2].Rows.Count > 0)
                            {
                                ds.Tables[2].DefaultView.RowFilter = "VendorCode='" + Convert.ToString(ds.Tables[0].Rows[i]["VendorCode"]) + "'";
                                dvex = ds.Tables[2].DefaultView;
                                if (dvex.Count > 0 && dvex != null)
                                {
                                    for (int k = 0; k < dvex.Count; k++)
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                        tot_amount += amount;
                                    }
                                }
                            }
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 2))
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                                amount += tot_amount;
                                grandtotal.Remove(ColCntGrd - 2);
                                grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                            }
                            tot_amount = 0;

                            double mode = 0;
                            if (ds.Tables[1].Rows.Count > 0)
                            {
                                for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                                {
                                    if (chkl_paid.Items[pay].Selected == true)
                                    {
                                        ds.Tables[1].DefaultView.RowFilter = "VendorCode='" + Convert.ToString(ds.Tables[0].Rows[i]["VendorCode"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                        //and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "'
                                        dv = ds.Tables[1].DefaultView;
                                        int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                        for (int k = 0; k < dv.Count; k++)
                                        {
                                            double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                            fnlamount = fnlamount + totamount;
                                            paidamt = paidamt + totamount;
                                        }
                                        drowGrd[colnew] = Convert.ToString(paidamt);
                                        if (!grandtotal.ContainsKey(colnew))
                                            grandtotal.Add(colnew, Convert.ToString(paidamt));
                                        else
                                        {
                                            double amount = 0;
                                            double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                            amount += paidamt;
                                            grandtotal.Remove(colnew);
                                            grandtotal.Add(colnew, Convert.ToString(amount));
                                        }
                                        paidamt = 0;
                                    }
                                }
                                if (check != 0)
                                {
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                        amount += fnlamount;
                                        grandtotal.Remove(ColCntGrd - 5);
                                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                                    }
                                }
                                if (totalvalue != 0)
                                {
                                    bal = totalvalue - fnlamount;
                                    ColCntGrd = dtReport.Columns.Count;
                                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                                    else
                                    {
                                        double amount = 0;
                                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                        amount += bal;
                                        grandtotal.Remove(ColCntGrd - 4);
                                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                                    }
                                    fnlamount = 0;
                                    if (bal == 0)
                                        dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                                    else
                                        dicRowColor.Add(dtReport.Rows.Count, "Balance");
                                }
                            }
                            dtReport.Rows.Add(drowGrd);
                        }
                        #endregion

                        #region grandtot
                        drowGrd = dtReport.NewRow();
                        drowGrd[0] = "Grand Total";
                        double grandvalue = 0;
                        for (int j = 4; j < dtReport.Columns.Count; j++)
                        {
                            double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                            drowGrd[j] = Convert.ToString(grandvalue);
                        }
                        dtReport.Rows.Add(drowGrd);

                        #endregion

                        #endregion
                    }

                    #region visible
                    grdStudentReport.DataSource = dtReport;
                    grdStudentReport.DataBind();
                    grdStudentReport.Visible = true;

                    GridViewRow row = grdStudentReport.Rows[0];
                    GridViewRow previousRow = grdStudentReport.Rows[1];

                    for (int i = 0; i < dtReport.Columns.Count; i++)
                    {
                        if (row.Cells[i].Text == previousRow.Cells[i].Text)
                        {
                            row.Cells[i].RowSpan = 2;
                            previousRow.Cells[i].Visible = false;
                        }
                    }
                    //ColumnSpan

                    for (int cell = grdStudentReport.Rows[0].Cells.Count - 1; cell > 0; cell--)
                    {
                        TableCell colum = grdStudentReport.Rows[0].Cells[cell];
                        TableCell previouscol = grdStudentReport.Rows[0].Cells[cell - 1];
                        if (colum.Text == previouscol.Text)
                        {
                            if (previouscol.ColumnSpan == 0)
                            {
                                if (colum.ColumnSpan == 0)
                                {
                                    previouscol.ColumnSpan += 2;
                                }
                                else
                                {
                                    previouscol.ColumnSpan += colum.ColumnSpan + 1;
                                }
                                colum.Visible = false;
                            }
                        }
                    }

                    foreach (KeyValuePair<int, string> dr in dicRowColor)
                    {
                        int g = dr.Key;
                        string DicValue = dr.Value;
                        if (DicValue == "NoBalance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                        }
                        if (DicValue == "Balance")
                        {
                            grdStudentReport.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                        }
                    }
                    divcommon.Visible = true;
                    header.Visible = true;
                    div1.Visible = true;
                    divledger.Visible = false;
                    lbl_ledg.Visible = false;
                    lbl_ledg.Text = "";
                    Grdledger.Visible = false;
                    lbl_bat.Visible = false;
                    lbl_bat.Text = "";
                    GrdBatch.Visible = false;
                    lbl_degr.Visible = false;
                    lbl_degr.Text = "";
                    GrdDegree.Visible = false;
                    lbl_dep.Visible = false;
                    lbl_dep.Text = "";
                    GrdDept.Visible = false;
                    lbl_sem.Visible = false; ;
                    lbl_sem.Text = "";
                    GrdSem.Visible = false;
                    rptprint.Visible = true;
                    rb_hori.Checked = true;
                    rbstudhed.Checked = true;
                    // lblhed.Text = "Others-->Staff";
                    lblhed.Visible = true;
                    pheaderfilter.Visible = true;
                    pcolumnorder.Visible = true;
                    divstudcell.Visible = false;
                    lbl_semcell.Text = "";
                    divdept.Visible = false;
                    divdegree.Visible = false;
                    divbatch.Visible = false;
                    header.Attributes.Add("Style", "height:350px; width:950px; overflow:auto;");
                    div1.Attributes.Add("Style", "height:350px; width:950px;overflow:auto; ");
                    #endregion

                }
                else
                {
                    grdStudentReport.Visible = false;
                    div1.Visible = false;
                    rptprint.Visible = false;
                    pheaderfilter.Visible = false;
                    pcolumnorder.Visible = false;
                    lblhed.Text = "";
                    imgdiv2.Visible = true;
                    lbl_alert.Visible = true;
                    lbl_alert.Text = "No Record Found";
                }
            }
        }
        catch { }
    }

    #endregion

    #region total method

    public void totalvalues()
    {
        try
        {
            #region design

            //loadcolumns();
            //DataView dv = new DataView();
            //FpSpread1.Sheets[0].RowCount = 0;
            //FpSpread1.Sheets[0].ColumnCount = 0;
            //FpSpread1.CommandBar.Visible = false;
            //FpSpread1.Sheets[0].AutoPostBack = true;
            //FpSpread1.Sheets[0].ColumnHeader.RowCount = 2;
            //FpSpread1.Sheets[0].RowHeader.Visible = false;
            //FpSpread1.Sheets[0].ColumnCount = 5;
            //FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            //darkstyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
            //darkstyle.ForeColor = Color.White;
            //FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
            //int check = 0;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].ForeColor = ColorTranslator.FromHtml("#000000");
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread1.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;

            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Allot";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].ForeColor = ColorTranslator.FromHtml("#000000");
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread1.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Left;
            //FpSpread1.Sheets[0].Columns[1].Visible = true;

            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Concession";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].ForeColor = ColorTranslator.FromHtml("#000000");
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread1.Sheets[0].Columns[2].HorizontalAlign = HorizontalAlign.Right;
            //FpSpread1.Sheets[0].Columns[2].Visible = true;
            //if (!colord.Contains("1"))
            //{
            //    FpSpread1.Sheets[0].Columns[2].Visible = false;
            //}
            //if (colord.Count == 0)
            //{
            //    FpSpread1.Sheets[0].Columns[2].Visible = true;
            //}
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Scholarship";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 3].ForeColor = ColorTranslator.FromHtml("#000000");
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread1.Sheets[0].Columns[3].HorizontalAlign = HorizontalAlign.Right;
            //FpSpread1.Sheets[0].Columns[3].Visible = true;
            //if (!colord.Contains("2"))
            //{
            //    FpSpread1.Sheets[0].Columns[3].Visible = false;
            //}
            //if (colord.Count == 0)
            //{
            //    FpSpread1.Sheets[0].Columns[3].Visible = true;
            //}
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Scholarship";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 4].ForeColor = ColorTranslator.FromHtml("#000000");
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread1.Sheets[0].Columns[4].HorizontalAlign = HorizontalAlign.Right;
            //FpSpread1.Sheets[0].Columns[4].Visible = true;
            //if (!colord.Contains("3"))
            //{
            //    FpSpread1.Sheets[0].Columns[4].Visible = false;
            //}
            //if (colord.Count == 0)
            //{
            //    FpSpread1.Sheets[0].Columns[4].Visible = true;
            //}
            //FpSpread1.Sheets[0].ColumnCount++;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Total";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].ForeColor = ColorTranslator.FromHtml("#000000");
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //if (!colord.Contains("4"))
            //{
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
            //}
            //if (colord.Count == 0)
            //{
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //}
            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);

            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 0, 2, 1);
            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 1, 2, 1);
            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 2, 2, 1);
            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 3, 2, 1);
            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 4, 2, 1);

            //Hashtable newhash = new Hashtable();

            //if (chkl_paid.Items.Count > 0)
            //{
            //    for (int s = 0; s < chkl_paid.Items.Count; s++)
            //    {
            //        if (chkl_paid.Items[s].Selected == true)
            //        {
            //            check++;
            //            FpSpread1.Sheets[0].ColumnCount++;
            //            newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), FpSpread1.Sheets[0].ColumnCount - 1);
            //            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = Convert.ToString(chkl_paid.Items[s].Text);
            //            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Tag = Convert.ToString(chkl_paid.Items[s].Value);
            //            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].ForeColor = ColorTranslator.FromHtml("#000000");
            //            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
            //            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            //            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            //            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
            //            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
            //            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //            if (!colord.Contains("5"))
            //            {
            //                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
            //            }
            //            if (colord.Count == 0)
            //            {
            //                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //            }

            //        }

            //    }
            //    if (check != 0)
            //    {
            //        FpSpread1.Sheets[0].ColumnCount++;
            //        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Total Paid";
            //        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].ForeColor = ColorTranslator.FromHtml("#000000");
            //        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
            //        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            //        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            //        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
            //        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
            //        if (!colord.Contains("5"))
            //        {
            //            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
            //        }
            //        if (colord.Count == 0)
            //        {
            //            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //        }
            //    }
            //}
            //if (check == 0)
            //{
            //    FpSpread1.Sheets[0].ColumnCount++;
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Paid";
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].ForeColor = ColorTranslator.FromHtml("#000000");
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
            //    FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //    if (!colord.Contains("5"))
            //    {
            //        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
            //    }
            //    if (colord.Count == 0)
            //    {
            //        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //    }
            //}
            //else
            //{
            //    FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 6, 1, check + 1);
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Paid";
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, 6].ForeColor = ColorTranslator.FromHtml("#000000");
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
            //    FpSpread1.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
            //    if (!colord.Contains("5"))
            //    {
            //        FpSpread1.Sheets[0].Columns[6].Visible = false;
            //    }
            //    if (colord.Count == 0)
            //    {
            //        FpSpread1.Sheets[0].Columns[6].Visible = true;
            //    }
            //}

            //FpSpread1.Sheets[0].ColumnCount++;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Balance";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].ForeColor = ColorTranslator.FromHtml("#000000");
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //if (!colord.Contains("6"))
            //{
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
            //}
            //if (colord.Count == 0)
            //{
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //}
            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);


            //FpSpread1.Sheets[0].ColumnCount++;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Refund Amount";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].ForeColor = ColorTranslator.FromHtml("#000000");
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //if (!colord.Contains("7"))
            //{
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
            //}
            //if (colord.Count == 0)
            //{
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //}
            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);

            //FpSpread1.Sheets[0].ColumnCount++;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Excess Amount";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].ForeColor = ColorTranslator.FromHtml("#000000");
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //if (!colord.Contains("8"))
            //{
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
            //}
            //if (colord.Count == 0)
            //{
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //}
            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);

            //FpSpread1.Sheets[0].ColumnCount++;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Fine Amount";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].ForeColor = ColorTranslator.FromHtml("#000000");
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
            //FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //if (!colord.Contains("9"))
            //{
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
            //}
            //if (colord.Count == 0)
            //{
            //    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
            //}
            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
            //FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;


            #endregion
        }
        catch { }
    }
    #endregion

    protected void grdStudentReport_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        #region Header

        if (rb_header.Checked == true)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (e.Row.RowIndex == 0)
                {
                    int totColcnt = 0;
                    e.Row.BackColor = Color.FromArgb(12, 166, 202);
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Font.Bold = true;
                    e.Row.Cells[2].Visible = false;
                    if (!colord.Contains("1"))
                        e.Row.Cells[3].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[3].Visible = true;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[4].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[4].Visible = true;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[6].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6].Visible = true;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = true;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = true;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                }
                else
                {
                    int totColcnt = 0;
                    e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[2].Visible = false;
                    if (!colord.Contains("1"))
                        e.Row.Cells[3].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[3].Visible = true;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[4].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[4].Visible = true;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[6].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6].Visible = true;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = true;
                                e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = true;
                            e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                }
                if (e.Row.RowIndex == 1)
                {
                    e.Row.BackColor = Color.FromArgb(12, 166, 202);
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Font.Bold = true;
                    int totColcnt = 0;
                    e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Cells[2].Visible = false;
                    if (!colord.Contains("1"))
                        e.Row.Cells[3].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[3].Visible = true;
                        e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[4].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[4].Visible = true;
                        e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                        e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[6].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6].Visible = true;
                        e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = true;
                                e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = true;
                            e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                }
            }
        }
        #endregion

        #region Ledger

        if (rb_ledger.Checked == true)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (e.Row.RowIndex == 0)
                {
                    int totColcnt = 0;
                    e.Row.BackColor = Color.FromArgb(12, 166, 202);
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Font.Bold = true;
                    e.Row.Cells[2].Visible = false;
                    e.Row.Cells[4].Visible = false;
                    if (!colord.Contains("1"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[6].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6].Visible = true;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[7].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[7].Visible = true;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[8].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8].Visible = true;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[8 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[8 + check].Visible = true;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = true;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                }
                else
                {
                    int totColcnt = 0;
                    e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[2].Visible = false;
                    e.Row.Cells[4].Visible = false;
                    if (!colord.Contains("1"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[6].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6].Visible = true;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[7].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[7].Visible = true;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[8].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8].Visible = true;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[8 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[8 + check].Visible = true;
                                e.Row.Cells[8 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = true;
                            e.Row.Cells[8 + check].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                        e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                        e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                        e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                        e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                }
                if (e.Row.RowIndex == 1)
                {
                    e.Row.BackColor = Color.FromArgb(12, 166, 202);
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Font.Bold = true;
                    int totColcnt = 0;
                    e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Cells[2].Visible = false;
                    e.Row.Cells[4].Visible = false;
                    if (!colord.Contains("1"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                        e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[6].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6].Visible = true;
                        e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[7].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[7].Visible = true;
                        e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[8].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8].Visible = true;
                        e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[8 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[8 + check].Visible = true;
                                e.Row.Cells[8 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = true;
                            e.Row.Cells[8 + check].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                        e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                        e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                        e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[8 + totColcnt].Visible = true;
                        e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[8 + totColcnt].Visible = false;
                    }
                }
            }
        }
        #endregion

        #region Batch Year and Degree

        if (rb_batch.Checked == true || rb_degree.Checked == true)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (e.Row.RowIndex == 0)
                {
                    int totColcnt = 0;
                    e.Row.BackColor = Color.FromArgb(12, 166, 202);
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Font.Bold = true;
                    e.Row.Cells[1].Width = 150;
                    if (!colord.Contains("1"))
                        e.Row.Cells[3].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[3].Visible = true;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[4].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[4].Visible = true;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[6].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6].Visible = true;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = true;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = true;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                }
                else
                {
                    int totColcnt = 0;
                    e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[1].Width = 150;
                    if (!colord.Contains("1"))
                        e.Row.Cells[3].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[3].Visible = true;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[4].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[4].Visible = true;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[6].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6].Visible = true;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = true;
                                e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = true;
                            e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                }
                if (e.Row.RowIndex == 1)
                {
                    e.Row.BackColor = Color.FromArgb(12, 166, 202);
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Font.Bold = true;
                    e.Row.Cells[1].Width = 150;
                    int totColcnt = 0;
                    e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                    if (!colord.Contains("1"))
                        e.Row.Cells[3].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[3].Visible = true;
                        e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[4].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[4].Visible = true;
                        e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                        e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[6].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6].Visible = true;
                        e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = true;
                                e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[6 + check].Visible = true;
                            e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[6 + totColcnt].Visible = true;
                        e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[6 + totColcnt].Visible = false;
                    }
                }
            }
        }
        #endregion

        #region Branch

        if (rb_dept.Checked == true)
        {
            #region Common and Year

            if (rb_common.Checked == true || rbdeptyear.Checked == true)
            {
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    if (e.Row.RowIndex == 0)
                    {
                        int totColcnt = 0;
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        e.Row.Cells[1].Width = 150;
                        if (!colord.Contains("1"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = true;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = true;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                    }
                    else
                    {
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[1].Width = 150;
                        if (!colord.Contains("1"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = true;
                                    e.Row.Cells[7 + check].HorizontalAlign = HorizontalAlign.Right;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = true;
                                e.Row.Cells[7 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                    }
                    if (e.Row.RowIndex == 1)
                    {
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        e.Row.Cells[1].Width = 150;
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        if (!colord.Contains("1"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                            e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                            e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = true;
                                    e.Row.Cells[7 + check].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = true;
                                e.Row.Cells[7 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                    }
                }
            }
            #endregion

            #region Header and Ledger

            if (rbdepthead.Checked == true || rbdeptledg.Checked == true)
            {
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    if (e.Row.RowIndex == 0 || e.Row.RowIndex == 1)
                    {
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                    }
                    else
                    {
                        e.Row.HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Left;
                    }
                }
            }
            #endregion
        }
        #endregion

        #region Semester

        if (rb_sem.Checked == true)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                if (e.Row.RowIndex == 0)
                {
                    int totColcnt = 0;
                    e.Row.BackColor = Color.FromArgb(12, 166, 202);
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Font.Bold = true;
                    if (!colord.Contains("1"))
                        e.Row.Cells[2].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[2].Visible = true;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[3].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[3].Visible = true;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[4].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[4].Visible = true;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[5 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[5 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[5 + check].Visible = true;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[5 + check].Visible = true;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                }
                else
                {
                    int totColcnt = 0;
                    e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Left;
                    e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Right;
                    if (!colord.Contains("1"))
                        e.Row.Cells[2].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[2].Visible = true;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[3].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[3].Visible = true;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[4].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[4].Visible = true;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[5 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[5 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[5 + check].Visible = true;
                                e.Row.Cells[5 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[5 + check].Visible = true;
                            e.Row.Cells[5 + check].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                        e.Row.Cells[5 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                        e.Row.Cells[5 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                        e.Row.Cells[5 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                        e.Row.Cells[5 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                }
                if (e.Row.RowIndex == 1)
                {
                    e.Row.BackColor = Color.FromArgb(12, 166, 202);
                    e.Row.HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Font.Bold = true;
                    int totColcnt = 0;
                    e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                    if (!colord.Contains("1"))
                        e.Row.Cells[2].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[2].Visible = true;
                        e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("2"))
                        e.Row.Cells[3].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[3].Visible = true;
                        e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("3"))
                        e.Row.Cells[4].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[4].Visible = true;
                        e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("4"))
                        e.Row.Cells[5].Visible = false;
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5].Visible = true;
                        e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                    }
                    if (!colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[5 + check].Visible = false;
                            }
                        }
                        if (check > 0)
                        {
                            check++;
                            e.Row.Cells[5 + check].Visible = false;
                        }
                        totColcnt = check;
                    }
                    if (colord.Count == 0 || colord.Contains("5"))
                    {
                        int check = 0;
                        for (int s = 0; s < chkl_paid.Items.Count; s++)
                        {
                            if (chkl_paid.Items[s].Selected == true)
                            {
                                check++;
                                e.Row.Cells[5 + check].Visible = true;
                                e.Row.Cells[5 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                        }
                        if (check >= 0)
                        {
                            check++;
                            e.Row.Cells[5 + check].Visible = true;
                            e.Row.Cells[5 + check].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt = check;
                    }
                    totColcnt++;
                    if (!colord.Contains("6"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                        e.Row.Cells[5 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("7"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                        e.Row.Cells[5 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("8"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                        e.Row.Cells[5 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt++;
                    if (!colord.Contains("9"))
                    {
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                    if (colord.Count == 0)
                    {
                        e.Row.Cells[5 + totColcnt].Visible = true;
                        e.Row.Cells[5 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[5 + totColcnt].Visible = false;
                    }
                }
            }
        }
        #endregion

        #region Student Wise

        if (rb_studentwise.Checked == true)
        {
            #region common
            if (rb_common.Checked == true)
            {
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    if (e.Row.RowIndex == 0)
                    {
                        int totColcnt = 0;
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        if (!colord.Contains("1"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                        }
                        if (chknetamount.Checked == true)
                        {
                            e.Row.Cells[11].Visible = true;
                        }
                        else
                        {
                            e.Row.Cells[11].Visible = false;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[11 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[11 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[11 + check].Visible = true;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[11 + check].Visible = true;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (roll == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 1)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 2)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 3)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 4)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 5)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 6)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 7)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                    }
                    else
                    {
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Right;
                        if (!colord.Contains("1"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                        }
                        if (chknetamount.Checked == true)
                        {
                            e.Row.Cells[11].Visible = true;
                        }
                        else
                        {
                            e.Row.Cells[11].Visible = false;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[11 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[11 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[11 + check].Visible = true;
                                    e.Row.Cells[11 + check].HorizontalAlign = HorizontalAlign.Right;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[11 + check].Visible = true;
                                e.Row.Cells[11 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                            e.Row.Cells[11 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                            e.Row.Cells[11 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                            e.Row.Cells[11 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                            e.Row.Cells[11 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (roll == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 1)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 2)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 3)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 4)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 5)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 6)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 7)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                    }
                    if (e.Row.RowIndex == 1)
                    {
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        if (!colord.Contains("1"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                            e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                            e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                            e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                            e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (chknetamount.Checked == true)
                        {
                            e.Row.Cells[11].Visible = true;
                        }
                        else
                        {
                            e.Row.Cells[11].Visible = false;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[11 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[11 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[11 + check].Visible = true;
                                    e.Row.Cells[11 + check].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[11 + check].Visible = true;
                                e.Row.Cells[11 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                            e.Row.Cells[11 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                            e.Row.Cells[11 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                            e.Row.Cells[11 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11 + totColcnt].Visible = true;
                            e.Row.Cells[11 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                            e.Row.Cells[11 + totColcnt].Visible = false;
                        }
                        if (roll == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 1)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 2)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 3)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 4)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 5)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 6)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 7)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                    }
                }
            }
            #endregion

            #region HorizontalWise Header and Ledger

            if (rb_hori.Checked == true)
            {
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    if (rbstudhed.Checked == true)
                    {
                        e.Row.Cells[6].Visible = false;
                        e.Row.Cells[7].Visible = false;
                        e.Row.Cells[8].Visible = false;
                    }
                    if (e.Row.RowIndex == 0 || e.Row.RowIndex == 1)
                    {
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        if (roll == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                        }
                        else if (roll == 1)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                        }
                        else if (roll == 2)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = false;
                        }
                        else if (roll == 3)
                        {
                            e.Row.Cells[3].Visible = false;
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                        }
                        else if (roll == 4)
                        {
                            e.Row.Cells[3].Visible = false;
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                        }
                        else if (roll == 5)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                        }
                        else if (roll == 6)
                        {
                            e.Row.Cells[3].Visible = false;
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                        }
                        else if (roll == 7)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                        }
                    }
                    else
                    {
                        e.Row.HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Left;
                        if (roll == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                        }
                        else if (roll == 1)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                        }
                        else if (roll == 2)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = false;
                        }
                        else if (roll == 3)
                        {
                            e.Row.Cells[3].Visible = false;
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                        }
                        else if (roll == 4)
                        {
                            e.Row.Cells[3].Visible = false;
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                        }
                        else if (roll == 5)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                        }
                        else if (roll == 6)
                        {
                            e.Row.Cells[3].Visible = false;
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                        }
                        else if (roll == 7)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                        }
                    }
                }

            }

            #endregion

            #region LedgerWise Header and Ledger

            if (rb_vert.Checked == true)
            {
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    if (e.Row.RowIndex == 0)
                    {
                        int totColcnt = 0;
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        if (!colord.Contains("1"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[10 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[10 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[10 + check].Visible = true;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[10 + check].Visible = true;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (roll == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 1)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 2)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 3)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 4)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 5)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 6)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 7)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                    }
                    else
                    {
                        int totColcnt = 0;
                        e.Row.HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Left;
                        e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Left;
                        if (!colord.Contains("1"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[10 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[10 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[10 + check].Visible = true;
                                    e.Row.Cells[10 + check].HorizontalAlign = HorizontalAlign.Right;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[10 + check].Visible = true;
                                e.Row.Cells[10 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                            e.Row.Cells[10 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                            e.Row.Cells[10 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                            e.Row.Cells[10 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                            e.Row.Cells[10 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (roll == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 1)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 2)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 3)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 4)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 5)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 6)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 7)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                    }
                    if (e.Row.RowIndex == 1)
                    {
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        if (!colord.Contains("1"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                            e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                            e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                            e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                            e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[10 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[10 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[10 + check].Visible = true;
                                    e.Row.Cells[10 + check].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[10 + check].Visible = true;
                                e.Row.Cells[10 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                            e.Row.Cells[10 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                            e.Row.Cells[10 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                            e.Row.Cells[10 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10 + totColcnt].Visible = true;
                            e.Row.Cells[10 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                            e.Row.Cells[10 + totColcnt].Visible = false;
                        }
                        if (roll == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 1)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 2)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 3)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 4)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 5)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = false;
                        }
                        else if (roll == 6)
                        {
                            e.Row.Cells[4].Visible = false;
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[6].Visible = true;
                        }
                        else if (roll == 7)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[5].Visible = false;
                            e.Row.Cells[6].Visible = true;
                        }
                    }
                }

            }

            #endregion
        }

        #endregion

        #region Others

        if (rb_others.Checked == true)
        {
            if (rbstaff.Checked == true)
            {
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    if (e.Row.RowIndex == 0)
                    {
                        int totColcnt = 0;
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        if (!colord.Contains("1"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = true;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = true;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                    }
                    else
                    {
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Right;
                        if (!colord.Contains("1"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = true;
                                    e.Row.Cells[7 + check].HorizontalAlign = HorizontalAlign.Right;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = true;
                                e.Row.Cells[7 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                    }
                    if (e.Row.RowIndex == 1)
                    {
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Center;

                        if (!colord.Contains("1"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                            e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                            e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[7 + check].Visible = true;
                                    e.Row.Cells[7 + check].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[7 + check].Visible = true;
                                e.Row.Cells[7 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7 + totColcnt].Visible = true;
                            e.Row.Cells[7 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                            e.Row.Cells[7 + totColcnt].Visible = false;
                        }
                    }
                }
            }
            else
            {
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    if (e.Row.RowIndex == 0)
                    {
                        int totColcnt = 0;
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        if (!colord.Contains("1"))
                            e.Row.Cells[3].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[6 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[6 + check].Visible = true;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = true;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                    }
                    else
                    {
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Right;
                        e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Right;
                        if (!colord.Contains("1"))
                            e.Row.Cells[3].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[6 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[6 + check].Visible = true;
                                    e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Right;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = true;
                                e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                            e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                            e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                            e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                            e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                    }
                    if (e.Row.RowIndex == 1)
                    {
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Center;
                        if (!colord.Contains("1"))
                            e.Row.Cells[3].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                            e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[6 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("5"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[6 + check].Visible = true;
                                    e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[6 + check].Visible = true;
                                e.Row.Cells[6 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("6"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                            e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("7"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                            e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("8"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                            e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                        totColcnt++;
                        if (!colord.Contains("9"))
                        {
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6 + totColcnt].Visible = true;
                            e.Row.Cells[6 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                            e.Row.Cells[6 + totColcnt].Visible = false;
                        }
                    }
                }
            }
        }
        #endregion
    }

    protected void GrdDailyDetail_RowDataBound(object sender, GridViewRowEventArgs e)
    {

        if (rb_dailydetail.Checked == true)
        {
            #region Cummulative

            if (rbcumulacr.Checked == true)
            {
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    if (e.Row.RowIndex == 0)
                    {
                        int totColcnt = 0;
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        if (!colord.Contains("1"))
                            e.Row.Cells[1].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[1].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[2].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[2].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[3].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                        }
                        if (!colord.Contains("5"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                        }
                        if (!colord.Contains("6"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                        }
                        if (!colord.Contains("7"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("8"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                        }
                        if (!colord.Contains("9"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                        }
                        if (!colord.Contains("10"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                        }
                        if (!colord.Contains("11"))
                            e.Row.Cells[11].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11].Visible = true;
                        }
                        if (!colord.Contains("12"))
                            e.Row.Cells[12].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[12].Visible = true;
                        }
                        if (!colord.Contains("13"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[12 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[12 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("13"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[12 + check].Visible = true;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[12 + check].Visible = true;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("14"))
                        {
                            e.Row.Cells[12 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[12 + totColcnt].Visible = true;
                        }
                    }
                    else
                    {
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Center;
                        if (!colord.Contains("1"))
                            e.Row.Cells[1].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[1].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[2].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[2].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[3].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                        }
                        if (!colord.Contains("5"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                        }
                        if (!colord.Contains("6"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                        }
                        if (!colord.Contains("7"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("8"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                        }
                        if (!colord.Contains("9"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                        }
                        if (!colord.Contains("10"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                        }
                        if (!colord.Contains("11"))
                            e.Row.Cells[11].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11].Visible = true;
                        }
                        if (!colord.Contains("12"))
                            e.Row.Cells[12].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[12].Visible = true;
                        }
                        if (!colord.Contains("13"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[12 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[12 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("13"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[12 + check].Visible = true;
                                    e.Row.Cells[12 + check].HorizontalAlign = HorizontalAlign.Right;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[12 + check].Visible = true;
                                e.Row.Cells[12 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("14"))
                        {
                            e.Row.Cells[12 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[12 + totColcnt].Visible = true;
                            e.Row.Cells[12 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                    }
                    if (e.Row.RowIndex == 1)
                    {
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Center;
                        if (!colord.Contains("1"))
                            e.Row.Cells[1].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[1].Visible = true;
                            e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[2].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[2].Visible = true;
                            e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[3].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("5"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("6"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                            e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("7"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                            e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("8"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                            e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("9"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                            e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("10"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                            e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("11"))
                            e.Row.Cells[11].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11].Visible = true;
                            e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("12"))
                            e.Row.Cells[12].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[12].Visible = true;
                            e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("13"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[12 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[12 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("13"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[12 + check].Visible = true;
                                    e.Row.Cells[12 + check].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[12 + check].Visible = true;
                                e.Row.Cells[12 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("14"))
                        {
                            e.Row.Cells[12 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[12 + totColcnt].Visible = true;
                            e.Row.Cells[12 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                    }
                }
            }
            #endregion

            #region Detailed

            if (rbdetailacr.Checked == true)
            {
                if (e.Row.RowType == DataControlRowType.DataRow)
                {
                    if (e.Row.RowIndex == 0)
                    {
                        int totColcnt = 0;
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        if (!colord.Contains("1"))
                            e.Row.Cells[1].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[1].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[2].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[2].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[3].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                        }
                        if (!colord.Contains("5"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                        }
                        if (!colord.Contains("6"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                        }
                        if (!colord.Contains("7"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("8"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                        }
                        if (!colord.Contains("9"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                        }
                        if (!colord.Contains("10"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                        }
                        if (!colord.Contains("11"))
                            e.Row.Cells[11].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11].Visible = true;
                        }
                        if (!colord.Contains("12"))
                            e.Row.Cells[12].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[12].Visible = true;
                        }
                        if (!colord.Contains("13"))
                            e.Row.Cells[13].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[13].Visible = true;
                        }
                        if (!colord.Contains("14"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[13 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[13 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("14"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[13 + check].Visible = true;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[13 + check].Visible = true;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("15"))
                        {
                            e.Row.Cells[13 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[13 + totColcnt].Visible = true;
                        }
                    }
                    else
                    {
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Center;
                        if (!colord.Contains("1"))
                            e.Row.Cells[1].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[1].Visible = true;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[2].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[2].Visible = true;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[3].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                        }
                        if (!colord.Contains("5"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                        }
                        if (!colord.Contains("6"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                        }
                        if (!colord.Contains("7"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                        }
                        if (!colord.Contains("8"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                        }
                        if (!colord.Contains("9"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                        }
                        if (!colord.Contains("10"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                        }
                        if (!colord.Contains("11"))
                            e.Row.Cells[11].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11].Visible = true;
                        }
                        if (!colord.Contains("12"))
                            e.Row.Cells[12].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[12].Visible = true;
                        }
                        if (!colord.Contains("13"))
                            e.Row.Cells[13].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[13].Visible = true;
                        }
                        if (!colord.Contains("14"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[13 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[13 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("14"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[13 + check].Visible = true;
                                    e.Row.Cells[13 + check].HorizontalAlign = HorizontalAlign.Right;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[13 + check].Visible = true;
                                e.Row.Cells[13 + check].HorizontalAlign = HorizontalAlign.Right;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("15"))
                        {
                            e.Row.Cells[13 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[13 + totColcnt].Visible = true;
                            e.Row.Cells[13 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                        }
                    }
                    if (e.Row.RowIndex == 1)
                    {
                        e.Row.BackColor = Color.FromArgb(12, 166, 202);
                        e.Row.HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Font.Bold = true;
                        int totColcnt = 0;
                        e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Center;
                        e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Center;
                        if (!colord.Contains("1"))
                            e.Row.Cells[1].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[1].Visible = true;
                            e.Row.Cells[1].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("2"))
                            e.Row.Cells[2].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[2].Visible = true;
                            e.Row.Cells[2].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("3"))
                            e.Row.Cells[3].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[3].Visible = true;
                            e.Row.Cells[3].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("4"))
                            e.Row.Cells[4].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[4].Visible = true;
                            e.Row.Cells[4].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("5"))
                            e.Row.Cells[5].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[5].Visible = true;
                            e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("6"))
                            e.Row.Cells[6].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[6].Visible = true;
                            e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("7"))
                            e.Row.Cells[7].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[7].Visible = true;
                            e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("8"))
                            e.Row.Cells[8].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[8].Visible = true;
                            e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("9"))
                            e.Row.Cells[9].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[9].Visible = true;
                            e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("10"))
                            e.Row.Cells[10].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[10].Visible = true;
                            e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("11"))
                            e.Row.Cells[11].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[11].Visible = true;
                            e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("12"))
                            e.Row.Cells[12].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[12].Visible = true;
                            e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Center;
                        }
                        if (!colord.Contains("13"))
                            e.Row.Cells[13].Visible = false;
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[13].Visible = true;
                            e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Left;
                        }
                        if (!colord.Contains("14"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[13 + check].Visible = false;
                                }
                            }
                            if (check > 0)
                            {
                                check++;
                                e.Row.Cells[13 + check].Visible = false;
                            }
                            totColcnt = check;
                        }
                        if (colord.Count == 0 || colord.Contains("14"))
                        {
                            int check = 0;
                            for (int s = 0; s < chkl_paid.Items.Count; s++)
                            {
                                if (chkl_paid.Items[s].Selected == true)
                                {
                                    check++;
                                    e.Row.Cells[13 + check].Visible = true;
                                    e.Row.Cells[13 + check].HorizontalAlign = HorizontalAlign.Center;
                                }
                            }
                            if (check >= 0)
                            {
                                check++;
                                e.Row.Cells[13 + check].Visible = true;
                                e.Row.Cells[13 + check].HorizontalAlign = HorizontalAlign.Center;
                            }
                            totColcnt = check;
                        }
                        totColcnt++;
                        if (!colord.Contains("15"))
                        {
                            e.Row.Cells[13 + totColcnt].Visible = false;
                        }
                        if (colord.Count == 0)
                        {
                            e.Row.Cells[13 + totColcnt].Visible = true;
                            e.Row.Cells[13 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                        }
                    }
                }
            }
            #endregion
        }

    }

    #endregion

    #region cellclickmethods

    #region header

    protected void grdStudentReport_OnRowCreated(object sender, GridViewRowEventArgs e)
    {
        if (rb_header.Checked == true)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                for (int i = 1; i < e.Row.Cells.Count; i++)
                {
                    TableCell cell = e.Row.Cells[i];
                    cell.Attributes["onmouseover"] = "this.style.cursor='pointer';";
                    cell.Attributes["onmouseout"] = "this.style.textDecoration='none';";
                    cell.Attributes["onclick"] = string.Format("document.getElementById('{0}').value = {1}; {2}"
                       , SelectedGridCellIndex.ClientID, i
                       , Page.ClientScript.GetPostBackClientHyperlink((GridView)sender, string.Format("Select${0}", e.Row.RowIndex)));
                }
            }
        }
    }

    protected void grdStudentReport_SelectedIndexChanged(Object sender, EventArgs e)
    {
        try
        {
            var grid = (GridView)sender;
            GridViewRow selectedRow = grid.SelectedRow;
            int rowIndex = grid.SelectedIndex;
            int selectedCellIndex = int.Parse(this.SelectedGridCellIndex.Value);

            #region getvalue

            string batch1 = "";
            string degcourseid = "";
            string deptdegcode = "";
            string sem = "";
            string sec = "";
            string stud = "";
            string seatype = "";
            string studtype = "";
            string paid = "";
            string ledgercode = "";
            string allot = "";
            string consession = "";
            string Finyearvalue = "";
            DataView dvhead = new DataView();
            batch.Visible = false;
            divdegr.Visible = false;
            divdep.Visible = false;
            divsema.Visible = false;
            div7.Visible = false;

            batch1 = Convert.ToString(getCblSelectedValue(cbl_batch));
            degcourseid = Convert.ToString(getCblSelectedValue(cbl_degree));
            deptdegcode = Convert.ToString(getCblSelectedValue(cbl_dept));
            sem = Convert.ToString(getCblSelectedValue(cbl_sem));
            sec = Convert.ToString(getCblSelectedValue(cbl_sect));
            stud = Convert.ToString(getCblSelectedValue(cbl_stud));
            seatype = Convert.ToString(getCblSelectedValue(cbl_seat));
            studtype = Convert.ToString(getCblSelectedValue(cbl_studtype));
            paid = Convert.ToString(getCblSelectedValue(chkl_paid));
            // headervalue = Convert.ToString(getCblSelectedValue(chkl_studhed));
            ledgercode = Convert.ToString(getCblSelectedValue(chkl_studled));
            Finyearvalue = Convert.ToString(getCblSelectedValue(chklsfyear));

            //string cc = "";
            //string debar = "";
            //string disc = "";
            //if (cblinclude.Items.Count > 0)
            //{
            //    for (int i = 0; i < cblinclude.Items.Count; i++)
            //    {
            //        if (cblinclude.Items[i].Selected == true)
            //        {
            //            if (cblinclude.Items[i].Value == "1")
            //            {
            //                cc = " and r.cc=0";
            //            }
            //            if (cblinclude.Items[i].Value == "2")
            //            {
            //                debar = " and r.Exam_Flag<>'debar'";
            //            }
            //            if (cblinclude.Items[i].Value == "3")
            //            {
            //                disc = "";
            //            }
            //        }
            //        else
            //        {
            //            disc = " and r.DelFlag=0";
            //        }
            //    }
            //}
            //else
            //{
            //    disc = " and r.DelFlag=0";
            //}

            string cc = "";
            string debar = "";
            string disc = "";
            string commondist = "";
            if (cblinclude.Items.Count > 0)
            {
                for (int i = 0; i < cblinclude.Items.Count; i++)
                {
                    if (cblinclude.Items[i].Selected == true)
                    {
                        if (cblinclude.Items[i].Value == "1")
                        {
                            cc = " r.cc=1";
                        }
                        if (cblinclude.Items[i].Value == "2")
                        {
                            debar = "  r.Exam_Flag like '%debar'";
                        }
                        if (cblinclude.Items[i].Value == "3")
                        {
                            disc = "  r.DelFlag=1";
                        }
                    }
                }
            }

            if (cc != "" && debar == "" && disc == "")
                commondist = " and (" + cc + " or r.cc=0)  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            if (cc == "" && debar != "" && disc == "")
                commondist = " and r.cc=0  and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            if (cc == "" && debar == "" && disc != "")
                commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and (" + disc + " or r.DelFlag=0)";

            if (cc != "" && debar != "" && disc == "")
                commondist = " and (" + cc + " or r.cc=0) and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            if (cc == "" && debar != "" && disc != "")
                commondist = " and r.cc=0 and (" + debar + " or r.Exam_Flag<>'debar')  and (" + disc + " or r.DelFlag=0)";

            if (cc != "" && debar == "" && disc != "")
                commondist = " and (" + cc + " or r.cc=0) and r.Exam_Flag<>'debar'  and (" + disc + " or r.DelFlag=0)";

            else if (cc == "" && debar == "" && disc == "")
                commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            if (cc != "" && debar != "" && disc != "")
                commondist = "";

            string fromdate = "";
            string todate = "";
            int datewise = 0;
            if (chk_datewise.Checked == true)
            {
                datewise = 1;
                if (datewise == 1)
                {
                    fromdate = txt_fromdate.Text;
                    todate = txt_todate.Text;
                    if (fromdate != "" && todate != "")
                    {
                        string[] frdate = fromdate.Split('/');
                        if (frdate.Length == 3)
                        {
                            fromdate = frdate[1].ToString() + "/" + frdate[0].ToString() + "/" + frdate[2].ToString();
                        }
                        string[] tdate = todate.Split('/');
                        if (tdate.Length == 3)
                        {
                            todate = tdate[1].ToString() + "/" + tdate[0].ToString() + "/" + tdate[2].ToString();
                        }
                    }
                }
            }

            #region academic year Added by saranya on 03/01/2018

            string acdBatchYear = string.Empty;
            string feecaT = string.Empty;
            string feeCategory = string.Empty;
            string BatchYear = string.Empty;
            string batch_year = string.Empty;
            Dictionary<string, string> htAcademic = new Dictionary<string, string>();
            try
            {
                string settingType = string.Empty;
                if (rblTypeNew.SelectedIndex == 0)
                    settingType = "0";
                else if (rblTypeNew.SelectedIndex == 1)
                    settingType = "1";
                else if (rblTypeNew.SelectedIndex == 2)
                    settingType = "2";
                string collegecode = Convert.ToString(ddl_collegename.SelectedItem.Value);
                string acdYears = Convert.ToString(ddlAcademic.SelectedItem.Text);
                string selQ = " SELECT distinct ACD_COLLEGE_CODE,c.collname,ACD_YEAR,ACD_BATCH_YEAR,ACD_FEECATEGORY,t.textval FROM FT_ACADEMICYEAR AY,FT_ACADEMICYEAR_DETAILED AYD,collinfo c,textvaltable t WHERE c.college_code=ay.acd_college_code and AY.ACA_YEAR_PK=AYD.ACA_YEAR_FK and textcriteria='FEECA' and t.textcode=ayd.ACD_FEECATEGORY and t.college_code=ay.ACD_COLLEGE_CODE AND  ACD_COLLEGE_CODE IN('" + collegecode + "') and ACD_YEAR in('" + acdYears + "') and ACD_SETTING_TYPE='" + settingType + "' order by ACD_COLLEGE_CODE  asc,ACD_YEAR desc,ACD_FEECATEGORY asc";
                DataSet dsPrevAMount = da.select_method_wo_parameter(selQ, "Text");
                if (dsPrevAMount.Tables.Count > 0 && dsPrevAMount.Tables[0].Rows.Count > 0)
                {
                    DataTable dtAcdYear = dsPrevAMount.Tables[0].DefaultView.ToTable(true, "ACD_YEAR", "ACD_COLLEGE_CODE", "collname");
                    DataTable dtBatchYear = dsPrevAMount.Tables[0].DefaultView.ToTable(true, "ACD_YEAR", "ACD_BATCH_YEAR", "ACD_COLLEGE_CODE");
                    DataTable dtFeecat = dsPrevAMount.Tables[0].DefaultView.ToTable();

                    if (dtAcdYear.Rows.Count > 0)
                    {
                        int Sno = 0;
                        for (int row = 0; row < dtAcdYear.Rows.Count; row++)
                        {
                            Sno++;
                            string acdYear = Convert.ToString(dtAcdYear.Rows[row]["ACD_YEAR"]);
                            string clgCode = Convert.ToString(dtAcdYear.Rows[row]["ACD_COLLEGE_CODE"]);
                            dtBatchYear.DefaultView.RowFilter = "ACD_YEAR='" + acdYear + "' and ACD_COLLEGE_CODE='" + clgCode + "'";
                            DataTable dtBatch = dtBatchYear.DefaultView.ToTable();
                            if (dtBatch.Rows.Count > 0)
                            {
                                for (int bat = 0; bat < dtBatch.Rows.Count; bat++)
                                {
                                    acdBatchYear = Convert.ToString(dtBatch.Rows[bat]["ACD_BATCH_YEAR"]);
                                    dtFeecat.DefaultView.RowFilter = "ACD_YEAR='" + acdYear + "' and ACD_BATCH_YEAR='" + acdBatchYear + "' and ACD_COLLEGE_CODE='" + clgCode + "'";
                                    DataTable dtFee = dtFeecat.DefaultView.ToTable();
                                    if (dtFee.Rows.Count > 0)
                                    {
                                        StringBuilder sbSem = new StringBuilder();
                                        StringBuilder sbSemStr = new StringBuilder();
                                        for (int fee = 0; fee < dtFee.Rows.Count; fee++)
                                        {
                                            feecaT = Convert.ToString(dtFee.Rows[fee]["ACD_FEECATEGORY"]);
                                            string feecaTStr = Convert.ToString(dtFee.Rows[fee]["textval"]);
                                            sbSem.Append(feecaT + ",");
                                            // sbSemStr.Append(feecaTStr + ",");
                                            BatchYear = Convert.ToString(dtFee.Rows[fee]["ACD_BATCH_YEAR"]);
                                        }
                                        if (feecaT == "")
                                        {
                                            feeCategory = feecaT;
                                        }
                                        else
                                        {
                                            feeCategory += "'" + "," + "'" + feecaT;
                                        }
                                        if (BatchYear == "")
                                        {
                                            batch_year = BatchYear;
                                        }
                                        else
                                        {
                                            batch_year += "'" + "," + "'" + BatchYear;
                                        }

                                        if (sbSem.Length > 0)
                                            sbSem.Remove(sbSem.Length - 1, 1);
                                        if (!htAcademic.ContainsKey(clgCode + "$" + acdBatchYear))
                                            htAcademic.Add(clgCode + "$" + acdBatchYear, Convert.ToString(sbSem));
                                        //if (sbSemStr.Length > 0)
                                        //    sbSemStr.Remove(sbSemStr.Length - 1, 1);    


                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch { }
            #endregion


            lbl_bat.Visible = false;
            lbl_bat.Text = "";
            lbl_degr.Visible = false;
            lbl_degr.Text = "";
            lbl_dep.Visible = false;
            lbl_dep.Text = "";
            divbatch.Visible = false;
            GrdBatch.Visible = false;
            divdegree.Visible = false;
            divdept.Visible = false;
            lbl_sem.Visible = false; ;
            lbl_sem.Text = "";
            divsem.Visible = false;
            //pnl_batchcolorder.Visible = false;
            //pnl_batcolorder.Visible = false;
            //pnl_degcolorder.Visible = false;
            //pnl_degreecolorder.Visible = false;
            //pnl_deptcolord.Visible = false;
            //pnl_deptcolorder.Visible = false;
            //pnl_semcolord.Visible = false;
            //pnl_semcolorder.Visible = false;
            //pnl_studcolord.Visible = false;
            //pnl_studcolorder.Visible = false;
            divstudcell.Visible = false;
            GrdStud.Visible = false;
            lbl_semcell.Text = "";
            lbl_semcell.Visible = false;

            string selqry = "";
            string activerow = Convert.ToString(rowIndex);
            string activecol = Convert.ToString(selectedCellIndex);
            string hedcount = "";
            int actnew = 0;
            int actbal = 0;
            int actpaidtotal = 0;
            int refundamt = 0;
            int excessamt = 0;
            int fineamt = 0;
            if (activecol.Trim() != "")
            {
                actnew = Convert.ToInt32(activecol);
                int colcount = dtReport.Columns.Count;
                actpaidtotal = Convert.ToInt32(14);//Convert.ToInt32(FpSpread1.Sheets[0].ColumnCount - 5);
                actbal = Convert.ToInt32(15); //Convert.ToInt32(FpSpread1.Sheets[0].ColumnCount - 4);
                refundamt = Convert.ToInt32(16);//Convert.ToInt32(FpSpread1.Sheets[0].ColumnCount - 3);
                excessamt = Convert.ToInt32(17); //Convert.ToInt32(FpSpread1.Sheets[0].ColumnCount - 2);
                fineamt = Convert.ToInt32(18);//Convert.ToInt32(FpSpread1.Sheets[0].ColumnCount - 1);
            }
            string gettagvalue = "";
            if (actnew > 5)
            {
                gettagvalue = Convert.ToString(grdStudentReport.Rows[1].Cells[actnew].Text);
            }
            int act = Convert.ToInt32(activerow);
            if (act == grdStudentReport.Rows.Count - 1)
            {
                for (int i = 0; i < grdStudentReport.Rows.Count - 1; i++)
                {
                    if (hedcount == "")
                    {
                        hedcount = Convert.ToString(grdStudentReport.Rows[Convert.ToInt32(i)].Cells[2].Text);
                    }
                    else
                    {
                        hedcount = hedcount + "','" + "" + Convert.ToString(grdStudentReport.Rows[Convert.ToInt32(i)].Cells[2].Text) + "";
                    }
                }
            }
            string headercode = "";
            headercode = Convert.ToString(grdStudentReport.Rows[Convert.ToInt32(activerow)].Cells[2].Text);

            if (hedcount.Trim() != "")
            {
                headercode = hedcount;
            }

            int actcol = Convert.ToInt32(activecol);
            int actrow = Convert.ToInt32(activerow);

            if (grdStudentReport.Rows.Count > 0)
            {
                colhedername = Convert.ToString(grdStudentReport.Rows[0].Cells[Convert.ToInt32(activecol)].Text);
                cellclicktext = "-->Header(" + colhedername + ")";
                if (colhedername.Trim() == "")
                {
                    colhedername = Convert.ToString(grdStudentReport.Rows[1].Cells[Convert.ToInt32(activecol)].Text);
                    cellclicktext = "-->Header(" + colhedername + ")";
                }
                colhedername1 = Convert.ToString(grdStudentReport.Rows[grdStudentReport.Rows.Count - 1].Cells[Convert.ToInt32(activecol)].Text);
                //if (colhedername1.Trim() != "")
                //{
                //    colhedername1 = Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].Rows.Count - 1,0].Text);
                //}
            }
            #endregion

            Boolean flag = false;

            if (!cbAcdYear.Checked)
            {
                #region newquery

                //detail
                selqry = "  SELECT A.HeaderFK,LedgerFK, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1  and A.FinYearFK in ('" + Finyearvalue + "')  and P.college_code ='" + collegecode1 + "'";
                if (batch1 != "")
                {
                    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
                }
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                }
                if (sem != "")
                {
                    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                }
                if (headercode != "")
                {
                    selqry = selqry + " and a.HeaderFK in ('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                }

                selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK";
                if (activecol.Trim() == "4")
                {
                    selqry = selqry + " having SUM(DeductAmout) > 0 ";
                }
                if (activecol.Trim() == "5")
                {
                    selqry = selqry + " having SUM(FromGovtAmt) > 0";
                }
                if (activecol.Trim() == Convert.ToString(actbal))
                {
                    selqry = selqry + " having SUM(BalAmount) > 0";
                }
                if (activecol.Trim() == Convert.ToString(actpaidtotal))
                {
                    selqry = selqry + " having sum(BalAmount) = 0";
                }
                //paymode
                selqry = selqry + "  SELECT PayMode,HeaderFK,LedgerFK,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.app_no=p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                if (usBasedRights == true)
                    selqry += " and a.EntryUserCode in('" + usercode + "')";
                if (batch1 != "")
                {
                    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                }
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                }
                if (sem != "")
                {
                    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                }
                if (headercode != "")
                {
                    selqry = selqry + " and HeaderFK in ('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
                {
                    selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                    }
                }
                selqry = selqry + "GROUP BY A.HeaderFK,PayMode,LedgerFK";

                //excess amount
                selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerFK from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No   AND P.IsConfirm = 1  AND Admission_Status = 1 and P.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                if (batch1 != "")
                {
                    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
                }
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  p.Degree_Code in ('" + deptdegcode + "')";
                }
                if (sem != "")
                {
                    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                }
                if (headercode != "")
                {
                    selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                }
                selqry = selqry + "GROUP BY A.HeaderFK ,a.LedgerFK";
                if (activecol.Trim() == Convert.ToString(excessamt))
                {
                    selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
                    flag = true;
                }
                selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";

                #endregion
            }
            else
            {
                #region newquery added by saranya on 03012018 for academic year settings(HeaderCellClick)

                //detail
                selqry = "  SELECT A.HeaderFK,LedgerFK, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1  and A.FinYearFK in ('" + Finyearvalue + "')  and P.college_code ='" + collegecode1 + "' and r.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "')";

                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                }
                if (headercode != "")
                {
                    selqry = selqry + " and a.HeaderFK in ('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                }

                selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK";
                if (activecol.Trim() == "3")
                {
                    selqry = selqry + " having SUM(DeductAmout) > 0 ";
                }
                if (activecol.Trim() == "4")
                {
                    selqry = selqry + " having SUM(FromGovtAmt) > 0";
                }
                if (activecol.Trim() == Convert.ToString(actbal))
                {
                    selqry = selqry + " having SUM(BalAmount) > 0";
                }
                if (activecol.Trim() == Convert.ToString(actpaidtotal))
                {
                    selqry = selqry + " having sum(BalAmount) = 0";
                }
                //paymode
                selqry = selqry + "  SELECT PayMode,HeaderFK,LedgerFK,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.app_no=p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and p.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "')";
                if (usBasedRights == true)
                    selqry += " and a.EntryUserCode in('" + usercode + "')";

                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
                }
                if (headercode != "")
                {
                    selqry = selqry + " and HeaderFK in ('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
                {
                    selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                    }
                }
                selqry = selqry + "GROUP BY A.HeaderFK,PayMode,LedgerFK";

                //excess amount
                selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerFK from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No   AND P.IsConfirm = 1  AND Admission_Status = 1 and P.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and p.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "')";

                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  p.Degree_Code in ('" + deptdegcode + "')";
                }

                if (headercode != "")
                {
                    selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                }
                selqry = selqry + "GROUP BY A.HeaderFK ,a.LedgerFK";
                if (activecol.Trim() == Convert.ToString(excessamt))
                {
                    selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
                    flag = true;
                }
                selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";

                #endregion
            }

            bool paymodecheck = false;
            DataView dv = new DataView();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (gettagvalue.Trim() != "")
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    paymodecheck = true;
                }
            }
            else
            {
                paymodecheck = true;
            }
            Boolean flag1 = false;
            if (flag == true)
            {
                if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true && ds.Tables[2].Rows.Count > 0)
                {
                    flag1 = true;
                }
            }
            else
            {
                if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true)
                {
                    flag1 = true;
                }
            }

            if (flag1 == true)
            {
                #region design

                loadledgercolumns();
                ArrayList arrColLdrNames = new ArrayList();
                ArrayList arrColLdrNames2 = new ArrayList();
                Dictionary<int, string> dicLedRowColor = new Dictionary<int, string>();
                int check = 0;

                arrColLdrNames.Add("S.No");
                arrColLdrNames2.Add("S.No");
                dtReport.Columns.Add("S.No");
                arrColLdrNames.Add("Header Name");
                arrColLdrNames2.Add("Header Name");
                dtReport.Columns.Add("Header Name");
                arrColLdrNames.Add("Header pk");
                arrColLdrNames2.Add("Header pk");
                dtReport.Columns.Add("Header pk");
                arrColLdrNames.Add("Ledger Name");
                arrColLdrNames2.Add("Ledger Name");
                dtReport.Columns.Add("Ledger Name");
                arrColLdrNames.Add("Ledger pk");
                arrColLdrNames2.Add("Ledger pk");
                dtReport.Columns.Add("Ledger pk");
                arrColLdrNames.Add("Allot");
                arrColLdrNames2.Add("Allot");
                dtReport.Columns.Add("Allot");
                arrColLdrNames.Add("Concession");
                arrColLdrNames2.Add("Concession");
                dtReport.Columns.Add("Concession");
                arrColLdrNames.Add("Scholarship");
                arrColLdrNames2.Add("Scholarship");
                dtReport.Columns.Add("Scholarship");
                arrColLdrNames.Add("Total");
                arrColLdrNames2.Add("Total");
                dtReport.Columns.Add("Total");

                Hashtable newhash = new Hashtable();

                if (chkl_paid.Items.Count > 0)
                {
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            check++;

                            arrColLdrNames.Add("Paid");
                            arrColLdrNames2.Add(chkl_paid.Items[s].Text);
                            dtReport.Columns.Add(chkl_paid.Items[s].Text);
                            newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                        }
                    }
                    if (check != 0)
                    {
                        arrColLdrNames.Add("Paid");
                        arrColLdrNames2.Add("Total Paid");
                        dtReport.Columns.Add("Total Paid");
                    }
                }
                if (check == 0)
                {
                    arrColLdrNames.Add("Paid");
                    arrColLdrNames2.Add("Paid");
                    dtReport.Columns.Add("Paid");
                }

                arrColLdrNames.Add("Balance");
                arrColLdrNames2.Add("Balance");
                dtReport.Columns.Add("Balance");
                arrColLdrNames.Add("Refund Amount");
                arrColLdrNames2.Add("Refund Amount");
                dtReport.Columns.Add("Refund Amount");
                arrColLdrNames.Add("Excess Amount");
                arrColLdrNames2.Add("Excess Amount");
                dtReport.Columns.Add("Excess Amount");
                arrColLdrNames.Add("Fine Amount");
                arrColLdrNames2.Add("Fine Amount");
                dtReport.Columns.Add("Fine Amount");
                DataRow drHdr1 = dtReport.NewRow();
                DataRow drHdr2 = dtReport.NewRow();
                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                {
                    drHdr1[grCol] = arrColLdrNames[grCol];
                    drHdr2[grCol] = arrColLdrNames2[grCol];
                }
                dtReport.Rows.Add(drHdr1);
                dtReport.Rows.Add(drHdr2);

                #endregion

                #region value

                double allotamt = 0;
                double consamt = 0;
                double govt = 0;
                double tot_amount = 0;
                double totalvalue = 0;
                double bal = 0;
                double totamount = 0;
                double fnlamount = 0;
                double paidamount = 0;
                int ColCntGrd = 0;
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = Convert.ToString(i + 1);
                    ds.Tables[3].DefaultView.RowFilter = "LedgerPK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                    dvhead = ds.Tables[3].DefaultView;
                    if (Convert.ToString(dvhead) != "" && dvhead != null)
                    {
                        drowGrd[1] = Convert.ToString(dvhead[0]["HeaderName"]);
                        drowGrd[2] = Convert.ToString(dvhead[0]["HeaderFK"]);
                        drowGrd[3] = Convert.ToString(dvhead[0]["LedgerName"]);
                        drowGrd[4] = Convert.ToString(dvhead[0]["LedgerPK"]);
                    }
                    //allot
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                    drowGrd[5] = Convert.ToString(allotamt);
                    if (!grandtotal.ContainsKey(5))
                        grandtotal.Add(5, Convert.ToString(allotamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[5]), out amount);
                        amount += allotamt;
                        grandtotal.Remove(5);
                        grandtotal.Add(5, Convert.ToString(amount));
                    }
                    //consession
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                    drowGrd[6] = Convert.ToString(consamt);
                    if (!grandtotal.ContainsKey(6))
                        grandtotal.Add(6, Convert.ToString(consamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                        amount += consamt;
                        grandtotal.Remove(6);
                        grandtotal.Add(6, Convert.ToString(amount));
                    }
                    //government
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                    drowGrd[7] = Convert.ToString(govt);
                    if (!grandtotal.ContainsKey(7))
                        grandtotal.Add(7, Convert.ToString(govt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[7]), out amount);
                        amount += govt;
                        grandtotal.Remove(7);
                        grandtotal.Add(7, Convert.ToString(amount));
                    }
                    //total
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                    drowGrd[8] = Convert.ToString(totalvalue);
                    if (!grandtotal.ContainsKey(8))
                        grandtotal.Add(8, Convert.ToString(totalvalue));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[8]), out amount);
                        amount += totalvalue;
                        grandtotal.Remove(8);
                        grandtotal.Add(8, Convert.ToString(amount));
                    }
                    //paid paymode count=0
                    double paidvalue = 0;
                    if (check == 0)
                    {
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                        fnlamount = Convert.ToDouble(paidvalue);
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                            amount += paidvalue;
                            grandtotal.Remove(ColCntGrd - 5);
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                        }
                    }
                    //refund
                    double refund = 0;
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                    if (!grandtotal.ContainsKey(ColCntGrd - 3))
                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                        amount += refund;
                        grandtotal.Remove(ColCntGrd - 3);
                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                    }

                    //excess
                    DataView dvex = new DataView();
                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        ds.Tables[2].DefaultView.RowFilter = "LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                        dvex = ds.Tables[2].DefaultView;
                        if (dvex.Count > 0 && dvex != null)
                        {
                            for (int k = 0; k < dvex.Count; k++)
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                tot_amount += amount;
                            }
                        }
                    }
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                    if (!grandtotal.ContainsKey(ColCntGrd - 2))
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                        amount += tot_amount;
                        grandtotal.Remove(ColCntGrd - 2);
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                    }
                    tot_amount = 0;
                    //paymode value
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                        {
                            if (chkl_paid.Items[pay].Selected == true)
                            {
                                ds.Tables[1].DefaultView.RowFilter = "HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                                dv = ds.Tables[1].DefaultView;
                                int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                for (int k = 0; k < dv.Count; k++)
                                {
                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                    fnlamount = fnlamount + totamount;
                                    paidamount = paidamount + Convert.ToDouble(totamount);
                                }
                                drowGrd[colnew] = Convert.ToString(paidamount);
                                if (!grandtotal.ContainsKey(colnew))
                                    grandtotal.Add(colnew, Convert.ToString(paidamount));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                    amount += paidamount;
                                    grandtotal.Remove(colnew);
                                    grandtotal.Add(colnew, Convert.ToString(amount));
                                }
                                paidamount = 0;
                            }
                        }
                        if (check != 0)
                        {
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                amount += fnlamount;
                                grandtotal.Remove(ColCntGrd - 5);
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                            }
                        }
                        //balance
                        if (totalvalue != 0)
                        {
                            bal = totalvalue - fnlamount;
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                            if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                amount += bal;
                                grandtotal.Remove(ColCntGrd - 4);
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                            }
                            fnlamount = 0;
                            if (bal == 0)
                                dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                            else
                                dicRowColor.Add(dtReport.Rows.Count, "Balance");
                        }
                    }
                    else
                    {
                        bal = totalvalue;
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                        if (!grandtotal.ContainsKey(ColCntGrd - 4))
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                            amount += bal;
                            grandtotal.Remove(ColCntGrd - 4);
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                        }
                    }
                    dtReport.Rows.Add(drowGrd);
                }

                #endregion

                #region grandtot

                drowGrd = dtReport.NewRow();
                drowGrd[0] = "Grand Total";
                double grandvalue = 0;
                for (int j = 4; j < dtReport.Columns.Count; j++)
                {
                    double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                    drowGrd[j] = Convert.ToString(grandvalue);
                }
                dtReport.Rows.Add(drowGrd);

                #endregion

                #region visible

                Grdledger.DataSource = dtReport;
                Grdledger.DataBind();
                Grdledger.Visible = true;

                GridViewRow row = Grdledger.Rows[0];
                GridViewRow previousRow = Grdledger.Rows[1];

                for (int i = 0; i < dtReport.Columns.Count; i++)
                {
                    if (row.Cells[i].Text == previousRow.Cells[i].Text)
                    {
                        row.Cells[i].RowSpan = 2;
                        previousRow.Cells[i].Visible = false;
                        //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                        //                       previousRow.Cells[i].RowSpan + 1;
                        //previousRow.Cells[i].Visible = false;
                    }
                }
                //ColumnSpan

                for (int cell = Grdledger.Rows[0].Cells.Count - 1; cell > 0; cell--)
                {
                    TableCell colum = Grdledger.Rows[0].Cells[cell];
                    TableCell previouscol = Grdledger.Rows[0].Cells[cell - 1];
                    if (colum.Text == previouscol.Text)
                    {
                        if (previouscol.ColumnSpan == 0)
                        {
                            if (colum.ColumnSpan == 0)
                            {
                                previouscol.ColumnSpan += 2;
                            }
                            else
                            {
                                previouscol.ColumnSpan += colum.ColumnSpan + 1;
                            }
                            colum.Visible = false;
                        }
                    }
                }
                foreach (KeyValuePair<int, string> dr in dicRowColor)
                {
                    int g = dr.Key;
                    string DicValue = dr.Value;
                    if (DicValue == "NoBalance")
                    {
                        Grdledger.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                    }
                    if (DicValue == "Balance")
                    {
                        Grdledger.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                    }
                }
                ledger.Visible = true;
                divledger.Visible = true;
                lbl_ledg.Visible = true;
                //  btn_fpled.Visible = true;
                //  btn_fpbat.Visible = false;
                lbl_ledg.Text = "->Header(" + colhedername + ")->Ledger";
                //  lbl_ledg.Text = cellclicktext;
                // rptprint.Visible = true;
                // rptprint.Attributes.Add("Style", "margin-top:-460px; margin-left:10px;");
                // pnlledgercolorder.Visible = true;
                // Pnlledcolorder.Visible = true;
                // loadledgercoloreder();
                ViewState["ledger"] = 1;
                ViewState["batch"] = null;
                ViewState["degree"] = null;
                ViewState["dept"] = null;
                ViewState["sem"] = null;
                ViewState["stud"] = null;
                // string fpledname = "Ledger";
                rptprint.Visible = true;
                txtexcelname.Text = "";
                lblvalidation1.Text = "";
                #endregion
            }
            else
            {
                Grdledger.Visible = false;
                divledger.Visible = false;
                lbl_ledg.Visible = false;
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                lbl_alert.Text = "No Record Found";
            }
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region ledger

    protected void Grdledger_OnRowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            for (int i = 1; i < e.Row.Cells.Count; i++)
            {
                TableCell cell = e.Row.Cells[i];
                cell.Attributes["onmouseover"] = "this.style.cursor='pointer';";
                cell.Attributes["onmouseout"] = "this.style.textDecoration='none';";
                cell.Attributes["onclick"] = string.Format("document.getElementById('{0}').value = {1}; {2}"
                   , GrdledgerSelectedIndex.ClientID, i
                   , Page.ClientScript.GetPostBackClientHyperlink((GridView)sender, string.Format("Select${0}", e.Row.RowIndex)));
            }
        }
    }

    protected void Grdledger_SelectedIndexChanged(Object sender, EventArgs e)
    {
        var grid = (GridView)sender;
        GridViewRow selectedRow = grid.SelectedRow;
        int rowIndex = grid.SelectedIndex;
        int selectedCellIndex = int.Parse(this.GrdledgerSelectedIndex.Value);

        #region getvalue
        string batch1 = "";
        string degcourseid = "";
        string deptdegcode = "";
        string sem = "";
        string sec = "";
        string stud = "";
        string seatype = "";
        string studtype = "";
        string paid = "";
        string allot = "";
        string consession = "";
        string Finyearvalue = "";

        batch1 = Convert.ToString(getCblSelectedValue(cbl_batch));
        degcourseid = Convert.ToString(getCblSelectedValue(cbl_degree));
        deptdegcode = Convert.ToString(getCblSelectedValue(cbl_dept));
        sem = Convert.ToString(getCblSelectedValue(cbl_sem));
        sec = Convert.ToString(getCblSelectedValue(cbl_sect));
        stud = Convert.ToString(getCblSelectedValue(cbl_stud));
        seatype = Convert.ToString(getCblSelectedValue(cbl_seat));
        studtype = Convert.ToString(getCblSelectedValue(cbl_studtype));
        paid = Convert.ToString(getCblSelectedValue(chkl_paid));
        // headervalue = Convert.ToString(getCblSelectedValue(chkl_studhed));
        //ledgercode = Convert.ToString(getCblSelectedValue(chkl_studled));
        Finyearvalue = Convert.ToString(getCblSelectedValue(chklsfyear));

        //string cc = "";
        //string debar = "";
        //string disc = "";
        //if (cblinclude.Items.Count > 0)
        //{
        //    for (int i = 0; i < cblinclude.Items.Count; i++)
        //    {
        //        if (cblinclude.Items[i].Selected == true)
        //        {
        //            if (cblinclude.Items[i].Value == "1")
        //            {
        //                cc = " and r.cc=0";
        //            }
        //            if (cblinclude.Items[i].Value == "2")
        //            {
        //                debar = " and r.Exam_Flag<>'debar'";
        //            }
        //            if (cblinclude.Items[i].Value == "3")
        //            {
        //                disc = "";
        //            }
        //        }
        //        else
        //        {
        //            disc = " and r.DelFlag=0";
        //        }
        //    }
        //}
        //else
        //{
        //    disc = " and r.DelFlag=0";
        //}


        string cc = "";
        string debar = "";
        string disc = "";
        string commondist = "";
        if (cblinclude.Items.Count > 0)
        {
            for (int i = 0; i < cblinclude.Items.Count; i++)
            {
                if (cblinclude.Items[i].Selected == true)
                {
                    if (cblinclude.Items[i].Value == "1")
                    {
                        cc = " r.cc=1";
                    }
                    if (cblinclude.Items[i].Value == "2")
                    {
                        debar = "  r.Exam_Flag like '%debar'";
                    }
                    if (cblinclude.Items[i].Value == "3")
                    {
                        disc = "  r.DelFlag=1";
                    }
                }
            }
        }

        if (cc != "" && debar == "" && disc == "")
            commondist = " and (" + cc + " or r.cc=0)  and r.Exam_Flag<>'debar' and r.DelFlag=0";

        if (cc == "" && debar != "" && disc == "")
            commondist = " and r.cc=0  and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

        if (cc == "" && debar == "" && disc != "")
            commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and (" + disc + " or r.DelFlag=0)";

        if (cc != "" && debar != "" && disc == "")
            commondist = " and (" + cc + " or r.cc=0) and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

        if (cc == "" && debar != "" && disc != "")
            commondist = " and r.cc=0 and (" + debar + " or r.Exam_Flag<>'debar')  and (" + disc + " or r.DelFlag=0)";

        if (cc != "" && debar == "" && disc != "")
            commondist = " and (" + cc + " or r.cc=0) and r.Exam_Flag<>'debar'  and (" + disc + " or r.DelFlag=0)";

        else if (cc == "" && debar == "" && disc == "")
            commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and r.DelFlag=0";

        if (cc != "" && debar != "" && disc != "")
            commondist = "";

        //  btn_fpdeg.Visible = false;
        //  btn_fpdep.Visible = false;
        divdegr.Visible = false;
        divdep.Visible = false;
        divsema.Visible = false;
        div7.Visible = false;

        string fromdate = "";
        string todate = "";
        int datewise = 0;
        if (chk_datewise.Checked == true)
        {
            datewise = 1;
            if (datewise == 1)
            {
                fromdate = txt_fromdate.Text;
                todate = txt_todate.Text;
                if (fromdate != "" && todate != "")
                {
                    string[] frdate = fromdate.Split('/');
                    if (frdate.Length == 3)
                    {
                        fromdate = frdate[1].ToString() + "/" + frdate[0].ToString() + "/" + frdate[2].ToString();
                    }
                    string[] tdate = todate.Split('/');
                    if (tdate.Length == 3)
                    {
                        todate = tdate[1].ToString() + "/" + tdate[0].ToString() + "/" + tdate[2].ToString();
                    }
                }
            }
        }

        #region academic year Added by saranya on 03/01/2018

        string acdBatchYear = string.Empty;
        string feecaT = string.Empty;
        string feeCategory = string.Empty;
        string BatchYear = string.Empty;
        string batch_year = string.Empty;
        Dictionary<string, string> htAcademic = new Dictionary<string, string>();
        try
        {
            string settingType = string.Empty;
            if (rblTypeNew.SelectedIndex == 0)
                settingType = "0";
            else if (rblTypeNew.SelectedIndex == 1)
                settingType = "1";
            else if (rblTypeNew.SelectedIndex == 2)
                settingType = "2";
            string collegecode = Convert.ToString(ddl_collegename.SelectedItem.Value);
            string acdYears = Convert.ToString(ddlAcademic.SelectedItem.Text);
            string selQ = " SELECT distinct ACD_COLLEGE_CODE,c.collname,ACD_YEAR,ACD_BATCH_YEAR,ACD_FEECATEGORY,t.textval FROM FT_ACADEMICYEAR AY,FT_ACADEMICYEAR_DETAILED AYD,collinfo c,textvaltable t WHERE c.college_code=ay.acd_college_code and AY.ACA_YEAR_PK=AYD.ACA_YEAR_FK and textcriteria='FEECA' and t.textcode=ayd.ACD_FEECATEGORY and t.college_code=ay.ACD_COLLEGE_CODE AND  ACD_COLLEGE_CODE IN('" + collegecode + "') and ACD_YEAR in('" + acdYears + "') and ACD_SETTING_TYPE='" + settingType + "' order by ACD_COLLEGE_CODE  asc,ACD_YEAR desc,ACD_FEECATEGORY asc";
            DataSet dsPrevAMount = da.select_method_wo_parameter(selQ, "Text");
            if (dsPrevAMount.Tables.Count > 0 && dsPrevAMount.Tables[0].Rows.Count > 0)
            {
                DataTable dtAcdYear = dsPrevAMount.Tables[0].DefaultView.ToTable(true, "ACD_YEAR", "ACD_COLLEGE_CODE", "collname");
                DataTable dtBatchYear = dsPrevAMount.Tables[0].DefaultView.ToTable(true, "ACD_YEAR", "ACD_BATCH_YEAR", "ACD_COLLEGE_CODE");
                DataTable dtFeecat = dsPrevAMount.Tables[0].DefaultView.ToTable();

                if (dtAcdYear.Rows.Count > 0)
                {
                    int Sno = 0;
                    for (int row = 0; row < dtAcdYear.Rows.Count; row++)
                    {
                        Sno++;
                        string acdYear = Convert.ToString(dtAcdYear.Rows[row]["ACD_YEAR"]);
                        string clgCode = Convert.ToString(dtAcdYear.Rows[row]["ACD_COLLEGE_CODE"]);
                        dtBatchYear.DefaultView.RowFilter = "ACD_YEAR='" + acdYear + "' and ACD_COLLEGE_CODE='" + clgCode + "'";
                        DataTable dtBatch = dtBatchYear.DefaultView.ToTable();
                        if (dtBatch.Rows.Count > 0)
                        {
                            for (int bat = 0; bat < dtBatch.Rows.Count; bat++)
                            {
                                acdBatchYear = Convert.ToString(dtBatch.Rows[bat]["ACD_BATCH_YEAR"]);
                                dtFeecat.DefaultView.RowFilter = "ACD_YEAR='" + acdYear + "' and ACD_BATCH_YEAR='" + acdBatchYear + "' and ACD_COLLEGE_CODE='" + clgCode + "'";
                                DataTable dtFee = dtFeecat.DefaultView.ToTable();
                                if (dtFee.Rows.Count > 0)
                                {
                                    StringBuilder sbSem = new StringBuilder();
                                    StringBuilder sbSemStr = new StringBuilder();
                                    for (int fee = 0; fee < dtFee.Rows.Count; fee++)
                                    {
                                        feecaT = Convert.ToString(dtFee.Rows[fee]["ACD_FEECATEGORY"]);
                                        string feecaTStr = Convert.ToString(dtFee.Rows[fee]["textval"]);
                                        sbSem.Append(feecaT + ",");
                                        // sbSemStr.Append(feecaTStr + ",");
                                        BatchYear = Convert.ToString(dtFee.Rows[fee]["ACD_BATCH_YEAR"]);
                                    }
                                    if (feecaT == "")
                                    {
                                        feeCategory = feecaT;
                                    }
                                    else
                                    {
                                        feeCategory += "'" + "," + "'" + feecaT;
                                    }
                                    if (BatchYear == "")
                                    {
                                        batch_year = BatchYear;
                                    }
                                    else
                                    {
                                        batch_year += "'" + "," + "'" + BatchYear;
                                    }

                                    if (sbSem.Length > 0)
                                        sbSem.Remove(sbSem.Length - 1, 1);
                                    if (!htAcademic.ContainsKey(clgCode + "$" + acdBatchYear))
                                        htAcademic.Add(clgCode + "$" + acdBatchYear, Convert.ToString(sbSem));
                                    //if (sbSemStr.Length > 0)
                                    //    sbSemStr.Remove(sbSemStr.Length - 1, 1);    


                                }
                            }
                        }
                    }
                }
            }
        }
        catch { }
        #endregion

        // divbatch.Visible = false;               
        lbl_degr.Visible = false;
        lbl_degr.Text = "";
        lbl_dep.Visible = false;
        lbl_dep.Text = "";
        divdegree.Visible = false;
        divdept.Visible = false;
        lbl_sem.Visible = false; ;
        lbl_sem.Text = "";
        divsem.Visible = false;
        //pnl_degcolorder.Visible = false;
        //pnl_degreecolorder.Visible = false;
        //pnl_deptcolord.Visible = false;
        //pnl_deptcolorder.Visible = false;
        //pnl_semcolord.Visible = false;
        //pnl_semcolorder.Visible = false;
        //pnl_studcolord.Visible = false;
        //pnl_studcolorder.Visible = false;
        divstudcell.Visible = false;
        GrdStud.Visible = false;
        lbl_semcell.Text = "";
        lbl_semcell.Visible = false;
        string hedcount = "";
        string ledcount = "";
        string selqry = "";
        string activerow = Convert.ToString(rowIndex);
        string activecol = Convert.ToString(selectedCellIndex);

        int actnew = 0;
        int actbal = 0;
        int actpaidtotal = 0;
        int refundamt = 0;
        int excessamt = 0;
        int fineamt = 0;
        if (activecol.Trim() != "")
        {
            actnew = Convert.ToInt32(activecol);
            actpaidtotal = Convert.ToInt32(16);
            actbal = Convert.ToInt32(17);
            refundamt = Convert.ToInt32(18);
            excessamt = Convert.ToInt32(19);
            fineamt = Convert.ToInt32(20);
        }

        string gettagvalue = "";
        if (actnew > 8)
        {
            gettagvalue = Convert.ToString(Grdledger.Rows[1].Cells[actnew].Text);
        }

        int act = Convert.ToInt32(activerow);

        if (act == Grdledger.Rows.Count - 1)
        {

            for (int i = 0; i < Grdledger.Rows.Count - 1; i++)
            {
                if ((hedcount == "") && (ledcount == ""))
                {
                    hedcount = Convert.ToString(Grdledger.Rows[Convert.ToInt32(i)].Cells[2].Text);
                    ledcount = Convert.ToString(Grdledger.Rows[Convert.ToInt32(i)].Cells[4].Text);
                }
                else
                {
                    hedcount = hedcount + "','" + "" + Convert.ToString(Grdledger.Rows[Convert.ToInt32(i)].Cells[2].Text) + "";
                    ledcount = ledcount + "','" + "" + Convert.ToString(Grdledger.Rows[Convert.ToInt32(i)].Cells[4].Text) + "";
                }
            }

        }

        string headercode = "";
        string ledgercode = "";
        headercode = Convert.ToString(Grdledger.Rows[Convert.ToInt32(activerow)].Cells[2].Text);
        ledgercode = Convert.ToString(Grdledger.Rows[Convert.ToInt32(activerow)].Cells[4].Text);

        if ((hedcount.Trim() != "") && (ledcount != ""))
        {
            headercode = hedcount;
            ledgercode = ledcount;
        }
        // string colledname = "";
        if (Grdledger.Rows.Count > 0)
        {
            colledname = Convert.ToString(Grdledger.Rows[0].Cells[Convert.ToInt32(activecol)].Text);
            if (colledname.Trim() == "")
            {
                colledname = Convert.ToString(Grdledger.Rows[1].Cells[Convert.ToInt32(activecol)].Text);
            }
        }
        Boolean flag = false;
        Boolean flag1 = false;
        #endregion

        if (!cbAcdYear.Checked)
        {
            #region newquery

            //detail
            selqry = selqry + " SELECT A.HeaderFK,LedgerFK, p.batch_year,SUM(FeeAmount)as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=P.App_No AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
            if (batch1 != "")
            {
                selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            }
            if (deptdegcode != "")
            {
                selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
            }
            if (sem != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            }
            if (headercode != "")
            {
                selqry = selqry + " and a.HeaderFK in ('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
            }
            //if (chkinclude.Checked == true)
            //{
            //    selqry = selqry + " and r.DelFlag=0 ";
            //}
            //if (cc != "")
            //{
            //    selqry = selqry + cc;
            //}
            //if (debar != "")
            //{
            //    selqry = selqry + debar;
            //}
            //if (disc != "")
            //{
            //    selqry = selqry + disc;
            //}
            if (commondist.Trim() != "")
            {
                selqry = selqry + commondist;
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                }
            }
            selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK,p.batch_year ";
            if (activecol.Trim() == "6")
            {
                selqry = selqry + " having SUM(DeductAmout) > 0 ";
            }
            if (activecol.Trim() == "7")
            {
                selqry = selqry + " having SUM(FromGovtAmt) > 0";
            }
            if (activecol.Trim() == Convert.ToString(actbal))
            {
                selqry = selqry + " having SUM(BalAmount) > 0";
            }
            if (activecol.Trim() == Convert.ToString(actpaidtotal))
            {
                selqry = selqry + " having sum(BalAmount) = 0";
            }
            if (activecol.Trim() == Convert.ToString(refundamt))
            {
                selqry = selqry + "having SUM(RefundAmount)>0";
            }
            //paymode
            selqry = selqry + "SELECT p.batch_year ,PayMode,SUM(Debit) as total,HeaderFK,LedgerFK FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
            if (usBasedRights == true)
                selqry += " and a.EntryUserCode in('" + usercode + "')";
            if (batch1 != "")
            {
                selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            }
            if (deptdegcode != "")
            {
                selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
            }
            if (sem != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            }
            if (headercode != "")
            {
                selqry = selqry + " and HeaderFK in ('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
            }
            //if (chkinclude.Checked == true)
            //{
            //    selqry = selqry + " and r.DelFlag=0 ";
            //}
            //if (cc != "")
            //{
            //    selqry = selqry + cc;
            //}
            //if (debar != "")
            //{
            //    selqry = selqry + debar;
            //}
            //if (disc != "")
            //{
            //    selqry = selqry + disc;
            //}
            if (commondist.Trim() != "")
            {
                selqry = selqry + commondist;
            }
            if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
            {
                selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                }
            }
            selqry = selqry + "GROUP BY p.batch_year,PayMode,HeaderFK,LedgerFK";

            //excess
            selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,p.Batch_Year from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
            if (batch1 != "")
            {
                selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            }
            if (deptdegcode != "")
            {
                selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
            }
            if (sem != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            }
            if (headercode != "")
            {
                selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
            }
            //if (chkinclude.Checked == true)
            //{
            //    selqry = selqry + " and r.DelFlag=0 ";
            //}
            //if (cc != "")
            //{
            //    selqry = selqry + cc;
            //}
            //if (debar != "")
            //{
            //    selqry = selqry + debar;
            //}
            //if (disc != "")
            //{
            //    selqry = selqry + disc;
            //}
            if (commondist.Trim() != "")
            {
                selqry = selqry + commondist;
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                }
            }
            selqry = selqry + "GROUP BY A.HeaderFK ,p.Batch_Year";
            if (activecol.Trim() == Convert.ToString(excessamt))
            {
                selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
                flag = true;
            }
            selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";

            #endregion
        }
        else
        {
            #region newquery

            //detail
            selqry = selqry + " SELECT A.HeaderFK,LedgerFK, p.batch_year,SUM(FeeAmount)as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=P.App_No AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and p.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "')";
            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            if (deptdegcode != "")
            {
                selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
            }
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            //}
            if (headercode != "")
            {
                selqry = selqry + " and a.HeaderFK in ('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
            }
            //if (chkinclude.Checked == true)
            //{
            //    selqry = selqry + " and r.DelFlag=0 ";
            //}
            //if (cc != "")
            //{
            //    selqry = selqry + cc;
            //}
            //if (debar != "")
            //{
            //    selqry = selqry + debar;
            //}
            //if (disc != "")
            //{
            //    selqry = selqry + disc;
            //}
            if (commondist.Trim() != "")
            {
                selqry = selqry + commondist;
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                }
            }
            selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK,p.batch_year ";
            if (activecol.Trim() == "4")
            {
                selqry = selqry + " having SUM(DeductAmout) > 0 ";
            }
            if (activecol.Trim() == "5")
            {
                selqry = selqry + " having SUM(FromGovtAmt) > 0";
            }
            if (activecol.Trim() == Convert.ToString(actbal))
            {
                selqry = selqry + " having SUM(BalAmount) > 0";
            }
            if (activecol.Trim() == Convert.ToString(actpaidtotal))
            {
                selqry = selqry + " having sum(BalAmount) = 0";
            }
            if (activecol.Trim() == Convert.ToString(refundamt))
            {
                selqry = selqry + "having SUM(RefundAmount)>0";
            }
            //paymode
            selqry = selqry + "SELECT p.batch_year ,PayMode,SUM(Debit) as total,HeaderFK,LedgerFK FROM FT_FinDailyTransaction A,Applyn P,Registration r WHERE A.App_No = P.app_no and r.App_No=p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and p.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "')";
            if (usBasedRights == true)
                selqry += " and a.EntryUserCode in('" + usercode + "')";
            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            if (deptdegcode != "")
            {
                selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
            }
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            //}
            if (headercode != "")
            {
                selqry = selqry + " and HeaderFK in ('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
            }
            //if (chkinclude.Checked == true)
            //{
            //    selqry = selqry + " and r.DelFlag=0 ";
            //}
            //if (cc != "")
            //{
            //    selqry = selqry + cc;
            //}
            //if (debar != "")
            //{
            //    selqry = selqry + debar;
            //}
            //if (disc != "")
            //{
            //    selqry = selqry + disc;
            //}
            if (commondist.Trim() != "")
            {
                selqry = selqry + commondist;
            }
            if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
            {
                selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                }
            }
            selqry = selqry + "GROUP BY p.batch_year,PayMode,HeaderFK,LedgerFK";

            //excess
            selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,p.Batch_Year from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No and r.App_No=p.app_no AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and p.Batch_Year in ('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "')";
            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            if (deptdegcode != "")
            {
                selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
            }
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            //}
            if (headercode != "")
            {
                selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
            }
            //if (chkinclude.Checked == true)
            //{
            //    selqry = selqry + " and r.DelFlag=0 ";
            //}
            //if (cc != "")
            //{
            //    selqry = selqry + cc;
            //}
            //if (debar != "")
            //{
            //    selqry = selqry + debar;
            //}
            //if (disc != "")
            //{
            //    selqry = selqry + disc;
            //}
            if (commondist.Trim() != "")
            {
                selqry = selqry + commondist;
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                }
            }
            selqry = selqry + "GROUP BY A.HeaderFK ,p.Batch_Year";
            if (activecol.Trim() == Convert.ToString(excessamt))
            {
                selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
                flag = true;
            }
            selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";

            #endregion
        }

        bool paymodecheck = false;
        ds = d2.select_method_wo_parameter(selqry, "Text");
        if (gettagvalue.Trim() != "")
        {
            if (ds.Tables[1].Rows.Count > 0)
            {
                paymodecheck = true;
            }
        }
        else
        {
            paymodecheck = true;
        }

        if (flag == true)
        {
            if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true && ds.Tables[2].Rows.Count > 0)
            {
                flag1 = true;
            }
        }
        else
        {
            if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true)
            {
                flag1 = true;
            }
        }
        if (flag1 == true)
        {
            #region fpbatch

            loadbatchcolumns();
            int check = 0;
            DataView dv = new DataView();
            ArrayList arrColbatchNames = new ArrayList();
            ArrayList arrColbatchNames2 = new ArrayList();
            Dictionary<int, string> dicLedRowColor = new Dictionary<int, string>();
            arrColbatchNames.Add("S.No");
            arrColbatchNames2.Add("S.No");
            dtReport.Columns.Add("S.No");
            arrColbatchNames.Add("Header Name");
            arrColbatchNames2.Add("Header Name");
            dtReport.Columns.Add("Header Name");
            arrColbatchNames.Add("Header pk");
            arrColbatchNames2.Add("Header pk");
            dtReport.Columns.Add("Header pk");
            arrColbatchNames.Add("Ledger Name");
            arrColbatchNames2.Add("Ledger Name");
            dtReport.Columns.Add("Ledger Name");
            arrColbatchNames.Add("Ledger pk");
            arrColbatchNames2.Add("Ledger pk");
            dtReport.Columns.Add("Ledger pk");
            arrColbatchNames.Add("Batch Year");
            arrColbatchNames2.Add("Batch Year");
            dtReport.Columns.Add("Batch Year");
            arrColbatchNames.Add("Allot");
            arrColbatchNames2.Add("Allot");
            dtReport.Columns.Add("Allot");
            arrColbatchNames.Add("Concession");
            arrColbatchNames2.Add("Concession");
            dtReport.Columns.Add("Concession");
            arrColbatchNames.Add("Scholarship");
            arrColbatchNames2.Add("Scholarship");
            dtReport.Columns.Add("Scholarship");
            arrColbatchNames.Add("Total");
            arrColbatchNames2.Add("Total");
            dtReport.Columns.Add("Total");

            Hashtable newhash = new Hashtable();

            if (chkl_paid.Items.Count > 0)
            {
                for (int s = 0; s < chkl_paid.Items.Count; s++)
                {
                    if (chkl_paid.Items[s].Selected == true)
                    {
                        check++;
                        arrColbatchNames.Add("Paid");
                        arrColbatchNames2.Add(chkl_paid.Items[s].Text);
                        dtReport.Columns.Add(chkl_paid.Items[s].Text);
                        newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                    }
                }
                if (check != 0)
                {
                    arrColbatchNames.Add("Paid");
                    arrColbatchNames2.Add("Total Paid");
                    dtReport.Columns.Add("Total Paid");
                }
            }
            if (check == 0)
            {
                arrColbatchNames.Add("Paid");
                arrColbatchNames2.Add("Paid");
                dtReport.Columns.Add("Paid");
            }

            arrColbatchNames.Add("Balance");
            arrColbatchNames2.Add("Balance");
            dtReport.Columns.Add("Balance");
            arrColbatchNames.Add("Refund Amount");
            arrColbatchNames2.Add("Refund Amount");
            dtReport.Columns.Add("Refund Amount");
            arrColbatchNames.Add("Excess Amount");
            arrColbatchNames2.Add("Excess Amount");
            dtReport.Columns.Add("Excess Amount");
            arrColbatchNames.Add("Fine Amount");
            arrColbatchNames2.Add("Fine Amount");
            dtReport.Columns.Add("Fine Amount");
            DataRow drHdr1 = dtReport.NewRow();
            DataRow drHdr2 = dtReport.NewRow();
            for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
            {
                drHdr1[grCol] = arrColbatchNames[grCol];
                drHdr2[grCol] = arrColbatchNames2[grCol];
            }
            dtReport.Rows.Add(drHdr1);
            dtReport.Rows.Add(drHdr2);

            #endregion

            #region  value
            double totamount = 0;
            double fnlamount = 0;
            double allotamt = 0;
            double consamt = 0;
            double govt = 0;
            double tot_amount = 0;
            double totalvalue = 0;
            double bal = 0;
            double paidamount = 0;
            int ColCntGrd = 0;
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                drowGrd = dtReport.NewRow();
                drowGrd[0] = Convert.ToString(i + 1);
                //fpbatch.Sheets[0].Rows.Count = ds.Tables[0].Rows.Count;
                //fpbatch.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                ds.Tables[3].DefaultView.RowFilter = "LedgerPK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                dvhead = ds.Tables[3].DefaultView;
                if (Convert.ToString(dvhead) != "" && dvhead != null)
                {
                    drowGrd[1] = Convert.ToString(dvhead[0]["Headername"]);
                    drowGrd[2] = Convert.ToString(dvhead[0]["HeaderFK"]);
                    drowGrd[3] = Convert.ToString(dvhead[0]["Ledgername"]);
                    drowGrd[4] = Convert.ToString(dvhead[0]["LedgerPK"]);
                }
                drowGrd[5] = Convert.ToString(ds.Tables[0].Rows[i]["batch_year"].ToString());
                //fpbatch.Sheets[0].Cells[i, 3].Tag = Convert.ToString(ds.Tables[0].Rows[i]["batch_year"].ToString());
                //allot
                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                drowGrd[6] = Convert.ToString(allotamt);
                if (!grandtotal.ContainsKey(6))
                    grandtotal.Add(6, Convert.ToString(allotamt));
                else
                {
                    double amount = 0;
                    double.TryParse(Convert.ToString(grandtotal[6]), out amount);
                    amount += allotamt;
                    grandtotal.Remove(6);
                    grandtotal.Add(6, Convert.ToString(amount));
                }
                //consession
                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                drowGrd[7] = Convert.ToString(consamt);
                if (!grandtotal.ContainsKey(7))
                    grandtotal.Add(7, Convert.ToString(consamt));
                else
                {
                    double amount = 0;
                    double.TryParse(Convert.ToString(grandtotal[7]), out amount);
                    amount += consamt;
                    grandtotal.Remove(7);
                    grandtotal.Add(7, Convert.ToString(amount));
                }
                //government
                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                drowGrd[8] = Convert.ToString(govt);
                if (!grandtotal.ContainsKey(8))
                    grandtotal.Add(8, Convert.ToString(govt));
                else
                {
                    double amount = 0;
                    double.TryParse(Convert.ToString(grandtotal[8]), out amount);
                    amount += govt;
                    grandtotal.Remove(8);
                    grandtotal.Add(8, Convert.ToString(amount));
                }
                //total
                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                drowGrd[9] = Convert.ToString(totalvalue);
                if (!grandtotal.ContainsKey(9))
                    grandtotal.Add(9, Convert.ToString(totalvalue));
                else
                {
                    double amount = 0;
                    double.TryParse(Convert.ToString(grandtotal[9]), out amount);
                    amount += totalvalue;
                    grandtotal.Remove(9);
                    grandtotal.Add(9, Convert.ToString(amount));
                }
                //paid paymode count=0
                double paidvalue = 0;
                if (check == 0)
                {
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                    fnlamount = Convert.ToDouble(paidvalue);
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                    //fpbatch.Sheets[0].Cells[i, fpbatch.Sheets[0].ColumnCount - 5].Text = Convert.ToString(paidvalue);
                    if (!grandtotal.ContainsKey(ColCntGrd - 5))
                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                        amount += paidvalue;
                        grandtotal.Remove(ColCntGrd - 5);
                        grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                    }
                }
                //refund
                double refund = 0;
                double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                ColCntGrd = dtReport.Columns.Count;
                drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                //fpbatch.Sheets[0].Cells[i, fpbatch.Sheets[0].ColumnCount - 3].Text = Convert.ToString(refund);
                if (!grandtotal.ContainsKey(ColCntGrd - 3))
                    grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                else
                {
                    double amount = 0;
                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                    amount += refund;
                    grandtotal.Remove(ColCntGrd - 3);
                    grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                }

                //excess
                DataView dvex = new DataView();
                if (ds.Tables[2].Rows.Count > 0)
                {
                    ds.Tables[2].DefaultView.RowFilter = "Batch_Year='" + Convert.ToString(ds.Tables[0].Rows[i]["Batch_Year"]) + "' and HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "'";
                    //and LedgerFK='"+Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"])+"'
                    dvex = ds.Tables[2].DefaultView;
                    if (dvex.Count > 0 && dvex != null)
                    {
                        for (int k = 0; k < dvex.Count; k++)
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                            tot_amount += amount;
                        }
                    }
                }
                ColCntGrd = dtReport.Columns.Count;
                drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                //fpbatch.Sheets[0].Cells[i, fpbatch.Sheets[0].ColumnCount - 2].Text = Convert.ToString(tot_amount);
                if (!grandtotal.ContainsKey(ColCntGrd - 2))
                    grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                else
                {
                    double amount = 0;
                    double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                    amount += tot_amount;
                    grandtotal.Remove(ColCntGrd - 2);
                    grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                }
                tot_amount = 0;

                //paymode values
                if (ds.Tables[1].Rows.Count > 0)
                {
                    for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                    {
                        if (chkl_paid.Items[pay].Selected == true)
                        {
                            ds.Tables[1].DefaultView.RowFilter = "batch_year='" + Convert.ToString(ds.Tables[0].Rows[i]["batch_year"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and HeaderFK ='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' and LedgerFK ='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                            dv = ds.Tables[1].DefaultView;
                            int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                            for (int k = 0; k < dv.Count; k++)
                            {
                                double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                fnlamount = fnlamount + totamount;
                                paidamount = paidamount + Convert.ToDouble(totamount);
                            }

                            drowGrd[colnew] = Convert.ToString(tot_amount);
                            //fpbatch.Sheets[0].Cells[i, colnew].Text = Convert.ToString(paidamount);
                            if (!grandtotal.ContainsKey(colnew))
                                grandtotal.Add(colnew, Convert.ToString(paidamount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                amount += paidamount;
                                grandtotal.Remove(colnew);
                                grandtotal.Add(colnew, Convert.ToString(amount));
                            }
                            paidamount = 0;
                        }
                    }
                    if (check != 0)
                    {
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);

                        //fpbatch.Sheets[0].Cells[i, fpbatch.Sheets[0].ColumnCount - 5].Text = Convert.ToString(fnlamount);
                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                            amount += fnlamount;
                            grandtotal.Remove(ColCntGrd - 5);
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                        }
                    }
                    //balance
                    if (totalvalue != 0)
                    {
                        bal = totalvalue - fnlamount;
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                        //fpbatch.Sheets[0].Cells[i, fpbatch.Sheets[0].ColumnCount - 4].Text = Convert.ToString(bal);
                        if (!grandtotal.ContainsKey(ColCntGrd - 4))
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                            amount += bal;
                            grandtotal.Remove(ColCntGrd - 4);
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                        }
                        fnlamount = 0;
                        if (bal == 0)
                            dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                        else
                            dicRowColor.Add(dtReport.Rows.Count, "Balance");
                    }
                }
                else
                {
                    bal = totalvalue;
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                    if (!grandtotal.ContainsKey(ColCntGrd - 4))
                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                        amount += bal;
                        grandtotal.Remove(ColCntGrd - 4);
                        grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                    }
                }
                dtReport.Rows.Add(drowGrd);
            }

            #endregion

            #region grandtot

            drowGrd = dtReport.NewRow();
            drowGrd[0] = "Grand Total";
            double grandvalue = 0;
            for (int j = 6; j < dtReport.Columns.Count; j++)
            {
                double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                drowGrd[j] = Convert.ToString(grandvalue);
            }
            dtReport.Rows.Add(drowGrd);

            #endregion

            #region visible

            GrdBatch.DataSource = dtReport;
            GrdBatch.DataBind();
            GrdBatch.Visible = true;

            GridViewRow row = GrdBatch.Rows[0];
            GridViewRow previousRow = GrdBatch.Rows[1];

            for (int i = 0; i < dtReport.Columns.Count; i++)
            {
                if (row.Cells[i].Text == previousRow.Cells[i].Text)
                {
                    row.Cells[i].RowSpan = 2;
                    previousRow.Cells[i].Visible = false;
                    //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                    //                       previousRow.Cells[i].RowSpan + 1;
                    //previousRow.Cells[i].Visible = false;
                }
            }
            //ColumnSpan

            for (int cell = GrdBatch.Rows[0].Cells.Count - 1; cell > 0; cell--)
            {
                TableCell colum = GrdBatch.Rows[0].Cells[cell];
                TableCell previouscol = GrdBatch.Rows[0].Cells[cell - 1];
                if (colum.Text == previouscol.Text)
                {
                    if (previouscol.ColumnSpan == 0)
                    {
                        if (colum.ColumnSpan == 0)
                        {
                            previouscol.ColumnSpan += 2;
                        }
                        else
                        {
                            previouscol.ColumnSpan += colum.ColumnSpan + 1;
                        }
                        colum.Visible = false;
                    }
                }
            }
            foreach (KeyValuePair<int, string> dr in dicRowColor)
            {
                int g = dr.Key;
                string DicValue = dr.Value;
                if (DicValue == "NoBalance")
                {
                    GrdBatch.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                }
                if (DicValue == "Balance")
                {
                    GrdBatch.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                }
            }
            batch.Visible = true;
            divbatch.Visible = true;
            GrdBatch.Visible = true;
            // btn_fpbat.Visible = true;
            lbl_bat.Visible = true;
            lbl_bat.Text = "->Header(" + colhedername + ")->Ledger(" + colledname + ")->Batch";
            rptprint.Visible = true;
            // rptprint.Attributes.Add("Style", "margin-top:-360px; margin-left:10px;");
            // pnl_batchcolorder.Visible = true;
            // pnl_batcolorder.Visible = true;
            // loadbatchcolorder();
            ViewState["batch"] = 2;
            ViewState["degree"] = null;
            ViewState["dept"] = null;
            ViewState["sem"] = null;
            ViewState["stud"] = null;
            rptprint.Visible = true;
            txtexcelname.Text = "";
            lblvalidation1.Text = "";
            #endregion
        }
        else
        {
            GrdBatch.Visible = false;
            divbatch.Visible = false;
            lbl_bat.Visible = false;
            //pnl_batchcolorder.Visible = false;
            imgdiv2.Visible = true;
            lbl_alert.Visible = true;
            lbl_alert.Text = "No Record Found";
        }
    }

    protected void Grdledger_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.RowIndex == 0)
            {
                int totColcnt = 0;
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                if (!colord.Contains("1"))
                    e.Row.Cells[5].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[5].Visible = true;
                }
                if (!colord.Contains("2"))
                    e.Row.Cells[6].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[6].Visible = true;
                }
                if (!colord.Contains("3"))
                    e.Row.Cells[7].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[7].Visible = true;
                }
                if (!colord.Contains("4"))
                    e.Row.Cells[8].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[8].Visible = true;
                }
                if (!colord.Contains("5"))
                {
                    int check = 0;
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = false;
                        }
                    }
                    if (check > 0)
                    {
                        check++;
                        e.Row.Cells[8 + check].Visible = false;
                    }
                    totColcnt = check;
                }
                if (colord.Count == 0 || colord.Contains("5"))
                {
                    int check = 0;
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = true;
                        }
                    }
                    if (check >= 0)
                    {
                        check++;
                        e.Row.Cells[8 + check].Visible = true;
                    }
                    totColcnt = check;
                }
                totColcnt++;
                if (!colord.Contains("6"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                }
                totColcnt++;
                if (!colord.Contains("7"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                }
                totColcnt++;
                if (!colord.Contains("8"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                }
                totColcnt++;
                if (!colord.Contains("9"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
            }
            else
            {
                int totColcnt = 0;
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                if (!colord.Contains("1"))
                    e.Row.Cells[5].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[5].Visible = true;
                }
                if (!colord.Contains("2"))
                    e.Row.Cells[6].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[6].Visible = true;
                }
                if (!colord.Contains("3"))
                    e.Row.Cells[7].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[7].Visible = true;
                }
                if (!colord.Contains("4"))
                    e.Row.Cells[8].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[8].Visible = true;
                }
                if (!colord.Contains("5"))
                {
                    int check = 0;
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = false;
                        }
                    }
                    if (check > 0)
                    {
                        check++;
                        e.Row.Cells[8 + check].Visible = false;
                    }
                    totColcnt = check;
                }
                if (colord.Count == 0 || colord.Contains("5"))
                {
                    int check = 0;
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = true;
                            e.Row.Cells[8 + check].HorizontalAlign = HorizontalAlign.Right;
                        }
                    }
                    if (check >= 0)
                    {
                        check++;
                        e.Row.Cells[8 + check].Visible = true;
                        e.Row.Cells[8 + check].HorizontalAlign = HorizontalAlign.Right;
                    }
                    totColcnt = check;
                }
                totColcnt++;
                if (!colord.Contains("6"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                    e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                }
                totColcnt++;
                if (!colord.Contains("7"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                    e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                }
                totColcnt++;
                if (!colord.Contains("8"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                    e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                }
                totColcnt++;
                if (!colord.Contains("9"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                    e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Right;
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
            }
            if (e.Row.RowIndex == 1)
            {
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                int totColcnt = 0;
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                if (!colord.Contains("1"))
                    e.Row.Cells[5].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[5].Visible = true;
                    e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                }
                if (!colord.Contains("2"))
                    e.Row.Cells[6].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[6].Visible = true;
                    e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Center;
                }
                if (!colord.Contains("3"))
                    e.Row.Cells[7].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[7].Visible = true;
                    e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Center;
                }
                if (!colord.Contains("4"))
                    e.Row.Cells[8].Visible = false;
                if (colord.Count == 0)
                {
                    e.Row.Cells[8].Visible = true;
                    e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Center;
                }
                if (!colord.Contains("5"))
                {
                    int check = 0;
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = false;
                        }
                    }
                    if (check > 0)
                    {
                        check++;
                        e.Row.Cells[8 + check].Visible = false;
                    }
                    totColcnt = check;
                }
                if (colord.Count == 0 || colord.Contains("5"))
                {
                    int check = 0;
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            check++;
                            e.Row.Cells[8 + check].Visible = true;
                            e.Row.Cells[8 + check].HorizontalAlign = HorizontalAlign.Center;
                        }
                    }
                    if (check >= 0)
                    {
                        check++;
                        e.Row.Cells[8 + check].Visible = true;
                        e.Row.Cells[8 + check].HorizontalAlign = HorizontalAlign.Center;
                    }
                    totColcnt = check;
                }
                totColcnt++;
                if (!colord.Contains("6"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                    e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                }
                totColcnt++;
                if (!colord.Contains("7"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                    e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                }
                totColcnt++;
                if (!colord.Contains("8"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                    e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                }
                totColcnt++;
                if (!colord.Contains("9"))
                {
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
                if (colord.Count == 0)
                {
                    e.Row.Cells[8 + totColcnt].Visible = true;
                    e.Row.Cells[8 + totColcnt].HorizontalAlign = HorizontalAlign.Center;
                    e.Row.Cells[8 + totColcnt].Visible = false;
                }
            }
        }

    }

    #endregion

    #region batch

    protected void GrdBatch_OnRowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            for (int i = 1; i < e.Row.Cells.Count; i++)
            {
                TableCell cell = e.Row.Cells[i];
                cell.Attributes["onmouseover"] = "this.style.cursor='pointer';";
                cell.Attributes["onmouseout"] = "this.style.textDecoration='none';";
                cell.Attributes["onclick"] = string.Format("document.getElementById('{0}').value = {1}; {2}"
                   , GrdbatchSelectedindex.ClientID, i
                   , Page.ClientScript.GetPostBackClientHyperlink((GridView)sender, string.Format("Select${0}", e.Row.RowIndex)));
            }
        }
    }

    protected void GrdBatch_SelectedIndexChanged(Object sender, EventArgs e)
    {
        try
        {
            var grid = (GridView)sender;
            GridViewRow selectedRow = grid.SelectedRow;
            int rowIndex = grid.SelectedIndex;
            int selectedCellIndex = int.Parse(this.GrdbatchSelectedindex.Value);

            #region getvalue
            //  btn_fpdeg.Visible = true;
            string batch1 = "";
            string degcourseid = "";
            string deptdegcode = "";
            string sem = "";
            string sec = "";
            string stud = "";
            string seatype = "";
            string studtype = "";
            string paid = "";
            string hedcount = "";
            string ledcount = "";
            string batcount = "";
            string allot = "";
            string consession = "";
            string Finyearvalue = "";
            divdep.Visible = false;
            divsema.Visible = false;
            div7.Visible = false;
            // batch1 = Convert.ToString(getCblSelectedValue(cbl_batch));
            degcourseid = Convert.ToString(getCblSelectedValue(cbl_degree));
            deptdegcode = Convert.ToString(getCblSelectedValue(cbl_dept));
            sem = Convert.ToString(getCblSelectedValue(cbl_sem));
            sec = Convert.ToString(getCblSelectedValue(cbl_sect));
            stud = Convert.ToString(getCblSelectedValue(cbl_stud));
            seatype = Convert.ToString(getCblSelectedValue(cbl_seat));
            studtype = Convert.ToString(getCblSelectedValue(cbl_studtype));
            paid = Convert.ToString(getCblSelectedValue(chkl_paid));
            // headervalue = Convert.ToString(getCblSelectedValue(chkl_studhed));
            //ledgercode = Convert.ToString(getCblSelectedValue(chkl_studled));
            Finyearvalue = Convert.ToString(getCblSelectedValue(chklsfyear));

            //string cc = "";
            //string debar = "";
            //string disc = "";
            //if (cblinclude.Items.Count > 0)
            //{
            //    for (int i = 0; i < cblinclude.Items.Count; i++)
            //    {
            //        if (cblinclude.Items[i].Selected == true)
            //        {
            //            if (cblinclude.Items[i].Value == "1")
            //            {
            //                cc = " and r.cc=0";
            //            }
            //            if (cblinclude.Items[i].Value == "2")
            //            {
            //                debar = " and r.Exam_Flag<>'debar'";
            //            }
            //            if (cblinclude.Items[i].Value == "3")
            //            {
            //                disc = "";
            //            }
            //        }
            //        else
            //        {
            //            disc = " and r.DelFlag=0";
            //        }
            //    }
            //}
            //else
            //{
            //    disc = " and r.DelFlag=0";
            //}

            string cc = "";
            string debar = "";
            string disc = "";
            string commondist = "";
            if (cblinclude.Items.Count > 0)
            {
                for (int i = 0; i < cblinclude.Items.Count; i++)
                {
                    if (cblinclude.Items[i].Selected == true)
                    {
                        if (cblinclude.Items[i].Value == "1")
                        {
                            cc = " r.cc=1";
                        }
                        if (cblinclude.Items[i].Value == "2")
                        {
                            debar = "  r.Exam_Flag like '%debar'";
                        }
                        if (cblinclude.Items[i].Value == "3")
                        {
                            disc = "  r.DelFlag=1";
                        }
                    }
                }
            }

            if (cc != "" && debar == "" && disc == "")
                commondist = " and (" + cc + " or r.cc=0)  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            if (cc == "" && debar != "" && disc == "")
                commondist = " and r.cc=0  and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            if (cc == "" && debar == "" && disc != "")
                commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and (" + disc + " or r.DelFlag=0)";

            if (cc != "" && debar != "" && disc == "")
                commondist = " and (" + cc + " or r.cc=0) and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            if (cc == "" && debar != "" && disc != "")
                commondist = " and r.cc=0 and (" + debar + " or r.Exam_Flag<>'debar')  and (" + disc + " or r.DelFlag=0)";

            if (cc != "" && debar == "" && disc != "")
                commondist = " and (" + cc + " or r.cc=0) and r.Exam_Flag<>'debar'  and (" + disc + " or r.DelFlag=0)";

            else if (cc == "" && debar == "" && disc == "")
                commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            if (cc != "" && debar != "" && disc != "")
                commondist = "";
            string fromdate = "";
            string todate = "";
            int datewise = 0;
            if (chk_datewise.Checked == true)
            {
                datewise = 1;
                if (datewise == 1)
                {
                    fromdate = txt_fromdate.Text;
                    todate = txt_todate.Text;
                    if (fromdate != "" && todate != "")
                    {
                        string[] frdate = fromdate.Split('/');
                        if (frdate.Length == 3)
                        {
                            fromdate = frdate[1].ToString() + "/" + frdate[0].ToString() + "/" + frdate[2].ToString();
                        }
                        string[] tdate = todate.Split('/');
                        if (tdate.Length == 3)
                        {
                            todate = tdate[1].ToString() + "/" + tdate[0].ToString() + "/" + tdate[2].ToString();
                        }
                    }
                }
            }
            //divbatch.Visible = false;
            //divdegree.Visible = false;              
            lbl_dep.Visible = false;
            lbl_dep.Text = "";
            divdept.Visible = false;
            lbl_sem.Visible = false; ;
            lbl_sem.Text = "";
            divsem.Visible = false;
            //pnl_deptcolord.Visible = false;
            //pnl_deptcolorder.Visible = false;
            //pnl_semcolord.Visible = false;
            //pnl_semcolorder.Visible = false;
            //pnl_studcolord.Visible = false;
            //pnl_studcolorder.Visible = false;
            divstudcell.Visible = false;
            GrdStud.Visible = false;
            lbl_semcell.Text = "";
            lbl_semcell.Visible = false;

            ArrayList ar = new ArrayList();
            string selqry = "";
            string activerow = Convert.ToString(rowIndex);
            string activecol = Convert.ToString(selectedCellIndex);

            int actnew = 0;
            int actbal = 0;
            int actpaidtotal = 0;
            int refundamt = 0;
            int excessamt = 0;
            int fineamt = 0;
            if (activecol.Trim() != "")
            {
                actnew = Convert.ToInt32(activecol);
                actpaidtotal = Convert.ToInt32(17);
                actbal = Convert.ToInt32(18);
                refundamt = Convert.ToInt32(19);
                excessamt = Convert.ToInt32(20);
                fineamt = Convert.ToInt32(21);
            }

            string gettagvalue = "";
            if (actnew > 9)
            {
                gettagvalue = Convert.ToString(GrdBatch.Rows[1].Cells[actnew].Text);
            }

            int act = Convert.ToInt32(activerow);
            if (act == GrdBatch.Rows.Count - 1)
            {
                for (int i = 0; i < GrdBatch.Rows.Count - 1; i++)
                {
                    if ((hedcount == "") && (ledcount == "") && (batcount == ""))
                    {
                        hedcount = Convert.ToString(GrdBatch.Rows[Convert.ToInt32(i)].Cells[2].Text);
                        ledcount = Convert.ToString(GrdBatch.Rows[Convert.ToInt32(i)].Cells[4].Text);
                        ar.Add(Convert.ToString(GrdBatch.Rows[Convert.ToInt32(i)].Cells[5].Text));
                        batcount = Convert.ToString(GrdBatch.Rows[Convert.ToInt32(i)].Cells[5].Text);


                    }
                    else
                    {
                        hedcount = hedcount + "','" + "" + Convert.ToString(GrdBatch.Rows[Convert.ToInt32(i)].Cells[2].Text) + "";
                        ledcount = ledcount + "','" + "" + Convert.ToString(GrdBatch.Rows[Convert.ToInt32(i)].Cells[4].Text) + "";
                        batcount = batcount + "','" + "" + Convert.ToString(GrdBatch.Rows[Convert.ToInt32(i)].Cells[5].Text) + "";
                        if (!ar.Contains(batcount))
                        {
                            ar.Add(Convert.ToString(GrdBatch.Rows[Convert.ToInt32(i)].Cells[5].Text));
                            batcount = batcount + "','" + "" + Convert.ToString(GrdBatch.Rows[Convert.ToInt32(i)].Cells[5].Text) + "";
                        }

                    }


                }
                ar.Clear();
            }

            string headercode = Convert.ToString(GrdBatch.Rows[Convert.ToInt32(activerow)].Cells[2].Text);
            string ledgercode = Convert.ToString(GrdBatch.Rows[Convert.ToInt32(activerow)].Cells[4].Text);
            string batchyr = Convert.ToString(GrdBatch.Rows[Convert.ToInt32(activerow)].Cells[5].Text);
            if ((hedcount != "") && (ledcount != "") && (batcount != ""))
            {
                headercode = hedcount;
                ledgercode = ledcount;
                batchyr = batcount;
            }

            if (GrdBatch.Rows.Count > 0)
            {
                colbatname = Convert.ToString(GrdBatch.Rows[0].Cells[Convert.ToInt32(activecol)].Text);
                if (colbatname.Trim() == "")
                {
                    colbatname = Convert.ToString(GrdBatch.Rows[0].Cells[Convert.ToInt32(activecol)].Text);
                }
            }
            #endregion

            #region query
            Boolean flag = false;
            Boolean flag1 = false;
            ////selqry = "SELECT a.HeaderFK,HeaderName,LedgerName,LedgerFK,batch_year,Course_Name DegreeName,G.Course_Id,SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,Applyn P,Degree G,Course C,Department D WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and a.HeaderFK = h.HeaderPK and a.LedgerFK = l.LedgerPK and h.HeaderPK = l.LedgerPK  and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 0  and G.college_code ='" + collegecode1 + "'";
            ////if (degcourseid != "")
            ////{
            ////    selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
            ////}
            ////if (batch1 != "")
            ////{
            ////    selqry = selqry + "and p.Batch_Year in ('" + batch1 + "')";
            ////}

            ////if (deptdegcode != "")
            ////{
            ////    selqry = selqry + " and g.Degree_Code in ('" + deptdegcode + "')";
            ////}

            ////if (sem != "")
            ////{
            ////    selqry = selqry + "and A.FeeCategory in ('" + sem + "')";
            ////}
            ////if (stud != "")
            ////{
            ////    selqry = selqry + "and p.mode in ('" + stud + "')";
            ////}
            ////if (seatype != "")
            ////{
            ////    selqry = selqry + "and p.seattype in ('" + seatype + "')";
            ////}
            ////if (studtype != "")
            ////{
            ////    selqry = selqry + " and p.Stud_Type in ('" + studtype + "')";
            ////}
            ////if (headercode != "")
            ////{
            ////    selqry = selqry + "and A.HeaderFK in ('" + headercode + "')";
            ////}
            ////if (ledgercode != "")
            ////{
            ////    selqry = selqry + " and LedgerFK in ('" + ledgercode + "')";
            ////}
            ////if (batchyr != "")
            ////{
            ////    selqry = selqry + " and batch_year in('" + batchyr + "')";
            ////}
            ////if (datewise == 1)
            ////{
            ////    if (fromdate != "" && todate != "")
            ////    {
            ////        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
            ////    }
            ////}

            ////selqry = selqry + "GROUP BY a.HeaderFK,HeaderName,LedgerName,LedgerFK,batch_year, G.Course_Id,Course_Name";
            ////if (activecol.Trim() == "5")
            ////{
            ////    selqry = selqry + " having SUM(DeductAmout) > 0 ";
            ////}
            ////if (activecol.Trim() == "6")
            ////{
            ////    selqry = selqry + " having SUM(FromGovtAmt) > 0";
            ////}
            ////if (activecol.Trim() == Convert.ToString(actbal))
            ////{
            ////    selqry = selqry + " having SUM(BalAmount) > 0";
            ////}
            ////if (activecol.Trim() == Convert.ToString(actpaidtotal))
            ////{
            ////    selqry = selqry + " having sum(BalAmount) = 0";
            ////}
            ////if (activecol.Trim() == Convert.ToString(refundamt))
            ////{
            ////    selqry = selqry + "having SUM(RefundAmount)>0";
            ////}
            //////if (activecol.Trim() == Convert.ToString(excessamt))
            //////{
            //////    selqry = selqry + "having SUM(RefundAmount)>0";
            ////}
            //selqry = selqry + " SELECT a.HeaderFK,HeaderName,LedgerName,LedgerFK,p.batch_year,Course_Name as DegreeName,G.Course_Id,SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,FM_HeaderMaster H,FM_LedgerMaster L,Applyn P,Degree G,Course C,Department D WHERE A.App_No = P.app_no and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and a.HeaderFK = h.HeaderPK and a.LedgerFK = l.LedgerPK and h.HeaderPK = l.Headerfk   and g.Dept_Code = d.Dept_Code and p.degree_code = g.degree_code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "'";
            //if (degcourseid != "")
            //{
            //    selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
            //}
            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            //if (deptdegcode != "")
            //{
            //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
            //}
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            //}
            //if (sec != "")
            //{
            //    //selqry = selqry + " and   ISNULL( r.Sections,'') in ('" + sec + "','')";
            //}
            //if (stud != "")
            //{
            //    //selqry = selqry + "and p.mode in ('" + stud + "')";
            //}
            //if (seatype != "")
            //{
            //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
            //}
            //if (studtype != "")
            //{
            //    //selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
            //}
            //if (headercode != "")
            //{
            //    selqry = selqry + "and A.HeaderFK in ('" + headercode + "')";
            //}
            //if (ledgercode != "")
            //{
            //    selqry = selqry + " and LedgerFK in ('" + ledgercode + "')";
            //}
            //if (batchyr != "")
            //{
            //    selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            //}
            //if (datewise == 1)
            //{
            //    if (fromdate != "" && todate != "")
            //    {
            //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
            //    }
            //}

            //selqry = selqry + "GROUP BY a.HeaderFK,HeaderName,LedgerName,LedgerFK,p.batch_year,G.Course_Id,Course_Name  ";
            //if (activecol.Trim() == "5")
            //{
            //    selqry = selqry + " having SUM(DeductAmout) > 0 ";
            //}
            //if (activecol.Trim() == "6")
            //{
            //    selqry = selqry + " having SUM(FromGovtAmt) > 0";
            //}
            //if (activecol.Trim() == Convert.ToString(actbal))
            //{
            //    selqry = selqry + " having SUM(BalAmount) > 0";
            //}
            //if (activecol.Trim() == Convert.ToString(actpaidtotal))
            //{
            //    selqry = selqry + " having sum(BalAmount) = 0";
            //}
            //if (activecol.Trim() == Convert.ToString(refundamt))
            //{
            //    selqry = selqry + "having SUM(RefundAmount)>0";
            //}
            ////if (activecol.Trim() == Convert.ToString(excessamt))
            ////{
            ////    selqry = selqry + "having SUM(RefundAmount)>0";
            ////}
            ////selqry = selqry + " SELECT a.HeaderFK,LedgerFK,batch_year,Course_Name,G.Course_Id,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C,Department D WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 0 and G.college_code ='" + collegecode1 + "'";
            ////if (degcourseid != "")
            ////{
            ////    selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
            ////}
            ////if (batch1 != "")
            ////{
            ////    selqry = selqry + "and p.Batch_Year in ('" + batch1 + "')";
            ////}
            ////if (deptdegcode != "")
            ////{
            ////    selqry = selqry + " and g.Degree_Code in ('" + deptdegcode + "')";
            ////}
            ////if (sem != "")
            ////{
            ////    selqry = selqry + "and A.FeeCategory in ('" + sem + "')";
            ////}
            ////if (stud != "")
            ////{
            ////    selqry = selqry + "and p.mode in ('" + stud + "')";
            ////}
            ////if (seatype != "")
            ////{
            ////    selqry = selqry + "and p.seattype in ('" + seatype + "')";
            ////}
            ////if (studtype != "")
            ////{
            ////    selqry = selqry + " and p.Stud_Type in ('" + studtype + "')";
            ////}
            ////if (headercode != "")
            ////{
            ////    selqry = selqry + "and A.HeaderFK in ('" + headercode + "')";
            ////}
            ////if (ledgercode != "")
            ////{
            ////    selqry = selqry + " and LedgerFK in ('" + ledgercode + "')";
            ////}
            ////if (batchyr != "")
            ////{
            ////    selqry = selqry + " and batch_year in('" + batchyr + "')";
            ////}
            ////if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
            ////{
            ////    selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
            ////}
            ////if (datewise == 1)
            ////{
            ////    if (fromdate != "" && todate != "")
            ////    {
            ////        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
            ////    }
            ////}
            ////selqry = selqry + " GROUP BY a.HeaderFK,LedgerFK,batch_year, G.Course_Id,Course_Name,PayMode";
            //selqry = selqry + " SELECT a.HeaderFK,LedgerFK,p.batch_year, Course_Name,G.Course_Id,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C,Department D WHERE A.App_No = P.app_no  AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "'";
            //if (degcourseid != "")
            //{
            //    selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
            //}

            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            //if (deptdegcode != "")
            //{
            //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
            //}
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            //}
            //if (sec != "")
            //{
            //    // selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
            //}
            //if (stud != "")
            //{
            //    //  selqry = selqry + "and p.mode in ('" + stud + "')";
            //}
            //if (seatype != "")
            //{
            //    //  selqry = selqry + "and  p.seattype in ('" + seatype + "')";
            //}
            //if (studtype != "")
            //{
            //    //selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
            //}
            //if (headercode != "")
            //{
            //    selqry = selqry + "and HeaderFK in ('" + headercode + "')";
            //}
            //if (ledgercode != "")
            //{
            //    selqry = selqry + " and LedgerFK in ('" + ledgercode + "')";
            //}
            //if (batchyr != "")
            //{
            //    selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            //}
            //if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
            //{
            //    selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
            //}
            //if (datewise == 1)
            //{
            //    if (fromdate != "" && todate != "")
            //    {
            //        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
            //    }
            //}
            //selqry = selqry + "GROUP BY a.HeaderFK,LedgerFK,p.batch_year, G.Course_Id,Course_Name,PayMode ";

            //selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,h.LedgerPK,p.Batch_Year,C.Course_Id from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Degree G,Course C,Department D,FM_LedgerMaster H,FM_HeaderMaster fh WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code  and h.LedgerPK =ex.LedgerFK and ex.HeaderFK=h.HeaderFK and h.HeaderFK=fh.HeaderPK and em.App_No = a.App_No   AND P.IsConfirm = 1  and a.LedgerFK=h.LedgerPK   AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "' ";
            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            //if (deptdegcode != "")
            //{
            //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
            //}
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            //}
            //if (sec != "")
            //{
            //    // selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
            //}
            //if (stud != "")
            //{
            //    //selqry = selqry + "and p.mode in ('" + stud + "')";
            //}
            //if (seatype != "")
            //{
            //    //selqry = selqry + "and  p.seattype in ('" + seatype + "')";
            //}
            //if (studtype != "")
            //{
            //    //selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
            //}
            //if (headercode != "")
            //{
            //    selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
            //}
            //if (ledgercode != "")
            //{
            //    selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
            //}
            //if (datewise == 1)
            //{
            //    if (fromdate != "" && todate != "")
            //    {
            //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
            //    }
            //}
            //selqry = selqry + " GROUP BY A.HeaderFK ,h.LedgerPK,p.Batch_Year ,C.Course_Id";
            //if (activecol.Trim() == Convert.ToString(excessamt))
            //{
            //    selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
            //    flag = true;
            //}
            #endregion

            #region query
            selqry = selqry + "  SELECT A.HeaderFK,LedgerFK,Course_Name DegreeName,G.Course_Id,p.batch_year,SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Degree G,Course C WHERE A.App_No = P.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and p.degree_code = g.degree_code  AND P.IsConfirm = 1 AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
            if (degcourseid != "")
            {
                selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
            }
            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            if (deptdegcode != "")
            {
                selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
            }
            if (sem != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            }
            if (headercode != "")
            {
                selqry = selqry + " and a.HeaderFK in ('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
            }
            if (batchyr != "")
            {
                selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                }
            }
            selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK,G.Course_Id,Course_Name,p.batch_year  ";
            if (activecol.Trim() == "7")
            {
                selqry = selqry + " having SUM(DeductAmout) > 0 ";
            }
            if (activecol.Trim() == "8")
            {
                selqry = selqry + " having SUM(FromGovtAmt) > 0";
            }
            if (activecol.Trim() == Convert.ToString(actbal))
            {
                selqry = selqry + " having SUM(BalAmount) > 0";
            }
            if (activecol.Trim() == Convert.ToString(actpaidtotal))
            {
                selqry = selqry + " having sum(BalAmount) = 0";
            }
            if (activecol.Trim() == Convert.ToString(refundamt))
            {
                selqry = selqry + "having SUM(RefundAmount)>0";
            }
            //paymode
            selqry = selqry + "  SELECT A.HeaderFK,LedgerFK,p.batch_year, Course_Name,G.Course_Id,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code  AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
            if (usBasedRights == true)
                selqry += " and a.EntryUserCode in('" + usercode + "')";
            if (degcourseid != "")
            {
                selqry = selqry + " and c.Course_Id in ('" + degcourseid + "')";
            }
            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            if (deptdegcode != "")
            {
                selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
            }
            if (sem != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            }
            if (headercode != "")
            {
                selqry = selqry + " and HeaderFK in ('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
            }
            if (batchyr != "")
            {
                selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            }
            if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
            {
                selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                }
            }
            selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK,p.batch_year,G.Course_Id,Course_Name,PayMode ";
            //excess
            //selqry = selqry + "  select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,a.LedgerFK,p.Batch_Year,C.Course_Id from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Degree G,Course C WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code  and em.App_No = a.App_No   AND P.IsConfirm = 1  AND Admission_Status = 1 AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
            ////if (batch1 != "")
            ////{
            ////    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            ////}
            //if (deptdegcode != "")
            //{
            //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
            //}
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            //}
            //if (headercode != "")
            //{
            //    selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
            //}
            //if (ledgercode != "")
            //{
            //    selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
            //}
            //if (batchyr != "")
            //{
            //    selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            //}
            //if (datewise == 1)
            //{
            //    if (fromdate != "" && todate != "")
            //    {
            //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
            //    }
            //}
            //selqry = selqry + "GROUP BY A.HeaderFK ,A.LedgerFK,p.Batch_Year ,C.Course_Id";
            selqry = selqry + " select SUM(f.Excessamt) as ExcessAmount,fd.HeaderFK,fd.LedgerFK,r.Batch_Year,C.Course_Id from FT_ExcessDet F,FT_ExcessLedgerDet Fd,Registration r,Degree d,Course c where f.App_No =r.App_No and f.ExcessDetPK =fd.ExcessDetFK and r.degree_code=d.Degree_Code and d.Course_Id =c.Course_Id ";
            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            if (deptdegcode != "")
            {
                selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
            }
            if (sem != "")
            {
                //selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            }
            if (headercode != "")
            {
                selqry = selqry + " and fd.HeaderFK in('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + "  and fd.LedgerFK in('" + ledgercode + "')";
            }
            if (batchyr != "")
            {
                selqry = selqry + " and r.batch_year in('" + batchyr + "')";
            }
            //if (chkinclude.Checked == true)
            //{
            //    selqry = selqry + " and r.DelFlag=0 ";
            //}
            //if (cc != "")
            //{
            //    selqry = selqry + cc;
            //}
            //if (debar != "")
            //{
            //    selqry = selqry + debar;
            //}
            //if (disc != "")
            //{
            //    selqry = selqry + disc;
            //}
            if (commondist.Trim() != "")
            {
                selqry = selqry + commondist;
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                }
            }
            // and d.Degree_Code =55";
            selqry = selqry + "  GROUP BY fd.HeaderFK ,fd.LedgerFK,r.Batch_Year ,C.Course_Id";
            if (activecol.Trim() == Convert.ToString(excessamt))
            {
                selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
                flag = true;
            }
            selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
            #endregion

            bool paymodecheck = false;
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (gettagvalue.Trim() != "")
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    paymodecheck = true;
                }
            }
            else
            {
                paymodecheck = true;
            }

            string excessvalue = "";
            if (flag == true)
            {
                if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true && ds.Tables[2].Rows.Count > 0)
                {
                    flag1 = true;
                }
            }
            else
            {
                if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true)
                {
                    flag1 = true;
                }
            }
            if (flag1 == true)
            {
                #region  design

                loaddegreecolumns();
                DataView dv = new DataView();
                int countval = 0;

                ArrayList arrColDegreeNames = new ArrayList();
                ArrayList arrColDegreeNames2 = new ArrayList();
                Dictionary<int, string> dicLedRowColor = new Dictionary<int, string>();
                arrColDegreeNames.Add("S.No");
                arrColDegreeNames2.Add("S.No");
                dtReport.Columns.Add("S.No");
                arrColDegreeNames.Add("Header Name");
                arrColDegreeNames2.Add("Header Name");
                dtReport.Columns.Add("Header Name");
                arrColDegreeNames.Add("Header pk");
                arrColDegreeNames2.Add("Header pk");
                dtReport.Columns.Add("Header pk");
                arrColDegreeNames.Add("Ledger Name");
                arrColDegreeNames2.Add("Ledger Name");
                dtReport.Columns.Add("Ledger Name");
                arrColDegreeNames.Add("Ledger pk");
                arrColDegreeNames2.Add("Ledger pk");
                dtReport.Columns.Add("Ledger pk");
                arrColDegreeNames.Add("Batch Year");
                arrColDegreeNames2.Add("Batch Year");
                dtReport.Columns.Add("Batch Year");
                arrColDegreeNames.Add(lbldeg.Text);
                arrColDegreeNames2.Add(lbldeg.Text);
                dtReport.Columns.Add(lbldeg.Text);
                arrColDegreeNames.Add("CourseId");
                arrColDegreeNames2.Add("CourseId");
                dtReport.Columns.Add("CourseId");
                arrColDegreeNames.Add("Allot");
                arrColDegreeNames2.Add("Allot");
                dtReport.Columns.Add("Allot");
                arrColDegreeNames.Add("Concession");
                arrColDegreeNames2.Add("Concession");
                dtReport.Columns.Add("Concession");
                arrColDegreeNames.Add("Scholarship");
                arrColDegreeNames2.Add("Scholarship");
                dtReport.Columns.Add("Scholarship");
                arrColDegreeNames.Add("Total");
                arrColDegreeNames2.Add("Total");
                dtReport.Columns.Add("Total");

                Hashtable newhash = new Hashtable();

                if (chkl_paid.Items.Count > 0)
                {
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            countval++;
                            arrColDegreeNames.Add("Paid");
                            arrColDegreeNames2.Add(chkl_paid.Items[s].Text);
                            dtReport.Columns.Add(chkl_paid.Items[s].Text);
                            newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                        }
                    }
                    if (countval != 0)
                    {
                        arrColDegreeNames.Add("Paid");
                        arrColDegreeNames2.Add("Total Paid");
                        dtReport.Columns.Add("Total Paid");
                    }
                }
                if (countval == 0)
                {
                    arrColDegreeNames.Add("Paid");
                    arrColDegreeNames2.Add("Paid");
                    dtReport.Columns.Add("Paid");
                }

                arrColDegreeNames.Add("Balance");
                arrColDegreeNames2.Add("Balance");
                dtReport.Columns.Add("Balance");
                arrColDegreeNames.Add("Refund Amount");
                arrColDegreeNames2.Add("Refund Amount");
                dtReport.Columns.Add("Refund Amount");
                arrColDegreeNames.Add("Excess Amount");
                arrColDegreeNames2.Add("Excess Amount");
                dtReport.Columns.Add("Excess Amount");
                arrColDegreeNames.Add("Fine Amount");
                arrColDegreeNames2.Add("Fine Amount");
                dtReport.Columns.Add("Fine Amount");
                DataRow drHdr1 = dtReport.NewRow();
                DataRow drHdr2 = dtReport.NewRow();
                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                {
                    drHdr1[grCol] = arrColDegreeNames[grCol];
                    drHdr2[grCol] = arrColDegreeNames2[grCol];
                }
                dtReport.Rows.Add(drHdr1);
                dtReport.Rows.Add(drHdr2);

                #endregion

                #region  value

                double allotamt = 0;
                double consamt = 0;
                double govt = 0;
                double tot_amount = 0;
                double totalvalue = 0;
                double bal = 0;
                double totamount = 0;
                double fnlamount = 0;
                double paidamount = 0;
                int ColCntGrd = 0;
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = Convert.ToString(i + 1);
                    //fpdegree.Sheets[0].Rows.Count = ds.Tables[0].Rows.Count;
                    //fpdegree.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                    ds.Tables[3].DefaultView.RowFilter = "LedgerPK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                    dvhead = ds.Tables[3].DefaultView;
                    if (Convert.ToString(dvhead) != "" && dvhead != null)
                    {
                        drowGrd[1] = Convert.ToString(dvhead[0]["Headername"]);
                        drowGrd[2] = Convert.ToString(dvhead[0]["HeaderFK"]);
                        drowGrd[3] = Convert.ToString(dvhead[0]["LedgerName"]);
                        drowGrd[4] = Convert.ToString(dvhead[0]["LedgerPK"]);
                    }
                    drowGrd[5] = Convert.ToString(ds.Tables[0].Rows[i]["batch_year"].ToString());
                    drowGrd[6] = Convert.ToString(ds.Tables[0].Rows[i]["DegreeName"].ToString());
                    drowGrd[7] = Convert.ToString(ds.Tables[0].Rows[i]["Course_Id"].ToString());
                    //allot
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                    drowGrd[8] = Convert.ToString(allotamt);
                    if (!grandtotal.ContainsKey(8))
                        grandtotal.Add(8, Convert.ToString(allotamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[8]), out amount);
                        amount += allotamt;
                        grandtotal.Remove(8);
                        grandtotal.Add(8, Convert.ToString(amount));
                    }
                    //consession
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                    drowGrd[9] = Convert.ToString(consamt);
                    if (!grandtotal.ContainsKey(9))
                        grandtotal.Add(9, Convert.ToString(consamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[9]), out amount);
                        amount += consamt;
                        grandtotal.Remove(9);
                        grandtotal.Add(9, Convert.ToString(amount));
                    }
                    //government
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                    drowGrd[10] = Convert.ToString(govt);
                    if (!grandtotal.ContainsKey(10))
                        grandtotal.Add(10, Convert.ToString(govt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[10]), out amount);
                        amount += govt;
                        grandtotal.Remove(10);
                        grandtotal.Add(10, Convert.ToString(amount));
                    }
                    //total
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                    drowGrd[11] = Convert.ToString(totalvalue);
                    if (!grandtotal.ContainsKey(11))
                        grandtotal.Add(11, Convert.ToString(totalvalue));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[11]), out amount);
                        amount += totalvalue;
                        grandtotal.Remove(11);
                        grandtotal.Add(11, Convert.ToString(amount));
                    }
                    //paid paymode count=0
                    double paidvalue = 0;
                    if (countval == 0)
                    {
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                        fnlamount = Convert.ToDouble(paidvalue);
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                        //fpdegree.Sheets[0].Cells[i, fpdegree.Sheets[0].ColumnCount - 5].Text = Convert.ToString(paidvalue);
                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                            amount += paidvalue;
                            grandtotal.Remove(ColCntGrd - 5);
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                        }
                    }
                    //refund
                    double refund = 0;
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                    // fpdegree.Sheets[0].Cells[i, fpdegree.Sheets[0].ColumnCount - 3].Text = Convert.ToString(refund);
                    if (!grandtotal.ContainsKey(ColCntGrd - 3))
                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                        amount += refund;
                        grandtotal.Remove(ColCntGrd - 3);
                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                    }
                    //excess
                    DataView dvex = new DataView();
                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        ds.Tables[2].DefaultView.RowFilter = "Course_Id='" + Convert.ToString(ds.Tables[0].Rows[i]["Course_Id"]) + "' and HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' and LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                        dvex = ds.Tables[2].DefaultView;
                        if (dvex.Count > 0 && dvex != null)
                        {
                            for (int k = 0; k < dvex.Count; k++)
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                tot_amount += amount;
                            }
                        }
                    }
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                    //fpdegree.Sheets[0].Cells[i, fpdegree.Sheets[0].ColumnCount - 2].Text = Convert.ToString(tot_amount);
                    if (!grandtotal.ContainsKey(ColCntGrd - 2))
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                        amount += tot_amount;
                        grandtotal.Remove(ColCntGrd - 2);
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                    }
                    tot_amount = 0;
                    //paymode value
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                        {
                            if (chkl_paid.Items[pay].Selected == true)
                            {
                                ds.Tables[1].DefaultView.RowFilter = "Course_Id='" + Convert.ToString(ds.Tables[0].Rows[i]["Course_Id"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'  and HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' and  LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "' and  batch_year='" + Convert.ToString(ds.Tables[0].Rows[i]["batch_year"]) + "'";
                                dv = ds.Tables[1].DefaultView;
                                int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                for (int k = 0; k < dv.Count; k++)
                                {
                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                    fnlamount = fnlamount + totamount;
                                    paidamount = paidamount + totamount;
                                }
                                drowGrd[colnew] = Convert.ToString(paidamount);
                                //fpdegree.Sheets[0].Cells[i, colnew].Text = Convert.ToString(paidamount);
                                if (!grandtotal.ContainsKey(colnew))
                                    grandtotal.Add(colnew, Convert.ToString(paidamount));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                    amount += paidamount;
                                    grandtotal.Remove(colnew);
                                    grandtotal.Add(colnew, Convert.ToString(amount));
                                }
                                paidamount = 0;
                            }
                        }
                        if (countval != 0)
                        {
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                            //fpdegree.Sheets[0].Cells[i, fpdegree.Sheets[0].ColumnCount - 5].Text = Convert.ToString(fnlamount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                amount += fnlamount;
                                grandtotal.Remove(ColCntGrd - 5);
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                            }
                        }
                        //balance
                        if (totalvalue != 0)
                        {
                            bal = totalvalue - fnlamount;
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                            //fpdegree.Sheets[0].Cells[i, fpdegree.Sheets[0].ColumnCount - 4].Text = Convert.ToString(bal);
                            if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                amount += bal;
                                grandtotal.Remove(ColCntGrd - 4);
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                            }
                            fnlamount = 0;
                            if (bal == 0)
                                dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                            else
                                dicRowColor.Add(dtReport.Rows.Count, "Balance");
                        }
                    }
                    else
                    {
                        bal = Convert.ToDouble(totalvalue);
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                        if (!grandtotal.ContainsKey(ColCntGrd - 4))
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                            amount += bal;
                            grandtotal.Remove(ColCntGrd - 4);
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                        }
                    }
                    dtReport.Rows.Add(drowGrd);
                }

                drowGrd = dtReport.NewRow();
                drowGrd[0] = "Grand Total";
                double grandvalue = 0;
                for (int j = 8; j < dtReport.Columns.Count; j++)
                {
                    double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                    drowGrd[j] = Convert.ToString(grandvalue);
                }
                dtReport.Rows.Add(drowGrd);

                #endregion

                #region visible

                GrdDegree.DataSource = dtReport;
                GrdDegree.DataBind();
                GrdDegree.Visible = true;

                GridViewRow row = GrdDegree.Rows[0];
                GridViewRow previousRow = GrdDegree.Rows[1];

                for (int i = 0; i < dtReport.Columns.Count; i++)
                {
                    if (row.Cells[i].Text == previousRow.Cells[i].Text)
                    {
                        row.Cells[i].RowSpan = 2;
                        previousRow.Cells[i].Visible = false;
                        //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                        //                       previousRow.Cells[i].RowSpan + 1;
                        //previousRow.Cells[i].Visible = false;
                    }
                }
                //ColumnSpan

                for (int cell = GrdDegree.Rows[0].Cells.Count - 1; cell > 0; cell--)
                {
                    TableCell colum = GrdDegree.Rows[0].Cells[cell];
                    TableCell previouscol = GrdDegree.Rows[0].Cells[cell - 1];
                    if (colum.Text == previouscol.Text)
                    {
                        if (previouscol.ColumnSpan == 0)
                        {
                            if (colum.ColumnSpan == 0)
                            {
                                previouscol.ColumnSpan += 2;
                            }
                            else
                            {
                                previouscol.ColumnSpan += colum.ColumnSpan + 1;
                            }
                            colum.Visible = false;
                        }
                    }
                }
                foreach (KeyValuePair<int, string> dr in dicRowColor)
                {
                    int g = dr.Key;
                    string DicValue = dr.Value;
                    if (DicValue == "NoBalance")
                    {
                        GrdDegree.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                    }
                    if (DicValue == "Balance")
                    {
                        GrdDegree.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                    }
                }

                divdegr.Visible = true;
                divdegree.Visible = true;
                lbl_degr.Visible = true;
                // btn_fpdeg.Visible = true;
                lbl_degr.Text = "->Header(" + colhedername + ")->Ledger(" + colledname + ")->Batch(" + colbatname + ")->Degree";
                rptprint.Visible = true;
                //rptprint.Attributes.Add("Style", "margin-top:-260px; margin-left:10px;");
                // pnl_degcolorder.Visible = true;
                // pnl_degreecolorder.Visible = true;
                // loaddegreecolorder();
                ViewState["degree"] = 3;
                ViewState["dept"] = null;
                ViewState["sem"] = null;
                ViewState["stud"] = null;
                rptprint.Visible = true;
                txtexcelname.Text = "";
                lblvalidation1.Text = "";

                #endregion

            }
            else
            {
                GrdDegree.Visible = false;
                divdegree.Visible = false;
                lbl_degr.Visible = false;
                //  pnl_degcolorder.Visible = false;
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                lbl_alert.Text = "No Record Found";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void GrdBatch_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.RowIndex == 0)
            {
                int totColcnt = 0;
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[21].Visible = false;
            }
            else
            {
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[14].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[15].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[16].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[17].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[18].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[19].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[20].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[21].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[21].Visible = false;
            }
            if (e.Row.RowIndex == 1)
            {
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[6].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[14].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[15].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[16].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[17].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[18].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[19].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[20].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[21].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[21].Visible = false;
            }
        }
    }

    #endregion

    #region degree

    protected void GrdDegree_OnRowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            for (int i = 1; i < e.Row.Cells.Count; i++)
            {
                TableCell cell = e.Row.Cells[i];
                cell.Attributes["onmouseover"] = "this.style.cursor='pointer';";
                cell.Attributes["onmouseout"] = "this.style.textDecoration='none';";
                cell.Attributes["onclick"] = string.Format("document.getElementById('{0}').value = {1}; {2}"
                   , GrdDegreeSelectedIndex.ClientID, i
                   , Page.ClientScript.GetPostBackClientHyperlink((GridView)sender, string.Format("Select${0}", e.Row.RowIndex)));
            }
        }
    }

    protected void GrdDegree_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.RowIndex == 0)
            {
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[23].Visible = false;
            }
            else
            {
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[14].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[15].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[16].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[17].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[18].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[19].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[20].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[21].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[22].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[23].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[23].Visible = false;
            }
            if (e.Row.RowIndex == 1)
            {
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[7].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[8].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[14].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[15].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[16].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[17].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[18].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[19].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[20].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[21].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[22].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[23].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[23].Visible = false;
            }
        }
    }

    protected void GrdDegree_SelectedIndexChanged(Object sender, EventArgs e)
    {
        try
        {
            var grid = (GridView)sender;
            GridViewRow selectedRow = grid.SelectedRow;
            int rowIndex = grid.SelectedIndex;
            int selectedCellIndex = int.Parse(this.GrdDegreeSelectedIndex.Value);

            DeptAcr();

            #region getvalue

            string deptdegcode = "";
            string sem = "";
            string sec = "";
            string stud = "";
            string seatype = "";
            string studtype = "";
            string paid = "";
            string allot = "";
            string consession = "";
            lbl_sem.Visible = false; ;
            lbl_sem.Text = "";
            divsem.Visible = false;
            //pnl_semcolord.Visible = false;
            //pnl_semcolorder.Visible = false;
            //pnl_studcolord.Visible = false;
            //pnl_studcolorder.Visible = false;
            divstudcell.Visible = false;
            GrdStud.Visible = false;
            lbl_semcell.Text = "";
            lbl_semcell.Visible = false;
            string hedcount = "";
            string ledcount = "";
            string batcount = "";
            string coursecode = "";
            string selqry = "";
            string Finyearvalue = "";
            divsema.Visible = false;
            div7.Visible = false;

            deptdegcode = Convert.ToString(getCblSelectedValue(cbl_dept));
            sem = Convert.ToString(getCblSelectedValue(cbl_sem));
            sec = Convert.ToString(getCblSelectedValue(cbl_sect));
            stud = Convert.ToString(getCblSelectedValue(cbl_stud));
            seatype = Convert.ToString(getCblSelectedValue(cbl_seat));
            studtype = Convert.ToString(getCblSelectedValue(cbl_studtype));
            paid = Convert.ToString(getCblSelectedValue(chkl_paid));
            Finyearvalue = Convert.ToString(getCblSelectedValue(chklsfyear));

            //string cc = "";
            //string debar = "";
            //string disc = "";
            //if (cblinclude.Items.Count > 0)
            //{
            //    for (int i = 0; i < cblinclude.Items.Count; i++)
            //    {
            //        if (cblinclude.Items[i].Selected == true)
            //        {
            //            if (cblinclude.Items[i].Value == "1")
            //            {
            //                cc = " and r.cc=0";
            //            }
            //            if (cblinclude.Items[i].Value == "2")
            //            {
            //                debar = " and r.Exam_Flag<>'debar'";
            //            }
            //            if (cblinclude.Items[i].Value == "3")
            //            {
            //                disc = "";
            //            }
            //        }
            //        else
            //        {
            //            disc = " and r.DelFlag=0";
            //        }
            //    }
            //}
            //else
            //{
            //    disc = " and r.DelFlag=0";
            //}

            string cc = "";
            string debar = "";
            string disc = "";
            string commondist = "";
            if (cblinclude.Items.Count > 0)
            {
                for (int i = 0; i < cblinclude.Items.Count; i++)
                {
                    if (cblinclude.Items[i].Selected == true)
                    {
                        if (cblinclude.Items[i].Value == "1")
                        {
                            cc = " r.cc=1";
                        }
                        if (cblinclude.Items[i].Value == "2")
                        {
                            debar = "  r.Exam_Flag like '%debar'";
                        }
                        if (cblinclude.Items[i].Value == "3")
                        {
                            disc = "  r.DelFlag=1";
                        }
                    }
                }
            }

            if (cc != "" && debar == "" && disc == "")
                commondist = " and (" + cc + " or r.cc=0)  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            if (cc == "" && debar != "" && disc == "")
                commondist = " and r.cc=0  and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            if (cc == "" && debar == "" && disc != "")
                commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and (" + disc + " or r.DelFlag=0)";

            if (cc != "" && debar != "" && disc == "")
                commondist = " and (" + cc + " or r.cc=0) and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            if (cc == "" && debar != "" && disc != "")
                commondist = " and r.cc=0 and (" + debar + " or r.Exam_Flag<>'debar')  and (" + disc + " or r.DelFlag=0)";

            if (cc != "" && debar == "" && disc != "")
                commondist = " and (" + cc + " or r.cc=0) and r.Exam_Flag<>'debar'  and (" + disc + " or r.DelFlag=0)";

            else if (cc == "" && debar == "" && disc == "")
                commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            if (cc != "" && debar != "" && disc != "")
                commondist = "";

            string fromdate = "";
            string todate = "";
            int datewise = 0;
            if (chk_datewise.Checked == true)
            {
                datewise = 1;
                if (datewise == 1)
                {
                    fromdate = txt_fromdate.Text;
                    todate = txt_todate.Text;
                    if (fromdate != "" && todate != "")
                    {
                        string[] frdate = fromdate.Split('/');
                        if (frdate.Length == 3)
                        {
                            fromdate = frdate[1].ToString() + "/" + frdate[0].ToString() + "/" + frdate[2].ToString();
                        }
                        string[] tdate = todate.Split('/');
                        if (tdate.Length == 3)
                        {
                            todate = tdate[1].ToString() + "/" + tdate[0].ToString() + "/" + tdate[2].ToString();
                        }
                    }
                }
            }

            #region academic year Added by saranya on 03/01/2018

            string acdBatchYear = string.Empty;
            string feecaT = string.Empty;
            string feeCategory = string.Empty;
            string BatchYear = string.Empty;
            string batch_year = string.Empty;
            Dictionary<string, string> htAcademic = new Dictionary<string, string>();
            try
            {
                string settingType = string.Empty;
                if (rblTypeNew.SelectedIndex == 0)
                    settingType = "0";
                else if (rblTypeNew.SelectedIndex == 1)
                    settingType = "1";
                else if (rblTypeNew.SelectedIndex == 2)
                    settingType = "2";
                string collegecode = Convert.ToString(ddl_collegename.SelectedItem.Value);
                string acdYears = Convert.ToString(ddlAcademic.SelectedItem.Text);
                string selQ = " SELECT distinct ACD_COLLEGE_CODE,c.collname,ACD_YEAR,ACD_BATCH_YEAR,ACD_FEECATEGORY,t.textval FROM FT_ACADEMICYEAR AY,FT_ACADEMICYEAR_DETAILED AYD,collinfo c,textvaltable t WHERE c.college_code=ay.acd_college_code and AY.ACA_YEAR_PK=AYD.ACA_YEAR_FK and textcriteria='FEECA' and t.textcode=ayd.ACD_FEECATEGORY and t.college_code=ay.ACD_COLLEGE_CODE AND  ACD_COLLEGE_CODE IN('" + collegecode + "') and ACD_YEAR in('" + acdYears + "') and ACD_SETTING_TYPE='" + settingType + "' order by ACD_COLLEGE_CODE  asc,ACD_YEAR desc,ACD_FEECATEGORY asc";
                DataSet dsPrevAMount = da.select_method_wo_parameter(selQ, "Text");
                if (dsPrevAMount.Tables.Count > 0 && dsPrevAMount.Tables[0].Rows.Count > 0)
                {
                    DataTable dtAcdYear = dsPrevAMount.Tables[0].DefaultView.ToTable(true, "ACD_YEAR", "ACD_COLLEGE_CODE", "collname");
                    DataTable dtBatchYear = dsPrevAMount.Tables[0].DefaultView.ToTable(true, "ACD_YEAR", "ACD_BATCH_YEAR", "ACD_COLLEGE_CODE");
                    DataTable dtFeecat = dsPrevAMount.Tables[0].DefaultView.ToTable();

                    if (dtAcdYear.Rows.Count > 0)
                    {
                        int Sno = 0;
                        for (int row = 0; row < dtAcdYear.Rows.Count; row++)
                        {
                            Sno++;
                            string acdYear = Convert.ToString(dtAcdYear.Rows[row]["ACD_YEAR"]);
                            string clgCode = Convert.ToString(dtAcdYear.Rows[row]["ACD_COLLEGE_CODE"]);
                            dtBatchYear.DefaultView.RowFilter = "ACD_YEAR='" + acdYear + "' and ACD_COLLEGE_CODE='" + clgCode + "'";
                            DataTable dtBatch = dtBatchYear.DefaultView.ToTable();
                            if (dtBatch.Rows.Count > 0)
                            {
                                for (int bat = 0; bat < dtBatch.Rows.Count; bat++)
                                {
                                    acdBatchYear = Convert.ToString(dtBatch.Rows[bat]["ACD_BATCH_YEAR"]);
                                    dtFeecat.DefaultView.RowFilter = "ACD_YEAR='" + acdYear + "' and ACD_BATCH_YEAR='" + acdBatchYear + "' and ACD_COLLEGE_CODE='" + clgCode + "'";
                                    DataTable dtFee = dtFeecat.DefaultView.ToTable();
                                    if (dtFee.Rows.Count > 0)
                                    {
                                        StringBuilder sbSem = new StringBuilder();
                                        StringBuilder sbSemStr = new StringBuilder();
                                        for (int fee = 0; fee < dtFee.Rows.Count; fee++)
                                        {
                                            feecaT = Convert.ToString(dtFee.Rows[fee]["ACD_FEECATEGORY"]);
                                            string feecaTStr = Convert.ToString(dtFee.Rows[fee]["textval"]);
                                            sbSem.Append(feecaT + ",");
                                            // sbSemStr.Append(feecaTStr + ",");
                                            BatchYear = Convert.ToString(dtFee.Rows[fee]["ACD_BATCH_YEAR"]);
                                        }
                                        if (feecaT == "")
                                        {
                                            feeCategory = feecaT;
                                        }
                                        else
                                        {
                                            feeCategory += "'" + "," + "'" + feecaT;
                                        }
                                        if (BatchYear == "")
                                        {
                                            batch_year = BatchYear;
                                        }
                                        else
                                        {
                                            batch_year += "'" + "," + "'" + BatchYear;
                                        }

                                        if (sbSem.Length > 0)
                                            sbSem.Remove(sbSem.Length - 1, 1);
                                        if (!htAcademic.ContainsKey(clgCode + "$" + acdBatchYear))
                                            htAcademic.Add(clgCode + "$" + acdBatchYear, Convert.ToString(sbSem));
                                        //if (sbSemStr.Length > 0)
                                        //    sbSemStr.Remove(sbSemStr.Length - 1, 1);    


                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch { }
            #endregion

            string activerow = Convert.ToString(rowIndex);
            string activecol = Convert.ToString(selectedCellIndex);
            ArrayList ar = new ArrayList();
            ArrayList ardept = new ArrayList();

            int actnew = 0;
            int actbal = 0;
            int actpaidtotal = 0;
            int refundamt = 0;
            int excessamt = 0;
            int fineamt = 0;
            if (activecol.Trim() != "")
            {
                actnew = Convert.ToInt32(activecol);
                actpaidtotal = Convert.ToInt32(19);
                actbal = Convert.ToInt32(20);
                refundamt = Convert.ToInt32(21);
                excessamt = Convert.ToInt32(22);
                fineamt = Convert.ToInt32(23);
            }
            string gettagvalue = "";
            if (actnew > 11)
            {
                gettagvalue = Convert.ToString(GrdDegree.Rows[1].Cells[actnew].Text);
            }

            int act = Convert.ToInt32(activerow);
            if (act == GrdDegree.Rows.Count - 1)
            {
                for (int i = 0; i < GrdDegree.Rows.Count - 1; i++)
                {
                    if ((hedcount == "") && (ledcount == "") && (batcount == "") && (coursecode == ""))
                    {

                        hedcount = Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[2].Text);
                        ledcount = Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[4].Text);
                        ar.Add(Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[5].Text));
                        batcount = Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[5].Text);
                        ardept.Add(Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[7].Text));
                        coursecode = Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[7].Text);
                    }
                    else
                    {
                        hedcount = hedcount + "','" + "" + Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[2].Text) + "";
                        ledcount = ledcount + "','" + "" + Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[4].Text) + "";
                        batcount = batcount + "','" + "" + Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[5].Text) + "";
                        coursecode = coursecode + "','" + "" + Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[7].Text) + "";
                        if (!ar.Contains(batcount))
                        {
                            ar.Add(Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[5].Text));
                            batcount = batcount + "','" + "" + Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[5].Text) + "";
                        }
                        if (!ardept.Contains(coursecode))
                        {
                            ardept.Add(Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[7].Text));
                            coursecode = coursecode + "','" + "" + Convert.ToString(GrdDegree.Rows[Convert.ToInt32(i)].Cells[7].Text) + "";
                        }
                    }
                }
                ar.Clear();
                ardept.Clear();
            }
            string headercode = Convert.ToString(GrdDegree.Rows[Convert.ToInt32(activerow)].Cells[2].Text);
            string ledgercode = Convert.ToString(GrdDegree.Rows[Convert.ToInt32(activerow)].Cells[4].Text);
            string batchyr = Convert.ToString(GrdDegree.Rows[Convert.ToInt32(activerow)].Cells[5].Text);
            string courseid = Convert.ToString(GrdDegree.Rows[Convert.ToInt32(activerow)].Cells[7].Text);

            if ((hedcount != "") && (ledcount != "") && (batcount != "") && (coursecode != ""))
            {
                headercode = hedcount;
                ledgercode = ledcount;
                batchyr = batcount;
                courseid = coursecode;
            }

            if (GrdDegree.Rows.Count > 0)
            {
                coldegname = Convert.ToString(GrdDegree.Rows[0].Cells[Convert.ToInt32(activecol)].Text);
                if (coldegname.Trim() == "")
                {
                    coldegname = Convert.ToString(GrdDegree.Rows[0].Cells[Convert.ToInt32(activecol)].Text);
                }
            }
            #endregion

            Boolean flag = false;
            Boolean flag1 = false;

            if (!cbAcdYear.Checked)
            {
                #region newqry

                selqry = selqry + "    SELECT A.HeaderFK,LedgerFK,r.batch_year,r.degree_code, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C WHERE A.App_No = P.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id and r.App_No =p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                }
                if (sem != "")
                {
                    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                }
                if (headercode != "")
                {
                    selqry = selqry + " and HeaderFK in ('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                if (batchyr != "")
                {
                    selqry = selqry + " and p.batch_year in('" + batchyr + "')";
                }
                if (courseid != "")
                {
                    selqry = selqry + " and c.Course_Id in('" + courseid + "')";

                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                }
                selqry = selqry + "GROUP BY a.HeaderFK,LedgerFK,r.batch_year,r.degree_code ";
                if (activecol.Trim() == "9")
                {
                    selqry = selqry + " having SUM(DeductAmout) > 0 ";
                }
                if (activecol.Trim() == "10")
                {
                    selqry = selqry + " having SUM(FromGovtAmt) > 0";
                }
                if (activecol.Trim() == Convert.ToString(actbal))
                {
                    selqry = selqry + " having SUM(BalAmount) > 0";
                }
                if (activecol.Trim() == Convert.ToString(actpaidtotal))
                {
                    selqry = selqry + " having sum(BalAmount) = 0";
                }
                if (activecol.Trim() == Convert.ToString(refundamt))
                {
                    selqry = selqry + "having SUM(RefundAmount)>0";
                }
                //paymode
                selqry = selqry + " SELECT A.HeaderFK,LedgerFK,r.batch_year,r.degree_code,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Registration r,Degree d,Course C WHERE A.App_No = P.app_no and r.App_No=p.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id  AND P.IsConfirm = 1 AND Admission_Status = 1  and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                if (usBasedRights == true)
                    selqry += " and a.EntryUserCode in('" + usercode + "')";
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                }
                if (sem != "")
                {
                    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                }
                if (headercode != "")
                {
                    selqry = selqry + " and HeaderFK in ('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                if (batchyr != "")
                {
                    selqry = selqry + " and p.batch_year in('" + batchyr + "')";
                }
                if (courseid != "")
                {
                    selqry = selqry + " and c.course_id in('" + courseid + "')";

                }
                if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
                {
                    selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                    }
                }
                selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK,r.batch_year,PayMode,r.degree_code ";
                //excess
                //selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerfK,r.batch_year,r.Degree_Code from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No and d.Degree_Code =r.degree_code and c.Course_Id =d.Course_Id  AND P.IsConfirm = 1  AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (headercode != "")
                //{
                //    selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
                //}
                //if (ledgercode != "")
                //{
                //    selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
                //}
                //if (batchyr != "")
                //{
                //    selqry = selqry + " and p.batch_year in('" + batchyr + "')";
                //}
                //if (courseid != "")
                //{
                //    selqry = selqry + " and c.Course_Id in('" + courseid + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                //    }
                //}
                //selqry = selqry + " GROUP BY A.HeaderFK,A.LedgerfK,r.batch_year,r.Degree_Code";
                selqry = selqry + "  select SUM(f.Excessamt) as ExcessAmount,fd.HeaderFK,fd.LedgerFK,r.Batch_Year,C.Course_Id,d.Degree_Code from FT_ExcessDet F,FT_ExcessLedgerDet Fd,Registration r,Degree d,Course c where f.App_No =r.App_No and f.ExcessDetPK =fd.ExcessDetFK and r.degree_code=d.Degree_Code and d.Course_Id =c.Course_Id ";
                //and  d.Degree_Code in ('55')  and fd.HeaderFK in('1')  and fd.LedgerFK in('1') and r.batch_year in('2013') and c.Course_Id in('28')";
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                }
                if (sem != "")
                {
                    // selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                }
                if (headercode != "")
                {
                    selqry = selqry + " and fd.HeaderFK in('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + "  and fd.LedgerFK in('" + ledgercode + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                if (batchyr != "")
                {
                    selqry = selqry + " and r.batch_year in('" + batchyr + "')";
                }
                if (courseid != "")
                {
                    selqry = selqry + " and c.Course_Id in('" + courseid + "')";
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                }
                selqry = selqry + "GROUP BY fd.HeaderFK ,fd.LedgerFK,r.Batch_Year ,C.Course_Id,d.Degree_Code";
                if (activecol.Trim() == Convert.ToString(excessamt))
                {
                    selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
                    flag = true;
                }
                selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
                selqry = selqry + " select d.Degree_Code,c.Course_Id,c.Course_Name,dt.Dept_Name,dt.dept_acronym,dt.Dept_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id";
                if (ddlstream.Items.Count > 0)
                {
                    selqry = selqry + "   and c.type ='" + ddlstream.SelectedItem.Text + "'";
                }


                #endregion
            }
            else
            {
                #region newqry Added by saranya on 03012018 for Academic year setting(degreeCellClick)

                selqry = selqry + "    SELECT A.HeaderFK,LedgerFK,r.batch_year,r.degree_code, SUM(FeeAmount) as Allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C WHERE A.App_No = P.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id and r.App_No =p.app_no  AND P.IsConfirm = 1 AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and p.batch_year in('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "') ";
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                }
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                if (headercode != "")
                {
                    selqry = selqry + " and HeaderFK in ('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                //if (batchyr != "")
                //{
                //    selqry = selqry + " and p.batch_year in('" + batchyr + "')";
                //}
                if (courseid != "")
                {
                    selqry = selqry + " and c.Course_Id in('" + courseid + "')";

                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                }
                selqry = selqry + "GROUP BY a.HeaderFK,LedgerFK,r.batch_year,r.degree_code ";
                if (activecol.Trim() == "9")
                {
                    selqry = selqry + " having SUM(DeductAmout) > 0 ";
                }
                if (activecol.Trim() == "10")
                {
                    selqry = selqry + " having SUM(FromGovtAmt) > 0";
                }
                if (activecol.Trim() == Convert.ToString(actbal))
                {
                    selqry = selqry + " having SUM(BalAmount) > 0";
                }
                if (activecol.Trim() == Convert.ToString(actpaidtotal))
                {
                    selqry = selqry + " having sum(BalAmount) = 0";
                }
                if (activecol.Trim() == Convert.ToString(refundamt))
                {
                    selqry = selqry + "having SUM(RefundAmount)>0";
                }
                //paymode
                selqry = selqry + " SELECT A.HeaderFK,LedgerFK,r.batch_year,r.degree_code,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Registration r,Degree d,Course C WHERE A.App_No = P.app_no and r.App_No=p.app_no and r.App_No=a.App_No and d.Degree_Code =r.degree_code and d.Course_Id =c.Course_Id  AND P.IsConfirm = 1 AND Admission_Status = 1  and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') and p.batch_year in('" + batch_year + "') and A.FeeCategory in ('" + feeCategory + "') ";
                if (usBasedRights == true)
                    selqry += " and a.EntryUserCode in('" + usercode + "')";
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                }
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                if (headercode != "")
                {
                    selqry = selqry + " and HeaderFK in ('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                //if (batchyr != "")
                //{
                //    selqry = selqry + " and p.batch_year in('" + batchyr + "')";
                //}
                if (courseid != "")
                {
                    selqry = selqry + " and c.course_id in('" + courseid + "')";

                }
                if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
                {
                    selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                    }
                }
                selqry = selqry + "GROUP BY A.HeaderFK,LedgerFK,r.batch_year,PayMode,r.degree_code ";
                //excess
                //selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerfK,r.batch_year,r.Degree_Code from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and em.App_No = a.App_No and d.Degree_Code =r.degree_code and c.Course_Id =d.Course_Id  AND P.IsConfirm = 1  AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
                //if (deptdegcode != "")
                //{
                //    selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                //}
                //if (sem != "")
                //{
                //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                //}
                //if (headercode != "")
                //{
                //    selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
                //}
                //if (ledgercode != "")
                //{
                //    selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
                //}
                //if (batchyr != "")
                //{
                //    selqry = selqry + " and p.batch_year in('" + batchyr + "')";
                //}
                //if (courseid != "")
                //{
                //    selqry = selqry + " and c.Course_Id in('" + courseid + "')";
                //}
                //if (datewise == 1)
                //{
                //    if (fromdate != "" && todate != "")
                //    {
                //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                //    }
                //}
                //selqry = selqry + " GROUP BY A.HeaderFK,A.LedgerfK,r.batch_year,r.Degree_Code";
                selqry = selqry + "  select SUM(f.Excessamt) as ExcessAmount,fd.HeaderFK,fd.LedgerFK,r.Batch_Year,C.Course_Id,d.Degree_Code from FT_ExcessDet F,FT_ExcessLedgerDet Fd,Registration r,Degree d,Course c where f.App_No =r.App_No and f.ExcessDetPK =fd.ExcessDetFK and r.degree_code=d.Degree_Code and d.Course_Id =c.Course_Id  and r.batch_year in('" + batch_year + "') ";
                //and  d.Degree_Code in ('55')  and fd.HeaderFK in('1')  and fd.LedgerFK in('1') and r.batch_year in('2013') and c.Course_Id in('28')";
                if (deptdegcode != "")
                {
                    selqry = selqry + "  and  d.Degree_Code in ('" + deptdegcode + "')";
                }
                if (sem != "")
                {
                    // selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
                }
                if (headercode != "")
                {
                    selqry = selqry + " and fd.HeaderFK in('" + headercode + "')";
                }
                if (ledgercode != "")
                {
                    selqry = selqry + "  and fd.LedgerFK in('" + ledgercode + "')";
                }
                //if (chkinclude.Checked == true)
                //{
                //    selqry = selqry + " and r.DelFlag=0 ";
                //}
                //if (cc != "")
                //{
                //    selqry = selqry + cc;
                //}
                //if (debar != "")
                //{
                //    selqry = selqry + debar;
                //}
                //if (disc != "")
                //{
                //    selqry = selqry + disc;
                //}
                if (commondist.Trim() != "")
                {
                    selqry = selqry + commondist;
                }
                //if (batchyr != "")
                //{
                //    selqry = selqry + " and r.batch_year in('" + batchyr + "')";
                //}
                if (courseid != "")
                {
                    selqry = selqry + " and c.Course_Id in('" + courseid + "')";
                }
                if (datewise == 1)
                {
                    if (fromdate != "" && todate != "")
                    {
                        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                    }
                }
                selqry = selqry + "GROUP BY fd.HeaderFK ,fd.LedgerFK,r.Batch_Year ,C.Course_Id,d.Degree_Code";
                if (activecol.Trim() == Convert.ToString(excessamt))
                {
                    selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
                    flag = true;
                }
                selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
                selqry = selqry + " select d.Degree_Code,c.Course_Id,c.Course_Name,dt.Dept_Name,dt.dept_acronym,dt.Dept_Code from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id";
                if (ddlstream.Items.Count > 0)
                {
                    selqry = selqry + "   and c.type ='" + ddlstream.SelectedItem.Text + "'";
                }


                #endregion
            }

            bool paymodecheck = false;
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (gettagvalue.Trim() != "")
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    paymodecheck = true;
                }
            }
            else
            {
                paymodecheck = true;
            }
            if (flag == true)
            {
                if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true && ds.Tables[2].Rows.Count > 0)
                {
                    flag1 = true;
                }
            }
            else
            {
                if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true)
                {
                    flag1 = true;
                }
            }
            if (flag1 == true)
            {
                #region fpdept design

                loaddeptcolumns();
                DataView dv = new DataView();
                int countval = 0;

                ArrayList arrColDeptNames = new ArrayList();
                ArrayList arrColDeptNames2 = new ArrayList();
                Dictionary<int, string> dicLedRowColor = new Dictionary<int, string>();
                arrColDeptNames.Add("S.No");
                arrColDeptNames2.Add("S.No");
                dtReport.Columns.Add("S.No");
                arrColDeptNames.Add("Header Name");
                arrColDeptNames2.Add("Header Name");
                dtReport.Columns.Add("Header Name");
                arrColDeptNames.Add("Header pk");
                arrColDeptNames2.Add("Header pk");
                dtReport.Columns.Add("Header pk");
                arrColDeptNames.Add("Ledger Name");
                arrColDeptNames2.Add("Ledger Name");
                dtReport.Columns.Add("Ledger Name");
                arrColDeptNames.Add("Ledger pk");
                arrColDeptNames2.Add("Ledger pk");
                dtReport.Columns.Add("Ledger pk");
                arrColDeptNames.Add("Batch Year");
                arrColDeptNames2.Add("Batch Year");
                dtReport.Columns.Add("Batch Year");
                arrColDeptNames.Add(lbldeg.Text);
                arrColDeptNames2.Add(lbldeg.Text);
                dtReport.Columns.Add(lbldeg.Text);
                arrColDeptNames.Add("CourseId");
                arrColDeptNames2.Add("CourseId");
                dtReport.Columns.Add("CourseId");
                arrColDeptNames.Add(lbldept.Text);
                arrColDeptNames2.Add(lbldept.Text);
                dtReport.Columns.Add(lbldept.Text);
                arrColDeptNames.Add("Dept_Code");
                arrColDeptNames2.Add("Dept_Code");
                dtReport.Columns.Add("Dept_Code");
                arrColDeptNames.Add("Allot");
                arrColDeptNames2.Add("Allot");
                dtReport.Columns.Add("Allot");
                arrColDeptNames.Add("Concession");
                arrColDeptNames2.Add("Concession");
                dtReport.Columns.Add("Concession");
                arrColDeptNames.Add("Scholarship");
                arrColDeptNames2.Add("Scholarship");
                dtReport.Columns.Add("Scholarship");
                arrColDeptNames.Add("Total");
                arrColDeptNames2.Add("Total");
                dtReport.Columns.Add("Total");

                Hashtable newhash = new Hashtable();

                if (chkl_paid.Items.Count > 0)
                {
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            countval++;
                            arrColDeptNames.Add("Paid");
                            arrColDeptNames2.Add(chkl_paid.Items[s].Text);
                            dtReport.Columns.Add(chkl_paid.Items[s].Text);
                            newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                        }
                    }
                    if (countval != 0)
                    {
                        arrColDeptNames.Add("Paid");
                        arrColDeptNames2.Add("Total Paid");
                        dtReport.Columns.Add("Total Paid");
                    }
                }
                if (countval == 0)
                {
                    arrColDeptNames.Add("Paid");
                    arrColDeptNames2.Add("Paid");
                    dtReport.Columns.Add("Paid");
                }

                arrColDeptNames.Add("Balance");
                arrColDeptNames2.Add("Balance");
                dtReport.Columns.Add("Balance");
                arrColDeptNames.Add("Refund Amount");
                arrColDeptNames2.Add("Refund Amount");
                dtReport.Columns.Add("Refund Amount");
                arrColDeptNames.Add("Excess Amount");
                arrColDeptNames2.Add("Excess Amount");
                dtReport.Columns.Add("Excess Amount");
                arrColDeptNames.Add("Fine Amount");
                arrColDeptNames2.Add("Fine Amount");
                dtReport.Columns.Add("Fine Amount");
                DataRow drHdr1 = dtReport.NewRow();
                DataRow drHdr2 = dtReport.NewRow();
                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                {
                    drHdr1[grCol] = arrColDeptNames[grCol];
                    drHdr2[grCol] = arrColDeptNames2[grCol];
                }
                dtReport.Rows.Add(drHdr1);
                dtReport.Rows.Add(drHdr2);

                #endregion

                #region fpdept value

                double allotamt = 0;
                double consamt = 0;
                double govt = 0;
                double tot_amount = 0;
                double totalvalue = 0;
                double totamount = 0;
                double fnlamount = 0;
                double bal = 0;
                double paidamount = 0;
                int ColCntGrd = 0;

                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = Convert.ToString(i + 1);
                    //fpdept.Sheets[0].Rows.Count = ds.Tables[0].Rows.Count;
                    //fpdept.Sheets[0].Cells[i, 0].Text = Convert.ToString(i + 1);
                    if (ds.Tables[3].Rows.Count > 0)
                    {
                        ds.Tables[3].DefaultView.RowFilter = "LedgerPK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                        dvhead = ds.Tables[3].DefaultView;
                        if (dvhead.Count > 0)
                        {
                            drowGrd[1] = Convert.ToString(dvhead[0]["Headername"]);
                            drowGrd[2] = Convert.ToString(dvhead[0]["HeaderFK"]);
                            drowGrd[3] = Convert.ToString(dvhead[0]["Ledgername"]);
                            drowGrd[4] = Convert.ToString(dvhead[0]["LedgerPK"]);
                        }
                    }
                    drowGrd[5] = Convert.ToString(ds.Tables[0].Rows[i]["batch_year"].ToString());
                    //fpdept.Sheets[0].Cells[i, 3].Tag = Convert.ToString(ds.Tables[0].Rows[i]["batch_year"].ToString());
                    DataView dnew = new DataView();
                    if (ds.Tables[4].Rows.Count > 0)
                    {
                        ds.Tables[4].DefaultView.RowFilter = "Degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_code"]) + "' ";
                        dnew = ds.Tables[4].DefaultView;
                        string deptname = "";
                        string Acrname = "";
                        if (dnew.Count > 0)
                        {
                            drowGrd[6] = Convert.ToString(dnew[0]["Course_Name"]);
                            drowGrd[7] = Convert.ToString(dnew[0]["Course_Id"]);
                            deptname = Convert.ToString(dnew[0]["Dept_Name"]);
                            Acrname = Convert.ToString(dnew[0]["dept_acronym"]);
                            if (deptacr == true)
                                drowGrd[8] = Acrname;
                            else
                                drowGrd[8] = deptname;

                            drowGrd[9] = Convert.ToString(dnew[0]["Dept_Code"]);
                        }
                    }
                    //allot
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                    drowGrd[10] = Convert.ToString(allotamt);
                    if (!grandtotal.ContainsKey(10))
                        grandtotal.Add(10, Convert.ToString(allotamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[10]), out amount);
                        amount += allotamt;
                        grandtotal.Remove(10);
                        grandtotal.Add(10, Convert.ToString(amount));
                    }
                    //consession
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                    drowGrd[11] = Convert.ToString(consamt);
                    if (!grandtotal.ContainsKey(11))
                        grandtotal.Add(11, Convert.ToString(consamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[11]), out amount);
                        amount += consamt;
                        grandtotal.Remove(11);
                        grandtotal.Add(11, Convert.ToString(amount));
                    }
                    //government
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                    drowGrd[12] = Convert.ToString(govt);
                    if (!grandtotal.ContainsKey(12))
                        grandtotal.Add(12, Convert.ToString(consamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[12]), out amount);
                        amount += govt;
                        grandtotal.Remove(12);
                        grandtotal.Add(12, Convert.ToString(amount));
                    }
                    //total
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                    drowGrd[13] = Convert.ToString(totalvalue);
                    if (!grandtotal.ContainsKey(13))
                        grandtotal.Add(13, Convert.ToString(totalvalue));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[13]), out amount);
                        amount += totalvalue;
                        grandtotal.Remove(13);
                        grandtotal.Add(13, Convert.ToString(amount));
                    }
                    //paid paymode count=0
                    double paidvalue = 0;
                    if (countval == 0)
                    {
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                        fnlamount = Convert.ToDouble(paidvalue);
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                            amount += paidvalue;
                            grandtotal.Remove(ColCntGrd - 5);
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                        }
                    }
                    //refund
                    double refund = 0;
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                    if (!grandtotal.ContainsKey(ColCntGrd - 3))
                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                        amount += refund;
                        grandtotal.Remove(ColCntGrd - 3);
                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                    }
                    //excess
                    DataView dvex = new DataView();
                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        ds.Tables[2].DefaultView.RowFilter = "degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["degree_code"]) + "'";
                        dvex = ds.Tables[2].DefaultView;
                        if (dvex.Count > 0 && dvex != null)
                        {
                            for (int k = 0; k < dvex.Count; k++)
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                tot_amount += amount;
                            }
                        }
                    }
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                    if (!grandtotal.ContainsKey(ColCntGrd - 2))
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                        amount += tot_amount;
                        grandtotal.Remove(ColCntGrd - 2);
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                    }
                    tot_amount = 0;

                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                        {
                            if (chkl_paid.Items[pay].Selected == true)
                            {
                                ds.Tables[1].DefaultView.RowFilter = "degree_code='" + Convert.ToString(ds.Tables[0].Rows[i]["degree_code"].ToString()) + "' and PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "'";
                                dv = ds.Tables[1].DefaultView;
                                int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                for (int k = 0; k < dv.Count; k++)
                                {
                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                    fnlamount = fnlamount + totamount;
                                    paidamount = paidamount + Convert.ToDouble(totamount);
                                }

                                drowGrd[colnew] = Convert.ToString(paidamount);
                                if (!grandtotal.ContainsKey(colnew))
                                    grandtotal.Add(colnew, Convert.ToString(paidamount));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                    amount += paidamount;
                                    grandtotal.Remove(colnew);
                                    grandtotal.Add(colnew, Convert.ToString(amount));
                                }
                                paidamount = 0;
                            }
                        }
                        if (countval != 0)
                        {
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                amount += fnlamount;
                                grandtotal.Remove(ColCntGrd - 5);
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                            }
                        }
                        if (totalvalue != 0)
                        {
                            bal = totalvalue - fnlamount;
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                            if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                amount += bal;
                                grandtotal.Remove(ColCntGrd - 4);
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                            }
                            fnlamount = 0;
                            if (bal == 0)
                                dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                            else
                                dicRowColor.Add(dtReport.Rows.Count, "Balance");
                        }
                    }
                    else
                    {
                        bal = totalvalue;
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                        if (!grandtotal.ContainsKey(ColCntGrd - 4))
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                            amount += bal;
                            grandtotal.Remove(ColCntGrd - 4);
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                        }
                    }
                    dtReport.Rows.Add(drowGrd);
                }
                drowGrd = dtReport.NewRow();
                drowGrd[0] = "Grand Total";
                double grandvalue = 0;
                for (int j = 9; j < dtReport.Columns.Count; j++)
                {
                    double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                    drowGrd[j] = Convert.ToString(grandvalue);
                }
                dtReport.Rows.Add(drowGrd);

                #endregion

                #region visible
                GrdDept.DataSource = dtReport;
                GrdDept.DataBind();
                GrdDept.Visible = true;

                GridViewRow row = GrdDept.Rows[0];
                GridViewRow previousRow = GrdDept.Rows[1];

                for (int i = 0; i < dtReport.Columns.Count; i++)
                {
                    if (row.Cells[i].Text == previousRow.Cells[i].Text)
                    {
                        row.Cells[i].RowSpan = 2;
                        previousRow.Cells[i].Visible = false;
                        //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                        //                       previousRow.Cells[i].RowSpan + 1;
                        //previousRow.Cells[i].Visible = false;
                    }
                }
                //ColumnSpan

                for (int cell = GrdDept.Rows[0].Cells.Count - 1; cell > 0; cell--)
                {
                    TableCell colum = GrdDept.Rows[0].Cells[cell];
                    TableCell previouscol = GrdDept.Rows[0].Cells[cell - 1];
                    if (colum.Text == previouscol.Text)
                    {
                        if (previouscol.ColumnSpan == 0)
                        {
                            if (colum.ColumnSpan == 0)
                            {
                                previouscol.ColumnSpan += 2;
                            }
                            else
                            {
                                previouscol.ColumnSpan += colum.ColumnSpan + 1;
                            }
                            colum.Visible = false;
                        }
                    }
                }
                foreach (KeyValuePair<int, string> dr in dicRowColor)
                {
                    int g = dr.Key;
                    string DicValue = dr.Value;
                    if (DicValue == "NoBalance")
                    {
                        GrdDept.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                    }
                    if (DicValue == "Balance")
                    {
                        GrdDept.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                    }
                }
                divdep.Visible = true;
                divdept.Visible = true;
                lbl_dep.Visible = true;
                lbl_dep.Visible = true;
                //btn_fpdep.Visible = true;
                lbl_dep.Text = "->Header(" + colhedername + ")->Ledger(" + colledname + ")->Batch(" + colbatname + ")->Degree(" + coldegname + ")->Department";
                rptprint.Visible = true;
                //rptprint.Attributes.Add("Style", "margin-top:-160px; margin-left:10px;");
                // pnl_deptcolord.Visible = true;
                // pnl_deptcolorder.Visible = true;
                // loaddeptcolorder();
                ViewState["dept"] = 4;
                ViewState["sem"] = null;
                ViewState["stud"] = null;
                rptprint.Visible = true;
                txtexcelname.Text = "";
                lblvalidation1.Text = "";
                #endregion
            }
            else
            {
                GrdDept.Visible = false;
                divdept.Visible = false;
                lbl_dep.Visible = false;
                //  pnl_deptcolord.Visible = false;
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                lbl_alert.Text = "No Record Found";
            }
        }
        catch (Exception ex)
        {
        }
    }

    #endregion

    #region dept

    protected void GrdDept_OnRowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            for (int i = 1; i < e.Row.Cells.Count; i++)
            {
                TableCell cell = e.Row.Cells[i];
                cell.Attributes["onmouseover"] = "this.style.cursor='pointer';";
                cell.Attributes["onmouseout"] = "this.style.textDecoration='none';";
                cell.Attributes["onclick"] = string.Format("document.getElementById('{0}').value = {1}; {2}"
                   , GrdDeptSelectedIndex.ClientID, i
                   , Page.ClientScript.GetPostBackClientHyperlink((GridView)sender, string.Format("Select${0}", e.Row.RowIndex)));
            }
        }
    }

    protected void GrdDept_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.RowIndex == 0)
            {
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[9].Visible = false;
                e.Row.Cells[25].Visible = false;
            }
            else
            {
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[14].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[15].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[16].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[17].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[18].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[19].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[20].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[21].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[22].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[23].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[24].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[9].Visible = false;
                e.Row.Cells[25].Visible = false;
            }
            if (e.Row.RowIndex == 1)
            {
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[14].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[15].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[16].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[17].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[18].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[19].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[20].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[21].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[22].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[23].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[24].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[9].Visible = false;
                e.Row.Cells[25].Visible = false;
            }
        }
    }

    protected void GrdDept_SelectedIndexChanged(Object sender, EventArgs e)
    {
        try
        {
            var grid = (GridView)sender;
            GridViewRow selectedRow = grid.SelectedRow;
            int rowIndex = grid.SelectedIndex;
            int selectedCellIndex = int.Parse(this.GrdDeptSelectedIndex.Value);

            DeptAcr();

            #region getvalue
            string sem = "";
            string sec = "";
            string stud = "";
            string seatype = "";
            string studtype = "";
            string paid = "";
            string allot = "";
            string consession = "";
            string Finyearvalue = "";
            div7.Visible = false;


            sem = Convert.ToString(getCblSelectedValue(cbl_sem));
            sec = Convert.ToString(getCblSelectedValue(cbl_sect));
            stud = Convert.ToString(getCblSelectedValue(cbl_stud));
            seatype = Convert.ToString(getCblSelectedValue(cbl_seat));
            studtype = Convert.ToString(getCblSelectedValue(cbl_studtype));
            paid = Convert.ToString(getCblSelectedValue(chkl_paid));
            Finyearvalue = Convert.ToString(getCblSelectedValue(chklsfyear));

            //string cc = "";
            //string debar = "";
            //string disc = "";
            //if (cblinclude.Items.Count > 0)
            //{
            //    for (int i = 0; i < cblinclude.Items.Count; i++)
            //    {
            //        if (cblinclude.Items[i].Selected == true)
            //        {
            //            if (cblinclude.Items[i].Value == "1")
            //            {
            //                cc = " and r.cc=0";
            //            }
            //            if (cblinclude.Items[i].Value == "2")
            //            {
            //                debar = " and r.Exam_Flag<>'debar'";
            //            }
            //            if (cblinclude.Items[i].Value == "3")
            //            {
            //                disc = "";
            //            }
            //        }
            //        else
            //        {
            //            disc = " and r.DelFlag=0";
            //        }
            //    }
            //}
            //else
            //{
            //    disc = " and r.DelFlag=0";
            //}

            string cc = "";
            string debar = "";
            string disc = "";
            string commondist = "";
            if (cblinclude.Items.Count > 0)
            {
                for (int i = 0; i < cblinclude.Items.Count; i++)
                {
                    if (cblinclude.Items[i].Selected == true)
                    {
                        if (cblinclude.Items[i].Value == "1")
                        {
                            cc = " r.cc=1";
                        }
                        if (cblinclude.Items[i].Value == "2")
                        {
                            debar = "  r.Exam_Flag like '%debar'";
                        }
                        if (cblinclude.Items[i].Value == "3")
                        {
                            disc = "  r.DelFlag=1";
                        }
                    }
                }
            }

            if (cc != "" && debar == "" && disc == "")
                commondist = " and (" + cc + " or r.cc=0)  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            if (cc == "" && debar != "" && disc == "")
                commondist = " and r.cc=0  and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            if (cc == "" && debar == "" && disc != "")
                commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and (" + disc + " or r.DelFlag=0)";

            if (cc != "" && debar != "" && disc == "")
                commondist = " and (" + cc + " or r.cc=0) and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            if (cc == "" && debar != "" && disc != "")
                commondist = " and r.cc=0 and (" + debar + " or r.Exam_Flag<>'debar')  and (" + disc + " or r.DelFlag=0)";

            if (cc != "" && debar == "" && disc != "")
                commondist = " and (" + cc + " or r.cc=0) and r.Exam_Flag<>'debar'  and (" + disc + " or r.DelFlag=0)";

            else if (cc == "" && debar == "" && disc == "")
                commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            if (cc != "" && debar != "" && disc != "")
                commondist = "";

            string fromdate = "";
            string todate = "";
            int datewise = 0;
            if (chk_datewise.Checked == true)
            {
                datewise = 1;
                if (datewise == 1)
                {
                    fromdate = txt_fromdate.Text;
                    todate = txt_todate.Text;
                    if (fromdate != "" && todate != "")
                    {
                        string[] frdate = fromdate.Split('/');
                        if (frdate.Length == 3)
                        {
                            fromdate = frdate[1].ToString() + "/" + frdate[0].ToString() + "/" + frdate[2].ToString();
                        }
                        string[] tdate = todate.Split('/');
                        if (tdate.Length == 3)
                        {
                            todate = tdate[1].ToString() + "/" + tdate[0].ToString() + "/" + tdate[2].ToString();
                        }
                    }
                }
            }

            lbl_semcell.Text = "";
            lbl_semcell.Visible = false;

            string activerow = Convert.ToString(rowIndex);
            string activecol = Convert.ToString(selectedCellIndex);
            string hedcount = "";
            string ledcount = "";
            string batcount = "";
            string coursecode = "";
            string deptcodefp = "";
            ArrayList ar = new ArrayList();
            ArrayList ardept = new ArrayList();
            ArrayList ardeptcode = new ArrayList();

            int actnew = 0;
            int actbal = 0;
            int actpaidtotal = 0;
            int refundamt = 0;
            int excessamt = 0;
            int fineamt = 0;
            if (activecol.Trim() != "")
            {
                actnew = Convert.ToInt32(activecol);
                actpaidtotal = Convert.ToInt32(21);
                actbal = Convert.ToInt32(22);
                refundamt = Convert.ToInt32(23);
                excessamt = Convert.ToInt32(24);
                fineamt = Convert.ToInt32(25);
            }
            string gettagvalue = "";
            if (actnew > 13)
            {
                gettagvalue = Convert.ToString(GrdDept.Rows[1].Cells[actnew].Text);
            }

            int act = Convert.ToInt32(activerow);
            if (act == GrdDegree.Rows.Count - 1)
            {
                for (int i = 0; i < GrdDept.Rows.Count; i++)
                {
                    if ((hedcount == "") && (ledcount == "") && (batcount == "") && (coursecode == "") && (deptcodefp == ""))
                    {
                        hedcount = Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[2].Text);
                        ledcount = Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[4].Text);
                        ar.Add(Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[5].Text));
                        batcount = Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[5].Text);
                        ardept.Add(Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[7].Text));
                        coursecode = Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[7].Text);
                        ardeptcode.Add(Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[9].Text));
                        deptcodefp = Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[9].Text);

                    }
                    else
                    {
                        hedcount = hedcount + "','" + "" + Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[2].Text) + "";
                        ledcount = ledcount + "','" + "" + Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[4].Text) + "";
                        batcount = batcount + "','" + "" + Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[5].Text) + "";
                        coursecode = coursecode + "','" + "" + Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[7].Text) + "";
                        deptcodefp = deptcodefp + "','" + "" + Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[9].Text) + "";
                        if (!ar.Contains(batcount))
                        {
                            ar.Add(Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[5].Text));
                            batcount = batcount + "','" + "" + Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[5].Text) + "";
                        }
                        if (!ardept.Contains(coursecode))
                        {
                            ardept.Add(Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[7].Text));
                            coursecode = coursecode + "','" + "" + Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[7].Text) + "";
                        }
                        if (!ardeptcode.Contains(deptcodefp))
                        {
                            ardeptcode.Add(Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[9].Text));
                            deptcodefp = deptcodefp + "','" + "" + Convert.ToString(GrdDept.Rows[Convert.ToInt32(i)].Cells[9].Text) + "";
                        }
                    }
                }
                ar.Clear();
                ardept.Clear();
                ardeptcode.Clear();
            }
            string headercode = Convert.ToString(GrdDept.Rows[Convert.ToInt32(activerow)].Cells[2].Text);
            string ledgercode = Convert.ToString(GrdDept.Rows[Convert.ToInt32(activerow)].Cells[4].Text);
            string batchyr = Convert.ToString(GrdDept.Rows[Convert.ToInt32(activerow)].Cells[5].Text);
            string courseid = Convert.ToString(GrdDept.Rows[Convert.ToInt32(activerow)].Cells[7].Text);
            string deptcode = Convert.ToString(GrdDept.Rows[Convert.ToInt32(activerow)].Cells[9].Text);

            if ((hedcount != "") && (ledcount != "") && (batcount != "") && (coursecode != "") && (deptcodefp != ""))
            {
                headercode = hedcount;
                ledgercode = ledcount;
                batchyr = batcount;
                courseid = coursecode;
                deptcode = deptcodefp;
            }
            if (GrdDept.Rows.Count > 0)
            {
                coldeptname = Convert.ToString(GrdDept.Rows[0].Cells[Convert.ToInt32(activecol)].Text);
                if (coldeptname.Trim() == "")
                {
                    coldeptname = Convert.ToString(GrdDept.Rows[1].Cells[Convert.ToInt32(activecol)].Text);
                }
            }
            #endregion

            Boolean flag = false;
            Boolean flag1 = false;
            string selqry = "";

            #region new query

            selqry = selqry + " SELECT TextVal,FeeCategory,A.HeaderFK,LedgerFK, Course_Name ,p.batch_year,G.Course_Id,g.degree_Code,d.Dept_name,d.Dept_Code,SUM(FeeAmount) as allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,d.dept_acronym FROM FT_FeeAllot A,Applyn P,Degree G,Course C,Department D,TextValTable T WHERE  A.App_No = P.app_no  and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and p.degree_code = g.degree_code and g.college_code = d.college_code  AND P.IsConfirm = 1 AND Admission_Status = 1 AND A.FeeCategory = T.TextCode and P.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
            if (sem != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            }
            if (headercode != "")
            {
                selqry = selqry + " and HeaderFK in ('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
            }
            if (batchyr != "")
            {
                selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            }
            if (courseid != "")
            {
                selqry = selqry + " and C.Course_Id in('" + courseid + "')";

            }
            if (deptcode != "")
            {
                selqry = selqry + " and G.Dept_Code in ('" + deptcode + "') ";
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                }
            }
            selqry = selqry + " GROUP BY TextVal,A.HeaderFK,LedgerFK, c.Course_Name ,p.batch_year,G.Course_Id,g.degree_Code,d.Dept_name,d.Dept_Code,FeeCategory,d.dept_acronym ";
            if (activecol.Trim() == "11")
            {
                selqry = selqry + " having SUM(DeductAmout) > 0 ";
            }
            if (activecol.Trim() == "12")
            {
                selqry = selqry + " having SUM(FromGovtAmt) > 0";
            }
            if (activecol.Trim() == Convert.ToString(actbal))
            {
                selqry = selqry + " having SUM(BalAmount) > 0";
            }
            if (activecol.Trim() == Convert.ToString(actpaidtotal))
            {
                selqry = selqry + " having sum(BalAmount) = 0";
            }
            if (activecol.Trim() == Convert.ToString(refundamt))
            {
                selqry = selqry + "having SUM(RefundAmount)>0";
            }

            //paymode
            selqry = selqry + " SELECT TextVal,PayMode,SUM(Debit) as total,A.HeaderFK,LedgerFK,r.degree_Code,FeeCategory,r.batch_year  FROM FT_FinDailyTransaction A,Applyn P,Registration R,TextValTable T,Degree d,Course C  WHERE A.App_No = P.app_no and r.App_No=A.App_No and r.App_No=p.app_no and d.Degree_Code =r.degree_code and c.Course_Id =d.Course_Id   AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' AND A.FeeCategory = T.TextCode and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
            if (usBasedRights == true)
                selqry += " and a.EntryUserCode in('" + usercode + "')";
            if (sem != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            }
            if (headercode != "")
            {
                selqry = selqry + " and HeaderFK in ('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + " and LedgerFK in('" + ledgercode + "')";
            }
            //if (chkinclude.Checked == true)
            //{
            //    selqry = selqry + " and r.DelFlag=0 ";
            //}
            //if (cc != "")
            //{
            //    selqry = selqry + cc;
            //}
            //if (debar != "")
            //{
            //    selqry = selqry + debar;
            //}
            //if (disc != "")
            //{
            //    selqry = selqry + disc;
            //}
            if (commondist.Trim() != "")
            {
                selqry = selqry + commondist;
            }
            if (batchyr != "")
            {
                selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            }
            if (courseid != "")
            {
                selqry = selqry + " and C.Course_Id in('" + courseid + "')";

            }
            if (deptcode != "")
            {
                selqry = selqry + " and d.Dept_Code in ('" + deptcode + "') ";
            }
            if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
            {
                selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                }
            }
            selqry = selqry + "GROUP BY TextVal,PayMode,A.HeaderFK,LedgerFK,r.degree_Code,FeeCategory,r.batch_year ";
            //excess
            selqry = selqry + "  select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,A.LedgerFK,p.Batch_Year,A.FeeCategory from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Registration r,Degree d,Course C  WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and r.App_No=p.app_no and r.App_No=A.App_No and d.Degree_Code =r.degree_code and c.Course_Id =d.Course_Id  and em.App_No = a.App_No   AND P.IsConfirm = 1   AND Admission_Status = 1 and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";
            if (sem != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            }
            if (headercode != "")
            {
                selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
            }
            //if (chkinclude.Checked == true)
            //{
            //    selqry = selqry + " and r.DelFlag=0 ";
            //}
            //if (cc != "")
            //{
            //    selqry = selqry + cc;
            //}
            //if (debar != "")
            //{
            //    selqry = selqry + debar;
            //}
            //if (disc != "")
            //{
            //    selqry = selqry + disc;
            //}
            if (commondist.Trim() != "")
            {
                selqry = selqry + commondist;
            }
            if (batchyr != "")
            {
                selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            }
            if (courseid != "")
            {
                selqry = selqry + " and C.Course_Id in('" + courseid + "')";

            }
            if (deptcode != "")
            {
                selqry = selqry + " and d.Dept_Code in ('" + deptcode + "') ";
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                }
            }
            selqry = selqry + " GROUP BY A.HeaderFK ,A.LedgerfK,p.Batch_Year ,A.FeeCategory";
            if (activecol.Trim() == Convert.ToString(excessamt))
            {
                selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
                flag = true;
            }
            selqry = selqry + "  select HeaderFK,LedgerPK,HeaderName,LedgerName from FM_HeaderMaster h,FM_LedgerMaster l where l.HeaderFK =h.HeaderPK and h.CollegeCode ='" + collegecode1 + "' order by isnull(l.priority,1000), l.ledgerName asc";
            #endregion

            bool paymodecheck = false;
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (gettagvalue.Trim() != "")
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    paymodecheck = true;
                }
            }
            else
            {
                paymodecheck = true;
            }

            if (flag == true)
            {
                if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true && ds.Tables[2].Rows.Count > 0)
                {
                    flag1 = true;
                }
            }
            else
            {
                if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true)
                {
                    flag1 = true;
                }
            }

            if (flag1 == true)
            {
                #region  design

                loadsemcolumns();
                DataView dv = new DataView();
                int check = 0;
                ArrayList arrColLdrNames = new ArrayList();
                ArrayList arrColLdrNames2 = new ArrayList();
                Dictionary<int, string> dicLedRowColor = new Dictionary<int, string>();
                arrColLdrNames.Add("S.No");
                arrColLdrNames2.Add("S.No");
                dtReport.Columns.Add("S.No");
                arrColLdrNames.Add("Header Name");
                arrColLdrNames2.Add("Header Name");
                dtReport.Columns.Add("Header Name");
                arrColLdrNames.Add("Header pk");
                arrColLdrNames2.Add("Header pk");
                dtReport.Columns.Add("Header pk");
                arrColLdrNames.Add("Ledger Name");
                arrColLdrNames2.Add("Ledger Name");
                dtReport.Columns.Add("Ledger Name");
                arrColLdrNames.Add("Ledger pk");
                arrColLdrNames2.Add("Ledger pk");
                dtReport.Columns.Add("Ledger pk");
                arrColLdrNames.Add("Batch Year");
                arrColLdrNames2.Add("Batch Year");
                dtReport.Columns.Add("Batch Year");
                arrColLdrNames.Add(lbldeg.Text);
                arrColLdrNames2.Add(lbldeg.Text);
                dtReport.Columns.Add(lbldeg.Text);
                arrColLdrNames.Add("CourseId");
                arrColLdrNames2.Add("CourseId");
                dtReport.Columns.Add("CourseId");
                arrColLdrNames.Add(lbldept.Text);
                arrColLdrNames2.Add(lbldept.Text);
                dtReport.Columns.Add(lbldept.Text);
                arrColLdrNames.Add("Dept_Code");
                arrColLdrNames2.Add("Dept_Code");
                dtReport.Columns.Add("Dept_Code");
                arrColLdrNames.Add(lblsem.Text);
                arrColLdrNames2.Add(lblsem.Text);
                dtReport.Columns.Add(lblsem.Text);
                arrColLdrNames.Add("FeeCategory");
                arrColLdrNames2.Add("FeeCategory");
                dtReport.Columns.Add("FeeCategory");
                arrColLdrNames.Add("Allot");
                arrColLdrNames2.Add("Allot");
                dtReport.Columns.Add("Allot");
                arrColLdrNames.Add("Concession");
                arrColLdrNames2.Add("Concession");
                dtReport.Columns.Add("Concession");
                arrColLdrNames.Add("Scholarship");
                arrColLdrNames2.Add("Scholarship");
                dtReport.Columns.Add("Scholarship");
                arrColLdrNames.Add("Total");
                arrColLdrNames2.Add("Total");
                dtReport.Columns.Add("Total");

                Hashtable newhash = new Hashtable();

                if (chkl_paid.Items.Count > 0)
                {
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            check++;
                            arrColLdrNames.Add("Paid");
                            arrColLdrNames2.Add(chkl_paid.Items[s].Text);
                            dtReport.Columns.Add(chkl_paid.Items[s].Text);
                            newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                        }
                    }
                    if (check != 0)
                    {
                        arrColLdrNames.Add("Paid");
                        arrColLdrNames2.Add("Total Paid");
                        dtReport.Columns.Add("Total Paid");
                    }
                }
                if (check == 0)
                {
                    arrColLdrNames.Add("Paid");
                    arrColLdrNames2.Add("Paid");
                    dtReport.Columns.Add("Paid");
                }

                arrColLdrNames.Add("Balance");
                arrColLdrNames2.Add("Balance");
                dtReport.Columns.Add("Balance");
                arrColLdrNames.Add("Refund Amount");
                arrColLdrNames2.Add("Refund Amount");
                dtReport.Columns.Add("Refund Amount");
                arrColLdrNames.Add("Excess Amount");
                arrColLdrNames2.Add("Excess Amount");
                dtReport.Columns.Add("Excess Amount");
                arrColLdrNames.Add("Fine Amount");
                arrColLdrNames2.Add("Fine Amount");
                dtReport.Columns.Add("Fine Amount");
                DataRow drHdr1 = dtReport.NewRow();
                DataRow drHdr2 = dtReport.NewRow();
                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                {
                    drHdr1[grCol] = arrColLdrNames[grCol];
                    drHdr2[grCol] = arrColLdrNames2[grCol];
                }
                dtReport.Rows.Add(drHdr1);
                dtReport.Rows.Add(drHdr2);

                #endregion

                #region fpsem value
                double allotamt = 0;
                double consamt = 0;
                double govt = 0;
                double tot_amount = 0;
                double totalvalue = 0;
                double bal = 0;
                double totamount = 0;
                double fnlamount = 0;
                double paidamount = 0;
                int ColCntGrd = 0;
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = Convert.ToString(i + 1);
                    ds.Tables[3].DefaultView.RowFilter = "LedgerPK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "'";
                    dvhead = ds.Tables[3].DefaultView;
                    if (Convert.ToString(dvhead) != "" && dvhead != null)
                    {
                        drowGrd[1] = Convert.ToString(dvhead[0]["Headername"]);
                        drowGrd[2] = Convert.ToString(dvhead[0]["HeaderFK"]);
                        drowGrd[3] = Convert.ToString(dvhead[0]["Ledgername"]);
                        drowGrd[4] = Convert.ToString(dvhead[0]["LedgerPK"]);
                    }
                    drowGrd[5] = Convert.ToString(ds.Tables[0].Rows[i]["batch_year"].ToString());
                    drowGrd[6] = Convert.ToString(ds.Tables[0].Rows[i]["Course_Name"].ToString());
                    drowGrd[7] = Convert.ToString(ds.Tables[0].Rows[i]["Course_Id"].ToString());
                    string deptname = Convert.ToString(ds.Tables[0].Rows[i]["Dept_Name"]);
                    string Acrname = Convert.ToString(ds.Tables[0].Rows[i]["dept_acronym"]);

                    if (deptacr == true)
                        drowGrd[8] = Acrname;
                    else
                        drowGrd[8] = deptname;

                    drowGrd[9] = Convert.ToString(ds.Tables[0].Rows[i]["Dept_Code"].ToString());
                    drowGrd[10] = Convert.ToString(ds.Tables[0].Rows[i]["TextVal"].ToString());
                    drowGrd[11] = Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"].ToString());
                    //allot
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                    drowGrd[12] = Convert.ToString(allotamt);
                    if (!grandtotal.ContainsKey(12))
                        grandtotal.Add(12, Convert.ToString(allotamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[12]), out amount);
                        amount += allotamt;
                        grandtotal.Remove(12);
                        grandtotal.Add(12, Convert.ToString(amount));
                    }
                    //consession
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                    drowGrd[13] = Convert.ToString(consamt);
                    if (!grandtotal.ContainsKey(13))
                        grandtotal.Add(13, Convert.ToString(consamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[13]), out amount);
                        amount += consamt;
                        grandtotal.Remove(13);
                        grandtotal.Add(13, Convert.ToString(amount));
                    }
                    //government
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                    drowGrd[14] = Convert.ToString(govt);
                    if (!grandtotal.ContainsKey(14))
                        grandtotal.Add(14, Convert.ToString(govt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[14]), out amount);
                        amount += govt;
                        grandtotal.Remove(14);
                        grandtotal.Add(14, Convert.ToString(amount));
                    }
                    //total
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                    drowGrd[15] = Convert.ToString(totalvalue);
                    if (!grandtotal.ContainsKey(15))
                        grandtotal.Add(15, Convert.ToString(totalvalue));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[15]), out amount);
                        amount += totalvalue;
                        grandtotal.Remove(15);
                        grandtotal.Add(15, Convert.ToString(amount));
                    }
                    //paid paymode count=0
                    double paidvalue = 0;
                    if (check == 0)
                    {
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                        fnlamount = Convert.ToDouble(paidvalue);
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                            amount += paidvalue;
                            grandtotal.Remove(ColCntGrd - 5);
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                        }
                    }
                    //refund
                    double refund = 0;
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                    if (!grandtotal.ContainsKey(ColCntGrd - 3))
                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                        amount += refund;
                        grandtotal.Remove(ColCntGrd - 3);
                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                    }
                    //excess
                    DataView dvex = new DataView();
                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        ds.Tables[2].DefaultView.RowFilter = "FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "' and HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' and LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "' ";
                        dvex = ds.Tables[2].DefaultView;
                        if (dvex.Count > 0 && dvex != null)
                        {
                            for (int k = 0; k < dvex.Count; k++)
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                tot_amount += amount;
                            }
                        }
                    }
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                    if (!grandtotal.ContainsKey(ColCntGrd - 2))
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                        amount += tot_amount;
                        grandtotal.Remove(ColCntGrd - 2);
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                    }
                    tot_amount = 0;
                    //paymode count=0
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                        {
                            if (chkl_paid.Items[pay].Selected == true)
                            {
                                ds.Tables[1].DefaultView.RowFilter = "PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' and LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "' and degree_Code='" + Convert.ToString(ds.Tables[0].Rows[i]["degree_Code"]) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "' and batch_year='" + Convert.ToString(ds.Tables[0].Rows[i]["batch_year"]) + "'";
                                dv = ds.Tables[1].DefaultView;
                                int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);

                                for (int k = 0; k < dv.Count; k++)
                                {
                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                    fnlamount = fnlamount + totamount;
                                    paidamount = paidamount + Convert.ToDouble(totamount);
                                }
                                drowGrd[colnew] = Convert.ToString(paidamount);
                                if (!grandtotal.ContainsKey(colnew))
                                    grandtotal.Add(colnew, Convert.ToString(paidamount));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                    amount += paidamount;
                                    grandtotal.Remove(colnew);
                                    grandtotal.Add(colnew, Convert.ToString(amount));
                                }
                                paidamount = 0;
                            }
                        }
                        if (check != 0)
                        {
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                amount += fnlamount;
                                grandtotal.Remove(ColCntGrd - 5);
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                            }
                        }
                        //balance
                        if (totalvalue != 0)
                        {
                            bal = totalvalue - fnlamount;
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                            if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                amount += bal;
                                grandtotal.Remove(ColCntGrd - 4);
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                            }
                            fnlamount = 0;
                            if (bal == 0)
                                dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                            else
                                dicRowColor.Add(dtReport.Rows.Count, "Balance");
                        }
                    }
                    else
                    {
                        bal = totalvalue;
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                        if (!grandtotal.ContainsKey(ColCntGrd - 4))
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                            amount += bal;
                            grandtotal.Remove(ColCntGrd - 4);
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                        }
                    }
                    dtReport.Rows.Add(drowGrd);
                }
                drowGrd = dtReport.NewRow();
                drowGrd[0] = "Grand Total";
                double grandvalue = 0;
                for (int j = 11; j < dtReport.Columns.Count; j++)
                {
                    double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                    drowGrd[j] = Convert.ToString(grandvalue);
                }
                dtReport.Rows.Add(drowGrd);


                #endregion

                #region visible

                GrdSem.DataSource = dtReport;
                GrdSem.DataBind();
                GrdSem.Visible = true;

                GridViewRow row = GrdSem.Rows[0];
                GridViewRow previousRow = GrdSem.Rows[1];

                for (int i = 0; i < dtReport.Columns.Count; i++)
                {
                    if (row.Cells[i].Text == previousRow.Cells[i].Text)
                    {
                        row.Cells[i].RowSpan = 2;
                        previousRow.Cells[i].Visible = false;
                        //row.Cells[i].RowSpan = previousRow.Cells[i].RowSpan < 2 ? 2 :
                        //                       previousRow.Cells[i].RowSpan + 1;
                        //previousRow.Cells[i].Visible = false;
                    }
                }
                //ColumnSpan

                for (int cell = GrdSem.Rows[0].Cells.Count - 1; cell > 0; cell--)
                {
                    TableCell colum = GrdSem.Rows[0].Cells[cell];
                    TableCell previouscol = GrdSem.Rows[0].Cells[cell - 1];
                    if (colum.Text == previouscol.Text)
                    {
                        if (previouscol.ColumnSpan == 0)
                        {
                            if (colum.ColumnSpan == 0)
                            {
                                previouscol.ColumnSpan += 2;
                            }
                            else
                            {
                                previouscol.ColumnSpan += colum.ColumnSpan + 1;
                            }
                            colum.Visible = false;
                        }
                    }
                }
                foreach (KeyValuePair<int, string> dr in dicRowColor)
                {
                    int g = dr.Key;
                    string DicValue = dr.Value;
                    if (DicValue == "NoBalance")
                    {
                        GrdSem.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                    }
                    if (DicValue == "Balance")
                    {
                        GrdSem.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                    }
                }

                lbl_sem.Visible = true;
                lbl_sem.Text = "->Header(" + colhedername + ")->Ledger(" + colledname + ")->Batch(" + colbatname + ")->Degree(" + coldegname + ")->Department(" + coldeptname + ")->Semaster";
                divsema.Visible = true;
                divsem.Visible = true;
                // btn_fpsema.Visible = true;
                rptprint.Visible = true;
                // rptprint.Attributes.Add("Style", "margin-top:-60px; margin-left:10px;");
                // pnl_semcolord.Visible = true;
                // pnl_semcolorder.Visible = true;
                // loadsemcolorder();
                ViewState["sem"] = 5;
                ViewState["stud"] = null;
                rptprint.Visible = true;
                txtexcelname.Text = "";
                lblvalidation1.Text = "";
                #endregion
            }
            else
            {
                GrdSem.Visible = false;
                divsem.Visible = false;
                lbl_sem.Visible = false;
                //  pnl_semcolord.Visible = false;
                imgdiv2.Visible = true;
                lbl_alert.Visible = true;
                lbl_alert.Text = "No Record Found";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void deptcellclicks(object sender, EventArgs e)
    {
        try
        {
            if (semcellclick == true)
            {

            }
        }
        catch { }
    }

    #endregion

    #region sem

    protected void GrdSem_OnRowCreated(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            for (int i = 1; i < e.Row.Cells.Count; i++)
            {
                TableCell cell = e.Row.Cells[i];
                cell.Attributes["onmouseover"] = "this.style.cursor='pointer';";
                cell.Attributes["onmouseout"] = "this.style.textDecoration='none';";
                cell.Attributes["onclick"] = string.Format("document.getElementById('{0}').value = {1}; {2}"
                   , GrdSemSelectedIndex.ClientID, i
                   , Page.ClientScript.GetPostBackClientHyperlink((GridView)sender, string.Format("Select${0}", e.Row.RowIndex)));
            }
        }
    }

    protected void GrdSem_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.RowIndex == 0)
            {
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[9].Visible = false;
                e.Row.Cells[11].Visible = false;
                e.Row.Cells[27].Visible = false;
            }
            else
            {
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[14].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[15].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[16].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[17].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[18].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[19].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[20].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[21].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[22].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[23].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[24].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[9].Visible = false;
                e.Row.Cells[11].Visible = false;
                e.Row.Cells[27].Visible = false;
            }
            if (e.Row.RowIndex == 1)
            {
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[14].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[15].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[16].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[17].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[18].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[19].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[20].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[21].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[22].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[23].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[24].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[9].Visible = false;
                e.Row.Cells[11].Visible = false;
                e.Row.Cells[27].Visible = false;
            }
        }
    }

    protected void GrdSem_SelectedIndexChanged(Object sender, EventArgs e)
    {
        try
        {
            var grid = (GridView)sender;
            GridViewRow selectedRow = grid.SelectedRow;
            int rowIndex = grid.SelectedIndex;
            int selectedCellIndex = int.Parse(this.GrdSemSelectedIndex.Value);
            DeptAcr();

            #region getvalue

            string sec = "";
            string stud = "";
            string seatype = "";
            string studtype = "";
            string paid = "";
            string semacode = "";
            string allot = "";
            string consession = "";
            string Finyearvalue = "";

            sec = Convert.ToString(getCblSelectedValue(cbl_sect));
            stud = Convert.ToString(getCblSelectedValue(cbl_stud));
            seatype = Convert.ToString(getCblSelectedValue(cbl_seat));
            studtype = Convert.ToString(getCblSelectedValue(cbl_studtype));
            paid = Convert.ToString(getCblSelectedValue(chkl_paid));
            Finyearvalue = Convert.ToString(getCblSelectedValue(chklsfyear));

            //string cc = "";
            //string debar = "";
            //string disc = "";
            //if (cblinclude.Items.Count > 0)
            //{
            //    for (int i = 0; i < cblinclude.Items.Count; i++)
            //    {
            //        if (cblinclude.Items[i].Selected == true)
            //        {
            //            if (cblinclude.Items[i].Value == "1")
            //            {
            //                cc = " and r.cc=0";
            //            }
            //            if (cblinclude.Items[i].Value == "2")
            //            {
            //                debar = " and r.Exam_Flag<>'debar'";
            //            }
            //            if (cblinclude.Items[i].Value == "3")
            //            {
            //                disc = "";
            //            }
            //        }
            //        else
            //        {
            //            disc = " and r.DelFlag=0";
            //        }
            //    }
            //}
            //else
            //{
            //    disc = " and r.DelFlag=0";
            //}

            string cc = "";
            string debar = "";
            string disc = "";
            string commondist = "";
            if (cblinclude.Items.Count > 0)
            {
                for (int i = 0; i < cblinclude.Items.Count; i++)
                {
                    if (cblinclude.Items[i].Selected == true)
                    {
                        if (cblinclude.Items[i].Value == "1")
                        {
                            cc = " r.cc=1";
                        }
                        if (cblinclude.Items[i].Value == "2")
                        {
                            debar = "  r.Exam_Flag like '%debar'";
                        }
                        if (cblinclude.Items[i].Value == "3")
                        {
                            disc = "  r.DelFlag=1";
                        }
                    }
                }
            }

            if (cc != "" && debar == "" && disc == "")
                commondist = " and (" + cc + " or r.cc=0)  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            if (cc == "" && debar != "" && disc == "")
                commondist = " and r.cc=0  and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            if (cc == "" && debar == "" && disc != "")
                commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and (" + disc + " or r.DelFlag=0)";

            if (cc != "" && debar != "" && disc == "")
                commondist = " and (" + cc + " or r.cc=0) and (" + debar + " or r.Exam_Flag<>'debar') and r.DelFlag=0";

            if (cc == "" && debar != "" && disc != "")
                commondist = " and r.cc=0 and (" + debar + " or r.Exam_Flag<>'debar')  and (" + disc + " or r.DelFlag=0)";

            if (cc != "" && debar == "" && disc != "")
                commondist = " and (" + cc + " or r.cc=0) and r.Exam_Flag<>'debar'  and (" + disc + " or r.DelFlag=0)";

            else if (cc == "" && debar == "" && disc == "")
                commondist = " and r.cc=0  and r.Exam_Flag<>'debar' and r.DelFlag=0";

            if (cc != "" && debar != "" && disc != "")
                commondist = "";

            string fromdate = "";
            string todate = "";
            int datewise = 0;
            if (chk_datewise.Checked == true)
            {
                datewise = 1;
                if (datewise == 1)
                {
                    fromdate = txt_fromdate.Text;
                    todate = txt_todate.Text;
                    if (fromdate != "" && todate != "")
                    {
                        string[] frdate = fromdate.Split('/');
                        if (frdate.Length == 3)
                        {
                            fromdate = frdate[1].ToString() + "/" + frdate[0].ToString() + "/" + frdate[2].ToString();
                        }
                        string[] tdate = todate.Split('/');
                        if (tdate.Length == 3)
                        {
                            todate = tdate[1].ToString() + "/" + tdate[0].ToString() + "/" + tdate[2].ToString();
                        }
                    }
                }
            }

            string activerow = Convert.ToString(rowIndex);
            string activecol = Convert.ToString(selectedCellIndex);

            string hedcount = "";
            string ledcount = "";
            string batcount = "";
            string coursecode = "";
            string deptcodefp = "";
            string semcodefp = "";
            ArrayList ar = new ArrayList();
            ArrayList ardept = new ArrayList();
            ArrayList ardeptcode = new ArrayList();
            ArrayList arsem = new ArrayList();

            int actnew = 0;
            int actbal = 0;
            int actpaidtotal = 0;
            int refundamt = 0;
            int excessamt = 0;
            int fineamt = 0;
            if (activecol.Trim() != "")
            {
                actnew = Convert.ToInt32(activecol);
                actpaidtotal = Convert.ToInt32(23);
                actbal = Convert.ToInt32(24);
                refundamt = Convert.ToInt32(25);
                excessamt = Convert.ToInt32(26);
                fineamt = Convert.ToInt32(27);
            }
            string gettagvalue = "";
            if (actnew > 15)
            {
                gettagvalue = Convert.ToString(GrdSem.Rows[1].Cells[actnew].Text);
            }


            int act = Convert.ToInt32(activerow);
            if (act == GrdDept.Rows.Count - 1)
            {
                for (int i = 0; i < GrdSem.Rows.Count - 1; i++)
                {
                    if ((hedcount == "") && (ledcount == "") && (batcount == "") && (coursecode == "") && (deptcodefp == ""))
                    {
                        hedcount = Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[2].Text);
                        ledcount = Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[4].Text);
                        ar.Add(Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[5].Text));
                        batcount = Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[5].Text);
                        ardept.Add(Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[7].Text));
                        coursecode = Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[7].Text);
                        ardeptcode.Add(Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[9].Text));
                        deptcodefp = Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[9].Text);
                        arsem.Add(Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[11].Text));
                        semcodefp = Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[11].Text);
                    }
                    else
                    {
                        hedcount = hedcount + "','" + "" + Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[2].Text) + "";
                        ledcount = ledcount + "','" + "" + Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[4].Text) + "";
                        if (!ar.Contains(batcount))
                        {
                            ar.Add(Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[5].Text));
                            batcount = batcount + "','" + "" + Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[5].Text) + "";
                        }
                        if (!ardept.Contains(coursecode))
                        {
                            ardept.Add(Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[7].Text));
                            coursecode = coursecode + "','" + "" + Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[7].Text) + "";
                        }
                        if (!ardeptcode.Contains(deptcodefp))
                        {
                            ardeptcode.Add(Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[9].Text));
                            deptcodefp = deptcodefp + "','" + "" + Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[9].Text) + "";
                        }
                        if (!semcodefp.Contains(semcodefp))
                        {
                            arsem.Add(Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[11].Text));
                            semcodefp = semcodefp + "','" + "" + Convert.ToString(GrdSem.Rows[Convert.ToInt32(i)].Cells[11].Text) + "";
                        }
                    }


                }
                ar.Clear();
                ardept.Clear();
                ardeptcode.Clear();
            }
            string headercode = Convert.ToString(GrdSem.Rows[Convert.ToInt32(activerow)].Cells[2].Text);
            string ledgercode = Convert.ToString(GrdSem.Rows[Convert.ToInt32(activerow)].Cells[4].Text);
            string batchyr = Convert.ToString(GrdSem.Rows[Convert.ToInt32(activerow)].Cells[5].Text);
            string courseid = Convert.ToString(GrdSem.Rows[Convert.ToInt32(activerow)].Cells[7].Text);
            string deptcode = Convert.ToString(GrdSem.Rows[Convert.ToInt32(activerow)].Cells[9].Text);
            string semcode = Convert.ToString(GrdSem.Rows[Convert.ToInt32(activerow)].Cells[11].Text);

            if ((hedcount != "") && (ledcount != "") && (batcount != "") && (coursecode != "") && (deptcodefp != ""))
            {
                headercode = hedcount;
                ledgercode = ledcount;
                batchyr = batcount;
                courseid = coursecode;
                deptcode = deptcodefp;
                semcode = semcodefp;
            }

            if (GrdSem.Rows.Count > 0)
            {
                colsemname = Convert.ToString(GrdSem.Rows[0].Cells[Convert.ToInt32(activecol)].Text);
                if (colsemname.Trim() == "")
                {
                    colsemname = Convert.ToString(GrdSem.Rows[1].Cells[Convert.ToInt32(activecol)].Text);
                }
            }

            #endregion

            Boolean flag = false;
            Boolean flag1 = false;

            #region query

            string selqry = "";
            ////selqry = "SELECT a.HeaderFK,HeaderName,LedgerName,LedgerFK,batch_year,G.Course_Id,Course_Name,G.Dept_Code,Dept_Name,TextVal,P.app_no,g.Degree_Code,A.FeeCategory,App_FormNo Roll_No,'' Reg_No,'' Roll_Admit,Stud_Name,Course_Name+'-'+Dept_Name Degree,SUM(FeeAmount) as allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A, FM_HeaderMaster H,FM_LedgerMaster L,Applyn P,Degree G,Course C,Department D,TextValTable T WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND A.FeeCategory = T.TextCode and a.HeaderFK = h.HeaderPK and a.LedgerFK = l.LedgerPK and h.HeaderPK = l.LedgerPK AND P.IsConfirm = 1 AND Admission_Status = 0  and G.college_code ='" + collegecode1 + "'";

            ////if (batch1 != "")
            ////{
            ////    selqry = selqry + "and p.Batch_Year in ('" + batch1 + "')";
            ////}

            ////if (deptdegcode != "")
            ////{
            ////    selqry = selqry + " and g.Degree_Code in ('" + deptdegcode + "')";
            ////}

            ////if (sem != "")
            ////{
            ////    selqry = selqry + "and A.FeeCategory in ('" + semcode + "')";
            ////}
            ////if (stud != "")
            ////{
            ////    selqry = selqry + "and p.mode in ('" + stud + "')";
            ////}
            ////if (seatype != "")
            ////{
            ////    selqry = selqry + "and p.seattype in ('" + seatype + "')";
            ////}
            ////if (studtype != "")
            ////{
            ////    selqry = selqry + " and p.Stud_Type in ('" + studtype + "')";
            ////}
            ////if (headercode != "")
            ////{
            ////    selqry = selqry + "and A.HeaderFK in ('" + headercode + "')";
            ////}
            ////if (ledgercode != "")
            ////{
            ////    selqry = selqry + " and LedgerFK in ('" + ledgercode + "')";
            ////}
            ////if (batchyr != "")
            ////{
            ////    selqry = selqry + " and batch_year in('" + batchyr + "')";
            ////}
            ////if (courseid != "")
            ////{
            ////    selqry = selqry + " and G.Course_Id in('" + courseid + "')";

            ////}
            ////if (deptcode != "")
            ////{
            ////    selqry = selqry + " and G.Dept_Code in ('" + deptcode + "') ";
            ////}
            ////if (datewise == 1)
            ////{
            ////    if (fromdate != "" && todate != "")
            ////    {
            ////        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
            ////    }
            ////}
            ////selqry = selqry + "GROUP BY a.HeaderFK,HeaderName,LedgerName,LedgerFK,batch_year,G.Course_Id,Course_Name,G.Dept_Code,Dept_Name,TextVal,P.app_no,App_FormNo,stud_name,Course_Name,Dept_Name,g.Degree_Code,A.FeeCategory  ";
            ////if (activecol.Trim() == "8")
            ////{
            ////    selqry = selqry + " having SUM(DeductAmout) > 0 ";
            ////}
            ////if (activecol.Trim() == "9")
            ////{
            ////    selqry = selqry + " having SUM(FromGovtAmt) > 0";
            ////}
            ////if (activecol.Trim() == Convert.ToString(actbal))
            ////{
            ////    selqry = selqry + " having SUM(BalAmount) > 0";
            ////}
            ////if (activecol.Trim() == Convert.ToString(actpaidtotal))
            ////{
            ////    selqry = selqry + " having sum(BalAmount) = 0";
            ////}
            ////if (activecol.Trim() == Convert.ToString(refundamt))
            ////{
            ////    selqry = selqry + "having SUM(RefundAmount)>0";
            ////}

            //////if (activecol.Trim() == Convert.ToString(excessamt))
            //////{
            //////    selqry = selqry + "having SUM(RefundAmount)>0";
            //////}
            //selqry = selqry + "  SELECT a.HeaderFK,HeaderName,LedgerName,LedgerFK,r.batch_year,G.Course_Id,Course_Name,G.Dept_Code,Dept_Name,TextVal,P.app_no,g.Degree_Code,A.FeeCategory,App_FormNo Roll_No,'' Reg_No,'' Roll_Admit,R.Stud_Name,Course_Name+'-'+Dept_Name Degree,SUM(FeeAmount) as allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount FROM FT_FeeAllot A, FM_HeaderMaster H,FM_LedgerMaster L,Applyn P,Registration R,Degree G,Course C,Department D,TextValTable T WHERE A.App_No = P.app_no AND P.app_no = R.App_No AND R.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code  and g.college_code = d.college_code and a.HeaderFK = h.HeaderPK and a.LedgerFK = l.LedgerPK and h.HeaderPK = l.Headerfk AND P.IsConfirm = 1 AND Admission_Status = 1 AND A.FeeCategory = T.TextCode and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";

            //if (batch1 != "")
            //{
            //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
            //}
            //if (deptdegcode != "")
            //{
            //    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
            //}
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + semcode + "')";
            //}
            //if (sec != "")
            //{
            //    //selqry = selqry + " and   ISNULL( r.Sections,'') in ('" + sec + "','')";
            //}
            //if (stud != "")
            //{
            //    // selqry = selqry + "and r.mode in ('" + stud + "')";
            //}
            //if (seatype != "")
            //{
            //    //selqry = selqry + "and  p.seattype in ('" + seatype + "')";
            //}
            //if (studtype != "")
            //{
            //    //  selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
            //}
            //if (headercode != "")
            //{
            //    selqry = selqry + "and A.HeaderFK in ('" + headercode + "')";
            //}
            //if (ledgercode != "")
            //{
            //    selqry = selqry + " and LedgerFK in ('" + ledgercode + "')";
            //}
            //if (batchyr != "")
            //{
            //    selqry = selqry + " and r.batch_year in('" + batchyr + "')";
            //}
            //if (courseid != "")
            //{
            //    selqry = selqry + " and G.Course_Id in('" + courseid + "')";

            //}
            //if (deptcode != "")
            //{
            //    selqry = selqry + " and G.Dept_Code in ('" + deptcode + "') ";
            //}
            //if (datewise == 1)
            //{
            //    if (fromdate != "" && todate != "")
            //    {
            //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
            //    }
            //}
            //selqry = selqry + "GROUP BY a.HeaderFK,HeaderName,LedgerName,LedgerFK,r.batch_year,G.Course_Id,Course_Name,G.Dept_Code,Dept_Name,TextVal,P.app_no,App_FormNo,r.stud_name,Course_Name,Dept_Name,g.Degree_Code,A.FeeCategory ";
            //if (activecol.Trim() == "8")
            //{
            //    selqry = selqry + " having SUM(DeductAmout) > 0 ";
            //}
            //if (activecol.Trim() == "9")
            //{
            //    selqry = selqry + " having SUM(FromGovtAmt) > 0";
            //}
            //if (activecol.Trim() == Convert.ToString(actbal))
            //{
            //    selqry = selqry + " having SUM(BalAmount) > 0";
            //}
            //if (activecol.Trim() == Convert.ToString(actpaidtotal))
            //{
            //    selqry = selqry + " having sum(BalAmount) = 0";
            //}
            //if (activecol.Trim() == Convert.ToString(refundamt))
            //{
            //    selqry = selqry + "having SUM(RefundAmount)>0";
            //}

            ////if (activecol.Trim() == Convert.ToString(excessamt))
            ////{
            ////    selqry = selqry + "having SUM(RefundAmount)>0";
            ////}
            ////selqry = selqry + " SELECT a.HeaderFK,LedgerFK,batch_year,G.Course_Id,Course_Name,G.Dept_Code,Dept_Name,TextVal,PayMode,SUM(Debit) as total FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C,Department D,TextValTable T WHERE A.App_No = P.app_no AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 0 AND A.FeeCategory = T.TextCode and G.college_code ='" + collegecode1 + "'";

            ////if (batch1 != "")
            ////{
            ////    selqry = selqry + "and p.Batch_Year in ('" + batch1 + "')";
            ////}
            ////if (deptdegcode != "")
            ////{
            ////    selqry = selqry + " and g.Degree_Code in ('" + deptdegcode + "')";
            ////}
            ////if (sem != "")
            ////{
            ////    selqry = selqry + "and A.FeeCategory in ('" + semcode + "')";
            ////}
            ////if (stud != "")
            ////{
            ////    selqry = selqry + "and p.mode in ('" + stud + "')";
            ////}
            ////if (seatype != "")
            ////{
            ////    selqry = selqry + "and p.seattype in ('" + seatype + "')";
            ////}
            ////if (studtype != "")
            ////{
            ////    selqry = selqry + " and p.Stud_Type in ('" + studtype + "')";
            ////}
            ////if (headercode != "")
            ////{
            ////    selqry = selqry + "and A.HeaderFK in ('" + headercode + "')";
            ////}
            ////if (ledgercode != "")
            ////{
            ////    selqry = selqry + " and LedgerFK in ('" + ledgercode + "')";
            ////}
            ////if (batchyr != "")
            ////{
            ////    selqry = selqry + " and batch_year in('" + batchyr + "')";
            ////}
            ////if (courseid != "")
            ////{
            ////    selqry = selqry + " and G.Course_Id in('" + courseid + "')";

            ////}
            ////if (deptcode != "")
            ////{
            ////    selqry = selqry + " and G.Dept_Code in ('" + deptcode + "') ";
            ////}

            ////if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
            ////{
            ////    selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
            ////}
            ////if (datewise == 1)
            ////{
            ////    if (fromdate != "" && todate != "")
            ////    {
            ////        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
            ////    }
            ////}
            ////selqry = selqry + "  GROUP BY a.HeaderFK,LedgerFK,batch_year,G.Course_Id,Course_Name,G.Dept_Code,Dept_Name,TextVal, PayMode";
            //selqry = selqry + " SELECT a.HeaderFK,LedgerFK,p.batch_year,G.Course_Id,Course_Name,G.Degree_Code,Dept_Name,TextVal,PayMode,SUM(Debit) as total,A.app_no,A.FeeCategory FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C,Department D,TextValTable T WHERE A.App_No = P.app_no  AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 1 AND A.FeeCategory = T.TextCode and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";

            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            //if (deptdegcode != "")
            //{
            //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
            //}
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + semcode + "')";
            //}
            ////if (sec != "")
            ////{
            ////    selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
            ////}
            //if (stud != "")
            //{
            //    //selqry = selqry + "and p.mode in ('" + stud + "')";
            //}
            //if (seatype != "")
            //{
            //    //  selqry = selqry + "and  p.seattype in ('" + seatype + "')";
            //}
            //if (studtype != "")
            //{
            //    // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
            //}
            //if (headercode != "")
            //{
            //    selqry = selqry + "and A.HeaderFK in ('" + headercode + "')";
            //}
            //if (ledgercode != "")
            //{
            //    selqry = selqry + " and LedgerFK in ('" + ledgercode + "')";
            //}
            //if (batchyr != "")
            //{
            //    selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            //}
            //if (courseid != "")
            //{
            //    selqry = selqry + " and G.Course_Id in('" + courseid + "')";

            //}
            //if (deptcode != "")
            //{
            //    selqry = selqry + " and G.Dept_Code in ('" + deptcode + "') ";
            //}

            //if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
            //{
            //    selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
            //}
            //if (datewise == 1)
            //{
            //    if (fromdate != "" && todate != "")
            //    {
            //        selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
            //    }
            //}
            //selqry = selqry + "GROUP BY a.HeaderFK,LedgerFK,p.batch_year,G.Course_Id,Course_Name,G.Degree_Code,Dept_Name,TextVal,PayMode,A.app_no,A.FeeCategory";

            //selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,h.LedgerPK,p.Batch_Year,C.Course_Id,d.Dept_Code,A.FeeCategory,p.App_No from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Degree G,Course C,Department D,FM_LedgerMaster H,FM_HeaderMaster fh WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code  and h.LedgerPK =ex.LedgerFK and ex.HeaderFK=h.HeaderFK and h.HeaderFK=fh.HeaderPK and em.App_No = a.App_No   AND P.IsConfirm = 1  and a.LedgerFK=h.LedgerPK   AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
            //if (batch1 != "")
            //{
            //    selqry = selqry + " and p.Batch_Year in ('" + batch1 + "')";
            //}
            //if (deptdegcode != "")
            //{
            //    selqry = selqry + "  and  g.Degree_Code in ('" + deptdegcode + "')";
            //}
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + sem + "')";
            //}
            //if (sec != "")
            //{
            //    // selqry = selqry + " and ISNULL( r.Sections,'') in ('" + sec + "','')";
            //}
            //if (stud != "")
            //{
            //    //selqry = selqry + "and p.mode in ('" + stud + "')";
            //}
            //if (seatype != "")
            //{
            //    // selqry = selqry + "and  p.seattype in ('" + seatype + "')";
            //}
            //if (studtype != "")
            //{
            //    // selqry = selqry + "  and p.Stud_Type in ('" + studtype + "')";
            //}
            //if (headercode != "")
            //{
            //    selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
            //}
            //if (ledgercode != "")
            //{
            //    selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
            //}
            //if (datewise == 1)
            //{
            //    if (fromdate != "" && todate != "")
            //    {
            //        selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
            //    }
            //}
            //selqry = selqry + " GROUP BY A.HeaderFK ,h.LedgerPK,p.Batch_Year ,C.Course_Id,d.Dept_Code,A.FeeCategory ,p.App_No";
            //if (activecol.Trim() == Convert.ToString(excessamt))
            //{
            //    selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
            //    flag = true;
            //}
            #endregion

            #region newquery
            selqry = selqry + "  SELECT a.HeaderFK,HeaderName,LedgerName,LedgerFK,r.batch_year,G.Course_Id,Course_Name,G.Dept_Code,Dept_Name,TextVal,P.app_no,g.Degree_Code,A.FeeCategory,App_FormNo Roll_No,'' Reg_No,'' Roll_Admit,R.Stud_Name,Course_Name+'-'+Dept_Name Degree,SUM(FeeAmount) as allot,SUM(DeductAmout) as Consustion,SUM(FromGovtAmt) as Government,SUM(TotalAmount) as Total,SUM(PaidAmount) as Paid,SUM(BalAmount) as Balance,SUM(RefundAmount ) as RefundAmount,d.dept_acronym,l.priority FROM FT_FeeAllot A, FM_HeaderMaster H,FM_LedgerMaster L,Applyn P,Registration R,Degree G,Course C,Department D,TextValTable T WHERE A.App_No = P.app_no AND P.app_no = R.App_No AND R.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code  and g.college_code = d.college_code and a.HeaderFK = h.HeaderPK and a.LedgerFK = l.LedgerPK and h.HeaderPK = l.Headerfk AND P.IsConfirm = 1 AND Admission_Status = 1 AND A.FeeCategory = T.TextCode and r.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "') ";

            //if (batch1 != "")
            //{
            //    selqry = selqry + " and r.Batch_Year in ('" + batch1 + "')";
            //}
            //if (deptdegcode != "")
            //{
            //    selqry = selqry + "  and  r.Degree_Code in ('" + deptdegcode + "')";
            //}
            //if (sem != "")
            //{
            //    selqry = selqry + " and A.FeeCategory in ('" + semcode + "')";
            //}

            if (headercode != "")
            {
                selqry = selqry + "and A.HeaderFK in ('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + " and LedgerFK in ('" + ledgercode + "')";
            }
            if (batchyr != "")
            {
                selqry = selqry + " and r.batch_year in('" + batchyr + "')";
            }
            if (courseid != "")
            {
                selqry = selqry + " and G.Course_Id in('" + courseid + "')";
            }
            if (deptcode != "")
            {
                selqry = selqry + " and G.Dept_Code in ('" + deptcode + "') ";
            }
            if (semcode != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + semcode + "')";
            }
            //if (chkinclude.Checked == true)
            //{
            //    selqry = selqry + " and r.DelFlag=0 ";
            //}
            //if (cc != "")
            //{
            //    selqry = selqry + cc;
            //}
            //if (debar != "")
            //{
            //    selqry = selqry + debar;
            //}
            //if (disc != "")
            //{
            //    selqry = selqry + disc;
            //}
            if (commondist.Trim() != "")
            {
                selqry = selqry + commondist;
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                }
            }
            selqry = selqry + "GROUP BY a.HeaderFK,HeaderName,LedgerName,LedgerFK,r.batch_year,G.Course_Id,Course_Name,G.Dept_Code,Dept_Name,TextVal,P.app_no,App_FormNo,r.stud_name,Course_Name,Dept_Name,g.Degree_Code,A.FeeCategory,d.dept_acronym,l.priority ";
            if (activecol.Trim() == "8")
            {
                selqry = selqry + " having SUM(DeductAmout) > 0 ";
            }
            if (activecol.Trim() == "9")
            {
                selqry = selqry + " having SUM(FromGovtAmt) > 0";
            }
            if (activecol.Trim() == Convert.ToString(actbal))
            {
                selqry = selqry + " having SUM(BalAmount) > 0";
            }
            if (activecol.Trim() == Convert.ToString(actpaidtotal))
            {
                selqry = selqry + " having sum(BalAmount) = 0";
            }
            if (activecol.Trim() == Convert.ToString(refundamt))
            {
                selqry = selqry + "having SUM(RefundAmount)>0";
            }
            selqry += " order by isnull(l.priority,1000), l.ledgerName asc";
            selqry = selqry + " SELECT a.HeaderFK,LedgerFK,p.batch_year,G.Course_Id,Course_Name,G.Degree_Code,Dept_Name,TextVal,PayMode,SUM(Debit) as total,A.app_no,A.FeeCategory FROM FT_FinDailyTransaction A,Applyn P,Degree G,Course C,Department D,TextValTable T WHERE A.App_No = P.app_no  AND P.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code AND P.IsConfirm = 1 AND Admission_Status = 1 and isnull(IsCanceled,'0')='0' and  ISNULL(IsCollected,0)='1' AND A.FeeCategory = T.TextCode and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
            if (usBasedRights == true)
                selqry += " and a.EntryUserCode in('" + usercode + "')";
            if (headercode != "")
            {
                selqry = selqry + "and A.HeaderFK in ('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + " and LedgerFK in ('" + ledgercode + "')";
            }
            if (batchyr != "")
            {
                selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            }
            if (courseid != "")
            {
                selqry = selqry + " and G.Course_Id in('" + courseid + "')";

            }
            if (deptcode != "")
            {
                selqry = selqry + " and G.Dept_Code in ('" + deptcode + "') ";
            }
            if (semcode != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + semcode + "')";
            }
            if (gettagvalue.Trim() != "" && gettagvalue.Trim() != "0")
            {
                selqry = selqry + " and PayMode in ('" + gettagvalue + "')";
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND  a.TransDate between '" + fromdate + "' and '" + todate + "'";
                }
            }
            selqry = selqry + "GROUP BY a.HeaderFK,LedgerFK,p.batch_year,G.Course_Id,Course_Name,G.Degree_Code,Dept_Name,TextVal,PayMode,A.app_no,A.FeeCategory";

            selqry = selqry + " select SUM(Ex.Excessamt) as ExcessAmount,A.HeaderFK,h.LedgerPK,p.Batch_Year,C.Course_Id,d.Dept_Code,A.FeeCategory,p.App_No,h.priority from FT_ExcessDet EM,FT_ExcessLedgerDet Ex ,FT_FeeAllot A,Applyn P,Degree G,Course C,Department D,FM_LedgerMaster H,FM_HeaderMaster fh WHERE EM.ExcessDetPK = Ex.ExcessDetfk and em.App_No = p.app_no and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code  and h.LedgerPK =ex.LedgerFK and ex.HeaderFK=h.HeaderFK and h.HeaderFK=fh.HeaderPK and em.App_No = a.App_No   AND P.IsConfirm = 1  and a.LedgerFK=h.LedgerPK   AND Admission_Status = 1 and g.college_code ='" + collegecode1 + "' and A.FinYearFK in ('" + Finyearvalue + "')";
            if (headercode != "")
            {
                selqry = selqry + " and Ex.HeaderFK in('" + headercode + "')";
            }
            if (ledgercode != "")
            {
                selqry = selqry + "  and Ex.LedgerFK in('" + ledgercode + "')";
            }
            if (batchyr != "")
            {
                selqry = selqry + " and p.batch_year in('" + batchyr + "')";
            }
            if (courseid != "")
            {
                selqry = selqry + " and G.Course_Id in('" + courseid + "')";

            }
            if (deptcode != "")
            {
                selqry = selqry + " and G.Dept_Code in ('" + deptcode + "') ";
            }
            if (semcode != "")
            {
                selqry = selqry + " and A.FeeCategory in ('" + semcode + "')";
            }
            if (datewise == 1)
            {
                if (fromdate != "" && todate != "")
                {
                    selqry = selqry + "  AND PayStartDate <='" + fromdate + "'";
                }
            }
            selqry = selqry + " GROUP BY A.HeaderFK ,h.LedgerPK,p.Batch_Year ,C.Course_Id,d.Dept_Code,A.FeeCategory ,p.App_No,h.priority";
            if (activecol.Trim() == Convert.ToString(excessamt))
            {
                selqry = selqry + " having SUM(Ex.Excessamt)>0 ";
                flag = true;
            }
            //selqry += " order by isnull(h.priority,1000), h.ledgerName asc";
            #endregion

            bool paymodecheck = false;
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (gettagvalue.Trim() != "")
            {
                if (ds.Tables[1].Rows.Count > 0)
                {
                    paymodecheck = true;
                }
            }
            else
            {
                paymodecheck = true;
            }


            if (flag == true)
            {
                if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true && ds.Tables[2].Rows.Count > 0)
                {
                    flag1 = true;
                }
            }
            else
            {
                if (ds.Tables[0].Rows.Count > 0 && paymodecheck == true)
                {
                    flag1 = true;
                }
            }
            if (flag1 == true)
            {
                #region fpsem design

                loadstudcolumns();
                DataView dv = new DataView();
                int check = 0;
                ArrayList arrColStudentNames = new ArrayList();
                ArrayList arrColStudentNames2 = new ArrayList();
                Dictionary<int, string> dicLedRowColor = new Dictionary<int, string>();
                arrColStudentNames.Add("S.No");
                arrColStudentNames2.Add("S.No");
                dtReport.Columns.Add("S.No");
                arrColStudentNames.Add("Header Name");
                arrColStudentNames2.Add("Header Name");
                dtReport.Columns.Add("Header Name");
                arrColStudentNames.Add("Header pk");
                arrColStudentNames2.Add("Header pk");
                dtReport.Columns.Add("Header pk");
                arrColStudentNames.Add("Ledger Name");
                arrColStudentNames2.Add("Ledger Name");
                dtReport.Columns.Add("Ledger Name");
                arrColStudentNames.Add("Ledger pk");
                arrColStudentNames2.Add("Ledger pk");
                dtReport.Columns.Add("Ledger pk");
                arrColStudentNames.Add("Batch Year");
                arrColStudentNames2.Add("Batch Year");
                dtReport.Columns.Add("Batch Year");
                arrColStudentNames.Add(lbldeg.Text);
                arrColStudentNames2.Add(lbldeg.Text);
                dtReport.Columns.Add(lbldeg.Text);
                arrColStudentNames.Add("CourseId");
                arrColStudentNames2.Add("CourseId");
                dtReport.Columns.Add("CourseId");
                arrColStudentNames.Add(lbldept.Text);
                arrColStudentNames2.Add(lbldept.Text);
                dtReport.Columns.Add(lbldept.Text);
                arrColStudentNames.Add("Dept_Code");
                arrColStudentNames2.Add("Dept_Code");
                dtReport.Columns.Add("Dept_Code");
                arrColStudentNames.Add(lblsem.Text);
                arrColStudentNames2.Add(lblsem.Text);
                dtReport.Columns.Add(lblsem.Text);
                arrColStudentNames.Add("FeeCategory");
                arrColStudentNames2.Add("FeeCategory");
                dtReport.Columns.Add("FeeCategory");
                arrColStudentNames.Add("Student Name");
                arrColStudentNames2.Add("Student Name");
                dtReport.Columns.Add("Student Name");
                arrColStudentNames.Add("Allot");
                arrColStudentNames2.Add("Allot");
                dtReport.Columns.Add("Allot");
                arrColStudentNames.Add("Concession");
                arrColStudentNames2.Add("Concession");
                dtReport.Columns.Add("Concession");
                arrColStudentNames.Add("Scholarship");
                arrColStudentNames2.Add("Scholarship");
                dtReport.Columns.Add("Scholarship");
                arrColStudentNames.Add("Total");
                arrColStudentNames2.Add("Total");
                dtReport.Columns.Add("Total");

                Hashtable newhash = new Hashtable();

                if (chkl_paid.Items.Count > 0)
                {
                    for (int s = 0; s < chkl_paid.Items.Count; s++)
                    {
                        if (chkl_paid.Items[s].Selected == true)
                        {
                            check++;
                            arrColStudentNames.Add("Paid");
                            arrColStudentNames2.Add(chkl_paid.Items[s].Text);
                            dtReport.Columns.Add(chkl_paid.Items[s].Text);
                            newhash.Add(Convert.ToString(chkl_paid.Items[s].Value), dtReport.Columns.Count - 1);
                        }
                    }
                    if (check != 0)
                    {
                        arrColStudentNames.Add("Paid");
                        arrColStudentNames2.Add("Total Paid");
                        dtReport.Columns.Add("Total Paid");
                    }
                }
                if (check == 0)
                {
                    arrColStudentNames.Add("Paid");
                    arrColStudentNames2.Add("Paid");
                    dtReport.Columns.Add("Paid");
                }

                arrColStudentNames.Add("Balance");
                arrColStudentNames2.Add("Balance");
                dtReport.Columns.Add("Balance");
                arrColStudentNames.Add("Refund Amount");
                arrColStudentNames2.Add("Refund Amount");
                dtReport.Columns.Add("Refund Amount");
                arrColStudentNames.Add("Excess Amount");
                arrColStudentNames2.Add("Excess Amount");
                dtReport.Columns.Add("Excess Amount");
                arrColStudentNames.Add("Fine Amount");
                arrColStudentNames2.Add("Fine Amount");
                dtReport.Columns.Add("Fine Amount");
                DataRow drHdr1 = dtReport.NewRow();
                DataRow drHdr2 = dtReport.NewRow();
                for (int grCol = 0; grCol < dtReport.Columns.Count; grCol++)
                {
                    drHdr1[grCol] = arrColStudentNames[grCol];
                    drHdr2[grCol] = arrColStudentNames2[grCol];
                }
                dtReport.Rows.Add(drHdr1);
                dtReport.Rows.Add(drHdr2);

                #endregion

                #region fpsem value

                double allotamt = 0;
                double consamt = 0;
                double govt = 0;
                double tot_amount = 0;
                double totalvalue = 0;
                double bal = 0;
                double totamount = 0;
                double fnlamount = 0;
                double paidamount = 0;
                int ColCntGrd = 0;
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    drowGrd = dtReport.NewRow();
                    drowGrd[0] = Convert.ToString(i + 1);
                    drowGrd[1] = Convert.ToString(ds.Tables[0].Rows[i]["HeaderName"]);
                    drowGrd[2] = Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]);
                    drowGrd[3] = Convert.ToString(ds.Tables[0].Rows[i]["LedgerName"]);
                    drowGrd[4] = Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]);
                    drowGrd[5] = Convert.ToString(ds.Tables[0].Rows[i]["batch_year"]);
                    drowGrd[6] = Convert.ToString(ds.Tables[0].Rows[i]["Course_Name"]);
                    drowGrd[7] = Convert.ToString(ds.Tables[0].Rows[i]["Course_Id"]);

                    string deptname = Convert.ToString(ds.Tables[0].Rows[i]["Dept_Name"]);
                    string Acrname = Convert.ToString(ds.Tables[0].Rows[i]["dept_acronym"]);

                    if (deptacr == true)
                        drowGrd[8] = Acrname;
                    else
                        drowGrd[8] = deptname;

                    //   fpstudcell.Sheets[0].Cells[i, 5].Text = Convert.ToString(ds.Tables[0].Rows[i]["Dept_Name"]);
                    drowGrd[9] = Convert.ToString(ds.Tables[0].Rows[i]["Dept_Code"]);
                    drowGrd[10] = Convert.ToString(ds.Tables[0].Rows[i]["TextVal"]);
                    drowGrd[11] = Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]);
                    drowGrd[12] = Convert.ToString(ds.Tables[0].Rows[i]["Stud_Name"]);
                    //allot
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Allot"]), out allotamt);
                    drowGrd[13] = Convert.ToString(allotamt);
                    if (!grandtotal.ContainsKey(13))
                        grandtotal.Add(13, Convert.ToString(allotamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[13]), out amount);
                        amount += allotamt;
                        grandtotal.Remove(13);
                        grandtotal.Add(13, Convert.ToString(amount));
                    }
                    //consession
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["consustion"]), out consamt);
                    drowGrd[14] = Convert.ToString(consamt);
                    if (!grandtotal.ContainsKey(14))
                        grandtotal.Add(14, Convert.ToString(consamt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[14]), out amount);
                        amount += consamt;
                        grandtotal.Remove(14);
                        grandtotal.Add(14, Convert.ToString(amount));
                    }
                    //government
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Government"]), out govt);
                    drowGrd[15] = Convert.ToString(govt);
                    if (!grandtotal.ContainsKey(15))
                        grandtotal.Add(15, Convert.ToString(govt));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[15]), out amount);
                        amount += govt;
                        grandtotal.Remove(15);
                        grandtotal.Add(15, Convert.ToString(amount));
                    }
                    //total
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["Total"]), out totalvalue);
                    drowGrd[16] = Convert.ToString(totalvalue);
                    if (!grandtotal.ContainsKey(16))
                        grandtotal.Add(16, Convert.ToString(totalvalue));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[16]), out amount);
                        amount += totalvalue;
                        grandtotal.Remove(16);
                        grandtotal.Add(16, Convert.ToString(amount));
                    }
                    //paid paymode count=0
                    double paidvalue = 0;
                    if (check == 0)
                    {
                        double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["paid"]), out paidvalue);
                        fnlamount = Convert.ToDouble(paidvalue);
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 5] = Convert.ToString(paidvalue);
                        if (!grandtotal.ContainsKey(ColCntGrd - 5))
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(paidvalue));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                            amount += paidvalue;
                            grandtotal.Remove(ColCntGrd - 5);
                            grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                        }
                    }
                    //refund
                    double refund = 0;
                    double.TryParse(Convert.ToString(ds.Tables[0].Rows[i]["RefundAmount"]), out refund);
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 3] = Convert.ToString(refund);
                    if (!grandtotal.ContainsKey(ColCntGrd - 3))
                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(refund));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 3]), out amount);
                        amount += refund;
                        grandtotal.Remove(ColCntGrd - 3);
                        grandtotal.Add(ColCntGrd - 3, Convert.ToString(amount));
                    }
                    //excess
                    DataView dvex = new DataView();
                    if (ds.Tables[2].Rows.Count > 0)
                    {
                        ds.Tables[2].DefaultView.RowFilter = "App_No='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "'";
                        dvex = ds.Tables[2].DefaultView;

                        if (dvex.Count > 0 && dvex != null)
                        {
                            for (int k = 0; k < dvex.Count; k++)
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(dvex[k]["ExcessAmount"]), out amount);
                                tot_amount += amount;
                            }
                        }
                    }
                    ColCntGrd = dtReport.Columns.Count;
                    drowGrd[ColCntGrd - 2] = Convert.ToString(tot_amount);
                    if (!grandtotal.ContainsKey(ColCntGrd - 2))
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(tot_amount));
                    else
                    {
                        double amount = 0;
                        double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 2]), out amount);
                        amount += tot_amount;
                        grandtotal.Remove(ColCntGrd - 2);
                        grandtotal.Add(ColCntGrd - 2, Convert.ToString(amount));
                    }
                    tot_amount = 0;
                    //paymode values
                    if (ds.Tables[1].Rows.Count > 0)
                    {
                        for (int pay = 0; pay < chkl_paid.Items.Count; pay++)
                        {
                            if (chkl_paid.Items[pay].Selected == true)
                            {
                                ds.Tables[1].DefaultView.RowFilter = "PayMode='" + Convert.ToString(chkl_paid.Items[pay].Value) + "' and HeaderFK='" + Convert.ToString(ds.Tables[0].Rows[i]["HeaderFK"]) + "' and LedgerFK='" + Convert.ToString(ds.Tables[0].Rows[i]["LedgerFK"]) + "' and batch_year='" + Convert.ToString(ds.Tables[0].Rows[i]["batch_year"]) + "' and Degree_Code='" + Convert.ToString(ds.Tables[0].Rows[i]["Degree_Code"]) + "' and FeeCategory='" + Convert.ToString(ds.Tables[0].Rows[i]["FeeCategory"]) + "' and app_no='" + Convert.ToString(ds.Tables[0].Rows[i]["App_No"]) + "'";
                                dv = ds.Tables[1].DefaultView;
                                int colnew = Convert.ToInt32(newhash[Convert.ToString(chkl_paid.Items[pay].Value)]);
                                for (int k = 0; k < dv.Count; k++)
                                {
                                    double.TryParse(Convert.ToString(dv[k]["total"]), out totamount);
                                    fnlamount = fnlamount + totamount;
                                    paidamount = paidamount + Convert.ToDouble(totamount);
                                }
                                drowGrd[colnew] = Convert.ToString(paidamount);
                                if (!grandtotal.ContainsKey(colnew))
                                    grandtotal.Add(colnew, Convert.ToString(paidamount));
                                else
                                {
                                    double amount = 0;
                                    double.TryParse(Convert.ToString(grandtotal[colnew]), out amount);
                                    amount += paidamount;
                                    grandtotal.Remove(colnew);
                                    grandtotal.Add(colnew, Convert.ToString(amount));
                                }
                                paidamount = 0;
                            }
                        }
                        if (check != 0)
                        {
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 5] = Convert.ToString(fnlamount);
                            if (!grandtotal.ContainsKey(ColCntGrd - 5))
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(fnlamount));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 5]), out amount);
                                amount += fnlamount;
                                grandtotal.Remove(ColCntGrd - 5);
                                grandtotal.Add(ColCntGrd - 5, Convert.ToString(amount));
                            }
                        }
                        //balance
                        if (totalvalue != 0)
                        {
                            bal = totalvalue - fnlamount;
                            ColCntGrd = dtReport.Columns.Count;
                            drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                            if (!grandtotal.ContainsKey(ColCntGrd - 4))
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                            else
                            {
                                double amount = 0;
                                double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                                amount += bal;
                                grandtotal.Remove(ColCntGrd - 4);
                                grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                            }
                            fnlamount = 0;

                            if (bal == 0)
                                dicRowColor.Add(dtReport.Rows.Count, "NoBalance");
                            else
                                dicRowColor.Add(dtReport.Rows.Count, "Balance");
                        }
                    }
                    else
                    {
                        bal = totalvalue;
                        ColCntGrd = dtReport.Columns.Count;
                        drowGrd[ColCntGrd - 4] = Convert.ToString(bal);
                        if (!grandtotal.ContainsKey(ColCntGrd - 4))
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(bal));
                        else
                        {
                            double amount = 0;
                            double.TryParse(Convert.ToString(grandtotal[ColCntGrd - 4]), out amount);
                            amount += bal;
                            grandtotal.Remove(ColCntGrd - 4);
                            grandtotal.Add(ColCntGrd - 4, Convert.ToString(amount));
                        }
                    }
                    dtReport.Rows.Add(drowGrd);
                }
                drowGrd = dtReport.NewRow();
                drowGrd[0] = "Grand Total";
                double grandvalue = 0;
                for (int j = 13; j < dtReport.Columns.Count; j++)
                {
                    double.TryParse(Convert.ToString(grandtotal[j]), out grandvalue);
                    drowGrd[j] = Convert.ToString(grandvalue);
                }
                dtReport.Rows.Add(drowGrd);

                #endregion

                #region visible

                GrdStud.DataSource = dtReport;
                GrdStud.DataBind();
                GrdStud.Visible = true;

                GridViewRow row = GrdStud.Rows[0];
                GridViewRow previousRow = GrdStud.Rows[1];

                for (int i = 0; i < dtReport.Columns.Count; i++)
                {
                    if (row.Cells[i].Text == previousRow.Cells[i].Text)
                    {
                        row.Cells[i].RowSpan = 2;
                        previousRow.Cells[i].Visible = false;
                    }
                }
                //ColumnSpan

                for (int cell = GrdStud.Rows[0].Cells.Count - 1; cell > 0; cell--)
                {
                    TableCell colum = GrdStud.Rows[0].Cells[cell];
                    TableCell previouscol = GrdStud.Rows[0].Cells[cell - 1];
                    if (colum.Text == previouscol.Text)
                    {
                        if (previouscol.ColumnSpan == 0)
                        {
                            if (colum.ColumnSpan == 0)
                            {
                                previouscol.ColumnSpan += 2;
                            }
                            else
                            {
                                previouscol.ColumnSpan += colum.ColumnSpan + 1;
                            }
                            colum.Visible = false;
                        }
                    }
                }
                foreach (KeyValuePair<int, string> dr in dicRowColor)
                {
                    int g = dr.Key;
                    string DicValue = dr.Value;
                    if (DicValue == "NoBalance")
                    {
                        GrdStud.Rows[g].BackColor = ColorTranslator.FromHtml("#F08080");
                    }
                    if (DicValue == "Balance")
                    {
                        GrdStud.Rows[g].BackColor = ColorTranslator.FromHtml("#90EE90");
                    }
                }

                // pnl_studcolord.Visible = true;
                //  pnl_studcolorder.Visible = true;
                div7.Visible = true;
                divstudcell.Visible = true;
                lbl_semcell.Visible = true;
                lbl_semcell.Text = "->Header(" + colhedername + ")->Ledger(" + colledname + ")->Batch(" + colbatname + ")->Degree(" + coldegname + ")->Department(" + coldeptname + ")->Semaster(" + colsemname + ")->Student detail";
                // loadstudcolorder();
                rptprint.Visible = true;
                // rptprint.Attributes.Add("Style", "margin-top:22px; margin-left:10px;");
                ViewState["stud"] = 6;
                rptprint.Visible = true;
                txtexcelname.Text = "";
                lblvalidation1.Text = "";
                #endregion
            }
            else
            {
                lbl_semcell.Visible = false;
                //  pnl_studcolord.Visible = false;
                divstudcell.Visible = false;
                GrdStud.Visible = false;
                imgdiv2.Visible = true;
                pnl2.Visible = true;
                lbl_alert.Visible = true;
                lbl_alert.Text = "No Record Found";
            }

        }
        catch (Exception ex)
        {

        }
    }

    protected void GrdStud_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            if (e.Row.RowIndex == 0)
            {
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[9].Visible = false;
                e.Row.Cells[11].Visible = false;
                e.Row.Cells[28].Visible = false;
            }
            else
            {
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[5].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Left;
                e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[14].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[15].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[16].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[17].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[18].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[19].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[20].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[21].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[22].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[23].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[24].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[25].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[26].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[27].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[26].HorizontalAlign = HorizontalAlign.Right;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[9].Visible = false;
                e.Row.Cells[11].Visible = false;
                e.Row.Cells[28].Visible = false;
            }
            if (e.Row.RowIndex == 1)
            {
                e.Row.BackColor = Color.FromArgb(12, 166, 202);
                e.Row.HorizontalAlign = HorizontalAlign.Center;
                e.Row.Font.Bold = true;
                e.Row.Cells[0].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[9].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[10].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[11].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[12].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[13].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[14].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[15].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[16].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[17].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[18].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[19].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[20].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[21].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[22].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[23].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[24].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[25].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[26].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[27].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[26].HorizontalAlign = HorizontalAlign.Center;
                e.Row.Cells[2].Visible = false;
                e.Row.Cells[4].Visible = false;
                e.Row.Cells[7].Visible = false;
                e.Row.Cells[9].Visible = false;
                e.Row.Cells[11].Visible = false;
                e.Row.Cells[27].Visible = false;
            }
        }
    }

    #endregion

    #endregion

    #region stud
    protected void cb_stud_OnCheckedChanged(object sender, EventArgs e)
    {
        string type = "";
        if (cb_stud.Checked == true)
        {
            for (int i = 0; i < cbl_stud.Items.Count; i++)
            {
                cbl_stud.Items[i].Selected = true;
                type = Convert.ToString(cbl_stud.Items[i].Text);
            }
            if (cbl_stud.Items.Count == 1)
            {
                txt_stud.Text = "" + type + "";
            }
            else
            {
                txt_stud.Text = "Type (" + (cbl_stud.Items.Count) + ")";
            }

        }
        else
        {
            for (int i = 0; i < cbl_stud.Items.Count; i++)
            {
                cbl_stud.Items[i].Selected = false;
            }
            txt_stud.Text = "--Select--";
        }
    }
    protected void cbl_stud_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        string type = "";
        txt_stud.Text = "--Select--";
        cb_stud.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cbl_stud.Items.Count; i++)
        {
            if (cbl_stud.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                type = Convert.ToString(cbl_stud.Items[i].Text);
            }
        }
        if (commcount > 0)
        {

            if (commcount == cbl_stud.Items.Count)
            {
                cb_stud.Checked = true;
            }
            if (commcount == 1)
            {
                txt_stud.Text = "" + type + "";
            }
            else
            {
                txt_stud.Text = "Type(" + commcount.ToString() + ")";
            }
        }
    }
    public void loadtype()
    {

        try
        {
            string clgvalue = ddl_collegename.SelectedItem.Value.ToString();
            cbl_stud.Items.Clear();
            string deptquery = "select distinct mode,case when mode =1 then 'Regular' when mode=2 then 'Lateral' when mode=3 then 'Transfer' end as Modename from Registration where mode <>0 and college_code in('" + clgvalue + "')";
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_stud.DataSource = ds;
                cbl_stud.DataTextField = "Modename";
                cbl_stud.DataValueField = "mode";
                cbl_stud.DataBind();

                if (cbl_stud.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_stud.Items.Count; i++)
                    {
                        cbl_stud.Items[i].Selected = true;
                    }
                    txt_stud.Text = "Type(" + cbl_stud.Items.Count + ")";
                    cb_stud.Checked = true;
                }
            }
            else
            {
                txt_stud.Text = "--Select--";

            }
        }
        catch
        {
        }
    }
    #endregion

    #region seat
    protected void cb_seat_OnCheckedChanged(object sender, EventArgs e)
    {
        string seat = "";
        if (cb_seat.Checked == true)
        {
            for (int i = 0; i < cbl_seat.Items.Count; i++)
            {
                cbl_seat.Items[i].Selected = true;
                seat = Convert.ToString(cbl_seat.Items[i].Text);
            }
            if (cbl_seat.Items.Count == 1)
            {
                txt_seat.Text = "" + seat + "";
            }
            else
            {
                txt_seat.Text = "Seat (" + (cbl_seat.Items.Count) + ")";
            }

        }
        else
        {
            for (int i = 0; i < cbl_seat.Items.Count; i++)
            {
                cbl_seat.Items[i].Selected = false;
            }
            txt_seat.Text = "--Select--";
        }
    }
    protected void cbl_seat_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        txt_seat.Text = "--Select--";
        cb_seat.Checked = false;
        int commcount = 0;
        string seat = "";
        for (int i = 0; i < cbl_seat.Items.Count; i++)
        {
            if (cbl_seat.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                seat = Convert.ToString(cbl_seat.Items[i].Text);
            }
        }
        if (commcount > 0)
        {

            if (commcount == cbl_seat.Items.Count)
            {
                cb_seat.Checked = true;
            }
            if (commcount == 1)
            {
                txt_seat.Text = "" + seat + "";
            }
            else
            {
                txt_seat.Text = "Seat(" + commcount.ToString() + ")";
            }
        }

    }
    public void loadseat()
    {

        try
        {
            cbl_seat.Items.Clear();
            string deptquery = "select Distinct t.TextCode,T.TextVal  from applyn a,Registration r,TextValTable t where a.app_no =r.App_No and t.TextCode =a.seattype and a.college_code='" + ddl_collegename.SelectedItem.Value + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_seat.DataSource = ds;
                cbl_seat.DataTextField = "TextVal";
                cbl_seat.DataValueField = "TextCode";
                cbl_seat.DataBind();

                if (cbl_seat.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_seat.Items.Count; i++)
                    {
                        cbl_seat.Items[i].Selected = true;
                    }
                    txt_seat.Text = "Seat(" + cbl_seat.Items.Count + ")";
                    cb_seat.Checked = true;
                }
            }
            else
            {
                txt_seat.Text = "--Select--";

            }
        }
        catch
        {
        }

    }
    #endregion

    #region studtype
    public void loadstutype()
    {

        try
        {
            string clgvalue = ddl_collegename.SelectedItem.Value.ToString();
            cbl_studtype.Items.Clear();
            string deptquery = "select distinct Stud_Type from Registration where college_code in('" + clgvalue + "')";
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_studtype.DataSource = ds;
                cbl_studtype.DataTextField = "Stud_Type";
                // cbl_stutype.DataValueField = "mode";
                cbl_studtype.DataBind();

                if (cbl_studtype.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_studtype.Items.Count; i++)
                    {
                        cbl_studtype.Items[i].Selected = true;
                    }
                    txt_studtype.Text = "Student Type(" + cbl_studtype.Items.Count + ")";
                    cb_studtype.Checked = true;
                }
            }
            else
            {
                txt_studtype.Text = "--Select--";

            }
        }
        catch
        {
        }

    }
    protected void cb_studtype_OnCheckedChanged(object sender, EventArgs e)
    {
        string studtype = "";
        if (cb_studtype.Checked == true)
        {
            for (int i = 0; i < cbl_studtype.Items.Count; i++)
            {
                cbl_studtype.Items[i].Selected = true;
                studtype = Convert.ToString(cbl_studtype.Items[i].Text);
            }
            if (cbl_studtype.Items.Count == 1)
            {
                txt_studtype.Text = "" + studtype + "";
            }
            else
            {
                txt_studtype.Text = "Student Type (" + (cbl_studtype.Items.Count) + ")";
            }

        }
        else
        {
            for (int i = 0; i < cbl_studtype.Items.Count; i++)
            {
                cbl_studtype.Items[i].Selected = false;
            }
            txt_studtype.Text = "--Select--";
        }
    }
    protected void cbl_studtype_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        txt_studtype.Text = "--Select--";
        cb_studtype.Checked = false;
        int commcount = 0;
        string studtype = "";
        for (int i = 0; i < cbl_studtype.Items.Count; i++)
        {
            if (cbl_studtype.Items[i].Selected == true)
            {
                studtype = Convert.ToString(cbl_studtype.Items[i].Text);
                commcount = commcount + 1;
            }
        }
        if (commcount > 0)
        {

            if (commcount == cbl_studtype.Items.Count)
            {

                cb_studtype.Checked = true;

            }
            if (commcount == 1)
            {
                txt_studtype.Text = "" + studtype + "";
            }
            else
            {
                txt_studtype.Text = "Student Type(" + commcount.ToString() + ")";
            }
        }
    }

    #endregion

    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> Getrno(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            string query = "";
            WebService ws = new WebService();
            if (personmode == 0)
            {
                //student query
                if (chosedmode == 0)
                {
                    query = "select top 100 Roll_No from Registration where CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' and Roll_No like '" + prefixText + "%' and college_code='" + collegecode1 + "' order by Roll_No asc";
                }
                else if (chosedmode == 1)
                {
                    query = "select  top 100 Reg_No from Registration where CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' and Reg_No like '" + prefixText + "%' and college_code='" + collegecode1 + "' order by Reg_No asc";
                }
                else if (chosedmode == 2)
                {
                    query = "select  top 100 Roll_admit from Registration where CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' and Roll_admit like '" + prefixText + "%' and college_code='" + collegecode1 + "' order by Roll_admit asc";
                }
                else if (chosedmode == 4)
                {
                    query = "  select  top 100 Stud_Name+'-'+Roll_No+'-'+(select c.Course_Name+'-'+dept_name from Department dt,Degree d,course c where c.Course_Id=d.Course_Id and dt.Dept_Code =d.Dept_Code and d.Degree_Code=r.degree_code) as Roll_admit from Registration r where Stud_Name like '" + prefixText + "%' and college_code='" + collegecode1 + "' order by Roll_admit asc";
                }
                else
                {
                    query = "  select  top 100 app_formno from applyn where admission_status =0 and isconfirm ='1' and app_formno like '" + prefixText + "%' and college_code='" + collegecode1 + "' order by app_formno asc";
                }
            }

            name = ws.Getname(query);
            return name;
        }
        catch { return name; }
    }

    public void btn_errorclose_Click(object sender, EventArgs e)
    {
        imgdiv2.Visible = false;
        txt_pgtxt.Text = "";

        bindsem1();
        loadstream();
        loadcourse();
        loadheader();
        loadfield();
        lb_hdr.Items.Clear();

    }

    #region paymentmode
    public void loadpaid()
    {
        try
        {
            chkl_paid.Items.Clear();
            //chkl_paid.Items.Add(new ListItem("Cash", "1"));
            //chkl_paid.Items.Add(new ListItem("Cheque", "2"));
            //chkl_paid.Items.Add(new ListItem("DD", "3"));
            //chkl_paid.Items.Add(new ListItem("Challan", "4"));
            //chkl_paid.Items.Add(new ListItem("Online", "5"));
            //  chkl_paid.Items.Add(new ListItem("Total Paid", "6"));
            d2.BindPaymodeToCheckboxList(chkl_paid, usercode, collegecode1);
            if (chkl_paid.Items.Count > 0)
            {
                for (int i = 0; i < chkl_paid.Items.Count; i++)
                {
                    chkl_paid.Items[i].Selected = true;
                }
                txt_paid.Text = "Paid(" + chkl_paid.Items.Count + ")";
                chk_paid.Checked = true;
            }
        }
        catch
        {

        }

    }
    public void chk_paid_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(chk_paid, chkl_paid, txt_paid, "Paid", "--Select--");
        }
        catch
        { }
    }
    public void chkl_paid_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(chk_paid, chkl_paid, txt_paid, "Paid", "--Select--");
        }
        catch
        { }
    }
    #endregion

    #region printdetail

    public void btnprintmaster_Click(object sender, EventArgs e)
    {
        try
        { printmethod(); }
        catch { }
    }

    public void printmethod()
    {
        try
        {
            string degreedetails;
            string pagename;
            string degreedetails1;
            string pagename1;

            int batchcount = 0;
            int degreecount = 0;
            int deptcount = 0;
            int semcount = 0;

            string batchh = "";
            string degreeh = "";
            string dept = "";
            string semester = "";
            lblvalidation1.Text = string.Empty;
            txtexcelname.Text = string.Empty;
            degreedetails = Convert.ToString(txtexcelname.Text);
            string ss = null;
            //if (degreedetails.Trim() != "")
            //{
            if (chk_datewise.Checked == true)
            {
                if (txt_fromdate.Text.Trim() != "" && txt_todate.Text.Trim() != "")
                {
                    degreedetails = degreedetails + '@' + " Date   : " + txt_fromdate.Text + " To " + txt_todate.Text + "";
                }
            }
            if (rb_header.Checked == true)
            {
                degreedetails = "Header Report";
                pagename = "StudentfeeAllotReportalter.aspx";
                Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                Printcontrolhed.Visible = true;
                if (Convert.ToString(ViewState["stud"]) == "6")
                {
                    degreedetails = "Header/Ledger/Batch/Degree/Department/Semaster/Student Report";
                    pagename = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(GrdStud, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
                else if (Convert.ToString(ViewState["sem"]) == "5")
                {
                    degreedetails = "Header/Ledger/Batch/Degree/Department/Semaster Report";
                    pagename = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(GrdSem, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
                else if (Convert.ToString(ViewState["dept"]) == "4")
                {
                    degreedetails = "Header/Ledger/Batch/Degree/Department Report";
                    pagename = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(GrdDept, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
                else if (Convert.ToString(ViewState["degree"]) == "3")
                {
                    degreedetails = "Header/Ledger/Batch/Degree Report";
                    pagename = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(GrdDegree, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
                else if (Convert.ToString(ViewState["batch"]) == "2")
                {
                    degreedetails = "Header/Ledger/Batch Report";
                    pagename = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(GrdBatch, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
                else if (Convert.ToString(ViewState["ledger"]) == "1")
                {
                    degreedetails1 = "Header/Ledger Report";
                    pagename1 = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(Grdledger, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
                else if (Convert.ToString(ViewState["header"]) == "0")
                {
                    degreedetails1 = "Header/Ledger Report";
                    pagename1 = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }

            }
            if (rb_ledger.Checked == true)
            {
                degreedetails = "Ledger Report";
                pagename = "StudentfeeAllotReportalter.aspx";
                Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                Printcontrolhed.Visible = true;
            }
            if (rb_batch.Checked == true)
            {
                degreedetails = "Batch Report";
                pagename = "StudentfeeAllotReportalter.aspx";
                Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                Printcontrolhed.Visible = true;
            }
            if (rb_degree.Checked == true)
            {
                degreedetails = "Degree Report";
                pagename = "StudentfeeAllotReportalter.aspx";
                Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                Printcontrolhed.Visible = true;
            }
            if (rb_dept.Checked == true)
            {
                if (rbdeptcommon.Checked == true)
                {
                    degreedetails = "Department-Common Report";
                    pagename = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
                else if (rbdeptdetail.Checked == true)
                {
                    if (rbdeptyear.Checked == true)
                    {
                        degreedetails = "Department-YearWise Report";
                        pagename = "StudentfeeAllotReportalter.aspx";
                        Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                        Printcontrolhed.Visible = true;
                    }
                    if (rbdepthead.Checked == true)
                    {
                        degreedetails = "Department-HeaderWise Report";
                        pagename = "StudentfeeAllotReportalter.aspx";
                        Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                        Printcontrolhed.Visible = true;
                    }
                    if (rbdeptledg.Checked == true)
                    {
                        degreedetails = "Department-LedgerWise Report";
                        pagename = "StudentfeeAllotReportalter.aspx";
                        Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                        Printcontrolhed.Visible = true;
                    }
                }
            }
            if (rb_sem.Checked == true)
            {
                degreedetails = "Semaster Report";
                pagename = "StudentfeeAllotReportalter.aspx";
                Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                Printcontrolhed.Visible = true;
            }
            if (rb_studentwise.Checked == true)
            {
                if (rb_common.Checked == true)
                {
                    degreedetails = "Studentwise - Common- Report";
                    pagename = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
                if (rb_detail.Checked == true)
                {
                    if (rb_hori.Checked == true)
                    {
                        if (rbstudhed.Checked == true)
                        {
                            degreedetails = "Studentwise-Horizontal-Header Report";
                            pagename = "StudentfeeAllotReportalter.aspx";
                            Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                            Printcontrolhed.Visible = true;
                        }
                        else if (rbstudled.Checked == true)
                        {
                            degreedetails = "Studentwise-Horizontal-Ledger Report";
                            pagename = "StudentfeeAllotReportalter.aspx";
                            Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                            Printcontrolhed.Visible = true;
                        }
                    }

                    else if (rb_vert.Checked == true)
                    {
                        if (rbstudhed.Checked == true)
                        {
                            degreedetails = "Studentwise-Vertical-Header Report";
                            pagename = "StudentfeeAllotReportalter.aspx";
                            Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                            Printcontrolhed.Visible = true;
                        }
                        else if (rbstudled.Checked == true)
                        {
                            degreedetails = "Studentwise-Vertical-Ledger Report";
                            pagename = "StudentfeeAllotReportalter.aspx";
                            Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                            Printcontrolhed.Visible = true;
                        }
                    }
                }
            }
            if (rb_dailydetail.Checked == true)
            {
                degreedetails = "Daily Deail Report";
                pagename = "StudentfeeAllotReportalter.aspx";
                Printcontrolhed.loadspreaddetails(GrdDailyDetail, pagename, degreedetails, 0, ss);
                // Printcontrolhed.loadspreaddetails(FpSpread2, pagename, degreedetails);
                Printcontrolhed.Visible = true;
            }
            if (rb_others.Checked == true)
            {
                if (rbstaff.Checked == true)
                {
                    degreedetails = "Others-Staff Report";
                    pagename = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
                if (rbvendor.Checked == true)
                {
                    degreedetails = "Others-Vendors Report";
                    pagename = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
                if (rbothers.Checked == true)
                {
                    degreedetails = "Others-Other Report";
                    pagename = "StudentfeeAllotReportalter.aspx";
                    Printcontrolhed.loadspreaddetails(grdStudentReport, pagename, degreedetails, 0, ss);
                    Printcontrolhed.Visible = true;
                }
            }
            //}
            //else
            //{
            //    lblvalidation1.Text = "Please Enter Your Report Name";
            //    lblvalidation1.Visible = true;
            //    txtexcelname.Focus();
            //}
        }
        catch
        { }
    }

    public void btnprintmasterButton1_Click(object sender, EventArgs e)
    {
        if (rb_detail.Checked == true)
        {
            if (rb_hori.Checked == true)
            {
                if (rbstudhed.Checked == true)
                {
                    string appvalue = "";
                    string studdegcode = "";
                    string feecatagory = "";
                    string settingtype = "0";
                    string rollno = "";
                    string istotalwise = "";
                    string selqry = "select PageCode,DegreeCode,FeeCategory,ChlGroupHeader,Field,TextValue,SettingType,IsTotalwise,CollegeCode,IsTotalwise from FM_ChlBankPrintSettings a where SettingType ='" + settingtype + "'";

                    ds = d2.select_method_wo_parameter(selqry, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        istotalwise = Convert.ToString(ds.Tables[0].Rows[0]["IsTotalwise"]);
                        string appPath = HttpContext.Current.Server.MapPath("~/BankStatement");
                        string szPath = "/BankStatement" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".txt";
                        string szPathnew = appPath + szPath;
                        FileStream fs = null;
                        if (!File.Exists(szPathnew))
                        {
                            using (fs = File.Create(szPathnew))
                            {
                            }
                        }
                        string strtext = "";
                        for (int i = 0; i < grdStudentReport.Rows.Count; i++)
                        {
                            appvalue = Convert.ToString(grdStudentReport.Rows[i].Cells[6].Text);
                            studdegcode = Convert.ToString(grdStudentReport.Rows[i].Cells[7].Text);
                            feecatagory = Convert.ToString(grdStudentReport.Rows[i].Cells[8].Text);
                            rollno = Convert.ToString(grdStudentReport.Rows[i].Cells[2].Text);
                            DataView dvprint = new DataView();

                            ds.Tables[0].DefaultView.RowFilter = "DegreeCode='" + Convert.ToString(studdegcode) + "' and FeeCategory='" + Convert.ToString(feecatagory) + "'";
                            // and Roll_No='"+Convert.ToString(FpSpread1.Sheets[0].Cells[i,1].Tag)+"'
                            dvprint = ds.Tables[0].DefaultView;
                            if (dvprint.Count > 0)
                            {
                                string field = "";
                                string fieldname = "";
                                field = Convert.ToString(dvprint[0]["Field"].ToString());
                                string[] splitfield = field.Split(',');
                                if (splitfield.Length > 0)
                                {
                                    string seleqry = " select r.Roll_No,r.Reg_No,r.Roll_Admit,dt.Dept_Name,c.Course_Name,r.Batch_Year,(select textval from textvaltable where TextCode='" + feecatagory + "') as semester,r.Stud_Name from Registration r ,applyn a,Degree d,Department dt,Course c where a.app_no=r.App_No and d.Degree_Code =r.degree_code and d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id and r.App_No ='" + appvalue + "'";
                                    dsprint = d2.select_method_wo_parameter(seleqry, "Text");
                                    for (int j = 0; j < splitfield.Length; j++)
                                    {
                                        fieldname = splitfield[j].ToString();
                                        if (fieldname.Trim() == "Text")
                                        {
                                            if (strtext == "")
                                            {
                                                strtext = Convert.ToString(dvprint[0]["TextValue"]);
                                            }
                                            else
                                            {
                                                strtext = strtext + Convert.ToString(dvprint[0]["TextValue"]);
                                            }
                                        }
                                        else if (fieldname.Trim() == "App No")
                                        {
                                            if (strtext == "")
                                            {
                                                strtext = Convert.ToString(appvalue);
                                            }
                                            else
                                            {
                                                strtext = strtext + "|" + Convert.ToString(appvalue);
                                            }
                                        }
                                        else if (fieldname.Trim() == "Roll No")
                                        {
                                            if (strtext == "")
                                            {
                                                strtext = Convert.ToString(dsprint.Tables[0].Rows[0]["Roll_No"]);
                                            }
                                            else
                                            {
                                                strtext = strtext + "|" + Convert.ToString(dsprint.Tables[0].Rows[0]["Roll_No"]);
                                            }
                                        }
                                        else if (fieldname.Trim() == "Admission No")
                                        {
                                            if (strtext == "")
                                            {
                                                strtext = Convert.ToString(dsprint.Tables[0].Rows[0]["Roll_Admit"]);
                                            }
                                            else
                                            {
                                                strtext = strtext + "|" + Convert.ToString(dsprint.Tables[0].Rows[0]["Roll_Admit"]);
                                            }
                                        }
                                        else if (fieldname.Trim() == "Register")
                                        {
                                            if (strtext == "")
                                            {
                                                strtext = Convert.ToString(dsprint.Tables[0].Rows[0]["Reg_No"]);
                                            }
                                            else
                                            {
                                                strtext = strtext + "|" + Convert.ToString(dsprint.Tables[0].Rows[0]["Reg_No"]);
                                            }
                                        }
                                        else if (fieldname.Trim() == "Student Name")
                                        {
                                            if (strtext == "")
                                            {
                                                strtext = Convert.ToString(dsprint.Tables[0].Rows[0]["Stud_Name"]);
                                            }
                                            else
                                            {
                                                strtext = strtext + "|" + Convert.ToString(dsprint.Tables[0].Rows[0]["Stud_Name"]);
                                            }
                                        }
                                        else if (fieldname.Trim() == "Course")
                                        {
                                            if (strtext == "")
                                            {
                                                strtext = Convert.ToString(dsprint.Tables[0].Rows[0]["Course_Name"]);
                                            }
                                            else
                                            {
                                                strtext = strtext + "|" + Convert.ToString(dsprint.Tables[0].Rows[0]["Course_Name"]);
                                            }
                                        }
                                        else if (fieldname.Trim() == "Branch")
                                        {
                                            if (strtext == "")
                                            {
                                                strtext = Convert.ToString(dsprint.Tables[0].Rows[0]["Dept_Name"]);
                                            }
                                            else
                                            {
                                                strtext = strtext + "|" + Convert.ToString(dsprint.Tables[0].Rows[0]["Dept_Name"]);
                                            }
                                        }
                                        else if (fieldname.Trim() == "Batch")
                                        {
                                            if (strtext == "")
                                            {
                                                strtext = Convert.ToString(dsprint.Tables[0].Rows[0]["Batch_Year"]);
                                            }
                                            else
                                            {
                                                strtext = strtext + "|" + Convert.ToString(dsprint.Tables[0].Rows[0]["Batch_Year"]);
                                            }
                                        }
                                        else if (fieldname.Trim() == "Semaster")
                                        {
                                            if (strtext == "")
                                            {
                                                strtext = Convert.ToString(dvprint[0]["TextValue"]);
                                            }
                                            else
                                            {
                                                strtext = strtext + "|" + Convert.ToString(dsprint.Tables[0].Rows[0]["semester"]);
                                            }
                                        }
                                        //else if (fieldname.Trim() == "Bank A/C No")
                                        //{
                                        //    if (strtext == "")
                                        //    {
                                        //        strtext = Convert.ToString(dvprint[0]["TextValue"]);
                                        //    }
                                        //    else
                                        //    {
                                        //        strtext = strtext + "|" + Convert.ToString(dsprint.Tables[0].Rows[0]["Current_Semester"]);
                                        //    }
                                        //}
                                    }
                                }
                                bool checkval = false;
                                if (chknetamount.Checked == true)
                                {
                                    checkval = true;
                                }
                                string heavalue = "";
                                string strhedervalue = "";
                                string balvaluenew = "";
                                Hashtable checkhash = (Hashtable)ViewState["Newhash"];
                                strhedervalue = Convert.ToString(dvprint[0]["ChlGroupHeader"].ToString());
                                string[] strhedvalue = strhedervalue.Split(',');
                                if (istotalwise.Trim() == "0" || istotalwise.Trim() == "False")
                                {
                                    if (strhedvalue.Length > 0)
                                    {
                                        for (int k = 0; k < strhedvalue.Length; k++)
                                        {
                                            heavalue = strhedvalue[k].ToString();
                                            string balvalue = "";
                                            string selectqueryvalue = "select distinct HeaderFK  from FS_ChlGroupHeaderSettings  where ChlGroupHeader ='" + heavalue + "'";
                                            DataSet dvalue = d2.select_method_wo_parameter(selectqueryvalue, "Text");
                                            if (dvalue.Tables[0].Rows.Count > 0)
                                            {
                                                int bal = 0;
                                                for (int row = 0; row < dvalue.Tables[0].Rows.Count; row++)
                                                {
                                                    if (checkhash.Contains(Convert.ToString(dvalue.Tables[0].Rows[row][0])))
                                                    {
                                                        int columnvalue = Convert.ToInt32(checkhash[Convert.ToString(dvalue.Tables[0].Rows[row][0])]);

                                                        if (checkval == true)
                                                        {
                                                            balvaluenew = Convert.ToString(grdStudentReport.Rows[i].Cells[columnvalue + 4].Text);
                                                        }
                                                        else
                                                        {
                                                            balvaluenew = Convert.ToString(grdStudentReport.Rows[i].Cells[columnvalue + 5].Text);
                                                        }
                                                        // string balvaluenew = Convert.ToString(FpSpread1.Sheets[0].Cells[i, (columnvalue + 5)].Text);
                                                        if (balvaluenew.Trim() != "")
                                                        {
                                                            bal = bal + Convert.ToInt32(balvaluenew);
                                                        }
                                                    }
                                                }
                                                balvalue = Convert.ToString(bal);
                                            }
                                            double BalVal = 0;
                                            double.TryParse(balvalue, out BalVal);
                                            if (strtext == "")
                                                strtext = Convert.ToString(Math.Round(BalVal, 2) + ".00");
                                            else
                                                strtext = strtext + "|" + Convert.ToString(Math.Round(BalVal, 2) + ".00");
                                        }
                                    }
                                }
                                else
                                {
                                    string totalamount = "";
                                    string balvalue = "";
                                    if (strhedvalue.Length > 0)
                                    {
                                        for (int k = 0; k < strhedvalue.Length; k++)
                                        {
                                            heavalue = strhedvalue[k].ToString();

                                            string selectqueryvalue = "select distinct HeaderFK  from FS_ChlGroupHeaderSettings  where ChlGroupHeader ='" + heavalue + "'";
                                            DataSet dvalue = d2.select_method_wo_parameter(selectqueryvalue, "Text");
                                            if (dvalue.Tables[0].Rows.Count > 0)
                                            {
                                                int bal = 0;

                                                for (int row = 0; row < dvalue.Tables[0].Rows.Count; row++)
                                                {
                                                    int columnvalue = Convert.ToInt32(checkhash[Convert.ToString(dvalue.Tables[0].Rows[row][0])]);
                                                    if (checkval == true)
                                                    {
                                                        balvaluenew = Convert.ToString(grdStudentReport.Rows[i].Cells[columnvalue + 4].Text);
                                                    }
                                                    else
                                                    {
                                                        balvaluenew = Convert.ToString(grdStudentReport.Rows[i].Cells[columnvalue + 5].Text);
                                                    }
                                                    if (balvaluenew.Trim() != "")
                                                    {
                                                        bal = bal + Convert.ToInt32(balvaluenew);
                                                    }
                                                }
                                                balvalue = Convert.ToString(bal);
                                            }

                                            if (totalamount == "")
                                            {
                                                totalamount = Convert.ToString(balvalue);
                                            }
                                            else
                                            {
                                                totalamount = totalamount + Convert.ToString(balvalue);
                                            }
                                            //if (strtext == "")
                                            //{
                                            //    strtext = Convert.ToString(Math.Round(Convert.ToDouble(balvalue), 2) + ".00");
                                            //}
                                            //else
                                            //{
                                            //    strtext = strtext + "|" + Convert.ToString(Math.Round(Convert.ToDouble(balvalue), 2) + ".00");
                                            //}

                                        }
                                        strtext = strtext + "|" + Convert.ToString(Math.Round(Convert.ToDouble(totalamount), 2) + ".00");
                                    }
                                }
                                if (strtext.Trim() != "")
                                {
                                    strtext = strtext + "|0.00";
                                    strtext = strtext + "\r\n";
                                }
                            }
                        }
                        if (strtext.Trim() != "")
                        {
                            if (File.Exists(szPathnew))
                            {
                                using (StreamWriter sw = new StreamWriter(szPathnew))
                                {
                                    sw.Write("" + strtext + "");
                                }
                            }
                        }
                        Response.ClearHeaders();
                        Response.AddHeader("Content-Disposition", "attachment; filename=" + appPath);
                        Response.ContentType = "application/txt";
                        Response.WriteFile(appPath + szPath);
                        Response.End();
                    }
                }
            }
        }
    }

    #endregion

    public void imagebtnpopsscode_Click(object sender, EventArgs e)
    {
        pageset.Visible = false;
    }

    public void btn_pageset_Click(object sender, EventArgs e)
    {
        pageset.Visible = true;
        btn_plus.Enabled = false;
        ddl_group.Enabled = false;
        btn_minus.Enabled = false;
        txt_pgtxt.Text = "";
        bindsem1();
        loadstream();
        loadcourse();
        loadheader();
        loadfield();
    }

    public void ddl_selpagttl_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    #region btnsave
    public void btn_save_Click(object sender, EventArgs e)
    {
        string strtxt = txt_pgtxt.Text.ToString();

        string degrcode = "";

        string headvalue = "";
        for (int i = 0; i < lb_hdr.Items.Count; i++)
        {

            if (headvalue == "")
            {
                headvalue = lb_hdr.Items[i].Text.ToString();
            }
            else
            {
                headvalue = headvalue + "," + "" + lb_hdr.Items[i].Text.ToString() + "";
            }

        }

        string selfield = "";
        for (int i = 0; i < chkl_field.Items.Count; i++)
        {
            if (chkl_field.Items[i].Selected == true)
            {
                if (selfield == "")
                {
                    selfield = chkl_field.Items[i].Text.ToString();
                }
                else
                {
                    selfield = selfield + "," + "" + chkl_field.Items[i].Text.ToString() + "";
                }
            }
        }
        int totwise = 0;
        if (chk_total.Checked == true)
        {
            totwise = 1;
        }

        int pagecode = 0;
        int settype = 0;

        string strsem = "";
        int save = 0;

        for (int ikj = 0; ikj < chkl_course.Items.Count; ikj++)
        {
            if (chkl_course.Items[ikj].Selected == true)
            {
                degrcode = chkl_course.Items[ikj].Value.ToString();

                for (int i = 0; i < chkl_sema.Items.Count; i++)
                {
                    if (chkl_sema.Items[i].Selected == true)
                    {
                        if (strsem == "")
                        {
                            strsem = chkl_sema.Items[i].Value.ToString();
                            //string insqry = "insert into FM_ChlBankPrintSettings(PageCode,DegreeCode,Semester,ChlGroupHeader,Field,TextValue,SettingType,Totalwise,CollegeCode)values('" + pagecode + "','" + degrcode + "','" + strsem + "','" + headvalue + "','" + selfield + "','" + strtxt.ToUpper() + "','" + settype + "','" + totwise + "','" + collegecode1 + "')";
                            string insqry = " if exists (select * from FM_ChlBankPrintSettings where DegreeCode ='" + degrcode + "' and SettingType ='" + settype + "' and CollegeCode='" + collegecode1 + "' and FeeCategory='" + strsem + "') update FM_ChlBankPrintSettings set PageCode='" + pagecode + "',ChlGroupHeader='" + headvalue + "',Field='" + selfield + "',TextValue='" + strtxt.ToUpper() + "',IsTotalwise='" + totwise + "' where DegreeCode ='" + degrcode + "' and SettingType ='" + settype + "' and CollegeCode='" + collegecode1 + "' and FeeCategory='" + strsem + "' else insert into FM_ChlBankPrintSettings(PageCode,DegreeCode,FeeCategory,ChlGroupHeader,Field,TextValue,SettingType,IsTotalwise,CollegeCode)values('" + pagecode + "','" + degrcode + "','" + strsem + "','" + headvalue + "','" + selfield + "','" + strtxt.ToUpper() + "','" + settype + "','" + totwise + "','" + collegecode1 + "')";
                            int ins = d2.update_method_wo_parameter(insqry, "Text");
                            save++;
                        }
                        strsem = "";
                    }
                }
            }
        }

        if (save > 0)
        {
            imgdiv2.Visible = true;
            lbl_alert.Visible = true;
            lbl_alert.Text = "Saved Successfully";
            // pageset.Visible = false;

        }

    }
    #endregion

    public void btn_del_Click(object sender, EventArgs e)
    {

    }

    public void btn_exit_Click(object sender, EventArgs e)
    {
        pageset.Visible = false;
    }

    public void btnminus_Click(object sender, EventArgs e)
    {
    }

    public void btnplus_Click(object sender, EventArgs e)
    {
    }

    //public void cb_column_CheckedChanged(object sender, EventArgs e)
    //{
    //    if (cb_column.Checked == true)
    //    {
    //        for (int i = 0; i < cblcolumnorder.Items.Count; i++)
    //        {
    //            cblcolumnorder.Items[i].Selected = true;
    //        }
    //    }
    //    else
    //    {
    //        for (int i = 0; i < cblcolumnorder.Items.Count; i++)
    //        {
    //            cblcolumnorder.Items[i].Selected = false;
    //        }
    //    }
    //}

    public void lb_Click(object sender, EventArgs e)
    {
    }

    protected void btnExcel_Click(object sender, EventArgs e)
    {
        try
        {
            string reportname = txtexcelname.Text;
            if (reportname.ToString().Trim() != "")
            {
                if (rb_dailydetail.Checked == true)
                {
                    d2.printexcelreportgrid(GrdDailyDetail, reportname);
                    lblvalidation1.Visible = false;
                }
                else
                {
                    if (rb_header.Checked == true)
                    {
                        if (Convert.ToString(ViewState["stud"]) == "6")
                        {
                            d2.printexcelreportgrid(GrdStud, reportname);
                            lblvalidation1.Visible = false;
                        }
                        else if (Convert.ToString(ViewState["sem"]) == "5")
                        {
                            d2.printexcelreportgrid(GrdSem, reportname);
                            //lblvalidation1.Visible = false;
                        }
                        else if (Convert.ToString(ViewState["dept"]) == "4")
                        {
                            d2.printexcelreportgrid(GrdDept, reportname);
                            lblvalidation1.Visible = false;
                        }
                        else if (Convert.ToString(ViewState["degree"]) == "3")
                        {
                            d2.printexcelreportgrid(GrdDegree, reportname);
                            lblvalidation1.Visible = false;
                        }
                        else if (Convert.ToString(ViewState["batch"]) == "2")
                        {
                            d2.printexcelreportgrid(GrdBatch, reportname);
                            lblvalidation1.Visible = false;
                        }
                        else if (Convert.ToString(ViewState["ledger"]) == "1")
                        {
                            d2.printexcelreportgrid(Grdledger, reportname);
                            lblvalidation1.Visible = false;
                        }
                        else if (Convert.ToString(ViewState["header"]) == "0")
                        {
                            d2.printexcelreportgrid(grdStudentReport, reportname);
                            lblvalidation1.Visible = false;
                        }
                    }
                    else
                    {
                        d2.printexcelreportgrid(grdStudentReport, reportname);
                        lblvalidation1.Visible = false;
                    }
                }

            }
            else
            {
                if (rb_header.Checked == true)
                {
                    lblvalidation1.Text = "Please Enter Your Header Report Name";
                    lblvalidation1.Visible = true;
                    txtexcelname.Focus();
                }
                else if (rb_ledger.Checked == true)
                {
                    lblvalidation1.Text = "Please Enter Your Ledger Report Name";
                    lblvalidation1.Visible = true;
                    txtexcelname.Focus();
                }
                else if (rb_batch.Checked == true)
                {
                    lblvalidation1.Text = "Please Enter Your Batch Year Report Name";
                    lblvalidation1.Visible = true;
                    txtexcelname.Focus();
                }
                else if (rb_degree.Checked == true)
                {
                    lblvalidation1.Text = "Please Enter Your Degree Report Name";
                    lblvalidation1.Visible = true;
                    txtexcelname.Focus();
                }
                else if (rb_dept.Checked == true)
                {
                    if (rbdeptcommon.Checked == true)
                    {
                        lblvalidation1.Text = "Please Enter Your Department-Common Report Name";
                        lblvalidation1.Visible = true;
                        txtexcelname.Focus();
                    }
                    else if (rbdeptdetail.Checked == true)
                    {
                        if (rbdeptyear.Checked == true)
                        {
                            lblvalidation1.Text = "Please Enter Your Department-YearWise Report Name";
                            lblvalidation1.Visible = true;
                            txtexcelname.Focus();
                        }
                        if (rbdepthead.Checked == true)
                        {
                            lblvalidation1.Text = "Please Enter Your Department-HeaderWise Report Name";
                            lblvalidation1.Visible = true;
                            txtexcelname.Focus();
                        }
                        if (rbdeptledg.Checked == true)
                        {
                            lblvalidation1.Text = "Please Enter Your Department-LedgerWise Report Name";
                            lblvalidation1.Visible = true;
                            txtexcelname.Focus();
                        }
                    }
                }
                else if (rb_sem.Checked == true)
                {
                    lblvalidation1.Text = "Please Enter Your Semester Report Name";
                    lblvalidation1.Visible = true;
                    txtexcelname.Focus();
                }
                else if (rb_studentwise.Checked == true)
                {
                    if (rb_common.Checked == true)
                    {
                        lblvalidation1.Text = "Please Enter Your Common Report Name";
                        lblvalidation1.Visible = true;
                        txtexcelname.Focus();
                    }
                    else if (rb_detail.Checked == true)
                    {
                        if (rb_hori.Checked == true)
                        {
                            if (rbstudhed.Checked == true)
                            {
                                lblvalidation1.Text = "Please Enter Your Detailwise-Horizontal-Header Report Name";
                                lblvalidation1.Visible = true;
                                txtexcelname.Focus();
                            }
                            else
                            {
                                lblvalidation1.Text = "Please Enter Your Detailwise-Horizontal-Ledger Report Name";
                                lblvalidation1.Visible = true;
                                txtexcelname.Focus();
                            }
                        }
                        else if (rb_vert.Checked == true)
                        {
                            if (rbstudhed.Checked == true)
                            {
                                if (rbstudhed.Checked == true)
                                {
                                    lblvalidation1.Text = "Please Enter Your Detailwise-Vertical-Header Report Name";
                                    lblvalidation1.Visible = true;
                                    txtexcelname.Focus();
                                }
                                else
                                {
                                    lblvalidation1.Text = "Please Enter Your Detailwise-Vertical-Ledger Report Name";
                                    lblvalidation1.Visible = true;
                                    txtexcelname.Focus();
                                }
                            }
                            else
                            {
                            }
                        }
                    }
                }
                else if (rb_dailydetail.Checked == true)
                {
                    lblvalidation1.Text = "Please Enter Your Daily Deails Report Name";
                    lblvalidation1.Visible = true;
                    txtexcelname.Focus();
                }
                else if (rb_others.Checked == true)
                {
                    if (rbstaff.Checked == true)
                    {
                        lblvalidation1.Text = "Please Enter Your Others-Staffs Report Name";
                        lblvalidation1.Visible = true;
                        txtexcelname.Focus();
                    }
                    if (rbvendor.Checked == true)
                    {
                        lblvalidation1.Text = "Please Enter Your Others-Vendors Report Name";
                        lblvalidation1.Visible = true;
                        txtexcelname.Focus();
                    }
                    if (rbothers.Checked == true)
                    {
                        lblvalidation1.Text = "Please Enter Your Others-Others Report Name";
                        lblvalidation1.Visible = true;
                        txtexcelname.Focus();
                    }
                }
            }
        }
        catch
        {
        }
    }

    public override void VerifyRenderingInServerForm(System.Web.UI.Control control)
    { }

    public void chkl_ledgercolorder_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    public void lnk_ledgercol_Click(object sender, EventArgs e)
    {
    }

    public void btn_ledgercolor_Click(object sender, EventArgs e)
    {
    }

    public void btn_batcolorder_Click(object sender, EventArgs e)
    {
    }

    public void lnk_batcolorder_Click(object sender, EventArgs e)
    {
    }

    public void chkl_batchcolorder_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    public void lnk_degcolorder_Click(object sender, EventArgs e)
    {
    }

    public void chkl_degcolorder_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    public void btn_degcolorder_Click(object sender, EventArgs e)
    {
    }

    public void lnk_deptcolorderr_Click(object sender, EventArgs e)
    {
    }

    public void chkl_deptcolorder_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    public void btn_semcolorder_Click(object sender, EventArgs e)
    {
    }

    public void lnk_semcolorder_Click(object sender, EventArgs e)
    {
    }

    public void chkl_semcolorder_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    public void chk_studcolorder_CheckedChanged(object sender, EventArgs e)
    {
    }

    public void lnk_studcolorder_Click(object sender, EventArgs e)
    {
    }

    public void chkl_studcolorder_SelectedIndexChanged(object sender, EventArgs e)
    {
    }

    public void btn_fpled_Click(object sender, EventArgs e)
    {
        string degreedetails = "";
        string pagename = "";
        degreedetails = "Header/Ledger Report";
        pagename = "StudentfeeAllotReport.aspx";
        string ss = null;
        Printcontrolhed.loadspreaddetails(Grdledger, pagename, degreedetails, 0, ss);
        //Printcontrolhed.loadspreaddetails(fpledger, pagename, degreedetails);
        Printcontrolhed.Visible = true;
    }

    public void btn_fpbat_Click(object sender, EventArgs e)
    {
        string degreedetails = "";
        string pagename = "";
        degreedetails = "Header/Ledger/Batch Report";
        pagename = "StudentfeeAllotReport.aspx";
        string ss = null;
        Printcontrolhed.loadspreaddetails(GrdBatch, pagename, degreedetails, 0, ss);
        //Printcontrolhed.loadspreaddetails(fpbatch, pagename, degreedetails);
        Printcontrolhed.Visible = true;
    }

    public void btn_fpdeg_Click(object sender, EventArgs e)
    {
        string degreedetails = "";
        string pagename = "";
        degreedetails = "Header/Ledger/Batch/Degree Report";
        pagename = "StudentfeeAllotReport.aspx";
        string ss = null;
        Printcontrolhed.loadspreaddetails(GrdDegree, pagename, degreedetails, 0, ss);
        //Printcontrolhed.loadspreaddetails(fpdegree, pagename, degreedetails);
        Printcontrolhed.Visible = true;
    }

    public void btn_fpdep_Click(object sender, EventArgs e)
    {
        string degreedetails = "";
        string pagename = "";
        degreedetails = "Header/Ledger/Batch/Degree/Department Report";
        pagename = "StudentfeeAllotReport.aspx";
        string ss = null;
        Printcontrolhed.loadspreaddetails(GrdDept, pagename, degreedetails, 0, ss);
        // Printcontrolhed.loadspreaddetails(fpdept, pagename, degreedetails);
        Printcontrolhed.Visible = true;
    }

    public void btn_fpsema_Click(object sender, EventArgs e)
    {
        string degreedetails = "";
        string pagename = "";
        degreedetails = "Header/Ledger/Batch/Degree/Department/Semaster Report";
        pagename = "StudentfeeAllotReport.aspx";
        //Printcontrolhed.loadspreaddetails(fpsem, pagename, degreedetails);
        Printcontrolhed.Visible = true;
    }

    public void btn_fpstud_Click(object sender, EventArgs e)
    {
        string degreedetails = "";
        string pagename = "";
        degreedetails = "Header/Ledger/Batch/Degree/Department/Semaster/Student Report";
        pagename = "StudentfeeAllotReport.aspx";
        // Printcontrolhed.loadspreaddetails(fpstudcell, pagename, degreedetails);
        Printcontrolhed.Visible = true;
    }

    //protected void txt_fromdate_Textchanged(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        lbl_error1.Visible = false;
    //        string fromdate = "";
    //        string todate = "";
    //        fromdate = txt_fromdate.Text;
    //        todate = txt_todate.Text;
    //        if (fromdate != "" && fromdate != null && todate != "" && todate != null)
    //        {
    //            string[] spiltfrom = fromdate.Split('/');
    //            string[] spitto = todate.Split('/');
    //            DateTime from = Convert.ToDateTime(spiltfrom[1] + '/' + spiltfrom[0] + '/' + spiltfrom[2]);
    //            DateTime to = Convert.ToDateTime(spitto[1] + '/' + spitto[0] + '/' + spitto[2]);
    //            if (from > to)
    //            {
    //                lbl_error1.Visible = true;
    //                lbl_error1.Text = "Please Enter To Date Greater Than From Date";
    //                grdStudentReport.Visible = false;
    //                rptprint.Visible = false;
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        //lbl_error1.Visible = true;
    //        //lbl_error1.Text = ex.ToString();
    //    }
    //}
    //protected void txt_todate_Textchanged(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        lbl_error1.Visible = false;
    //        string fromdate = "";
    //        string todate = "";
    //        fromdate = txt_fromdate.Text;
    //        todate = txt_todate.Text;
    //        if (fromdate != "" && fromdate != null && todate != "" && todate != null)
    //        {
    //            string[] spiltfrom = fromdate.Split('/');
    //            string[] spitto = todate.Split('/');
    //            DateTime from = Convert.ToDateTime(spiltfrom[1] + '/' + spiltfrom[0] + '/' + spiltfrom[2]);
    //            DateTime to = Convert.ToDateTime(spitto[1] + '/' + spitto[0] + '/' + spitto[2]);

    //            string todate1 = DateTime.Now.ToString("dd/MM/yyyy");
    //            string[] todate2 = todate1.Split('/');
    //            DateTime todate3 = Convert.ToDateTime(todate2[1] + '/' + todate2[0] + '/' + todate2[2]);


    //            if (from > to)// && to <= todate3
    //            {
    //                lbl_error1.Visible = true;
    //                lbl_error1.Text = "Please Enter To Date Grater Than From Date";
    //                grdStudentReport.Visible = false;
    //                //dat.Visible = false;                    
    //                //dat.Visible = false;
    //                rptprint.Visible = false;
    //            }

    //            if (to > todate3)
    //            {
    //                lbl_error1.Visible = true;
    //                ////lbl_errorsearch1.Visible = false;
    //                lbl_error1.Text = "Don't Enter Future Date";
    //                grdStudentReport.Visible = false;
    //                rptprint.Visible = false;
    //            }

    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        //lbl_error.Visible = true;
    //        //lbl_error.Text = ex.ToString();
    //    }
    //}

    protected void chk_total_OnCheckedChanged(object sender, EventArgs e)
    {
    }

    protected void chkpaid_OnCheckedChanged(object sender, EventArgs e)
    {
        if (chkpaid.Checked == true)
        {
            rb_paid.Enabled = true;
            tobepaid.Enabled = true;
            rb_paid.Checked = false;
            tobepaid.Checked = false;
        }
        else
        {
            rb_paid.Enabled = false;
            tobepaid.Enabled = false;
            rb_paid.Checked = false;
            tobepaid.Checked = false;
        }
    }

    protected void rb_paid_OnCheckedChanged(object sender, EventArgs e)
    {
    }

    protected void tobepaid_OnCheckedChanged(object sender, EventArgs e)
    {
    }

    protected void chk_datewise_OnCheckedChanged(object sender, EventArgs e)
    {
        if (chk_datewise.Checked == true)
        {
            txt_fromdate.Enabled = true;
            txt_todate.Enabled = true;
        }
        else
        {
            txt_fromdate.Enabled = false;
            txt_todate.Enabled = false;
        }
    }

    public void loadsetting()
    {
        try
        {
            ListItem list1 = new ListItem("Roll No", "0");
            ListItem list2 = new ListItem("Reg No", "1");
            ListItem list3 = new ListItem("Admission No", "2");
            ListItem list4 = new ListItem("App No", "3");
            ListItem list5 = new ListItem("Name", "4");

            rbl_rollno.Items.Clear();
            string insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollNo' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";

            int save1 = Convert.ToInt32(d2.GetFunction(insqry1));

            if (save1 == 1)
            {
                rbl_rollno.Items.Add(list1);
            }


            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRegNo' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                rbl_rollno.Items.Add(list2);
            }

            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollAdmit' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                rbl_rollno.Items.Add(list3);
            }

            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptAppFormNo' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));

            if (save1 == 1)
            {
                rbl_rollno.Items.Add(list4);
            }
            if (rbl_rollno.Items.Count == 0)
            {
                rbl_rollno.Items.Add(list1);
            }
            rbl_rollno.Items.Add(list5);
            switch (Convert.ToUInt32(rbl_rollno.SelectedItem.Value))
            {
                case 0:
                    txt_roll.Attributes.Add("placeholder", "Roll No");
                    chosedmode = 0;
                    break;
                case 1:
                    txt_roll.Attributes.Add("placeholder", "Reg No");
                    chosedmode = 1;
                    break;
                case 2:
                    txt_roll.Attributes.Add("placeholder", "Admin No");
                    chosedmode = 2;
                    break;
                case 3:
                    txt_roll.Attributes.Add("placeholder", "App No");
                    chosedmode = 3;
                    break;
                case 4:
                    txt_roll.Attributes.Add("placeholder", "");
                    chosedmode = 4;
                    break;
            }



        }
        catch { }
    }

    protected void rbl_rollno_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txt_roll.Text = "";
            switch (Convert.ToUInt32(rbl_rollno.SelectedItem.Value))
            {
                case 0:
                    txt_roll.Attributes.Add("Placeholder", "Roll No");
                    chosedmode = 0;
                    break;
                case 1:
                    txt_roll.Attributes.Add("Placeholder", "Reg No");
                    chosedmode = 1;
                    break;
                case 2:
                    txt_roll.Attributes.Add("Placeholder", "Admin No");
                    chosedmode = 2;
                    break;
                case 3:
                    txt_roll.Attributes.Add("Placeholder", "App No");
                    chosedmode = 3;
                    break;
                case 4:
                    txt_roll.Attributes.Add("Placeholder", "");
                    chosedmode = 4;
                    break;
            }
        }
        catch { }
    }

    #region Common Checkbox and Checkboxlist Event

    private string getCblSelectedValue(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder selectedvalue = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedvalue.Length == 0)
                    {
                        selectedvalue.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        selectedvalue.Append("','" + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch { cblSelected.Items.Clear(); }
        return selectedvalue.ToString();
    }

    private string getCblSelectedText(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder selectedText = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedText.Length == 0)
                    {
                        selectedText.Append(Convert.ToString(cblSelected.Items[sel].Text));
                    }
                    else
                    {
                        selectedText.Append("','" + Convert.ToString(cblSelected.Items[sel].Text));
                    }
                }
            }
        }
        catch { cblSelected.Items.Clear(); }
        return selectedText.ToString();
    }

    private void CallCheckboxChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dispst, string deft)
    {
        try
        {
            int sel = 0;
            string name = "";
            txt.Text = deft;
            if (cb.Checked == true)
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = true;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
                if (cbl.Items.Count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dispst + "(" + cbl.Items.Count + ")";
                }
            }
            else
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = false;
                }
                txt.Text = deft;
            }
        }
        catch { }
    }

    private void CallCheckboxListChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dipst, string deft)
    {
        try
        {
            int sel = 0;
            int count = 0;
            string name = "";
            cb.Checked = false;
            for (sel = 0; sel < cbl.Items.Count; sel++)
            {
                if (cbl.Items[sel].Selected == true)
                {
                    count++;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
            }
            if (count > 0)
            {
                if (count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dipst + "(" + count + ")";
                }
                if (cbl.Items.Count == count)
                {
                    cb.Checked = true;
                }
            }
        }
        catch { }
    }

    #endregion

    #region rbdailydetail

    public void loaddailycolumnorder()
    {
        if (rb_dailydetail.Checked == true)
        {
            if (rbcumulacr.Checked == true)
            {
                cbldaily.Items.Clear();
                cbldaily.Items.Add(new ListItem("Date", "1"));
                cbldaily.Items.Add(new ListItem("Reciept No", "2"));
                cbldaily.Items.Add(new ListItem("Name", "3"));
                cbldaily.Items.Add(new ListItem("Roll No", "4"));
                cbldaily.Items.Add(new ListItem("Reg No", "5"));
                cbldaily.Items.Add(new ListItem("Admission No", "6"));
                cbldaily.Items.Add(new ListItem(lbldept.Text, "7"));
                cbldaily.Items.Add(new ListItem(lblsem.Text, "8"));
                cbldaily.Items.Add(new ListItem("Narration", "9"));
                cbldaily.Items.Add(new ListItem("Paymode", "10"));
                cbldaily.Items.Add(new ListItem("DD/Cheque/Card No", "11"));
                cbldaily.Items.Add(new ListItem("Bank Name", "12"));
                cbldaily.Items.Add(new ListItem("Paid", "13"));
                cbldaily.Items.Add(new ListItem("Excess Amount", "14"));
                // cbldaily.Items.Add(new ListItem("Dollar", "12"));
            }
            else
            {
                if (rbacrhed.Checked == true)
                {
                    cbldaily.Items.Clear();
                    cbldaily.Items.Add(new ListItem("Date", "1"));
                    cbldaily.Items.Add(new ListItem("Reciept No", "2"));
                    cbldaily.Items.Add(new ListItem("Name", "3"));
                    cbldaily.Items.Add(new ListItem("Roll No", "4"));
                    cbldaily.Items.Add(new ListItem("Reg No", "5"));
                    cbldaily.Items.Add(new ListItem("Admission No", "6"));
                    cbldaily.Items.Add(new ListItem(lbldept.Text, "7"));
                    cbldaily.Items.Add(new ListItem(lblsem.Text, "8"));
                    cbldaily.Items.Add(new ListItem("Narration", "9"));
                    cbldaily.Items.Add(new ListItem("Paymode", "10"));
                    cbldaily.Items.Add(new ListItem("DD/Cheque/Card No", "11"));
                    cbldaily.Items.Add(new ListItem("Bank Name", "12"));
                    cbldaily.Items.Add(new ListItem("Header", "13"));
                    cbldaily.Items.Add(new ListItem("Paid", "14"));
                    cbldaily.Items.Add(new ListItem("Excess Amount", "15"));
                }
                else
                {
                    cbldaily.Items.Clear();
                    cbldaily.Items.Add(new ListItem("Date", "1"));
                    cbldaily.Items.Add(new ListItem("Reciept No", "2"));
                    cbldaily.Items.Add(new ListItem("Name", "3"));
                    cbldaily.Items.Add(new ListItem("Roll No", "4"));
                    cbldaily.Items.Add(new ListItem("Reg No", "5"));
                    cbldaily.Items.Add(new ListItem("Admission No", "6"));
                    cbldaily.Items.Add(new ListItem(lbldept.Text, "7"));
                    cbldaily.Items.Add(new ListItem(lblsem.Text, "8"));
                    cbldaily.Items.Add(new ListItem("Narration", "9"));
                    cbldaily.Items.Add(new ListItem("Paymode", "10"));
                    cbldaily.Items.Add(new ListItem("DD/Cheque/Card No", "11"));
                    cbldaily.Items.Add(new ListItem("Bank Name", "12"));
                    cbldaily.Items.Add(new ListItem("Ledger", "13"));
                    cbldaily.Items.Add(new ListItem("Paid", "14"));
                    cbldaily.Items.Add(new ListItem("Excess Amount", "15"));
                }
            }

        }
    }

    protected void cbdaily_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (cbdaily.Checked == true)
            {
                for (int i = 0; i < cbldaily.Items.Count; i++)
                {
                    cbldaily.Items[i].Selected = true;
                }
            }
            else
            {
                for (int i = 0; i < cbldaily.Items.Count; i++)
                {
                    cbldaily.Items[i].Selected = false;
                }
            }
        }
        catch { }
    }

    protected void cbldaily_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            ArrayList ht = new ArrayList();
            for (int i = 0; i < cbldaily.Items.Count; i++)
            {
                if (cbldaily.Items[i].Selected == true)
                {
                    ht.Add(Convert.ToString(cbldaily.Items[i].Value));
                }
            }
            ViewState["colvalue"] = Convert.ToString(ht);
        }
        catch { }
    }

    #endregion

    protected void chkmem_OnCheckedChanged(object sender, EventArgs e)
    {
        //if (chkmem.Checked == true)
        //{
        //    txtmem.Enabled = true;
        //}
        //else
        //{
        //    txtmem.Enabled = false;
        //}
    }

    protected void chkcomflt_OnCheckedChanged(object sender, EventArgs e)
    {
        if (chkcomflt.Checked == true)
        {
            cblmem.Items.Clear();
            //bindBtch();
            //binddeg();
            //binddept();
            //bindsem();
            //bindsec();
            txt_batch.Enabled = true;
            txt_degree.Enabled = true;
            txt_dept.Enabled = true;
            txt_sem.Enabled = true;
            txt_sect.Enabled = true;
            txtmem.Enabled = false;
            txt_roll.Text = "";
            if (rb_dailydetail.Checked == true || rb_studentwise.Checked == true)
            {
                rbl_rollno.Enabled = true;
                txt_roll.Enabled = true;
                txt_roll.Text = "";
            }

        }
        else
        {
            //cbl_batch.Items.Clear();
            //cbl_degree.Items.Clear();
            //cbl_dept.Items.Clear();
            //cbl_sem.Items.Clear();
            //cbl_sect.Items.Clear();
            txt_batch.Enabled = false;
            txt_degree.Enabled = false;
            txt_dept.Enabled = false;
            txt_sem.Enabled = false;
            txt_sect.Enabled = false;
            txtmem.Enabled = true;
            memtype();
            txt_roll.Text = "";
            if (rb_others.Checked == true)
            {
                txtmem.Enabled = false;
                txt_roll.Text = "";
            }
            else if (rb_dailydetail.Checked == true)
            {
                rbl_rollno.Enabled = false;
                txt_roll.Enabled = false;
                txt_roll.Text = "";
            }
        }
    }

    protected void chkinclude_OnCheckedChanged(object sender, EventArgs e)
    {
        if (chkinclude.Checked == true)
        {
            txtinclude.Enabled = true;
            LoadIncludeSetting();
        }
        else
        {
            txtinclude.Enabled = false;
            cblinclude.Items.Clear();
        }
    }


    public class MyClass : IDisposable
    {
        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing)
                {
                    // called via myClass.Dispose(). 
                    // OK to use any private object references
                }

                disposed = true;
            }
            disposed = true;
        }

        public void Dispose() // Implement IDisposable
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        ~MyClass() // the finalizer
        {
            Dispose(false);
        }
    }

    #region dept acr

    protected void DeptAcr()
    {
        string AcrVal = d2.GetFunction("select value from Master_Settings where settings='Finance Include Department Acronym'  and usercode='" + usercode + "'");
        if (AcrVal == "1")
            deptacr = true;
        else
            deptacr = false;

    }

    protected void UserbasedRights()
    {
        string userrht = d2.GetFunction("select value from Master_Settings where settings='Finance Include User Based Report Settings'  and usercode='" + usercode + "'");
        if (userrht == "1")
            usBasedRights = true;
        else
            usBasedRights = false;

    }

    #endregion

    private void setLabelText()
    {
        string grouporusercode = string.Empty;
        if (Session["group_code"] != null && (Convert.ToString(Session["group_code"]).Trim() != "") && (Convert.ToString(Session["group_code"]).Trim() != "0") && (Convert.ToString(Session["group_code"]).Trim() != "-1"))
        {
            grouporusercode = " group_code=" + Convert.ToString(Session["group_code"]).Trim() + "";
        }
        else if (Session["usercode"] != null)
        {
            grouporusercode = " usercode=" + Convert.ToString(Session["usercode"]).Trim() + "";
        }
        List<Label> lbl = new List<Label>();
        List<byte> fields = new List<byte>();

        lbl.Add(lbl_collegename);
        lbl.Add(lbl_str1);
        lbl.Add(lbldeg);
        lbl.Add(lbldeg1);
        lbl.Add(lbldept);
        lbl.Add(lblsem);
        fields.Add(0);
        fields.Add(1);
        fields.Add(2);
        fields.Add(2);
        fields.Add(3);
        fields.Add(4);

        new HeaderLabelText().setLabels(grouporusercode, ref lbl, fields);

    }

    #region roll,reg,admission setting

    private void RollAndRegSettings()
    {
        try
        {
            DataSet dsl = new DataSet();
            string Master1 = "select * from Master_Settings where usercode=" + Session["usercode"] + "";
            dsl = d2.select_method_wo_parameter(Master1, "text");
            Session["Rollflag"] = "0";
            Session["Regflag"] = "0";
            Session["Admission"] = "0";
            if (dsl.Tables[0].Rows.Count > 0)
            {
                for (int hf = 0; hf < dsl.Tables[0].Rows.Count; hf++)
                {
                    if (dsl.Tables[0].Rows[hf]["settings"].ToString() == "Roll No" && dsl.Tables[0].Rows[hf]["value"].ToString() == "1")
                    {
                        Session["Rollflag"] = "1";
                    }
                    if (dsl.Tables[0].Rows[hf]["settings"].ToString() == "Register No" && dsl.Tables[0].Rows[hf]["value"].ToString() == "1")
                    {
                        Session["Regflag"] = "1";
                    }
                    if (dsl.Tables[0].Rows[hf]["settings"].ToString() == "Admission No" && dsl.Tables[0].Rows[hf]["value"].ToString() == "1")
                    {
                        Session["Admission"] = "1";
                    }
                }
                settingValueRollAndReg(Convert.ToString(Session["Rollflag"]), Convert.ToString(Session["Regflag"]), Convert.ToString(Session["Admission"]));
            }
        }
        catch { }
    }

    private void settingValueRollAndReg(string rollvalue, string regvalue, string addmis)
    {
        // Tuple<byte, byte>
        string rollval = rollvalue;
        string regval = regvalue;
        string addVal = addmis;
        try
        {
            if (rollval != "" && regval != "")
            {
                if (rollval == "0" && regval == "0" && addVal == "0")
                    roll = 0;
                else if (rollval == "1" && regval == "1" && addVal == "1")
                    roll = 1;
                else if (rollval == "1" && regval == "0" && addVal == "0")
                    roll = 2;
                else if (rollval == "0" && regval == "1" && addVal == "0")
                    roll = 3;
                else if (rollval == "0" && regval == "0" && addVal == "1")
                    roll = 4;
                else if (rollval == "1" && regval == "1" && addVal == "0")
                    roll = 5;
                else if (rollval == "0" && regval == "1" && addVal == "1")
                    roll = 6;
                else if (rollval == "1" && regval == "0" && addVal == "1")
                    roll = 7;
            }
        }
        catch { }
        // return new Tuple<byte, byte>(roll,reg);

    }

    #endregion

    // last modified 25.11.2016 sudhagar

    #region Added by saranya on 29/12/2017

    public void getAcademicYear()
    {
        try
        {
            string fnalyr = "";
            // string getfinanceyear = "select distinct convert(nvarchar(15),FinYearStart,103) sdate,convert(nvarchar(15),FinYearEnd,103) edate,FinYearPK from FM_FinYearMaster where CollegeCode in('" + collegecode + "')  order by FinYearPK desc";
            string getfinanceyear = "SELECT distinct ACD_YEAR FROM FT_ACADEMICYEAR AY,FT_ACADEMICYEAR_DETAILED AYD WHERE  AY.ACA_YEAR_PK=AYD.ACA_YEAR_FK  AND  ACD_COLLEGE_CODE IN('" + collegecode1 + "') order by ACD_YEAR desc";
            ds.Dispose();
            ds.Reset();
            ddlAcademic.Items.Clear();
            ds = d2.select_method_wo_parameter(getfinanceyear, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string fdatye = ds.Tables[0].Rows[i]["ACD_YEAR"].ToString();
                    ddlAcademic.Items.Insert(0, new System.Web.UI.WebControls.ListItem(fdatye, fdatye));
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    protected Dictionary<string, string> getOldSettings(string acdYears)
    {
        Dictionary<string, string> htAcademic = new Dictionary<string, string>();
        try
        {
            string settingType = string.Empty;
            if (rblTypeNew.SelectedIndex == 0)
                settingType = "0";
            else if (rblTypeNew.SelectedIndex == 1)
                settingType = "1";
            else if (rblTypeNew.SelectedIndex == 2)
                settingType = "2";
            string collegecode = Convert.ToString(ddl_collegename.SelectedItem.Value);
            string selQ = " SELECT distinct ACD_COLLEGE_CODE,c.collname,ACD_YEAR,ACD_BATCH_YEAR,ACD_FEECATEGORY,t.textval FROM FT_ACADEMICYEAR AY,FT_ACADEMICYEAR_DETAILED AYD,collinfo c,textvaltable t WHERE c.college_code=ay.acd_college_code and AY.ACA_YEAR_PK=AYD.ACA_YEAR_FK and textcriteria='FEECA' and t.textcode=ayd.ACD_FEECATEGORY and t.college_code=ay.ACD_COLLEGE_CODE AND  ACD_COLLEGE_CODE IN('" + collegecode + "') and ACD_YEAR in('" + acdYears + "') and ACD_SETTING_TYPE='" + settingType + "' order by ACD_COLLEGE_CODE  asc,ACD_YEAR desc,ACD_FEECATEGORY asc";
            DataSet dsPrevAMount = da.select_method_wo_parameter(selQ, "Text");
            if (dsPrevAMount.Tables.Count > 0 && dsPrevAMount.Tables[0].Rows.Count > 0)
            {
                DataTable dtAcdYear = dsPrevAMount.Tables[0].DefaultView.ToTable(true, "ACD_YEAR", "ACD_COLLEGE_CODE", "collname");
                DataTable dtBatchYear = dsPrevAMount.Tables[0].DefaultView.ToTable(true, "ACD_YEAR", "ACD_BATCH_YEAR", "ACD_COLLEGE_CODE");
                DataTable dtFeecat = dsPrevAMount.Tables[0].DefaultView.ToTable();
                if (dtAcdYear.Rows.Count > 0)
                {
                    int Sno = 0;
                    for (int row = 0; row < dtAcdYear.Rows.Count; row++)
                    {
                        Sno++;
                        string acdYear = Convert.ToString(dtAcdYear.Rows[row]["ACD_YEAR"]);
                        string clgCode = Convert.ToString(dtAcdYear.Rows[row]["ACD_COLLEGE_CODE"]);
                        dtBatchYear.DefaultView.RowFilter = "ACD_YEAR='" + acdYear + "' and ACD_COLLEGE_CODE='" + clgCode + "'";
                        DataTable dtBatch = dtBatchYear.DefaultView.ToTable();
                        if (dtBatch.Rows.Count > 0)
                        {
                            for (int bat = 0; bat < dtBatch.Rows.Count; bat++)
                            {
                                string acdBatchYear = Convert.ToString(dtBatch.Rows[bat]["ACD_BATCH_YEAR"]);
                                dtFeecat.DefaultView.RowFilter = "ACD_YEAR='" + acdYear + "' and ACD_BATCH_YEAR='" + acdBatchYear + "' and ACD_COLLEGE_CODE='" + clgCode + "'";
                                DataTable dtFee = dtFeecat.DefaultView.ToTable();
                                if (dtFee.Rows.Count > 0)
                                {
                                    StringBuilder sbSem = new StringBuilder();
                                    StringBuilder sbSemStr = new StringBuilder();
                                    for (int fee = 0; fee < dtFee.Rows.Count; fee++)
                                    {
                                        string feecaT = Convert.ToString(dtFee.Rows[fee]["ACD_FEECATEGORY"]);
                                        string feecaTStr = Convert.ToString(dtFee.Rows[fee]["textval"]);
                                        sbSem.Append(feecaT + ",");
                                        // sbSemStr.Append(feecaTStr + ",");
                                    }
                                    if (sbSem.Length > 0)
                                        sbSem.Remove(sbSem.Length - 1, 1);
                                    if (!htAcademic.ContainsKey(clgCode + "$" + acdBatchYear))
                                        htAcademic.Add(clgCode + "$" + acdBatchYear, Convert.ToString(sbSem));
                                    //if (sbSemStr.Length > 0)
                                    //    sbSemStr.Remove(sbSemStr.Length - 1, 1);                              
                                }
                            }
                        }
                    }
                }
            }
        }
        catch { }
        return htAcademic;

    }

    public void cbAcdYear_OnCheckedChanged(object ob, EventArgs e)
    {
        if (cbAcdYear.Checked == true)
        {
            rb_sem.Visible = false;
            rb_studentwise.Visible = false;
            rb_dailydetail.Visible = false;
            rb_others.Visible = false;
        }
        if (cbAcdYear.Checked == false)
        {
            rb_sem.Visible = true;
            rb_studentwise.Visible = true;
            rb_dailydetail.Visible = true;
            rb_others.Visible = true;
        }
    }

    #endregion

    protected Dictionary<string, string> getCurSem()
    {
        Dictionary<string, string> dtcurSem = new Dictionary<string, string>();
        try
        {
            int year = 0;
            int.TryParse(Convert.ToString(DateTime.Now.ToString("yyyy")), out year);
            dtcurSem.Add(Convert.ToString(year), Convert.ToString("1,2"));
            dtcurSem.Add(Convert.ToString(year - 1), Convert.ToString("3,4"));
            dtcurSem.Add(Convert.ToString(year - 2), Convert.ToString("5,6"));
            dtcurSem.Add(Convert.ToString(year - 3), Convert.ToString("7,8"));
            dtcurSem.Add(Convert.ToString(year - 4), Convert.ToString("9,10"));
            dtcurSem.Add(Convert.ToString(year - 5), Convert.ToString("11,12"));
            dtcurSem.Add(Convert.ToString(year - 6), Convert.ToString("12,13"));
            dtcurSem.Add(Convert.ToString(year - 7), Convert.ToString("14,15"));
        }
        catch { }
        return dtcurSem;
    }

    protected Dictionary<string, string> getFeecode(string collegecode)
    {
        Dictionary<string, string> htsem = new Dictionary<string, string>();
        try
        {
            string featDegcode = string.Empty;
            //Convert.ToString(getCblSelectedValue(cbl_dept));
            string type = string.Empty;
            string cbltext = string.Empty;
            d2.featDegreeCode = featDegcode;
            DataSet dsval = d2.loadFeecategory(Convert.ToString(collegecode), usercode, ref type);
            if (dsval.Tables.Count > 0 && dsval.Tables[0].Rows.Count > 0)
            {
                string feecatg = "";
                string cblvalue = "";
                //string selQ = " select textval,textcode from textvaltable where textcriteria='FEECA' and  college_code='" + collegecode + "'";
                //DataSet dsval = d2.select_method_wo_parameter(selQ, "Text");
                if (dsval.Tables.Count > 0 && dsval.Tables[0].Rows.Count > 0)
                {
                    for (int sem = 0; sem < dsval.Tables[0].Rows.Count; sem++)
                    {
                        cblvalue = Convert.ToString(dsval.Tables[0].Rows[sem]["textcode"]);
                        cbltext = Convert.ToString(dsval.Tables[0].Rows[sem]["textval"]);
                        #region
                        if (type == "Semester")
                        {
                            #region semester
                            string[] feesem = cbltext.Split(' ');
                            if (feesem[0] == "1" || feesem[0] == "2")
                            {
                                if (!htsem.ContainsKey("1"))
                                    htsem.Add(Convert.ToString("1"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["1"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("1");
                                    htsem.Add(Convert.ToString("1"), feecatg);
                                }
                            }
                            else if (feesem[0] == "3" || feesem[0] == "4")
                            {
                                if (!htsem.ContainsKey("2"))
                                    htsem.Add(Convert.ToString("2"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["2"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("2");
                                    htsem.Add(Convert.ToString("2"), feecatg);
                                }
                            }
                            else if (feesem[0] == "5" || feesem[0] == "6")
                            {
                                if (!htsem.ContainsKey("3"))
                                    htsem.Add(Convert.ToString("3"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["3"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("3");
                                    htsem.Add(Convert.ToString("3"), feecatg);
                                }
                            }
                            else if (feesem[0] == "7" || feesem[0] == "8")
                            {
                                if (!htsem.ContainsKey("4"))
                                    htsem.Add(Convert.ToString("4"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["4"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("4");
                                    htsem.Add(Convert.ToString("4"), feecatg);
                                }
                            }
                            #endregion
                        }
                        else if (type == "Term")
                        {
                            string[] feesem = cbltext.Split(' ');
                            if (feesem[1] == "1" || feesem[1] == "2" || feesem[1] == "3" || feesem[1] == "4")
                            {
                                if (!htsem.ContainsKey("1"))
                                    htsem.Add(Convert.ToString("1"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["1"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("1");
                                    htsem.Add(Convert.ToString("1"), feecatg);
                                }
                            }
                        }
                        else if (type == "Year")
                        {
                            #region year
                            string[] feesem = cbltext.Split(' ');
                            if (feesem[0] == "1")
                            {
                                if (!htsem.ContainsKey("1"))
                                    htsem.Add(Convert.ToString("1"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["1"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("1");
                                    htsem.Add(Convert.ToString("1"), feecatg);
                                }
                            }
                            if (feesem[0] == "2")
                            {
                                if (!htsem.ContainsKey("2"))
                                    htsem.Add(Convert.ToString("2"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["2"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("2");
                                    htsem.Add(Convert.ToString("2"), feecatg);
                                }
                            }
                            if (feesem[0] == "3")
                            {
                                if (!htsem.ContainsKey("3"))
                                    htsem.Add(Convert.ToString("3"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["3"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("3");
                                    htsem.Add(Convert.ToString("3"), feecatg);
                                }
                            }
                            if (feesem[0] == "4")
                            {
                                if (!htsem.ContainsKey("4"))
                                    htsem.Add(Convert.ToString("4"), Convert.ToString(cblvalue));
                                else
                                {
                                    feecatg = Convert.ToString(htsem["4"]);
                                    feecatg = feecatg + "'" + "," + "'" + cblvalue;
                                    htsem.Remove("4");
                                    htsem.Add(Convert.ToString("4"), feecatg);
                                }
                            }
                            #endregion
                        }
                        #endregion

                    }
                }
            }
            ViewState["feecat"] = htsem;
        }
        catch { }
        return htsem;
    }

    protected string getCurYear(string curSem)
    {
        string curYear = string.Empty;
        try
        {
            switch (curSem)
            {
                case "1":
                case "2":
                case "1,2":
                    curYear = "1";
                    break;
                case "3":
                case "4":
                case "3,4":
                    curYear = "2";
                    break;
                case "5":
                case "6":
                case "5,6":
                    curYear = "3";
                    break;
                case "7":
                case "8":
                case "7,8":
                    curYear = "4";
                    break;
                case "9":
                case "10":
                case "9,10":
                    curYear = "5";
                    break;
            }
        }
        catch { }
        return curYear;
    }

    private double checkSchoolSetting()
    {
        double getVal = 0;
        double.TryParse(Convert.ToString(d2.GetFunction("select  value from Master_Settings where settings='schoolorcollege' and usercode='" + usercode + "'")), out getVal);
        return getVal;
    }

}